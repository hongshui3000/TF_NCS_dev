
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	2002a2d8 	.word	0x2002a2d8
    c004:	00018b05 	.word	0x00018b05
    c008:	0002229d 	.word	0x0002229d
    c00c:	00018b35 	.word	0x00018b35
    c010:	00018b35 	.word	0x00018b35
    c014:	00018b35 	.word	0x00018b35
    c018:	00018b35 	.word	0x00018b35
    c01c:	00018b35 	.word	0x00018b35
	...
    c02c:	0001894d 	.word	0x0001894d
    c030:	00018b35 	.word	0x00018b35
    c034:	00000000 	.word	0x00000000
    c038:	00018905 	.word	0x00018905
    c03c:	00022285 	.word	0x00022285

0000c040 <_irq_vector_table>:
    c040:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c050:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c060:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c070:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c080:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c090:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c0a0:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c0b0:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c0c0:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c0d0:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c0e0:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c0f0:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c100:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c110:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c120:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c130:	00018ac5 00018ac5 00018ac5 00018ac5     ................
    c140:	00018ac5                                ....

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	00021408 00000001 0000c000 0000c000     ................
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <WindowFillConfigWithDefaults>:
    c240:	b480      	push	{r7}
    c242:	b083      	sub	sp, #12
    c244:	af00      	add	r7, sp, #0
    c246:	6078      	str	r0, [r7, #4]
    c248:	687b      	ldr	r3, [r7, #4]
    c24a:	2219      	movs	r2, #25
    c24c:	601a      	str	r2, [r3, #0]
    c24e:	687b      	ldr	r3, [r7, #4]
    c250:	220a      	movs	r2, #10
    c252:	605a      	str	r2, [r3, #4]
    c254:	bf00      	nop
    c256:	370c      	adds	r7, #12
    c258:	46bd      	mov	sp, r7
    c25a:	bc80      	pop	{r7}
    c25c:	4770      	bx	lr

0000c25e <WindowPopulateState>:
    c25e:	b5b0      	push	{r4, r5, r7, lr}
    c260:	b088      	sub	sp, #32
    c262:	af00      	add	r7, sp, #0
    c264:	60f8      	str	r0, [r7, #12]
    c266:	60b9      	str	r1, [r7, #8]
    c268:	607a      	str	r2, [r7, #4]
    c26a:	68fb      	ldr	r3, [r7, #12]
    c26c:	681b      	ldr	r3, [r3, #0]
    c26e:	687a      	ldr	r2, [r7, #4]
    c270:	fb02 f303 	mul.w	r3, r2, r3
    c274:	4a6c      	ldr	r2, [pc, #432]	; (c428 <WindowPopulateState+0x1ca>)
    c276:	fba2 2303 	umull	r2, r3, r2, r3
    c27a:	099a      	lsrs	r2, r3, #6
    c27c:	68bb      	ldr	r3, [r7, #8]
    c27e:	601a      	str	r2, [r3, #0]
    c280:	68fb      	ldr	r3, [r7, #12]
    c282:	685b      	ldr	r3, [r3, #4]
    c284:	687a      	ldr	r2, [r7, #4]
    c286:	fb02 f303 	mul.w	r3, r2, r3
    c28a:	4a67      	ldr	r2, [pc, #412]	; (c428 <WindowPopulateState+0x1ca>)
    c28c:	fba2 2303 	umull	r2, r3, r2, r3
    c290:	099a      	lsrs	r2, r3, #6
    c292:	68bb      	ldr	r3, [r7, #8]
    c294:	609a      	str	r2, [r3, #8]
    c296:	68bb      	ldr	r3, [r7, #8]
    c298:	681b      	ldr	r3, [r3, #0]
    c29a:	005b      	lsls	r3, r3, #1
    c29c:	4618      	mov	r0, r3
    c29e:	f014 ff21 	bl	210e4 <malloc>
    c2a2:	4603      	mov	r3, r0
    c2a4:	461a      	mov	r2, r3
    c2a6:	68bb      	ldr	r3, [r7, #8]
    c2a8:	605a      	str	r2, [r3, #4]
    c2aa:	68bb      	ldr	r3, [r7, #8]
    c2ac:	685b      	ldr	r3, [r3, #4]
    c2ae:	2b00      	cmp	r3, #0
    c2b0:	d109      	bne.n	c2c6 <WindowPopulateState+0x68>
    c2b2:	4b5e      	ldr	r3, [pc, #376]	; (c42c <WindowPopulateState+0x1ce>)
    c2b4:	681b      	ldr	r3, [r3, #0]
    c2b6:	68db      	ldr	r3, [r3, #12]
    c2b8:	2227      	movs	r2, #39	; 0x27
    c2ba:	2101      	movs	r1, #1
    c2bc:	485c      	ldr	r0, [pc, #368]	; (c430 <WindowPopulateState+0x1d2>)
    c2be:	f014 ff03 	bl	210c8 <fwrite>
    c2c2:	2300      	movs	r3, #0
    c2c4:	e0a5      	b.n	c412 <WindowPopulateState+0x1b4>
    c2c6:	68bb      	ldr	r3, [r7, #8]
    c2c8:	681b      	ldr	r3, [r3, #0]
    c2ca:	4618      	mov	r0, r3
    c2cc:	f007 fd9e 	bl	13e0c <__aeabi_ui2f>
    c2d0:	4603      	mov	r3, r0
    c2d2:	4618      	mov	r0, r3
    c2d4:	f007 f964 	bl	135a0 <__aeabi_f2d>
    c2d8:	4602      	mov	r2, r0
    c2da:	460b      	mov	r3, r1
    c2dc:	a150      	add	r1, pc, #320	; (adr r1, c420 <WindowPopulateState+0x1c2>)
    c2de:	e9d1 0100 	ldrd	r0, r1, [r1]
    c2e2:	f007 fadf 	bl	138a4 <__aeabi_ddiv>
    c2e6:	4602      	mov	r2, r0
    c2e8:	460b      	mov	r3, r1
    c2ea:	4610      	mov	r0, r2
    c2ec:	4619      	mov	r1, r3
    c2ee:	f007 fc87 	bl	13c00 <__aeabi_d2f>
    c2f2:	4603      	mov	r3, r0
    c2f4:	61bb      	str	r3, [r7, #24]
    c2f6:	2300      	movs	r3, #0
    c2f8:	61fb      	str	r3, [r7, #28]
    c2fa:	e051      	b.n	c3a0 <WindowPopulateState+0x142>
    c2fc:	69b8      	ldr	r0, [r7, #24]
    c2fe:	f007 f94f 	bl	135a0 <__aeabi_f2d>
    c302:	4604      	mov	r4, r0
    c304:	460d      	mov	r5, r1
    c306:	69f8      	ldr	r0, [r7, #28]
    c308:	f007 f938 	bl	1357c <__aeabi_i2d>
    c30c:	f04f 0200 	mov.w	r2, #0
    c310:	4b48      	ldr	r3, [pc, #288]	; (c434 <WindowPopulateState+0x1d6>)
    c312:	f006 ffe7 	bl	132e4 <__adddf3>
    c316:	4602      	mov	r2, r0
    c318:	460b      	mov	r3, r1
    c31a:	4620      	mov	r0, r4
    c31c:	4629      	mov	r1, r5
    c31e:	f007 f997 	bl	13650 <__aeabi_dmul>
    c322:	4602      	mov	r2, r0
    c324:	460b      	mov	r3, r1
    c326:	4610      	mov	r0, r2
    c328:	4619      	mov	r1, r3
    c32a:	f012 f889 	bl	1e440 <cos>
    c32e:	f04f 0200 	mov.w	r2, #0
    c332:	4b40      	ldr	r3, [pc, #256]	; (c434 <WindowPopulateState+0x1d6>)
    c334:	f007 f98c 	bl	13650 <__aeabi_dmul>
    c338:	4602      	mov	r2, r0
    c33a:	460b      	mov	r3, r1
    c33c:	f04f 0000 	mov.w	r0, #0
    c340:	493c      	ldr	r1, [pc, #240]	; (c434 <WindowPopulateState+0x1d6>)
    c342:	f006 ffcd 	bl	132e0 <__aeabi_dsub>
    c346:	4602      	mov	r2, r0
    c348:	460b      	mov	r3, r1
    c34a:	4610      	mov	r0, r2
    c34c:	4619      	mov	r1, r3
    c34e:	f007 fc57 	bl	13c00 <__aeabi_d2f>
    c352:	4603      	mov	r3, r0
    c354:	617b      	str	r3, [r7, #20]
    c356:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
    c35a:	6978      	ldr	r0, [r7, #20]
    c35c:	f007 fdae 	bl	13ebc <__aeabi_fmul>
    c360:	4603      	mov	r3, r0
    c362:	4618      	mov	r0, r3
    c364:	f007 f91c 	bl	135a0 <__aeabi_f2d>
    c368:	f04f 0200 	mov.w	r2, #0
    c36c:	4b31      	ldr	r3, [pc, #196]	; (c434 <WindowPopulateState+0x1d6>)
    c36e:	f006 ffb9 	bl	132e4 <__adddf3>
    c372:	4602      	mov	r2, r0
    c374:	460b      	mov	r3, r1
    c376:	4610      	mov	r0, r2
    c378:	4619      	mov	r1, r3
    c37a:	f009 fe11 	bl	15fa0 <floor>
    c37e:	4602      	mov	r2, r0
    c380:	460b      	mov	r3, r1
    c382:	68b9      	ldr	r1, [r7, #8]
    c384:	6848      	ldr	r0, [r1, #4]
    c386:	69f9      	ldr	r1, [r7, #28]
    c388:	0049      	lsls	r1, r1, #1
    c38a:	1844      	adds	r4, r0, r1
    c38c:	4610      	mov	r0, r2
    c38e:	4619      	mov	r1, r3
    c390:	f007 fc0e 	bl	13bb0 <__aeabi_d2iz>
    c394:	4603      	mov	r3, r0
    c396:	b21b      	sxth	r3, r3
    c398:	8023      	strh	r3, [r4, #0]
    c39a:	69fb      	ldr	r3, [r7, #28]
    c39c:	3301      	adds	r3, #1
    c39e:	61fb      	str	r3, [r7, #28]
    c3a0:	68bb      	ldr	r3, [r7, #8]
    c3a2:	681a      	ldr	r2, [r3, #0]
    c3a4:	69fb      	ldr	r3, [r7, #28]
    c3a6:	429a      	cmp	r2, r3
    c3a8:	d8a8      	bhi.n	c2fc <WindowPopulateState+0x9e>
    c3aa:	68bb      	ldr	r3, [r7, #8]
    c3ac:	2200      	movs	r2, #0
    c3ae:	611a      	str	r2, [r3, #16]
    c3b0:	68bb      	ldr	r3, [r7, #8]
    c3b2:	681b      	ldr	r3, [r3, #0]
    c3b4:	005b      	lsls	r3, r3, #1
    c3b6:	4618      	mov	r0, r3
    c3b8:	f014 fe94 	bl	210e4 <malloc>
    c3bc:	4603      	mov	r3, r0
    c3be:	461a      	mov	r2, r3
    c3c0:	68bb      	ldr	r3, [r7, #8]
    c3c2:	60da      	str	r2, [r3, #12]
    c3c4:	68bb      	ldr	r3, [r7, #8]
    c3c6:	68db      	ldr	r3, [r3, #12]
    c3c8:	2b00      	cmp	r3, #0
    c3ca:	d109      	bne.n	c3e0 <WindowPopulateState+0x182>
    c3cc:	4b17      	ldr	r3, [pc, #92]	; (c42c <WindowPopulateState+0x1ce>)
    c3ce:	681b      	ldr	r3, [r3, #0]
    c3d0:	68db      	ldr	r3, [r3, #12]
    c3d2:	2220      	movs	r2, #32
    c3d4:	2101      	movs	r1, #1
    c3d6:	4818      	ldr	r0, [pc, #96]	; (c438 <WindowPopulateState+0x1da>)
    c3d8:	f014 fe76 	bl	210c8 <fwrite>
    c3dc:	2300      	movs	r3, #0
    c3de:	e018      	b.n	c412 <WindowPopulateState+0x1b4>
    c3e0:	68bb      	ldr	r3, [r7, #8]
    c3e2:	681b      	ldr	r3, [r3, #0]
    c3e4:	005b      	lsls	r3, r3, #1
    c3e6:	4618      	mov	r0, r3
    c3e8:	f014 fe7c 	bl	210e4 <malloc>
    c3ec:	4603      	mov	r3, r0
    c3ee:	461a      	mov	r2, r3
    c3f0:	68bb      	ldr	r3, [r7, #8]
    c3f2:	615a      	str	r2, [r3, #20]
    c3f4:	68bb      	ldr	r3, [r7, #8]
    c3f6:	695b      	ldr	r3, [r3, #20]
    c3f8:	2b00      	cmp	r3, #0
    c3fa:	d109      	bne.n	c410 <WindowPopulateState+0x1b2>
    c3fc:	4b0b      	ldr	r3, [pc, #44]	; (c42c <WindowPopulateState+0x1ce>)
    c3fe:	681b      	ldr	r3, [r3, #0]
    c400:	68db      	ldr	r3, [r3, #12]
    c402:	2221      	movs	r2, #33	; 0x21
    c404:	2101      	movs	r1, #1
    c406:	480d      	ldr	r0, [pc, #52]	; (c43c <WindowPopulateState+0x1de>)
    c408:	f014 fe5e 	bl	210c8 <fwrite>
    c40c:	2300      	movs	r3, #0
    c40e:	e000      	b.n	c412 <WindowPopulateState+0x1b4>
    c410:	2301      	movs	r3, #1
    c412:	4618      	mov	r0, r3
    c414:	3720      	adds	r7, #32
    c416:	46bd      	mov	sp, r7
    c418:	bdb0      	pop	{r4, r5, r7, pc}
    c41a:	bf00      	nop
    c41c:	f3af 8000 	nop.w
    c420:	54442d18 	.word	0x54442d18
    c424:	401921fb 	.word	0x401921fb
    c428:	10624dd3 	.word	0x10624dd3
    c42c:	20020064 	.word	0x20020064
    c430:	00025098 	.word	0x00025098
    c434:	3fe00000 	.word	0x3fe00000
    c438:	000250c0 	.word	0x000250c0
    c43c:	000250e4 	.word	0x000250e4

0000c440 <WindowFreeStateContents>:
    c440:	b580      	push	{r7, lr}
    c442:	b082      	sub	sp, #8
    c444:	af00      	add	r7, sp, #0
    c446:	6078      	str	r0, [r7, #4]
    c448:	687b      	ldr	r3, [r7, #4]
    c44a:	685b      	ldr	r3, [r3, #4]
    c44c:	4618      	mov	r0, r3
    c44e:	f014 fe51 	bl	210f4 <free>
    c452:	687b      	ldr	r3, [r7, #4]
    c454:	68db      	ldr	r3, [r3, #12]
    c456:	4618      	mov	r0, r3
    c458:	f014 fe4c 	bl	210f4 <free>
    c45c:	687b      	ldr	r3, [r7, #4]
    c45e:	695b      	ldr	r3, [r3, #20]
    c460:	4618      	mov	r0, r3
    c462:	f014 fe47 	bl	210f4 <free>
    c466:	bf00      	nop
    c468:	3708      	adds	r7, #8
    c46a:	46bd      	mov	sp, r7
    c46c:	bd80      	pop	{r7, pc}
    c46e:	bf00      	nop

0000c470 <FilterbankFillConfigWithDefaults>:
    c470:	b480      	push	{r7}
    c472:	b083      	sub	sp, #12
    c474:	af00      	add	r7, sp, #0
    c476:	6078      	str	r0, [r7, #4]
    c478:	687b      	ldr	r3, [r7, #4]
    c47a:	2220      	movs	r2, #32
    c47c:	601a      	str	r2, [r3, #0]
    c47e:	687b      	ldr	r3, [r7, #4]
    c480:	4a06      	ldr	r2, [pc, #24]	; (c49c <FilterbankFillConfigWithDefaults+0x2c>)
    c482:	609a      	str	r2, [r3, #8]
    c484:	687b      	ldr	r3, [r7, #4]
    c486:	4a06      	ldr	r2, [pc, #24]	; (c4a0 <FilterbankFillConfigWithDefaults+0x30>)
    c488:	605a      	str	r2, [r3, #4]
    c48a:	687b      	ldr	r3, [r7, #4]
    c48c:	2207      	movs	r2, #7
    c48e:	60da      	str	r2, [r3, #12]
    c490:	bf00      	nop
    c492:	370c      	adds	r7, #12
    c494:	46bd      	mov	sp, r7
    c496:	bc80      	pop	{r7}
    c498:	4770      	bx	lr
    c49a:	bf00      	nop
    c49c:	42fa0000 	.word	0x42fa0000
    c4a0:	45ea6000 	.word	0x45ea6000

0000c4a4 <FreqToMel>:
    c4a4:	b580      	push	{r7, lr}
    c4a6:	b082      	sub	sp, #8
    c4a8:	af00      	add	r7, sp, #0
    c4aa:	6078      	str	r0, [r7, #4]
    c4ac:	6878      	ldr	r0, [r7, #4]
    c4ae:	f007 f877 	bl	135a0 <__aeabi_f2d>
    c4b2:	f04f 0200 	mov.w	r2, #0
    c4b6:	4b0e      	ldr	r3, [pc, #56]	; (c4f0 <FreqToMel+0x4c>)
    c4b8:	f007 f9f4 	bl	138a4 <__aeabi_ddiv>
    c4bc:	4602      	mov	r2, r0
    c4be:	460b      	mov	r3, r1
    c4c0:	4610      	mov	r0, r2
    c4c2:	4619      	mov	r1, r3
    c4c4:	f009 fe54 	bl	16170 <log1p>
    c4c8:	a307      	add	r3, pc, #28	; (adr r3, c4e8 <FreqToMel+0x44>)
    c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
    c4ce:	f007 f8bf 	bl	13650 <__aeabi_dmul>
    c4d2:	4602      	mov	r2, r0
    c4d4:	460b      	mov	r3, r1
    c4d6:	4610      	mov	r0, r2
    c4d8:	4619      	mov	r1, r3
    c4da:	f007 fb91 	bl	13c00 <__aeabi_d2f>
    c4de:	4603      	mov	r3, r0
    c4e0:	4618      	mov	r0, r3
    c4e2:	3708      	adds	r7, #8
    c4e4:	46bd      	mov	sp, r7
    c4e6:	bd80      	pop	{r7, pc}
    c4e8:	00000000 	.word	0x00000000
    c4ec:	40919c00 	.word	0x40919c00
    c4f0:	4085e000 	.word	0x4085e000

0000c4f4 <CalculateCenterFrequencies>:
    c4f4:	b590      	push	{r4, r7, lr}
    c4f6:	b08b      	sub	sp, #44	; 0x2c
    c4f8:	af00      	add	r7, sp, #0
    c4fa:	60f8      	str	r0, [r7, #12]
    c4fc:	60b9      	str	r1, [r7, #8]
    c4fe:	607a      	str	r2, [r7, #4]
    c500:	603b      	str	r3, [r7, #0]
    c502:	f04f 0100 	mov.w	r1, #0
    c506:	68b8      	ldr	r0, [r7, #8]
    c508:	f007 fe8a 	bl	14220 <__aeabi_fcmpge>
    c50c:	4603      	mov	r3, r0
    c50e:	2b00      	cmp	r3, #0
    c510:	d105      	bne.n	c51e <CalculateCenterFrequencies+0x2a>
    c512:	4b27      	ldr	r3, [pc, #156]	; (c5b0 <CalculateCenterFrequencies+0xbc>)
    c514:	4a27      	ldr	r2, [pc, #156]	; (c5b4 <CalculateCenterFrequencies+0xc0>)
    c516:	2125      	movs	r1, #37	; 0x25
    c518:	4827      	ldr	r0, [pc, #156]	; (c5b8 <CalculateCenterFrequencies+0xc4>)
    c51a:	f014 fbb5 	bl	20c88 <__assert_func>
    c51e:	68b9      	ldr	r1, [r7, #8]
    c520:	6878      	ldr	r0, [r7, #4]
    c522:	f007 fe87 	bl	14234 <__aeabi_fcmpgt>
    c526:	4603      	mov	r3, r0
    c528:	2b00      	cmp	r3, #0
    c52a:	d105      	bne.n	c538 <CalculateCenterFrequencies+0x44>
    c52c:	4b23      	ldr	r3, [pc, #140]	; (c5bc <CalculateCenterFrequencies+0xc8>)
    c52e:	4a21      	ldr	r2, [pc, #132]	; (c5b4 <CalculateCenterFrequencies+0xc0>)
    c530:	2126      	movs	r1, #38	; 0x26
    c532:	4821      	ldr	r0, [pc, #132]	; (c5b8 <CalculateCenterFrequencies+0xc4>)
    c534:	f014 fba8 	bl	20c88 <__assert_func>
    c538:	68b8      	ldr	r0, [r7, #8]
    c53a:	f7ff ffb3 	bl	c4a4 <FreqToMel>
    c53e:	6238      	str	r0, [r7, #32]
    c540:	6878      	ldr	r0, [r7, #4]
    c542:	f7ff ffaf 	bl	c4a4 <FreqToMel>
    c546:	61f8      	str	r0, [r7, #28]
    c548:	6a39      	ldr	r1, [r7, #32]
    c54a:	69f8      	ldr	r0, [r7, #28]
    c54c:	f007 fbac 	bl	13ca8 <__aeabi_fsub>
    c550:	4603      	mov	r3, r0
    c552:	61bb      	str	r3, [r7, #24]
    c554:	68f8      	ldr	r0, [r7, #12]
    c556:	f007 fc5d 	bl	13e14 <__aeabi_i2f>
    c55a:	4603      	mov	r3, r0
    c55c:	4619      	mov	r1, r3
    c55e:	69b8      	ldr	r0, [r7, #24]
    c560:	f007 fd60 	bl	14024 <__aeabi_fdiv>
    c564:	4603      	mov	r3, r0
    c566:	617b      	str	r3, [r7, #20]
    c568:	2300      	movs	r3, #0
    c56a:	627b      	str	r3, [r7, #36]	; 0x24
    c56c:	e017      	b.n	c59e <CalculateCenterFrequencies+0xaa>
    c56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c570:	3301      	adds	r3, #1
    c572:	4618      	mov	r0, r3
    c574:	f007 fc4e 	bl	13e14 <__aeabi_i2f>
    c578:	4603      	mov	r3, r0
    c57a:	6979      	ldr	r1, [r7, #20]
    c57c:	4618      	mov	r0, r3
    c57e:	f007 fc9d 	bl	13ebc <__aeabi_fmul>
    c582:	4603      	mov	r3, r0
    c584:	4618      	mov	r0, r3
    c586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c588:	009b      	lsls	r3, r3, #2
    c58a:	683a      	ldr	r2, [r7, #0]
    c58c:	18d4      	adds	r4, r2, r3
    c58e:	6a39      	ldr	r1, [r7, #32]
    c590:	f007 fb8c 	bl	13cac <__addsf3>
    c594:	4603      	mov	r3, r0
    c596:	6023      	str	r3, [r4, #0]
    c598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c59a:	3301      	adds	r3, #1
    c59c:	627b      	str	r3, [r7, #36]	; 0x24
    c59e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    c5a0:	68fb      	ldr	r3, [r7, #12]
    c5a2:	429a      	cmp	r2, r3
    c5a4:	dbe3      	blt.n	c56e <CalculateCenterFrequencies+0x7a>
    c5a6:	bf00      	nop
    c5a8:	bf00      	nop
    c5aa:	372c      	adds	r7, #44	; 0x2c
    c5ac:	46bd      	mov	sp, r7
    c5ae:	bd90      	pop	{r4, r7, pc}
    c5b0:	00025108 	.word	0x00025108
    c5b4:	0002521c 	.word	0x0002521c
    c5b8:	00025128 	.word	0x00025128
    c5bc:	0002516c 	.word	0x0002516c

0000c5c0 <QuantizeFilterbankWeights>:
    c5c0:	b580      	push	{r7, lr}
    c5c2:	b084      	sub	sp, #16
    c5c4:	af00      	add	r7, sp, #0
    c5c6:	60f8      	str	r0, [r7, #12]
    c5c8:	60b9      	str	r1, [r7, #8]
    c5ca:	607a      	str	r2, [r7, #4]
    c5cc:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
    c5d0:	68f8      	ldr	r0, [r7, #12]
    c5d2:	f007 fc73 	bl	13ebc <__aeabi_fmul>
    c5d6:	4603      	mov	r3, r0
    c5d8:	4618      	mov	r0, r3
    c5da:	f006 ffe1 	bl	135a0 <__aeabi_f2d>
    c5de:	f04f 0200 	mov.w	r2, #0
    c5e2:	4b21      	ldr	r3, [pc, #132]	; (c668 <QuantizeFilterbankWeights+0xa8>)
    c5e4:	f006 fe7e 	bl	132e4 <__adddf3>
    c5e8:	4602      	mov	r2, r0
    c5ea:	460b      	mov	r3, r1
    c5ec:	4610      	mov	r0, r2
    c5ee:	4619      	mov	r1, r3
    c5f0:	f009 fcd6 	bl	15fa0 <floor>
    c5f4:	4602      	mov	r2, r0
    c5f6:	460b      	mov	r3, r1
    c5f8:	4610      	mov	r0, r2
    c5fa:	4619      	mov	r1, r3
    c5fc:	f007 fad8 	bl	13bb0 <__aeabi_d2iz>
    c600:	4603      	mov	r3, r0
    c602:	b21a      	sxth	r2, r3
    c604:	68bb      	ldr	r3, [r7, #8]
    c606:	801a      	strh	r2, [r3, #0]
    c608:	68f8      	ldr	r0, [r7, #12]
    c60a:	f006 ffc9 	bl	135a0 <__aeabi_f2d>
    c60e:	4602      	mov	r2, r0
    c610:	460b      	mov	r3, r1
    c612:	f04f 0000 	mov.w	r0, #0
    c616:	4915      	ldr	r1, [pc, #84]	; (c66c <QuantizeFilterbankWeights+0xac>)
    c618:	f006 fe62 	bl	132e0 <__aeabi_dsub>
    c61c:	4602      	mov	r2, r0
    c61e:	460b      	mov	r3, r1
    c620:	4610      	mov	r0, r2
    c622:	4619      	mov	r1, r3
    c624:	f04f 0200 	mov.w	r2, #0
    c628:	4b11      	ldr	r3, [pc, #68]	; (c670 <QuantizeFilterbankWeights+0xb0>)
    c62a:	f007 f811 	bl	13650 <__aeabi_dmul>
    c62e:	4602      	mov	r2, r0
    c630:	460b      	mov	r3, r1
    c632:	4610      	mov	r0, r2
    c634:	4619      	mov	r1, r3
    c636:	f04f 0200 	mov.w	r2, #0
    c63a:	4b0b      	ldr	r3, [pc, #44]	; (c668 <QuantizeFilterbankWeights+0xa8>)
    c63c:	f006 fe52 	bl	132e4 <__adddf3>
    c640:	4602      	mov	r2, r0
    c642:	460b      	mov	r3, r1
    c644:	4610      	mov	r0, r2
    c646:	4619      	mov	r1, r3
    c648:	f009 fcaa 	bl	15fa0 <floor>
    c64c:	4602      	mov	r2, r0
    c64e:	460b      	mov	r3, r1
    c650:	4610      	mov	r0, r2
    c652:	4619      	mov	r1, r3
    c654:	f007 faac 	bl	13bb0 <__aeabi_d2iz>
    c658:	4603      	mov	r3, r0
    c65a:	b21a      	sxth	r2, r3
    c65c:	687b      	ldr	r3, [r7, #4]
    c65e:	801a      	strh	r2, [r3, #0]
    c660:	bf00      	nop
    c662:	3710      	adds	r7, #16
    c664:	46bd      	mov	sp, r7
    c666:	bd80      	pop	{r7, pc}
    c668:	3fe00000 	.word	0x3fe00000
    c66c:	3ff00000 	.word	0x3ff00000
    c670:	40b00000 	.word	0x40b00000

0000c674 <FilterbankPopulateState>:
    c674:	b5b0      	push	{r4, r5, r7, lr}
    c676:	b09e      	sub	sp, #120	; 0x78
    c678:	af00      	add	r7, sp, #0
    c67a:	60f8      	str	r0, [r7, #12]
    c67c:	60b9      	str	r1, [r7, #8]
    c67e:	607a      	str	r2, [r7, #4]
    c680:	603b      	str	r3, [r7, #0]
    c682:	68fb      	ldr	r3, [r7, #12]
    c684:	681a      	ldr	r2, [r3, #0]
    c686:	68bb      	ldr	r3, [r7, #8]
    c688:	601a      	str	r2, [r3, #0]
    c68a:	68fb      	ldr	r3, [r7, #12]
    c68c:	681b      	ldr	r3, [r3, #0]
    c68e:	3301      	adds	r3, #1
    c690:	657b      	str	r3, [r7, #84]	; 0x54
    c692:	2302      	movs	r3, #2
    c694:	653b      	str	r3, [r7, #80]	; 0x50
    c696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c698:	005b      	lsls	r3, r3, #1
    c69a:	4618      	mov	r0, r3
    c69c:	f014 fd22 	bl	210e4 <malloc>
    c6a0:	4603      	mov	r3, r0
    c6a2:	461a      	mov	r2, r3
    c6a4:	68bb      	ldr	r3, [r7, #8]
    c6a6:	60da      	str	r2, [r3, #12]
    c6a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c6aa:	005b      	lsls	r3, r3, #1
    c6ac:	4618      	mov	r0, r3
    c6ae:	f014 fd19 	bl	210e4 <malloc>
    c6b2:	4603      	mov	r3, r0
    c6b4:	461a      	mov	r2, r3
    c6b6:	68bb      	ldr	r3, [r7, #8]
    c6b8:	611a      	str	r2, [r3, #16]
    c6ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c6bc:	005b      	lsls	r3, r3, #1
    c6be:	4618      	mov	r0, r3
    c6c0:	f014 fd10 	bl	210e4 <malloc>
    c6c4:	4603      	mov	r3, r0
    c6c6:	461a      	mov	r2, r3
    c6c8:	68bb      	ldr	r3, [r7, #8]
    c6ca:	615a      	str	r2, [r3, #20]
    c6cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c6ce:	00db      	lsls	r3, r3, #3
    c6d0:	4618      	mov	r0, r3
    c6d2:	f014 fd07 	bl	210e4 <malloc>
    c6d6:	4603      	mov	r3, r0
    c6d8:	461a      	mov	r2, r3
    c6da:	68bb      	ldr	r3, [r7, #8]
    c6dc:	621a      	str	r2, [r3, #32]
    c6de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c6e0:	009b      	lsls	r3, r3, #2
    c6e2:	4618      	mov	r0, r3
    c6e4:	f014 fcfe 	bl	210e4 <malloc>
    c6e8:	4603      	mov	r3, r0
    c6ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    c6ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c6ee:	005b      	lsls	r3, r3, #1
    c6f0:	4618      	mov	r0, r3
    c6f2:	f014 fcf7 	bl	210e4 <malloc>
    c6f6:	4603      	mov	r3, r0
    c6f8:	64bb      	str	r3, [r7, #72]	; 0x48
    c6fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c6fc:	005b      	lsls	r3, r3, #1
    c6fe:	4618      	mov	r0, r3
    c700:	f014 fcf0 	bl	210e4 <malloc>
    c704:	4603      	mov	r3, r0
    c706:	647b      	str	r3, [r7, #68]	; 0x44
    c708:	68bb      	ldr	r3, [r7, #8]
    c70a:	68db      	ldr	r3, [r3, #12]
    c70c:	2b00      	cmp	r3, #0
    c70e:	d010      	beq.n	c732 <FilterbankPopulateState+0xbe>
    c710:	68bb      	ldr	r3, [r7, #8]
    c712:	691b      	ldr	r3, [r3, #16]
    c714:	2b00      	cmp	r3, #0
    c716:	d00c      	beq.n	c732 <FilterbankPopulateState+0xbe>
    c718:	68bb      	ldr	r3, [r7, #8]
    c71a:	695b      	ldr	r3, [r3, #20]
    c71c:	2b00      	cmp	r3, #0
    c71e:	d008      	beq.n	c732 <FilterbankPopulateState+0xbe>
    c720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c722:	2b00      	cmp	r3, #0
    c724:	d005      	beq.n	c732 <FilterbankPopulateState+0xbe>
    c726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    c728:	2b00      	cmp	r3, #0
    c72a:	d002      	beq.n	c732 <FilterbankPopulateState+0xbe>
    c72c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    c72e:	2b00      	cmp	r3, #0
    c730:	d112      	bne.n	c758 <FilterbankPopulateState+0xe4>
    c732:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    c734:	f014 fcde 	bl	210f4 <free>
    c738:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    c73a:	f014 fcdb 	bl	210f4 <free>
    c73e:	6c78      	ldr	r0, [r7, #68]	; 0x44
    c740:	f014 fcd8 	bl	210f4 <free>
    c744:	4b9d      	ldr	r3, [pc, #628]	; (c9bc <FilterbankPopulateState+0x348>)
    c746:	681b      	ldr	r3, [r3, #0]
    c748:	68db      	ldr	r3, [r3, #12]
    c74a:	2223      	movs	r2, #35	; 0x23
    c74c:	2101      	movs	r1, #1
    c74e:	489c      	ldr	r0, [pc, #624]	; (c9c0 <FilterbankPopulateState+0x34c>)
    c750:	f014 fcba 	bl	210c8 <fwrite>
    c754:	2300      	movs	r3, #0
    c756:	e1dc      	b.n	cb12 <FilterbankPopulateState+0x49e>
    c758:	68fb      	ldr	r3, [r7, #12]
    c75a:	6899      	ldr	r1, [r3, #8]
    c75c:	68fb      	ldr	r3, [r7, #12]
    c75e:	685a      	ldr	r2, [r3, #4]
    c760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    c762:	6d78      	ldr	r0, [r7, #84]	; 0x54
    c764:	f7ff fec6 	bl	c4f4 <CalculateCenterFrequencies>
    c768:	6878      	ldr	r0, [r7, #4]
    c76a:	f006 ff07 	bl	1357c <__aeabi_i2d>
    c76e:	f04f 0200 	mov.w	r2, #0
    c772:	4b94      	ldr	r3, [pc, #592]	; (c9c4 <FilterbankPopulateState+0x350>)
    c774:	f006 ff6c 	bl	13650 <__aeabi_dmul>
    c778:	4602      	mov	r2, r0
    c77a:	460b      	mov	r3, r1
    c77c:	4614      	mov	r4, r2
    c77e:	461d      	mov	r5, r3
    c780:	6838      	ldr	r0, [r7, #0]
    c782:	f007 fb47 	bl	13e14 <__aeabi_i2f>
    c786:	4603      	mov	r3, r0
    c788:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c78c:	4618      	mov	r0, r3
    c78e:	f007 fa8b 	bl	13ca8 <__aeabi_fsub>
    c792:	4603      	mov	r3, r0
    c794:	4618      	mov	r0, r3
    c796:	f006 ff03 	bl	135a0 <__aeabi_f2d>
    c79a:	4602      	mov	r2, r0
    c79c:	460b      	mov	r3, r1
    c79e:	4620      	mov	r0, r4
    c7a0:	4629      	mov	r1, r5
    c7a2:	f007 f87f 	bl	138a4 <__aeabi_ddiv>
    c7a6:	4602      	mov	r2, r0
    c7a8:	460b      	mov	r3, r1
    c7aa:	4610      	mov	r0, r2
    c7ac:	4619      	mov	r1, r3
    c7ae:	f007 fa27 	bl	13c00 <__aeabi_d2f>
    c7b2:	4603      	mov	r3, r0
    c7b4:	643b      	str	r3, [r7, #64]	; 0x40
    c7b6:	68fb      	ldr	r3, [r7, #12]
    c7b8:	689b      	ldr	r3, [r3, #8]
    c7ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
    c7bc:	4618      	mov	r0, r3
    c7be:	f007 fc31 	bl	14024 <__aeabi_fdiv>
    c7c2:	4603      	mov	r3, r0
    c7c4:	4618      	mov	r0, r3
    c7c6:	f006 feeb 	bl	135a0 <__aeabi_f2d>
    c7ca:	f04f 0200 	mov.w	r2, #0
    c7ce:	4b7e      	ldr	r3, [pc, #504]	; (c9c8 <FilterbankPopulateState+0x354>)
    c7d0:	f006 fd88 	bl	132e4 <__adddf3>
    c7d4:	4602      	mov	r2, r0
    c7d6:	460b      	mov	r3, r1
    c7d8:	4610      	mov	r0, r2
    c7da:	4619      	mov	r1, r3
    c7dc:	f007 f9e8 	bl	13bb0 <__aeabi_d2iz>
    c7e0:	4602      	mov	r2, r0
    c7e2:	68bb      	ldr	r3, [r7, #8]
    c7e4:	605a      	str	r2, [r3, #4]
    c7e6:	68bb      	ldr	r3, [r7, #8]
    c7e8:	2200      	movs	r2, #0
    c7ea:	609a      	str	r2, [r3, #8]
    c7ec:	68bb      	ldr	r3, [r7, #8]
    c7ee:	685b      	ldr	r3, [r3, #4]
    c7f0:	677b      	str	r3, [r7, #116]	; 0x74
    c7f2:	2300      	movs	r3, #0
    c7f4:	673b      	str	r3, [r7, #112]	; 0x70
    c7f6:	2300      	movs	r3, #0
    c7f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    c7fa:	2300      	movs	r3, #0
    c7fc:	66bb      	str	r3, [r7, #104]	; 0x68
    c7fe:	e0a2      	b.n	c946 <FilterbankPopulateState+0x2d2>
    c800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c802:	667b      	str	r3, [r7, #100]	; 0x64
    c804:	e002      	b.n	c80c <FilterbankPopulateState+0x198>
    c806:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c808:	3301      	adds	r3, #1
    c80a:	667b      	str	r3, [r7, #100]	; 0x64
    c80c:	6e78      	ldr	r0, [r7, #100]	; 0x64
    c80e:	f007 fb01 	bl	13e14 <__aeabi_i2f>
    c812:	4603      	mov	r3, r0
    c814:	6c39      	ldr	r1, [r7, #64]	; 0x40
    c816:	4618      	mov	r0, r3
    c818:	f007 fb50 	bl	13ebc <__aeabi_fmul>
    c81c:	4603      	mov	r3, r0
    c81e:	4618      	mov	r0, r3
    c820:	f7ff fe40 	bl	c4a4 <FreqToMel>
    c824:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c826:	009b      	lsls	r3, r3, #2
    c828:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    c82a:	4413      	add	r3, r2
    c82c:	681b      	ldr	r3, [r3, #0]
    c82e:	4619      	mov	r1, r3
    c830:	f007 fcec 	bl	1420c <__aeabi_fcmple>
    c834:	4603      	mov	r3, r0
    c836:	2b00      	cmp	r3, #0
    c838:	d1e5      	bne.n	c806 <FilterbankPopulateState+0x192>
    c83a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    c83c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    c83e:	1ad3      	subs	r3, r2, r3
    c840:	623b      	str	r3, [r7, #32]
    c842:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c844:	005b      	lsls	r3, r3, #1
    c846:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c848:	4413      	add	r3, r2
    c84a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    c84c:	b212      	sxth	r2, r2
    c84e:	801a      	strh	r2, [r3, #0]
    c850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c852:	005b      	lsls	r3, r3, #1
    c854:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    c856:	4413      	add	r3, r2
    c858:	6a3a      	ldr	r2, [r7, #32]
    c85a:	b212      	sxth	r2, r2
    c85c:	801a      	strh	r2, [r3, #0]
    c85e:	6a3b      	ldr	r3, [r7, #32]
    c860:	2b00      	cmp	r3, #0
    c862:	d138      	bne.n	c8d6 <FilterbankPopulateState+0x262>
    c864:	68bb      	ldr	r3, [r7, #8]
    c866:	68da      	ldr	r2, [r3, #12]
    c868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c86a:	005b      	lsls	r3, r3, #1
    c86c:	4413      	add	r3, r2
    c86e:	2200      	movs	r2, #0
    c870:	801a      	strh	r2, [r3, #0]
    c872:	68bb      	ldr	r3, [r7, #8]
    c874:	691a      	ldr	r2, [r3, #16]
    c876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c878:	005b      	lsls	r3, r3, #1
    c87a:	4413      	add	r3, r2
    c87c:	2200      	movs	r2, #0
    c87e:	801a      	strh	r2, [r3, #0]
    c880:	68bb      	ldr	r3, [r7, #8]
    c882:	695a      	ldr	r2, [r3, #20]
    c884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c886:	005b      	lsls	r3, r3, #1
    c888:	4413      	add	r3, r2
    c88a:	2204      	movs	r2, #4
    c88c:	801a      	strh	r2, [r3, #0]
    c88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    c890:	2b00      	cmp	r3, #0
    c892:	d153      	bne.n	c93c <FilterbankPopulateState+0x2c8>
    c894:	2301      	movs	r3, #1
    c896:	66fb      	str	r3, [r7, #108]	; 0x6c
    c898:	2300      	movs	r3, #0
    c89a:	663b      	str	r3, [r7, #96]	; 0x60
    c89c:	e013      	b.n	c8c6 <FilterbankPopulateState+0x252>
    c89e:	68bb      	ldr	r3, [r7, #8]
    c8a0:	691a      	ldr	r2, [r3, #16]
    c8a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    c8a4:	005b      	lsls	r3, r3, #1
    c8a6:	4413      	add	r3, r2
    c8a8:	f9b3 3000 	ldrsh.w	r3, [r3]
    c8ac:	b29b      	uxth	r3, r3
    c8ae:	3304      	adds	r3, #4
    c8b0:	b299      	uxth	r1, r3
    c8b2:	68bb      	ldr	r3, [r7, #8]
    c8b4:	691a      	ldr	r2, [r3, #16]
    c8b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    c8b8:	005b      	lsls	r3, r3, #1
    c8ba:	4413      	add	r3, r2
    c8bc:	b20a      	sxth	r2, r1
    c8be:	801a      	strh	r2, [r3, #0]
    c8c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    c8c2:	3301      	adds	r3, #1
    c8c4:	663b      	str	r3, [r7, #96]	; 0x60
    c8c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    c8c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c8ca:	429a      	cmp	r2, r3
    c8cc:	dbe7      	blt.n	c89e <FilterbankPopulateState+0x22a>
    c8ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c8d0:	3304      	adds	r3, #4
    c8d2:	673b      	str	r3, [r7, #112]	; 0x70
    c8d4:	e032      	b.n	c93c <FilterbankPopulateState+0x2c8>
    c8d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    c8d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c8da:	fb92 f2f3 	sdiv	r2, r2, r3
    c8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    c8e0:	fb02 f303 	mul.w	r3, r2, r3
    c8e4:	61fb      	str	r3, [r7, #28]
    c8e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    c8e8:	69fb      	ldr	r3, [r7, #28]
    c8ea:	1ad3      	subs	r3, r2, r3
    c8ec:	6a3a      	ldr	r2, [r7, #32]
    c8ee:	4413      	add	r3, r2
    c8f0:	61bb      	str	r3, [r7, #24]
    c8f2:	69bb      	ldr	r3, [r7, #24]
    c8f4:	3b01      	subs	r3, #1
    c8f6:	2b00      	cmp	r3, #0
    c8f8:	da00      	bge.n	c8fc <FilterbankPopulateState+0x288>
    c8fa:	3303      	adds	r3, #3
    c8fc:	109b      	asrs	r3, r3, #2
    c8fe:	3301      	adds	r3, #1
    c900:	009b      	lsls	r3, r3, #2
    c902:	617b      	str	r3, [r7, #20]
    c904:	68bb      	ldr	r3, [r7, #8]
    c906:	68da      	ldr	r2, [r3, #12]
    c908:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c90a:	005b      	lsls	r3, r3, #1
    c90c:	4413      	add	r3, r2
    c90e:	69fa      	ldr	r2, [r7, #28]
    c910:	b212      	sxth	r2, r2
    c912:	801a      	strh	r2, [r3, #0]
    c914:	68bb      	ldr	r3, [r7, #8]
    c916:	691a      	ldr	r2, [r3, #16]
    c918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c91a:	005b      	lsls	r3, r3, #1
    c91c:	4413      	add	r3, r2
    c91e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    c920:	b212      	sxth	r2, r2
    c922:	801a      	strh	r2, [r3, #0]
    c924:	68bb      	ldr	r3, [r7, #8]
    c926:	695a      	ldr	r2, [r3, #20]
    c928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c92a:	005b      	lsls	r3, r3, #1
    c92c:	4413      	add	r3, r2
    c92e:	697a      	ldr	r2, [r7, #20]
    c930:	b212      	sxth	r2, r2
    c932:	801a      	strh	r2, [r3, #0]
    c934:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    c936:	697b      	ldr	r3, [r7, #20]
    c938:	4413      	add	r3, r2
    c93a:	673b      	str	r3, [r7, #112]	; 0x70
    c93c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    c93e:	677b      	str	r3, [r7, #116]	; 0x74
    c940:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c942:	3301      	adds	r3, #1
    c944:	66bb      	str	r3, [r7, #104]	; 0x68
    c946:	6eba      	ldr	r2, [r7, #104]	; 0x68
    c948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    c94a:	429a      	cmp	r2, r3
    c94c:	f6ff af58 	blt.w	c800 <FilterbankPopulateState+0x18c>
    c950:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c952:	2102      	movs	r1, #2
    c954:	4618      	mov	r0, r3
    c956:	f014 f9b5 	bl	20cc4 <calloc>
    c95a:	4603      	mov	r3, r0
    c95c:	461a      	mov	r2, r3
    c95e:	68bb      	ldr	r3, [r7, #8]
    c960:	619a      	str	r2, [r3, #24]
    c962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    c964:	2102      	movs	r1, #2
    c966:	4618      	mov	r0, r3
    c968:	f014 f9ac 	bl	20cc4 <calloc>
    c96c:	4603      	mov	r3, r0
    c96e:	461a      	mov	r2, r3
    c970:	68bb      	ldr	r3, [r7, #8]
    c972:	61da      	str	r2, [r3, #28]
    c974:	68bb      	ldr	r3, [r7, #8]
    c976:	699b      	ldr	r3, [r3, #24]
    c978:	2b00      	cmp	r3, #0
    c97a:	d003      	beq.n	c984 <FilterbankPopulateState+0x310>
    c97c:	68bb      	ldr	r3, [r7, #8]
    c97e:	69db      	ldr	r3, [r3, #28]
    c980:	2b00      	cmp	r3, #0
    c982:	d112      	bne.n	c9aa <FilterbankPopulateState+0x336>
    c984:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    c986:	f014 fbb5 	bl	210f4 <free>
    c98a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    c98c:	f014 fbb2 	bl	210f4 <free>
    c990:	6c78      	ldr	r0, [r7, #68]	; 0x44
    c992:	f014 fbaf 	bl	210f4 <free>
    c996:	4b09      	ldr	r3, [pc, #36]	; (c9bc <FilterbankPopulateState+0x348>)
    c998:	681b      	ldr	r3, [r3, #0]
    c99a:	68db      	ldr	r3, [r3, #12]
    c99c:	2228      	movs	r2, #40	; 0x28
    c99e:	2101      	movs	r1, #1
    c9a0:	480a      	ldr	r0, [pc, #40]	; (c9cc <FilterbankPopulateState+0x358>)
    c9a2:	f014 fb91 	bl	210c8 <fwrite>
    c9a6:	2300      	movs	r3, #0
    c9a8:	e0b3      	b.n	cb12 <FilterbankPopulateState+0x49e>
    c9aa:	68fb      	ldr	r3, [r7, #12]
    c9ac:	689b      	ldr	r3, [r3, #8]
    c9ae:	4618      	mov	r0, r3
    c9b0:	f7ff fd78 	bl	c4a4 <FreqToMel>
    c9b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    c9b6:	2300      	movs	r3, #0
    c9b8:	66bb      	str	r3, [r7, #104]	; 0x68
    c9ba:	e08c      	b.n	cad6 <FilterbankPopulateState+0x462>
    c9bc:	20020064 	.word	0x20020064
    c9c0:	0002519c 	.word	0x0002519c
    c9c4:	3fe00000 	.word	0x3fe00000
    c9c8:	3ff80000 	.word	0x3ff80000
    c9cc:	000251c0 	.word	0x000251c0
    c9d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c9d2:	005b      	lsls	r3, r3, #1
    c9d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
    c9d6:	4413      	add	r3, r2
    c9d8:	f9b3 3000 	ldrsh.w	r3, [r3]
    c9dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    c9de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c9e0:	005b      	lsls	r3, r3, #1
    c9e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    c9e4:	4413      	add	r3, r2
    c9e6:	f9b3 3000 	ldrsh.w	r3, [r3]
    c9ea:	63bb      	str	r3, [r7, #56]	; 0x38
    c9ec:	68bb      	ldr	r3, [r7, #8]
    c9ee:	68da      	ldr	r2, [r3, #12]
    c9f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c9f2:	005b      	lsls	r3, r3, #1
    c9f4:	4413      	add	r3, r2
    c9f6:	f9b3 3000 	ldrsh.w	r3, [r3]
    c9fa:	461a      	mov	r2, r3
    c9fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    c9fe:	1a9b      	subs	r3, r3, r2
    ca00:	637b      	str	r3, [r7, #52]	; 0x34
    ca02:	68bb      	ldr	r3, [r7, #8]
    ca04:	691a      	ldr	r2, [r3, #16]
    ca06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    ca08:	005b      	lsls	r3, r3, #1
    ca0a:	4413      	add	r3, r2
    ca0c:	f9b3 3000 	ldrsh.w	r3, [r3]
    ca10:	633b      	str	r3, [r7, #48]	; 0x30
    ca12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    ca14:	2b00      	cmp	r3, #0
    ca16:	d008      	beq.n	ca2a <FilterbankPopulateState+0x3b6>
    ca18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    ca1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    ca1e:	3b01      	subs	r3, #1
    ca20:	009b      	lsls	r3, r3, #2
    ca22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    ca24:	4413      	add	r3, r2
    ca26:	681b      	ldr	r3, [r3, #0]
    ca28:	e000      	b.n	ca2c <FilterbankPopulateState+0x3b8>
    ca2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    ca2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    ca2e:	2300      	movs	r3, #0
    ca30:	65bb      	str	r3, [r7, #88]	; 0x58
    ca32:	e041      	b.n	cab8 <FilterbankPopulateState+0x444>
    ca34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    ca36:	009b      	lsls	r3, r3, #2
    ca38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    ca3a:	4413      	add	r3, r2
    ca3c:	681c      	ldr	r4, [r3, #0]
    ca3e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    ca40:	f007 f9e8 	bl	13e14 <__aeabi_i2f>
    ca44:	4603      	mov	r3, r0
    ca46:	6c39      	ldr	r1, [r7, #64]	; 0x40
    ca48:	4618      	mov	r0, r3
    ca4a:	f007 fa37 	bl	13ebc <__aeabi_fmul>
    ca4e:	4603      	mov	r3, r0
    ca50:	4618      	mov	r0, r3
    ca52:	f7ff fd27 	bl	c4a4 <FreqToMel>
    ca56:	4603      	mov	r3, r0
    ca58:	4619      	mov	r1, r3
    ca5a:	4620      	mov	r0, r4
    ca5c:	f007 f924 	bl	13ca8 <__aeabi_fsub>
    ca60:	4603      	mov	r3, r0
    ca62:	461c      	mov	r4, r3
    ca64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    ca66:	009b      	lsls	r3, r3, #2
    ca68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    ca6a:	4413      	add	r3, r2
    ca6c:	681b      	ldr	r3, [r3, #0]
    ca6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    ca70:	4618      	mov	r0, r3
    ca72:	f007 f919 	bl	13ca8 <__aeabi_fsub>
    ca76:	4603      	mov	r3, r0
    ca78:	4619      	mov	r1, r3
    ca7a:	4620      	mov	r0, r4
    ca7c:	f007 fad2 	bl	14024 <__aeabi_fdiv>
    ca80:	4603      	mov	r3, r0
    ca82:	62bb      	str	r3, [r7, #40]	; 0x28
    ca84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    ca86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ca88:	4413      	add	r3, r2
    ca8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    ca8c:	4413      	add	r3, r2
    ca8e:	627b      	str	r3, [r7, #36]	; 0x24
    ca90:	68bb      	ldr	r3, [r7, #8]
    ca92:	699a      	ldr	r2, [r3, #24]
    ca94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ca96:	005b      	lsls	r3, r3, #1
    ca98:	18d1      	adds	r1, r2, r3
    ca9a:	68bb      	ldr	r3, [r7, #8]
    ca9c:	69da      	ldr	r2, [r3, #28]
    ca9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    caa0:	005b      	lsls	r3, r3, #1
    caa2:	4413      	add	r3, r2
    caa4:	461a      	mov	r2, r3
    caa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    caa8:	f7ff fd8a 	bl	c5c0 <QuantizeFilterbankWeights>
    caac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    caae:	3301      	adds	r3, #1
    cab0:	65bb      	str	r3, [r7, #88]	; 0x58
    cab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    cab4:	3301      	adds	r3, #1
    cab6:	65fb      	str	r3, [r7, #92]	; 0x5c
    cab8:	6dba      	ldr	r2, [r7, #88]	; 0x58
    caba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cabc:	429a      	cmp	r2, r3
    cabe:	dbb9      	blt.n	ca34 <FilterbankPopulateState+0x3c0>
    cac0:	68bb      	ldr	r3, [r7, #8]
    cac2:	689b      	ldr	r3, [r3, #8]
    cac4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    cac6:	429a      	cmp	r2, r3
    cac8:	dd02      	ble.n	cad0 <FilterbankPopulateState+0x45c>
    caca:	68bb      	ldr	r3, [r7, #8]
    cacc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    cace:	609a      	str	r2, [r3, #8]
    cad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    cad2:	3301      	adds	r3, #1
    cad4:	66bb      	str	r3, [r7, #104]	; 0x68
    cad6:	6eba      	ldr	r2, [r7, #104]	; 0x68
    cad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    cada:	429a      	cmp	r2, r3
    cadc:	f6ff af78 	blt.w	c9d0 <FilterbankPopulateState+0x35c>
    cae0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    cae2:	f014 fb07 	bl	210f4 <free>
    cae6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    cae8:	f014 fb04 	bl	210f4 <free>
    caec:	6c78      	ldr	r0, [r7, #68]	; 0x44
    caee:	f014 fb01 	bl	210f4 <free>
    caf2:	68bb      	ldr	r3, [r7, #8]
    caf4:	689b      	ldr	r3, [r3, #8]
    caf6:	683a      	ldr	r2, [r7, #0]
    caf8:	429a      	cmp	r2, r3
    cafa:	dc09      	bgt.n	cb10 <FilterbankPopulateState+0x49c>
    cafc:	4b07      	ldr	r3, [pc, #28]	; (cb1c <FilterbankPopulateState+0x4a8>)
    cafe:	681b      	ldr	r3, [r3, #0]
    cb00:	68db      	ldr	r3, [r3, #12]
    cb02:	222d      	movs	r2, #45	; 0x2d
    cb04:	2101      	movs	r1, #1
    cb06:	4806      	ldr	r0, [pc, #24]	; (cb20 <FilterbankPopulateState+0x4ac>)
    cb08:	f014 fade 	bl	210c8 <fwrite>
    cb0c:	2300      	movs	r3, #0
    cb0e:	e000      	b.n	cb12 <FilterbankPopulateState+0x49e>
    cb10:	2301      	movs	r3, #1
    cb12:	4618      	mov	r0, r3
    cb14:	3778      	adds	r7, #120	; 0x78
    cb16:	46bd      	mov	sp, r7
    cb18:	bdb0      	pop	{r4, r5, r7, pc}
    cb1a:	bf00      	nop
    cb1c:	20020064 	.word	0x20020064
    cb20:	000251ec 	.word	0x000251ec

0000cb24 <FilterbankFreeStateContents>:
    cb24:	b580      	push	{r7, lr}
    cb26:	b082      	sub	sp, #8
    cb28:	af00      	add	r7, sp, #0
    cb2a:	6078      	str	r0, [r7, #4]
    cb2c:	687b      	ldr	r3, [r7, #4]
    cb2e:	68db      	ldr	r3, [r3, #12]
    cb30:	4618      	mov	r0, r3
    cb32:	f014 fadf 	bl	210f4 <free>
    cb36:	687b      	ldr	r3, [r7, #4]
    cb38:	691b      	ldr	r3, [r3, #16]
    cb3a:	4618      	mov	r0, r3
    cb3c:	f014 fada 	bl	210f4 <free>
    cb40:	687b      	ldr	r3, [r7, #4]
    cb42:	695b      	ldr	r3, [r3, #20]
    cb44:	4618      	mov	r0, r3
    cb46:	f014 fad5 	bl	210f4 <free>
    cb4a:	687b      	ldr	r3, [r7, #4]
    cb4c:	699b      	ldr	r3, [r3, #24]
    cb4e:	4618      	mov	r0, r3
    cb50:	f014 fad0 	bl	210f4 <free>
    cb54:	687b      	ldr	r3, [r7, #4]
    cb56:	69db      	ldr	r3, [r3, #28]
    cb58:	4618      	mov	r0, r3
    cb5a:	f014 facb 	bl	210f4 <free>
    cb5e:	687b      	ldr	r3, [r7, #4]
    cb60:	6a1b      	ldr	r3, [r3, #32]
    cb62:	4618      	mov	r0, r3
    cb64:	f014 fac6 	bl	210f4 <free>
    cb68:	bf00      	nop
    cb6a:	3708      	adds	r7, #8
    cb6c:	46bd      	mov	sp, r7
    cb6e:	bd80      	pop	{r7, pc}

0000cb70 <kiss_fftr_alloc>:
    cb70:	b5b0      	push	{r4, r5, r7, lr}
    cb72:	b08a      	sub	sp, #40	; 0x28
    cb74:	af00      	add	r7, sp, #0
    cb76:	60f8      	str	r0, [r7, #12]
    cb78:	60b9      	str	r1, [r7, #8]
    cb7a:	607a      	str	r2, [r7, #4]
    cb7c:	603b      	str	r3, [r7, #0]
    cb7e:	2300      	movs	r3, #0
    cb80:	623b      	str	r3, [r7, #32]
    cb82:	68fb      	ldr	r3, [r7, #12]
    cb84:	f003 0301 	and.w	r3, r3, #1
    cb88:	2b00      	cmp	r3, #0
    cb8a:	d001      	beq.n	cb90 <kiss_fftr_alloc+0x20>
    cb8c:	2300      	movs	r3, #0
    cb8e:	e0cf      	b.n	cd30 <kiss_fftr_alloc+0x1c0>
    cb90:	68fb      	ldr	r3, [r7, #12]
    cb92:	105b      	asrs	r3, r3, #1
    cb94:	60fb      	str	r3, [r7, #12]
    cb96:	f107 0310 	add.w	r3, r7, #16
    cb9a:	2200      	movs	r2, #0
    cb9c:	68b9      	ldr	r1, [r7, #8]
    cb9e:	68f8      	ldr	r0, [r7, #12]
    cba0:	f001 fe7e 	bl	e8a0 <kiss_fft_alloc>
    cba4:	68fa      	ldr	r2, [r7, #12]
    cba6:	4613      	mov	r3, r2
    cba8:	005b      	lsls	r3, r3, #1
    cbaa:	4413      	add	r3, r2
    cbac:	0fda      	lsrs	r2, r3, #31
    cbae:	4413      	add	r3, r2
    cbb0:	105b      	asrs	r3, r3, #1
    cbb2:	009a      	lsls	r2, r3, #2
    cbb4:	693b      	ldr	r3, [r7, #16]
    cbb6:	4413      	add	r3, r2
    cbb8:	330c      	adds	r3, #12
    cbba:	617b      	str	r3, [r7, #20]
    cbbc:	683b      	ldr	r3, [r7, #0]
    cbbe:	2b00      	cmp	r3, #0
    cbc0:	d102      	bne.n	cbc8 <kiss_fftr_alloc+0x58>
    cbc2:	2300      	movs	r3, #0
    cbc4:	623b      	str	r3, [r7, #32]
    cbc6:	e009      	b.n	cbdc <kiss_fftr_alloc+0x6c>
    cbc8:	683b      	ldr	r3, [r7, #0]
    cbca:	681b      	ldr	r3, [r3, #0]
    cbcc:	697a      	ldr	r2, [r7, #20]
    cbce:	429a      	cmp	r2, r3
    cbd0:	d801      	bhi.n	cbd6 <kiss_fftr_alloc+0x66>
    cbd2:	687b      	ldr	r3, [r7, #4]
    cbd4:	623b      	str	r3, [r7, #32]
    cbd6:	683b      	ldr	r3, [r7, #0]
    cbd8:	697a      	ldr	r2, [r7, #20]
    cbda:	601a      	str	r2, [r3, #0]
    cbdc:	6a3b      	ldr	r3, [r7, #32]
    cbde:	2b00      	cmp	r3, #0
    cbe0:	d101      	bne.n	cbe6 <kiss_fftr_alloc+0x76>
    cbe2:	2300      	movs	r3, #0
    cbe4:	e0a4      	b.n	cd30 <kiss_fftr_alloc+0x1c0>
    cbe6:	6a3b      	ldr	r3, [r7, #32]
    cbe8:	f103 020c 	add.w	r2, r3, #12
    cbec:	6a3b      	ldr	r3, [r7, #32]
    cbee:	601a      	str	r2, [r3, #0]
    cbf0:	6a3b      	ldr	r3, [r7, #32]
    cbf2:	681a      	ldr	r2, [r3, #0]
    cbf4:	693b      	ldr	r3, [r7, #16]
    cbf6:	441a      	add	r2, r3
    cbf8:	6a3b      	ldr	r3, [r7, #32]
    cbfa:	605a      	str	r2, [r3, #4]
    cbfc:	6a3b      	ldr	r3, [r7, #32]
    cbfe:	685a      	ldr	r2, [r3, #4]
    cc00:	68fb      	ldr	r3, [r7, #12]
    cc02:	009b      	lsls	r3, r3, #2
    cc04:	441a      	add	r2, r3
    cc06:	6a3b      	ldr	r3, [r7, #32]
    cc08:	609a      	str	r2, [r3, #8]
    cc0a:	6a3b      	ldr	r3, [r7, #32]
    cc0c:	681a      	ldr	r2, [r3, #0]
    cc0e:	f107 0310 	add.w	r3, r7, #16
    cc12:	68b9      	ldr	r1, [r7, #8]
    cc14:	68f8      	ldr	r0, [r7, #12]
    cc16:	f001 fe43 	bl	e8a0 <kiss_fft_alloc>
    cc1a:	2300      	movs	r3, #0
    cc1c:	627b      	str	r3, [r7, #36]	; 0x24
    cc1e:	e07d      	b.n	cd1c <kiss_fftr_alloc+0x1ac>
    cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cc22:	3301      	adds	r3, #1
    cc24:	4618      	mov	r0, r3
    cc26:	f006 fca9 	bl	1357c <__aeabi_i2d>
    cc2a:	4604      	mov	r4, r0
    cc2c:	460d      	mov	r5, r1
    cc2e:	68f8      	ldr	r0, [r7, #12]
    cc30:	f006 fca4 	bl	1357c <__aeabi_i2d>
    cc34:	4602      	mov	r2, r0
    cc36:	460b      	mov	r3, r1
    cc38:	4620      	mov	r0, r4
    cc3a:	4629      	mov	r1, r5
    cc3c:	f006 fe32 	bl	138a4 <__aeabi_ddiv>
    cc40:	4602      	mov	r2, r0
    cc42:	460b      	mov	r3, r1
    cc44:	4610      	mov	r0, r2
    cc46:	4619      	mov	r1, r3
    cc48:	f04f 0200 	mov.w	r2, #0
    cc4c:	4b3e      	ldr	r3, [pc, #248]	; (cd48 <kiss_fftr_alloc+0x1d8>)
    cc4e:	f006 fb49 	bl	132e4 <__adddf3>
    cc52:	4602      	mov	r2, r0
    cc54:	460b      	mov	r3, r1
    cc56:	4610      	mov	r0, r2
    cc58:	4619      	mov	r1, r3
    cc5a:	a337      	add	r3, pc, #220	; (adr r3, cd38 <kiss_fftr_alloc+0x1c8>)
    cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc60:	f006 fcf6 	bl	13650 <__aeabi_dmul>
    cc64:	4602      	mov	r2, r0
    cc66:	460b      	mov	r3, r1
    cc68:	e9c7 2306 	strd	r2, r3, [r7, #24]
    cc6c:	68bb      	ldr	r3, [r7, #8]
    cc6e:	2b00      	cmp	r3, #0
    cc70:	d005      	beq.n	cc7e <kiss_fftr_alloc+0x10e>
    cc72:	69bb      	ldr	r3, [r7, #24]
    cc74:	61bb      	str	r3, [r7, #24]
    cc76:	69fb      	ldr	r3, [r7, #28]
    cc78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    cc7c:	61fb      	str	r3, [r7, #28]
    cc7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
    cc82:	f011 fbdd 	bl	1e440 <cos>
    cc86:	a32e      	add	r3, pc, #184	; (adr r3, cd40 <kiss_fftr_alloc+0x1d0>)
    cc88:	e9d3 2300 	ldrd	r2, r3, [r3]
    cc8c:	f006 fce0 	bl	13650 <__aeabi_dmul>
    cc90:	4602      	mov	r2, r0
    cc92:	460b      	mov	r3, r1
    cc94:	4610      	mov	r0, r2
    cc96:	4619      	mov	r1, r3
    cc98:	f04f 0200 	mov.w	r2, #0
    cc9c:	4b2a      	ldr	r3, [pc, #168]	; (cd48 <kiss_fftr_alloc+0x1d8>)
    cc9e:	f006 fb21 	bl	132e4 <__adddf3>
    cca2:	4602      	mov	r2, r0
    cca4:	460b      	mov	r3, r1
    cca6:	4610      	mov	r0, r2
    cca8:	4619      	mov	r1, r3
    ccaa:	f009 f979 	bl	15fa0 <floor>
    ccae:	4602      	mov	r2, r0
    ccb0:	460b      	mov	r3, r1
    ccb2:	6a39      	ldr	r1, [r7, #32]
    ccb4:	6888      	ldr	r0, [r1, #8]
    ccb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ccb8:	0089      	lsls	r1, r1, #2
    ccba:	1844      	adds	r4, r0, r1
    ccbc:	4610      	mov	r0, r2
    ccbe:	4619      	mov	r1, r3
    ccc0:	f006 ff76 	bl	13bb0 <__aeabi_d2iz>
    ccc4:	4603      	mov	r3, r0
    ccc6:	b21b      	sxth	r3, r3
    ccc8:	8023      	strh	r3, [r4, #0]
    ccca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
    ccce:	f011 fd31 	bl	1e734 <sin>
    ccd2:	a31b      	add	r3, pc, #108	; (adr r3, cd40 <kiss_fftr_alloc+0x1d0>)
    ccd4:	e9d3 2300 	ldrd	r2, r3, [r3]
    ccd8:	f006 fcba 	bl	13650 <__aeabi_dmul>
    ccdc:	4602      	mov	r2, r0
    ccde:	460b      	mov	r3, r1
    cce0:	4610      	mov	r0, r2
    cce2:	4619      	mov	r1, r3
    cce4:	f04f 0200 	mov.w	r2, #0
    cce8:	4b17      	ldr	r3, [pc, #92]	; (cd48 <kiss_fftr_alloc+0x1d8>)
    ccea:	f006 fafb 	bl	132e4 <__adddf3>
    ccee:	4602      	mov	r2, r0
    ccf0:	460b      	mov	r3, r1
    ccf2:	4610      	mov	r0, r2
    ccf4:	4619      	mov	r1, r3
    ccf6:	f009 f953 	bl	15fa0 <floor>
    ccfa:	4602      	mov	r2, r0
    ccfc:	460b      	mov	r3, r1
    ccfe:	6a39      	ldr	r1, [r7, #32]
    cd00:	6888      	ldr	r0, [r1, #8]
    cd02:	6a79      	ldr	r1, [r7, #36]	; 0x24
    cd04:	0089      	lsls	r1, r1, #2
    cd06:	1844      	adds	r4, r0, r1
    cd08:	4610      	mov	r0, r2
    cd0a:	4619      	mov	r1, r3
    cd0c:	f006 ff50 	bl	13bb0 <__aeabi_d2iz>
    cd10:	4603      	mov	r3, r0
    cd12:	b21b      	sxth	r3, r3
    cd14:	8063      	strh	r3, [r4, #2]
    cd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cd18:	3301      	adds	r3, #1
    cd1a:	627b      	str	r3, [r7, #36]	; 0x24
    cd1c:	68fb      	ldr	r3, [r7, #12]
    cd1e:	0fda      	lsrs	r2, r3, #31
    cd20:	4413      	add	r3, r2
    cd22:	105b      	asrs	r3, r3, #1
    cd24:	461a      	mov	r2, r3
    cd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    cd28:	4293      	cmp	r3, r2
    cd2a:	f6ff af79 	blt.w	cc20 <kiss_fftr_alloc+0xb0>
    cd2e:	6a3b      	ldr	r3, [r7, #32]
    cd30:	4618      	mov	r0, r3
    cd32:	3728      	adds	r7, #40	; 0x28
    cd34:	46bd      	mov	sp, r7
    cd36:	bdb0      	pop	{r4, r5, r7, pc}
    cd38:	54442d18 	.word	0x54442d18
    cd3c:	c00921fb 	.word	0xc00921fb
    cd40:	00000000 	.word	0x00000000
    cd44:	40dfffc0 	.word	0x40dfffc0
    cd48:	3fe00000 	.word	0x3fe00000

0000cd4c <kiss_fftr>:
    cd4c:	b580      	push	{r7, lr}
    cd4e:	b08c      	sub	sp, #48	; 0x30
    cd50:	af00      	add	r7, sp, #0
    cd52:	60f8      	str	r0, [r7, #12]
    cd54:	60b9      	str	r1, [r7, #8]
    cd56:	607a      	str	r2, [r7, #4]
    cd58:	68fb      	ldr	r3, [r7, #12]
    cd5a:	681b      	ldr	r3, [r3, #0]
    cd5c:	685b      	ldr	r3, [r3, #4]
    cd5e:	2b00      	cmp	r3, #0
    cd60:	f040 8155 	bne.w	d00e <kiss_fftr+0x2c2>
    cd64:	68fb      	ldr	r3, [r7, #12]
    cd66:	681b      	ldr	r3, [r3, #0]
    cd68:	681b      	ldr	r3, [r3, #0]
    cd6a:	62bb      	str	r3, [r7, #40]	; 0x28
    cd6c:	68fb      	ldr	r3, [r7, #12]
    cd6e:	6818      	ldr	r0, [r3, #0]
    cd70:	68fb      	ldr	r3, [r7, #12]
    cd72:	685b      	ldr	r3, [r3, #4]
    cd74:	461a      	mov	r2, r3
    cd76:	68b9      	ldr	r1, [r7, #8]
    cd78:	f001 fe90 	bl	ea9c <kiss_fft>
    cd7c:	68fb      	ldr	r3, [r7, #12]
    cd7e:	685b      	ldr	r3, [r3, #4]
    cd80:	f9b3 3000 	ldrsh.w	r3, [r3]
    cd84:	823b      	strh	r3, [r7, #16]
    cd86:	68fb      	ldr	r3, [r7, #12]
    cd88:	685b      	ldr	r3, [r3, #4]
    cd8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    cd8e:	827b      	strh	r3, [r7, #18]
    cd90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
    cd94:	461a      	mov	r2, r3
    cd96:	4613      	mov	r3, r2
    cd98:	039b      	lsls	r3, r3, #14
    cd9a:	1a9b      	subs	r3, r3, r2
    cd9c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    cda0:	13db      	asrs	r3, r3, #15
    cda2:	b21b      	sxth	r3, r3
    cda4:	823b      	strh	r3, [r7, #16]
    cda6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
    cdaa:	461a      	mov	r2, r3
    cdac:	4613      	mov	r3, r2
    cdae:	039b      	lsls	r3, r3, #14
    cdb0:	1a9b      	subs	r3, r3, r2
    cdb2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    cdb6:	13db      	asrs	r3, r3, #15
    cdb8:	b21b      	sxth	r3, r3
    cdba:	827b      	strh	r3, [r7, #18]
    cdbc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
    cdc0:	b29a      	uxth	r2, r3
    cdc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
    cdc6:	b29b      	uxth	r3, r3
    cdc8:	4413      	add	r3, r2
    cdca:	b29b      	uxth	r3, r3
    cdcc:	b21a      	sxth	r2, r3
    cdce:	687b      	ldr	r3, [r7, #4]
    cdd0:	801a      	strh	r2, [r3, #0]
    cdd2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
    cdd6:	b29a      	uxth	r2, r3
    cdd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
    cddc:	b29b      	uxth	r3, r3
    cdde:	1ad3      	subs	r3, r2, r3
    cde0:	b299      	uxth	r1, r3
    cde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cde4:	009b      	lsls	r3, r3, #2
    cde6:	687a      	ldr	r2, [r7, #4]
    cde8:	4413      	add	r3, r2
    cdea:	b20a      	sxth	r2, r1
    cdec:	801a      	strh	r2, [r3, #0]
    cdee:	687b      	ldr	r3, [r7, #4]
    cdf0:	2200      	movs	r2, #0
    cdf2:	805a      	strh	r2, [r3, #2]
    cdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cdf6:	009b      	lsls	r3, r3, #2
    cdf8:	687a      	ldr	r2, [r7, #4]
    cdfa:	4413      	add	r3, r2
    cdfc:	687a      	ldr	r2, [r7, #4]
    cdfe:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    ce02:	805a      	strh	r2, [r3, #2]
    ce04:	2301      	movs	r3, #1
    ce06:	62fb      	str	r3, [r7, #44]	; 0x2c
    ce08:	e0f7      	b.n	cffa <kiss_fftr+0x2ae>
    ce0a:	68fb      	ldr	r3, [r7, #12]
    ce0c:	685a      	ldr	r2, [r3, #4]
    ce0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce10:	009b      	lsls	r3, r3, #2
    ce12:	441a      	add	r2, r3
    ce14:	f107 0320 	add.w	r3, r7, #32
    ce18:	6810      	ldr	r0, [r2, #0]
    ce1a:	6018      	str	r0, [r3, #0]
    ce1c:	68fb      	ldr	r3, [r7, #12]
    ce1e:	685a      	ldr	r2, [r3, #4]
    ce20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    ce22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce24:	1acb      	subs	r3, r1, r3
    ce26:	009b      	lsls	r3, r3, #2
    ce28:	4413      	add	r3, r2
    ce2a:	f9b3 3000 	ldrsh.w	r3, [r3]
    ce2e:	84bb      	strh	r3, [r7, #36]	; 0x24
    ce30:	68fb      	ldr	r3, [r7, #12]
    ce32:	685a      	ldr	r2, [r3, #4]
    ce34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    ce36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ce38:	1acb      	subs	r3, r1, r3
    ce3a:	009b      	lsls	r3, r3, #2
    ce3c:	4413      	add	r3, r2
    ce3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    ce42:	b29b      	uxth	r3, r3
    ce44:	425b      	negs	r3, r3
    ce46:	b29b      	uxth	r3, r3
    ce48:	b21b      	sxth	r3, r3
    ce4a:	84fb      	strh	r3, [r7, #38]	; 0x26
    ce4c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    ce50:	461a      	mov	r2, r3
    ce52:	4613      	mov	r3, r2
    ce54:	039b      	lsls	r3, r3, #14
    ce56:	1a9b      	subs	r3, r3, r2
    ce58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    ce5c:	13db      	asrs	r3, r3, #15
    ce5e:	b21b      	sxth	r3, r3
    ce60:	843b      	strh	r3, [r7, #32]
    ce62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    ce66:	461a      	mov	r2, r3
    ce68:	4613      	mov	r3, r2
    ce6a:	039b      	lsls	r3, r3, #14
    ce6c:	1a9b      	subs	r3, r3, r2
    ce6e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    ce72:	13db      	asrs	r3, r3, #15
    ce74:	b21b      	sxth	r3, r3
    ce76:	847b      	strh	r3, [r7, #34]	; 0x22
    ce78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    ce7c:	461a      	mov	r2, r3
    ce7e:	4613      	mov	r3, r2
    ce80:	039b      	lsls	r3, r3, #14
    ce82:	1a9b      	subs	r3, r3, r2
    ce84:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    ce88:	13db      	asrs	r3, r3, #15
    ce8a:	b21b      	sxth	r3, r3
    ce8c:	84bb      	strh	r3, [r7, #36]	; 0x24
    ce8e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    ce92:	461a      	mov	r2, r3
    ce94:	4613      	mov	r3, r2
    ce96:	039b      	lsls	r3, r3, #14
    ce98:	1a9b      	subs	r3, r3, r2
    ce9a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    ce9e:	13db      	asrs	r3, r3, #15
    cea0:	b21b      	sxth	r3, r3
    cea2:	84fb      	strh	r3, [r7, #38]	; 0x26
    cea4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    cea8:	b29a      	uxth	r2, r3
    ceaa:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    ceae:	b29b      	uxth	r3, r3
    ceb0:	4413      	add	r3, r2
    ceb2:	b29b      	uxth	r3, r3
    ceb4:	b21b      	sxth	r3, r3
    ceb6:	83bb      	strh	r3, [r7, #28]
    ceb8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    cebc:	b29a      	uxth	r2, r3
    cebe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    cec2:	b29b      	uxth	r3, r3
    cec4:	4413      	add	r3, r2
    cec6:	b29b      	uxth	r3, r3
    cec8:	b21b      	sxth	r3, r3
    ceca:	83fb      	strh	r3, [r7, #30]
    cecc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    ced0:	b29a      	uxth	r2, r3
    ced2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    ced6:	b29b      	uxth	r3, r3
    ced8:	1ad3      	subs	r3, r2, r3
    ceda:	b29b      	uxth	r3, r3
    cedc:	b21b      	sxth	r3, r3
    cede:	833b      	strh	r3, [r7, #24]
    cee0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    cee4:	b29a      	uxth	r2, r3
    cee6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    ceea:	b29b      	uxth	r3, r3
    ceec:	1ad3      	subs	r3, r2, r3
    ceee:	b29b      	uxth	r3, r3
    cef0:	b21b      	sxth	r3, r3
    cef2:	837b      	strh	r3, [r7, #26]
    cef4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    cef8:	4619      	mov	r1, r3
    cefa:	68fb      	ldr	r3, [r7, #12]
    cefc:	689a      	ldr	r2, [r3, #8]
    cefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cf04:	3b01      	subs	r3, #1
    cf06:	009b      	lsls	r3, r3, #2
    cf08:	4413      	add	r3, r2
    cf0a:	f9b3 3000 	ldrsh.w	r3, [r3]
    cf0e:	fb03 f201 	mul.w	r2, r3, r1
    cf12:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
    cf16:	4618      	mov	r0, r3
    cf18:	68fb      	ldr	r3, [r7, #12]
    cf1a:	6899      	ldr	r1, [r3, #8]
    cf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cf22:	3b01      	subs	r3, #1
    cf24:	009b      	lsls	r3, r3, #2
    cf26:	440b      	add	r3, r1
    cf28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    cf2c:	fb03 f300 	mul.w	r3, r3, r0
    cf30:	1ad3      	subs	r3, r2, r3
    cf32:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    cf36:	13db      	asrs	r3, r3, #15
    cf38:	b21b      	sxth	r3, r3
    cf3a:	82bb      	strh	r3, [r7, #20]
    cf3c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    cf40:	4619      	mov	r1, r3
    cf42:	68fb      	ldr	r3, [r7, #12]
    cf44:	689a      	ldr	r2, [r3, #8]
    cf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cf4c:	3b01      	subs	r3, #1
    cf4e:	009b      	lsls	r3, r3, #2
    cf50:	4413      	add	r3, r2
    cf52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    cf56:	fb03 f201 	mul.w	r2, r3, r1
    cf5a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
    cf5e:	4618      	mov	r0, r3
    cf60:	68fb      	ldr	r3, [r7, #12]
    cf62:	6899      	ldr	r1, [r3, #8]
    cf64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cf6a:	3b01      	subs	r3, #1
    cf6c:	009b      	lsls	r3, r3, #2
    cf6e:	440b      	add	r3, r1
    cf70:	f9b3 3000 	ldrsh.w	r3, [r3]
    cf74:	fb03 f300 	mul.w	r3, r3, r0
    cf78:	4413      	add	r3, r2
    cf7a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    cf7e:	13db      	asrs	r3, r3, #15
    cf80:	b21b      	sxth	r3, r3
    cf82:	82fb      	strh	r3, [r7, #22]
    cf84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
    cf88:	461a      	mov	r2, r3
    cf8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    cf8e:	4413      	add	r3, r2
    cf90:	1059      	asrs	r1, r3, #1
    cf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cf94:	009b      	lsls	r3, r3, #2
    cf96:	687a      	ldr	r2, [r7, #4]
    cf98:	4413      	add	r3, r2
    cf9a:	b20a      	sxth	r2, r1
    cf9c:	801a      	strh	r2, [r3, #0]
    cf9e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    cfa2:	461a      	mov	r2, r3
    cfa4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    cfa8:	4413      	add	r3, r2
    cfaa:	1059      	asrs	r1, r3, #1
    cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfae:	009b      	lsls	r3, r3, #2
    cfb0:	687a      	ldr	r2, [r7, #4]
    cfb2:	4413      	add	r3, r2
    cfb4:	b20a      	sxth	r2, r1
    cfb6:	805a      	strh	r2, [r3, #2]
    cfb8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
    cfbc:	461a      	mov	r2, r3
    cfbe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    cfc2:	1ad3      	subs	r3, r2, r3
    cfc4:	1059      	asrs	r1, r3, #1
    cfc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfca:	1ad3      	subs	r3, r2, r3
    cfcc:	009b      	lsls	r3, r3, #2
    cfce:	687a      	ldr	r2, [r7, #4]
    cfd0:	4413      	add	r3, r2
    cfd2:	b20a      	sxth	r2, r1
    cfd4:	801a      	strh	r2, [r3, #0]
    cfd6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    cfda:	461a      	mov	r2, r3
    cfdc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    cfe0:	1ad3      	subs	r3, r2, r3
    cfe2:	1059      	asrs	r1, r3, #1
    cfe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cfe8:	1ad3      	subs	r3, r2, r3
    cfea:	009b      	lsls	r3, r3, #2
    cfec:	687a      	ldr	r2, [r7, #4]
    cfee:	4413      	add	r3, r2
    cff0:	b20a      	sxth	r2, r1
    cff2:	805a      	strh	r2, [r3, #2]
    cff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    cff6:	3301      	adds	r3, #1
    cff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    cffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cffc:	0fda      	lsrs	r2, r3, #31
    cffe:	4413      	add	r3, r2
    d000:	105b      	asrs	r3, r3, #1
    d002:	461a      	mov	r2, r3
    d004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d006:	4293      	cmp	r3, r2
    d008:	f77f aeff 	ble.w	ce0a <kiss_fftr+0xbe>
    d00c:	e000      	b.n	d010 <kiss_fftr+0x2c4>
    d00e:	bf00      	nop
    d010:	3730      	adds	r7, #48	; 0x30
    d012:	46bd      	mov	sp, r7
    d014:	bd80      	pop	{r7, pc}

0000d016 <kiss_fftri>:
    d016:	b580      	push	{r7, lr}
    d018:	b08c      	sub	sp, #48	; 0x30
    d01a:	af00      	add	r7, sp, #0
    d01c:	60f8      	str	r0, [r7, #12]
    d01e:	60b9      	str	r1, [r7, #8]
    d020:	607a      	str	r2, [r7, #4]
    d022:	68fb      	ldr	r3, [r7, #12]
    d024:	681b      	ldr	r3, [r3, #0]
    d026:	685b      	ldr	r3, [r3, #4]
    d028:	2b00      	cmp	r3, #0
    d02a:	f000 816b 	beq.w	d304 <kiss_fftri+0x2ee>
    d02e:	68fb      	ldr	r3, [r7, #12]
    d030:	681b      	ldr	r3, [r3, #0]
    d032:	681b      	ldr	r3, [r3, #0]
    d034:	62bb      	str	r3, [r7, #40]	; 0x28
    d036:	68bb      	ldr	r3, [r7, #8]
    d038:	f9b3 3000 	ldrsh.w	r3, [r3]
    d03c:	b29a      	uxth	r2, r3
    d03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d040:	009b      	lsls	r3, r3, #2
    d042:	68b9      	ldr	r1, [r7, #8]
    d044:	440b      	add	r3, r1
    d046:	f9b3 3000 	ldrsh.w	r3, [r3]
    d04a:	b29b      	uxth	r3, r3
    d04c:	4413      	add	r3, r2
    d04e:	b29a      	uxth	r2, r3
    d050:	68fb      	ldr	r3, [r7, #12]
    d052:	685b      	ldr	r3, [r3, #4]
    d054:	b212      	sxth	r2, r2
    d056:	801a      	strh	r2, [r3, #0]
    d058:	68bb      	ldr	r3, [r7, #8]
    d05a:	f9b3 3000 	ldrsh.w	r3, [r3]
    d05e:	b29a      	uxth	r2, r3
    d060:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d062:	009b      	lsls	r3, r3, #2
    d064:	68b9      	ldr	r1, [r7, #8]
    d066:	440b      	add	r3, r1
    d068:	f9b3 3000 	ldrsh.w	r3, [r3]
    d06c:	b29b      	uxth	r3, r3
    d06e:	1ad3      	subs	r3, r2, r3
    d070:	b29a      	uxth	r2, r3
    d072:	68fb      	ldr	r3, [r7, #12]
    d074:	685b      	ldr	r3, [r3, #4]
    d076:	b212      	sxth	r2, r2
    d078:	805a      	strh	r2, [r3, #2]
    d07a:	68fb      	ldr	r3, [r7, #12]
    d07c:	685b      	ldr	r3, [r3, #4]
    d07e:	f9b3 3000 	ldrsh.w	r3, [r3]
    d082:	461a      	mov	r2, r3
    d084:	4613      	mov	r3, r2
    d086:	039b      	lsls	r3, r3, #14
    d088:	1a9b      	subs	r3, r3, r2
    d08a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d08e:	13da      	asrs	r2, r3, #15
    d090:	68fb      	ldr	r3, [r7, #12]
    d092:	685b      	ldr	r3, [r3, #4]
    d094:	b212      	sxth	r2, r2
    d096:	801a      	strh	r2, [r3, #0]
    d098:	68fb      	ldr	r3, [r7, #12]
    d09a:	685b      	ldr	r3, [r3, #4]
    d09c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d0a0:	461a      	mov	r2, r3
    d0a2:	4613      	mov	r3, r2
    d0a4:	039b      	lsls	r3, r3, #14
    d0a6:	1a9b      	subs	r3, r3, r2
    d0a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d0ac:	13da      	asrs	r2, r3, #15
    d0ae:	68fb      	ldr	r3, [r7, #12]
    d0b0:	685b      	ldr	r3, [r3, #4]
    d0b2:	b212      	sxth	r2, r2
    d0b4:	805a      	strh	r2, [r3, #2]
    d0b6:	2301      	movs	r3, #1
    d0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    d0ba:	e111      	b.n	d2e0 <kiss_fftri+0x2ca>
    d0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d0be:	009b      	lsls	r3, r3, #2
    d0c0:	68ba      	ldr	r2, [r7, #8]
    d0c2:	441a      	add	r2, r3
    d0c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
    d0c8:	6810      	ldr	r0, [r2, #0]
    d0ca:	6018      	str	r0, [r3, #0]
    d0cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d0d0:	1ad3      	subs	r3, r2, r3
    d0d2:	009b      	lsls	r3, r3, #2
    d0d4:	68ba      	ldr	r2, [r7, #8]
    d0d6:	4413      	add	r3, r2
    d0d8:	f9b3 3000 	ldrsh.w	r3, [r3]
    d0dc:	843b      	strh	r3, [r7, #32]
    d0de:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d0e2:	1ad3      	subs	r3, r2, r3
    d0e4:	009b      	lsls	r3, r3, #2
    d0e6:	68ba      	ldr	r2, [r7, #8]
    d0e8:	4413      	add	r3, r2
    d0ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d0ee:	b29b      	uxth	r3, r3
    d0f0:	425b      	negs	r3, r3
    d0f2:	b29b      	uxth	r3, r3
    d0f4:	b21b      	sxth	r3, r3
    d0f6:	847b      	strh	r3, [r7, #34]	; 0x22
    d0f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    d0fc:	461a      	mov	r2, r3
    d0fe:	4613      	mov	r3, r2
    d100:	039b      	lsls	r3, r3, #14
    d102:	1a9b      	subs	r3, r3, r2
    d104:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d108:	13db      	asrs	r3, r3, #15
    d10a:	b21b      	sxth	r3, r3
    d10c:	84bb      	strh	r3, [r7, #36]	; 0x24
    d10e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    d112:	461a      	mov	r2, r3
    d114:	4613      	mov	r3, r2
    d116:	039b      	lsls	r3, r3, #14
    d118:	1a9b      	subs	r3, r3, r2
    d11a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d11e:	13db      	asrs	r3, r3, #15
    d120:	b21b      	sxth	r3, r3
    d122:	84fb      	strh	r3, [r7, #38]	; 0x26
    d124:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    d128:	461a      	mov	r2, r3
    d12a:	4613      	mov	r3, r2
    d12c:	039b      	lsls	r3, r3, #14
    d12e:	1a9b      	subs	r3, r3, r2
    d130:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d134:	13db      	asrs	r3, r3, #15
    d136:	b21b      	sxth	r3, r3
    d138:	843b      	strh	r3, [r7, #32]
    d13a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    d13e:	461a      	mov	r2, r3
    d140:	4613      	mov	r3, r2
    d142:	039b      	lsls	r3, r3, #14
    d144:	1a9b      	subs	r3, r3, r2
    d146:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d14a:	13db      	asrs	r3, r3, #15
    d14c:	b21b      	sxth	r3, r3
    d14e:	847b      	strh	r3, [r7, #34]	; 0x22
    d150:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    d154:	b29a      	uxth	r2, r3
    d156:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    d15a:	b29b      	uxth	r3, r3
    d15c:	4413      	add	r3, r2
    d15e:	b29b      	uxth	r3, r3
    d160:	b21b      	sxth	r3, r3
    d162:	83bb      	strh	r3, [r7, #28]
    d164:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    d168:	b29a      	uxth	r2, r3
    d16a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    d16e:	b29b      	uxth	r3, r3
    d170:	4413      	add	r3, r2
    d172:	b29b      	uxth	r3, r3
    d174:	b21b      	sxth	r3, r3
    d176:	83fb      	strh	r3, [r7, #30]
    d178:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    d17c:	b29a      	uxth	r2, r3
    d17e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    d182:	b29b      	uxth	r3, r3
    d184:	1ad3      	subs	r3, r2, r3
    d186:	b29b      	uxth	r3, r3
    d188:	b21b      	sxth	r3, r3
    d18a:	82bb      	strh	r3, [r7, #20]
    d18c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    d190:	b29a      	uxth	r2, r3
    d192:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    d196:	b29b      	uxth	r3, r3
    d198:	1ad3      	subs	r3, r2, r3
    d19a:	b29b      	uxth	r3, r3
    d19c:	b21b      	sxth	r3, r3
    d19e:	82fb      	strh	r3, [r7, #22]
    d1a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    d1a4:	4619      	mov	r1, r3
    d1a6:	68fb      	ldr	r3, [r7, #12]
    d1a8:	689a      	ldr	r2, [r3, #8]
    d1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d1ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d1b0:	3b01      	subs	r3, #1
    d1b2:	009b      	lsls	r3, r3, #2
    d1b4:	4413      	add	r3, r2
    d1b6:	f9b3 3000 	ldrsh.w	r3, [r3]
    d1ba:	fb03 f201 	mul.w	r2, r3, r1
    d1be:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    d1c2:	4618      	mov	r0, r3
    d1c4:	68fb      	ldr	r3, [r7, #12]
    d1c6:	6899      	ldr	r1, [r3, #8]
    d1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d1ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d1ce:	3b01      	subs	r3, #1
    d1d0:	009b      	lsls	r3, r3, #2
    d1d2:	440b      	add	r3, r1
    d1d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d1d8:	fb03 f300 	mul.w	r3, r3, r0
    d1dc:	1ad3      	subs	r3, r2, r3
    d1de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d1e2:	13db      	asrs	r3, r3, #15
    d1e4:	b21b      	sxth	r3, r3
    d1e6:	833b      	strh	r3, [r7, #24]
    d1e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    d1ec:	4619      	mov	r1, r3
    d1ee:	68fb      	ldr	r3, [r7, #12]
    d1f0:	689a      	ldr	r2, [r3, #8]
    d1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d1f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d1f8:	3b01      	subs	r3, #1
    d1fa:	009b      	lsls	r3, r3, #2
    d1fc:	4413      	add	r3, r2
    d1fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d202:	fb03 f201 	mul.w	r2, r3, r1
    d206:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    d20a:	4618      	mov	r0, r3
    d20c:	68fb      	ldr	r3, [r7, #12]
    d20e:	6899      	ldr	r1, [r3, #8]
    d210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d212:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d216:	3b01      	subs	r3, #1
    d218:	009b      	lsls	r3, r3, #2
    d21a:	440b      	add	r3, r1
    d21c:	f9b3 3000 	ldrsh.w	r3, [r3]
    d220:	fb03 f300 	mul.w	r3, r3, r0
    d224:	4413      	add	r3, r2
    d226:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d22a:	13db      	asrs	r3, r3, #15
    d22c:	b21b      	sxth	r3, r3
    d22e:	837b      	strh	r3, [r7, #26]
    d230:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
    d234:	b29a      	uxth	r2, r3
    d236:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    d23a:	b29b      	uxth	r3, r3
    d23c:	4413      	add	r3, r2
    d23e:	b299      	uxth	r1, r3
    d240:	68fb      	ldr	r3, [r7, #12]
    d242:	685a      	ldr	r2, [r3, #4]
    d244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d246:	009b      	lsls	r3, r3, #2
    d248:	4413      	add	r3, r2
    d24a:	b20a      	sxth	r2, r1
    d24c:	801a      	strh	r2, [r3, #0]
    d24e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    d252:	b29a      	uxth	r2, r3
    d254:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
    d258:	b29b      	uxth	r3, r3
    d25a:	4413      	add	r3, r2
    d25c:	b299      	uxth	r1, r3
    d25e:	68fb      	ldr	r3, [r7, #12]
    d260:	685a      	ldr	r2, [r3, #4]
    d262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d264:	009b      	lsls	r3, r3, #2
    d266:	4413      	add	r3, r2
    d268:	b20a      	sxth	r2, r1
    d26a:	805a      	strh	r2, [r3, #2]
    d26c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
    d270:	b29a      	uxth	r2, r3
    d272:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    d276:	b29b      	uxth	r3, r3
    d278:	1ad3      	subs	r3, r2, r3
    d27a:	b298      	uxth	r0, r3
    d27c:	68fb      	ldr	r3, [r7, #12]
    d27e:	685a      	ldr	r2, [r3, #4]
    d280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    d282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d284:	1acb      	subs	r3, r1, r3
    d286:	009b      	lsls	r3, r3, #2
    d288:	4413      	add	r3, r2
    d28a:	b202      	sxth	r2, r0
    d28c:	801a      	strh	r2, [r3, #0]
    d28e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    d292:	b29a      	uxth	r2, r3
    d294:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
    d298:	b29b      	uxth	r3, r3
    d29a:	1ad3      	subs	r3, r2, r3
    d29c:	b298      	uxth	r0, r3
    d29e:	68fb      	ldr	r3, [r7, #12]
    d2a0:	685a      	ldr	r2, [r3, #4]
    d2a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    d2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2a6:	1acb      	subs	r3, r1, r3
    d2a8:	009b      	lsls	r3, r3, #2
    d2aa:	4413      	add	r3, r2
    d2ac:	b202      	sxth	r2, r0
    d2ae:	805a      	strh	r2, [r3, #2]
    d2b0:	68fb      	ldr	r3, [r7, #12]
    d2b2:	685a      	ldr	r2, [r3, #4]
    d2b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    d2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2b8:	1acb      	subs	r3, r1, r3
    d2ba:	009b      	lsls	r3, r3, #2
    d2bc:	4413      	add	r3, r2
    d2be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d2c2:	b29b      	uxth	r3, r3
    d2c4:	425b      	negs	r3, r3
    d2c6:	b298      	uxth	r0, r3
    d2c8:	68fb      	ldr	r3, [r7, #12]
    d2ca:	685a      	ldr	r2, [r3, #4]
    d2cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    d2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2d0:	1acb      	subs	r3, r1, r3
    d2d2:	009b      	lsls	r3, r3, #2
    d2d4:	4413      	add	r3, r2
    d2d6:	b202      	sxth	r2, r0
    d2d8:	805a      	strh	r2, [r3, #2]
    d2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2dc:	3301      	adds	r3, #1
    d2de:	62fb      	str	r3, [r7, #44]	; 0x2c
    d2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d2e2:	0fda      	lsrs	r2, r3, #31
    d2e4:	4413      	add	r3, r2
    d2e6:	105b      	asrs	r3, r3, #1
    d2e8:	461a      	mov	r2, r3
    d2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d2ec:	4293      	cmp	r3, r2
    d2ee:	f77f aee5 	ble.w	d0bc <kiss_fftri+0xa6>
    d2f2:	68fb      	ldr	r3, [r7, #12]
    d2f4:	6818      	ldr	r0, [r3, #0]
    d2f6:	68fb      	ldr	r3, [r7, #12]
    d2f8:	685b      	ldr	r3, [r3, #4]
    d2fa:	687a      	ldr	r2, [r7, #4]
    d2fc:	4619      	mov	r1, r3
    d2fe:	f001 fbcd 	bl	ea9c <kiss_fft>
    d302:	e000      	b.n	d306 <kiss_fftri+0x2f0>
    d304:	bf00      	nop
    d306:	3730      	adds	r7, #48	; 0x30
    d308:	46bd      	mov	sp, r7
    d30a:	bd80      	pop	{r7, pc}
    d30c:	0000      	movs	r0, r0
	...

0000d310 <kf_bfly2>:
    d310:	b480      	push	{r7}
    d312:	b089      	sub	sp, #36	; 0x24
    d314:	af00      	add	r7, sp, #0
    d316:	60f8      	str	r0, [r7, #12]
    d318:	60b9      	str	r1, [r7, #8]
    d31a:	607a      	str	r2, [r7, #4]
    d31c:	603b      	str	r3, [r7, #0]
    d31e:	687b      	ldr	r3, [r7, #4]
    d320:	f503 7384 	add.w	r3, r3, #264	; 0x108
    d324:	61bb      	str	r3, [r7, #24]
    d326:	683b      	ldr	r3, [r7, #0]
    d328:	009b      	lsls	r3, r3, #2
    d32a:	68fa      	ldr	r2, [r7, #12]
    d32c:	4413      	add	r3, r2
    d32e:	61fb      	str	r3, [r7, #28]
    d330:	68fb      	ldr	r3, [r7, #12]
    d332:	f9b3 3000 	ldrsh.w	r3, [r3]
    d336:	461a      	mov	r2, r3
    d338:	4613      	mov	r3, r2
    d33a:	039b      	lsls	r3, r3, #14
    d33c:	1a9b      	subs	r3, r3, r2
    d33e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d342:	13db      	asrs	r3, r3, #15
    d344:	b21a      	sxth	r2, r3
    d346:	68fb      	ldr	r3, [r7, #12]
    d348:	801a      	strh	r2, [r3, #0]
    d34a:	68fb      	ldr	r3, [r7, #12]
    d34c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d350:	461a      	mov	r2, r3
    d352:	4613      	mov	r3, r2
    d354:	039b      	lsls	r3, r3, #14
    d356:	1a9b      	subs	r3, r3, r2
    d358:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d35c:	13db      	asrs	r3, r3, #15
    d35e:	b21a      	sxth	r2, r3
    d360:	68fb      	ldr	r3, [r7, #12]
    d362:	805a      	strh	r2, [r3, #2]
    d364:	69fb      	ldr	r3, [r7, #28]
    d366:	f9b3 3000 	ldrsh.w	r3, [r3]
    d36a:	461a      	mov	r2, r3
    d36c:	4613      	mov	r3, r2
    d36e:	039b      	lsls	r3, r3, #14
    d370:	1a9b      	subs	r3, r3, r2
    d372:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d376:	13db      	asrs	r3, r3, #15
    d378:	b21a      	sxth	r2, r3
    d37a:	69fb      	ldr	r3, [r7, #28]
    d37c:	801a      	strh	r2, [r3, #0]
    d37e:	69fb      	ldr	r3, [r7, #28]
    d380:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d384:	461a      	mov	r2, r3
    d386:	4613      	mov	r3, r2
    d388:	039b      	lsls	r3, r3, #14
    d38a:	1a9b      	subs	r3, r3, r2
    d38c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d390:	13db      	asrs	r3, r3, #15
    d392:	b21a      	sxth	r2, r3
    d394:	69fb      	ldr	r3, [r7, #28]
    d396:	805a      	strh	r2, [r3, #2]
    d398:	69fb      	ldr	r3, [r7, #28]
    d39a:	f9b3 3000 	ldrsh.w	r3, [r3]
    d39e:	461a      	mov	r2, r3
    d3a0:	69bb      	ldr	r3, [r7, #24]
    d3a2:	f9b3 3000 	ldrsh.w	r3, [r3]
    d3a6:	fb03 f202 	mul.w	r2, r3, r2
    d3aa:	69fb      	ldr	r3, [r7, #28]
    d3ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d3b0:	4619      	mov	r1, r3
    d3b2:	69bb      	ldr	r3, [r7, #24]
    d3b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d3b8:	fb03 f301 	mul.w	r3, r3, r1
    d3bc:	1ad3      	subs	r3, r2, r3
    d3be:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d3c2:	13db      	asrs	r3, r3, #15
    d3c4:	b21b      	sxth	r3, r3
    d3c6:	82bb      	strh	r3, [r7, #20]
    d3c8:	69fb      	ldr	r3, [r7, #28]
    d3ca:	f9b3 3000 	ldrsh.w	r3, [r3]
    d3ce:	461a      	mov	r2, r3
    d3d0:	69bb      	ldr	r3, [r7, #24]
    d3d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d3d6:	fb03 f202 	mul.w	r2, r3, r2
    d3da:	69fb      	ldr	r3, [r7, #28]
    d3dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d3e0:	4619      	mov	r1, r3
    d3e2:	69bb      	ldr	r3, [r7, #24]
    d3e4:	f9b3 3000 	ldrsh.w	r3, [r3]
    d3e8:	fb03 f301 	mul.w	r3, r3, r1
    d3ec:	4413      	add	r3, r2
    d3ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d3f2:	13db      	asrs	r3, r3, #15
    d3f4:	b21b      	sxth	r3, r3
    d3f6:	82fb      	strh	r3, [r7, #22]
    d3f8:	68bb      	ldr	r3, [r7, #8]
    d3fa:	009b      	lsls	r3, r3, #2
    d3fc:	69ba      	ldr	r2, [r7, #24]
    d3fe:	4413      	add	r3, r2
    d400:	61bb      	str	r3, [r7, #24]
    d402:	68fb      	ldr	r3, [r7, #12]
    d404:	f9b3 3000 	ldrsh.w	r3, [r3]
    d408:	b29a      	uxth	r2, r3
    d40a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    d40e:	b29b      	uxth	r3, r3
    d410:	1ad3      	subs	r3, r2, r3
    d412:	b29b      	uxth	r3, r3
    d414:	b21a      	sxth	r2, r3
    d416:	69fb      	ldr	r3, [r7, #28]
    d418:	801a      	strh	r2, [r3, #0]
    d41a:	68fb      	ldr	r3, [r7, #12]
    d41c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d420:	b29a      	uxth	r2, r3
    d422:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    d426:	b29b      	uxth	r3, r3
    d428:	1ad3      	subs	r3, r2, r3
    d42a:	b29b      	uxth	r3, r3
    d42c:	b21a      	sxth	r2, r3
    d42e:	69fb      	ldr	r3, [r7, #28]
    d430:	805a      	strh	r2, [r3, #2]
    d432:	68fb      	ldr	r3, [r7, #12]
    d434:	f9b3 3000 	ldrsh.w	r3, [r3]
    d438:	b29a      	uxth	r2, r3
    d43a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    d43e:	b29b      	uxth	r3, r3
    d440:	4413      	add	r3, r2
    d442:	b29b      	uxth	r3, r3
    d444:	b21a      	sxth	r2, r3
    d446:	68fb      	ldr	r3, [r7, #12]
    d448:	801a      	strh	r2, [r3, #0]
    d44a:	68fb      	ldr	r3, [r7, #12]
    d44c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d450:	b29a      	uxth	r2, r3
    d452:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    d456:	b29b      	uxth	r3, r3
    d458:	4413      	add	r3, r2
    d45a:	b29b      	uxth	r3, r3
    d45c:	b21a      	sxth	r2, r3
    d45e:	68fb      	ldr	r3, [r7, #12]
    d460:	805a      	strh	r2, [r3, #2]
    d462:	69fb      	ldr	r3, [r7, #28]
    d464:	3304      	adds	r3, #4
    d466:	61fb      	str	r3, [r7, #28]
    d468:	68fb      	ldr	r3, [r7, #12]
    d46a:	3304      	adds	r3, #4
    d46c:	60fb      	str	r3, [r7, #12]
    d46e:	683b      	ldr	r3, [r7, #0]
    d470:	3b01      	subs	r3, #1
    d472:	603b      	str	r3, [r7, #0]
    d474:	683b      	ldr	r3, [r7, #0]
    d476:	2b00      	cmp	r3, #0
    d478:	f47f af5a 	bne.w	d330 <kf_bfly2+0x20>
    d47c:	bf00      	nop
    d47e:	bf00      	nop
    d480:	3724      	adds	r7, #36	; 0x24
    d482:	46bd      	mov	sp, r7
    d484:	bc80      	pop	{r7}
    d486:	4770      	bx	lr

0000d488 <kf_bfly4>:
    d488:	b480      	push	{r7}
    d48a:	b091      	sub	sp, #68	; 0x44
    d48c:	af00      	add	r7, sp, #0
    d48e:	60f8      	str	r0, [r7, #12]
    d490:	60b9      	str	r1, [r7, #8]
    d492:	607a      	str	r2, [r7, #4]
    d494:	603b      	str	r3, [r7, #0]
    d496:	683b      	ldr	r3, [r7, #0]
    d498:	633b      	str	r3, [r7, #48]	; 0x30
    d49a:	683b      	ldr	r3, [r7, #0]
    d49c:	005b      	lsls	r3, r3, #1
    d49e:	62fb      	str	r3, [r7, #44]	; 0x2c
    d4a0:	683a      	ldr	r2, [r7, #0]
    d4a2:	4613      	mov	r3, r2
    d4a4:	005b      	lsls	r3, r3, #1
    d4a6:	4413      	add	r3, r2
    d4a8:	62bb      	str	r3, [r7, #40]	; 0x28
    d4aa:	687b      	ldr	r3, [r7, #4]
    d4ac:	f503 7384 	add.w	r3, r3, #264	; 0x108
    d4b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    d4b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d4b4:	63bb      	str	r3, [r7, #56]	; 0x38
    d4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d4b8:	637b      	str	r3, [r7, #52]	; 0x34
    d4ba:	68fb      	ldr	r3, [r7, #12]
    d4bc:	f9b3 3000 	ldrsh.w	r3, [r3]
    d4c0:	461a      	mov	r2, r3
    d4c2:	4613      	mov	r3, r2
    d4c4:	035b      	lsls	r3, r3, #13
    d4c6:	1a9b      	subs	r3, r3, r2
    d4c8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d4cc:	13db      	asrs	r3, r3, #15
    d4ce:	b21a      	sxth	r2, r3
    d4d0:	68fb      	ldr	r3, [r7, #12]
    d4d2:	801a      	strh	r2, [r3, #0]
    d4d4:	68fb      	ldr	r3, [r7, #12]
    d4d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d4da:	461a      	mov	r2, r3
    d4dc:	4613      	mov	r3, r2
    d4de:	035b      	lsls	r3, r3, #13
    d4e0:	1a9b      	subs	r3, r3, r2
    d4e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d4e6:	13db      	asrs	r3, r3, #15
    d4e8:	b21a      	sxth	r2, r3
    d4ea:	68fb      	ldr	r3, [r7, #12]
    d4ec:	805a      	strh	r2, [r3, #2]
    d4ee:	683b      	ldr	r3, [r7, #0]
    d4f0:	009b      	lsls	r3, r3, #2
    d4f2:	68fa      	ldr	r2, [r7, #12]
    d4f4:	4413      	add	r3, r2
    d4f6:	f9b3 3000 	ldrsh.w	r3, [r3]
    d4fa:	461a      	mov	r2, r3
    d4fc:	4613      	mov	r3, r2
    d4fe:	035b      	lsls	r3, r3, #13
    d500:	1a9b      	subs	r3, r3, r2
    d502:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d506:	13d9      	asrs	r1, r3, #15
    d508:	683b      	ldr	r3, [r7, #0]
    d50a:	009b      	lsls	r3, r3, #2
    d50c:	68fa      	ldr	r2, [r7, #12]
    d50e:	4413      	add	r3, r2
    d510:	b20a      	sxth	r2, r1
    d512:	801a      	strh	r2, [r3, #0]
    d514:	683b      	ldr	r3, [r7, #0]
    d516:	009b      	lsls	r3, r3, #2
    d518:	68fa      	ldr	r2, [r7, #12]
    d51a:	4413      	add	r3, r2
    d51c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d520:	461a      	mov	r2, r3
    d522:	4613      	mov	r3, r2
    d524:	035b      	lsls	r3, r3, #13
    d526:	1a9b      	subs	r3, r3, r2
    d528:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d52c:	13d9      	asrs	r1, r3, #15
    d52e:	683b      	ldr	r3, [r7, #0]
    d530:	009b      	lsls	r3, r3, #2
    d532:	68fa      	ldr	r2, [r7, #12]
    d534:	4413      	add	r3, r2
    d536:	b20a      	sxth	r2, r1
    d538:	805a      	strh	r2, [r3, #2]
    d53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d53c:	009b      	lsls	r3, r3, #2
    d53e:	68fa      	ldr	r2, [r7, #12]
    d540:	4413      	add	r3, r2
    d542:	f9b3 3000 	ldrsh.w	r3, [r3]
    d546:	461a      	mov	r2, r3
    d548:	4613      	mov	r3, r2
    d54a:	035b      	lsls	r3, r3, #13
    d54c:	1a9b      	subs	r3, r3, r2
    d54e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d552:	13d9      	asrs	r1, r3, #15
    d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d556:	009b      	lsls	r3, r3, #2
    d558:	68fa      	ldr	r2, [r7, #12]
    d55a:	4413      	add	r3, r2
    d55c:	b20a      	sxth	r2, r1
    d55e:	801a      	strh	r2, [r3, #0]
    d560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d562:	009b      	lsls	r3, r3, #2
    d564:	68fa      	ldr	r2, [r7, #12]
    d566:	4413      	add	r3, r2
    d568:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d56c:	461a      	mov	r2, r3
    d56e:	4613      	mov	r3, r2
    d570:	035b      	lsls	r3, r3, #13
    d572:	1a9b      	subs	r3, r3, r2
    d574:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d578:	13d9      	asrs	r1, r3, #15
    d57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d57c:	009b      	lsls	r3, r3, #2
    d57e:	68fa      	ldr	r2, [r7, #12]
    d580:	4413      	add	r3, r2
    d582:	b20a      	sxth	r2, r1
    d584:	805a      	strh	r2, [r3, #2]
    d586:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d588:	009b      	lsls	r3, r3, #2
    d58a:	68fa      	ldr	r2, [r7, #12]
    d58c:	4413      	add	r3, r2
    d58e:	f9b3 3000 	ldrsh.w	r3, [r3]
    d592:	461a      	mov	r2, r3
    d594:	4613      	mov	r3, r2
    d596:	035b      	lsls	r3, r3, #13
    d598:	1a9b      	subs	r3, r3, r2
    d59a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d59e:	13d9      	asrs	r1, r3, #15
    d5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5a2:	009b      	lsls	r3, r3, #2
    d5a4:	68fa      	ldr	r2, [r7, #12]
    d5a6:	4413      	add	r3, r2
    d5a8:	b20a      	sxth	r2, r1
    d5aa:	801a      	strh	r2, [r3, #0]
    d5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5ae:	009b      	lsls	r3, r3, #2
    d5b0:	68fa      	ldr	r2, [r7, #12]
    d5b2:	4413      	add	r3, r2
    d5b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d5b8:	461a      	mov	r2, r3
    d5ba:	4613      	mov	r3, r2
    d5bc:	035b      	lsls	r3, r3, #13
    d5be:	1a9b      	subs	r3, r3, r2
    d5c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d5c4:	13d9      	asrs	r1, r3, #15
    d5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5c8:	009b      	lsls	r3, r3, #2
    d5ca:	68fa      	ldr	r2, [r7, #12]
    d5cc:	4413      	add	r3, r2
    d5ce:	b20a      	sxth	r2, r1
    d5d0:	805a      	strh	r2, [r3, #2]
    d5d2:	683b      	ldr	r3, [r7, #0]
    d5d4:	009b      	lsls	r3, r3, #2
    d5d6:	68fa      	ldr	r2, [r7, #12]
    d5d8:	4413      	add	r3, r2
    d5da:	f9b3 3000 	ldrsh.w	r3, [r3]
    d5de:	461a      	mov	r2, r3
    d5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d5e2:	f9b3 3000 	ldrsh.w	r3, [r3]
    d5e6:	fb03 f202 	mul.w	r2, r3, r2
    d5ea:	683b      	ldr	r3, [r7, #0]
    d5ec:	009b      	lsls	r3, r3, #2
    d5ee:	68f9      	ldr	r1, [r7, #12]
    d5f0:	440b      	add	r3, r1
    d5f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d5f6:	4619      	mov	r1, r3
    d5f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d5fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d5fe:	fb03 f301 	mul.w	r3, r3, r1
    d602:	1ad3      	subs	r3, r2, r3
    d604:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d608:	13db      	asrs	r3, r3, #15
    d60a:	b21b      	sxth	r3, r3
    d60c:	823b      	strh	r3, [r7, #16]
    d60e:	683b      	ldr	r3, [r7, #0]
    d610:	009b      	lsls	r3, r3, #2
    d612:	68fa      	ldr	r2, [r7, #12]
    d614:	4413      	add	r3, r2
    d616:	f9b3 3000 	ldrsh.w	r3, [r3]
    d61a:	461a      	mov	r2, r3
    d61c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d61e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d622:	fb03 f202 	mul.w	r2, r3, r2
    d626:	683b      	ldr	r3, [r7, #0]
    d628:	009b      	lsls	r3, r3, #2
    d62a:	68f9      	ldr	r1, [r7, #12]
    d62c:	440b      	add	r3, r1
    d62e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d632:	4619      	mov	r1, r3
    d634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    d636:	f9b3 3000 	ldrsh.w	r3, [r3]
    d63a:	fb03 f301 	mul.w	r3, r3, r1
    d63e:	4413      	add	r3, r2
    d640:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d644:	13db      	asrs	r3, r3, #15
    d646:	b21b      	sxth	r3, r3
    d648:	827b      	strh	r3, [r7, #18]
    d64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d64c:	009b      	lsls	r3, r3, #2
    d64e:	68fa      	ldr	r2, [r7, #12]
    d650:	4413      	add	r3, r2
    d652:	f9b3 3000 	ldrsh.w	r3, [r3]
    d656:	461a      	mov	r2, r3
    d658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d65a:	f9b3 3000 	ldrsh.w	r3, [r3]
    d65e:	fb03 f202 	mul.w	r2, r3, r2
    d662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d664:	009b      	lsls	r3, r3, #2
    d666:	68f9      	ldr	r1, [r7, #12]
    d668:	440b      	add	r3, r1
    d66a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d66e:	4619      	mov	r1, r3
    d670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d672:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d676:	fb03 f301 	mul.w	r3, r3, r1
    d67a:	1ad3      	subs	r3, r2, r3
    d67c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d680:	13db      	asrs	r3, r3, #15
    d682:	b21b      	sxth	r3, r3
    d684:	82bb      	strh	r3, [r7, #20]
    d686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d688:	009b      	lsls	r3, r3, #2
    d68a:	68fa      	ldr	r2, [r7, #12]
    d68c:	4413      	add	r3, r2
    d68e:	f9b3 3000 	ldrsh.w	r3, [r3]
    d692:	461a      	mov	r2, r3
    d694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d696:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d69a:	fb03 f202 	mul.w	r2, r3, r2
    d69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d6a0:	009b      	lsls	r3, r3, #2
    d6a2:	68f9      	ldr	r1, [r7, #12]
    d6a4:	440b      	add	r3, r1
    d6a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d6aa:	4619      	mov	r1, r3
    d6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    d6ae:	f9b3 3000 	ldrsh.w	r3, [r3]
    d6b2:	fb03 f301 	mul.w	r3, r3, r1
    d6b6:	4413      	add	r3, r2
    d6b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d6bc:	13db      	asrs	r3, r3, #15
    d6be:	b21b      	sxth	r3, r3
    d6c0:	82fb      	strh	r3, [r7, #22]
    d6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d6c4:	009b      	lsls	r3, r3, #2
    d6c6:	68fa      	ldr	r2, [r7, #12]
    d6c8:	4413      	add	r3, r2
    d6ca:	f9b3 3000 	ldrsh.w	r3, [r3]
    d6ce:	461a      	mov	r2, r3
    d6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d6d2:	f9b3 3000 	ldrsh.w	r3, [r3]
    d6d6:	fb03 f202 	mul.w	r2, r3, r2
    d6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d6dc:	009b      	lsls	r3, r3, #2
    d6de:	68f9      	ldr	r1, [r7, #12]
    d6e0:	440b      	add	r3, r1
    d6e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d6e6:	4619      	mov	r1, r3
    d6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d6ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d6ee:	fb03 f301 	mul.w	r3, r3, r1
    d6f2:	1ad3      	subs	r3, r2, r3
    d6f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d6f8:	13db      	asrs	r3, r3, #15
    d6fa:	b21b      	sxth	r3, r3
    d6fc:	833b      	strh	r3, [r7, #24]
    d6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d700:	009b      	lsls	r3, r3, #2
    d702:	68fa      	ldr	r2, [r7, #12]
    d704:	4413      	add	r3, r2
    d706:	f9b3 3000 	ldrsh.w	r3, [r3]
    d70a:	461a      	mov	r2, r3
    d70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d70e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d712:	fb03 f202 	mul.w	r2, r3, r2
    d716:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d718:	009b      	lsls	r3, r3, #2
    d71a:	68f9      	ldr	r1, [r7, #12]
    d71c:	440b      	add	r3, r1
    d71e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d722:	4619      	mov	r1, r3
    d724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d726:	f9b3 3000 	ldrsh.w	r3, [r3]
    d72a:	fb03 f301 	mul.w	r3, r3, r1
    d72e:	4413      	add	r3, r2
    d730:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d734:	13db      	asrs	r3, r3, #15
    d736:	b21b      	sxth	r3, r3
    d738:	837b      	strh	r3, [r7, #26]
    d73a:	68fb      	ldr	r3, [r7, #12]
    d73c:	f9b3 3000 	ldrsh.w	r3, [r3]
    d740:	b29a      	uxth	r2, r3
    d742:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    d746:	b29b      	uxth	r3, r3
    d748:	1ad3      	subs	r3, r2, r3
    d74a:	b29b      	uxth	r3, r3
    d74c:	b21b      	sxth	r3, r3
    d74e:	84bb      	strh	r3, [r7, #36]	; 0x24
    d750:	68fb      	ldr	r3, [r7, #12]
    d752:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d756:	b29a      	uxth	r2, r3
    d758:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    d75c:	b29b      	uxth	r3, r3
    d75e:	1ad3      	subs	r3, r2, r3
    d760:	b29b      	uxth	r3, r3
    d762:	b21b      	sxth	r3, r3
    d764:	84fb      	strh	r3, [r7, #38]	; 0x26
    d766:	68fb      	ldr	r3, [r7, #12]
    d768:	f9b3 3000 	ldrsh.w	r3, [r3]
    d76c:	b29a      	uxth	r2, r3
    d76e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    d772:	b29b      	uxth	r3, r3
    d774:	4413      	add	r3, r2
    d776:	b29b      	uxth	r3, r3
    d778:	b21a      	sxth	r2, r3
    d77a:	68fb      	ldr	r3, [r7, #12]
    d77c:	801a      	strh	r2, [r3, #0]
    d77e:	68fb      	ldr	r3, [r7, #12]
    d780:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d784:	b29a      	uxth	r2, r3
    d786:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    d78a:	b29b      	uxth	r3, r3
    d78c:	4413      	add	r3, r2
    d78e:	b29b      	uxth	r3, r3
    d790:	b21a      	sxth	r2, r3
    d792:	68fb      	ldr	r3, [r7, #12]
    d794:	805a      	strh	r2, [r3, #2]
    d796:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
    d79a:	b29a      	uxth	r2, r3
    d79c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    d7a0:	b29b      	uxth	r3, r3
    d7a2:	4413      	add	r3, r2
    d7a4:	b29b      	uxth	r3, r3
    d7a6:	b21b      	sxth	r3, r3
    d7a8:	83bb      	strh	r3, [r7, #28]
    d7aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
    d7ae:	b29a      	uxth	r2, r3
    d7b0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
    d7b4:	b29b      	uxth	r3, r3
    d7b6:	4413      	add	r3, r2
    d7b8:	b29b      	uxth	r3, r3
    d7ba:	b21b      	sxth	r3, r3
    d7bc:	83fb      	strh	r3, [r7, #30]
    d7be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
    d7c2:	b29a      	uxth	r2, r3
    d7c4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    d7c8:	b29b      	uxth	r3, r3
    d7ca:	1ad3      	subs	r3, r2, r3
    d7cc:	b29b      	uxth	r3, r3
    d7ce:	b21b      	sxth	r3, r3
    d7d0:	843b      	strh	r3, [r7, #32]
    d7d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
    d7d6:	b29a      	uxth	r2, r3
    d7d8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
    d7dc:	b29b      	uxth	r3, r3
    d7de:	1ad3      	subs	r3, r2, r3
    d7e0:	b29b      	uxth	r3, r3
    d7e2:	b21b      	sxth	r3, r3
    d7e4:	847b      	strh	r3, [r7, #34]	; 0x22
    d7e6:	68fb      	ldr	r3, [r7, #12]
    d7e8:	f9b3 3000 	ldrsh.w	r3, [r3]
    d7ec:	b29a      	uxth	r2, r3
    d7ee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
    d7f2:	b29b      	uxth	r3, r3
    d7f4:	1ad3      	subs	r3, r2, r3
    d7f6:	b299      	uxth	r1, r3
    d7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d7fa:	009b      	lsls	r3, r3, #2
    d7fc:	68fa      	ldr	r2, [r7, #12]
    d7fe:	4413      	add	r3, r2
    d800:	b20a      	sxth	r2, r1
    d802:	801a      	strh	r2, [r3, #0]
    d804:	68fb      	ldr	r3, [r7, #12]
    d806:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d80a:	b29a      	uxth	r2, r3
    d80c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    d810:	b29b      	uxth	r3, r3
    d812:	1ad3      	subs	r3, r2, r3
    d814:	b299      	uxth	r1, r3
    d816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d818:	009b      	lsls	r3, r3, #2
    d81a:	68fa      	ldr	r2, [r7, #12]
    d81c:	4413      	add	r3, r2
    d81e:	b20a      	sxth	r2, r1
    d820:	805a      	strh	r2, [r3, #2]
    d822:	68bb      	ldr	r3, [r7, #8]
    d824:	009b      	lsls	r3, r3, #2
    d826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    d828:	4413      	add	r3, r2
    d82a:	63fb      	str	r3, [r7, #60]	; 0x3c
    d82c:	68bb      	ldr	r3, [r7, #8]
    d82e:	00db      	lsls	r3, r3, #3
    d830:	6bba      	ldr	r2, [r7, #56]	; 0x38
    d832:	4413      	add	r3, r2
    d834:	63bb      	str	r3, [r7, #56]	; 0x38
    d836:	68ba      	ldr	r2, [r7, #8]
    d838:	4613      	mov	r3, r2
    d83a:	005b      	lsls	r3, r3, #1
    d83c:	4413      	add	r3, r2
    d83e:	009b      	lsls	r3, r3, #2
    d840:	461a      	mov	r2, r3
    d842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    d844:	4413      	add	r3, r2
    d846:	637b      	str	r3, [r7, #52]	; 0x34
    d848:	68fb      	ldr	r3, [r7, #12]
    d84a:	f9b3 3000 	ldrsh.w	r3, [r3]
    d84e:	b29a      	uxth	r2, r3
    d850:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
    d854:	b29b      	uxth	r3, r3
    d856:	4413      	add	r3, r2
    d858:	b29b      	uxth	r3, r3
    d85a:	b21a      	sxth	r2, r3
    d85c:	68fb      	ldr	r3, [r7, #12]
    d85e:	801a      	strh	r2, [r3, #0]
    d860:	68fb      	ldr	r3, [r7, #12]
    d862:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d866:	b29a      	uxth	r2, r3
    d868:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    d86c:	b29b      	uxth	r3, r3
    d86e:	4413      	add	r3, r2
    d870:	b29b      	uxth	r3, r3
    d872:	b21a      	sxth	r2, r3
    d874:	68fb      	ldr	r3, [r7, #12]
    d876:	805a      	strh	r2, [r3, #2]
    d878:	687b      	ldr	r3, [r7, #4]
    d87a:	685b      	ldr	r3, [r3, #4]
    d87c:	2b00      	cmp	r3, #0
    d87e:	d038      	beq.n	d8f2 <kf_bfly4+0x46a>
    d880:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    d884:	b29a      	uxth	r2, r3
    d886:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    d88a:	b29b      	uxth	r3, r3
    d88c:	1ad3      	subs	r3, r2, r3
    d88e:	b299      	uxth	r1, r3
    d890:	683b      	ldr	r3, [r7, #0]
    d892:	009b      	lsls	r3, r3, #2
    d894:	68fa      	ldr	r2, [r7, #12]
    d896:	4413      	add	r3, r2
    d898:	b20a      	sxth	r2, r1
    d89a:	801a      	strh	r2, [r3, #0]
    d89c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    d8a0:	b29a      	uxth	r2, r3
    d8a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    d8a6:	b29b      	uxth	r3, r3
    d8a8:	4413      	add	r3, r2
    d8aa:	b299      	uxth	r1, r3
    d8ac:	683b      	ldr	r3, [r7, #0]
    d8ae:	009b      	lsls	r3, r3, #2
    d8b0:	68fa      	ldr	r2, [r7, #12]
    d8b2:	4413      	add	r3, r2
    d8b4:	b20a      	sxth	r2, r1
    d8b6:	805a      	strh	r2, [r3, #2]
    d8b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    d8bc:	b29a      	uxth	r2, r3
    d8be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    d8c2:	b29b      	uxth	r3, r3
    d8c4:	4413      	add	r3, r2
    d8c6:	b299      	uxth	r1, r3
    d8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d8ca:	009b      	lsls	r3, r3, #2
    d8cc:	68fa      	ldr	r2, [r7, #12]
    d8ce:	4413      	add	r3, r2
    d8d0:	b20a      	sxth	r2, r1
    d8d2:	801a      	strh	r2, [r3, #0]
    d8d4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    d8d8:	b29a      	uxth	r2, r3
    d8da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    d8de:	b29b      	uxth	r3, r3
    d8e0:	1ad3      	subs	r3, r2, r3
    d8e2:	b299      	uxth	r1, r3
    d8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d8e6:	009b      	lsls	r3, r3, #2
    d8e8:	68fa      	ldr	r2, [r7, #12]
    d8ea:	4413      	add	r3, r2
    d8ec:	b20a      	sxth	r2, r1
    d8ee:	805a      	strh	r2, [r3, #2]
    d8f0:	e037      	b.n	d962 <kf_bfly4+0x4da>
    d8f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    d8f6:	b29a      	uxth	r2, r3
    d8f8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    d8fc:	b29b      	uxth	r3, r3
    d8fe:	4413      	add	r3, r2
    d900:	b299      	uxth	r1, r3
    d902:	683b      	ldr	r3, [r7, #0]
    d904:	009b      	lsls	r3, r3, #2
    d906:	68fa      	ldr	r2, [r7, #12]
    d908:	4413      	add	r3, r2
    d90a:	b20a      	sxth	r2, r1
    d90c:	801a      	strh	r2, [r3, #0]
    d90e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    d912:	b29a      	uxth	r2, r3
    d914:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    d918:	b29b      	uxth	r3, r3
    d91a:	1ad3      	subs	r3, r2, r3
    d91c:	b299      	uxth	r1, r3
    d91e:	683b      	ldr	r3, [r7, #0]
    d920:	009b      	lsls	r3, r3, #2
    d922:	68fa      	ldr	r2, [r7, #12]
    d924:	4413      	add	r3, r2
    d926:	b20a      	sxth	r2, r1
    d928:	805a      	strh	r2, [r3, #2]
    d92a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    d92e:	b29a      	uxth	r2, r3
    d930:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    d934:	b29b      	uxth	r3, r3
    d936:	1ad3      	subs	r3, r2, r3
    d938:	b299      	uxth	r1, r3
    d93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d93c:	009b      	lsls	r3, r3, #2
    d93e:	68fa      	ldr	r2, [r7, #12]
    d940:	4413      	add	r3, r2
    d942:	b20a      	sxth	r2, r1
    d944:	801a      	strh	r2, [r3, #0]
    d946:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    d94a:	b29a      	uxth	r2, r3
    d94c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    d950:	b29b      	uxth	r3, r3
    d952:	4413      	add	r3, r2
    d954:	b299      	uxth	r1, r3
    d956:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d958:	009b      	lsls	r3, r3, #2
    d95a:	68fa      	ldr	r2, [r7, #12]
    d95c:	4413      	add	r3, r2
    d95e:	b20a      	sxth	r2, r1
    d960:	805a      	strh	r2, [r3, #2]
    d962:	68fb      	ldr	r3, [r7, #12]
    d964:	3304      	adds	r3, #4
    d966:	60fb      	str	r3, [r7, #12]
    d968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d96a:	3b01      	subs	r3, #1
    d96c:	633b      	str	r3, [r7, #48]	; 0x30
    d96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    d970:	2b00      	cmp	r3, #0
    d972:	f47f ada2 	bne.w	d4ba <kf_bfly4+0x32>
    d976:	bf00      	nop
    d978:	bf00      	nop
    d97a:	3744      	adds	r7, #68	; 0x44
    d97c:	46bd      	mov	sp, r7
    d97e:	bc80      	pop	{r7}
    d980:	4770      	bx	lr

0000d982 <kf_bfly3>:
    d982:	b480      	push	{r7}
    d984:	b08f      	sub	sp, #60	; 0x3c
    d986:	af00      	add	r7, sp, #0
    d988:	60f8      	str	r0, [r7, #12]
    d98a:	60b9      	str	r1, [r7, #8]
    d98c:	607a      	str	r2, [r7, #4]
    d98e:	603b      	str	r3, [r7, #0]
    d990:	683b      	ldr	r3, [r7, #0]
    d992:	637b      	str	r3, [r7, #52]	; 0x34
    d994:	683b      	ldr	r3, [r7, #0]
    d996:	005b      	lsls	r3, r3, #1
    d998:	62bb      	str	r3, [r7, #40]	; 0x28
    d99a:	68bb      	ldr	r3, [r7, #8]
    d99c:	683a      	ldr	r2, [r7, #0]
    d99e:	fb02 f203 	mul.w	r2, r2, r3
    d9a2:	687b      	ldr	r3, [r7, #4]
    d9a4:	3242      	adds	r2, #66	; 0x42
    d9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    d9aa:	613b      	str	r3, [r7, #16]
    d9ac:	687b      	ldr	r3, [r7, #4]
    d9ae:	f503 7384 	add.w	r3, r3, #264	; 0x108
    d9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    d9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d9b6:	633b      	str	r3, [r7, #48]	; 0x30
    d9b8:	68fb      	ldr	r3, [r7, #12]
    d9ba:	f9b3 3000 	ldrsh.w	r3, [r3]
    d9be:	461a      	mov	r2, r3
    d9c0:	f642 23aa 	movw	r3, #10922	; 0x2aaa
    d9c4:	fb03 f302 	mul.w	r3, r3, r2
    d9c8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d9cc:	13db      	asrs	r3, r3, #15
    d9ce:	b21a      	sxth	r2, r3
    d9d0:	68fb      	ldr	r3, [r7, #12]
    d9d2:	801a      	strh	r2, [r3, #0]
    d9d4:	68fb      	ldr	r3, [r7, #12]
    d9d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    d9da:	461a      	mov	r2, r3
    d9dc:	f642 23aa 	movw	r3, #10922	; 0x2aaa
    d9e0:	fb03 f302 	mul.w	r3, r3, r2
    d9e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    d9e8:	13db      	asrs	r3, r3, #15
    d9ea:	b21a      	sxth	r2, r3
    d9ec:	68fb      	ldr	r3, [r7, #12]
    d9ee:	805a      	strh	r2, [r3, #2]
    d9f0:	683b      	ldr	r3, [r7, #0]
    d9f2:	009b      	lsls	r3, r3, #2
    d9f4:	68fa      	ldr	r2, [r7, #12]
    d9f6:	4413      	add	r3, r2
    d9f8:	f9b3 3000 	ldrsh.w	r3, [r3]
    d9fc:	461a      	mov	r2, r3
    d9fe:	f642 23aa 	movw	r3, #10922	; 0x2aaa
    da02:	fb03 f302 	mul.w	r3, r3, r2
    da06:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    da0a:	13d9      	asrs	r1, r3, #15
    da0c:	683b      	ldr	r3, [r7, #0]
    da0e:	009b      	lsls	r3, r3, #2
    da10:	68fa      	ldr	r2, [r7, #12]
    da12:	4413      	add	r3, r2
    da14:	b20a      	sxth	r2, r1
    da16:	801a      	strh	r2, [r3, #0]
    da18:	683b      	ldr	r3, [r7, #0]
    da1a:	009b      	lsls	r3, r3, #2
    da1c:	68fa      	ldr	r2, [r7, #12]
    da1e:	4413      	add	r3, r2
    da20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    da24:	461a      	mov	r2, r3
    da26:	f642 23aa 	movw	r3, #10922	; 0x2aaa
    da2a:	fb03 f302 	mul.w	r3, r3, r2
    da2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    da32:	13d9      	asrs	r1, r3, #15
    da34:	683b      	ldr	r3, [r7, #0]
    da36:	009b      	lsls	r3, r3, #2
    da38:	68fa      	ldr	r2, [r7, #12]
    da3a:	4413      	add	r3, r2
    da3c:	b20a      	sxth	r2, r1
    da3e:	805a      	strh	r2, [r3, #2]
    da40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    da42:	009b      	lsls	r3, r3, #2
    da44:	68fa      	ldr	r2, [r7, #12]
    da46:	4413      	add	r3, r2
    da48:	f9b3 3000 	ldrsh.w	r3, [r3]
    da4c:	461a      	mov	r2, r3
    da4e:	f642 23aa 	movw	r3, #10922	; 0x2aaa
    da52:	fb03 f302 	mul.w	r3, r3, r2
    da56:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    da5a:	13d9      	asrs	r1, r3, #15
    da5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    da5e:	009b      	lsls	r3, r3, #2
    da60:	68fa      	ldr	r2, [r7, #12]
    da62:	4413      	add	r3, r2
    da64:	b20a      	sxth	r2, r1
    da66:	801a      	strh	r2, [r3, #0]
    da68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    da6a:	009b      	lsls	r3, r3, #2
    da6c:	68fa      	ldr	r2, [r7, #12]
    da6e:	4413      	add	r3, r2
    da70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    da74:	461a      	mov	r2, r3
    da76:	f642 23aa 	movw	r3, #10922	; 0x2aaa
    da7a:	fb03 f302 	mul.w	r3, r3, r2
    da7e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    da82:	13d9      	asrs	r1, r3, #15
    da84:	6abb      	ldr	r3, [r7, #40]	; 0x28
    da86:	009b      	lsls	r3, r3, #2
    da88:	68fa      	ldr	r2, [r7, #12]
    da8a:	4413      	add	r3, r2
    da8c:	b20a      	sxth	r2, r1
    da8e:	805a      	strh	r2, [r3, #2]
    da90:	683b      	ldr	r3, [r7, #0]
    da92:	009b      	lsls	r3, r3, #2
    da94:	68fa      	ldr	r2, [r7, #12]
    da96:	4413      	add	r3, r2
    da98:	f9b3 3000 	ldrsh.w	r3, [r3]
    da9c:	461a      	mov	r2, r3
    da9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    daa0:	f9b3 3000 	ldrsh.w	r3, [r3]
    daa4:	fb03 f202 	mul.w	r2, r3, r2
    daa8:	683b      	ldr	r3, [r7, #0]
    daaa:	009b      	lsls	r3, r3, #2
    daac:	68f9      	ldr	r1, [r7, #12]
    daae:	440b      	add	r3, r1
    dab0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    dab4:	4619      	mov	r1, r3
    dab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dab8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    dabc:	fb03 f301 	mul.w	r3, r3, r1
    dac0:	1ad3      	subs	r3, r2, r3
    dac2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    dac6:	13db      	asrs	r3, r3, #15
    dac8:	b21b      	sxth	r3, r3
    daca:	833b      	strh	r3, [r7, #24]
    dacc:	683b      	ldr	r3, [r7, #0]
    dace:	009b      	lsls	r3, r3, #2
    dad0:	68fa      	ldr	r2, [r7, #12]
    dad2:	4413      	add	r3, r2
    dad4:	f9b3 3000 	ldrsh.w	r3, [r3]
    dad8:	461a      	mov	r2, r3
    dada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    dadc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    dae0:	fb03 f202 	mul.w	r2, r3, r2
    dae4:	683b      	ldr	r3, [r7, #0]
    dae6:	009b      	lsls	r3, r3, #2
    dae8:	68f9      	ldr	r1, [r7, #12]
    daea:	440b      	add	r3, r1
    daec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    daf0:	4619      	mov	r1, r3
    daf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    daf4:	f9b3 3000 	ldrsh.w	r3, [r3]
    daf8:	fb03 f301 	mul.w	r3, r3, r1
    dafc:	4413      	add	r3, r2
    dafe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    db02:	13db      	asrs	r3, r3, #15
    db04:	b21b      	sxth	r3, r3
    db06:	837b      	strh	r3, [r7, #26]
    db08:	6abb      	ldr	r3, [r7, #40]	; 0x28
    db0a:	009b      	lsls	r3, r3, #2
    db0c:	68fa      	ldr	r2, [r7, #12]
    db0e:	4413      	add	r3, r2
    db10:	f9b3 3000 	ldrsh.w	r3, [r3]
    db14:	461a      	mov	r2, r3
    db16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db18:	f9b3 3000 	ldrsh.w	r3, [r3]
    db1c:	fb03 f202 	mul.w	r2, r3, r2
    db20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    db22:	009b      	lsls	r3, r3, #2
    db24:	68f9      	ldr	r1, [r7, #12]
    db26:	440b      	add	r3, r1
    db28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    db2c:	4619      	mov	r1, r3
    db2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    db34:	fb03 f301 	mul.w	r3, r3, r1
    db38:	1ad3      	subs	r3, r2, r3
    db3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    db3e:	13db      	asrs	r3, r3, #15
    db40:	b21b      	sxth	r3, r3
    db42:	83bb      	strh	r3, [r7, #28]
    db44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    db46:	009b      	lsls	r3, r3, #2
    db48:	68fa      	ldr	r2, [r7, #12]
    db4a:	4413      	add	r3, r2
    db4c:	f9b3 3000 	ldrsh.w	r3, [r3]
    db50:	461a      	mov	r2, r3
    db52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    db58:	fb03 f202 	mul.w	r2, r3, r2
    db5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    db5e:	009b      	lsls	r3, r3, #2
    db60:	68f9      	ldr	r1, [r7, #12]
    db62:	440b      	add	r3, r1
    db64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    db68:	4619      	mov	r1, r3
    db6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    db6c:	f9b3 3000 	ldrsh.w	r3, [r3]
    db70:	fb03 f301 	mul.w	r3, r3, r1
    db74:	4413      	add	r3, r2
    db76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    db7a:	13db      	asrs	r3, r3, #15
    db7c:	b21b      	sxth	r3, r3
    db7e:	83fb      	strh	r3, [r7, #30]
    db80:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    db84:	b29a      	uxth	r2, r3
    db86:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
    db8a:	b29b      	uxth	r3, r3
    db8c:	4413      	add	r3, r2
    db8e:	b29b      	uxth	r3, r3
    db90:	b21b      	sxth	r3, r3
    db92:	843b      	strh	r3, [r7, #32]
    db94:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
    db98:	b29a      	uxth	r2, r3
    db9a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    db9e:	b29b      	uxth	r3, r3
    dba0:	4413      	add	r3, r2
    dba2:	b29b      	uxth	r3, r3
    dba4:	b21b      	sxth	r3, r3
    dba6:	847b      	strh	r3, [r7, #34]	; 0x22
    dba8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
    dbac:	b29a      	uxth	r2, r3
    dbae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
    dbb2:	b29b      	uxth	r3, r3
    dbb4:	1ad3      	subs	r3, r2, r3
    dbb6:	b29b      	uxth	r3, r3
    dbb8:	b21b      	sxth	r3, r3
    dbba:	82bb      	strh	r3, [r7, #20]
    dbbc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
    dbc0:	b29a      	uxth	r2, r3
    dbc2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    dbc6:	b29b      	uxth	r3, r3
    dbc8:	1ad3      	subs	r3, r2, r3
    dbca:	b29b      	uxth	r3, r3
    dbcc:	b21b      	sxth	r3, r3
    dbce:	82fb      	strh	r3, [r7, #22]
    dbd0:	68bb      	ldr	r3, [r7, #8]
    dbd2:	009b      	lsls	r3, r3, #2
    dbd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    dbd6:	4413      	add	r3, r2
    dbd8:	633b      	str	r3, [r7, #48]	; 0x30
    dbda:	68bb      	ldr	r3, [r7, #8]
    dbdc:	00db      	lsls	r3, r3, #3
    dbde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    dbe0:	4413      	add	r3, r2
    dbe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dbe4:	68fb      	ldr	r3, [r7, #12]
    dbe6:	f9b3 3000 	ldrsh.w	r3, [r3]
    dbea:	b29a      	uxth	r2, r3
    dbec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    dbf0:	105b      	asrs	r3, r3, #1
    dbf2:	b21b      	sxth	r3, r3
    dbf4:	b29b      	uxth	r3, r3
    dbf6:	1ad3      	subs	r3, r2, r3
    dbf8:	b299      	uxth	r1, r3
    dbfa:	683b      	ldr	r3, [r7, #0]
    dbfc:	009b      	lsls	r3, r3, #2
    dbfe:	68fa      	ldr	r2, [r7, #12]
    dc00:	4413      	add	r3, r2
    dc02:	b20a      	sxth	r2, r1
    dc04:	801a      	strh	r2, [r3, #0]
    dc06:	68fb      	ldr	r3, [r7, #12]
    dc08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    dc0c:	b29a      	uxth	r2, r3
    dc0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    dc12:	105b      	asrs	r3, r3, #1
    dc14:	b21b      	sxth	r3, r3
    dc16:	b29b      	uxth	r3, r3
    dc18:	1ad3      	subs	r3, r2, r3
    dc1a:	b299      	uxth	r1, r3
    dc1c:	683b      	ldr	r3, [r7, #0]
    dc1e:	009b      	lsls	r3, r3, #2
    dc20:	68fa      	ldr	r2, [r7, #12]
    dc22:	4413      	add	r3, r2
    dc24:	b20a      	sxth	r2, r1
    dc26:	805a      	strh	r2, [r3, #2]
    dc28:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    dc2c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
    dc30:	fb02 f303 	mul.w	r3, r2, r3
    dc34:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    dc38:	13db      	asrs	r3, r3, #15
    dc3a:	b21b      	sxth	r3, r3
    dc3c:	82bb      	strh	r3, [r7, #20]
    dc3e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    dc42:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
    dc46:	fb02 f303 	mul.w	r3, r2, r3
    dc4a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    dc4e:	13db      	asrs	r3, r3, #15
    dc50:	b21b      	sxth	r3, r3
    dc52:	82fb      	strh	r3, [r7, #22]
    dc54:	68fb      	ldr	r3, [r7, #12]
    dc56:	f9b3 3000 	ldrsh.w	r3, [r3]
    dc5a:	b29a      	uxth	r2, r3
    dc5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    dc60:	b29b      	uxth	r3, r3
    dc62:	4413      	add	r3, r2
    dc64:	b29b      	uxth	r3, r3
    dc66:	b21a      	sxth	r2, r3
    dc68:	68fb      	ldr	r3, [r7, #12]
    dc6a:	801a      	strh	r2, [r3, #0]
    dc6c:	68fb      	ldr	r3, [r7, #12]
    dc6e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    dc72:	b29a      	uxth	r2, r3
    dc74:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    dc78:	b29b      	uxth	r3, r3
    dc7a:	4413      	add	r3, r2
    dc7c:	b29b      	uxth	r3, r3
    dc7e:	b21a      	sxth	r2, r3
    dc80:	68fb      	ldr	r3, [r7, #12]
    dc82:	805a      	strh	r2, [r3, #2]
    dc84:	683b      	ldr	r3, [r7, #0]
    dc86:	009b      	lsls	r3, r3, #2
    dc88:	68fa      	ldr	r2, [r7, #12]
    dc8a:	4413      	add	r3, r2
    dc8c:	f9b3 3000 	ldrsh.w	r3, [r3]
    dc90:	b29a      	uxth	r2, r3
    dc92:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    dc96:	b29b      	uxth	r3, r3
    dc98:	4413      	add	r3, r2
    dc9a:	b299      	uxth	r1, r3
    dc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    dc9e:	009b      	lsls	r3, r3, #2
    dca0:	68fa      	ldr	r2, [r7, #12]
    dca2:	4413      	add	r3, r2
    dca4:	b20a      	sxth	r2, r1
    dca6:	801a      	strh	r2, [r3, #0]
    dca8:	683b      	ldr	r3, [r7, #0]
    dcaa:	009b      	lsls	r3, r3, #2
    dcac:	68fa      	ldr	r2, [r7, #12]
    dcae:	4413      	add	r3, r2
    dcb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    dcb4:	b29a      	uxth	r2, r3
    dcb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    dcba:	b29b      	uxth	r3, r3
    dcbc:	1ad3      	subs	r3, r2, r3
    dcbe:	b299      	uxth	r1, r3
    dcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    dcc2:	009b      	lsls	r3, r3, #2
    dcc4:	68fa      	ldr	r2, [r7, #12]
    dcc6:	4413      	add	r3, r2
    dcc8:	b20a      	sxth	r2, r1
    dcca:	805a      	strh	r2, [r3, #2]
    dccc:	683b      	ldr	r3, [r7, #0]
    dcce:	009b      	lsls	r3, r3, #2
    dcd0:	68fa      	ldr	r2, [r7, #12]
    dcd2:	4413      	add	r3, r2
    dcd4:	f9b3 3000 	ldrsh.w	r3, [r3]
    dcd8:	b29a      	uxth	r2, r3
    dcda:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    dcde:	b29b      	uxth	r3, r3
    dce0:	1ad3      	subs	r3, r2, r3
    dce2:	b299      	uxth	r1, r3
    dce4:	683b      	ldr	r3, [r7, #0]
    dce6:	009b      	lsls	r3, r3, #2
    dce8:	68fa      	ldr	r2, [r7, #12]
    dcea:	4413      	add	r3, r2
    dcec:	b20a      	sxth	r2, r1
    dcee:	801a      	strh	r2, [r3, #0]
    dcf0:	683b      	ldr	r3, [r7, #0]
    dcf2:	009b      	lsls	r3, r3, #2
    dcf4:	68fa      	ldr	r2, [r7, #12]
    dcf6:	4413      	add	r3, r2
    dcf8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    dcfc:	b29a      	uxth	r2, r3
    dcfe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    dd02:	b29b      	uxth	r3, r3
    dd04:	4413      	add	r3, r2
    dd06:	b299      	uxth	r1, r3
    dd08:	683b      	ldr	r3, [r7, #0]
    dd0a:	009b      	lsls	r3, r3, #2
    dd0c:	68fa      	ldr	r2, [r7, #12]
    dd0e:	4413      	add	r3, r2
    dd10:	b20a      	sxth	r2, r1
    dd12:	805a      	strh	r2, [r3, #2]
    dd14:	68fb      	ldr	r3, [r7, #12]
    dd16:	3304      	adds	r3, #4
    dd18:	60fb      	str	r3, [r7, #12]
    dd1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dd1c:	3b01      	subs	r3, #1
    dd1e:	637b      	str	r3, [r7, #52]	; 0x34
    dd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    dd22:	2b00      	cmp	r3, #0
    dd24:	f47f ae48 	bne.w	d9b8 <kf_bfly3+0x36>
    dd28:	bf00      	nop
    dd2a:	bf00      	nop
    dd2c:	373c      	adds	r7, #60	; 0x3c
    dd2e:	46bd      	mov	sp, r7
    dd30:	bc80      	pop	{r7}
    dd32:	4770      	bx	lr

0000dd34 <kf_bfly5>:
    dd34:	b480      	push	{r7}
    dd36:	b09d      	sub	sp, #116	; 0x74
    dd38:	af00      	add	r7, sp, #0
    dd3a:	60f8      	str	r0, [r7, #12]
    dd3c:	60b9      	str	r1, [r7, #8]
    dd3e:	607a      	str	r2, [r7, #4]
    dd40:	603b      	str	r3, [r7, #0]
    dd42:	687b      	ldr	r3, [r7, #4]
    dd44:	f503 7384 	add.w	r3, r3, #264	; 0x108
    dd48:	657b      	str	r3, [r7, #84]	; 0x54
    dd4a:	683b      	ldr	r3, [r7, #0]
    dd4c:	68ba      	ldr	r2, [r7, #8]
    dd4e:	fb02 f303 	mul.w	r3, r2, r3
    dd52:	009b      	lsls	r3, r3, #2
    dd54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    dd56:	441a      	add	r2, r3
    dd58:	f107 0318 	add.w	r3, r7, #24
    dd5c:	6810      	ldr	r0, [r2, #0]
    dd5e:	6018      	str	r0, [r3, #0]
    dd60:	683b      	ldr	r3, [r7, #0]
    dd62:	68ba      	ldr	r2, [r7, #8]
    dd64:	fb02 f303 	mul.w	r3, r2, r3
    dd68:	00db      	lsls	r3, r3, #3
    dd6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    dd6c:	441a      	add	r2, r3
    dd6e:	f107 0314 	add.w	r3, r7, #20
    dd72:	6810      	ldr	r0, [r2, #0]
    dd74:	6018      	str	r0, [r3, #0]
    dd76:	68fb      	ldr	r3, [r7, #12]
    dd78:	66fb      	str	r3, [r7, #108]	; 0x6c
    dd7a:	683b      	ldr	r3, [r7, #0]
    dd7c:	009b      	lsls	r3, r3, #2
    dd7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    dd80:	4413      	add	r3, r2
    dd82:	66bb      	str	r3, [r7, #104]	; 0x68
    dd84:	683b      	ldr	r3, [r7, #0]
    dd86:	00db      	lsls	r3, r3, #3
    dd88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    dd8a:	4413      	add	r3, r2
    dd8c:	667b      	str	r3, [r7, #100]	; 0x64
    dd8e:	683a      	ldr	r2, [r7, #0]
    dd90:	4613      	mov	r3, r2
    dd92:	005b      	lsls	r3, r3, #1
    dd94:	4413      	add	r3, r2
    dd96:	009b      	lsls	r3, r3, #2
    dd98:	461a      	mov	r2, r3
    dd9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    dd9c:	4413      	add	r3, r2
    dd9e:	663b      	str	r3, [r7, #96]	; 0x60
    dda0:	683b      	ldr	r3, [r7, #0]
    dda2:	011b      	lsls	r3, r3, #4
    dda4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    dda6:	4413      	add	r3, r2
    dda8:	65fb      	str	r3, [r7, #92]	; 0x5c
    ddaa:	687b      	ldr	r3, [r7, #4]
    ddac:	f503 7384 	add.w	r3, r3, #264	; 0x108
    ddb0:	653b      	str	r3, [r7, #80]	; 0x50
    ddb2:	2300      	movs	r3, #0
    ddb4:	65bb      	str	r3, [r7, #88]	; 0x58
    ddb6:	e37a      	b.n	e4ae <kf_bfly5+0x77a>
    ddb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    ddba:	f9b3 3000 	ldrsh.w	r3, [r3]
    ddbe:	461a      	mov	r2, r3
    ddc0:	f641 1399 	movw	r3, #6553	; 0x1999
    ddc4:	fb03 f302 	mul.w	r3, r3, r2
    ddc8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    ddcc:	13db      	asrs	r3, r3, #15
    ddce:	b21a      	sxth	r2, r3
    ddd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    ddd2:	801a      	strh	r2, [r3, #0]
    ddd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    ddd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    ddda:	461a      	mov	r2, r3
    dddc:	f641 1399 	movw	r3, #6553	; 0x1999
    dde0:	fb03 f302 	mul.w	r3, r3, r2
    dde4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    dde8:	13db      	asrs	r3, r3, #15
    ddea:	b21a      	sxth	r2, r3
    ddec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    ddee:	805a      	strh	r2, [r3, #2]
    ddf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    ddf2:	f9b3 3000 	ldrsh.w	r3, [r3]
    ddf6:	461a      	mov	r2, r3
    ddf8:	f641 1399 	movw	r3, #6553	; 0x1999
    ddfc:	fb03 f302 	mul.w	r3, r3, r2
    de00:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    de04:	13db      	asrs	r3, r3, #15
    de06:	b21a      	sxth	r2, r3
    de08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    de0a:	801a      	strh	r2, [r3, #0]
    de0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    de0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    de12:	461a      	mov	r2, r3
    de14:	f641 1399 	movw	r3, #6553	; 0x1999
    de18:	fb03 f302 	mul.w	r3, r3, r2
    de1c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    de20:	13db      	asrs	r3, r3, #15
    de22:	b21a      	sxth	r2, r3
    de24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    de26:	805a      	strh	r2, [r3, #2]
    de28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    de2a:	f9b3 3000 	ldrsh.w	r3, [r3]
    de2e:	461a      	mov	r2, r3
    de30:	f641 1399 	movw	r3, #6553	; 0x1999
    de34:	fb03 f302 	mul.w	r3, r3, r2
    de38:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    de3c:	13db      	asrs	r3, r3, #15
    de3e:	b21a      	sxth	r2, r3
    de40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    de42:	801a      	strh	r2, [r3, #0]
    de44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    de46:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    de4a:	461a      	mov	r2, r3
    de4c:	f641 1399 	movw	r3, #6553	; 0x1999
    de50:	fb03 f302 	mul.w	r3, r3, r2
    de54:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    de58:	13db      	asrs	r3, r3, #15
    de5a:	b21a      	sxth	r2, r3
    de5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    de5e:	805a      	strh	r2, [r3, #2]
    de60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    de62:	f9b3 3000 	ldrsh.w	r3, [r3]
    de66:	461a      	mov	r2, r3
    de68:	f641 1399 	movw	r3, #6553	; 0x1999
    de6c:	fb03 f302 	mul.w	r3, r3, r2
    de70:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    de74:	13db      	asrs	r3, r3, #15
    de76:	b21a      	sxth	r2, r3
    de78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    de7a:	801a      	strh	r2, [r3, #0]
    de7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    de7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    de82:	461a      	mov	r2, r3
    de84:	f641 1399 	movw	r3, #6553	; 0x1999
    de88:	fb03 f302 	mul.w	r3, r3, r2
    de8c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    de90:	13db      	asrs	r3, r3, #15
    de92:	b21a      	sxth	r2, r3
    de94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    de96:	805a      	strh	r2, [r3, #2]
    de98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    de9a:	f9b3 3000 	ldrsh.w	r3, [r3]
    de9e:	461a      	mov	r2, r3
    dea0:	f641 1399 	movw	r3, #6553	; 0x1999
    dea4:	fb03 f302 	mul.w	r3, r3, r2
    dea8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    deac:	13db      	asrs	r3, r3, #15
    deae:	b21a      	sxth	r2, r3
    deb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    deb2:	801a      	strh	r2, [r3, #0]
    deb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    deb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    deba:	461a      	mov	r2, r3
    debc:	f641 1399 	movw	r3, #6553	; 0x1999
    dec0:	fb03 f302 	mul.w	r3, r3, r2
    dec4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    dec8:	13db      	asrs	r3, r3, #15
    deca:	b21a      	sxth	r2, r3
    decc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    dece:	805a      	strh	r2, [r3, #2]
    ded0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    ded2:	f107 031c 	add.w	r3, r7, #28
    ded6:	6810      	ldr	r0, [r2, #0]
    ded8:	6018      	str	r0, [r3, #0]
    deda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    dedc:	f9b3 3000 	ldrsh.w	r3, [r3]
    dee0:	4619      	mov	r1, r3
    dee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    dee4:	68ba      	ldr	r2, [r7, #8]
    dee6:	fb02 f303 	mul.w	r3, r2, r3
    deea:	009b      	lsls	r3, r3, #2
    deec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    deee:	4413      	add	r3, r2
    def0:	f9b3 3000 	ldrsh.w	r3, [r3]
    def4:	fb03 f201 	mul.w	r2, r3, r1
    def8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    defa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    defe:	4618      	mov	r0, r3
    df00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    df02:	68b9      	ldr	r1, [r7, #8]
    df04:	fb01 f303 	mul.w	r3, r1, r3
    df08:	009b      	lsls	r3, r3, #2
    df0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
    df0c:	440b      	add	r3, r1
    df0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    df12:	fb03 f300 	mul.w	r3, r3, r0
    df16:	1ad3      	subs	r3, r2, r3
    df18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    df1c:	13db      	asrs	r3, r3, #15
    df1e:	b21b      	sxth	r3, r3
    df20:	843b      	strh	r3, [r7, #32]
    df22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    df24:	f9b3 3000 	ldrsh.w	r3, [r3]
    df28:	4619      	mov	r1, r3
    df2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    df2c:	68ba      	ldr	r2, [r7, #8]
    df2e:	fb02 f303 	mul.w	r3, r2, r3
    df32:	009b      	lsls	r3, r3, #2
    df34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    df36:	4413      	add	r3, r2
    df38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    df3c:	fb03 f201 	mul.w	r2, r3, r1
    df40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    df42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    df46:	4618      	mov	r0, r3
    df48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    df4a:	68b9      	ldr	r1, [r7, #8]
    df4c:	fb01 f303 	mul.w	r3, r1, r3
    df50:	009b      	lsls	r3, r3, #2
    df52:	6d39      	ldr	r1, [r7, #80]	; 0x50
    df54:	440b      	add	r3, r1
    df56:	f9b3 3000 	ldrsh.w	r3, [r3]
    df5a:	fb03 f300 	mul.w	r3, r3, r0
    df5e:	4413      	add	r3, r2
    df60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    df64:	13db      	asrs	r3, r3, #15
    df66:	b21b      	sxth	r3, r3
    df68:	847b      	strh	r3, [r7, #34]	; 0x22
    df6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    df6c:	f9b3 3000 	ldrsh.w	r3, [r3]
    df70:	4619      	mov	r1, r3
    df72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    df74:	68ba      	ldr	r2, [r7, #8]
    df76:	fb02 f303 	mul.w	r3, r2, r3
    df7a:	00db      	lsls	r3, r3, #3
    df7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    df7e:	4413      	add	r3, r2
    df80:	f9b3 3000 	ldrsh.w	r3, [r3]
    df84:	fb03 f201 	mul.w	r2, r3, r1
    df88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    df8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    df8e:	4618      	mov	r0, r3
    df90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    df92:	68b9      	ldr	r1, [r7, #8]
    df94:	fb01 f303 	mul.w	r3, r1, r3
    df98:	00db      	lsls	r3, r3, #3
    df9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
    df9c:	440b      	add	r3, r1
    df9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    dfa2:	fb03 f300 	mul.w	r3, r3, r0
    dfa6:	1ad3      	subs	r3, r2, r3
    dfa8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    dfac:	13db      	asrs	r3, r3, #15
    dfae:	b21b      	sxth	r3, r3
    dfb0:	84bb      	strh	r3, [r7, #36]	; 0x24
    dfb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    dfb4:	f9b3 3000 	ldrsh.w	r3, [r3]
    dfb8:	4619      	mov	r1, r3
    dfba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    dfbc:	68ba      	ldr	r2, [r7, #8]
    dfbe:	fb02 f303 	mul.w	r3, r2, r3
    dfc2:	00db      	lsls	r3, r3, #3
    dfc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    dfc6:	4413      	add	r3, r2
    dfc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    dfcc:	fb03 f201 	mul.w	r2, r3, r1
    dfd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    dfd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    dfd6:	4618      	mov	r0, r3
    dfd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    dfda:	68b9      	ldr	r1, [r7, #8]
    dfdc:	fb01 f303 	mul.w	r3, r1, r3
    dfe0:	00db      	lsls	r3, r3, #3
    dfe2:	6d39      	ldr	r1, [r7, #80]	; 0x50
    dfe4:	440b      	add	r3, r1
    dfe6:	f9b3 3000 	ldrsh.w	r3, [r3]
    dfea:	fb03 f300 	mul.w	r3, r3, r0
    dfee:	4413      	add	r3, r2
    dff0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    dff4:	13db      	asrs	r3, r3, #15
    dff6:	b21b      	sxth	r3, r3
    dff8:	84fb      	strh	r3, [r7, #38]	; 0x26
    dffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    dffc:	f9b3 3000 	ldrsh.w	r3, [r3]
    e000:	4619      	mov	r1, r3
    e002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    e004:	68ba      	ldr	r2, [r7, #8]
    e006:	fb02 f203 	mul.w	r2, r2, r3
    e00a:	4613      	mov	r3, r2
    e00c:	005b      	lsls	r3, r3, #1
    e00e:	4413      	add	r3, r2
    e010:	009b      	lsls	r3, r3, #2
    e012:	461a      	mov	r2, r3
    e014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e016:	4413      	add	r3, r2
    e018:	f9b3 3000 	ldrsh.w	r3, [r3]
    e01c:	fb03 f101 	mul.w	r1, r3, r1
    e020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    e022:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e026:	4618      	mov	r0, r3
    e028:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    e02a:	68ba      	ldr	r2, [r7, #8]
    e02c:	fb02 f203 	mul.w	r2, r2, r3
    e030:	4613      	mov	r3, r2
    e032:	005b      	lsls	r3, r3, #1
    e034:	4413      	add	r3, r2
    e036:	009b      	lsls	r3, r3, #2
    e038:	461a      	mov	r2, r3
    e03a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e03c:	4413      	add	r3, r2
    e03e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e042:	fb03 f300 	mul.w	r3, r3, r0
    e046:	1acb      	subs	r3, r1, r3
    e048:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e04c:	13db      	asrs	r3, r3, #15
    e04e:	b21b      	sxth	r3, r3
    e050:	853b      	strh	r3, [r7, #40]	; 0x28
    e052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    e054:	f9b3 3000 	ldrsh.w	r3, [r3]
    e058:	4619      	mov	r1, r3
    e05a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    e05c:	68ba      	ldr	r2, [r7, #8]
    e05e:	fb02 f203 	mul.w	r2, r2, r3
    e062:	4613      	mov	r3, r2
    e064:	005b      	lsls	r3, r3, #1
    e066:	4413      	add	r3, r2
    e068:	009b      	lsls	r3, r3, #2
    e06a:	461a      	mov	r2, r3
    e06c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e06e:	4413      	add	r3, r2
    e070:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e074:	fb03 f101 	mul.w	r1, r3, r1
    e078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    e07a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e07e:	4618      	mov	r0, r3
    e080:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    e082:	68ba      	ldr	r2, [r7, #8]
    e084:	fb02 f203 	mul.w	r2, r2, r3
    e088:	4613      	mov	r3, r2
    e08a:	005b      	lsls	r3, r3, #1
    e08c:	4413      	add	r3, r2
    e08e:	009b      	lsls	r3, r3, #2
    e090:	461a      	mov	r2, r3
    e092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    e094:	4413      	add	r3, r2
    e096:	f9b3 3000 	ldrsh.w	r3, [r3]
    e09a:	fb03 f300 	mul.w	r3, r3, r0
    e09e:	440b      	add	r3, r1
    e0a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e0a4:	13db      	asrs	r3, r3, #15
    e0a6:	b21b      	sxth	r3, r3
    e0a8:	857b      	strh	r3, [r7, #42]	; 0x2a
    e0aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    e0ac:	f9b3 3000 	ldrsh.w	r3, [r3]
    e0b0:	4619      	mov	r1, r3
    e0b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    e0b4:	68ba      	ldr	r2, [r7, #8]
    e0b6:	fb02 f303 	mul.w	r3, r2, r3
    e0ba:	011b      	lsls	r3, r3, #4
    e0bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    e0be:	4413      	add	r3, r2
    e0c0:	f9b3 3000 	ldrsh.w	r3, [r3]
    e0c4:	fb03 f201 	mul.w	r2, r3, r1
    e0c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    e0ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e0ce:	4618      	mov	r0, r3
    e0d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    e0d2:	68b9      	ldr	r1, [r7, #8]
    e0d4:	fb01 f303 	mul.w	r3, r1, r3
    e0d8:	011b      	lsls	r3, r3, #4
    e0da:	6d39      	ldr	r1, [r7, #80]	; 0x50
    e0dc:	440b      	add	r3, r1
    e0de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e0e2:	fb03 f300 	mul.w	r3, r3, r0
    e0e6:	1ad3      	subs	r3, r2, r3
    e0e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e0ec:	13db      	asrs	r3, r3, #15
    e0ee:	b21b      	sxth	r3, r3
    e0f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    e0f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    e0f4:	f9b3 3000 	ldrsh.w	r3, [r3]
    e0f8:	4619      	mov	r1, r3
    e0fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    e0fc:	68ba      	ldr	r2, [r7, #8]
    e0fe:	fb02 f303 	mul.w	r3, r2, r3
    e102:	011b      	lsls	r3, r3, #4
    e104:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    e106:	4413      	add	r3, r2
    e108:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e10c:	fb03 f201 	mul.w	r2, r3, r1
    e110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    e112:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e116:	4618      	mov	r0, r3
    e118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    e11a:	68b9      	ldr	r1, [r7, #8]
    e11c:	fb01 f303 	mul.w	r3, r1, r3
    e120:	011b      	lsls	r3, r3, #4
    e122:	6d39      	ldr	r1, [r7, #80]	; 0x50
    e124:	440b      	add	r3, r1
    e126:	f9b3 3000 	ldrsh.w	r3, [r3]
    e12a:	fb03 f300 	mul.w	r3, r3, r0
    e12e:	4413      	add	r3, r2
    e130:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e134:	13db      	asrs	r3, r3, #15
    e136:	b21b      	sxth	r3, r3
    e138:	85fb      	strh	r3, [r7, #46]	; 0x2e
    e13a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    e13e:	b29a      	uxth	r2, r3
    e140:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
    e144:	b29b      	uxth	r3, r3
    e146:	4413      	add	r3, r2
    e148:	b29b      	uxth	r3, r3
    e14a:	b21b      	sxth	r3, r3
    e14c:	873b      	strh	r3, [r7, #56]	; 0x38
    e14e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e152:	b29a      	uxth	r2, r3
    e154:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
    e158:	b29b      	uxth	r3, r3
    e15a:	4413      	add	r3, r2
    e15c:	b29b      	uxth	r3, r3
    e15e:	b21b      	sxth	r3, r3
    e160:	877b      	strh	r3, [r7, #58]	; 0x3a
    e162:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
    e166:	b29a      	uxth	r2, r3
    e168:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
    e16c:	b29b      	uxth	r3, r3
    e16e:	1ad3      	subs	r3, r2, r3
    e170:	b29b      	uxth	r3, r3
    e172:	b21b      	sxth	r3, r3
    e174:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    e178:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
    e17c:	b29a      	uxth	r2, r3
    e17e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
    e182:	b29b      	uxth	r3, r3
    e184:	1ad3      	subs	r3, r2, r3
    e186:	b29b      	uxth	r3, r3
    e188:	b21b      	sxth	r3, r3
    e18a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    e18e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e192:	b29a      	uxth	r2, r3
    e194:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
    e198:	b29b      	uxth	r3, r3
    e19a:	4413      	add	r3, r2
    e19c:	b29b      	uxth	r3, r3
    e19e:	b21b      	sxth	r3, r3
    e1a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    e1a2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e1a6:	b29a      	uxth	r2, r3
    e1a8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
    e1ac:	b29b      	uxth	r3, r3
    e1ae:	4413      	add	r3, r2
    e1b0:	b29b      	uxth	r3, r3
    e1b2:	b21b      	sxth	r3, r3
    e1b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
    e1b6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
    e1ba:	b29a      	uxth	r2, r3
    e1bc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
    e1c0:	b29b      	uxth	r3, r3
    e1c2:	1ad3      	subs	r3, r2, r3
    e1c4:	b29b      	uxth	r3, r3
    e1c6:	b21b      	sxth	r3, r3
    e1c8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    e1cc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
    e1d0:	b29a      	uxth	r2, r3
    e1d2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
    e1d6:	b29b      	uxth	r3, r3
    e1d8:	1ad3      	subs	r3, r2, r3
    e1da:	b29b      	uxth	r3, r3
    e1dc:	b21b      	sxth	r3, r3
    e1de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    e1e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e1e4:	f9b3 3000 	ldrsh.w	r3, [r3]
    e1e8:	b29a      	uxth	r2, r3
    e1ea:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
    e1ee:	b299      	uxth	r1, r3
    e1f0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
    e1f4:	b29b      	uxth	r3, r3
    e1f6:	440b      	add	r3, r1
    e1f8:	b29b      	uxth	r3, r3
    e1fa:	4413      	add	r3, r2
    e1fc:	b29b      	uxth	r3, r3
    e1fe:	b21a      	sxth	r2, r3
    e200:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e202:	801a      	strh	r2, [r3, #0]
    e204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e206:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e20a:	b29a      	uxth	r2, r3
    e20c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
    e210:	b299      	uxth	r1, r3
    e212:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
    e216:	b29b      	uxth	r3, r3
    e218:	440b      	add	r3, r1
    e21a:	b29b      	uxth	r3, r3
    e21c:	4413      	add	r3, r2
    e21e:	b29b      	uxth	r3, r3
    e220:	b21a      	sxth	r2, r3
    e222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e224:	805a      	strh	r2, [r3, #2]
    e226:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
    e22a:	b29a      	uxth	r2, r3
    e22c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
    e230:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
    e234:	fb01 f303 	mul.w	r3, r1, r3
    e238:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e23c:	13db      	asrs	r3, r3, #15
    e23e:	b29b      	uxth	r3, r3
    e240:	4413      	add	r3, r2
    e242:	b29a      	uxth	r2, r3
    e244:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
    e248:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
    e24c:	fb01 f303 	mul.w	r3, r1, r3
    e250:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e254:	13db      	asrs	r3, r3, #15
    e256:	b29b      	uxth	r3, r3
    e258:	4413      	add	r3, r2
    e25a:	b29b      	uxth	r3, r3
    e25c:	b21b      	sxth	r3, r3
    e25e:	863b      	strh	r3, [r7, #48]	; 0x30
    e260:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    e264:	b29a      	uxth	r2, r3
    e266:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
    e26a:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
    e26e:	fb01 f303 	mul.w	r3, r1, r3
    e272:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e276:	13db      	asrs	r3, r3, #15
    e278:	b29b      	uxth	r3, r3
    e27a:	4413      	add	r3, r2
    e27c:	b29a      	uxth	r2, r3
    e27e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
    e282:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
    e286:	fb01 f303 	mul.w	r3, r1, r3
    e28a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e28e:	13db      	asrs	r3, r3, #15
    e290:	b29b      	uxth	r3, r3
    e292:	4413      	add	r3, r2
    e294:	b29b      	uxth	r3, r3
    e296:	b21b      	sxth	r3, r3
    e298:	867b      	strh	r3, [r7, #50]	; 0x32
    e29a:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
    e29e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
    e2a2:	fb02 f303 	mul.w	r3, r2, r3
    e2a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e2aa:	13db      	asrs	r3, r3, #15
    e2ac:	b29a      	uxth	r2, r3
    e2ae:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
    e2b2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
    e2b6:	fb01 f303 	mul.w	r3, r1, r3
    e2ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e2be:	13db      	asrs	r3, r3, #15
    e2c0:	b29b      	uxth	r3, r3
    e2c2:	4413      	add	r3, r2
    e2c4:	b29b      	uxth	r3, r3
    e2c6:	b21b      	sxth	r3, r3
    e2c8:	86bb      	strh	r3, [r7, #52]	; 0x34
    e2ca:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
    e2ce:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
    e2d2:	fb02 f303 	mul.w	r3, r2, r3
    e2d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e2da:	13db      	asrs	r3, r3, #15
    e2dc:	b29b      	uxth	r3, r3
    e2de:	425b      	negs	r3, r3
    e2e0:	b29a      	uxth	r2, r3
    e2e2:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
    e2e6:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
    e2ea:	fb01 f303 	mul.w	r3, r1, r3
    e2ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e2f2:	13db      	asrs	r3, r3, #15
    e2f4:	b29b      	uxth	r3, r3
    e2f6:	1ad3      	subs	r3, r2, r3
    e2f8:	b29b      	uxth	r3, r3
    e2fa:	b21b      	sxth	r3, r3
    e2fc:	86fb      	strh	r3, [r7, #54]	; 0x36
    e2fe:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
    e302:	b29a      	uxth	r2, r3
    e304:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
    e308:	b29b      	uxth	r3, r3
    e30a:	1ad3      	subs	r3, r2, r3
    e30c:	b29b      	uxth	r3, r3
    e30e:	b21a      	sxth	r2, r3
    e310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    e312:	801a      	strh	r2, [r3, #0]
    e314:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
    e318:	b29a      	uxth	r2, r3
    e31a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
    e31e:	b29b      	uxth	r3, r3
    e320:	1ad3      	subs	r3, r2, r3
    e322:	b29b      	uxth	r3, r3
    e324:	b21a      	sxth	r2, r3
    e326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    e328:	805a      	strh	r2, [r3, #2]
    e32a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
    e32e:	b29a      	uxth	r2, r3
    e330:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
    e334:	b29b      	uxth	r3, r3
    e336:	4413      	add	r3, r2
    e338:	b29b      	uxth	r3, r3
    e33a:	b21a      	sxth	r2, r3
    e33c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    e33e:	801a      	strh	r2, [r3, #0]
    e340:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
    e344:	b29a      	uxth	r2, r3
    e346:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
    e34a:	b29b      	uxth	r3, r3
    e34c:	4413      	add	r3, r2
    e34e:	b29b      	uxth	r3, r3
    e350:	b21a      	sxth	r2, r3
    e352:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    e354:	805a      	strh	r2, [r3, #2]
    e356:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
    e35a:	b29a      	uxth	r2, r3
    e35c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
    e360:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
    e364:	fb01 f303 	mul.w	r3, r1, r3
    e368:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e36c:	13db      	asrs	r3, r3, #15
    e36e:	b29b      	uxth	r3, r3
    e370:	4413      	add	r3, r2
    e372:	b29a      	uxth	r2, r3
    e374:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
    e378:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
    e37c:	fb01 f303 	mul.w	r3, r1, r3
    e380:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e384:	13db      	asrs	r3, r3, #15
    e386:	b29b      	uxth	r3, r3
    e388:	4413      	add	r3, r2
    e38a:	b29b      	uxth	r3, r3
    e38c:	b21b      	sxth	r3, r3
    e38e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    e392:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
    e396:	b29a      	uxth	r2, r3
    e398:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
    e39c:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
    e3a0:	fb01 f303 	mul.w	r3, r1, r3
    e3a4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e3a8:	13db      	asrs	r3, r3, #15
    e3aa:	b29b      	uxth	r3, r3
    e3ac:	4413      	add	r3, r2
    e3ae:	b29a      	uxth	r2, r3
    e3b0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
    e3b4:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
    e3b8:	fb01 f303 	mul.w	r3, r1, r3
    e3bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e3c0:	13db      	asrs	r3, r3, #15
    e3c2:	b29b      	uxth	r3, r3
    e3c4:	4413      	add	r3, r2
    e3c6:	b29b      	uxth	r3, r3
    e3c8:	b21b      	sxth	r3, r3
    e3ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    e3ce:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
    e3d2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
    e3d6:	fb02 f303 	mul.w	r3, r2, r3
    e3da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e3de:	13db      	asrs	r3, r3, #15
    e3e0:	b29a      	uxth	r2, r3
    e3e2:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
    e3e6:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
    e3ea:	fb01 f303 	mul.w	r3, r1, r3
    e3ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e3f2:	13db      	asrs	r3, r3, #15
    e3f4:	b29b      	uxth	r3, r3
    e3f6:	1ad3      	subs	r3, r2, r3
    e3f8:	b29b      	uxth	r3, r3
    e3fa:	b21b      	sxth	r3, r3
    e3fc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    e400:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
    e404:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
    e408:	fb02 f303 	mul.w	r3, r2, r3
    e40c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e410:	13db      	asrs	r3, r3, #15
    e412:	b29a      	uxth	r2, r3
    e414:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
    e418:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
    e41c:	fb01 f303 	mul.w	r3, r1, r3
    e420:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e424:	13db      	asrs	r3, r3, #15
    e426:	b29b      	uxth	r3, r3
    e428:	1ad3      	subs	r3, r2, r3
    e42a:	b29b      	uxth	r3, r3
    e42c:	b21b      	sxth	r3, r3
    e42e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
    e432:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
    e436:	b29a      	uxth	r2, r3
    e438:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
    e43c:	b29b      	uxth	r3, r3
    e43e:	4413      	add	r3, r2
    e440:	b29b      	uxth	r3, r3
    e442:	b21a      	sxth	r2, r3
    e444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    e446:	801a      	strh	r2, [r3, #0]
    e448:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
    e44c:	b29a      	uxth	r2, r3
    e44e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
    e452:	b29b      	uxth	r3, r3
    e454:	4413      	add	r3, r2
    e456:	b29b      	uxth	r3, r3
    e458:	b21a      	sxth	r2, r3
    e45a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    e45c:	805a      	strh	r2, [r3, #2]
    e45e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
    e462:	b29a      	uxth	r2, r3
    e464:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
    e468:	b29b      	uxth	r3, r3
    e46a:	1ad3      	subs	r3, r2, r3
    e46c:	b29b      	uxth	r3, r3
    e46e:	b21a      	sxth	r2, r3
    e470:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    e472:	801a      	strh	r2, [r3, #0]
    e474:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
    e478:	b29a      	uxth	r2, r3
    e47a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
    e47e:	b29b      	uxth	r3, r3
    e480:	1ad3      	subs	r3, r2, r3
    e482:	b29b      	uxth	r3, r3
    e484:	b21a      	sxth	r2, r3
    e486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    e488:	805a      	strh	r2, [r3, #2]
    e48a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e48c:	3304      	adds	r3, #4
    e48e:	66fb      	str	r3, [r7, #108]	; 0x6c
    e490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    e492:	3304      	adds	r3, #4
    e494:	66bb      	str	r3, [r7, #104]	; 0x68
    e496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    e498:	3304      	adds	r3, #4
    e49a:	667b      	str	r3, [r7, #100]	; 0x64
    e49c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    e49e:	3304      	adds	r3, #4
    e4a0:	663b      	str	r3, [r7, #96]	; 0x60
    e4a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    e4a4:	3304      	adds	r3, #4
    e4a6:	65fb      	str	r3, [r7, #92]	; 0x5c
    e4a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    e4aa:	3301      	adds	r3, #1
    e4ac:	65bb      	str	r3, [r7, #88]	; 0x58
    e4ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
    e4b0:	683b      	ldr	r3, [r7, #0]
    e4b2:	429a      	cmp	r2, r3
    e4b4:	f6ff ac80 	blt.w	ddb8 <kf_bfly5+0x84>
    e4b8:	bf00      	nop
    e4ba:	bf00      	nop
    e4bc:	3774      	adds	r7, #116	; 0x74
    e4be:	46bd      	mov	sp, r7
    e4c0:	bc80      	pop	{r7}
    e4c2:	4770      	bx	lr

0000e4c4 <kf_bfly_generic>:
    e4c4:	b480      	push	{r7}
    e4c6:	b08f      	sub	sp, #60	; 0x3c
    e4c8:	af00      	add	r7, sp, #0
    e4ca:	60f8      	str	r0, [r7, #12]
    e4cc:	60b9      	str	r1, [r7, #8]
    e4ce:	607a      	str	r2, [r7, #4]
    e4d0:	603b      	str	r3, [r7, #0]
    e4d2:	687b      	ldr	r3, [r7, #4]
    e4d4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    e4d8:	623b      	str	r3, [r7, #32]
    e4da:	687b      	ldr	r3, [r7, #4]
    e4dc:	681b      	ldr	r3, [r3, #0]
    e4de:	61fb      	str	r3, [r7, #28]
    e4e0:	2300      	movs	r3, #0
    e4e2:	61bb      	str	r3, [r7, #24]
    e4e4:	2300      	movs	r3, #0
    e4e6:	637b      	str	r3, [r7, #52]	; 0x34
    e4e8:	e0ec      	b.n	e6c4 <kf_bfly_generic+0x200>
    e4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e4ec:	633b      	str	r3, [r7, #48]	; 0x30
    e4ee:	2300      	movs	r3, #0
    e4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    e4f2:	e040      	b.n	e576 <kf_bfly_generic+0xb2>
    e4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e4f6:	009b      	lsls	r3, r3, #2
    e4f8:	68fa      	ldr	r2, [r7, #12]
    e4fa:	18d1      	adds	r1, r2, r3
    e4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e4fe:	009b      	lsls	r3, r3, #2
    e500:	69ba      	ldr	r2, [r7, #24]
    e502:	4413      	add	r3, r2
    e504:	461a      	mov	r2, r3
    e506:	460b      	mov	r3, r1
    e508:	681b      	ldr	r3, [r3, #0]
    e50a:	6013      	str	r3, [r2, #0]
    e50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e50e:	009b      	lsls	r3, r3, #2
    e510:	69ba      	ldr	r2, [r7, #24]
    e512:	4413      	add	r3, r2
    e514:	f9b3 3000 	ldrsh.w	r3, [r3]
    e518:	4619      	mov	r1, r3
    e51a:	f647 72ff 	movw	r2, #32767	; 0x7fff
    e51e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e520:	fb92 f3f3 	sdiv	r3, r2, r3
    e524:	fb03 f301 	mul.w	r3, r3, r1
    e528:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e52c:	13d9      	asrs	r1, r3, #15
    e52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e530:	009b      	lsls	r3, r3, #2
    e532:	69ba      	ldr	r2, [r7, #24]
    e534:	4413      	add	r3, r2
    e536:	b20a      	sxth	r2, r1
    e538:	801a      	strh	r2, [r3, #0]
    e53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e53c:	009b      	lsls	r3, r3, #2
    e53e:	69ba      	ldr	r2, [r7, #24]
    e540:	4413      	add	r3, r2
    e542:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e546:	4619      	mov	r1, r3
    e548:	f647 72ff 	movw	r2, #32767	; 0x7fff
    e54c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e54e:	fb92 f3f3 	sdiv	r3, r2, r3
    e552:	fb03 f301 	mul.w	r3, r3, r1
    e556:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e55a:	13d9      	asrs	r1, r3, #15
    e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e55e:	009b      	lsls	r3, r3, #2
    e560:	69ba      	ldr	r2, [r7, #24]
    e562:	4413      	add	r3, r2
    e564:	b20a      	sxth	r2, r1
    e566:	805a      	strh	r2, [r3, #2]
    e568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e56a:	683b      	ldr	r3, [r7, #0]
    e56c:	4413      	add	r3, r2
    e56e:	633b      	str	r3, [r7, #48]	; 0x30
    e570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e572:	3301      	adds	r3, #1
    e574:	62fb      	str	r3, [r7, #44]	; 0x2c
    e576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e57a:	429a      	cmp	r2, r3
    e57c:	dbba      	blt.n	e4f4 <kf_bfly_generic+0x30>
    e57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e580:	633b      	str	r3, [r7, #48]	; 0x30
    e582:	2300      	movs	r3, #0
    e584:	62fb      	str	r3, [r7, #44]	; 0x2c
    e586:	e095      	b.n	e6b4 <kf_bfly_generic+0x1f0>
    e588:	2300      	movs	r3, #0
    e58a:	627b      	str	r3, [r7, #36]	; 0x24
    e58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e58e:	009b      	lsls	r3, r3, #2
    e590:	68fa      	ldr	r2, [r7, #12]
    e592:	441a      	add	r2, r3
    e594:	69bb      	ldr	r3, [r7, #24]
    e596:	681b      	ldr	r3, [r3, #0]
    e598:	6013      	str	r3, [r2, #0]
    e59a:	2301      	movs	r3, #1
    e59c:	62bb      	str	r3, [r7, #40]	; 0x28
    e59e:	e07d      	b.n	e69c <kf_bfly_generic+0x1d8>
    e5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e5a2:	68ba      	ldr	r2, [r7, #8]
    e5a4:	fb02 f203 	mul.w	r2, r2, r3
    e5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e5aa:	4413      	add	r3, r2
    e5ac:	627b      	str	r3, [r7, #36]	; 0x24
    e5ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e5b0:	69fb      	ldr	r3, [r7, #28]
    e5b2:	429a      	cmp	r2, r3
    e5b4:	db03      	blt.n	e5be <kf_bfly_generic+0xfa>
    e5b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    e5b8:	69fb      	ldr	r3, [r7, #28]
    e5ba:	1ad3      	subs	r3, r2, r3
    e5bc:	627b      	str	r3, [r7, #36]	; 0x24
    e5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e5c0:	009b      	lsls	r3, r3, #2
    e5c2:	69ba      	ldr	r2, [r7, #24]
    e5c4:	4413      	add	r3, r2
    e5c6:	f9b3 3000 	ldrsh.w	r3, [r3]
    e5ca:	4619      	mov	r1, r3
    e5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e5ce:	009b      	lsls	r3, r3, #2
    e5d0:	6a3a      	ldr	r2, [r7, #32]
    e5d2:	4413      	add	r3, r2
    e5d4:	f9b3 3000 	ldrsh.w	r3, [r3]
    e5d8:	fb03 f201 	mul.w	r2, r3, r1
    e5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e5de:	009b      	lsls	r3, r3, #2
    e5e0:	69b9      	ldr	r1, [r7, #24]
    e5e2:	440b      	add	r3, r1
    e5e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e5e8:	4618      	mov	r0, r3
    e5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e5ec:	009b      	lsls	r3, r3, #2
    e5ee:	6a39      	ldr	r1, [r7, #32]
    e5f0:	440b      	add	r3, r1
    e5f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e5f6:	fb03 f300 	mul.w	r3, r3, r0
    e5fa:	1ad3      	subs	r3, r2, r3
    e5fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e600:	13db      	asrs	r3, r3, #15
    e602:	b21b      	sxth	r3, r3
    e604:	82bb      	strh	r3, [r7, #20]
    e606:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e608:	009b      	lsls	r3, r3, #2
    e60a:	69ba      	ldr	r2, [r7, #24]
    e60c:	4413      	add	r3, r2
    e60e:	f9b3 3000 	ldrsh.w	r3, [r3]
    e612:	4619      	mov	r1, r3
    e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e616:	009b      	lsls	r3, r3, #2
    e618:	6a3a      	ldr	r2, [r7, #32]
    e61a:	4413      	add	r3, r2
    e61c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e620:	fb03 f201 	mul.w	r2, r3, r1
    e624:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e626:	009b      	lsls	r3, r3, #2
    e628:	69b9      	ldr	r1, [r7, #24]
    e62a:	440b      	add	r3, r1
    e62c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e630:	4618      	mov	r0, r3
    e632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e634:	009b      	lsls	r3, r3, #2
    e636:	6a39      	ldr	r1, [r7, #32]
    e638:	440b      	add	r3, r1
    e63a:	f9b3 3000 	ldrsh.w	r3, [r3]
    e63e:	fb03 f300 	mul.w	r3, r3, r0
    e642:	4413      	add	r3, r2
    e644:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
    e648:	13db      	asrs	r3, r3, #15
    e64a:	b21b      	sxth	r3, r3
    e64c:	82fb      	strh	r3, [r7, #22]
    e64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e650:	009b      	lsls	r3, r3, #2
    e652:	68fa      	ldr	r2, [r7, #12]
    e654:	4413      	add	r3, r2
    e656:	f9b3 3000 	ldrsh.w	r3, [r3]
    e65a:	b29a      	uxth	r2, r3
    e65c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
    e660:	b29b      	uxth	r3, r3
    e662:	4413      	add	r3, r2
    e664:	b299      	uxth	r1, r3
    e666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e668:	009b      	lsls	r3, r3, #2
    e66a:	68fa      	ldr	r2, [r7, #12]
    e66c:	4413      	add	r3, r2
    e66e:	b20a      	sxth	r2, r1
    e670:	801a      	strh	r2, [r3, #0]
    e672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e674:	009b      	lsls	r3, r3, #2
    e676:	68fa      	ldr	r2, [r7, #12]
    e678:	4413      	add	r3, r2
    e67a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
    e67e:	b29a      	uxth	r2, r3
    e680:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
    e684:	b29b      	uxth	r3, r3
    e686:	4413      	add	r3, r2
    e688:	b299      	uxth	r1, r3
    e68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    e68c:	009b      	lsls	r3, r3, #2
    e68e:	68fa      	ldr	r2, [r7, #12]
    e690:	4413      	add	r3, r2
    e692:	b20a      	sxth	r2, r1
    e694:	805a      	strh	r2, [r3, #2]
    e696:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e698:	3301      	adds	r3, #1
    e69a:	62bb      	str	r3, [r7, #40]	; 0x28
    e69c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    e69e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e6a0:	429a      	cmp	r2, r3
    e6a2:	f6ff af7d 	blt.w	e5a0 <kf_bfly_generic+0xdc>
    e6a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    e6a8:	683b      	ldr	r3, [r7, #0]
    e6aa:	4413      	add	r3, r2
    e6ac:	633b      	str	r3, [r7, #48]	; 0x30
    e6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e6b0:	3301      	adds	r3, #1
    e6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    e6b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e6b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    e6b8:	429a      	cmp	r2, r3
    e6ba:	f6ff af65 	blt.w	e588 <kf_bfly_generic+0xc4>
    e6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e6c0:	3301      	adds	r3, #1
    e6c2:	637b      	str	r3, [r7, #52]	; 0x34
    e6c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e6c6:	683b      	ldr	r3, [r7, #0]
    e6c8:	429a      	cmp	r2, r3
    e6ca:	f6ff af0e 	blt.w	e4ea <kf_bfly_generic+0x26>
    e6ce:	bf00      	nop
    e6d0:	bf00      	nop
    e6d2:	373c      	adds	r7, #60	; 0x3c
    e6d4:	46bd      	mov	sp, r7
    e6d6:	bc80      	pop	{r7}
    e6d8:	4770      	bx	lr

0000e6da <kf_work>:
    e6da:	b580      	push	{r7, lr}
    e6dc:	b08a      	sub	sp, #40	; 0x28
    e6de:	af02      	add	r7, sp, #8
    e6e0:	60f8      	str	r0, [r7, #12]
    e6e2:	60b9      	str	r1, [r7, #8]
    e6e4:	607a      	str	r2, [r7, #4]
    e6e6:	603b      	str	r3, [r7, #0]
    e6e8:	68fb      	ldr	r3, [r7, #12]
    e6ea:	61fb      	str	r3, [r7, #28]
    e6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e6ee:	1d1a      	adds	r2, r3, #4
    e6f0:	62ba      	str	r2, [r7, #40]	; 0x28
    e6f2:	681b      	ldr	r3, [r3, #0]
    e6f4:	61bb      	str	r3, [r7, #24]
    e6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e6f8:	1d1a      	adds	r2, r3, #4
    e6fa:	62ba      	str	r2, [r7, #40]	; 0x28
    e6fc:	681b      	ldr	r3, [r3, #0]
    e6fe:	617b      	str	r3, [r7, #20]
    e700:	69bb      	ldr	r3, [r7, #24]
    e702:	697a      	ldr	r2, [r7, #20]
    e704:	fb02 f303 	mul.w	r3, r2, r3
    e708:	009b      	lsls	r3, r3, #2
    e70a:	68fa      	ldr	r2, [r7, #12]
    e70c:	4413      	add	r3, r2
    e70e:	613b      	str	r3, [r7, #16]
    e710:	697b      	ldr	r3, [r7, #20]
    e712:	2b01      	cmp	r3, #1
    e714:	d113      	bne.n	e73e <kf_work+0x64>
    e716:	68fa      	ldr	r2, [r7, #12]
    e718:	68bb      	ldr	r3, [r7, #8]
    e71a:	681b      	ldr	r3, [r3, #0]
    e71c:	6013      	str	r3, [r2, #0]
    e71e:	683b      	ldr	r3, [r7, #0]
    e720:	687a      	ldr	r2, [r7, #4]
    e722:	fb02 f303 	mul.w	r3, r2, r3
    e726:	009b      	lsls	r3, r3, #2
    e728:	68ba      	ldr	r2, [r7, #8]
    e72a:	4413      	add	r3, r2
    e72c:	60bb      	str	r3, [r7, #8]
    e72e:	68fb      	ldr	r3, [r7, #12]
    e730:	3304      	adds	r3, #4
    e732:	60fb      	str	r3, [r7, #12]
    e734:	68fa      	ldr	r2, [r7, #12]
    e736:	693b      	ldr	r3, [r7, #16]
    e738:	429a      	cmp	r2, r3
    e73a:	d1ec      	bne.n	e716 <kf_work+0x3c>
    e73c:	e01d      	b.n	e77a <kf_work+0xa0>
    e73e:	69bb      	ldr	r3, [r7, #24]
    e740:	687a      	ldr	r2, [r7, #4]
    e742:	fb02 f203 	mul.w	r2, r2, r3
    e746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e748:	9301      	str	r3, [sp, #4]
    e74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e74c:	9300      	str	r3, [sp, #0]
    e74e:	683b      	ldr	r3, [r7, #0]
    e750:	68b9      	ldr	r1, [r7, #8]
    e752:	68f8      	ldr	r0, [r7, #12]
    e754:	f7ff ffc1 	bl	e6da <kf_work>
    e758:	683b      	ldr	r3, [r7, #0]
    e75a:	687a      	ldr	r2, [r7, #4]
    e75c:	fb02 f303 	mul.w	r3, r2, r3
    e760:	009b      	lsls	r3, r3, #2
    e762:	68ba      	ldr	r2, [r7, #8]
    e764:	4413      	add	r3, r2
    e766:	60bb      	str	r3, [r7, #8]
    e768:	697b      	ldr	r3, [r7, #20]
    e76a:	009b      	lsls	r3, r3, #2
    e76c:	68fa      	ldr	r2, [r7, #12]
    e76e:	4413      	add	r3, r2
    e770:	60fb      	str	r3, [r7, #12]
    e772:	68fa      	ldr	r2, [r7, #12]
    e774:	693b      	ldr	r3, [r7, #16]
    e776:	429a      	cmp	r2, r3
    e778:	d1e1      	bne.n	e73e <kf_work+0x64>
    e77a:	69fb      	ldr	r3, [r7, #28]
    e77c:	60fb      	str	r3, [r7, #12]
    e77e:	69bb      	ldr	r3, [r7, #24]
    e780:	3b02      	subs	r3, #2
    e782:	2b03      	cmp	r3, #3
    e784:	d826      	bhi.n	e7d4 <kf_work+0xfa>
    e786:	a201      	add	r2, pc, #4	; (adr r2, e78c <kf_work+0xb2>)
    e788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    e78c:	0000e79d 	.word	0x0000e79d
    e790:	0000e7ab 	.word	0x0000e7ab
    e794:	0000e7b9 	.word	0x0000e7b9
    e798:	0000e7c7 	.word	0x0000e7c7
    e79c:	697b      	ldr	r3, [r7, #20]
    e79e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e7a0:	6879      	ldr	r1, [r7, #4]
    e7a2:	68f8      	ldr	r0, [r7, #12]
    e7a4:	f7fe fdb4 	bl	d310 <kf_bfly2>
    e7a8:	e01d      	b.n	e7e6 <kf_work+0x10c>
    e7aa:	697b      	ldr	r3, [r7, #20]
    e7ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e7ae:	6879      	ldr	r1, [r7, #4]
    e7b0:	68f8      	ldr	r0, [r7, #12]
    e7b2:	f7ff f8e6 	bl	d982 <kf_bfly3>
    e7b6:	e016      	b.n	e7e6 <kf_work+0x10c>
    e7b8:	697b      	ldr	r3, [r7, #20]
    e7ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e7bc:	6879      	ldr	r1, [r7, #4]
    e7be:	68f8      	ldr	r0, [r7, #12]
    e7c0:	f7fe fe62 	bl	d488 <kf_bfly4>
    e7c4:	e00f      	b.n	e7e6 <kf_work+0x10c>
    e7c6:	697b      	ldr	r3, [r7, #20]
    e7c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e7ca:	6879      	ldr	r1, [r7, #4]
    e7cc:	68f8      	ldr	r0, [r7, #12]
    e7ce:	f7ff fab1 	bl	dd34 <kf_bfly5>
    e7d2:	e008      	b.n	e7e6 <kf_work+0x10c>
    e7d4:	69bb      	ldr	r3, [r7, #24]
    e7d6:	9300      	str	r3, [sp, #0]
    e7d8:	697b      	ldr	r3, [r7, #20]
    e7da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    e7dc:	6879      	ldr	r1, [r7, #4]
    e7de:	68f8      	ldr	r0, [r7, #12]
    e7e0:	f7ff fe70 	bl	e4c4 <kf_bfly_generic>
    e7e4:	bf00      	nop
    e7e6:	bf00      	nop
    e7e8:	3720      	adds	r7, #32
    e7ea:	46bd      	mov	sp, r7
    e7ec:	bd80      	pop	{r7, pc}

0000e7ee <kf_factor>:
    e7ee:	b580      	push	{r7, lr}
    e7f0:	b086      	sub	sp, #24
    e7f2:	af00      	add	r7, sp, #0
    e7f4:	6078      	str	r0, [r7, #4]
    e7f6:	6039      	str	r1, [r7, #0]
    e7f8:	2304      	movs	r3, #4
    e7fa:	617b      	str	r3, [r7, #20]
    e7fc:	6878      	ldr	r0, [r7, #4]
    e7fe:	f004 febd 	bl	1357c <__aeabi_i2d>
    e802:	4602      	mov	r2, r0
    e804:	460b      	mov	r3, r1
    e806:	4610      	mov	r0, r2
    e808:	4619      	mov	r1, r3
    e80a:	f010 f813 	bl	1e834 <sqrt>
    e80e:	4602      	mov	r2, r0
    e810:	460b      	mov	r3, r1
    e812:	4610      	mov	r0, r2
    e814:	4619      	mov	r1, r3
    e816:	f007 fbc3 	bl	15fa0 <floor>
    e81a:	e9c7 0102 	strd	r0, r1, [r7, #8]
    e81e:	e01e      	b.n	e85e <kf_factor+0x70>
    e820:	697b      	ldr	r3, [r7, #20]
    e822:	2b02      	cmp	r3, #2
    e824:	d005      	beq.n	e832 <kf_factor+0x44>
    e826:	697b      	ldr	r3, [r7, #20]
    e828:	2b04      	cmp	r3, #4
    e82a:	d105      	bne.n	e838 <kf_factor+0x4a>
    e82c:	2302      	movs	r3, #2
    e82e:	617b      	str	r3, [r7, #20]
    e830:	e006      	b.n	e840 <kf_factor+0x52>
    e832:	2303      	movs	r3, #3
    e834:	617b      	str	r3, [r7, #20]
    e836:	e003      	b.n	e840 <kf_factor+0x52>
    e838:	697b      	ldr	r3, [r7, #20]
    e83a:	3302      	adds	r3, #2
    e83c:	617b      	str	r3, [r7, #20]
    e83e:	bf00      	nop
    e840:	6978      	ldr	r0, [r7, #20]
    e842:	f004 fe9b 	bl	1357c <__aeabi_i2d>
    e846:	4602      	mov	r2, r0
    e848:	460b      	mov	r3, r1
    e84a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    e84e:	f005 f971 	bl	13b34 <__aeabi_dcmplt>
    e852:	4603      	mov	r3, r0
    e854:	2b00      	cmp	r3, #0
    e856:	d100      	bne.n	e85a <kf_factor+0x6c>
    e858:	e001      	b.n	e85e <kf_factor+0x70>
    e85a:	687b      	ldr	r3, [r7, #4]
    e85c:	617b      	str	r3, [r7, #20]
    e85e:	687b      	ldr	r3, [r7, #4]
    e860:	697a      	ldr	r2, [r7, #20]
    e862:	fb93 f2f2 	sdiv	r2, r3, r2
    e866:	6979      	ldr	r1, [r7, #20]
    e868:	fb01 f202 	mul.w	r2, r1, r2
    e86c:	1a9b      	subs	r3, r3, r2
    e86e:	2b00      	cmp	r3, #0
    e870:	d1d6      	bne.n	e820 <kf_factor+0x32>
    e872:	687a      	ldr	r2, [r7, #4]
    e874:	697b      	ldr	r3, [r7, #20]
    e876:	fb92 f3f3 	sdiv	r3, r2, r3
    e87a:	607b      	str	r3, [r7, #4]
    e87c:	683b      	ldr	r3, [r7, #0]
    e87e:	1d1a      	adds	r2, r3, #4
    e880:	603a      	str	r2, [r7, #0]
    e882:	697a      	ldr	r2, [r7, #20]
    e884:	601a      	str	r2, [r3, #0]
    e886:	683b      	ldr	r3, [r7, #0]
    e888:	1d1a      	adds	r2, r3, #4
    e88a:	603a      	str	r2, [r7, #0]
    e88c:	687a      	ldr	r2, [r7, #4]
    e88e:	601a      	str	r2, [r3, #0]
    e890:	687b      	ldr	r3, [r7, #4]
    e892:	2b01      	cmp	r3, #1
    e894:	dce3      	bgt.n	e85e <kf_factor+0x70>
    e896:	bf00      	nop
    e898:	bf00      	nop
    e89a:	3718      	adds	r7, #24
    e89c:	46bd      	mov	sp, r7
    e89e:	bd80      	pop	{r7, pc}

0000e8a0 <kiss_fft_alloc>:
    e8a0:	b5b0      	push	{r4, r5, r7, lr}
    e8a2:	b08c      	sub	sp, #48	; 0x30
    e8a4:	af00      	add	r7, sp, #0
    e8a6:	60f8      	str	r0, [r7, #12]
    e8a8:	60b9      	str	r1, [r7, #8]
    e8aa:	607a      	str	r2, [r7, #4]
    e8ac:	603b      	str	r3, [r7, #0]
    e8ae:	2300      	movs	r3, #0
    e8b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    e8b2:	68fb      	ldr	r3, [r7, #12]
    e8b4:	3342      	adds	r3, #66	; 0x42
    e8b6:	009b      	lsls	r3, r3, #2
    e8b8:	61fb      	str	r3, [r7, #28]
    e8ba:	683b      	ldr	r3, [r7, #0]
    e8bc:	2b00      	cmp	r3, #0
    e8be:	d102      	bne.n	e8c6 <kiss_fft_alloc+0x26>
    e8c0:	2300      	movs	r3, #0
    e8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    e8c4:	e00c      	b.n	e8e0 <kiss_fft_alloc+0x40>
    e8c6:	687b      	ldr	r3, [r7, #4]
    e8c8:	2b00      	cmp	r3, #0
    e8ca:	d006      	beq.n	e8da <kiss_fft_alloc+0x3a>
    e8cc:	683b      	ldr	r3, [r7, #0]
    e8ce:	681b      	ldr	r3, [r3, #0]
    e8d0:	69fa      	ldr	r2, [r7, #28]
    e8d2:	429a      	cmp	r2, r3
    e8d4:	d801      	bhi.n	e8da <kiss_fft_alloc+0x3a>
    e8d6:	687b      	ldr	r3, [r7, #4]
    e8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    e8da:	683b      	ldr	r3, [r7, #0]
    e8dc:	69fa      	ldr	r2, [r7, #28]
    e8de:	601a      	str	r2, [r3, #0]
    e8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e8e2:	2b00      	cmp	r3, #0
    e8e4:	f000 809a 	beq.w	ea1c <kiss_fft_alloc+0x17c>
    e8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e8ea:	68fa      	ldr	r2, [r7, #12]
    e8ec:	601a      	str	r2, [r3, #0]
    e8ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e8f0:	68ba      	ldr	r2, [r7, #8]
    e8f2:	605a      	str	r2, [r3, #4]
    e8f4:	2300      	movs	r3, #0
    e8f6:	62bb      	str	r3, [r7, #40]	; 0x28
    e8f8:	e085      	b.n	ea06 <kiss_fft_alloc+0x166>
    e8fa:	a34b      	add	r3, pc, #300	; (adr r3, ea28 <kiss_fft_alloc+0x188>)
    e8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    e900:	e9c7 2304 	strd	r2, r3, [r7, #16]
    e904:	f04f 0200 	mov.w	r2, #0
    e908:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
    e90c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    e910:	f004 fe9e 	bl	13650 <__aeabi_dmul>
    e914:	4602      	mov	r2, r0
    e916:	460b      	mov	r3, r1
    e918:	4614      	mov	r4, r2
    e91a:	461d      	mov	r5, r3
    e91c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    e91e:	f004 fe2d 	bl	1357c <__aeabi_i2d>
    e922:	4602      	mov	r2, r0
    e924:	460b      	mov	r3, r1
    e926:	4620      	mov	r0, r4
    e928:	4629      	mov	r1, r5
    e92a:	f004 fe91 	bl	13650 <__aeabi_dmul>
    e92e:	4602      	mov	r2, r0
    e930:	460b      	mov	r3, r1
    e932:	4614      	mov	r4, r2
    e934:	461d      	mov	r5, r3
    e936:	68f8      	ldr	r0, [r7, #12]
    e938:	f004 fe20 	bl	1357c <__aeabi_i2d>
    e93c:	4602      	mov	r2, r0
    e93e:	460b      	mov	r3, r1
    e940:	4620      	mov	r0, r4
    e942:	4629      	mov	r1, r5
    e944:	f004 ffae 	bl	138a4 <__aeabi_ddiv>
    e948:	4602      	mov	r2, r0
    e94a:	460b      	mov	r3, r1
    e94c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    e950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    e952:	685b      	ldr	r3, [r3, #4]
    e954:	2b00      	cmp	r3, #0
    e956:	d005      	beq.n	e964 <kiss_fft_alloc+0xc4>
    e958:	6a3b      	ldr	r3, [r7, #32]
    e95a:	623b      	str	r3, [r7, #32]
    e95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    e95e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    e962:	627b      	str	r3, [r7, #36]	; 0x24
    e964:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    e968:	f00f fd6a 	bl	1e440 <cos>
    e96c:	a330      	add	r3, pc, #192	; (adr r3, ea30 <kiss_fft_alloc+0x190>)
    e96e:	e9d3 2300 	ldrd	r2, r3, [r3]
    e972:	f004 fe6d 	bl	13650 <__aeabi_dmul>
    e976:	4602      	mov	r2, r0
    e978:	460b      	mov	r3, r1
    e97a:	4610      	mov	r0, r2
    e97c:	4619      	mov	r1, r3
    e97e:	f04f 0200 	mov.w	r2, #0
    e982:	4b2d      	ldr	r3, [pc, #180]	; (ea38 <kiss_fft_alloc+0x198>)
    e984:	f004 fcae 	bl	132e4 <__adddf3>
    e988:	4602      	mov	r2, r0
    e98a:	460b      	mov	r3, r1
    e98c:	4610      	mov	r0, r2
    e98e:	4619      	mov	r1, r3
    e990:	f007 fb06 	bl	15fa0 <floor>
    e994:	4602      	mov	r2, r0
    e996:	460b      	mov	r3, r1
    e998:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    e99a:	f501 7084 	add.w	r0, r1, #264	; 0x108
    e99e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    e9a0:	0089      	lsls	r1, r1, #2
    e9a2:	1844      	adds	r4, r0, r1
    e9a4:	4610      	mov	r0, r2
    e9a6:	4619      	mov	r1, r3
    e9a8:	f005 f902 	bl	13bb0 <__aeabi_d2iz>
    e9ac:	4603      	mov	r3, r0
    e9ae:	b21b      	sxth	r3, r3
    e9b0:	8023      	strh	r3, [r4, #0]
    e9b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    e9b6:	f00f febd 	bl	1e734 <sin>
    e9ba:	a31d      	add	r3, pc, #116	; (adr r3, ea30 <kiss_fft_alloc+0x190>)
    e9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
    e9c0:	f004 fe46 	bl	13650 <__aeabi_dmul>
    e9c4:	4602      	mov	r2, r0
    e9c6:	460b      	mov	r3, r1
    e9c8:	4610      	mov	r0, r2
    e9ca:	4619      	mov	r1, r3
    e9cc:	f04f 0200 	mov.w	r2, #0
    e9d0:	4b19      	ldr	r3, [pc, #100]	; (ea38 <kiss_fft_alloc+0x198>)
    e9d2:	f004 fc87 	bl	132e4 <__adddf3>
    e9d6:	4602      	mov	r2, r0
    e9d8:	460b      	mov	r3, r1
    e9da:	4610      	mov	r0, r2
    e9dc:	4619      	mov	r1, r3
    e9de:	f007 fadf 	bl	15fa0 <floor>
    e9e2:	4602      	mov	r2, r0
    e9e4:	460b      	mov	r3, r1
    e9e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    e9e8:	f501 7084 	add.w	r0, r1, #264	; 0x108
    e9ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    e9ee:	0089      	lsls	r1, r1, #2
    e9f0:	1844      	adds	r4, r0, r1
    e9f2:	4610      	mov	r0, r2
    e9f4:	4619      	mov	r1, r3
    e9f6:	f005 f8db 	bl	13bb0 <__aeabi_d2iz>
    e9fa:	4603      	mov	r3, r0
    e9fc:	b21b      	sxth	r3, r3
    e9fe:	8063      	strh	r3, [r4, #2]
    ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ea02:	3301      	adds	r3, #1
    ea04:	62bb      	str	r3, [r7, #40]	; 0x28
    ea06:	6aba      	ldr	r2, [r7, #40]	; 0x28
    ea08:	68fb      	ldr	r3, [r7, #12]
    ea0a:	429a      	cmp	r2, r3
    ea0c:	f6ff af75 	blt.w	e8fa <kiss_fft_alloc+0x5a>
    ea10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ea12:	3308      	adds	r3, #8
    ea14:	4619      	mov	r1, r3
    ea16:	68f8      	ldr	r0, [r7, #12]
    ea18:	f7ff fee9 	bl	e7ee <kf_factor>
    ea1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ea1e:	4618      	mov	r0, r3
    ea20:	3730      	adds	r7, #48	; 0x30
    ea22:	46bd      	mov	sp, r7
    ea24:	bdb0      	pop	{r4, r5, r7, pc}
    ea26:	bf00      	nop
    ea28:	54442d18 	.word	0x54442d18
    ea2c:	400921fb 	.word	0x400921fb
    ea30:	00000000 	.word	0x00000000
    ea34:	40dfffc0 	.word	0x40dfffc0
    ea38:	3fe00000 	.word	0x3fe00000

0000ea3c <kiss_fft_stride>:
    ea3c:	b580      	push	{r7, lr}
    ea3e:	b088      	sub	sp, #32
    ea40:	af02      	add	r7, sp, #8
    ea42:	60f8      	str	r0, [r7, #12]
    ea44:	60b9      	str	r1, [r7, #8]
    ea46:	607a      	str	r2, [r7, #4]
    ea48:	603b      	str	r3, [r7, #0]
    ea4a:	68ba      	ldr	r2, [r7, #8]
    ea4c:	687b      	ldr	r3, [r7, #4]
    ea4e:	429a      	cmp	r2, r3
    ea50:	d115      	bne.n	ea7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e>
    ea52:	2300      	movs	r3, #0
    ea54:	617b      	str	r3, [r7, #20]
    ea56:	68fb      	ldr	r3, [r7, #12]
    ea58:	3308      	adds	r3, #8
    ea5a:	68fa      	ldr	r2, [r7, #12]
    ea5c:	9201      	str	r2, [sp, #4]
    ea5e:	9300      	str	r3, [sp, #0]
    ea60:	683b      	ldr	r3, [r7, #0]
    ea62:	2201      	movs	r2, #1
    ea64:	68b9      	ldr	r1, [r7, #8]
    ea66:	6978      	ldr	r0, [r7, #20]
    ea68:	f7ff fe37 	bl	e6da <kf_work>
    ea6c:	68fb      	ldr	r3, [r7, #12]
    ea6e:	681b      	ldr	r3, [r3, #0]
    ea70:	009b      	lsls	r3, r3, #2
    ea72:	461a      	mov	r2, r3
    ea74:	6979      	ldr	r1, [r7, #20]
    ea76:	6878      	ldr	r0, [r7, #4]
    ea78:	f015 fd0d 	bl	24496 <memcpy>
    ea7c:	e00a      	b.n	ea94 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x34>
    ea7e:	68fb      	ldr	r3, [r7, #12]
    ea80:	3308      	adds	r3, #8
    ea82:	68fa      	ldr	r2, [r7, #12]
    ea84:	9201      	str	r2, [sp, #4]
    ea86:	9300      	str	r3, [sp, #0]
    ea88:	683b      	ldr	r3, [r7, #0]
    ea8a:	2201      	movs	r2, #1
    ea8c:	68b9      	ldr	r1, [r7, #8]
    ea8e:	6878      	ldr	r0, [r7, #4]
    ea90:	f7ff fe23 	bl	e6da <kf_work>
    ea94:	bf00      	nop
    ea96:	3718      	adds	r7, #24
    ea98:	46bd      	mov	sp, r7
    ea9a:	bd80      	pop	{r7, pc}

0000ea9c <kiss_fft>:
    ea9c:	b580      	push	{r7, lr}
    ea9e:	b084      	sub	sp, #16
    eaa0:	af00      	add	r7, sp, #0
    eaa2:	60f8      	str	r0, [r7, #12]
    eaa4:	60b9      	str	r1, [r7, #8]
    eaa6:	607a      	str	r2, [r7, #4]
    eaa8:	2301      	movs	r3, #1
    eaaa:	687a      	ldr	r2, [r7, #4]
    eaac:	68b9      	ldr	r1, [r7, #8]
    eaae:	68f8      	ldr	r0, [r7, #12]
    eab0:	f7ff ffc4 	bl	ea3c <kiss_fft_stride>
    eab4:	bf00      	nop
    eab6:	3710      	adds	r7, #16
    eab8:	46bd      	mov	sp, r7
    eaba:	bd80      	pop	{r7, pc}

0000eabc <kiss_fft_cleanup>:
    eabc:	b480      	push	{r7}
    eabe:	af00      	add	r7, sp, #0
    eac0:	bf00      	nop
    eac2:	46bd      	mov	sp, r7
    eac4:	bc80      	pop	{r7}
    eac6:	4770      	bx	lr

0000eac8 <kiss_fft_next_fast_size>:
    eac8:	b480      	push	{r7}
    eaca:	b085      	sub	sp, #20
    eacc:	af00      	add	r7, sp, #0
    eace:	6078      	str	r0, [r7, #4]
    ead0:	687b      	ldr	r3, [r7, #4]
    ead2:	60fb      	str	r3, [r7, #12]
    ead4:	e004      	b.n	eae0 <kiss_fft_next_fast_size+0x18>
    ead6:	68fb      	ldr	r3, [r7, #12]
    ead8:	0fda      	lsrs	r2, r3, #31
    eada:	4413      	add	r3, r2
    eadc:	105b      	asrs	r3, r3, #1
    eade:	60fb      	str	r3, [r7, #12]
    eae0:	68fb      	ldr	r3, [r7, #12]
    eae2:	f003 0301 	and.w	r3, r3, #1
    eae6:	2b00      	cmp	r3, #0
    eae8:	d0f5      	beq.n	ead6 <kiss_fft_next_fast_size+0xe>
    eaea:	e006      	b.n	eafa <kiss_fft_next_fast_size+0x32>
    eaec:	68fb      	ldr	r3, [r7, #12]
    eaee:	4a1b      	ldr	r2, [pc, #108]	; (eb5c <kiss_fft_next_fast_size+0x94>)
    eaf0:	fb82 1203 	smull	r1, r2, r2, r3
    eaf4:	17db      	asrs	r3, r3, #31
    eaf6:	1ad3      	subs	r3, r2, r3
    eaf8:	60fb      	str	r3, [r7, #12]
    eafa:	68f9      	ldr	r1, [r7, #12]
    eafc:	4b17      	ldr	r3, [pc, #92]	; (eb5c <kiss_fft_next_fast_size+0x94>)
    eafe:	fb83 3201 	smull	r3, r2, r3, r1
    eb02:	17cb      	asrs	r3, r1, #31
    eb04:	1ad2      	subs	r2, r2, r3
    eb06:	4613      	mov	r3, r2
    eb08:	005b      	lsls	r3, r3, #1
    eb0a:	4413      	add	r3, r2
    eb0c:	1aca      	subs	r2, r1, r3
    eb0e:	2a00      	cmp	r2, #0
    eb10:	d0ec      	beq.n	eaec <kiss_fft_next_fast_size+0x24>
    eb12:	e007      	b.n	eb24 <kiss_fft_next_fast_size+0x5c>
    eb14:	68fb      	ldr	r3, [r7, #12]
    eb16:	4a12      	ldr	r2, [pc, #72]	; (eb60 <kiss_fft_next_fast_size+0x98>)
    eb18:	fb82 1203 	smull	r1, r2, r2, r3
    eb1c:	1052      	asrs	r2, r2, #1
    eb1e:	17db      	asrs	r3, r3, #31
    eb20:	1ad3      	subs	r3, r2, r3
    eb22:	60fb      	str	r3, [r7, #12]
    eb24:	68f9      	ldr	r1, [r7, #12]
    eb26:	4b0e      	ldr	r3, [pc, #56]	; (eb60 <kiss_fft_next_fast_size+0x98>)
    eb28:	fb83 2301 	smull	r2, r3, r3, r1
    eb2c:	105a      	asrs	r2, r3, #1
    eb2e:	17cb      	asrs	r3, r1, #31
    eb30:	1ad2      	subs	r2, r2, r3
    eb32:	4613      	mov	r3, r2
    eb34:	009b      	lsls	r3, r3, #2
    eb36:	4413      	add	r3, r2
    eb38:	1aca      	subs	r2, r1, r3
    eb3a:	2a00      	cmp	r2, #0
    eb3c:	d0ea      	beq.n	eb14 <kiss_fft_next_fast_size+0x4c>
    eb3e:	68fb      	ldr	r3, [r7, #12]
    eb40:	2b01      	cmp	r3, #1
    eb42:	dd03      	ble.n	eb4c <kiss_fft_next_fast_size+0x84>
    eb44:	687b      	ldr	r3, [r7, #4]
    eb46:	3301      	adds	r3, #1
    eb48:	607b      	str	r3, [r7, #4]
    eb4a:	e7c1      	b.n	ead0 <kiss_fft_next_fast_size+0x8>
    eb4c:	bf00      	nop
    eb4e:	687b      	ldr	r3, [r7, #4]
    eb50:	4618      	mov	r0, r3
    eb52:	3714      	adds	r7, #20
    eb54:	46bd      	mov	sp, r7
    eb56:	bc80      	pop	{r7}
    eb58:	4770      	bx	lr
    eb5a:	bf00      	nop
    eb5c:	55555556 	.word	0x55555556
    eb60:	66666667 	.word	0x66666667

0000eb64 <__aeabi_ldivmod>:
    eb64:	b97b      	cbnz	r3, eb86 <__aeabi_ldivmod+0x22>
    eb66:	b972      	cbnz	r2, eb86 <__aeabi_ldivmod+0x22>
    eb68:	2900      	cmp	r1, #0
    eb6a:	bfbe      	ittt	lt
    eb6c:	2000      	movlt	r0, #0
    eb6e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    eb72:	e006      	blt.n	eb82 <__aeabi_ldivmod+0x1e>
    eb74:	bf08      	it	eq
    eb76:	2800      	cmpeq	r0, #0
    eb78:	bf1c      	itt	ne
    eb7a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    eb7e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    eb82:	f000 b9b9 	b.w	eef8 <__aeabi_idiv0>
    eb86:	f1ad 0c08 	sub.w	ip, sp, #8
    eb8a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    eb8e:	2900      	cmp	r1, #0
    eb90:	db09      	blt.n	eba6 <__aeabi_ldivmod+0x42>
    eb92:	2b00      	cmp	r3, #0
    eb94:	db1a      	blt.n	ebcc <__aeabi_ldivmod+0x68>
    eb96:	f000 f84d 	bl	ec34 <__udivmoddi4>
    eb9a:	f8dd e004 	ldr.w	lr, [sp, #4]
    eb9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    eba2:	b004      	add	sp, #16
    eba4:	4770      	bx	lr
    eba6:	4240      	negs	r0, r0
    eba8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ebac:	2b00      	cmp	r3, #0
    ebae:	db1b      	blt.n	ebe8 <__aeabi_ldivmod+0x84>
    ebb0:	f000 f840 	bl	ec34 <__udivmoddi4>
    ebb4:	f8dd e004 	ldr.w	lr, [sp, #4]
    ebb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ebbc:	b004      	add	sp, #16
    ebbe:	4240      	negs	r0, r0
    ebc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ebc4:	4252      	negs	r2, r2
    ebc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ebca:	4770      	bx	lr
    ebcc:	4252      	negs	r2, r2
    ebce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ebd2:	f000 f82f 	bl	ec34 <__udivmoddi4>
    ebd6:	f8dd e004 	ldr.w	lr, [sp, #4]
    ebda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ebde:	b004      	add	sp, #16
    ebe0:	4240      	negs	r0, r0
    ebe2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ebe6:	4770      	bx	lr
    ebe8:	4252      	negs	r2, r2
    ebea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ebee:	f000 f821 	bl	ec34 <__udivmoddi4>
    ebf2:	f8dd e004 	ldr.w	lr, [sp, #4]
    ebf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ebfa:	b004      	add	sp, #16
    ebfc:	4252      	negs	r2, r2
    ebfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    ec02:	4770      	bx	lr

0000ec04 <__aeabi_uldivmod>:
    ec04:	b953      	cbnz	r3, ec1c <__aeabi_uldivmod+0x18>
    ec06:	b94a      	cbnz	r2, ec1c <__aeabi_uldivmod+0x18>
    ec08:	2900      	cmp	r1, #0
    ec0a:	bf08      	it	eq
    ec0c:	2800      	cmpeq	r0, #0
    ec0e:	bf1c      	itt	ne
    ec10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    ec14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    ec18:	f000 b96e 	b.w	eef8 <__aeabi_idiv0>
    ec1c:	f1ad 0c08 	sub.w	ip, sp, #8
    ec20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    ec24:	f000 f806 	bl	ec34 <__udivmoddi4>
    ec28:	f8dd e004 	ldr.w	lr, [sp, #4]
    ec2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ec30:	b004      	add	sp, #16
    ec32:	4770      	bx	lr

0000ec34 <__udivmoddi4>:
    ec34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec38:	9d09      	ldr	r5, [sp, #36]	; 0x24
    ec3a:	460f      	mov	r7, r1
    ec3c:	4604      	mov	r4, r0
    ec3e:	4689      	mov	r9, r1
    ec40:	2b00      	cmp	r3, #0
    ec42:	d17c      	bne.n	ed3e <__udivmoddi4+0x10a>
    ec44:	428a      	cmp	r2, r1
    ec46:	4616      	mov	r6, r2
    ec48:	d940      	bls.n	eccc <__udivmoddi4+0x98>
    ec4a:	fab2 f282 	clz	r2, r2
    ec4e:	b14a      	cbz	r2, ec64 <__udivmoddi4+0x30>
    ec50:	f1c2 0120 	rsb	r1, r2, #32
    ec54:	fa07 f302 	lsl.w	r3, r7, r2
    ec58:	4096      	lsls	r6, r2
    ec5a:	4094      	lsls	r4, r2
    ec5c:	fa20 f101 	lsr.w	r1, r0, r1
    ec60:	ea41 0903 	orr.w	r9, r1, r3
    ec64:	ea4f 4e16 	mov.w	lr, r6, lsr #16
    ec68:	0c27      	lsrs	r7, r4, #16
    ec6a:	fa1f f886 	uxth.w	r8, r6
    ec6e:	fbb9 fcfe 	udiv	ip, r9, lr
    ec72:	fb0e 931c 	mls	r3, lr, ip, r9
    ec76:	fb0c f108 	mul.w	r1, ip, r8
    ec7a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    ec7e:	4299      	cmp	r1, r3
    ec80:	d906      	bls.n	ec90 <__udivmoddi4+0x5c>
    ec82:	18f3      	adds	r3, r6, r3
    ec84:	d202      	bcs.n	ec8c <__udivmoddi4+0x58>
    ec86:	4299      	cmp	r1, r3
    ec88:	f200 8123 	bhi.w	eed2 <__udivmoddi4+0x29e>
    ec8c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    ec90:	1a59      	subs	r1, r3, r1
    ec92:	b2a3      	uxth	r3, r4
    ec94:	fbb1 f0fe 	udiv	r0, r1, lr
    ec98:	fb0e 1110 	mls	r1, lr, r0, r1
    ec9c:	fb00 f808 	mul.w	r8, r0, r8
    eca0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    eca4:	45a0      	cmp	r8, r4
    eca6:	d905      	bls.n	ecb4 <__udivmoddi4+0x80>
    eca8:	1934      	adds	r4, r6, r4
    ecaa:	d202      	bcs.n	ecb2 <__udivmoddi4+0x7e>
    ecac:	45a0      	cmp	r8, r4
    ecae:	f200 810d 	bhi.w	eecc <__udivmoddi4+0x298>
    ecb2:	3801      	subs	r0, #1
    ecb4:	eba4 0408 	sub.w	r4, r4, r8
    ecb8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    ecbc:	2100      	movs	r1, #0
    ecbe:	b11d      	cbz	r5, ecc8 <__udivmoddi4+0x94>
    ecc0:	40d4      	lsrs	r4, r2
    ecc2:	2300      	movs	r3, #0
    ecc4:	e9c5 4300 	strd	r4, r3, [r5]
    ecc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eccc:	b902      	cbnz	r2, ecd0 <__udivmoddi4+0x9c>
    ecce:	deff      	udf	#255	; 0xff
    ecd0:	fab2 f282 	clz	r2, r2
    ecd4:	2a00      	cmp	r2, #0
    ecd6:	d14d      	bne.n	ed74 <__udivmoddi4+0x140>
    ecd8:	1b8f      	subs	r7, r1, r6
    ecda:	ea4f 4e16 	mov.w	lr, r6, lsr #16
    ecde:	fa1f f886 	uxth.w	r8, r6
    ece2:	2101      	movs	r1, #1
    ece4:	0c23      	lsrs	r3, r4, #16
    ece6:	fbb7 fcfe 	udiv	ip, r7, lr
    ecea:	fb0e 771c 	mls	r7, lr, ip, r7
    ecee:	fb08 f00c 	mul.w	r0, r8, ip
    ecf2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    ecf6:	4298      	cmp	r0, r3
    ecf8:	d90a      	bls.n	ed10 <__udivmoddi4+0xdc>
    ecfa:	18f3      	adds	r3, r6, r3
    ecfc:	bf2c      	ite	cs
    ecfe:	2701      	movcs	r7, #1
    ed00:	2700      	movcc	r7, #0
    ed02:	4298      	cmp	r0, r3
    ed04:	d902      	bls.n	ed0c <__udivmoddi4+0xd8>
    ed06:	2f00      	cmp	r7, #0
    ed08:	f000 80d9 	beq.w	eebe <__udivmoddi4+0x28a>
    ed0c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    ed10:	1a1f      	subs	r7, r3, r0
    ed12:	b2a3      	uxth	r3, r4
    ed14:	fbb7 f0fe 	udiv	r0, r7, lr
    ed18:	fb0e 7710 	mls	r7, lr, r0, r7
    ed1c:	fb08 f800 	mul.w	r8, r8, r0
    ed20:	ea43 4407 	orr.w	r4, r3, r7, lsl #16
    ed24:	45a0      	cmp	r8, r4
    ed26:	d905      	bls.n	ed34 <__udivmoddi4+0x100>
    ed28:	1934      	adds	r4, r6, r4
    ed2a:	d202      	bcs.n	ed32 <__udivmoddi4+0xfe>
    ed2c:	45a0      	cmp	r8, r4
    ed2e:	f200 80ca 	bhi.w	eec6 <__udivmoddi4+0x292>
    ed32:	3801      	subs	r0, #1
    ed34:	eba4 0408 	sub.w	r4, r4, r8
    ed38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    ed3c:	e7bf      	b.n	ecbe <__udivmoddi4+0x8a>
    ed3e:	428b      	cmp	r3, r1
    ed40:	d908      	bls.n	ed54 <__udivmoddi4+0x120>
    ed42:	2d00      	cmp	r5, #0
    ed44:	f000 80b2 	beq.w	eeac <__udivmoddi4+0x278>
    ed48:	2100      	movs	r1, #0
    ed4a:	e9c5 0700 	strd	r0, r7, [r5]
    ed4e:	4608      	mov	r0, r1
    ed50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed54:	fab3 f183 	clz	r1, r3
    ed58:	2900      	cmp	r1, #0
    ed5a:	d149      	bne.n	edf0 <__udivmoddi4+0x1bc>
    ed5c:	42bb      	cmp	r3, r7
    ed5e:	f0c0 80a8 	bcc.w	eeb2 <__udivmoddi4+0x27e>
    ed62:	4282      	cmp	r2, r0
    ed64:	f240 80a5 	bls.w	eeb2 <__udivmoddi4+0x27e>
    ed68:	4608      	mov	r0, r1
    ed6a:	2d00      	cmp	r5, #0
    ed6c:	d0ac      	beq.n	ecc8 <__udivmoddi4+0x94>
    ed6e:	e9c5 4900 	strd	r4, r9, [r5]
    ed72:	e7a9      	b.n	ecc8 <__udivmoddi4+0x94>
    ed74:	f1c2 0020 	rsb	r0, r2, #32
    ed78:	4096      	lsls	r6, r2
    ed7a:	4091      	lsls	r1, r2
    ed7c:	fa27 f300 	lsr.w	r3, r7, r0
    ed80:	ea4f 4e16 	mov.w	lr, r6, lsr #16
    ed84:	fa24 f700 	lsr.w	r7, r4, r0
    ed88:	fa1f f886 	uxth.w	r8, r6
    ed8c:	4094      	lsls	r4, r2
    ed8e:	430f      	orrs	r7, r1
    ed90:	fbb3 f0fe 	udiv	r0, r3, lr
    ed94:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    ed98:	fb0e 3310 	mls	r3, lr, r0, r3
    ed9c:	fb00 f108 	mul.w	r1, r0, r8
    eda0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    eda4:	4299      	cmp	r1, r3
    eda6:	d90c      	bls.n	edc2 <__udivmoddi4+0x18e>
    eda8:	18f3      	adds	r3, r6, r3
    edaa:	bf2c      	ite	cs
    edac:	f04f 0c01 	movcs.w	ip, #1
    edb0:	f04f 0c00 	movcc.w	ip, #0
    edb4:	4299      	cmp	r1, r3
    edb6:	d903      	bls.n	edc0 <__udivmoddi4+0x18c>
    edb8:	f1bc 0f00 	cmp.w	ip, #0
    edbc:	f000 8092 	beq.w	eee4 <__udivmoddi4+0x2b0>
    edc0:	3801      	subs	r0, #1
    edc2:	1a5b      	subs	r3, r3, r1
    edc4:	b2bf      	uxth	r7, r7
    edc6:	fbb3 f1fe 	udiv	r1, r3, lr
    edca:	fb0e 3311 	mls	r3, lr, r1, r3
    edce:	fb01 fc08 	mul.w	ip, r1, r8
    edd2:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    edd6:	45bc      	cmp	ip, r7
    edd8:	d905      	bls.n	ede6 <__udivmoddi4+0x1b2>
    edda:	19f7      	adds	r7, r6, r7
    eddc:	d202      	bcs.n	ede4 <__udivmoddi4+0x1b0>
    edde:	45bc      	cmp	ip, r7
    ede0:	f200 8087 	bhi.w	eef2 <__udivmoddi4+0x2be>
    ede4:	3901      	subs	r1, #1
    ede6:	eba7 070c 	sub.w	r7, r7, ip
    edea:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    edee:	e779      	b.n	ece4 <__udivmoddi4+0xb0>
    edf0:	f1c1 0620 	rsb	r6, r1, #32
    edf4:	fa03 f401 	lsl.w	r4, r3, r1
    edf8:	fa02 fc01 	lsl.w	ip, r2, r1
    edfc:	fa07 f801 	lsl.w	r8, r7, r1
    ee00:	40f2      	lsrs	r2, r6
    ee02:	fa27 f306 	lsr.w	r3, r7, r6
    ee06:	fa20 f706 	lsr.w	r7, r0, r6
    ee0a:	fa00 fe01 	lsl.w	lr, r0, r1
    ee0e:	4322      	orrs	r2, r4
    ee10:	ea47 0408 	orr.w	r4, r7, r8
    ee14:	ea4f 4812 	mov.w	r8, r2, lsr #16
    ee18:	0c20      	lsrs	r0, r4, #16
    ee1a:	fa1f f982 	uxth.w	r9, r2
    ee1e:	fbb3 faf8 	udiv	sl, r3, r8
    ee22:	fb08 371a 	mls	r7, r8, sl, r3
    ee26:	fb0a fb09 	mul.w	fp, sl, r9
    ee2a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    ee2e:	45bb      	cmp	fp, r7
    ee30:	d909      	bls.n	ee46 <__udivmoddi4+0x212>
    ee32:	19d7      	adds	r7, r2, r7
    ee34:	bf2c      	ite	cs
    ee36:	2301      	movcs	r3, #1
    ee38:	2300      	movcc	r3, #0
    ee3a:	45bb      	cmp	fp, r7
    ee3c:	d901      	bls.n	ee42 <__udivmoddi4+0x20e>
    ee3e:	2b00      	cmp	r3, #0
    ee40:	d053      	beq.n	eeea <__udivmoddi4+0x2b6>
    ee42:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    ee46:	eba7 070b 	sub.w	r7, r7, fp
    ee4a:	b2a4      	uxth	r4, r4
    ee4c:	fbb7 f0f8 	udiv	r0, r7, r8
    ee50:	fb08 7710 	mls	r7, r8, r0, r7
    ee54:	fb00 f909 	mul.w	r9, r0, r9
    ee58:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
    ee5c:	45b9      	cmp	r9, r7
    ee5e:	d904      	bls.n	ee6a <__udivmoddi4+0x236>
    ee60:	19d7      	adds	r7, r2, r7
    ee62:	d201      	bcs.n	ee68 <__udivmoddi4+0x234>
    ee64:	45b9      	cmp	r9, r7
    ee66:	d83a      	bhi.n	eede <__udivmoddi4+0x2aa>
    ee68:	3801      	subs	r0, #1
    ee6a:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    ee6e:	eba7 0709 	sub.w	r7, r7, r9
    ee72:	fba0 890c 	umull	r8, r9, r0, ip
    ee76:	454f      	cmp	r7, r9
    ee78:	46c3      	mov	fp, r8
    ee7a:	464c      	mov	r4, r9
    ee7c:	d302      	bcc.n	ee84 <__udivmoddi4+0x250>
    ee7e:	d107      	bne.n	ee90 <__udivmoddi4+0x25c>
    ee80:	45c6      	cmp	lr, r8
    ee82:	d205      	bcs.n	ee90 <__udivmoddi4+0x25c>
    ee84:	ebb8 0b0c 	subs.w	fp, r8, ip
    ee88:	eb69 0202 	sbc.w	r2, r9, r2
    ee8c:	3801      	subs	r0, #1
    ee8e:	4614      	mov	r4, r2
    ee90:	b31d      	cbz	r5, eeda <__udivmoddi4+0x2a6>
    ee92:	ebbe 030b 	subs.w	r3, lr, fp
    ee96:	eb67 0704 	sbc.w	r7, r7, r4
    ee9a:	fa07 f606 	lsl.w	r6, r7, r6
    ee9e:	40cb      	lsrs	r3, r1
    eea0:	40cf      	lsrs	r7, r1
    eea2:	2100      	movs	r1, #0
    eea4:	431e      	orrs	r6, r3
    eea6:	e9c5 6700 	strd	r6, r7, [r5]
    eeaa:	e70d      	b.n	ecc8 <__udivmoddi4+0x94>
    eeac:	4629      	mov	r1, r5
    eeae:	4628      	mov	r0, r5
    eeb0:	e70a      	b.n	ecc8 <__udivmoddi4+0x94>
    eeb2:	1a84      	subs	r4, r0, r2
    eeb4:	eb67 0303 	sbc.w	r3, r7, r3
    eeb8:	2001      	movs	r0, #1
    eeba:	4699      	mov	r9, r3
    eebc:	e755      	b.n	ed6a <__udivmoddi4+0x136>
    eebe:	f1ac 0c02 	sub.w	ip, ip, #2
    eec2:	4433      	add	r3, r6
    eec4:	e724      	b.n	ed10 <__udivmoddi4+0xdc>
    eec6:	3802      	subs	r0, #2
    eec8:	4434      	add	r4, r6
    eeca:	e733      	b.n	ed34 <__udivmoddi4+0x100>
    eecc:	3802      	subs	r0, #2
    eece:	4434      	add	r4, r6
    eed0:	e6f0      	b.n	ecb4 <__udivmoddi4+0x80>
    eed2:	f1ac 0c02 	sub.w	ip, ip, #2
    eed6:	4433      	add	r3, r6
    eed8:	e6da      	b.n	ec90 <__udivmoddi4+0x5c>
    eeda:	4629      	mov	r1, r5
    eedc:	e6f4      	b.n	ecc8 <__udivmoddi4+0x94>
    eede:	3802      	subs	r0, #2
    eee0:	4417      	add	r7, r2
    eee2:	e7c2      	b.n	ee6a <__udivmoddi4+0x236>
    eee4:	3802      	subs	r0, #2
    eee6:	4433      	add	r3, r6
    eee8:	e76b      	b.n	edc2 <__udivmoddi4+0x18e>
    eeea:	f1aa 0a02 	sub.w	sl, sl, #2
    eeee:	4417      	add	r7, r2
    eef0:	e7a9      	b.n	ee46 <__udivmoddi4+0x212>
    eef2:	3902      	subs	r1, #2
    eef4:	4437      	add	r7, r6
    eef6:	e776      	b.n	ede6 <__udivmoddi4+0x1b2>

0000eef8 <__aeabi_idiv0>:
    eef8:	4770      	bx	lr
    eefa:	bf00      	nop

0000eefc <TfLiteIntArrayGetSizeInBytes>:
    eefc:	b480      	push	{r7}
    eefe:	b083      	sub	sp, #12
    ef00:	af00      	add	r7, sp, #0
    ef02:	6078      	str	r0, [r7, #4]
    ef04:	687b      	ldr	r3, [r7, #4]
    ef06:	3301      	adds	r3, #1
    ef08:	009b      	lsls	r3, r3, #2
    ef0a:	4618      	mov	r0, r3
    ef0c:	370c      	adds	r7, #12
    ef0e:	46bd      	mov	sp, r7
    ef10:	bc80      	pop	{r7}
    ef12:	4770      	bx	lr

0000ef14 <TfLiteIntArrayEqual>:
    ef14:	b580      	push	{r7, lr}
    ef16:	b082      	sub	sp, #8
    ef18:	af00      	add	r7, sp, #0
    ef1a:	6078      	str	r0, [r7, #4]
    ef1c:	6039      	str	r1, [r7, #0]
    ef1e:	687a      	ldr	r2, [r7, #4]
    ef20:	683b      	ldr	r3, [r7, #0]
    ef22:	429a      	cmp	r2, r3
    ef24:	d101      	bne.n	ef2a <TfLiteIntArrayEqual+0x16>
    ef26:	2301      	movs	r3, #1
    ef28:	e010      	b.n	ef4c <TfLiteIntArrayEqual+0x38>
    ef2a:	687b      	ldr	r3, [r7, #4]
    ef2c:	2b00      	cmp	r3, #0
    ef2e:	d002      	beq.n	ef36 <TfLiteIntArrayEqual+0x22>
    ef30:	683b      	ldr	r3, [r7, #0]
    ef32:	2b00      	cmp	r3, #0
    ef34:	d101      	bne.n	ef3a <TfLiteIntArrayEqual+0x26>
    ef36:	2300      	movs	r3, #0
    ef38:	e008      	b.n	ef4c <TfLiteIntArrayEqual+0x38>
    ef3a:	683b      	ldr	r3, [r7, #0]
    ef3c:	6819      	ldr	r1, [r3, #0]
    ef3e:	683b      	ldr	r3, [r7, #0]
    ef40:	3304      	adds	r3, #4
    ef42:	461a      	mov	r2, r3
    ef44:	6878      	ldr	r0, [r7, #4]
    ef46:	f000 f805 	bl	ef54 <TfLiteIntArrayEqualsArray>
    ef4a:	4603      	mov	r3, r0
    ef4c:	4618      	mov	r0, r3
    ef4e:	3708      	adds	r7, #8
    ef50:	46bd      	mov	sp, r7
    ef52:	bd80      	pop	{r7, pc}

0000ef54 <TfLiteIntArrayEqualsArray>:
    ef54:	b480      	push	{r7}
    ef56:	b087      	sub	sp, #28
    ef58:	af00      	add	r7, sp, #0
    ef5a:	60f8      	str	r0, [r7, #12]
    ef5c:	60b9      	str	r1, [r7, #8]
    ef5e:	607a      	str	r2, [r7, #4]
    ef60:	68fb      	ldr	r3, [r7, #12]
    ef62:	2b00      	cmp	r3, #0
    ef64:	d106      	bne.n	ef74 <TfLiteIntArrayEqualsArray+0x20>
    ef66:	68bb      	ldr	r3, [r7, #8]
    ef68:	2b00      	cmp	r3, #0
    ef6a:	bf0c      	ite	eq
    ef6c:	2301      	moveq	r3, #1
    ef6e:	2300      	movne	r3, #0
    ef70:	b2db      	uxtb	r3, r3
    ef72:	e020      	b.n	efb6 <TfLiteIntArrayEqualsArray+0x62>
    ef74:	68fb      	ldr	r3, [r7, #12]
    ef76:	681b      	ldr	r3, [r3, #0]
    ef78:	68ba      	ldr	r2, [r7, #8]
    ef7a:	429a      	cmp	r2, r3
    ef7c:	d001      	beq.n	ef82 <TfLiteIntArrayEqualsArray+0x2e>
    ef7e:	2300      	movs	r3, #0
    ef80:	e019      	b.n	efb6 <TfLiteIntArrayEqualsArray+0x62>
    ef82:	2300      	movs	r3, #0
    ef84:	617b      	str	r3, [r7, #20]
    ef86:	e010      	b.n	efaa <TfLiteIntArrayEqualsArray+0x56>
    ef88:	68fa      	ldr	r2, [r7, #12]
    ef8a:	697b      	ldr	r3, [r7, #20]
    ef8c:	009b      	lsls	r3, r3, #2
    ef8e:	4413      	add	r3, r2
    ef90:	685a      	ldr	r2, [r3, #4]
    ef92:	697b      	ldr	r3, [r7, #20]
    ef94:	009b      	lsls	r3, r3, #2
    ef96:	6879      	ldr	r1, [r7, #4]
    ef98:	440b      	add	r3, r1
    ef9a:	681b      	ldr	r3, [r3, #0]
    ef9c:	429a      	cmp	r2, r3
    ef9e:	d001      	beq.n	efa4 <TfLiteIntArrayEqualsArray+0x50>
    efa0:	2300      	movs	r3, #0
    efa2:	e008      	b.n	efb6 <TfLiteIntArrayEqualsArray+0x62>
    efa4:	697b      	ldr	r3, [r7, #20]
    efa6:	3301      	adds	r3, #1
    efa8:	617b      	str	r3, [r7, #20]
    efaa:	68fb      	ldr	r3, [r7, #12]
    efac:	681b      	ldr	r3, [r3, #0]
    efae:	697a      	ldr	r2, [r7, #20]
    efb0:	429a      	cmp	r2, r3
    efb2:	dbe9      	blt.n	ef88 <TfLiteIntArrayEqualsArray+0x34>
    efb4:	2301      	movs	r3, #1
    efb6:	4618      	mov	r0, r3
    efb8:	371c      	adds	r7, #28
    efba:	46bd      	mov	sp, r7
    efbc:	bc80      	pop	{r7}
    efbe:	4770      	bx	lr

0000efc0 <TfLiteIntArrayCreate>:
    efc0:	b580      	push	{r7, lr}
    efc2:	b084      	sub	sp, #16
    efc4:	af00      	add	r7, sp, #0
    efc6:	6078      	str	r0, [r7, #4]
    efc8:	6878      	ldr	r0, [r7, #4]
    efca:	f7ff ff97 	bl	eefc <TfLiteIntArrayGetSizeInBytes>
    efce:	4603      	mov	r3, r0
    efd0:	4618      	mov	r0, r3
    efd2:	f012 f887 	bl	210e4 <malloc>
    efd6:	4603      	mov	r3, r0
    efd8:	60fb      	str	r3, [r7, #12]
    efda:	68fb      	ldr	r3, [r7, #12]
    efdc:	687a      	ldr	r2, [r7, #4]
    efde:	601a      	str	r2, [r3, #0]
    efe0:	68fb      	ldr	r3, [r7, #12]
    efe2:	4618      	mov	r0, r3
    efe4:	3710      	adds	r7, #16
    efe6:	46bd      	mov	sp, r7
    efe8:	bd80      	pop	{r7, pc}

0000efea <TfLiteIntArrayCopy>:
    efea:	b580      	push	{r7, lr}
    efec:	b084      	sub	sp, #16
    efee:	af00      	add	r7, sp, #0
    eff0:	6078      	str	r0, [r7, #4]
    eff2:	687b      	ldr	r3, [r7, #4]
    eff4:	2b00      	cmp	r3, #0
    eff6:	d101      	bne.n	effc <TfLiteIntArrayCopy+0x12>
    eff8:	2300      	movs	r3, #0
    effa:	e013      	b.n	f024 <TfLiteIntArrayCopy+0x3a>
    effc:	687b      	ldr	r3, [r7, #4]
    effe:	681b      	ldr	r3, [r3, #0]
    f000:	4618      	mov	r0, r3
    f002:	f7ff ffdd 	bl	efc0 <TfLiteIntArrayCreate>
    f006:	60f8      	str	r0, [r7, #12]
    f008:	68fb      	ldr	r3, [r7, #12]
    f00a:	2b00      	cmp	r3, #0
    f00c:	d009      	beq.n	f022 <TfLiteIntArrayCopy+0x38>
    f00e:	68fb      	ldr	r3, [r7, #12]
    f010:	1d18      	adds	r0, r3, #4
    f012:	687b      	ldr	r3, [r7, #4]
    f014:	1d19      	adds	r1, r3, #4
    f016:	687b      	ldr	r3, [r7, #4]
    f018:	681b      	ldr	r3, [r3, #0]
    f01a:	009b      	lsls	r3, r3, #2
    f01c:	461a      	mov	r2, r3
    f01e:	f015 fa3a 	bl	24496 <memcpy>
    f022:	68fb      	ldr	r3, [r7, #12]
    f024:	4618      	mov	r0, r3
    f026:	3710      	adds	r7, #16
    f028:	46bd      	mov	sp, r7
    f02a:	bd80      	pop	{r7, pc}

0000f02c <TfLiteIntArrayFree>:
    f02c:	b580      	push	{r7, lr}
    f02e:	b082      	sub	sp, #8
    f030:	af00      	add	r7, sp, #0
    f032:	6078      	str	r0, [r7, #4]
    f034:	6878      	ldr	r0, [r7, #4]
    f036:	f012 f85d 	bl	210f4 <free>
    f03a:	bf00      	nop
    f03c:	3708      	adds	r7, #8
    f03e:	46bd      	mov	sp, r7
    f040:	bd80      	pop	{r7, pc}

0000f042 <TfLiteFloatArrayGetSizeInBytes>:
    f042:	b480      	push	{r7}
    f044:	b083      	sub	sp, #12
    f046:	af00      	add	r7, sp, #0
    f048:	6078      	str	r0, [r7, #4]
    f04a:	687b      	ldr	r3, [r7, #4]
    f04c:	3301      	adds	r3, #1
    f04e:	009b      	lsls	r3, r3, #2
    f050:	4618      	mov	r0, r3
    f052:	370c      	adds	r7, #12
    f054:	46bd      	mov	sp, r7
    f056:	bc80      	pop	{r7}
    f058:	4770      	bx	lr

0000f05a <TfLiteFloatArrayCreate>:
    f05a:	b580      	push	{r7, lr}
    f05c:	b084      	sub	sp, #16
    f05e:	af00      	add	r7, sp, #0
    f060:	6078      	str	r0, [r7, #4]
    f062:	6878      	ldr	r0, [r7, #4]
    f064:	f7ff ffed 	bl	f042 <TfLiteFloatArrayGetSizeInBytes>
    f068:	4603      	mov	r3, r0
    f06a:	4618      	mov	r0, r3
    f06c:	f012 f83a 	bl	210e4 <malloc>
    f070:	4603      	mov	r3, r0
    f072:	60fb      	str	r3, [r7, #12]
    f074:	68fb      	ldr	r3, [r7, #12]
    f076:	687a      	ldr	r2, [r7, #4]
    f078:	601a      	str	r2, [r3, #0]
    f07a:	68fb      	ldr	r3, [r7, #12]
    f07c:	4618      	mov	r0, r3
    f07e:	3710      	adds	r7, #16
    f080:	46bd      	mov	sp, r7
    f082:	bd80      	pop	{r7, pc}

0000f084 <TfLiteFloatArrayFree>:
    f084:	b580      	push	{r7, lr}
    f086:	b082      	sub	sp, #8
    f088:	af00      	add	r7, sp, #0
    f08a:	6078      	str	r0, [r7, #4]
    f08c:	6878      	ldr	r0, [r7, #4]
    f08e:	f012 f831 	bl	210f4 <free>
    f092:	bf00      	nop
    f094:	3708      	adds	r7, #8
    f096:	46bd      	mov	sp, r7
    f098:	bd80      	pop	{r7, pc}

0000f09a <TfLiteTensorDataFree>:
    f09a:	b580      	push	{r7, lr}
    f09c:	b082      	sub	sp, #8
    f09e:	af00      	add	r7, sp, #0
    f0a0:	6078      	str	r0, [r7, #4]
    f0a2:	687b      	ldr	r3, [r7, #4]
    f0a4:	7d1b      	ldrb	r3, [r3, #20]
    f0a6:	2b04      	cmp	r3, #4
    f0a8:	d003      	beq.n	f0b2 <TfLiteTensorDataFree+0x18>
    f0aa:	687b      	ldr	r3, [r7, #4]
    f0ac:	7d1b      	ldrb	r3, [r3, #20]
    f0ae:	2b05      	cmp	r3, #5
    f0b0:	d104      	bne.n	f0bc <TfLiteTensorDataFree+0x22>
    f0b2:	687b      	ldr	r3, [r7, #4]
    f0b4:	685b      	ldr	r3, [r3, #4]
    f0b6:	4618      	mov	r0, r3
    f0b8:	f012 f81c 	bl	210f4 <free>
    f0bc:	687b      	ldr	r3, [r7, #4]
    f0be:	2200      	movs	r2, #0
    f0c0:	605a      	str	r2, [r3, #4]
    f0c2:	bf00      	nop
    f0c4:	3708      	adds	r7, #8
    f0c6:	46bd      	mov	sp, r7
    f0c8:	bd80      	pop	{r7, pc}

0000f0ca <TfLiteQuantizationFree>:
    f0ca:	b580      	push	{r7, lr}
    f0cc:	b084      	sub	sp, #16
    f0ce:	af00      	add	r7, sp, #0
    f0d0:	6078      	str	r0, [r7, #4]
    f0d2:	687b      	ldr	r3, [r7, #4]
    f0d4:	781b      	ldrb	r3, [r3, #0]
    f0d6:	2b01      	cmp	r3, #1
    f0d8:	d11d      	bne.n	f116 <TfLiteQuantizationFree+0x4c>
    f0da:	687b      	ldr	r3, [r7, #4]
    f0dc:	685b      	ldr	r3, [r3, #4]
    f0de:	60fb      	str	r3, [r7, #12]
    f0e0:	68fb      	ldr	r3, [r7, #12]
    f0e2:	681b      	ldr	r3, [r3, #0]
    f0e4:	2b00      	cmp	r3, #0
    f0e6:	d007      	beq.n	f0f8 <TfLiteQuantizationFree+0x2e>
    f0e8:	68fb      	ldr	r3, [r7, #12]
    f0ea:	681b      	ldr	r3, [r3, #0]
    f0ec:	4618      	mov	r0, r3
    f0ee:	f7ff ffc9 	bl	f084 <TfLiteFloatArrayFree>
    f0f2:	68fb      	ldr	r3, [r7, #12]
    f0f4:	2200      	movs	r2, #0
    f0f6:	601a      	str	r2, [r3, #0]
    f0f8:	68fb      	ldr	r3, [r7, #12]
    f0fa:	685b      	ldr	r3, [r3, #4]
    f0fc:	2b00      	cmp	r3, #0
    f0fe:	d007      	beq.n	f110 <TfLiteQuantizationFree+0x46>
    f100:	68fb      	ldr	r3, [r7, #12]
    f102:	685b      	ldr	r3, [r3, #4]
    f104:	4618      	mov	r0, r3
    f106:	f7ff ff91 	bl	f02c <TfLiteIntArrayFree>
    f10a:	68fb      	ldr	r3, [r7, #12]
    f10c:	2200      	movs	r2, #0
    f10e:	605a      	str	r2, [r3, #4]
    f110:	68f8      	ldr	r0, [r7, #12]
    f112:	f011 ffef 	bl	210f4 <free>
    f116:	687b      	ldr	r3, [r7, #4]
    f118:	2200      	movs	r2, #0
    f11a:	605a      	str	r2, [r3, #4]
    f11c:	687b      	ldr	r3, [r7, #4]
    f11e:	2200      	movs	r2, #0
    f120:	701a      	strb	r2, [r3, #0]
    f122:	bf00      	nop
    f124:	3710      	adds	r7, #16
    f126:	46bd      	mov	sp, r7
    f128:	bd80      	pop	{r7, pc}

0000f12a <TfLiteSparsityFree>:
    f12a:	b590      	push	{r4, r7, lr}
    f12c:	b089      	sub	sp, #36	; 0x24
    f12e:	af00      	add	r7, sp, #0
    f130:	6078      	str	r0, [r7, #4]
    f132:	687b      	ldr	r3, [r7, #4]
    f134:	2b00      	cmp	r3, #0
    f136:	d04b      	beq.n	f1d0 <TfLiteSparsityFree+0xa6>
    f138:	687b      	ldr	r3, [r7, #4]
    f13a:	681b      	ldr	r3, [r3, #0]
    f13c:	2b00      	cmp	r3, #0
    f13e:	d007      	beq.n	f150 <TfLiteSparsityFree+0x26>
    f140:	687b      	ldr	r3, [r7, #4]
    f142:	681b      	ldr	r3, [r3, #0]
    f144:	4618      	mov	r0, r3
    f146:	f7ff ff71 	bl	f02c <TfLiteIntArrayFree>
    f14a:	687b      	ldr	r3, [r7, #4]
    f14c:	2200      	movs	r2, #0
    f14e:	601a      	str	r2, [r3, #0]
    f150:	687b      	ldr	r3, [r7, #4]
    f152:	685b      	ldr	r3, [r3, #4]
    f154:	2b00      	cmp	r3, #0
    f156:	d007      	beq.n	f168 <TfLiteSparsityFree+0x3e>
    f158:	687b      	ldr	r3, [r7, #4]
    f15a:	685b      	ldr	r3, [r3, #4]
    f15c:	4618      	mov	r0, r3
    f15e:	f7ff ff65 	bl	f02c <TfLiteIntArrayFree>
    f162:	687b      	ldr	r3, [r7, #4]
    f164:	2200      	movs	r2, #0
    f166:	605a      	str	r2, [r3, #4]
    f168:	687b      	ldr	r3, [r7, #4]
    f16a:	689b      	ldr	r3, [r3, #8]
    f16c:	2b00      	cmp	r3, #0
    f16e:	d02b      	beq.n	f1c8 <TfLiteSparsityFree+0x9e>
    f170:	2300      	movs	r3, #0
    f172:	61fb      	str	r3, [r7, #28]
    f174:	e01b      	b.n	f1ae <TfLiteSparsityFree+0x84>
    f176:	687b      	ldr	r3, [r7, #4]
    f178:	689a      	ldr	r2, [r3, #8]
    f17a:	69fb      	ldr	r3, [r7, #28]
    f17c:	011b      	lsls	r3, r3, #4
    f17e:	4413      	add	r3, r2
    f180:	f107 040c 	add.w	r4, r7, #12
    f184:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    f186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    f18a:	7b3b      	ldrb	r3, [r7, #12]
    f18c:	2b01      	cmp	r3, #1
    f18e:	d10b      	bne.n	f1a8 <TfLiteSparsityFree+0x7e>
    f190:	697b      	ldr	r3, [r7, #20]
    f192:	4618      	mov	r0, r3
    f194:	f7ff ff4a 	bl	f02c <TfLiteIntArrayFree>
    f198:	2300      	movs	r3, #0
    f19a:	617b      	str	r3, [r7, #20]
    f19c:	69bb      	ldr	r3, [r7, #24]
    f19e:	4618      	mov	r0, r3
    f1a0:	f7ff ff44 	bl	f02c <TfLiteIntArrayFree>
    f1a4:	2300      	movs	r3, #0
    f1a6:	61bb      	str	r3, [r7, #24]
    f1a8:	69fb      	ldr	r3, [r7, #28]
    f1aa:	3301      	adds	r3, #1
    f1ac:	61fb      	str	r3, [r7, #28]
    f1ae:	687b      	ldr	r3, [r7, #4]
    f1b0:	68db      	ldr	r3, [r3, #12]
    f1b2:	69fa      	ldr	r2, [r7, #28]
    f1b4:	429a      	cmp	r2, r3
    f1b6:	dbde      	blt.n	f176 <TfLiteSparsityFree+0x4c>
    f1b8:	687b      	ldr	r3, [r7, #4]
    f1ba:	689b      	ldr	r3, [r3, #8]
    f1bc:	4618      	mov	r0, r3
    f1be:	f011 ff99 	bl	210f4 <free>
    f1c2:	687b      	ldr	r3, [r7, #4]
    f1c4:	2200      	movs	r2, #0
    f1c6:	609a      	str	r2, [r3, #8]
    f1c8:	6878      	ldr	r0, [r7, #4]
    f1ca:	f011 ff93 	bl	210f4 <free>
    f1ce:	e000      	b.n	f1d2 <TfLiteSparsityFree+0xa8>
    f1d0:	bf00      	nop
    f1d2:	3724      	adds	r7, #36	; 0x24
    f1d4:	46bd      	mov	sp, r7
    f1d6:	bd90      	pop	{r4, r7, pc}

0000f1d8 <TfLiteTensorFree>:
    f1d8:	b580      	push	{r7, lr}
    f1da:	b082      	sub	sp, #8
    f1dc:	af00      	add	r7, sp, #0
    f1de:	6078      	str	r0, [r7, #4]
    f1e0:	6878      	ldr	r0, [r7, #4]
    f1e2:	f7ff ff5a 	bl	f09a <TfLiteTensorDataFree>
    f1e6:	687b      	ldr	r3, [r7, #4]
    f1e8:	689b      	ldr	r3, [r3, #8]
    f1ea:	2b00      	cmp	r3, #0
    f1ec:	d004      	beq.n	f1f8 <TfLiteTensorFree+0x20>
    f1ee:	687b      	ldr	r3, [r7, #4]
    f1f0:	689b      	ldr	r3, [r3, #8]
    f1f2:	4618      	mov	r0, r3
    f1f4:	f7ff ff1a 	bl	f02c <TfLiteIntArrayFree>
    f1f8:	687b      	ldr	r3, [r7, #4]
    f1fa:	2200      	movs	r2, #0
    f1fc:	609a      	str	r2, [r3, #8]
    f1fe:	687b      	ldr	r3, [r7, #4]
    f200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    f202:	2b00      	cmp	r3, #0
    f204:	d004      	beq.n	f210 <TfLiteTensorFree+0x38>
    f206:	687b      	ldr	r3, [r7, #4]
    f208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    f20a:	4618      	mov	r0, r3
    f20c:	f7ff ff0e 	bl	f02c <TfLiteIntArrayFree>
    f210:	687b      	ldr	r3, [r7, #4]
    f212:	2200      	movs	r2, #0
    f214:	63da      	str	r2, [r3, #60]	; 0x3c
    f216:	687b      	ldr	r3, [r7, #4]
    f218:	3330      	adds	r3, #48	; 0x30
    f21a:	4618      	mov	r0, r3
    f21c:	f7ff ff55 	bl	f0ca <TfLiteQuantizationFree>
    f220:	687b      	ldr	r3, [r7, #4]
    f222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    f224:	4618      	mov	r0, r3
    f226:	f7ff ff80 	bl	f12a <TfLiteSparsityFree>
    f22a:	687b      	ldr	r3, [r7, #4]
    f22c:	2200      	movs	r2, #0
    f22e:	639a      	str	r2, [r3, #56]	; 0x38
    f230:	bf00      	nop
    f232:	3708      	adds	r7, #8
    f234:	46bd      	mov	sp, r7
    f236:	bd80      	pop	{r7, pc}

0000f238 <TfLiteTensorReset>:
    f238:	b082      	sub	sp, #8
    f23a:	b580      	push	{r7, lr}
    f23c:	b084      	sub	sp, #16
    f23e:	af00      	add	r7, sp, #0
    f240:	60b9      	str	r1, [r7, #8]
    f242:	607a      	str	r2, [r7, #4]
    f244:	61fb      	str	r3, [r7, #28]
    f246:	4603      	mov	r3, r0
    f248:	73fb      	strb	r3, [r7, #15]
    f24a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    f24c:	f7ff ffc4 	bl	f1d8 <TfLiteTensorFree>
    f250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f252:	7bfa      	ldrb	r2, [r7, #15]
    f254:	701a      	strb	r2, [r3, #0]
    f256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f258:	68ba      	ldr	r2, [r7, #8]
    f25a:	621a      	str	r2, [r3, #32]
    f25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f25e:	687a      	ldr	r2, [r7, #4]
    f260:	609a      	str	r2, [r3, #8]
    f262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f264:	330c      	adds	r3, #12
    f266:	f107 021c 	add.w	r2, r7, #28
    f26a:	e892 0003 	ldmia.w	r2, {r0, r1}
    f26e:	e883 0003 	stmia.w	r3, {r0, r1}
    f272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f276:	605a      	str	r2, [r3, #4]
    f278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f27a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f27c:	619a      	str	r2, [r3, #24]
    f27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f280:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    f284:	751a      	strb	r2, [r3, #20]
    f286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    f28a:	61da      	str	r2, [r3, #28]
    f28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f28e:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
    f292:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    f296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f298:	2200      	movs	r2, #0
    f29a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    f29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f2a0:	2200      	movs	r2, #0
    f2a2:	635a      	str	r2, [r3, #52]	; 0x34
    f2a4:	bf00      	nop
    f2a6:	3710      	adds	r7, #16
    f2a8:	46bd      	mov	sp, r7
    f2aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    f2ae:	b002      	add	sp, #8
    f2b0:	4770      	bx	lr

0000f2b2 <TfLiteTensorRealloc>:
    f2b2:	b580      	push	{r7, lr}
    f2b4:	b082      	sub	sp, #8
    f2b6:	af00      	add	r7, sp, #0
    f2b8:	6078      	str	r0, [r7, #4]
    f2ba:	6039      	str	r1, [r7, #0]
    f2bc:	683b      	ldr	r3, [r7, #0]
    f2be:	7d1b      	ldrb	r3, [r3, #20]
    f2c0:	2b04      	cmp	r3, #4
    f2c2:	d003      	beq.n	f2cc <TfLiteTensorRealloc+0x1a>
    f2c4:	683b      	ldr	r3, [r7, #0]
    f2c6:	7d1b      	ldrb	r3, [r3, #20]
    f2c8:	2b05      	cmp	r3, #5
    f2ca:	d11d      	bne.n	f308 <TfLiteTensorRealloc+0x56>
    f2cc:	683b      	ldr	r3, [r7, #0]
    f2ce:	685b      	ldr	r3, [r3, #4]
    f2d0:	2b00      	cmp	r3, #0
    f2d2:	d107      	bne.n	f2e4 <TfLiteTensorRealloc+0x32>
    f2d4:	6878      	ldr	r0, [r7, #4]
    f2d6:	f011 ff05 	bl	210e4 <malloc>
    f2da:	4603      	mov	r3, r0
    f2dc:	461a      	mov	r2, r3
    f2de:	683b      	ldr	r3, [r7, #0]
    f2e0:	605a      	str	r2, [r3, #4]
    f2e2:	e00d      	b.n	f300 <TfLiteTensorRealloc+0x4e>
    f2e4:	683b      	ldr	r3, [r7, #0]
    f2e6:	699b      	ldr	r3, [r3, #24]
    f2e8:	687a      	ldr	r2, [r7, #4]
    f2ea:	429a      	cmp	r2, r3
    f2ec:	d908      	bls.n	f300 <TfLiteTensorRealloc+0x4e>
    f2ee:	683b      	ldr	r3, [r7, #0]
    f2f0:	685b      	ldr	r3, [r3, #4]
    f2f2:	6879      	ldr	r1, [r7, #4]
    f2f4:	4618      	mov	r0, r3
    f2f6:	f012 fa21 	bl	2173c <realloc>
    f2fa:	4602      	mov	r2, r0
    f2fc:	683b      	ldr	r3, [r7, #0]
    f2fe:	605a      	str	r2, [r3, #4]
    f300:	683b      	ldr	r3, [r7, #0]
    f302:	687a      	ldr	r2, [r7, #4]
    f304:	619a      	str	r2, [r3, #24]
    f306:	e000      	b.n	f30a <TfLiteTensorRealloc+0x58>
    f308:	bf00      	nop
    f30a:	3708      	adds	r7, #8
    f30c:	46bd      	mov	sp, r7
    f30e:	bd80      	pop	{r7, pc}

0000f310 <TfLiteTypeGetName>:
    f310:	b480      	push	{r7}
    f312:	b083      	sub	sp, #12
    f314:	af00      	add	r7, sp, #0
    f316:	4603      	mov	r3, r0
    f318:	71fb      	strb	r3, [r7, #7]
    f31a:	79fb      	ldrb	r3, [r7, #7]
    f31c:	2b0b      	cmp	r3, #11
    f31e:	d833      	bhi.n	f388 <TfLiteTypeGetName+0x78>
    f320:	a201      	add	r2, pc, #4	; (adr r2, f328 <TfLiteTypeGetName+0x18>)
    f322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    f326:	bf00      	nop
    f328:	0000f359 	.word	0x0000f359
    f32c:	0000f35d 	.word	0x0000f35d
    f330:	0000f365 	.word	0x0000f365
    f334:	0000f369 	.word	0x0000f369
    f338:	0000f371 	.word	0x0000f371
    f33c:	0000f37d 	.word	0x0000f37d
    f340:	0000f375 	.word	0x0000f375
    f344:	0000f361 	.word	0x0000f361
    f348:	0000f379 	.word	0x0000f379
    f34c:	0000f36d 	.word	0x0000f36d
    f350:	0000f381 	.word	0x0000f381
    f354:	0000f385 	.word	0x0000f385
    f358:	4b0e      	ldr	r3, [pc, #56]	; (f394 <TfLiteTypeGetName+0x84>)
    f35a:	e016      	b.n	f38a <TfLiteTypeGetName+0x7a>
    f35c:	4b0e      	ldr	r3, [pc, #56]	; (f398 <TfLiteTypeGetName+0x88>)
    f35e:	e014      	b.n	f38a <TfLiteTypeGetName+0x7a>
    f360:	4b0e      	ldr	r3, [pc, #56]	; (f39c <TfLiteTypeGetName+0x8c>)
    f362:	e012      	b.n	f38a <TfLiteTypeGetName+0x7a>
    f364:	4b0e      	ldr	r3, [pc, #56]	; (f3a0 <TfLiteTypeGetName+0x90>)
    f366:	e010      	b.n	f38a <TfLiteTypeGetName+0x7a>
    f368:	4b0e      	ldr	r3, [pc, #56]	; (f3a4 <TfLiteTypeGetName+0x94>)
    f36a:	e00e      	b.n	f38a <TfLiteTypeGetName+0x7a>
    f36c:	4b0e      	ldr	r3, [pc, #56]	; (f3a8 <TfLiteTypeGetName+0x98>)
    f36e:	e00c      	b.n	f38a <TfLiteTypeGetName+0x7a>
    f370:	4b0e      	ldr	r3, [pc, #56]	; (f3ac <TfLiteTypeGetName+0x9c>)
    f372:	e00a      	b.n	f38a <TfLiteTypeGetName+0x7a>
    f374:	4b0e      	ldr	r3, [pc, #56]	; (f3b0 <TfLiteTypeGetName+0xa0>)
    f376:	e008      	b.n	f38a <TfLiteTypeGetName+0x7a>
    f378:	4b0e      	ldr	r3, [pc, #56]	; (f3b4 <TfLiteTypeGetName+0xa4>)
    f37a:	e006      	b.n	f38a <TfLiteTypeGetName+0x7a>
    f37c:	4b0e      	ldr	r3, [pc, #56]	; (f3b8 <TfLiteTypeGetName+0xa8>)
    f37e:	e004      	b.n	f38a <TfLiteTypeGetName+0x7a>
    f380:	4b0e      	ldr	r3, [pc, #56]	; (f3bc <TfLiteTypeGetName+0xac>)
    f382:	e002      	b.n	f38a <TfLiteTypeGetName+0x7a>
    f384:	4b0e      	ldr	r3, [pc, #56]	; (f3c0 <TfLiteTypeGetName+0xb0>)
    f386:	e000      	b.n	f38a <TfLiteTypeGetName+0x7a>
    f388:	4b0e      	ldr	r3, [pc, #56]	; (f3c4 <TfLiteTypeGetName+0xb4>)
    f38a:	4618      	mov	r0, r3
    f38c:	370c      	adds	r7, #12
    f38e:	46bd      	mov	sp, r7
    f390:	bc80      	pop	{r7}
    f392:	4770      	bx	lr
    f394:	00024ef8 	.word	0x00024ef8
    f398:	00024f00 	.word	0x00024f00
    f39c:	00024f08 	.word	0x00024f08
    f3a0:	00024f10 	.word	0x00024f10
    f3a4:	00024f18 	.word	0x00024f18
    f3a8:	00024f20 	.word	0x00024f20
    f3ac:	00024f28 	.word	0x00024f28
    f3b0:	00024f30 	.word	0x00024f30
    f3b4:	00024f38 	.word	0x00024f38
    f3b8:	00024f44 	.word	0x00024f44
    f3bc:	00024f4c 	.word	0x00024f4c
    f3c0:	00024f54 	.word	0x00024f54
    f3c4:	00024f5c 	.word	0x00024f5c

0000f3c8 <TfLiteDelegateCreate>:
    f3c8:	b5b0      	push	{r4, r5, r7, lr}
    f3ca:	b08a      	sub	sp, #40	; 0x28
    f3cc:	af00      	add	r7, sp, #0
    f3ce:	6078      	str	r0, [r7, #4]
    f3d0:	f107 0308 	add.w	r3, r7, #8
    f3d4:	2220      	movs	r2, #32
    f3d6:	2100      	movs	r1, #0
    f3d8:	4618      	mov	r0, r3
    f3da:	f015 f883 	bl	244e4 <memset>
    f3de:	687b      	ldr	r3, [r7, #4]
    f3e0:	461d      	mov	r5, r3
    f3e2:	f107 0408 	add.w	r4, r7, #8
    f3e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    f3e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    f3ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    f3ee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    f3f2:	6878      	ldr	r0, [r7, #4]
    f3f4:	3728      	adds	r7, #40	; 0x28
    f3f6:	46bd      	mov	sp, r7
    f3f8:	bdb0      	pop	{r4, r5, r7, pc}
    f3fa:	bf00      	nop

0000f3fc <CountLeadingZeros32>:
    f3fc:	b480      	push	{r7}
    f3fe:	b083      	sub	sp, #12
    f400:	af00      	add	r7, sp, #0
    f402:	6078      	str	r0, [r7, #4]
    f404:	687b      	ldr	r3, [r7, #4]
    f406:	2b00      	cmp	r3, #0
    f408:	d101      	bne.n	f40e <CountLeadingZeros32+0x12>
    f40a:	2320      	movs	r3, #32
    f40c:	e002      	b.n	f414 <CountLeadingZeros32+0x18>
    f40e:	687b      	ldr	r3, [r7, #4]
    f410:	fab3 f383 	clz	r3, r3
    f414:	4618      	mov	r0, r3
    f416:	370c      	adds	r7, #12
    f418:	46bd      	mov	sp, r7
    f41a:	bc80      	pop	{r7}
    f41c:	4770      	bx	lr

0000f41e <MostSignificantBit32>:
    f41e:	b580      	push	{r7, lr}
    f420:	b082      	sub	sp, #8
    f422:	af00      	add	r7, sp, #0
    f424:	6078      	str	r0, [r7, #4]
    f426:	6878      	ldr	r0, [r7, #4]
    f428:	f7ff ffe8 	bl	f3fc <CountLeadingZeros32>
    f42c:	4603      	mov	r3, r0
    f42e:	f1c3 0320 	rsb	r3, r3, #32
    f432:	4618      	mov	r0, r3
    f434:	3708      	adds	r7, #8
    f436:	46bd      	mov	sp, r7
    f438:	bd80      	pop	{r7, pc}

0000f43a <FrontendFillConfigWithDefaults>:
    f43a:	b580      	push	{r7, lr}
    f43c:	b082      	sub	sp, #8
    f43e:	af00      	add	r7, sp, #0
    f440:	6078      	str	r0, [r7, #4]
    f442:	687b      	ldr	r3, [r7, #4]
    f444:	4618      	mov	r0, r3
    f446:	f7fc fefb 	bl	c240 <WindowFillConfigWithDefaults>
    f44a:	687b      	ldr	r3, [r7, #4]
    f44c:	3308      	adds	r3, #8
    f44e:	4618      	mov	r0, r3
    f450:	f7fd f80e 	bl	c470 <FilterbankFillConfigWithDefaults>
    f454:	687b      	ldr	r3, [r7, #4]
    f456:	3318      	adds	r3, #24
    f458:	4618      	mov	r0, r3
    f45a:	f000 f9fb 	bl	f854 <NoiseReductionFillConfigWithDefaults>
    f45e:	687b      	ldr	r3, [r7, #4]
    f460:	3328      	adds	r3, #40	; 0x28
    f462:	4618      	mov	r0, r3
    f464:	f000 fa7c 	bl	f960 <PcanGainControlFillConfigWithDefaults>
    f468:	687b      	ldr	r3, [r7, #4]
    f46a:	3338      	adds	r3, #56	; 0x38
    f46c:	4618      	mov	r0, r3
    f46e:	f006 f801 	bl	15474 <LogScaleFillConfigWithDefaults>
    f472:	bf00      	nop
    f474:	3708      	adds	r7, #8
    f476:	46bd      	mov	sp, r7
    f478:	bd80      	pop	{r7, pc}

0000f47a <FrontendPopulateState>:
    f47a:	b5b0      	push	{r4, r5, r7, lr}
    f47c:	b088      	sub	sp, #32
    f47e:	af02      	add	r7, sp, #8
    f480:	60f8      	str	r0, [r7, #12]
    f482:	60b9      	str	r1, [r7, #8]
    f484:	607a      	str	r2, [r7, #4]
    f486:	2288      	movs	r2, #136	; 0x88
    f488:	2100      	movs	r1, #0
    f48a:	68b8      	ldr	r0, [r7, #8]
    f48c:	f015 f82a 	bl	244e4 <memset>
    f490:	68fb      	ldr	r3, [r7, #12]
    f492:	68b9      	ldr	r1, [r7, #8]
    f494:	687a      	ldr	r2, [r7, #4]
    f496:	4618      	mov	r0, r3
    f498:	f7fc fee1 	bl	c25e <WindowPopulateState>
    f49c:	4603      	mov	r3, r0
    f49e:	2b00      	cmp	r3, #0
    f4a0:	d109      	bne.n	f4b6 <FrontendPopulateState+0x3c>
    f4a2:	4b4f      	ldr	r3, [pc, #316]	; (f5e0 <FrontendPopulateState+0x166>)
    f4a4:	681b      	ldr	r3, [r3, #0]
    f4a6:	68db      	ldr	r3, [r3, #12]
    f4a8:	2220      	movs	r2, #32
    f4aa:	2101      	movs	r1, #1
    f4ac:	484d      	ldr	r0, [pc, #308]	; (f5e4 <FrontendPopulateState+0x16a>)
    f4ae:	f011 fe0b 	bl	210c8 <fwrite>
    f4b2:	2300      	movs	r3, #0
    f4b4:	e08f      	b.n	f5d6 <FrontendPopulateState+0x15c>
    f4b6:	68bb      	ldr	r3, [r7, #8]
    f4b8:	f103 021c 	add.w	r2, r3, #28
    f4bc:	68bb      	ldr	r3, [r7, #8]
    f4be:	681b      	ldr	r3, [r3, #0]
    f4c0:	4619      	mov	r1, r3
    f4c2:	4610      	mov	r0, r2
    f4c4:	f00e fb34 	bl	1db30 <FftPopulateState>
    f4c8:	4603      	mov	r3, r0
    f4ca:	2b00      	cmp	r3, #0
    f4cc:	d109      	bne.n	f4e2 <FrontendPopulateState+0x68>
    f4ce:	4b44      	ldr	r3, [pc, #272]	; (f5e0 <FrontendPopulateState+0x166>)
    f4d0:	681b      	ldr	r3, [r3, #0]
    f4d2:	68db      	ldr	r3, [r3, #12]
    f4d4:	221d      	movs	r2, #29
    f4d6:	2101      	movs	r1, #1
    f4d8:	4843      	ldr	r0, [pc, #268]	; (f5e8 <FrontendPopulateState+0x16e>)
    f4da:	f011 fdf5 	bl	210c8 <fwrite>
    f4de:	2300      	movs	r3, #0
    f4e0:	e079      	b.n	f5d6 <FrontendPopulateState+0x15c>
    f4e2:	68bb      	ldr	r3, [r7, #8]
    f4e4:	331c      	adds	r3, #28
    f4e6:	4618      	mov	r0, r3
    f4e8:	f014 fabb 	bl	23a62 <FftInit>
    f4ec:	68fb      	ldr	r3, [r7, #12]
    f4ee:	f103 0008 	add.w	r0, r3, #8
    f4f2:	68bb      	ldr	r3, [r7, #8]
    f4f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
    f4f8:	68bb      	ldr	r3, [r7, #8]
    f4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f4fc:	085b      	lsrs	r3, r3, #1
    f4fe:	3301      	adds	r3, #1
    f500:	687a      	ldr	r2, [r7, #4]
    f502:	f7fd f8b7 	bl	c674 <FilterbankPopulateState>
    f506:	4603      	mov	r3, r0
    f508:	2b00      	cmp	r3, #0
    f50a:	d109      	bne.n	f520 <FrontendPopulateState+0xa6>
    f50c:	4b34      	ldr	r3, [pc, #208]	; (f5e0 <FrontendPopulateState+0x166>)
    f50e:	681b      	ldr	r3, [r3, #0]
    f510:	68db      	ldr	r3, [r3, #12]
    f512:	2224      	movs	r2, #36	; 0x24
    f514:	2101      	movs	r1, #1
    f516:	4835      	ldr	r0, [pc, #212]	; (f5ec <FrontendPopulateState+0x172>)
    f518:	f011 fdd6 	bl	210c8 <fwrite>
    f51c:	2300      	movs	r3, #0
    f51e:	e05a      	b.n	f5d6 <FrontendPopulateState+0x15c>
    f520:	68fb      	ldr	r3, [r7, #12]
    f522:	f103 0018 	add.w	r0, r3, #24
    f526:	68bb      	ldr	r3, [r7, #8]
    f528:	f103 0158 	add.w	r1, r3, #88	; 0x58
    f52c:	68bb      	ldr	r3, [r7, #8]
    f52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    f530:	461a      	mov	r2, r3
    f532:	f000 f9ab 	bl	f88c <NoiseReductionPopulateState>
    f536:	4603      	mov	r3, r0
    f538:	2b00      	cmp	r3, #0
    f53a:	d109      	bne.n	f550 <FrontendPopulateState+0xd6>
    f53c:	4b28      	ldr	r3, [pc, #160]	; (f5e0 <FrontendPopulateState+0x166>)
    f53e:	681b      	ldr	r3, [r3, #0]
    f540:	68db      	ldr	r3, [r3, #12]
    f542:	2229      	movs	r2, #41	; 0x29
    f544:	2101      	movs	r1, #1
    f546:	482a      	ldr	r0, [pc, #168]	; (f5f0 <FrontendPopulateState+0x176>)
    f548:	f011 fdbe 	bl	210c8 <fwrite>
    f54c:	2300      	movs	r3, #0
    f54e:	e042      	b.n	f5d6 <FrontendPopulateState+0x15c>
    f550:	68bb      	ldr	r3, [r7, #8]
    f552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f554:	4618      	mov	r0, r3
    f556:	f7ff ff62 	bl	f41e <MostSignificantBit32>
    f55a:	4603      	mov	r3, r0
    f55c:	3b07      	subs	r3, #7
    f55e:	617b      	str	r3, [r7, #20]
    f560:	68fb      	ldr	r3, [r7, #12]
    f562:	f103 0028 	add.w	r0, r3, #40	; 0x28
    f566:	68bb      	ldr	r3, [r7, #8]
    f568:	f103 016c 	add.w	r1, r3, #108	; 0x6c
    f56c:	68bb      	ldr	r3, [r7, #8]
    f56e:	6e9c      	ldr	r4, [r3, #104]	; 0x68
    f570:	68bb      	ldr	r3, [r7, #8]
    f572:	6b5d      	ldr	r5, [r3, #52]	; 0x34
    f574:	68bb      	ldr	r3, [r7, #8]
    f576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    f578:	b29b      	uxth	r3, r3
    f57a:	697a      	ldr	r2, [r7, #20]
    f57c:	9201      	str	r2, [sp, #4]
    f57e:	9300      	str	r3, [sp, #0]
    f580:	462b      	mov	r3, r5
    f582:	4622      	mov	r2, r4
    f584:	f000 fa5a 	bl	fa3c <PcanGainControlPopulateState>
    f588:	4603      	mov	r3, r0
    f58a:	2b00      	cmp	r3, #0
    f58c:	d109      	bne.n	f5a2 <FrontendPopulateState+0x128>
    f58e:	4b14      	ldr	r3, [pc, #80]	; (f5e0 <FrontendPopulateState+0x166>)
    f590:	681b      	ldr	r3, [r3, #0]
    f592:	68db      	ldr	r3, [r3, #12]
    f594:	222b      	movs	r2, #43	; 0x2b
    f596:	2101      	movs	r1, #1
    f598:	4816      	ldr	r0, [pc, #88]	; (f5f4 <FrontendPopulateState+0x17a>)
    f59a:	f011 fd95 	bl	210c8 <fwrite>
    f59e:	2300      	movs	r3, #0
    f5a0:	e019      	b.n	f5d6 <FrontendPopulateState+0x15c>
    f5a2:	68fb      	ldr	r3, [r7, #12]
    f5a4:	f103 0238 	add.w	r2, r3, #56	; 0x38
    f5a8:	68bb      	ldr	r3, [r7, #8]
    f5aa:	3380      	adds	r3, #128	; 0x80
    f5ac:	4619      	mov	r1, r3
    f5ae:	4610      	mov	r0, r2
    f5b0:	f005 ff6f 	bl	15492 <LogScalePopulateState>
    f5b4:	4603      	mov	r3, r0
    f5b6:	2b00      	cmp	r3, #0
    f5b8:	d109      	bne.n	f5ce <FrontendPopulateState+0x154>
    f5ba:	4b09      	ldr	r3, [pc, #36]	; (f5e0 <FrontendPopulateState+0x166>)
    f5bc:	681b      	ldr	r3, [r3, #0]
    f5be:	68db      	ldr	r3, [r3, #12]
    f5c0:	2223      	movs	r2, #35	; 0x23
    f5c2:	2101      	movs	r1, #1
    f5c4:	480c      	ldr	r0, [pc, #48]	; (f5f8 <FrontendPopulateState+0x17e>)
    f5c6:	f011 fd7f 	bl	210c8 <fwrite>
    f5ca:	2300      	movs	r3, #0
    f5cc:	e003      	b.n	f5d6 <FrontendPopulateState+0x15c>
    f5ce:	68b8      	ldr	r0, [r7, #8]
    f5d0:	f005 ff35 	bl	1543e <FrontendReset>
    f5d4:	2301      	movs	r3, #1
    f5d6:	4618      	mov	r0, r3
    f5d8:	3718      	adds	r7, #24
    f5da:	46bd      	mov	sp, r7
    f5dc:	bdb0      	pop	{r4, r5, r7, pc}
    f5de:	bf00      	nop
    f5e0:	20020064 	.word	0x20020064
    f5e4:	00024f6c 	.word	0x00024f6c
    f5e8:	00024f90 	.word	0x00024f90
    f5ec:	00024fb0 	.word	0x00024fb0
    f5f0:	00024fd8 	.word	0x00024fd8
    f5f4:	00025004 	.word	0x00025004
    f5f8:	00025030 	.word	0x00025030

0000f5fc <FrontendFreeStateContents>:
    f5fc:	b580      	push	{r7, lr}
    f5fe:	b082      	sub	sp, #8
    f600:	af00      	add	r7, sp, #0
    f602:	6078      	str	r0, [r7, #4]
    f604:	687b      	ldr	r3, [r7, #4]
    f606:	4618      	mov	r0, r3
    f608:	f7fc ff1a 	bl	c440 <WindowFreeStateContents>
    f60c:	687b      	ldr	r3, [r7, #4]
    f60e:	331c      	adds	r3, #28
    f610:	4618      	mov	r0, r3
    f612:	f014 fa39 	bl	23a88 <FftFreeStateContents>
    f616:	687b      	ldr	r3, [r7, #4]
    f618:	3334      	adds	r3, #52	; 0x34
    f61a:	4618      	mov	r0, r3
    f61c:	f7fd fa82 	bl	cb24 <FilterbankFreeStateContents>
    f620:	687b      	ldr	r3, [r7, #4]
    f622:	3358      	adds	r3, #88	; 0x58
    f624:	4618      	mov	r0, r3
    f626:	f000 f98d 	bl	f944 <NoiseReductionFreeStateContents>
    f62a:	687b      	ldr	r3, [r7, #4]
    f62c:	336c      	adds	r3, #108	; 0x6c
    f62e:	4618      	mov	r0, r3
    f630:	f000 fac6 	bl	fbc0 <PcanGainControlFreeStateContents>
    f634:	bf00      	nop
    f636:	3708      	adds	r7, #8
    f638:	46bd      	mov	sp, r7
    f63a:	bd80      	pop	{r7, pc}

0000f63c <CountLeadingZeros32>:
    f63c:	b480      	push	{r7}
    f63e:	b083      	sub	sp, #12
    f640:	af00      	add	r7, sp, #0
    f642:	6078      	str	r0, [r7, #4]
    f644:	687b      	ldr	r3, [r7, #4]
    f646:	2b00      	cmp	r3, #0
    f648:	d101      	bne.n	f64e <CountLeadingZeros32+0x12>
    f64a:	2320      	movs	r3, #32
    f64c:	e002      	b.n	f654 <CountLeadingZeros32+0x18>
    f64e:	687b      	ldr	r3, [r7, #4]
    f650:	fab3 f383 	clz	r3, r3
    f654:	4618      	mov	r0, r3
    f656:	370c      	adds	r7, #12
    f658:	46bd      	mov	sp, r7
    f65a:	bc80      	pop	{r7}
    f65c:	4770      	bx	lr

0000f65e <MostSignificantBit32>:
    f65e:	b580      	push	{r7, lr}
    f660:	b082      	sub	sp, #8
    f662:	af00      	add	r7, sp, #0
    f664:	6078      	str	r0, [r7, #4]
    f666:	6878      	ldr	r0, [r7, #4]
    f668:	f7ff ffe8 	bl	f63c <CountLeadingZeros32>
    f66c:	4603      	mov	r3, r0
    f66e:	f1c3 0320 	rsb	r3, r3, #32
    f672:	4618      	mov	r0, r3
    f674:	3708      	adds	r7, #8
    f676:	46bd      	mov	sp, r7
    f678:	bd80      	pop	{r7, pc}

0000f67a <Log2FractionPart>:
    f67a:	b4f0      	push	{r4, r5, r6, r7}
    f67c:	b08a      	sub	sp, #40	; 0x28
    f67e:	af00      	add	r7, sp, #0
    f680:	6078      	str	r0, [r7, #4]
    f682:	6039      	str	r1, [r7, #0]
    f684:	f04f 0001 	mov.w	r0, #1
    f688:	f04f 0100 	mov.w	r1, #0
    f68c:	683c      	ldr	r4, [r7, #0]
    f68e:	f1a4 0620 	sub.w	r6, r4, #32
    f692:	f1c4 0520 	rsb	r5, r4, #32
    f696:	fa01 f304 	lsl.w	r3, r1, r4
    f69a:	fa00 f606 	lsl.w	r6, r0, r6
    f69e:	4333      	orrs	r3, r6
    f6a0:	fa20 f505 	lsr.w	r5, r0, r5
    f6a4:	432b      	orrs	r3, r5
    f6a6:	fa00 f204 	lsl.w	r2, r0, r4
    f6aa:	687b      	ldr	r3, [r7, #4]
    f6ac:	1a9b      	subs	r3, r3, r2
    f6ae:	627b      	str	r3, [r7, #36]	; 0x24
    f6b0:	683b      	ldr	r3, [r7, #0]
    f6b2:	2b0f      	cmp	r3, #15
    f6b4:	d807      	bhi.n	f6c6 <Log2FractionPart+0x4c>
    f6b6:	683b      	ldr	r3, [r7, #0]
    f6b8:	f1c3 0310 	rsb	r3, r3, #16
    f6bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f6be:	fa02 f303 	lsl.w	r3, r2, r3
    f6c2:	627b      	str	r3, [r7, #36]	; 0x24
    f6c4:	e005      	b.n	f6d2 <Log2FractionPart+0x58>
    f6c6:	683b      	ldr	r3, [r7, #0]
    f6c8:	3b10      	subs	r3, #16
    f6ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f6cc:	fa42 f303 	asr.w	r3, r2, r3
    f6d0:	627b      	str	r3, [r7, #36]	; 0x24
    f6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f6d4:	125b      	asrs	r3, r3, #9
    f6d6:	623b      	str	r3, [r7, #32]
    f6d8:	f44f 7300 	mov.w	r3, #512	; 0x200
    f6dc:	61fb      	str	r3, [r7, #28]
    f6de:	4a12      	ldr	r2, [pc, #72]	; (f728 <Log2FractionPart+0xae>)
    f6e0:	6a3b      	ldr	r3, [r7, #32]
    f6e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    f6e6:	61bb      	str	r3, [r7, #24]
    f6e8:	6a3b      	ldr	r3, [r7, #32]
    f6ea:	3301      	adds	r3, #1
    f6ec:	4a0e      	ldr	r2, [pc, #56]	; (f728 <Log2FractionPart+0xae>)
    f6ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    f6f2:	617b      	str	r3, [r7, #20]
    f6f4:	69fb      	ldr	r3, [r7, #28]
    f6f6:	6a3a      	ldr	r2, [r7, #32]
    f6f8:	fb02 f303 	mul.w	r3, r2, r3
    f6fc:	613b      	str	r3, [r7, #16]
    f6fe:	697a      	ldr	r2, [r7, #20]
    f700:	69bb      	ldr	r3, [r7, #24]
    f702:	1ad3      	subs	r3, r2, r3
    f704:	6a79      	ldr	r1, [r7, #36]	; 0x24
    f706:	693a      	ldr	r2, [r7, #16]
    f708:	1a8a      	subs	r2, r1, r2
    f70a:	fb02 f303 	mul.w	r3, r2, r3
    f70e:	141b      	asrs	r3, r3, #16
    f710:	60fb      	str	r3, [r7, #12]
    f712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    f714:	69bb      	ldr	r3, [r7, #24]
    f716:	441a      	add	r2, r3
    f718:	68fb      	ldr	r3, [r7, #12]
    f71a:	4413      	add	r3, r2
    f71c:	4618      	mov	r0, r3
    f71e:	3728      	adds	r7, #40	; 0x28
    f720:	46bd      	mov	sp, r7
    f722:	bcf0      	pop	{r4, r5, r6, r7}
    f724:	4770      	bx	lr
    f726:	bf00      	nop
    f728:	00025238 	.word	0x00025238

0000f72c <Log>:
    f72c:	b5b0      	push	{r4, r5, r7, lr}
    f72e:	b088      	sub	sp, #32
    f730:	af00      	add	r7, sp, #0
    f732:	6078      	str	r0, [r7, #4]
    f734:	6039      	str	r1, [r7, #0]
    f736:	6878      	ldr	r0, [r7, #4]
    f738:	f7ff ff91 	bl	f65e <MostSignificantBit32>
    f73c:	4603      	mov	r3, r0
    f73e:	3b01      	subs	r3, #1
    f740:	61fb      	str	r3, [r7, #28]
    f742:	69f9      	ldr	r1, [r7, #28]
    f744:	6878      	ldr	r0, [r7, #4]
    f746:	f7ff ff98 	bl	f67a <Log2FractionPart>
    f74a:	61b8      	str	r0, [r7, #24]
    f74c:	69fb      	ldr	r3, [r7, #28]
    f74e:	041b      	lsls	r3, r3, #16
    f750:	69ba      	ldr	r2, [r7, #24]
    f752:	4413      	add	r3, r2
    f754:	617b      	str	r3, [r7, #20]
    f756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    f75a:	613b      	str	r3, [r7, #16]
    f75c:	697b      	ldr	r3, [r7, #20]
    f75e:	461a      	mov	r2, r3
    f760:	f04f 0300 	mov.w	r3, #0
    f764:	f24b 1172 	movw	r1, #45426	; 0xb172
    f768:	fb01 f003 	mul.w	r0, r1, r3
    f76c:	2100      	movs	r1, #0
    f76e:	fb01 f102 	mul.w	r1, r1, r2
    f772:	4401      	add	r1, r0
    f774:	f24b 1072 	movw	r0, #45426	; 0xb172
    f778:	fba2 2300 	umull	r2, r3, r2, r0
    f77c:	4419      	add	r1, r3
    f77e:	460b      	mov	r3, r1
    f780:	6939      	ldr	r1, [r7, #16]
    f782:	4608      	mov	r0, r1
    f784:	f04f 0100 	mov.w	r1, #0
    f788:	1814      	adds	r4, r2, r0
    f78a:	eb43 0501 	adc.w	r5, r3, r1
    f78e:	f04f 0200 	mov.w	r2, #0
    f792:	f04f 0300 	mov.w	r3, #0
    f796:	0c22      	lsrs	r2, r4, #16
    f798:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    f79c:	0c2b      	lsrs	r3, r5, #16
    f79e:	4613      	mov	r3, r2
    f7a0:	60fb      	str	r3, [r7, #12]
    f7a2:	68fa      	ldr	r2, [r7, #12]
    f7a4:	683b      	ldr	r3, [r7, #0]
    f7a6:	409a      	lsls	r2, r3
    f7a8:	693b      	ldr	r3, [r7, #16]
    f7aa:	4413      	add	r3, r2
    f7ac:	0c1b      	lsrs	r3, r3, #16
    f7ae:	60bb      	str	r3, [r7, #8]
    f7b0:	68bb      	ldr	r3, [r7, #8]
    f7b2:	4618      	mov	r0, r3
    f7b4:	3720      	adds	r7, #32
    f7b6:	46bd      	mov	sp, r7
    f7b8:	bdb0      	pop	{r4, r5, r7, pc}

0000f7ba <LogScaleApply>:
    f7ba:	b580      	push	{r7, lr}
    f7bc:	b08a      	sub	sp, #40	; 0x28
    f7be:	af00      	add	r7, sp, #0
    f7c0:	60f8      	str	r0, [r7, #12]
    f7c2:	60b9      	str	r1, [r7, #8]
    f7c4:	607a      	str	r2, [r7, #4]
    f7c6:	603b      	str	r3, [r7, #0]
    f7c8:	68fb      	ldr	r3, [r7, #12]
    f7ca:	685b      	ldr	r3, [r3, #4]
    f7cc:	61bb      	str	r3, [r7, #24]
    f7ce:	68bb      	ldr	r3, [r7, #8]
    f7d0:	627b      	str	r3, [r7, #36]	; 0x24
    f7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f7d4:	617b      	str	r3, [r7, #20]
    f7d6:	2300      	movs	r3, #0
    f7d8:	623b      	str	r3, [r7, #32]
    f7da:	e032      	b.n	f842 <LogScaleApply+0x88>
    f7dc:	68bb      	ldr	r3, [r7, #8]
    f7de:	1d1a      	adds	r2, r3, #4
    f7e0:	60ba      	str	r2, [r7, #8]
    f7e2:	681b      	ldr	r3, [r3, #0]
    f7e4:	61fb      	str	r3, [r7, #28]
    f7e6:	68fb      	ldr	r3, [r7, #12]
    f7e8:	681b      	ldr	r3, [r3, #0]
    f7ea:	2b00      	cmp	r3, #0
    f7ec:	d01a      	beq.n	f824 <LogScaleApply+0x6a>
    f7ee:	683b      	ldr	r3, [r7, #0]
    f7f0:	2b00      	cmp	r3, #0
    f7f2:	da06      	bge.n	f802 <LogScaleApply+0x48>
    f7f4:	683b      	ldr	r3, [r7, #0]
    f7f6:	425b      	negs	r3, r3
    f7f8:	69fa      	ldr	r2, [r7, #28]
    f7fa:	fa22 f303 	lsr.w	r3, r2, r3
    f7fe:	61fb      	str	r3, [r7, #28]
    f800:	e004      	b.n	f80c <LogScaleApply+0x52>
    f802:	69fa      	ldr	r2, [r7, #28]
    f804:	683b      	ldr	r3, [r7, #0]
    f806:	fa02 f303 	lsl.w	r3, r2, r3
    f80a:	61fb      	str	r3, [r7, #28]
    f80c:	69fb      	ldr	r3, [r7, #28]
    f80e:	2b01      	cmp	r3, #1
    f810:	d906      	bls.n	f820 <LogScaleApply+0x66>
    f812:	69bb      	ldr	r3, [r7, #24]
    f814:	4619      	mov	r1, r3
    f816:	69f8      	ldr	r0, [r7, #28]
    f818:	f7ff ff88 	bl	f72c <Log>
    f81c:	61f8      	str	r0, [r7, #28]
    f81e:	e001      	b.n	f824 <LogScaleApply+0x6a>
    f820:	2300      	movs	r3, #0
    f822:	61fb      	str	r3, [r7, #28]
    f824:	69fb      	ldr	r3, [r7, #28]
    f826:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f82a:	4293      	cmp	r3, r2
    f82c:	bf28      	it	cs
    f82e:	4613      	movcs	r3, r2
    f830:	4619      	mov	r1, r3
    f832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    f834:	1c9a      	adds	r2, r3, #2
    f836:	627a      	str	r2, [r7, #36]	; 0x24
    f838:	b28a      	uxth	r2, r1
    f83a:	801a      	strh	r2, [r3, #0]
    f83c:	6a3b      	ldr	r3, [r7, #32]
    f83e:	3301      	adds	r3, #1
    f840:	623b      	str	r3, [r7, #32]
    f842:	6a3a      	ldr	r2, [r7, #32]
    f844:	687b      	ldr	r3, [r7, #4]
    f846:	429a      	cmp	r2, r3
    f848:	dbc8      	blt.n	f7dc <LogScaleApply+0x22>
    f84a:	697b      	ldr	r3, [r7, #20]
    f84c:	4618      	mov	r0, r3
    f84e:	3728      	adds	r7, #40	; 0x28
    f850:	46bd      	mov	sp, r7
    f852:	bd80      	pop	{r7, pc}

0000f854 <NoiseReductionFillConfigWithDefaults>:
    f854:	b480      	push	{r7}
    f856:	b083      	sub	sp, #12
    f858:	af00      	add	r7, sp, #0
    f85a:	6078      	str	r0, [r7, #4]
    f85c:	687b      	ldr	r3, [r7, #4]
    f85e:	220a      	movs	r2, #10
    f860:	601a      	str	r2, [r3, #0]
    f862:	687b      	ldr	r3, [r7, #4]
    f864:	4a06      	ldr	r2, [pc, #24]	; (f880 <NoiseReductionFillConfigWithDefaults+0x2c>)
    f866:	605a      	str	r2, [r3, #4]
    f868:	687b      	ldr	r3, [r7, #4]
    f86a:	4a06      	ldr	r2, [pc, #24]	; (f884 <NoiseReductionFillConfigWithDefaults+0x30>)
    f86c:	609a      	str	r2, [r3, #8]
    f86e:	687b      	ldr	r3, [r7, #4]
    f870:	4a05      	ldr	r2, [pc, #20]	; (f888 <NoiseReductionFillConfigWithDefaults+0x34>)
    f872:	60da      	str	r2, [r3, #12]
    f874:	bf00      	nop
    f876:	370c      	adds	r7, #12
    f878:	46bd      	mov	sp, r7
    f87a:	bc80      	pop	{r7}
    f87c:	4770      	bx	lr
    f87e:	bf00      	nop
    f880:	3ccccccd 	.word	0x3ccccccd
    f884:	3d75c28f 	.word	0x3d75c28f
    f888:	3d4ccccd 	.word	0x3d4ccccd

0000f88c <NoiseReductionPopulateState>:
    f88c:	b580      	push	{r7, lr}
    f88e:	b084      	sub	sp, #16
    f890:	af00      	add	r7, sp, #0
    f892:	60f8      	str	r0, [r7, #12]
    f894:	60b9      	str	r1, [r7, #8]
    f896:	607a      	str	r2, [r7, #4]
    f898:	68fb      	ldr	r3, [r7, #12]
    f89a:	681a      	ldr	r2, [r3, #0]
    f89c:	68bb      	ldr	r3, [r7, #8]
    f89e:	601a      	str	r2, [r3, #0]
    f8a0:	68fb      	ldr	r3, [r7, #12]
    f8a2:	689b      	ldr	r3, [r3, #8]
    f8a4:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
    f8a8:	4618      	mov	r0, r3
    f8aa:	f004 fb07 	bl	13ebc <__aeabi_fmul>
    f8ae:	4603      	mov	r3, r0
    f8b0:	4618      	mov	r0, r3
    f8b2:	f004 fcef 	bl	14294 <__aeabi_f2uiz>
    f8b6:	4603      	mov	r3, r0
    f8b8:	b29a      	uxth	r2, r3
    f8ba:	68bb      	ldr	r3, [r7, #8]
    f8bc:	80da      	strh	r2, [r3, #6]
    f8be:	68fb      	ldr	r3, [r7, #12]
    f8c0:	685b      	ldr	r3, [r3, #4]
    f8c2:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
    f8c6:	4618      	mov	r0, r3
    f8c8:	f004 faf8 	bl	13ebc <__aeabi_fmul>
    f8cc:	4603      	mov	r3, r0
    f8ce:	4618      	mov	r0, r3
    f8d0:	f004 fce0 	bl	14294 <__aeabi_f2uiz>
    f8d4:	4603      	mov	r3, r0
    f8d6:	b29a      	uxth	r2, r3
    f8d8:	68bb      	ldr	r3, [r7, #8]
    f8da:	809a      	strh	r2, [r3, #4]
    f8dc:	68fb      	ldr	r3, [r7, #12]
    f8de:	68db      	ldr	r3, [r3, #12]
    f8e0:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
    f8e4:	4618      	mov	r0, r3
    f8e6:	f004 fae9 	bl	13ebc <__aeabi_fmul>
    f8ea:	4603      	mov	r3, r0
    f8ec:	4618      	mov	r0, r3
    f8ee:	f004 fcd1 	bl	14294 <__aeabi_f2uiz>
    f8f2:	4603      	mov	r3, r0
    f8f4:	b29a      	uxth	r2, r3
    f8f6:	68bb      	ldr	r3, [r7, #8]
    f8f8:	811a      	strh	r2, [r3, #8]
    f8fa:	68bb      	ldr	r3, [r7, #8]
    f8fc:	687a      	ldr	r2, [r7, #4]
    f8fe:	60da      	str	r2, [r3, #12]
    f900:	68bb      	ldr	r3, [r7, #8]
    f902:	68db      	ldr	r3, [r3, #12]
    f904:	2104      	movs	r1, #4
    f906:	4618      	mov	r0, r3
    f908:	f011 f9dc 	bl	20cc4 <calloc>
    f90c:	4603      	mov	r3, r0
    f90e:	461a      	mov	r2, r3
    f910:	68bb      	ldr	r3, [r7, #8]
    f912:	611a      	str	r2, [r3, #16]
    f914:	68bb      	ldr	r3, [r7, #8]
    f916:	691b      	ldr	r3, [r3, #16]
    f918:	2b00      	cmp	r3, #0
    f91a:	d109      	bne.n	f930 <NoiseReductionPopulateState+0xa4>
    f91c:	4b07      	ldr	r3, [pc, #28]	; (f93c <NoiseReductionPopulateState+0xb0>)
    f91e:	681b      	ldr	r3, [r3, #0]
    f920:	68db      	ldr	r3, [r3, #12]
    f922:	2220      	movs	r2, #32
    f924:	2101      	movs	r1, #1
    f926:	4806      	ldr	r0, [pc, #24]	; (f940 <NoiseReductionPopulateState+0xb4>)
    f928:	f011 fbce 	bl	210c8 <fwrite>
    f92c:	2300      	movs	r3, #0
    f92e:	e000      	b.n	f932 <NoiseReductionPopulateState+0xa6>
    f930:	2301      	movs	r3, #1
    f932:	4618      	mov	r0, r3
    f934:	3710      	adds	r7, #16
    f936:	46bd      	mov	sp, r7
    f938:	bd80      	pop	{r7, pc}
    f93a:	bf00      	nop
    f93c:	20020064 	.word	0x20020064
    f940:	00025054 	.word	0x00025054

0000f944 <NoiseReductionFreeStateContents>:
    f944:	b580      	push	{r7, lr}
    f946:	b082      	sub	sp, #8
    f948:	af00      	add	r7, sp, #0
    f94a:	6078      	str	r0, [r7, #4]
    f94c:	687b      	ldr	r3, [r7, #4]
    f94e:	691b      	ldr	r3, [r3, #16]
    f950:	4618      	mov	r0, r3
    f952:	f011 fbcf 	bl	210f4 <free>
    f956:	bf00      	nop
    f958:	3708      	adds	r7, #8
    f95a:	46bd      	mov	sp, r7
    f95c:	bd80      	pop	{r7, pc}
    f95e:	bf00      	nop

0000f960 <PcanGainControlFillConfigWithDefaults>:
    f960:	b480      	push	{r7}
    f962:	b083      	sub	sp, #12
    f964:	af00      	add	r7, sp, #0
    f966:	6078      	str	r0, [r7, #4]
    f968:	687b      	ldr	r3, [r7, #4]
    f96a:	2200      	movs	r2, #0
    f96c:	601a      	str	r2, [r3, #0]
    f96e:	687b      	ldr	r3, [r7, #4]
    f970:	4a06      	ldr	r2, [pc, #24]	; (f98c <PcanGainControlFillConfigWithDefaults+0x2c>)
    f972:	605a      	str	r2, [r3, #4]
    f974:	687b      	ldr	r3, [r7, #4]
    f976:	4a06      	ldr	r2, [pc, #24]	; (f990 <PcanGainControlFillConfigWithDefaults+0x30>)
    f978:	609a      	str	r2, [r3, #8]
    f97a:	687b      	ldr	r3, [r7, #4]
    f97c:	2215      	movs	r2, #21
    f97e:	60da      	str	r2, [r3, #12]
    f980:	bf00      	nop
    f982:	370c      	adds	r7, #12
    f984:	46bd      	mov	sp, r7
    f986:	bc80      	pop	{r7}
    f988:	4770      	bx	lr
    f98a:	bf00      	nop
    f98c:	3f733333 	.word	0x3f733333
    f990:	42a00000 	.word	0x42a00000

0000f994 <PcanGainLookupFunction>:
    f994:	b590      	push	{r4, r7, lr}
    f996:	b087      	sub	sp, #28
    f998:	af00      	add	r7, sp, #0
    f99a:	60f8      	str	r0, [r7, #12]
    f99c:	60b9      	str	r1, [r7, #8]
    f99e:	607a      	str	r2, [r7, #4]
    f9a0:	6878      	ldr	r0, [r7, #4]
    f9a2:	f004 fa33 	bl	13e0c <__aeabi_ui2f>
    f9a6:	4604      	mov	r4, r0
    f9a8:	2201      	movs	r2, #1
    f9aa:	68bb      	ldr	r3, [r7, #8]
    f9ac:	fa02 f303 	lsl.w	r3, r2, r3
    f9b0:	4618      	mov	r0, r3
    f9b2:	f004 fa2b 	bl	13e0c <__aeabi_ui2f>
    f9b6:	4603      	mov	r3, r0
    f9b8:	4619      	mov	r1, r3
    f9ba:	4620      	mov	r0, r4
    f9bc:	f004 fb32 	bl	14024 <__aeabi_fdiv>
    f9c0:	4603      	mov	r3, r0
    f9c2:	617b      	str	r3, [r7, #20]
    f9c4:	68fb      	ldr	r3, [r7, #12]
    f9c6:	68db      	ldr	r3, [r3, #12]
    f9c8:	2201      	movs	r2, #1
    f9ca:	fa02 f303 	lsl.w	r3, r2, r3
    f9ce:	4618      	mov	r0, r3
    f9d0:	f004 fa1c 	bl	13e0c <__aeabi_ui2f>
    f9d4:	4604      	mov	r4, r0
    f9d6:	68fb      	ldr	r3, [r7, #12]
    f9d8:	689b      	ldr	r3, [r3, #8]
    f9da:	6979      	ldr	r1, [r7, #20]
    f9dc:	4618      	mov	r0, r3
    f9de:	f004 f965 	bl	13cac <__addsf3>
    f9e2:	4603      	mov	r3, r0
    f9e4:	461a      	mov	r2, r3
    f9e6:	68fb      	ldr	r3, [r7, #12]
    f9e8:	685b      	ldr	r3, [r3, #4]
    f9ea:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
    f9ee:	4619      	mov	r1, r3
    f9f0:	4610      	mov	r0, r2
    f9f2:	f00f f85f 	bl	1eab4 <powf>
    f9f6:	4603      	mov	r3, r0
    f9f8:	4619      	mov	r1, r3
    f9fa:	4620      	mov	r0, r4
    f9fc:	f004 fa5e 	bl	13ebc <__aeabi_fmul>
    fa00:	4603      	mov	r3, r0
    fa02:	613b      	str	r3, [r7, #16]
    fa04:	490c      	ldr	r1, [pc, #48]	; (fa38 <PcanGainLookupFunction+0xa4>)
    fa06:	6938      	ldr	r0, [r7, #16]
    fa08:	f004 fc14 	bl	14234 <__aeabi_fcmpgt>
    fa0c:	4603      	mov	r3, r0
    fa0e:	2b00      	cmp	r3, #0
    fa10:	d002      	beq.n	fa18 <PcanGainLookupFunction+0x84>
    fa12:	f647 73ff 	movw	r3, #32767	; 0x7fff
    fa16:	e00a      	b.n	fa2e <PcanGainLookupFunction+0x9a>
    fa18:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    fa1c:	6938      	ldr	r0, [r7, #16]
    fa1e:	f004 f945 	bl	13cac <__addsf3>
    fa22:	4603      	mov	r3, r0
    fa24:	4618      	mov	r0, r3
    fa26:	f004 fc0f 	bl	14248 <__aeabi_f2iz>
    fa2a:	4603      	mov	r3, r0
    fa2c:	b21b      	sxth	r3, r3
    fa2e:	4618      	mov	r0, r3
    fa30:	371c      	adds	r7, #28
    fa32:	46bd      	mov	sp, r7
    fa34:	bd90      	pop	{r4, r7, pc}
    fa36:	bf00      	nop
    fa38:	46fffe00 	.word	0x46fffe00

0000fa3c <PcanGainControlPopulateState>:
    fa3c:	b590      	push	{r4, r7, lr}
    fa3e:	b091      	sub	sp, #68	; 0x44
    fa40:	af00      	add	r7, sp, #0
    fa42:	60f8      	str	r0, [r7, #12]
    fa44:	60b9      	str	r1, [r7, #8]
    fa46:	607a      	str	r2, [r7, #4]
    fa48:	603b      	str	r3, [r7, #0]
    fa4a:	68fb      	ldr	r3, [r7, #12]
    fa4c:	681a      	ldr	r2, [r3, #0]
    fa4e:	68bb      	ldr	r3, [r7, #8]
    fa50:	601a      	str	r2, [r3, #0]
    fa52:	68bb      	ldr	r3, [r7, #8]
    fa54:	681b      	ldr	r3, [r3, #0]
    fa56:	2b00      	cmp	r3, #0
    fa58:	d101      	bne.n	fa5e <PcanGainControlPopulateState+0x22>
    fa5a:	2301      	movs	r3, #1
    fa5c:	e0a8      	b.n	fbb0 <PcanGainControlPopulateState+0x174>
    fa5e:	68bb      	ldr	r3, [r7, #8]
    fa60:	687a      	ldr	r2, [r7, #4]
    fa62:	605a      	str	r2, [r3, #4]
    fa64:	68bb      	ldr	r3, [r7, #8]
    fa66:	683a      	ldr	r2, [r7, #0]
    fa68:	609a      	str	r2, [r3, #8]
    fa6a:	20fa      	movs	r0, #250	; 0xfa
    fa6c:	f011 fb3a 	bl	210e4 <malloc>
    fa70:	4603      	mov	r3, r0
    fa72:	461a      	mov	r2, r3
    fa74:	68bb      	ldr	r3, [r7, #8]
    fa76:	60da      	str	r2, [r3, #12]
    fa78:	68bb      	ldr	r3, [r7, #8]
    fa7a:	68db      	ldr	r3, [r3, #12]
    fa7c:	2b00      	cmp	r3, #0
    fa7e:	d109      	bne.n	fa94 <PcanGainControlPopulateState+0x58>
    fa80:	4b4d      	ldr	r3, [pc, #308]	; (fbb8 <PcanGainControlPopulateState+0x17c>)
    fa82:	681b      	ldr	r3, [r3, #0]
    fa84:	68db      	ldr	r3, [r3, #12]
    fa86:	221c      	movs	r2, #28
    fa88:	2101      	movs	r1, #1
    fa8a:	484c      	ldr	r0, [pc, #304]	; (fbbc <PcanGainControlPopulateState+0x180>)
    fa8c:	f011 fb1c 	bl	210c8 <fwrite>
    fa90:	2300      	movs	r3, #0
    fa92:	e08d      	b.n	fbb0 <PcanGainControlPopulateState+0x174>
    fa94:	68fb      	ldr	r3, [r7, #12]
    fa96:	68da      	ldr	r2, [r3, #12]
    fa98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    fa9a:	1ad3      	subs	r3, r2, r3
    fa9c:	f1a3 020c 	sub.w	r2, r3, #12
    faa0:	68bb      	ldr	r3, [r7, #8]
    faa2:	611a      	str	r2, [r3, #16]
    faa4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
    faa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    faaa:	1ad3      	subs	r3, r2, r3
    faac:	63bb      	str	r3, [r7, #56]	; 0x38
    faae:	68bb      	ldr	r3, [r7, #8]
    fab0:	68dc      	ldr	r4, [r3, #12]
    fab2:	2200      	movs	r2, #0
    fab4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    fab6:	68f8      	ldr	r0, [r7, #12]
    fab8:	f7ff ff6c 	bl	f994 <PcanGainLookupFunction>
    fabc:	4603      	mov	r3, r0
    fabe:	8023      	strh	r3, [r4, #0]
    fac0:	68bb      	ldr	r3, [r7, #8]
    fac2:	68db      	ldr	r3, [r3, #12]
    fac4:	1c9c      	adds	r4, r3, #2
    fac6:	2201      	movs	r2, #1
    fac8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    faca:	68f8      	ldr	r0, [r7, #12]
    facc:	f7ff ff62 	bl	f994 <PcanGainLookupFunction>
    fad0:	4603      	mov	r3, r0
    fad2:	8023      	strh	r3, [r4, #0]
    fad4:	68bb      	ldr	r3, [r7, #8]
    fad6:	68db      	ldr	r3, [r3, #12]
    fad8:	f1a3 020c 	sub.w	r2, r3, #12
    fadc:	68bb      	ldr	r3, [r7, #8]
    fade:	60da      	str	r2, [r3, #12]
    fae0:	2302      	movs	r3, #2
    fae2:	63fb      	str	r3, [r7, #60]	; 0x3c
    fae4:	e05a      	b.n	fb9c <PcanGainControlPopulateState+0x160>
    fae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fae8:	3b01      	subs	r3, #1
    faea:	2201      	movs	r2, #1
    faec:	fa02 f303 	lsl.w	r3, r2, r3
    faf0:	637b      	str	r3, [r7, #52]	; 0x34
    faf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    faf4:	085b      	lsrs	r3, r3, #1
    faf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    faf8:	4413      	add	r3, r2
    fafa:	633b      	str	r3, [r7, #48]	; 0x30
    fafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fafe:	2b20      	cmp	r3, #32
    fb00:	d103      	bne.n	fb0a <PcanGainControlPopulateState+0xce>
    fb02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fb04:	005b      	lsls	r3, r3, #1
    fb06:	3b01      	subs	r3, #1
    fb08:	e001      	b.n	fb0e <PcanGainControlPopulateState+0xd2>
    fb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    fb0c:	005b      	lsls	r3, r3, #1
    fb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    fb10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    fb12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    fb14:	68f8      	ldr	r0, [r7, #12]
    fb16:	f7ff ff3d 	bl	f994 <PcanGainLookupFunction>
    fb1a:	4603      	mov	r3, r0
    fb1c:	857b      	strh	r3, [r7, #42]	; 0x2a
    fb1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    fb20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    fb22:	68f8      	ldr	r0, [r7, #12]
    fb24:	f7ff ff36 	bl	f994 <PcanGainLookupFunction>
    fb28:	4603      	mov	r3, r0
    fb2a:	853b      	strh	r3, [r7, #40]	; 0x28
    fb2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    fb2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    fb30:	68f8      	ldr	r0, [r7, #12]
    fb32:	f7ff ff2f 	bl	f994 <PcanGainLookupFunction>
    fb36:	4603      	mov	r3, r0
    fb38:	84fb      	strh	r3, [r7, #38]	; 0x26
    fb3a:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
    fb3e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
    fb42:	1ad3      	subs	r3, r2, r3
    fb44:	623b      	str	r3, [r7, #32]
    fb46:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
    fb4a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
    fb4e:	1ad3      	subs	r3, r2, r3
    fb50:	61fb      	str	r3, [r7, #28]
    fb52:	6a3b      	ldr	r3, [r7, #32]
    fb54:	009a      	lsls	r2, r3, #2
    fb56:	69fb      	ldr	r3, [r7, #28]
    fb58:	1ad3      	subs	r3, r2, r3
    fb5a:	61bb      	str	r3, [r7, #24]
    fb5c:	69fa      	ldr	r2, [r7, #28]
    fb5e:	69bb      	ldr	r3, [r7, #24]
    fb60:	1ad3      	subs	r3, r2, r3
    fb62:	617b      	str	r3, [r7, #20]
    fb64:	68bb      	ldr	r3, [r7, #8]
    fb66:	68da      	ldr	r2, [r3, #12]
    fb68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fb6a:	00db      	lsls	r3, r3, #3
    fb6c:	4413      	add	r3, r2
    fb6e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
    fb70:	801a      	strh	r2, [r3, #0]
    fb72:	68bb      	ldr	r3, [r7, #8]
    fb74:	68da      	ldr	r2, [r3, #12]
    fb76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fb78:	00db      	lsls	r3, r3, #3
    fb7a:	3302      	adds	r3, #2
    fb7c:	4413      	add	r3, r2
    fb7e:	69ba      	ldr	r2, [r7, #24]
    fb80:	b212      	sxth	r2, r2
    fb82:	801a      	strh	r2, [r3, #0]
    fb84:	68bb      	ldr	r3, [r7, #8]
    fb86:	68da      	ldr	r2, [r3, #12]
    fb88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fb8a:	00db      	lsls	r3, r3, #3
    fb8c:	3304      	adds	r3, #4
    fb8e:	4413      	add	r3, r2
    fb90:	697a      	ldr	r2, [r7, #20]
    fb92:	b212      	sxth	r2, r2
    fb94:	801a      	strh	r2, [r3, #0]
    fb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fb98:	3301      	adds	r3, #1
    fb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    fb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fb9e:	2b20      	cmp	r3, #32
    fba0:	dda1      	ble.n	fae6 <PcanGainControlPopulateState+0xaa>
    fba2:	68bb      	ldr	r3, [r7, #8]
    fba4:	68db      	ldr	r3, [r3, #12]
    fba6:	f103 020c 	add.w	r2, r3, #12
    fbaa:	68bb      	ldr	r3, [r7, #8]
    fbac:	60da      	str	r2, [r3, #12]
    fbae:	2301      	movs	r3, #1
    fbb0:	4618      	mov	r0, r3
    fbb2:	3744      	adds	r7, #68	; 0x44
    fbb4:	46bd      	mov	sp, r7
    fbb6:	bd90      	pop	{r4, r7, pc}
    fbb8:	20020064 	.word	0x20020064
    fbbc:	00025078 	.word	0x00025078

0000fbc0 <PcanGainControlFreeStateContents>:
    fbc0:	b580      	push	{r7, lr}
    fbc2:	b082      	sub	sp, #8
    fbc4:	af00      	add	r7, sp, #0
    fbc6:	6078      	str	r0, [r7, #4]
    fbc8:	687b      	ldr	r3, [r7, #4]
    fbca:	68db      	ldr	r3, [r3, #12]
    fbcc:	4618      	mov	r0, r3
    fbce:	f011 fa91 	bl	210f4 <free>
    fbd2:	bf00      	nop
    fbd4:	3708      	adds	r7, #8
    fbd6:	46bd      	mov	sp, r7
    fbd8:	bd80      	pop	{r7, pc}
    fbda:	bf00      	nop

0000fbdc <is_fnqual_component_type>:
    fbdc:	284d      	cmp	r0, #77	; 0x4d
    fbde:	d009      	beq.n	fbf4 <is_fnqual_component_type+0x18>
    fbe0:	d805      	bhi.n	fbee <is_fnqual_component_type+0x12>
    fbe2:	381c      	subs	r0, #28
    fbe4:	2804      	cmp	r0, #4
    fbe6:	bf8c      	ite	hi
    fbe8:	2000      	movhi	r0, #0
    fbea:	2001      	movls	r0, #1
    fbec:	4770      	bx	lr
    fbee:	384f      	subs	r0, #79	; 0x4f
    fbf0:	2801      	cmp	r0, #1
    fbf2:	e7f8      	b.n	fbe6 <is_fnqual_component_type+0xa>
    fbf4:	2001      	movs	r0, #1
    fbf6:	4770      	bx	lr

0000fbf8 <d_make_empty>:
    fbf8:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
    fbfc:	2100      	movs	r1, #0
    fbfe:	429a      	cmp	r2, r3
    fc00:	bfb7      	itett	lt
    fc02:	6903      	ldrlt	r3, [r0, #16]
    fc04:	460b      	movge	r3, r1
    fc06:	eb03 1302 	addlt.w	r3, r3, r2, lsl #4
    fc0a:	3201      	addlt	r2, #1
    fc0c:	bfbc      	itt	lt
    fc0e:	6059      	strlt	r1, [r3, #4]
    fc10:	6142      	strlt	r2, [r0, #20]
    fc12:	4618      	mov	r0, r3
    fc14:	4770      	bx	lr

0000fc16 <d_make_comp>:
    fc16:	b570      	push	{r4, r5, r6, lr}
    fc18:	461d      	mov	r5, r3
    fc1a:	1e4b      	subs	r3, r1, #1
    fc1c:	460e      	mov	r6, r1
    fc1e:	4614      	mov	r4, r2
    fc20:	2b4f      	cmp	r3, #79	; 0x4f
    fc22:	d837      	bhi.n	fc94 <d_make_comp+0x7e>
    fc24:	e8df f003 	tbb	[pc, r3]
    fc28:	28282828 	.word	0x28282828
    fc2c:	36363636 	.word	0x36363636
    fc30:	32283232 	.word	0x32283232
    fc34:	32323232 	.word	0x32323232
    fc38:	32323232 	.word	0x32323232
    fc3c:	36323232 	.word	0x36323232
    fc40:	2a2a2a2a 	.word	0x2a2a2a2a
    fc44:	2a2a2a2a 	.word	0x2a2a2a2a
    fc48:	32323228 	.word	0x32323228
    fc4c:	32363232 	.word	0x32363232
    fc50:	3628292a 	.word	0x3628292a
    fc54:	322a2a28 	.word	0x322a2a28
    fc58:	32363629 	.word	0x32363629
    fc5c:	28283232 	.word	0x28283232
    fc60:	32282828 	.word	0x32282828
    fc64:	28322828 	.word	0x28322828
    fc68:	32323636 	.word	0x32323636
    fc6c:	36363632 	.word	0x36363632
    fc70:	28323232 	.word	0x28323232
    fc74:	2a2a282a 	.word	0x2a2a282a
    fc78:	b154      	cbz	r4, fc90 <d_make_comp+0x7a>
    fc7a:	b15d      	cbz	r5, fc94 <d_make_comp+0x7e>
    fc7c:	f7ff ffbc 	bl	fbf8 <d_make_empty>
    fc80:	b110      	cbz	r0, fc88 <d_make_comp+0x72>
    fc82:	7006      	strb	r6, [r0, #0]
    fc84:	e9c0 4502 	strd	r4, r5, [r0, #8]
    fc88:	4604      	mov	r4, r0
    fc8a:	e001      	b.n	fc90 <d_make_comp+0x7a>
    fc8c:	2c00      	cmp	r4, #0
    fc8e:	d1f5      	bne.n	fc7c <d_make_comp+0x66>
    fc90:	4620      	mov	r0, r4
    fc92:	bd70      	pop	{r4, r5, r6, pc}
    fc94:	2400      	movs	r4, #0
    fc96:	e7fb      	b.n	fc90 <d_make_comp+0x7a>

0000fc98 <d_make_name>:
    fc98:	b538      	push	{r3, r4, r5, lr}
    fc9a:	460c      	mov	r4, r1
    fc9c:	4615      	mov	r5, r2
    fc9e:	f7ff ffab 	bl	fbf8 <d_make_empty>
    fca2:	b138      	cbz	r0, fcb4 <d_make_name+0x1c>
    fca4:	2300      	movs	r3, #0
    fca6:	b134      	cbz	r4, fcb6 <d_make_name+0x1e>
    fca8:	429d      	cmp	r5, r3
    fcaa:	dd06      	ble.n	fcba <d_make_name+0x22>
    fcac:	6043      	str	r3, [r0, #4]
    fcae:	7003      	strb	r3, [r0, #0]
    fcb0:	e9c0 4502 	strd	r4, r5, [r0, #8]
    fcb4:	bd38      	pop	{r3, r4, r5, pc}
    fcb6:	4620      	mov	r0, r4
    fcb8:	e7fc      	b.n	fcb4 <d_make_name+0x1c>
    fcba:	4618      	mov	r0, r3
    fcbc:	e7fa      	b.n	fcb4 <d_make_name+0x1c>

0000fcbe <d_make_builtin_type>:
    fcbe:	b510      	push	{r4, lr}
    fcc0:	460c      	mov	r4, r1
    fcc2:	f7ff ff99 	bl	fbf8 <d_make_empty>
    fcc6:	b110      	cbz	r0, fcce <d_make_builtin_type+0x10>
    fcc8:	2327      	movs	r3, #39	; 0x27
    fcca:	6084      	str	r4, [r0, #8]
    fccc:	7003      	strb	r3, [r0, #0]
    fcce:	bd10      	pop	{r4, pc}

0000fcd0 <d_ref_qualifier>:
    fcd0:	68c3      	ldr	r3, [r0, #12]
    fcd2:	460a      	mov	r2, r1
    fcd4:	7819      	ldrb	r1, [r3, #0]
    fcd6:	2952      	cmp	r1, #82	; 0x52
    fcd8:	d006      	beq.n	fce8 <d_ref_qualifier+0x18>
    fcda:	294f      	cmp	r1, #79	; 0x4f
    fcdc:	d10c      	bne.n	fcf8 <d_ref_qualifier+0x28>
    fcde:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    fce0:	3103      	adds	r1, #3
    fce2:	62c1      	str	r1, [r0, #44]	; 0x2c
    fce4:	2120      	movs	r1, #32
    fce6:	e003      	b.n	fcf0 <d_ref_qualifier+0x20>
    fce8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    fcea:	3102      	adds	r1, #2
    fcec:	62c1      	str	r1, [r0, #44]	; 0x2c
    fcee:	211f      	movs	r1, #31
    fcf0:	3301      	adds	r3, #1
    fcf2:	60c3      	str	r3, [r0, #12]
    fcf4:	2300      	movs	r3, #0
    fcf6:	e78e      	b.n	fc16 <d_make_comp>
    fcf8:	4610      	mov	r0, r2
    fcfa:	4770      	bx	lr

0000fcfc <d_add_substitution>:
    fcfc:	b151      	cbz	r1, fd14 <d_add_substitution+0x18>
    fcfe:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
    fd02:	4293      	cmp	r3, r2
    fd04:	da06      	bge.n	fd14 <d_add_substitution+0x18>
    fd06:	69c2      	ldr	r2, [r0, #28]
    fd08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    fd0c:	3301      	adds	r3, #1
    fd0e:	6203      	str	r3, [r0, #32]
    fd10:	2001      	movs	r0, #1
    fd12:	4770      	bx	lr
    fd14:	2000      	movs	r0, #0
    fd16:	4770      	bx	lr

0000fd18 <d_count_templates_scopes>:
    fd18:	b538      	push	{r3, r4, r5, lr}
    fd1a:	4605      	mov	r5, r0
    fd1c:	460c      	mov	r4, r1
    fd1e:	2c00      	cmp	r4, #0
    fd20:	d047      	beq.n	fdb2 <d_count_templates_scopes+0x9a>
    fd22:	7823      	ldrb	r3, [r4, #0]
    fd24:	3b01      	subs	r3, #1
    fd26:	2b4f      	cmp	r3, #79	; 0x4f
    fd28:	d843      	bhi.n	fdb2 <d_count_templates_scopes+0x9a>
    fd2a:	e8df f003 	tbb	[pc, r3]
    fd2e:	2d2d      	.short	0x2d2d
    fd30:	4242282d 	.word	0x4242282d
    fd34:	2d2d4d4d 	.word	0x2d2d4d4d
    fd38:	2d2d2d2d 	.word	0x2d2d2d2d
    fd3c:	2d2d2d2d 	.word	0x2d2d2d2d
    fd40:	2d2d2d2d 	.word	0x2d2d2d2d
    fd44:	2d2d422d 	.word	0x2d2d422d
    fd48:	2d2d2d2d 	.word	0x2d2d2d2d
    fd4c:	2d2d2d2d 	.word	0x2d2d2d2d
    fd50:	2d2d4343 	.word	0x2d2d4343
    fd54:	2d2d2d42 	.word	0x2d2d2d42
    fd58:	2d2d4f2d 	.word	0x2d2d4f2d
    fd5c:	422d2d2d 	.word	0x422d2d2d
    fd60:	2d2d2d4d 	.word	0x2d2d2d4d
    fd64:	2d2d2d2d 	.word	0x2d2d2d2d
    fd68:	2d2d2d2d 	.word	0x2d2d2d2d
    fd6c:	42422d2d 	.word	0x42422d2d
    fd70:	4f4f4f2d 	.word	0x4f4f4f2d
    fd74:	2d2d424f 	.word	0x2d2d424f
    fd78:	2d2d2d2d 	.word	0x2d2d2d2d
    fd7c:	2d2d      	.short	0x2d2d
    fd7e:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
    fd82:	3301      	adds	r3, #1
    fd84:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
    fd88:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    fd8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    fd90:	dc0f      	bgt.n	fdb2 <d_count_templates_scopes+0x9a>
    fd92:	3301      	adds	r3, #1
    fd94:	68a1      	ldr	r1, [r4, #8]
    fd96:	4628      	mov	r0, r5
    fd98:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
    fd9c:	f7ff ffbc 	bl	fd18 <d_count_templates_scopes>
    fda0:	68e1      	ldr	r1, [r4, #12]
    fda2:	4628      	mov	r0, r5
    fda4:	f7ff ffb8 	bl	fd18 <d_count_templates_scopes>
    fda8:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    fdac:	3b01      	subs	r3, #1
    fdae:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
    fdb2:	bd38      	pop	{r3, r4, r5, pc}
    fdb4:	68a3      	ldr	r3, [r4, #8]
    fdb6:	781b      	ldrb	r3, [r3, #0]
    fdb8:	2b05      	cmp	r3, #5
    fdba:	bf02      	ittt	eq
    fdbc:	f8d5 3138 	ldreq.w	r3, [r5, #312]	; 0x138
    fdc0:	3301      	addeq	r3, #1
    fdc2:	f8c5 3138 	streq.w	r3, [r5, #312]	; 0x138
    fdc6:	e7df      	b.n	fd88 <d_count_templates_scopes+0x70>
    fdc8:	68e4      	ldr	r4, [r4, #12]
    fdca:	e7a8      	b.n	fd1e <d_count_templates_scopes+0x6>
    fdcc:	68a4      	ldr	r4, [r4, #8]
    fdce:	e7a6      	b.n	fd1e <d_count_templates_scopes+0x6>

0000fdd0 <d_print_flush>:
    fdd0:	b538      	push	{r3, r4, r5, lr}
    fdd2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    fdd6:	2500      	movs	r5, #0
    fdd8:	4604      	mov	r4, r0
    fdda:	5445      	strb	r5, [r0, r1]
    fddc:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
    fde0:	4798      	blx	r3
    fde2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    fde6:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    fdea:	3301      	adds	r3, #1
    fdec:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    fdf0:	bd38      	pop	{r3, r4, r5, pc}

0000fdf2 <d_append_char>:
    fdf2:	b538      	push	{r3, r4, r5, lr}
    fdf4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    fdf8:	4604      	mov	r4, r0
    fdfa:	460d      	mov	r5, r1
    fdfc:	2bff      	cmp	r3, #255	; 0xff
    fdfe:	d101      	bne.n	fe04 <d_append_char+0x12>
    fe00:	f7ff ffe6 	bl	fdd0 <d_print_flush>
    fe04:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    fe08:	1c5a      	adds	r2, r3, #1
    fe0a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    fe0e:	54e5      	strb	r5, [r4, r3]
    fe10:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    fe14:	bd38      	pop	{r3, r4, r5, pc}

0000fe16 <d_append_buffer>:
    fe16:	b570      	push	{r4, r5, r6, lr}
    fe18:	4606      	mov	r6, r0
    fe1a:	460c      	mov	r4, r1
    fe1c:	188d      	adds	r5, r1, r2
    fe1e:	42ac      	cmp	r4, r5
    fe20:	d100      	bne.n	fe24 <d_append_buffer+0xe>
    fe22:	bd70      	pop	{r4, r5, r6, pc}
    fe24:	f814 1b01 	ldrb.w	r1, [r4], #1
    fe28:	4630      	mov	r0, r6
    fe2a:	f7ff ffe2 	bl	fdf2 <d_append_char>
    fe2e:	e7f6      	b.n	fe1e <d_append_buffer+0x8>

0000fe30 <d_pack_length>:
    fe30:	2300      	movs	r3, #0
    fe32:	b120      	cbz	r0, fe3e <d_pack_length+0xe>
    fe34:	7802      	ldrb	r2, [r0, #0]
    fe36:	2a2f      	cmp	r2, #47	; 0x2f
    fe38:	d101      	bne.n	fe3e <d_pack_length+0xe>
    fe3a:	6882      	ldr	r2, [r0, #8]
    fe3c:	b90a      	cbnz	r2, fe42 <d_pack_length+0x12>
    fe3e:	4618      	mov	r0, r3
    fe40:	4770      	bx	lr
    fe42:	3301      	adds	r3, #1
    fe44:	68c0      	ldr	r0, [r0, #12]
    fe46:	e7f4      	b.n	fe32 <d_pack_length+0x2>

0000fe48 <d_append_string>:
    fe48:	b513      	push	{r0, r1, r4, lr}
    fe4a:	4604      	mov	r4, r0
    fe4c:	4608      	mov	r0, r1
    fe4e:	9101      	str	r1, [sp, #4]
    fe50:	f006 f812 	bl	15e78 <strlen>
    fe54:	9901      	ldr	r1, [sp, #4]
    fe56:	4602      	mov	r2, r0
    fe58:	4620      	mov	r0, r4
    fe5a:	b002      	add	sp, #8
    fe5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fe60:	e7d9      	b.n	fe16 <d_append_buffer>

0000fe62 <d_append_num>:
    fe62:	b510      	push	{r4, lr}
    fe64:	b088      	sub	sp, #32
    fe66:	4604      	mov	r4, r0
    fe68:	460a      	mov	r2, r1
    fe6a:	4905      	ldr	r1, [pc, #20]	; (fe80 <d_append_num+0x1e>)
    fe6c:	a801      	add	r0, sp, #4
    fe6e:	f011 fc97 	bl	217a0 <siprintf>
    fe72:	a901      	add	r1, sp, #4
    fe74:	4620      	mov	r0, r4
    fe76:	f7ff ffe7 	bl	fe48 <d_append_string>
    fe7a:	b008      	add	sp, #32
    fe7c:	bd10      	pop	{r4, pc}
    fe7e:	bf00      	nop
    fe80:	0002c71f 	.word	0x0002c71f

0000fe84 <d_number.isra.0>:
    fe84:	6801      	ldr	r1, [r0, #0]
    fe86:	4602      	mov	r2, r0
    fe88:	b5f0      	push	{r4, r5, r6, r7, lr}
    fe8a:	780b      	ldrb	r3, [r1, #0]
    fe8c:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    fe90:	240a      	movs	r4, #10
    fe92:	2b6e      	cmp	r3, #110	; 0x6e
    fe94:	bf05      	ittet	eq
    fe96:	1c4b      	addeq	r3, r1, #1
    fe98:	2501      	moveq	r5, #1
    fe9a:	2500      	movne	r5, #0
    fe9c:	6003      	streq	r3, [r0, #0]
    fe9e:	f04f 0000 	mov.w	r0, #0
    fea2:	bf08      	it	eq
    fea4:	784b      	ldrbeq	r3, [r1, #1]
    fea6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    feaa:	b2cf      	uxtb	r7, r1
    feac:	2f09      	cmp	r7, #9
    feae:	d902      	bls.n	feb6 <d_number.isra.0+0x32>
    feb0:	b105      	cbz	r5, feb4 <d_number.isra.0+0x30>
    feb2:	4240      	negs	r0, r0
    feb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    feb6:	1a71      	subs	r1, r6, r1
    feb8:	fbb1 f1f4 	udiv	r1, r1, r4
    febc:	4281      	cmp	r1, r0
    febe:	db08      	blt.n	fed2 <d_number.isra.0+0x4e>
    fec0:	fb04 3300 	mla	r3, r4, r0, r3
    fec4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    fec8:	6813      	ldr	r3, [r2, #0]
    feca:	1c59      	adds	r1, r3, #1
    fecc:	6011      	str	r1, [r2, #0]
    fece:	785b      	ldrb	r3, [r3, #1]
    fed0:	e7e9      	b.n	fea6 <d_number.isra.0+0x22>
    fed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fed6:	e7ed      	b.n	feb4 <d_number.isra.0+0x30>

0000fed8 <d_number_component>:
    fed8:	b538      	push	{r3, r4, r5, lr}
    feda:	4605      	mov	r5, r0
    fedc:	f7ff fe8c 	bl	fbf8 <d_make_empty>
    fee0:	4604      	mov	r4, r0
    fee2:	b130      	cbz	r0, fef2 <d_number_component+0x1a>
    fee4:	2342      	movs	r3, #66	; 0x42
    fee6:	7003      	strb	r3, [r0, #0]
    fee8:	f105 000c 	add.w	r0, r5, #12
    feec:	f7ff ffca 	bl	fe84 <d_number.isra.0>
    fef0:	60a0      	str	r0, [r4, #8]
    fef2:	4620      	mov	r0, r4
    fef4:	bd38      	pop	{r3, r4, r5, pc}

0000fef6 <d_compact_number>:
    fef6:	68c3      	ldr	r3, [r0, #12]
    fef8:	b510      	push	{r4, lr}
    fefa:	781b      	ldrb	r3, [r3, #0]
    fefc:	4604      	mov	r4, r0
    fefe:	2b5f      	cmp	r3, #95	; 0x5f
    ff00:	d010      	beq.n	ff24 <d_compact_number+0x2e>
    ff02:	2b6e      	cmp	r3, #110	; 0x6e
    ff04:	d102      	bne.n	ff0c <d_compact_number+0x16>
    ff06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ff0a:	bd10      	pop	{r4, pc}
    ff0c:	300c      	adds	r0, #12
    ff0e:	f7ff ffb9 	bl	fe84 <d_number.isra.0>
    ff12:	3001      	adds	r0, #1
    ff14:	d4f7      	bmi.n	ff06 <d_compact_number+0x10>
    ff16:	68e3      	ldr	r3, [r4, #12]
    ff18:	781a      	ldrb	r2, [r3, #0]
    ff1a:	2a5f      	cmp	r2, #95	; 0x5f
    ff1c:	d1f3      	bne.n	ff06 <d_compact_number+0x10>
    ff1e:	3301      	adds	r3, #1
    ff20:	60e3      	str	r3, [r4, #12]
    ff22:	e7f2      	b.n	ff0a <d_compact_number+0x14>
    ff24:	2000      	movs	r0, #0
    ff26:	e7f6      	b.n	ff16 <d_compact_number+0x20>

0000ff28 <d_template_param>:
    ff28:	b538      	push	{r3, r4, r5, lr}
    ff2a:	68c3      	ldr	r3, [r0, #12]
    ff2c:	4604      	mov	r4, r0
    ff2e:	781a      	ldrb	r2, [r3, #0]
    ff30:	2a54      	cmp	r2, #84	; 0x54
    ff32:	d001      	beq.n	ff38 <d_template_param+0x10>
    ff34:	2000      	movs	r0, #0
    ff36:	bd38      	pop	{r3, r4, r5, pc}
    ff38:	3301      	adds	r3, #1
    ff3a:	60c3      	str	r3, [r0, #12]
    ff3c:	f7ff ffdb 	bl	fef6 <d_compact_number>
    ff40:	1e05      	subs	r5, r0, #0
    ff42:	dbf7      	blt.n	ff34 <d_template_param+0xc>
    ff44:	4620      	mov	r0, r4
    ff46:	f7ff fe57 	bl	fbf8 <d_make_empty>
    ff4a:	2800      	cmp	r0, #0
    ff4c:	d0f3      	beq.n	ff36 <d_template_param+0xe>
    ff4e:	2305      	movs	r3, #5
    ff50:	6085      	str	r5, [r0, #8]
    ff52:	7003      	strb	r3, [r0, #0]
    ff54:	e7ef      	b.n	ff36 <d_template_param+0xe>

0000ff56 <d_source_name>:
    ff56:	b570      	push	{r4, r5, r6, lr}
    ff58:	4604      	mov	r4, r0
    ff5a:	300c      	adds	r0, #12
    ff5c:	f7ff ff92 	bl	fe84 <d_number.isra.0>
    ff60:	1e05      	subs	r5, r0, #0
    ff62:	dd30      	ble.n	ffc6 <d_source_name+0x70>
    ff64:	68e6      	ldr	r6, [r4, #12]
    ff66:	6863      	ldr	r3, [r4, #4]
    ff68:	1b9b      	subs	r3, r3, r6
    ff6a:	429d      	cmp	r5, r3
    ff6c:	dc29      	bgt.n	ffc2 <d_source_name+0x6c>
    ff6e:	68a2      	ldr	r2, [r4, #8]
    ff70:	1973      	adds	r3, r6, r5
    ff72:	0752      	lsls	r2, r2, #29
    ff74:	60e3      	str	r3, [r4, #12]
    ff76:	d504      	bpl.n	ff82 <d_source_name+0x2c>
    ff78:	5d72      	ldrb	r2, [r6, r5]
    ff7a:	2a24      	cmp	r2, #36	; 0x24
    ff7c:	bf04      	itt	eq
    ff7e:	3301      	addeq	r3, #1
    ff80:	60e3      	streq	r3, [r4, #12]
    ff82:	2d09      	cmp	r5, #9
    ff84:	dd1a      	ble.n	ffbc <d_source_name+0x66>
    ff86:	2208      	movs	r2, #8
    ff88:	4910      	ldr	r1, [pc, #64]	; (ffcc <d_source_name+0x76>)
    ff8a:	4630      	mov	r0, r6
    ff8c:	f014 fa75 	bl	2447a <memcmp>
    ff90:	b9a0      	cbnz	r0, ffbc <d_source_name+0x66>
    ff92:	7a33      	ldrb	r3, [r6, #8]
    ff94:	2b2e      	cmp	r3, #46	; 0x2e
    ff96:	d003      	beq.n	ffa0 <d_source_name+0x4a>
    ff98:	2b5f      	cmp	r3, #95	; 0x5f
    ff9a:	d001      	beq.n	ffa0 <d_source_name+0x4a>
    ff9c:	2b24      	cmp	r3, #36	; 0x24
    ff9e:	d10d      	bne.n	ffbc <d_source_name+0x66>
    ffa0:	7a73      	ldrb	r3, [r6, #9]
    ffa2:	2b4e      	cmp	r3, #78	; 0x4e
    ffa4:	d10a      	bne.n	ffbc <d_source_name+0x66>
    ffa6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    ffa8:	2215      	movs	r2, #21
    ffaa:	4909      	ldr	r1, [pc, #36]	; (ffd0 <d_source_name+0x7a>)
    ffac:	3016      	adds	r0, #22
    ffae:	1b45      	subs	r5, r0, r5
    ffb0:	62e5      	str	r5, [r4, #44]	; 0x2c
    ffb2:	4620      	mov	r0, r4
    ffb4:	f7ff fe70 	bl	fc98 <d_make_name>
    ffb8:	62a0      	str	r0, [r4, #40]	; 0x28
    ffba:	bd70      	pop	{r4, r5, r6, pc}
    ffbc:	462a      	mov	r2, r5
    ffbe:	4631      	mov	r1, r6
    ffc0:	e7f7      	b.n	ffb2 <d_source_name+0x5c>
    ffc2:	2000      	movs	r0, #0
    ffc4:	e7f8      	b.n	ffb8 <d_source_name+0x62>
    ffc6:	2000      	movs	r0, #0
    ffc8:	e7f7      	b.n	ffba <d_source_name+0x64>
    ffca:	bf00      	nop
    ffcc:	0002cb90 	.word	0x0002cb90
    ffd0:	0002cb99 	.word	0x0002cb99

0000ffd4 <d_abi_tags>:
    ffd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ffd6:	4604      	mov	r4, r0
    ffd8:	6a85      	ldr	r5, [r0, #40]	; 0x28
    ffda:	460a      	mov	r2, r1
    ffdc:	68e3      	ldr	r3, [r4, #12]
    ffde:	7819      	ldrb	r1, [r3, #0]
    ffe0:	2942      	cmp	r1, #66	; 0x42
    ffe2:	d003      	beq.n	ffec <d_abi_tags+0x18>
    ffe4:	4610      	mov	r0, r2
    ffe6:	62a5      	str	r5, [r4, #40]	; 0x28
    ffe8:	b003      	add	sp, #12
    ffea:	bd30      	pop	{r4, r5, pc}
    ffec:	3301      	adds	r3, #1
    ffee:	4620      	mov	r0, r4
    fff0:	9201      	str	r2, [sp, #4]
    fff2:	60e3      	str	r3, [r4, #12]
    fff4:	f7ff ffaf 	bl	ff56 <d_source_name>
    fff8:	9a01      	ldr	r2, [sp, #4]
    fffa:	4603      	mov	r3, r0
    fffc:	214c      	movs	r1, #76	; 0x4c
    fffe:	4620      	mov	r0, r4
   10000:	f7ff fe09 	bl	fc16 <d_make_comp>
   10004:	4602      	mov	r2, r0
   10006:	e7e9      	b.n	ffdc <d_abi_tags+0x8>

00010008 <d_call_offset>:
   10008:	b538      	push	{r3, r4, r5, lr}
   1000a:	4604      	mov	r4, r0
   1000c:	b939      	cbnz	r1, 1001e <d_call_offset+0x16>
   1000e:	68c3      	ldr	r3, [r0, #12]
   10010:	781a      	ldrb	r2, [r3, #0]
   10012:	b90a      	cbnz	r2, 10018 <d_call_offset+0x10>
   10014:	2000      	movs	r0, #0
   10016:	bd38      	pop	{r3, r4, r5, pc}
   10018:	1c5a      	adds	r2, r3, #1
   1001a:	60c2      	str	r2, [r0, #12]
   1001c:	7819      	ldrb	r1, [r3, #0]
   1001e:	2968      	cmp	r1, #104	; 0x68
   10020:	d10b      	bne.n	1003a <d_call_offset+0x32>
   10022:	f104 000c 	add.w	r0, r4, #12
   10026:	f7ff ff2d 	bl	fe84 <d_number.isra.0>
   1002a:	68e3      	ldr	r3, [r4, #12]
   1002c:	781a      	ldrb	r2, [r3, #0]
   1002e:	2a5f      	cmp	r2, #95	; 0x5f
   10030:	d1f0      	bne.n	10014 <d_call_offset+0xc>
   10032:	3301      	adds	r3, #1
   10034:	2001      	movs	r0, #1
   10036:	60e3      	str	r3, [r4, #12]
   10038:	e7ed      	b.n	10016 <d_call_offset+0xe>
   1003a:	2976      	cmp	r1, #118	; 0x76
   1003c:	d1ea      	bne.n	10014 <d_call_offset+0xc>
   1003e:	f104 050c 	add.w	r5, r4, #12
   10042:	4628      	mov	r0, r5
   10044:	f7ff ff1e 	bl	fe84 <d_number.isra.0>
   10048:	68e3      	ldr	r3, [r4, #12]
   1004a:	781a      	ldrb	r2, [r3, #0]
   1004c:	2a5f      	cmp	r2, #95	; 0x5f
   1004e:	d1e1      	bne.n	10014 <d_call_offset+0xc>
   10050:	3301      	adds	r3, #1
   10052:	4628      	mov	r0, r5
   10054:	60e3      	str	r3, [r4, #12]
   10056:	e7e6      	b.n	10026 <d_call_offset+0x1e>

00010058 <next_is_type_qual.isra.0>:
   10058:	7803      	ldrb	r3, [r0, #0]
   1005a:	2b72      	cmp	r3, #114	; 0x72
   1005c:	d012      	beq.n	10084 <next_is_type_qual.isra.0+0x2c>
   1005e:	2b56      	cmp	r3, #86	; 0x56
   10060:	d010      	beq.n	10084 <next_is_type_qual.isra.0+0x2c>
   10062:	2b4b      	cmp	r3, #75	; 0x4b
   10064:	d00e      	beq.n	10084 <next_is_type_qual.isra.0+0x2c>
   10066:	2b44      	cmp	r3, #68	; 0x44
   10068:	d10a      	bne.n	10080 <next_is_type_qual.isra.0+0x28>
   1006a:	7840      	ldrb	r0, [r0, #1]
   1006c:	f000 03df 	and.w	r3, r0, #223	; 0xdf
   10070:	2b4f      	cmp	r3, #79	; 0x4f
   10072:	d007      	beq.n	10084 <next_is_type_qual.isra.0+0x2c>
   10074:	3877      	subs	r0, #119	; 0x77
   10076:	2801      	cmp	r0, #1
   10078:	bf8c      	ite	hi
   1007a:	2000      	movhi	r0, #0
   1007c:	2001      	movls	r0, #1
   1007e:	4770      	bx	lr
   10080:	2000      	movs	r0, #0
   10082:	4770      	bx	lr
   10084:	2001      	movs	r0, #1
   10086:	4770      	bx	lr

00010088 <op_is_new_cast.isra.0>:
   10088:	6803      	ldr	r3, [r0, #0]
   1008a:	785a      	ldrb	r2, [r3, #1]
   1008c:	2a63      	cmp	r2, #99	; 0x63
   1008e:	d10a      	bne.n	100a6 <op_is_new_cast.isra.0+0x1e>
   10090:	7818      	ldrb	r0, [r3, #0]
   10092:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
   10096:	2b01      	cmp	r3, #1
   10098:	d907      	bls.n	100aa <op_is_new_cast.isra.0+0x22>
   1009a:	3872      	subs	r0, #114	; 0x72
   1009c:	2801      	cmp	r0, #1
   1009e:	bf8c      	ite	hi
   100a0:	2000      	movhi	r0, #0
   100a2:	2001      	movls	r0, #1
   100a4:	4770      	bx	lr
   100a6:	2000      	movs	r0, #0
   100a8:	4770      	bx	lr
   100aa:	2001      	movs	r0, #1
   100ac:	4770      	bx	lr

000100ae <d_discriminator>:
   100ae:	b538      	push	{r3, r4, r5, lr}
   100b0:	68c3      	ldr	r3, [r0, #12]
   100b2:	4604      	mov	r4, r0
   100b4:	781a      	ldrb	r2, [r3, #0]
   100b6:	2a5f      	cmp	r2, #95	; 0x5f
   100b8:	d001      	beq.n	100be <d_discriminator+0x10>
   100ba:	2001      	movs	r0, #1
   100bc:	bd38      	pop	{r3, r4, r5, pc}
   100be:	1c5a      	adds	r2, r3, #1
   100c0:	300c      	adds	r0, #12
   100c2:	6002      	str	r2, [r0, #0]
   100c4:	785a      	ldrb	r2, [r3, #1]
   100c6:	2a5f      	cmp	r2, #95	; 0x5f
   100c8:	bf05      	ittet	eq
   100ca:	3302      	addeq	r3, #2
   100cc:	2502      	moveq	r5, #2
   100ce:	2501      	movne	r5, #1
   100d0:	6003      	streq	r3, [r0, #0]
   100d2:	f7ff fed7 	bl	fe84 <d_number.isra.0>
   100d6:	2800      	cmp	r0, #0
   100d8:	db0a      	blt.n	100f0 <d_discriminator+0x42>
   100da:	2d02      	cmp	r5, #2
   100dc:	d1ed      	bne.n	100ba <d_discriminator+0xc>
   100de:	2809      	cmp	r0, #9
   100e0:	ddeb      	ble.n	100ba <d_discriminator+0xc>
   100e2:	68e3      	ldr	r3, [r4, #12]
   100e4:	781a      	ldrb	r2, [r3, #0]
   100e6:	2a5f      	cmp	r2, #95	; 0x5f
   100e8:	d102      	bne.n	100f0 <d_discriminator+0x42>
   100ea:	3301      	adds	r3, #1
   100ec:	60e3      	str	r3, [r4, #12]
   100ee:	e7e4      	b.n	100ba <d_discriminator+0xc>
   100f0:	2000      	movs	r0, #0
   100f2:	e7e3      	b.n	100bc <d_discriminator+0xe>

000100f4 <d_index_template_argument.part.0>:
   100f4:	b900      	cbnz	r0, 100f8 <d_index_template_argument.part.0+0x4>
   100f6:	4770      	bx	lr
   100f8:	7803      	ldrb	r3, [r0, #0]
   100fa:	2b2f      	cmp	r3, #47	; 0x2f
   100fc:	d107      	bne.n	1010e <d_index_template_argument.part.0+0x1a>
   100fe:	2900      	cmp	r1, #0
   10100:	dd04      	ble.n	1010c <d_index_template_argument.part.0+0x18>
   10102:	3901      	subs	r1, #1
   10104:	68c0      	ldr	r0, [r0, #12]
   10106:	e7f5      	b.n	100f4 <d_index_template_argument.part.0>
   10108:	6880      	ldr	r0, [r0, #8]
   1010a:	4770      	bx	lr
   1010c:	d0fc      	beq.n	10108 <d_index_template_argument.part.0+0x14>
   1010e:	2000      	movs	r0, #0
   10110:	4770      	bx	lr

00010112 <d_growable_string_callback_adapter>:
   10112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10116:	1c4b      	adds	r3, r1, #1
   10118:	4614      	mov	r4, r2
   1011a:	6852      	ldr	r2, [r2, #4]
   1011c:	4680      	mov	r8, r0
   1011e:	68a5      	ldr	r5, [r4, #8]
   10120:	460f      	mov	r7, r1
   10122:	4413      	add	r3, r2
   10124:	42ab      	cmp	r3, r5
   10126:	d91a      	bls.n	1015e <d_growable_string_callback_adapter+0x4c>
   10128:	68e2      	ldr	r2, [r4, #12]
   1012a:	b992      	cbnz	r2, 10152 <d_growable_string_callback_adapter+0x40>
   1012c:	2d00      	cmp	r5, #0
   1012e:	bf08      	it	eq
   10130:	2502      	moveq	r5, #2
   10132:	42ab      	cmp	r3, r5
   10134:	d80f      	bhi.n	10156 <d_growable_string_callback_adapter+0x44>
   10136:	4629      	mov	r1, r5
   10138:	6820      	ldr	r0, [r4, #0]
   1013a:	f011 faff 	bl	2173c <realloc>
   1013e:	4606      	mov	r6, r0
   10140:	b958      	cbnz	r0, 1015a <d_growable_string_callback_adapter+0x48>
   10142:	6820      	ldr	r0, [r4, #0]
   10144:	f010 ffd6 	bl	210f4 <free>
   10148:	2301      	movs	r3, #1
   1014a:	60a6      	str	r6, [r4, #8]
   1014c:	60e3      	str	r3, [r4, #12]
   1014e:	e9c4 6600 	strd	r6, r6, [r4]
   10152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10156:	006d      	lsls	r5, r5, #1
   10158:	e7eb      	b.n	10132 <d_growable_string_callback_adapter+0x20>
   1015a:	6020      	str	r0, [r4, #0]
   1015c:	60a5      	str	r5, [r4, #8]
   1015e:	68e5      	ldr	r5, [r4, #12]
   10160:	2d00      	cmp	r5, #0
   10162:	d1f6      	bne.n	10152 <d_growable_string_callback_adapter+0x40>
   10164:	463a      	mov	r2, r7
   10166:	4641      	mov	r1, r8
   10168:	e9d4 0300 	ldrd	r0, r3, [r4]
   1016c:	4418      	add	r0, r3
   1016e:	f014 f992 	bl	24496 <memcpy>
   10172:	e9d4 3200 	ldrd	r3, r2, [r4]
   10176:	443b      	add	r3, r7
   10178:	549d      	strb	r5, [r3, r2]
   1017a:	6861      	ldr	r1, [r4, #4]
   1017c:	4439      	add	r1, r7
   1017e:	6061      	str	r1, [r4, #4]
   10180:	e7e7      	b.n	10152 <d_growable_string_callback_adapter+0x40>

00010182 <d_lookup_template_argument.isra.0>:
   10182:	4603      	mov	r3, r0
   10184:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
   10188:	b918      	cbnz	r0, 10192 <d_lookup_template_argument.isra.0+0x10>
   1018a:	2201      	movs	r2, #1
   1018c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
   10190:	4770      	bx	lr
   10192:	6809      	ldr	r1, [r1, #0]
   10194:	6843      	ldr	r3, [r0, #4]
   10196:	2900      	cmp	r1, #0
   10198:	68d8      	ldr	r0, [r3, #12]
   1019a:	db00      	blt.n	1019e <d_lookup_template_argument.isra.0+0x1c>
   1019c:	e7aa      	b.n	100f4 <d_index_template_argument.part.0>
   1019e:	4770      	bx	lr

000101a0 <d_find_pack>:
   101a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   101a4:	4605      	mov	r5, r0
   101a6:	460c      	mov	r4, r1
   101a8:	2601      	movs	r6, #1
   101aa:	4f25      	ldr	r7, [pc, #148]	; (10240 <d_find_pack+0xa0>)
   101ac:	f8df 8094 	ldr.w	r8, [pc, #148]	; 10244 <d_find_pack+0xa4>
   101b0:	b16c      	cbz	r4, 101ce <d_find_pack+0x2e>
   101b2:	7823      	ldrb	r3, [r4, #0]
   101b4:	2b08      	cmp	r3, #8
   101b6:	d914      	bls.n	101e2 <d_find_pack+0x42>
   101b8:	2b2c      	cmp	r3, #44	; 0x2c
   101ba:	d829      	bhi.n	10210 <d_find_pack+0x70>
   101bc:	2b17      	cmp	r3, #23
   101be:	d92b      	bls.n	10218 <d_find_pack+0x78>
   101c0:	3b18      	subs	r3, #24
   101c2:	b2db      	uxtb	r3, r3
   101c4:	fa06 f303 	lsl.w	r3, r6, r3
   101c8:	ea13 0f08 	tst.w	r3, r8
   101cc:	d024      	beq.n	10218 <d_find_pack+0x78>
   101ce:	2000      	movs	r0, #0
   101d0:	e033      	b.n	1023a <d_find_pack+0x9a>
   101d2:	fa06 f303 	lsl.w	r3, r6, r3
   101d6:	423b      	tst	r3, r7
   101d8:	d1f9      	bne.n	101ce <d_find_pack+0x2e>
   101da:	079b      	lsls	r3, r3, #30
   101dc:	d51c      	bpl.n	10218 <d_find_pack+0x78>
   101de:	68e4      	ldr	r4, [r4, #12]
   101e0:	e7e6      	b.n	101b0 <d_find_pack+0x10>
   101e2:	2b08      	cmp	r3, #8
   101e4:	d818      	bhi.n	10218 <d_find_pack+0x78>
   101e6:	a201      	add	r2, pc, #4	; (adr r2, 101ec <d_find_pack+0x4c>)
   101e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   101ec:	000101cf 	.word	0x000101cf
   101f0:	00010219 	.word	0x00010219
   101f4:	00010219 	.word	0x00010219
   101f8:	00010219 	.word	0x00010219
   101fc:	00010219 	.word	0x00010219
   10200:	00010227 	.word	0x00010227
   10204:	000101cf 	.word	0x000101cf
   10208:	000101df 	.word	0x000101df
   1020c:	000101df 	.word	0x000101df
   10210:	3b32      	subs	r3, #50	; 0x32
   10212:	b2db      	uxtb	r3, r3
   10214:	2b1a      	cmp	r3, #26
   10216:	d9dc      	bls.n	101d2 <d_find_pack+0x32>
   10218:	68a1      	ldr	r1, [r4, #8]
   1021a:	4628      	mov	r0, r5
   1021c:	f7ff ffc0 	bl	101a0 <d_find_pack>
   10220:	2800      	cmp	r0, #0
   10222:	d0dc      	beq.n	101de <d_find_pack+0x3e>
   10224:	e009      	b.n	1023a <d_find_pack+0x9a>
   10226:	f104 0108 	add.w	r1, r4, #8
   1022a:	4628      	mov	r0, r5
   1022c:	f7ff ffa9 	bl	10182 <d_lookup_template_argument.isra.0>
   10230:	2800      	cmp	r0, #0
   10232:	d0cc      	beq.n	101ce <d_find_pack+0x2e>
   10234:	7803      	ldrb	r3, [r0, #0]
   10236:	2b2f      	cmp	r3, #47	; 0x2f
   10238:	d1c9      	bne.n	101ce <d_find_pack+0x2e>
   1023a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1023e:	bf00      	nop
   10240:	06718001 	.word	0x06718001
   10244:	00108001 	.word	0x00108001

00010248 <d_substitution>:
   10248:	68c2      	ldr	r2, [r0, #12]
   1024a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1024e:	7813      	ldrb	r3, [r2, #0]
   10250:	4604      	mov	r4, r0
   10252:	2b53      	cmp	r3, #83	; 0x53
   10254:	d14d      	bne.n	102f2 <d_substitution+0xaa>
   10256:	1c53      	adds	r3, r2, #1
   10258:	60c3      	str	r3, [r0, #12]
   1025a:	7853      	ldrb	r3, [r2, #1]
   1025c:	b163      	cbz	r3, 10278 <d_substitution+0x30>
   1025e:	1c93      	adds	r3, r2, #2
   10260:	60c3      	str	r3, [r0, #12]
   10262:	7853      	ldrb	r3, [r2, #1]
   10264:	2b5f      	cmp	r3, #95	; 0x5f
   10266:	d070      	beq.n	1034a <d_substitution+0x102>
   10268:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1026c:	2a09      	cmp	r2, #9
   1026e:	d960      	bls.n	10332 <d_substitution+0xea>
   10270:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   10274:	2a19      	cmp	r2, #25
   10276:	d95c      	bls.n	10332 <d_substitution+0xea>
   10278:	68a2      	ldr	r2, [r4, #8]
   1027a:	f002 0208 	and.w	r2, r2, #8
   1027e:	2a00      	cmp	r2, #0
   10280:	bf14      	ite	ne
   10282:	2601      	movne	r6, #1
   10284:	2600      	moveq	r6, #0
   10286:	d106      	bne.n	10296 <d_substitution+0x4e>
   10288:	b129      	cbz	r1, 10296 <d_substitution+0x4e>
   1028a:	68e2      	ldr	r2, [r4, #12]
   1028c:	7812      	ldrb	r2, [r2, #0]
   1028e:	3a43      	subs	r2, #67	; 0x43
   10290:	2a01      	cmp	r2, #1
   10292:	bf98      	it	ls
   10294:	460e      	movls	r6, r1
   10296:	2207      	movs	r2, #7
   10298:	4d31      	ldr	r5, [pc, #196]	; (10360 <d_substitution+0x118>)
   1029a:	7829      	ldrb	r1, [r5, #0]
   1029c:	4299      	cmp	r1, r3
   1029e:	d159      	bne.n	10354 <d_substitution+0x10c>
   102a0:	696f      	ldr	r7, [r5, #20]
   102a2:	b157      	cbz	r7, 102ba <d_substitution+0x72>
   102a4:	4620      	mov	r0, r4
   102a6:	f8d5 8018 	ldr.w	r8, [r5, #24]
   102aa:	f7ff fca5 	bl	fbf8 <d_make_empty>
   102ae:	b118      	cbz	r0, 102b8 <d_substitution+0x70>
   102b0:	2318      	movs	r3, #24
   102b2:	e9c0 7802 	strd	r7, r8, [r0, #8]
   102b6:	7003      	strb	r3, [r0, #0]
   102b8:	62a0      	str	r0, [r4, #40]	; 0x28
   102ba:	2e00      	cmp	r6, #0
   102bc:	d047      	beq.n	1034e <d_substitution+0x106>
   102be:	e9d5 6503 	ldrd	r6, r5, [r5, #12]
   102c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   102c4:	4620      	mov	r0, r4
   102c6:	442b      	add	r3, r5
   102c8:	62e3      	str	r3, [r4, #44]	; 0x2c
   102ca:	f7ff fc95 	bl	fbf8 <d_make_empty>
   102ce:	4601      	mov	r1, r0
   102d0:	b118      	cbz	r0, 102da <d_substitution+0x92>
   102d2:	2318      	movs	r3, #24
   102d4:	e9c0 6502 	strd	r6, r5, [r0, #8]
   102d8:	7003      	strb	r3, [r0, #0]
   102da:	68e3      	ldr	r3, [r4, #12]
   102dc:	781b      	ldrb	r3, [r3, #0]
   102de:	2b42      	cmp	r3, #66	; 0x42
   102e0:	d124      	bne.n	1032c <d_substitution+0xe4>
   102e2:	4620      	mov	r0, r4
   102e4:	f7ff fe76 	bl	ffd4 <d_abi_tags>
   102e8:	4601      	mov	r1, r0
   102ea:	4620      	mov	r0, r4
   102ec:	f7ff fd06 	bl	fcfc <d_add_substitution>
   102f0:	b9e0      	cbnz	r0, 1032c <d_substitution+0xe4>
   102f2:	2100      	movs	r1, #0
   102f4:	e01a      	b.n	1032c <d_substitution+0xe4>
   102f6:	4611      	mov	r1, r2
   102f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   102fc:	2a09      	cmp	r2, #9
   102fe:	d81b      	bhi.n	10338 <d_substitution+0xf0>
   10300:	fb00 3301 	mla	r3, r0, r1, r3
   10304:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   10308:	4291      	cmp	r1, r2
   1030a:	d8f2      	bhi.n	102f2 <d_substitution+0xaa>
   1030c:	68e1      	ldr	r1, [r4, #12]
   1030e:	780b      	ldrb	r3, [r1, #0]
   10310:	2b00      	cmp	r3, #0
   10312:	d0f0      	beq.n	102f6 <d_substitution+0xae>
   10314:	1c4b      	adds	r3, r1, #1
   10316:	60e3      	str	r3, [r4, #12]
   10318:	780b      	ldrb	r3, [r1, #0]
   1031a:	2b5f      	cmp	r3, #95	; 0x5f
   1031c:	d1eb      	bne.n	102f6 <d_substitution+0xae>
   1031e:	3201      	adds	r2, #1
   10320:	6a23      	ldr	r3, [r4, #32]
   10322:	4293      	cmp	r3, r2
   10324:	d9e5      	bls.n	102f2 <d_substitution+0xaa>
   10326:	69e3      	ldr	r3, [r4, #28]
   10328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   1032c:	4608      	mov	r0, r1
   1032e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10332:	2100      	movs	r1, #0
   10334:	2024      	movs	r0, #36	; 0x24
   10336:	e7df      	b.n	102f8 <d_substitution+0xb0>
   10338:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   1033c:	2a19      	cmp	r2, #25
   1033e:	d8d8      	bhi.n	102f2 <d_substitution+0xaa>
   10340:	fb00 3301 	mla	r3, r0, r1, r3
   10344:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
   10348:	e7de      	b.n	10308 <d_substitution+0xc0>
   1034a:	2200      	movs	r2, #0
   1034c:	e7e8      	b.n	10320 <d_substitution+0xd8>
   1034e:	e9d5 6501 	ldrd	r6, r5, [r5, #4]
   10352:	e7b6      	b.n	102c2 <d_substitution+0x7a>
   10354:	3a01      	subs	r2, #1
   10356:	f105 051c 	add.w	r5, r5, #28
   1035a:	d19e      	bne.n	1029a <d_substitution+0x52>
   1035c:	e7c9      	b.n	102f2 <d_substitution+0xaa>
   1035e:	bf00      	nop
   10360:	0002533c 	.word	0x0002533c

00010364 <d_expr_primary>:
   10364:	68c3      	ldr	r3, [r0, #12]
   10366:	b570      	push	{r4, r5, r6, lr}
   10368:	781a      	ldrb	r2, [r3, #0]
   1036a:	4604      	mov	r4, r0
   1036c:	2a4c      	cmp	r2, #76	; 0x4c
   1036e:	d001      	beq.n	10374 <d_expr_primary+0x10>
   10370:	2000      	movs	r0, #0
   10372:	bd70      	pop	{r4, r5, r6, pc}
   10374:	1c5a      	adds	r2, r3, #1
   10376:	60c2      	str	r2, [r0, #12]
   10378:	785a      	ldrb	r2, [r3, #1]
   1037a:	2a5f      	cmp	r2, #95	; 0x5f
   1037c:	d028      	beq.n	103d0 <d_expr_primary+0x6c>
   1037e:	2a5a      	cmp	r2, #90	; 0x5a
   10380:	d028      	beq.n	103d4 <d_expr_primary+0x70>
   10382:	f000 fa2b 	bl	107dc <d_type>
   10386:	4605      	mov	r5, r0
   10388:	2800      	cmp	r0, #0
   1038a:	d0f1      	beq.n	10370 <d_expr_primary+0xc>
   1038c:	7803      	ldrb	r3, [r0, #0]
   1038e:	2b27      	cmp	r3, #39	; 0x27
   10390:	d106      	bne.n	103a0 <d_expr_primary+0x3c>
   10392:	6882      	ldr	r2, [r0, #8]
   10394:	7c13      	ldrb	r3, [r2, #16]
   10396:	b11b      	cbz	r3, 103a0 <d_expr_primary+0x3c>
   10398:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1039a:	6852      	ldr	r2, [r2, #4]
   1039c:	1a9b      	subs	r3, r3, r2
   1039e:	62e3      	str	r3, [r4, #44]	; 0x2c
   103a0:	68e3      	ldr	r3, [r4, #12]
   103a2:	781a      	ldrb	r2, [r3, #0]
   103a4:	2a6e      	cmp	r2, #110	; 0x6e
   103a6:	bf05      	ittet	eq
   103a8:	3301      	addeq	r3, #1
   103aa:	263e      	moveq	r6, #62	; 0x3e
   103ac:	263d      	movne	r6, #61	; 0x3d
   103ae:	60e3      	streq	r3, [r4, #12]
   103b0:	68e1      	ldr	r1, [r4, #12]
   103b2:	68e2      	ldr	r2, [r4, #12]
   103b4:	7813      	ldrb	r3, [r2, #0]
   103b6:	2b45      	cmp	r3, #69	; 0x45
   103b8:	d11d      	bne.n	103f6 <d_expr_primary+0x92>
   103ba:	1a52      	subs	r2, r2, r1
   103bc:	4620      	mov	r0, r4
   103be:	f7ff fc6b 	bl	fc98 <d_make_name>
   103c2:	462a      	mov	r2, r5
   103c4:	4603      	mov	r3, r0
   103c6:	4631      	mov	r1, r6
   103c8:	4620      	mov	r0, r4
   103ca:	f7ff fc24 	bl	fc16 <d_make_comp>
   103ce:	e00b      	b.n	103e8 <d_expr_primary+0x84>
   103d0:	3302      	adds	r3, #2
   103d2:	60c3      	str	r3, [r0, #12]
   103d4:	68e3      	ldr	r3, [r4, #12]
   103d6:	781a      	ldrb	r2, [r3, #0]
   103d8:	2a5a      	cmp	r2, #90	; 0x5a
   103da:	d111      	bne.n	10400 <d_expr_primary+0x9c>
   103dc:	3301      	adds	r3, #1
   103de:	2100      	movs	r1, #0
   103e0:	4620      	mov	r0, r4
   103e2:	60e3      	str	r3, [r4, #12]
   103e4:	f001 f912 	bl	1160c <d_encoding>
   103e8:	68e3      	ldr	r3, [r4, #12]
   103ea:	781a      	ldrb	r2, [r3, #0]
   103ec:	2a45      	cmp	r2, #69	; 0x45
   103ee:	d1bf      	bne.n	10370 <d_expr_primary+0xc>
   103f0:	3301      	adds	r3, #1
   103f2:	60e3      	str	r3, [r4, #12]
   103f4:	e7bd      	b.n	10372 <d_expr_primary+0xe>
   103f6:	2b00      	cmp	r3, #0
   103f8:	d0ba      	beq.n	10370 <d_expr_primary+0xc>
   103fa:	3201      	adds	r2, #1
   103fc:	60e2      	str	r2, [r4, #12]
   103fe:	e7d8      	b.n	103b2 <d_expr_primary+0x4e>
   10400:	2000      	movs	r0, #0
   10402:	e7f1      	b.n	103e8 <d_expr_primary+0x84>

00010404 <d_expression_1>:
   10404:	68c3      	ldr	r3, [r0, #12]
   10406:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10408:	781a      	ldrb	r2, [r3, #0]
   1040a:	4604      	mov	r4, r0
   1040c:	2a4c      	cmp	r2, #76	; 0x4c
   1040e:	d103      	bne.n	10418 <d_expression_1+0x14>
   10410:	b003      	add	sp, #12
   10412:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   10416:	e7a5      	b.n	10364 <d_expr_primary>
   10418:	2a54      	cmp	r2, #84	; 0x54
   1041a:	d103      	bne.n	10424 <d_expression_1+0x20>
   1041c:	b003      	add	sp, #12
   1041e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   10422:	e581      	b.n	ff28 <d_template_param>
   10424:	2a73      	cmp	r2, #115	; 0x73
   10426:	d12d      	bne.n	10484 <d_expression_1+0x80>
   10428:	785a      	ldrb	r2, [r3, #1]
   1042a:	2a72      	cmp	r2, #114	; 0x72
   1042c:	d120      	bne.n	10470 <d_expression_1+0x6c>
   1042e:	3302      	adds	r3, #2
   10430:	60c3      	str	r3, [r0, #12]
   10432:	f000 f9d3 	bl	107dc <d_type>
   10436:	4605      	mov	r5, r0
   10438:	4620      	mov	r0, r4
   1043a:	f000 fea0 	bl	1117e <d_unqualified_name>
   1043e:	68e3      	ldr	r3, [r4, #12]
   10440:	781b      	ldrb	r3, [r3, #0]
   10442:	2b49      	cmp	r3, #73	; 0x49
   10444:	d008      	beq.n	10458 <d_expression_1+0x54>
   10446:	4603      	mov	r3, r0
   10448:	462a      	mov	r2, r5
   1044a:	2101      	movs	r1, #1
   1044c:	4620      	mov	r0, r4
   1044e:	b003      	add	sp, #12
   10450:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   10454:	f7ff bbdf 	b.w	fc16 <d_make_comp>
   10458:	9001      	str	r0, [sp, #4]
   1045a:	4620      	mov	r0, r4
   1045c:	f000 fcf5 	bl	10e4a <d_template_args>
   10460:	9a01      	ldr	r2, [sp, #4]
   10462:	4603      	mov	r3, r0
   10464:	2104      	movs	r1, #4
   10466:	4620      	mov	r0, r4
   10468:	f7ff fbd5 	bl	fc16 <d_make_comp>
   1046c:	4603      	mov	r3, r0
   1046e:	e7eb      	b.n	10448 <d_expression_1+0x44>
   10470:	2a70      	cmp	r2, #112	; 0x70
   10472:	d162      	bne.n	1053a <d_expression_1+0x136>
   10474:	3302      	adds	r3, #2
   10476:	60c3      	str	r3, [r0, #12]
   10478:	f7ff ffc4 	bl	10404 <d_expression_1>
   1047c:	2300      	movs	r3, #0
   1047e:	4602      	mov	r2, r0
   10480:	214b      	movs	r1, #75	; 0x4b
   10482:	e7e3      	b.n	1044c <d_expression_1+0x48>
   10484:	2a66      	cmp	r2, #102	; 0x66
   10486:	d11f      	bne.n	104c8 <d_expression_1+0xc4>
   10488:	785a      	ldrb	r2, [r3, #1]
   1048a:	2a70      	cmp	r2, #112	; 0x70
   1048c:	d155      	bne.n	1053a <d_expression_1+0x136>
   1048e:	1c9a      	adds	r2, r3, #2
   10490:	60c2      	str	r2, [r0, #12]
   10492:	789a      	ldrb	r2, [r3, #2]
   10494:	2a54      	cmp	r2, #84	; 0x54
   10496:	d10d      	bne.n	104b4 <d_expression_1+0xb0>
   10498:	3303      	adds	r3, #3
   1049a:	2600      	movs	r6, #0
   1049c:	60c3      	str	r3, [r0, #12]
   1049e:	4620      	mov	r0, r4
   104a0:	f7ff fbaa 	bl	fbf8 <d_make_empty>
   104a4:	4605      	mov	r5, r0
   104a6:	b110      	cbz	r0, 104ae <d_expression_1+0xaa>
   104a8:	2306      	movs	r3, #6
   104aa:	6086      	str	r6, [r0, #8]
   104ac:	7003      	strb	r3, [r0, #0]
   104ae:	4628      	mov	r0, r5
   104b0:	b003      	add	sp, #12
   104b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   104b4:	f7ff fd1f 	bl	fef6 <d_compact_number>
   104b8:	43c3      	mvns	r3, r0
   104ba:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
   104be:	d101      	bne.n	104c4 <d_expression_1+0xc0>
   104c0:	2500      	movs	r5, #0
   104c2:	e7f4      	b.n	104ae <d_expression_1+0xaa>
   104c4:	1c46      	adds	r6, r0, #1
   104c6:	e7ea      	b.n	1049e <d_expression_1+0x9a>
   104c8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   104cc:	2909      	cmp	r1, #9
   104ce:	d906      	bls.n	104de <d_expression_1+0xda>
   104d0:	2a6f      	cmp	r2, #111	; 0x6f
   104d2:	d115      	bne.n	10500 <d_expression_1+0xfc>
   104d4:	785a      	ldrb	r2, [r3, #1]
   104d6:	2a6e      	cmp	r2, #110	; 0x6e
   104d8:	d12f      	bne.n	1053a <d_expression_1+0x136>
   104da:	3302      	adds	r3, #2
   104dc:	60c3      	str	r3, [r0, #12]
   104de:	4620      	mov	r0, r4
   104e0:	f000 fe4d 	bl	1117e <d_unqualified_name>
   104e4:	4605      	mov	r5, r0
   104e6:	2800      	cmp	r0, #0
   104e8:	d0ea      	beq.n	104c0 <d_expression_1+0xbc>
   104ea:	68e3      	ldr	r3, [r4, #12]
   104ec:	781b      	ldrb	r3, [r3, #0]
   104ee:	2b49      	cmp	r3, #73	; 0x49
   104f0:	d1dd      	bne.n	104ae <d_expression_1+0xaa>
   104f2:	4620      	mov	r0, r4
   104f4:	f000 fca9 	bl	10e4a <d_template_args>
   104f8:	462a      	mov	r2, r5
   104fa:	4603      	mov	r3, r0
   104fc:	2104      	movs	r1, #4
   104fe:	e7a5      	b.n	1044c <d_expression_1+0x48>
   10500:	2a69      	cmp	r2, #105	; 0x69
   10502:	d001      	beq.n	10508 <d_expression_1+0x104>
   10504:	2a74      	cmp	r2, #116	; 0x74
   10506:	d118      	bne.n	1053a <d_expression_1+0x136>
   10508:	7859      	ldrb	r1, [r3, #1]
   1050a:	296c      	cmp	r1, #108	; 0x6c
   1050c:	d115      	bne.n	1053a <d_expression_1+0x136>
   1050e:	3302      	adds	r3, #2
   10510:	2a74      	cmp	r2, #116	; 0x74
   10512:	60e3      	str	r3, [r4, #12]
   10514:	d10f      	bne.n	10536 <d_expression_1+0x132>
   10516:	4620      	mov	r0, r4
   10518:	f000 f960 	bl	107dc <d_type>
   1051c:	4605      	mov	r5, r0
   1051e:	68e3      	ldr	r3, [r4, #12]
   10520:	785b      	ldrb	r3, [r3, #1]
   10522:	2b00      	cmp	r3, #0
   10524:	d0cc      	beq.n	104c0 <d_expression_1+0xbc>
   10526:	2145      	movs	r1, #69	; 0x45
   10528:	4620      	mov	r0, r4
   1052a:	f000 f92a 	bl	10782 <d_exprlist>
   1052e:	462a      	mov	r2, r5
   10530:	4603      	mov	r3, r0
   10532:	2131      	movs	r1, #49	; 0x31
   10534:	e78a      	b.n	1044c <d_expression_1+0x48>
   10536:	2500      	movs	r5, #0
   10538:	e7f1      	b.n	1051e <d_expression_1+0x11a>
   1053a:	4620      	mov	r0, r4
   1053c:	f000 fc8f 	bl	10e5e <d_operator_name>
   10540:	4605      	mov	r5, r0
   10542:	2800      	cmp	r0, #0
   10544:	d0bc      	beq.n	104c0 <d_expression_1+0xbc>
   10546:	7803      	ldrb	r3, [r0, #0]
   10548:	2b32      	cmp	r3, #50	; 0x32
   1054a:	d113      	bne.n	10574 <d_expression_1+0x170>
   1054c:	6883      	ldr	r3, [r0, #8]
   1054e:	4982      	ldr	r1, [pc, #520]	; (10758 <d_expression_1+0x354>)
   10550:	689a      	ldr	r2, [r3, #8]
   10552:	681e      	ldr	r6, [r3, #0]
   10554:	3a02      	subs	r2, #2
   10556:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10558:	4630      	mov	r0, r6
   1055a:	4413      	add	r3, r2
   1055c:	62e3      	str	r3, [r4, #44]	; 0x2c
   1055e:	f005 fc81 	bl	15e64 <strcmp>
   10562:	68ab      	ldr	r3, [r5, #8]
   10564:	b9d0      	cbnz	r0, 1059c <d_expression_1+0x198>
   10566:	4620      	mov	r0, r4
   10568:	f000 f938 	bl	107dc <d_type>
   1056c:	4603      	mov	r3, r0
   1056e:	462a      	mov	r2, r5
   10570:	2137      	movs	r1, #55	; 0x37
   10572:	e76b      	b.n	1044c <d_expression_1+0x48>
   10574:	2b34      	cmp	r3, #52	; 0x34
   10576:	d03c      	beq.n	105f2 <d_expression_1+0x1ee>
   10578:	d8a2      	bhi.n	104c0 <d_expression_1+0xbc>
   1057a:	2b33      	cmp	r3, #51	; 0x33
   1057c:	d1a0      	bne.n	104c0 <d_expression_1+0xbc>
   1057e:	6883      	ldr	r3, [r0, #8]
   10580:	2b03      	cmp	r3, #3
   10582:	d89d      	bhi.n	104c0 <d_expression_1+0xbc>
   10584:	a201      	add	r2, pc, #4	; (adr r2, 1058c <d_expression_1+0x188>)
   10586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1058a:	bf00      	nop
   1058c:	000105ab 	.word	0x000105ab
   10590:	00010609 	.word	0x00010609
   10594:	000104c1 	.word	0x000104c1
   10598:	000104c1 	.word	0x000104c1
   1059c:	68df      	ldr	r7, [r3, #12]
   1059e:	2f03      	cmp	r7, #3
   105a0:	d88e      	bhi.n	104c0 <d_expression_1+0xbc>
   105a2:	e8df f007 	tbb	[pc, r7]
   105a6:	0602      	.short	0x0602
   105a8:	7c36      	.short	0x7c36
   105aa:	2300      	movs	r3, #0
   105ac:	462a      	mov	r2, r5
   105ae:	2136      	movs	r1, #54	; 0x36
   105b0:	e74c      	b.n	1044c <d_expression_1+0x48>
   105b2:	7833      	ldrb	r3, [r6, #0]
   105b4:	2b70      	cmp	r3, #112	; 0x70
   105b6:	d001      	beq.n	105bc <d_expression_1+0x1b8>
   105b8:	2b6d      	cmp	r3, #109	; 0x6d
   105ba:	d108      	bne.n	105ce <d_expression_1+0x1ca>
   105bc:	7872      	ldrb	r2, [r6, #1]
   105be:	429a      	cmp	r2, r3
   105c0:	d105      	bne.n	105ce <d_expression_1+0x1ca>
   105c2:	68e3      	ldr	r3, [r4, #12]
   105c4:	781a      	ldrb	r2, [r3, #0]
   105c6:	2a5f      	cmp	r2, #95	; 0x5f
   105c8:	d102      	bne.n	105d0 <d_expression_1+0x1cc>
   105ca:	3301      	adds	r3, #1
   105cc:	60e3      	str	r3, [r4, #12]
   105ce:	2700      	movs	r7, #0
   105d0:	4962      	ldr	r1, [pc, #392]	; (1075c <d_expression_1+0x358>)
   105d2:	4630      	mov	r0, r6
   105d4:	f005 fc46 	bl	15e64 <strcmp>
   105d8:	b9b8      	cbnz	r0, 1060a <d_expression_1+0x206>
   105da:	4620      	mov	r0, r4
   105dc:	f000 fc06 	bl	10dec <d_template_args_1>
   105e0:	2f00      	cmp	r7, #0
   105e2:	d0c3      	beq.n	1056c <d_expression_1+0x168>
   105e4:	4603      	mov	r3, r0
   105e6:	4602      	mov	r2, r0
   105e8:	2139      	movs	r1, #57	; 0x39
   105ea:	4620      	mov	r0, r4
   105ec:	f7ff fb13 	bl	fc16 <d_make_comp>
   105f0:	e7bc      	b.n	1056c <d_expression_1+0x168>
   105f2:	68e3      	ldr	r3, [r4, #12]
   105f4:	781a      	ldrb	r2, [r3, #0]
   105f6:	2a5f      	cmp	r2, #95	; 0x5f
   105f8:	d106      	bne.n	10608 <d_expression_1+0x204>
   105fa:	3301      	adds	r3, #1
   105fc:	2145      	movs	r1, #69	; 0x45
   105fe:	4620      	mov	r0, r4
   10600:	60e3      	str	r3, [r4, #12]
   10602:	f000 f8be 	bl	10782 <d_exprlist>
   10606:	e7b1      	b.n	1056c <d_expression_1+0x168>
   10608:	2700      	movs	r7, #0
   1060a:	4620      	mov	r0, r4
   1060c:	f7ff fefa 	bl	10404 <d_expression_1>
   10610:	e7e6      	b.n	105e0 <d_expression_1+0x1dc>
   10612:	68a8      	ldr	r0, [r5, #8]
   10614:	f7ff fd38 	bl	10088 <op_is_new_cast.isra.0>
   10618:	b1b8      	cbz	r0, 1064a <d_expression_1+0x246>
   1061a:	4620      	mov	r0, r4
   1061c:	f000 f8de 	bl	107dc <d_type>
   10620:	4607      	mov	r7, r0
   10622:	494f      	ldr	r1, [pc, #316]	; (10760 <d_expression_1+0x35c>)
   10624:	4630      	mov	r0, r6
   10626:	f005 fc1d 	bl	15e64 <strcmp>
   1062a:	b9c0      	cbnz	r0, 1065e <d_expression_1+0x25a>
   1062c:	2145      	movs	r1, #69	; 0x45
   1062e:	4620      	mov	r0, r4
   10630:	f000 f8a7 	bl	10782 <d_exprlist>
   10634:	4606      	mov	r6, r0
   10636:	4633      	mov	r3, r6
   10638:	463a      	mov	r2, r7
   1063a:	2139      	movs	r1, #57	; 0x39
   1063c:	4620      	mov	r0, r4
   1063e:	f7ff faea 	bl	fc16 <d_make_comp>
   10642:	462a      	mov	r2, r5
   10644:	4603      	mov	r3, r0
   10646:	2138      	movs	r1, #56	; 0x38
   10648:	e700      	b.n	1044c <d_expression_1+0x48>
   1064a:	7833      	ldrb	r3, [r6, #0]
   1064c:	4620      	mov	r0, r4
   1064e:	2b66      	cmp	r3, #102	; 0x66
   10650:	d102      	bne.n	10658 <d_expression_1+0x254>
   10652:	f000 fc04 	bl	10e5e <d_operator_name>
   10656:	e7e3      	b.n	10620 <d_expression_1+0x21c>
   10658:	f7ff fed4 	bl	10404 <d_expression_1>
   1065c:	e7e0      	b.n	10620 <d_expression_1+0x21c>
   1065e:	4941      	ldr	r1, [pc, #260]	; (10764 <d_expression_1+0x360>)
   10660:	4630      	mov	r0, r6
   10662:	f005 fbff 	bl	15e64 <strcmp>
   10666:	b120      	cbz	r0, 10672 <d_expression_1+0x26e>
   10668:	493f      	ldr	r1, [pc, #252]	; (10768 <d_expression_1+0x364>)
   1066a:	4630      	mov	r0, r6
   1066c:	f005 fbfa 	bl	15e64 <strcmp>
   10670:	b988      	cbnz	r0, 10696 <d_expression_1+0x292>
   10672:	4620      	mov	r0, r4
   10674:	f000 fd83 	bl	1117e <d_unqualified_name>
   10678:	68e3      	ldr	r3, [r4, #12]
   1067a:	4606      	mov	r6, r0
   1067c:	781b      	ldrb	r3, [r3, #0]
   1067e:	2b49      	cmp	r3, #73	; 0x49
   10680:	d1d9      	bne.n	10636 <d_expression_1+0x232>
   10682:	4620      	mov	r0, r4
   10684:	f000 fbe1 	bl	10e4a <d_template_args>
   10688:	4632      	mov	r2, r6
   1068a:	4603      	mov	r3, r0
   1068c:	2104      	movs	r1, #4
   1068e:	4620      	mov	r0, r4
   10690:	f7ff fac1 	bl	fc16 <d_make_comp>
   10694:	e7ce      	b.n	10634 <d_expression_1+0x230>
   10696:	4620      	mov	r0, r4
   10698:	f7ff feb4 	bl	10404 <d_expression_1>
   1069c:	e7ca      	b.n	10634 <d_expression_1+0x230>
   1069e:	4933      	ldr	r1, [pc, #204]	; (1076c <d_expression_1+0x368>)
   106a0:	4630      	mov	r0, r6
   106a2:	f005 fbdf 	bl	15e64 <strcmp>
   106a6:	b9e8      	cbnz	r0, 106e4 <d_expression_1+0x2e0>
   106a8:	4620      	mov	r0, r4
   106aa:	f7ff feab 	bl	10404 <d_expression_1>
   106ae:	4606      	mov	r6, r0
   106b0:	4620      	mov	r0, r4
   106b2:	f7ff fea7 	bl	10404 <d_expression_1>
   106b6:	4607      	mov	r7, r0
   106b8:	4620      	mov	r0, r4
   106ba:	f7ff fea3 	bl	10404 <d_expression_1>
   106be:	2800      	cmp	r0, #0
   106c0:	f43f aefe 	beq.w	104c0 <d_expression_1+0xbc>
   106c4:	4603      	mov	r3, r0
   106c6:	463a      	mov	r2, r7
   106c8:	213c      	movs	r1, #60	; 0x3c
   106ca:	4620      	mov	r0, r4
   106cc:	f7ff faa3 	bl	fc16 <d_make_comp>
   106d0:	4632      	mov	r2, r6
   106d2:	4603      	mov	r3, r0
   106d4:	213b      	movs	r1, #59	; 0x3b
   106d6:	4620      	mov	r0, r4
   106d8:	f7ff fa9d 	bl	fc16 <d_make_comp>
   106dc:	462a      	mov	r2, r5
   106de:	4603      	mov	r3, r0
   106e0:	213a      	movs	r1, #58	; 0x3a
   106e2:	e6b3      	b.n	1044c <d_expression_1+0x48>
   106e4:	7833      	ldrb	r3, [r6, #0]
   106e6:	2b66      	cmp	r3, #102	; 0x66
   106e8:	d103      	bne.n	106f2 <d_expression_1+0x2ee>
   106ea:	4620      	mov	r0, r4
   106ec:	f000 fbb7 	bl	10e5e <d_operator_name>
   106f0:	e7dd      	b.n	106ae <d_expression_1+0x2aa>
   106f2:	2b6e      	cmp	r3, #110	; 0x6e
   106f4:	f47f aee4 	bne.w	104c0 <d_expression_1+0xbc>
   106f8:	7873      	ldrb	r3, [r6, #1]
   106fa:	2b77      	cmp	r3, #119	; 0x77
   106fc:	d002      	beq.n	10704 <d_expression_1+0x300>
   106fe:	2b61      	cmp	r3, #97	; 0x61
   10700:	f47f aede 	bne.w	104c0 <d_expression_1+0xbc>
   10704:	215f      	movs	r1, #95	; 0x5f
   10706:	4620      	mov	r0, r4
   10708:	f000 f83b 	bl	10782 <d_exprlist>
   1070c:	4606      	mov	r6, r0
   1070e:	4620      	mov	r0, r4
   10710:	f000 f864 	bl	107dc <d_type>
   10714:	68e3      	ldr	r3, [r4, #12]
   10716:	4607      	mov	r7, r0
   10718:	781a      	ldrb	r2, [r3, #0]
   1071a:	2a45      	cmp	r2, #69	; 0x45
   1071c:	d103      	bne.n	10726 <d_expression_1+0x322>
   1071e:	3301      	adds	r3, #1
   10720:	2000      	movs	r0, #0
   10722:	60e3      	str	r3, [r4, #12]
   10724:	e7ce      	b.n	106c4 <d_expression_1+0x2c0>
   10726:	2a70      	cmp	r2, #112	; 0x70
   10728:	d10a      	bne.n	10740 <d_expression_1+0x33c>
   1072a:	785a      	ldrb	r2, [r3, #1]
   1072c:	2a69      	cmp	r2, #105	; 0x69
   1072e:	f47f aec7 	bne.w	104c0 <d_expression_1+0xbc>
   10732:	3302      	adds	r3, #2
   10734:	2145      	movs	r1, #69	; 0x45
   10736:	4620      	mov	r0, r4
   10738:	60e3      	str	r3, [r4, #12]
   1073a:	f000 f822 	bl	10782 <d_exprlist>
   1073e:	e7c1      	b.n	106c4 <d_expression_1+0x2c0>
   10740:	2a69      	cmp	r2, #105	; 0x69
   10742:	f47f aebd 	bne.w	104c0 <d_expression_1+0xbc>
   10746:	785b      	ldrb	r3, [r3, #1]
   10748:	2b6c      	cmp	r3, #108	; 0x6c
   1074a:	f47f aeb9 	bne.w	104c0 <d_expression_1+0xbc>
   1074e:	4620      	mov	r0, r4
   10750:	f7ff fe58 	bl	10404 <d_expression_1>
   10754:	e7b6      	b.n	106c4 <d_expression_1+0x2c0>
   10756:	bf00      	nop
   10758:	0002d034 	.word	0x0002d034
   1075c:	0002cbb8 	.word	0x0002cbb8
   10760:	0002cbaf 	.word	0x0002cbaf
   10764:	0002cbb2 	.word	0x0002cbb2
   10768:	0002ce52 	.word	0x0002ce52
   1076c:	0002cbb5 	.word	0x0002cbb5

00010770 <d_expression>:
   10770:	b538      	push	{r3, r4, r5, lr}
   10772:	2301      	movs	r3, #1
   10774:	6b05      	ldr	r5, [r0, #48]	; 0x30
   10776:	4604      	mov	r4, r0
   10778:	6303      	str	r3, [r0, #48]	; 0x30
   1077a:	f7ff fe43 	bl	10404 <d_expression_1>
   1077e:	6325      	str	r5, [r4, #48]	; 0x30
   10780:	bd38      	pop	{r3, r4, r5, pc}

00010782 <d_exprlist>:
   10782:	68c2      	ldr	r2, [r0, #12]
   10784:	2300      	movs	r3, #0
   10786:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10788:	460d      	mov	r5, r1
   1078a:	7811      	ldrb	r1, [r2, #0]
   1078c:	4604      	mov	r4, r0
   1078e:	9301      	str	r3, [sp, #4]
   10790:	42a9      	cmp	r1, r5
   10792:	d108      	bne.n	107a6 <d_exprlist+0x24>
   10794:	3201      	adds	r2, #1
   10796:	212e      	movs	r1, #46	; 0x2e
   10798:	60c2      	str	r2, [r0, #12]
   1079a:	461a      	mov	r2, r3
   1079c:	b002      	add	sp, #8
   1079e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   107a2:	f7ff ba38 	b.w	fc16 <d_make_comp>
   107a6:	ae01      	add	r6, sp, #4
   107a8:	4620      	mov	r0, r4
   107aa:	f7ff ffe1 	bl	10770 <d_expression>
   107ae:	4602      	mov	r2, r0
   107b0:	b910      	cbnz	r0, 107b8 <d_exprlist+0x36>
   107b2:	2000      	movs	r0, #0
   107b4:	b002      	add	sp, #8
   107b6:	bd70      	pop	{r4, r5, r6, pc}
   107b8:	2300      	movs	r3, #0
   107ba:	212e      	movs	r1, #46	; 0x2e
   107bc:	4620      	mov	r0, r4
   107be:	f7ff fa2a 	bl	fc16 <d_make_comp>
   107c2:	6030      	str	r0, [r6, #0]
   107c4:	2800      	cmp	r0, #0
   107c6:	d0f4      	beq.n	107b2 <d_exprlist+0x30>
   107c8:	68e3      	ldr	r3, [r4, #12]
   107ca:	f100 060c 	add.w	r6, r0, #12
   107ce:	781a      	ldrb	r2, [r3, #0]
   107d0:	42aa      	cmp	r2, r5
   107d2:	d1e9      	bne.n	107a8 <d_exprlist+0x26>
   107d4:	3301      	adds	r3, #1
   107d6:	9801      	ldr	r0, [sp, #4]
   107d8:	60e3      	str	r3, [r4, #12]
   107da:	e7eb      	b.n	107b4 <d_exprlist+0x32>

000107dc <d_type>:
   107dc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   107e0:	68c2      	ldr	r2, [r0, #12]
   107e2:	4604      	mov	r4, r0
   107e4:	4610      	mov	r0, r2
   107e6:	f7ff fc37 	bl	10058 <next_is_type_qual.isra.0>
   107ea:	b350      	cbz	r0, 10842 <d_type+0x66>
   107ec:	2200      	movs	r2, #0
   107ee:	a903      	add	r1, sp, #12
   107f0:	4620      	mov	r0, r4
   107f2:	f000 fbd9 	bl	10fa8 <d_cv_qualifiers>
   107f6:	4605      	mov	r5, r0
   107f8:	b918      	cbnz	r0, 10802 <d_type+0x26>
   107fa:	2000      	movs	r0, #0
   107fc:	b004      	add	sp, #16
   107fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10802:	68e3      	ldr	r3, [r4, #12]
   10804:	4620      	mov	r0, r4
   10806:	781b      	ldrb	r3, [r3, #0]
   10808:	2b46      	cmp	r3, #70	; 0x46
   1080a:	d117      	bne.n	1083c <d_type+0x60>
   1080c:	f000 fc88 	bl	11120 <d_function_type>
   10810:	6028      	str	r0, [r5, #0]
   10812:	682b      	ldr	r3, [r5, #0]
   10814:	2b00      	cmp	r3, #0
   10816:	d0f0      	beq.n	107fa <d_type+0x1e>
   10818:	781a      	ldrb	r2, [r3, #0]
   1081a:	3a1f      	subs	r2, #31
   1081c:	2a01      	cmp	r2, #1
   1081e:	d805      	bhi.n	1082c <d_type+0x50>
   10820:	9903      	ldr	r1, [sp, #12]
   10822:	689a      	ldr	r2, [r3, #8]
   10824:	6099      	str	r1, [r3, #8]
   10826:	682b      	ldr	r3, [r5, #0]
   10828:	9303      	str	r3, [sp, #12]
   1082a:	602a      	str	r2, [r5, #0]
   1082c:	9903      	ldr	r1, [sp, #12]
   1082e:	4620      	mov	r0, r4
   10830:	f7ff fa64 	bl	fcfc <d_add_substitution>
   10834:	2800      	cmp	r0, #0
   10836:	f040 80b4 	bne.w	109a2 <d_type+0x1c6>
   1083a:	e7de      	b.n	107fa <d_type+0x1e>
   1083c:	f7ff ffce 	bl	107dc <d_type>
   10840:	e7e6      	b.n	10810 <d_type+0x34>
   10842:	7811      	ldrb	r1, [r2, #0]
   10844:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   10848:	2b4a      	cmp	r3, #74	; 0x4a
   1084a:	d8d6      	bhi.n	107fa <d_type+0x1e>
   1084c:	a001      	add	r0, pc, #4	; (adr r0, 10854 <d_type+0x78>)
   1084e:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   10852:	bf00      	nop
   10854:	000109c9 	.word	0x000109c9
   10858:	000109c9 	.word	0x000109c9
   1085c:	000109c9 	.word	0x000109c9
   10860:	000109c9 	.word	0x000109c9
   10864:	000109c9 	.word	0x000109c9
   10868:	000109c9 	.word	0x000109c9
   1086c:	000109c9 	.word	0x000109c9
   10870:	000109c9 	.word	0x000109c9
   10874:	000109c9 	.word	0x000109c9
   10878:	000109c9 	.word	0x000109c9
   1087c:	000107fb 	.word	0x000107fb
   10880:	000107fb 	.word	0x000107fb
   10884:	000107fb 	.word	0x000107fb
   10888:	000107fb 	.word	0x000107fb
   1088c:	000107fb 	.word	0x000107fb
   10890:	000107fb 	.word	0x000107fb
   10894:	000107fb 	.word	0x000107fb
   10898:	000109d1 	.word	0x000109d1
   1089c:	000107fb 	.word	0x000107fb
   108a0:	00010b37 	.word	0x00010b37
   108a4:	00010b93 	.word	0x00010b93
   108a8:	000107fb 	.word	0x000107fb
   108ac:	000109bf 	.word	0x000109bf
   108b0:	00010b49 	.word	0x00010b49
   108b4:	000107fb 	.word	0x000107fb
   108b8:	000107fb 	.word	0x000107fb
   108bc:	000107fb 	.word	0x000107fb
   108c0:	000107fb 	.word	0x000107fb
   108c4:	000107fb 	.word	0x000107fb
   108c8:	00010a23 	.word	0x00010a23
   108cc:	000109c9 	.word	0x000109c9
   108d0:	00010b01 	.word	0x00010b01
   108d4:	00010b13 	.word	0x00010b13
   108d8:	000107fb 	.word	0x000107fb
   108dc:	00010b25 	.word	0x00010b25
   108e0:	00010ab3 	.word	0x00010ab3
   108e4:	00010a45 	.word	0x00010a45
   108e8:	00010b5b 	.word	0x00010b5b
   108ec:	000107fb 	.word	0x000107fb
   108f0:	000107fb 	.word	0x000107fb
   108f4:	000107fb 	.word	0x000107fb
   108f8:	000107fb 	.word	0x000107fb
   108fc:	000109c9 	.word	0x000109c9
   10900:	000107fb 	.word	0x000107fb
   10904:	000107fb 	.word	0x000107fb
   10908:	000107fb 	.word	0x000107fb
   1090c:	000107fb 	.word	0x000107fb
   10910:	000107fb 	.word	0x000107fb
   10914:	000107fb 	.word	0x000107fb
   10918:	00010981 	.word	0x00010981
   1091c:	00010981 	.word	0x00010981
   10920:	00010981 	.word	0x00010981
   10924:	00010981 	.word	0x00010981
   10928:	00010981 	.word	0x00010981
   1092c:	00010981 	.word	0x00010981
   10930:	00010981 	.word	0x00010981
   10934:	00010981 	.word	0x00010981
   10938:	00010981 	.word	0x00010981
   1093c:	00010981 	.word	0x00010981
   10940:	000107fb 	.word	0x000107fb
   10944:	00010981 	.word	0x00010981
   10948:	00010981 	.word	0x00010981
   1094c:	00010981 	.word	0x00010981
   10950:	00010981 	.word	0x00010981
   10954:	000107fb 	.word	0x000107fb
   10958:	000107fb 	.word	0x000107fb
   1095c:	000107fb 	.word	0x000107fb
   10960:	00010981 	.word	0x00010981
   10964:	00010981 	.word	0x00010981
   10968:	000109a7 	.word	0x000109a7
   1096c:	00010981 	.word	0x00010981
   10970:	00010981 	.word	0x00010981
   10974:	00010981 	.word	0x00010981
   10978:	00010981 	.word	0x00010981
   1097c:	00010981 	.word	0x00010981
   10980:	4bbf      	ldr	r3, [pc, #764]	; (10c80 <d_type+0x4a4>)
   10982:	2214      	movs	r2, #20
   10984:	3961      	subs	r1, #97	; 0x61
   10986:	4620      	mov	r0, r4
   10988:	fb02 3101 	mla	r1, r2, r1, r3
   1098c:	f7ff f997 	bl	fcbe <d_make_builtin_type>
   10990:	6882      	ldr	r2, [r0, #8]
   10992:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10994:	6852      	ldr	r2, [r2, #4]
   10996:	9003      	str	r0, [sp, #12]
   10998:	4413      	add	r3, r2
   1099a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1099c:	68e3      	ldr	r3, [r4, #12]
   1099e:	3301      	adds	r3, #1
   109a0:	60e3      	str	r3, [r4, #12]
   109a2:	9803      	ldr	r0, [sp, #12]
   109a4:	e72a      	b.n	107fc <d_type+0x20>
   109a6:	3201      	adds	r2, #1
   109a8:	4620      	mov	r0, r4
   109aa:	60e2      	str	r2, [r4, #12]
   109ac:	f7ff fad3 	bl	ff56 <d_source_name>
   109b0:	2300      	movs	r3, #0
   109b2:	4602      	mov	r2, r0
   109b4:	2128      	movs	r1, #40	; 0x28
   109b6:	4620      	mov	r0, r4
   109b8:	f7ff f92d 	bl	fc16 <d_make_comp>
   109bc:	e002      	b.n	109c4 <d_type+0x1e8>
   109be:	4620      	mov	r0, r4
   109c0:	f000 fbae 	bl	11120 <d_function_type>
   109c4:	9003      	str	r0, [sp, #12]
   109c6:	e731      	b.n	1082c <d_type+0x50>
   109c8:	4620      	mov	r0, r4
   109ca:	f000 fcdb 	bl	11384 <d_name>
   109ce:	e7f9      	b.n	109c4 <d_type+0x1e8>
   109d0:	1c51      	adds	r1, r2, #1
   109d2:	60e1      	str	r1, [r4, #12]
   109d4:	7853      	ldrb	r3, [r2, #1]
   109d6:	2b5f      	cmp	r3, #95	; 0x5f
   109d8:	d015      	beq.n	10a06 <d_type+0x22a>
   109da:	3b30      	subs	r3, #48	; 0x30
   109dc:	2b09      	cmp	r3, #9
   109de:	d80e      	bhi.n	109fe <d_type+0x222>
   109e0:	68e3      	ldr	r3, [r4, #12]
   109e2:	1c5a      	adds	r2, r3, #1
   109e4:	60e2      	str	r2, [r4, #12]
   109e6:	785b      	ldrb	r3, [r3, #1]
   109e8:	3b30      	subs	r3, #48	; 0x30
   109ea:	2b09      	cmp	r3, #9
   109ec:	d9f8      	bls.n	109e0 <d_type+0x204>
   109ee:	1a52      	subs	r2, r2, r1
   109f0:	4620      	mov	r0, r4
   109f2:	f7ff f951 	bl	fc98 <d_make_name>
   109f6:	4605      	mov	r5, r0
   109f8:	b930      	cbnz	r0, 10a08 <d_type+0x22c>
   109fa:	2000      	movs	r0, #0
   109fc:	e7e2      	b.n	109c4 <d_type+0x1e8>
   109fe:	4620      	mov	r0, r4
   10a00:	f7ff feb6 	bl	10770 <d_expression>
   10a04:	e7f7      	b.n	109f6 <d_type+0x21a>
   10a06:	2500      	movs	r5, #0
   10a08:	68e3      	ldr	r3, [r4, #12]
   10a0a:	781a      	ldrb	r2, [r3, #0]
   10a0c:	2a5f      	cmp	r2, #95	; 0x5f
   10a0e:	d1f4      	bne.n	109fa <d_type+0x21e>
   10a10:	3301      	adds	r3, #1
   10a12:	4620      	mov	r0, r4
   10a14:	60e3      	str	r3, [r4, #12]
   10a16:	f7ff fee1 	bl	107dc <d_type>
   10a1a:	462a      	mov	r2, r5
   10a1c:	4603      	mov	r3, r0
   10a1e:	212a      	movs	r1, #42	; 0x2a
   10a20:	e7c9      	b.n	109b6 <d_type+0x1da>
   10a22:	3201      	adds	r2, #1
   10a24:	4620      	mov	r0, r4
   10a26:	60e2      	str	r2, [r4, #12]
   10a28:	f7ff fed8 	bl	107dc <d_type>
   10a2c:	4605      	mov	r5, r0
   10a2e:	2800      	cmp	r0, #0
   10a30:	d0e3      	beq.n	109fa <d_type+0x21e>
   10a32:	4620      	mov	r0, r4
   10a34:	f7ff fed2 	bl	107dc <d_type>
   10a38:	4603      	mov	r3, r0
   10a3a:	2800      	cmp	r0, #0
   10a3c:	d0dd      	beq.n	109fa <d_type+0x21e>
   10a3e:	462a      	mov	r2, r5
   10a40:	212b      	movs	r1, #43	; 0x2b
   10a42:	e7b8      	b.n	109b6 <d_type+0x1da>
   10a44:	4620      	mov	r0, r4
   10a46:	f7ff fa6f 	bl	ff28 <d_template_param>
   10a4a:	68e5      	ldr	r5, [r4, #12]
   10a4c:	9003      	str	r0, [sp, #12]
   10a4e:	4601      	mov	r1, r0
   10a50:	782b      	ldrb	r3, [r5, #0]
   10a52:	2b49      	cmp	r3, #73	; 0x49
   10a54:	f47f aeea 	bne.w	1082c <d_type+0x50>
   10a58:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10a5a:	b973      	cbnz	r3, 10a7a <d_type+0x29e>
   10a5c:	4620      	mov	r0, r4
   10a5e:	f7ff f94d 	bl	fcfc <d_add_substitution>
   10a62:	2800      	cmp	r0, #0
   10a64:	f43f aec9 	beq.w	107fa <d_type+0x1e>
   10a68:	9a03      	ldr	r2, [sp, #12]
   10a6a:	4620      	mov	r0, r4
   10a6c:	9201      	str	r2, [sp, #4]
   10a6e:	f000 f9ec 	bl	10e4a <d_template_args>
   10a72:	9a01      	ldr	r2, [sp, #4]
   10a74:	4603      	mov	r3, r0
   10a76:	2104      	movs	r1, #4
   10a78:	e79d      	b.n	109b6 <d_type+0x1da>
   10a7a:	4620      	mov	r0, r4
   10a7c:	f8d4 8014 	ldr.w	r8, [r4, #20]
   10a80:	6a27      	ldr	r7, [r4, #32]
   10a82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   10a84:	f000 f9e1 	bl	10e4a <d_template_args>
   10a88:	68e2      	ldr	r2, [r4, #12]
   10a8a:	7812      	ldrb	r2, [r2, #0]
   10a8c:	2a49      	cmp	r2, #73	; 0x49
   10a8e:	d10a      	bne.n	10aa6 <d_type+0x2ca>
   10a90:	9001      	str	r0, [sp, #4]
   10a92:	4620      	mov	r0, r4
   10a94:	9903      	ldr	r1, [sp, #12]
   10a96:	f7ff f931 	bl	fcfc <d_add_substitution>
   10a9a:	9b01      	ldr	r3, [sp, #4]
   10a9c:	2800      	cmp	r0, #0
   10a9e:	f43f aead 	beq.w	107fc <d_type+0x20>
   10aa2:	9a03      	ldr	r2, [sp, #12]
   10aa4:	e7e7      	b.n	10a76 <d_type+0x29a>
   10aa6:	60e5      	str	r5, [r4, #12]
   10aa8:	f8c4 8014 	str.w	r8, [r4, #20]
   10aac:	6227      	str	r7, [r4, #32]
   10aae:	62e6      	str	r6, [r4, #44]	; 0x2c
   10ab0:	e6bc      	b.n	1082c <d_type+0x50>
   10ab2:	7853      	ldrb	r3, [r2, #1]
   10ab4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   10ab8:	2a09      	cmp	r2, #9
   10aba:	d904      	bls.n	10ac6 <d_type+0x2ea>
   10abc:	2b5f      	cmp	r3, #95	; 0x5f
   10abe:	d002      	beq.n	10ac6 <d_type+0x2ea>
   10ac0:	3b41      	subs	r3, #65	; 0x41
   10ac2:	2b19      	cmp	r3, #25
   10ac4:	d810      	bhi.n	10ae8 <d_type+0x30c>
   10ac6:	2100      	movs	r1, #0
   10ac8:	4620      	mov	r0, r4
   10aca:	f7ff fbbd 	bl	10248 <d_substitution>
   10ace:	68e3      	ldr	r3, [r4, #12]
   10ad0:	9003      	str	r0, [sp, #12]
   10ad2:	4605      	mov	r5, r0
   10ad4:	781b      	ldrb	r3, [r3, #0]
   10ad6:	2b49      	cmp	r3, #73	; 0x49
   10ad8:	f47f af63 	bne.w	109a2 <d_type+0x1c6>
   10adc:	4620      	mov	r0, r4
   10ade:	f000 f9b4 	bl	10e4a <d_template_args>
   10ae2:	462a      	mov	r2, r5
   10ae4:	4603      	mov	r3, r0
   10ae6:	e7c6      	b.n	10a76 <d_type+0x29a>
   10ae8:	4620      	mov	r0, r4
   10aea:	f000 fc4b 	bl	11384 <d_name>
   10aee:	9003      	str	r0, [sp, #12]
   10af0:	2800      	cmp	r0, #0
   10af2:	f43f ae9b 	beq.w	1082c <d_type+0x50>
   10af6:	7803      	ldrb	r3, [r0, #0]
   10af8:	2b18      	cmp	r3, #24
   10afa:	f47f ae97 	bne.w	1082c <d_type+0x50>
   10afe:	e750      	b.n	109a2 <d_type+0x1c6>
   10b00:	3201      	adds	r2, #1
   10b02:	4620      	mov	r0, r4
   10b04:	60e2      	str	r2, [r4, #12]
   10b06:	f7ff fe69 	bl	107dc <d_type>
   10b0a:	2300      	movs	r3, #0
   10b0c:	4602      	mov	r2, r0
   10b0e:	2124      	movs	r1, #36	; 0x24
   10b10:	e751      	b.n	109b6 <d_type+0x1da>
   10b12:	3201      	adds	r2, #1
   10b14:	4620      	mov	r0, r4
   10b16:	60e2      	str	r2, [r4, #12]
   10b18:	f7ff fe60 	bl	107dc <d_type>
   10b1c:	2300      	movs	r3, #0
   10b1e:	4602      	mov	r2, r0
   10b20:	2122      	movs	r1, #34	; 0x22
   10b22:	e748      	b.n	109b6 <d_type+0x1da>
   10b24:	3201      	adds	r2, #1
   10b26:	4620      	mov	r0, r4
   10b28:	60e2      	str	r2, [r4, #12]
   10b2a:	f7ff fe57 	bl	107dc <d_type>
   10b2e:	2300      	movs	r3, #0
   10b30:	4602      	mov	r2, r0
   10b32:	2123      	movs	r1, #35	; 0x23
   10b34:	e73f      	b.n	109b6 <d_type+0x1da>
   10b36:	3201      	adds	r2, #1
   10b38:	4620      	mov	r0, r4
   10b3a:	60e2      	str	r2, [r4, #12]
   10b3c:	f7ff fe4e 	bl	107dc <d_type>
   10b40:	2300      	movs	r3, #0
   10b42:	4602      	mov	r2, r0
   10b44:	2125      	movs	r1, #37	; 0x25
   10b46:	e736      	b.n	109b6 <d_type+0x1da>
   10b48:	3201      	adds	r2, #1
   10b4a:	4620      	mov	r0, r4
   10b4c:	60e2      	str	r2, [r4, #12]
   10b4e:	f7ff fe45 	bl	107dc <d_type>
   10b52:	2300      	movs	r3, #0
   10b54:	4602      	mov	r2, r0
   10b56:	2126      	movs	r1, #38	; 0x26
   10b58:	e72d      	b.n	109b6 <d_type+0x1da>
   10b5a:	3201      	adds	r2, #1
   10b5c:	4620      	mov	r0, r4
   10b5e:	60e2      	str	r2, [r4, #12]
   10b60:	f7ff f9f9 	bl	ff56 <d_source_name>
   10b64:	68e3      	ldr	r3, [r4, #12]
   10b66:	9003      	str	r0, [sp, #12]
   10b68:	4605      	mov	r5, r0
   10b6a:	781b      	ldrb	r3, [r3, #0]
   10b6c:	2b49      	cmp	r3, #73	; 0x49
   10b6e:	d109      	bne.n	10b84 <d_type+0x3a8>
   10b70:	4620      	mov	r0, r4
   10b72:	f000 f96a 	bl	10e4a <d_template_args>
   10b76:	462a      	mov	r2, r5
   10b78:	4603      	mov	r3, r0
   10b7a:	2104      	movs	r1, #4
   10b7c:	4620      	mov	r0, r4
   10b7e:	f7ff f84a 	bl	fc16 <d_make_comp>
   10b82:	9003      	str	r0, [sp, #12]
   10b84:	4620      	mov	r0, r4
   10b86:	f7ff fe29 	bl	107dc <d_type>
   10b8a:	9b03      	ldr	r3, [sp, #12]
   10b8c:	4602      	mov	r2, r0
   10b8e:	2121      	movs	r1, #33	; 0x21
   10b90:	e711      	b.n	109b6 <d_type+0x1da>
   10b92:	1c53      	adds	r3, r2, #1
   10b94:	60e3      	str	r3, [r4, #12]
   10b96:	7853      	ldrb	r3, [r2, #1]
   10b98:	2b00      	cmp	r3, #0
   10b9a:	f43f ae2e 	beq.w	107fa <d_type+0x1e>
   10b9e:	1c93      	adds	r3, r2, #2
   10ba0:	60e3      	str	r3, [r4, #12]
   10ba2:	7853      	ldrb	r3, [r2, #1]
   10ba4:	2b46      	cmp	r3, #70	; 0x46
   10ba6:	f000 8095 	beq.w	10cd4 <d_type+0x4f8>
   10baa:	3b54      	subs	r3, #84	; 0x54
   10bac:	b2d9      	uxtb	r1, r3
   10bae:	2922      	cmp	r1, #34	; 0x22
   10bb0:	f63f ae23 	bhi.w	107fa <d_type+0x1e>
   10bb4:	2b22      	cmp	r3, #34	; 0x22
   10bb6:	f63f ae20 	bhi.w	107fa <d_type+0x1e>
   10bba:	a101      	add	r1, pc, #4	; (adr r1, 10bc0 <d_type+0x3e4>)
   10bbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   10bc0:	00010c4d 	.word	0x00010c4d
   10bc4:	000107fb 	.word	0x000107fb
   10bc8:	000107fb 	.word	0x000107fb
   10bcc:	000107fb 	.word	0x000107fb
   10bd0:	000107fb 	.word	0x000107fb
   10bd4:	000107fb 	.word	0x000107fb
   10bd8:	000107fb 	.word	0x000107fb
   10bdc:	000107fb 	.word	0x000107fb
   10be0:	000107fb 	.word	0x000107fb
   10be4:	000107fb 	.word	0x000107fb
   10be8:	000107fb 	.word	0x000107fb
   10bec:	000107fb 	.word	0x000107fb
   10bf0:	000107fb 	.word	0x000107fb
   10bf4:	00010c93 	.word	0x00010c93
   10bf8:	000107fb 	.word	0x000107fb
   10bfc:	00010ca1 	.word	0x00010ca1
   10c00:	00010cbd 	.word	0x00010cbd
   10c04:	00010cc1 	.word	0x00010cc1
   10c08:	00010ca7 	.word	0x00010ca7
   10c0c:	000107fb 	.word	0x000107fb
   10c10:	00010cc5 	.word	0x00010cc5
   10c14:	00010cd1 	.word	0x00010cd1
   10c18:	000107fb 	.word	0x000107fb
   10c1c:	000107fb 	.word	0x000107fb
   10c20:	000107fb 	.word	0x000107fb
   10c24:	000107fb 	.word	0x000107fb
   10c28:	00010d77 	.word	0x00010d77
   10c2c:	000107fb 	.word	0x000107fb
   10c30:	00010c85 	.word	0x00010c85
   10c34:	000107fb 	.word	0x000107fb
   10c38:	000107fb 	.word	0x000107fb
   10c3c:	00010ccd 	.word	0x00010ccd
   10c40:	00010c4d 	.word	0x00010c4d
   10c44:	00010cc9 	.word	0x00010cc9
   10c48:	00010d33 	.word	0x00010d33
   10c4c:	4620      	mov	r0, r4
   10c4e:	f7ff fd8f 	bl	10770 <d_expression>
   10c52:	2300      	movs	r3, #0
   10c54:	4602      	mov	r2, r0
   10c56:	2143      	movs	r1, #67	; 0x43
   10c58:	4620      	mov	r0, r4
   10c5a:	f7fe ffdc 	bl	fc16 <d_make_comp>
   10c5e:	9003      	str	r0, [sp, #12]
   10c60:	2800      	cmp	r0, #0
   10c62:	f43f ade3 	beq.w	1082c <d_type+0x50>
   10c66:	68e3      	ldr	r3, [r4, #12]
   10c68:	781a      	ldrb	r2, [r3, #0]
   10c6a:	b912      	cbnz	r2, 10c72 <d_type+0x496>
   10c6c:	2300      	movs	r3, #0
   10c6e:	9303      	str	r3, [sp, #12]
   10c70:	e5dc      	b.n	1082c <d_type+0x50>
   10c72:	1c5a      	adds	r2, r3, #1
   10c74:	60e2      	str	r2, [r4, #12]
   10c76:	781b      	ldrb	r3, [r3, #0]
   10c78:	2b45      	cmp	r3, #69	; 0x45
   10c7a:	d1f7      	bne.n	10c6c <d_type+0x490>
   10c7c:	e5d6      	b.n	1082c <d_type+0x50>
   10c7e:	bf00      	nop
   10c80:	00025400 	.word	0x00025400
   10c84:	4620      	mov	r0, r4
   10c86:	f7ff fda9 	bl	107dc <d_type>
   10c8a:	2300      	movs	r3, #0
   10c8c:	4602      	mov	r2, r0
   10c8e:	214b      	movs	r1, #75	; 0x4b
   10c90:	e691      	b.n	109b6 <d_type+0x1da>
   10c92:	2204      	movs	r2, #4
   10c94:	4939      	ldr	r1, [pc, #228]	; (10d7c <d_type+0x5a0>)
   10c96:	4620      	mov	r0, r4
   10c98:	f7fe fffe 	bl	fc98 <d_make_name>
   10c9c:	9003      	str	r0, [sp, #12]
   10c9e:	e680      	b.n	109a2 <d_type+0x1c6>
   10ca0:	220e      	movs	r2, #14
   10ca2:	4937      	ldr	r1, [pc, #220]	; (10d80 <d_type+0x5a4>)
   10ca4:	e7f7      	b.n	10c96 <d_type+0x4ba>
   10ca6:	4937      	ldr	r1, [pc, #220]	; (10d84 <d_type+0x5a8>)
   10ca8:	4620      	mov	r0, r4
   10caa:	f7ff f808 	bl	fcbe <d_make_builtin_type>
   10cae:	9003      	str	r0, [sp, #12]
   10cb0:	6882      	ldr	r2, [r0, #8]
   10cb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10cb4:	6852      	ldr	r2, [r2, #4]
   10cb6:	4413      	add	r3, r2
   10cb8:	62e3      	str	r3, [r4, #44]	; 0x2c
   10cba:	e672      	b.n	109a2 <d_type+0x1c6>
   10cbc:	4932      	ldr	r1, [pc, #200]	; (10d88 <d_type+0x5ac>)
   10cbe:	e7f3      	b.n	10ca8 <d_type+0x4cc>
   10cc0:	4932      	ldr	r1, [pc, #200]	; (10d8c <d_type+0x5b0>)
   10cc2:	e7f1      	b.n	10ca8 <d_type+0x4cc>
   10cc4:	4932      	ldr	r1, [pc, #200]	; (10d90 <d_type+0x5b4>)
   10cc6:	e7ef      	b.n	10ca8 <d_type+0x4cc>
   10cc8:	4932      	ldr	r1, [pc, #200]	; (10d94 <d_type+0x5b8>)
   10cca:	e7ed      	b.n	10ca8 <d_type+0x4cc>
   10ccc:	4932      	ldr	r1, [pc, #200]	; (10d98 <d_type+0x5bc>)
   10cce:	e7eb      	b.n	10ca8 <d_type+0x4cc>
   10cd0:	4932      	ldr	r1, [pc, #200]	; (10d9c <d_type+0x5c0>)
   10cd2:	e7e9      	b.n	10ca8 <d_type+0x4cc>
   10cd4:	4620      	mov	r0, r4
   10cd6:	f7fe ff8f 	bl	fbf8 <d_make_empty>
   10cda:	232c      	movs	r3, #44	; 0x2c
   10cdc:	9003      	str	r0, [sp, #12]
   10cde:	7003      	strb	r3, [r0, #0]
   10ce0:	68e3      	ldr	r3, [r4, #12]
   10ce2:	781b      	ldrb	r3, [r3, #0]
   10ce4:	3b30      	subs	r3, #48	; 0x30
   10ce6:	b2db      	uxtb	r3, r3
   10ce8:	2b09      	cmp	r3, #9
   10cea:	bf94      	ite	ls
   10cec:	2301      	movls	r3, #1
   10cee:	2300      	movhi	r3, #0
   10cf0:	8183      	strh	r3, [r0, #12]
   10cf2:	d803      	bhi.n	10cfc <d_type+0x520>
   10cf4:	f104 000c 	add.w	r0, r4, #12
   10cf8:	f7ff f8c4 	bl	fe84 <d_number.isra.0>
   10cfc:	4620      	mov	r0, r4
   10cfe:	9d03      	ldr	r5, [sp, #12]
   10d00:	f7ff fd6c 	bl	107dc <d_type>
   10d04:	9b03      	ldr	r3, [sp, #12]
   10d06:	60a8      	str	r0, [r5, #8]
   10d08:	689b      	ldr	r3, [r3, #8]
   10d0a:	2b00      	cmp	r3, #0
   10d0c:	f43f ad75 	beq.w	107fa <d_type+0x1e>
   10d10:	f104 000c 	add.w	r0, r4, #12
   10d14:	f7ff f8b6 	bl	fe84 <d_number.isra.0>
   10d18:	68e2      	ldr	r2, [r4, #12]
   10d1a:	7813      	ldrb	r3, [r2, #0]
   10d1c:	b113      	cbz	r3, 10d24 <d_type+0x548>
   10d1e:	1c53      	adds	r3, r2, #1
   10d20:	60e3      	str	r3, [r4, #12]
   10d22:	7813      	ldrb	r3, [r2, #0]
   10d24:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
   10d28:	4253      	negs	r3, r2
   10d2a:	4153      	adcs	r3, r2
   10d2c:	9a03      	ldr	r2, [sp, #12]
   10d2e:	81d3      	strh	r3, [r2, #14]
   10d30:	e637      	b.n	109a2 <d_type+0x1c6>
   10d32:	7893      	ldrb	r3, [r2, #2]
   10d34:	2b5f      	cmp	r3, #95	; 0x5f
   10d36:	d118      	bne.n	10d6a <d_type+0x58e>
   10d38:	3203      	adds	r2, #3
   10d3a:	4620      	mov	r0, r4
   10d3c:	60e2      	str	r2, [r4, #12]
   10d3e:	f7ff fd17 	bl	10770 <d_expression>
   10d42:	4605      	mov	r5, r0
   10d44:	b178      	cbz	r0, 10d66 <d_type+0x58a>
   10d46:	68e3      	ldr	r3, [r4, #12]
   10d48:	781a      	ldrb	r2, [r3, #0]
   10d4a:	2a5f      	cmp	r2, #95	; 0x5f
   10d4c:	d111      	bne.n	10d72 <d_type+0x596>
   10d4e:	3301      	adds	r3, #1
   10d50:	4620      	mov	r0, r4
   10d52:	60e3      	str	r3, [r4, #12]
   10d54:	f7ff fd42 	bl	107dc <d_type>
   10d58:	462a      	mov	r2, r5
   10d5a:	4603      	mov	r3, r0
   10d5c:	212d      	movs	r1, #45	; 0x2d
   10d5e:	4620      	mov	r0, r4
   10d60:	f7fe ff59 	bl	fc16 <d_make_comp>
   10d64:	4605      	mov	r5, r0
   10d66:	9503      	str	r5, [sp, #12]
   10d68:	e560      	b.n	1082c <d_type+0x50>
   10d6a:	4620      	mov	r0, r4
   10d6c:	f7ff f8b4 	bl	fed8 <d_number_component>
   10d70:	e7e7      	b.n	10d42 <d_type+0x566>
   10d72:	2500      	movs	r5, #0
   10d74:	e7f7      	b.n	10d66 <d_type+0x58a>
   10d76:	490a      	ldr	r1, [pc, #40]	; (10da0 <d_type+0x5c4>)
   10d78:	e796      	b.n	10ca8 <d_type+0x4cc>
   10d7a:	bf00      	nop
   10d7c:	0002cbbb 	.word	0x0002cbbb
   10d80:	0002cbc0 	.word	0x0002cbc0
   10d84:	00025608 	.word	0x00025608
   10d88:	0002561c 	.word	0x0002561c
   10d8c:	00025630 	.word	0x00025630
   10d90:	00025644 	.word	0x00025644
   10d94:	00025658 	.word	0x00025658
   10d98:	0002566c 	.word	0x0002566c
   10d9c:	00025680 	.word	0x00025680
   10da0:	00025694 	.word	0x00025694

00010da4 <d_template_arg>:
   10da4:	68c2      	ldr	r2, [r0, #12]
   10da6:	b510      	push	{r4, lr}
   10da8:	7813      	ldrb	r3, [r2, #0]
   10daa:	4604      	mov	r4, r0
   10dac:	2b4c      	cmp	r3, #76	; 0x4c
   10dae:	d014      	beq.n	10dda <d_template_arg+0x36>
   10db0:	d806      	bhi.n	10dc0 <d_template_arg+0x1c>
   10db2:	3b49      	subs	r3, #73	; 0x49
   10db4:	2b01      	cmp	r3, #1
   10db6:	d914      	bls.n	10de2 <d_template_arg+0x3e>
   10db8:	4620      	mov	r0, r4
   10dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10dbe:	e50d      	b.n	107dc <d_type>
   10dc0:	2b58      	cmp	r3, #88	; 0x58
   10dc2:	d1f9      	bne.n	10db8 <d_template_arg+0x14>
   10dc4:	3201      	adds	r2, #1
   10dc6:	60c2      	str	r2, [r0, #12]
   10dc8:	f7ff fcd2 	bl	10770 <d_expression>
   10dcc:	68e3      	ldr	r3, [r4, #12]
   10dce:	781a      	ldrb	r2, [r3, #0]
   10dd0:	2a45      	cmp	r2, #69	; 0x45
   10dd2:	d109      	bne.n	10de8 <d_template_arg+0x44>
   10dd4:	3301      	adds	r3, #1
   10dd6:	60e3      	str	r3, [r4, #12]
   10dd8:	bd10      	pop	{r4, pc}
   10dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10dde:	f7ff bac1 	b.w	10364 <d_expr_primary>
   10de2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10de6:	e030      	b.n	10e4a <d_template_args>
   10de8:	2000      	movs	r0, #0
   10dea:	e7f5      	b.n	10dd8 <d_template_arg+0x34>

00010dec <d_template_args_1>:
   10dec:	68c3      	ldr	r3, [r0, #12]
   10dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10df0:	781a      	ldrb	r2, [r3, #0]
   10df2:	4604      	mov	r4, r0
   10df4:	6a85      	ldr	r5, [r0, #40]	; 0x28
   10df6:	2a45      	cmp	r2, #69	; 0x45
   10df8:	d109      	bne.n	10e0e <d_template_args_1+0x22>
   10dfa:	3301      	adds	r3, #1
   10dfc:	212f      	movs	r1, #47	; 0x2f
   10dfe:	60c3      	str	r3, [r0, #12]
   10e00:	2300      	movs	r3, #0
   10e02:	461a      	mov	r2, r3
   10e04:	b002      	add	sp, #8
   10e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10e0a:	f7fe bf04 	b.w	fc16 <d_make_comp>
   10e0e:	2300      	movs	r3, #0
   10e10:	ae01      	add	r6, sp, #4
   10e12:	9301      	str	r3, [sp, #4]
   10e14:	4620      	mov	r0, r4
   10e16:	f7ff ffc5 	bl	10da4 <d_template_arg>
   10e1a:	4602      	mov	r2, r0
   10e1c:	b910      	cbnz	r0, 10e24 <d_template_args_1+0x38>
   10e1e:	2000      	movs	r0, #0
   10e20:	b002      	add	sp, #8
   10e22:	bd70      	pop	{r4, r5, r6, pc}
   10e24:	2300      	movs	r3, #0
   10e26:	212f      	movs	r1, #47	; 0x2f
   10e28:	4620      	mov	r0, r4
   10e2a:	f7fe fef4 	bl	fc16 <d_make_comp>
   10e2e:	6030      	str	r0, [r6, #0]
   10e30:	2800      	cmp	r0, #0
   10e32:	d0f4      	beq.n	10e1e <d_template_args_1+0x32>
   10e34:	68e3      	ldr	r3, [r4, #12]
   10e36:	f100 060c 	add.w	r6, r0, #12
   10e3a:	781a      	ldrb	r2, [r3, #0]
   10e3c:	2a45      	cmp	r2, #69	; 0x45
   10e3e:	d1e9      	bne.n	10e14 <d_template_args_1+0x28>
   10e40:	3301      	adds	r3, #1
   10e42:	9801      	ldr	r0, [sp, #4]
   10e44:	62a5      	str	r5, [r4, #40]	; 0x28
   10e46:	60e3      	str	r3, [r4, #12]
   10e48:	e7ea      	b.n	10e20 <d_template_args_1+0x34>

00010e4a <d_template_args>:
   10e4a:	68c2      	ldr	r2, [r0, #12]
   10e4c:	7811      	ldrb	r1, [r2, #0]
   10e4e:	3949      	subs	r1, #73	; 0x49
   10e50:	2901      	cmp	r1, #1
   10e52:	d802      	bhi.n	10e5a <d_template_args+0x10>
   10e54:	3201      	adds	r2, #1
   10e56:	60c2      	str	r2, [r0, #12]
   10e58:	e7c8      	b.n	10dec <d_template_args_1>
   10e5a:	2000      	movs	r0, #0
   10e5c:	4770      	bx	lr

00010e5e <d_operator_name>:
   10e5e:	68c3      	ldr	r3, [r0, #12]
   10e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e64:	781a      	ldrb	r2, [r3, #0]
   10e66:	4604      	mov	r4, r0
   10e68:	b112      	cbz	r2, 10e70 <d_operator_name+0x12>
   10e6a:	1c5a      	adds	r2, r3, #1
   10e6c:	60c2      	str	r2, [r0, #12]
   10e6e:	781a      	ldrb	r2, [r3, #0]
   10e70:	68e3      	ldr	r3, [r4, #12]
   10e72:	7819      	ldrb	r1, [r3, #0]
   10e74:	2900      	cmp	r1, #0
   10e76:	d035      	beq.n	10ee4 <d_operator_name+0x86>
   10e78:	1c59      	adds	r1, r3, #1
   10e7a:	2a76      	cmp	r2, #118	; 0x76
   10e7c:	60e1      	str	r1, [r4, #12]
   10e7e:	7819      	ldrb	r1, [r3, #0]
   10e80:	d117      	bne.n	10eb2 <d_operator_name+0x54>
   10e82:	f1a1 0630 	sub.w	r6, r1, #48	; 0x30
   10e86:	b2f3      	uxtb	r3, r6
   10e88:	2b09      	cmp	r3, #9
   10e8a:	d82b      	bhi.n	10ee4 <d_operator_name+0x86>
   10e8c:	4620      	mov	r0, r4
   10e8e:	f7ff f862 	bl	ff56 <d_source_name>
   10e92:	4605      	mov	r5, r0
   10e94:	4620      	mov	r0, r4
   10e96:	f7fe feaf 	bl	fbf8 <d_make_empty>
   10e9a:	2800      	cmp	r0, #0
   10e9c:	d046      	beq.n	10f2c <d_operator_name+0xce>
   10e9e:	2d00      	cmp	r5, #0
   10ea0:	d044      	beq.n	10f2c <d_operator_name+0xce>
   10ea2:	2300      	movs	r3, #0
   10ea4:	6043      	str	r3, [r0, #4]
   10ea6:	2333      	movs	r3, #51	; 0x33
   10ea8:	e9c0 6502 	strd	r6, r5, [r0, #8]
   10eac:	7003      	strb	r3, [r0, #0]
   10eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10eb2:	2a63      	cmp	r2, #99	; 0x63
   10eb4:	d116      	bne.n	10ee4 <d_operator_name+0x86>
   10eb6:	2976      	cmp	r1, #118	; 0x76
   10eb8:	d114      	bne.n	10ee4 <d_operator_name+0x86>
   10eba:	4620      	mov	r0, r4
   10ebc:	e9d4 350c 	ldrd	r3, r5, [r4, #48]	; 0x30
   10ec0:	fab3 f383 	clz	r3, r3
   10ec4:	095b      	lsrs	r3, r3, #5
   10ec6:	6363      	str	r3, [r4, #52]	; 0x34
   10ec8:	f7ff fc88 	bl	107dc <d_type>
   10ecc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10ece:	4602      	mov	r2, r0
   10ed0:	b133      	cbz	r3, 10ee0 <d_operator_name+0x82>
   10ed2:	2300      	movs	r3, #0
   10ed4:	2135      	movs	r1, #53	; 0x35
   10ed6:	4620      	mov	r0, r4
   10ed8:	f7fe fe9d 	bl	fc16 <d_make_comp>
   10edc:	6365      	str	r5, [r4, #52]	; 0x34
   10ede:	e7e6      	b.n	10eae <d_operator_name+0x50>
   10ee0:	2134      	movs	r1, #52	; 0x34
   10ee2:	e7f8      	b.n	10ed6 <d_operator_name+0x78>
   10ee4:	2543      	movs	r5, #67	; 0x43
   10ee6:	2000      	movs	r0, #0
   10ee8:	4e11      	ldr	r6, [pc, #68]	; (10f30 <d_operator_name+0xd2>)
   10eea:	1a2b      	subs	r3, r5, r0
   10eec:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   10ef0:	eb00 0363 	add.w	r3, r0, r3, asr #1
   10ef4:	011f      	lsls	r7, r3, #4
   10ef6:	eb06 1803 	add.w	r8, r6, r3, lsl #4
   10efa:	59f7      	ldr	r7, [r6, r7]
   10efc:	f897 c000 	ldrb.w	ip, [r7]
   10f00:	4594      	cmp	ip, r2
   10f02:	d10e      	bne.n	10f22 <d_operator_name+0xc4>
   10f04:	787f      	ldrb	r7, [r7, #1]
   10f06:	428f      	cmp	r7, r1
   10f08:	d10b      	bne.n	10f22 <d_operator_name+0xc4>
   10f0a:	4620      	mov	r0, r4
   10f0c:	f7fe fe74 	bl	fbf8 <d_make_empty>
   10f10:	2800      	cmp	r0, #0
   10f12:	d0cc      	beq.n	10eae <d_operator_name+0x50>
   10f14:	2332      	movs	r3, #50	; 0x32
   10f16:	f8c0 8008 	str.w	r8, [r0, #8]
   10f1a:	7003      	strb	r3, [r0, #0]
   10f1c:	e7c7      	b.n	10eae <d_operator_name+0x50>
   10f1e:	461d      	mov	r5, r3
   10f20:	e7e3      	b.n	10eea <d_operator_name+0x8c>
   10f22:	bf9c      	itt	ls
   10f24:	1c58      	addls	r0, r3, #1
   10f26:	462b      	movls	r3, r5
   10f28:	4298      	cmp	r0, r3
   10f2a:	d1f8      	bne.n	10f1e <d_operator_name+0xc0>
   10f2c:	2000      	movs	r0, #0
   10f2e:	e7be      	b.n	10eae <d_operator_name+0x50>
   10f30:	000256a8 	.word	0x000256a8

00010f34 <d_parmlist>:
   10f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10f36:	2300      	movs	r3, #0
   10f38:	4604      	mov	r4, r0
   10f3a:	ad01      	add	r5, sp, #4
   10f3c:	9301      	str	r3, [sp, #4]
   10f3e:	68e2      	ldr	r2, [r4, #12]
   10f40:	7813      	ldrb	r3, [r2, #0]
   10f42:	b1eb      	cbz	r3, 10f80 <d_parmlist+0x4c>
   10f44:	2b45      	cmp	r3, #69	; 0x45
   10f46:	d01b      	beq.n	10f80 <d_parmlist+0x4c>
   10f48:	2b2e      	cmp	r3, #46	; 0x2e
   10f4a:	d019      	beq.n	10f80 <d_parmlist+0x4c>
   10f4c:	2b52      	cmp	r3, #82	; 0x52
   10f4e:	d001      	beq.n	10f54 <d_parmlist+0x20>
   10f50:	2b4f      	cmp	r3, #79	; 0x4f
   10f52:	d102      	bne.n	10f5a <d_parmlist+0x26>
   10f54:	7853      	ldrb	r3, [r2, #1]
   10f56:	2b45      	cmp	r3, #69	; 0x45
   10f58:	d012      	beq.n	10f80 <d_parmlist+0x4c>
   10f5a:	4620      	mov	r0, r4
   10f5c:	f7ff fc3e 	bl	107dc <d_type>
   10f60:	4602      	mov	r2, r0
   10f62:	b910      	cbnz	r0, 10f6a <d_parmlist+0x36>
   10f64:	2000      	movs	r0, #0
   10f66:	b003      	add	sp, #12
   10f68:	bd30      	pop	{r4, r5, pc}
   10f6a:	2300      	movs	r3, #0
   10f6c:	212e      	movs	r1, #46	; 0x2e
   10f6e:	4620      	mov	r0, r4
   10f70:	f7fe fe51 	bl	fc16 <d_make_comp>
   10f74:	6028      	str	r0, [r5, #0]
   10f76:	2800      	cmp	r0, #0
   10f78:	d0f4      	beq.n	10f64 <d_parmlist+0x30>
   10f7a:	f100 050c 	add.w	r5, r0, #12
   10f7e:	e7de      	b.n	10f3e <d_parmlist+0xa>
   10f80:	9801      	ldr	r0, [sp, #4]
   10f82:	2800      	cmp	r0, #0
   10f84:	d0ee      	beq.n	10f64 <d_parmlist+0x30>
   10f86:	68c2      	ldr	r2, [r0, #12]
   10f88:	2a00      	cmp	r2, #0
   10f8a:	d1ec      	bne.n	10f66 <d_parmlist+0x32>
   10f8c:	6883      	ldr	r3, [r0, #8]
   10f8e:	7819      	ldrb	r1, [r3, #0]
   10f90:	2927      	cmp	r1, #39	; 0x27
   10f92:	d1e8      	bne.n	10f66 <d_parmlist+0x32>
   10f94:	6899      	ldr	r1, [r3, #8]
   10f96:	7c0b      	ldrb	r3, [r1, #16]
   10f98:	2b09      	cmp	r3, #9
   10f9a:	d1e4      	bne.n	10f66 <d_parmlist+0x32>
   10f9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10f9e:	6849      	ldr	r1, [r1, #4]
   10fa0:	1a5b      	subs	r3, r3, r1
   10fa2:	62e3      	str	r3, [r4, #44]	; 0x2c
   10fa4:	6082      	str	r2, [r0, #8]
   10fa6:	e7de      	b.n	10f66 <d_parmlist+0x32>

00010fa8 <d_cv_qualifiers>:
   10fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fac:	1e17      	subs	r7, r2, #0
   10fae:	460d      	mov	r5, r1
   10fb0:	68c3      	ldr	r3, [r0, #12]
   10fb2:	4604      	mov	r4, r0
   10fb4:	bf14      	ite	ne
   10fb6:	f04f 0a1e 	movne.w	sl, #30
   10fba:	f04f 0a1b 	moveq.w	sl, #27
   10fbe:	7819      	ldrb	r1, [r3, #0]
   10fc0:	bf15      	itete	ne
   10fc2:	f04f 091d 	movne.w	r9, #29
   10fc6:	f04f 091a 	moveq.w	r9, #26
   10fca:	f04f 081c 	movne.w	r8, #28
   10fce:	f04f 0819 	moveq.w	r8, #25
   10fd2:	462e      	mov	r6, r5
   10fd4:	68e2      	ldr	r2, [r4, #12]
   10fd6:	4610      	mov	r0, r2
   10fd8:	f7ff f83e 	bl	10058 <next_is_type_qual.isra.0>
   10fdc:	b9a0      	cbnz	r0, 11008 <d_cv_qualifiers+0x60>
   10fde:	2f00      	cmp	r7, #0
   10fe0:	d139      	bne.n	11056 <d_cv_qualifiers+0xae>
   10fe2:	2946      	cmp	r1, #70	; 0x46
   10fe4:	d137      	bne.n	11056 <d_cv_qualifiers+0xae>
   10fe6:	201d      	movs	r0, #29
   10fe8:	241e      	movs	r4, #30
   10fea:	271c      	movs	r7, #28
   10fec:	42ae      	cmp	r6, r5
   10fee:	d032      	beq.n	11056 <d_cv_qualifiers+0xae>
   10ff0:	682b      	ldr	r3, [r5, #0]
   10ff2:	781a      	ldrb	r2, [r3, #0]
   10ff4:	2a1a      	cmp	r2, #26
   10ff6:	d070      	beq.n	110da <d_cv_qualifiers+0x132>
   10ff8:	2a1b      	cmp	r2, #27
   10ffa:	d070      	beq.n	110de <d_cv_qualifiers+0x136>
   10ffc:	2a19      	cmp	r2, #25
   10ffe:	d100      	bne.n	11002 <d_cv_qualifiers+0x5a>
   11000:	701f      	strb	r7, [r3, #0]
   11002:	682d      	ldr	r5, [r5, #0]
   11004:	3508      	adds	r5, #8
   11006:	e7f1      	b.n	10fec <d_cv_qualifiers+0x44>
   11008:	1c53      	adds	r3, r2, #1
   1100a:	2972      	cmp	r1, #114	; 0x72
   1100c:	60e3      	str	r3, [r4, #12]
   1100e:	d111      	bne.n	11034 <d_cv_qualifiers+0x8c>
   11010:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11012:	46c3      	mov	fp, r8
   11014:	3309      	adds	r3, #9
   11016:	62e3      	str	r3, [r4, #44]	; 0x2c
   11018:	2000      	movs	r0, #0
   1101a:	4603      	mov	r3, r0
   1101c:	2200      	movs	r2, #0
   1101e:	4659      	mov	r1, fp
   11020:	4620      	mov	r0, r4
   11022:	f7fe fdf8 	bl	fc16 <d_make_comp>
   11026:	6030      	str	r0, [r6, #0]
   11028:	b1a0      	cbz	r0, 11054 <d_cv_qualifiers+0xac>
   1102a:	68e3      	ldr	r3, [r4, #12]
   1102c:	f100 0608 	add.w	r6, r0, #8
   11030:	7819      	ldrb	r1, [r3, #0]
   11032:	e7cf      	b.n	10fd4 <d_cv_qualifiers+0x2c>
   11034:	2956      	cmp	r1, #86	; 0x56
   11036:	d104      	bne.n	11042 <d_cv_qualifiers+0x9a>
   11038:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1103a:	46cb      	mov	fp, r9
   1103c:	3309      	adds	r3, #9
   1103e:	62e3      	str	r3, [r4, #44]	; 0x2c
   11040:	e7ea      	b.n	11018 <d_cv_qualifiers+0x70>
   11042:	294b      	cmp	r1, #75	; 0x4b
   11044:	d104      	bne.n	11050 <d_cv_qualifiers+0xa8>
   11046:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11048:	46d3      	mov	fp, sl
   1104a:	3306      	adds	r3, #6
   1104c:	62e3      	str	r3, [r4, #44]	; 0x2c
   1104e:	e7e3      	b.n	11018 <d_cv_qualifiers+0x70>
   11050:	7853      	ldrb	r3, [r2, #1]
   11052:	b91b      	cbnz	r3, 1105c <d_cv_qualifiers+0xb4>
   11054:	2600      	movs	r6, #0
   11056:	4630      	mov	r0, r6
   11058:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1105c:	1c93      	adds	r3, r2, #2
   1105e:	60e3      	str	r3, [r4, #12]
   11060:	f892 b001 	ldrb.w	fp, [r2, #1]
   11064:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
   11068:	d106      	bne.n	11078 <d_cv_qualifiers+0xd0>
   1106a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1106c:	2000      	movs	r0, #0
   1106e:	f04f 0b4d 	mov.w	fp, #77	; 0x4d
   11072:	3311      	adds	r3, #17
   11074:	62e3      	str	r3, [r4, #44]	; 0x2c
   11076:	e7d0      	b.n	1101a <d_cv_qualifiers+0x72>
   11078:	f1bb 0f6f 	cmp.w	fp, #111	; 0x6f
   1107c:	d002      	beq.n	11084 <d_cv_qualifiers+0xdc>
   1107e:	f1bb 0f4f 	cmp.w	fp, #79	; 0x4f
   11082:	d112      	bne.n	110aa <d_cv_qualifiers+0x102>
   11084:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   11086:	f1bb 0f4f 	cmp.w	fp, #79	; 0x4f
   1108a:	f103 0309 	add.w	r3, r3, #9
   1108e:	62e3      	str	r3, [r4, #44]	; 0x2c
   11090:	d11f      	bne.n	110d2 <d_cv_qualifiers+0x12a>
   11092:	4620      	mov	r0, r4
   11094:	f7ff fb6c 	bl	10770 <d_expression>
   11098:	2800      	cmp	r0, #0
   1109a:	d0db      	beq.n	11054 <d_cv_qualifiers+0xac>
   1109c:	68e3      	ldr	r3, [r4, #12]
   1109e:	781a      	ldrb	r2, [r3, #0]
   110a0:	2a45      	cmp	r2, #69	; 0x45
   110a2:	d1d7      	bne.n	11054 <d_cv_qualifiers+0xac>
   110a4:	3301      	adds	r3, #1
   110a6:	60e3      	str	r3, [r4, #12]
   110a8:	e7b7      	b.n	1101a <d_cv_qualifiers+0x72>
   110aa:	f1bb 0f77 	cmp.w	fp, #119	; 0x77
   110ae:	d1d1      	bne.n	11054 <d_cv_qualifiers+0xac>
   110b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   110b2:	4620      	mov	r0, r4
   110b4:	3306      	adds	r3, #6
   110b6:	62e3      	str	r3, [r4, #44]	; 0x2c
   110b8:	f7ff ff3c 	bl	10f34 <d_parmlist>
   110bc:	2800      	cmp	r0, #0
   110be:	d0c9      	beq.n	11054 <d_cv_qualifiers+0xac>
   110c0:	68e3      	ldr	r3, [r4, #12]
   110c2:	781a      	ldrb	r2, [r3, #0]
   110c4:	2a45      	cmp	r2, #69	; 0x45
   110c6:	d1c5      	bne.n	11054 <d_cv_qualifiers+0xac>
   110c8:	3301      	adds	r3, #1
   110ca:	f04f 0b50 	mov.w	fp, #80	; 0x50
   110ce:	60e3      	str	r3, [r4, #12]
   110d0:	e7a3      	b.n	1101a <d_cv_qualifiers+0x72>
   110d2:	2000      	movs	r0, #0
   110d4:	f04f 0b4f 	mov.w	fp, #79	; 0x4f
   110d8:	e79f      	b.n	1101a <d_cv_qualifiers+0x72>
   110da:	7018      	strb	r0, [r3, #0]
   110dc:	e791      	b.n	11002 <d_cv_qualifiers+0x5a>
   110de:	701c      	strb	r4, [r3, #0]
   110e0:	e78f      	b.n	11002 <d_cv_qualifiers+0x5a>

000110e2 <d_bare_function_type>:
   110e2:	68c3      	ldr	r3, [r0, #12]
   110e4:	b570      	push	{r4, r5, r6, lr}
   110e6:	781a      	ldrb	r2, [r3, #0]
   110e8:	4605      	mov	r5, r0
   110ea:	2a4a      	cmp	r2, #74	; 0x4a
   110ec:	d108      	bne.n	11100 <d_bare_function_type+0x1e>
   110ee:	3301      	adds	r3, #1
   110f0:	60c3      	str	r3, [r0, #12]
   110f2:	4628      	mov	r0, r5
   110f4:	f7ff fb72 	bl	107dc <d_type>
   110f8:	4604      	mov	r4, r0
   110fa:	b920      	cbnz	r0, 11106 <d_bare_function_type+0x24>
   110fc:	2000      	movs	r0, #0
   110fe:	bd70      	pop	{r4, r5, r6, pc}
   11100:	2900      	cmp	r1, #0
   11102:	d1f6      	bne.n	110f2 <d_bare_function_type+0x10>
   11104:	460c      	mov	r4, r1
   11106:	4628      	mov	r0, r5
   11108:	f7ff ff14 	bl	10f34 <d_parmlist>
   1110c:	4603      	mov	r3, r0
   1110e:	2800      	cmp	r0, #0
   11110:	d0f4      	beq.n	110fc <d_bare_function_type+0x1a>
   11112:	4622      	mov	r2, r4
   11114:	4628      	mov	r0, r5
   11116:	2129      	movs	r1, #41	; 0x29
   11118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1111c:	f7fe bd7b 	b.w	fc16 <d_make_comp>

00011120 <d_function_type>:
   11120:	b510      	push	{r4, lr}
   11122:	4604      	mov	r4, r0
   11124:	6880      	ldr	r0, [r0, #8]
   11126:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
   1112a:	d105      	bne.n	11138 <d_function_type+0x18>
   1112c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1112e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   11132:	d80d      	bhi.n	11150 <d_function_type+0x30>
   11134:	3301      	adds	r3, #1
   11136:	63a3      	str	r3, [r4, #56]	; 0x38
   11138:	68e3      	ldr	r3, [r4, #12]
   1113a:	781a      	ldrb	r2, [r3, #0]
   1113c:	2a46      	cmp	r2, #70	; 0x46
   1113e:	d008      	beq.n	11152 <d_function_type+0x32>
   11140:	2000      	movs	r0, #0
   11142:	68a3      	ldr	r3, [r4, #8]
   11144:	035b      	lsls	r3, r3, #13
   11146:	bf5e      	ittt	pl
   11148:	6ba3      	ldrpl	r3, [r4, #56]	; 0x38
   1114a:	f103 33ff 	addpl.w	r3, r3, #4294967295	; 0xffffffff
   1114e:	63a3      	strpl	r3, [r4, #56]	; 0x38
   11150:	bd10      	pop	{r4, pc}
   11152:	1c5a      	adds	r2, r3, #1
   11154:	2101      	movs	r1, #1
   11156:	4620      	mov	r0, r4
   11158:	60e2      	str	r2, [r4, #12]
   1115a:	785a      	ldrb	r2, [r3, #1]
   1115c:	2a59      	cmp	r2, #89	; 0x59
   1115e:	bf04      	itt	eq
   11160:	3302      	addeq	r3, #2
   11162:	60e3      	streq	r3, [r4, #12]
   11164:	f7ff ffbd 	bl	110e2 <d_bare_function_type>
   11168:	4601      	mov	r1, r0
   1116a:	4620      	mov	r0, r4
   1116c:	f7fe fdb0 	bl	fcd0 <d_ref_qualifier>
   11170:	68e3      	ldr	r3, [r4, #12]
   11172:	781a      	ldrb	r2, [r3, #0]
   11174:	2a45      	cmp	r2, #69	; 0x45
   11176:	d1e3      	bne.n	11140 <d_function_type+0x20>
   11178:	3301      	adds	r3, #1
   1117a:	60e3      	str	r3, [r4, #12]
   1117c:	e7e1      	b.n	11142 <d_function_type+0x22>

0001117e <d_unqualified_name>:
   1117e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11180:	68c3      	ldr	r3, [r0, #12]
   11182:	4605      	mov	r5, r0
   11184:	781a      	ldrb	r2, [r3, #0]
   11186:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1118a:	2909      	cmp	r1, #9
   1118c:	d80d      	bhi.n	111aa <d_unqualified_name+0x2c>
   1118e:	f7fe fee2 	bl	ff56 <d_source_name>
   11192:	4604      	mov	r4, r0
   11194:	68eb      	ldr	r3, [r5, #12]
   11196:	781b      	ldrb	r3, [r3, #0]
   11198:	2b42      	cmp	r3, #66	; 0x42
   1119a:	f040 80a0 	bne.w	112de <d_unqualified_name+0x160>
   1119e:	4621      	mov	r1, r4
   111a0:	4628      	mov	r0, r5
   111a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   111a6:	f7fe bf15 	b.w	ffd4 <d_abi_tags>
   111aa:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   111ae:	2919      	cmp	r1, #25
   111b0:	d824      	bhi.n	111fc <d_unqualified_name+0x7e>
   111b2:	2a6f      	cmp	r2, #111	; 0x6f
   111b4:	d104      	bne.n	111c0 <d_unqualified_name+0x42>
   111b6:	785a      	ldrb	r2, [r3, #1]
   111b8:	2a6e      	cmp	r2, #110	; 0x6e
   111ba:	bf04      	itt	eq
   111bc:	3302      	addeq	r3, #2
   111be:	60c3      	streq	r3, [r0, #12]
   111c0:	4628      	mov	r0, r5
   111c2:	f7ff fe4c 	bl	10e5e <d_operator_name>
   111c6:	4604      	mov	r4, r0
   111c8:	b360      	cbz	r0, 11224 <d_unqualified_name+0xa6>
   111ca:	7803      	ldrb	r3, [r0, #0]
   111cc:	2b32      	cmp	r3, #50	; 0x32
   111ce:	d1e1      	bne.n	11194 <d_unqualified_name+0x16>
   111d0:	6882      	ldr	r2, [r0, #8]
   111d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   111d4:	6891      	ldr	r1, [r2, #8]
   111d6:	3307      	adds	r3, #7
   111d8:	6810      	ldr	r0, [r2, #0]
   111da:	440b      	add	r3, r1
   111dc:	4968      	ldr	r1, [pc, #416]	; (11380 <d_unqualified_name+0x202>)
   111de:	62eb      	str	r3, [r5, #44]	; 0x2c
   111e0:	f004 fe40 	bl	15e64 <strcmp>
   111e4:	2800      	cmp	r0, #0
   111e6:	d1d5      	bne.n	11194 <d_unqualified_name+0x16>
   111e8:	4628      	mov	r0, r5
   111ea:	f7fe feb4 	bl	ff56 <d_source_name>
   111ee:	4622      	mov	r2, r4
   111f0:	4603      	mov	r3, r0
   111f2:	2137      	movs	r1, #55	; 0x37
   111f4:	4628      	mov	r0, r5
   111f6:	f7fe fd0e 	bl	fc16 <d_make_comp>
   111fa:	e7ca      	b.n	11192 <d_unqualified_name+0x14>
   111fc:	f1a2 0143 	sub.w	r1, r2, #67	; 0x43
   11200:	2901      	cmp	r1, #1
   11202:	d863      	bhi.n	112cc <d_unqualified_name+0x14e>
   11204:	6a86      	ldr	r6, [r0, #40]	; 0x28
   11206:	b146      	cbz	r6, 1121a <d_unqualified_name+0x9c>
   11208:	7832      	ldrb	r2, [r6, #0]
   1120a:	b922      	cbnz	r2, 11216 <d_unqualified_name+0x98>
   1120c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1120e:	68f1      	ldr	r1, [r6, #12]
   11210:	440a      	add	r2, r1
   11212:	62ea      	str	r2, [r5, #44]	; 0x2c
   11214:	e001      	b.n	1121a <d_unqualified_name+0x9c>
   11216:	2a18      	cmp	r2, #24
   11218:	d0f8      	beq.n	1120c <d_unqualified_name+0x8e>
   1121a:	781a      	ldrb	r2, [r3, #0]
   1121c:	2a43      	cmp	r2, #67	; 0x43
   1121e:	d003      	beq.n	11228 <d_unqualified_name+0xaa>
   11220:	2a44      	cmp	r2, #68	; 0x44
   11222:	d025      	beq.n	11270 <d_unqualified_name+0xf2>
   11224:	2400      	movs	r4, #0
   11226:	e7b5      	b.n	11194 <d_unqualified_name+0x16>
   11228:	785a      	ldrb	r2, [r3, #1]
   1122a:	2a49      	cmp	r2, #73	; 0x49
   1122c:	bf05      	ittet	eq
   1122e:	3301      	addeq	r3, #1
   11230:	2201      	moveq	r2, #1
   11232:	2200      	movne	r2, #0
   11234:	60eb      	streq	r3, [r5, #12]
   11236:	68eb      	ldr	r3, [r5, #12]
   11238:	785e      	ldrb	r6, [r3, #1]
   1123a:	f1a6 0131 	sub.w	r1, r6, #49	; 0x31
   1123e:	2904      	cmp	r1, #4
   11240:	d8f0      	bhi.n	11224 <d_unqualified_name+0xa6>
   11242:	3302      	adds	r3, #2
   11244:	60eb      	str	r3, [r5, #12]
   11246:	b112      	cbz	r2, 1124e <d_unqualified_name+0xd0>
   11248:	4628      	mov	r0, r5
   1124a:	f7ff fac7 	bl	107dc <d_type>
   1124e:	4628      	mov	r0, r5
   11250:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   11252:	f7fe fcd1 	bl	fbf8 <d_make_empty>
   11256:	4604      	mov	r4, r0
   11258:	2800      	cmp	r0, #0
   1125a:	d0e3      	beq.n	11224 <d_unqualified_name+0xa6>
   1125c:	2f00      	cmp	r7, #0
   1125e:	d0e1      	beq.n	11224 <d_unqualified_name+0xa6>
   11260:	2300      	movs	r3, #0
   11262:	3e30      	subs	r6, #48	; 0x30
   11264:	60c7      	str	r7, [r0, #12]
   11266:	6043      	str	r3, [r0, #4]
   11268:	2307      	movs	r3, #7
   1126a:	7206      	strb	r6, [r0, #8]
   1126c:	7003      	strb	r3, [r0, #0]
   1126e:	e791      	b.n	11194 <d_unqualified_name+0x16>
   11270:	785a      	ldrb	r2, [r3, #1]
   11272:	3a30      	subs	r2, #48	; 0x30
   11274:	2a05      	cmp	r2, #5
   11276:	d8d5      	bhi.n	11224 <d_unqualified_name+0xa6>
   11278:	a101      	add	r1, pc, #4	; (adr r1, 11280 <d_unqualified_name+0x102>)
   1127a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   1127e:	bf00      	nop
   11280:	000112c9 	.word	0x000112c9
   11284:	00011299 	.word	0x00011299
   11288:	000112bd 	.word	0x000112bd
   1128c:	00011225 	.word	0x00011225
   11290:	000112c1 	.word	0x000112c1
   11294:	000112c5 	.word	0x000112c5
   11298:	2702      	movs	r7, #2
   1129a:	3302      	adds	r3, #2
   1129c:	4628      	mov	r0, r5
   1129e:	60eb      	str	r3, [r5, #12]
   112a0:	f7fe fcaa 	bl	fbf8 <d_make_empty>
   112a4:	4604      	mov	r4, r0
   112a6:	2800      	cmp	r0, #0
   112a8:	d0bc      	beq.n	11224 <d_unqualified_name+0xa6>
   112aa:	2e00      	cmp	r6, #0
   112ac:	d0ba      	beq.n	11224 <d_unqualified_name+0xa6>
   112ae:	2300      	movs	r3, #0
   112b0:	7207      	strb	r7, [r0, #8]
   112b2:	60c6      	str	r6, [r0, #12]
   112b4:	6043      	str	r3, [r0, #4]
   112b6:	2308      	movs	r3, #8
   112b8:	7003      	strb	r3, [r0, #0]
   112ba:	e76b      	b.n	11194 <d_unqualified_name+0x16>
   112bc:	2703      	movs	r7, #3
   112be:	e7ec      	b.n	1129a <d_unqualified_name+0x11c>
   112c0:	2704      	movs	r7, #4
   112c2:	e7ea      	b.n	1129a <d_unqualified_name+0x11c>
   112c4:	2705      	movs	r7, #5
   112c6:	e7e8      	b.n	1129a <d_unqualified_name+0x11c>
   112c8:	2701      	movs	r7, #1
   112ca:	e7e6      	b.n	1129a <d_unqualified_name+0x11c>
   112cc:	2a4c      	cmp	r2, #76	; 0x4c
   112ce:	d10f      	bne.n	112f0 <d_unqualified_name+0x172>
   112d0:	3301      	adds	r3, #1
   112d2:	60c3      	str	r3, [r0, #12]
   112d4:	f7fe fe3f 	bl	ff56 <d_source_name>
   112d8:	4604      	mov	r4, r0
   112da:	b910      	cbnz	r0, 112e2 <d_unqualified_name+0x164>
   112dc:	2400      	movs	r4, #0
   112de:	4620      	mov	r0, r4
   112e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   112e2:	4628      	mov	r0, r5
   112e4:	f7fe fee3 	bl	100ae <d_discriminator>
   112e8:	2800      	cmp	r0, #0
   112ea:	f47f af53 	bne.w	11194 <d_unqualified_name+0x16>
   112ee:	e7f5      	b.n	112dc <d_unqualified_name+0x15e>
   112f0:	2a55      	cmp	r2, #85	; 0x55
   112f2:	d1f3      	bne.n	112dc <d_unqualified_name+0x15e>
   112f4:	785a      	ldrb	r2, [r3, #1]
   112f6:	2a6c      	cmp	r2, #108	; 0x6c
   112f8:	d015      	beq.n	11326 <d_unqualified_name+0x1a8>
   112fa:	2a74      	cmp	r2, #116	; 0x74
   112fc:	d1ee      	bne.n	112dc <d_unqualified_name+0x15e>
   112fe:	1c5a      	adds	r2, r3, #1
   11300:	60c2      	str	r2, [r0, #12]
   11302:	785a      	ldrb	r2, [r3, #1]
   11304:	2a74      	cmp	r2, #116	; 0x74
   11306:	d18d      	bne.n	11224 <d_unqualified_name+0xa6>
   11308:	3302      	adds	r3, #2
   1130a:	60c3      	str	r3, [r0, #12]
   1130c:	f7fe fdf3 	bl	fef6 <d_compact_number>
   11310:	1e06      	subs	r6, r0, #0
   11312:	db87      	blt.n	11224 <d_unqualified_name+0xa6>
   11314:	4628      	mov	r0, r5
   11316:	f7fe fc6f 	bl	fbf8 <d_make_empty>
   1131a:	4604      	mov	r4, r0
   1131c:	b338      	cbz	r0, 1136e <d_unqualified_name+0x1f0>
   1131e:	2348      	movs	r3, #72	; 0x48
   11320:	6086      	str	r6, [r0, #8]
   11322:	7003      	strb	r3, [r0, #0]
   11324:	e023      	b.n	1136e <d_unqualified_name+0x1f0>
   11326:	1c5a      	adds	r2, r3, #1
   11328:	60c2      	str	r2, [r0, #12]
   1132a:	785a      	ldrb	r2, [r3, #1]
   1132c:	2a6c      	cmp	r2, #108	; 0x6c
   1132e:	f47f af79 	bne.w	11224 <d_unqualified_name+0xa6>
   11332:	3302      	adds	r3, #2
   11334:	60c3      	str	r3, [r0, #12]
   11336:	f7ff fdfd 	bl	10f34 <d_parmlist>
   1133a:	4607      	mov	r7, r0
   1133c:	2800      	cmp	r0, #0
   1133e:	f43f af71 	beq.w	11224 <d_unqualified_name+0xa6>
   11342:	68eb      	ldr	r3, [r5, #12]
   11344:	781a      	ldrb	r2, [r3, #0]
   11346:	2a45      	cmp	r2, #69	; 0x45
   11348:	f47f af6c 	bne.w	11224 <d_unqualified_name+0xa6>
   1134c:	3301      	adds	r3, #1
   1134e:	4628      	mov	r0, r5
   11350:	60eb      	str	r3, [r5, #12]
   11352:	f7fe fdd0 	bl	fef6 <d_compact_number>
   11356:	1e06      	subs	r6, r0, #0
   11358:	f6ff af64 	blt.w	11224 <d_unqualified_name+0xa6>
   1135c:	4628      	mov	r0, r5
   1135e:	f7fe fc4b 	bl	fbf8 <d_make_empty>
   11362:	4604      	mov	r4, r0
   11364:	b118      	cbz	r0, 1136e <d_unqualified_name+0x1f0>
   11366:	2346      	movs	r3, #70	; 0x46
   11368:	e9c0 7602 	strd	r7, r6, [r0, #8]
   1136c:	7003      	strb	r3, [r0, #0]
   1136e:	4621      	mov	r1, r4
   11370:	4628      	mov	r0, r5
   11372:	f7fe fcc3 	bl	fcfc <d_add_substitution>
   11376:	2800      	cmp	r0, #0
   11378:	f47f af0c 	bne.w	11194 <d_unqualified_name+0x16>
   1137c:	e752      	b.n	11224 <d_unqualified_name+0xa6>
   1137e:	bf00      	nop
   11380:	0002cbcf 	.word	0x0002cbcf

00011384 <d_name>:
   11384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   11388:	68c3      	ldr	r3, [r0, #12]
   1138a:	4604      	mov	r4, r0
   1138c:	781a      	ldrb	r2, [r3, #0]
   1138e:	2a55      	cmp	r2, #85	; 0x55
   11390:	f000 8106 	beq.w	115a0 <d_name+0x21c>
   11394:	d815      	bhi.n	113c2 <d_name+0x3e>
   11396:	2a4e      	cmp	r2, #78	; 0x4e
   11398:	d041      	beq.n	1141e <d_name+0x9a>
   1139a:	2a53      	cmp	r2, #83	; 0x53
   1139c:	f000 8104 	beq.w	115a8 <d_name+0x224>
   113a0:	4620      	mov	r0, r4
   113a2:	f7ff feec 	bl	1117e <d_unqualified_name>
   113a6:	68e3      	ldr	r3, [r4, #12]
   113a8:	4605      	mov	r5, r0
   113aa:	781b      	ldrb	r3, [r3, #0]
   113ac:	2b49      	cmp	r3, #73	; 0x49
   113ae:	f040 80c6 	bne.w	1153e <d_name+0x1ba>
   113b2:	4629      	mov	r1, r5
   113b4:	4620      	mov	r0, r4
   113b6:	f7fe fca1 	bl	fcfc <d_add_substitution>
   113ba:	2800      	cmp	r0, #0
   113bc:	f040 8103 	bne.w	115c6 <d_name+0x242>
   113c0:	e035      	b.n	1142e <d_name+0xaa>
   113c2:	2a5a      	cmp	r2, #90	; 0x5a
   113c4:	d1ec      	bne.n	113a0 <d_name+0x1c>
   113c6:	3301      	adds	r3, #1
   113c8:	2100      	movs	r1, #0
   113ca:	60c3      	str	r3, [r0, #12]
   113cc:	f000 f91e 	bl	1160c <d_encoding>
   113d0:	4605      	mov	r5, r0
   113d2:	b360      	cbz	r0, 1142e <d_name+0xaa>
   113d4:	68e3      	ldr	r3, [r4, #12]
   113d6:	781a      	ldrb	r2, [r3, #0]
   113d8:	2a45      	cmp	r2, #69	; 0x45
   113da:	d128      	bne.n	1142e <d_name+0xaa>
   113dc:	1c5a      	adds	r2, r3, #1
   113de:	60e2      	str	r2, [r4, #12]
   113e0:	785a      	ldrb	r2, [r3, #1]
   113e2:	2a73      	cmp	r2, #115	; 0x73
   113e4:	f040 80af 	bne.w	11546 <d_name+0x1c2>
   113e8:	3302      	adds	r3, #2
   113ea:	4620      	mov	r0, r4
   113ec:	60e3      	str	r3, [r4, #12]
   113ee:	f7fe fe5e 	bl	100ae <d_discriminator>
   113f2:	b1e0      	cbz	r0, 1142e <d_name+0xaa>
   113f4:	220e      	movs	r2, #14
   113f6:	4982      	ldr	r1, [pc, #520]	; (11600 <d_name+0x27c>)
   113f8:	4620      	mov	r0, r4
   113fa:	f7fe fc4d 	bl	fc98 <d_make_name>
   113fe:	4603      	mov	r3, r0
   11400:	782a      	ldrb	r2, [r5, #0]
   11402:	2a03      	cmp	r2, #3
   11404:	d105      	bne.n	11412 <d_name+0x8e>
   11406:	68ea      	ldr	r2, [r5, #12]
   11408:	7811      	ldrb	r1, [r2, #0]
   1140a:	2929      	cmp	r1, #41	; 0x29
   1140c:	bf04      	itt	eq
   1140e:	2100      	moveq	r1, #0
   11410:	6091      	streq	r1, [r2, #8]
   11412:	462a      	mov	r2, r5
   11414:	2102      	movs	r1, #2
   11416:	4620      	mov	r0, r4
   11418:	f7fe fbfd 	bl	fc16 <d_make_comp>
   1141c:	e0c2      	b.n	115a4 <d_name+0x220>
   1141e:	3301      	adds	r3, #1
   11420:	2201      	movs	r2, #1
   11422:	a903      	add	r1, sp, #12
   11424:	60c3      	str	r3, [r0, #12]
   11426:	f7ff fdbf 	bl	10fa8 <d_cv_qualifiers>
   1142a:	4607      	mov	r7, r0
   1142c:	b908      	cbnz	r0, 11432 <d_name+0xae>
   1142e:	2500      	movs	r5, #0
   11430:	e085      	b.n	1153e <d_name+0x1ba>
   11432:	2100      	movs	r1, #0
   11434:	4620      	mov	r0, r4
   11436:	f7fe fc4b 	bl	fcd0 <d_ref_qualifier>
   1143a:	f04f 0a00 	mov.w	sl, #0
   1143e:	4680      	mov	r8, r0
   11440:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 11608 <d_name+0x284>
   11444:	68e3      	ldr	r3, [r4, #12]
   11446:	781e      	ldrb	r6, [r3, #0]
   11448:	b916      	cbnz	r6, 11450 <d_name+0xcc>
   1144a:	2300      	movs	r3, #0
   1144c:	603b      	str	r3, [r7, #0]
   1144e:	e7ee      	b.n	1142e <d_name+0xaa>
   11450:	2e44      	cmp	r6, #68	; 0x44
   11452:	d118      	bne.n	11486 <d_name+0x102>
   11454:	785b      	ldrb	r3, [r3, #1]
   11456:	4620      	mov	r0, r4
   11458:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1145c:	2b54      	cmp	r3, #84	; 0x54
   1145e:	d10f      	bne.n	11480 <d_name+0xfc>
   11460:	f7ff f9bc 	bl	107dc <d_type>
   11464:	4605      	mov	r5, r0
   11466:	f1ba 0f00 	cmp.w	sl, #0
   1146a:	d11e      	bne.n	114aa <d_name+0x126>
   1146c:	68e3      	ldr	r3, [r4, #12]
   1146e:	781b      	ldrb	r3, [r3, #0]
   11470:	2b45      	cmp	r3, #69	; 0x45
   11472:	d03d      	beq.n	114f0 <d_name+0x16c>
   11474:	4629      	mov	r1, r5
   11476:	4620      	mov	r0, r4
   11478:	f7fe fc40 	bl	fcfc <d_add_substitution>
   1147c:	bbc0      	cbnz	r0, 114f0 <d_name+0x16c>
   1147e:	e7e4      	b.n	1144a <d_name+0xc6>
   11480:	f7ff fe7d 	bl	1117e <d_unqualified_name>
   11484:	e7ee      	b.n	11464 <d_name+0xe0>
   11486:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
   1148a:	b2d2      	uxtb	r2, r2
   1148c:	2a1c      	cmp	r2, #28
   1148e:	d90e      	bls.n	114ae <d_name+0x12a>
   11490:	f1a6 0261 	sub.w	r2, r6, #97	; 0x61
   11494:	2a19      	cmp	r2, #25
   11496:	d901      	bls.n	1149c <d_name+0x118>
   11498:	2e55      	cmp	r6, #85	; 0x55
   1149a:	d11f      	bne.n	114dc <d_name+0x158>
   1149c:	4620      	mov	r0, r4
   1149e:	f7ff fe6e 	bl	1117e <d_unqualified_name>
   114a2:	4605      	mov	r5, r0
   114a4:	f1ba 0f00 	cmp.w	sl, #0
   114a8:	d015      	beq.n	114d6 <d_name+0x152>
   114aa:	2101      	movs	r1, #1
   114ac:	e00d      	b.n	114ca <d_name+0x146>
   114ae:	fa29 f202 	lsr.w	r2, r9, r2
   114b2:	07d2      	lsls	r2, r2, #31
   114b4:	d4f2      	bmi.n	1149c <d_name+0x118>
   114b6:	2e49      	cmp	r6, #73	; 0x49
   114b8:	d11c      	bne.n	114f4 <d_name+0x170>
   114ba:	f1ba 0f00 	cmp.w	sl, #0
   114be:	d0c4      	beq.n	1144a <d_name+0xc6>
   114c0:	4620      	mov	r0, r4
   114c2:	f7ff fcc2 	bl	10e4a <d_template_args>
   114c6:	2104      	movs	r1, #4
   114c8:	4605      	mov	r5, r0
   114ca:	462b      	mov	r3, r5
   114cc:	4652      	mov	r2, sl
   114ce:	4620      	mov	r0, r4
   114d0:	f7fe fba1 	bl	fc16 <d_make_comp>
   114d4:	4605      	mov	r5, r0
   114d6:	2e53      	cmp	r6, #83	; 0x53
   114d8:	d1c8      	bne.n	1146c <d_name+0xe8>
   114da:	e009      	b.n	114f0 <d_name+0x16c>
   114dc:	2e53      	cmp	r6, #83	; 0x53
   114de:	d1ea      	bne.n	114b6 <d_name+0x132>
   114e0:	2101      	movs	r1, #1
   114e2:	4620      	mov	r0, r4
   114e4:	f7fe feb0 	bl	10248 <d_substitution>
   114e8:	4605      	mov	r5, r0
   114ea:	f1ba 0f00 	cmp.w	sl, #0
   114ee:	d1dc      	bne.n	114aa <d_name+0x126>
   114f0:	46aa      	mov	sl, r5
   114f2:	e7a7      	b.n	11444 <d_name+0xc0>
   114f4:	2e54      	cmp	r6, #84	; 0x54
   114f6:	d103      	bne.n	11500 <d_name+0x17c>
   114f8:	4620      	mov	r0, r4
   114fa:	f7fe fd15 	bl	ff28 <d_template_param>
   114fe:	e7b1      	b.n	11464 <d_name+0xe0>
   11500:	2e45      	cmp	r6, #69	; 0x45
   11502:	d008      	beq.n	11516 <d_name+0x192>
   11504:	2e4d      	cmp	r6, #77	; 0x4d
   11506:	d1a0      	bne.n	1144a <d_name+0xc6>
   11508:	f1ba 0f00 	cmp.w	sl, #0
   1150c:	d09d      	beq.n	1144a <d_name+0xc6>
   1150e:	3301      	adds	r3, #1
   11510:	4655      	mov	r5, sl
   11512:	60e3      	str	r3, [r4, #12]
   11514:	e7ec      	b.n	114f0 <d_name+0x16c>
   11516:	f8c7 a000 	str.w	sl, [r7]
   1151a:	f1ba 0f00 	cmp.w	sl, #0
   1151e:	d086      	beq.n	1142e <d_name+0xaa>
   11520:	f1b8 0f00 	cmp.w	r8, #0
   11524:	d004      	beq.n	11530 <d_name+0x1ac>
   11526:	9a03      	ldr	r2, [sp, #12]
   11528:	f8cd 800c 	str.w	r8, [sp, #12]
   1152c:	f8c8 2008 	str.w	r2, [r8, #8]
   11530:	781a      	ldrb	r2, [r3, #0]
   11532:	2a45      	cmp	r2, #69	; 0x45
   11534:	f47f af7b 	bne.w	1142e <d_name+0xaa>
   11538:	3301      	adds	r3, #1
   1153a:	9d03      	ldr	r5, [sp, #12]
   1153c:	60e3      	str	r3, [r4, #12]
   1153e:	4628      	mov	r0, r5
   11540:	b004      	add	sp, #16
   11542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11546:	2a64      	cmp	r2, #100	; 0x64
   11548:	d110      	bne.n	1156c <d_name+0x1e8>
   1154a:	3302      	adds	r3, #2
   1154c:	4620      	mov	r0, r4
   1154e:	60e3      	str	r3, [r4, #12]
   11550:	f7fe fcd1 	bl	fef6 <d_compact_number>
   11554:	1e07      	subs	r7, r0, #0
   11556:	f6ff af6a 	blt.w	1142e <d_name+0xaa>
   1155a:	4620      	mov	r0, r4
   1155c:	f7ff ff12 	bl	11384 <d_name>
   11560:	4606      	mov	r6, r0
   11562:	b930      	cbnz	r0, 11572 <d_name+0x1ee>
   11564:	1c7b      	adds	r3, r7, #1
   11566:	d10f      	bne.n	11588 <d_name+0x204>
   11568:	4633      	mov	r3, r6
   1156a:	e749      	b.n	11400 <d_name+0x7c>
   1156c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   11570:	e7f3      	b.n	1155a <d_name+0x1d6>
   11572:	7803      	ldrb	r3, [r0, #0]
   11574:	2b46      	cmp	r3, #70	; 0x46
   11576:	d0f5      	beq.n	11564 <d_name+0x1e0>
   11578:	2b48      	cmp	r3, #72	; 0x48
   1157a:	d0f3      	beq.n	11564 <d_name+0x1e0>
   1157c:	4620      	mov	r0, r4
   1157e:	f7fe fd96 	bl	100ae <d_discriminator>
   11582:	2800      	cmp	r0, #0
   11584:	d1ee      	bne.n	11564 <d_name+0x1e0>
   11586:	e752      	b.n	1142e <d_name+0xaa>
   11588:	4620      	mov	r0, r4
   1158a:	f7fe fb35 	bl	fbf8 <d_make_empty>
   1158e:	4603      	mov	r3, r0
   11590:	2800      	cmp	r0, #0
   11592:	f43f af35 	beq.w	11400 <d_name+0x7c>
   11596:	2247      	movs	r2, #71	; 0x47
   11598:	e9c0 6702 	strd	r6, r7, [r0, #8]
   1159c:	7002      	strb	r2, [r0, #0]
   1159e:	e72f      	b.n	11400 <d_name+0x7c>
   115a0:	f7ff fded 	bl	1117e <d_unqualified_name>
   115a4:	4605      	mov	r5, r0
   115a6:	e7ca      	b.n	1153e <d_name+0x1ba>
   115a8:	785a      	ldrb	r2, [r3, #1]
   115aa:	2a74      	cmp	r2, #116	; 0x74
   115ac:	d012      	beq.n	115d4 <d_name+0x250>
   115ae:	2100      	movs	r1, #0
   115b0:	f7fe fe4a 	bl	10248 <d_substitution>
   115b4:	2301      	movs	r3, #1
   115b6:	4605      	mov	r5, r0
   115b8:	68e2      	ldr	r2, [r4, #12]
   115ba:	7812      	ldrb	r2, [r2, #0]
   115bc:	2a49      	cmp	r2, #73	; 0x49
   115be:	d1be      	bne.n	1153e <d_name+0x1ba>
   115c0:	2b00      	cmp	r3, #0
   115c2:	f43f aef6 	beq.w	113b2 <d_name+0x2e>
   115c6:	4620      	mov	r0, r4
   115c8:	f7ff fc3f 	bl	10e4a <d_template_args>
   115cc:	462a      	mov	r2, r5
   115ce:	4603      	mov	r3, r0
   115d0:	2104      	movs	r1, #4
   115d2:	e720      	b.n	11416 <d_name+0x92>
   115d4:	3302      	adds	r3, #2
   115d6:	2203      	movs	r2, #3
   115d8:	490a      	ldr	r1, [pc, #40]	; (11604 <d_name+0x280>)
   115da:	60c3      	str	r3, [r0, #12]
   115dc:	f7fe fb5c 	bl	fc98 <d_make_name>
   115e0:	9001      	str	r0, [sp, #4]
   115e2:	4620      	mov	r0, r4
   115e4:	f7ff fdcb 	bl	1117e <d_unqualified_name>
   115e8:	9a01      	ldr	r2, [sp, #4]
   115ea:	4603      	mov	r3, r0
   115ec:	2101      	movs	r1, #1
   115ee:	4620      	mov	r0, r4
   115f0:	f7fe fb11 	bl	fc16 <d_make_comp>
   115f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   115f6:	4605      	mov	r5, r0
   115f8:	3303      	adds	r3, #3
   115fa:	62e3      	str	r3, [r4, #44]	; 0x2c
   115fc:	2300      	movs	r3, #0
   115fe:	e7db      	b.n	115b8 <d_name+0x234>
   11600:	0002cbd2 	.word	0x0002cbd2
   11604:	0002cbe1 	.word	0x0002cbe1
   11608:	100803ff 	.word	0x100803ff

0001160c <d_encoding>:
   1160c:	68c3      	ldr	r3, [r0, #12]
   1160e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11612:	781a      	ldrb	r2, [r3, #0]
   11614:	4604      	mov	r4, r0
   11616:	460e      	mov	r6, r1
   11618:	2a47      	cmp	r2, #71	; 0x47
   1161a:	d002      	beq.n	11622 <d_encoding+0x16>
   1161c:	2a54      	cmp	r2, #84	; 0x54
   1161e:	f040 818d 	bne.w	1193c <d_encoding+0x330>
   11622:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   11624:	f102 0114 	add.w	r1, r2, #20
   11628:	62e1      	str	r1, [r4, #44]	; 0x2c
   1162a:	7819      	ldrb	r1, [r3, #0]
   1162c:	2954      	cmp	r1, #84	; 0x54
   1162e:	d108      	bne.n	11642 <d_encoding+0x36>
   11630:	1c59      	adds	r1, r3, #1
   11632:	60e1      	str	r1, [r4, #12]
   11634:	7859      	ldrb	r1, [r3, #1]
   11636:	bb19      	cbnz	r1, 11680 <d_encoding+0x74>
   11638:	2500      	movs	r5, #0
   1163a:	4628      	mov	r0, r5
   1163c:	b003      	add	sp, #12
   1163e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11642:	2947      	cmp	r1, #71	; 0x47
   11644:	d1f8      	bne.n	11638 <d_encoding+0x2c>
   11646:	1c5a      	adds	r2, r3, #1
   11648:	60e2      	str	r2, [r4, #12]
   1164a:	785a      	ldrb	r2, [r3, #1]
   1164c:	2a00      	cmp	r2, #0
   1164e:	d0f3      	beq.n	11638 <d_encoding+0x2c>
   11650:	1c9a      	adds	r2, r3, #2
   11652:	60e2      	str	r2, [r4, #12]
   11654:	785a      	ldrb	r2, [r3, #1]
   11656:	2a54      	cmp	r2, #84	; 0x54
   11658:	f000 813f 	beq.w	118da <d_encoding+0x2ce>
   1165c:	f200 80e6 	bhi.w	1182c <d_encoding+0x220>
   11660:	2a41      	cmp	r2, #65	; 0x41
   11662:	f000 8132 	beq.w	118ca <d_encoding+0x2be>
   11666:	2a52      	cmp	r2, #82	; 0x52
   11668:	d1e6      	bne.n	11638 <d_encoding+0x2c>
   1166a:	4620      	mov	r0, r4
   1166c:	f7ff fe8a 	bl	11384 <d_name>
   11670:	9001      	str	r0, [sp, #4]
   11672:	4620      	mov	r0, r4
   11674:	f7fe fc30 	bl	fed8 <d_number_component>
   11678:	9a01      	ldr	r2, [sp, #4]
   1167a:	4603      	mov	r3, r0
   1167c:	2116      	movs	r1, #22
   1167e:	e05d      	b.n	1173c <d_encoding+0x130>
   11680:	1c99      	adds	r1, r3, #2
   11682:	60e1      	str	r1, [r4, #12]
   11684:	7859      	ldrb	r1, [r3, #1]
   11686:	2957      	cmp	r1, #87	; 0x57
   11688:	d836      	bhi.n	116f8 <d_encoding+0xec>
   1168a:	2940      	cmp	r1, #64	; 0x40
   1168c:	d9d4      	bls.n	11638 <d_encoding+0x2c>
   1168e:	3941      	subs	r1, #65	; 0x41
   11690:	2916      	cmp	r1, #22
   11692:	d8d1      	bhi.n	11638 <d_encoding+0x2c>
   11694:	a301      	add	r3, pc, #4	; (adr r3, 1169c <d_encoding+0x90>)
   11696:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
   1169a:	bf00      	nop
   1169c:	0001181f 	.word	0x0001181f
   116a0:	00011639 	.word	0x00011639
   116a4:	000117af 	.word	0x000117af
   116a8:	00011639 	.word	0x00011639
   116ac:	00011639 	.word	0x00011639
   116b0:	000117e7 	.word	0x000117e7
   116b4:	00011639 	.word	0x00011639
   116b8:	00011803 	.word	0x00011803
   116bc:	0001175b 	.word	0x0001175b
   116c0:	000117f5 	.word	0x000117f5
   116c4:	00011639 	.word	0x00011639
   116c8:	00011639 	.word	0x00011639
   116cc:	00011639 	.word	0x00011639
   116d0:	00011639 	.word	0x00011639
   116d4:	00011639 	.word	0x00011639
   116d8:	00011639 	.word	0x00011639
   116dc:	00011639 	.word	0x00011639
   116e0:	00011639 	.word	0x00011639
   116e4:	00011769 	.word	0x00011769
   116e8:	00011749 	.word	0x00011749
   116ec:	00011639 	.word	0x00011639
   116f0:	0001172d 	.word	0x0001172d
   116f4:	00011811 	.word	0x00011811
   116f8:	2968      	cmp	r1, #104	; 0x68
   116fa:	d03c      	beq.n	11776 <d_encoding+0x16a>
   116fc:	2976      	cmp	r1, #118	; 0x76
   116fe:	d048      	beq.n	11792 <d_encoding+0x186>
   11700:	2963      	cmp	r1, #99	; 0x63
   11702:	d199      	bne.n	11638 <d_encoding+0x2c>
   11704:	2100      	movs	r1, #0
   11706:	4620      	mov	r0, r4
   11708:	f7fe fc7e 	bl	10008 <d_call_offset>
   1170c:	2800      	cmp	r0, #0
   1170e:	d093      	beq.n	11638 <d_encoding+0x2c>
   11710:	2100      	movs	r1, #0
   11712:	4620      	mov	r0, r4
   11714:	f7fe fc78 	bl	10008 <d_call_offset>
   11718:	2800      	cmp	r0, #0
   1171a:	d08d      	beq.n	11638 <d_encoding+0x2c>
   1171c:	2100      	movs	r1, #0
   1171e:	4620      	mov	r0, r4
   11720:	f7ff ff74 	bl	1160c <d_encoding>
   11724:	2300      	movs	r3, #0
   11726:	4602      	mov	r2, r0
   11728:	2111      	movs	r1, #17
   1172a:	e007      	b.n	1173c <d_encoding+0x130>
   1172c:	320f      	adds	r2, #15
   1172e:	4620      	mov	r0, r4
   11730:	62e2      	str	r2, [r4, #44]	; 0x2c
   11732:	f7ff f853 	bl	107dc <d_type>
   11736:	2300      	movs	r3, #0
   11738:	4602      	mov	r2, r0
   1173a:	2109      	movs	r1, #9
   1173c:	4620      	mov	r0, r4
   1173e:	b003      	add	sp, #12
   11740:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11744:	f7fe ba67 	b.w	fc16 <d_make_comp>
   11748:	320a      	adds	r2, #10
   1174a:	4620      	mov	r0, r4
   1174c:	62e2      	str	r2, [r4, #44]	; 0x2c
   1174e:	f7ff f845 	bl	107dc <d_type>
   11752:	2300      	movs	r3, #0
   11754:	4602      	mov	r2, r0
   11756:	210a      	movs	r1, #10
   11758:	e7f0      	b.n	1173c <d_encoding+0x130>
   1175a:	4620      	mov	r0, r4
   1175c:	f7ff f83e 	bl	107dc <d_type>
   11760:	2300      	movs	r3, #0
   11762:	4602      	mov	r2, r0
   11764:	210c      	movs	r1, #12
   11766:	e7e9      	b.n	1173c <d_encoding+0x130>
   11768:	4620      	mov	r0, r4
   1176a:	f7ff f837 	bl	107dc <d_type>
   1176e:	2300      	movs	r3, #0
   11770:	4602      	mov	r2, r0
   11772:	210d      	movs	r1, #13
   11774:	e7e2      	b.n	1173c <d_encoding+0x130>
   11776:	4620      	mov	r0, r4
   11778:	f7fe fc46 	bl	10008 <d_call_offset>
   1177c:	2800      	cmp	r0, #0
   1177e:	f43f af5b 	beq.w	11638 <d_encoding+0x2c>
   11782:	2100      	movs	r1, #0
   11784:	4620      	mov	r0, r4
   11786:	f7ff ff41 	bl	1160c <d_encoding>
   1178a:	2300      	movs	r3, #0
   1178c:	4602      	mov	r2, r0
   1178e:	210f      	movs	r1, #15
   11790:	e7d4      	b.n	1173c <d_encoding+0x130>
   11792:	4620      	mov	r0, r4
   11794:	f7fe fc38 	bl	10008 <d_call_offset>
   11798:	2800      	cmp	r0, #0
   1179a:	f43f af4d 	beq.w	11638 <d_encoding+0x2c>
   1179e:	2100      	movs	r1, #0
   117a0:	4620      	mov	r0, r4
   117a2:	f7ff ff33 	bl	1160c <d_encoding>
   117a6:	2300      	movs	r3, #0
   117a8:	4602      	mov	r2, r0
   117aa:	2110      	movs	r1, #16
   117ac:	e7c6      	b.n	1173c <d_encoding+0x130>
   117ae:	4620      	mov	r0, r4
   117b0:	f7ff f814 	bl	107dc <d_type>
   117b4:	4605      	mov	r5, r0
   117b6:	f104 000c 	add.w	r0, r4, #12
   117ba:	f7fe fb63 	bl	fe84 <d_number.isra.0>
   117be:	2800      	cmp	r0, #0
   117c0:	f6ff af3a 	blt.w	11638 <d_encoding+0x2c>
   117c4:	68e2      	ldr	r2, [r4, #12]
   117c6:	7813      	ldrb	r3, [r2, #0]
   117c8:	2b5f      	cmp	r3, #95	; 0x5f
   117ca:	f47f af35 	bne.w	11638 <d_encoding+0x2c>
   117ce:	3201      	adds	r2, #1
   117d0:	4620      	mov	r0, r4
   117d2:	60e2      	str	r2, [r4, #12]
   117d4:	f7ff f802 	bl	107dc <d_type>
   117d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   117da:	4602      	mov	r2, r0
   117dc:	210b      	movs	r1, #11
   117de:	3305      	adds	r3, #5
   117e0:	62e3      	str	r3, [r4, #44]	; 0x2c
   117e2:	462b      	mov	r3, r5
   117e4:	e7aa      	b.n	1173c <d_encoding+0x130>
   117e6:	4620      	mov	r0, r4
   117e8:	f7fe fff8 	bl	107dc <d_type>
   117ec:	2300      	movs	r3, #0
   117ee:	4602      	mov	r2, r0
   117f0:	210e      	movs	r1, #14
   117f2:	e7a3      	b.n	1173c <d_encoding+0x130>
   117f4:	4620      	mov	r0, r4
   117f6:	f7fe fff1 	bl	107dc <d_type>
   117fa:	2300      	movs	r3, #0
   117fc:	4602      	mov	r2, r0
   117fe:	2112      	movs	r1, #18
   11800:	e79c      	b.n	1173c <d_encoding+0x130>
   11802:	4620      	mov	r0, r4
   11804:	f7ff fdbe 	bl	11384 <d_name>
   11808:	2300      	movs	r3, #0
   1180a:	4602      	mov	r2, r0
   1180c:	2114      	movs	r1, #20
   1180e:	e795      	b.n	1173c <d_encoding+0x130>
   11810:	4620      	mov	r0, r4
   11812:	f7ff fdb7 	bl	11384 <d_name>
   11816:	2300      	movs	r3, #0
   11818:	4602      	mov	r2, r0
   1181a:	2115      	movs	r1, #21
   1181c:	e78e      	b.n	1173c <d_encoding+0x130>
   1181e:	4620      	mov	r0, r4
   11820:	f7ff fac0 	bl	10da4 <d_template_arg>
   11824:	2300      	movs	r3, #0
   11826:	4602      	mov	r2, r0
   11828:	2130      	movs	r1, #48	; 0x30
   1182a:	e787      	b.n	1173c <d_encoding+0x130>
   1182c:	2a56      	cmp	r2, #86	; 0x56
   1182e:	d045      	beq.n	118bc <d_encoding+0x2b0>
   11830:	2a72      	cmp	r2, #114	; 0x72
   11832:	f47f af01 	bne.w	11638 <d_encoding+0x2c>
   11836:	f104 000c 	add.w	r0, r4, #12
   1183a:	f7fe fb23 	bl	fe84 <d_number.isra.0>
   1183e:	2801      	cmp	r0, #1
   11840:	f77f aefa 	ble.w	11638 <d_encoding+0x2c>
   11844:	68e3      	ldr	r3, [r4, #12]
   11846:	781a      	ldrb	r2, [r3, #0]
   11848:	2a00      	cmp	r2, #0
   1184a:	f43f aef5 	beq.w	11638 <d_encoding+0x2c>
   1184e:	1c5d      	adds	r5, r3, #1
   11850:	60e5      	str	r5, [r4, #12]
   11852:	781b      	ldrb	r3, [r3, #0]
   11854:	2b5f      	cmp	r3, #95	; 0x5f
   11856:	f47f aeef 	bne.w	11638 <d_encoding+0x2c>
   1185a:	1e46      	subs	r6, r0, #1
   1185c:	f04f 0800 	mov.w	r8, #0
   11860:	2741      	movs	r7, #65	; 0x41
   11862:	782b      	ldrb	r3, [r5, #0]
   11864:	2b00      	cmp	r3, #0
   11866:	f43f aee7 	beq.w	11638 <d_encoding+0x2c>
   1186a:	2b24      	cmp	r3, #36	; 0x24
   1186c:	d150      	bne.n	11910 <d_encoding+0x304>
   1186e:	786d      	ldrb	r5, [r5, #1]
   11870:	2d53      	cmp	r5, #83	; 0x53
   11872:	d049      	beq.n	11908 <d_encoding+0x2fc>
   11874:	2d5f      	cmp	r5, #95	; 0x5f
   11876:	d049      	beq.n	1190c <d_encoding+0x300>
   11878:	2d24      	cmp	r5, #36	; 0x24
   1187a:	f47f aedd 	bne.w	11638 <d_encoding+0x2c>
   1187e:	4620      	mov	r0, r4
   11880:	f7fe f9ba 	bl	fbf8 <d_make_empty>
   11884:	b108      	cbz	r0, 1188a <d_encoding+0x27e>
   11886:	7007      	strb	r7, [r0, #0]
   11888:	6085      	str	r5, [r0, #8]
   1188a:	68e5      	ldr	r5, [r4, #12]
   1188c:	3e02      	subs	r6, #2
   1188e:	3502      	adds	r5, #2
   11890:	60e5      	str	r5, [r4, #12]
   11892:	2800      	cmp	r0, #0
   11894:	f43f aed0 	beq.w	11638 <d_encoding+0x2c>
   11898:	f1b8 0f00 	cmp.w	r8, #0
   1189c:	d008      	beq.n	118b0 <d_encoding+0x2a4>
   1189e:	4603      	mov	r3, r0
   118a0:	4642      	mov	r2, r8
   118a2:	2140      	movs	r1, #64	; 0x40
   118a4:	4620      	mov	r0, r4
   118a6:	f7fe f9b6 	bl	fc16 <d_make_comp>
   118aa:	2800      	cmp	r0, #0
   118ac:	f43f aec4 	beq.w	11638 <d_encoding+0x2c>
   118b0:	2e00      	cmp	r6, #0
   118b2:	dc27      	bgt.n	11904 <d_encoding+0x2f8>
   118b4:	2300      	movs	r3, #0
   118b6:	4602      	mov	r2, r0
   118b8:	213f      	movs	r1, #63	; 0x3f
   118ba:	e73f      	b.n	1173c <d_encoding+0x130>
   118bc:	4620      	mov	r0, r4
   118be:	f7ff fd61 	bl	11384 <d_name>
   118c2:	2300      	movs	r3, #0
   118c4:	4602      	mov	r2, r0
   118c6:	2113      	movs	r1, #19
   118c8:	e738      	b.n	1173c <d_encoding+0x130>
   118ca:	2100      	movs	r1, #0
   118cc:	4620      	mov	r0, r4
   118ce:	f7ff fe9d 	bl	1160c <d_encoding>
   118d2:	2300      	movs	r3, #0
   118d4:	4602      	mov	r2, r0
   118d6:	2117      	movs	r1, #23
   118d8:	e730      	b.n	1173c <d_encoding+0x130>
   118da:	789a      	ldrb	r2, [r3, #2]
   118dc:	2100      	movs	r1, #0
   118de:	4620      	mov	r0, r4
   118e0:	b152      	cbz	r2, 118f8 <d_encoding+0x2ec>
   118e2:	1cda      	adds	r2, r3, #3
   118e4:	60e2      	str	r2, [r4, #12]
   118e6:	789b      	ldrb	r3, [r3, #2]
   118e8:	2b6e      	cmp	r3, #110	; 0x6e
   118ea:	d105      	bne.n	118f8 <d_encoding+0x2ec>
   118ec:	f7ff fe8e 	bl	1160c <d_encoding>
   118f0:	2300      	movs	r3, #0
   118f2:	4602      	mov	r2, r0
   118f4:	214a      	movs	r1, #74	; 0x4a
   118f6:	e721      	b.n	1173c <d_encoding+0x130>
   118f8:	f7ff fe88 	bl	1160c <d_encoding>
   118fc:	2300      	movs	r3, #0
   118fe:	4602      	mov	r2, r0
   11900:	2149      	movs	r1, #73	; 0x49
   11902:	e71b      	b.n	1173c <d_encoding+0x130>
   11904:	4680      	mov	r8, r0
   11906:	e7ac      	b.n	11862 <d_encoding+0x256>
   11908:	252f      	movs	r5, #47	; 0x2f
   1190a:	e7b8      	b.n	1187e <d_encoding+0x272>
   1190c:	252e      	movs	r5, #46	; 0x2e
   1190e:	e7b6      	b.n	1187e <d_encoding+0x272>
   11910:	f04f 0900 	mov.w	r9, #0
   11914:	f815 3009 	ldrb.w	r3, [r5, r9]
   11918:	b12b      	cbz	r3, 11926 <d_encoding+0x31a>
   1191a:	2b24      	cmp	r3, #36	; 0x24
   1191c:	d003      	beq.n	11926 <d_encoding+0x31a>
   1191e:	f109 0901 	add.w	r9, r9, #1
   11922:	45b1      	cmp	r9, r6
   11924:	dbf6      	blt.n	11914 <d_encoding+0x308>
   11926:	4629      	mov	r1, r5
   11928:	464a      	mov	r2, r9
   1192a:	4620      	mov	r0, r4
   1192c:	eba6 0609 	sub.w	r6, r6, r9
   11930:	f7fe f9b2 	bl	fc98 <d_make_name>
   11934:	68e5      	ldr	r5, [r4, #12]
   11936:	444d      	add	r5, r9
   11938:	60e5      	str	r5, [r4, #12]
   1193a:	e7aa      	b.n	11892 <d_encoding+0x286>
   1193c:	f7ff fd22 	bl	11384 <d_name>
   11940:	4605      	mov	r5, r0
   11942:	2800      	cmp	r0, #0
   11944:	f43f ae78 	beq.w	11638 <d_encoding+0x2c>
   11948:	b116      	cbz	r6, 11950 <d_encoding+0x344>
   1194a:	68a3      	ldr	r3, [r4, #8]
   1194c:	07d9      	lsls	r1, r3, #31
   1194e:	d511      	bpl.n	11974 <d_encoding+0x368>
   11950:	68e3      	ldr	r3, [r4, #12]
   11952:	781b      	ldrb	r3, [r3, #0]
   11954:	2b00      	cmp	r3, #0
   11956:	f43f ae70 	beq.w	1163a <d_encoding+0x2e>
   1195a:	2b45      	cmp	r3, #69	; 0x45
   1195c:	f43f ae6d 	beq.w	1163a <d_encoding+0x2e>
   11960:	4629      	mov	r1, r5
   11962:	780a      	ldrb	r2, [r1, #0]
   11964:	2a04      	cmp	r2, #4
   11966:	d038      	beq.n	119da <d_encoding+0x3ce>
   11968:	d817      	bhi.n	1199a <d_encoding+0x38e>
   1196a:	2a02      	cmp	r2, #2
   1196c:	d020      	beq.n	119b0 <d_encoding+0x3a4>
   1196e:	2100      	movs	r1, #0
   11970:	e021      	b.n	119b6 <d_encoding+0x3aa>
   11972:	68ad      	ldr	r5, [r5, #8]
   11974:	782b      	ldrb	r3, [r5, #0]
   11976:	4618      	mov	r0, r3
   11978:	f7fe f930 	bl	fbdc <is_fnqual_component_type>
   1197c:	2800      	cmp	r0, #0
   1197e:	d1f8      	bne.n	11972 <d_encoding+0x366>
   11980:	2b02      	cmp	r3, #2
   11982:	f47f ae5a 	bne.w	1163a <d_encoding+0x2e>
   11986:	68eb      	ldr	r3, [r5, #12]
   11988:	7818      	ldrb	r0, [r3, #0]
   1198a:	f7fe f927 	bl	fbdc <is_fnqual_component_type>
   1198e:	2800      	cmp	r0, #0
   11990:	f43f ae53 	beq.w	1163a <d_encoding+0x2e>
   11994:	689b      	ldr	r3, [r3, #8]
   11996:	60eb      	str	r3, [r5, #12]
   11998:	e7f5      	b.n	11986 <d_encoding+0x37a>
   1199a:	2a4d      	cmp	r2, #77	; 0x4d
   1199c:	d003      	beq.n	119a6 <d_encoding+0x39a>
   1199e:	d804      	bhi.n	119aa <d_encoding+0x39e>
   119a0:	3a1c      	subs	r2, #28
   119a2:	2a04      	cmp	r2, #4
   119a4:	d8e3      	bhi.n	1196e <d_encoding+0x362>
   119a6:	6889      	ldr	r1, [r1, #8]
   119a8:	e003      	b.n	119b2 <d_encoding+0x3a6>
   119aa:	3a4f      	subs	r2, #79	; 0x4f
   119ac:	2a01      	cmp	r2, #1
   119ae:	e7f9      	b.n	119a4 <d_encoding+0x398>
   119b0:	68c9      	ldr	r1, [r1, #12]
   119b2:	2900      	cmp	r1, #0
   119b4:	d1d5      	bne.n	11962 <d_encoding+0x356>
   119b6:	4620      	mov	r0, r4
   119b8:	f7ff fb93 	bl	110e2 <d_bare_function_type>
   119bc:	2800      	cmp	r0, #0
   119be:	f43f ae3b 	beq.w	11638 <d_encoding+0x2c>
   119c2:	b936      	cbnz	r6, 119d2 <d_encoding+0x3c6>
   119c4:	782b      	ldrb	r3, [r5, #0]
   119c6:	2b02      	cmp	r3, #2
   119c8:	d103      	bne.n	119d2 <d_encoding+0x3c6>
   119ca:	7803      	ldrb	r3, [r0, #0]
   119cc:	2b29      	cmp	r3, #41	; 0x29
   119ce:	bf08      	it	eq
   119d0:	6086      	streq	r6, [r0, #8]
   119d2:	4603      	mov	r3, r0
   119d4:	462a      	mov	r2, r5
   119d6:	2103      	movs	r1, #3
   119d8:	e6b0      	b.n	1173c <d_encoding+0x130>
   119da:	688b      	ldr	r3, [r1, #8]
   119dc:	b16b      	cbz	r3, 119fa <d_encoding+0x3ee>
   119de:	7819      	ldrb	r1, [r3, #0]
   119e0:	2908      	cmp	r1, #8
   119e2:	d806      	bhi.n	119f2 <d_encoding+0x3e6>
   119e4:	2906      	cmp	r1, #6
   119e6:	d80d      	bhi.n	11a04 <d_encoding+0x3f8>
   119e8:	3901      	subs	r1, #1
   119ea:	2901      	cmp	r1, #1
   119ec:	d908      	bls.n	11a00 <d_encoding+0x3f4>
   119ee:	2300      	movs	r3, #0
   119f0:	e003      	b.n	119fa <d_encoding+0x3ee>
   119f2:	f1a1 0235 	sub.w	r2, r1, #53	; 0x35
   119f6:	4253      	negs	r3, r2
   119f8:	4153      	adcs	r3, r2
   119fa:	f083 0101 	eor.w	r1, r3, #1
   119fe:	e7da      	b.n	119b6 <d_encoding+0x3aa>
   11a00:	68db      	ldr	r3, [r3, #12]
   11a02:	e7eb      	b.n	119dc <d_encoding+0x3d0>
   11a04:	2301      	movs	r3, #1
   11a06:	e7f8      	b.n	119fa <d_encoding+0x3ee>

00011a08 <d_print_comp>:
   11a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a0c:	4604      	mov	r4, r0
   11a0e:	b097      	sub	sp, #92	; 0x5c
   11a10:	460e      	mov	r6, r1
   11a12:	4615      	mov	r5, r2
   11a14:	b13a      	cbz	r2, 11a26 <d_print_comp+0x1e>
   11a16:	6852      	ldr	r2, [r2, #4]
   11a18:	2a01      	cmp	r2, #1
   11a1a:	dc04      	bgt.n	11a26 <d_print_comp+0x1e>
   11a1c:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   11a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   11a24:	dd05      	ble.n	11a32 <d_print_comp+0x2a>
   11a26:	2301      	movs	r3, #1
   11a28:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   11a2c:	b017      	add	sp, #92	; 0x5c
   11a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a32:	3301      	adds	r3, #1
   11a34:	3201      	adds	r2, #1
   11a36:	a902      	add	r1, sp, #8
   11a38:	9502      	str	r5, [sp, #8]
   11a3a:	606a      	str	r2, [r5, #4]
   11a3c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   11a40:	f8d0 8118 	ldr.w	r8, [r0, #280]	; 0x118
   11a44:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
   11a48:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
   11a4c:	9303      	str	r3, [sp, #12]
   11a4e:	f1b8 0f00 	cmp.w	r8, #0
   11a52:	d15d      	bne.n	11b10 <d_print_comp+0x108>
   11a54:	782b      	ldrb	r3, [r5, #0]
   11a56:	2b50      	cmp	r3, #80	; 0x50
   11a58:	f200 8634 	bhi.w	126c4 <d_print_comp+0xcbc>
   11a5c:	e8df f013 	tbh	[pc, r3, lsl #1]
   11a60:	00b60051 	.word	0x00b60051
   11a64:	00dd00b6 	.word	0x00dd00b6
   11a68:	01670120 	.word	0x01670120
   11a6c:	019e0781 	.word	0x019e0781
   11a70:	01ac01a3 	.word	0x01ac01a3
   11a74:	01be01b5 	.word	0x01be01b5
   11a78:	01d901d0 	.word	0x01d901d0
   11a7c:	01eb01e2 	.word	0x01eb01e2
   11a80:	01fd01f4 	.word	0x01fd01f4
   11a84:	020f0206 	.word	0x020f0206
   11a88:	02210218 	.word	0x02210218
   11a8c:	02680256 	.word	0x02680256
   11a90:	02880283 	.word	0x02880283
   11a94:	02880288 	.word	0x02880288
   11a98:	033e033e 	.word	0x033e033e
   11a9c:	033e033e 	.word	0x033e033e
   11aa0:	033e033e 	.word	0x033e033e
   11aa4:	02c6033e 	.word	0x02c6033e
   11aa8:	033e02c6 	.word	0x033e02c6
   11aac:	0343033e 	.word	0x0343033e
   11ab0:	0352034d 	.word	0x0352034d
   11ab4:	03f2038f 	.word	0x03f2038f
   11ab8:	03f2040d 	.word	0x03f2040d
   11abc:	042d042d 	.word	0x042d042d
   11ac0:	04590195 	.word	0x04590195
   11ac4:	048a046e 	.word	0x048a046e
   11ac8:	04940632 	.word	0x04940632
   11acc:	04e404de 	.word	0x04e404de
   11ad0:	0632059c 	.word	0x0632059c
   11ad4:	06320637 	.word	0x06320637
   11ad8:	068e0632 	.word	0x068e0632
   11adc:	0715068e 	.word	0x0715068e
   11ae0:	072a071f 	.word	0x072a071f
   11ae4:	07480710 	.word	0x07480710
   11ae8:	079f0795 	.word	0x079f0795
   11aec:	063207a9 	.word	0x063207a9
   11af0:	027107ca 	.word	0x027107ca
   11af4:	0756027a 	.word	0x0756027a
   11af8:	033e00a4 	.word	0x033e00a4
   11afc:	033e07d8 	.word	0x033e07d8
   11b00:	033e      	.short	0x033e
   11b02:	0776      	lsls	r6, r6, #29
   11b04:	68af      	ldr	r7, [r5, #8]
   11b06:	d40f      	bmi.n	11b28 <d_print_comp+0x120>
   11b08:	68ea      	ldr	r2, [r5, #12]
   11b0a:	4639      	mov	r1, r7
   11b0c:	f7fe f983 	bl	fe16 <d_append_buffer>
   11b10:	9b03      	ldr	r3, [sp, #12]
   11b12:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   11b16:	686b      	ldr	r3, [r5, #4]
   11b18:	3b01      	subs	r3, #1
   11b1a:	606b      	str	r3, [r5, #4]
   11b1c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   11b20:	3b01      	subs	r3, #1
   11b22:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   11b26:	e781      	b.n	11a2c <d_print_comp+0x24>
   11b28:	68eb      	ldr	r3, [r5, #12]
   11b2a:	eb07 0803 	add.w	r8, r7, r3
   11b2e:	45b8      	cmp	r8, r7
   11b30:	d9ee      	bls.n	11b10 <d_print_comp+0x108>
   11b32:	eba8 0307 	sub.w	r3, r8, r7
   11b36:	7839      	ldrb	r1, [r7, #0]
   11b38:	2b03      	cmp	r3, #3
   11b3a:	dd0c      	ble.n	11b56 <d_print_comp+0x14e>
   11b3c:	295f      	cmp	r1, #95	; 0x5f
   11b3e:	d10a      	bne.n	11b56 <d_print_comp+0x14e>
   11b40:	787b      	ldrb	r3, [r7, #1]
   11b42:	2b5f      	cmp	r3, #95	; 0x5f
   11b44:	d107      	bne.n	11b56 <d_print_comp+0x14e>
   11b46:	78bb      	ldrb	r3, [r7, #2]
   11b48:	2b55      	cmp	r3, #85	; 0x55
   11b4a:	d104      	bne.n	11b56 <d_print_comp+0x14e>
   11b4c:	1cfe      	adds	r6, r7, #3
   11b4e:	2000      	movs	r0, #0
   11b50:	45b0      	cmp	r8, r6
   11b52:	46b1      	mov	r9, r6
   11b54:	d804      	bhi.n	11b60 <d_print_comp+0x158>
   11b56:	4620      	mov	r0, r4
   11b58:	46b9      	mov	r9, r7
   11b5a:	f7fe f94a 	bl	fdf2 <d_append_char>
   11b5e:	e020      	b.n	11ba2 <d_print_comp+0x19a>
   11b60:	f816 3b01 	ldrb.w	r3, [r6], #1
   11b64:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   11b68:	fa5f fc82 	uxtb.w	ip, r2
   11b6c:	f1bc 0f09 	cmp.w	ip, #9
   11b70:	d803      	bhi.n	11b7a <d_print_comp+0x172>
   11b72:	4613      	mov	r3, r2
   11b74:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   11b78:	e7ea      	b.n	11b50 <d_print_comp+0x148>
   11b7a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   11b7e:	2a05      	cmp	r2, #5
   11b80:	d801      	bhi.n	11b86 <d_print_comp+0x17e>
   11b82:	3b37      	subs	r3, #55	; 0x37
   11b84:	e7f6      	b.n	11b74 <d_print_comp+0x16c>
   11b86:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   11b8a:	2a05      	cmp	r2, #5
   11b8c:	d801      	bhi.n	11b92 <d_print_comp+0x18a>
   11b8e:	3b57      	subs	r3, #87	; 0x57
   11b90:	e7f0      	b.n	11b74 <d_print_comp+0x16c>
   11b92:	2b5f      	cmp	r3, #95	; 0x5f
   11b94:	d1df      	bne.n	11b56 <d_print_comp+0x14e>
   11b96:	28ff      	cmp	r0, #255	; 0xff
   11b98:	d8dd      	bhi.n	11b56 <d_print_comp+0x14e>
   11b9a:	b2c1      	uxtb	r1, r0
   11b9c:	4620      	mov	r0, r4
   11b9e:	f7fe f928 	bl	fdf2 <d_append_char>
   11ba2:	f109 0701 	add.w	r7, r9, #1
   11ba6:	e7c2      	b.n	11b2e <d_print_comp+0x126>
   11ba8:	68aa      	ldr	r2, [r5, #8]
   11baa:	4631      	mov	r1, r6
   11bac:	f7ff ff2c 	bl	11a08 <d_print_comp>
   11bb0:	4620      	mov	r0, r4
   11bb2:	49c0      	ldr	r1, [pc, #768]	; (11eb4 <d_print_comp+0x4ac>)
   11bb4:	f7fe f948 	bl	fe48 <d_append_string>
   11bb8:	4631      	mov	r1, r6
   11bba:	4620      	mov	r0, r4
   11bbc:	68ea      	ldr	r2, [r5, #12]
   11bbe:	f7ff ff23 	bl	11a08 <d_print_comp>
   11bc2:	215d      	movs	r1, #93	; 0x5d
   11bc4:	4620      	mov	r0, r4
   11bc6:	f7fe f914 	bl	fdf2 <d_append_char>
   11bca:	e7a1      	b.n	11b10 <d_print_comp+0x108>
   11bcc:	68aa      	ldr	r2, [r5, #8]
   11bce:	4631      	mov	r1, r6
   11bd0:	f7ff ff1a 	bl	11a08 <d_print_comp>
   11bd4:	0770      	lsls	r0, r6, #29
   11bd6:	d41b      	bmi.n	11c10 <d_print_comp+0x208>
   11bd8:	49b7      	ldr	r1, [pc, #732]	; (11eb8 <d_print_comp+0x4b0>)
   11bda:	4620      	mov	r0, r4
   11bdc:	f7fe f934 	bl	fe48 <d_append_string>
   11be0:	68ef      	ldr	r7, [r5, #12]
   11be2:	783b      	ldrb	r3, [r7, #0]
   11be4:	2b47      	cmp	r3, #71	; 0x47
   11be6:	d10d      	bne.n	11c04 <d_print_comp+0x1fc>
   11be8:	49b4      	ldr	r1, [pc, #720]	; (11ebc <d_print_comp+0x4b4>)
   11bea:	4620      	mov	r0, r4
   11bec:	f7fe f92c 	bl	fe48 <d_append_string>
   11bf0:	68f9      	ldr	r1, [r7, #12]
   11bf2:	4620      	mov	r0, r4
   11bf4:	3101      	adds	r1, #1
   11bf6:	f7fe f934 	bl	fe62 <d_append_num>
   11bfa:	49b1      	ldr	r1, [pc, #708]	; (11ec0 <d_print_comp+0x4b8>)
   11bfc:	4620      	mov	r0, r4
   11bfe:	f7fe f923 	bl	fe48 <d_append_string>
   11c02:	68bf      	ldr	r7, [r7, #8]
   11c04:	463a      	mov	r2, r7
   11c06:	4631      	mov	r1, r6
   11c08:	4620      	mov	r0, r4
   11c0a:	f7ff fefd 	bl	11a08 <d_print_comp>
   11c0e:	e77f      	b.n	11b10 <d_print_comp+0x108>
   11c10:	212e      	movs	r1, #46	; 0x2e
   11c12:	4620      	mov	r0, r4
   11c14:	f7fe f8ed 	bl	fdf2 <d_append_char>
   11c18:	e7e2      	b.n	11be0 <d_print_comp+0x1d8>
   11c1a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   11c1e:	2200      	movs	r2, #0
   11c20:	68af      	ldr	r7, [r5, #8]
   11c22:	9301      	str	r3, [sp, #4]
   11c24:	ab06      	add	r3, sp, #24
   11c26:	4690      	mov	r8, r2
   11c28:	4611      	mov	r1, r2
   11c2a:	4699      	mov	r9, r3
   11c2c:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   11c30:	b117      	cbz	r7, 11c38 <d_print_comp+0x230>
   11c32:	f1b8 0f04 	cmp.w	r8, #4
   11c36:	d103      	bne.n	11c40 <d_print_comp+0x238>
   11c38:	2301      	movs	r3, #1
   11c3a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   11c3e:	e767      	b.n	11b10 <d_print_comp+0x108>
   11c40:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
   11c44:	f108 0801 	add.w	r8, r8, #1
   11c48:	f8d4 a110 	ldr.w	sl, [r4, #272]	; 0x110
   11c4c:	601a      	str	r2, [r3, #0]
   11c4e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   11c52:	f8c3 a00c 	str.w	sl, [r3, #12]
   11c56:	e9c3 7101 	strd	r7, r1, [r3, #4]
   11c5a:	783a      	ldrb	r2, [r7, #0]
   11c5c:	4610      	mov	r0, r2
   11c5e:	f7fd ffbd 	bl	fbdc <is_fnqual_component_type>
   11c62:	3310      	adds	r3, #16
   11c64:	2800      	cmp	r0, #0
   11c66:	f000 86e6 	beq.w	12a36 <d_print_comp+0x102e>
   11c6a:	68bf      	ldr	r7, [r7, #8]
   11c6c:	e7e0      	b.n	11c30 <d_print_comp+0x228>
   11c6e:	f1b8 0f04 	cmp.w	r8, #4
   11c72:	f109 0c10 	add.w	ip, r9, #16
   11c76:	d0df      	beq.n	11c38 <d_print_comp+0x230>
   11c78:	f1a9 0e10 	sub.w	lr, r9, #16
   11c7c:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   11c80:	f108 0801 	add.w	r8, r8, #1
   11c84:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
   11c88:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
   11c8c:	f84c ec10 	str.w	lr, [ip, #-16]
   11c90:	f849 ac04 	str.w	sl, [r9, #-4]
   11c94:	e949 7b03 	strd	r7, fp, [r9, #-12]
   11c98:	46e1      	mov	r9, ip
   11c9a:	68bf      	ldr	r7, [r7, #8]
   11c9c:	f000 bed9 	b.w	12a52 <d_print_comp+0x104a>
   11ca0:	2300      	movs	r3, #0
   11ca2:	0771      	lsls	r1, r6, #29
   11ca4:	f8d0 8148 	ldr.w	r8, [r0, #328]	; 0x148
   11ca8:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   11cac:	68af      	ldr	r7, [r5, #8]
   11cae:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
   11cb2:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   11cb6:	d517      	bpl.n	11ce8 <d_print_comp+0x2e0>
   11cb8:	783b      	ldrb	r3, [r7, #0]
   11cba:	b9ab      	cbnz	r3, 11ce8 <d_print_comp+0x2e0>
   11cbc:	68fa      	ldr	r2, [r7, #12]
   11cbe:	2a06      	cmp	r2, #6
   11cc0:	d112      	bne.n	11ce8 <d_print_comp+0x2e0>
   11cc2:	4980      	ldr	r1, [pc, #512]	; (11ec4 <d_print_comp+0x4bc>)
   11cc4:	68b8      	ldr	r0, [r7, #8]
   11cc6:	f012 fd15 	bl	246f4 <strncmp>
   11cca:	b968      	cbnz	r0, 11ce8 <d_print_comp+0x2e0>
   11ccc:	4631      	mov	r1, r6
   11cce:	4620      	mov	r0, r4
   11cd0:	68ea      	ldr	r2, [r5, #12]
   11cd2:	f7ff fe99 	bl	11a08 <d_print_comp>
   11cd6:	497c      	ldr	r1, [pc, #496]	; (11ec8 <d_print_comp+0x4c0>)
   11cd8:	4620      	mov	r0, r4
   11cda:	f7fe f8b5 	bl	fe48 <d_append_string>
   11cde:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   11ce2:	f8c4 8148 	str.w	r8, [r4, #328]	; 0x148
   11ce6:	e713      	b.n	11b10 <d_print_comp+0x108>
   11ce8:	463a      	mov	r2, r7
   11cea:	4631      	mov	r1, r6
   11cec:	4620      	mov	r0, r4
   11cee:	f7ff fe8b 	bl	11a08 <d_print_comp>
   11cf2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   11cf6:	2b3c      	cmp	r3, #60	; 0x3c
   11cf8:	d103      	bne.n	11d02 <d_print_comp+0x2fa>
   11cfa:	2120      	movs	r1, #32
   11cfc:	4620      	mov	r0, r4
   11cfe:	f7fe f878 	bl	fdf2 <d_append_char>
   11d02:	213c      	movs	r1, #60	; 0x3c
   11d04:	4620      	mov	r0, r4
   11d06:	f7fe f874 	bl	fdf2 <d_append_char>
   11d0a:	68ea      	ldr	r2, [r5, #12]
   11d0c:	4631      	mov	r1, r6
   11d0e:	4620      	mov	r0, r4
   11d10:	f7ff fe7a 	bl	11a08 <d_print_comp>
   11d14:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   11d18:	2b3e      	cmp	r3, #62	; 0x3e
   11d1a:	d103      	bne.n	11d24 <d_print_comp+0x31c>
   11d1c:	2120      	movs	r1, #32
   11d1e:	4620      	mov	r0, r4
   11d20:	f7fe f867 	bl	fdf2 <d_append_char>
   11d24:	213e      	movs	r1, #62	; 0x3e
   11d26:	4620      	mov	r0, r4
   11d28:	f7fe f863 	bl	fdf2 <d_append_char>
   11d2c:	e7d7      	b.n	11cde <d_print_comp+0x2d6>
   11d2e:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   11d32:	b14b      	cbz	r3, 11d48 <d_print_comp+0x340>
   11d34:	2205      	movs	r2, #5
   11d36:	4965      	ldr	r1, [pc, #404]	; (11ecc <d_print_comp+0x4c4>)
   11d38:	f7fe f86d 	bl	fe16 <d_append_buffer>
   11d3c:	68a9      	ldr	r1, [r5, #8]
   11d3e:	4620      	mov	r0, r4
   11d40:	3101      	adds	r1, #1
   11d42:	f7fe f88e 	bl	fe62 <d_append_num>
   11d46:	e6e3      	b.n	11b10 <d_print_comp+0x108>
   11d48:	f105 0108 	add.w	r1, r5, #8
   11d4c:	f7fe fa19 	bl	10182 <d_lookup_template_argument.isra.0>
   11d50:	4602      	mov	r2, r0
   11d52:	b150      	cbz	r0, 11d6a <d_print_comp+0x362>
   11d54:	7803      	ldrb	r3, [r0, #0]
   11d56:	2b2f      	cmp	r3, #47	; 0x2f
   11d58:	d10b      	bne.n	11d72 <d_print_comp+0x36a>
   11d5a:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   11d5e:	2900      	cmp	r1, #0
   11d60:	db07      	blt.n	11d72 <d_print_comp+0x36a>
   11d62:	f7fe f9c7 	bl	100f4 <d_index_template_argument.part.0>
   11d66:	4602      	mov	r2, r0
   11d68:	b918      	cbnz	r0, 11d72 <d_print_comp+0x36a>
   11d6a:	2301      	movs	r3, #1
   11d6c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   11d70:	e6ce      	b.n	11b10 <d_print_comp+0x108>
   11d72:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
   11d76:	4631      	mov	r1, r6
   11d78:	4620      	mov	r0, r4
   11d7a:	683b      	ldr	r3, [r7, #0]
   11d7c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   11d80:	f7ff fe42 	bl	11a08 <d_print_comp>
   11d84:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
   11d88:	e6c2      	b.n	11b10 <d_print_comp+0x108>
   11d8a:	4951      	ldr	r1, [pc, #324]	; (11ed0 <d_print_comp+0x4c8>)
   11d8c:	f7fe f85c 	bl	fe48 <d_append_string>
   11d90:	68aa      	ldr	r2, [r5, #8]
   11d92:	4631      	mov	r1, r6
   11d94:	4620      	mov	r0, r4
   11d96:	f7ff fe37 	bl	11a08 <d_print_comp>
   11d9a:	e6b9      	b.n	11b10 <d_print_comp+0x108>
   11d9c:	68ea      	ldr	r2, [r5, #12]
   11d9e:	4631      	mov	r1, r6
   11da0:	f7ff fe32 	bl	11a08 <d_print_comp>
   11da4:	e6b4      	b.n	11b10 <d_print_comp+0x108>
   11da6:	217e      	movs	r1, #126	; 0x7e
   11da8:	f7fe f823 	bl	fdf2 <d_append_char>
   11dac:	68ea      	ldr	r2, [r5, #12]
   11dae:	4631      	mov	r1, r6
   11db0:	4620      	mov	r0, r4
   11db2:	f7ff fe29 	bl	11a08 <d_print_comp>
   11db6:	e6ab      	b.n	11b10 <d_print_comp+0x108>
   11db8:	4946      	ldr	r1, [pc, #280]	; (11ed4 <d_print_comp+0x4cc>)
   11dba:	f7fe f845 	bl	fe48 <d_append_string>
   11dbe:	68aa      	ldr	r2, [r5, #8]
   11dc0:	4631      	mov	r1, r6
   11dc2:	4620      	mov	r0, r4
   11dc4:	f7ff fe20 	bl	11a08 <d_print_comp>
   11dc8:	e6a2      	b.n	11b10 <d_print_comp+0x108>
   11dca:	4943      	ldr	r1, [pc, #268]	; (11ed8 <d_print_comp+0x4d0>)
   11dcc:	f7fe f83c 	bl	fe48 <d_append_string>
   11dd0:	68aa      	ldr	r2, [r5, #8]
   11dd2:	4631      	mov	r1, r6
   11dd4:	4620      	mov	r0, r4
   11dd6:	f7ff fe17 	bl	11a08 <d_print_comp>
   11dda:	e699      	b.n	11b10 <d_print_comp+0x108>
   11ddc:	493f      	ldr	r1, [pc, #252]	; (11edc <d_print_comp+0x4d4>)
   11dde:	f7fe f833 	bl	fe48 <d_append_string>
   11de2:	68aa      	ldr	r2, [r5, #8]
   11de4:	4631      	mov	r1, r6
   11de6:	4620      	mov	r0, r4
   11de8:	f7ff fe0e 	bl	11a08 <d_print_comp>
   11dec:	4620      	mov	r0, r4
   11dee:	493c      	ldr	r1, [pc, #240]	; (11ee0 <d_print_comp+0x4d8>)
   11df0:	f7fe f82a 	bl	fe48 <d_append_string>
   11df4:	68ea      	ldr	r2, [r5, #12]
   11df6:	4631      	mov	r1, r6
   11df8:	4620      	mov	r0, r4
   11dfa:	f7ff fe05 	bl	11a08 <d_print_comp>
   11dfe:	e687      	b.n	11b10 <d_print_comp+0x108>
   11e00:	4938      	ldr	r1, [pc, #224]	; (11ee4 <d_print_comp+0x4dc>)
   11e02:	f7fe f821 	bl	fe48 <d_append_string>
   11e06:	68aa      	ldr	r2, [r5, #8]
   11e08:	4631      	mov	r1, r6
   11e0a:	4620      	mov	r0, r4
   11e0c:	f7ff fdfc 	bl	11a08 <d_print_comp>
   11e10:	e67e      	b.n	11b10 <d_print_comp+0x108>
   11e12:	4935      	ldr	r1, [pc, #212]	; (11ee8 <d_print_comp+0x4e0>)
   11e14:	f7fe f818 	bl	fe48 <d_append_string>
   11e18:	68aa      	ldr	r2, [r5, #8]
   11e1a:	4631      	mov	r1, r6
   11e1c:	4620      	mov	r0, r4
   11e1e:	f7ff fdf3 	bl	11a08 <d_print_comp>
   11e22:	e675      	b.n	11b10 <d_print_comp+0x108>
   11e24:	4931      	ldr	r1, [pc, #196]	; (11eec <d_print_comp+0x4e4>)
   11e26:	f7fe f80f 	bl	fe48 <d_append_string>
   11e2a:	68aa      	ldr	r2, [r5, #8]
   11e2c:	4631      	mov	r1, r6
   11e2e:	4620      	mov	r0, r4
   11e30:	f7ff fdea 	bl	11a08 <d_print_comp>
   11e34:	e66c      	b.n	11b10 <d_print_comp+0x108>
   11e36:	492e      	ldr	r1, [pc, #184]	; (11ef0 <d_print_comp+0x4e8>)
   11e38:	f7fe f806 	bl	fe48 <d_append_string>
   11e3c:	68aa      	ldr	r2, [r5, #8]
   11e3e:	4631      	mov	r1, r6
   11e40:	4620      	mov	r0, r4
   11e42:	f7ff fde1 	bl	11a08 <d_print_comp>
   11e46:	e663      	b.n	11b10 <d_print_comp+0x108>
   11e48:	492a      	ldr	r1, [pc, #168]	; (11ef4 <d_print_comp+0x4ec>)
   11e4a:	f7fd fffd 	bl	fe48 <d_append_string>
   11e4e:	68aa      	ldr	r2, [r5, #8]
   11e50:	4631      	mov	r1, r6
   11e52:	4620      	mov	r0, r4
   11e54:	f7ff fdd8 	bl	11a08 <d_print_comp>
   11e58:	e65a      	b.n	11b10 <d_print_comp+0x108>
   11e5a:	4927      	ldr	r1, [pc, #156]	; (11ef8 <d_print_comp+0x4f0>)
   11e5c:	f7fd fff4 	bl	fe48 <d_append_string>
   11e60:	68aa      	ldr	r2, [r5, #8]
   11e62:	4631      	mov	r1, r6
   11e64:	4620      	mov	r0, r4
   11e66:	f7ff fdcf 	bl	11a08 <d_print_comp>
   11e6a:	e651      	b.n	11b10 <d_print_comp+0x108>
   11e6c:	4923      	ldr	r1, [pc, #140]	; (11efc <d_print_comp+0x4f4>)
   11e6e:	f7fd ffeb 	bl	fe48 <d_append_string>
   11e72:	68aa      	ldr	r2, [r5, #8]
   11e74:	4631      	mov	r1, r6
   11e76:	4620      	mov	r0, r4
   11e78:	f7ff fdc6 	bl	11a08 <d_print_comp>
   11e7c:	e648      	b.n	11b10 <d_print_comp+0x108>
   11e7e:	4920      	ldr	r1, [pc, #128]	; (11f00 <d_print_comp+0x4f8>)
   11e80:	f7fd ffe2 	bl	fe48 <d_append_string>
   11e84:	68aa      	ldr	r2, [r5, #8]
   11e86:	4631      	mov	r1, r6
   11e88:	4620      	mov	r0, r4
   11e8a:	f7ff fdbd 	bl	11a08 <d_print_comp>
   11e8e:	e63f      	b.n	11b10 <d_print_comp+0x108>
   11e90:	491c      	ldr	r1, [pc, #112]	; (11f04 <d_print_comp+0x4fc>)
   11e92:	f7fd ffd9 	bl	fe48 <d_append_string>
   11e96:	68aa      	ldr	r2, [r5, #8]
   11e98:	4631      	mov	r1, r6
   11e9a:	4620      	mov	r0, r4
   11e9c:	f7ff fdb4 	bl	11a08 <d_print_comp>
   11ea0:	e636      	b.n	11b10 <d_print_comp+0x108>
   11ea2:	4919      	ldr	r1, [pc, #100]	; (11f08 <d_print_comp+0x500>)
   11ea4:	f7fd ffd0 	bl	fe48 <d_append_string>
   11ea8:	68aa      	ldr	r2, [r5, #8]
   11eaa:	4631      	mov	r1, r6
   11eac:	4620      	mov	r0, r4
   11eae:	f7ff fdab 	bl	11a08 <d_print_comp>
   11eb2:	e62d      	b.n	11b10 <d_print_comp+0x108>
   11eb4:	0002cbe5 	.word	0x0002cbe5
   11eb8:	0002cbfa 	.word	0x0002cbfa
   11ebc:	0002cbeb 	.word	0x0002cbeb
   11ec0:	0002cbf9 	.word	0x0002cbf9
   11ec4:	0002cbfd 	.word	0x0002cbfd
   11ec8:	0002d0a8 	.word	0x0002d0a8
   11ecc:	0002cc04 	.word	0x0002cc04
   11ed0:	0002cc0a 	.word	0x0002cc0a
   11ed4:	0002cc3f 	.word	0x0002cc3f
   11ed8:	0002cc29 	.word	0x0002cc29
   11edc:	0002cc32 	.word	0x0002cc32
   11ee0:	0002cc4b 	.word	0x0002cc4b
   11ee4:	0002cc50 	.word	0x0002cc50
   11ee8:	0002cc5e 	.word	0x0002cc5e
   11eec:	0002cc71 	.word	0x0002cc71
   11ef0:	0002cc82 	.word	0x0002cc82
   11ef4:	0002cc86 	.word	0x0002cc86
   11ef8:	0002cc98 	.word	0x0002cc98
   11efc:	0002ccb3 	.word	0x0002ccb3
   11f00:	0002ccc3 	.word	0x0002ccc3
   11f04:	0002ccd7 	.word	0x0002ccd7
   11f08:	0002ccee 	.word	0x0002ccee
   11f0c:	49b8      	ldr	r1, [pc, #736]	; (121f0 <d_print_comp+0x7e8>)
   11f0e:	f7fd ff9b 	bl	fe48 <d_append_string>
   11f12:	68ea      	ldr	r2, [r5, #12]
   11f14:	4631      	mov	r1, r6
   11f16:	4620      	mov	r0, r4
   11f18:	f7ff fd76 	bl	11a08 <d_print_comp>
   11f1c:	4620      	mov	r0, r4
   11f1e:	49b5      	ldr	r1, [pc, #724]	; (121f4 <d_print_comp+0x7ec>)
   11f20:	f7fd ff92 	bl	fe48 <d_append_string>
   11f24:	68aa      	ldr	r2, [r5, #8]
   11f26:	4631      	mov	r1, r6
   11f28:	4620      	mov	r0, r4
   11f2a:	f7ff fd6d 	bl	11a08 <d_print_comp>
   11f2e:	e5ef      	b.n	11b10 <d_print_comp+0x108>
   11f30:	49b1      	ldr	r1, [pc, #708]	; (121f8 <d_print_comp+0x7f0>)
   11f32:	f7fd ff89 	bl	fe48 <d_append_string>
   11f36:	68aa      	ldr	r2, [r5, #8]
   11f38:	4631      	mov	r1, r6
   11f3a:	4620      	mov	r0, r4
   11f3c:	f7ff fd64 	bl	11a08 <d_print_comp>
   11f40:	e5e6      	b.n	11b10 <d_print_comp+0x108>
   11f42:	49ae      	ldr	r1, [pc, #696]	; (121fc <d_print_comp+0x7f4>)
   11f44:	f7fd ff80 	bl	fe48 <d_append_string>
   11f48:	68aa      	ldr	r2, [r5, #8]
   11f4a:	4631      	mov	r1, r6
   11f4c:	4620      	mov	r0, r4
   11f4e:	f7ff fd5b 	bl	11a08 <d_print_comp>
   11f52:	e5dd      	b.n	11b10 <d_print_comp+0x108>
   11f54:	49aa      	ldr	r1, [pc, #680]	; (12200 <d_print_comp+0x7f8>)
   11f56:	f7fd ff77 	bl	fe48 <d_append_string>
   11f5a:	68aa      	ldr	r2, [r5, #8]
   11f5c:	4631      	mov	r1, r6
   11f5e:	4620      	mov	r0, r4
   11f60:	f7ff fd52 	bl	11a08 <d_print_comp>
   11f64:	e5d4      	b.n	11b10 <d_print_comp+0x108>
   11f66:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   11f6a:	f7fd ff54 	bl	fe16 <d_append_buffer>
   11f6e:	e5cf      	b.n	11b10 <d_print_comp+0x108>
   11f70:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
   11f74:	bb22      	cbnz	r2, 11fc0 <d_print_comp+0x5b8>
   11f76:	4690      	mov	r8, r2
   11f78:	462f      	mov	r7, r5
   11f7a:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   11f7e:	9707      	str	r7, [sp, #28]
   11f80:	9306      	str	r3, [sp, #24]
   11f82:	ab06      	add	r3, sp, #24
   11f84:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   11f88:	2300      	movs	r3, #0
   11f8a:	9308      	str	r3, [sp, #32]
   11f8c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   11f90:	9309      	str	r3, [sp, #36]	; 0x24
   11f92:	b902      	cbnz	r2, 11f96 <d_print_comp+0x58e>
   11f94:	68ba      	ldr	r2, [r7, #8]
   11f96:	4631      	mov	r1, r6
   11f98:	4620      	mov	r0, r4
   11f9a:	f7ff fd35 	bl	11a08 <d_print_comp>
   11f9e:	9b08      	ldr	r3, [sp, #32]
   11fa0:	b923      	cbnz	r3, 11fac <d_print_comp+0x5a4>
   11fa2:	463a      	mov	r2, r7
   11fa4:	4631      	mov	r1, r6
   11fa6:	4620      	mov	r0, r4
   11fa8:	f000 fd9e 	bl	12ae8 <d_print_mod>
   11fac:	9b06      	ldr	r3, [sp, #24]
   11fae:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   11fb2:	f1b8 0f00 	cmp.w	r8, #0
   11fb6:	f43f adab 	beq.w	11b10 <d_print_comp+0x108>
   11fba:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   11fbe:	e5a7      	b.n	11b10 <d_print_comp+0x108>
   11fc0:	f8d2 8008 	ldr.w	r8, [r2, #8]
   11fc4:	f1b8 0f00 	cmp.w	r8, #0
   11fc8:	d10e      	bne.n	11fe8 <d_print_comp+0x5e0>
   11fca:	6851      	ldr	r1, [r2, #4]
   11fcc:	7809      	ldrb	r1, [r1, #0]
   11fce:	f1a1 0019 	sub.w	r0, r1, #25
   11fd2:	2802      	cmp	r0, #2
   11fd4:	f200 8084 	bhi.w	120e0 <d_print_comp+0x6d8>
   11fd8:	428b      	cmp	r3, r1
   11fda:	d105      	bne.n	11fe8 <d_print_comp+0x5e0>
   11fdc:	68aa      	ldr	r2, [r5, #8]
   11fde:	4631      	mov	r1, r6
   11fe0:	4620      	mov	r0, r4
   11fe2:	f7ff fd11 	bl	11a08 <d_print_comp>
   11fe6:	e593      	b.n	11b10 <d_print_comp+0x108>
   11fe8:	6812      	ldr	r2, [r2, #0]
   11fea:	e7c3      	b.n	11f74 <d_print_comp+0x56c>
   11fec:	f8d0 8120 	ldr.w	r8, [r0, #288]	; 0x120
   11ff0:	68af      	ldr	r7, [r5, #8]
   11ff2:	f1b8 0f00 	cmp.w	r8, #0
   11ff6:	d165      	bne.n	120c4 <d_print_comp+0x6bc>
   11ff8:	783b      	ldrb	r3, [r7, #0]
   11ffa:	2b05      	cmp	r3, #5
   11ffc:	d164      	bne.n	120c8 <d_print_comp+0x6c0>
   11ffe:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
   12002:	4642      	mov	r2, r8
   12004:	429a      	cmp	r2, r3
   12006:	db07      	blt.n	12018 <d_print_comp+0x610>
   12008:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   1200c:	4293      	cmp	r3, r2
   1200e:	db0d      	blt.n	1202c <d_print_comp+0x624>
   12010:	2301      	movs	r3, #1
   12012:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   12016:	e57b      	b.n	11b10 <d_print_comp+0x108>
   12018:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
   1201c:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
   12020:	f850 0032 	ldr.w	r0, [r0, r2, lsl #3]
   12024:	4287      	cmp	r7, r0
   12026:	d039      	beq.n	1209c <d_print_comp+0x694>
   12028:	3201      	adds	r2, #1
   1202a:	e7eb      	b.n	12004 <d_print_comp+0x5fc>
   1202c:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
   12030:	1c58      	adds	r0, r3, #1
   12032:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   12036:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
   1203a:	f841 7033 	str.w	r7, [r1, r3, lsl #3]
   1203e:	1d13      	adds	r3, r2, #4
   12040:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   12044:	b9ca      	cbnz	r2, 1207a <d_print_comp+0x672>
   12046:	601a      	str	r2, [r3, #0]
   12048:	f107 0108 	add.w	r1, r7, #8
   1204c:	4620      	mov	r0, r4
   1204e:	f7fe f898 	bl	10182 <d_lookup_template_argument.isra.0>
   12052:	4607      	mov	r7, r0
   12054:	b150      	cbz	r0, 1206c <d_print_comp+0x664>
   12056:	7803      	ldrb	r3, [r0, #0]
   12058:	2b2f      	cmp	r3, #47	; 0x2f
   1205a:	d135      	bne.n	120c8 <d_print_comp+0x6c0>
   1205c:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   12060:	2900      	cmp	r1, #0
   12062:	db31      	blt.n	120c8 <d_print_comp+0x6c0>
   12064:	f7fe f846 	bl	100f4 <d_index_template_argument.part.0>
   12068:	4607      	mov	r7, r0
   1206a:	bb68      	cbnz	r0, 120c8 <d_print_comp+0x6c0>
   1206c:	f1b8 0f00 	cmp.w	r8, #0
   12070:	f43f ae7b 	beq.w	11d6a <d_print_comp+0x362>
   12074:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
   12078:	e677      	b.n	11d6a <d_print_comp+0x362>
   1207a:	e9d4 1050 	ldrd	r1, r0, [r4, #320]	; 0x140
   1207e:	4281      	cmp	r1, r0
   12080:	dac6      	bge.n	12010 <d_print_comp+0x608>
   12082:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   12086:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1208a:	3101      	adds	r1, #1
   1208c:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
   12090:	6851      	ldr	r1, [r2, #4]
   12092:	6041      	str	r1, [r0, #4]
   12094:	6018      	str	r0, [r3, #0]
   12096:	4603      	mov	r3, r0
   12098:	6812      	ldr	r2, [r2, #0]
   1209a:	e7d3      	b.n	12044 <d_print_comp+0x63c>
   1209c:	460b      	mov	r3, r1
   1209e:	681a      	ldr	r2, [r3, #0]
   120a0:	4297      	cmp	r7, r2
   120a2:	d0d1      	beq.n	12048 <d_print_comp+0x640>
   120a4:	4295      	cmp	r5, r2
   120a6:	d101      	bne.n	120ac <d_print_comp+0x6a4>
   120a8:	428b      	cmp	r3, r1
   120aa:	d1cd      	bne.n	12048 <d_print_comp+0x640>
   120ac:	685b      	ldr	r3, [r3, #4]
   120ae:	2b00      	cmp	r3, #0
   120b0:	d1f5      	bne.n	1209e <d_print_comp+0x696>
   120b2:	f8dc 3004 	ldr.w	r3, [ip, #4]
   120b6:	f04f 0801 	mov.w	r8, #1
   120ba:	f8d4 9110 	ldr.w	r9, [r4, #272]	; 0x110
   120be:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   120c2:	e7c1      	b.n	12048 <d_print_comp+0x640>
   120c4:	f04f 0800 	mov.w	r8, #0
   120c8:	783b      	ldrb	r3, [r7, #0]
   120ca:	2b23      	cmp	r3, #35	; 0x23
   120cc:	d009      	beq.n	120e2 <d_print_comp+0x6da>
   120ce:	782a      	ldrb	r2, [r5, #0]
   120d0:	429a      	cmp	r2, r3
   120d2:	d006      	beq.n	120e2 <d_print_comp+0x6da>
   120d4:	2b24      	cmp	r3, #36	; 0x24
   120d6:	d103      	bne.n	120e0 <d_print_comp+0x6d8>
   120d8:	68ba      	ldr	r2, [r7, #8]
   120da:	e74d      	b.n	11f78 <d_print_comp+0x570>
   120dc:	f04f 0800 	mov.w	r8, #0
   120e0:	462f      	mov	r7, r5
   120e2:	2200      	movs	r2, #0
   120e4:	e749      	b.n	11f7a <d_print_comp+0x572>
   120e6:	68ab      	ldr	r3, [r5, #8]
   120e8:	0772      	lsls	r2, r6, #29
   120ea:	bf54      	ite	pl
   120ec:	e9d3 1200 	ldrdpl	r1, r2, [r3]
   120f0:	e9d3 1202 	ldrdmi	r1, r2, [r3, #8]
   120f4:	f7fd fe8f 	bl	fe16 <d_append_buffer>
   120f8:	e50a      	b.n	11b10 <d_print_comp+0x108>
   120fa:	68aa      	ldr	r2, [r5, #8]
   120fc:	4631      	mov	r1, r6
   120fe:	f7ff fc83 	bl	11a08 <d_print_comp>
   12102:	e505      	b.n	11b10 <d_print_comp+0x108>
   12104:	f016 0720 	ands.w	r7, r6, #32
   12108:	d007      	beq.n	1211a <d_print_comp+0x712>
   1210a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   1210e:	f105 020c 	add.w	r2, r5, #12
   12112:	f026 0160 	bic.w	r1, r6, #96	; 0x60
   12116:	f000 fd81 	bl	12c1c <d_print_function_type.isra.0>
   1211a:	68aa      	ldr	r2, [r5, #8]
   1211c:	b35a      	cbz	r2, 12176 <d_print_comp+0x76e>
   1211e:	f026 0160 	bic.w	r1, r6, #96	; 0x60
   12122:	b11f      	cbz	r7, 1212c <d_print_comp+0x724>
   12124:	4620      	mov	r0, r4
   12126:	f7ff fc6f 	bl	11a08 <d_print_comp>
   1212a:	e4f1      	b.n	11b10 <d_print_comp+0x108>
   1212c:	0673      	lsls	r3, r6, #25
   1212e:	d418      	bmi.n	12162 <d_print_comp+0x75a>
   12130:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   12134:	4620      	mov	r0, r4
   12136:	9306      	str	r3, [sp, #24]
   12138:	ab06      	add	r3, sp, #24
   1213a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1213e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   12142:	e9cd 5707 	strd	r5, r7, [sp, #28]
   12146:	9309      	str	r3, [sp, #36]	; 0x24
   12148:	f7ff fc5e 	bl	11a08 <d_print_comp>
   1214c:	9b06      	ldr	r3, [sp, #24]
   1214e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   12152:	9b08      	ldr	r3, [sp, #32]
   12154:	2b00      	cmp	r3, #0
   12156:	f47f acdb 	bne.w	11b10 <d_print_comp+0x108>
   1215a:	2120      	movs	r1, #32
   1215c:	4620      	mov	r0, r4
   1215e:	f7fd fe48 	bl	fdf2 <d_append_char>
   12162:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   12166:	f105 020c 	add.w	r2, r5, #12
   1216a:	f026 0160 	bic.w	r1, r6, #96	; 0x60
   1216e:	4620      	mov	r0, r4
   12170:	f000 fd54 	bl	12c1c <d_print_function_type.isra.0>
   12174:	e4cc      	b.n	11b10 <d_print_comp+0x108>
   12176:	2f00      	cmp	r7, #0
   12178:	f47f acca 	bne.w	11b10 <d_print_comp+0x108>
   1217c:	e7f1      	b.n	12162 <d_print_comp+0x75a>
   1217e:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   12182:	2300      	movs	r3, #0
   12184:	2701      	movs	r7, #1
   12186:	f10d 0818 	add.w	r8, sp, #24
   1218a:	9308      	str	r3, [sp, #32]
   1218c:	46cc      	mov	ip, r9
   1218e:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   12192:	46ba      	mov	sl, r7
   12194:	f8cd 9018 	str.w	r9, [sp, #24]
   12198:	f8c0 8114 	str.w	r8, [r0, #276]	; 0x114
   1219c:	9507      	str	r5, [sp, #28]
   1219e:	9309      	str	r3, [sp, #36]	; 0x24
   121a0:	f1bc 0f00 	cmp.w	ip, #0
   121a4:	d005      	beq.n	121b2 <d_print_comp+0x7aa>
   121a6:	f8dc 3004 	ldr.w	r3, [ip, #4]
   121aa:	781b      	ldrb	r3, [r3, #0]
   121ac:	3b19      	subs	r3, #25
   121ae:	2b02      	cmp	r3, #2
   121b0:	d915      	bls.n	121de <d_print_comp+0x7d6>
   121b2:	68ea      	ldr	r2, [r5, #12]
   121b4:	4631      	mov	r1, r6
   121b6:	4620      	mov	r0, r4
   121b8:	f7ff fc26 	bl	11a08 <d_print_comp>
   121bc:	9b08      	ldr	r3, [sp, #32]
   121be:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   121c2:	2b00      	cmp	r3, #0
   121c4:	f47f aca4 	bne.w	11b10 <d_print_comp+0x108>
   121c8:	2f01      	cmp	r7, #1
   121ca:	d132      	bne.n	12232 <d_print_comp+0x82a>
   121cc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   121d0:	f105 0208 	add.w	r2, r5, #8
   121d4:	4631      	mov	r1, r6
   121d6:	4620      	mov	r0, r4
   121d8:	f000 fdf4 	bl	12dc4 <d_print_array_type.isra.0>
   121dc:	e498      	b.n	11b10 <d_print_comp+0x108>
   121de:	f8dc 3008 	ldr.w	r3, [ip, #8]
   121e2:	bb1b      	cbnz	r3, 1222c <d_print_comp+0x824>
   121e4:	2f03      	cmp	r7, #3
   121e6:	d90d      	bls.n	12204 <d_print_comp+0x7fc>
   121e8:	2301      	movs	r3, #1
   121ea:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   121ee:	e48f      	b.n	11b10 <d_print_comp+0x108>
   121f0:	0002cd08 	.word	0x0002cd08
   121f4:	0002cc2c 	.word	0x0002cc2c
   121f8:	0002cd1e 	.word	0x0002cd1e
   121fc:	0002cd34 	.word	0x0002cd34
   12200:	0002cd30 	.word	0x0002cd30
   12204:	ab16      	add	r3, sp, #88	; 0x58
   12206:	eb03 1b07 	add.w	fp, r3, r7, lsl #4
   1220a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   1220e:	f1ab 0e40 	sub.w	lr, fp, #64	; 0x40
   12212:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   12216:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1221a:	f84b 3c40 	str.w	r3, [fp, #-64]
   1221e:	eb08 1307 	add.w	r3, r8, r7, lsl #4
   12222:	3701      	adds	r7, #1
   12224:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   12228:	f8cc a008 	str.w	sl, [ip, #8]
   1222c:	f8dc c000 	ldr.w	ip, [ip]
   12230:	e7b6      	b.n	121a0 <d_print_comp+0x798>
   12232:	3f01      	subs	r7, #1
   12234:	4631      	mov	r1, r6
   12236:	4620      	mov	r0, r4
   12238:	eb08 1307 	add.w	r3, r8, r7, lsl #4
   1223c:	685a      	ldr	r2, [r3, #4]
   1223e:	f000 fc53 	bl	12ae8 <d_print_mod>
   12242:	e7c1      	b.n	121c8 <d_print_comp+0x7c0>
   12244:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
   12248:	4631      	mov	r1, r6
   1224a:	68ea      	ldr	r2, [r5, #12]
   1224c:	9306      	str	r3, [sp, #24]
   1224e:	ab06      	add	r3, sp, #24
   12250:	9507      	str	r5, [sp, #28]
   12252:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   12256:	2300      	movs	r3, #0
   12258:	9308      	str	r3, [sp, #32]
   1225a:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   1225e:	9309      	str	r3, [sp, #36]	; 0x24
   12260:	f7ff fbd2 	bl	11a08 <d_print_comp>
   12264:	9b08      	ldr	r3, [sp, #32]
   12266:	b923      	cbnz	r3, 12272 <d_print_comp+0x86a>
   12268:	462a      	mov	r2, r5
   1226a:	4631      	mov	r1, r6
   1226c:	4620      	mov	r0, r4
   1226e:	f000 fc3b 	bl	12ae8 <d_print_mod>
   12272:	9b06      	ldr	r3, [sp, #24]
   12274:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   12278:	e44a      	b.n	11b10 <d_print_comp+0x108>
   1227a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   1227e:	b113      	cbz	r3, 12286 <d_print_comp+0x87e>
   12280:	49b9      	ldr	r1, [pc, #740]	; (12568 <d_print_comp+0xb60>)
   12282:	f7fd fde1 	bl	fe48 <d_append_string>
   12286:	68aa      	ldr	r2, [r5, #8]
   12288:	4bb8      	ldr	r3, [pc, #736]	; (1256c <d_print_comp+0xb64>)
   1228a:	6891      	ldr	r1, [r2, #8]
   1228c:	4299      	cmp	r1, r3
   1228e:	d007      	beq.n	122a0 <d_print_comp+0x898>
   12290:	4631      	mov	r1, r6
   12292:	4620      	mov	r0, r4
   12294:	f7ff fbb8 	bl	11a08 <d_print_comp>
   12298:	2120      	movs	r1, #32
   1229a:	4620      	mov	r0, r4
   1229c:	f7fd fda9 	bl	fdf2 <d_append_char>
   122a0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   122a4:	b123      	cbz	r3, 122b0 <d_print_comp+0x8a8>
   122a6:	49b2      	ldr	r1, [pc, #712]	; (12570 <d_print_comp+0xb68>)
   122a8:	4620      	mov	r0, r4
   122aa:	f7fd fdcd 	bl	fe48 <d_append_string>
   122ae:	e42f      	b.n	11b10 <d_print_comp+0x108>
   122b0:	49b0      	ldr	r1, [pc, #704]	; (12574 <d_print_comp+0xb6c>)
   122b2:	4620      	mov	r0, r4
   122b4:	f7fd fdc8 	bl	fe48 <d_append_string>
   122b8:	e42a      	b.n	11b10 <d_print_comp+0x108>
   122ba:	68aa      	ldr	r2, [r5, #8]
   122bc:	b112      	cbz	r2, 122c4 <d_print_comp+0x8bc>
   122be:	4631      	mov	r1, r6
   122c0:	f7ff fba2 	bl	11a08 <d_print_comp>
   122c4:	68eb      	ldr	r3, [r5, #12]
   122c6:	2b00      	cmp	r3, #0
   122c8:	f43f ac22 	beq.w	11b10 <d_print_comp+0x108>
   122cc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   122d0:	2bfd      	cmp	r3, #253	; 0xfd
   122d2:	d902      	bls.n	122da <d_print_comp+0x8d2>
   122d4:	4620      	mov	r0, r4
   122d6:	f7fd fd7b 	bl	fdd0 <d_print_flush>
   122da:	49a7      	ldr	r1, [pc, #668]	; (12578 <d_print_comp+0xb70>)
   122dc:	4620      	mov	r0, r4
   122de:	f7fd fdb3 	bl	fe48 <d_append_string>
   122e2:	68ea      	ldr	r2, [r5, #12]
   122e4:	4631      	mov	r1, r6
   122e6:	4620      	mov	r0, r4
   122e8:	f8d4 8128 	ldr.w	r8, [r4, #296]	; 0x128
   122ec:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
   122f0:	f7ff fb8a 	bl	11a08 <d_print_comp>
   122f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   122f8:	4598      	cmp	r8, r3
   122fa:	f47f ac09 	bne.w	11b10 <d_print_comp+0x108>
   122fe:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   12302:	429f      	cmp	r7, r3
   12304:	f47f ac04 	bne.w	11b10 <d_print_comp+0x108>
   12308:	3f02      	subs	r7, #2
   1230a:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   1230e:	f7ff bbff 	b.w	11b10 <d_print_comp+0x108>
   12312:	e9d5 2702 	ldrd	r2, r7, [r5, #8]
   12316:	b112      	cbz	r2, 1231e <d_print_comp+0x916>
   12318:	4631      	mov	r1, r6
   1231a:	f7ff fb75 	bl	11a08 <d_print_comp>
   1231e:	4620      	mov	r0, r4
   12320:	217b      	movs	r1, #123	; 0x7b
   12322:	f7fd fd66 	bl	fdf2 <d_append_char>
   12326:	4631      	mov	r1, r6
   12328:	4620      	mov	r0, r4
   1232a:	463a      	mov	r2, r7
   1232c:	f7ff fb6c 	bl	11a08 <d_print_comp>
   12330:	217d      	movs	r1, #125	; 0x7d
   12332:	4620      	mov	r0, r4
   12334:	f7fd fd5d 	bl	fdf2 <d_append_char>
   12338:	f7ff bbea 	b.w	11b10 <d_print_comp+0x108>
   1233c:	68af      	ldr	r7, [r5, #8]
   1233e:	498f      	ldr	r1, [pc, #572]	; (1257c <d_print_comp+0xb74>)
   12340:	68be      	ldr	r6, [r7, #8]
   12342:	f7fd fd81 	bl	fe48 <d_append_string>
   12346:	687b      	ldr	r3, [r7, #4]
   12348:	781b      	ldrb	r3, [r3, #0]
   1234a:	3b61      	subs	r3, #97	; 0x61
   1234c:	2b19      	cmp	r3, #25
   1234e:	d803      	bhi.n	12358 <d_print_comp+0x950>
   12350:	2120      	movs	r1, #32
   12352:	4620      	mov	r0, r4
   12354:	f7fd fd4d 	bl	fdf2 <d_append_char>
   12358:	6879      	ldr	r1, [r7, #4]
   1235a:	4620      	mov	r0, r4
   1235c:	198b      	adds	r3, r1, r6
   1235e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   12362:	2b20      	cmp	r3, #32
   12364:	bf08      	it	eq
   12366:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
   1236a:	4632      	mov	r2, r6
   1236c:	f7fd fd53 	bl	fe16 <d_append_buffer>
   12370:	f7ff bbce 	b.w	11b10 <d_print_comp+0x108>
   12374:	4982      	ldr	r1, [pc, #520]	; (12580 <d_print_comp+0xb78>)
   12376:	f7fd fd67 	bl	fe48 <d_append_string>
   1237a:	68ea      	ldr	r2, [r5, #12]
   1237c:	4631      	mov	r1, r6
   1237e:	4620      	mov	r0, r4
   12380:	f7ff fb42 	bl	11a08 <d_print_comp>
   12384:	f7ff bbc4 	b.w	11b10 <d_print_comp+0x108>
   12388:	497d      	ldr	r1, [pc, #500]	; (12580 <d_print_comp+0xb78>)
   1238a:	f7fd fd5d 	bl	fe48 <d_append_string>
   1238e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   12392:	b133      	cbz	r3, 123a2 <d_print_comp+0x99a>
   12394:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
   12398:	9307      	str	r3, [sp, #28]
   1239a:	9206      	str	r2, [sp, #24]
   1239c:	aa06      	add	r2, sp, #24
   1239e:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
   123a2:	68aa      	ldr	r2, [r5, #8]
   123a4:	7813      	ldrb	r3, [r2, #0]
   123a6:	2b04      	cmp	r3, #4
   123a8:	d00d      	beq.n	123c6 <d_print_comp+0x9be>
   123aa:	4631      	mov	r1, r6
   123ac:	4620      	mov	r0, r4
   123ae:	f7ff fb2b 	bl	11a08 <d_print_comp>
   123b2:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   123b6:	2b00      	cmp	r3, #0
   123b8:	f43f abaa 	beq.w	11b10 <d_print_comp+0x108>
   123bc:	9b06      	ldr	r3, [sp, #24]
   123be:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   123c2:	f7ff bba5 	b.w	11b10 <d_print_comp+0x108>
   123c6:	6892      	ldr	r2, [r2, #8]
   123c8:	4631      	mov	r1, r6
   123ca:	4620      	mov	r0, r4
   123cc:	f7ff fb1c 	bl	11a08 <d_print_comp>
   123d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   123d4:	b113      	cbz	r3, 123dc <d_print_comp+0x9d4>
   123d6:	9b06      	ldr	r3, [sp, #24]
   123d8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   123dc:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   123e0:	2b3c      	cmp	r3, #60	; 0x3c
   123e2:	d103      	bne.n	123ec <d_print_comp+0x9e4>
   123e4:	2120      	movs	r1, #32
   123e6:	4620      	mov	r0, r4
   123e8:	f7fd fd03 	bl	fdf2 <d_append_char>
   123ec:	213c      	movs	r1, #60	; 0x3c
   123ee:	4620      	mov	r0, r4
   123f0:	f7fd fcff 	bl	fdf2 <d_append_char>
   123f4:	68ab      	ldr	r3, [r5, #8]
   123f6:	4631      	mov	r1, r6
   123f8:	4620      	mov	r0, r4
   123fa:	68da      	ldr	r2, [r3, #12]
   123fc:	f7ff fb04 	bl	11a08 <d_print_comp>
   12400:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   12404:	2b3e      	cmp	r3, #62	; 0x3e
   12406:	d103      	bne.n	12410 <d_print_comp+0xa08>
   12408:	2120      	movs	r1, #32
   1240a:	4620      	mov	r0, r4
   1240c:	f7fd fcf1 	bl	fdf2 <d_append_char>
   12410:	213e      	movs	r1, #62	; 0x3e
   12412:	4620      	mov	r0, r4
   12414:	f7fd fced 	bl	fdf2 <d_append_char>
   12418:	f7ff bb7a 	b.w	11b10 <d_print_comp+0x108>
   1241c:	68aa      	ldr	r2, [r5, #8]
   1241e:	4631      	mov	r1, r6
   12420:	f000 fd14 	bl	12e4c <d_print_expr_op>
   12424:	f7ff bb74 	b.w	11b10 <d_print_comp+0x108>
   12428:	e9d5 a702 	ldrd	sl, r7, [r5, #8]
   1242c:	f89a 3000 	ldrb.w	r3, [sl]
   12430:	2b32      	cmp	r3, #50	; 0x32
   12432:	d134      	bne.n	1249e <d_print_comp+0xa96>
   12434:	f8da 3008 	ldr.w	r3, [sl, #8]
   12438:	4952      	ldr	r1, [pc, #328]	; (12584 <d_print_comp+0xb7c>)
   1243a:	f8d3 9000 	ldr.w	r9, [r3]
   1243e:	4648      	mov	r0, r9
   12440:	f003 fd10 	bl	15e64 <strcmp>
   12444:	b958      	cbnz	r0, 1245e <d_print_comp+0xa56>
   12446:	783b      	ldrb	r3, [r7, #0]
   12448:	2b03      	cmp	r3, #3
   1244a:	d108      	bne.n	1245e <d_print_comp+0xa56>
   1244c:	68bb      	ldr	r3, [r7, #8]
   1244e:	781a      	ldrb	r2, [r3, #0]
   12450:	2a01      	cmp	r2, #1
   12452:	d104      	bne.n	1245e <d_print_comp+0xa56>
   12454:	68fa      	ldr	r2, [r7, #12]
   12456:	7812      	ldrb	r2, [r2, #0]
   12458:	2a29      	cmp	r2, #41	; 0x29
   1245a:	bf08      	it	eq
   1245c:	461f      	moveq	r7, r3
   1245e:	783b      	ldrb	r3, [r7, #0]
   12460:	2b39      	cmp	r3, #57	; 0x39
   12462:	d10b      	bne.n	1247c <d_print_comp+0xa74>
   12464:	68ba      	ldr	r2, [r7, #8]
   12466:	4631      	mov	r1, r6
   12468:	4620      	mov	r0, r4
   1246a:	f000 fcfe 	bl	12e6a <d_print_subexpr>
   1246e:	4652      	mov	r2, sl
   12470:	4631      	mov	r1, r6
   12472:	4620      	mov	r0, r4
   12474:	f000 fcea 	bl	12e4c <d_print_expr_op>
   12478:	f7ff bb4a 	b.w	11b10 <d_print_comp+0x108>
   1247c:	4942      	ldr	r1, [pc, #264]	; (12588 <d_print_comp+0xb80>)
   1247e:	4648      	mov	r0, r9
   12480:	f003 fcf0 	bl	15e64 <strcmp>
   12484:	b9f0      	cbnz	r0, 124c4 <d_print_comp+0xabc>
   12486:	4639      	mov	r1, r7
   12488:	4620      	mov	r0, r4
   1248a:	f7fd fe89 	bl	101a0 <d_find_pack>
   1248e:	f7fd fccf 	bl	fe30 <d_pack_length>
   12492:	4601      	mov	r1, r0
   12494:	4620      	mov	r0, r4
   12496:	f7fd fce4 	bl	fe62 <d_append_num>
   1249a:	f7ff bb39 	b.w	11b10 <d_print_comp+0x108>
   1249e:	2b34      	cmp	r3, #52	; 0x34
   124a0:	d032      	beq.n	12508 <d_print_comp+0xb00>
   124a2:	f04f 0900 	mov.w	r9, #0
   124a6:	4652      	mov	r2, sl
   124a8:	4631      	mov	r1, r6
   124aa:	4620      	mov	r0, r4
   124ac:	f000 fcce 	bl	12e4c <d_print_expr_op>
   124b0:	f1b9 0f00 	cmp.w	r9, #0
   124b4:	d136      	bne.n	12524 <d_print_comp+0xb1c>
   124b6:	463a      	mov	r2, r7
   124b8:	4631      	mov	r1, r6
   124ba:	4620      	mov	r0, r4
   124bc:	f000 fcd5 	bl	12e6a <d_print_subexpr>
   124c0:	f7ff bb26 	b.w	11b10 <d_print_comp+0x108>
   124c4:	4931      	ldr	r1, [pc, #196]	; (1258c <d_print_comp+0xb84>)
   124c6:	4648      	mov	r0, r9
   124c8:	f003 fccc 	bl	15e64 <strcmp>
   124cc:	4680      	mov	r8, r0
   124ce:	2800      	cmp	r0, #0
   124d0:	d1e9      	bne.n	124a6 <d_print_comp+0xa9e>
   124d2:	783b      	ldrb	r3, [r7, #0]
   124d4:	2b2f      	cmp	r3, #47	; 0x2f
   124d6:	d10e      	bne.n	124f6 <d_print_comp+0xaee>
   124d8:	68bb      	ldr	r3, [r7, #8]
   124da:	b163      	cbz	r3, 124f6 <d_print_comp+0xaee>
   124dc:	781a      	ldrb	r2, [r3, #0]
   124de:	2a4b      	cmp	r2, #75	; 0x4b
   124e0:	d10f      	bne.n	12502 <d_print_comp+0xafa>
   124e2:	6899      	ldr	r1, [r3, #8]
   124e4:	4620      	mov	r0, r4
   124e6:	f7fd fe5b 	bl	101a0 <d_find_pack>
   124ea:	f7fd fca1 	bl	fe30 <d_pack_length>
   124ee:	4480      	add	r8, r0
   124f0:	68ff      	ldr	r7, [r7, #12]
   124f2:	2f00      	cmp	r7, #0
   124f4:	d1ed      	bne.n	124d2 <d_print_comp+0xaca>
   124f6:	4641      	mov	r1, r8
   124f8:	4620      	mov	r0, r4
   124fa:	f7fd fcb2 	bl	fe62 <d_append_num>
   124fe:	f7ff bb07 	b.w	11b10 <d_print_comp+0x108>
   12502:	f108 0801 	add.w	r8, r8, #1
   12506:	e7f3      	b.n	124f0 <d_print_comp+0xae8>
   12508:	2128      	movs	r1, #40	; 0x28
   1250a:	f7fd fc72 	bl	fdf2 <d_append_char>
   1250e:	4631      	mov	r1, r6
   12510:	4620      	mov	r0, r4
   12512:	f8da 2008 	ldr.w	r2, [sl, #8]
   12516:	f7ff fa77 	bl	11a08 <d_print_comp>
   1251a:	2129      	movs	r1, #41	; 0x29
   1251c:	4620      	mov	r0, r4
   1251e:	f7fd fc68 	bl	fdf2 <d_append_char>
   12522:	e7c8      	b.n	124b6 <d_print_comp+0xaae>
   12524:	491a      	ldr	r1, [pc, #104]	; (12590 <d_print_comp+0xb88>)
   12526:	4648      	mov	r0, r9
   12528:	f003 fc9c 	bl	15e64 <strcmp>
   1252c:	b930      	cbnz	r0, 1253c <d_print_comp+0xb34>
   1252e:	463a      	mov	r2, r7
   12530:	4631      	mov	r1, r6
   12532:	4620      	mov	r0, r4
   12534:	f7ff fa68 	bl	11a08 <d_print_comp>
   12538:	f7ff baea 	b.w	11b10 <d_print_comp+0x108>
   1253c:	4915      	ldr	r1, [pc, #84]	; (12594 <d_print_comp+0xb8c>)
   1253e:	4648      	mov	r0, r9
   12540:	f003 fc90 	bl	15e64 <strcmp>
   12544:	2800      	cmp	r0, #0
   12546:	d1b6      	bne.n	124b6 <d_print_comp+0xaae>
   12548:	4620      	mov	r0, r4
   1254a:	2128      	movs	r1, #40	; 0x28
   1254c:	f7fd fc51 	bl	fdf2 <d_append_char>
   12550:	4631      	mov	r1, r6
   12552:	4620      	mov	r0, r4
   12554:	463a      	mov	r2, r7
   12556:	f7ff fa57 	bl	11a08 <d_print_comp>
   1255a:	2129      	movs	r1, #41	; 0x29
   1255c:	4620      	mov	r0, r4
   1255e:	f7fd fc48 	bl	fdf2 <d_append_char>
   12562:	f7ff bad5 	b.w	11b10 <d_print_comp+0x108>
   12566:	bf00      	nop
   12568:	0002cd4b 	.word	0x0002cd4b
   1256c:	000254a0 	.word	0x000254a0
   12570:	0002cd51 	.word	0x0002cd51
   12574:	0002cd58 	.word	0x0002cd58
   12578:	0002cd5f 	.word	0x0002cd5f
   1257c:	0002cd62 	.word	0x0002cd62
   12580:	0002cd6b 	.word	0x0002cd6b
   12584:	0002cd75 	.word	0x0002cd75
   12588:	0002cd78 	.word	0x0002cd78
   1258c:	0002cbb8 	.word	0x0002cbb8
   12590:	0002cd7b 	.word	0x0002cd7b
   12594:	0002d034 	.word	0x0002d034
   12598:	68eb      	ldr	r3, [r5, #12]
   1259a:	781b      	ldrb	r3, [r3, #0]
   1259c:	2b39      	cmp	r3, #57	; 0x39
   1259e:	f47f abe4 	bne.w	11d6a <d_print_comp+0x362>
   125a2:	68a9      	ldr	r1, [r5, #8]
   125a4:	6888      	ldr	r0, [r1, #8]
   125a6:	f7fd fd6f 	bl	10088 <op_is_new_cast.isra.0>
   125aa:	b1f0      	cbz	r0, 125ea <d_print_comp+0xbe2>
   125ac:	460a      	mov	r2, r1
   125ae:	4620      	mov	r0, r4
   125b0:	4631      	mov	r1, r6
   125b2:	f000 fc4b 	bl	12e4c <d_print_expr_op>
   125b6:	4620      	mov	r0, r4
   125b8:	213c      	movs	r1, #60	; 0x3c
   125ba:	f7fd fc1a 	bl	fdf2 <d_append_char>
   125be:	68eb      	ldr	r3, [r5, #12]
   125c0:	4631      	mov	r1, r6
   125c2:	4620      	mov	r0, r4
   125c4:	689a      	ldr	r2, [r3, #8]
   125c6:	f7ff fa1f 	bl	11a08 <d_print_comp>
   125ca:	4620      	mov	r0, r4
   125cc:	49bc      	ldr	r1, [pc, #752]	; (128c0 <d_print_comp+0xeb8>)
   125ce:	f7fd fc3b 	bl	fe48 <d_append_string>
   125d2:	68eb      	ldr	r3, [r5, #12]
   125d4:	4631      	mov	r1, r6
   125d6:	4620      	mov	r0, r4
   125d8:	68da      	ldr	r2, [r3, #12]
   125da:	f7ff fa15 	bl	11a08 <d_print_comp>
   125de:	2129      	movs	r1, #41	; 0x29
   125e0:	4620      	mov	r0, r4
   125e2:	f7fd fc06 	bl	fdf2 <d_append_char>
   125e6:	f7ff ba93 	b.w	11b10 <d_print_comp+0x108>
   125ea:	462a      	mov	r2, r5
   125ec:	4631      	mov	r1, r6
   125ee:	4620      	mov	r0, r4
   125f0:	f000 fc59 	bl	12ea6 <d_maybe_print_fold_expression>
   125f4:	2800      	cmp	r0, #0
   125f6:	f47f aa8b 	bne.w	11b10 <d_print_comp+0x108>
   125fa:	68ab      	ldr	r3, [r5, #8]
   125fc:	781a      	ldrb	r2, [r3, #0]
   125fe:	2a32      	cmp	r2, #50	; 0x32
   12600:	d10b      	bne.n	1261a <d_print_comp+0xc12>
   12602:	689b      	ldr	r3, [r3, #8]
   12604:	689a      	ldr	r2, [r3, #8]
   12606:	2a01      	cmp	r2, #1
   12608:	d107      	bne.n	1261a <d_print_comp+0xc12>
   1260a:	685b      	ldr	r3, [r3, #4]
   1260c:	781b      	ldrb	r3, [r3, #0]
   1260e:	2b3e      	cmp	r3, #62	; 0x3e
   12610:	d103      	bne.n	1261a <d_print_comp+0xc12>
   12612:	2128      	movs	r1, #40	; 0x28
   12614:	4620      	mov	r0, r4
   12616:	f7fd fbec 	bl	fdf2 <d_append_char>
   1261a:	68ab      	ldr	r3, [r5, #8]
   1261c:	49a9      	ldr	r1, [pc, #676]	; (128c4 <d_print_comp+0xebc>)
   1261e:	689b      	ldr	r3, [r3, #8]
   12620:	6818      	ldr	r0, [r3, #0]
   12622:	f003 fc1f 	bl	15e64 <strcmp>
   12626:	68eb      	ldr	r3, [r5, #12]
   12628:	689a      	ldr	r2, [r3, #8]
   1262a:	b950      	cbnz	r0, 12642 <d_print_comp+0xc3a>
   1262c:	7813      	ldrb	r3, [r2, #0]
   1262e:	2b03      	cmp	r3, #3
   12630:	d107      	bne.n	12642 <d_print_comp+0xc3a>
   12632:	68d3      	ldr	r3, [r2, #12]
   12634:	781b      	ldrb	r3, [r3, #0]
   12636:	2b29      	cmp	r3, #41	; 0x29
   12638:	bf1c      	itt	ne
   1263a:	2301      	movne	r3, #1
   1263c:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   12640:	6892      	ldr	r2, [r2, #8]
   12642:	4631      	mov	r1, r6
   12644:	4620      	mov	r0, r4
   12646:	f000 fc10 	bl	12e6a <d_print_subexpr>
   1264a:	68af      	ldr	r7, [r5, #8]
   1264c:	499e      	ldr	r1, [pc, #632]	; (128c8 <d_print_comp+0xec0>)
   1264e:	68bb      	ldr	r3, [r7, #8]
   12650:	f8d3 8000 	ldr.w	r8, [r3]
   12654:	4640      	mov	r0, r8
   12656:	f003 fc05 	bl	15e64 <strcmp>
   1265a:	bb10      	cbnz	r0, 126a2 <d_print_comp+0xc9a>
   1265c:	215b      	movs	r1, #91	; 0x5b
   1265e:	4620      	mov	r0, r4
   12660:	f7fd fbc7 	bl	fdf2 <d_append_char>
   12664:	68eb      	ldr	r3, [r5, #12]
   12666:	4631      	mov	r1, r6
   12668:	4620      	mov	r0, r4
   1266a:	68da      	ldr	r2, [r3, #12]
   1266c:	f7ff f9cc 	bl	11a08 <d_print_comp>
   12670:	215d      	movs	r1, #93	; 0x5d
   12672:	4620      	mov	r0, r4
   12674:	f7fd fbbd 	bl	fdf2 <d_append_char>
   12678:	68ab      	ldr	r3, [r5, #8]
   1267a:	781a      	ldrb	r2, [r3, #0]
   1267c:	2a32      	cmp	r2, #50	; 0x32
   1267e:	f47f aa47 	bne.w	11b10 <d_print_comp+0x108>
   12682:	689b      	ldr	r3, [r3, #8]
   12684:	689a      	ldr	r2, [r3, #8]
   12686:	2a01      	cmp	r2, #1
   12688:	f47f aa42 	bne.w	11b10 <d_print_comp+0x108>
   1268c:	685b      	ldr	r3, [r3, #4]
   1268e:	781b      	ldrb	r3, [r3, #0]
   12690:	2b3e      	cmp	r3, #62	; 0x3e
   12692:	f47f aa3d 	bne.w	11b10 <d_print_comp+0x108>
   12696:	2129      	movs	r1, #41	; 0x29
   12698:	4620      	mov	r0, r4
   1269a:	f7fd fbaa 	bl	fdf2 <d_append_char>
   1269e:	f7ff ba37 	b.w	11b10 <d_print_comp+0x108>
   126a2:	4988      	ldr	r1, [pc, #544]	; (128c4 <d_print_comp+0xebc>)
   126a4:	4640      	mov	r0, r8
   126a6:	f003 fbdd 	bl	15e64 <strcmp>
   126aa:	b120      	cbz	r0, 126b6 <d_print_comp+0xcae>
   126ac:	463a      	mov	r2, r7
   126ae:	4631      	mov	r1, r6
   126b0:	4620      	mov	r0, r4
   126b2:	f000 fbcb 	bl	12e4c <d_print_expr_op>
   126b6:	68eb      	ldr	r3, [r5, #12]
   126b8:	4631      	mov	r1, r6
   126ba:	4620      	mov	r0, r4
   126bc:	68da      	ldr	r2, [r3, #12]
   126be:	f000 fbd4 	bl	12e6a <d_print_subexpr>
   126c2:	e7d9      	b.n	12678 <d_print_comp+0xc70>
   126c4:	2301      	movs	r3, #1
   126c6:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
   126ca:	f7ff ba21 	b.w	11b10 <d_print_comp+0x108>
   126ce:	68eb      	ldr	r3, [r5, #12]
   126d0:	781a      	ldrb	r2, [r3, #0]
   126d2:	2a3b      	cmp	r2, #59	; 0x3b
   126d4:	f47f ab49 	bne.w	11d6a <d_print_comp+0x362>
   126d8:	68db      	ldr	r3, [r3, #12]
   126da:	781b      	ldrb	r3, [r3, #0]
   126dc:	2b3c      	cmp	r3, #60	; 0x3c
   126de:	f47f ab44 	bne.w	11d6a <d_print_comp+0x362>
   126e2:	462a      	mov	r2, r5
   126e4:	4631      	mov	r1, r6
   126e6:	f000 fbde 	bl	12ea6 <d_maybe_print_fold_expression>
   126ea:	2800      	cmp	r0, #0
   126ec:	f47f aa10 	bne.w	11b10 <d_print_comp+0x108>
   126f0:	4976      	ldr	r1, [pc, #472]	; (128cc <d_print_comp+0xec4>)
   126f2:	e9d5 a302 	ldrd	sl, r3, [r5, #8]
   126f6:	e9d3 8302 	ldrd	r8, r3, [r3, #8]
   126fa:	e9d3 9702 	ldrd	r9, r7, [r3, #8]
   126fe:	f8da 3008 	ldr.w	r3, [sl, #8]
   12702:	6818      	ldr	r0, [r3, #0]
   12704:	f003 fbae 	bl	15e64 <strcmp>
   12708:	b9c8      	cbnz	r0, 1273e <d_print_comp+0xd36>
   1270a:	4642      	mov	r2, r8
   1270c:	4631      	mov	r1, r6
   1270e:	4620      	mov	r0, r4
   12710:	f000 fbab 	bl	12e6a <d_print_subexpr>
   12714:	4652      	mov	r2, sl
   12716:	4631      	mov	r1, r6
   12718:	4620      	mov	r0, r4
   1271a:	f000 fb97 	bl	12e4c <d_print_expr_op>
   1271e:	464a      	mov	r2, r9
   12720:	4631      	mov	r1, r6
   12722:	4620      	mov	r0, r4
   12724:	f000 fba1 	bl	12e6a <d_print_subexpr>
   12728:	4620      	mov	r0, r4
   1272a:	4969      	ldr	r1, [pc, #420]	; (128d0 <d_print_comp+0xec8>)
   1272c:	f7fd fb8c 	bl	fe48 <d_append_string>
   12730:	463a      	mov	r2, r7
   12732:	4631      	mov	r1, r6
   12734:	4620      	mov	r0, r4
   12736:	f000 fb98 	bl	12e6a <d_print_subexpr>
   1273a:	f7ff b9e9 	b.w	11b10 <d_print_comp+0x108>
   1273e:	4965      	ldr	r1, [pc, #404]	; (128d4 <d_print_comp+0xecc>)
   12740:	4620      	mov	r0, r4
   12742:	f7fd fb81 	bl	fe48 <d_append_string>
   12746:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1274a:	b143      	cbz	r3, 1275e <d_print_comp+0xd56>
   1274c:	4631      	mov	r1, r6
   1274e:	4620      	mov	r0, r4
   12750:	4642      	mov	r2, r8
   12752:	f000 fb8a 	bl	12e6a <d_print_subexpr>
   12756:	2120      	movs	r1, #32
   12758:	4620      	mov	r0, r4
   1275a:	f7fd fb4a 	bl	fdf2 <d_append_char>
   1275e:	464a      	mov	r2, r9
   12760:	4631      	mov	r1, r6
   12762:	4620      	mov	r0, r4
   12764:	f7ff f950 	bl	11a08 <d_print_comp>
   12768:	2f00      	cmp	r7, #0
   1276a:	f43f a9d1 	beq.w	11b10 <d_print_comp+0x108>
   1276e:	463a      	mov	r2, r7
   12770:	4631      	mov	r1, r6
   12772:	4620      	mov	r0, r4
   12774:	f000 fb79 	bl	12e6a <d_print_subexpr>
   12778:	f7ff b9ca 	b.w	11b10 <d_print_comp+0x108>
   1277c:	68aa      	ldr	r2, [r5, #8]
   1277e:	7811      	ldrb	r1, [r2, #0]
   12780:	2927      	cmp	r1, #39	; 0x27
   12782:	d17b      	bne.n	1287c <d_print_comp+0xe74>
   12784:	6892      	ldr	r2, [r2, #8]
   12786:	7c17      	ldrb	r7, [r2, #16]
   12788:	2f06      	cmp	r7, #6
   1278a:	d816      	bhi.n	127ba <d_print_comp+0xdb2>
   1278c:	b1bf      	cbz	r7, 127be <d_print_comp+0xdb6>
   1278e:	68ea      	ldr	r2, [r5, #12]
   12790:	7812      	ldrb	r2, [r2, #0]
   12792:	b9a2      	cbnz	r2, 127be <d_print_comp+0xdb6>
   12794:	2b3e      	cmp	r3, #62	; 0x3e
   12796:	d102      	bne.n	1279e <d_print_comp+0xd96>
   12798:	212d      	movs	r1, #45	; 0x2d
   1279a:	f7fd fb2a 	bl	fdf2 <d_append_char>
   1279e:	3f02      	subs	r7, #2
   127a0:	68ea      	ldr	r2, [r5, #12]
   127a2:	4631      	mov	r1, r6
   127a4:	4620      	mov	r0, r4
   127a6:	f7ff f92f 	bl	11a08 <d_print_comp>
   127aa:	2f04      	cmp	r7, #4
   127ac:	f63f a9b0 	bhi.w	11b10 <d_print_comp+0x108>
   127b0:	e8df f007 	tbb	[pc, r7]
   127b4:	3f39332d 	.word	0x3f39332d
   127b8:	45          	.byte	0x45
   127b9:	00          	.byte	0x00
   127ba:	2f07      	cmp	r7, #7
   127bc:	d045      	beq.n	1284a <d_print_comp+0xe42>
   127be:	2128      	movs	r1, #40	; 0x28
   127c0:	4620      	mov	r0, r4
   127c2:	f7fd fb16 	bl	fdf2 <d_append_char>
   127c6:	68aa      	ldr	r2, [r5, #8]
   127c8:	4631      	mov	r1, r6
   127ca:	4620      	mov	r0, r4
   127cc:	f7ff f91c 	bl	11a08 <d_print_comp>
   127d0:	2129      	movs	r1, #41	; 0x29
   127d2:	4620      	mov	r0, r4
   127d4:	f7fd fb0d 	bl	fdf2 <d_append_char>
   127d8:	782b      	ldrb	r3, [r5, #0]
   127da:	2b3e      	cmp	r3, #62	; 0x3e
   127dc:	d103      	bne.n	127e6 <d_print_comp+0xdde>
   127de:	212d      	movs	r1, #45	; 0x2d
   127e0:	4620      	mov	r0, r4
   127e2:	f7fd fb06 	bl	fdf2 <d_append_char>
   127e6:	2f08      	cmp	r7, #8
   127e8:	d103      	bne.n	127f2 <d_print_comp+0xdea>
   127ea:	215b      	movs	r1, #91	; 0x5b
   127ec:	4620      	mov	r0, r4
   127ee:	f7fd fb00 	bl	fdf2 <d_append_char>
   127f2:	68ea      	ldr	r2, [r5, #12]
   127f4:	4631      	mov	r1, r6
   127f6:	4620      	mov	r0, r4
   127f8:	f7ff f906 	bl	11a08 <d_print_comp>
   127fc:	2f08      	cmp	r7, #8
   127fe:	f47f a987 	bne.w	11b10 <d_print_comp+0x108>
   12802:	215d      	movs	r1, #93	; 0x5d
   12804:	4620      	mov	r0, r4
   12806:	f7fd faf4 	bl	fdf2 <d_append_char>
   1280a:	f7ff b981 	b.w	11b10 <d_print_comp+0x108>
   1280e:	2175      	movs	r1, #117	; 0x75
   12810:	4620      	mov	r0, r4
   12812:	f7fd faee 	bl	fdf2 <d_append_char>
   12816:	f7ff b97b 	b.w	11b10 <d_print_comp+0x108>
   1281a:	216c      	movs	r1, #108	; 0x6c
   1281c:	4620      	mov	r0, r4
   1281e:	f7fd fae8 	bl	fdf2 <d_append_char>
   12822:	f7ff b975 	b.w	11b10 <d_print_comp+0x108>
   12826:	492c      	ldr	r1, [pc, #176]	; (128d8 <d_print_comp+0xed0>)
   12828:	4620      	mov	r0, r4
   1282a:	f7fd fb0d 	bl	fe48 <d_append_string>
   1282e:	f7ff b96f 	b.w	11b10 <d_print_comp+0x108>
   12832:	492a      	ldr	r1, [pc, #168]	; (128dc <d_print_comp+0xed4>)
   12834:	4620      	mov	r0, r4
   12836:	f7fd fb07 	bl	fe48 <d_append_string>
   1283a:	f7ff b969 	b.w	11b10 <d_print_comp+0x108>
   1283e:	4928      	ldr	r1, [pc, #160]	; (128e0 <d_print_comp+0xed8>)
   12840:	4620      	mov	r0, r4
   12842:	f7fd fb01 	bl	fe48 <d_append_string>
   12846:	f7ff b963 	b.w	11b10 <d_print_comp+0x108>
   1284a:	68ea      	ldr	r2, [r5, #12]
   1284c:	7811      	ldrb	r1, [r2, #0]
   1284e:	2900      	cmp	r1, #0
   12850:	d1b5      	bne.n	127be <d_print_comp+0xdb6>
   12852:	68d1      	ldr	r1, [r2, #12]
   12854:	2901      	cmp	r1, #1
   12856:	d1b2      	bne.n	127be <d_print_comp+0xdb6>
   12858:	2b3d      	cmp	r3, #61	; 0x3d
   1285a:	d1b0      	bne.n	127be <d_print_comp+0xdb6>
   1285c:	6893      	ldr	r3, [r2, #8]
   1285e:	781b      	ldrb	r3, [r3, #0]
   12860:	2b30      	cmp	r3, #48	; 0x30
   12862:	d006      	beq.n	12872 <d_print_comp+0xe6a>
   12864:	2b31      	cmp	r3, #49	; 0x31
   12866:	d1aa      	bne.n	127be <d_print_comp+0xdb6>
   12868:	491e      	ldr	r1, [pc, #120]	; (128e4 <d_print_comp+0xedc>)
   1286a:	f7fd faed 	bl	fe48 <d_append_string>
   1286e:	f7ff b94f 	b.w	11b10 <d_print_comp+0x108>
   12872:	491d      	ldr	r1, [pc, #116]	; (128e8 <d_print_comp+0xee0>)
   12874:	f7fd fae8 	bl	fe48 <d_append_string>
   12878:	f7ff b94a 	b.w	11b10 <d_print_comp+0x108>
   1287c:	2700      	movs	r7, #0
   1287e:	e79e      	b.n	127be <d_print_comp+0xdb6>
   12880:	68a9      	ldr	r1, [r5, #8]
   12882:	f7fd faee 	bl	fe62 <d_append_num>
   12886:	f7ff b943 	b.w	11b10 <d_print_comp+0x108>
   1288a:	4918      	ldr	r1, [pc, #96]	; (128ec <d_print_comp+0xee4>)
   1288c:	f7fd fadc 	bl	fe48 <d_append_string>
   12890:	68aa      	ldr	r2, [r5, #8]
   12892:	4631      	mov	r1, r6
   12894:	4620      	mov	r0, r4
   12896:	f7ff f8b7 	bl	11a08 <d_print_comp>
   1289a:	f7ff b939 	b.w	11b10 <d_print_comp+0x108>
   1289e:	68aa      	ldr	r2, [r5, #8]
   128a0:	4631      	mov	r1, r6
   128a2:	f7ff f8b1 	bl	11a08 <d_print_comp>
   128a6:	68ea      	ldr	r2, [r5, #12]
   128a8:	4631      	mov	r1, r6
   128aa:	4620      	mov	r0, r4
   128ac:	f7ff f8ac 	bl	11a08 <d_print_comp>
   128b0:	f7ff b92e 	b.w	11b10 <d_print_comp+0x108>
   128b4:	7a29      	ldrb	r1, [r5, #8]
   128b6:	f7fd fa9c 	bl	fdf2 <d_append_char>
   128ba:	f7ff b929 	b.w	11b10 <d_print_comp+0x108>
   128be:	bf00      	nop
   128c0:	0002cd7e 	.word	0x0002cd7e
   128c4:	0002cbaf 	.word	0x0002cbaf
   128c8:	0002cd81 	.word	0x0002cd81
   128cc:	0002cbb5 	.word	0x0002cbb5
   128d0:	0002cd84 	.word	0x0002cd84
   128d4:	0002cd88 	.word	0x0002cd88
   128d8:	0002cd8d 	.word	0x0002cd8d
   128dc:	0002cd91 	.word	0x0002cd91
   128e0:	0002cd90 	.word	0x0002cd90
   128e4:	0002cd94 	.word	0x0002cd94
   128e8:	0002bde0 	.word	0x0002bde0
   128ec:	0002cd99 	.word	0x0002cd99
   128f0:	4972      	ldr	r1, [pc, #456]	; (12abc <d_print_comp+0x10b4>)
   128f2:	f7fd faa9 	bl	fe48 <d_append_string>
   128f6:	4631      	mov	r1, r6
   128f8:	4620      	mov	r0, r4
   128fa:	68aa      	ldr	r2, [r5, #8]
   128fc:	f7ff f884 	bl	11a08 <d_print_comp>
   12900:	2129      	movs	r1, #41	; 0x29
   12902:	4620      	mov	r0, r4
   12904:	f7fd fa75 	bl	fdf2 <d_append_char>
   12908:	f7ff b902 	b.w	11b10 <d_print_comp+0x108>
   1290c:	68a9      	ldr	r1, [r5, #8]
   1290e:	f7fd fc47 	bl	101a0 <d_find_pack>
   12912:	b950      	cbnz	r0, 1292a <d_print_comp+0xf22>
   12914:	4631      	mov	r1, r6
   12916:	4620      	mov	r0, r4
   12918:	68aa      	ldr	r2, [r5, #8]
   1291a:	f000 faa6 	bl	12e6a <d_print_subexpr>
   1291e:	4968      	ldr	r1, [pc, #416]	; (12ac0 <d_print_comp+0x10b8>)
   12920:	4620      	mov	r0, r4
   12922:	f7fd fa91 	bl	fe48 <d_append_string>
   12926:	f7ff b8f3 	b.w	11b10 <d_print_comp+0x108>
   1292a:	f7fd fa81 	bl	fe30 <d_pack_length>
   1292e:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 12ae4 <d_print_comp+0x10dc>
   12932:	4607      	mov	r7, r0
   12934:	f8d5 9008 	ldr.w	r9, [r5, #8]
   12938:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
   1293c:	4547      	cmp	r7, r8
   1293e:	f77f a8e7 	ble.w	11b10 <d_print_comp+0x108>
   12942:	464a      	mov	r2, r9
   12944:	4631      	mov	r1, r6
   12946:	4620      	mov	r0, r4
   12948:	f8c4 8124 	str.w	r8, [r4, #292]	; 0x124
   1294c:	f7ff f85c 	bl	11a08 <d_print_comp>
   12950:	45d0      	cmp	r8, sl
   12952:	da03      	bge.n	1295c <d_print_comp+0xf54>
   12954:	4659      	mov	r1, fp
   12956:	4620      	mov	r0, r4
   12958:	f7fd fa76 	bl	fe48 <d_append_string>
   1295c:	f108 0801 	add.w	r8, r8, #1
   12960:	e7ec      	b.n	1293c <d_print_comp+0xf34>
   12962:	68ae      	ldr	r6, [r5, #8]
   12964:	b926      	cbnz	r6, 12970 <d_print_comp+0xf68>
   12966:	4957      	ldr	r1, [pc, #348]	; (12ac4 <d_print_comp+0x10bc>)
   12968:	f7fd fa6e 	bl	fe48 <d_append_string>
   1296c:	f7ff b8d0 	b.w	11b10 <d_print_comp+0x108>
   12970:	4955      	ldr	r1, [pc, #340]	; (12ac8 <d_print_comp+0x10c0>)
   12972:	f7fd fa69 	bl	fe48 <d_append_string>
   12976:	4631      	mov	r1, r6
   12978:	4620      	mov	r0, r4
   1297a:	f7fd fa72 	bl	fe62 <d_append_num>
   1297e:	217d      	movs	r1, #125	; 0x7d
   12980:	4620      	mov	r0, r4
   12982:	f7fd fa36 	bl	fdf2 <d_append_char>
   12986:	f7ff b8c3 	b.w	11b10 <d_print_comp+0x108>
   1298a:	4950      	ldr	r1, [pc, #320]	; (12acc <d_print_comp+0x10c4>)
   1298c:	f7fd fa5c 	bl	fe48 <d_append_string>
   12990:	68aa      	ldr	r2, [r5, #8]
   12992:	4631      	mov	r1, r6
   12994:	4620      	mov	r0, r4
   12996:	f7ff f837 	bl	11a08 <d_print_comp>
   1299a:	f7ff b8b9 	b.w	11b10 <d_print_comp+0x108>
   1299e:	494c      	ldr	r1, [pc, #304]	; (12ad0 <d_print_comp+0x10c8>)
   129a0:	f7fd fa52 	bl	fe48 <d_append_string>
   129a4:	68aa      	ldr	r2, [r5, #8]
   129a6:	4631      	mov	r1, r6
   129a8:	4620      	mov	r0, r4
   129aa:	f7ff f82d 	bl	11a08 <d_print_comp>
   129ae:	f7ff b8af 	b.w	11b10 <d_print_comp+0x108>
   129b2:	4948      	ldr	r1, [pc, #288]	; (12ad4 <d_print_comp+0x10cc>)
   129b4:	f7fd fa48 	bl	fe48 <d_append_string>
   129b8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   129bc:	68aa      	ldr	r2, [r5, #8]
   129be:	4631      	mov	r1, r6
   129c0:	3301      	adds	r3, #1
   129c2:	4620      	mov	r0, r4
   129c4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   129c8:	f7ff f81e 	bl	11a08 <d_print_comp>
   129cc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   129d0:	4620      	mov	r0, r4
   129d2:	4941      	ldr	r1, [pc, #260]	; (12ad8 <d_print_comp+0x10d0>)
   129d4:	3b01      	subs	r3, #1
   129d6:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   129da:	f7fd fa35 	bl	fe48 <d_append_string>
   129de:	68e9      	ldr	r1, [r5, #12]
   129e0:	4620      	mov	r0, r4
   129e2:	3101      	adds	r1, #1
   129e4:	f7fd fa3d 	bl	fe62 <d_append_num>
   129e8:	217d      	movs	r1, #125	; 0x7d
   129ea:	4620      	mov	r0, r4
   129ec:	f7fd fa01 	bl	fdf2 <d_append_char>
   129f0:	f7ff b88e 	b.w	11b10 <d_print_comp+0x108>
   129f4:	4939      	ldr	r1, [pc, #228]	; (12adc <d_print_comp+0x10d4>)
   129f6:	f7fd fa27 	bl	fe48 <d_append_string>
   129fa:	68a9      	ldr	r1, [r5, #8]
   129fc:	4620      	mov	r0, r4
   129fe:	3101      	adds	r1, #1
   12a00:	f7fd fa2f 	bl	fe62 <d_append_num>
   12a04:	217d      	movs	r1, #125	; 0x7d
   12a06:	4620      	mov	r0, r4
   12a08:	f7fd f9f3 	bl	fdf2 <d_append_char>
   12a0c:	f7ff b880 	b.w	11b10 <d_print_comp+0x108>
   12a10:	68aa      	ldr	r2, [r5, #8]
   12a12:	4631      	mov	r1, r6
   12a14:	f7fe fff8 	bl	11a08 <d_print_comp>
   12a18:	4620      	mov	r0, r4
   12a1a:	4931      	ldr	r1, [pc, #196]	; (12ae0 <d_print_comp+0x10d8>)
   12a1c:	f7fd fa14 	bl	fe48 <d_append_string>
   12a20:	4631      	mov	r1, r6
   12a22:	4620      	mov	r0, r4
   12a24:	68ea      	ldr	r2, [r5, #12]
   12a26:	f7fe ffef 	bl	11a08 <d_print_comp>
   12a2a:	215d      	movs	r1, #93	; 0x5d
   12a2c:	4620      	mov	r0, r4
   12a2e:	f7fd f9e0 	bl	fdf2 <d_append_char>
   12a32:	f7ff b86d 	b.w	11b10 <d_print_comp+0x108>
   12a36:	2a02      	cmp	r2, #2
   12a38:	d111      	bne.n	12a5e <d_print_comp+0x1056>
   12a3a:	68ff      	ldr	r7, [r7, #12]
   12a3c:	783b      	ldrb	r3, [r7, #0]
   12a3e:	2b47      	cmp	r3, #71	; 0x47
   12a40:	d103      	bne.n	12a4a <d_print_comp+0x1042>
   12a42:	68bf      	ldr	r7, [r7, #8]
   12a44:	2f00      	cmp	r7, #0
   12a46:	f43f a8f7 	beq.w	11c38 <d_print_comp+0x230>
   12a4a:	eb09 1908 	add.w	r9, r9, r8, lsl #4
   12a4e:	f04f 0b00 	mov.w	fp, #0
   12a52:	7838      	ldrb	r0, [r7, #0]
   12a54:	f7fd f8c2 	bl	fbdc <is_fnqual_component_type>
   12a58:	2800      	cmp	r0, #0
   12a5a:	f47f a908 	bne.w	11c6e <d_print_comp+0x266>
   12a5e:	783b      	ldrb	r3, [r7, #0]
   12a60:	4631      	mov	r1, r6
   12a62:	68ea      	ldr	r2, [r5, #12]
   12a64:	4620      	mov	r0, r4
   12a66:	2b04      	cmp	r3, #4
   12a68:	bf01      	itttt	eq
   12a6a:	ab04      	addeq	r3, sp, #16
   12a6c:	9705      	streq	r7, [sp, #20]
   12a6e:	f8cd a010 	streq.w	sl, [sp, #16]
   12a72:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
   12a76:	f7fe ffc7 	bl	11a08 <d_print_comp>
   12a7a:	783b      	ldrb	r3, [r7, #0]
   12a7c:	2b04      	cmp	r3, #4
   12a7e:	bf04      	itt	eq
   12a80:	9b04      	ldreq	r3, [sp, #16]
   12a82:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
   12a86:	ab06      	add	r3, sp, #24
   12a88:	eb03 1708 	add.w	r7, r3, r8, lsl #4
   12a8c:	f857 3c08 	ldr.w	r3, [r7, #-8]
   12a90:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   12a94:	b94b      	cbnz	r3, 12aaa <d_print_comp+0x10a2>
   12a96:	2120      	movs	r1, #32
   12a98:	4620      	mov	r0, r4
   12a9a:	f7fd f9aa 	bl	fdf2 <d_append_char>
   12a9e:	f857 2c0c 	ldr.w	r2, [r7, #-12]
   12aa2:	4631      	mov	r1, r6
   12aa4:	4620      	mov	r0, r4
   12aa6:	f000 f81f 	bl	12ae8 <d_print_mod>
   12aaa:	3f10      	subs	r7, #16
   12aac:	f1b8 0f00 	cmp.w	r8, #0
   12ab0:	d1ec      	bne.n	12a8c <d_print_comp+0x1084>
   12ab2:	9b01      	ldr	r3, [sp, #4]
   12ab4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   12ab8:	f7ff b82a 	b.w	11b10 <d_print_comp+0x108>
   12abc:	0002cda8 	.word	0x0002cda8
   12ac0:	0002ce83 	.word	0x0002ce83
   12ac4:	0002cdb3 	.word	0x0002cdb3
   12ac8:	0002cdb8 	.word	0x0002cdb8
   12acc:	0002cdbf 	.word	0x0002cdbf
   12ad0:	0002cddd 	.word	0x0002cddd
   12ad4:	0002cdfa 	.word	0x0002cdfa
   12ad8:	0002ce03 	.word	0x0002ce03
   12adc:	0002ce06 	.word	0x0002ce06
   12ae0:	0002ce15 	.word	0x0002ce15
   12ae4:	0002cd5f 	.word	0x0002cd5f

00012ae8 <d_print_mod>:
   12ae8:	b570      	push	{r4, r5, r6, lr}
   12aea:	7813      	ldrb	r3, [r2, #0]
   12aec:	4604      	mov	r4, r0
   12aee:	460e      	mov	r6, r1
   12af0:	4615      	mov	r5, r2
   12af2:	2b03      	cmp	r3, #3
   12af4:	d06e      	beq.n	12bd4 <d_print_mod+0xec>
   12af6:	3b19      	subs	r3, #25
   12af8:	b2da      	uxtb	r2, r3
   12afa:	2a37      	cmp	r2, #55	; 0x37
   12afc:	d874      	bhi.n	12be8 <d_print_mod+0x100>
   12afe:	2b37      	cmp	r3, #55	; 0x37
   12b00:	d872      	bhi.n	12be8 <d_print_mod+0x100>
   12b02:	e8df f003 	tbb	[pc, r3]
   12b06:	221c      	.short	0x221c
   12b08:	24221c24 	.word	0x24221c24
   12b0c:	433c504b 	.word	0x433c504b
   12b10:	5755534e 	.word	0x5755534e
   12b14:	71717171 	.word	0x71717171
   12b18:	716c7159 	.word	0x716c7159
   12b1c:	71717171 	.word	0x71717171
   12b20:	71717171 	.word	0x71717171
   12b24:	71717171 	.word	0x71717171
   12b28:	71717171 	.word	0x71717171
   12b2c:	71717171 	.word	0x71717171
   12b30:	71717171 	.word	0x71717171
   12b34:	71717171 	.word	0x71717171
   12b38:	71267171 	.word	0x71267171
   12b3c:	3a28      	.short	0x3a28
   12b3e:	492c      	ldr	r1, [pc, #176]	; (12bf0 <d_print_mod+0x108>)
   12b40:	4620      	mov	r0, r4
   12b42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12b46:	f7fd b97f 	b.w	fe48 <d_append_string>
   12b4a:	492a      	ldr	r1, [pc, #168]	; (12bf4 <d_print_mod+0x10c>)
   12b4c:	e7f8      	b.n	12b40 <d_print_mod+0x58>
   12b4e:	492a      	ldr	r1, [pc, #168]	; (12bf8 <d_print_mod+0x110>)
   12b50:	e7f6      	b.n	12b40 <d_print_mod+0x58>
   12b52:	492a      	ldr	r1, [pc, #168]	; (12bfc <d_print_mod+0x114>)
   12b54:	e7f4      	b.n	12b40 <d_print_mod+0x58>
   12b56:	492a      	ldr	r1, [pc, #168]	; (12c00 <d_print_mod+0x118>)
   12b58:	4620      	mov	r0, r4
   12b5a:	f7fd f975 	bl	fe48 <d_append_string>
   12b5e:	68eb      	ldr	r3, [r5, #12]
   12b60:	2b00      	cmp	r3, #0
   12b62:	d043      	beq.n	12bec <d_print_mod+0x104>
   12b64:	2128      	movs	r1, #40	; 0x28
   12b66:	4620      	mov	r0, r4
   12b68:	f7fd f943 	bl	fdf2 <d_append_char>
   12b6c:	68ea      	ldr	r2, [r5, #12]
   12b6e:	4631      	mov	r1, r6
   12b70:	4620      	mov	r0, r4
   12b72:	f7fe ff49 	bl	11a08 <d_print_comp>
   12b76:	2129      	movs	r1, #41	; 0x29
   12b78:	e00b      	b.n	12b92 <d_print_mod+0xaa>
   12b7a:	4922      	ldr	r1, [pc, #136]	; (12c04 <d_print_mod+0x11c>)
   12b7c:	e7ec      	b.n	12b58 <d_print_mod+0x70>
   12b7e:	2120      	movs	r1, #32
   12b80:	f7fd f937 	bl	fdf2 <d_append_char>
   12b84:	68ea      	ldr	r2, [r5, #12]
   12b86:	4631      	mov	r1, r6
   12b88:	4620      	mov	r0, r4
   12b8a:	e024      	b.n	12bd6 <d_print_mod+0xee>
   12b8c:	074b      	lsls	r3, r1, #29
   12b8e:	d42d      	bmi.n	12bec <d_print_mod+0x104>
   12b90:	212a      	movs	r1, #42	; 0x2a
   12b92:	4620      	mov	r0, r4
   12b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12b98:	f7fd b92b 	b.w	fdf2 <d_append_char>
   12b9c:	2120      	movs	r1, #32
   12b9e:	f7fd f928 	bl	fdf2 <d_append_char>
   12ba2:	2126      	movs	r1, #38	; 0x26
   12ba4:	e7f5      	b.n	12b92 <d_print_mod+0xaa>
   12ba6:	2120      	movs	r1, #32
   12ba8:	f7fd f923 	bl	fdf2 <d_append_char>
   12bac:	4916      	ldr	r1, [pc, #88]	; (12c08 <d_print_mod+0x120>)
   12bae:	e7c7      	b.n	12b40 <d_print_mod+0x58>
   12bb0:	4916      	ldr	r1, [pc, #88]	; (12c0c <d_print_mod+0x124>)
   12bb2:	e7c5      	b.n	12b40 <d_print_mod+0x58>
   12bb4:	4916      	ldr	r1, [pc, #88]	; (12c10 <d_print_mod+0x128>)
   12bb6:	e7c3      	b.n	12b40 <d_print_mod+0x58>
   12bb8:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   12bbc:	2b28      	cmp	r3, #40	; 0x28
   12bbe:	d002      	beq.n	12bc6 <d_print_mod+0xde>
   12bc0:	2120      	movs	r1, #32
   12bc2:	f7fd f916 	bl	fdf2 <d_append_char>
   12bc6:	4631      	mov	r1, r6
   12bc8:	68aa      	ldr	r2, [r5, #8]
   12bca:	4620      	mov	r0, r4
   12bcc:	f7fe ff1c 	bl	11a08 <d_print_comp>
   12bd0:	4910      	ldr	r1, [pc, #64]	; (12c14 <d_print_mod+0x12c>)
   12bd2:	e7b5      	b.n	12b40 <d_print_mod+0x58>
   12bd4:	6892      	ldr	r2, [r2, #8]
   12bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12bda:	f7fe bf15 	b.w	11a08 <d_print_comp>
   12bde:	490e      	ldr	r1, [pc, #56]	; (12c18 <d_print_mod+0x130>)
   12be0:	f7fd f932 	bl	fe48 <d_append_string>
   12be4:	68aa      	ldr	r2, [r5, #8]
   12be6:	e7c2      	b.n	12b6e <d_print_mod+0x86>
   12be8:	462a      	mov	r2, r5
   12bea:	e7cc      	b.n	12b86 <d_print_mod+0x9e>
   12bec:	bd70      	pop	{r4, r5, r6, pc}
   12bee:	bf00      	nop
   12bf0:	0002ce1e 	.word	0x0002ce1e
   12bf4:	0002ce28 	.word	0x0002ce28
   12bf8:	0002ce32 	.word	0x0002ce32
   12bfc:	0002ce39 	.word	0x0002ce39
   12c00:	0002ce4b 	.word	0x0002ce4b
   12c04:	0002ce55 	.word	0x0002ce55
   12c08:	0002ce5c 	.word	0x0002ce5c
   12c0c:	0002ce5f 	.word	0x0002ce5f
   12c10:	0002ce68 	.word	0x0002ce68
   12c14:	0002ce73 	.word	0x0002ce73
   12c18:	0002ce77 	.word	0x0002ce77

00012c1c <d_print_function_type.isra.0>:
   12c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12c20:	4604      	mov	r4, r0
   12c22:	460e      	mov	r6, r1
   12c24:	4690      	mov	r8, r2
   12c26:	461f      	mov	r7, r3
   12c28:	461d      	mov	r5, r3
   12c2a:	bb3d      	cbnz	r5, 12c7c <d_print_function_type.isra.0+0x60>
   12c2c:	2300      	movs	r3, #0
   12c2e:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
   12c32:	463a      	mov	r2, r7
   12c34:	4631      	mov	r1, r6
   12c36:	4620      	mov	r0, r4
   12c38:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   12c3c:	f000 f849 	bl	12cd2 <d_print_mod_list>
   12c40:	b11d      	cbz	r5, 12c4a <d_print_function_type.isra.0+0x2e>
   12c42:	2129      	movs	r1, #41	; 0x29
   12c44:	4620      	mov	r0, r4
   12c46:	f7fd f8d4 	bl	fdf2 <d_append_char>
   12c4a:	2128      	movs	r1, #40	; 0x28
   12c4c:	4620      	mov	r0, r4
   12c4e:	f7fd f8d0 	bl	fdf2 <d_append_char>
   12c52:	f8d8 2000 	ldr.w	r2, [r8]
   12c56:	b11a      	cbz	r2, 12c60 <d_print_function_type.isra.0+0x44>
   12c58:	4631      	mov	r1, r6
   12c5a:	4620      	mov	r0, r4
   12c5c:	f7fe fed4 	bl	11a08 <d_print_comp>
   12c60:	2129      	movs	r1, #41	; 0x29
   12c62:	4620      	mov	r0, r4
   12c64:	f7fd f8c5 	bl	fdf2 <d_append_char>
   12c68:	2301      	movs	r3, #1
   12c6a:	463a      	mov	r2, r7
   12c6c:	4631      	mov	r1, r6
   12c6e:	4620      	mov	r0, r4
   12c70:	f000 f82f 	bl	12cd2 <d_print_mod_list>
   12c74:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   12c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12c7c:	68ab      	ldr	r3, [r5, #8]
   12c7e:	b993      	cbnz	r3, 12ca6 <d_print_function_type.isra.0+0x8a>
   12c80:	686b      	ldr	r3, [r5, #4]
   12c82:	781b      	ldrb	r3, [r3, #0]
   12c84:	3b19      	subs	r3, #25
   12c86:	2b12      	cmp	r3, #18
   12c88:	d80b      	bhi.n	12ca2 <d_print_function_type.isra.0+0x86>
   12c8a:	e8df f003 	tbb	[pc, r3]
   12c8e:	1414      	.short	0x1414
   12c90:	0a0a0a14 	.word	0x0a0a0a14
   12c94:	0e140a0a 	.word	0x0e140a0a
   12c98:	14140e0e 	.word	0x14140e0e
   12c9c:	0a0a0a0a 	.word	0x0a0a0a0a
   12ca0:	14          	.byte	0x14
   12ca1:	00          	.byte	0x00
   12ca2:	682d      	ldr	r5, [r5, #0]
   12ca4:	e7c1      	b.n	12c2a <d_print_function_type.isra.0+0xe>
   12ca6:	2500      	movs	r5, #0
   12ca8:	e7c0      	b.n	12c2c <d_print_function_type.isra.0+0x10>
   12caa:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   12cae:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   12cb2:	2b28      	cmp	r3, #40	; 0x28
   12cb4:	d007      	beq.n	12cc6 <d_print_function_type.isra.0+0xaa>
   12cb6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   12cba:	2b20      	cmp	r3, #32
   12cbc:	d003      	beq.n	12cc6 <d_print_function_type.isra.0+0xaa>
   12cbe:	2120      	movs	r1, #32
   12cc0:	4620      	mov	r0, r4
   12cc2:	f7fd f896 	bl	fdf2 <d_append_char>
   12cc6:	2128      	movs	r1, #40	; 0x28
   12cc8:	4620      	mov	r0, r4
   12cca:	2501      	movs	r5, #1
   12ccc:	f7fd f891 	bl	fdf2 <d_append_char>
   12cd0:	e7ac      	b.n	12c2c <d_print_function_type.isra.0+0x10>

00012cd2 <d_print_mod_list>:
   12cd2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12cd6:	4604      	mov	r4, r0
   12cd8:	460e      	mov	r6, r1
   12cda:	4615      	mov	r5, r2
   12cdc:	4698      	mov	r8, r3
   12cde:	f04f 0901 	mov.w	r9, #1
   12ce2:	b305      	cbz	r5, 12d26 <d_print_mod_list+0x54>
   12ce4:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   12ce8:	b9eb      	cbnz	r3, 12d26 <d_print_mod_list+0x54>
   12cea:	68ab      	ldr	r3, [r5, #8]
   12cec:	b943      	cbnz	r3, 12d00 <d_print_mod_list+0x2e>
   12cee:	686a      	ldr	r2, [r5, #4]
   12cf0:	7811      	ldrb	r1, [r2, #0]
   12cf2:	f1b8 0f00 	cmp.w	r8, #0
   12cf6:	d105      	bne.n	12d04 <d_print_mod_list+0x32>
   12cf8:	4608      	mov	r0, r1
   12cfa:	f7fc ff6f 	bl	fbdc <is_fnqual_component_type>
   12cfe:	b108      	cbz	r0, 12d04 <d_print_mod_list+0x32>
   12d00:	682d      	ldr	r5, [r5, #0]
   12d02:	e7ee      	b.n	12ce2 <d_print_mod_list+0x10>
   12d04:	68eb      	ldr	r3, [r5, #12]
   12d06:	2929      	cmp	r1, #41	; 0x29
   12d08:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
   12d0c:	f8c5 9008 	str.w	r9, [r5, #8]
   12d10:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   12d14:	d109      	bne.n	12d2a <d_print_mod_list+0x58>
   12d16:	682b      	ldr	r3, [r5, #0]
   12d18:	320c      	adds	r2, #12
   12d1a:	4631      	mov	r1, r6
   12d1c:	4620      	mov	r0, r4
   12d1e:	f7ff ff7d 	bl	12c1c <d_print_function_type.isra.0>
   12d22:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
   12d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12d2a:	292a      	cmp	r1, #42	; 0x2a
   12d2c:	d106      	bne.n	12d3c <d_print_mod_list+0x6a>
   12d2e:	682b      	ldr	r3, [r5, #0]
   12d30:	3208      	adds	r2, #8
   12d32:	4631      	mov	r1, r6
   12d34:	4620      	mov	r0, r4
   12d36:	f000 f845 	bl	12dc4 <d_print_array_type.isra.0>
   12d3a:	e7f2      	b.n	12d22 <d_print_mod_list+0x50>
   12d3c:	2902      	cmp	r1, #2
   12d3e:	d134      	bne.n	12daa <d_print_mod_list+0xd8>
   12d40:	2300      	movs	r3, #0
   12d42:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
   12d46:	6892      	ldr	r2, [r2, #8]
   12d48:	4631      	mov	r1, r6
   12d4a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   12d4e:	4620      	mov	r0, r4
   12d50:	f7fe fe5a 	bl	11a08 <d_print_comp>
   12d54:	0773      	lsls	r3, r6, #29
   12d56:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   12d5a:	d421      	bmi.n	12da0 <d_print_mod_list+0xce>
   12d5c:	4916      	ldr	r1, [pc, #88]	; (12db8 <d_print_mod_list+0xe6>)
   12d5e:	4620      	mov	r0, r4
   12d60:	f7fd f872 	bl	fe48 <d_append_string>
   12d64:	686b      	ldr	r3, [r5, #4]
   12d66:	68dd      	ldr	r5, [r3, #12]
   12d68:	782b      	ldrb	r3, [r5, #0]
   12d6a:	2b47      	cmp	r3, #71	; 0x47
   12d6c:	d10d      	bne.n	12d8a <d_print_mod_list+0xb8>
   12d6e:	4913      	ldr	r1, [pc, #76]	; (12dbc <d_print_mod_list+0xea>)
   12d70:	4620      	mov	r0, r4
   12d72:	f7fd f869 	bl	fe48 <d_append_string>
   12d76:	68e9      	ldr	r1, [r5, #12]
   12d78:	4620      	mov	r0, r4
   12d7a:	3101      	adds	r1, #1
   12d7c:	f7fd f871 	bl	fe62 <d_append_num>
   12d80:	490f      	ldr	r1, [pc, #60]	; (12dc0 <d_print_mod_list+0xee>)
   12d82:	4620      	mov	r0, r4
   12d84:	f7fd f860 	bl	fe48 <d_append_string>
   12d88:	68ad      	ldr	r5, [r5, #8]
   12d8a:	7828      	ldrb	r0, [r5, #0]
   12d8c:	f7fc ff26 	bl	fbdc <is_fnqual_component_type>
   12d90:	2800      	cmp	r0, #0
   12d92:	d1f9      	bne.n	12d88 <d_print_mod_list+0xb6>
   12d94:	462a      	mov	r2, r5
   12d96:	4631      	mov	r1, r6
   12d98:	4620      	mov	r0, r4
   12d9a:	f7fe fe35 	bl	11a08 <d_print_comp>
   12d9e:	e7c0      	b.n	12d22 <d_print_mod_list+0x50>
   12da0:	212e      	movs	r1, #46	; 0x2e
   12da2:	4620      	mov	r0, r4
   12da4:	f7fd f825 	bl	fdf2 <d_append_char>
   12da8:	e7dc      	b.n	12d64 <d_print_mod_list+0x92>
   12daa:	4631      	mov	r1, r6
   12dac:	4620      	mov	r0, r4
   12dae:	f7ff fe9b 	bl	12ae8 <d_print_mod>
   12db2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
   12db6:	e7a3      	b.n	12d00 <d_print_mod_list+0x2e>
   12db8:	0002cbfa 	.word	0x0002cbfa
   12dbc:	0002cbeb 	.word	0x0002cbeb
   12dc0:	0002cbf9 	.word	0x0002cbf9

00012dc4 <d_print_array_type.isra.0>:
   12dc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12dc8:	460f      	mov	r7, r1
   12dca:	4690      	mov	r8, r2
   12dcc:	461e      	mov	r6, r3
   12dce:	b9b3      	cbnz	r3, 12dfe <d_print_array_type.isra.0+0x3a>
   12dd0:	2120      	movs	r1, #32
   12dd2:	9001      	str	r0, [sp, #4]
   12dd4:	f7fd f80d 	bl	fdf2 <d_append_char>
   12dd8:	9801      	ldr	r0, [sp, #4]
   12dda:	215b      	movs	r1, #91	; 0x5b
   12ddc:	9001      	str	r0, [sp, #4]
   12dde:	f7fd f808 	bl	fdf2 <d_append_char>
   12de2:	f8d8 2000 	ldr.w	r2, [r8]
   12de6:	9801      	ldr	r0, [sp, #4]
   12de8:	b11a      	cbz	r2, 12df2 <d_print_array_type.isra.0+0x2e>
   12dea:	4639      	mov	r1, r7
   12dec:	f7fe fe0c 	bl	11a08 <d_print_comp>
   12df0:	9801      	ldr	r0, [sp, #4]
   12df2:	215d      	movs	r1, #93	; 0x5d
   12df4:	b002      	add	sp, #8
   12df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   12dfa:	f7fc bffa 	b.w	fdf2 <d_append_char>
   12dfe:	461c      	mov	r4, r3
   12e00:	68a5      	ldr	r5, [r4, #8]
   12e02:	b95d      	cbnz	r5, 12e1c <d_print_array_type.isra.0+0x58>
   12e04:	6863      	ldr	r3, [r4, #4]
   12e06:	781b      	ldrb	r3, [r3, #0]
   12e08:	2b2a      	cmp	r3, #42	; 0x2a
   12e0a:	d01a      	beq.n	12e42 <d_print_array_type.isra.0+0x7e>
   12e0c:	2401      	movs	r4, #1
   12e0e:	490e      	ldr	r1, [pc, #56]	; (12e48 <d_print_array_type.isra.0+0x84>)
   12e10:	9001      	str	r0, [sp, #4]
   12e12:	f7fd f819 	bl	fe48 <d_append_string>
   12e16:	4625      	mov	r5, r4
   12e18:	9801      	ldr	r0, [sp, #4]
   12e1a:	e003      	b.n	12e24 <d_print_array_type.isra.0+0x60>
   12e1c:	6824      	ldr	r4, [r4, #0]
   12e1e:	2c00      	cmp	r4, #0
   12e20:	d1ee      	bne.n	12e00 <d_print_array_type.isra.0+0x3c>
   12e22:	2501      	movs	r5, #1
   12e24:	2300      	movs	r3, #0
   12e26:	4632      	mov	r2, r6
   12e28:	4639      	mov	r1, r7
   12e2a:	9001      	str	r0, [sp, #4]
   12e2c:	f7ff ff51 	bl	12cd2 <d_print_mod_list>
   12e30:	9801      	ldr	r0, [sp, #4]
   12e32:	b11c      	cbz	r4, 12e3c <d_print_array_type.isra.0+0x78>
   12e34:	2129      	movs	r1, #41	; 0x29
   12e36:	f7fc ffdc 	bl	fdf2 <d_append_char>
   12e3a:	9801      	ldr	r0, [sp, #4]
   12e3c:	2d00      	cmp	r5, #0
   12e3e:	d1c7      	bne.n	12dd0 <d_print_array_type.isra.0+0xc>
   12e40:	e7cb      	b.n	12dda <d_print_array_type.isra.0+0x16>
   12e42:	462c      	mov	r4, r5
   12e44:	e7ee      	b.n	12e24 <d_print_array_type.isra.0+0x60>
   12e46:	bf00      	nop
   12e48:	0002cdb0 	.word	0x0002cdb0

00012e4c <d_print_expr_op>:
   12e4c:	b410      	push	{r4}
   12e4e:	7814      	ldrb	r4, [r2, #0]
   12e50:	2c32      	cmp	r4, #50	; 0x32
   12e52:	d106      	bne.n	12e62 <d_print_expr_op+0x16>
   12e54:	6893      	ldr	r3, [r2, #8]
   12e56:	f85d 4b04 	ldr.w	r4, [sp], #4
   12e5a:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
   12e5e:	f7fc bfda 	b.w	fe16 <d_append_buffer>
   12e62:	f85d 4b04 	ldr.w	r4, [sp], #4
   12e66:	f7fe bdcf 	b.w	11a08 <d_print_comp>

00012e6a <d_print_subexpr>:
   12e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12e6c:	7813      	ldrb	r3, [r2, #0]
   12e6e:	4604      	mov	r4, r0
   12e70:	460f      	mov	r7, r1
   12e72:	4616      	mov	r6, r2
   12e74:	2b01      	cmp	r3, #1
   12e76:	d913      	bls.n	12ea0 <d_print_subexpr+0x36>
   12e78:	2b31      	cmp	r3, #49	; 0x31
   12e7a:	d011      	beq.n	12ea0 <d_print_subexpr+0x36>
   12e7c:	2b06      	cmp	r3, #6
   12e7e:	d00f      	beq.n	12ea0 <d_print_subexpr+0x36>
   12e80:	2500      	movs	r5, #0
   12e82:	2128      	movs	r1, #40	; 0x28
   12e84:	f7fc ffb5 	bl	fdf2 <d_append_char>
   12e88:	4632      	mov	r2, r6
   12e8a:	4639      	mov	r1, r7
   12e8c:	4620      	mov	r0, r4
   12e8e:	f7fe fdbb 	bl	11a08 <d_print_comp>
   12e92:	b93d      	cbnz	r5, 12ea4 <d_print_subexpr+0x3a>
   12e94:	4620      	mov	r0, r4
   12e96:	2129      	movs	r1, #41	; 0x29
   12e98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   12e9c:	f7fc bfa9 	b.w	fdf2 <d_append_char>
   12ea0:	2501      	movs	r5, #1
   12ea2:	e7f1      	b.n	12e88 <d_print_subexpr+0x1e>
   12ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012ea6 <d_maybe_print_fold_expression>:
   12ea6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12eaa:	6893      	ldr	r3, [r2, #8]
   12eac:	460d      	mov	r5, r1
   12eae:	4604      	mov	r4, r0
   12eb0:	689b      	ldr	r3, [r3, #8]
   12eb2:	681b      	ldr	r3, [r3, #0]
   12eb4:	7819      	ldrb	r1, [r3, #0]
   12eb6:	2966      	cmp	r1, #102	; 0x66
   12eb8:	d15c      	bne.n	12f74 <d_maybe_print_fold_expression+0xce>
   12eba:	68d2      	ldr	r2, [r2, #12]
   12ebc:	f8d0 9124 	ldr.w	r9, [r0, #292]	; 0x124
   12ec0:	e9d2 7602 	ldrd	r7, r6, [r2, #8]
   12ec4:	7832      	ldrb	r2, [r6, #0]
   12ec6:	2a3c      	cmp	r2, #60	; 0x3c
   12ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12ecc:	bf08      	it	eq
   12ece:	e9d6 6802 	ldrdeq	r6, r8, [r6, #8]
   12ed2:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   12ed6:	bf18      	it	ne
   12ed8:	f04f 0800 	movne.w	r8, #0
   12edc:	785b      	ldrb	r3, [r3, #1]
   12ede:	2b6c      	cmp	r3, #108	; 0x6c
   12ee0:	d01d      	beq.n	12f1e <d_maybe_print_fold_expression+0x78>
   12ee2:	d808      	bhi.n	12ef6 <d_maybe_print_fold_expression+0x50>
   12ee4:	2b4c      	cmp	r3, #76	; 0x4c
   12ee6:	d02c      	beq.n	12f42 <d_maybe_print_fold_expression+0x9c>
   12ee8:	2b52      	cmp	r3, #82	; 0x52
   12eea:	d02a      	beq.n	12f42 <d_maybe_print_fold_expression+0x9c>
   12eec:	2001      	movs	r0, #1
   12eee:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   12ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12ef6:	2b72      	cmp	r3, #114	; 0x72
   12ef8:	d1f8      	bne.n	12eec <d_maybe_print_fold_expression+0x46>
   12efa:	2128      	movs	r1, #40	; 0x28
   12efc:	f7fc ff79 	bl	fdf2 <d_append_char>
   12f00:	4632      	mov	r2, r6
   12f02:	4629      	mov	r1, r5
   12f04:	4620      	mov	r0, r4
   12f06:	f7ff ffb0 	bl	12e6a <d_print_subexpr>
   12f0a:	4629      	mov	r1, r5
   12f0c:	4620      	mov	r0, r4
   12f0e:	463a      	mov	r2, r7
   12f10:	f7ff ff9c 	bl	12e4c <d_print_expr_op>
   12f14:	4918      	ldr	r1, [pc, #96]	; (12f78 <d_maybe_print_fold_expression+0xd2>)
   12f16:	4620      	mov	r0, r4
   12f18:	f7fc ff96 	bl	fe48 <d_append_string>
   12f1c:	e7e6      	b.n	12eec <d_maybe_print_fold_expression+0x46>
   12f1e:	4917      	ldr	r1, [pc, #92]	; (12f7c <d_maybe_print_fold_expression+0xd6>)
   12f20:	f7fc ff92 	bl	fe48 <d_append_string>
   12f24:	463a      	mov	r2, r7
   12f26:	4629      	mov	r1, r5
   12f28:	4620      	mov	r0, r4
   12f2a:	f7ff ff8f 	bl	12e4c <d_print_expr_op>
   12f2e:	4632      	mov	r2, r6
   12f30:	4629      	mov	r1, r5
   12f32:	4620      	mov	r0, r4
   12f34:	f7ff ff99 	bl	12e6a <d_print_subexpr>
   12f38:	2129      	movs	r1, #41	; 0x29
   12f3a:	4620      	mov	r0, r4
   12f3c:	f7fc ff59 	bl	fdf2 <d_append_char>
   12f40:	e7d4      	b.n	12eec <d_maybe_print_fold_expression+0x46>
   12f42:	2128      	movs	r1, #40	; 0x28
   12f44:	4620      	mov	r0, r4
   12f46:	f7fc ff54 	bl	fdf2 <d_append_char>
   12f4a:	4632      	mov	r2, r6
   12f4c:	4629      	mov	r1, r5
   12f4e:	4620      	mov	r0, r4
   12f50:	f7ff ff8b 	bl	12e6a <d_print_subexpr>
   12f54:	463a      	mov	r2, r7
   12f56:	4629      	mov	r1, r5
   12f58:	4620      	mov	r0, r4
   12f5a:	f7ff ff77 	bl	12e4c <d_print_expr_op>
   12f5e:	4908      	ldr	r1, [pc, #32]	; (12f80 <d_maybe_print_fold_expression+0xda>)
   12f60:	4620      	mov	r0, r4
   12f62:	f7fc ff71 	bl	fe48 <d_append_string>
   12f66:	463a      	mov	r2, r7
   12f68:	4629      	mov	r1, r5
   12f6a:	4620      	mov	r0, r4
   12f6c:	f7ff ff6e 	bl	12e4c <d_print_expr_op>
   12f70:	4642      	mov	r2, r8
   12f72:	e7dd      	b.n	12f30 <d_maybe_print_fold_expression+0x8a>
   12f74:	2000      	movs	r0, #0
   12f76:	e7bc      	b.n	12ef2 <d_maybe_print_fold_expression+0x4c>
   12f78:	0002ce87 	.word	0x0002ce87
   12f7c:	0002ce82 	.word	0x0002ce82
   12f80:	0002ce83 	.word	0x0002ce83

00012f84 <d_demangle_callback.constprop.0>:
   12f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f88:	b0e5      	sub	sp, #404	; 0x194
   12f8a:	4605      	mov	r5, r0
   12f8c:	4689      	mov	r9, r1
   12f8e:	4690      	mov	r8, r2
   12f90:	f890 b000 	ldrb.w	fp, [r0]
   12f94:	af00      	add	r7, sp, #0
   12f96:	f1bb 0f5f 	cmp.w	fp, #95	; 0x5f
   12f9a:	d102      	bne.n	12fa2 <d_demangle_callback.constprop.0+0x1e>
   12f9c:	7843      	ldrb	r3, [r0, #1]
   12f9e:	2b5a      	cmp	r3, #90	; 0x5a
   12fa0:	d071      	beq.n	13086 <d_demangle_callback.constprop.0+0x102>
   12fa2:	2208      	movs	r2, #8
   12fa4:	499a      	ldr	r1, [pc, #616]	; (13210 <d_demangle_callback.constprop.0+0x28c>)
   12fa6:	4628      	mov	r0, r5
   12fa8:	f011 fba4 	bl	246f4 <strncmp>
   12fac:	2800      	cmp	r0, #0
   12fae:	d16d      	bne.n	1308c <d_demangle_callback.constprop.0+0x108>
   12fb0:	7a2b      	ldrb	r3, [r5, #8]
   12fb2:	2b2e      	cmp	r3, #46	; 0x2e
   12fb4:	d003      	beq.n	12fbe <d_demangle_callback.constprop.0+0x3a>
   12fb6:	2b5f      	cmp	r3, #95	; 0x5f
   12fb8:	d001      	beq.n	12fbe <d_demangle_callback.constprop.0+0x3a>
   12fba:	2b24      	cmp	r3, #36	; 0x24
   12fbc:	d166      	bne.n	1308c <d_demangle_callback.constprop.0+0x108>
   12fbe:	7a6b      	ldrb	r3, [r5, #9]
   12fc0:	2b44      	cmp	r3, #68	; 0x44
   12fc2:	d001      	beq.n	12fc8 <d_demangle_callback.constprop.0+0x44>
   12fc4:	2b49      	cmp	r3, #73	; 0x49
   12fc6:	d161      	bne.n	1308c <d_demangle_callback.constprop.0+0x108>
   12fc8:	7aaa      	ldrb	r2, [r5, #10]
   12fca:	2a5f      	cmp	r2, #95	; 0x5f
   12fcc:	d15e      	bne.n	1308c <d_demangle_callback.constprop.0+0x108>
   12fce:	2b49      	cmp	r3, #73	; 0x49
   12fd0:	bf0c      	ite	eq
   12fd2:	f04f 0a02 	moveq.w	sl, #2
   12fd6:	f04f 0a03 	movne.w	sl, #3
   12fda:	4628      	mov	r0, r5
   12fdc:	2400      	movs	r4, #0
   12fde:	f002 ff4b 	bl	15e78 <strlen>
   12fe2:	182b      	adds	r3, r5, r0
   12fe4:	60bd      	str	r5, [r7, #8]
   12fe6:	60fb      	str	r3, [r7, #12]
   12fe8:	2311      	movs	r3, #17
   12fea:	61fc      	str	r4, [r7, #28]
   12fec:	643c      	str	r4, [r7, #64]	; 0x40
   12fee:	e9c7 3504 	strd	r3, r5, [r7, #16]
   12ff2:	0043      	lsls	r3, r0, #1
   12ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   12ff8:	623b      	str	r3, [r7, #32]
   12ffa:	e9c7 400a 	strd	r4, r0, [r7, #40]	; 0x28
   12ffe:	e9c7 440c 	strd	r4, r4, [r7, #48]	; 0x30
   13002:	e9c7 440e 	strd	r4, r4, [r7, #56]	; 0x38
   13006:	f200 80a0 	bhi.w	1314a <d_demangle_callback.constprop.0+0x1c6>
   1300a:	466e      	mov	r6, sp
   1300c:	f1ba 0f01 	cmp.w	sl, #1
   13010:	eba6 1340 	sub.w	r3, r6, r0, lsl #5
   13014:	ea4f 0080 	mov.w	r0, r0, lsl #2
   13018:	469d      	mov	sp, r3
   1301a:	61bb      	str	r3, [r7, #24]
   1301c:	f100 0007 	add.w	r0, r0, #7
   13020:	f020 0007 	bic.w	r0, r0, #7
   13024:	ebad 0d00 	sub.w	sp, sp, r0
   13028:	f8c7 d024 	str.w	sp, [r7, #36]	; 0x24
   1302c:	f000 8093 	beq.w	13156 <d_demangle_callback.constprop.0+0x1d2>
   13030:	f1aa 0302 	sub.w	r3, sl, #2
   13034:	2b01      	cmp	r3, #1
   13036:	d82c      	bhi.n	13092 <d_demangle_callback.constprop.0+0x10e>
   13038:	f1ba 0f02 	cmp.w	sl, #2
   1303c:	7aeb      	ldrb	r3, [r5, #11]
   1303e:	f105 010b 	add.w	r1, r5, #11
   13042:	bf0c      	ite	eq
   13044:	f04f 0a44 	moveq.w	sl, #68	; 0x44
   13048:	f04f 0a45 	movne.w	sl, #69	; 0x45
   1304c:	2b5f      	cmp	r3, #95	; 0x5f
   1304e:	6179      	str	r1, [r7, #20]
   13050:	f000 80cf 	beq.w	131f2 <d_demangle_callback.constprop.0+0x26e>
   13054:	4608      	mov	r0, r1
   13056:	6079      	str	r1, [r7, #4]
   13058:	f002 ff0e 	bl	15e78 <strlen>
   1305c:	6879      	ldr	r1, [r7, #4]
   1305e:	4602      	mov	r2, r0
   13060:	f107 0008 	add.w	r0, r7, #8
   13064:	f7fc fe18 	bl	fc98 <d_make_name>
   13068:	4602      	mov	r2, r0
   1306a:	2300      	movs	r3, #0
   1306c:	4651      	mov	r1, sl
   1306e:	f107 0008 	add.w	r0, r7, #8
   13072:	f7fc fdd0 	bl	fc16 <d_make_comp>
   13076:	697d      	ldr	r5, [r7, #20]
   13078:	4604      	mov	r4, r0
   1307a:	4628      	mov	r0, r5
   1307c:	f002 fefc 	bl	15e78 <strlen>
   13080:	4428      	add	r0, r5
   13082:	6178      	str	r0, [r7, #20]
   13084:	e00a      	b.n	1309c <d_demangle_callback.constprop.0+0x118>
   13086:	f04f 0a01 	mov.w	sl, #1
   1308a:	e7a6      	b.n	12fda <d_demangle_callback.constprop.0+0x56>
   1308c:	f04f 0a00 	mov.w	sl, #0
   13090:	e7a3      	b.n	12fda <d_demangle_callback.constprop.0+0x56>
   13092:	f107 0008 	add.w	r0, r7, #8
   13096:	f7fd fba1 	bl	107dc <d_type>
   1309a:	4604      	mov	r4, r0
   1309c:	697b      	ldr	r3, [r7, #20]
   1309e:	781d      	ldrb	r5, [r3, #0]
   130a0:	2d00      	cmp	r5, #0
   130a2:	f040 80b2 	bne.w	1320a <d_demangle_callback.constprop.0+0x286>
   130a6:	2c00      	cmp	r4, #0
   130a8:	d04e      	beq.n	13148 <d_demangle_callback.constprop.0+0x1c4>
   130aa:	4621      	mov	r1, r4
   130ac:	f107 0044 	add.w	r0, r7, #68	; 0x44
   130b0:	f8c7 5144 	str.w	r5, [r7, #324]	; 0x144
   130b4:	f887 5148 	strb.w	r5, [r7, #328]	; 0x148
   130b8:	f8c7 5164 	str.w	r5, [r7, #356]	; 0x164
   130bc:	f8c7 5188 	str.w	r5, [r7, #392]	; 0x188
   130c0:	e9c7 5555 	strd	r5, r5, [r7, #340]	; 0x154
   130c4:	e9c7 555a 	strd	r5, r5, [r7, #360]	; 0x168
   130c8:	e9c7 5557 	strd	r5, r5, [r7, #348]	; 0x15c
   130cc:	e9c7 555c 	strd	r5, r5, [r7, #368]	; 0x170
   130d0:	e9c7 555e 	strd	r5, r5, [r7, #376]	; 0x178
   130d4:	e9c7 5560 	strd	r5, r5, [r7, #384]	; 0x180
   130d8:	e9c7 9853 	strd	r9, r8, [r7, #332]	; 0x14c
   130dc:	f7fc fe1c 	bl	fd18 <d_count_templates_scopes>
   130e0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   130e4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   130e8:	2100      	movs	r1, #0
   130ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   130ee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
   130f2:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
   130f6:	f107 0044 	add.w	r0, r7, #68	; 0x44
   130fa:	bfb8      	it	lt
   130fc:	f8c7 5160 	strlt.w	r5, [r7, #352]	; 0x160
   13100:	2a01      	cmp	r2, #1
   13102:	fb03 f302 	mul.w	r3, r3, r2
   13106:	466d      	mov	r5, sp
   13108:	bfb8      	it	lt
   1310a:	2201      	movlt	r2, #1
   1310c:	2b01      	cmp	r3, #1
   1310e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   13112:	eba5 02c2 	sub.w	r2, r5, r2, lsl #3
   13116:	bfb8      	it	lt
   13118:	2301      	movlt	r3, #1
   1311a:	4695      	mov	sp, r2
   1311c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
   13120:	4622      	mov	r2, r4
   13122:	4669      	mov	r1, sp
   13124:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
   13128:	2111      	movs	r1, #17
   1312a:	469d      	mov	sp, r3
   1312c:	f8c7 d180 	str.w	sp, [r7, #384]	; 0x180
   13130:	f7fe fc6a 	bl	11a08 <d_print_comp>
   13134:	f107 0044 	add.w	r0, r7, #68	; 0x44
   13138:	46ad      	mov	sp, r5
   1313a:	f7fc fe49 	bl	fdd0 <d_print_flush>
   1313e:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
   13142:	fab4 f484 	clz	r4, r4
   13146:	0964      	lsrs	r4, r4, #5
   13148:	46b5      	mov	sp, r6
   1314a:	4620      	mov	r0, r4
   1314c:	f507 77ca 	add.w	r7, r7, #404	; 0x194
   13150:	46bd      	mov	sp, r7
   13152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13156:	f1bb 0f5f 	cmp.w	fp, #95	; 0x5f
   1315a:	d001      	beq.n	13160 <d_demangle_callback.constprop.0+0x1dc>
   1315c:	2400      	movs	r4, #0
   1315e:	e79d      	b.n	1309c <d_demangle_callback.constprop.0+0x118>
   13160:	1c6b      	adds	r3, r5, #1
   13162:	617b      	str	r3, [r7, #20]
   13164:	786b      	ldrb	r3, [r5, #1]
   13166:	2b5a      	cmp	r3, #90	; 0x5a
   13168:	d1f8      	bne.n	1315c <d_demangle_callback.constprop.0+0x1d8>
   1316a:	3502      	adds	r5, #2
   1316c:	4651      	mov	r1, sl
   1316e:	f107 0008 	add.w	r0, r7, #8
   13172:	617d      	str	r5, [r7, #20]
   13174:	f7fe fa4a 	bl	1160c <d_encoding>
   13178:	693b      	ldr	r3, [r7, #16]
   1317a:	4604      	mov	r4, r0
   1317c:	07db      	lsls	r3, r3, #31
   1317e:	d58d      	bpl.n	1309c <d_demangle_callback.constprop.0+0x118>
   13180:	6979      	ldr	r1, [r7, #20]
   13182:	780b      	ldrb	r3, [r1, #0]
   13184:	2b2e      	cmp	r3, #46	; 0x2e
   13186:	d189      	bne.n	1309c <d_demangle_callback.constprop.0+0x118>
   13188:	784b      	ldrb	r3, [r1, #1]
   1318a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   1318e:	2a19      	cmp	r2, #25
   13190:	d907      	bls.n	131a2 <d_demangle_callback.constprop.0+0x21e>
   13192:	2b5f      	cmp	r3, #95	; 0x5f
   13194:	d005      	beq.n	131a2 <d_demangle_callback.constprop.0+0x21e>
   13196:	3b30      	subs	r3, #48	; 0x30
   13198:	2b09      	cmp	r3, #9
   1319a:	f63f af7f 	bhi.w	1309c <d_demangle_callback.constprop.0+0x118>
   1319e:	460a      	mov	r2, r1
   131a0:	e009      	b.n	131b6 <d_demangle_callback.constprop.0+0x232>
   131a2:	1c8b      	adds	r3, r1, #2
   131a4:	461a      	mov	r2, r3
   131a6:	f813 0b01 	ldrb.w	r0, [r3], #1
   131aa:	f1a0 0561 	sub.w	r5, r0, #97	; 0x61
   131ae:	2d19      	cmp	r5, #25
   131b0:	d9f8      	bls.n	131a4 <d_demangle_callback.constprop.0+0x220>
   131b2:	285f      	cmp	r0, #95	; 0x5f
   131b4:	d0f6      	beq.n	131a4 <d_demangle_callback.constprop.0+0x220>
   131b6:	7813      	ldrb	r3, [r2, #0]
   131b8:	2b2e      	cmp	r3, #46	; 0x2e
   131ba:	d00e      	beq.n	131da <d_demangle_callback.constprop.0+0x256>
   131bc:	617a      	str	r2, [r7, #20]
   131be:	f107 0008 	add.w	r0, r7, #8
   131c2:	1a52      	subs	r2, r2, r1
   131c4:	f7fc fd68 	bl	fc98 <d_make_name>
   131c8:	4622      	mov	r2, r4
   131ca:	4603      	mov	r3, r0
   131cc:	214e      	movs	r1, #78	; 0x4e
   131ce:	f107 0008 	add.w	r0, r7, #8
   131d2:	f7fc fd20 	bl	fc16 <d_make_comp>
   131d6:	4604      	mov	r4, r0
   131d8:	e7d2      	b.n	13180 <d_demangle_callback.constprop.0+0x1fc>
   131da:	7853      	ldrb	r3, [r2, #1]
   131dc:	3b30      	subs	r3, #48	; 0x30
   131de:	2b09      	cmp	r3, #9
   131e0:	d8ec      	bhi.n	131bc <d_demangle_callback.constprop.0+0x238>
   131e2:	1c90      	adds	r0, r2, #2
   131e4:	4602      	mov	r2, r0
   131e6:	3001      	adds	r0, #1
   131e8:	7813      	ldrb	r3, [r2, #0]
   131ea:	3b30      	subs	r3, #48	; 0x30
   131ec:	2b09      	cmp	r3, #9
   131ee:	d9f9      	bls.n	131e4 <d_demangle_callback.constprop.0+0x260>
   131f0:	e7e1      	b.n	131b6 <d_demangle_callback.constprop.0+0x232>
   131f2:	7b2b      	ldrb	r3, [r5, #12]
   131f4:	2b5a      	cmp	r3, #90	; 0x5a
   131f6:	f47f af2d 	bne.w	13054 <d_demangle_callback.constprop.0+0xd0>
   131fa:	350d      	adds	r5, #13
   131fc:	4621      	mov	r1, r4
   131fe:	f107 0008 	add.w	r0, r7, #8
   13202:	617d      	str	r5, [r7, #20]
   13204:	f7fe fa02 	bl	1160c <d_encoding>
   13208:	e72e      	b.n	13068 <d_demangle_callback.constprop.0+0xe4>
   1320a:	2400      	movs	r4, #0
   1320c:	e79c      	b.n	13148 <d_demangle_callback.constprop.0+0x1c4>
   1320e:	bf00      	nop
   13210:	0002cb90 	.word	0x0002cb90

00013214 <__cxa_demangle>:
   13214:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   13218:	460f      	mov	r7, r1
   1321a:	4616      	mov	r6, r2
   1321c:	461c      	mov	r4, r3
   1321e:	b948      	cbnz	r0, 13234 <__cxa_demangle+0x20>
   13220:	b924      	cbnz	r4, 1322c <__cxa_demangle+0x18>
   13222:	2500      	movs	r5, #0
   13224:	4628      	mov	r0, r5
   13226:	b004      	add	sp, #16
   13228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1322c:	f06f 0302 	mvn.w	r3, #2
   13230:	6023      	str	r3, [r4, #0]
   13232:	e7f6      	b.n	13222 <__cxa_demangle+0xe>
   13234:	b109      	cbz	r1, 1323a <__cxa_demangle+0x26>
   13236:	2a00      	cmp	r2, #0
   13238:	d0f2      	beq.n	13220 <__cxa_demangle+0xc>
   1323a:	2300      	movs	r3, #0
   1323c:	466a      	mov	r2, sp
   1323e:	491e      	ldr	r1, [pc, #120]	; (132b8 <__cxa_demangle+0xa4>)
   13240:	e9cd 3300 	strd	r3, r3, [sp]
   13244:	e9cd 3302 	strd	r3, r3, [sp, #8]
   13248:	f7ff fe9c 	bl	12f84 <d_demangle_callback.constprop.0>
   1324c:	b938      	cbnz	r0, 1325e <__cxa_demangle+0x4a>
   1324e:	9800      	ldr	r0, [sp, #0]
   13250:	f00d ff50 	bl	210f4 <free>
   13254:	2c00      	cmp	r4, #0
   13256:	d0e4      	beq.n	13222 <__cxa_demangle+0xe>
   13258:	f06f 0301 	mvn.w	r3, #1
   1325c:	e7e8      	b.n	13230 <__cxa_demangle+0x1c>
   1325e:	9b03      	ldr	r3, [sp, #12]
   13260:	b963      	cbnz	r3, 1327c <__cxa_demangle+0x68>
   13262:	f8dd 8008 	ldr.w	r8, [sp, #8]
   13266:	9d00      	ldr	r5, [sp, #0]
   13268:	b95d      	cbnz	r5, 13282 <__cxa_demangle+0x6e>
   1326a:	2c00      	cmp	r4, #0
   1326c:	d0d9      	beq.n	13222 <__cxa_demangle+0xe>
   1326e:	f1b8 0f01 	cmp.w	r8, #1
   13272:	d1f1      	bne.n	13258 <__cxa_demangle+0x44>
   13274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13278:	6023      	str	r3, [r4, #0]
   1327a:	e7d3      	b.n	13224 <__cxa_demangle+0x10>
   1327c:	f04f 0801 	mov.w	r8, #1
   13280:	e7f1      	b.n	13266 <__cxa_demangle+0x52>
   13282:	b91f      	cbnz	r7, 1328c <__cxa_demangle+0x78>
   13284:	b186      	cbz	r6, 132a8 <__cxa_demangle+0x94>
   13286:	f8c6 8000 	str.w	r8, [r6]
   1328a:	e00d      	b.n	132a8 <__cxa_demangle+0x94>
   1328c:	4628      	mov	r0, r5
   1328e:	f002 fdf3 	bl	15e78 <strlen>
   13292:	6833      	ldr	r3, [r6, #0]
   13294:	4298      	cmp	r0, r3
   13296:	d20b      	bcs.n	132b0 <__cxa_demangle+0x9c>
   13298:	4629      	mov	r1, r5
   1329a:	4638      	mov	r0, r7
   1329c:	f011 fa22 	bl	246e4 <strcpy>
   132a0:	4628      	mov	r0, r5
   132a2:	463d      	mov	r5, r7
   132a4:	f00d ff26 	bl	210f4 <free>
   132a8:	2c00      	cmp	r4, #0
   132aa:	d0bb      	beq.n	13224 <__cxa_demangle+0x10>
   132ac:	2300      	movs	r3, #0
   132ae:	e7e3      	b.n	13278 <__cxa_demangle+0x64>
   132b0:	4638      	mov	r0, r7
   132b2:	f00d ff1f 	bl	210f4 <free>
   132b6:	e7e6      	b.n	13286 <__cxa_demangle+0x72>
   132b8:	00010113 	.word	0x00010113

000132bc <__gcclibcxx_demangle_callback>:
   132bc:	b508      	push	{r3, lr}
   132be:	b140      	cbz	r0, 132d2 <__gcclibcxx_demangle_callback+0x16>
   132c0:	b139      	cbz	r1, 132d2 <__gcclibcxx_demangle_callback+0x16>
   132c2:	f7ff fe5f 	bl	12f84 <d_demangle_callback.constprop.0>
   132c6:	2800      	cmp	r0, #0
   132c8:	bf14      	ite	ne
   132ca:	2000      	movne	r0, #0
   132cc:	f06f 0001 	mvneq.w	r0, #1
   132d0:	bd08      	pop	{r3, pc}
   132d2:	f06f 0002 	mvn.w	r0, #2
   132d6:	e7fb      	b.n	132d0 <__gcclibcxx_demangle_callback+0x14>

000132d8 <__aeabi_drsub>:
   132d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   132dc:	e002      	b.n	132e4 <__adddf3>
   132de:	bf00      	nop

000132e0 <__aeabi_dsub>:
   132e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000132e4 <__adddf3>:
   132e4:	b530      	push	{r4, r5, lr}
   132e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   132ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
   132ee:	ea94 0f05 	teq	r4, r5
   132f2:	bf08      	it	eq
   132f4:	ea90 0f02 	teqeq	r0, r2
   132f8:	bf1f      	itttt	ne
   132fa:	ea54 0c00 	orrsne.w	ip, r4, r0
   132fe:	ea55 0c02 	orrsne.w	ip, r5, r2
   13302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   13306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   1330a:	f000 80e2 	beq.w	134d2 <__adddf3+0x1ee>
   1330e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   13312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   13316:	bfb8      	it	lt
   13318:	426d      	neglt	r5, r5
   1331a:	dd0c      	ble.n	13336 <__adddf3+0x52>
   1331c:	442c      	add	r4, r5
   1331e:	ea80 0202 	eor.w	r2, r0, r2
   13322:	ea81 0303 	eor.w	r3, r1, r3
   13326:	ea82 0000 	eor.w	r0, r2, r0
   1332a:	ea83 0101 	eor.w	r1, r3, r1
   1332e:	ea80 0202 	eor.w	r2, r0, r2
   13332:	ea81 0303 	eor.w	r3, r1, r3
   13336:	2d36      	cmp	r5, #54	; 0x36
   13338:	bf88      	it	hi
   1333a:	bd30      	pophi	{r4, r5, pc}
   1333c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13340:	ea4f 3101 	mov.w	r1, r1, lsl #12
   13344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   13348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   1334c:	d002      	beq.n	13354 <__adddf3+0x70>
   1334e:	4240      	negs	r0, r0
   13350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   13358:	ea4f 3303 	mov.w	r3, r3, lsl #12
   1335c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   13360:	d002      	beq.n	13368 <__adddf3+0x84>
   13362:	4252      	negs	r2, r2
   13364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   13368:	ea94 0f05 	teq	r4, r5
   1336c:	f000 80a7 	beq.w	134be <__adddf3+0x1da>
   13370:	f1a4 0401 	sub.w	r4, r4, #1
   13374:	f1d5 0e20 	rsbs	lr, r5, #32
   13378:	db0d      	blt.n	13396 <__adddf3+0xb2>
   1337a:	fa02 fc0e 	lsl.w	ip, r2, lr
   1337e:	fa22 f205 	lsr.w	r2, r2, r5
   13382:	1880      	adds	r0, r0, r2
   13384:	f141 0100 	adc.w	r1, r1, #0
   13388:	fa03 f20e 	lsl.w	r2, r3, lr
   1338c:	1880      	adds	r0, r0, r2
   1338e:	fa43 f305 	asr.w	r3, r3, r5
   13392:	4159      	adcs	r1, r3
   13394:	e00e      	b.n	133b4 <__adddf3+0xd0>
   13396:	f1a5 0520 	sub.w	r5, r5, #32
   1339a:	f10e 0e20 	add.w	lr, lr, #32
   1339e:	2a01      	cmp	r2, #1
   133a0:	fa03 fc0e 	lsl.w	ip, r3, lr
   133a4:	bf28      	it	cs
   133a6:	f04c 0c02 	orrcs.w	ip, ip, #2
   133aa:	fa43 f305 	asr.w	r3, r3, r5
   133ae:	18c0      	adds	r0, r0, r3
   133b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   133b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   133b8:	d507      	bpl.n	133ca <__adddf3+0xe6>
   133ba:	f04f 0e00 	mov.w	lr, #0
   133be:	f1dc 0c00 	rsbs	ip, ip, #0
   133c2:	eb7e 0000 	sbcs.w	r0, lr, r0
   133c6:	eb6e 0101 	sbc.w	r1, lr, r1
   133ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   133ce:	d31b      	bcc.n	13408 <__adddf3+0x124>
   133d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   133d4:	d30c      	bcc.n	133f0 <__adddf3+0x10c>
   133d6:	0849      	lsrs	r1, r1, #1
   133d8:	ea5f 0030 	movs.w	r0, r0, rrx
   133dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   133e0:	f104 0401 	add.w	r4, r4, #1
   133e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   133e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   133ec:	f080 809a 	bcs.w	13524 <__adddf3+0x240>
   133f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   133f4:	bf08      	it	eq
   133f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   133fa:	f150 0000 	adcs.w	r0, r0, #0
   133fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   13402:	ea41 0105 	orr.w	r1, r1, r5
   13406:	bd30      	pop	{r4, r5, pc}
   13408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   1340c:	4140      	adcs	r0, r0
   1340e:	eb41 0101 	adc.w	r1, r1, r1
   13412:	3c01      	subs	r4, #1
   13414:	bf28      	it	cs
   13416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   1341a:	d2e9      	bcs.n	133f0 <__adddf3+0x10c>
   1341c:	f091 0f00 	teq	r1, #0
   13420:	bf04      	itt	eq
   13422:	4601      	moveq	r1, r0
   13424:	2000      	moveq	r0, #0
   13426:	fab1 f381 	clz	r3, r1
   1342a:	bf08      	it	eq
   1342c:	3320      	addeq	r3, #32
   1342e:	f1a3 030b 	sub.w	r3, r3, #11
   13432:	f1b3 0220 	subs.w	r2, r3, #32
   13436:	da0c      	bge.n	13452 <__adddf3+0x16e>
   13438:	320c      	adds	r2, #12
   1343a:	dd08      	ble.n	1344e <__adddf3+0x16a>
   1343c:	f102 0c14 	add.w	ip, r2, #20
   13440:	f1c2 020c 	rsb	r2, r2, #12
   13444:	fa01 f00c 	lsl.w	r0, r1, ip
   13448:	fa21 f102 	lsr.w	r1, r1, r2
   1344c:	e00c      	b.n	13468 <__adddf3+0x184>
   1344e:	f102 0214 	add.w	r2, r2, #20
   13452:	bfd8      	it	le
   13454:	f1c2 0c20 	rsble	ip, r2, #32
   13458:	fa01 f102 	lsl.w	r1, r1, r2
   1345c:	fa20 fc0c 	lsr.w	ip, r0, ip
   13460:	bfdc      	itt	le
   13462:	ea41 010c 	orrle.w	r1, r1, ip
   13466:	4090      	lslle	r0, r2
   13468:	1ae4      	subs	r4, r4, r3
   1346a:	bfa2      	ittt	ge
   1346c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   13470:	4329      	orrge	r1, r5
   13472:	bd30      	popge	{r4, r5, pc}
   13474:	ea6f 0404 	mvn.w	r4, r4
   13478:	3c1f      	subs	r4, #31
   1347a:	da1c      	bge.n	134b6 <__adddf3+0x1d2>
   1347c:	340c      	adds	r4, #12
   1347e:	dc0e      	bgt.n	1349e <__adddf3+0x1ba>
   13480:	f104 0414 	add.w	r4, r4, #20
   13484:	f1c4 0220 	rsb	r2, r4, #32
   13488:	fa20 f004 	lsr.w	r0, r0, r4
   1348c:	fa01 f302 	lsl.w	r3, r1, r2
   13490:	ea40 0003 	orr.w	r0, r0, r3
   13494:	fa21 f304 	lsr.w	r3, r1, r4
   13498:	ea45 0103 	orr.w	r1, r5, r3
   1349c:	bd30      	pop	{r4, r5, pc}
   1349e:	f1c4 040c 	rsb	r4, r4, #12
   134a2:	f1c4 0220 	rsb	r2, r4, #32
   134a6:	fa20 f002 	lsr.w	r0, r0, r2
   134aa:	fa01 f304 	lsl.w	r3, r1, r4
   134ae:	ea40 0003 	orr.w	r0, r0, r3
   134b2:	4629      	mov	r1, r5
   134b4:	bd30      	pop	{r4, r5, pc}
   134b6:	fa21 f004 	lsr.w	r0, r1, r4
   134ba:	4629      	mov	r1, r5
   134bc:	bd30      	pop	{r4, r5, pc}
   134be:	f094 0f00 	teq	r4, #0
   134c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   134c6:	bf06      	itte	eq
   134c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   134cc:	3401      	addeq	r4, #1
   134ce:	3d01      	subne	r5, #1
   134d0:	e74e      	b.n	13370 <__adddf3+0x8c>
   134d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   134d6:	bf18      	it	ne
   134d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   134dc:	d029      	beq.n	13532 <__adddf3+0x24e>
   134de:	ea94 0f05 	teq	r4, r5
   134e2:	bf08      	it	eq
   134e4:	ea90 0f02 	teqeq	r0, r2
   134e8:	d005      	beq.n	134f6 <__adddf3+0x212>
   134ea:	ea54 0c00 	orrs.w	ip, r4, r0
   134ee:	bf04      	itt	eq
   134f0:	4619      	moveq	r1, r3
   134f2:	4610      	moveq	r0, r2
   134f4:	bd30      	pop	{r4, r5, pc}
   134f6:	ea91 0f03 	teq	r1, r3
   134fa:	bf1e      	ittt	ne
   134fc:	2100      	movne	r1, #0
   134fe:	2000      	movne	r0, #0
   13500:	bd30      	popne	{r4, r5, pc}
   13502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   13506:	d105      	bne.n	13514 <__adddf3+0x230>
   13508:	0040      	lsls	r0, r0, #1
   1350a:	4149      	adcs	r1, r1
   1350c:	bf28      	it	cs
   1350e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   13512:	bd30      	pop	{r4, r5, pc}
   13514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   13518:	bf3c      	itt	cc
   1351a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   1351e:	bd30      	popcc	{r4, r5, pc}
   13520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   13524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   13528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1352c:	f04f 0000 	mov.w	r0, #0
   13530:	bd30      	pop	{r4, r5, pc}
   13532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   13536:	bf1a      	itte	ne
   13538:	4619      	movne	r1, r3
   1353a:	4610      	movne	r0, r2
   1353c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   13540:	bf1c      	itt	ne
   13542:	460b      	movne	r3, r1
   13544:	4602      	movne	r2, r0
   13546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1354a:	bf06      	itte	eq
   1354c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   13550:	ea91 0f03 	teqeq	r1, r3
   13554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   13558:	bd30      	pop	{r4, r5, pc}
   1355a:	bf00      	nop

0001355c <__aeabi_ui2d>:
   1355c:	f090 0f00 	teq	r0, #0
   13560:	bf04      	itt	eq
   13562:	2100      	moveq	r1, #0
   13564:	4770      	bxeq	lr
   13566:	b530      	push	{r4, r5, lr}
   13568:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1356c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   13570:	f04f 0500 	mov.w	r5, #0
   13574:	f04f 0100 	mov.w	r1, #0
   13578:	e750      	b.n	1341c <__adddf3+0x138>
   1357a:	bf00      	nop

0001357c <__aeabi_i2d>:
   1357c:	f090 0f00 	teq	r0, #0
   13580:	bf04      	itt	eq
   13582:	2100      	moveq	r1, #0
   13584:	4770      	bxeq	lr
   13586:	b530      	push	{r4, r5, lr}
   13588:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1358c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   13590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   13594:	bf48      	it	mi
   13596:	4240      	negmi	r0, r0
   13598:	f04f 0100 	mov.w	r1, #0
   1359c:	e73e      	b.n	1341c <__adddf3+0x138>
   1359e:	bf00      	nop

000135a0 <__aeabi_f2d>:
   135a0:	0042      	lsls	r2, r0, #1
   135a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   135a6:	ea4f 0131 	mov.w	r1, r1, rrx
   135aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
   135ae:	bf1f      	itttt	ne
   135b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   135b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   135b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   135bc:	4770      	bxne	lr
   135be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   135c2:	bf08      	it	eq
   135c4:	4770      	bxeq	lr
   135c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   135ca:	bf04      	itt	eq
   135cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   135d0:	4770      	bxeq	lr
   135d2:	b530      	push	{r4, r5, lr}
   135d4:	f44f 7460 	mov.w	r4, #896	; 0x380
   135d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   135dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   135e0:	e71c      	b.n	1341c <__adddf3+0x138>
   135e2:	bf00      	nop

000135e4 <__aeabi_ul2d>:
   135e4:	ea50 0201 	orrs.w	r2, r0, r1
   135e8:	bf08      	it	eq
   135ea:	4770      	bxeq	lr
   135ec:	b530      	push	{r4, r5, lr}
   135ee:	f04f 0500 	mov.w	r5, #0
   135f2:	e00a      	b.n	1360a <__aeabi_l2d+0x16>

000135f4 <__aeabi_l2d>:
   135f4:	ea50 0201 	orrs.w	r2, r0, r1
   135f8:	bf08      	it	eq
   135fa:	4770      	bxeq	lr
   135fc:	b530      	push	{r4, r5, lr}
   135fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   13602:	d502      	bpl.n	1360a <__aeabi_l2d+0x16>
   13604:	4240      	negs	r0, r0
   13606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1360a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   1360e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   13612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   13616:	f43f aed8 	beq.w	133ca <__adddf3+0xe6>
   1361a:	f04f 0203 	mov.w	r2, #3
   1361e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   13622:	bf18      	it	ne
   13624:	3203      	addne	r2, #3
   13626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   1362a:	bf18      	it	ne
   1362c:	3203      	addne	r2, #3
   1362e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   13632:	f1c2 0320 	rsb	r3, r2, #32
   13636:	fa00 fc03 	lsl.w	ip, r0, r3
   1363a:	fa20 f002 	lsr.w	r0, r0, r2
   1363e:	fa01 fe03 	lsl.w	lr, r1, r3
   13642:	ea40 000e 	orr.w	r0, r0, lr
   13646:	fa21 f102 	lsr.w	r1, r1, r2
   1364a:	4414      	add	r4, r2
   1364c:	e6bd      	b.n	133ca <__adddf3+0xe6>
   1364e:	bf00      	nop

00013650 <__aeabi_dmul>:
   13650:	b570      	push	{r4, r5, r6, lr}
   13652:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1365a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1365e:	bf1d      	ittte	ne
   13660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   13664:	ea94 0f0c 	teqne	r4, ip
   13668:	ea95 0f0c 	teqne	r5, ip
   1366c:	f000 f8de 	bleq	1382c <__aeabi_dmul+0x1dc>
   13670:	442c      	add	r4, r5
   13672:	ea81 0603 	eor.w	r6, r1, r3
   13676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   1367a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   1367e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   13682:	bf18      	it	ne
   13684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   13688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1368c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13690:	d038      	beq.n	13704 <__aeabi_dmul+0xb4>
   13692:	fba0 ce02 	umull	ip, lr, r0, r2
   13696:	f04f 0500 	mov.w	r5, #0
   1369a:	fbe1 e502 	umlal	lr, r5, r1, r2
   1369e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   136a2:	fbe0 e503 	umlal	lr, r5, r0, r3
   136a6:	f04f 0600 	mov.w	r6, #0
   136aa:	fbe1 5603 	umlal	r5, r6, r1, r3
   136ae:	f09c 0f00 	teq	ip, #0
   136b2:	bf18      	it	ne
   136b4:	f04e 0e01 	orrne.w	lr, lr, #1
   136b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   136bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   136c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   136c4:	d204      	bcs.n	136d0 <__aeabi_dmul+0x80>
   136c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   136ca:	416d      	adcs	r5, r5
   136cc:	eb46 0606 	adc.w	r6, r6, r6
   136d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   136d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   136d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   136dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   136e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   136e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   136e8:	bf88      	it	hi
   136ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   136ee:	d81e      	bhi.n	1372e <__aeabi_dmul+0xde>
   136f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   136f4:	bf08      	it	eq
   136f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   136fa:	f150 0000 	adcs.w	r0, r0, #0
   136fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   13702:	bd70      	pop	{r4, r5, r6, pc}
   13704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   13708:	ea46 0101 	orr.w	r1, r6, r1
   1370c:	ea40 0002 	orr.w	r0, r0, r2
   13710:	ea81 0103 	eor.w	r1, r1, r3
   13714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   13718:	bfc2      	ittt	gt
   1371a:	ebd4 050c 	rsbsgt	r5, r4, ip
   1371e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   13722:	bd70      	popgt	{r4, r5, r6, pc}
   13724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13728:	f04f 0e00 	mov.w	lr, #0
   1372c:	3c01      	subs	r4, #1
   1372e:	f300 80ab 	bgt.w	13888 <__aeabi_dmul+0x238>
   13732:	f114 0f36 	cmn.w	r4, #54	; 0x36
   13736:	bfde      	ittt	le
   13738:	2000      	movle	r0, #0
   1373a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1373e:	bd70      	pople	{r4, r5, r6, pc}
   13740:	f1c4 0400 	rsb	r4, r4, #0
   13744:	3c20      	subs	r4, #32
   13746:	da35      	bge.n	137b4 <__aeabi_dmul+0x164>
   13748:	340c      	adds	r4, #12
   1374a:	dc1b      	bgt.n	13784 <__aeabi_dmul+0x134>
   1374c:	f104 0414 	add.w	r4, r4, #20
   13750:	f1c4 0520 	rsb	r5, r4, #32
   13754:	fa00 f305 	lsl.w	r3, r0, r5
   13758:	fa20 f004 	lsr.w	r0, r0, r4
   1375c:	fa01 f205 	lsl.w	r2, r1, r5
   13760:	ea40 0002 	orr.w	r0, r0, r2
   13764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   13768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   1376c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   13770:	fa21 f604 	lsr.w	r6, r1, r4
   13774:	eb42 0106 	adc.w	r1, r2, r6
   13778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1377c:	bf08      	it	eq
   1377e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   13782:	bd70      	pop	{r4, r5, r6, pc}
   13784:	f1c4 040c 	rsb	r4, r4, #12
   13788:	f1c4 0520 	rsb	r5, r4, #32
   1378c:	fa00 f304 	lsl.w	r3, r0, r4
   13790:	fa20 f005 	lsr.w	r0, r0, r5
   13794:	fa01 f204 	lsl.w	r2, r1, r4
   13798:	ea40 0002 	orr.w	r0, r0, r2
   1379c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   137a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   137a4:	f141 0100 	adc.w	r1, r1, #0
   137a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   137ac:	bf08      	it	eq
   137ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   137b2:	bd70      	pop	{r4, r5, r6, pc}
   137b4:	f1c4 0520 	rsb	r5, r4, #32
   137b8:	fa00 f205 	lsl.w	r2, r0, r5
   137bc:	ea4e 0e02 	orr.w	lr, lr, r2
   137c0:	fa20 f304 	lsr.w	r3, r0, r4
   137c4:	fa01 f205 	lsl.w	r2, r1, r5
   137c8:	ea43 0302 	orr.w	r3, r3, r2
   137cc:	fa21 f004 	lsr.w	r0, r1, r4
   137d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   137d4:	fa21 f204 	lsr.w	r2, r1, r4
   137d8:	ea20 0002 	bic.w	r0, r0, r2
   137dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   137e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   137e4:	bf08      	it	eq
   137e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   137ea:	bd70      	pop	{r4, r5, r6, pc}
   137ec:	f094 0f00 	teq	r4, #0
   137f0:	d10f      	bne.n	13812 <__aeabi_dmul+0x1c2>
   137f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   137f6:	0040      	lsls	r0, r0, #1
   137f8:	eb41 0101 	adc.w	r1, r1, r1
   137fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13800:	bf08      	it	eq
   13802:	3c01      	subeq	r4, #1
   13804:	d0f7      	beq.n	137f6 <__aeabi_dmul+0x1a6>
   13806:	ea41 0106 	orr.w	r1, r1, r6
   1380a:	f095 0f00 	teq	r5, #0
   1380e:	bf18      	it	ne
   13810:	4770      	bxne	lr
   13812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   13816:	0052      	lsls	r2, r2, #1
   13818:	eb43 0303 	adc.w	r3, r3, r3
   1381c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   13820:	bf08      	it	eq
   13822:	3d01      	subeq	r5, #1
   13824:	d0f7      	beq.n	13816 <__aeabi_dmul+0x1c6>
   13826:	ea43 0306 	orr.w	r3, r3, r6
   1382a:	4770      	bx	lr
   1382c:	ea94 0f0c 	teq	r4, ip
   13830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   13834:	bf18      	it	ne
   13836:	ea95 0f0c 	teqne	r5, ip
   1383a:	d00c      	beq.n	13856 <__aeabi_dmul+0x206>
   1383c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13840:	bf18      	it	ne
   13842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13846:	d1d1      	bne.n	137ec <__aeabi_dmul+0x19c>
   13848:	ea81 0103 	eor.w	r1, r1, r3
   1384c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13850:	f04f 0000 	mov.w	r0, #0
   13854:	bd70      	pop	{r4, r5, r6, pc}
   13856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1385a:	bf06      	itte	eq
   1385c:	4610      	moveq	r0, r2
   1385e:	4619      	moveq	r1, r3
   13860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13864:	d019      	beq.n	1389a <__aeabi_dmul+0x24a>
   13866:	ea94 0f0c 	teq	r4, ip
   1386a:	d102      	bne.n	13872 <__aeabi_dmul+0x222>
   1386c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   13870:	d113      	bne.n	1389a <__aeabi_dmul+0x24a>
   13872:	ea95 0f0c 	teq	r5, ip
   13876:	d105      	bne.n	13884 <__aeabi_dmul+0x234>
   13878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   1387c:	bf1c      	itt	ne
   1387e:	4610      	movne	r0, r2
   13880:	4619      	movne	r1, r3
   13882:	d10a      	bne.n	1389a <__aeabi_dmul+0x24a>
   13884:	ea81 0103 	eor.w	r1, r1, r3
   13888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1388c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   13894:	f04f 0000 	mov.w	r0, #0
   13898:	bd70      	pop	{r4, r5, r6, pc}
   1389a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   1389e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   138a2:	bd70      	pop	{r4, r5, r6, pc}

000138a4 <__aeabi_ddiv>:
   138a4:	b570      	push	{r4, r5, r6, lr}
   138a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   138aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   138ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   138b2:	bf1d      	ittte	ne
   138b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   138b8:	ea94 0f0c 	teqne	r4, ip
   138bc:	ea95 0f0c 	teqne	r5, ip
   138c0:	f000 f8a7 	bleq	13a12 <__aeabi_ddiv+0x16e>
   138c4:	eba4 0405 	sub.w	r4, r4, r5
   138c8:	ea81 0e03 	eor.w	lr, r1, r3
   138cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   138d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   138d4:	f000 8088 	beq.w	139e8 <__aeabi_ddiv+0x144>
   138d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   138dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   138e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   138e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   138e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   138ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   138f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   138f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   138f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   138fc:	429d      	cmp	r5, r3
   138fe:	bf08      	it	eq
   13900:	4296      	cmpeq	r6, r2
   13902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   13906:	f504 7440 	add.w	r4, r4, #768	; 0x300
   1390a:	d202      	bcs.n	13912 <__aeabi_ddiv+0x6e>
   1390c:	085b      	lsrs	r3, r3, #1
   1390e:	ea4f 0232 	mov.w	r2, r2, rrx
   13912:	1ab6      	subs	r6, r6, r2
   13914:	eb65 0503 	sbc.w	r5, r5, r3
   13918:	085b      	lsrs	r3, r3, #1
   1391a:	ea4f 0232 	mov.w	r2, r2, rrx
   1391e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   13922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   13926:	ebb6 0e02 	subs.w	lr, r6, r2
   1392a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1392e:	bf22      	ittt	cs
   13930:	1ab6      	subcs	r6, r6, r2
   13932:	4675      	movcs	r5, lr
   13934:	ea40 000c 	orrcs.w	r0, r0, ip
   13938:	085b      	lsrs	r3, r3, #1
   1393a:	ea4f 0232 	mov.w	r2, r2, rrx
   1393e:	ebb6 0e02 	subs.w	lr, r6, r2
   13942:	eb75 0e03 	sbcs.w	lr, r5, r3
   13946:	bf22      	ittt	cs
   13948:	1ab6      	subcs	r6, r6, r2
   1394a:	4675      	movcs	r5, lr
   1394c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   13950:	085b      	lsrs	r3, r3, #1
   13952:	ea4f 0232 	mov.w	r2, r2, rrx
   13956:	ebb6 0e02 	subs.w	lr, r6, r2
   1395a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1395e:	bf22      	ittt	cs
   13960:	1ab6      	subcs	r6, r6, r2
   13962:	4675      	movcs	r5, lr
   13964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   13968:	085b      	lsrs	r3, r3, #1
   1396a:	ea4f 0232 	mov.w	r2, r2, rrx
   1396e:	ebb6 0e02 	subs.w	lr, r6, r2
   13972:	eb75 0e03 	sbcs.w	lr, r5, r3
   13976:	bf22      	ittt	cs
   13978:	1ab6      	subcs	r6, r6, r2
   1397a:	4675      	movcs	r5, lr
   1397c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   13980:	ea55 0e06 	orrs.w	lr, r5, r6
   13984:	d018      	beq.n	139b8 <__aeabi_ddiv+0x114>
   13986:	ea4f 1505 	mov.w	r5, r5, lsl #4
   1398a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   1398e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   13992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   13996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   1399a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   1399e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   139a2:	d1c0      	bne.n	13926 <__aeabi_ddiv+0x82>
   139a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   139a8:	d10b      	bne.n	139c2 <__aeabi_ddiv+0x11e>
   139aa:	ea41 0100 	orr.w	r1, r1, r0
   139ae:	f04f 0000 	mov.w	r0, #0
   139b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   139b6:	e7b6      	b.n	13926 <__aeabi_ddiv+0x82>
   139b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   139bc:	bf04      	itt	eq
   139be:	4301      	orreq	r1, r0
   139c0:	2000      	moveq	r0, #0
   139c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   139c6:	bf88      	it	hi
   139c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   139cc:	f63f aeaf 	bhi.w	1372e <__aeabi_dmul+0xde>
   139d0:	ebb5 0c03 	subs.w	ip, r5, r3
   139d4:	bf04      	itt	eq
   139d6:	ebb6 0c02 	subseq.w	ip, r6, r2
   139da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   139de:	f150 0000 	adcs.w	r0, r0, #0
   139e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   139e6:	bd70      	pop	{r4, r5, r6, pc}
   139e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   139ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   139f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   139f4:	bfc2      	ittt	gt
   139f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   139fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   139fe:	bd70      	popgt	{r4, r5, r6, pc}
   13a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13a04:	f04f 0e00 	mov.w	lr, #0
   13a08:	3c01      	subs	r4, #1
   13a0a:	e690      	b.n	1372e <__aeabi_dmul+0xde>
   13a0c:	ea45 0e06 	orr.w	lr, r5, r6
   13a10:	e68d      	b.n	1372e <__aeabi_dmul+0xde>
   13a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   13a16:	ea94 0f0c 	teq	r4, ip
   13a1a:	bf08      	it	eq
   13a1c:	ea95 0f0c 	teqeq	r5, ip
   13a20:	f43f af3b 	beq.w	1389a <__aeabi_dmul+0x24a>
   13a24:	ea94 0f0c 	teq	r4, ip
   13a28:	d10a      	bne.n	13a40 <__aeabi_ddiv+0x19c>
   13a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   13a2e:	f47f af34 	bne.w	1389a <__aeabi_dmul+0x24a>
   13a32:	ea95 0f0c 	teq	r5, ip
   13a36:	f47f af25 	bne.w	13884 <__aeabi_dmul+0x234>
   13a3a:	4610      	mov	r0, r2
   13a3c:	4619      	mov	r1, r3
   13a3e:	e72c      	b.n	1389a <__aeabi_dmul+0x24a>
   13a40:	ea95 0f0c 	teq	r5, ip
   13a44:	d106      	bne.n	13a54 <__aeabi_ddiv+0x1b0>
   13a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   13a4a:	f43f aefd 	beq.w	13848 <__aeabi_dmul+0x1f8>
   13a4e:	4610      	mov	r0, r2
   13a50:	4619      	mov	r1, r3
   13a52:	e722      	b.n	1389a <__aeabi_dmul+0x24a>
   13a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13a58:	bf18      	it	ne
   13a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13a5e:	f47f aec5 	bne.w	137ec <__aeabi_dmul+0x19c>
   13a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   13a66:	f47f af0d 	bne.w	13884 <__aeabi_dmul+0x234>
   13a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   13a6e:	f47f aeeb 	bne.w	13848 <__aeabi_dmul+0x1f8>
   13a72:	e712      	b.n	1389a <__aeabi_dmul+0x24a>

00013a74 <__gedf2>:
   13a74:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   13a78:	e006      	b.n	13a88 <__cmpdf2+0x4>
   13a7a:	bf00      	nop

00013a7c <__ledf2>:
   13a7c:	f04f 0c01 	mov.w	ip, #1
   13a80:	e002      	b.n	13a88 <__cmpdf2+0x4>
   13a82:	bf00      	nop

00013a84 <__cmpdf2>:
   13a84:	f04f 0c01 	mov.w	ip, #1
   13a88:	f84d cd04 	str.w	ip, [sp, #-4]!
   13a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   13a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   13a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   13a98:	bf18      	it	ne
   13a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   13a9e:	d01b      	beq.n	13ad8 <__cmpdf2+0x54>
   13aa0:	b001      	add	sp, #4
   13aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   13aa6:	bf0c      	ite	eq
   13aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   13aac:	ea91 0f03 	teqne	r1, r3
   13ab0:	bf02      	ittt	eq
   13ab2:	ea90 0f02 	teqeq	r0, r2
   13ab6:	2000      	moveq	r0, #0
   13ab8:	4770      	bxeq	lr
   13aba:	f110 0f00 	cmn.w	r0, #0
   13abe:	ea91 0f03 	teq	r1, r3
   13ac2:	bf58      	it	pl
   13ac4:	4299      	cmppl	r1, r3
   13ac6:	bf08      	it	eq
   13ac8:	4290      	cmpeq	r0, r2
   13aca:	bf2c      	ite	cs
   13acc:	17d8      	asrcs	r0, r3, #31
   13ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   13ad2:	f040 0001 	orr.w	r0, r0, #1
   13ad6:	4770      	bx	lr
   13ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   13adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   13ae0:	d102      	bne.n	13ae8 <__cmpdf2+0x64>
   13ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   13ae6:	d107      	bne.n	13af8 <__cmpdf2+0x74>
   13ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   13aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   13af0:	d1d6      	bne.n	13aa0 <__cmpdf2+0x1c>
   13af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   13af6:	d0d3      	beq.n	13aa0 <__cmpdf2+0x1c>
   13af8:	f85d 0b04 	ldr.w	r0, [sp], #4
   13afc:	4770      	bx	lr
   13afe:	bf00      	nop

00013b00 <__aeabi_cdrcmple>:
   13b00:	4684      	mov	ip, r0
   13b02:	4610      	mov	r0, r2
   13b04:	4662      	mov	r2, ip
   13b06:	468c      	mov	ip, r1
   13b08:	4619      	mov	r1, r3
   13b0a:	4663      	mov	r3, ip
   13b0c:	e000      	b.n	13b10 <__aeabi_cdcmpeq>
   13b0e:	bf00      	nop

00013b10 <__aeabi_cdcmpeq>:
   13b10:	b501      	push	{r0, lr}
   13b12:	f7ff ffb7 	bl	13a84 <__cmpdf2>
   13b16:	2800      	cmp	r0, #0
   13b18:	bf48      	it	mi
   13b1a:	f110 0f00 	cmnmi.w	r0, #0
   13b1e:	bd01      	pop	{r0, pc}

00013b20 <__aeabi_dcmpeq>:
   13b20:	f84d ed08 	str.w	lr, [sp, #-8]!
   13b24:	f7ff fff4 	bl	13b10 <__aeabi_cdcmpeq>
   13b28:	bf0c      	ite	eq
   13b2a:	2001      	moveq	r0, #1
   13b2c:	2000      	movne	r0, #0
   13b2e:	f85d fb08 	ldr.w	pc, [sp], #8
   13b32:	bf00      	nop

00013b34 <__aeabi_dcmplt>:
   13b34:	f84d ed08 	str.w	lr, [sp, #-8]!
   13b38:	f7ff ffea 	bl	13b10 <__aeabi_cdcmpeq>
   13b3c:	bf34      	ite	cc
   13b3e:	2001      	movcc	r0, #1
   13b40:	2000      	movcs	r0, #0
   13b42:	f85d fb08 	ldr.w	pc, [sp], #8
   13b46:	bf00      	nop

00013b48 <__aeabi_dcmple>:
   13b48:	f84d ed08 	str.w	lr, [sp, #-8]!
   13b4c:	f7ff ffe0 	bl	13b10 <__aeabi_cdcmpeq>
   13b50:	bf94      	ite	ls
   13b52:	2001      	movls	r0, #1
   13b54:	2000      	movhi	r0, #0
   13b56:	f85d fb08 	ldr.w	pc, [sp], #8
   13b5a:	bf00      	nop

00013b5c <__aeabi_dcmpge>:
   13b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   13b60:	f7ff ffce 	bl	13b00 <__aeabi_cdrcmple>
   13b64:	bf94      	ite	ls
   13b66:	2001      	movls	r0, #1
   13b68:	2000      	movhi	r0, #0
   13b6a:	f85d fb08 	ldr.w	pc, [sp], #8
   13b6e:	bf00      	nop

00013b70 <__aeabi_dcmpgt>:
   13b70:	f84d ed08 	str.w	lr, [sp, #-8]!
   13b74:	f7ff ffc4 	bl	13b00 <__aeabi_cdrcmple>
   13b78:	bf34      	ite	cc
   13b7a:	2001      	movcc	r0, #1
   13b7c:	2000      	movcs	r0, #0
   13b7e:	f85d fb08 	ldr.w	pc, [sp], #8
   13b82:	bf00      	nop

00013b84 <__aeabi_dcmpun>:
   13b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   13b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   13b8c:	d102      	bne.n	13b94 <__aeabi_dcmpun+0x10>
   13b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   13b92:	d10a      	bne.n	13baa <__aeabi_dcmpun+0x26>
   13b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   13b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   13b9c:	d102      	bne.n	13ba4 <__aeabi_dcmpun+0x20>
   13b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   13ba2:	d102      	bne.n	13baa <__aeabi_dcmpun+0x26>
   13ba4:	f04f 0000 	mov.w	r0, #0
   13ba8:	4770      	bx	lr
   13baa:	f04f 0001 	mov.w	r0, #1
   13bae:	4770      	bx	lr

00013bb0 <__aeabi_d2iz>:
   13bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   13bb8:	d215      	bcs.n	13be6 <__aeabi_d2iz+0x36>
   13bba:	d511      	bpl.n	13be0 <__aeabi_d2iz+0x30>
   13bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   13bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   13bc4:	d912      	bls.n	13bec <__aeabi_d2iz+0x3c>
   13bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   13bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13bd6:	fa23 f002 	lsr.w	r0, r3, r2
   13bda:	bf18      	it	ne
   13bdc:	4240      	negne	r0, r0
   13bde:	4770      	bx	lr
   13be0:	f04f 0000 	mov.w	r0, #0
   13be4:	4770      	bx	lr
   13be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   13bea:	d105      	bne.n	13bf8 <__aeabi_d2iz+0x48>
   13bec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   13bf0:	bf08      	it	eq
   13bf2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   13bf6:	4770      	bx	lr
   13bf8:	f04f 0000 	mov.w	r0, #0
   13bfc:	4770      	bx	lr
   13bfe:	bf00      	nop

00013c00 <__aeabi_d2f>:
   13c00:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13c04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   13c08:	bf24      	itt	cs
   13c0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   13c0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   13c12:	d90d      	bls.n	13c30 <__aeabi_d2f+0x30>
   13c14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13c18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   13c1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   13c20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   13c24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   13c28:	bf08      	it	eq
   13c2a:	f020 0001 	biceq.w	r0, r0, #1
   13c2e:	4770      	bx	lr
   13c30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   13c34:	d121      	bne.n	13c7a <__aeabi_d2f+0x7a>
   13c36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   13c3a:	bfbc      	itt	lt
   13c3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   13c40:	4770      	bxlt	lr
   13c42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13c46:	ea4f 5252 	mov.w	r2, r2, lsr #21
   13c4a:	f1c2 0218 	rsb	r2, r2, #24
   13c4e:	f1c2 0c20 	rsb	ip, r2, #32
   13c52:	fa10 f30c 	lsls.w	r3, r0, ip
   13c56:	fa20 f002 	lsr.w	r0, r0, r2
   13c5a:	bf18      	it	ne
   13c5c:	f040 0001 	orrne.w	r0, r0, #1
   13c60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13c64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   13c68:	fa03 fc0c 	lsl.w	ip, r3, ip
   13c6c:	ea40 000c 	orr.w	r0, r0, ip
   13c70:	fa23 f302 	lsr.w	r3, r3, r2
   13c74:	ea4f 0343 	mov.w	r3, r3, lsl #1
   13c78:	e7cc      	b.n	13c14 <__aeabi_d2f+0x14>
   13c7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   13c7e:	d107      	bne.n	13c90 <__aeabi_d2f+0x90>
   13c80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   13c84:	bf1e      	ittt	ne
   13c86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   13c8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   13c8e:	4770      	bxne	lr
   13c90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   13c94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   13c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13c9c:	4770      	bx	lr
   13c9e:	bf00      	nop

00013ca0 <__aeabi_frsub>:
   13ca0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   13ca4:	e002      	b.n	13cac <__addsf3>
   13ca6:	bf00      	nop

00013ca8 <__aeabi_fsub>:
   13ca8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00013cac <__addsf3>:
   13cac:	0042      	lsls	r2, r0, #1
   13cae:	bf1f      	itttt	ne
   13cb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   13cb4:	ea92 0f03 	teqne	r2, r3
   13cb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   13cbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   13cc0:	d06a      	beq.n	13d98 <__addsf3+0xec>
   13cc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
   13cc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   13cca:	bfc1      	itttt	gt
   13ccc:	18d2      	addgt	r2, r2, r3
   13cce:	4041      	eorgt	r1, r0
   13cd0:	4048      	eorgt	r0, r1
   13cd2:	4041      	eorgt	r1, r0
   13cd4:	bfb8      	it	lt
   13cd6:	425b      	neglt	r3, r3
   13cd8:	2b19      	cmp	r3, #25
   13cda:	bf88      	it	hi
   13cdc:	4770      	bxhi	lr
   13cde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   13ce2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13ce6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13cea:	bf18      	it	ne
   13cec:	4240      	negne	r0, r0
   13cee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13cf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   13cf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   13cfa:	bf18      	it	ne
   13cfc:	4249      	negne	r1, r1
   13cfe:	ea92 0f03 	teq	r2, r3
   13d02:	d03f      	beq.n	13d84 <__addsf3+0xd8>
   13d04:	f1a2 0201 	sub.w	r2, r2, #1
   13d08:	fa41 fc03 	asr.w	ip, r1, r3
   13d0c:	eb10 000c 	adds.w	r0, r0, ip
   13d10:	f1c3 0320 	rsb	r3, r3, #32
   13d14:	fa01 f103 	lsl.w	r1, r1, r3
   13d18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13d1c:	d502      	bpl.n	13d24 <__addsf3+0x78>
   13d1e:	4249      	negs	r1, r1
   13d20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   13d24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13d28:	d313      	bcc.n	13d52 <__addsf3+0xa6>
   13d2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   13d2e:	d306      	bcc.n	13d3e <__addsf3+0x92>
   13d30:	0840      	lsrs	r0, r0, #1
   13d32:	ea4f 0131 	mov.w	r1, r1, rrx
   13d36:	f102 0201 	add.w	r2, r2, #1
   13d3a:	2afe      	cmp	r2, #254	; 0xfe
   13d3c:	d251      	bcs.n	13de2 <__addsf3+0x136>
   13d3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   13d42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13d46:	bf08      	it	eq
   13d48:	f020 0001 	biceq.w	r0, r0, #1
   13d4c:	ea40 0003 	orr.w	r0, r0, r3
   13d50:	4770      	bx	lr
   13d52:	0049      	lsls	r1, r1, #1
   13d54:	eb40 0000 	adc.w	r0, r0, r0
   13d58:	3a01      	subs	r2, #1
   13d5a:	bf28      	it	cs
   13d5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   13d60:	d2ed      	bcs.n	13d3e <__addsf3+0x92>
   13d62:	fab0 fc80 	clz	ip, r0
   13d66:	f1ac 0c08 	sub.w	ip, ip, #8
   13d6a:	ebb2 020c 	subs.w	r2, r2, ip
   13d6e:	fa00 f00c 	lsl.w	r0, r0, ip
   13d72:	bfaa      	itet	ge
   13d74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   13d78:	4252      	neglt	r2, r2
   13d7a:	4318      	orrge	r0, r3
   13d7c:	bfbc      	itt	lt
   13d7e:	40d0      	lsrlt	r0, r2
   13d80:	4318      	orrlt	r0, r3
   13d82:	4770      	bx	lr
   13d84:	f092 0f00 	teq	r2, #0
   13d88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   13d8c:	bf06      	itte	eq
   13d8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   13d92:	3201      	addeq	r2, #1
   13d94:	3b01      	subne	r3, #1
   13d96:	e7b5      	b.n	13d04 <__addsf3+0x58>
   13d98:	ea4f 0341 	mov.w	r3, r1, lsl #1
   13d9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   13da0:	bf18      	it	ne
   13da2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   13da6:	d021      	beq.n	13dec <__addsf3+0x140>
   13da8:	ea92 0f03 	teq	r2, r3
   13dac:	d004      	beq.n	13db8 <__addsf3+0x10c>
   13dae:	f092 0f00 	teq	r2, #0
   13db2:	bf08      	it	eq
   13db4:	4608      	moveq	r0, r1
   13db6:	4770      	bx	lr
   13db8:	ea90 0f01 	teq	r0, r1
   13dbc:	bf1c      	itt	ne
   13dbe:	2000      	movne	r0, #0
   13dc0:	4770      	bxne	lr
   13dc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   13dc6:	d104      	bne.n	13dd2 <__addsf3+0x126>
   13dc8:	0040      	lsls	r0, r0, #1
   13dca:	bf28      	it	cs
   13dcc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   13dd0:	4770      	bx	lr
   13dd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   13dd6:	bf3c      	itt	cc
   13dd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   13ddc:	4770      	bxcc	lr
   13dde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   13de2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   13de6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13dea:	4770      	bx	lr
   13dec:	ea7f 6222 	mvns.w	r2, r2, asr #24
   13df0:	bf16      	itet	ne
   13df2:	4608      	movne	r0, r1
   13df4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   13df8:	4601      	movne	r1, r0
   13dfa:	0242      	lsls	r2, r0, #9
   13dfc:	bf06      	itte	eq
   13dfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   13e02:	ea90 0f01 	teqeq	r0, r1
   13e06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   13e0a:	4770      	bx	lr

00013e0c <__aeabi_ui2f>:
   13e0c:	f04f 0300 	mov.w	r3, #0
   13e10:	e004      	b.n	13e1c <__aeabi_i2f+0x8>
   13e12:	bf00      	nop

00013e14 <__aeabi_i2f>:
   13e14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   13e18:	bf48      	it	mi
   13e1a:	4240      	negmi	r0, r0
   13e1c:	ea5f 0c00 	movs.w	ip, r0
   13e20:	bf08      	it	eq
   13e22:	4770      	bxeq	lr
   13e24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   13e28:	4601      	mov	r1, r0
   13e2a:	f04f 0000 	mov.w	r0, #0
   13e2e:	e01c      	b.n	13e6a <__aeabi_l2f+0x2a>

00013e30 <__aeabi_ul2f>:
   13e30:	ea50 0201 	orrs.w	r2, r0, r1
   13e34:	bf08      	it	eq
   13e36:	4770      	bxeq	lr
   13e38:	f04f 0300 	mov.w	r3, #0
   13e3c:	e00a      	b.n	13e54 <__aeabi_l2f+0x14>
   13e3e:	bf00      	nop

00013e40 <__aeabi_l2f>:
   13e40:	ea50 0201 	orrs.w	r2, r0, r1
   13e44:	bf08      	it	eq
   13e46:	4770      	bxeq	lr
   13e48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   13e4c:	d502      	bpl.n	13e54 <__aeabi_l2f+0x14>
   13e4e:	4240      	negs	r0, r0
   13e50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   13e54:	ea5f 0c01 	movs.w	ip, r1
   13e58:	bf02      	ittt	eq
   13e5a:	4684      	moveq	ip, r0
   13e5c:	4601      	moveq	r1, r0
   13e5e:	2000      	moveq	r0, #0
   13e60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   13e64:	bf08      	it	eq
   13e66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   13e6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   13e6e:	fabc f28c 	clz	r2, ip
   13e72:	3a08      	subs	r2, #8
   13e74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   13e78:	db10      	blt.n	13e9c <__aeabi_l2f+0x5c>
   13e7a:	fa01 fc02 	lsl.w	ip, r1, r2
   13e7e:	4463      	add	r3, ip
   13e80:	fa00 fc02 	lsl.w	ip, r0, r2
   13e84:	f1c2 0220 	rsb	r2, r2, #32
   13e88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   13e8c:	fa20 f202 	lsr.w	r2, r0, r2
   13e90:	eb43 0002 	adc.w	r0, r3, r2
   13e94:	bf08      	it	eq
   13e96:	f020 0001 	biceq.w	r0, r0, #1
   13e9a:	4770      	bx	lr
   13e9c:	f102 0220 	add.w	r2, r2, #32
   13ea0:	fa01 fc02 	lsl.w	ip, r1, r2
   13ea4:	f1c2 0220 	rsb	r2, r2, #32
   13ea8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   13eac:	fa21 f202 	lsr.w	r2, r1, r2
   13eb0:	eb43 0002 	adc.w	r0, r3, r2
   13eb4:	bf08      	it	eq
   13eb6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   13eba:	4770      	bx	lr

00013ebc <__aeabi_fmul>:
   13ebc:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13ec0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   13ec4:	bf1e      	ittt	ne
   13ec6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   13eca:	ea92 0f0c 	teqne	r2, ip
   13ece:	ea93 0f0c 	teqne	r3, ip
   13ed2:	d06f      	beq.n	13fb4 <__aeabi_fmul+0xf8>
   13ed4:	441a      	add	r2, r3
   13ed6:	ea80 0c01 	eor.w	ip, r0, r1
   13eda:	0240      	lsls	r0, r0, #9
   13edc:	bf18      	it	ne
   13ede:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   13ee2:	d01e      	beq.n	13f22 <__aeabi_fmul+0x66>
   13ee4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   13ee8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   13eec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   13ef0:	fba0 3101 	umull	r3, r1, r0, r1
   13ef4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   13ef8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   13efc:	bf3e      	ittt	cc
   13efe:	0049      	lslcc	r1, r1, #1
   13f00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   13f04:	005b      	lslcc	r3, r3, #1
   13f06:	ea40 0001 	orr.w	r0, r0, r1
   13f0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   13f0e:	2afd      	cmp	r2, #253	; 0xfd
   13f10:	d81d      	bhi.n	13f4e <__aeabi_fmul+0x92>
   13f12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   13f16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   13f1a:	bf08      	it	eq
   13f1c:	f020 0001 	biceq.w	r0, r0, #1
   13f20:	4770      	bx	lr
   13f22:	f090 0f00 	teq	r0, #0
   13f26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   13f2a:	bf08      	it	eq
   13f2c:	0249      	lsleq	r1, r1, #9
   13f2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   13f32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   13f36:	3a7f      	subs	r2, #127	; 0x7f
   13f38:	bfc2      	ittt	gt
   13f3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   13f3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   13f42:	4770      	bxgt	lr
   13f44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   13f48:	f04f 0300 	mov.w	r3, #0
   13f4c:	3a01      	subs	r2, #1
   13f4e:	dc5d      	bgt.n	1400c <__aeabi_fmul+0x150>
   13f50:	f112 0f19 	cmn.w	r2, #25
   13f54:	bfdc      	itt	le
   13f56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   13f5a:	4770      	bxle	lr
   13f5c:	f1c2 0200 	rsb	r2, r2, #0
   13f60:	0041      	lsls	r1, r0, #1
   13f62:	fa21 f102 	lsr.w	r1, r1, r2
   13f66:	f1c2 0220 	rsb	r2, r2, #32
   13f6a:	fa00 fc02 	lsl.w	ip, r0, r2
   13f6e:	ea5f 0031 	movs.w	r0, r1, rrx
   13f72:	f140 0000 	adc.w	r0, r0, #0
   13f76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   13f7a:	bf08      	it	eq
   13f7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   13f80:	4770      	bx	lr
   13f82:	f092 0f00 	teq	r2, #0
   13f86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   13f8a:	bf02      	ittt	eq
   13f8c:	0040      	lsleq	r0, r0, #1
   13f8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   13f92:	3a01      	subeq	r2, #1
   13f94:	d0f9      	beq.n	13f8a <__aeabi_fmul+0xce>
   13f96:	ea40 000c 	orr.w	r0, r0, ip
   13f9a:	f093 0f00 	teq	r3, #0
   13f9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   13fa2:	bf02      	ittt	eq
   13fa4:	0049      	lsleq	r1, r1, #1
   13fa6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   13faa:	3b01      	subeq	r3, #1
   13fac:	d0f9      	beq.n	13fa2 <__aeabi_fmul+0xe6>
   13fae:	ea41 010c 	orr.w	r1, r1, ip
   13fb2:	e78f      	b.n	13ed4 <__aeabi_fmul+0x18>
   13fb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   13fb8:	ea92 0f0c 	teq	r2, ip
   13fbc:	bf18      	it	ne
   13fbe:	ea93 0f0c 	teqne	r3, ip
   13fc2:	d00a      	beq.n	13fda <__aeabi_fmul+0x11e>
   13fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   13fc8:	bf18      	it	ne
   13fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   13fce:	d1d8      	bne.n	13f82 <__aeabi_fmul+0xc6>
   13fd0:	ea80 0001 	eor.w	r0, r0, r1
   13fd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   13fd8:	4770      	bx	lr
   13fda:	f090 0f00 	teq	r0, #0
   13fde:	bf17      	itett	ne
   13fe0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   13fe4:	4608      	moveq	r0, r1
   13fe6:	f091 0f00 	teqne	r1, #0
   13fea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   13fee:	d014      	beq.n	1401a <__aeabi_fmul+0x15e>
   13ff0:	ea92 0f0c 	teq	r2, ip
   13ff4:	d101      	bne.n	13ffa <__aeabi_fmul+0x13e>
   13ff6:	0242      	lsls	r2, r0, #9
   13ff8:	d10f      	bne.n	1401a <__aeabi_fmul+0x15e>
   13ffa:	ea93 0f0c 	teq	r3, ip
   13ffe:	d103      	bne.n	14008 <__aeabi_fmul+0x14c>
   14000:	024b      	lsls	r3, r1, #9
   14002:	bf18      	it	ne
   14004:	4608      	movne	r0, r1
   14006:	d108      	bne.n	1401a <__aeabi_fmul+0x15e>
   14008:	ea80 0001 	eor.w	r0, r0, r1
   1400c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   14010:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   14014:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   14018:	4770      	bx	lr
   1401a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   1401e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   14022:	4770      	bx	lr

00014024 <__aeabi_fdiv>:
   14024:	f04f 0cff 	mov.w	ip, #255	; 0xff
   14028:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   1402c:	bf1e      	ittt	ne
   1402e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   14032:	ea92 0f0c 	teqne	r2, ip
   14036:	ea93 0f0c 	teqne	r3, ip
   1403a:	d069      	beq.n	14110 <__aeabi_fdiv+0xec>
   1403c:	eba2 0203 	sub.w	r2, r2, r3
   14040:	ea80 0c01 	eor.w	ip, r0, r1
   14044:	0249      	lsls	r1, r1, #9
   14046:	ea4f 2040 	mov.w	r0, r0, lsl #9
   1404a:	d037      	beq.n	140bc <__aeabi_fdiv+0x98>
   1404c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   14050:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   14054:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   14058:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   1405c:	428b      	cmp	r3, r1
   1405e:	bf38      	it	cc
   14060:	005b      	lslcc	r3, r3, #1
   14062:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   14066:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   1406a:	428b      	cmp	r3, r1
   1406c:	bf24      	itt	cs
   1406e:	1a5b      	subcs	r3, r3, r1
   14070:	ea40 000c 	orrcs.w	r0, r0, ip
   14074:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   14078:	bf24      	itt	cs
   1407a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   1407e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   14082:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   14086:	bf24      	itt	cs
   14088:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   1408c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   14090:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   14094:	bf24      	itt	cs
   14096:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   1409a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   1409e:	011b      	lsls	r3, r3, #4
   140a0:	bf18      	it	ne
   140a2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   140a6:	d1e0      	bne.n	1406a <__aeabi_fdiv+0x46>
   140a8:	2afd      	cmp	r2, #253	; 0xfd
   140aa:	f63f af50 	bhi.w	13f4e <__aeabi_fmul+0x92>
   140ae:	428b      	cmp	r3, r1
   140b0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   140b4:	bf08      	it	eq
   140b6:	f020 0001 	biceq.w	r0, r0, #1
   140ba:	4770      	bx	lr
   140bc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   140c0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   140c4:	327f      	adds	r2, #127	; 0x7f
   140c6:	bfc2      	ittt	gt
   140c8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   140cc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   140d0:	4770      	bxgt	lr
   140d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   140d6:	f04f 0300 	mov.w	r3, #0
   140da:	3a01      	subs	r2, #1
   140dc:	e737      	b.n	13f4e <__aeabi_fmul+0x92>
   140de:	f092 0f00 	teq	r2, #0
   140e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   140e6:	bf02      	ittt	eq
   140e8:	0040      	lsleq	r0, r0, #1
   140ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   140ee:	3a01      	subeq	r2, #1
   140f0:	d0f9      	beq.n	140e6 <__aeabi_fdiv+0xc2>
   140f2:	ea40 000c 	orr.w	r0, r0, ip
   140f6:	f093 0f00 	teq	r3, #0
   140fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   140fe:	bf02      	ittt	eq
   14100:	0049      	lsleq	r1, r1, #1
   14102:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   14106:	3b01      	subeq	r3, #1
   14108:	d0f9      	beq.n	140fe <__aeabi_fdiv+0xda>
   1410a:	ea41 010c 	orr.w	r1, r1, ip
   1410e:	e795      	b.n	1403c <__aeabi_fdiv+0x18>
   14110:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   14114:	ea92 0f0c 	teq	r2, ip
   14118:	d108      	bne.n	1412c <__aeabi_fdiv+0x108>
   1411a:	0242      	lsls	r2, r0, #9
   1411c:	f47f af7d 	bne.w	1401a <__aeabi_fmul+0x15e>
   14120:	ea93 0f0c 	teq	r3, ip
   14124:	f47f af70 	bne.w	14008 <__aeabi_fmul+0x14c>
   14128:	4608      	mov	r0, r1
   1412a:	e776      	b.n	1401a <__aeabi_fmul+0x15e>
   1412c:	ea93 0f0c 	teq	r3, ip
   14130:	d104      	bne.n	1413c <__aeabi_fdiv+0x118>
   14132:	024b      	lsls	r3, r1, #9
   14134:	f43f af4c 	beq.w	13fd0 <__aeabi_fmul+0x114>
   14138:	4608      	mov	r0, r1
   1413a:	e76e      	b.n	1401a <__aeabi_fmul+0x15e>
   1413c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   14140:	bf18      	it	ne
   14142:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   14146:	d1ca      	bne.n	140de <__aeabi_fdiv+0xba>
   14148:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   1414c:	f47f af5c 	bne.w	14008 <__aeabi_fmul+0x14c>
   14150:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   14154:	f47f af3c 	bne.w	13fd0 <__aeabi_fmul+0x114>
   14158:	e75f      	b.n	1401a <__aeabi_fmul+0x15e>
   1415a:	bf00      	nop

0001415c <__gesf2>:
   1415c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   14160:	e006      	b.n	14170 <__cmpsf2+0x4>
   14162:	bf00      	nop

00014164 <__lesf2>:
   14164:	f04f 0c01 	mov.w	ip, #1
   14168:	e002      	b.n	14170 <__cmpsf2+0x4>
   1416a:	bf00      	nop

0001416c <__cmpsf2>:
   1416c:	f04f 0c01 	mov.w	ip, #1
   14170:	f84d cd04 	str.w	ip, [sp, #-4]!
   14174:	ea4f 0240 	mov.w	r2, r0, lsl #1
   14178:	ea4f 0341 	mov.w	r3, r1, lsl #1
   1417c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   14180:	bf18      	it	ne
   14182:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   14186:	d011      	beq.n	141ac <__cmpsf2+0x40>
   14188:	b001      	add	sp, #4
   1418a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   1418e:	bf18      	it	ne
   14190:	ea90 0f01 	teqne	r0, r1
   14194:	bf58      	it	pl
   14196:	ebb2 0003 	subspl.w	r0, r2, r3
   1419a:	bf88      	it	hi
   1419c:	17c8      	asrhi	r0, r1, #31
   1419e:	bf38      	it	cc
   141a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   141a4:	bf18      	it	ne
   141a6:	f040 0001 	orrne.w	r0, r0, #1
   141aa:	4770      	bx	lr
   141ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   141b0:	d102      	bne.n	141b8 <__cmpsf2+0x4c>
   141b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   141b6:	d105      	bne.n	141c4 <__cmpsf2+0x58>
   141b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   141bc:	d1e4      	bne.n	14188 <__cmpsf2+0x1c>
   141be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   141c2:	d0e1      	beq.n	14188 <__cmpsf2+0x1c>
   141c4:	f85d 0b04 	ldr.w	r0, [sp], #4
   141c8:	4770      	bx	lr
   141ca:	bf00      	nop

000141cc <__aeabi_cfrcmple>:
   141cc:	4684      	mov	ip, r0
   141ce:	4608      	mov	r0, r1
   141d0:	4661      	mov	r1, ip
   141d2:	e7ff      	b.n	141d4 <__aeabi_cfcmpeq>

000141d4 <__aeabi_cfcmpeq>:
   141d4:	b50f      	push	{r0, r1, r2, r3, lr}
   141d6:	f7ff ffc9 	bl	1416c <__cmpsf2>
   141da:	2800      	cmp	r0, #0
   141dc:	bf48      	it	mi
   141de:	f110 0f00 	cmnmi.w	r0, #0
   141e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

000141e4 <__aeabi_fcmpeq>:
   141e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   141e8:	f7ff fff4 	bl	141d4 <__aeabi_cfcmpeq>
   141ec:	bf0c      	ite	eq
   141ee:	2001      	moveq	r0, #1
   141f0:	2000      	movne	r0, #0
   141f2:	f85d fb08 	ldr.w	pc, [sp], #8
   141f6:	bf00      	nop

000141f8 <__aeabi_fcmplt>:
   141f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   141fc:	f7ff ffea 	bl	141d4 <__aeabi_cfcmpeq>
   14200:	bf34      	ite	cc
   14202:	2001      	movcc	r0, #1
   14204:	2000      	movcs	r0, #0
   14206:	f85d fb08 	ldr.w	pc, [sp], #8
   1420a:	bf00      	nop

0001420c <__aeabi_fcmple>:
   1420c:	f84d ed08 	str.w	lr, [sp, #-8]!
   14210:	f7ff ffe0 	bl	141d4 <__aeabi_cfcmpeq>
   14214:	bf94      	ite	ls
   14216:	2001      	movls	r0, #1
   14218:	2000      	movhi	r0, #0
   1421a:	f85d fb08 	ldr.w	pc, [sp], #8
   1421e:	bf00      	nop

00014220 <__aeabi_fcmpge>:
   14220:	f84d ed08 	str.w	lr, [sp, #-8]!
   14224:	f7ff ffd2 	bl	141cc <__aeabi_cfrcmple>
   14228:	bf94      	ite	ls
   1422a:	2001      	movls	r0, #1
   1422c:	2000      	movhi	r0, #0
   1422e:	f85d fb08 	ldr.w	pc, [sp], #8
   14232:	bf00      	nop

00014234 <__aeabi_fcmpgt>:
   14234:	f84d ed08 	str.w	lr, [sp, #-8]!
   14238:	f7ff ffc8 	bl	141cc <__aeabi_cfrcmple>
   1423c:	bf34      	ite	cc
   1423e:	2001      	movcc	r0, #1
   14240:	2000      	movcs	r0, #0
   14242:	f85d fb08 	ldr.w	pc, [sp], #8
   14246:	bf00      	nop

00014248 <__aeabi_f2iz>:
   14248:	ea4f 0240 	mov.w	r2, r0, lsl #1
   1424c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   14250:	d30f      	bcc.n	14272 <__aeabi_f2iz+0x2a>
   14252:	f04f 039e 	mov.w	r3, #158	; 0x9e
   14256:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   1425a:	d90d      	bls.n	14278 <__aeabi_f2iz+0x30>
   1425c:	ea4f 2300 	mov.w	r3, r0, lsl #8
   14260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   14264:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   14268:	fa23 f002 	lsr.w	r0, r3, r2
   1426c:	bf18      	it	ne
   1426e:	4240      	negne	r0, r0
   14270:	4770      	bx	lr
   14272:	f04f 0000 	mov.w	r0, #0
   14276:	4770      	bx	lr
   14278:	f112 0f61 	cmn.w	r2, #97	; 0x61
   1427c:	d101      	bne.n	14282 <__aeabi_f2iz+0x3a>
   1427e:	0242      	lsls	r2, r0, #9
   14280:	d105      	bne.n	1428e <__aeabi_f2iz+0x46>
   14282:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   14286:	bf08      	it	eq
   14288:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   1428c:	4770      	bx	lr
   1428e:	f04f 0000 	mov.w	r0, #0
   14292:	4770      	bx	lr

00014294 <__aeabi_f2uiz>:
   14294:	0042      	lsls	r2, r0, #1
   14296:	d20e      	bcs.n	142b6 <__aeabi_f2uiz+0x22>
   14298:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   1429c:	d30b      	bcc.n	142b6 <__aeabi_f2uiz+0x22>
   1429e:	f04f 039e 	mov.w	r3, #158	; 0x9e
   142a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   142a6:	d409      	bmi.n	142bc <__aeabi_f2uiz+0x28>
   142a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   142ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   142b0:	fa23 f002 	lsr.w	r0, r3, r2
   142b4:	4770      	bx	lr
   142b6:	f04f 0000 	mov.w	r0, #0
   142ba:	4770      	bx	lr
   142bc:	f112 0f61 	cmn.w	r2, #97	; 0x61
   142c0:	d101      	bne.n	142c6 <__aeabi_f2uiz+0x32>
   142c2:	0242      	lsls	r2, r0, #9
   142c4:	d102      	bne.n	142cc <__aeabi_f2uiz+0x38>
   142c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   142ca:	4770      	bx	lr
   142cc:	f04f 0000 	mov.w	r0, #0
   142d0:	4770      	bx	lr
   142d2:	bf00      	nop

000142d4 <__aeabi_d2lz>:
   142d4:	b538      	push	{r3, r4, r5, lr}
   142d6:	2200      	movs	r2, #0
   142d8:	2300      	movs	r3, #0
   142da:	4604      	mov	r4, r0
   142dc:	460d      	mov	r5, r1
   142de:	f7ff fc29 	bl	13b34 <__aeabi_dcmplt>
   142e2:	b928      	cbnz	r0, 142f0 <__aeabi_d2lz+0x1c>
   142e4:	4620      	mov	r0, r4
   142e6:	4629      	mov	r1, r5
   142e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   142ec:	f000 b80a 	b.w	14304 <__aeabi_d2ulz>
   142f0:	4620      	mov	r0, r4
   142f2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   142f6:	f000 f805 	bl	14304 <__aeabi_d2ulz>
   142fa:	4240      	negs	r0, r0
   142fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14300:	bd38      	pop	{r3, r4, r5, pc}
   14302:	bf00      	nop

00014304 <__aeabi_d2ulz>:
   14304:	b5d0      	push	{r4, r6, r7, lr}
   14306:	2200      	movs	r2, #0
   14308:	4b0b      	ldr	r3, [pc, #44]	; (14338 <__aeabi_d2ulz+0x34>)
   1430a:	4606      	mov	r6, r0
   1430c:	460f      	mov	r7, r1
   1430e:	f7ff f99f 	bl	13650 <__aeabi_dmul>
   14312:	f000 ffd9 	bl	152c8 <__aeabi_d2uiz>
   14316:	4604      	mov	r4, r0
   14318:	f7ff f920 	bl	1355c <__aeabi_ui2d>
   1431c:	2200      	movs	r2, #0
   1431e:	4b07      	ldr	r3, [pc, #28]	; (1433c <__aeabi_d2ulz+0x38>)
   14320:	f7ff f996 	bl	13650 <__aeabi_dmul>
   14324:	4602      	mov	r2, r0
   14326:	460b      	mov	r3, r1
   14328:	4630      	mov	r0, r6
   1432a:	4639      	mov	r1, r7
   1432c:	f7fe ffd8 	bl	132e0 <__aeabi_dsub>
   14330:	f000 ffca 	bl	152c8 <__aeabi_d2uiz>
   14334:	4621      	mov	r1, r4
   14336:	bdd0      	pop	{r4, r6, r7, pc}
   14338:	3df00000 	.word	0x3df00000
   1433c:	41f00000 	.word	0x41f00000

00014340 <selfrel_offset31>:
   14340:	6803      	ldr	r3, [r0, #0]
   14342:	005a      	lsls	r2, r3, #1
   14344:	bf4c      	ite	mi
   14346:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   1434a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   1434e:	4418      	add	r0, r3
   14350:	4770      	bx	lr
   14352:	bf00      	nop

00014354 <search_EIT_table>:
   14354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14358:	b339      	cbz	r1, 143aa <search_EIT_table+0x56>
   1435a:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
   1435e:	4606      	mov	r6, r0
   14360:	4617      	mov	r7, r2
   14362:	f04f 0900 	mov.w	r9, #0
   14366:	4645      	mov	r5, r8
   14368:	eb19 0105 	adds.w	r1, r9, r5
   1436c:	bf48      	it	mi
   1436e:	3101      	addmi	r1, #1
   14370:	1049      	asrs	r1, r1, #1
   14372:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
   14376:	00cc      	lsls	r4, r1, #3
   14378:	4650      	mov	r0, sl
   1437a:	f7ff ffe1 	bl	14340 <selfrel_offset31>
   1437e:	3408      	adds	r4, #8
   14380:	4588      	cmp	r8, r1
   14382:	4603      	mov	r3, r0
   14384:	eb06 0004 	add.w	r0, r6, r4
   14388:	d009      	beq.n	1439e <search_EIT_table+0x4a>
   1438a:	42bb      	cmp	r3, r7
   1438c:	d809      	bhi.n	143a2 <search_EIT_table+0x4e>
   1438e:	f7ff ffd7 	bl	14340 <selfrel_offset31>
   14392:	3801      	subs	r0, #1
   14394:	f101 0901 	add.w	r9, r1, #1
   14398:	42b8      	cmp	r0, r7
   1439a:	d3e5      	bcc.n	14368 <search_EIT_table+0x14>
   1439c:	e007      	b.n	143ae <search_EIT_table+0x5a>
   1439e:	42bb      	cmp	r3, r7
   143a0:	d905      	bls.n	143ae <search_EIT_table+0x5a>
   143a2:	4589      	cmp	r9, r1
   143a4:	f101 35ff 	add.w	r5, r1, #4294967295	; 0xffffffff
   143a8:	d1de      	bne.n	14368 <search_EIT_table+0x14>
   143aa:	f04f 0a00 	mov.w	sl, #0
   143ae:	4650      	mov	r0, sl
   143b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000143b4 <__gnu_unwind_get_pr_addr>:
   143b4:	2801      	cmp	r0, #1
   143b6:	d006      	beq.n	143c6 <__gnu_unwind_get_pr_addr+0x12>
   143b8:	2802      	cmp	r0, #2
   143ba:	d006      	beq.n	143ca <__gnu_unwind_get_pr_addr+0x16>
   143bc:	2800      	cmp	r0, #0
   143be:	4804      	ldr	r0, [pc, #16]	; (143d0 <__gnu_unwind_get_pr_addr+0x1c>)
   143c0:	bf18      	it	ne
   143c2:	2000      	movne	r0, #0
   143c4:	4770      	bx	lr
   143c6:	4803      	ldr	r0, [pc, #12]	; (143d4 <__gnu_unwind_get_pr_addr+0x20>)
   143c8:	4770      	bx	lr
   143ca:	4803      	ldr	r0, [pc, #12]	; (143d8 <__gnu_unwind_get_pr_addr+0x24>)
   143cc:	4770      	bx	lr
   143ce:	bf00      	nop
   143d0:	00014ad1 	.word	0x00014ad1
   143d4:	00014ad5 	.word	0x00014ad5
   143d8:	00014ad9 	.word	0x00014ad9

000143dc <get_eit_entry>:
   143dc:	4b23      	ldr	r3, [pc, #140]	; (1446c <get_eit_entry+0x90>)
   143de:	b530      	push	{r4, r5, lr}
   143e0:	4604      	mov	r4, r0
   143e2:	b083      	sub	sp, #12
   143e4:	1e8d      	subs	r5, r1, #2
   143e6:	b343      	cbz	r3, 1443a <get_eit_entry+0x5e>
   143e8:	a901      	add	r1, sp, #4
   143ea:	4628      	mov	r0, r5
   143ec:	e000      	b.n	143f0 <get_eit_entry+0x14>
   143ee:	bf00      	nop
   143f0:	b1f0      	cbz	r0, 14430 <get_eit_entry+0x54>
   143f2:	9901      	ldr	r1, [sp, #4]
   143f4:	462a      	mov	r2, r5
   143f6:	f7ff ffad 	bl	14354 <search_EIT_table>
   143fa:	4601      	mov	r1, r0
   143fc:	b1c0      	cbz	r0, 14430 <get_eit_entry+0x54>
   143fe:	f7ff ff9f 	bl	14340 <selfrel_offset31>
   14402:	684b      	ldr	r3, [r1, #4]
   14404:	64a0      	str	r0, [r4, #72]	; 0x48
   14406:	2b01      	cmp	r3, #1
   14408:	d02c      	beq.n	14464 <get_eit_entry+0x88>
   1440a:	2b00      	cmp	r3, #0
   1440c:	f101 0004 	add.w	r0, r1, #4
   14410:	db24      	blt.n	1445c <get_eit_entry+0x80>
   14412:	f7ff ff95 	bl	14340 <selfrel_offset31>
   14416:	2300      	movs	r3, #0
   14418:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   1441c:	6803      	ldr	r3, [r0, #0]
   1441e:	2b00      	cmp	r3, #0
   14420:	db11      	blt.n	14446 <get_eit_entry+0x6a>
   14422:	f7ff ff8d 	bl	14340 <selfrel_offset31>
   14426:	4603      	mov	r3, r0
   14428:	2000      	movs	r0, #0
   1442a:	6123      	str	r3, [r4, #16]
   1442c:	b003      	add	sp, #12
   1442e:	bd30      	pop	{r4, r5, pc}
   14430:	2300      	movs	r3, #0
   14432:	2009      	movs	r0, #9
   14434:	6123      	str	r3, [r4, #16]
   14436:	b003      	add	sp, #12
   14438:	bd30      	pop	{r4, r5, pc}
   1443a:	490d      	ldr	r1, [pc, #52]	; (14470 <get_eit_entry+0x94>)
   1443c:	480d      	ldr	r0, [pc, #52]	; (14474 <get_eit_entry+0x98>)
   1443e:	1a09      	subs	r1, r1, r0
   14440:	10c9      	asrs	r1, r1, #3
   14442:	9101      	str	r1, [sp, #4]
   14444:	e7d6      	b.n	143f4 <get_eit_entry+0x18>
   14446:	f3c3 6003 	ubfx	r0, r3, #24, #4
   1444a:	f7ff ffb3 	bl	143b4 <__gnu_unwind_get_pr_addr>
   1444e:	2800      	cmp	r0, #0
   14450:	6120      	str	r0, [r4, #16]
   14452:	bf14      	ite	ne
   14454:	2000      	movne	r0, #0
   14456:	2009      	moveq	r0, #9
   14458:	b003      	add	sp, #12
   1445a:	bd30      	pop	{r4, r5, pc}
   1445c:	2301      	movs	r3, #1
   1445e:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   14462:	e7db      	b.n	1441c <get_eit_entry+0x40>
   14464:	2300      	movs	r3, #0
   14466:	2005      	movs	r0, #5
   14468:	6123      	str	r3, [r4, #16]
   1446a:	e7df      	b.n	1442c <get_eit_entry+0x50>
   1446c:	00000000 	.word	0x00000000
   14470:	00024bd0 	.word	0x00024bd0
   14474:	00024a20 	.word	0x00024a20

00014478 <restore_non_core_regs>:
   14478:	6803      	ldr	r3, [r0, #0]
   1447a:	07da      	lsls	r2, r3, #31
   1447c:	b510      	push	{r4, lr}
   1447e:	4604      	mov	r4, r0
   14480:	d406      	bmi.n	14490 <restore_non_core_regs+0x18>
   14482:	079b      	lsls	r3, r3, #30
   14484:	f100 0048 	add.w	r0, r0, #72	; 0x48
   14488:	d509      	bpl.n	1449e <restore_non_core_regs+0x26>
   1448a:	f000 fc93 	bl	14db4 <__gnu_Unwind_Restore_VFP_D>
   1448e:	6823      	ldr	r3, [r4, #0]
   14490:	0759      	lsls	r1, r3, #29
   14492:	d509      	bpl.n	144a8 <restore_non_core_regs+0x30>
   14494:	071a      	lsls	r2, r3, #28
   14496:	d50e      	bpl.n	144b6 <restore_non_core_regs+0x3e>
   14498:	06db      	lsls	r3, r3, #27
   1449a:	d513      	bpl.n	144c4 <restore_non_core_regs+0x4c>
   1449c:	bd10      	pop	{r4, pc}
   1449e:	f000 fc81 	bl	14da4 <__gnu_Unwind_Restore_VFP>
   144a2:	6823      	ldr	r3, [r4, #0]
   144a4:	0759      	lsls	r1, r3, #29
   144a6:	d4f5      	bmi.n	14494 <restore_non_core_regs+0x1c>
   144a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   144ac:	f000 fc8a 	bl	14dc4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   144b0:	6823      	ldr	r3, [r4, #0]
   144b2:	071a      	lsls	r2, r3, #28
   144b4:	d4f0      	bmi.n	14498 <restore_non_core_regs+0x20>
   144b6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   144ba:	f000 fc8b 	bl	14dd4 <__gnu_Unwind_Restore_WMMXD>
   144be:	6823      	ldr	r3, [r4, #0]
   144c0:	06db      	lsls	r3, r3, #27
   144c2:	d4eb      	bmi.n	1449c <restore_non_core_regs+0x24>
   144c4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   144c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   144cc:	f000 bcc6 	b.w	14e5c <__gnu_Unwind_Restore_WMMXC>

000144d0 <_Unwind_decode_typeinfo_ptr.isra.0>:
   144d0:	4603      	mov	r3, r0
   144d2:	6800      	ldr	r0, [r0, #0]
   144d4:	b100      	cbz	r0, 144d8 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
   144d6:	4418      	add	r0, r3
   144d8:	4770      	bx	lr
   144da:	bf00      	nop

000144dc <__gnu_unwind_24bit.isra.0>:
   144dc:	2009      	movs	r0, #9
   144de:	4770      	bx	lr

000144e0 <_Unwind_DebugHook>:
   144e0:	4770      	bx	lr
   144e2:	bf00      	nop

000144e4 <unwind_phase2>:
   144e4:	b570      	push	{r4, r5, r6, lr}
   144e6:	4604      	mov	r4, r0
   144e8:	460e      	mov	r6, r1
   144ea:	6c31      	ldr	r1, [r6, #64]	; 0x40
   144ec:	4620      	mov	r0, r4
   144ee:	f7ff ff75 	bl	143dc <get_eit_entry>
   144f2:	4605      	mov	r5, r0
   144f4:	b988      	cbnz	r0, 1451a <unwind_phase2+0x36>
   144f6:	6c30      	ldr	r0, [r6, #64]	; 0x40
   144f8:	4632      	mov	r2, r6
   144fa:	6923      	ldr	r3, [r4, #16]
   144fc:	4621      	mov	r1, r4
   144fe:	6160      	str	r0, [r4, #20]
   14500:	2001      	movs	r0, #1
   14502:	4798      	blx	r3
   14504:	2808      	cmp	r0, #8
   14506:	d0f0      	beq.n	144ea <unwind_phase2+0x6>
   14508:	2807      	cmp	r0, #7
   1450a:	d106      	bne.n	1451a <unwind_phase2+0x36>
   1450c:	4628      	mov	r0, r5
   1450e:	6c31      	ldr	r1, [r6, #64]	; 0x40
   14510:	f7ff ffe6 	bl	144e0 <_Unwind_DebugHook>
   14514:	1d30      	adds	r0, r6, #4
   14516:	f000 fc39 	bl	14d8c <__restore_core_regs>
   1451a:	f00f ff99 	bl	24450 <abort>
   1451e:	bf00      	nop

00014520 <unwind_phase2_forced>:
   14520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14524:	f101 0c04 	add.w	ip, r1, #4
   14528:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   1452c:	4606      	mov	r6, r0
   1452e:	68c7      	ldr	r7, [r0, #12]
   14530:	f10d 0e0c 	add.w	lr, sp, #12
   14534:	4614      	mov	r4, r2
   14536:	ad02      	add	r5, sp, #8
   14538:	f8d6 8018 	ldr.w	r8, [r6, #24]
   1453c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   14540:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   14544:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   14548:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1454c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   14550:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   14554:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   14558:	f04f 0c00 	mov.w	ip, #0
   1455c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   14560:	f8c5 c000 	str.w	ip, [r5]
   14564:	e022      	b.n	145ac <unwind_phase2_forced+0x8c>
   14566:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   14568:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1456c:	4629      	mov	r1, r5
   1456e:	a87a      	add	r0, sp, #488	; 0x1e8
   14570:	6173      	str	r3, [r6, #20]
   14572:	f00f ff90 	bl	24496 <memcpy>
   14576:	6933      	ldr	r3, [r6, #16]
   14578:	aa7a      	add	r2, sp, #488	; 0x1e8
   1457a:	4631      	mov	r1, r6
   1457c:	4650      	mov	r0, sl
   1457e:	4798      	blx	r3
   14580:	4681      	mov	r9, r0
   14582:	9888      	ldr	r0, [sp, #544]	; 0x220
   14584:	4621      	mov	r1, r4
   14586:	f8cd 8004 	str.w	r8, [sp, #4]
   1458a:	4633      	mov	r3, r6
   1458c:	9500      	str	r5, [sp, #0]
   1458e:	4632      	mov	r2, r6
   14590:	6468      	str	r0, [r5, #68]	; 0x44
   14592:	2001      	movs	r0, #1
   14594:	47b8      	blx	r7
   14596:	4604      	mov	r4, r0
   14598:	b9f0      	cbnz	r0, 145d8 <unwind_phase2_forced+0xb8>
   1459a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1459e:	a97a      	add	r1, sp, #488	; 0x1e8
   145a0:	4628      	mov	r0, r5
   145a2:	f00f ff78 	bl	24496 <memcpy>
   145a6:	f1b9 0f08 	cmp.w	r9, #8
   145aa:	d11c      	bne.n	145e6 <unwind_phase2_forced+0xc6>
   145ac:	3409      	adds	r4, #9
   145ae:	6c29      	ldr	r1, [r5, #64]	; 0x40
   145b0:	4630      	mov	r0, r6
   145b2:	f7ff ff13 	bl	143dc <get_eit_entry>
   145b6:	4681      	mov	r9, r0
   145b8:	fa5f fa84 	uxtb.w	sl, r4
   145bc:	2800      	cmp	r0, #0
   145be:	d0d2      	beq.n	14566 <unwind_phase2_forced+0x46>
   145c0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   145c2:	f04a 0110 	orr.w	r1, sl, #16
   145c6:	f8cd 8004 	str.w	r8, [sp, #4]
   145ca:	4633      	mov	r3, r6
   145cc:	9500      	str	r5, [sp, #0]
   145ce:	4632      	mov	r2, r6
   145d0:	6468      	str	r0, [r5, #68]	; 0x44
   145d2:	2001      	movs	r0, #1
   145d4:	47b8      	blx	r7
   145d6:	b108      	cbz	r0, 145dc <unwind_phase2_forced+0xbc>
   145d8:	f04f 0909 	mov.w	r9, #9
   145dc:	4648      	mov	r0, r9
   145de:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   145e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   145e6:	f1b9 0f07 	cmp.w	r9, #7
   145ea:	d1f5      	bne.n	145d8 <unwind_phase2_forced+0xb8>
   145ec:	4620      	mov	r0, r4
   145ee:	6c29      	ldr	r1, [r5, #64]	; 0x40
   145f0:	f7ff ff76 	bl	144e0 <_Unwind_DebugHook>
   145f4:	a803      	add	r0, sp, #12
   145f6:	f000 fbc9 	bl	14d8c <__restore_core_regs>
   145fa:	bf00      	nop

000145fc <_Unwind_GetCFA>:
   145fc:	6c40      	ldr	r0, [r0, #68]	; 0x44
   145fe:	4770      	bx	lr

00014600 <__gnu_Unwind_RaiseException>:
   14600:	b5f0      	push	{r4, r5, r6, r7, lr}
   14602:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   14604:	b0f9      	sub	sp, #484	; 0x1e4
   14606:	1d0e      	adds	r6, r1, #4
   14608:	460f      	mov	r7, r1
   1460a:	640b      	str	r3, [r1, #64]	; 0x40
   1460c:	ac01      	add	r4, sp, #4
   1460e:	4605      	mov	r5, r0
   14610:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14614:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14618:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1461a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1461c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   14620:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   14624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   14628:	9600      	str	r6, [sp, #0]
   1462a:	e006      	b.n	1463a <__gnu_Unwind_RaiseException+0x3a>
   1462c:	692b      	ldr	r3, [r5, #16]
   1462e:	466a      	mov	r2, sp
   14630:	4629      	mov	r1, r5
   14632:	4798      	blx	r3
   14634:	2808      	cmp	r0, #8
   14636:	4604      	mov	r4, r0
   14638:	d108      	bne.n	1464c <__gnu_Unwind_RaiseException+0x4c>
   1463a:	9910      	ldr	r1, [sp, #64]	; 0x40
   1463c:	4628      	mov	r0, r5
   1463e:	f7ff fecd 	bl	143dc <get_eit_entry>
   14642:	2800      	cmp	r0, #0
   14644:	d0f2      	beq.n	1462c <__gnu_Unwind_RaiseException+0x2c>
   14646:	2009      	movs	r0, #9
   14648:	b079      	add	sp, #484	; 0x1e4
   1464a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1464c:	4668      	mov	r0, sp
   1464e:	f7ff ff13 	bl	14478 <restore_non_core_regs>
   14652:	2c06      	cmp	r4, #6
   14654:	d1f7      	bne.n	14646 <__gnu_Unwind_RaiseException+0x46>
   14656:	4639      	mov	r1, r7
   14658:	4628      	mov	r0, r5
   1465a:	f7ff ff43 	bl	144e4 <unwind_phase2>
   1465e:	bf00      	nop

00014660 <__gnu_Unwind_ForcedUnwind>:
   14660:	b430      	push	{r4, r5}
   14662:	4615      	mov	r5, r2
   14664:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   14666:	60c1      	str	r1, [r0, #12]
   14668:	2200      	movs	r2, #0
   1466a:	6185      	str	r5, [r0, #24]
   1466c:	4619      	mov	r1, r3
   1466e:	641c      	str	r4, [r3, #64]	; 0x40
   14670:	bc30      	pop	{r4, r5}
   14672:	e755      	b.n	14520 <unwind_phase2_forced>

00014674 <__gnu_Unwind_Resume>:
   14674:	b570      	push	{r4, r5, r6, lr}
   14676:	6943      	ldr	r3, [r0, #20]
   14678:	68c6      	ldr	r6, [r0, #12]
   1467a:	640b      	str	r3, [r1, #64]	; 0x40
   1467c:	b9ae      	cbnz	r6, 146aa <__gnu_Unwind_Resume+0x36>
   1467e:	6903      	ldr	r3, [r0, #16]
   14680:	460a      	mov	r2, r1
   14682:	4604      	mov	r4, r0
   14684:	460d      	mov	r5, r1
   14686:	4601      	mov	r1, r0
   14688:	2002      	movs	r0, #2
   1468a:	4798      	blx	r3
   1468c:	2807      	cmp	r0, #7
   1468e:	d005      	beq.n	1469c <__gnu_Unwind_Resume+0x28>
   14690:	2808      	cmp	r0, #8
   14692:	d10f      	bne.n	146b4 <__gnu_Unwind_Resume+0x40>
   14694:	4629      	mov	r1, r5
   14696:	4620      	mov	r0, r4
   14698:	f7ff ff24 	bl	144e4 <unwind_phase2>
   1469c:	4630      	mov	r0, r6
   1469e:	6c29      	ldr	r1, [r5, #64]	; 0x40
   146a0:	f7ff ff1e 	bl	144e0 <_Unwind_DebugHook>
   146a4:	1d28      	adds	r0, r5, #4
   146a6:	f000 fb71 	bl	14d8c <__restore_core_regs>
   146aa:	2201      	movs	r2, #1
   146ac:	f7ff ff38 	bl	14520 <unwind_phase2_forced>
   146b0:	f00f fece 	bl	24450 <abort>
   146b4:	f00f fecc 	bl	24450 <abort>

000146b8 <__gnu_Unwind_Resume_or_Rethrow>:
   146b8:	68c2      	ldr	r2, [r0, #12]
   146ba:	b12a      	cbz	r2, 146c8 <__gnu_Unwind_Resume_or_Rethrow+0x10>
   146bc:	2200      	movs	r2, #0
   146be:	b410      	push	{r4}
   146c0:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   146c2:	640c      	str	r4, [r1, #64]	; 0x40
   146c4:	bc10      	pop	{r4}
   146c6:	e72b      	b.n	14520 <unwind_phase2_forced>
   146c8:	e79a      	b.n	14600 <__gnu_Unwind_RaiseException>
   146ca:	bf00      	nop

000146cc <_Unwind_Complete>:
   146cc:	4770      	bx	lr
   146ce:	bf00      	nop

000146d0 <_Unwind_DeleteException>:
   146d0:	6883      	ldr	r3, [r0, #8]
   146d2:	4601      	mov	r1, r0
   146d4:	b10b      	cbz	r3, 146da <_Unwind_DeleteException+0xa>
   146d6:	2001      	movs	r0, #1
   146d8:	4718      	bx	r3
   146da:	4770      	bx	lr

000146dc <_Unwind_VRS_Get>:
   146dc:	2901      	cmp	r1, #1
   146de:	d015      	beq.n	1470c <_Unwind_VRS_Get+0x30>
   146e0:	d80c      	bhi.n	146fc <_Unwind_VRS_Get+0x20>
   146e2:	b98b      	cbnz	r3, 14708 <_Unwind_VRS_Get+0x2c>
   146e4:	2a0f      	cmp	r2, #15
   146e6:	bf94      	ite	ls
   146e8:	2100      	movls	r1, #0
   146ea:	2101      	movhi	r1, #1
   146ec:	b961      	cbnz	r1, 14708 <_Unwind_VRS_Get+0x2c>
   146ee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   146f2:	4608      	mov	r0, r1
   146f4:	6853      	ldr	r3, [r2, #4]
   146f6:	9a00      	ldr	r2, [sp, #0]
   146f8:	6013      	str	r3, [r2, #0]
   146fa:	4770      	bx	lr
   146fc:	3903      	subs	r1, #3
   146fe:	2901      	cmp	r1, #1
   14700:	bf94      	ite	ls
   14702:	2001      	movls	r0, #1
   14704:	2002      	movhi	r0, #2
   14706:	4770      	bx	lr
   14708:	2002      	movs	r0, #2
   1470a:	4770      	bx	lr
   1470c:	4608      	mov	r0, r1
   1470e:	4770      	bx	lr

00014710 <_Unwind_GetGR>:
   14710:	b510      	push	{r4, lr}
   14712:	b084      	sub	sp, #16
   14714:	2300      	movs	r3, #0
   14716:	460a      	mov	r2, r1
   14718:	ac03      	add	r4, sp, #12
   1471a:	4619      	mov	r1, r3
   1471c:	9400      	str	r4, [sp, #0]
   1471e:	f7ff ffdd 	bl	146dc <_Unwind_VRS_Get>
   14722:	9803      	ldr	r0, [sp, #12]
   14724:	b004      	add	sp, #16
   14726:	bd10      	pop	{r4, pc}

00014728 <_Unwind_VRS_Set>:
   14728:	2901      	cmp	r1, #1
   1472a:	d015      	beq.n	14758 <_Unwind_VRS_Set+0x30>
   1472c:	d80c      	bhi.n	14748 <_Unwind_VRS_Set+0x20>
   1472e:	b98b      	cbnz	r3, 14754 <_Unwind_VRS_Set+0x2c>
   14730:	2a0f      	cmp	r2, #15
   14732:	bf94      	ite	ls
   14734:	2100      	movls	r1, #0
   14736:	2101      	movhi	r1, #1
   14738:	b961      	cbnz	r1, 14754 <_Unwind_VRS_Set+0x2c>
   1473a:	9b00      	ldr	r3, [sp, #0]
   1473c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   14740:	4608      	mov	r0, r1
   14742:	681b      	ldr	r3, [r3, #0]
   14744:	6053      	str	r3, [r2, #4]
   14746:	4770      	bx	lr
   14748:	3903      	subs	r1, #3
   1474a:	2901      	cmp	r1, #1
   1474c:	bf94      	ite	ls
   1474e:	2001      	movls	r0, #1
   14750:	2002      	movhi	r0, #2
   14752:	4770      	bx	lr
   14754:	2002      	movs	r0, #2
   14756:	4770      	bx	lr
   14758:	4608      	mov	r0, r1
   1475a:	4770      	bx	lr

0001475c <_Unwind_SetGR>:
   1475c:	b510      	push	{r4, lr}
   1475e:	b084      	sub	sp, #16
   14760:	2300      	movs	r3, #0
   14762:	ac03      	add	r4, sp, #12
   14764:	9203      	str	r2, [sp, #12]
   14766:	460a      	mov	r2, r1
   14768:	4619      	mov	r1, r3
   1476a:	9400      	str	r4, [sp, #0]
   1476c:	f7ff ffdc 	bl	14728 <_Unwind_VRS_Set>
   14770:	b004      	add	sp, #16
   14772:	bd10      	pop	{r4, pc}

00014774 <__gnu_Unwind_Backtrace>:
   14774:	b5f0      	push	{r4, r5, r6, r7, lr}
   14776:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   14778:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   1477c:	1d15      	adds	r5, r2, #4
   1477e:	4607      	mov	r7, r0
   14780:	6413      	str	r3, [r2, #64]	; 0x40
   14782:	ac17      	add	r4, sp, #92	; 0x5c
   14784:	460e      	mov	r6, r1
   14786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1478a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1478c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1478e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   14790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   14792:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   14796:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1479a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1479e:	9516      	str	r5, [sp, #88]	; 0x58
   147a0:	e010      	b.n	147c4 <__gnu_Unwind_Backtrace+0x50>
   147a2:	f7ff ffdb 	bl	1475c <_Unwind_SetGR>
   147a6:	4631      	mov	r1, r6
   147a8:	a816      	add	r0, sp, #88	; 0x58
   147aa:	47b8      	blx	r7
   147ac:	4603      	mov	r3, r0
   147ae:	aa16      	add	r2, sp, #88	; 0x58
   147b0:	4669      	mov	r1, sp
   147b2:	2008      	movs	r0, #8
   147b4:	b983      	cbnz	r3, 147d8 <__gnu_Unwind_Backtrace+0x64>
   147b6:	9b04      	ldr	r3, [sp, #16]
   147b8:	4798      	blx	r3
   147ba:	2805      	cmp	r0, #5
   147bc:	4604      	mov	r4, r0
   147be:	d00c      	beq.n	147da <__gnu_Unwind_Backtrace+0x66>
   147c0:	2809      	cmp	r0, #9
   147c2:	d00a      	beq.n	147da <__gnu_Unwind_Backtrace+0x66>
   147c4:	9926      	ldr	r1, [sp, #152]	; 0x98
   147c6:	4668      	mov	r0, sp
   147c8:	f7ff fe08 	bl	143dc <get_eit_entry>
   147cc:	4603      	mov	r3, r0
   147ce:	466a      	mov	r2, sp
   147d0:	210c      	movs	r1, #12
   147d2:	a816      	add	r0, sp, #88	; 0x58
   147d4:	2b00      	cmp	r3, #0
   147d6:	d0e4      	beq.n	147a2 <__gnu_Unwind_Backtrace+0x2e>
   147d8:	2409      	movs	r4, #9
   147da:	a816      	add	r0, sp, #88	; 0x58
   147dc:	f7ff fe4c 	bl	14478 <restore_non_core_regs>
   147e0:	4620      	mov	r0, r4
   147e2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   147e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000147e8 <__gnu_unwind_pr_common>:
   147e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147ec:	461d      	mov	r5, r3
   147ee:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   147f0:	b089      	sub	sp, #36	; 0x24
   147f2:	4616      	mov	r6, r2
   147f4:	f853 2b04 	ldr.w	r2, [r3], #4
   147f8:	460c      	mov	r4, r1
   147fa:	f000 0803 	and.w	r8, r0, #3
   147fe:	9306      	str	r3, [sp, #24]
   14800:	2d00      	cmp	r5, #0
   14802:	d07a      	beq.n	148fa <__gnu_unwind_pr_common+0x112>
   14804:	0c11      	lsrs	r1, r2, #16
   14806:	2702      	movs	r7, #2
   14808:	0412      	lsls	r2, r2, #16
   1480a:	fa5f fc81 	uxtb.w	ip, r1
   1480e:	f88d 101d 	strb.w	r1, [sp, #29]
   14812:	9205      	str	r2, [sp, #20]
   14814:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   14818:	f88d 701c 	strb.w	r7, [sp, #28]
   1481c:	f1b8 0f02 	cmp.w	r8, #2
   14820:	6d22      	ldr	r2, [r4, #80]	; 0x50
   14822:	bf08      	it	eq
   14824:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
   14826:	f012 0201 	ands.w	r2, r2, #1
   1482a:	d008      	beq.n	1483e <__gnu_unwind_pr_common+0x56>
   1482c:	4630      	mov	r0, r6
   1482e:	a905      	add	r1, sp, #20
   14830:	f000 fbae 	bl	14f90 <__gnu_unwind_execute>
   14834:	bb98      	cbnz	r0, 1489e <__gnu_unwind_pr_common+0xb6>
   14836:	2008      	movs	r0, #8
   14838:	b009      	add	sp, #36	; 0x24
   1483a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1483e:	f8d3 a000 	ldr.w	sl, [r3]
   14842:	f1ba 0f00 	cmp.w	sl, #0
   14846:	d0f1      	beq.n	1482c <__gnu_unwind_pr_common+0x44>
   14848:	f080 0008 	eor.w	r0, r0, #8
   1484c:	9201      	str	r2, [sp, #4]
   1484e:	f3c0 02c0 	ubfx	r2, r0, #3, #1
   14852:	9202      	str	r2, [sp, #8]
   14854:	2d02      	cmp	r5, #2
   14856:	d04c      	beq.n	148f2 <__gnu_unwind_pr_common+0x10a>
   14858:	f8b3 a000 	ldrh.w	sl, [r3]
   1485c:	f103 0b04 	add.w	fp, r3, #4
   14860:	885f      	ldrh	r7, [r3, #2]
   14862:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   14864:	f027 0901 	bic.w	r9, r7, #1
   14868:	007f      	lsls	r7, r7, #1
   1486a:	210f      	movs	r1, #15
   1486c:	4499      	add	r9, r3
   1486e:	4630      	mov	r0, r6
   14870:	f7ff ff4e 	bl	14710 <_Unwind_GetGR>
   14874:	f007 0702 	and.w	r7, r7, #2
   14878:	f00a 0301 	and.w	r3, sl, #1
   1487c:	4581      	cmp	r9, r0
   1487e:	ea43 0307 	orr.w	r3, r3, r7
   14882:	d810      	bhi.n	148a6 <__gnu_unwind_pr_common+0xbe>
   14884:	f02a 0a01 	bic.w	sl, sl, #1
   14888:	44d1      	add	r9, sl
   1488a:	4581      	cmp	r9, r0
   1488c:	d90b      	bls.n	148a6 <__gnu_unwind_pr_common+0xbe>
   1488e:	2b01      	cmp	r3, #1
   14890:	f000 80bb 	beq.w	14a0a <__gnu_unwind_pr_common+0x222>
   14894:	2b02      	cmp	r3, #2
   14896:	f000 8085 	beq.w	149a4 <__gnu_unwind_pr_common+0x1bc>
   1489a:	2b00      	cmp	r3, #0
   1489c:	d048      	beq.n	14930 <__gnu_unwind_pr_common+0x148>
   1489e:	2009      	movs	r0, #9
   148a0:	b009      	add	sp, #36	; 0x24
   148a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148a6:	2b01      	cmp	r3, #1
   148a8:	d03c      	beq.n	14924 <__gnu_unwind_pr_common+0x13c>
   148aa:	2b02      	cmp	r3, #2
   148ac:	d02b      	beq.n	14906 <__gnu_unwind_pr_common+0x11e>
   148ae:	2b00      	cmp	r3, #0
   148b0:	d1f5      	bne.n	1489e <__gnu_unwind_pr_common+0xb6>
   148b2:	f10b 0304 	add.w	r3, fp, #4
   148b6:	f8d3 a000 	ldr.w	sl, [r3]
   148ba:	f1ba 0f00 	cmp.w	sl, #0
   148be:	d1c9      	bne.n	14854 <__gnu_unwind_pr_common+0x6c>
   148c0:	a905      	add	r1, sp, #20
   148c2:	4630      	mov	r0, r6
   148c4:	f000 fb64 	bl	14f90 <__gnu_unwind_execute>
   148c8:	2800      	cmp	r0, #0
   148ca:	d1e8      	bne.n	1489e <__gnu_unwind_pr_common+0xb6>
   148cc:	9b01      	ldr	r3, [sp, #4]
   148ce:	2b00      	cmp	r3, #0
   148d0:	d0b1      	beq.n	14836 <__gnu_unwind_pr_common+0x4e>
   148d2:	210f      	movs	r1, #15
   148d4:	4630      	mov	r0, r6
   148d6:	f7ff ff1b 	bl	14710 <_Unwind_GetGR>
   148da:	210e      	movs	r1, #14
   148dc:	4602      	mov	r2, r0
   148de:	4630      	mov	r0, r6
   148e0:	f7ff ff3c 	bl	1475c <_Unwind_SetGR>
   148e4:	4630      	mov	r0, r6
   148e6:	4a79      	ldr	r2, [pc, #484]	; (14acc <__gnu_unwind_pr_common+0x2e4>)
   148e8:	210f      	movs	r1, #15
   148ea:	f7ff ff37 	bl	1475c <_Unwind_SetGR>
   148ee:	2007      	movs	r0, #7
   148f0:	e7d6      	b.n	148a0 <__gnu_unwind_pr_common+0xb8>
   148f2:	685f      	ldr	r7, [r3, #4]
   148f4:	f103 0b08 	add.w	fp, r3, #8
   148f8:	e7b3      	b.n	14862 <__gnu_unwind_pr_common+0x7a>
   148fa:	0212      	lsls	r2, r2, #8
   148fc:	2103      	movs	r1, #3
   148fe:	9205      	str	r2, [sp, #20]
   14900:	f8ad 101c 	strh.w	r1, [sp, #28]
   14904:	e78a      	b.n	1481c <__gnu_unwind_pr_common+0x34>
   14906:	f8db 3000 	ldr.w	r3, [fp]
   1490a:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1490e:	f1b8 0f00 	cmp.w	r8, #0
   14912:	d123      	bne.n	1495c <__gnu_unwind_pr_common+0x174>
   14914:	2b00      	cmp	r3, #0
   14916:	da01      	bge.n	1491c <__gnu_unwind_pr_common+0x134>
   14918:	f10b 0b04 	add.w	fp, fp, #4
   1491c:	3701      	adds	r7, #1
   1491e:	eb0b 0387 	add.w	r3, fp, r7, lsl #2
   14922:	e7c8      	b.n	148b6 <__gnu_unwind_pr_common+0xce>
   14924:	f1b8 0f00 	cmp.w	r8, #0
   14928:	d123      	bne.n	14972 <__gnu_unwind_pr_common+0x18a>
   1492a:	f10b 0308 	add.w	r3, fp, #8
   1492e:	e7c2      	b.n	148b6 <__gnu_unwind_pr_common+0xce>
   14930:	f1b8 0f00 	cmp.w	r8, #0
   14934:	d0bd      	beq.n	148b2 <__gnu_unwind_pr_common+0xca>
   14936:	465f      	mov	r7, fp
   14938:	4658      	mov	r0, fp
   1493a:	f7ff fd01 	bl	14340 <selfrel_offset31>
   1493e:	4605      	mov	r5, r0
   14940:	3704      	adds	r7, #4
   14942:	4620      	mov	r0, r4
   14944:	63a7      	str	r7, [r4, #56]	; 0x38
   14946:	f00f fafa 	bl	23f3e <__cxa_begin_cleanup>
   1494a:	2800      	cmp	r0, #0
   1494c:	d0a7      	beq.n	1489e <__gnu_unwind_pr_common+0xb6>
   1494e:	4630      	mov	r0, r6
   14950:	462a      	mov	r2, r5
   14952:	210f      	movs	r1, #15
   14954:	f7ff ff02 	bl	1475c <_Unwind_SetGR>
   14958:	2007      	movs	r0, #7
   1495a:	e7a1      	b.n	148a0 <__gnu_unwind_pr_common+0xb8>
   1495c:	f8d4 9020 	ldr.w	r9, [r4, #32]
   14960:	210d      	movs	r1, #13
   14962:	4630      	mov	r0, r6
   14964:	f7ff fed4 	bl	14710 <_Unwind_GetGR>
   14968:	4581      	cmp	r9, r0
   1496a:	d07b      	beq.n	14a64 <__gnu_unwind_pr_common+0x27c>
   1496c:	f8db 3000 	ldr.w	r3, [fp]
   14970:	e7d0      	b.n	14914 <__gnu_unwind_pr_common+0x12c>
   14972:	6a27      	ldr	r7, [r4, #32]
   14974:	210d      	movs	r1, #13
   14976:	4630      	mov	r0, r6
   14978:	f7ff feca 	bl	14710 <_Unwind_GetGR>
   1497c:	4287      	cmp	r7, r0
   1497e:	d1d4      	bne.n	1492a <__gnu_unwind_pr_common+0x142>
   14980:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14982:	459b      	cmp	fp, r3
   14984:	d1d1      	bne.n	1492a <__gnu_unwind_pr_common+0x142>
   14986:	4658      	mov	r0, fp
   14988:	f7ff fcda 	bl	14340 <selfrel_offset31>
   1498c:	210f      	movs	r1, #15
   1498e:	4602      	mov	r2, r0
   14990:	4630      	mov	r0, r6
   14992:	f7ff fee3 	bl	1475c <_Unwind_SetGR>
   14996:	4630      	mov	r0, r6
   14998:	4622      	mov	r2, r4
   1499a:	2100      	movs	r1, #0
   1499c:	f7ff fede 	bl	1475c <_Unwind_SetGR>
   149a0:	2007      	movs	r0, #7
   149a2:	e77d      	b.n	148a0 <__gnu_unwind_pr_common+0xb8>
   149a4:	f8db 3000 	ldr.w	r3, [fp]
   149a8:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   149ac:	f1b8 0f00 	cmp.w	r8, #0
   149b0:	d1d4      	bne.n	1495c <__gnu_unwind_pr_common+0x174>
   149b2:	9a02      	ldr	r2, [sp, #8]
   149b4:	b90a      	cbnz	r2, 149ba <__gnu_unwind_pr_common+0x1d2>
   149b6:	2f00      	cmp	r7, #0
   149b8:	d1ac      	bne.n	14914 <__gnu_unwind_pr_common+0x12c>
   149ba:	f104 0358 	add.w	r3, r4, #88	; 0x58
   149be:	f8cd 800c 	str.w	r8, [sp, #12]
   149c2:	f10b 0a04 	add.w	sl, fp, #4
   149c6:	46a8      	mov	r8, r5
   149c8:	f04f 0900 	mov.w	r9, #0
   149cc:	461d      	mov	r5, r3
   149ce:	e00a      	b.n	149e6 <__gnu_unwind_pr_common+0x1fe>
   149d0:	9504      	str	r5, [sp, #16]
   149d2:	f7ff fd7d 	bl	144d0 <_Unwind_decode_typeinfo_ptr.isra.0>
   149d6:	ab04      	add	r3, sp, #16
   149d8:	4601      	mov	r1, r0
   149da:	2200      	movs	r2, #0
   149dc:	4620      	mov	r0, r4
   149de:	f009 fa33 	bl	1de48 <__cxa_type_match>
   149e2:	2800      	cmp	r0, #0
   149e4:	d150      	bne.n	14a88 <__gnu_unwind_pr_common+0x2a0>
   149e6:	45b9      	cmp	r9, r7
   149e8:	4650      	mov	r0, sl
   149ea:	f109 0901 	add.w	r9, r9, #1
   149ee:	f10a 0a04 	add.w	sl, sl, #4
   149f2:	d1ed      	bne.n	149d0 <__gnu_unwind_pr_common+0x1e8>
   149f4:	4630      	mov	r0, r6
   149f6:	210d      	movs	r1, #13
   149f8:	f7ff fe8a 	bl	14710 <_Unwind_GetGR>
   149fc:	9b04      	ldr	r3, [sp, #16]
   149fe:	4602      	mov	r2, r0
   14a00:	2006      	movs	r0, #6
   14a02:	6222      	str	r2, [r4, #32]
   14a04:	e9c4 3b09 	strd	r3, fp, [r4, #36]	; 0x24
   14a08:	e74a      	b.n	148a0 <__gnu_unwind_pr_common+0xb8>
   14a0a:	f1b8 0f00 	cmp.w	r8, #0
   14a0e:	d1b0      	bne.n	14972 <__gnu_unwind_pr_common+0x18a>
   14a10:	e9db 2300 	ldrd	r2, r3, [fp]
   14a14:	1c99      	adds	r1, r3, #2
   14a16:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   14a1a:	f43f af40 	beq.w	1489e <__gnu_unwind_pr_common+0xb6>
   14a1e:	f104 0158 	add.w	r1, r4, #88	; 0x58
   14a22:	3301      	adds	r3, #1
   14a24:	9104      	str	r1, [sp, #16]
   14a26:	d035      	beq.n	14a94 <__gnu_unwind_pr_common+0x2ac>
   14a28:	f10b 0004 	add.w	r0, fp, #4
   14a2c:	f7ff fd50 	bl	144d0 <_Unwind_decode_typeinfo_ptr.isra.0>
   14a30:	ab04      	add	r3, sp, #16
   14a32:	4601      	mov	r1, r0
   14a34:	4620      	mov	r0, r4
   14a36:	f009 fa07 	bl	1de48 <__cxa_type_match>
   14a3a:	2800      	cmp	r0, #0
   14a3c:	f43f af75 	beq.w	1492a <__gnu_unwind_pr_common+0x142>
   14a40:	4681      	mov	r9, r0
   14a42:	210d      	movs	r1, #13
   14a44:	4630      	mov	r0, r6
   14a46:	465f      	mov	r7, fp
   14a48:	f7ff fe62 	bl	14710 <_Unwind_GetGR>
   14a4c:	f1b9 0f02 	cmp.w	r9, #2
   14a50:	6220      	str	r0, [r4, #32]
   14a52:	d125      	bne.n	14aa0 <__gnu_unwind_pr_common+0x2b8>
   14a54:	4623      	mov	r3, r4
   14a56:	9a04      	ldr	r2, [sp, #16]
   14a58:	f843 2f2c 	str.w	r2, [r3, #44]!
   14a5c:	6263      	str	r3, [r4, #36]	; 0x24
   14a5e:	2006      	movs	r0, #6
   14a60:	62a7      	str	r7, [r4, #40]	; 0x28
   14a62:	e71d      	b.n	148a0 <__gnu_unwind_pr_common+0xb8>
   14a64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14a66:	459b      	cmp	fp, r3
   14a68:	d180      	bne.n	1496c <__gnu_unwind_pr_common+0x184>
   14a6a:	2104      	movs	r1, #4
   14a6c:	2300      	movs	r3, #0
   14a6e:	eb0b 0201 	add.w	r2, fp, r1
   14a72:	e9c4 730a 	strd	r7, r3, [r4, #40]	; 0x28
   14a76:	e9c4 120c 	strd	r1, r2, [r4, #48]	; 0x30
   14a7a:	f8db 2000 	ldr.w	r2, [fp]
   14a7e:	429a      	cmp	r2, r3
   14a80:	db11      	blt.n	14aa6 <__gnu_unwind_pr_common+0x2be>
   14a82:	2301      	movs	r3, #1
   14a84:	9301      	str	r3, [sp, #4]
   14a86:	e749      	b.n	1491c <__gnu_unwind_pr_common+0x134>
   14a88:	4645      	mov	r5, r8
   14a8a:	f8db 3000 	ldr.w	r3, [fp]
   14a8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
   14a92:	e73f      	b.n	14914 <__gnu_unwind_pr_common+0x12c>
   14a94:	465f      	mov	r7, fp
   14a96:	4630      	mov	r0, r6
   14a98:	210d      	movs	r1, #13
   14a9a:	f7ff fe39 	bl	14710 <_Unwind_GetGR>
   14a9e:	6220      	str	r0, [r4, #32]
   14aa0:	9b04      	ldr	r3, [sp, #16]
   14aa2:	6263      	str	r3, [r4, #36]	; 0x24
   14aa4:	e7db      	b.n	14a5e <__gnu_unwind_pr_common+0x276>
   14aa6:	463b      	mov	r3, r7
   14aa8:	1c58      	adds	r0, r3, #1
   14aaa:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   14aae:	f7ff fc47 	bl	14340 <selfrel_offset31>
   14ab2:	210f      	movs	r1, #15
   14ab4:	4602      	mov	r2, r0
   14ab6:	4630      	mov	r0, r6
   14ab8:	f7ff fe50 	bl	1475c <_Unwind_SetGR>
   14abc:	2300      	movs	r3, #0
   14abe:	4630      	mov	r0, r6
   14ac0:	4622      	mov	r2, r4
   14ac2:	4619      	mov	r1, r3
   14ac4:	f7ff fe4a 	bl	1475c <_Unwind_SetGR>
   14ac8:	2007      	movs	r0, #7
   14aca:	e6e9      	b.n	148a0 <__gnu_unwind_pr_common+0xb8>
   14acc:	0001df05 	.word	0x0001df05

00014ad0 <__aeabi_unwind_cpp_pr0>:
   14ad0:	2300      	movs	r3, #0
   14ad2:	e689      	b.n	147e8 <__gnu_unwind_pr_common>

00014ad4 <__aeabi_unwind_cpp_pr1>:
   14ad4:	2301      	movs	r3, #1
   14ad6:	e687      	b.n	147e8 <__gnu_unwind_pr_common>

00014ad8 <__aeabi_unwind_cpp_pr2>:
   14ad8:	2302      	movs	r3, #2
   14ada:	e685      	b.n	147e8 <__gnu_unwind_pr_common>

00014adc <_Unwind_VRS_Pop>:
   14adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14ae0:	4606      	mov	r6, r0
   14ae2:	b0c3      	sub	sp, #268	; 0x10c
   14ae4:	4615      	mov	r5, r2
   14ae6:	461c      	mov	r4, r3
   14ae8:	2904      	cmp	r1, #4
   14aea:	f200 80bf 	bhi.w	14c6c <_Unwind_VRS_Pop+0x190>
   14aee:	e8df f001 	tbb	[pc, r1]
   14af2:	56a1      	.short	0x56a1
   14af4:	29bd      	.short	0x29bd
   14af6:	03          	.byte	0x03
   14af7:	00          	.byte	0x00
   14af8:	2c00      	cmp	r4, #0
   14afa:	f040 80b7 	bne.w	14c6c <_Unwind_VRS_Pop+0x190>
   14afe:	2a10      	cmp	r2, #16
   14b00:	f200 80b4 	bhi.w	14c6c <_Unwind_VRS_Pop+0x190>
   14b04:	6803      	ldr	r3, [r0, #0]
   14b06:	06df      	lsls	r7, r3, #27
   14b08:	f100 80b4 	bmi.w	14c74 <_Unwind_VRS_Pop+0x198>
   14b0c:	af20      	add	r7, sp, #128	; 0x80
   14b0e:	2401      	movs	r4, #1
   14b10:	4638      	mov	r0, r7
   14b12:	f000 f9ad 	bl	14e70 <__gnu_Unwind_Save_WMMXC>
   14b16:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   14b18:	2300      	movs	r3, #0
   14b1a:	fa04 f103 	lsl.w	r1, r4, r3
   14b1e:	4602      	mov	r2, r0
   14b20:	4229      	tst	r1, r5
   14b22:	d004      	beq.n	14b2e <_Unwind_VRS_Pop+0x52>
   14b24:	f852 1b04 	ldr.w	r1, [r2], #4
   14b28:	4610      	mov	r0, r2
   14b2a:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   14b2e:	3301      	adds	r3, #1
   14b30:	2b04      	cmp	r3, #4
   14b32:	d1f2      	bne.n	14b1a <_Unwind_VRS_Pop+0x3e>
   14b34:	63b0      	str	r0, [r6, #56]	; 0x38
   14b36:	4638      	mov	r0, r7
   14b38:	f000 f990 	bl	14e5c <__gnu_Unwind_Restore_WMMXC>
   14b3c:	2000      	movs	r0, #0
   14b3e:	b043      	add	sp, #268	; 0x10c
   14b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14b44:	2c03      	cmp	r4, #3
   14b46:	f040 8091 	bne.w	14c6c <_Unwind_VRS_Pop+0x190>
   14b4a:	fa1f f882 	uxth.w	r8, r2
   14b4e:	0c14      	lsrs	r4, r2, #16
   14b50:	eb08 4512 	add.w	r5, r8, r2, lsr #16
   14b54:	2d10      	cmp	r5, #16
   14b56:	f200 8089 	bhi.w	14c6c <_Unwind_VRS_Pop+0x190>
   14b5a:	6803      	ldr	r3, [r0, #0]
   14b5c:	071a      	lsls	r2, r3, #28
   14b5e:	f100 80d7 	bmi.w	14d10 <_Unwind_VRS_Pop+0x234>
   14b62:	af20      	add	r7, sp, #128	; 0x80
   14b64:	4638      	mov	r0, r7
   14b66:	f000 f957 	bl	14e18 <__gnu_Unwind_Save_WMMXD>
   14b6a:	6bb5      	ldr	r5, [r6, #56]	; 0x38
   14b6c:	eb07 01c4 	add.w	r1, r7, r4, lsl #3
   14b70:	f1b8 0f00 	cmp.w	r8, #0
   14b74:	d00b      	beq.n	14b8e <_Unwind_VRS_Pop+0xb2>
   14b76:	460b      	mov	r3, r1
   14b78:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
   14b7c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   14b80:	1ae8      	subs	r0, r5, r3
   14b82:	581a      	ldr	r2, [r3, r0]
   14b84:	f843 2b04 	str.w	r2, [r3], #4
   14b88:	428b      	cmp	r3, r1
   14b8a:	d1fa      	bne.n	14b82 <_Unwind_VRS_Pop+0xa6>
   14b8c:	4445      	add	r5, r8
   14b8e:	4638      	mov	r0, r7
   14b90:	63b5      	str	r5, [r6, #56]	; 0x38
   14b92:	f000 f91f 	bl	14dd4 <__gnu_Unwind_Restore_WMMXD>
   14b96:	2000      	movs	r0, #0
   14b98:	b043      	add	sp, #268	; 0x10c
   14b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14b9e:	f004 03fb 	and.w	r3, r4, #251	; 0xfb
   14ba2:	ea4f 4812 	mov.w	r8, r2, lsr #16
   14ba6:	b295      	uxth	r5, r2
   14ba8:	2b01      	cmp	r3, #1
   14baa:	d15f      	bne.n	14c6c <_Unwind_VRS_Pop+0x190>
   14bac:	2c01      	cmp	r4, #1
   14bae:	eb08 0905 	add.w	r9, r8, r5
   14bb2:	d058      	beq.n	14c66 <_Unwind_VRS_Pop+0x18a>
   14bb4:	f1b9 0f20 	cmp.w	r9, #32
   14bb8:	d858      	bhi.n	14c6c <_Unwind_VRS_Pop+0x190>
   14bba:	f1b8 0f0f 	cmp.w	r8, #15
   14bbe:	d97e      	bls.n	14cbe <_Unwind_VRS_Pop+0x1e2>
   14bc0:	2c05      	cmp	r4, #5
   14bc2:	46a9      	mov	r9, r5
   14bc4:	f000 80b3 	beq.w	14d2e <_Unwind_VRS_Pop+0x252>
   14bc8:	2d00      	cmp	r5, #0
   14bca:	d14f      	bne.n	14c6c <_Unwind_VRS_Pop+0x190>
   14bcc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   14bce:	b36d      	cbz	r5, 14c2c <_Unwind_VRS_Pop+0x150>
   14bd0:	af20      	add	r7, sp, #128	; 0x80
   14bd2:	f04f 0900 	mov.w	r9, #0
   14bd6:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   14bda:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   14bde:	3f04      	subs	r7, #4
   14be0:	f853 1b04 	ldr.w	r1, [r3], #4
   14be4:	429d      	cmp	r5, r3
   14be6:	f847 1f04 	str.w	r1, [r7, #4]!
   14bea:	d1f9      	bne.n	14be0 <_Unwind_VRS_Pop+0x104>
   14bec:	f1b9 0f00 	cmp.w	r9, #0
   14bf0:	d00f      	beq.n	14c12 <_Unwind_VRS_Pop+0x136>
   14bf2:	466f      	mov	r7, sp
   14bf4:	4641      	mov	r1, r8
   14bf6:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
   14bfa:	2910      	cmp	r1, #16
   14bfc:	bf38      	it	cc
   14bfe:	2110      	movcc	r1, #16
   14c00:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   14c04:	3984      	subs	r1, #132	; 0x84
   14c06:	f853 0b04 	ldr.w	r0, [r3], #4
   14c0a:	429d      	cmp	r5, r3
   14c0c:	f841 0f04 	str.w	r0, [r1, #4]!
   14c10:	d1f9      	bne.n	14c06 <_Unwind_VRS_Pop+0x12a>
   14c12:	2c01      	cmp	r4, #1
   14c14:	f000 8084 	beq.w	14d20 <_Unwind_VRS_Pop+0x244>
   14c18:	f1b8 0f0f 	cmp.w	r8, #15
   14c1c:	63b5      	str	r5, [r6, #56]	; 0x38
   14c1e:	d973      	bls.n	14d08 <_Unwind_VRS_Pop+0x22c>
   14c20:	f1b9 0f00 	cmp.w	r9, #0
   14c24:	d002      	beq.n	14c2c <_Unwind_VRS_Pop+0x150>
   14c26:	4668      	mov	r0, sp
   14c28:	f000 f8cc 	bl	14dc4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   14c2c:	2000      	movs	r0, #0
   14c2e:	b043      	add	sp, #268	; 0x10c
   14c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14c34:	b9d4      	cbnz	r4, 14c6c <_Unwind_VRS_Pop+0x190>
   14c36:	4623      	mov	r3, r4
   14c38:	b297      	uxth	r7, r2
   14c3a:	6b84      	ldr	r4, [r0, #56]	; 0x38
   14c3c:	f106 0c04 	add.w	ip, r6, #4
   14c40:	2001      	movs	r0, #1
   14c42:	fa00 f103 	lsl.w	r1, r0, r3
   14c46:	4622      	mov	r2, r4
   14c48:	4239      	tst	r1, r7
   14c4a:	d004      	beq.n	14c56 <_Unwind_VRS_Pop+0x17a>
   14c4c:	f852 1b04 	ldr.w	r1, [r2], #4
   14c50:	4614      	mov	r4, r2
   14c52:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
   14c56:	3301      	adds	r3, #1
   14c58:	2b10      	cmp	r3, #16
   14c5a:	d1f2      	bne.n	14c42 <_Unwind_VRS_Pop+0x166>
   14c5c:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
   14c60:	d1e4      	bne.n	14c2c <_Unwind_VRS_Pop+0x150>
   14c62:	63b4      	str	r4, [r6, #56]	; 0x38
   14c64:	e003      	b.n	14c6e <_Unwind_VRS_Pop+0x192>
   14c66:	f1b9 0f10 	cmp.w	r9, #16
   14c6a:	d90b      	bls.n	14c84 <_Unwind_VRS_Pop+0x1a8>
   14c6c:	2002      	movs	r0, #2
   14c6e:	b043      	add	sp, #268	; 0x10c
   14c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14c74:	f023 0310 	bic.w	r3, r3, #16
   14c78:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
   14c7c:	6033      	str	r3, [r6, #0]
   14c7e:	f000 f8f7 	bl	14e70 <__gnu_Unwind_Save_WMMXC>
   14c82:	e743      	b.n	14b0c <_Unwind_VRS_Pop+0x30>
   14c84:	f1b8 0f0f 	cmp.w	r8, #15
   14c88:	d8f0      	bhi.n	14c6c <_Unwind_VRS_Pop+0x190>
   14c8a:	6803      	ldr	r3, [r0, #0]
   14c8c:	07d8      	lsls	r0, r3, #31
   14c8e:	d55f      	bpl.n	14d50 <_Unwind_VRS_Pop+0x274>
   14c90:	f106 0048 	add.w	r0, r6, #72	; 0x48
   14c94:	f023 0303 	bic.w	r3, r3, #3
   14c98:	6033      	str	r3, [r6, #0]
   14c9a:	f000 f887 	bl	14dac <__gnu_Unwind_Save_VFP>
   14c9e:	2c01      	cmp	r4, #1
   14ca0:	d056      	beq.n	14d50 <_Unwind_VRS_Pop+0x274>
   14ca2:	f1b8 0f0f 	cmp.w	r8, #15
   14ca6:	d891      	bhi.n	14bcc <_Unwind_VRS_Pop+0xf0>
   14ca8:	af20      	add	r7, sp, #128	; 0x80
   14caa:	4638      	mov	r0, r7
   14cac:	f000 f886 	bl	14dbc <__gnu_Unwind_Save_VFP_D>
   14cb0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   14cb2:	2d00      	cmp	r5, #0
   14cb4:	d18d      	bne.n	14bd2 <_Unwind_VRS_Pop+0xf6>
   14cb6:	4638      	mov	r0, r7
   14cb8:	f000 f87c 	bl	14db4 <__gnu_Unwind_Restore_VFP_D>
   14cbc:	e7b6      	b.n	14c2c <_Unwind_VRS_Pop+0x150>
   14cbe:	f1b9 0f10 	cmp.w	r9, #16
   14cc2:	d94f      	bls.n	14d64 <_Unwind_VRS_Pop+0x288>
   14cc4:	2c05      	cmp	r4, #5
   14cc6:	d1d1      	bne.n	14c6c <_Unwind_VRS_Pop+0x190>
   14cc8:	6833      	ldr	r3, [r6, #0]
   14cca:	f1a9 0910 	sub.w	r9, r9, #16
   14cce:	07dd      	lsls	r5, r3, #31
   14cd0:	d509      	bpl.n	14ce6 <_Unwind_VRS_Pop+0x20a>
   14cd2:	f023 0301 	bic.w	r3, r3, #1
   14cd6:	4630      	mov	r0, r6
   14cd8:	f043 0302 	orr.w	r3, r3, #2
   14cdc:	f840 3b48 	str.w	r3, [r0], #72
   14ce0:	f000 f86c 	bl	14dbc <__gnu_Unwind_Save_VFP_D>
   14ce4:	6833      	ldr	r3, [r6, #0]
   14ce6:	0759      	lsls	r1, r3, #29
   14ce8:	d427      	bmi.n	14d3a <_Unwind_VRS_Pop+0x25e>
   14cea:	a820      	add	r0, sp, #128	; 0x80
   14cec:	f000 f866 	bl	14dbc <__gnu_Unwind_Save_VFP_D>
   14cf0:	466f      	mov	r7, sp
   14cf2:	f1c8 0510 	rsb	r5, r8, #16
   14cf6:	4638      	mov	r0, r7
   14cf8:	f000 f868 	bl	14dcc <__gnu_Unwind_Save_VFP_D_16_to_31>
   14cfc:	2d00      	cmp	r5, #0
   14cfe:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   14d00:	f77f af78 	ble.w	14bf4 <_Unwind_VRS_Pop+0x118>
   14d04:	af20      	add	r7, sp, #128	; 0x80
   14d06:	e766      	b.n	14bd6 <_Unwind_VRS_Pop+0xfa>
   14d08:	a820      	add	r0, sp, #128	; 0x80
   14d0a:	f000 f853 	bl	14db4 <__gnu_Unwind_Restore_VFP_D>
   14d0e:	e787      	b.n	14c20 <_Unwind_VRS_Pop+0x144>
   14d10:	f023 0308 	bic.w	r3, r3, #8
   14d14:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   14d18:	6033      	str	r3, [r6, #0]
   14d1a:	f000 f87d 	bl	14e18 <__gnu_Unwind_Save_WMMXD>
   14d1e:	e720      	b.n	14b62 <_Unwind_VRS_Pop+0x86>
   14d20:	af20      	add	r7, sp, #128	; 0x80
   14d22:	3504      	adds	r5, #4
   14d24:	4638      	mov	r0, r7
   14d26:	63b5      	str	r5, [r6, #56]	; 0x38
   14d28:	f000 f83c 	bl	14da4 <__gnu_Unwind_Restore_VFP>
   14d2c:	e77e      	b.n	14c2c <_Unwind_VRS_Pop+0x150>
   14d2e:	2d00      	cmp	r5, #0
   14d30:	f43f af4c 	beq.w	14bcc <_Unwind_VRS_Pop+0xf0>
   14d34:	6833      	ldr	r3, [r6, #0]
   14d36:	075a      	lsls	r2, r3, #29
   14d38:	d5da      	bpl.n	14cf0 <_Unwind_VRS_Pop+0x214>
   14d3a:	f023 0304 	bic.w	r3, r3, #4
   14d3e:	4630      	mov	r0, r6
   14d40:	f840 3bd0 	str.w	r3, [r0], #208
   14d44:	f000 f842 	bl	14dcc <__gnu_Unwind_Save_VFP_D_16_to_31>
   14d48:	f1b8 0f0f 	cmp.w	r8, #15
   14d4c:	d8d0      	bhi.n	14cf0 <_Unwind_VRS_Pop+0x214>
   14d4e:	e7cc      	b.n	14cea <_Unwind_VRS_Pop+0x20e>
   14d50:	af20      	add	r7, sp, #128	; 0x80
   14d52:	4638      	mov	r0, r7
   14d54:	f000 f82a 	bl	14dac <__gnu_Unwind_Save_VFP>
   14d58:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   14d5a:	2d00      	cmp	r5, #0
   14d5c:	f47f af39 	bne.w	14bd2 <_Unwind_VRS_Pop+0xf6>
   14d60:	461d      	mov	r5, r3
   14d62:	e7de      	b.n	14d22 <_Unwind_VRS_Pop+0x246>
   14d64:	6833      	ldr	r3, [r6, #0]
   14d66:	07d9      	lsls	r1, r3, #31
   14d68:	d599      	bpl.n	14c9e <_Unwind_VRS_Pop+0x1c2>
   14d6a:	2c05      	cmp	r4, #5
   14d6c:	f106 0048 	add.w	r0, r6, #72	; 0x48
   14d70:	d190      	bne.n	14c94 <_Unwind_VRS_Pop+0x1b8>
   14d72:	f023 0301 	bic.w	r3, r3, #1
   14d76:	af20      	add	r7, sp, #128	; 0x80
   14d78:	f043 0302 	orr.w	r3, r3, #2
   14d7c:	6033      	str	r3, [r6, #0]
   14d7e:	f000 f81d 	bl	14dbc <__gnu_Unwind_Save_VFP_D>
   14d82:	4638      	mov	r0, r7
   14d84:	f000 f81a 	bl	14dbc <__gnu_Unwind_Save_VFP_D>
   14d88:	e792      	b.n	14cb0 <_Unwind_VRS_Pop+0x1d4>
   14d8a:	bf00      	nop

00014d8c <__restore_core_regs>:
   14d8c:	f100 0134 	add.w	r1, r0, #52	; 0x34
   14d90:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   14d94:	469c      	mov	ip, r3
   14d96:	46a6      	mov	lr, r4
   14d98:	f84c 5d04 	str.w	r5, [ip, #-4]!
   14d9c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   14da0:	46e5      	mov	sp, ip
   14da2:	bd00      	pop	{pc}

00014da4 <__gnu_Unwind_Restore_VFP>:
   14da4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   14da8:	4770      	bx	lr
   14daa:	bf00      	nop

00014dac <__gnu_Unwind_Save_VFP>:
   14dac:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   14db0:	4770      	bx	lr
   14db2:	bf00      	nop

00014db4 <__gnu_Unwind_Restore_VFP_D>:
   14db4:	ec90 0b20 	vldmia	r0, {d0-d15}
   14db8:	4770      	bx	lr
   14dba:	bf00      	nop

00014dbc <__gnu_Unwind_Save_VFP_D>:
   14dbc:	ec80 0b20 	vstmia	r0, {d0-d15}
   14dc0:	4770      	bx	lr
   14dc2:	bf00      	nop

00014dc4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   14dc4:	ecd0 0b20 	vldmia	r0, {d16-d31}
   14dc8:	4770      	bx	lr
   14dca:	bf00      	nop

00014dcc <__gnu_Unwind_Save_VFP_D_16_to_31>:
   14dcc:	ecc0 0b20 	vstmia	r0, {d16-d31}
   14dd0:	4770      	bx	lr
   14dd2:	bf00      	nop

00014dd4 <__gnu_Unwind_Restore_WMMXD>:
   14dd4:	ecf0 0102 	ldfe	f0, [r0], #8
   14dd8:	ecf0 1102 	ldfe	f1, [r0], #8
   14ddc:	ecf0 2102 	ldfe	f2, [r0], #8
   14de0:	ecf0 3102 	ldfe	f3, [r0], #8
   14de4:	ecf0 4102 	ldfe	f4, [r0], #8
   14de8:	ecf0 5102 	ldfe	f5, [r0], #8
   14dec:	ecf0 6102 	ldfe	f6, [r0], #8
   14df0:	ecf0 7102 	ldfe	f7, [r0], #8
   14df4:	ecf0 8102 	ldfp	f0, [r0], #8
   14df8:	ecf0 9102 	ldfp	f1, [r0], #8
   14dfc:	ecf0 a102 	ldfp	f2, [r0], #8
   14e00:	ecf0 b102 	ldfp	f3, [r0], #8
   14e04:	ecf0 c102 	ldfp	f4, [r0], #8
   14e08:	ecf0 d102 	ldfp	f5, [r0], #8
   14e0c:	ecf0 e102 	ldfp	f6, [r0], #8
   14e10:	ecf0 f102 	ldfp	f7, [r0], #8
   14e14:	4770      	bx	lr
   14e16:	bf00      	nop

00014e18 <__gnu_Unwind_Save_WMMXD>:
   14e18:	ece0 0102 	stfe	f0, [r0], #8
   14e1c:	ece0 1102 	stfe	f1, [r0], #8
   14e20:	ece0 2102 	stfe	f2, [r0], #8
   14e24:	ece0 3102 	stfe	f3, [r0], #8
   14e28:	ece0 4102 	stfe	f4, [r0], #8
   14e2c:	ece0 5102 	stfe	f5, [r0], #8
   14e30:	ece0 6102 	stfe	f6, [r0], #8
   14e34:	ece0 7102 	stfe	f7, [r0], #8
   14e38:	ece0 8102 	stfp	f0, [r0], #8
   14e3c:	ece0 9102 	stfp	f1, [r0], #8
   14e40:	ece0 a102 	stfp	f2, [r0], #8
   14e44:	ece0 b102 	stfp	f3, [r0], #8
   14e48:	ece0 c102 	stfp	f4, [r0], #8
   14e4c:	ece0 d102 	stfp	f5, [r0], #8
   14e50:	ece0 e102 	stfp	f6, [r0], #8
   14e54:	ece0 f102 	stfp	f7, [r0], #8
   14e58:	4770      	bx	lr
   14e5a:	bf00      	nop

00014e5c <__gnu_Unwind_Restore_WMMXC>:
   14e5c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   14e60:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   14e64:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   14e68:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   14e6c:	4770      	bx	lr
   14e6e:	bf00      	nop

00014e70 <__gnu_Unwind_Save_WMMXC>:
   14e70:	fca0 8101 	stc2	1, cr8, [r0], #4
   14e74:	fca0 9101 	stc2	1, cr9, [r0], #4
   14e78:	fca0 a101 	stc2	1, cr10, [r0], #4
   14e7c:	fca0 b101 	stc2	1, cr11, [r0], #4
   14e80:	4770      	bx	lr
   14e82:	bf00      	nop

00014e84 <_Unwind_RaiseException>:
   14e84:	46ec      	mov	ip, sp
   14e86:	b500      	push	{lr}
   14e88:	e92d 5000 	stmdb	sp!, {ip, lr}
   14e8c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   14e90:	f04f 0300 	mov.w	r3, #0
   14e94:	e92d 000c 	stmdb	sp!, {r2, r3}
   14e98:	a901      	add	r1, sp, #4
   14e9a:	f7ff fbb1 	bl	14600 <__gnu_Unwind_RaiseException>
   14e9e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   14ea2:	b012      	add	sp, #72	; 0x48
   14ea4:	4770      	bx	lr
   14ea6:	bf00      	nop

00014ea8 <_Unwind_Resume>:
   14ea8:	46ec      	mov	ip, sp
   14eaa:	b500      	push	{lr}
   14eac:	e92d 5000 	stmdb	sp!, {ip, lr}
   14eb0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   14eb4:	f04f 0300 	mov.w	r3, #0
   14eb8:	e92d 000c 	stmdb	sp!, {r2, r3}
   14ebc:	a901      	add	r1, sp, #4
   14ebe:	f7ff fbd9 	bl	14674 <__gnu_Unwind_Resume>
   14ec2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   14ec6:	b012      	add	sp, #72	; 0x48
   14ec8:	4770      	bx	lr
   14eca:	bf00      	nop

00014ecc <_Unwind_Resume_or_Rethrow>:
   14ecc:	46ec      	mov	ip, sp
   14ece:	b500      	push	{lr}
   14ed0:	e92d 5000 	stmdb	sp!, {ip, lr}
   14ed4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   14ed8:	f04f 0300 	mov.w	r3, #0
   14edc:	e92d 000c 	stmdb	sp!, {r2, r3}
   14ee0:	a901      	add	r1, sp, #4
   14ee2:	f7ff fbe9 	bl	146b8 <__gnu_Unwind_Resume_or_Rethrow>
   14ee6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   14eea:	b012      	add	sp, #72	; 0x48
   14eec:	4770      	bx	lr
   14eee:	bf00      	nop

00014ef0 <_Unwind_ForcedUnwind>:
   14ef0:	46ec      	mov	ip, sp
   14ef2:	b500      	push	{lr}
   14ef4:	e92d 5000 	stmdb	sp!, {ip, lr}
   14ef8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   14efc:	f04f 0300 	mov.w	r3, #0
   14f00:	e92d 000c 	stmdb	sp!, {r2, r3}
   14f04:	ab01      	add	r3, sp, #4
   14f06:	f7ff fbab 	bl	14660 <__gnu_Unwind_ForcedUnwind>
   14f0a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   14f0e:	b012      	add	sp, #72	; 0x48
   14f10:	4770      	bx	lr
   14f12:	bf00      	nop

00014f14 <_Unwind_Backtrace>:
   14f14:	46ec      	mov	ip, sp
   14f16:	b500      	push	{lr}
   14f18:	e92d 5000 	stmdb	sp!, {ip, lr}
   14f1c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   14f20:	f04f 0300 	mov.w	r3, #0
   14f24:	e92d 000c 	stmdb	sp!, {r2, r3}
   14f28:	aa01      	add	r2, sp, #4
   14f2a:	f7ff fc23 	bl	14774 <__gnu_Unwind_Backtrace>
   14f2e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   14f32:	b012      	add	sp, #72	; 0x48
   14f34:	4770      	bx	lr
   14f36:	bf00      	nop

00014f38 <next_unwind_byte>:
   14f38:	7a02      	ldrb	r2, [r0, #8]
   14f3a:	4603      	mov	r3, r0
   14f3c:	b97a      	cbnz	r2, 14f5e <next_unwind_byte+0x26>
   14f3e:	7a42      	ldrb	r2, [r0, #9]
   14f40:	b1a2      	cbz	r2, 14f6c <next_unwind_byte+0x34>
   14f42:	6841      	ldr	r1, [r0, #4]
   14f44:	3a01      	subs	r2, #1
   14f46:	b430      	push	{r4, r5}
   14f48:	7242      	strb	r2, [r0, #9]
   14f4a:	2403      	movs	r4, #3
   14f4c:	6808      	ldr	r0, [r1, #0]
   14f4e:	1d0d      	adds	r5, r1, #4
   14f50:	721c      	strb	r4, [r3, #8]
   14f52:	0202      	lsls	r2, r0, #8
   14f54:	605d      	str	r5, [r3, #4]
   14f56:	0e00      	lsrs	r0, r0, #24
   14f58:	601a      	str	r2, [r3, #0]
   14f5a:	bc30      	pop	{r4, r5}
   14f5c:	4770      	bx	lr
   14f5e:	6800      	ldr	r0, [r0, #0]
   14f60:	3a01      	subs	r2, #1
   14f62:	721a      	strb	r2, [r3, #8]
   14f64:	0202      	lsls	r2, r0, #8
   14f66:	0e00      	lsrs	r0, r0, #24
   14f68:	601a      	str	r2, [r3, #0]
   14f6a:	4770      	bx	lr
   14f6c:	20b0      	movs	r0, #176	; 0xb0
   14f6e:	4770      	bx	lr

00014f70 <_Unwind_GetGR.constprop.0>:
   14f70:	b500      	push	{lr}
   14f72:	b085      	sub	sp, #20
   14f74:	2300      	movs	r3, #0
   14f76:	220c      	movs	r2, #12
   14f78:	a903      	add	r1, sp, #12
   14f7a:	9100      	str	r1, [sp, #0]
   14f7c:	4619      	mov	r1, r3
   14f7e:	f7ff fbad 	bl	146dc <_Unwind_VRS_Get>
   14f82:	9803      	ldr	r0, [sp, #12]
   14f84:	b005      	add	sp, #20
   14f86:	f85d fb04 	ldr.w	pc, [sp], #4
   14f8a:	bf00      	nop

00014f8c <unwind_UCB_from_context>:
   14f8c:	e7f0      	b.n	14f70 <_Unwind_GetGR.constprop.0>
   14f8e:	bf00      	nop

00014f90 <__gnu_unwind_execute>:
   14f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14f94:	f04f 0800 	mov.w	r8, #0
   14f98:	b085      	sub	sp, #20
   14f9a:	4606      	mov	r6, r0
   14f9c:	460d      	mov	r5, r1
   14f9e:	4628      	mov	r0, r5
   14fa0:	f7ff ffca 	bl	14f38 <next_unwind_byte>
   14fa4:	28b0      	cmp	r0, #176	; 0xb0
   14fa6:	4604      	mov	r4, r0
   14fa8:	f000 80bd 	beq.w	15126 <__gnu_unwind_execute+0x196>
   14fac:	0607      	lsls	r7, r0, #24
   14fae:	d520      	bpl.n	14ff2 <__gnu_unwind_execute+0x62>
   14fb0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   14fb4:	2b80      	cmp	r3, #128	; 0x80
   14fb6:	d04e      	beq.n	15056 <__gnu_unwind_execute+0xc6>
   14fb8:	2b90      	cmp	r3, #144	; 0x90
   14fba:	d037      	beq.n	1502c <__gnu_unwind_execute+0x9c>
   14fbc:	2ba0      	cmp	r3, #160	; 0xa0
   14fbe:	d061      	beq.n	15084 <__gnu_unwind_execute+0xf4>
   14fc0:	2bb0      	cmp	r3, #176	; 0xb0
   14fc2:	d076      	beq.n	150b2 <__gnu_unwind_execute+0x122>
   14fc4:	2bc0      	cmp	r3, #192	; 0xc0
   14fc6:	f000 808d 	beq.w	150e4 <__gnu_unwind_execute+0x154>
   14fca:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   14fce:	2bd0      	cmp	r3, #208	; 0xd0
   14fd0:	d10b      	bne.n	14fea <__gnu_unwind_execute+0x5a>
   14fd2:	f000 0207 	and.w	r2, r0, #7
   14fd6:	2101      	movs	r1, #1
   14fd8:	2305      	movs	r3, #5
   14fda:	4630      	mov	r0, r6
   14fdc:	440a      	add	r2, r1
   14fde:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   14fe2:	f7ff fd7b 	bl	14adc <_Unwind_VRS_Pop>
   14fe6:	2800      	cmp	r0, #0
   14fe8:	d0d9      	beq.n	14f9e <__gnu_unwind_execute+0xe>
   14fea:	2009      	movs	r0, #9
   14fec:	b005      	add	sp, #20
   14fee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14ff2:	0087      	lsls	r7, r0, #2
   14ff4:	f10d 090c 	add.w	r9, sp, #12
   14ff8:	2300      	movs	r3, #0
   14ffa:	220d      	movs	r2, #13
   14ffc:	b2ff      	uxtb	r7, r7
   14ffe:	4630      	mov	r0, r6
   15000:	4619      	mov	r1, r3
   15002:	f8cd 9000 	str.w	r9, [sp]
   15006:	f7ff fb69 	bl	146dc <_Unwind_VRS_Get>
   1500a:	3704      	adds	r7, #4
   1500c:	9b03      	ldr	r3, [sp, #12]
   1500e:	0660      	lsls	r0, r4, #25
   15010:	f04f 020d 	mov.w	r2, #13
   15014:	4630      	mov	r0, r6
   15016:	bf4c      	ite	mi
   15018:	1bdf      	submi	r7, r3, r7
   1501a:	18ff      	addpl	r7, r7, r3
   1501c:	2300      	movs	r3, #0
   1501e:	f8cd 9000 	str.w	r9, [sp]
   15022:	9703      	str	r7, [sp, #12]
   15024:	4619      	mov	r1, r3
   15026:	f7ff fb7f 	bl	14728 <_Unwind_VRS_Set>
   1502a:	e7b8      	b.n	14f9e <__gnu_unwind_execute+0xe>
   1502c:	f000 030d 	and.w	r3, r0, #13
   15030:	2b0d      	cmp	r3, #13
   15032:	d0da      	beq.n	14fea <__gnu_unwind_execute+0x5a>
   15034:	af03      	add	r7, sp, #12
   15036:	2300      	movs	r3, #0
   15038:	f000 020f 	and.w	r2, r0, #15
   1503c:	4630      	mov	r0, r6
   1503e:	4619      	mov	r1, r3
   15040:	9700      	str	r7, [sp, #0]
   15042:	f7ff fb4b 	bl	146dc <_Unwind_VRS_Get>
   15046:	2300      	movs	r3, #0
   15048:	220d      	movs	r2, #13
   1504a:	4630      	mov	r0, r6
   1504c:	4619      	mov	r1, r3
   1504e:	9700      	str	r7, [sp, #0]
   15050:	f7ff fb6a 	bl	14728 <_Unwind_VRS_Set>
   15054:	e7a3      	b.n	14f9e <__gnu_unwind_execute+0xe>
   15056:	0224      	lsls	r4, r4, #8
   15058:	4628      	mov	r0, r5
   1505a:	f7ff ff6d 	bl	14f38 <next_unwind_byte>
   1505e:	4320      	orrs	r0, r4
   15060:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   15064:	d0c1      	beq.n	14fea <__gnu_unwind_execute+0x5a>
   15066:	0104      	lsls	r4, r0, #4
   15068:	2300      	movs	r3, #0
   1506a:	4630      	mov	r0, r6
   1506c:	b2a2      	uxth	r2, r4
   1506e:	4619      	mov	r1, r3
   15070:	f7ff fd34 	bl	14adc <_Unwind_VRS_Pop>
   15074:	2800      	cmp	r0, #0
   15076:	d1b8      	bne.n	14fea <__gnu_unwind_execute+0x5a>
   15078:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   1507c:	bf18      	it	ne
   1507e:	f04f 0801 	movne.w	r8, #1
   15082:	e78c      	b.n	14f9e <__gnu_unwind_execute+0xe>
   15084:	43c3      	mvns	r3, r0
   15086:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   1508a:	0701      	lsls	r1, r0, #28
   1508c:	4630      	mov	r0, r6
   1508e:	f003 0307 	and.w	r3, r3, #7
   15092:	fa42 f203 	asr.w	r2, r2, r3
   15096:	f04f 0300 	mov.w	r3, #0
   1509a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1509e:	4619      	mov	r1, r3
   150a0:	bf48      	it	mi
   150a2:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   150a6:	f7ff fd19 	bl	14adc <_Unwind_VRS_Pop>
   150aa:	2800      	cmp	r0, #0
   150ac:	f43f af77 	beq.w	14f9e <__gnu_unwind_execute+0xe>
   150b0:	e79b      	b.n	14fea <__gnu_unwind_execute+0x5a>
   150b2:	28b1      	cmp	r0, #177	; 0xb1
   150b4:	d03c      	beq.n	15130 <__gnu_unwind_execute+0x1a0>
   150b6:	28b2      	cmp	r0, #178	; 0xb2
   150b8:	f000 80b0 	beq.w	1521c <__gnu_unwind_execute+0x28c>
   150bc:	28b3      	cmp	r0, #179	; 0xb3
   150be:	d04a      	beq.n	15156 <__gnu_unwind_execute+0x1c6>
   150c0:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   150c4:	2bb4      	cmp	r3, #180	; 0xb4
   150c6:	d090      	beq.n	14fea <__gnu_unwind_execute+0x5a>
   150c8:	f000 0207 	and.w	r2, r0, #7
   150cc:	2301      	movs	r3, #1
   150ce:	4630      	mov	r0, r6
   150d0:	441a      	add	r2, r3
   150d2:	4619      	mov	r1, r3
   150d4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   150d8:	f7ff fd00 	bl	14adc <_Unwind_VRS_Pop>
   150dc:	2800      	cmp	r0, #0
   150de:	f43f af5e 	beq.w	14f9e <__gnu_unwind_execute+0xe>
   150e2:	e782      	b.n	14fea <__gnu_unwind_execute+0x5a>
   150e4:	28c6      	cmp	r0, #198	; 0xc6
   150e6:	d04f      	beq.n	15188 <__gnu_unwind_execute+0x1f8>
   150e8:	28c7      	cmp	r0, #199	; 0xc7
   150ea:	d061      	beq.n	151b0 <__gnu_unwind_execute+0x220>
   150ec:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   150f0:	2bc0      	cmp	r3, #192	; 0xc0
   150f2:	d070      	beq.n	151d6 <__gnu_unwind_execute+0x246>
   150f4:	28c8      	cmp	r0, #200	; 0xc8
   150f6:	d07c      	beq.n	151f2 <__gnu_unwind_execute+0x262>
   150f8:	28c9      	cmp	r0, #201	; 0xc9
   150fa:	f47f af76 	bne.w	14fea <__gnu_unwind_execute+0x5a>
   150fe:	4628      	mov	r0, r5
   15100:	f7ff ff1a 	bl	14f38 <next_unwind_byte>
   15104:	2305      	movs	r3, #5
   15106:	4602      	mov	r2, r0
   15108:	2101      	movs	r1, #1
   1510a:	4630      	mov	r0, r6
   1510c:	0314      	lsls	r4, r2, #12
   1510e:	f002 020f 	and.w	r2, r2, #15
   15112:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
   15116:	440a      	add	r2, r1
   15118:	4322      	orrs	r2, r4
   1511a:	f7ff fcdf 	bl	14adc <_Unwind_VRS_Pop>
   1511e:	2800      	cmp	r0, #0
   15120:	f43f af3d 	beq.w	14f9e <__gnu_unwind_execute+0xe>
   15124:	e761      	b.n	14fea <__gnu_unwind_execute+0x5a>
   15126:	f1b8 0f00 	cmp.w	r8, #0
   1512a:	d01c      	beq.n	15166 <__gnu_unwind_execute+0x1d6>
   1512c:	2000      	movs	r0, #0
   1512e:	e75d      	b.n	14fec <__gnu_unwind_execute+0x5c>
   15130:	4628      	mov	r0, r5
   15132:	f7ff ff01 	bl	14f38 <next_unwind_byte>
   15136:	4602      	mov	r2, r0
   15138:	2800      	cmp	r0, #0
   1513a:	f43f af56 	beq.w	14fea <__gnu_unwind_execute+0x5a>
   1513e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   15142:	f47f af52 	bne.w	14fea <__gnu_unwind_execute+0x5a>
   15146:	4619      	mov	r1, r3
   15148:	4630      	mov	r0, r6
   1514a:	f7ff fcc7 	bl	14adc <_Unwind_VRS_Pop>
   1514e:	2800      	cmp	r0, #0
   15150:	f43f af25 	beq.w	14f9e <__gnu_unwind_execute+0xe>
   15154:	e749      	b.n	14fea <__gnu_unwind_execute+0x5a>
   15156:	4628      	mov	r0, r5
   15158:	f7ff feee 	bl	14f38 <next_unwind_byte>
   1515c:	2301      	movs	r3, #1
   1515e:	4602      	mov	r2, r0
   15160:	4630      	mov	r0, r6
   15162:	4619      	mov	r1, r3
   15164:	e7d2      	b.n	1510c <__gnu_unwind_execute+0x17c>
   15166:	ac03      	add	r4, sp, #12
   15168:	4643      	mov	r3, r8
   1516a:	220e      	movs	r2, #14
   1516c:	4641      	mov	r1, r8
   1516e:	4630      	mov	r0, r6
   15170:	9400      	str	r4, [sp, #0]
   15172:	f7ff fab3 	bl	146dc <_Unwind_VRS_Get>
   15176:	4630      	mov	r0, r6
   15178:	4643      	mov	r3, r8
   1517a:	220f      	movs	r2, #15
   1517c:	4641      	mov	r1, r8
   1517e:	9400      	str	r4, [sp, #0]
   15180:	f7ff fad2 	bl	14728 <_Unwind_VRS_Set>
   15184:	4640      	mov	r0, r8
   15186:	e731      	b.n	14fec <__gnu_unwind_execute+0x5c>
   15188:	4628      	mov	r0, r5
   1518a:	f7ff fed5 	bl	14f38 <next_unwind_byte>
   1518e:	4602      	mov	r2, r0
   15190:	2303      	movs	r3, #3
   15192:	4630      	mov	r0, r6
   15194:	0314      	lsls	r4, r2, #12
   15196:	f002 020f 	and.w	r2, r2, #15
   1519a:	4619      	mov	r1, r3
   1519c:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
   151a0:	3201      	adds	r2, #1
   151a2:	4322      	orrs	r2, r4
   151a4:	f7ff fc9a 	bl	14adc <_Unwind_VRS_Pop>
   151a8:	2800      	cmp	r0, #0
   151aa:	f43f aef8 	beq.w	14f9e <__gnu_unwind_execute+0xe>
   151ae:	e71c      	b.n	14fea <__gnu_unwind_execute+0x5a>
   151b0:	4628      	mov	r0, r5
   151b2:	f7ff fec1 	bl	14f38 <next_unwind_byte>
   151b6:	4602      	mov	r2, r0
   151b8:	2800      	cmp	r0, #0
   151ba:	f43f af16 	beq.w	14fea <__gnu_unwind_execute+0x5a>
   151be:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   151c2:	f47f af12 	bne.w	14fea <__gnu_unwind_execute+0x5a>
   151c6:	2104      	movs	r1, #4
   151c8:	4630      	mov	r0, r6
   151ca:	f7ff fc87 	bl	14adc <_Unwind_VRS_Pop>
   151ce:	2800      	cmp	r0, #0
   151d0:	f43f aee5 	beq.w	14f9e <__gnu_unwind_execute+0xe>
   151d4:	e709      	b.n	14fea <__gnu_unwind_execute+0x5a>
   151d6:	f000 020f 	and.w	r2, r0, #15
   151da:	2303      	movs	r3, #3
   151dc:	4630      	mov	r0, r6
   151de:	3201      	adds	r2, #1
   151e0:	4619      	mov	r1, r3
   151e2:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   151e6:	f7ff fc79 	bl	14adc <_Unwind_VRS_Pop>
   151ea:	2800      	cmp	r0, #0
   151ec:	f43f aed7 	beq.w	14f9e <__gnu_unwind_execute+0xe>
   151f0:	e6fb      	b.n	14fea <__gnu_unwind_execute+0x5a>
   151f2:	4628      	mov	r0, r5
   151f4:	f7ff fea0 	bl	14f38 <next_unwind_byte>
   151f8:	4602      	mov	r2, r0
   151fa:	2101      	movs	r1, #1
   151fc:	2305      	movs	r3, #5
   151fe:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
   15202:	f002 020f 	and.w	r2, r2, #15
   15206:	4630      	mov	r0, r6
   15208:	3410      	adds	r4, #16
   1520a:	440a      	add	r2, r1
   1520c:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
   15210:	f7ff fc64 	bl	14adc <_Unwind_VRS_Pop>
   15214:	2800      	cmp	r0, #0
   15216:	f43f aec2 	beq.w	14f9e <__gnu_unwind_execute+0xe>
   1521a:	e6e6      	b.n	14fea <__gnu_unwind_execute+0x5a>
   1521c:	2300      	movs	r3, #0
   1521e:	f10d 090c 	add.w	r9, sp, #12
   15222:	220d      	movs	r2, #13
   15224:	4630      	mov	r0, r6
   15226:	4619      	mov	r1, r3
   15228:	f8cd 9000 	str.w	r9, [sp]
   1522c:	f7ff fa56 	bl	146dc <_Unwind_VRS_Get>
   15230:	4628      	mov	r0, r5
   15232:	f7ff fe81 	bl	14f38 <next_unwind_byte>
   15236:	0602      	lsls	r2, r0, #24
   15238:	f04f 0402 	mov.w	r4, #2
   1523c:	d50b      	bpl.n	15256 <__gnu_unwind_execute+0x2c6>
   1523e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   15242:	9a03      	ldr	r2, [sp, #12]
   15244:	4628      	mov	r0, r5
   15246:	40a3      	lsls	r3, r4
   15248:	3407      	adds	r4, #7
   1524a:	4413      	add	r3, r2
   1524c:	9303      	str	r3, [sp, #12]
   1524e:	f7ff fe73 	bl	14f38 <next_unwind_byte>
   15252:	0603      	lsls	r3, r0, #24
   15254:	d4f3      	bmi.n	1523e <__gnu_unwind_execute+0x2ae>
   15256:	9a03      	ldr	r2, [sp, #12]
   15258:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1525c:	2300      	movs	r3, #0
   1525e:	f8cd 9000 	str.w	r9, [sp]
   15262:	fa00 f404 	lsl.w	r4, r0, r4
   15266:	f502 7001 	add.w	r0, r2, #516	; 0x204
   1526a:	4619      	mov	r1, r3
   1526c:	220d      	movs	r2, #13
   1526e:	4404      	add	r4, r0
   15270:	4630      	mov	r0, r6
   15272:	9403      	str	r4, [sp, #12]
   15274:	f7ff fa58 	bl	14728 <_Unwind_VRS_Set>
   15278:	e691      	b.n	14f9e <__gnu_unwind_execute+0xe>
   1527a:	bf00      	nop

0001527c <__gnu_unwind_frame>:
   1527c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   1527e:	460b      	mov	r3, r1
   15280:	b530      	push	{r4, r5, lr}
   15282:	4618      	mov	r0, r3
   15284:	b085      	sub	sp, #20
   15286:	6853      	ldr	r3, [r2, #4]
   15288:	2503      	movs	r5, #3
   1528a:	f102 0408 	add.w	r4, r2, #8
   1528e:	a901      	add	r1, sp, #4
   15290:	021b      	lsls	r3, r3, #8
   15292:	f88d 500c 	strb.w	r5, [sp, #12]
   15296:	79d2      	ldrb	r2, [r2, #7]
   15298:	e9cd 3401 	strd	r3, r4, [sp, #4]
   1529c:	f88d 200d 	strb.w	r2, [sp, #13]
   152a0:	f7ff fe76 	bl	14f90 <__gnu_unwind_execute>
   152a4:	b005      	add	sp, #20
   152a6:	bd30      	pop	{r4, r5, pc}

000152a8 <_Unwind_GetRegionStart>:
   152a8:	b508      	push	{r3, lr}
   152aa:	f7ff fe6f 	bl	14f8c <unwind_UCB_from_context>
   152ae:	6c80      	ldr	r0, [r0, #72]	; 0x48
   152b0:	bd08      	pop	{r3, pc}
   152b2:	bf00      	nop

000152b4 <_Unwind_GetLanguageSpecificData>:
   152b4:	b508      	push	{r3, lr}
   152b6:	f7ff fe69 	bl	14f8c <unwind_UCB_from_context>
   152ba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   152bc:	79c3      	ldrb	r3, [r0, #7]
   152be:	3302      	adds	r3, #2
   152c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   152c4:	bd08      	pop	{r3, pc}
   152c6:	bf00      	nop

000152c8 <__aeabi_d2uiz>:
   152c8:	004a      	lsls	r2, r1, #1
   152ca:	d211      	bcs.n	152f0 <__aeabi_d2uiz+0x28>
   152cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   152d0:	d211      	bcs.n	152f6 <__aeabi_d2uiz+0x2e>
   152d2:	d50d      	bpl.n	152f0 <__aeabi_d2uiz+0x28>
   152d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   152d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   152dc:	d40e      	bmi.n	152fc <__aeabi_d2uiz+0x34>
   152de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   152e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   152e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   152ea:	fa23 f002 	lsr.w	r0, r3, r2
   152ee:	4770      	bx	lr
   152f0:	f04f 0000 	mov.w	r0, #0
   152f4:	4770      	bx	lr
   152f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   152fa:	d102      	bne.n	15302 <__aeabi_d2uiz+0x3a>
   152fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   15300:	4770      	bx	lr
   15302:	f04f 0000 	mov.w	r0, #0
   15306:	4770      	bx	lr

00015308 <CountLeadingZeros32>:
   15308:	b480      	push	{r7}
   1530a:	b083      	sub	sp, #12
   1530c:	af00      	add	r7, sp, #0
   1530e:	6078      	str	r0, [r7, #4]
   15310:	687b      	ldr	r3, [r7, #4]
   15312:	2b00      	cmp	r3, #0
   15314:	d101      	bne.n	1531a <CountLeadingZeros32+0x12>
   15316:	2320      	movs	r3, #32
   15318:	e002      	b.n	15320 <CountLeadingZeros32+0x18>
   1531a:	687b      	ldr	r3, [r7, #4]
   1531c:	fab3 f383 	clz	r3, r3
   15320:	4618      	mov	r0, r3
   15322:	370c      	adds	r7, #12
   15324:	46bd      	mov	sp, r7
   15326:	bc80      	pop	{r7}
   15328:	4770      	bx	lr

0001532a <MostSignificantBit32>:
   1532a:	b580      	push	{r7, lr}
   1532c:	b082      	sub	sp, #8
   1532e:	af00      	add	r7, sp, #0
   15330:	6078      	str	r0, [r7, #4]
   15332:	6878      	ldr	r0, [r7, #4]
   15334:	f7ff ffe8 	bl	15308 <CountLeadingZeros32>
   15338:	4603      	mov	r3, r0
   1533a:	f1c3 0320 	rsb	r3, r3, #32
   1533e:	4618      	mov	r0, r3
   15340:	3708      	adds	r7, #8
   15342:	46bd      	mov	sp, r7
   15344:	bd80      	pop	{r7, pc}

00015346 <FrontendProcessSamples>:
   15346:	b580      	push	{r7, lr}
   15348:	b08c      	sub	sp, #48	; 0x30
   1534a:	af00      	add	r7, sp, #0
   1534c:	60f8      	str	r0, [r7, #12]
   1534e:	60b9      	str	r1, [r7, #8]
   15350:	607a      	str	r2, [r7, #4]
   15352:	603b      	str	r3, [r7, #0]
   15354:	2300      	movs	r3, #0
   15356:	617b      	str	r3, [r7, #20]
   15358:	2300      	movs	r3, #0
   1535a:	61bb      	str	r3, [r7, #24]
   1535c:	68b8      	ldr	r0, [r7, #8]
   1535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   15360:	683a      	ldr	r2, [r7, #0]
   15362:	6879      	ldr	r1, [r7, #4]
   15364:	f000 fa49 	bl	157fa <WindowProcessSamples>
   15368:	4603      	mov	r3, r0
   1536a:	2b00      	cmp	r3, #0
   1536c:	d108      	bne.n	15380 <FrontendProcessSamples+0x3a>
   1536e:	68fb      	ldr	r3, [r7, #12]
   15370:	461a      	mov	r2, r3
   15372:	f107 0314 	add.w	r3, r7, #20
   15376:	e893 0003 	ldmia.w	r3, {r0, r1}
   1537a:	e882 0003 	stmia.w	r2, {r0, r1}
   1537e:	e05a      	b.n	15436 <FrontendProcessSamples+0xf0>
   15380:	68bb      	ldr	r3, [r7, #8]
   15382:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
   15386:	4618      	mov	r0, r3
   15388:	f7ff ffcf 	bl	1532a <MostSignificantBit32>
   1538c:	4603      	mov	r3, r0
   1538e:	f1c3 030f 	rsb	r3, r3, #15
   15392:	62fb      	str	r3, [r7, #44]	; 0x2c
   15394:	68bb      	ldr	r3, [r7, #8]
   15396:	f103 001c 	add.w	r0, r3, #28
   1539a:	68bb      	ldr	r3, [r7, #8]
   1539c:	695b      	ldr	r3, [r3, #20]
   1539e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   153a0:	4619      	mov	r1, r3
   153a2:	f00e fb43 	bl	23a2c <FftCompute>
   153a6:	68bb      	ldr	r3, [r7, #8]
   153a8:	6a1b      	ldr	r3, [r3, #32]
   153aa:	62bb      	str	r3, [r7, #40]	; 0x28
   153ac:	68bb      	ldr	r3, [r7, #8]
   153ae:	f103 0034 	add.w	r0, r3, #52	; 0x34
   153b2:	68bb      	ldr	r3, [r7, #8]
   153b4:	6a1b      	ldr	r3, [r3, #32]
   153b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   153b8:	4619      	mov	r1, r3
   153ba:	f000 fb13 	bl	159e4 <FilterbankConvertFftComplexToEnergy>
   153be:	68bb      	ldr	r3, [r7, #8]
   153c0:	3334      	adds	r3, #52	; 0x34
   153c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   153c4:	4618      	mov	r0, r3
   153c6:	f000 fb4b 	bl	15a60 <FilterbankAccumulateChannels>
   153ca:	68bb      	ldr	r3, [r7, #8]
   153cc:	3334      	adds	r3, #52	; 0x34
   153ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
   153d0:	4618      	mov	r0, r3
   153d2:	f000 fd04 	bl	15dde <FilterbankSqrt>
   153d6:	6278      	str	r0, [r7, #36]	; 0x24
   153d8:	68bb      	ldr	r3, [r7, #8]
   153da:	3358      	adds	r3, #88	; 0x58
   153dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   153de:	4618      	mov	r0, r3
   153e0:	f000 f86a 	bl	154b8 <NoiseReductionApply>
   153e4:	68bb      	ldr	r3, [r7, #8]
   153e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   153e8:	2b00      	cmp	r3, #0
   153ea:	d005      	beq.n	153f8 <FrontendProcessSamples+0xb2>
   153ec:	68bb      	ldr	r3, [r7, #8]
   153ee:	336c      	adds	r3, #108	; 0x6c
   153f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   153f2:	4618      	mov	r0, r3
   153f4:	f000 f9ae 	bl	15754 <PcanGainControlApply>
   153f8:	68bb      	ldr	r3, [r7, #8]
   153fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   153fc:	4618      	mov	r0, r3
   153fe:	f7ff ff94 	bl	1532a <MostSignificantBit32>
   15402:	4603      	mov	r3, r0
   15404:	3b07      	subs	r3, #7
   15406:	623b      	str	r3, [r7, #32]
   15408:	68bb      	ldr	r3, [r7, #8]
   1540a:	f103 0080 	add.w	r0, r3, #128	; 0x80
   1540e:	68bb      	ldr	r3, [r7, #8]
   15410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   15412:	6a3b      	ldr	r3, [r7, #32]
   15414:	6a79      	ldr	r1, [r7, #36]	; 0x24
   15416:	f7fa f9d0 	bl	f7ba <LogScaleApply>
   1541a:	61f8      	str	r0, [r7, #28]
   1541c:	68bb      	ldr	r3, [r7, #8]
   1541e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15420:	61bb      	str	r3, [r7, #24]
   15422:	69fb      	ldr	r3, [r7, #28]
   15424:	617b      	str	r3, [r7, #20]
   15426:	68fb      	ldr	r3, [r7, #12]
   15428:	461a      	mov	r2, r3
   1542a:	f107 0314 	add.w	r3, r7, #20
   1542e:	e893 0003 	ldmia.w	r3, {r0, r1}
   15432:	e882 0003 	stmia.w	r2, {r0, r1}
   15436:	68f8      	ldr	r0, [r7, #12]
   15438:	3730      	adds	r7, #48	; 0x30
   1543a:	46bd      	mov	sp, r7
   1543c:	bd80      	pop	{r7, pc}

0001543e <FrontendReset>:
   1543e:	b580      	push	{r7, lr}
   15440:	b082      	sub	sp, #8
   15442:	af00      	add	r7, sp, #0
   15444:	6078      	str	r0, [r7, #4]
   15446:	687b      	ldr	r3, [r7, #4]
   15448:	4618      	mov	r0, r3
   1544a:	f000 fa62 	bl	15912 <WindowReset>
   1544e:	687b      	ldr	r3, [r7, #4]
   15450:	331c      	adds	r3, #28
   15452:	4618      	mov	r0, r3
   15454:	f00e fb06 	bl	23a64 <FftReset>
   15458:	687b      	ldr	r3, [r7, #4]
   1545a:	3334      	adds	r3, #52	; 0x34
   1545c:	4618      	mov	r0, r3
   1545e:	f000 fcef 	bl	15e40 <FilterbankReset>
   15462:	687b      	ldr	r3, [r7, #4]
   15464:	3358      	adds	r3, #88	; 0x58
   15466:	4618      	mov	r0, r3
   15468:	f000 f8cd 	bl	15606 <NoiseReductionReset>
   1546c:	bf00      	nop
   1546e:	3708      	adds	r7, #8
   15470:	46bd      	mov	sp, r7
   15472:	bd80      	pop	{r7, pc}

00015474 <LogScaleFillConfigWithDefaults>:
   15474:	b480      	push	{r7}
   15476:	b083      	sub	sp, #12
   15478:	af00      	add	r7, sp, #0
   1547a:	6078      	str	r0, [r7, #4]
   1547c:	687b      	ldr	r3, [r7, #4]
   1547e:	2201      	movs	r2, #1
   15480:	601a      	str	r2, [r3, #0]
   15482:	687b      	ldr	r3, [r7, #4]
   15484:	2206      	movs	r2, #6
   15486:	605a      	str	r2, [r3, #4]
   15488:	bf00      	nop
   1548a:	370c      	adds	r7, #12
   1548c:	46bd      	mov	sp, r7
   1548e:	bc80      	pop	{r7}
   15490:	4770      	bx	lr

00015492 <LogScalePopulateState>:
   15492:	b480      	push	{r7}
   15494:	b083      	sub	sp, #12
   15496:	af00      	add	r7, sp, #0
   15498:	6078      	str	r0, [r7, #4]
   1549a:	6039      	str	r1, [r7, #0]
   1549c:	687b      	ldr	r3, [r7, #4]
   1549e:	681a      	ldr	r2, [r3, #0]
   154a0:	683b      	ldr	r3, [r7, #0]
   154a2:	601a      	str	r2, [r3, #0]
   154a4:	687b      	ldr	r3, [r7, #4]
   154a6:	685a      	ldr	r2, [r3, #4]
   154a8:	683b      	ldr	r3, [r7, #0]
   154aa:	605a      	str	r2, [r3, #4]
   154ac:	2301      	movs	r3, #1
   154ae:	4618      	mov	r0, r3
   154b0:	370c      	adds	r7, #12
   154b2:	46bd      	mov	sp, r7
   154b4:	bc80      	pop	{r7}
   154b6:	4770      	bx	lr

000154b8 <NoiseReductionApply>:
   154b8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   154bc:	b08a      	sub	sp, #40	; 0x28
   154be:	af00      	add	r7, sp, #0
   154c0:	6078      	str	r0, [r7, #4]
   154c2:	6039      	str	r1, [r7, #0]
   154c4:	2300      	movs	r3, #0
   154c6:	627b      	str	r3, [r7, #36]	; 0x24
   154c8:	e090      	b.n	155ec <NoiseReductionApply+0x134>
   154ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   154cc:	f003 0301 	and.w	r3, r3, #1
   154d0:	2b00      	cmp	r3, #0
   154d2:	d102      	bne.n	154da <NoiseReductionApply+0x22>
   154d4:	687b      	ldr	r3, [r7, #4]
   154d6:	889b      	ldrh	r3, [r3, #4]
   154d8:	e001      	b.n	154de <NoiseReductionApply+0x26>
   154da:	687b      	ldr	r3, [r7, #4]
   154dc:	88db      	ldrh	r3, [r3, #6]
   154de:	61fb      	str	r3, [r7, #28]
   154e0:	69fb      	ldr	r3, [r7, #28]
   154e2:	f5c3 4380 	rsb	r3, r3, #16384	; 0x4000
   154e6:	61bb      	str	r3, [r7, #24]
   154e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   154ea:	009b      	lsls	r3, r3, #2
   154ec:	683a      	ldr	r2, [r7, #0]
   154ee:	4413      	add	r3, r2
   154f0:	681a      	ldr	r2, [r3, #0]
   154f2:	687b      	ldr	r3, [r7, #4]
   154f4:	681b      	ldr	r3, [r3, #0]
   154f6:	fa02 f303 	lsl.w	r3, r2, r3
   154fa:	617b      	str	r3, [r7, #20]
   154fc:	697b      	ldr	r3, [r7, #20]
   154fe:	4618      	mov	r0, r3
   15500:	f04f 0100 	mov.w	r1, #0
   15504:	69fb      	ldr	r3, [r7, #28]
   15506:	461a      	mov	r2, r3
   15508:	f04f 0300 	mov.w	r3, #0
   1550c:	fb02 fc01 	mul.w	ip, r2, r1
   15510:	fb00 f603 	mul.w	r6, r0, r3
   15514:	4466      	add	r6, ip
   15516:	fba0 0102 	umull	r0, r1, r0, r2
   1551a:	1873      	adds	r3, r6, r1
   1551c:	4619      	mov	r1, r3
   1551e:	687b      	ldr	r3, [r7, #4]
   15520:	691a      	ldr	r2, [r3, #16]
   15522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15524:	009b      	lsls	r3, r3, #2
   15526:	4413      	add	r3, r2
   15528:	681b      	ldr	r3, [r3, #0]
   1552a:	4698      	mov	r8, r3
   1552c:	f04f 0900 	mov.w	r9, #0
   15530:	69bb      	ldr	r3, [r7, #24]
   15532:	461a      	mov	r2, r3
   15534:	f04f 0300 	mov.w	r3, #0
   15538:	fb02 fc09 	mul.w	ip, r2, r9
   1553c:	fb08 f603 	mul.w	r6, r8, r3
   15540:	4466      	add	r6, ip
   15542:	fba8 2302 	umull	r2, r3, r8, r2
   15546:	441e      	add	r6, r3
   15548:	4633      	mov	r3, r6
   1554a:	1884      	adds	r4, r0, r2
   1554c:	eb41 0503 	adc.w	r5, r1, r3
   15550:	f04f 0200 	mov.w	r2, #0
   15554:	f04f 0300 	mov.w	r3, #0
   15558:	0ba2      	lsrs	r2, r4, #14
   1555a:	ea42 4285 	orr.w	r2, r2, r5, lsl #18
   1555e:	0bab      	lsrs	r3, r5, #14
   15560:	4613      	mov	r3, r2
   15562:	623b      	str	r3, [r7, #32]
   15564:	687b      	ldr	r3, [r7, #4]
   15566:	691a      	ldr	r2, [r3, #16]
   15568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1556a:	009b      	lsls	r3, r3, #2
   1556c:	4413      	add	r3, r2
   1556e:	6a3a      	ldr	r2, [r7, #32]
   15570:	601a      	str	r2, [r3, #0]
   15572:	6a3a      	ldr	r2, [r7, #32]
   15574:	697b      	ldr	r3, [r7, #20]
   15576:	429a      	cmp	r2, r3
   15578:	d901      	bls.n	1557e <NoiseReductionApply+0xc6>
   1557a:	697b      	ldr	r3, [r7, #20]
   1557c:	623b      	str	r3, [r7, #32]
   1557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15580:	009b      	lsls	r3, r3, #2
   15582:	683a      	ldr	r2, [r7, #0]
   15584:	4413      	add	r3, r2
   15586:	681b      	ldr	r3, [r3, #0]
   15588:	4618      	mov	r0, r3
   1558a:	f04f 0100 	mov.w	r1, #0
   1558e:	687b      	ldr	r3, [r7, #4]
   15590:	891b      	ldrh	r3, [r3, #8]
   15592:	b29a      	uxth	r2, r3
   15594:	f04f 0300 	mov.w	r3, #0
   15598:	fb02 fc01 	mul.w	ip, r2, r1
   1559c:	fb00 f603 	mul.w	r6, r0, r3
   155a0:	4466      	add	r6, ip
   155a2:	fba0 2302 	umull	r2, r3, r0, r2
   155a6:	18f1      	adds	r1, r6, r3
   155a8:	460b      	mov	r3, r1
   155aa:	f04f 0000 	mov.w	r0, #0
   155ae:	f04f 0100 	mov.w	r1, #0
   155b2:	0b90      	lsrs	r0, r2, #14
   155b4:	ea40 4083 	orr.w	r0, r0, r3, lsl #18
   155b8:	0b99      	lsrs	r1, r3, #14
   155ba:	4603      	mov	r3, r0
   155bc:	613b      	str	r3, [r7, #16]
   155be:	697a      	ldr	r2, [r7, #20]
   155c0:	6a3b      	ldr	r3, [r7, #32]
   155c2:	1ad2      	subs	r2, r2, r3
   155c4:	687b      	ldr	r3, [r7, #4]
   155c6:	681b      	ldr	r3, [r3, #0]
   155c8:	fa22 f303 	lsr.w	r3, r2, r3
   155cc:	60fb      	str	r3, [r7, #12]
   155ce:	693a      	ldr	r2, [r7, #16]
   155d0:	68fb      	ldr	r3, [r7, #12]
   155d2:	4293      	cmp	r3, r2
   155d4:	bf38      	it	cc
   155d6:	4613      	movcc	r3, r2
   155d8:	60bb      	str	r3, [r7, #8]
   155da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   155dc:	009b      	lsls	r3, r3, #2
   155de:	683a      	ldr	r2, [r7, #0]
   155e0:	4413      	add	r3, r2
   155e2:	68ba      	ldr	r2, [r7, #8]
   155e4:	601a      	str	r2, [r3, #0]
   155e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   155e8:	3301      	adds	r3, #1
   155ea:	627b      	str	r3, [r7, #36]	; 0x24
   155ec:	687b      	ldr	r3, [r7, #4]
   155ee:	68db      	ldr	r3, [r3, #12]
   155f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   155f2:	429a      	cmp	r2, r3
   155f4:	f6ff af69 	blt.w	154ca <NoiseReductionApply+0x12>
   155f8:	bf00      	nop
   155fa:	bf00      	nop
   155fc:	3728      	adds	r7, #40	; 0x28
   155fe:	46bd      	mov	sp, r7
   15600:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   15604:	4770      	bx	lr

00015606 <NoiseReductionReset>:
   15606:	b580      	push	{r7, lr}
   15608:	b082      	sub	sp, #8
   1560a:	af00      	add	r7, sp, #0
   1560c:	6078      	str	r0, [r7, #4]
   1560e:	687b      	ldr	r3, [r7, #4]
   15610:	6918      	ldr	r0, [r3, #16]
   15612:	687b      	ldr	r3, [r7, #4]
   15614:	68db      	ldr	r3, [r3, #12]
   15616:	009b      	lsls	r3, r3, #2
   15618:	461a      	mov	r2, r3
   1561a:	2100      	movs	r1, #0
   1561c:	f00e ff62 	bl	244e4 <memset>
   15620:	bf00      	nop
   15622:	3708      	adds	r7, #8
   15624:	46bd      	mov	sp, r7
   15626:	bd80      	pop	{r7, pc}

00015628 <CountLeadingZeros32>:
   15628:	b480      	push	{r7}
   1562a:	b083      	sub	sp, #12
   1562c:	af00      	add	r7, sp, #0
   1562e:	6078      	str	r0, [r7, #4]
   15630:	687b      	ldr	r3, [r7, #4]
   15632:	2b00      	cmp	r3, #0
   15634:	d101      	bne.n	1563a <CountLeadingZeros32+0x12>
   15636:	2320      	movs	r3, #32
   15638:	e002      	b.n	15640 <CountLeadingZeros32+0x18>
   1563a:	687b      	ldr	r3, [r7, #4]
   1563c:	fab3 f383 	clz	r3, r3
   15640:	4618      	mov	r0, r3
   15642:	370c      	adds	r7, #12
   15644:	46bd      	mov	sp, r7
   15646:	bc80      	pop	{r7}
   15648:	4770      	bx	lr

0001564a <MostSignificantBit32>:
   1564a:	b580      	push	{r7, lr}
   1564c:	b082      	sub	sp, #8
   1564e:	af00      	add	r7, sp, #0
   15650:	6078      	str	r0, [r7, #4]
   15652:	6878      	ldr	r0, [r7, #4]
   15654:	f7ff ffe8 	bl	15628 <CountLeadingZeros32>
   15658:	4603      	mov	r3, r0
   1565a:	f1c3 0320 	rsb	r3, r3, #32
   1565e:	4618      	mov	r0, r3
   15660:	3708      	adds	r7, #8
   15662:	46bd      	mov	sp, r7
   15664:	bd80      	pop	{r7, pc}

00015666 <WideDynamicFunction>:
   15666:	b580      	push	{r7, lr}
   15668:	b084      	sub	sp, #16
   1566a:	af00      	add	r7, sp, #0
   1566c:	6078      	str	r0, [r7, #4]
   1566e:	6039      	str	r1, [r7, #0]
   15670:	687b      	ldr	r3, [r7, #4]
   15672:	2b02      	cmp	r3, #2
   15674:	d806      	bhi.n	15684 <WideDynamicFunction+0x1e>
   15676:	687b      	ldr	r3, [r7, #4]
   15678:	005b      	lsls	r3, r3, #1
   1567a:	683a      	ldr	r2, [r7, #0]
   1567c:	4413      	add	r3, r2
   1567e:	f9b3 3000 	ldrsh.w	r3, [r3]
   15682:	e04e      	b.n	15722 <WideDynamicFunction+0xbc>
   15684:	6878      	ldr	r0, [r7, #4]
   15686:	f7ff ffe0 	bl	1564a <MostSignificantBit32>
   1568a:	4603      	mov	r3, r0
   1568c:	81fb      	strh	r3, [r7, #14]
   1568e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   15692:	00db      	lsls	r3, r3, #3
   15694:	3b0c      	subs	r3, #12
   15696:	683a      	ldr	r2, [r7, #0]
   15698:	4413      	add	r3, r2
   1569a:	603b      	str	r3, [r7, #0]
   1569c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   156a0:	2b0a      	cmp	r3, #10
   156a2:	dc0b      	bgt.n	156bc <WideDynamicFunction+0x56>
   156a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   156a8:	f1c3 030b 	rsb	r3, r3, #11
   156ac:	687a      	ldr	r2, [r7, #4]
   156ae:	fa02 f303 	lsl.w	r3, r2, r3
   156b2:	b21b      	sxth	r3, r3
   156b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
   156b8:	b21b      	sxth	r3, r3
   156ba:	e009      	b.n	156d0 <WideDynamicFunction+0x6a>
   156bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
   156c0:	3b0b      	subs	r3, #11
   156c2:	687a      	ldr	r2, [r7, #4]
   156c4:	fa22 f303 	lsr.w	r3, r2, r3
   156c8:	b21b      	sxth	r3, r3
   156ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
   156ce:	b21b      	sxth	r3, r3
   156d0:	81bb      	strh	r3, [r7, #12]
   156d2:	683b      	ldr	r3, [r7, #0]
   156d4:	3304      	adds	r3, #4
   156d6:	f9b3 3000 	ldrsh.w	r3, [r3]
   156da:	461a      	mov	r2, r3
   156dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
   156e0:	fb03 f302 	mul.w	r3, r3, r2
   156e4:	115b      	asrs	r3, r3, #5
   156e6:	60bb      	str	r3, [r7, #8]
   156e8:	683b      	ldr	r3, [r7, #0]
   156ea:	3302      	adds	r3, #2
   156ec:	f9b3 3000 	ldrsh.w	r3, [r3]
   156f0:	015b      	lsls	r3, r3, #5
   156f2:	461a      	mov	r2, r3
   156f4:	68bb      	ldr	r3, [r7, #8]
   156f6:	4413      	add	r3, r2
   156f8:	60bb      	str	r3, [r7, #8]
   156fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
   156fe:	68bb      	ldr	r3, [r7, #8]
   15700:	fb02 f303 	mul.w	r3, r2, r3
   15704:	60bb      	str	r3, [r7, #8]
   15706:	68bb      	ldr	r3, [r7, #8]
   15708:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   1570c:	13db      	asrs	r3, r3, #15
   1570e:	60bb      	str	r3, [r7, #8]
   15710:	683b      	ldr	r3, [r7, #0]
   15712:	f9b3 3000 	ldrsh.w	r3, [r3]
   15716:	461a      	mov	r2, r3
   15718:	68bb      	ldr	r3, [r7, #8]
   1571a:	4413      	add	r3, r2
   1571c:	60bb      	str	r3, [r7, #8]
   1571e:	68bb      	ldr	r3, [r7, #8]
   15720:	b21b      	sxth	r3, r3
   15722:	4618      	mov	r0, r3
   15724:	3710      	adds	r7, #16
   15726:	46bd      	mov	sp, r7
   15728:	bd80      	pop	{r7, pc}

0001572a <PcanShrink>:
   1572a:	b480      	push	{r7}
   1572c:	b083      	sub	sp, #12
   1572e:	af00      	add	r7, sp, #0
   15730:	6078      	str	r0, [r7, #4]
   15732:	687b      	ldr	r3, [r7, #4]
   15734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
   15738:	d204      	bcs.n	15744 <PcanShrink+0x1a>
   1573a:	687b      	ldr	r3, [r7, #4]
   1573c:	fb03 f303 	mul.w	r3, r3, r3
   15740:	0d1b      	lsrs	r3, r3, #20
   15742:	e002      	b.n	1574a <PcanShrink+0x20>
   15744:	687b      	ldr	r3, [r7, #4]
   15746:	099b      	lsrs	r3, r3, #6
   15748:	3b40      	subs	r3, #64	; 0x40
   1574a:	4618      	mov	r0, r3
   1574c:	370c      	adds	r7, #12
   1574e:	46bd      	mov	sp, r7
   15750:	bc80      	pop	{r7}
   15752:	4770      	bx	lr

00015754 <PcanGainControlApply>:
   15754:	b5f0      	push	{r4, r5, r6, r7, lr}
   15756:	b087      	sub	sp, #28
   15758:	af00      	add	r7, sp, #0
   1575a:	6078      	str	r0, [r7, #4]
   1575c:	6039      	str	r1, [r7, #0]
   1575e:	2300      	movs	r3, #0
   15760:	617b      	str	r3, [r7, #20]
   15762:	e040      	b.n	157e6 <PcanGainControlApply+0x92>
   15764:	687b      	ldr	r3, [r7, #4]
   15766:	685a      	ldr	r2, [r3, #4]
   15768:	697b      	ldr	r3, [r7, #20]
   1576a:	009b      	lsls	r3, r3, #2
   1576c:	4413      	add	r3, r2
   1576e:	681a      	ldr	r2, [r3, #0]
   15770:	687b      	ldr	r3, [r7, #4]
   15772:	68db      	ldr	r3, [r3, #12]
   15774:	4619      	mov	r1, r3
   15776:	4610      	mov	r0, r2
   15778:	f7ff ff75 	bl	15666 <WideDynamicFunction>
   1577c:	4603      	mov	r3, r0
   1577e:	613b      	str	r3, [r7, #16]
   15780:	697b      	ldr	r3, [r7, #20]
   15782:	009b      	lsls	r3, r3, #2
   15784:	683a      	ldr	r2, [r7, #0]
   15786:	4413      	add	r3, r2
   15788:	681b      	ldr	r3, [r3, #0]
   1578a:	4618      	mov	r0, r3
   1578c:	f04f 0100 	mov.w	r1, #0
   15790:	693b      	ldr	r3, [r7, #16]
   15792:	461a      	mov	r2, r3
   15794:	f04f 0300 	mov.w	r3, #0
   15798:	fb02 fc01 	mul.w	ip, r2, r1
   1579c:	fb00 f603 	mul.w	r6, r0, r3
   157a0:	4466      	add	r6, ip
   157a2:	fba0 2302 	umull	r2, r3, r0, r2
   157a6:	18f1      	adds	r1, r6, r3
   157a8:	460b      	mov	r3, r1
   157aa:	6879      	ldr	r1, [r7, #4]
   157ac:	6909      	ldr	r1, [r1, #16]
   157ae:	f1c1 0620 	rsb	r6, r1, #32
   157b2:	f1a1 0020 	sub.w	r0, r1, #32
   157b6:	fa22 f401 	lsr.w	r4, r2, r1
   157ba:	fa03 f606 	lsl.w	r6, r3, r6
   157be:	4334      	orrs	r4, r6
   157c0:	fa23 f000 	lsr.w	r0, r3, r0
   157c4:	4304      	orrs	r4, r0
   157c6:	fa23 f501 	lsr.w	r5, r3, r1
   157ca:	4623      	mov	r3, r4
   157cc:	60fb      	str	r3, [r7, #12]
   157ce:	697b      	ldr	r3, [r7, #20]
   157d0:	009b      	lsls	r3, r3, #2
   157d2:	683a      	ldr	r2, [r7, #0]
   157d4:	18d6      	adds	r6, r2, r3
   157d6:	68f8      	ldr	r0, [r7, #12]
   157d8:	f7ff ffa7 	bl	1572a <PcanShrink>
   157dc:	4603      	mov	r3, r0
   157de:	6033      	str	r3, [r6, #0]
   157e0:	697b      	ldr	r3, [r7, #20]
   157e2:	3301      	adds	r3, #1
   157e4:	617b      	str	r3, [r7, #20]
   157e6:	687b      	ldr	r3, [r7, #4]
   157e8:	689b      	ldr	r3, [r3, #8]
   157ea:	697a      	ldr	r2, [r7, #20]
   157ec:	429a      	cmp	r2, r3
   157ee:	dbb9      	blt.n	15764 <PcanGainControlApply+0x10>
   157f0:	bf00      	nop
   157f2:	bf00      	nop
   157f4:	371c      	adds	r7, #28
   157f6:	46bd      	mov	sp, r7
   157f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000157fa <WindowProcessSamples>:
   157fa:	b580      	push	{r7, lr}
   157fc:	b08c      	sub	sp, #48	; 0x30
   157fe:	af00      	add	r7, sp, #0
   15800:	60f8      	str	r0, [r7, #12]
   15802:	60b9      	str	r1, [r7, #8]
   15804:	607a      	str	r2, [r7, #4]
   15806:	603b      	str	r3, [r7, #0]
   15808:	68fb      	ldr	r3, [r7, #12]
   1580a:	681b      	ldr	r3, [r3, #0]
   1580c:	617b      	str	r3, [r7, #20]
   1580e:	68fb      	ldr	r3, [r7, #12]
   15810:	681a      	ldr	r2, [r3, #0]
   15812:	68fb      	ldr	r3, [r7, #12]
   15814:	691b      	ldr	r3, [r3, #16]
   15816:	1ad3      	subs	r3, r2, r3
   15818:	62fb      	str	r3, [r7, #44]	; 0x2c
   1581a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1581c:	687b      	ldr	r3, [r7, #4]
   1581e:	429a      	cmp	r2, r3
   15820:	d901      	bls.n	15826 <WindowProcessSamples+0x2c>
   15822:	687b      	ldr	r3, [r7, #4]
   15824:	62fb      	str	r3, [r7, #44]	; 0x2c
   15826:	68fb      	ldr	r3, [r7, #12]
   15828:	68da      	ldr	r2, [r3, #12]
   1582a:	68fb      	ldr	r3, [r7, #12]
   1582c:	691b      	ldr	r3, [r3, #16]
   1582e:	005b      	lsls	r3, r3, #1
   15830:	18d0      	adds	r0, r2, r3
   15832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15834:	005b      	lsls	r3, r3, #1
   15836:	461a      	mov	r2, r3
   15838:	68b9      	ldr	r1, [r7, #8]
   1583a:	f00e fe2c 	bl	24496 <memcpy>
   1583e:	683b      	ldr	r3, [r7, #0]
   15840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   15842:	601a      	str	r2, [r3, #0]
   15844:	68fb      	ldr	r3, [r7, #12]
   15846:	691a      	ldr	r2, [r3, #16]
   15848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1584a:	441a      	add	r2, r3
   1584c:	68fb      	ldr	r3, [r7, #12]
   1584e:	611a      	str	r2, [r3, #16]
   15850:	68fb      	ldr	r3, [r7, #12]
   15852:	691a      	ldr	r2, [r3, #16]
   15854:	68fb      	ldr	r3, [r7, #12]
   15856:	681b      	ldr	r3, [r3, #0]
   15858:	429a      	cmp	r2, r3
   1585a:	d201      	bcs.n	15860 <WindowProcessSamples+0x66>
   1585c:	2300      	movs	r3, #0
   1585e:	e054      	b.n	1590a <WindowProcessSamples+0x110>
   15860:	68fb      	ldr	r3, [r7, #12]
   15862:	685b      	ldr	r3, [r3, #4]
   15864:	62bb      	str	r3, [r7, #40]	; 0x28
   15866:	68fb      	ldr	r3, [r7, #12]
   15868:	68db      	ldr	r3, [r3, #12]
   1586a:	627b      	str	r3, [r7, #36]	; 0x24
   1586c:	68fb      	ldr	r3, [r7, #12]
   1586e:	695b      	ldr	r3, [r3, #20]
   15870:	623b      	str	r3, [r7, #32]
   15872:	2300      	movs	r3, #0
   15874:	837b      	strh	r3, [r7, #26]
   15876:	2300      	movs	r3, #0
   15878:	61fb      	str	r3, [r7, #28]
   1587a:	e026      	b.n	158ca <WindowProcessSamples+0xd0>
   1587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1587e:	1c9a      	adds	r2, r3, #2
   15880:	627a      	str	r2, [r7, #36]	; 0x24
   15882:	f9b3 3000 	ldrsh.w	r3, [r3]
   15886:	4619      	mov	r1, r3
   15888:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1588a:	1c9a      	adds	r2, r3, #2
   1588c:	62ba      	str	r2, [r7, #40]	; 0x28
   1588e:	f9b3 3000 	ldrsh.w	r3, [r3]
   15892:	fb03 f301 	mul.w	r3, r3, r1
   15896:	131b      	asrs	r3, r3, #12
   15898:	833b      	strh	r3, [r7, #24]
   1589a:	6a3b      	ldr	r3, [r7, #32]
   1589c:	1c9a      	adds	r2, r3, #2
   1589e:	623a      	str	r2, [r7, #32]
   158a0:	8b3a      	ldrh	r2, [r7, #24]
   158a2:	801a      	strh	r2, [r3, #0]
   158a4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
   158a8:	2b00      	cmp	r3, #0
   158aa:	da03      	bge.n	158b4 <WindowProcessSamples+0xba>
   158ac:	8b3b      	ldrh	r3, [r7, #24]
   158ae:	425b      	negs	r3, r3
   158b0:	b29b      	uxth	r3, r3
   158b2:	833b      	strh	r3, [r7, #24]
   158b4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
   158b8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
   158bc:	429a      	cmp	r2, r3
   158be:	dd01      	ble.n	158c4 <WindowProcessSamples+0xca>
   158c0:	8b3b      	ldrh	r3, [r7, #24]
   158c2:	837b      	strh	r3, [r7, #26]
   158c4:	69fb      	ldr	r3, [r7, #28]
   158c6:	3301      	adds	r3, #1
   158c8:	61fb      	str	r3, [r7, #28]
   158ca:	69fa      	ldr	r2, [r7, #28]
   158cc:	697b      	ldr	r3, [r7, #20]
   158ce:	429a      	cmp	r2, r3
   158d0:	dbd4      	blt.n	1587c <WindowProcessSamples+0x82>
   158d2:	68fb      	ldr	r3, [r7, #12]
   158d4:	68d8      	ldr	r0, [r3, #12]
   158d6:	68fb      	ldr	r3, [r7, #12]
   158d8:	68da      	ldr	r2, [r3, #12]
   158da:	68fb      	ldr	r3, [r7, #12]
   158dc:	689b      	ldr	r3, [r3, #8]
   158de:	005b      	lsls	r3, r3, #1
   158e0:	18d1      	adds	r1, r2, r3
   158e2:	68fb      	ldr	r3, [r7, #12]
   158e4:	681a      	ldr	r2, [r3, #0]
   158e6:	68fb      	ldr	r3, [r7, #12]
   158e8:	689b      	ldr	r3, [r3, #8]
   158ea:	1ad3      	subs	r3, r2, r3
   158ec:	005b      	lsls	r3, r3, #1
   158ee:	461a      	mov	r2, r3
   158f0:	f00e fdde 	bl	244b0 <memmove>
   158f4:	68fb      	ldr	r3, [r7, #12]
   158f6:	691a      	ldr	r2, [r3, #16]
   158f8:	68fb      	ldr	r3, [r7, #12]
   158fa:	689b      	ldr	r3, [r3, #8]
   158fc:	1ad2      	subs	r2, r2, r3
   158fe:	68fb      	ldr	r3, [r7, #12]
   15900:	611a      	str	r2, [r3, #16]
   15902:	68fb      	ldr	r3, [r7, #12]
   15904:	8b7a      	ldrh	r2, [r7, #26]
   15906:	831a      	strh	r2, [r3, #24]
   15908:	2301      	movs	r3, #1
   1590a:	4618      	mov	r0, r3
   1590c:	3730      	adds	r7, #48	; 0x30
   1590e:	46bd      	mov	sp, r7
   15910:	bd80      	pop	{r7, pc}

00015912 <WindowReset>:
   15912:	b580      	push	{r7, lr}
   15914:	b082      	sub	sp, #8
   15916:	af00      	add	r7, sp, #0
   15918:	6078      	str	r0, [r7, #4]
   1591a:	687b      	ldr	r3, [r7, #4]
   1591c:	68d8      	ldr	r0, [r3, #12]
   1591e:	687b      	ldr	r3, [r7, #4]
   15920:	681b      	ldr	r3, [r3, #0]
   15922:	005b      	lsls	r3, r3, #1
   15924:	461a      	mov	r2, r3
   15926:	2100      	movs	r1, #0
   15928:	f00e fddc 	bl	244e4 <memset>
   1592c:	687b      	ldr	r3, [r7, #4]
   1592e:	6958      	ldr	r0, [r3, #20]
   15930:	687b      	ldr	r3, [r7, #4]
   15932:	681b      	ldr	r3, [r3, #0]
   15934:	005b      	lsls	r3, r3, #1
   15936:	461a      	mov	r2, r3
   15938:	2100      	movs	r1, #0
   1593a:	f00e fdd3 	bl	244e4 <memset>
   1593e:	687b      	ldr	r3, [r7, #4]
   15940:	2200      	movs	r2, #0
   15942:	611a      	str	r2, [r3, #16]
   15944:	687b      	ldr	r3, [r7, #4]
   15946:	2200      	movs	r2, #0
   15948:	831a      	strh	r2, [r3, #24]
   1594a:	bf00      	nop
   1594c:	3708      	adds	r7, #8
   1594e:	46bd      	mov	sp, r7
   15950:	bd80      	pop	{r7, pc}

00015952 <CountLeadingZeros32>:
   15952:	b480      	push	{r7}
   15954:	b083      	sub	sp, #12
   15956:	af00      	add	r7, sp, #0
   15958:	6078      	str	r0, [r7, #4]
   1595a:	687b      	ldr	r3, [r7, #4]
   1595c:	2b00      	cmp	r3, #0
   1595e:	d101      	bne.n	15964 <CountLeadingZeros32+0x12>
   15960:	2320      	movs	r3, #32
   15962:	e002      	b.n	1596a <CountLeadingZeros32+0x18>
   15964:	687b      	ldr	r3, [r7, #4]
   15966:	fab3 f383 	clz	r3, r3
   1596a:	4618      	mov	r0, r3
   1596c:	370c      	adds	r7, #12
   1596e:	46bd      	mov	sp, r7
   15970:	bc80      	pop	{r7}
   15972:	4770      	bx	lr

00015974 <MostSignificantBit32>:
   15974:	b580      	push	{r7, lr}
   15976:	b082      	sub	sp, #8
   15978:	af00      	add	r7, sp, #0
   1597a:	6078      	str	r0, [r7, #4]
   1597c:	6878      	ldr	r0, [r7, #4]
   1597e:	f7ff ffe8 	bl	15952 <CountLeadingZeros32>
   15982:	4603      	mov	r3, r0
   15984:	f1c3 0320 	rsb	r3, r3, #32
   15988:	4618      	mov	r0, r3
   1598a:	3708      	adds	r7, #8
   1598c:	46bd      	mov	sp, r7
   1598e:	bd80      	pop	{r7, pc}

00015990 <CountLeadingZeros64>:
   15990:	b480      	push	{r7}
   15992:	b083      	sub	sp, #12
   15994:	af00      	add	r7, sp, #0
   15996:	e9c7 0100 	strd	r0, r1, [r7]
   1599a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1599e:	4313      	orrs	r3, r2
   159a0:	d101      	bne.n	159a6 <CountLeadingZeros64+0x16>
   159a2:	2340      	movs	r3, #64	; 0x40
   159a4:	e009      	b.n	159ba <CountLeadingZeros64+0x2a>
   159a6:	e9d7 2300 	ldrd	r2, r3, [r7]
   159aa:	2b00      	cmp	r3, #0
   159ac:	d002      	beq.n	159b4 <CountLeadingZeros64+0x24>
   159ae:	fab3 f383 	clz	r3, r3
   159b2:	e002      	b.n	159ba <CountLeadingZeros64+0x2a>
   159b4:	fab2 f382 	clz	r3, r2
   159b8:	3320      	adds	r3, #32
   159ba:	4618      	mov	r0, r3
   159bc:	370c      	adds	r7, #12
   159be:	46bd      	mov	sp, r7
   159c0:	bc80      	pop	{r7}
   159c2:	4770      	bx	lr

000159c4 <MostSignificantBit64>:
   159c4:	b580      	push	{r7, lr}
   159c6:	b082      	sub	sp, #8
   159c8:	af00      	add	r7, sp, #0
   159ca:	e9c7 0100 	strd	r0, r1, [r7]
   159ce:	e9d7 0100 	ldrd	r0, r1, [r7]
   159d2:	f7ff ffdd 	bl	15990 <CountLeadingZeros64>
   159d6:	4603      	mov	r3, r0
   159d8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   159dc:	4618      	mov	r0, r3
   159de:	3708      	adds	r7, #8
   159e0:	46bd      	mov	sp, r7
   159e2:	bd80      	pop	{r7, pc}

000159e4 <FilterbankConvertFftComplexToEnergy>:
   159e4:	b480      	push	{r7}
   159e6:	b08b      	sub	sp, #44	; 0x2c
   159e8:	af00      	add	r7, sp, #0
   159ea:	60f8      	str	r0, [r7, #12]
   159ec:	60b9      	str	r1, [r7, #8]
   159ee:	607a      	str	r2, [r7, #4]
   159f0:	68fb      	ldr	r3, [r7, #12]
   159f2:	689b      	ldr	r3, [r3, #8]
   159f4:	623b      	str	r3, [r7, #32]
   159f6:	68fb      	ldr	r3, [r7, #12]
   159f8:	685b      	ldr	r3, [r3, #4]
   159fa:	009b      	lsls	r3, r3, #2
   159fc:	687a      	ldr	r2, [r7, #4]
   159fe:	4413      	add	r3, r2
   15a00:	607b      	str	r3, [r7, #4]
   15a02:	68fb      	ldr	r3, [r7, #12]
   15a04:	685b      	ldr	r3, [r3, #4]
   15a06:	009b      	lsls	r3, r3, #2
   15a08:	68ba      	ldr	r2, [r7, #8]
   15a0a:	4413      	add	r3, r2
   15a0c:	60bb      	str	r3, [r7, #8]
   15a0e:	68fb      	ldr	r3, [r7, #12]
   15a10:	685b      	ldr	r3, [r3, #4]
   15a12:	627b      	str	r3, [r7, #36]	; 0x24
   15a14:	e01a      	b.n	15a4c <FilterbankConvertFftComplexToEnergy+0x68>
   15a16:	68bb      	ldr	r3, [r7, #8]
   15a18:	f9b3 3000 	ldrsh.w	r3, [r3]
   15a1c:	61fb      	str	r3, [r7, #28]
   15a1e:	68bb      	ldr	r3, [r7, #8]
   15a20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   15a24:	61bb      	str	r3, [r7, #24]
   15a26:	68bb      	ldr	r3, [r7, #8]
   15a28:	3304      	adds	r3, #4
   15a2a:	60bb      	str	r3, [r7, #8]
   15a2c:	69fb      	ldr	r3, [r7, #28]
   15a2e:	fb03 f203 	mul.w	r2, r3, r3
   15a32:	69bb      	ldr	r3, [r7, #24]
   15a34:	fb03 f303 	mul.w	r3, r3, r3
   15a38:	4413      	add	r3, r2
   15a3a:	617b      	str	r3, [r7, #20]
   15a3c:	687b      	ldr	r3, [r7, #4]
   15a3e:	1d1a      	adds	r2, r3, #4
   15a40:	607a      	str	r2, [r7, #4]
   15a42:	697a      	ldr	r2, [r7, #20]
   15a44:	601a      	str	r2, [r3, #0]
   15a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15a48:	3301      	adds	r3, #1
   15a4a:	627b      	str	r3, [r7, #36]	; 0x24
   15a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   15a4e:	6a3b      	ldr	r3, [r7, #32]
   15a50:	429a      	cmp	r2, r3
   15a52:	dbe0      	blt.n	15a16 <FilterbankConvertFftComplexToEnergy+0x32>
   15a54:	bf00      	nop
   15a56:	bf00      	nop
   15a58:	372c      	adds	r7, #44	; 0x2c
   15a5a:	46bd      	mov	sp, r7
   15a5c:	bc80      	pop	{r7}
   15a5e:	4770      	bx	lr

00015a60 <FilterbankAccumulateChannels>:
   15a60:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
   15a64:	b092      	sub	sp, #72	; 0x48
   15a66:	af00      	add	r7, sp, #0
   15a68:	6078      	str	r0, [r7, #4]
   15a6a:	6039      	str	r1, [r7, #0]
   15a6c:	687b      	ldr	r3, [r7, #4]
   15a6e:	6a1b      	ldr	r3, [r3, #32]
   15a70:	647b      	str	r3, [r7, #68]	; 0x44
   15a72:	f04f 0200 	mov.w	r2, #0
   15a76:	f04f 0300 	mov.w	r3, #0
   15a7a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   15a7e:	f04f 0200 	mov.w	r2, #0
   15a82:	f04f 0300 	mov.w	r3, #0
   15a86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15a8a:	687b      	ldr	r3, [r7, #4]
   15a8c:	68db      	ldr	r3, [r3, #12]
   15a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   15a90:	687b      	ldr	r3, [r7, #4]
   15a92:	691b      	ldr	r3, [r3, #16]
   15a94:	62bb      	str	r3, [r7, #40]	; 0x28
   15a96:	687b      	ldr	r3, [r7, #4]
   15a98:	695b      	ldr	r3, [r3, #20]
   15a9a:	627b      	str	r3, [r7, #36]	; 0x24
   15a9c:	687b      	ldr	r3, [r7, #4]
   15a9e:	681b      	ldr	r3, [r3, #0]
   15aa0:	3301      	adds	r3, #1
   15aa2:	60fb      	str	r3, [r7, #12]
   15aa4:	2300      	movs	r3, #0
   15aa6:	623b      	str	r3, [r7, #32]
   15aa8:	e07d      	b.n	15ba6 <FilterbankAccumulateChannels+0x146>
   15aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15aac:	1c9a      	adds	r2, r3, #2
   15aae:	62fa      	str	r2, [r7, #44]	; 0x2c
   15ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
   15ab4:	009b      	lsls	r3, r3, #2
   15ab6:	683a      	ldr	r2, [r7, #0]
   15ab8:	4413      	add	r3, r2
   15aba:	61fb      	str	r3, [r7, #28]
   15abc:	687b      	ldr	r3, [r7, #4]
   15abe:	699a      	ldr	r2, [r3, #24]
   15ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
   15ac6:	005b      	lsls	r3, r3, #1
   15ac8:	4413      	add	r3, r2
   15aca:	61bb      	str	r3, [r7, #24]
   15acc:	687b      	ldr	r3, [r7, #4]
   15ace:	69da      	ldr	r2, [r3, #28]
   15ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   15ad2:	1c99      	adds	r1, r3, #2
   15ad4:	62b9      	str	r1, [r7, #40]	; 0x28
   15ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
   15ada:	005b      	lsls	r3, r3, #1
   15adc:	4413      	add	r3, r2
   15ade:	617b      	str	r3, [r7, #20]
   15ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15ae2:	1c9a      	adds	r2, r3, #2
   15ae4:	627a      	str	r2, [r7, #36]	; 0x24
   15ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
   15aea:	60bb      	str	r3, [r7, #8]
   15aec:	2300      	movs	r3, #0
   15aee:	613b      	str	r3, [r7, #16]
   15af0:	e040      	b.n	15b74 <FilterbankAccumulateChannels+0x114>
   15af2:	69bb      	ldr	r3, [r7, #24]
   15af4:	1c9a      	adds	r2, r3, #2
   15af6:	61ba      	str	r2, [r7, #24]
   15af8:	f9b3 3000 	ldrsh.w	r3, [r3]
   15afc:	b218      	sxth	r0, r3
   15afe:	ea4f 71e0 	mov.w	r1, r0, asr #31
   15b02:	69fb      	ldr	r3, [r7, #28]
   15b04:	681b      	ldr	r3, [r3, #0]
   15b06:	461a      	mov	r2, r3
   15b08:	ea4f 73e2 	mov.w	r3, r2, asr #31
   15b0c:	fb02 fc01 	mul.w	ip, r2, r1
   15b10:	fb00 f603 	mul.w	r6, r0, r3
   15b14:	4466      	add	r6, ip
   15b16:	fba0 2302 	umull	r2, r3, r0, r2
   15b1a:	18f1      	adds	r1, r6, r3
   15b1c:	460b      	mov	r3, r1
   15b1e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   15b22:	1884      	adds	r4, r0, r2
   15b24:	eb41 0503 	adc.w	r5, r1, r3
   15b28:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
   15b2c:	697b      	ldr	r3, [r7, #20]
   15b2e:	1c9a      	adds	r2, r3, #2
   15b30:	617a      	str	r2, [r7, #20]
   15b32:	f9b3 3000 	ldrsh.w	r3, [r3]
   15b36:	b218      	sxth	r0, r3
   15b38:	ea4f 71e0 	mov.w	r1, r0, asr #31
   15b3c:	69fb      	ldr	r3, [r7, #28]
   15b3e:	681b      	ldr	r3, [r3, #0]
   15b40:	461a      	mov	r2, r3
   15b42:	ea4f 73e2 	mov.w	r3, r2, asr #31
   15b46:	fb02 fc01 	mul.w	ip, r2, r1
   15b4a:	fb00 f603 	mul.w	r6, r0, r3
   15b4e:	4466      	add	r6, ip
   15b50:	fba0 2302 	umull	r2, r3, r0, r2
   15b54:	18f1      	adds	r1, r6, r3
   15b56:	460b      	mov	r3, r1
   15b58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
   15b5c:	eb10 0802 	adds.w	r8, r0, r2
   15b60:	eb41 0903 	adc.w	r9, r1, r3
   15b64:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
   15b68:	69fb      	ldr	r3, [r7, #28]
   15b6a:	3304      	adds	r3, #4
   15b6c:	61fb      	str	r3, [r7, #28]
   15b6e:	693b      	ldr	r3, [r7, #16]
   15b70:	3301      	adds	r3, #1
   15b72:	613b      	str	r3, [r7, #16]
   15b74:	693a      	ldr	r2, [r7, #16]
   15b76:	68bb      	ldr	r3, [r7, #8]
   15b78:	429a      	cmp	r2, r3
   15b7a:	dbba      	blt.n	15af2 <FilterbankAccumulateChannels+0x92>
   15b7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   15b7e:	f101 0308 	add.w	r3, r1, #8
   15b82:	647b      	str	r3, [r7, #68]	; 0x44
   15b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   15b88:	e9c1 2300 	strd	r2, r3, [r1]
   15b8c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   15b90:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   15b94:	f04f 0200 	mov.w	r2, #0
   15b98:	f04f 0300 	mov.w	r3, #0
   15b9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15ba0:	6a3b      	ldr	r3, [r7, #32]
   15ba2:	3301      	adds	r3, #1
   15ba4:	623b      	str	r3, [r7, #32]
   15ba6:	6a3a      	ldr	r2, [r7, #32]
   15ba8:	68fb      	ldr	r3, [r7, #12]
   15baa:	429a      	cmp	r2, r3
   15bac:	f6ff af7d 	blt.w	15aaa <FilterbankAccumulateChannels+0x4a>
   15bb0:	bf00      	nop
   15bb2:	bf00      	nop
   15bb4:	3748      	adds	r7, #72	; 0x48
   15bb6:	46bd      	mov	sp, r7
   15bb8:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
   15bbc:	4770      	bx	lr

00015bbe <Sqrt32>:
   15bbe:	b580      	push	{r7, lr}
   15bc0:	b086      	sub	sp, #24
   15bc2:	af00      	add	r7, sp, #0
   15bc4:	6078      	str	r0, [r7, #4]
   15bc6:	687b      	ldr	r3, [r7, #4]
   15bc8:	2b00      	cmp	r3, #0
   15bca:	d101      	bne.n	15bd0 <Sqrt32+0x12>
   15bcc:	2300      	movs	r3, #0
   15bce:	e046      	b.n	15c5e <Sqrt32+0xa0>
   15bd0:	2300      	movs	r3, #0
   15bd2:	617b      	str	r3, [r7, #20]
   15bd4:	6878      	ldr	r0, [r7, #4]
   15bd6:	f7ff fecd 	bl	15974 <MostSignificantBit32>
   15bda:	4603      	mov	r3, r0
   15bdc:	f1c3 0320 	rsb	r3, r3, #32
   15be0:	60bb      	str	r3, [r7, #8]
   15be2:	68bb      	ldr	r3, [r7, #8]
   15be4:	f043 0301 	orr.w	r3, r3, #1
   15be8:	60bb      	str	r3, [r7, #8]
   15bea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   15bee:	68bb      	ldr	r3, [r7, #8]
   15bf0:	fa22 f303 	lsr.w	r3, r2, r3
   15bf4:	613b      	str	r3, [r7, #16]
   15bf6:	68bb      	ldr	r3, [r7, #8]
   15bf8:	f1c3 031f 	rsb	r3, r3, #31
   15bfc:	0fda      	lsrs	r2, r3, #31
   15bfe:	4413      	add	r3, r2
   15c00:	105b      	asrs	r3, r3, #1
   15c02:	3301      	adds	r3, #1
   15c04:	60fb      	str	r3, [r7, #12]
   15c06:	e017      	b.n	15c38 <Sqrt32+0x7a>
   15c08:	697a      	ldr	r2, [r7, #20]
   15c0a:	693b      	ldr	r3, [r7, #16]
   15c0c:	4413      	add	r3, r2
   15c0e:	687a      	ldr	r2, [r7, #4]
   15c10:	429a      	cmp	r2, r3
   15c12:	d30b      	bcc.n	15c2c <Sqrt32+0x6e>
   15c14:	697a      	ldr	r2, [r7, #20]
   15c16:	693b      	ldr	r3, [r7, #16]
   15c18:	4413      	add	r3, r2
   15c1a:	687a      	ldr	r2, [r7, #4]
   15c1c:	1ad3      	subs	r3, r2, r3
   15c1e:	607b      	str	r3, [r7, #4]
   15c20:	697b      	ldr	r3, [r7, #20]
   15c22:	085b      	lsrs	r3, r3, #1
   15c24:	693a      	ldr	r2, [r7, #16]
   15c26:	4413      	add	r3, r2
   15c28:	617b      	str	r3, [r7, #20]
   15c2a:	e002      	b.n	15c32 <Sqrt32+0x74>
   15c2c:	697b      	ldr	r3, [r7, #20]
   15c2e:	085b      	lsrs	r3, r3, #1
   15c30:	617b      	str	r3, [r7, #20]
   15c32:	693b      	ldr	r3, [r7, #16]
   15c34:	089b      	lsrs	r3, r3, #2
   15c36:	613b      	str	r3, [r7, #16]
   15c38:	68fb      	ldr	r3, [r7, #12]
   15c3a:	1e5a      	subs	r2, r3, #1
   15c3c:	60fa      	str	r2, [r7, #12]
   15c3e:	2b00      	cmp	r3, #0
   15c40:	d1e2      	bne.n	15c08 <Sqrt32+0x4a>
   15c42:	687a      	ldr	r2, [r7, #4]
   15c44:	697b      	ldr	r3, [r7, #20]
   15c46:	429a      	cmp	r2, r3
   15c48:	d907      	bls.n	15c5a <Sqrt32+0x9c>
   15c4a:	697b      	ldr	r3, [r7, #20]
   15c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   15c50:	4293      	cmp	r3, r2
   15c52:	d002      	beq.n	15c5a <Sqrt32+0x9c>
   15c54:	697b      	ldr	r3, [r7, #20]
   15c56:	3301      	adds	r3, #1
   15c58:	617b      	str	r3, [r7, #20]
   15c5a:	697b      	ldr	r3, [r7, #20]
   15c5c:	b29b      	uxth	r3, r3
   15c5e:	4618      	mov	r0, r3
   15c60:	3718      	adds	r7, #24
   15c62:	46bd      	mov	sp, r7
   15c64:	bd80      	pop	{r7, pc}

00015c66 <Sqrt64>:
   15c66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c6a:	b08f      	sub	sp, #60	; 0x3c
   15c6c:	af00      	add	r7, sp, #0
   15c6e:	e9c7 0106 	strd	r0, r1, [r7, #24]
   15c72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15c76:	f04f 0000 	mov.w	r0, #0
   15c7a:	f04f 0100 	mov.w	r1, #0
   15c7e:	0018      	movs	r0, r3
   15c80:	2100      	movs	r1, #0
   15c82:	ea50 0301 	orrs.w	r3, r0, r1
   15c86:	d105      	bne.n	15c94 <Sqrt64+0x2e>
   15c88:	69bb      	ldr	r3, [r7, #24]
   15c8a:	4618      	mov	r0, r3
   15c8c:	f7ff ff97 	bl	15bbe <Sqrt32>
   15c90:	4603      	mov	r3, r0
   15c92:	e09f      	b.n	15dd4 <Sqrt64+0x16e>
   15c94:	f04f 0200 	mov.w	r2, #0
   15c98:	f04f 0300 	mov.w	r3, #0
   15c9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15ca0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
   15ca4:	f7ff fe8e 	bl	159c4 <MostSignificantBit64>
   15ca8:	4603      	mov	r3, r0
   15caa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   15cae:	623b      	str	r3, [r7, #32]
   15cb0:	6a3b      	ldr	r3, [r7, #32]
   15cb2:	f043 0301 	orr.w	r3, r3, #1
   15cb6:	623b      	str	r3, [r7, #32]
   15cb8:	f04f 0200 	mov.w	r2, #0
   15cbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   15cc0:	6a3e      	ldr	r6, [r7, #32]
   15cc2:	f1c6 0120 	rsb	r1, r6, #32
   15cc6:	f1a6 0020 	sub.w	r0, r6, #32
   15cca:	fa22 f406 	lsr.w	r4, r2, r6
   15cce:	fa03 f101 	lsl.w	r1, r3, r1
   15cd2:	430c      	orrs	r4, r1
   15cd4:	fa23 f000 	lsr.w	r0, r3, r0
   15cd8:	4304      	orrs	r4, r0
   15cda:	fa23 f506 	lsr.w	r5, r3, r6
   15cde:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
   15ce2:	6a3b      	ldr	r3, [r7, #32]
   15ce4:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
   15ce8:	0fda      	lsrs	r2, r3, #31
   15cea:	4413      	add	r3, r2
   15cec:	105b      	asrs	r3, r3, #1
   15cee:	3301      	adds	r3, #1
   15cf0:	627b      	str	r3, [r7, #36]	; 0x24
   15cf2:	e052      	b.n	15d9a <Sqrt64+0x134>
   15cf4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
   15cf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   15cfc:	1884      	adds	r4, r0, r2
   15cfe:	613c      	str	r4, [r7, #16]
   15d00:	eb41 0303 	adc.w	r3, r1, r3
   15d04:	617b      	str	r3, [r7, #20]
   15d06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   15d0e:	428b      	cmp	r3, r1
   15d10:	bf08      	it	eq
   15d12:	4282      	cmpeq	r2, r0
   15d14:	d329      	bcc.n	15d6a <Sqrt64+0x104>
   15d16:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
   15d1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   15d1e:	eb10 0802 	adds.w	r8, r0, r2
   15d22:	eb41 0903 	adc.w	r9, r1, r3
   15d26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15d2a:	ebb2 0108 	subs.w	r1, r2, r8
   15d2e:	60b9      	str	r1, [r7, #8]
   15d30:	eb63 0309 	sbc.w	r3, r3, r9
   15d34:	60fb      	str	r3, [r7, #12]
   15d36:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
   15d3a:	e9c7 3406 	strd	r3, r4, [r7, #24]
   15d3e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
   15d42:	f04f 0200 	mov.w	r2, #0
   15d46:	f04f 0300 	mov.w	r3, #0
   15d4a:	0842      	lsrs	r2, r0, #1
   15d4c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   15d50:	084b      	lsrs	r3, r1, #1
   15d52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d56:	1884      	adds	r4, r0, r2
   15d58:	603c      	str	r4, [r7, #0]
   15d5a:	eb41 0303 	adc.w	r3, r1, r3
   15d5e:	607b      	str	r3, [r7, #4]
   15d60:	e9d7 3400 	ldrd	r3, r4, [r7]
   15d64:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
   15d68:	e00b      	b.n	15d82 <Sqrt64+0x11c>
   15d6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
   15d6e:	f04f 0200 	mov.w	r2, #0
   15d72:	f04f 0300 	mov.w	r3, #0
   15d76:	0842      	lsrs	r2, r0, #1
   15d78:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
   15d7c:	084b      	lsrs	r3, r1, #1
   15d7e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   15d82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   15d86:	f04f 0200 	mov.w	r2, #0
   15d8a:	f04f 0300 	mov.w	r3, #0
   15d8e:	0882      	lsrs	r2, r0, #2
   15d90:	ea42 7281 	orr.w	r2, r2, r1, lsl #30
   15d94:	088b      	lsrs	r3, r1, #2
   15d96:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   15d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15d9c:	1e5a      	subs	r2, r3, #1
   15d9e:	627a      	str	r2, [r7, #36]	; 0x24
   15da0:	2b00      	cmp	r3, #0
   15da2:	d1a7      	bne.n	15cf4 <Sqrt64+0x8e>
   15da4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   15da8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
   15dac:	4299      	cmp	r1, r3
   15dae:	bf08      	it	eq
   15db0:	4290      	cmpeq	r0, r2
   15db2:	d20e      	bcs.n	15dd2 <Sqrt64+0x16c>
   15db4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   15db8:	2b00      	cmp	r3, #0
   15dba:	bf08      	it	eq
   15dbc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   15dc0:	d007      	beq.n	15dd2 <Sqrt64+0x16c>
   15dc2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   15dc6:	f112 0a01 	adds.w	sl, r2, #1
   15dca:	f143 0b00 	adc.w	fp, r3, #0
   15dce:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
   15dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   15dd4:	4618      	mov	r0, r3
   15dd6:	373c      	adds	r7, #60	; 0x3c
   15dd8:	46bd      	mov	sp, r7
   15dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015dde <FilterbankSqrt>:
   15dde:	b580      	push	{r7, lr}
   15de0:	b086      	sub	sp, #24
   15de2:	af00      	add	r7, sp, #0
   15de4:	6078      	str	r0, [r7, #4]
   15de6:	6039      	str	r1, [r7, #0]
   15de8:	687b      	ldr	r3, [r7, #4]
   15dea:	681b      	ldr	r3, [r3, #0]
   15dec:	60bb      	str	r3, [r7, #8]
   15dee:	687b      	ldr	r3, [r7, #4]
   15df0:	6a1b      	ldr	r3, [r3, #32]
   15df2:	3308      	adds	r3, #8
   15df4:	617b      	str	r3, [r7, #20]
   15df6:	687b      	ldr	r3, [r7, #4]
   15df8:	6a1b      	ldr	r3, [r3, #32]
   15dfa:	613b      	str	r3, [r7, #16]
   15dfc:	2300      	movs	r3, #0
   15dfe:	60fb      	str	r3, [r7, #12]
   15e00:	e014      	b.n	15e2c <FilterbankSqrt+0x4e>
   15e02:	697b      	ldr	r3, [r7, #20]
   15e04:	f103 0208 	add.w	r2, r3, #8
   15e08:	617a      	str	r2, [r7, #20]
   15e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e0e:	4610      	mov	r0, r2
   15e10:	4619      	mov	r1, r3
   15e12:	f7ff ff28 	bl	15c66 <Sqrt64>
   15e16:	4601      	mov	r1, r0
   15e18:	693b      	ldr	r3, [r7, #16]
   15e1a:	1d1a      	adds	r2, r3, #4
   15e1c:	613a      	str	r2, [r7, #16]
   15e1e:	683a      	ldr	r2, [r7, #0]
   15e20:	fa21 f202 	lsr.w	r2, r1, r2
   15e24:	601a      	str	r2, [r3, #0]
   15e26:	68fb      	ldr	r3, [r7, #12]
   15e28:	3301      	adds	r3, #1
   15e2a:	60fb      	str	r3, [r7, #12]
   15e2c:	68fa      	ldr	r2, [r7, #12]
   15e2e:	68bb      	ldr	r3, [r7, #8]
   15e30:	429a      	cmp	r2, r3
   15e32:	dbe6      	blt.n	15e02 <FilterbankSqrt+0x24>
   15e34:	687b      	ldr	r3, [r7, #4]
   15e36:	6a1b      	ldr	r3, [r3, #32]
   15e38:	4618      	mov	r0, r3
   15e3a:	3718      	adds	r7, #24
   15e3c:	46bd      	mov	sp, r7
   15e3e:	bd80      	pop	{r7, pc}

00015e40 <FilterbankReset>:
   15e40:	b580      	push	{r7, lr}
   15e42:	b082      	sub	sp, #8
   15e44:	af00      	add	r7, sp, #0
   15e46:	6078      	str	r0, [r7, #4]
   15e48:	687b      	ldr	r3, [r7, #4]
   15e4a:	6a18      	ldr	r0, [r3, #32]
   15e4c:	687b      	ldr	r3, [r7, #4]
   15e4e:	681b      	ldr	r3, [r3, #0]
   15e50:	3301      	adds	r3, #1
   15e52:	00db      	lsls	r3, r3, #3
   15e54:	461a      	mov	r2, r3
   15e56:	2100      	movs	r1, #0
   15e58:	f00e fb44 	bl	244e4 <memset>
   15e5c:	bf00      	nop
   15e5e:	3708      	adds	r7, #8
   15e60:	46bd      	mov	sp, r7
   15e62:	bd80      	pop	{r7, pc}

00015e64 <strcmp>:
   15e64:	f810 2b01 	ldrb.w	r2, [r0], #1
   15e68:	f811 3b01 	ldrb.w	r3, [r1], #1
   15e6c:	2a01      	cmp	r2, #1
   15e6e:	bf28      	it	cs
   15e70:	429a      	cmpcs	r2, r3
   15e72:	d0f7      	beq.n	15e64 <strcmp>
   15e74:	1ad0      	subs	r0, r2, r3
   15e76:	4770      	bx	lr

00015e78 <strlen>:
   15e78:	4603      	mov	r3, r0
   15e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
   15e7e:	2a00      	cmp	r2, #0
   15e80:	d1fb      	bne.n	15e7a <strlen+0x2>
   15e82:	1a18      	subs	r0, r3, r0
   15e84:	3801      	subs	r0, #1
   15e86:	4770      	bx	lr

00015e88 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
   15e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15e8c:	4606      	mov	r6, r0
   15e8e:	e9dd 890b 	ldrd	r8, r9, [sp, #44]	; 0x2c
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   15e92:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
   15e96:	460f      	mov	r7, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   15e98:	990a      	ldr	r1, [sp, #40]	; 0x28
                              int32_t* quantized_multiplier, int* left_shift) {
   15e9a:	e9cd 2300 	strd	r2, r3, [sp]
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   15e9e:	40c8      	lsrs	r0, r1
   15ea0:	f7fd fb6c 	bl	1357c <__aeabi_i2d>
   15ea4:	e9dd 2300 	ldrd	r2, r3, [sp]
   15ea8:	4604      	mov	r4, r0
   15eaa:	460d      	mov	r5, r1
   15eac:	4630      	mov	r0, r6
   15eae:	4639      	mov	r1, r7
   15eb0:	f7fd fbce 	bl	13650 <__aeabi_dmul>
   15eb4:	4602      	mov	r2, r0
   15eb6:	460b      	mov	r3, r1
   15eb8:	4620      	mov	r0, r4
   15eba:	4629      	mov	r1, r5
   15ebc:	f7fd fbc8 	bl	13650 <__aeabi_dmul>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
   15ec0:	a309      	add	r3, pc, #36	; (adr r3, 15ee8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x60>)
   15ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
   15ec6:	4604      	mov	r4, r0
   15ec8:	460d      	mov	r5, r1
   15eca:	f7fd fe51 	bl	13b70 <__aeabi_dcmpgt>
   15ece:	b110      	cbz	r0, 15ed6 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x4e>
	return __b;
   15ed0:	a505      	add	r5, pc, #20	; (adr r5, 15ee8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x60>)
   15ed2:	e9d5 4500 	ldrd	r4, r5, [r5]
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   15ed6:	464b      	mov	r3, r9
   15ed8:	4642      	mov	r2, r8
   15eda:	4620      	mov	r0, r4
   15edc:	4629      	mov	r1, r5
                                   quantized_multiplier, left_shift);
}
   15ede:	b003      	add	sp, #12
   15ee0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   15ee4:	f006 bd32 	b.w	1c94c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
   15ee8:	ffc00000 	.word	0xffc00000
   15eec:	41dfffff 	.word	0x41dfffff

00015ef0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
   15ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ef4:	4604      	mov	r4, r0
   15ef6:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
   15efa:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
   15efc:	4615      	mov	r5, r2
   15efe:	461e      	mov	r6, r3
   15f00:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
   15f02:	f7fd fb4d 	bl	135a0 <__aeabi_f2d>
   15f06:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
   15f08:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
   15f0a:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
   15f0c:	f7fd fb48 	bl	135a0 <__aeabi_f2d>
   15f10:	4602      	mov	r2, r0
   15f12:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
   15f14:	4640      	mov	r0, r8
   15f16:	4649      	mov	r1, r9
   15f18:	f7fd fb9a 	bl	13650 <__aeabi_dmul>
   15f1c:	4680      	mov	r8, r0
   15f1e:	4689      	mov	r9, r1
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
   15f20:	b1d6      	cbz	r6, 15f58 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
   15f22:	68f0      	ldr	r0, [r6, #12]
   15f24:	f7fd fb3c 	bl	135a0 <__aeabi_f2d>
   15f28:	4602      	mov	r2, r0
   15f2a:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
   15f2c:	4640      	mov	r0, r8
   15f2e:	4649      	mov	r1, r9
   15f30:	f7fd f9d6 	bl	132e0 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
   15f34:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
   15f36:	68f8      	ldr	r0, [r7, #12]
   15f38:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   15f3c:	f7fd fb30 	bl	135a0 <__aeabi_f2d>
   15f40:	4602      	mov	r2, r0
   15f42:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   15f44:	4640      	mov	r0, r8
   15f46:	4649      	mov	r1, r9
   15f48:	f7fd fcac 	bl	138a4 <__aeabi_ddiv>
   15f4c:	a311      	add	r3, pc, #68	; (adr r3, 15f94 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
   15f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15f52:	f7fd fdf9 	bl	13b48 <__aeabi_dcmple>
   15f56:	b150      	cbz	r0, 15f6e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
   15f58:	463b      	mov	r3, r7
   15f5a:	462a      	mov	r2, r5
   15f5c:	4651      	mov	r1, sl
   15f5e:	4620      	mov	r0, r4
   15f60:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
                                          multiplier);
}
   15f64:	b003      	add	sp, #12
   15f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
   15f6a:	f006 bd07 	b.w	1c97c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   15f6e:	4b06      	ldr	r3, [pc, #24]	; (15f88 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
   15f70:	4620      	mov	r0, r4
   15f72:	9300      	str	r3, [sp, #0]
   15f74:	6965      	ldr	r5, [r4, #20]
   15f76:	239a      	movs	r3, #154	; 0x9a
   15f78:	4a04      	ldr	r2, [pc, #16]	; (15f8c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
   15f7a:	4905      	ldr	r1, [pc, #20]	; (15f90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
   15f7c:	47a8      	blx	r5
}
   15f7e:	2001      	movs	r0, #1
   15f80:	b003      	add	sp, #12
   15f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f86:	bf00      	nop
   15f88:	0002bdbe 	.word	0x0002bdbe
   15f8c:	0002bd7e 	.word	0x0002bd7e
   15f90:	0002b8a4 	.word	0x0002b8a4
   15f94:	47ae147b 	.word	0x47ae147b
   15f98:	3f947ae1 	.word	0x3f947ae1
   15f9c:	00000000 	.word	0x00000000

00015fa0 <floor>:
   15fa0:	b580      	push	{r7, lr}
   15fa2:	b08c      	sub	sp, #48	; 0x30
   15fa4:	af00      	add	r7, sp, #0
   15fa6:	e9c7 0100 	strd	r0, r1, [r7]
   15faa:	e9d7 2300 	ldrd	r2, r3, [r7]
   15fae:	e9c7 2304 	strd	r2, r3, [r7, #16]
   15fb2:	697b      	ldr	r3, [r7, #20]
   15fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   15fb6:	693b      	ldr	r3, [r7, #16]
   15fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   15fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15fbc:	151b      	asrs	r3, r3, #20
   15fbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
   15fc2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   15fc6:	627b      	str	r3, [r7, #36]	; 0x24
   15fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15fca:	2b13      	cmp	r3, #19
   15fcc:	dc62      	bgt.n	16094 <floor+0xf4>
   15fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   15fd0:	2b00      	cmp	r3, #0
   15fd2:	da29      	bge.n	16028 <floor+0x88>
   15fd4:	a162      	add	r1, pc, #392	; (adr r1, 16160 <floor+0x1c0>)
   15fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
   15fda:	e9d7 2300 	ldrd	r2, r3, [r7]
   15fde:	f7fd f981 	bl	132e4 <__adddf3>
   15fe2:	4602      	mov	r2, r0
   15fe4:	460b      	mov	r3, r1
   15fe6:	4610      	mov	r0, r2
   15fe8:	4619      	mov	r1, r3
   15fea:	f04f 0200 	mov.w	r2, #0
   15fee:	f04f 0300 	mov.w	r3, #0
   15ff2:	f7fd fdbd 	bl	13b70 <__aeabi_dcmpgt>
   15ff6:	4603      	mov	r3, r0
   15ff8:	2b00      	cmp	r3, #0
   15ffa:	f000 80a1 	beq.w	16140 <floor+0x1a0>
   15ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16000:	2b00      	cmp	r3, #0
   16002:	db04      	blt.n	1600e <floor+0x6e>
   16004:	2300      	movs	r3, #0
   16006:	62bb      	str	r3, [r7, #40]	; 0x28
   16008:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1600a:	62fb      	str	r3, [r7, #44]	; 0x2c
   1600c:	e098      	b.n	16140 <floor+0x1a0>
   1600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16010:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   16014:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16016:	4313      	orrs	r3, r2
   16018:	2b00      	cmp	r3, #0
   1601a:	f000 8091 	beq.w	16140 <floor+0x1a0>
   1601e:	4b52      	ldr	r3, [pc, #328]	; (16168 <floor+0x1c8>)
   16020:	62fb      	str	r3, [r7, #44]	; 0x2c
   16022:	2300      	movs	r3, #0
   16024:	62bb      	str	r3, [r7, #40]	; 0x28
   16026:	e08b      	b.n	16140 <floor+0x1a0>
   16028:	4a50      	ldr	r2, [pc, #320]	; (1616c <floor+0x1cc>)
   1602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1602c:	fa42 f303 	asr.w	r3, r2, r3
   16030:	623b      	str	r3, [r7, #32]
   16032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16034:	6a3b      	ldr	r3, [r7, #32]
   16036:	401a      	ands	r2, r3
   16038:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1603a:	4313      	orrs	r3, r2
   1603c:	2b00      	cmp	r3, #0
   1603e:	d102      	bne.n	16046 <floor+0xa6>
   16040:	e9d7 2300 	ldrd	r2, r3, [r7]
   16044:	e086      	b.n	16154 <floor+0x1b4>
   16046:	a146      	add	r1, pc, #280	; (adr r1, 16160 <floor+0x1c0>)
   16048:	e9d1 0100 	ldrd	r0, r1, [r1]
   1604c:	e9d7 2300 	ldrd	r2, r3, [r7]
   16050:	f7fd f948 	bl	132e4 <__adddf3>
   16054:	4602      	mov	r2, r0
   16056:	460b      	mov	r3, r1
   16058:	4610      	mov	r0, r2
   1605a:	4619      	mov	r1, r3
   1605c:	f04f 0200 	mov.w	r2, #0
   16060:	f04f 0300 	mov.w	r3, #0
   16064:	f7fd fd84 	bl	13b70 <__aeabi_dcmpgt>
   16068:	4603      	mov	r3, r0
   1606a:	2b00      	cmp	r3, #0
   1606c:	d068      	beq.n	16140 <floor+0x1a0>
   1606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16070:	2b00      	cmp	r3, #0
   16072:	da07      	bge.n	16084 <floor+0xe4>
   16074:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   16078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1607a:	fa42 f303 	asr.w	r3, r2, r3
   1607e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   16080:	4413      	add	r3, r2
   16082:	62fb      	str	r3, [r7, #44]	; 0x2c
   16084:	6a3b      	ldr	r3, [r7, #32]
   16086:	43da      	mvns	r2, r3
   16088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1608a:	4013      	ands	r3, r2
   1608c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1608e:	2300      	movs	r3, #0
   16090:	62bb      	str	r3, [r7, #40]	; 0x28
   16092:	e055      	b.n	16140 <floor+0x1a0>
   16094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16096:	2b33      	cmp	r3, #51	; 0x33
   16098:	dd0f      	ble.n	160ba <floor+0x11a>
   1609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1609c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   160a0:	d108      	bne.n	160b4 <floor+0x114>
   160a2:	e9d7 0100 	ldrd	r0, r1, [r7]
   160a6:	4602      	mov	r2, r0
   160a8:	460b      	mov	r3, r1
   160aa:	f7fd f91b 	bl	132e4 <__adddf3>
   160ae:	4602      	mov	r2, r0
   160b0:	460b      	mov	r3, r1
   160b2:	e04f      	b.n	16154 <floor+0x1b4>
   160b4:	e9d7 2300 	ldrd	r2, r3, [r7]
   160b8:	e04c      	b.n	16154 <floor+0x1b4>
   160ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   160bc:	3b14      	subs	r3, #20
   160be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   160c2:	fa22 f303 	lsr.w	r3, r2, r3
   160c6:	623b      	str	r3, [r7, #32]
   160c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   160ca:	6a3b      	ldr	r3, [r7, #32]
   160cc:	4013      	ands	r3, r2
   160ce:	2b00      	cmp	r3, #0
   160d0:	d102      	bne.n	160d8 <floor+0x138>
   160d2:	e9d7 2300 	ldrd	r2, r3, [r7]
   160d6:	e03d      	b.n	16154 <floor+0x1b4>
   160d8:	a121      	add	r1, pc, #132	; (adr r1, 16160 <floor+0x1c0>)
   160da:	e9d1 0100 	ldrd	r0, r1, [r1]
   160de:	e9d7 2300 	ldrd	r2, r3, [r7]
   160e2:	f7fd f8ff 	bl	132e4 <__adddf3>
   160e6:	4602      	mov	r2, r0
   160e8:	460b      	mov	r3, r1
   160ea:	4610      	mov	r0, r2
   160ec:	4619      	mov	r1, r3
   160ee:	f04f 0200 	mov.w	r2, #0
   160f2:	f04f 0300 	mov.w	r3, #0
   160f6:	f7fd fd3b 	bl	13b70 <__aeabi_dcmpgt>
   160fa:	4603      	mov	r3, r0
   160fc:	2b00      	cmp	r3, #0
   160fe:	d01f      	beq.n	16140 <floor+0x1a0>
   16100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16102:	2b00      	cmp	r3, #0
   16104:	da17      	bge.n	16136 <floor+0x196>
   16106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16108:	2b14      	cmp	r3, #20
   1610a:	d103      	bne.n	16114 <floor+0x174>
   1610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1610e:	3301      	adds	r3, #1
   16110:	62fb      	str	r3, [r7, #44]	; 0x2c
   16112:	e010      	b.n	16136 <floor+0x196>
   16114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16116:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   1611a:	2201      	movs	r2, #1
   1611c:	409a      	lsls	r2, r3
   1611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16120:	4413      	add	r3, r2
   16122:	61fb      	str	r3, [r7, #28]
   16124:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16126:	69fa      	ldr	r2, [r7, #28]
   16128:	429a      	cmp	r2, r3
   1612a:	d202      	bcs.n	16132 <floor+0x192>
   1612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1612e:	3301      	adds	r3, #1
   16130:	62fb      	str	r3, [r7, #44]	; 0x2c
   16132:	69fb      	ldr	r3, [r7, #28]
   16134:	62bb      	str	r3, [r7, #40]	; 0x28
   16136:	6a3b      	ldr	r3, [r7, #32]
   16138:	43da      	mvns	r2, r3
   1613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1613c:	4013      	ands	r3, r2
   1613e:	62bb      	str	r3, [r7, #40]	; 0x28
   16140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16142:	60fb      	str	r3, [r7, #12]
   16144:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16146:	60bb      	str	r3, [r7, #8]
   16148:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1614c:	e9c7 2300 	strd	r2, r3, [r7]
   16150:	e9d7 2300 	ldrd	r2, r3, [r7]
   16154:	4610      	mov	r0, r2
   16156:	4619      	mov	r1, r3
   16158:	3730      	adds	r7, #48	; 0x30
   1615a:	46bd      	mov	sp, r7
   1615c:	bd80      	pop	{r7, pc}
   1615e:	bf00      	nop
   16160:	8800759c 	.word	0x8800759c
   16164:	7e37e43c 	.word	0x7e37e43c
   16168:	bff00000 	.word	0xbff00000
   1616c:	000fffff 	.word	0x000fffff

00016170 <log1p>:
   16170:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
   16174:	b09e      	sub	sp, #120	; 0x78
   16176:	af00      	add	r7, sp, #0
   16178:	e9c7 0100 	strd	r0, r1, [r7]
   1617c:	e9d7 2300 	ldrd	r2, r3, [r7]
   16180:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   16184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16186:	657b      	str	r3, [r7, #84]	; 0x54
   16188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1618a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1618e:	653b      	str	r3, [r7, #80]	; 0x50
   16190:	2301      	movs	r3, #1
   16192:	65fb      	str	r3, [r7, #92]	; 0x5c
   16194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16196:	4aa6      	ldr	r2, [pc, #664]	; (16430 <log1p+0x2c0>)
   16198:	4293      	cmp	r3, r2
   1619a:	dc7d      	bgt.n	16298 <log1p+0x128>
   1619c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1619e:	4aa5      	ldr	r2, [pc, #660]	; (16434 <log1p+0x2c4>)
   161a0:	4293      	cmp	r3, r2
   161a2:	dd33      	ble.n	1620c <log1p+0x9c>
   161a4:	f04f 0200 	mov.w	r2, #0
   161a8:	4ba3      	ldr	r3, [pc, #652]	; (16438 <log1p+0x2c8>)
   161aa:	e9d7 0100 	ldrd	r0, r1, [r7]
   161ae:	f7fd fcb7 	bl	13b20 <__aeabi_dcmpeq>
   161b2:	4603      	mov	r3, r0
   161b4:	2b00      	cmp	r3, #0
   161b6:	d010      	beq.n	161da <log1p+0x6a>
   161b8:	f04f 0200 	mov.w	r2, #0
   161bc:	4b9f      	ldr	r3, [pc, #636]	; (1643c <log1p+0x2cc>)
   161be:	4614      	mov	r4, r2
   161c0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   161c4:	f04f 0200 	mov.w	r2, #0
   161c8:	f04f 0300 	mov.w	r3, #0
   161cc:	4620      	mov	r0, r4
   161ce:	4629      	mov	r1, r5
   161d0:	f7fd fb68 	bl	138a4 <__aeabi_ddiv>
   161d4:	4602      	mov	r2, r0
   161d6:	460b      	mov	r3, r1
   161d8:	e2b3      	b.n	16742 <log1p+0x5d2>
   161da:	e9d7 2300 	ldrd	r2, r3, [r7]
   161de:	e9d7 0100 	ldrd	r0, r1, [r7]
   161e2:	f7fd f87d 	bl	132e0 <__aeabi_dsub>
   161e6:	4602      	mov	r2, r0
   161e8:	460b      	mov	r3, r1
   161ea:	4614      	mov	r4, r2
   161ec:	461d      	mov	r5, r3
   161ee:	e9d7 2300 	ldrd	r2, r3, [r7]
   161f2:	e9d7 0100 	ldrd	r0, r1, [r7]
   161f6:	f7fd f873 	bl	132e0 <__aeabi_dsub>
   161fa:	4602      	mov	r2, r0
   161fc:	460b      	mov	r3, r1
   161fe:	4620      	mov	r0, r4
   16200:	4629      	mov	r1, r5
   16202:	f7fd fb4f 	bl	138a4 <__aeabi_ddiv>
   16206:	4602      	mov	r2, r0
   16208:	460b      	mov	r3, r1
   1620a:	e29a      	b.n	16742 <log1p+0x5d2>
   1620c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1620e:	4a8c      	ldr	r2, [pc, #560]	; (16440 <log1p+0x2d0>)
   16210:	4293      	cmp	r3, r2
   16212:	dc32      	bgt.n	1627a <log1p+0x10a>
   16214:	f04f 0000 	mov.w	r0, #0
   16218:	4988      	ldr	r1, [pc, #544]	; (1643c <log1p+0x2cc>)
   1621a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1621e:	f7fd f861 	bl	132e4 <__adddf3>
   16222:	4602      	mov	r2, r0
   16224:	460b      	mov	r3, r1
   16226:	4610      	mov	r0, r2
   16228:	4619      	mov	r1, r3
   1622a:	f04f 0200 	mov.w	r2, #0
   1622e:	f04f 0300 	mov.w	r3, #0
   16232:	f7fd fc9d 	bl	13b70 <__aeabi_dcmpgt>
   16236:	4603      	mov	r3, r0
   16238:	2b00      	cmp	r3, #0
   1623a:	d006      	beq.n	1624a <log1p+0xda>
   1623c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1623e:	4a81      	ldr	r2, [pc, #516]	; (16444 <log1p+0x2d4>)
   16240:	4293      	cmp	r3, r2
   16242:	dc02      	bgt.n	1624a <log1p+0xda>
   16244:	e9d7 2300 	ldrd	r2, r3, [r7]
   16248:	e27b      	b.n	16742 <log1p+0x5d2>
   1624a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1624e:	e9d7 0100 	ldrd	r0, r1, [r7]
   16252:	f7fd f9fd 	bl	13650 <__aeabi_dmul>
   16256:	4602      	mov	r2, r0
   16258:	460b      	mov	r3, r1
   1625a:	4610      	mov	r0, r2
   1625c:	4619      	mov	r1, r3
   1625e:	f04f 0200 	mov.w	r2, #0
   16262:	4b79      	ldr	r3, [pc, #484]	; (16448 <log1p+0x2d8>)
   16264:	f7fd f9f4 	bl	13650 <__aeabi_dmul>
   16268:	4602      	mov	r2, r0
   1626a:	460b      	mov	r3, r1
   1626c:	e9d7 0100 	ldrd	r0, r1, [r7]
   16270:	f7fd f836 	bl	132e0 <__aeabi_dsub>
   16274:	4602      	mov	r2, r0
   16276:	460b      	mov	r3, r1
   16278:	e263      	b.n	16742 <log1p+0x5d2>
   1627a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1627c:	2b00      	cmp	r3, #0
   1627e:	dc03      	bgt.n	16288 <log1p+0x118>
   16280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16282:	4a72      	ldr	r2, [pc, #456]	; (1644c <log1p+0x2dc>)
   16284:	4293      	cmp	r3, r2
   16286:	da07      	bge.n	16298 <log1p+0x128>
   16288:	2300      	movs	r3, #0
   1628a:	65fb      	str	r3, [r7, #92]	; 0x5c
   1628c:	e9d7 2300 	ldrd	r2, r3, [r7]
   16290:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   16294:	2301      	movs	r3, #1
   16296:	65bb      	str	r3, [r7, #88]	; 0x58
   16298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1629a:	4a6d      	ldr	r2, [pc, #436]	; (16450 <log1p+0x2e0>)
   1629c:	4293      	cmp	r3, r2
   1629e:	dd08      	ble.n	162b2 <log1p+0x142>
   162a0:	e9d7 0100 	ldrd	r0, r1, [r7]
   162a4:	4602      	mov	r2, r0
   162a6:	460b      	mov	r3, r1
   162a8:	f7fd f81c 	bl	132e4 <__adddf3>
   162ac:	4602      	mov	r2, r0
   162ae:	460b      	mov	r3, r1
   162b0:	e247      	b.n	16742 <log1p+0x5d2>
   162b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   162b4:	2b00      	cmp	r3, #0
   162b6:	f000 8092 	beq.w	163de <log1p+0x26e>
   162ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   162bc:	4a65      	ldr	r2, [pc, #404]	; (16454 <log1p+0x2e4>)
   162be:	4293      	cmp	r3, r2
   162c0:	dc44      	bgt.n	1634c <log1p+0x1dc>
   162c2:	f04f 0200 	mov.w	r2, #0
   162c6:	4b64      	ldr	r3, [pc, #400]	; (16458 <log1p+0x2e8>)
   162c8:	e9d7 0100 	ldrd	r0, r1, [r7]
   162cc:	f7fd f80a 	bl	132e4 <__adddf3>
   162d0:	4602      	mov	r2, r0
   162d2:	460b      	mov	r3, r1
   162d4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   162d8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
   162dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
   162e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   162e2:	65bb      	str	r3, [r7, #88]	; 0x58
   162e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   162e6:	151b      	asrs	r3, r3, #20
   162e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   162ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   162ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   162f0:	2b00      	cmp	r3, #0
   162f2:	dd0f      	ble.n	16314 <log1p+0x1a4>
   162f4:	e9d7 2300 	ldrd	r2, r3, [r7]
   162f8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
   162fc:	f7fc fff0 	bl	132e0 <__aeabi_dsub>
   16300:	4602      	mov	r2, r0
   16302:	460b      	mov	r3, r1
   16304:	f04f 0000 	mov.w	r0, #0
   16308:	4953      	ldr	r1, [pc, #332]	; (16458 <log1p+0x2e8>)
   1630a:	f7fc ffe9 	bl	132e0 <__aeabi_dsub>
   1630e:	4602      	mov	r2, r0
   16310:	460b      	mov	r3, r1
   16312:	e00e      	b.n	16332 <log1p+0x1c2>
   16314:	f04f 0200 	mov.w	r2, #0
   16318:	4b4f      	ldr	r3, [pc, #316]	; (16458 <log1p+0x2e8>)
   1631a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
   1631e:	f7fc ffdf 	bl	132e0 <__aeabi_dsub>
   16322:	4602      	mov	r2, r0
   16324:	460b      	mov	r3, r1
   16326:	e9d7 0100 	ldrd	r0, r1, [r7]
   1632a:	f7fc ffd9 	bl	132e0 <__aeabi_dsub>
   1632e:	4602      	mov	r2, r0
   16330:	460b      	mov	r3, r1
   16332:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   16336:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
   1633a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   1633e:	f7fd fab1 	bl	138a4 <__aeabi_ddiv>
   16342:	4602      	mov	r2, r0
   16344:	460b      	mov	r3, r1
   16346:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   1634a:	e014      	b.n	16376 <log1p+0x206>
   1634c:	e9d7 2300 	ldrd	r2, r3, [r7]
   16350:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   16354:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
   16358:	e9c7 2306 	strd	r2, r3, [r7, #24]
   1635c:	69fb      	ldr	r3, [r7, #28]
   1635e:	65bb      	str	r3, [r7, #88]	; 0x58
   16360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   16362:	151b      	asrs	r3, r3, #20
   16364:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   16368:	65fb      	str	r3, [r7, #92]	; 0x5c
   1636a:	f04f 0200 	mov.w	r2, #0
   1636e:	f04f 0300 	mov.w	r3, #0
   16372:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   16376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   16378:	f3c3 0313 	ubfx	r3, r3, #0, #20
   1637c:	65bb      	str	r3, [r7, #88]	; 0x58
   1637e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   16380:	4a36      	ldr	r2, [pc, #216]	; (1645c <log1p+0x2ec>)
   16382:	4293      	cmp	r3, r2
   16384:	dc0c      	bgt.n	163a0 <log1p+0x230>
   16386:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
   1638a:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1638e:	6dba      	ldr	r2, [r7, #88]	; 0x58
   16390:	4b31      	ldr	r3, [pc, #196]	; (16458 <log1p+0x2e8>)
   16392:	4313      	orrs	r3, r2
   16394:	617b      	str	r3, [r7, #20]
   16396:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1639a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   1639e:	e013      	b.n	163c8 <log1p+0x258>
   163a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   163a2:	3301      	adds	r3, #1
   163a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   163a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
   163aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
   163ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
   163b0:	4b25      	ldr	r3, [pc, #148]	; (16448 <log1p+0x2d8>)
   163b2:	4313      	orrs	r3, r2
   163b4:	60fb      	str	r3, [r7, #12]
   163b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   163ba:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
   163be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   163c0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
   163c4:	109b      	asrs	r3, r3, #2
   163c6:	65bb      	str	r3, [r7, #88]	; 0x58
   163c8:	f04f 0200 	mov.w	r2, #0
   163cc:	4b22      	ldr	r3, [pc, #136]	; (16458 <log1p+0x2e8>)
   163ce:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
   163d2:	f7fc ff85 	bl	132e0 <__aeabi_dsub>
   163d6:	4602      	mov	r2, r0
   163d8:	460b      	mov	r3, r1
   163da:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   163de:	f04f 0200 	mov.w	r2, #0
   163e2:	4b19      	ldr	r3, [pc, #100]	; (16448 <log1p+0x2d8>)
   163e4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
   163e8:	f7fd f932 	bl	13650 <__aeabi_dmul>
   163ec:	4602      	mov	r2, r0
   163ee:	460b      	mov	r3, r1
   163f0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
   163f4:	f7fd f92c 	bl	13650 <__aeabi_dmul>
   163f8:	4602      	mov	r2, r0
   163fa:	460b      	mov	r3, r1
   163fc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
   16400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   16402:	2b00      	cmp	r3, #0
   16404:	f040 80a8 	bne.w	16558 <log1p+0x3e8>
   16408:	f04f 0200 	mov.w	r2, #0
   1640c:	f04f 0300 	mov.w	r3, #0
   16410:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
   16414:	f7fd fb84 	bl	13b20 <__aeabi_dcmpeq>
   16418:	4603      	mov	r3, r0
   1641a:	2b00      	cmp	r3, #0
   1641c:	d045      	beq.n	164aa <log1p+0x33a>
   1641e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   16420:	2b00      	cmp	r3, #0
   16422:	d11d      	bne.n	16460 <log1p+0x2f0>
   16424:	f04f 0200 	mov.w	r2, #0
   16428:	f04f 0300 	mov.w	r3, #0
   1642c:	e189      	b.n	16742 <log1p+0x5d2>
   1642e:	bf00      	nop
   16430:	3fda8279 	.word	0x3fda8279
   16434:	3fefffff 	.word	0x3fefffff
   16438:	bff00000 	.word	0xbff00000
   1643c:	43500000 	.word	0x43500000
   16440:	3e1fffff 	.word	0x3e1fffff
   16444:	3c8fffff 	.word	0x3c8fffff
   16448:	3fe00000 	.word	0x3fe00000
   1644c:	bfd2bec4 	.word	0xbfd2bec4
   16450:	7fefffff 	.word	0x7fefffff
   16454:	433fffff 	.word	0x433fffff
   16458:	3ff00000 	.word	0x3ff00000
   1645c:	0006a09d 	.word	0x0006a09d
   16460:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   16462:	f7fd f88b 	bl	1357c <__aeabi_i2d>
   16466:	a3bc      	add	r3, pc, #752	; (adr r3, 16758 <log1p+0x5e8>)
   16468:	e9d3 2300 	ldrd	r2, r3, [r3]
   1646c:	f7fd f8f0 	bl	13650 <__aeabi_dmul>
   16470:	4602      	mov	r2, r0
   16472:	460b      	mov	r3, r1
   16474:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   16478:	f7fc ff34 	bl	132e4 <__adddf3>
   1647c:	4602      	mov	r2, r0
   1647e:	460b      	mov	r3, r1
   16480:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   16484:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   16486:	f7fd f879 	bl	1357c <__aeabi_i2d>
   1648a:	a3b1      	add	r3, pc, #708	; (adr r3, 16750 <log1p+0x5e0>)
   1648c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16490:	f7fd f8de 	bl	13650 <__aeabi_dmul>
   16494:	4602      	mov	r2, r0
   16496:	460b      	mov	r3, r1
   16498:	4610      	mov	r0, r2
   1649a:	4619      	mov	r1, r3
   1649c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   164a0:	f7fc ff20 	bl	132e4 <__adddf3>
   164a4:	4602      	mov	r2, r0
   164a6:	460b      	mov	r3, r1
   164a8:	e14b      	b.n	16742 <log1p+0x5d2>
   164aa:	a3bc      	add	r3, pc, #752	; (adr r3, 1679c <log1p+0x62c>)
   164ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   164b0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
   164b4:	f7fd f8cc 	bl	13650 <__aeabi_dmul>
   164b8:	4602      	mov	r2, r0
   164ba:	460b      	mov	r3, r1
   164bc:	f04f 0000 	mov.w	r0, #0
   164c0:	49b5      	ldr	r1, [pc, #724]	; (16798 <log1p+0x628>)
   164c2:	f7fc ff0d 	bl	132e0 <__aeabi_dsub>
   164c6:	4602      	mov	r2, r0
   164c8:	460b      	mov	r3, r1
   164ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
   164ce:	f7fd f8bf 	bl	13650 <__aeabi_dmul>
   164d2:	4602      	mov	r2, r0
   164d4:	460b      	mov	r3, r1
   164d6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   164da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   164dc:	2b00      	cmp	r3, #0
   164de:	d108      	bne.n	164f2 <log1p+0x382>
   164e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   164e4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
   164e8:	f7fc fefa 	bl	132e0 <__aeabi_dsub>
   164ec:	4602      	mov	r2, r0
   164ee:	460b      	mov	r3, r1
   164f0:	e127      	b.n	16742 <log1p+0x5d2>
   164f2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   164f4:	f7fd f842 	bl	1357c <__aeabi_i2d>
   164f8:	a395      	add	r3, pc, #596	; (adr r3, 16750 <log1p+0x5e0>)
   164fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   164fe:	f7fd f8a7 	bl	13650 <__aeabi_dmul>
   16502:	4602      	mov	r2, r0
   16504:	460b      	mov	r3, r1
   16506:	4614      	mov	r4, r2
   16508:	461d      	mov	r5, r3
   1650a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   1650c:	f7fd f836 	bl	1357c <__aeabi_i2d>
   16510:	a391      	add	r3, pc, #580	; (adr r3, 16758 <log1p+0x5e8>)
   16512:	e9d3 2300 	ldrd	r2, r3, [r3]
   16516:	f7fd f89b 	bl	13650 <__aeabi_dmul>
   1651a:	4602      	mov	r2, r0
   1651c:	460b      	mov	r3, r1
   1651e:	4610      	mov	r0, r2
   16520:	4619      	mov	r1, r3
   16522:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   16526:	f7fc fedd 	bl	132e4 <__adddf3>
   1652a:	4602      	mov	r2, r0
   1652c:	460b      	mov	r3, r1
   1652e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
   16532:	f7fc fed5 	bl	132e0 <__aeabi_dsub>
   16536:	4602      	mov	r2, r0
   16538:	460b      	mov	r3, r1
   1653a:	4610      	mov	r0, r2
   1653c:	4619      	mov	r1, r3
   1653e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
   16542:	f7fc fecd 	bl	132e0 <__aeabi_dsub>
   16546:	4602      	mov	r2, r0
   16548:	460b      	mov	r3, r1
   1654a:	4620      	mov	r0, r4
   1654c:	4629      	mov	r1, r5
   1654e:	f7fc fec7 	bl	132e0 <__aeabi_dsub>
   16552:	4602      	mov	r2, r0
   16554:	460b      	mov	r3, r1
   16556:	e0f4      	b.n	16742 <log1p+0x5d2>
   16558:	f04f 0200 	mov.w	r2, #0
   1655c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16560:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
   16564:	f7fc febe 	bl	132e4 <__adddf3>
   16568:	4602      	mov	r2, r0
   1656a:	460b      	mov	r3, r1
   1656c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
   16570:	f7fd f998 	bl	138a4 <__aeabi_ddiv>
   16574:	4602      	mov	r2, r0
   16576:	460b      	mov	r3, r1
   16578:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
   1657c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
   16580:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
   16584:	f7fd f864 	bl	13650 <__aeabi_dmul>
   16588:	4602      	mov	r2, r0
   1658a:	460b      	mov	r3, r1
   1658c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   16590:	a173      	add	r1, pc, #460	; (adr r1, 16760 <log1p+0x5f0>)
   16592:	e9d1 0100 	ldrd	r0, r1, [r1]
   16596:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   1659a:	f7fd f859 	bl	13650 <__aeabi_dmul>
   1659e:	4602      	mov	r2, r0
   165a0:	460b      	mov	r3, r1
   165a2:	4610      	mov	r0, r2
   165a4:	4619      	mov	r1, r3
   165a6:	a370      	add	r3, pc, #448	; (adr r3, 16768 <log1p+0x5f8>)
   165a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   165ac:	f7fc fe9a 	bl	132e4 <__adddf3>
   165b0:	4602      	mov	r2, r0
   165b2:	460b      	mov	r3, r1
   165b4:	4610      	mov	r0, r2
   165b6:	4619      	mov	r1, r3
   165b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   165bc:	f7fd f848 	bl	13650 <__aeabi_dmul>
   165c0:	4602      	mov	r2, r0
   165c2:	460b      	mov	r3, r1
   165c4:	4610      	mov	r0, r2
   165c6:	4619      	mov	r1, r3
   165c8:	a369      	add	r3, pc, #420	; (adr r3, 16770 <log1p+0x600>)
   165ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   165ce:	f7fc fe89 	bl	132e4 <__adddf3>
   165d2:	4602      	mov	r2, r0
   165d4:	460b      	mov	r3, r1
   165d6:	4610      	mov	r0, r2
   165d8:	4619      	mov	r1, r3
   165da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   165de:	f7fd f837 	bl	13650 <__aeabi_dmul>
   165e2:	4602      	mov	r2, r0
   165e4:	460b      	mov	r3, r1
   165e6:	4610      	mov	r0, r2
   165e8:	4619      	mov	r1, r3
   165ea:	a363      	add	r3, pc, #396	; (adr r3, 16778 <log1p+0x608>)
   165ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   165f0:	f7fc fe78 	bl	132e4 <__adddf3>
   165f4:	4602      	mov	r2, r0
   165f6:	460b      	mov	r3, r1
   165f8:	4610      	mov	r0, r2
   165fa:	4619      	mov	r1, r3
   165fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   16600:	f7fd f826 	bl	13650 <__aeabi_dmul>
   16604:	4602      	mov	r2, r0
   16606:	460b      	mov	r3, r1
   16608:	4610      	mov	r0, r2
   1660a:	4619      	mov	r1, r3
   1660c:	a35c      	add	r3, pc, #368	; (adr r3, 16780 <log1p+0x610>)
   1660e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16612:	f7fc fe67 	bl	132e4 <__adddf3>
   16616:	4602      	mov	r2, r0
   16618:	460b      	mov	r3, r1
   1661a:	4610      	mov	r0, r2
   1661c:	4619      	mov	r1, r3
   1661e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   16622:	f7fd f815 	bl	13650 <__aeabi_dmul>
   16626:	4602      	mov	r2, r0
   16628:	460b      	mov	r3, r1
   1662a:	4610      	mov	r0, r2
   1662c:	4619      	mov	r1, r3
   1662e:	a356      	add	r3, pc, #344	; (adr r3, 16788 <log1p+0x618>)
   16630:	e9d3 2300 	ldrd	r2, r3, [r3]
   16634:	f7fc fe56 	bl	132e4 <__adddf3>
   16638:	4602      	mov	r2, r0
   1663a:	460b      	mov	r3, r1
   1663c:	4610      	mov	r0, r2
   1663e:	4619      	mov	r1, r3
   16640:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   16644:	f7fd f804 	bl	13650 <__aeabi_dmul>
   16648:	4602      	mov	r2, r0
   1664a:	460b      	mov	r3, r1
   1664c:	4610      	mov	r0, r2
   1664e:	4619      	mov	r1, r3
   16650:	a34f      	add	r3, pc, #316	; (adr r3, 16790 <log1p+0x620>)
   16652:	e9d3 2300 	ldrd	r2, r3, [r3]
   16656:	f7fc fe45 	bl	132e4 <__adddf3>
   1665a:	4602      	mov	r2, r0
   1665c:	460b      	mov	r3, r1
   1665e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   16662:	f7fc fff5 	bl	13650 <__aeabi_dmul>
   16666:	4602      	mov	r2, r0
   16668:	460b      	mov	r3, r1
   1666a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   1666e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   16670:	2b00      	cmp	r3, #0
   16672:	d11c      	bne.n	166ae <log1p+0x53e>
   16674:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   16678:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
   1667c:	f7fc fe32 	bl	132e4 <__adddf3>
   16680:	4602      	mov	r2, r0
   16682:	460b      	mov	r3, r1
   16684:	4610      	mov	r0, r2
   16686:	4619      	mov	r1, r3
   16688:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
   1668c:	f7fc ffe0 	bl	13650 <__aeabi_dmul>
   16690:	4602      	mov	r2, r0
   16692:	460b      	mov	r3, r1
   16694:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
   16698:	f7fc fe22 	bl	132e0 <__aeabi_dsub>
   1669c:	4602      	mov	r2, r0
   1669e:	460b      	mov	r3, r1
   166a0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
   166a4:	f7fc fe1c 	bl	132e0 <__aeabi_dsub>
   166a8:	4602      	mov	r2, r0
   166aa:	460b      	mov	r3, r1
   166ac:	e049      	b.n	16742 <log1p+0x5d2>
   166ae:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   166b0:	f7fc ff64 	bl	1357c <__aeabi_i2d>
   166b4:	a326      	add	r3, pc, #152	; (adr r3, 16750 <log1p+0x5e0>)
   166b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   166ba:	f7fc ffc9 	bl	13650 <__aeabi_dmul>
   166be:	4602      	mov	r2, r0
   166c0:	460b      	mov	r3, r1
   166c2:	4614      	mov	r4, r2
   166c4:	461d      	mov	r5, r3
   166c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   166ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
   166ce:	f7fc fe09 	bl	132e4 <__adddf3>
   166d2:	4602      	mov	r2, r0
   166d4:	460b      	mov	r3, r1
   166d6:	4610      	mov	r0, r2
   166d8:	4619      	mov	r1, r3
   166da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
   166de:	f7fc ffb7 	bl	13650 <__aeabi_dmul>
   166e2:	4602      	mov	r2, r0
   166e4:	460b      	mov	r3, r1
   166e6:	4690      	mov	r8, r2
   166e8:	4699      	mov	r9, r3
   166ea:	6df8      	ldr	r0, [r7, #92]	; 0x5c
   166ec:	f7fc ff46 	bl	1357c <__aeabi_i2d>
   166f0:	a319      	add	r3, pc, #100	; (adr r3, 16758 <log1p+0x5e8>)
   166f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   166f6:	f7fc ffab 	bl	13650 <__aeabi_dmul>
   166fa:	4602      	mov	r2, r0
   166fc:	460b      	mov	r3, r1
   166fe:	4610      	mov	r0, r2
   16700:	4619      	mov	r1, r3
   16702:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   16706:	f7fc fded 	bl	132e4 <__adddf3>
   1670a:	4602      	mov	r2, r0
   1670c:	460b      	mov	r3, r1
   1670e:	4640      	mov	r0, r8
   16710:	4649      	mov	r1, r9
   16712:	f7fc fde7 	bl	132e4 <__adddf3>
   16716:	4602      	mov	r2, r0
   16718:	460b      	mov	r3, r1
   1671a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
   1671e:	f7fc fddf 	bl	132e0 <__aeabi_dsub>
   16722:	4602      	mov	r2, r0
   16724:	460b      	mov	r3, r1
   16726:	4610      	mov	r0, r2
   16728:	4619      	mov	r1, r3
   1672a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
   1672e:	f7fc fdd7 	bl	132e0 <__aeabi_dsub>
   16732:	4602      	mov	r2, r0
   16734:	460b      	mov	r3, r1
   16736:	4620      	mov	r0, r4
   16738:	4629      	mov	r1, r5
   1673a:	f7fc fdd1 	bl	132e0 <__aeabi_dsub>
   1673e:	4602      	mov	r2, r0
   16740:	460b      	mov	r3, r1
   16742:	4610      	mov	r0, r2
   16744:	4619      	mov	r1, r3
   16746:	3778      	adds	r7, #120	; 0x78
   16748:	46bd      	mov	sp, r7
   1674a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
   1674e:	bf00      	nop
   16750:	fee00000 	.word	0xfee00000
   16754:	3fe62e42 	.word	0x3fe62e42
   16758:	35793c76 	.word	0x35793c76
   1675c:	3dea39ef 	.word	0x3dea39ef
   16760:	df3e5244 	.word	0xdf3e5244
   16764:	3fc2f112 	.word	0x3fc2f112
   16768:	d078c69f 	.word	0xd078c69f
   1676c:	3fc39a09 	.word	0x3fc39a09
   16770:	96cb03de 	.word	0x96cb03de
   16774:	3fc74664 	.word	0x3fc74664
   16778:	1d8e78af 	.word	0x1d8e78af
   1677c:	3fcc71c5 	.word	0x3fcc71c5
   16780:	94229359 	.word	0x94229359
   16784:	3fd24924 	.word	0x3fd24924
   16788:	9997fa04 	.word	0x9997fa04
   1678c:	3fd99999 	.word	0x3fd99999
   16790:	55555593 	.word	0x55555593
   16794:	3fe55555 	.word	0x3fe55555
   16798:	3ff00000 	.word	0x3ff00000
   1679c:	55555555 	.word	0x55555555
   167a0:	3fe55555 	.word	0x3fe55555
   167a4:	00000000 	.word	0x00000000

000167a8 <__ieee754_rem_pio2>:
   167a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   167ac:	b0ae      	sub	sp, #184	; 0xb8
   167ae:	af02      	add	r7, sp, #8
   167b0:	e9c7 0104 	strd	r0, r1, [r7, #16]
   167b4:	60fa      	str	r2, [r7, #12]
   167b6:	f04f 0200 	mov.w	r2, #0
   167ba:	f04f 0300 	mov.w	r3, #0
   167be:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
   167c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   167c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
   167ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   167cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   167d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   167d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   167d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   167dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   167e0:	4ab1      	ldr	r2, [pc, #708]	; (16aa8 <__ieee754_rem_pio2+0x300>)
   167e2:	4293      	cmp	r3, r2
   167e4:	dc0f      	bgt.n	16806 <__ieee754_rem_pio2+0x5e>
   167e6:	68f9      	ldr	r1, [r7, #12]
   167e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   167ec:	e9c1 2300 	strd	r2, r3, [r1]
   167f0:	68fb      	ldr	r3, [r7, #12]
   167f2:	f103 0108 	add.w	r1, r3, #8
   167f6:	f04f 0200 	mov.w	r2, #0
   167fa:	f04f 0300 	mov.w	r3, #0
   167fe:	e9c1 2300 	strd	r2, r3, [r1]
   16802:	2300      	movs	r3, #0
   16804:	e31b      	b.n	16e3e <__ieee754_rem_pio2+0x696>
   16806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   1680a:	4aa8      	ldr	r2, [pc, #672]	; (16aac <__ieee754_rem_pio2+0x304>)
   1680c:	4293      	cmp	r3, r2
   1680e:	f300 80d5 	bgt.w	169bc <__ieee754_rem_pio2+0x214>
   16812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   16816:	2b00      	cmp	r3, #0
   16818:	dd67      	ble.n	168ea <__ieee754_rem_pio2+0x142>
   1681a:	a399      	add	r3, pc, #612	; (adr r3, 16a80 <__ieee754_rem_pio2+0x2d8>)
   1681c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16820:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   16824:	f7fc fd5c 	bl	132e0 <__aeabi_dsub>
   16828:	4602      	mov	r2, r0
   1682a:	460b      	mov	r3, r1
   1682c:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
   16830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   16834:	4a9e      	ldr	r2, [pc, #632]	; (16ab0 <__ieee754_rem_pio2+0x308>)
   16836:	4293      	cmp	r3, r2
   16838:	d025      	beq.n	16886 <__ieee754_rem_pio2+0xde>
   1683a:	a393      	add	r3, pc, #588	; (adr r3, 16a88 <__ieee754_rem_pio2+0x2e0>)
   1683c:	e9d3 2300 	ldrd	r2, r3, [r3]
   16840:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
   16844:	f7fc fd4c 	bl	132e0 <__aeabi_dsub>
   16848:	4602      	mov	r2, r0
   1684a:	460b      	mov	r3, r1
   1684c:	68f9      	ldr	r1, [r7, #12]
   1684e:	e9c1 2300 	strd	r2, r3, [r1]
   16852:	68fb      	ldr	r3, [r7, #12]
   16854:	e9d3 2300 	ldrd	r2, r3, [r3]
   16858:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
   1685c:	f7fc fd40 	bl	132e0 <__aeabi_dsub>
   16860:	4602      	mov	r2, r0
   16862:	460b      	mov	r3, r1
   16864:	4690      	mov	r8, r2
   16866:	4699      	mov	r9, r3
   16868:	a387      	add	r3, pc, #540	; (adr r3, 16a88 <__ieee754_rem_pio2+0x2e0>)
   1686a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1686e:	68f9      	ldr	r1, [r7, #12]
   16870:	f101 0408 	add.w	r4, r1, #8
   16874:	4640      	mov	r0, r8
   16876:	4649      	mov	r1, r9
   16878:	f7fc fd32 	bl	132e0 <__aeabi_dsub>
   1687c:	4602      	mov	r2, r0
   1687e:	460b      	mov	r3, r1
   16880:	e9c4 2300 	strd	r2, r3, [r4]
   16884:	e02f      	b.n	168e6 <__ieee754_rem_pio2+0x13e>
   16886:	a382      	add	r3, pc, #520	; (adr r3, 16a90 <__ieee754_rem_pio2+0x2e8>)
   16888:	e9d3 2300 	ldrd	r2, r3, [r3]
   1688c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
   16890:	f7fc fd26 	bl	132e0 <__aeabi_dsub>
   16894:	4602      	mov	r2, r0
   16896:	460b      	mov	r3, r1
   16898:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
   1689c:	a37e      	add	r3, pc, #504	; (adr r3, 16a98 <__ieee754_rem_pio2+0x2f0>)
   1689e:	e9d3 2300 	ldrd	r2, r3, [r3]
   168a2:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
   168a6:	f7fc fd1b 	bl	132e0 <__aeabi_dsub>
   168aa:	4602      	mov	r2, r0
   168ac:	460b      	mov	r3, r1
   168ae:	68f9      	ldr	r1, [r7, #12]
   168b0:	e9c1 2300 	strd	r2, r3, [r1]
   168b4:	68fb      	ldr	r3, [r7, #12]
   168b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   168ba:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
   168be:	f7fc fd0f 	bl	132e0 <__aeabi_dsub>
   168c2:	4602      	mov	r2, r0
   168c4:	460b      	mov	r3, r1
   168c6:	4690      	mov	r8, r2
   168c8:	4699      	mov	r9, r3
   168ca:	a373      	add	r3, pc, #460	; (adr r3, 16a98 <__ieee754_rem_pio2+0x2f0>)
   168cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   168d0:	68f9      	ldr	r1, [r7, #12]
   168d2:	f101 0408 	add.w	r4, r1, #8
   168d6:	4640      	mov	r0, r8
   168d8:	4649      	mov	r1, r9
   168da:	f7fc fd01 	bl	132e0 <__aeabi_dsub>
   168de:	4602      	mov	r2, r0
   168e0:	460b      	mov	r3, r1
   168e2:	e9c4 2300 	strd	r2, r3, [r4]
   168e6:	2301      	movs	r3, #1
   168e8:	e2a9      	b.n	16e3e <__ieee754_rem_pio2+0x696>
   168ea:	a365      	add	r3, pc, #404	; (adr r3, 16a80 <__ieee754_rem_pio2+0x2d8>)
   168ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   168f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   168f4:	f7fc fcf6 	bl	132e4 <__adddf3>
   168f8:	4602      	mov	r2, r0
   168fa:	460b      	mov	r3, r1
   168fc:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
   16900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   16904:	4a6a      	ldr	r2, [pc, #424]	; (16ab0 <__ieee754_rem_pio2+0x308>)
   16906:	4293      	cmp	r3, r2
   16908:	d025      	beq.n	16956 <__ieee754_rem_pio2+0x1ae>
   1690a:	a15f      	add	r1, pc, #380	; (adr r1, 16a88 <__ieee754_rem_pio2+0x2e0>)
   1690c:	e9d1 0100 	ldrd	r0, r1, [r1]
   16910:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
   16914:	f7fc fce6 	bl	132e4 <__adddf3>
   16918:	4602      	mov	r2, r0
   1691a:	460b      	mov	r3, r1
   1691c:	68f9      	ldr	r1, [r7, #12]
   1691e:	e9c1 2300 	strd	r2, r3, [r1]
   16922:	68fb      	ldr	r3, [r7, #12]
   16924:	e9d3 2300 	ldrd	r2, r3, [r3]
   16928:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
   1692c:	f7fc fcd8 	bl	132e0 <__aeabi_dsub>
   16930:	4602      	mov	r2, r0
   16932:	460b      	mov	r3, r1
   16934:	4690      	mov	r8, r2
   16936:	4699      	mov	r9, r3
   16938:	a353      	add	r3, pc, #332	; (adr r3, 16a88 <__ieee754_rem_pio2+0x2e0>)
   1693a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1693e:	68f9      	ldr	r1, [r7, #12]
   16940:	f101 0408 	add.w	r4, r1, #8
   16944:	4640      	mov	r0, r8
   16946:	4649      	mov	r1, r9
   16948:	f7fc fccc 	bl	132e4 <__adddf3>
   1694c:	4602      	mov	r2, r0
   1694e:	460b      	mov	r3, r1
   16950:	e9c4 2300 	strd	r2, r3, [r4]
   16954:	e02f      	b.n	169b6 <__ieee754_rem_pio2+0x20e>
   16956:	a34e      	add	r3, pc, #312	; (adr r3, 16a90 <__ieee754_rem_pio2+0x2e8>)
   16958:	e9d3 2300 	ldrd	r2, r3, [r3]
   1695c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
   16960:	f7fc fcc0 	bl	132e4 <__adddf3>
   16964:	4602      	mov	r2, r0
   16966:	460b      	mov	r3, r1
   16968:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
   1696c:	a14a      	add	r1, pc, #296	; (adr r1, 16a98 <__ieee754_rem_pio2+0x2f0>)
   1696e:	e9d1 0100 	ldrd	r0, r1, [r1]
   16972:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
   16976:	f7fc fcb5 	bl	132e4 <__adddf3>
   1697a:	4602      	mov	r2, r0
   1697c:	460b      	mov	r3, r1
   1697e:	68f9      	ldr	r1, [r7, #12]
   16980:	e9c1 2300 	strd	r2, r3, [r1]
   16984:	68fb      	ldr	r3, [r7, #12]
   16986:	e9d3 2300 	ldrd	r2, r3, [r3]
   1698a:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
   1698e:	f7fc fca7 	bl	132e0 <__aeabi_dsub>
   16992:	4602      	mov	r2, r0
   16994:	460b      	mov	r3, r1
   16996:	4690      	mov	r8, r2
   16998:	4699      	mov	r9, r3
   1699a:	a33f      	add	r3, pc, #252	; (adr r3, 16a98 <__ieee754_rem_pio2+0x2f0>)
   1699c:	e9d3 2300 	ldrd	r2, r3, [r3]
   169a0:	68f9      	ldr	r1, [r7, #12]
   169a2:	f101 0408 	add.w	r4, r1, #8
   169a6:	4640      	mov	r0, r8
   169a8:	4649      	mov	r1, r9
   169aa:	f7fc fc9b 	bl	132e4 <__adddf3>
   169ae:	4602      	mov	r2, r0
   169b0:	460b      	mov	r3, r1
   169b2:	e9c4 2300 	strd	r2, r3, [r4]
   169b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   169ba:	e240      	b.n	16e3e <__ieee754_rem_pio2+0x696>
   169bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   169c0:	4a3c      	ldr	r2, [pc, #240]	; (16ab4 <__ieee754_rem_pio2+0x30c>)
   169c2:	4293      	cmp	r3, r2
   169c4:	f300 8176 	bgt.w	16cb4 <__ieee754_rem_pio2+0x50c>
   169c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   169cc:	f00d fc7f 	bl	242ce <fabs>
   169d0:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
   169d4:	a132      	add	r1, pc, #200	; (adr r1, 16aa0 <__ieee754_rem_pio2+0x2f8>)
   169d6:	e9d1 0100 	ldrd	r0, r1, [r1]
   169da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
   169de:	f7fc fe37 	bl	13650 <__aeabi_dmul>
   169e2:	4602      	mov	r2, r0
   169e4:	460b      	mov	r3, r1
   169e6:	4610      	mov	r0, r2
   169e8:	4619      	mov	r1, r3
   169ea:	f04f 0200 	mov.w	r2, #0
   169ee:	4b32      	ldr	r3, [pc, #200]	; (16ab8 <__ieee754_rem_pio2+0x310>)
   169f0:	f7fc fc78 	bl	132e4 <__adddf3>
   169f4:	4602      	mov	r2, r0
   169f6:	460b      	mov	r3, r1
   169f8:	4610      	mov	r0, r2
   169fa:	4619      	mov	r1, r3
   169fc:	f7fd f8d8 	bl	13bb0 <__aeabi_d2iz>
   16a00:	4603      	mov	r3, r0
   16a02:	67fb      	str	r3, [r7, #124]	; 0x7c
   16a04:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
   16a06:	f7fc fdb9 	bl	1357c <__aeabi_i2d>
   16a0a:	4602      	mov	r2, r0
   16a0c:	460b      	mov	r3, r1
   16a0e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
   16a12:	a11b      	add	r1, pc, #108	; (adr r1, 16a80 <__ieee754_rem_pio2+0x2d8>)
   16a14:	e9d1 0100 	ldrd	r0, r1, [r1]
   16a18:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   16a1c:	f7fc fe18 	bl	13650 <__aeabi_dmul>
   16a20:	4602      	mov	r2, r0
   16a22:	460b      	mov	r3, r1
   16a24:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
   16a28:	f7fc fc5a 	bl	132e0 <__aeabi_dsub>
   16a2c:	4602      	mov	r2, r0
   16a2e:	460b      	mov	r3, r1
   16a30:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
   16a34:	a314      	add	r3, pc, #80	; (adr r3, 16a88 <__ieee754_rem_pio2+0x2e0>)
   16a36:	e9d3 2300 	ldrd	r2, r3, [r3]
   16a3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   16a3e:	f7fc fe07 	bl	13650 <__aeabi_dmul>
   16a42:	4602      	mov	r2, r0
   16a44:	460b      	mov	r3, r1
   16a46:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
   16a4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   16a4c:	2b1f      	cmp	r3, #31
   16a4e:	dc37      	bgt.n	16ac0 <__ieee754_rem_pio2+0x318>
   16a50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   16a52:	3b01      	subs	r3, #1
   16a54:	4a19      	ldr	r2, [pc, #100]	; (16abc <__ieee754_rem_pio2+0x314>)
   16a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   16a5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   16a5e:	429a      	cmp	r2, r3
   16a60:	d02e      	beq.n	16ac0 <__ieee754_rem_pio2+0x318>
   16a62:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
   16a66:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
   16a6a:	f7fc fc39 	bl	132e0 <__aeabi_dsub>
   16a6e:	4602      	mov	r2, r0
   16a70:	460b      	mov	r3, r1
   16a72:	68f9      	ldr	r1, [r7, #12]
   16a74:	e9c1 2300 	strd	r2, r3, [r1]
   16a78:	e0e6      	b.n	16c48 <__ieee754_rem_pio2+0x4a0>
   16a7a:	bf00      	nop
   16a7c:	f3af 8000 	nop.w
   16a80:	54400000 	.word	0x54400000
   16a84:	3ff921fb 	.word	0x3ff921fb
   16a88:	1a626331 	.word	0x1a626331
   16a8c:	3dd0b461 	.word	0x3dd0b461
   16a90:	1a600000 	.word	0x1a600000
   16a94:	3dd0b461 	.word	0x3dd0b461
   16a98:	2e037073 	.word	0x2e037073
   16a9c:	3ba3198a 	.word	0x3ba3198a
   16aa0:	6dc9c883 	.word	0x6dc9c883
   16aa4:	3fe45f30 	.word	0x3fe45f30
   16aa8:	3fe921fb 	.word	0x3fe921fb
   16aac:	4002d97b 	.word	0x4002d97b
   16ab0:	3ff921fb 	.word	0x3ff921fb
   16ab4:	413921fb 	.word	0x413921fb
   16ab8:	3fe00000 	.word	0x3fe00000
   16abc:	0002a9fc 	.word	0x0002a9fc
   16ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   16ac4:	151b      	asrs	r3, r3, #20
   16ac6:	667b      	str	r3, [r7, #100]	; 0x64
   16ac8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
   16acc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
   16ad0:	f7fc fc06 	bl	132e0 <__aeabi_dsub>
   16ad4:	4602      	mov	r2, r0
   16ad6:	460b      	mov	r3, r1
   16ad8:	68f9      	ldr	r1, [r7, #12]
   16ada:	e9c1 2300 	strd	r2, r3, [r1]
   16ade:	68fb      	ldr	r3, [r7, #12]
   16ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
   16ae4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   16ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16aea:	663b      	str	r3, [r7, #96]	; 0x60
   16aec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   16aee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   16af0:	0d1b      	lsrs	r3, r3, #20
   16af2:	f3c3 030a 	ubfx	r3, r3, #0, #11
   16af6:	1ad3      	subs	r3, r2, r3
   16af8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   16afc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   16b00:	2b10      	cmp	r3, #16
   16b02:	f340 80a1 	ble.w	16c48 <__ieee754_rem_pio2+0x4a0>
   16b06:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
   16b0a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   16b0e:	a3d1      	add	r3, pc, #836	; (adr r3, 16e54 <__ieee754_rem_pio2+0x6ac>)
   16b10:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b14:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   16b18:	f7fc fd9a 	bl	13650 <__aeabi_dmul>
   16b1c:	4602      	mov	r2, r0
   16b1e:	460b      	mov	r3, r1
   16b20:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
   16b24:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
   16b28:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
   16b2c:	f7fc fbd8 	bl	132e0 <__aeabi_dsub>
   16b30:	4602      	mov	r2, r0
   16b32:	460b      	mov	r3, r1
   16b34:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
   16b38:	a1c8      	add	r1, pc, #800	; (adr r1, 16e5c <__ieee754_rem_pio2+0x6b4>)
   16b3a:	e9d1 0100 	ldrd	r0, r1, [r1]
   16b3e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   16b42:	f7fc fd85 	bl	13650 <__aeabi_dmul>
   16b46:	4602      	mov	r2, r0
   16b48:	460b      	mov	r3, r1
   16b4a:	4614      	mov	r4, r2
   16b4c:	461d      	mov	r5, r3
   16b4e:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
   16b52:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
   16b56:	f7fc fbc3 	bl	132e0 <__aeabi_dsub>
   16b5a:	4602      	mov	r2, r0
   16b5c:	460b      	mov	r3, r1
   16b5e:	4610      	mov	r0, r2
   16b60:	4619      	mov	r1, r3
   16b62:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
   16b66:	f7fc fbbb 	bl	132e0 <__aeabi_dsub>
   16b6a:	4602      	mov	r2, r0
   16b6c:	460b      	mov	r3, r1
   16b6e:	4620      	mov	r0, r4
   16b70:	4629      	mov	r1, r5
   16b72:	f7fc fbb5 	bl	132e0 <__aeabi_dsub>
   16b76:	4602      	mov	r2, r0
   16b78:	460b      	mov	r3, r1
   16b7a:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
   16b7e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
   16b82:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
   16b86:	f7fc fbab 	bl	132e0 <__aeabi_dsub>
   16b8a:	4602      	mov	r2, r0
   16b8c:	460b      	mov	r3, r1
   16b8e:	68f9      	ldr	r1, [r7, #12]
   16b90:	e9c1 2300 	strd	r2, r3, [r1]
   16b94:	68fb      	ldr	r3, [r7, #12]
   16b96:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b9a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   16b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16ba0:	663b      	str	r3, [r7, #96]	; 0x60
   16ba2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   16ba4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   16ba6:	0d1b      	lsrs	r3, r3, #20
   16ba8:	f3c3 030a 	ubfx	r3, r3, #0, #11
   16bac:	1ad3      	subs	r3, r2, r3
   16bae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   16bb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   16bb6:	2b31      	cmp	r3, #49	; 0x31
   16bb8:	dd46      	ble.n	16c48 <__ieee754_rem_pio2+0x4a0>
   16bba:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
   16bbe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
   16bc2:	a3a8      	add	r3, pc, #672	; (adr r3, 16e64 <__ieee754_rem_pio2+0x6bc>)
   16bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   16bc8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
   16bcc:	f7fc fd40 	bl	13650 <__aeabi_dmul>
   16bd0:	4602      	mov	r2, r0
   16bd2:	460b      	mov	r3, r1
   16bd4:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
   16bd8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
   16bdc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
   16be0:	f7fc fb7e 	bl	132e0 <__aeabi_dsub>
   16be4:	4602      	mov	r2, r0
   16be6:	460b      	mov	r3, r1
   16be8:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
   16bec:	a19f      	add	r1, pc, #636	; (adr r1, 16e6c <__ieee754_rem_pio2+0x6c4>)
   16bee:	e9d1 0100 	ldrd	r0, r1, [r1]
   16bf2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
   16bf6:	f7fc fd2b 	bl	13650 <__aeabi_dmul>
   16bfa:	4602      	mov	r2, r0
   16bfc:	460b      	mov	r3, r1
   16bfe:	4614      	mov	r4, r2
   16c00:	461d      	mov	r5, r3
   16c02:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
   16c06:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
   16c0a:	f7fc fb69 	bl	132e0 <__aeabi_dsub>
   16c0e:	4602      	mov	r2, r0
   16c10:	460b      	mov	r3, r1
   16c12:	4610      	mov	r0, r2
   16c14:	4619      	mov	r1, r3
   16c16:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
   16c1a:	f7fc fb61 	bl	132e0 <__aeabi_dsub>
   16c1e:	4602      	mov	r2, r0
   16c20:	460b      	mov	r3, r1
   16c22:	4620      	mov	r0, r4
   16c24:	4629      	mov	r1, r5
   16c26:	f7fc fb5b 	bl	132e0 <__aeabi_dsub>
   16c2a:	4602      	mov	r2, r0
   16c2c:	460b      	mov	r3, r1
   16c2e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
   16c32:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
   16c36:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
   16c3a:	f7fc fb51 	bl	132e0 <__aeabi_dsub>
   16c3e:	4602      	mov	r2, r0
   16c40:	460b      	mov	r3, r1
   16c42:	68f9      	ldr	r1, [r7, #12]
   16c44:	e9c1 2300 	strd	r2, r3, [r1]
   16c48:	68fb      	ldr	r3, [r7, #12]
   16c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
   16c4e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
   16c52:	f7fc fb45 	bl	132e0 <__aeabi_dsub>
   16c56:	4602      	mov	r2, r0
   16c58:	460b      	mov	r3, r1
   16c5a:	4610      	mov	r0, r2
   16c5c:	4619      	mov	r1, r3
   16c5e:	68fb      	ldr	r3, [r7, #12]
   16c60:	f103 0408 	add.w	r4, r3, #8
   16c64:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
   16c68:	f7fc fb3a 	bl	132e0 <__aeabi_dsub>
   16c6c:	4602      	mov	r2, r0
   16c6e:	460b      	mov	r3, r1
   16c70:	e9c4 2300 	strd	r2, r3, [r4]
   16c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   16c78:	2b00      	cmp	r3, #0
   16c7a:	da19      	bge.n	16cb0 <__ieee754_rem_pio2+0x508>
   16c7c:	68fb      	ldr	r3, [r7, #12]
   16c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   16c82:	603a      	str	r2, [r7, #0]
   16c84:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   16c88:	607b      	str	r3, [r7, #4]
   16c8a:	68fb      	ldr	r3, [r7, #12]
   16c8c:	ed97 7b00 	vldr	d7, [r7]
   16c90:	ed83 7b00 	vstr	d7, [r3]
   16c94:	68fb      	ldr	r3, [r7, #12]
   16c96:	3308      	adds	r3, #8
   16c98:	e9d3 2300 	ldrd	r2, r3, [r3]
   16c9c:	68f9      	ldr	r1, [r7, #12]
   16c9e:	3108      	adds	r1, #8
   16ca0:	4692      	mov	sl, r2
   16ca2:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
   16ca6:	e9c1 ab00 	strd	sl, fp, [r1]
   16caa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   16cac:	425b      	negs	r3, r3
   16cae:	e0c6      	b.n	16e3e <__ieee754_rem_pio2+0x696>
   16cb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   16cb2:	e0c4      	b.n	16e3e <__ieee754_rem_pio2+0x696>
   16cb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   16cb8:	4a63      	ldr	r2, [pc, #396]	; (16e48 <__ieee754_rem_pio2+0x6a0>)
   16cba:	4293      	cmp	r3, r2
   16cbc:	dd13      	ble.n	16ce6 <__ieee754_rem_pio2+0x53e>
   16cbe:	68fb      	ldr	r3, [r7, #12]
   16cc0:	f103 0408 	add.w	r4, r3, #8
   16cc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   16cc8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   16ccc:	f7fc fb08 	bl	132e0 <__aeabi_dsub>
   16cd0:	4602      	mov	r2, r0
   16cd2:	460b      	mov	r3, r1
   16cd4:	e9c4 2300 	strd	r2, r3, [r4]
   16cd8:	e9d4 2300 	ldrd	r2, r3, [r4]
   16cdc:	68f9      	ldr	r1, [r7, #12]
   16cde:	e9c1 2300 	strd	r2, r3, [r1]
   16ce2:	2300      	movs	r3, #0
   16ce4:	e0ab      	b.n	16e3e <__ieee754_rem_pio2+0x696>
   16ce6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   16cea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   16cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   16cf4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
   16cf8:	e9c7 2308 	strd	r2, r3, [r7, #32]
   16cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
   16d00:	623b      	str	r3, [r7, #32]
   16d02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   16d06:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
   16d0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
   16d0e:	151b      	asrs	r3, r3, #20
   16d10:	f2a3 4316 	subw	r3, r3, #1046	; 0x416
   16d14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   16d18:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
   16d1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
   16d20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
   16d24:	051b      	lsls	r3, r3, #20
   16d26:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
   16d2a:	1ad3      	subs	r3, r2, r3
   16d2c:	61fb      	str	r3, [r7, #28]
   16d2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   16d32:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
   16d36:	2300      	movs	r3, #0
   16d38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   16d3c:	e031      	b.n	16da2 <__ieee754_rem_pio2+0x5fa>
   16d3e:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
   16d42:	f7fc ff35 	bl	13bb0 <__aeabi_d2iz>
   16d46:	4603      	mov	r3, r0
   16d48:	4618      	mov	r0, r3
   16d4a:	f7fc fc17 	bl	1357c <__aeabi_i2d>
   16d4e:	4602      	mov	r2, r0
   16d50:	460b      	mov	r3, r1
   16d52:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
   16d56:	00c9      	lsls	r1, r1, #3
   16d58:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
   16d5c:	4401      	add	r1, r0
   16d5e:	3968      	subs	r1, #104	; 0x68
   16d60:	e9c1 2300 	strd	r2, r3, [r1]
   16d64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   16d68:	00db      	lsls	r3, r3, #3
   16d6a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
   16d6e:	4413      	add	r3, r2
   16d70:	3b68      	subs	r3, #104	; 0x68
   16d72:	e9d3 2300 	ldrd	r2, r3, [r3]
   16d76:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
   16d7a:	f7fc fab1 	bl	132e0 <__aeabi_dsub>
   16d7e:	4602      	mov	r2, r0
   16d80:	460b      	mov	r3, r1
   16d82:	4610      	mov	r0, r2
   16d84:	4619      	mov	r1, r3
   16d86:	f04f 0200 	mov.w	r2, #0
   16d8a:	4b30      	ldr	r3, [pc, #192]	; (16e4c <__ieee754_rem_pio2+0x6a4>)
   16d8c:	f7fc fc60 	bl	13650 <__aeabi_dmul>
   16d90:	4602      	mov	r2, r0
   16d92:	460b      	mov	r3, r1
   16d94:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
   16d98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   16d9c:	3301      	adds	r3, #1
   16d9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   16da2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   16da6:	2b01      	cmp	r3, #1
   16da8:	ddc9      	ble.n	16d3e <__ieee754_rem_pio2+0x596>
   16daa:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
   16dae:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
   16db2:	2303      	movs	r3, #3
   16db4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   16db8:	e004      	b.n	16dc4 <__ieee754_rem_pio2+0x61c>
   16dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   16dbe:	3b01      	subs	r3, #1
   16dc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   16dc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   16dc8:	3b01      	subs	r3, #1
   16dca:	00db      	lsls	r3, r3, #3
   16dcc:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
   16dd0:	4413      	add	r3, r2
   16dd2:	3b68      	subs	r3, #104	; 0x68
   16dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
   16dd8:	f04f 0200 	mov.w	r2, #0
   16ddc:	f04f 0300 	mov.w	r3, #0
   16de0:	f7fc fe9e 	bl	13b20 <__aeabi_dcmpeq>
   16de4:	4603      	mov	r3, r0
   16de6:	2b00      	cmp	r3, #0
   16de8:	d1e7      	bne.n	16dba <__ieee754_rem_pio2+0x612>
   16dea:	f107 0048 	add.w	r0, r7, #72	; 0x48
   16dee:	4b18      	ldr	r3, [pc, #96]	; (16e50 <__ieee754_rem_pio2+0x6a8>)
   16df0:	9301      	str	r3, [sp, #4]
   16df2:	2302      	movs	r3, #2
   16df4:	9300      	str	r3, [sp, #0]
   16df6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
   16dfa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
   16dfe:	68f9      	ldr	r1, [r7, #12]
   16e00:	f009 f814 	bl	1fe2c <__kernel_rem_pio2>
   16e04:	67f8      	str	r0, [r7, #124]	; 0x7c
   16e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
   16e0a:	2b00      	cmp	r3, #0
   16e0c:	da16      	bge.n	16e3c <__ieee754_rem_pio2+0x694>
   16e0e:	68fb      	ldr	r3, [r7, #12]
   16e10:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e14:	4690      	mov	r8, r2
   16e16:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
   16e1a:	68fb      	ldr	r3, [r7, #12]
   16e1c:	e9c3 8900 	strd	r8, r9, [r3]
   16e20:	68fb      	ldr	r3, [r7, #12]
   16e22:	3308      	adds	r3, #8
   16e24:	e9d3 2300 	ldrd	r2, r3, [r3]
   16e28:	68f9      	ldr	r1, [r7, #12]
   16e2a:	3108      	adds	r1, #8
   16e2c:	4614      	mov	r4, r2
   16e2e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   16e32:	e9c1 4500 	strd	r4, r5, [r1]
   16e36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   16e38:	425b      	negs	r3, r3
   16e3a:	e000      	b.n	16e3e <__ieee754_rem_pio2+0x696>
   16e3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   16e3e:	4618      	mov	r0, r3
   16e40:	37b0      	adds	r7, #176	; 0xb0
   16e42:	46bd      	mov	sp, r7
   16e44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
   16e48:	7fefffff 	.word	0x7fefffff
   16e4c:	41700000 	.word	0x41700000
   16e50:	0002a8f4 	.word	0x0002a8f4
   16e54:	1a600000 	.word	0x1a600000
   16e58:	3dd0b461 	.word	0x3dd0b461
   16e5c:	2e037073 	.word	0x2e037073
   16e60:	3ba3198a 	.word	0x3ba3198a
   16e64:	2e000000 	.word	0x2e000000
   16e68:	3ba3198a 	.word	0x3ba3198a
   16e6c:	252049c1 	.word	0x252049c1
   16e70:	397b839a 	.word	0x397b839a
   16e74:	00000000 	.word	0x00000000

00016e78 <__ieee754_sqrt>:
   16e78:	b5b0      	push	{r4, r5, r7, lr}
   16e7a:	b094      	sub	sp, #80	; 0x50
   16e7c:	af00      	add	r7, sp, #0
   16e7e:	e9c7 0100 	strd	r0, r1, [r7]
   16e82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   16e86:	62bb      	str	r3, [r7, #40]	; 0x28
   16e88:	e9d7 2300 	ldrd	r2, r3, [r7]
   16e8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
   16e90:	697b      	ldr	r3, [r7, #20]
   16e92:	63fb      	str	r3, [r7, #60]	; 0x3c
   16e94:	693b      	ldr	r3, [r7, #16]
   16e96:	647b      	str	r3, [r7, #68]	; 0x44
   16e98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   16e9a:	4b6a      	ldr	r3, [pc, #424]	; (17044 <__ieee754_sqrt+0x1cc>)
   16e9c:	4013      	ands	r3, r2
   16e9e:	4a69      	ldr	r2, [pc, #420]	; (17044 <__ieee754_sqrt+0x1cc>)
   16ea0:	4293      	cmp	r3, r2
   16ea2:	d110      	bne.n	16ec6 <__ieee754_sqrt+0x4e>
   16ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
   16ea8:	e9d7 0100 	ldrd	r0, r1, [r7]
   16eac:	f7fc fbd0 	bl	13650 <__aeabi_dmul>
   16eb0:	4602      	mov	r2, r0
   16eb2:	460b      	mov	r3, r1
   16eb4:	4610      	mov	r0, r2
   16eb6:	4619      	mov	r1, r3
   16eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
   16ebc:	f7fc fa12 	bl	132e4 <__adddf3>
   16ec0:	4602      	mov	r2, r0
   16ec2:	460b      	mov	r3, r1
   16ec4:	e174      	b.n	171b0 <__ieee754_sqrt+0x338>
   16ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16ec8:	2b00      	cmp	r3, #0
   16eca:	dc27      	bgt.n	16f1c <__ieee754_sqrt+0xa4>
   16ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16ece:	43da      	mvns	r2, r3
   16ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16ed2:	4013      	ands	r3, r2
   16ed4:	461a      	mov	r2, r3
   16ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16ed8:	4313      	orrs	r3, r2
   16eda:	2b00      	cmp	r3, #0
   16edc:	d102      	bne.n	16ee4 <__ieee754_sqrt+0x6c>
   16ede:	e9d7 2300 	ldrd	r2, r3, [r7]
   16ee2:	e165      	b.n	171b0 <__ieee754_sqrt+0x338>
   16ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16ee6:	2b00      	cmp	r3, #0
   16ee8:	da18      	bge.n	16f1c <__ieee754_sqrt+0xa4>
   16eea:	e9d7 2300 	ldrd	r2, r3, [r7]
   16eee:	e9d7 0100 	ldrd	r0, r1, [r7]
   16ef2:	f7fc f9f5 	bl	132e0 <__aeabi_dsub>
   16ef6:	4602      	mov	r2, r0
   16ef8:	460b      	mov	r3, r1
   16efa:	4614      	mov	r4, r2
   16efc:	461d      	mov	r5, r3
   16efe:	e9d7 2300 	ldrd	r2, r3, [r7]
   16f02:	e9d7 0100 	ldrd	r0, r1, [r7]
   16f06:	f7fc f9eb 	bl	132e0 <__aeabi_dsub>
   16f0a:	4602      	mov	r2, r0
   16f0c:	460b      	mov	r3, r1
   16f0e:	4620      	mov	r0, r4
   16f10:	4629      	mov	r1, r5
   16f12:	f7fc fcc7 	bl	138a4 <__aeabi_ddiv>
   16f16:	4602      	mov	r2, r0
   16f18:	460b      	mov	r3, r1
   16f1a:	e149      	b.n	171b0 <__ieee754_sqrt+0x338>
   16f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f1e:	151b      	asrs	r3, r3, #20
   16f20:	633b      	str	r3, [r7, #48]	; 0x30
   16f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16f24:	2b00      	cmp	r3, #0
   16f26:	d12e      	bne.n	16f86 <__ieee754_sqrt+0x10e>
   16f28:	e00a      	b.n	16f40 <__ieee754_sqrt+0xc8>
   16f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16f2c:	3b15      	subs	r3, #21
   16f2e:	633b      	str	r3, [r7, #48]	; 0x30
   16f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16f32:	0ada      	lsrs	r2, r3, #11
   16f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f36:	4313      	orrs	r3, r2
   16f38:	63fb      	str	r3, [r7, #60]	; 0x3c
   16f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16f3c:	055b      	lsls	r3, r3, #21
   16f3e:	647b      	str	r3, [r7, #68]	; 0x44
   16f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f42:	2b00      	cmp	r3, #0
   16f44:	d0f1      	beq.n	16f2a <__ieee754_sqrt+0xb2>
   16f46:	2300      	movs	r3, #0
   16f48:	62fb      	str	r3, [r7, #44]	; 0x2c
   16f4a:	e005      	b.n	16f58 <__ieee754_sqrt+0xe0>
   16f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f4e:	005b      	lsls	r3, r3, #1
   16f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   16f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f54:	3301      	adds	r3, #1
   16f56:	62fb      	str	r3, [r7, #44]	; 0x2c
   16f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
   16f5e:	2b00      	cmp	r3, #0
   16f60:	d0f4      	beq.n	16f4c <__ieee754_sqrt+0xd4>
   16f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f64:	3b01      	subs	r3, #1
   16f66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   16f68:	1ad3      	subs	r3, r2, r3
   16f6a:	633b      	str	r3, [r7, #48]	; 0x30
   16f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f6e:	f1c3 0320 	rsb	r3, r3, #32
   16f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   16f74:	40da      	lsrs	r2, r3
   16f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f78:	4313      	orrs	r3, r2
   16f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   16f7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   16f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   16f80:	fa02 f303 	lsl.w	r3, r2, r3
   16f84:	647b      	str	r3, [r7, #68]	; 0x44
   16f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16f88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   16f8c:	633b      	str	r3, [r7, #48]	; 0x30
   16f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16f90:	f3c3 0313 	ubfx	r3, r3, #0, #20
   16f94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   16f98:	63fb      	str	r3, [r7, #60]	; 0x3c
   16f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16f9c:	f003 0301 	and.w	r3, r3, #1
   16fa0:	2b00      	cmp	r3, #0
   16fa2:	d00b      	beq.n	16fbc <__ieee754_sqrt+0x144>
   16fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16fa8:	4013      	ands	r3, r2
   16faa:	0fda      	lsrs	r2, r3, #31
   16fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16fae:	441a      	add	r2, r3
   16fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16fb2:	4413      	add	r3, r2
   16fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   16fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16fb8:	005b      	lsls	r3, r3, #1
   16fba:	647b      	str	r3, [r7, #68]	; 0x44
   16fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   16fbe:	105b      	asrs	r3, r3, #1
   16fc0:	633b      	str	r3, [r7, #48]	; 0x30
   16fc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   16fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16fc6:	4013      	ands	r3, r2
   16fc8:	0fda      	lsrs	r2, r3, #31
   16fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16fcc:	441a      	add	r2, r3
   16fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16fd0:	4413      	add	r3, r2
   16fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   16fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16fd6:	005b      	lsls	r3, r3, #1
   16fd8:	647b      	str	r3, [r7, #68]	; 0x44
   16fda:	2300      	movs	r3, #0
   16fdc:	64bb      	str	r3, [r7, #72]	; 0x48
   16fde:	2300      	movs	r3, #0
   16fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   16fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16fe4:	643b      	str	r3, [r7, #64]	; 0x40
   16fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16fe8:	637b      	str	r3, [r7, #52]	; 0x34
   16fea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   16fee:	64fb      	str	r3, [r7, #76]	; 0x4c
   16ff0:	e022      	b.n	17038 <__ieee754_sqrt+0x1c0>
   16ff2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   16ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   16ff6:	4413      	add	r3, r2
   16ff8:	61bb      	str	r3, [r7, #24]
   16ffa:	69ba      	ldr	r2, [r7, #24]
   16ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16ffe:	429a      	cmp	r2, r3
   17000:	dc0b      	bgt.n	1701a <__ieee754_sqrt+0x1a2>
   17002:	69ba      	ldr	r2, [r7, #24]
   17004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17006:	4413      	add	r3, r2
   17008:	63bb      	str	r3, [r7, #56]	; 0x38
   1700a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1700c:	69bb      	ldr	r3, [r7, #24]
   1700e:	1ad3      	subs	r3, r2, r3
   17010:	63fb      	str	r3, [r7, #60]	; 0x3c
   17012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   17014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17016:	4413      	add	r3, r2
   17018:	637b      	str	r3, [r7, #52]	; 0x34
   1701a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1701c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1701e:	4013      	ands	r3, r2
   17020:	0fda      	lsrs	r2, r3, #31
   17022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17024:	441a      	add	r2, r3
   17026:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17028:	4413      	add	r3, r2
   1702a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1702c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1702e:	005b      	lsls	r3, r3, #1
   17030:	647b      	str	r3, [r7, #68]	; 0x44
   17032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17034:	085b      	lsrs	r3, r3, #1
   17036:	64fb      	str	r3, [r7, #76]	; 0x4c
   17038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1703a:	2b00      	cmp	r3, #0
   1703c:	d1d9      	bne.n	16ff2 <__ieee754_sqrt+0x17a>
   1703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17040:	64fb      	str	r3, [r7, #76]	; 0x4c
   17042:	e047      	b.n	170d4 <__ieee754_sqrt+0x25c>
   17044:	7ff00000 	.word	0x7ff00000
   17048:	6cba      	ldr	r2, [r7, #72]	; 0x48
   1704a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1704c:	4413      	add	r3, r2
   1704e:	61fb      	str	r3, [r7, #28]
   17050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   17052:	61bb      	str	r3, [r7, #24]
   17054:	69ba      	ldr	r2, [r7, #24]
   17056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17058:	429a      	cmp	r2, r3
   1705a:	db07      	blt.n	1706c <__ieee754_sqrt+0x1f4>
   1705c:	69ba      	ldr	r2, [r7, #24]
   1705e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17060:	429a      	cmp	r2, r3
   17062:	d128      	bne.n	170b6 <__ieee754_sqrt+0x23e>
   17064:	69fa      	ldr	r2, [r7, #28]
   17066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17068:	429a      	cmp	r2, r3
   1706a:	d824      	bhi.n	170b6 <__ieee754_sqrt+0x23e>
   1706c:	69fa      	ldr	r2, [r7, #28]
   1706e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   17070:	4413      	add	r3, r2
   17072:	64bb      	str	r3, [r7, #72]	; 0x48
   17074:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17076:	69fb      	ldr	r3, [r7, #28]
   17078:	401a      	ands	r2, r3
   1707a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1707c:	429a      	cmp	r2, r3
   1707e:	d107      	bne.n	17090 <__ieee754_sqrt+0x218>
   17080:	6aba      	ldr	r2, [r7, #40]	; 0x28
   17082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17084:	4013      	ands	r3, r2
   17086:	2b00      	cmp	r3, #0
   17088:	d102      	bne.n	17090 <__ieee754_sqrt+0x218>
   1708a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1708c:	3301      	adds	r3, #1
   1708e:	63bb      	str	r3, [r7, #56]	; 0x38
   17090:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17092:	69bb      	ldr	r3, [r7, #24]
   17094:	1ad3      	subs	r3, r2, r3
   17096:	63fb      	str	r3, [r7, #60]	; 0x3c
   17098:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1709a:	69fb      	ldr	r3, [r7, #28]
   1709c:	429a      	cmp	r2, r3
   1709e:	d202      	bcs.n	170a6 <__ieee754_sqrt+0x22e>
   170a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   170a2:	3b01      	subs	r3, #1
   170a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   170a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   170a8:	69fb      	ldr	r3, [r7, #28]
   170aa:	1ad3      	subs	r3, r2, r3
   170ac:	647b      	str	r3, [r7, #68]	; 0x44
   170ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   170b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   170b2:	4413      	add	r3, r2
   170b4:	643b      	str	r3, [r7, #64]	; 0x40
   170b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   170b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   170ba:	4013      	ands	r3, r2
   170bc:	0fda      	lsrs	r2, r3, #31
   170be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   170c0:	441a      	add	r2, r3
   170c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   170c4:	4413      	add	r3, r2
   170c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   170c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   170ca:	005b      	lsls	r3, r3, #1
   170cc:	647b      	str	r3, [r7, #68]	; 0x44
   170ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   170d0:	085b      	lsrs	r3, r3, #1
   170d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   170d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   170d6:	2b00      	cmp	r3, #0
   170d8:	d1b6      	bne.n	17048 <__ieee754_sqrt+0x1d0>
   170da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   170dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   170de:	4313      	orrs	r3, r2
   170e0:	2b00      	cmp	r3, #0
   170e2:	d045      	beq.n	17170 <__ieee754_sqrt+0x2f8>
   170e4:	f04f 0000 	mov.w	r0, #0
   170e8:	4937      	ldr	r1, [pc, #220]	; (171c8 <__ieee754_sqrt+0x350>)
   170ea:	a335      	add	r3, pc, #212	; (adr r3, 171c0 <__ieee754_sqrt+0x348>)
   170ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   170f0:	f7fc f8f6 	bl	132e0 <__aeabi_dsub>
   170f4:	4602      	mov	r2, r0
   170f6:	460b      	mov	r3, r1
   170f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
   170fc:	f04f 0200 	mov.w	r2, #0
   17100:	4b31      	ldr	r3, [pc, #196]	; (171c8 <__ieee754_sqrt+0x350>)
   17102:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   17106:	f7fc fd29 	bl	13b5c <__aeabi_dcmpge>
   1710a:	4603      	mov	r3, r0
   1710c:	2b00      	cmp	r3, #0
   1710e:	d02f      	beq.n	17170 <__ieee754_sqrt+0x2f8>
   17110:	f04f 0000 	mov.w	r0, #0
   17114:	492c      	ldr	r1, [pc, #176]	; (171c8 <__ieee754_sqrt+0x350>)
   17116:	a32a      	add	r3, pc, #168	; (adr r3, 171c0 <__ieee754_sqrt+0x348>)
   17118:	e9d3 2300 	ldrd	r2, r3, [r3]
   1711c:	f7fc f8e2 	bl	132e4 <__adddf3>
   17120:	4602      	mov	r2, r0
   17122:	460b      	mov	r3, r1
   17124:	e9c7 2308 	strd	r2, r3, [r7, #32]
   17128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1712a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1712e:	d105      	bne.n	1713c <__ieee754_sqrt+0x2c4>
   17130:	2300      	movs	r3, #0
   17132:	643b      	str	r3, [r7, #64]	; 0x40
   17134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17136:	3301      	adds	r3, #1
   17138:	637b      	str	r3, [r7, #52]	; 0x34
   1713a:	e019      	b.n	17170 <__ieee754_sqrt+0x2f8>
   1713c:	f04f 0200 	mov.w	r2, #0
   17140:	4b21      	ldr	r3, [pc, #132]	; (171c8 <__ieee754_sqrt+0x350>)
   17142:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   17146:	f7fc fd13 	bl	13b70 <__aeabi_dcmpgt>
   1714a:	4603      	mov	r3, r0
   1714c:	2b00      	cmp	r3, #0
   1714e:	d00a      	beq.n	17166 <__ieee754_sqrt+0x2ee>
   17150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17152:	f113 0f02 	cmn.w	r3, #2
   17156:	d102      	bne.n	1715e <__ieee754_sqrt+0x2e6>
   17158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1715a:	3301      	adds	r3, #1
   1715c:	637b      	str	r3, [r7, #52]	; 0x34
   1715e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17160:	3302      	adds	r3, #2
   17162:	643b      	str	r3, [r7, #64]	; 0x40
   17164:	e004      	b.n	17170 <__ieee754_sqrt+0x2f8>
   17166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   17168:	3301      	adds	r3, #1
   1716a:	f023 0301 	bic.w	r3, r3, #1
   1716e:	643b      	str	r3, [r7, #64]	; 0x40
   17170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17172:	105a      	asrs	r2, r3, #1
   17174:	4b15      	ldr	r3, [pc, #84]	; (171cc <__ieee754_sqrt+0x354>)
   17176:	4413      	add	r3, r2
   17178:	63fb      	str	r3, [r7, #60]	; 0x3c
   1717a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1717c:	085b      	lsrs	r3, r3, #1
   1717e:	647b      	str	r3, [r7, #68]	; 0x44
   17180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17182:	f003 0301 	and.w	r3, r3, #1
   17186:	2b00      	cmp	r3, #0
   17188:	d003      	beq.n	17192 <__ieee754_sqrt+0x31a>
   1718a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1718c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   1718e:	4313      	orrs	r3, r2
   17190:	647b      	str	r3, [r7, #68]	; 0x44
   17192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17194:	051b      	lsls	r3, r3, #20
   17196:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   17198:	4413      	add	r3, r2
   1719a:	63fb      	str	r3, [r7, #60]	; 0x3c
   1719c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1719e:	60fb      	str	r3, [r7, #12]
   171a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   171a2:	60bb      	str	r3, [r7, #8]
   171a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   171a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
   171ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   171b0:	4610      	mov	r0, r2
   171b2:	4619      	mov	r1, r3
   171b4:	3750      	adds	r7, #80	; 0x50
   171b6:	46bd      	mov	sp, r7
   171b8:	bdb0      	pop	{r4, r5, r7, pc}
   171ba:	bf00      	nop
   171bc:	f3af 8000 	nop.w
   171c0:	c2f8f359 	.word	0xc2f8f359
   171c4:	01a56e1f 	.word	0x01a56e1f
   171c8:	3ff00000 	.word	0x3ff00000
   171cc:	3fe00000 	.word	0x3fe00000

000171d0 <__kernel_cos>:
   171d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
   171d4:	b094      	sub	sp, #80	; 0x50
   171d6:	af00      	add	r7, sp, #0
   171d8:	e9c7 0102 	strd	r0, r1, [r7, #8]
   171dc:	e9c7 2300 	strd	r2, r3, [r7]
   171e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   171e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
   171e8:	69fb      	ldr	r3, [r7, #28]
   171ea:	647b      	str	r3, [r7, #68]	; 0x44
   171ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   171ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   171f2:	647b      	str	r3, [r7, #68]	; 0x44
   171f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   171f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   171fa:	da0a      	bge.n	17212 <__kernel_cos+0x42>
   171fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   17200:	f7fc fcd6 	bl	13bb0 <__aeabi_d2iz>
   17204:	4603      	mov	r3, r0
   17206:	2b00      	cmp	r3, #0
   17208:	d103      	bne.n	17212 <__kernel_cos+0x42>
   1720a:	f04f 0200 	mov.w	r2, #0
   1720e:	4b8a      	ldr	r3, [pc, #552]	; (17438 <__kernel_cos+0x268>)
   17210:	e0f4      	b.n	173fc <__kernel_cos+0x22c>
   17212:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   17216:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1721a:	f7fc fa19 	bl	13650 <__aeabi_dmul>
   1721e:	4602      	mov	r2, r0
   17220:	460b      	mov	r3, r1
   17222:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
   17226:	a178      	add	r1, pc, #480	; (adr r1, 17408 <__kernel_cos+0x238>)
   17228:	e9d1 0100 	ldrd	r0, r1, [r1]
   1722c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   17230:	f7fc fa0e 	bl	13650 <__aeabi_dmul>
   17234:	4602      	mov	r2, r0
   17236:	460b      	mov	r3, r1
   17238:	4610      	mov	r0, r2
   1723a:	4619      	mov	r1, r3
   1723c:	a374      	add	r3, pc, #464	; (adr r3, 17410 <__kernel_cos+0x240>)
   1723e:	e9d3 2300 	ldrd	r2, r3, [r3]
   17242:	f7fc f84f 	bl	132e4 <__adddf3>
   17246:	4602      	mov	r2, r0
   17248:	460b      	mov	r3, r1
   1724a:	4610      	mov	r0, r2
   1724c:	4619      	mov	r1, r3
   1724e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   17252:	f7fc f9fd 	bl	13650 <__aeabi_dmul>
   17256:	4602      	mov	r2, r0
   17258:	460b      	mov	r3, r1
   1725a:	4610      	mov	r0, r2
   1725c:	4619      	mov	r1, r3
   1725e:	a36e      	add	r3, pc, #440	; (adr r3, 17418 <__kernel_cos+0x248>)
   17260:	e9d3 2300 	ldrd	r2, r3, [r3]
   17264:	f7fc f83e 	bl	132e4 <__adddf3>
   17268:	4602      	mov	r2, r0
   1726a:	460b      	mov	r3, r1
   1726c:	4610      	mov	r0, r2
   1726e:	4619      	mov	r1, r3
   17270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   17274:	f7fc f9ec 	bl	13650 <__aeabi_dmul>
   17278:	4602      	mov	r2, r0
   1727a:	460b      	mov	r3, r1
   1727c:	4610      	mov	r0, r2
   1727e:	4619      	mov	r1, r3
   17280:	a367      	add	r3, pc, #412	; (adr r3, 17420 <__kernel_cos+0x250>)
   17282:	e9d3 2300 	ldrd	r2, r3, [r3]
   17286:	f7fc f82d 	bl	132e4 <__adddf3>
   1728a:	4602      	mov	r2, r0
   1728c:	460b      	mov	r3, r1
   1728e:	4610      	mov	r0, r2
   17290:	4619      	mov	r1, r3
   17292:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   17296:	f7fc f9db 	bl	13650 <__aeabi_dmul>
   1729a:	4602      	mov	r2, r0
   1729c:	460b      	mov	r3, r1
   1729e:	4610      	mov	r0, r2
   172a0:	4619      	mov	r1, r3
   172a2:	a361      	add	r3, pc, #388	; (adr r3, 17428 <__kernel_cos+0x258>)
   172a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   172a8:	f7fc f81c 	bl	132e4 <__adddf3>
   172ac:	4602      	mov	r2, r0
   172ae:	460b      	mov	r3, r1
   172b0:	4610      	mov	r0, r2
   172b2:	4619      	mov	r1, r3
   172b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
   172b8:	f7fc f9ca 	bl	13650 <__aeabi_dmul>
   172bc:	4602      	mov	r2, r0
   172be:	460b      	mov	r3, r1
   172c0:	4610      	mov	r0, r2
   172c2:	4619      	mov	r1, r3
   172c4:	a35a      	add	r3, pc, #360	; (adr r3, 17430 <__kernel_cos+0x260>)
   172c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   172ca:	f7fc f80b 	bl	132e4 <__adddf3>
   172ce:	4602      	mov	r2, r0
   172d0:	460b      	mov	r3, r1
   172d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   172d6:	f7fc f9bb 	bl	13650 <__aeabi_dmul>
   172da:	4602      	mov	r2, r0
   172dc:	460b      	mov	r3, r1
   172de:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
   172e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   172e4:	4a55      	ldr	r2, [pc, #340]	; (1743c <__kernel_cos+0x26c>)
   172e6:	4293      	cmp	r3, r2
   172e8:	dc32      	bgt.n	17350 <__kernel_cos+0x180>
   172ea:	f04f 0400 	mov.w	r4, #0
   172ee:	4d52      	ldr	r5, [pc, #328]	; (17438 <__kernel_cos+0x268>)
   172f0:	f04f 0200 	mov.w	r2, #0
   172f4:	4b52      	ldr	r3, [pc, #328]	; (17440 <__kernel_cos+0x270>)
   172f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   172fa:	f7fc f9a9 	bl	13650 <__aeabi_dmul>
   172fe:	4602      	mov	r2, r0
   17300:	460b      	mov	r3, r1
   17302:	4690      	mov	r8, r2
   17304:	4699      	mov	r9, r3
   17306:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   1730a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   1730e:	f7fc f99f 	bl	13650 <__aeabi_dmul>
   17312:	4602      	mov	r2, r0
   17314:	460b      	mov	r3, r1
   17316:	4692      	mov	sl, r2
   17318:	469b      	mov	fp, r3
   1731a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1731e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   17322:	f7fc f995 	bl	13650 <__aeabi_dmul>
   17326:	4602      	mov	r2, r0
   17328:	460b      	mov	r3, r1
   1732a:	4650      	mov	r0, sl
   1732c:	4659      	mov	r1, fp
   1732e:	f7fb ffd7 	bl	132e0 <__aeabi_dsub>
   17332:	4602      	mov	r2, r0
   17334:	460b      	mov	r3, r1
   17336:	4640      	mov	r0, r8
   17338:	4649      	mov	r1, r9
   1733a:	f7fb ffd1 	bl	132e0 <__aeabi_dsub>
   1733e:	4602      	mov	r2, r0
   17340:	460b      	mov	r3, r1
   17342:	4620      	mov	r0, r4
   17344:	4629      	mov	r1, r5
   17346:	f7fb ffcb 	bl	132e0 <__aeabi_dsub>
   1734a:	4602      	mov	r2, r0
   1734c:	460b      	mov	r3, r1
   1734e:	e055      	b.n	173fc <__kernel_cos+0x22c>
   17350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17352:	4a3c      	ldr	r2, [pc, #240]	; (17444 <__kernel_cos+0x274>)
   17354:	4293      	cmp	r3, r2
   17356:	dd05      	ble.n	17364 <__kernel_cos+0x194>
   17358:	f04f 0200 	mov.w	r2, #0
   1735c:	4b3a      	ldr	r3, [pc, #232]	; (17448 <__kernel_cos+0x278>)
   1735e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
   17362:	e009      	b.n	17378 <__kernel_cos+0x1a8>
   17364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   17366:	f5a3 1300 	sub.w	r3, r3, #2097152	; 0x200000
   1736a:	617b      	str	r3, [r7, #20]
   1736c:	2300      	movs	r3, #0
   1736e:	613b      	str	r3, [r7, #16]
   17370:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   17374:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
   17378:	f04f 0200 	mov.w	r2, #0
   1737c:	4b30      	ldr	r3, [pc, #192]	; (17440 <__kernel_cos+0x270>)
   1737e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   17382:	f7fc f965 	bl	13650 <__aeabi_dmul>
   17386:	4602      	mov	r2, r0
   17388:	460b      	mov	r3, r1
   1738a:	4610      	mov	r0, r2
   1738c:	4619      	mov	r1, r3
   1738e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   17392:	f7fb ffa5 	bl	132e0 <__aeabi_dsub>
   17396:	4602      	mov	r2, r0
   17398:	460b      	mov	r3, r1
   1739a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1739e:	f04f 0000 	mov.w	r0, #0
   173a2:	4925      	ldr	r1, [pc, #148]	; (17438 <__kernel_cos+0x268>)
   173a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
   173a8:	f7fb ff9a 	bl	132e0 <__aeabi_dsub>
   173ac:	4602      	mov	r2, r0
   173ae:	460b      	mov	r3, r1
   173b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
   173b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   173b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
   173bc:	f7fc f948 	bl	13650 <__aeabi_dmul>
   173c0:	4602      	mov	r2, r0
   173c2:	460b      	mov	r3, r1
   173c4:	4614      	mov	r4, r2
   173c6:	461d      	mov	r5, r3
   173c8:	e9d7 2300 	ldrd	r2, r3, [r7]
   173cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   173d0:	f7fc f93e 	bl	13650 <__aeabi_dmul>
   173d4:	4602      	mov	r2, r0
   173d6:	460b      	mov	r3, r1
   173d8:	4620      	mov	r0, r4
   173da:	4629      	mov	r1, r5
   173dc:	f7fb ff80 	bl	132e0 <__aeabi_dsub>
   173e0:	4602      	mov	r2, r0
   173e2:	460b      	mov	r3, r1
   173e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   173e8:	f7fb ff7a 	bl	132e0 <__aeabi_dsub>
   173ec:	4602      	mov	r2, r0
   173ee:	460b      	mov	r3, r1
   173f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   173f4:	f7fb ff74 	bl	132e0 <__aeabi_dsub>
   173f8:	4602      	mov	r2, r0
   173fa:	460b      	mov	r3, r1
   173fc:	4610      	mov	r0, r2
   173fe:	4619      	mov	r1, r3
   17400:	3750      	adds	r7, #80	; 0x50
   17402:	46bd      	mov	sp, r7
   17404:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
   17408:	be8838d4 	.word	0xbe8838d4
   1740c:	bda8fae9 	.word	0xbda8fae9
   17410:	bdb4b1c4 	.word	0xbdb4b1c4
   17414:	3e21ee9e 	.word	0x3e21ee9e
   17418:	809c52ad 	.word	0x809c52ad
   1741c:	be927e4f 	.word	0xbe927e4f
   17420:	19cb1590 	.word	0x19cb1590
   17424:	3efa01a0 	.word	0x3efa01a0
   17428:	16c15177 	.word	0x16c15177
   1742c:	bf56c16c 	.word	0xbf56c16c
   17430:	5555554c 	.word	0x5555554c
   17434:	3fa55555 	.word	0x3fa55555
   17438:	3ff00000 	.word	0x3ff00000
   1743c:	3fd33332 	.word	0x3fd33332
   17440:	3fe00000 	.word	0x3fe00000
   17444:	3fe90000 	.word	0x3fe90000
   17448:	3fd20000 	.word	0x3fd20000
   1744c:	00000000 	.word	0x00000000

00017450 <__kernel_sin>:
   17450:	b5b0      	push	{r4, r5, r7, lr}
   17452:	b08e      	sub	sp, #56	; 0x38
   17454:	af00      	add	r7, sp, #0
   17456:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1745a:	e9c7 2300 	strd	r2, r3, [r7]
   1745e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   17462:	e9c7 2304 	strd	r2, r3, [r7, #16]
   17466:	697b      	ldr	r3, [r7, #20]
   17468:	637b      	str	r3, [r7, #52]	; 0x34
   1746a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1746c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   17470:	637b      	str	r3, [r7, #52]	; 0x34
   17472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17474:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
   17478:	da09      	bge.n	1748e <__kernel_sin+0x3e>
   1747a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1747e:	f7fc fb97 	bl	13bb0 <__aeabi_d2iz>
   17482:	4603      	mov	r3, r0
   17484:	2b00      	cmp	r3, #0
   17486:	d102      	bne.n	1748e <__kernel_sin+0x3e>
   17488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1748c:	e0bf      	b.n	1760e <__kernel_sin+0x1be>
   1748e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   17492:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   17496:	f7fc f8db 	bl	13650 <__aeabi_dmul>
   1749a:	4602      	mov	r2, r0
   1749c:	460b      	mov	r3, r1
   1749e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   174a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   174a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   174aa:	f7fc f8d1 	bl	13650 <__aeabi_dmul>
   174ae:	4602      	mov	r2, r0
   174b0:	460b      	mov	r3, r1
   174b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
   174b6:	a15b      	add	r1, pc, #364	; (adr r1, 17624 <__kernel_sin+0x1d4>)
   174b8:	e9d1 0100 	ldrd	r0, r1, [r1]
   174bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   174c0:	f7fc f8c6 	bl	13650 <__aeabi_dmul>
   174c4:	4602      	mov	r2, r0
   174c6:	460b      	mov	r3, r1
   174c8:	4610      	mov	r0, r2
   174ca:	4619      	mov	r1, r3
   174cc:	a357      	add	r3, pc, #348	; (adr r3, 1762c <__kernel_sin+0x1dc>)
   174ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   174d2:	f7fb ff07 	bl	132e4 <__adddf3>
   174d6:	4602      	mov	r2, r0
   174d8:	460b      	mov	r3, r1
   174da:	4610      	mov	r0, r2
   174dc:	4619      	mov	r1, r3
   174de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   174e2:	f7fc f8b5 	bl	13650 <__aeabi_dmul>
   174e6:	4602      	mov	r2, r0
   174e8:	460b      	mov	r3, r1
   174ea:	4610      	mov	r0, r2
   174ec:	4619      	mov	r1, r3
   174ee:	a351      	add	r3, pc, #324	; (adr r3, 17634 <__kernel_sin+0x1e4>)
   174f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   174f4:	f7fb fef6 	bl	132e4 <__adddf3>
   174f8:	4602      	mov	r2, r0
   174fa:	460b      	mov	r3, r1
   174fc:	4610      	mov	r0, r2
   174fe:	4619      	mov	r1, r3
   17500:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   17504:	f7fc f8a4 	bl	13650 <__aeabi_dmul>
   17508:	4602      	mov	r2, r0
   1750a:	460b      	mov	r3, r1
   1750c:	4610      	mov	r0, r2
   1750e:	4619      	mov	r1, r3
   17510:	a34a      	add	r3, pc, #296	; (adr r3, 1763c <__kernel_sin+0x1ec>)
   17512:	e9d3 2300 	ldrd	r2, r3, [r3]
   17516:	f7fb fee5 	bl	132e4 <__adddf3>
   1751a:	4602      	mov	r2, r0
   1751c:	460b      	mov	r3, r1
   1751e:	4610      	mov	r0, r2
   17520:	4619      	mov	r1, r3
   17522:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   17526:	f7fc f893 	bl	13650 <__aeabi_dmul>
   1752a:	4602      	mov	r2, r0
   1752c:	460b      	mov	r3, r1
   1752e:	4610      	mov	r0, r2
   17530:	4619      	mov	r1, r3
   17532:	a344      	add	r3, pc, #272	; (adr r3, 17644 <__kernel_sin+0x1f4>)
   17534:	e9d3 2300 	ldrd	r2, r3, [r3]
   17538:	f7fb fed4 	bl	132e4 <__adddf3>
   1753c:	4602      	mov	r2, r0
   1753e:	460b      	mov	r3, r1
   17540:	e9c7 2306 	strd	r2, r3, [r7, #24]
   17544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   17546:	2b00      	cmp	r3, #0
   17548:	d121      	bne.n	1758e <__kernel_sin+0x13e>
   1754a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1754e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
   17552:	f7fc f87d 	bl	13650 <__aeabi_dmul>
   17556:	4602      	mov	r2, r0
   17558:	460b      	mov	r3, r1
   1755a:	4610      	mov	r0, r2
   1755c:	4619      	mov	r1, r3
   1755e:	a32e      	add	r3, pc, #184	; (adr r3, 17618 <__kernel_sin+0x1c8>)
   17560:	e9d3 2300 	ldrd	r2, r3, [r3]
   17564:	f7fb febe 	bl	132e4 <__adddf3>
   17568:	4602      	mov	r2, r0
   1756a:	460b      	mov	r3, r1
   1756c:	4610      	mov	r0, r2
   1756e:	4619      	mov	r1, r3
   17570:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   17574:	f7fc f86c 	bl	13650 <__aeabi_dmul>
   17578:	4602      	mov	r2, r0
   1757a:	460b      	mov	r3, r1
   1757c:	4610      	mov	r0, r2
   1757e:	4619      	mov	r1, r3
   17580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   17584:	f7fb feae 	bl	132e4 <__adddf3>
   17588:	4602      	mov	r2, r0
   1758a:	460b      	mov	r3, r1
   1758c:	e03f      	b.n	1760e <__kernel_sin+0x1be>
   1758e:	f04f 0000 	mov.w	r0, #0
   17592:	4923      	ldr	r1, [pc, #140]	; (17620 <__kernel_sin+0x1d0>)
   17594:	e9d7 2300 	ldrd	r2, r3, [r7]
   17598:	f7fc f85a 	bl	13650 <__aeabi_dmul>
   1759c:	4602      	mov	r2, r0
   1759e:	460b      	mov	r3, r1
   175a0:	4614      	mov	r4, r2
   175a2:	461d      	mov	r5, r3
   175a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   175a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
   175ac:	f7fc f850 	bl	13650 <__aeabi_dmul>
   175b0:	4602      	mov	r2, r0
   175b2:	460b      	mov	r3, r1
   175b4:	4620      	mov	r0, r4
   175b6:	4629      	mov	r1, r5
   175b8:	f7fb fe92 	bl	132e0 <__aeabi_dsub>
   175bc:	4602      	mov	r2, r0
   175be:	460b      	mov	r3, r1
   175c0:	4610      	mov	r0, r2
   175c2:	4619      	mov	r1, r3
   175c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   175c8:	f7fc f842 	bl	13650 <__aeabi_dmul>
   175cc:	4602      	mov	r2, r0
   175ce:	460b      	mov	r3, r1
   175d0:	4610      	mov	r0, r2
   175d2:	4619      	mov	r1, r3
   175d4:	e9d7 2300 	ldrd	r2, r3, [r7]
   175d8:	f7fb fe82 	bl	132e0 <__aeabi_dsub>
   175dc:	4602      	mov	r2, r0
   175de:	460b      	mov	r3, r1
   175e0:	4614      	mov	r4, r2
   175e2:	461d      	mov	r5, r3
   175e4:	a10c      	add	r1, pc, #48	; (adr r1, 17618 <__kernel_sin+0x1c8>)
   175e6:	e9d1 0100 	ldrd	r0, r1, [r1]
   175ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   175ee:	f7fc f82f 	bl	13650 <__aeabi_dmul>
   175f2:	4602      	mov	r2, r0
   175f4:	460b      	mov	r3, r1
   175f6:	4620      	mov	r0, r4
   175f8:	4629      	mov	r1, r5
   175fa:	f7fb fe71 	bl	132e0 <__aeabi_dsub>
   175fe:	4602      	mov	r2, r0
   17600:	460b      	mov	r3, r1
   17602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   17606:	f7fb fe6b 	bl	132e0 <__aeabi_dsub>
   1760a:	4602      	mov	r2, r0
   1760c:	460b      	mov	r3, r1
   1760e:	4610      	mov	r0, r2
   17610:	4619      	mov	r1, r3
   17612:	3738      	adds	r7, #56	; 0x38
   17614:	46bd      	mov	sp, r7
   17616:	bdb0      	pop	{r4, r5, r7, pc}
   17618:	55555549 	.word	0x55555549
   1761c:	bfc55555 	.word	0xbfc55555
   17620:	3fe00000 	.word	0x3fe00000
   17624:	5acfd57c 	.word	0x5acfd57c
   17628:	3de5d93a 	.word	0x3de5d93a
   1762c:	8a2b9ceb 	.word	0x8a2b9ceb
   17630:	be5ae5e6 	.word	0xbe5ae5e6
   17634:	57b1fe7d 	.word	0x57b1fe7d
   17638:	3ec71de3 	.word	0x3ec71de3
   1763c:	19c161d5 	.word	0x19c161d5
   17640:	bf2a01a0 	.word	0xbf2a01a0
   17644:	1110f8a6 	.word	0x1110f8a6
   17648:	3f811111 	.word	0x3f811111
   1764c:	00000000 	.word	0x00000000

00017650 <scalbn>:
   17650:	b580      	push	{r7, lr}
   17652:	b090      	sub	sp, #64	; 0x40
   17654:	af00      	add	r7, sp, #0
   17656:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1765a:	607a      	str	r2, [r7, #4]
   1765c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   17660:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   17664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   17666:	63bb      	str	r3, [r7, #56]	; 0x38
   17668:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1766a:	637b      	str	r3, [r7, #52]	; 0x34
   1766c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1766e:	151b      	asrs	r3, r3, #20
   17670:	f3c3 030a 	ubfx	r3, r3, #0, #11
   17674:	63fb      	str	r3, [r7, #60]	; 0x3c
   17676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17678:	2b00      	cmp	r3, #0
   1767a:	d12e      	bne.n	176da <scalbn+0x8a>
   1767c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1767e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   17682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   17684:	4313      	orrs	r3, r2
   17686:	2b00      	cmp	r3, #0
   17688:	d102      	bne.n	17690 <scalbn+0x40>
   1768a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1768e:	e0a1      	b.n	177d4 <scalbn+0x184>
   17690:	f04f 0200 	mov.w	r2, #0
   17694:	4b56      	ldr	r3, [pc, #344]	; (177f0 <scalbn+0x1a0>)
   17696:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1769a:	f7fb ffd9 	bl	13650 <__aeabi_dmul>
   1769e:	4602      	mov	r2, r0
   176a0:	460b      	mov	r3, r1
   176a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
   176a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   176aa:	e9c7 2308 	strd	r2, r3, [r7, #32]
   176ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176b0:	63bb      	str	r3, [r7, #56]	; 0x38
   176b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   176b4:	151b      	asrs	r3, r3, #20
   176b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
   176ba:	3b36      	subs	r3, #54	; 0x36
   176bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   176be:	687b      	ldr	r3, [r7, #4]
   176c0:	4a4c      	ldr	r2, [pc, #304]	; (177f4 <scalbn+0x1a4>)
   176c2:	4293      	cmp	r3, r2
   176c4:	da09      	bge.n	176da <scalbn+0x8a>
   176c6:	a146      	add	r1, pc, #280	; (adr r1, 177e0 <scalbn+0x190>)
   176c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   176cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   176d0:	f7fb ffbe 	bl	13650 <__aeabi_dmul>
   176d4:	4602      	mov	r2, r0
   176d6:	460b      	mov	r3, r1
   176d8:	e07c      	b.n	177d4 <scalbn+0x184>
   176da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   176dc:	f240 72ff 	movw	r2, #2047	; 0x7ff
   176e0:	4293      	cmp	r3, r2
   176e2:	d108      	bne.n	176f6 <scalbn+0xa6>
   176e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   176e8:	4602      	mov	r2, r0
   176ea:	460b      	mov	r3, r1
   176ec:	f7fb fdfa 	bl	132e4 <__adddf3>
   176f0:	4602      	mov	r2, r0
   176f2:	460b      	mov	r3, r1
   176f4:	e06e      	b.n	177d4 <scalbn+0x184>
   176f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   176f8:	687b      	ldr	r3, [r7, #4]
   176fa:	4413      	add	r3, r2
   176fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   176fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17700:	f240 72fe 	movw	r2, #2046	; 0x7fe
   17704:	4293      	cmp	r3, r2
   17706:	dd0e      	ble.n	17726 <scalbn+0xd6>
   17708:	a137      	add	r1, pc, #220	; (adr r1, 177e8 <scalbn+0x198>)
   1770a:	e9d1 0100 	ldrd	r0, r1, [r1]
   1770e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   17712:	f00c fe53 	bl	243bc <copysign>
   17716:	a334      	add	r3, pc, #208	; (adr r3, 177e8 <scalbn+0x198>)
   17718:	e9d3 2300 	ldrd	r2, r3, [r3]
   1771c:	f7fb ff98 	bl	13650 <__aeabi_dmul>
   17720:	4602      	mov	r2, r0
   17722:	460b      	mov	r3, r1
   17724:	e056      	b.n	177d4 <scalbn+0x184>
   17726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17728:	2b00      	cmp	r3, #0
   1772a:	dd11      	ble.n	17750 <scalbn+0x100>
   1772c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   17730:	e9c7 2306 	strd	r2, r3, [r7, #24]
   17734:	6bba      	ldr	r2, [r7, #56]	; 0x38
   17736:	4b30      	ldr	r3, [pc, #192]	; (177f8 <scalbn+0x1a8>)
   17738:	4013      	ands	r3, r2
   1773a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   1773c:	0512      	lsls	r2, r2, #20
   1773e:	4313      	orrs	r3, r2
   17740:	61fb      	str	r3, [r7, #28]
   17742:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   17746:	e9c7 2302 	strd	r2, r3, [r7, #8]
   1774a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1774e:	e041      	b.n	177d4 <scalbn+0x184>
   17750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   17752:	f113 0f35 	cmn.w	r3, #53	; 0x35
   17756:	da22      	bge.n	1779e <scalbn+0x14e>
   17758:	687b      	ldr	r3, [r7, #4]
   1775a:	f24c 3250 	movw	r2, #50000	; 0xc350
   1775e:	4293      	cmp	r3, r2
   17760:	dd0e      	ble.n	17780 <scalbn+0x130>
   17762:	a121      	add	r1, pc, #132	; (adr r1, 177e8 <scalbn+0x198>)
   17764:	e9d1 0100 	ldrd	r0, r1, [r1]
   17768:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1776c:	f00c fe26 	bl	243bc <copysign>
   17770:	a31d      	add	r3, pc, #116	; (adr r3, 177e8 <scalbn+0x198>)
   17772:	e9d3 2300 	ldrd	r2, r3, [r3]
   17776:	f7fb ff6b 	bl	13650 <__aeabi_dmul>
   1777a:	4602      	mov	r2, r0
   1777c:	460b      	mov	r3, r1
   1777e:	e029      	b.n	177d4 <scalbn+0x184>
   17780:	a117      	add	r1, pc, #92	; (adr r1, 177e0 <scalbn+0x190>)
   17782:	e9d1 0100 	ldrd	r0, r1, [r1]
   17786:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1778a:	f00c fe17 	bl	243bc <copysign>
   1778e:	a314      	add	r3, pc, #80	; (adr r3, 177e0 <scalbn+0x190>)
   17790:	e9d3 2300 	ldrd	r2, r3, [r3]
   17794:	f7fb ff5c 	bl	13650 <__aeabi_dmul>
   17798:	4602      	mov	r2, r0
   1779a:	460b      	mov	r3, r1
   1779c:	e01a      	b.n	177d4 <scalbn+0x184>
   1779e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   177a0:	3336      	adds	r3, #54	; 0x36
   177a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   177a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   177a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
   177ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
   177ae:	4b12      	ldr	r3, [pc, #72]	; (177f8 <scalbn+0x1a8>)
   177b0:	4013      	ands	r3, r2
   177b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   177b4:	0512      	lsls	r2, r2, #20
   177b6:	4313      	orrs	r3, r2
   177b8:	617b      	str	r3, [r7, #20]
   177ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   177be:	e9c7 2302 	strd	r2, r3, [r7, #8]
   177c2:	f04f 0000 	mov.w	r0, #0
   177c6:	490d      	ldr	r1, [pc, #52]	; (177fc <scalbn+0x1ac>)
   177c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   177cc:	f7fb ff40 	bl	13650 <__aeabi_dmul>
   177d0:	4602      	mov	r2, r0
   177d2:	460b      	mov	r3, r1
   177d4:	4610      	mov	r0, r2
   177d6:	4619      	mov	r1, r3
   177d8:	3740      	adds	r7, #64	; 0x40
   177da:	46bd      	mov	sp, r7
   177dc:	bd80      	pop	{r7, pc}
   177de:	bf00      	nop
   177e0:	c2f8f359 	.word	0xc2f8f359
   177e4:	01a56e1f 	.word	0x01a56e1f
   177e8:	8800759c 	.word	0x8800759c
   177ec:	7e37e43c 	.word	0x7e37e43c
   177f0:	43500000 	.word	0x43500000
   177f4:	ffff3cb0 	.word	0xffff3cb0
   177f8:	800fffff 	.word	0x800fffff
   177fc:	3c900000 	.word	0x3c900000

00017800 <_Z15GetAudioSamplesPN6tflite13ErrorReporterEiiPiPPs>:
}  // namespace

TfLiteStatus GetAudioSamples(tflite::ErrorReporter* error_reporter,
                             int start_ms, int duration_ms,
                             int* audio_samples_size, int16_t** audio_samples) {
  for (int i = 0; i < kMaxAudioSampleSize; ++i) {
   17800:	2200      	movs	r2, #0
   17802:	4907      	ldr	r1, [pc, #28]	; (17820 <_Z15GetAudioSamplesPN6tflite13ErrorReporterEiiPiPPs+0x20>)
                             int* audio_samples_size, int16_t** audio_samples) {
   17804:	b510      	push	{r4, lr}
   17806:	4608      	mov	r0, r1
    g_dummy_audio_data[i] = 0;
   17808:	4614      	mov	r4, r2
  for (int i = 0; i < kMaxAudioSampleSize; ++i) {
   1780a:	3201      	adds	r2, #1
   1780c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    g_dummy_audio_data[i] = 0;
   17810:	f821 4b02 	strh.w	r4, [r1], #2
  for (int i = 0; i < kMaxAudioSampleSize; ++i) {
   17814:	d1f9      	bne.n	1780a <_Z15GetAudioSamplesPN6tflite13ErrorReporterEiiPiPPs+0xa>
  }
  *audio_samples_size = kMaxAudioSampleSize;
   17816:	601a      	str	r2, [r3, #0]
  *audio_samples = g_dummy_audio_data;
   17818:	9b02      	ldr	r3, [sp, #8]
   1781a:	6018      	str	r0, [r3, #0]
  return kTfLiteOk;
}
   1781c:	2000      	movs	r0, #0
   1781e:	bd10      	pop	{r4, pc}
   17820:	20024f24 	.word	0x20024f24

00017824 <_Z20LatestAudioTimestampv>:

int32_t LatestAudioTimestamp() {
  g_latest_audio_timestamp += 100;
   17824:	4b02      	ldr	r3, [pc, #8]	; (17830 <_Z20LatestAudioTimestampv+0xc>)
   17826:	6818      	ldr	r0, [r3, #0]
   17828:	3064      	adds	r0, #100	; 0x64
   1782a:	6018      	str	r0, [r3, #0]
  return g_latest_audio_timestamp;
}
   1782c:	4770      	bx	lr
   1782e:	bf00      	nop
   17830:	20020170 	.word	0x20020170

00017834 <_Z16RespondToCommandPN6tflite13ErrorReporterEiPKchb>:
// The default implementation writes out the name of the recognized command
// to the error console. Real applications will want to take some custom
// action instead, and should implement their own versions of this function.
void RespondToCommand(tflite::ErrorReporter* error_reporter,
                      int32_t current_time, const char* found_command,
                      uint8_t score, bool is_new_command) {
   17834:	b410      	push	{r4}
   17836:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (is_new_command) {
   1783a:	b12c      	cbz	r4, 17848 <_Z16RespondToCommandPN6tflite13ErrorReporterEiPKchb+0x14>
    TF_LITE_REPORT_ERROR(error_reporter, "Heard %s (%d) @%dms", found_command,
   1783c:	9101      	str	r1, [sp, #4]
   1783e:	4904      	ldr	r1, [pc, #16]	; (17850 <_Z16RespondToCommandPN6tflite13ErrorReporterEiPKchb+0x1c>)
                         score, current_time);
  }
}
   17840:	f85d 4b04 	ldr.w	r4, [sp], #4
    TF_LITE_REPORT_ERROR(error_reporter, "Heard %s (%d) @%dms", found_command,
   17844:	f00b be94 	b.w	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
}
   17848:	f85d 4b04 	ldr.w	r4, [sp], #4
   1784c:	4770      	bx	lr
   1784e:	bf00      	nop
   17850:	0002ab28 	.word	0x0002ab28

00017854 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi>:

FeatureProvider::~FeatureProvider() {}

TfLiteStatus FeatureProvider::PopulateFeatureData(
    tflite::ErrorReporter* error_reporter, int32_t last_time_in_ms,
    int32_t time_in_ms, int* how_many_new_slices) {
   17854:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17858:	460d      	mov	r5, r1
  if (feature_size_ != kFeatureElementCount) {
   1785a:	6801      	ldr	r1, [r0, #0]
    int32_t time_in_ms, int* how_many_new_slices) {
   1785c:	4604      	mov	r4, r0
  if (feature_size_ != kFeatureElementCount) {
   1785e:	f5b1 6ff5 	cmp.w	r1, #1960	; 0x7a8
    int32_t time_in_ms, int* how_many_new_slices) {
   17862:	b087      	sub	sp, #28
  if (feature_size_ != kFeatureElementCount) {
   17864:	d008      	beq.n	17878 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0x24>
    TF_LITE_REPORT_ERROR(error_reporter,
   17866:	f44f 63f5 	mov.w	r3, #1960	; 0x7a8
   1786a:	460a      	mov	r2, r1
   1786c:	4933      	ldr	r1, [pc, #204]	; (1793c <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0xe8>)
      // TODO(petewarden): Fix bug that leads to non-zero slice_start_ms
      GetAudioSamples(error_reporter, (slice_start_ms > 0 ? slice_start_ms : 0),
                      kFeatureSliceDurationMs, &audio_samples_size,
                      &audio_samples);
      if (audio_samples_size < kMaxAudioSampleSize) {
        TF_LITE_REPORT_ERROR(error_reporter,
   1786e:	4628      	mov	r0, r5
   17870:	f00b fe7e 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Audio data size %d too small, want %d",
                             audio_samples_size, kMaxAudioSampleSize);
        return kTfLiteError;
   17874:	2001      	movs	r0, #1
   17876:	e04f      	b.n	17918 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0xc4>
  const int current_step = (time_in_ms / kFeatureSliceStrideMs);
   17878:	2114      	movs	r1, #20
   1787a:	fb93 f7f1 	sdiv	r7, r3, r1
  if (is_first_run_) {
   1787e:	7a03      	ldrb	r3, [r0, #8]
   17880:	b34b      	cbz	r3, 178d6 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0x82>
    TfLiteStatus init_status = InitializeMicroFeatures(error_reporter);
   17882:	4628      	mov	r0, r5
   17884:	f000 fb9a 	bl	17fbc <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE>
    if (init_status != kTfLiteOk) {
   17888:	2800      	cmp	r0, #0
   1788a:	d145      	bne.n	17918 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0xc4>
    slices_needed = kFeatureSliceCount;
   1788c:	2231      	movs	r2, #49	; 0x31
    is_first_run_ = false;
   1788e:	7220      	strb	r0, [r4, #8]
  *how_many_new_slices = slices_needed;
   17890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  if (slices_to_keep > 0) {
   17892:	f1d2 0631 	rsbs	r6, r2, #49	; 0x31
  *how_many_new_slices = slices_needed;
   17896:	601a      	str	r2, [r3, #0]
  if (slices_to_keep > 0) {
   17898:	d124      	bne.n	178e4 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0x90>
   1789a:	f04f 0814 	mov.w	r8, #20
   1789e:	fb08 f907 	mul.w	r9, r8, r7
      int16_t* audio_samples = nullptr;
   178a2:	2700      	movs	r7, #0
    for (int new_slice = slices_to_keep; new_slice < kFeatureSliceCount;
   178a4:	2e30      	cmp	r6, #48	; 0x30
   178a6:	dc36      	bgt.n	17916 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0xc2>
      GetAudioSamples(error_reporter, (slice_start_ms > 0 ? slice_start_ms : 0),
   178a8:	f5a9 7170 	sub.w	r1, r9, #960	; 0x3c0
   178ac:	fb08 1106 	mla	r1, r8, r6, r1
   178b0:	ab03      	add	r3, sp, #12
   178b2:	221e      	movs	r2, #30
   178b4:	9300      	str	r3, [sp, #0]
   178b6:	4628      	mov	r0, r5
   178b8:	ab04      	add	r3, sp, #16
   178ba:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
      int audio_samples_size = 0;
   178be:	e9cd 7703 	strd	r7, r7, [sp, #12]
      GetAudioSamples(error_reporter, (slice_start_ms > 0 ? slice_start_ms : 0),
   178c2:	f7ff ff9d 	bl	17800 <_Z15GetAudioSamplesPN6tflite13ErrorReporterEiiPiPPs>
      if (audio_samples_size < kMaxAudioSampleSize) {
   178c6:	9a04      	ldr	r2, [sp, #16]
   178c8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   178cc:	da27      	bge.n	1791e <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0xca>
        TF_LITE_REPORT_ERROR(error_reporter,
   178ce:	f44f 7300 	mov.w	r3, #512	; 0x200
   178d2:	491b      	ldr	r1, [pc, #108]	; (17940 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0xec>)
   178d4:	e7cb      	b.n	1786e <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0x1a>
  const int last_step = (last_time_in_ms / kFeatureSliceStrideMs);
   178d6:	fb92 f2f1 	sdiv	r2, r2, r1
  int slices_needed = current_step - last_step;
   178da:	1aba      	subs	r2, r7, r2
   178dc:	2a31      	cmp	r2, #49	; 0x31
   178de:	bfa8      	it	ge
   178e0:	2231      	movge	r2, #49	; 0x31
   178e2:	e7d5      	b.n	17890 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0x3c>
   178e4:	2328      	movs	r3, #40	; 0x28
  if (slices_to_keep > 0) {
   178e6:	2000      	movs	r0, #0
   178e8:	fb03 fc02 	mul.w	ip, r3, r2
   178ec:	4373      	muls	r3, r6
          feature_data_ + (dest_slice * kFeatureSliceSize);
   178ee:	6861      	ldr	r1, [r4, #4]
      for (int i = 0; i < kFeatureSliceSize; ++i) {
   178f0:	eb01 080c 	add.w	r8, r1, ip
   178f4:	eb01 0e00 	add.w	lr, r1, r0
   178f8:	3128      	adds	r1, #40	; 0x28
   178fa:	4401      	add	r1, r0
        dest_slice_data[i] = src_slice_data[i];
   178fc:	f918 9b01 	ldrsb.w	r9, [r8], #1
   17900:	f80e 9b01 	strb.w	r9, [lr], #1
      for (int i = 0; i < kFeatureSliceSize; ++i) {
   17904:	458e      	cmp	lr, r1
   17906:	d1f9      	bne.n	178fc <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0xa8>
    for (int dest_slice = 0; dest_slice < slices_to_keep; ++dest_slice) {
   17908:	3028      	adds	r0, #40	; 0x28
   1790a:	4298      	cmp	r0, r3
   1790c:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   17910:	d1ed      	bne.n	178ee <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0x9a>
  if (slices_needed > 0) {
   17912:	2a00      	cmp	r2, #0
   17914:	dcc1      	bgt.n	1789a <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0x46>
      if (generate_status != kTfLiteOk) {
        return generate_status;
      }
    }
  }
  return kTfLiteOk;
   17916:	2000      	movs	r0, #0
}
   17918:	b007      	add	sp, #28
   1791a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      TfLiteStatus generate_status = GenerateMicroFeatures(
   1791e:	ab05      	add	r3, sp, #20
   17920:	9301      	str	r3, [sp, #4]
      int8_t* new_slice_data = feature_data_ + (new_slice * kFeatureSliceSize);
   17922:	2328      	movs	r3, #40	; 0x28
   17924:	6861      	ldr	r1, [r4, #4]
      TfLiteStatus generate_status = GenerateMicroFeatures(
   17926:	4628      	mov	r0, r5
      int8_t* new_slice_data = feature_data_ + (new_slice * kFeatureSliceSize);
   17928:	fb03 1106 	mla	r1, r3, r6, r1
      TfLiteStatus generate_status = GenerateMicroFeatures(
   1792c:	9100      	str	r1, [sp, #0]
   1792e:	9903      	ldr	r1, [sp, #12]
   17930:	f000 fb8a 	bl	18048 <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj>
      if (generate_status != kTfLiteOk) {
   17934:	2800      	cmp	r0, #0
   17936:	d1ef      	bne.n	17918 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0xc4>
    for (int new_slice = slices_to_keep; new_slice < kFeatureSliceCount;
   17938:	3601      	adds	r6, #1
   1793a:	e7b3      	b.n	178a4 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi+0x50>
   1793c:	0002ab3c 	.word	0x0002ab3c
   17940:	0002ab6d 	.word	0x0002ab6d

00017944 <loop>:

  previous_time = 0;
}

// The name of this function is important for Arduino compatibility.
void loop() {
   17944:	b5f0      	push	{r4, r5, r6, r7, lr}
   17946:	b087      	sub	sp, #28
  // Fetch the spectrogram for the current time.
  const int32_t current_time = LatestAudioTimestamp();
   17948:	f7ff ff6c 	bl	17824 <_Z20LatestAudioTimestampv>
  int how_many_new_slices = 0;
   1794c:	2300      	movs	r3, #0
   1794e:	9304      	str	r3, [sp, #16]
  TfLiteStatus feature_status = feature_provider->PopulateFeatureData(
   17950:	ab04      	add	r3, sp, #16
   17952:	9300      	str	r3, [sp, #0]
   17954:	4c27      	ldr	r4, [pc, #156]	; (179f4 <loop+0xb0>)
   17956:	4603      	mov	r3, r0
  const int32_t current_time = LatestAudioTimestamp();
   17958:	4605      	mov	r5, r0
  TfLiteStatus feature_status = feature_provider->PopulateFeatureData(
   1795a:	4f27      	ldr	r7, [pc, #156]	; (179f8 <loop+0xb4>)
   1795c:	4827      	ldr	r0, [pc, #156]	; (179fc <loop+0xb8>)
   1795e:	683a      	ldr	r2, [r7, #0]
   17960:	6821      	ldr	r1, [r4, #0]
   17962:	6800      	ldr	r0, [r0, #0]
   17964:	f7ff ff76 	bl	17854 <_ZN15FeatureProvider19PopulateFeatureDataEPN6tflite13ErrorReporterEiiPi>
      error_reporter, previous_time, current_time, &how_many_new_slices);
  if (feature_status != kTfLiteOk) {
   17968:	4626      	mov	r6, r4
   1796a:	b128      	cbz	r0, 17978 <loop+0x34>
    TF_LITE_REPORT_ERROR(error_reporter, "Feature generation failed");
   1796c:	4924      	ldr	r1, [pc, #144]	; (17a00 <loop+0xbc>)
   1796e:	6820      	ldr	r0, [r4, #0]
  uint8_t score = 0;
  bool is_new_command = false;
  TfLiteStatus process_status = recognizer->ProcessLatestResults(
      output, current_time, &found_command, &score, &is_new_command);
  if (process_status != kTfLiteOk) {
    TF_LITE_REPORT_ERROR(error_reporter,
   17970:	f00b fdfe 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  // Do something based on the recognized command. The default implementation
  // just prints to the error console, but you should replace this with your
  // own function for a real application.
  RespondToCommand(error_reporter, current_time, found_command, score,
                   is_new_command);
}
   17974:	b007      	add	sp, #28
   17976:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (how_many_new_slices == 0) {
   17978:	9b04      	ldr	r3, [sp, #16]
  previous_time = current_time;
   1797a:	603d      	str	r5, [r7, #0]
  if (how_many_new_slices == 0) {
   1797c:	2b00      	cmp	r3, #0
   1797e:	d0f9      	beq.n	17974 <loop+0x30>
    model_input_buffer[i] = feature_buffer[i];
   17980:	4b20      	ldr	r3, [pc, #128]	; (17a04 <loop+0xc0>)
   17982:	4921      	ldr	r1, [pc, #132]	; (17a08 <loop+0xc4>)
   17984:	681b      	ldr	r3, [r3, #0]
   17986:	1e5a      	subs	r2, r3, #1
   17988:	f203 73a7 	addw	r3, r3, #1959	; 0x7a7
   1798c:	f911 0b01 	ldrsb.w	r0, [r1], #1
   17990:	f802 0f01 	strb.w	r0, [r2, #1]!
  for (int i = 0; i < kFeatureElementCount; i++) {
   17994:	429a      	cmp	r2, r3
   17996:	d1f9      	bne.n	1798c <loop+0x48>
  TfLiteStatus invoke_status = interpreter->Invoke();
   17998:	4f1c      	ldr	r7, [pc, #112]	; (17a0c <loop+0xc8>)
   1799a:	6838      	ldr	r0, [r7, #0]
   1799c:	f003 f844 	bl	1aa28 <_ZN6tflite16MicroInterpreter6InvokeEv>
  if (invoke_status != kTfLiteOk) {
   179a0:	4604      	mov	r4, r0
   179a2:	b110      	cbz	r0, 179aa <loop+0x66>
    TF_LITE_REPORT_ERROR(error_reporter, "Invoke failed");
   179a4:	491a      	ldr	r1, [pc, #104]	; (17a10 <loop+0xcc>)
    TF_LITE_REPORT_ERROR(error_reporter,
   179a6:	6830      	ldr	r0, [r6, #0]
   179a8:	e7e2      	b.n	17970 <loop+0x2c>
  TfLiteTensor* output = interpreter->output(0);
   179aa:	4601      	mov	r1, r0
   179ac:	6838      	ldr	r0, [r7, #0]
   179ae:	f002 ffa1 	bl	1a8f4 <_ZN6tflite16MicroInterpreter6outputEj>
  TfLiteStatus process_status = recognizer->ProcessLatestResults(
   179b2:	f10d 030f 	add.w	r3, sp, #15
   179b6:	9301      	str	r3, [sp, #4]
  TfLiteTensor* output = interpreter->output(0);
   179b8:	4601      	mov	r1, r0
  TfLiteStatus process_status = recognizer->ProcessLatestResults(
   179ba:	f10d 030e 	add.w	r3, sp, #14
   179be:	4815      	ldr	r0, [pc, #84]	; (17a14 <loop+0xd0>)
   179c0:	9300      	str	r3, [sp, #0]
   179c2:	462a      	mov	r2, r5
   179c4:	6800      	ldr	r0, [r0, #0]
   179c6:	ab05      	add	r3, sp, #20
  const char* found_command = nullptr;
   179c8:	9405      	str	r4, [sp, #20]
  uint8_t score = 0;
   179ca:	f88d 400e 	strb.w	r4, [sp, #14]
  bool is_new_command = false;
   179ce:	f88d 400f 	strb.w	r4, [sp, #15]
  TfLiteStatus process_status = recognizer->ProcessLatestResults(
   179d2:	f000 f9cf 	bl	17d74 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb>
  if (process_status != kTfLiteOk) {
   179d6:	b108      	cbz	r0, 179dc <loop+0x98>
    TF_LITE_REPORT_ERROR(error_reporter,
   179d8:	490f      	ldr	r1, [pc, #60]	; (17a18 <loop+0xd4>)
   179da:	e7e4      	b.n	179a6 <loop+0x62>
  RespondToCommand(error_reporter, current_time, found_command, score,
   179dc:	f89d 300f 	ldrb.w	r3, [sp, #15]
   179e0:	4629      	mov	r1, r5
   179e2:	9300      	str	r3, [sp, #0]
   179e4:	9a05      	ldr	r2, [sp, #20]
   179e6:	f89d 300e 	ldrb.w	r3, [sp, #14]
   179ea:	6830      	ldr	r0, [r6, #0]
   179ec:	f7ff ff22 	bl	17834 <_Z16RespondToCommandPN6tflite13ErrorReporterEiPKchb>
   179f0:	e7c0      	b.n	17974 <loop+0x30>
   179f2:	bf00      	nop
   179f4:	20020194 	.word	0x20020194
   179f8:	20020190 	.word	0x20020190
   179fc:	20020198 	.word	0x20020198
   17a00:	0002ab93 	.word	0x0002ab93
   17a04:	2002019c 	.word	0x2002019c
   17a08:	20027b24 	.word	0x20027b24
   17a0c:	2002018c 	.word	0x2002018c
   17a10:	0002abad 	.word	0x0002abad
   17a14:	20020188 	.word	0x20020188
   17a18:	0002abbb 	.word	0x0002abbb

00017a1c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
   17a1c:	2920      	cmp	r1, #32
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
   17a1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17a22:	4605      	mov	r5, r0
   17a24:	4688      	mov	r8, r1
   17a26:	4614      	mov	r4, r2
   17a28:	4699      	mov	r9, r3
    if (op == BuiltinOperator_CUSTOM) {
   17a2a:	d109      	bne.n	17a40 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x24>
      if (error_reporter_ != nullptr) {
   17a2c:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
   17a30:	b910      	cbnz	r0, 17a38 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x1c>
        TF_LITE_REPORT_ERROR(error_reporter_,
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
   17a32:	2001      	movs	r0, #1
    builtin_codes_[num_buitin_ops_] = op;
    builtin_parsers_[num_buitin_ops_] = parser;
    num_buitin_ops_++;

    return kTfLiteOk;
  }
   17a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        TF_LITE_REPORT_ERROR(error_reporter_,
   17a38:	491f      	ldr	r1, [pc, #124]	; (17ab8 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x9c>)
   17a3a:	f00b fd99 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   17a3e:	e7f8      	b.n	17a32 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x16>
    if (FindOp(op) != nullptr) {
   17a40:	6803      	ldr	r3, [r0, #0]
   17a42:	691b      	ldr	r3, [r3, #16]
   17a44:	4798      	blx	r3
   17a46:	4607      	mov	r7, r0
   17a48:	b140      	cbz	r0, 17a5c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x40>
      if (error_reporter_ != nullptr) {
   17a4a:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
   17a4e:	2800      	cmp	r0, #0
   17a50:	d0ef      	beq.n	17a32 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x16>
        TF_LITE_REPORT_ERROR(error_reporter_,
   17a52:	4642      	mov	r2, r8
   17a54:	4919      	ldr	r1, [pc, #100]	; (17abc <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xa0>)
   17a56:	f00b fd8b 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   17a5a:	e7ea      	b.n	17a32 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x16>
    if (registrations_len_ >= tOpCount) {
   17a5c:	f8d5 c084 	ldr.w	ip, [r5, #132]	; 0x84
   17a60:	f1bc 0f03 	cmp.w	ip, #3
   17a64:	d909      	bls.n	17a7a <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x5e>
      if (error_reporter_) {
   17a66:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
   17a6a:	2800      	cmp	r0, #0
   17a6c:	d0e1      	beq.n	17a32 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x16>
        TF_LITE_REPORT_ERROR(error_reporter_,
   17a6e:	2304      	movs	r3, #4
   17a70:	4642      	mov	r2, r8
   17a72:	4913      	ldr	r1, [pc, #76]	; (17ac0 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xa4>)
   17a74:	f00b fd7c 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   17a78:	e7db      	b.n	17a32 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x16>
    registrations_[registrations_len_] = registration;
   17a7a:	eb05 1e4c 	add.w	lr, r5, ip, lsl #5
   17a7e:	f10e 0604 	add.w	r6, lr, #4
   17a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   17a84:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   17a86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   17a8a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    builtin_codes_[num_buitin_ops_] = op;
   17a8e:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    registrations_len_++;
   17a92:	f10c 0301 	add.w	r3, ip, #1
    registrations_[registrations_len_].builtin_code = op;
   17a96:	f8ce 8018 	str.w	r8, [lr, #24]
    registrations_len_++;
   17a9a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    builtin_codes_[num_buitin_ops_] = op;
   17a9e:	18ab      	adds	r3, r5, r2
   17aa0:	f883 8088 	strb.w	r8, [r3, #136]	; 0x88
    builtin_parsers_[num_buitin_ops_] = parser;
   17aa4:	eb05 0382 	add.w	r3, r5, r2, lsl #2
    num_buitin_ops_++;
   17aa8:	3201      	adds	r2, #1
    builtin_parsers_[num_buitin_ops_] = parser;
   17aaa:	f8c3 908c 	str.w	r9, [r3, #140]	; 0x8c
    return kTfLiteOk;
   17aae:	4638      	mov	r0, r7
    num_buitin_ops_++;
   17ab0:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
    return kTfLiteOk;
   17ab4:	e7be      	b.n	17a34 <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
   17ab6:	bf00      	nop
   17ab8:	0002abec 	.word	0x0002abec
   17abc:	0002ac31 	.word	0x0002ac31
   17ac0:	0002ac80 	.word	0x0002ac80

00017ac4 <setup>:
void setup() {
   17ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printk("STARTING MICRO SPEECH\n");
   17ac8:	4877      	ldr	r0, [pc, #476]	; (17ca8 <setup+0x1e4>)
void setup() {
   17aca:	b08c      	sub	sp, #48	; 0x30
	printk("STARTING MICRO SPEECH\n");
   17acc:	f00a fac4 	bl	22058 <printk>
  static tflite::MicroErrorReporter micro_error_reporter;
   17ad0:	4c76      	ldr	r4, [pc, #472]	; (17cac <setup+0x1e8>)
   17ad2:	e8d4 3f8f 	ldab	r3, [r4]
   17ad6:	07dd      	lsls	r5, r3, #31
   17ad8:	d40b      	bmi.n	17af2 <setup+0x2e>
   17ada:	4620      	mov	r0, r4
   17adc:	f006 f888 	bl	1dbf0 <__cxa_guard_acquire>
   17ae0:	b138      	cbz	r0, 17af2 <setup+0x2e>
   17ae2:	4620      	mov	r0, r4
   17ae4:	f00c f843 	bl	23b6e <__cxa_guard_release>
   17ae8:	4a71      	ldr	r2, [pc, #452]	; (17cb0 <setup+0x1ec>)
   17aea:	4972      	ldr	r1, [pc, #456]	; (17cb4 <setup+0x1f0>)
   17aec:	4872      	ldr	r0, [pc, #456]	; (17cb8 <setup+0x1f4>)
   17aee:	f00a fbdc 	bl	222aa <__aeabi_atexit>
  error_reporter = &micro_error_reporter;
   17af2:	4b71      	ldr	r3, [pc, #452]	; (17cb8 <setup+0x1f4>)
   17af4:	4c71      	ldr	r4, [pc, #452]	; (17cbc <setup+0x1f8>)
  model = tflite::GetModel(g_model);
   17af6:	4f72      	ldr	r7, [pc, #456]	; (17cc0 <setup+0x1fc>)
  error_reporter = &micro_error_reporter;
   17af8:	6023      	str	r3, [r4, #0]
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
   17afa:	4b72      	ldr	r3, [pc, #456]	; (17cc4 <setup+0x200>)
   17afc:	681a      	ldr	r2, [r3, #0]
   17afe:	18d1      	adds	r1, r2, r3
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
   17b00:	58d3      	ldr	r3, [r2, r3]
  model = tflite::GetModel(g_model);
   17b02:	6039      	str	r1, [r7, #0]
   17b04:	1acb      	subs	r3, r1, r3
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   17b06:	881a      	ldrh	r2, [r3, #0]
   17b08:	2a04      	cmp	r2, #4
   17b0a:	d90c      	bls.n	17b26 <setup+0x62>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
   17b0c:	889a      	ldrh	r2, [r3, #4]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   17b0e:	b112      	cbz	r2, 17b16 <setup+0x52>
   17b10:	588a      	ldr	r2, [r1, r2]
  if (model->version() != TFLITE_SCHEMA_VERSION) {
   17b12:	2a03      	cmp	r2, #3
   17b14:	d009      	beq.n	17b2a <setup+0x66>
    TF_LITE_REPORT_ERROR(error_reporter,
   17b16:	2303      	movs	r3, #3
   17b18:	496b      	ldr	r1, [pc, #428]	; (17cc8 <setup+0x204>)
   17b1a:	4867      	ldr	r0, [pc, #412]	; (17cb8 <setup+0x1f4>)
   17b1c:	f00b fd28 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
}
   17b20:	b00c      	add	sp, #48	; 0x30
   17b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17b26:	2200      	movs	r2, #0
   17b28:	e7f5      	b.n	17b16 <setup+0x52>
  static tflite::MicroMutableOpResolver<4> micro_op_resolver(error_reporter);
   17b2a:	f8df 8200 	ldr.w	r8, [pc, #512]	; 17d2c <setup+0x268>
   17b2e:	e8d8 6f8f 	ldab	r6, [r8]
   17b32:	f016 0601 	ands.w	r6, r6, #1
   17b36:	4d65      	ldr	r5, [pc, #404]	; (17ccc <setup+0x208>)
   17b38:	d112      	bne.n	17b60 <setup+0x9c>
   17b3a:	4640      	mov	r0, r8
   17b3c:	f006 f858 	bl	1dbf0 <__cxa_guard_acquire>
   17b40:	b170      	cbz	r0, 17b60 <setup+0x9c>
      : error_reporter_(error_reporter) {}
   17b42:	4a63      	ldr	r2, [pc, #396]	; (17cd0 <setup+0x20c>)
   17b44:	6823      	ldr	r3, [r4, #0]
   17b46:	4640      	mov	r0, r8
   17b48:	602a      	str	r2, [r5, #0]
   17b4a:	e9c5 6327 	strd	r6, r3, [r5, #156]	; 0x9c
   17b4e:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
   17b52:	f00c f80c 	bl	23b6e <__cxa_guard_release>
   17b56:	4628      	mov	r0, r5
   17b58:	4a55      	ldr	r2, [pc, #340]	; (17cb0 <setup+0x1ec>)
   17b5a:	495e      	ldr	r1, [pc, #376]	; (17cd4 <setup+0x210>)
   17b5c:	f00a fba5 	bl	222aa <__aeabi_atexit>
                      tflite::ops::micro::Register_DEPTHWISE_CONV_2D(),
   17b60:	a804      	add	r0, sp, #16
   17b62:	f003 fbad 	bl	1b2c0 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>
                      ParseDepthwiseConv2D);
   17b66:	2104      	movs	r1, #4
   17b68:	4b5b      	ldr	r3, [pc, #364]	; (17cd8 <setup+0x214>)
   17b6a:	4858      	ldr	r0, [pc, #352]	; (17ccc <setup+0x208>)
   17b6c:	aa04      	add	r2, sp, #16
   17b6e:	f7ff ff55 	bl	17a1c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
  if (micro_op_resolver.AddDepthwiseConv2D() != kTfLiteOk) {
   17b72:	2800      	cmp	r0, #0
   17b74:	d1d4      	bne.n	17b20 <setup+0x5c>
                      tflite::ops::micro::Register_FULLY_CONNECTED(),
   17b76:	a804      	add	r0, sp, #16
   17b78:	f003 ffa8 	bl	1bacc <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
                      ParseFullyConnected);
   17b7c:	2109      	movs	r1, #9
   17b7e:	4b57      	ldr	r3, [pc, #348]	; (17cdc <setup+0x218>)
   17b80:	4852      	ldr	r0, [pc, #328]	; (17ccc <setup+0x208>)
   17b82:	aa04      	add	r2, sp, #16
   17b84:	f7ff ff4a 	bl	17a1c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
  if (micro_op_resolver.AddFullyConnected() != kTfLiteOk) {
   17b88:	2800      	cmp	r0, #0
   17b8a:	d1c9      	bne.n	17b20 <setup+0x5c>
                      tflite::ops::micro::Register_SOFTMAX(), ParseSoftmax);
   17b8c:	a804      	add	r0, sp, #16
   17b8e:	f004 f9a1 	bl	1bed4 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
   17b92:	2119      	movs	r1, #25
   17b94:	4b52      	ldr	r3, [pc, #328]	; (17ce0 <setup+0x21c>)
   17b96:	484d      	ldr	r0, [pc, #308]	; (17ccc <setup+0x208>)
   17b98:	aa04      	add	r2, sp, #16
   17b9a:	f7ff ff3f 	bl	17a1c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
  if (micro_op_resolver.AddSoftmax() != kTfLiteOk) {
   17b9e:	2800      	cmp	r0, #0
   17ba0:	d1be      	bne.n	17b20 <setup+0x5c>
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
   17ba2:	a804      	add	r0, sp, #16
   17ba4:	f004 f88a 	bl	1bcbc <_ZN6tflite3ops5micro16Register_RESHAPEEv>
   17ba8:	2116      	movs	r1, #22
   17baa:	4b4e      	ldr	r3, [pc, #312]	; (17ce4 <setup+0x220>)
   17bac:	4847      	ldr	r0, [pc, #284]	; (17ccc <setup+0x208>)
   17bae:	aa04      	add	r2, sp, #16
   17bb0:	f7ff ff34 	bl	17a1c <_ZN6tflite22MicroMutableOpResolverILj4EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
  if (micro_op_resolver.AddReshape() != kTfLiteOk) {
   17bb4:	2800      	cmp	r0, #0
   17bb6:	d1b3      	bne.n	17b20 <setup+0x5c>
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
   17bb8:	4e4b      	ldr	r6, [pc, #300]	; (17ce8 <setup+0x224>)
   17bba:	e8d6 3f8f 	ldab	r3, [r6]
   17bbe:	f013 0501 	ands.w	r5, r3, #1
   17bc2:	d117      	bne.n	17bf4 <setup+0x130>
   17bc4:	4630      	mov	r0, r6
   17bc6:	f006 f813 	bl	1dbf0 <__cxa_guard_acquire>
   17bca:	b198      	cbz	r0, 17bf4 <setup+0x130>
   17bcc:	9502      	str	r5, [sp, #8]
   17bce:	6823      	ldr	r3, [r4, #0]
   17bd0:	4a3e      	ldr	r2, [pc, #248]	; (17ccc <setup+0x208>)
   17bd2:	9301      	str	r3, [sp, #4]
   17bd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17bd8:	6839      	ldr	r1, [r7, #0]
   17bda:	9300      	str	r3, [sp, #0]
   17bdc:	4843      	ldr	r0, [pc, #268]	; (17cec <setup+0x228>)
   17bde:	4b44      	ldr	r3, [pc, #272]	; (17cf0 <setup+0x22c>)
   17be0:	f00a fe38 	bl	22854 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
   17be4:	4630      	mov	r0, r6
   17be6:	f00b ffc2 	bl	23b6e <__cxa_guard_release>
   17bea:	4a31      	ldr	r2, [pc, #196]	; (17cb0 <setup+0x1ec>)
   17bec:	4941      	ldr	r1, [pc, #260]	; (17cf4 <setup+0x230>)
   17bee:	483f      	ldr	r0, [pc, #252]	; (17cec <setup+0x228>)
   17bf0:	f00a fb5b 	bl	222aa <__aeabi_atexit>
  interpreter = &static_interpreter;
   17bf4:	483d      	ldr	r0, [pc, #244]	; (17cec <setup+0x228>)
   17bf6:	4d40      	ldr	r5, [pc, #256]	; (17cf8 <setup+0x234>)
   17bf8:	6028      	str	r0, [r5, #0]
  TfLiteStatus allocate_status = interpreter->AllocateTensors();
   17bfa:	f002 fe97 	bl	1a92c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
  if (allocate_status != kTfLiteOk) {
   17bfe:	4601      	mov	r1, r0
   17c00:	b120      	cbz	r0, 17c0c <setup+0x148>
    TF_LITE_REPORT_ERROR(error_reporter, "AllocateTensors() failed");
   17c02:	493e      	ldr	r1, [pc, #248]	; (17cfc <setup+0x238>)
    TF_LITE_REPORT_ERROR(error_reporter,
   17c04:	6820      	ldr	r0, [r4, #0]
   17c06:	f00b fcb3 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return;
   17c0a:	e789      	b.n	17b20 <setup+0x5c>
  model_input = interpreter->input(0);
   17c0c:	6828      	ldr	r0, [r5, #0]
   17c0e:	f002 fe55 	bl	1a8bc <_ZN6tflite16MicroInterpreter5inputEj>
  if ((model_input->dims->size != 2) || (model_input->dims->data[0] != 1) ||
   17c12:	6883      	ldr	r3, [r0, #8]
   17c14:	681a      	ldr	r2, [r3, #0]
   17c16:	2a02      	cmp	r2, #2
   17c18:	d109      	bne.n	17c2e <setup+0x16a>
   17c1a:	685a      	ldr	r2, [r3, #4]
   17c1c:	2a01      	cmp	r2, #1
   17c1e:	d106      	bne.n	17c2e <setup+0x16a>
   17c20:	689e      	ldr	r6, [r3, #8]
   17c22:	f5b6 6ff5 	cmp.w	r6, #1960	; 0x7a8
   17c26:	d102      	bne.n	17c2e <setup+0x16a>
       (kFeatureSliceCount * kFeatureSliceSize)) ||
   17c28:	7803      	ldrb	r3, [r0, #0]
   17c2a:	2b09      	cmp	r3, #9
   17c2c:	d001      	beq.n	17c32 <setup+0x16e>
    TF_LITE_REPORT_ERROR(error_reporter,
   17c2e:	4934      	ldr	r1, [pc, #208]	; (17d00 <setup+0x23c>)
   17c30:	e7e8      	b.n	17c04 <setup+0x140>
  model_input_buffer = model_input->data.int8;
   17c32:	6842      	ldr	r2, [r0, #4]
   17c34:	4b33      	ldr	r3, [pc, #204]	; (17d04 <setup+0x240>)
                                                 feature_buffer);
   17c36:	4d34      	ldr	r5, [pc, #208]	; (17d08 <setup+0x244>)
  model_input_buffer = model_input->data.int8;
   17c38:	601a      	str	r2, [r3, #0]
                                                 feature_buffer);
   17c3a:	e8d5 3f8f 	ldab	r3, [r5]
   17c3e:	07d8      	lsls	r0, r3, #31
   17c40:	d410      	bmi.n	17c64 <setup+0x1a0>
   17c42:	4628      	mov	r0, r5
   17c44:	f005 ffd4 	bl	1dbf0 <__cxa_guard_acquire>
   17c48:	b160      	cbz	r0, 17c64 <setup+0x1a0>
   17c4a:	4631      	mov	r1, r6
   17c4c:	4a2f      	ldr	r2, [pc, #188]	; (17d0c <setup+0x248>)
   17c4e:	4830      	ldr	r0, [pc, #192]	; (17d10 <setup+0x24c>)
   17c50:	f00a f97c 	bl	21f4c <_ZN15FeatureProviderC1EiPa>
   17c54:	4628      	mov	r0, r5
   17c56:	f00b ff8a 	bl	23b6e <__cxa_guard_release>
   17c5a:	4a15      	ldr	r2, [pc, #84]	; (17cb0 <setup+0x1ec>)
   17c5c:	492d      	ldr	r1, [pc, #180]	; (17d14 <setup+0x250>)
   17c5e:	482c      	ldr	r0, [pc, #176]	; (17d10 <setup+0x24c>)
   17c60:	f00a fb23 	bl	222aa <__aeabi_atexit>
  feature_provider = &static_feature_provider;
   17c64:	4b2c      	ldr	r3, [pc, #176]	; (17d18 <setup+0x254>)
   17c66:	4a2a      	ldr	r2, [pc, #168]	; (17d10 <setup+0x24c>)
  static RecognizeCommands static_recognizer(error_reporter);
   17c68:	4d2c      	ldr	r5, [pc, #176]	; (17d1c <setup+0x258>)
  feature_provider = &static_feature_provider;
   17c6a:	601a      	str	r2, [r3, #0]
  static RecognizeCommands static_recognizer(error_reporter);
   17c6c:	e8d5 3f8f 	ldab	r3, [r5]
   17c70:	07d9      	lsls	r1, r3, #31
   17c72:	d412      	bmi.n	17c9a <setup+0x1d6>
   17c74:	4628      	mov	r0, r5
   17c76:	f005 ffbb 	bl	1dbf0 <__cxa_guard_acquire>
   17c7a:	b170      	cbz	r0, 17c9a <setup+0x1d6>
   17c7c:	f240 53dc 	movw	r3, #1500	; 0x5dc
   17c80:	2203      	movs	r2, #3
   17c82:	e9cd 3200 	strd	r3, r2, [sp]
   17c86:	4826      	ldr	r0, [pc, #152]	; (17d20 <setup+0x25c>)
   17c88:	23c8      	movs	r3, #200	; 0xc8
   17c8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17c8e:	6821      	ldr	r1, [r4, #0]
   17c90:	f000 f84e 	bl	17d30 <_ZN17RecognizeCommandsC1EPN6tflite13ErrorReporterEihii>
   17c94:	4628      	mov	r0, r5
   17c96:	f00b ff6a 	bl	23b6e <__cxa_guard_release>
  recognizer = &static_recognizer;
   17c9a:	4b22      	ldr	r3, [pc, #136]	; (17d24 <setup+0x260>)
   17c9c:	4a20      	ldr	r2, [pc, #128]	; (17d20 <setup+0x25c>)
   17c9e:	601a      	str	r2, [r3, #0]
  previous_time = 0;
   17ca0:	2200      	movs	r2, #0
   17ca2:	4b21      	ldr	r3, [pc, #132]	; (17d28 <setup+0x264>)
   17ca4:	601a      	str	r2, [r3, #0]
   17ca6:	e73b      	b.n	17b20 <setup+0x5c>
   17ca8:	0002acc3 	.word	0x0002acc3
   17cac:	20020180 	.word	0x20020180
   17cb0:	2002050c 	.word	0x2002050c
   17cb4:	00021f77 	.word	0x00021f77
   17cb8:	20020000 	.word	0x20020000
   17cbc:	20020194 	.word	0x20020194
   17cc0:	200201a0 	.word	0x200201a0
   17cc4:	00025b7c 	.word	0x00025b7c
   17cc8:	0002acda 	.word	0x0002acda
   17ccc:	200201a4 	.word	0x200201a4
   17cd0:	00025b60 	.word	0x00025b60
   17cd4:	00021faf 	.word	0x00021faf
   17cd8:	0001c6e5 	.word	0x0001c6e5
   17cdc:	0001c7a9 	.word	0x0001c7a9
   17ce0:	0001c871 	.word	0x0001c871
   17ce4:	0001c645 	.word	0x0001c645
   17ce8:	2002017c 	.word	0x2002017c
   17cec:	20020400 	.word	0x20020400
   17cf0:	20025324 	.word	0x20025324
   17cf4:	000228c1 	.word	0x000228c1
   17cf8:	2002018c 	.word	0x2002018c
   17cfc:	0002ad21 	.word	0x0002ad21
   17d00:	0002ad3a 	.word	0x0002ad3a
   17d04:	2002019c 	.word	0x2002019c
   17d08:	20020184 	.word	0x20020184
   17d0c:	20027b24 	.word	0x20027b24
   17d10:	20020478 	.word	0x20020478
   17d14:	00021f69 	.word	0x00021f69
   17d18:	20020198 	.word	0x20020198
   17d1c:	20020178 	.word	0x20020178
   17d20:	20020248 	.word	0x20020248
   17d24:	20020188 	.word	0x20020188
   17d28:	20020190 	.word	0x20020190
   17d2c:	20020174 	.word	0x20020174

00017d30 <_ZN17RecognizeCommandsC1EPN6tflite13ErrorReporterEihii>:

#include "recognize_commands.h"

#include <limits>

RecognizeCommands::RecognizeCommands(tflite::ErrorReporter* error_reporter,
   17d30:	b570      	push	{r4, r5, r6, lr}
   17d32:	4604      	mov	r4, r0
    : error_reporter_(error_reporter),
      average_window_duration_ms_(average_window_duration_ms),
      detection_threshold_(detection_threshold),
      suppression_ms_(suppression_ms),
      minimum_count_(minimum_count),
      previous_results_(error_reporter) {
   17d34:	7203      	strb	r3, [r0, #8]
   17d36:	9b04      	ldr	r3, [sp, #16]
   17d38:	e9c0 1200 	strd	r1, r2, [r0]
   17d3c:	60c3      	str	r3, [r0, #12]
   17d3e:	9b05      	ldr	r3, [sp, #20]
   17d40:	f100 0518 	add.w	r5, r0, #24
// so it's a better fit for microcontroller applications, but this does mean
// there are hard limits on the number of results it can store.
class PreviousResultsQueue {
 public:
  PreviousResultsQueue(tflite::ErrorReporter* error_reporter)
      : error_reporter_(error_reporter), front_index_(0), size_(0) {}
   17d44:	e9c0 3104 	strd	r3, r1, [r0, #16]
   17d48:	f500 76d4 	add.w	r6, r0, #424	; 0x1a8
   17d4c:	4628      	mov	r0, r5
   17d4e:	3508      	adds	r5, #8
   17d50:	f00a f96e 	bl	22030 <_ZN20PreviousResultsQueue6ResultC1Ev>
   17d54:	42ae      	cmp	r6, r5
   17d56:	d1f9      	bne.n	17d4c <_ZN17RecognizeCommandsC1EPN6tflite13ErrorReporterEihii+0x1c>
   17d58:	2300      	movs	r3, #0
   17d5a:	e9c4 336a 	strd	r3, r3, [r4, #424]	; 0x1a8
  previous_top_label_ = "silence";
   17d5e:	4b04      	ldr	r3, [pc, #16]	; (17d70 <_ZN17RecognizeCommandsC1EPN6tflite13ErrorReporterEihii+0x40>)
  previous_top_label_time_ = std::numeric_limits<int32_t>::min();
}
   17d60:	4620      	mov	r0, r4
  previous_top_label_ = "silence";
   17d62:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  previous_top_label_time_ = std::numeric_limits<int32_t>::min();
   17d66:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   17d6a:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
}
   17d6e:	bd70      	pop	{r4, r5, r6, pc}
   17d70:	0002ad5f 	.word	0x0002ad5f

00017d74 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb>:

TfLiteStatus RecognizeCommands::ProcessLatestResults(
    const TfLiteTensor* latest_results, const int32_t current_time_ms,
    const char** found_command, uint8_t* score, bool* is_new_command) {
   17d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d78:	4604      	mov	r4, r0
  if ((latest_results->dims->size != 2) ||
   17d7a:	6888      	ldr	r0, [r1, #8]
    const char** found_command, uint8_t* score, bool* is_new_command) {
   17d7c:	4699      	mov	r9, r3
  if ((latest_results->dims->size != 2) ||
   17d7e:	6806      	ldr	r6, [r0, #0]
    const char** found_command, uint8_t* score, bool* is_new_command) {
   17d80:	4690      	mov	r8, r2
  if ((latest_results->dims->size != 2) ||
   17d82:	2e02      	cmp	r6, #2
   17d84:	6883      	ldr	r3, [r0, #8]
    const char** found_command, uint8_t* score, bool* is_new_command) {
   17d86:	b089      	sub	sp, #36	; 0x24
  if ((latest_results->dims->size != 2) ||
   17d88:	d104      	bne.n	17d94 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x20>
   17d8a:	6845      	ldr	r5, [r0, #4]
   17d8c:	2d01      	cmp	r5, #1
   17d8e:	d101      	bne.n	17d94 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x20>
      (latest_results->dims->data[0] != 1) ||
   17d90:	2b04      	cmp	r3, #4
   17d92:	d009      	beq.n	17da8 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x34>
      (latest_results->dims->data[1] != kCategoryCount)) {
    TF_LITE_REPORT_ERROR(
   17d94:	2204      	movs	r2, #4
   17d96:	4982      	ldr	r1, [pc, #520]	; (17fa0 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x22c>)
   17d98:	6820      	ldr	r0, [r4, #0]
   17d9a:	9600      	str	r6, [sp, #0]
   17d9c:	f00b fbe8 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "The results for recognition should contain %d elements, but there are "
        "%d in an %d-dimensional shape",
        kCategoryCount, latest_results->dims->data[1],
        latest_results->dims->size);
    return kTfLiteError;
   17da0:	2001      	movs	r0, #1
  }
  *found_command = current_top_label;
  *score = current_top_score;

  return kTfLiteOk;
}
   17da2:	b009      	add	sp, #36	; 0x24
   17da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (latest_results->type != kTfLiteInt8) {
   17da8:	780b      	ldrb	r3, [r1, #0]
   17daa:	2b09      	cmp	r3, #9
   17dac:	d005      	beq.n	17dba <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x46>
    TF_LITE_REPORT_ERROR(
   17dae:	461a      	mov	r2, r3
   17db0:	497c      	ldr	r1, [pc, #496]	; (17fa4 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x230>)
   17db2:	6820      	ldr	r0, [r4, #0]
   17db4:	f00b fbdc 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   17db8:	e7f2      	b.n	17da0 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x2c>
  if ((!previous_results_.empty()) &&
   17dba:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
   17dbe:	b158      	cbz	r0, 17dd8 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x64>
      (current_time_ms < previous_results_.front().time_)) {
   17dc0:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   17dc4:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   17dc8:	699b      	ldr	r3, [r3, #24]
  if ((!previous_results_.empty()) &&
   17dca:	4293      	cmp	r3, r2
   17dcc:	dd04      	ble.n	17dd8 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x64>
    TF_LITE_REPORT_ERROR(
   17dce:	4976      	ldr	r1, [pc, #472]	; (17fa8 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x234>)
   17dd0:	6820      	ldr	r0, [r4, #0]
   17dd2:	f00b fbcd 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   17dd6:	e7e3      	b.n	17da0 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x2c>
  previous_results_.push_back({current_time_ms, latest_results->data.int8});
   17dd8:	684b      	ldr	r3, [r1, #4]
  // Data structure that holds an inference result, and the time when it
  // was recorded.
  struct Result {
    Result() : time_(0), scores() {}
    Result(int32_t time, int8_t* input_scores) : time_(time) {
      for (int i = 0; i < kCategoryCount; ++i) {
   17dda:	a905      	add	r1, sp, #20
   17ddc:	1e5a      	subs	r2, r3, #1
   17dde:	3303      	adds	r3, #3
        scores[i] = input_scores[i];
   17de0:	f812 5f01 	ldrb.w	r5, [r2, #1]!
      for (int i = 0; i < kCategoryCount; ++i) {
   17de4:	4293      	cmp	r3, r2
        scores[i] = input_scores[i];
   17de6:	f801 5b01 	strb.w	r5, [r1], #1
      for (int i = 0; i < kCategoryCount; ++i) {
   17dea:	d1f9      	bne.n	17de0 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x6c>
    }
    return results_[back_index];
  }

  void push_back(const Result& entry) {
    if (size() >= kMaxResults) {
   17dec:	2831      	cmp	r0, #49	; 0x31
   17dee:	dd1f      	ble.n	17e30 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0xbc>
      TF_LITE_REPORT_ERROR(
   17df0:	496e      	ldr	r1, [pc, #440]	; (17fac <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x238>)
   17df2:	6960      	ldr	r0, [r4, #20]
   17df4:	f00b fbbc 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return Result();
    }
    Result result = front();
    front_index_ += 1;
    if (front_index_ >= kMaxResults) {
      front_index_ = 0;
   17df8:	f04f 0a00 	mov.w	sl, #0
  const int64_t time_limit = current_time_ms - average_window_duration_ms_;
   17dfc:	6865      	ldr	r5, [r4, #4]
      TF_LITE_REPORT_ERROR(error_reporter_,
   17dfe:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 17fb4 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x240>
   17e02:	eba8 0505 	sub.w	r5, r8, r5
  while ((!previous_results_.empty()) &&
   17e06:	e9d4 366a 	ldrd	r3, r6, [r4, #424]	; 0x1a8
   17e0a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   17e0e:	6997      	ldr	r7, [r2, #24]
   17e10:	b10e      	cbz	r6, 17e16 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0xa2>
   17e12:	42bd      	cmp	r5, r7
   17e14:	dc21      	bgt.n	17e5a <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0xe6>
  if ((how_many_results < minimum_count_) ||
   17e16:	6923      	ldr	r3, [r4, #16]
   17e18:	42b3      	cmp	r3, r6
   17e1a:	dd32      	ble.n	17e82 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x10e>
    *score = 0;
   17e1c:	2000      	movs	r0, #0
    *found_command = previous_top_label_;
   17e1e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   17e22:	f8c9 3000 	str.w	r3, [r9]
    *score = 0;
   17e26:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17e28:	7018      	strb	r0, [r3, #0]
    *is_new_command = false;
   17e2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   17e2c:	7018      	strb	r0, [r3, #0]
    return kTfLiteOk;
   17e2e:	e7b8      	b.n	17da2 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x2e>
    int back_index = front_index_ + (size_ - 1);
   17e30:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
    size_ += 1;
   17e34:	3001      	adds	r0, #1
   17e36:	f8c4 01ac 	str.w	r0, [r4, #428]	; 0x1ac
    int back_index = front_index_ + (size_ - 1);
   17e3a:	4418      	add	r0, r3
   17e3c:	1e43      	subs	r3, r0, #1
    if (back_index >= kMaxResults) {
   17e3e:	2b31      	cmp	r3, #49	; 0x31
      back_index -= kMaxResults;
   17e40:	bfc8      	it	gt
   17e42:	f1a0 0333 	subgt.w	r3, r0, #51	; 0x33
    back() = entry;
   17e46:	4640      	mov	r0, r8
   17e48:	9905      	ldr	r1, [sp, #20]
   17e4a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   17e4e:	3318      	adds	r3, #24
   17e50:	e883 0003 	stmia.w	r3, {r0, r1}
   17e54:	f8cd 8010 	str.w	r8, [sp, #16]
   17e58:	e7ce      	b.n	17df8 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x84>
    if (size() <= 0) {
   17e5a:	2e00      	cmp	r6, #0
   17e5c:	dc07      	bgt.n	17e6e <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0xfa>
      TF_LITE_REPORT_ERROR(error_reporter_,
   17e5e:	4659      	mov	r1, fp
   17e60:	6960      	ldr	r0, [r4, #20]
   17e62:	f00b fb85 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return Result();
   17e66:	a804      	add	r0, sp, #16
   17e68:	f00a f8e2 	bl	22030 <_ZN20PreviousResultsQueue6ResultC1Ev>
   17e6c:	e7cb      	b.n	17e06 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x92>
    front_index_ += 1;
   17e6e:	3301      	adds	r3, #1
    if (front_index_ >= kMaxResults) {
   17e70:	2b31      	cmp	r3, #49	; 0x31
    front_index_ += 1;
   17e72:	bfc8      	it	gt
   17e74:	4653      	movgt	r3, sl
    }
    size_ -= 1;
   17e76:	3e01      	subs	r6, #1
    front_index_ += 1;
   17e78:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
    size_ -= 1;
   17e7c:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
  while ((!previous_results_.empty()) &&
   17e80:	e7c1      	b.n	17e06 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x92>
  const int64_t samples_duration = current_time_ms - earliest_time;
   17e82:	4640      	mov	r0, r8
      (samples_duration < (average_window_duration_ms_ / 4))) {
   17e84:	6862      	ldr	r2, [r4, #4]
  const int64_t samples_duration = current_time_ms - earliest_time;
   17e86:	17c1      	asrs	r1, r0, #31
      (samples_duration < (average_window_duration_ms_ / 4))) {
   17e88:	2a00      	cmp	r2, #0
   17e8a:	bfb8      	it	lt
   17e8c:	3203      	addlt	r2, #3
   17e8e:	1092      	asrs	r2, r2, #2
  const int64_t samples_duration = current_time_ms - earliest_time;
   17e90:	ebb8 0007 	subs.w	r0, r8, r7
   17e94:	eb61 71e7 	sbc.w	r1, r1, r7, asr #31
      (samples_duration < (average_window_duration_ms_ / 4))) {
   17e98:	17d3      	asrs	r3, r2, #31
  if ((how_many_results < minimum_count_) ||
   17e9a:	4290      	cmp	r0, r2
   17e9c:	eb71 0303 	sbcs.w	r3, r1, r3
   17ea0:	dbbc      	blt.n	17e1c <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0xa8>
  for (int offset = 0; offset < previous_results_.size(); ++offset) {
   17ea2:	2500      	movs	r5, #0
  // Most of the functions are duplicates of dequeue containers, but this
  // is a helper that makes it easy to iterate through the contents of the
  // queue.
  Result& from_front(int offset) {
    if ((offset < 0) || (offset >= size_)) {
      TF_LITE_REPORT_ERROR(error_reporter_,
   17ea4:	f8df a110 	ldr.w	sl, [pc, #272]	; 17fb8 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x244>
        previous_results_.from_front(offset);
   17ea8:	af02      	add	r7, sp, #8
  for (int offset = 0; offset < previous_results_.size(); ++offset) {
   17eaa:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
   17eae:	429d      	cmp	r5, r3
   17eb0:	da2c      	bge.n	17f0c <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x198>
    if ((offset < 0) || (offset >= size_)) {
   17eb2:	2d00      	cmp	r5, #0
   17eb4:	da22      	bge.n	17efc <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x188>
      TF_LITE_REPORT_ERROR(error_reporter_,
   17eb6:	4651      	mov	r1, sl
   17eb8:	6960      	ldr	r0, [r4, #20]
   17eba:	f00b fb59 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Attempt to read beyond the end of the queue!");
      offset = size_ - 1;
   17ebe:	f8d4 11ac 	ldr.w	r1, [r4, #428]	; 0x1ac
   17ec2:	3901      	subs	r1, #1
    }
    int index = front_index_ + offset;
   17ec4:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   17ec8:	440b      	add	r3, r1
    if (index >= kMaxResults) {
   17eca:	2b31      	cmp	r3, #49	; 0x31
      index -= kMaxResults;
   17ecc:	bfc8      	it	gt
   17ece:	3b32      	subgt	r3, #50	; 0x32
        previous_results_.from_front(offset);
   17ed0:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
   17ed4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
   17ed8:	463b      	mov	r3, r7
   17eda:	e887 0003 	stmia.w	r7, {r0, r1}
    for (int i = 0; i < kCategoryCount; ++i) {
   17ede:	2100      	movs	r1, #0
   17ee0:	a804      	add	r0, sp, #16
      if (offset == 0) {
   17ee2:	b96d      	cbnz	r5, 17f00 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x18c>
        average_scores[i] = scores[i] + 128;
   17ee4:	f993 2004 	ldrsb.w	r2, [r3, #4]
   17ee8:	3280      	adds	r2, #128	; 0x80
    for (int i = 0; i < kCategoryCount; ++i) {
   17eea:	3101      	adds	r1, #1
   17eec:	2904      	cmp	r1, #4
   17eee:	f840 2b04 	str.w	r2, [r0], #4
   17ef2:	f103 0301 	add.w	r3, r3, #1
   17ef6:	d1f4      	bne.n	17ee2 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x16e>
  for (int offset = 0; offset < previous_results_.size(); ++offset) {
   17ef8:	3501      	adds	r5, #1
   17efa:	e7d6      	b.n	17eaa <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x136>
   17efc:	4629      	mov	r1, r5
   17efe:	e7e1      	b.n	17ec4 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x150>
        average_scores[i] += scores[i] + 128;
   17f00:	6802      	ldr	r2, [r0, #0]
   17f02:	f993 c004 	ldrsb.w	ip, [r3, #4]
   17f06:	3280      	adds	r2, #128	; 0x80
   17f08:	4462      	add	r2, ip
   17f0a:	e7ee      	b.n	17eea <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x176>
   17f0c:	f10d 0a10 	add.w	sl, sp, #16
  for (int offset = 0; offset < previous_results_.size(); ++offset) {
   17f10:	46d3      	mov	fp, sl
   17f12:	2504      	movs	r5, #4
  const int64_t how_many_results = previous_results_.size();
   17f14:	17f7      	asrs	r7, r6, #31
    average_scores[i] /= how_many_results;
   17f16:	f8db 0000 	ldr.w	r0, [fp]
   17f1a:	4632      	mov	r2, r6
   17f1c:	463b      	mov	r3, r7
   17f1e:	17c1      	asrs	r1, r0, #31
   17f20:	f7f6 fe20 	bl	eb64 <__aeabi_ldivmod>
  for (int i = 0; i < kCategoryCount; ++i) {
   17f24:	3d01      	subs	r5, #1
    average_scores[i] /= how_many_results;
   17f26:	f84b 0b04 	str.w	r0, [fp], #4
  for (int i = 0; i < kCategoryCount; ++i) {
   17f2a:	d1f4      	bne.n	17f16 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x1a2>
  int32_t current_top_score = 0;
   17f2c:	462e      	mov	r6, r5
  int current_top_index = 0;
   17f2e:	462a      	mov	r2, r5
    if (average_scores[i] > current_top_score) {
   17f30:	f85a 3b04 	ldr.w	r3, [sl], #4
   17f34:	42b3      	cmp	r3, r6
   17f36:	bfc8      	it	gt
   17f38:	462a      	movgt	r2, r5
  for (int i = 0; i < kCategoryCount; ++i) {
   17f3a:	f105 0501 	add.w	r5, r5, #1
    if (average_scores[i] > current_top_score) {
   17f3e:	bfc8      	it	gt
   17f40:	461e      	movgt	r6, r3
  for (int i = 0; i < kCategoryCount; ++i) {
   17f42:	2d04      	cmp	r5, #4
   17f44:	d1f4      	bne.n	17f30 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x1bc>
  const char* current_top_label = kCategoryLabels[current_top_index];
   17f46:	4b1a      	ldr	r3, [pc, #104]	; (17fb0 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x23c>)
  if ((previous_top_label_ == kCategoryLabels[0]) ||
   17f48:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
  const char* current_top_label = kCategoryLabels[current_top_index];
   17f4c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
  if ((previous_top_label_ == kCategoryLabels[0]) ||
   17f50:	681b      	ldr	r3, [r3, #0]
   17f52:	4299      	cmp	r1, r3
   17f54:	d01d      	beq.n	17f92 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x21e>
      (previous_top_label_time_ == std::numeric_limits<int32_t>::min())) {
   17f56:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
  if ((previous_top_label_ == kCategoryLabels[0]) ||
   17f5a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   17f5e:	d018      	beq.n	17f92 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x21e>
    time_since_last_top = current_time_ms - previous_top_label_time_;
   17f60:	eba8 0202 	sub.w	r2, r8, r2
   17f64:	17d3      	asrs	r3, r2, #31
  if ((current_top_score > detection_threshold_) &&
   17f66:	7a20      	ldrb	r0, [r4, #8]
   17f68:	42b0      	cmp	r0, r6
   17f6a:	da16      	bge.n	17f9a <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x226>
   17f6c:	42a9      	cmp	r1, r5
   17f6e:	d105      	bne.n	17f7c <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x208>
       (time_since_last_top > suppression_ms_))) {
   17f70:	68e0      	ldr	r0, [r4, #12]
   17f72:	17c1      	asrs	r1, r0, #31
      ((current_top_label != previous_top_label_) ||
   17f74:	4290      	cmp	r0, r2
   17f76:	eb71 0303 	sbcs.w	r3, r1, r3
   17f7a:	da0e      	bge.n	17f9a <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x226>
    *is_new_command = true;
   17f7c:	2301      	movs	r3, #1
    previous_top_label_time_ = current_time_ms;
   17f7e:	e9c4 586c 	strd	r5, r8, [r4, #432]	; 0x1b0
    *is_new_command = false;
   17f82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  return kTfLiteOk;
   17f84:	2000      	movs	r0, #0
    *is_new_command = false;
   17f86:	7013      	strb	r3, [r2, #0]
  *score = current_top_score;
   17f88:	9b12      	ldr	r3, [sp, #72]	; 0x48
  *found_command = current_top_label;
   17f8a:	f8c9 5000 	str.w	r5, [r9]
  *score = current_top_score;
   17f8e:	701e      	strb	r6, [r3, #0]
  return kTfLiteOk;
   17f90:	e707      	b.n	17da2 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x2e>
    time_since_last_top = std::numeric_limits<int32_t>::max();
   17f92:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   17f96:	2300      	movs	r3, #0
   17f98:	e7e5      	b.n	17f66 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x1f2>
    *is_new_command = false;
   17f9a:	2300      	movs	r3, #0
   17f9c:	e7f1      	b.n	17f82 <_ZN17RecognizeCommands20ProcessLatestResultsEPK12TfLiteTensoriPPKcPhPb+0x20e>
   17f9e:	bf00      	nop
   17fa0:	0002ad67 	.word	0x0002ad67
   17fa4:	0002adcb 	.word	0x0002adcb
   17fa8:	0002ae0b 	.word	0x0002ae0b
   17fac:	0002ae85 	.word	0x0002ae85
   17fb0:	20020004 	.word	0x20020004
   17fb4:	0002aeb9 	.word	0x0002aeb9
   17fb8:	0002aee2 	.word	0x0002aee2

00017fbc <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE>:
}  // namespace

TfLiteStatus InitializeMicroFeatures(tflite::ErrorReporter* error_reporter) {
  FrontendConfig config;
  config.window.size_ms = kFeatureSliceDurationMs;
  config.window.step_size_ms = kFeatureSliceStrideMs;
   17fbc:	221e      	movs	r2, #30
   17fbe:	2314      	movs	r3, #20
TfLiteStatus InitializeMicroFeatures(tflite::ErrorReporter* error_reporter) {
   17fc0:	b530      	push	{r4, r5, lr}
   17fc2:	b091      	sub	sp, #68	; 0x44
  config.window.step_size_ms = kFeatureSliceStrideMs;
   17fc4:	e9cd 2300 	strd	r2, r3, [sp]
  config.noise_reduction.smoothing_bits = 10;
   17fc8:	230a      	movs	r3, #10
   17fca:	9306      	str	r3, [sp, #24]
  config.filterbank.num_channels = kFeatureSliceSize;
   17fcc:	2328      	movs	r3, #40	; 0x28
   17fce:	9302      	str	r3, [sp, #8]
  config.filterbank.lower_band_limit = 125.0;
   17fd0:	4b13      	ldr	r3, [pc, #76]	; (18020 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x64>)
  config.filterbank.upper_band_limit = 7500.0;
  config.noise_reduction.smoothing_bits = 10;
  config.noise_reduction.even_smoothing = 0.025;
  config.noise_reduction.odd_smoothing = 0.06;
  config.noise_reduction.min_signal_remaining = 0.05;
  config.pcan_gain_control.enable_pcan = 1;
   17fd2:	2401      	movs	r4, #1
  config.filterbank.lower_band_limit = 125.0;
   17fd4:	9304      	str	r3, [sp, #16]
  config.filterbank.upper_band_limit = 7500.0;
   17fd6:	4b13      	ldr	r3, [pc, #76]	; (18024 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x68>)
TfLiteStatus InitializeMicroFeatures(tflite::ErrorReporter* error_reporter) {
   17fd8:	4605      	mov	r5, r0
  config.filterbank.upper_band_limit = 7500.0;
   17fda:	9303      	str	r3, [sp, #12]
  config.noise_reduction.even_smoothing = 0.025;
   17fdc:	4b12      	ldr	r3, [pc, #72]	; (18028 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x6c>)
  config.pcan_gain_control.strength = 0.95;
  config.pcan_gain_control.offset = 80.0;
  config.pcan_gain_control.gain_bits = 21;
  config.log_scale.enable_log = 1;
  config.log_scale.scale_shift = 6;
  if (!FrontendPopulateState(&config, &g_micro_features_state,
   17fde:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
  config.noise_reduction.even_smoothing = 0.025;
   17fe2:	9307      	str	r3, [sp, #28]
  config.noise_reduction.odd_smoothing = 0.06;
   17fe4:	4b11      	ldr	r3, [pc, #68]	; (1802c <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x70>)
  if (!FrontendPopulateState(&config, &g_micro_features_state,
   17fe6:	4668      	mov	r0, sp
  config.noise_reduction.odd_smoothing = 0.06;
   17fe8:	9308      	str	r3, [sp, #32]
  config.noise_reduction.min_signal_remaining = 0.05;
   17fea:	4b11      	ldr	r3, [pc, #68]	; (18030 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x74>)
  if (!FrontendPopulateState(&config, &g_micro_features_state,
   17fec:	4911      	ldr	r1, [pc, #68]	; (18034 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x78>)
  config.noise_reduction.min_signal_remaining = 0.05;
   17fee:	9309      	str	r3, [sp, #36]	; 0x24
  config.pcan_gain_control.strength = 0.95;
   17ff0:	4b11      	ldr	r3, [pc, #68]	; (18038 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x7c>)
  config.pcan_gain_control.enable_pcan = 1;
   17ff2:	940a      	str	r4, [sp, #40]	; 0x28
  config.pcan_gain_control.strength = 0.95;
   17ff4:	930b      	str	r3, [sp, #44]	; 0x2c
  config.pcan_gain_control.offset = 80.0;
   17ff6:	4b11      	ldr	r3, [pc, #68]	; (1803c <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x80>)
   17ff8:	930c      	str	r3, [sp, #48]	; 0x30
  config.pcan_gain_control.gain_bits = 21;
   17ffa:	2315      	movs	r3, #21
  config.log_scale.enable_log = 1;
   17ffc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  config.log_scale.scale_shift = 6;
   18000:	2306      	movs	r3, #6
   18002:	930f      	str	r3, [sp, #60]	; 0x3c
  if (!FrontendPopulateState(&config, &g_micro_features_state,
   18004:	f7f7 fa39 	bl	f47a <FrontendPopulateState>
   18008:	b930      	cbnz	r0, 18018 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x5c>
                             kAudioSampleFrequency)) {
    TF_LITE_REPORT_ERROR(error_reporter, "FrontendPopulateState() failed");
   1800a:	4628      	mov	r0, r5
   1800c:	490c      	ldr	r1, [pc, #48]	; (18040 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x84>)
   1800e:	f00b faaf 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   18012:	4620      	mov	r0, r4
  }
  g_is_first_time = true;
  return kTfLiteOk;
}
   18014:	b011      	add	sp, #68	; 0x44
   18016:	bd30      	pop	{r4, r5, pc}
  g_is_first_time = true;
   18018:	4b0a      	ldr	r3, [pc, #40]	; (18044 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x88>)
  return kTfLiteOk;
   1801a:	2000      	movs	r0, #0
  g_is_first_time = true;
   1801c:	701c      	strb	r4, [r3, #0]
  return kTfLiteOk;
   1801e:	e7f9      	b.n	18014 <_Z23InitializeMicroFeaturesPN6tflite13ErrorReporterE+0x58>
   18020:	42fa0000 	.word	0x42fa0000
   18024:	45ea6000 	.word	0x45ea6000
   18028:	3ccccccd 	.word	0x3ccccccd
   1802c:	3d75c28f 	.word	0x3d75c28f
   18030:	3d4ccccd 	.word	0x3d4ccccd
   18034:	20020484 	.word	0x20020484
   18038:	3f733333 	.word	0x3f733333
   1803c:	42a00000 	.word	0x42a00000
   18040:	0002af0f 	.word	0x0002af0f
   18044:	200200c8 	.word	0x200200c8

00018048 <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj>:
}

TfLiteStatus GenerateMicroFeatures(tflite::ErrorReporter* error_reporter,
                                   const int16_t* input, int input_size,
                                   int output_size, int8_t* output,
                                   size_t* num_samples_read) {
   18048:	b530      	push	{r4, r5, lr}
   1804a:	4613      	mov	r3, r2
  const int16_t* frontend_input;
  if (g_is_first_time) {
   1804c:	4a14      	ldr	r2, [pc, #80]	; (180a0 <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0x58>)
                                   size_t* num_samples_read) {
   1804e:	b085      	sub	sp, #20
  if (g_is_first_time) {
   18050:	7810      	ldrb	r0, [r2, #0]
                                   size_t* num_samples_read) {
   18052:	9c08      	ldr	r4, [sp, #32]
  if (g_is_first_time) {
   18054:	b1e8      	cbz	r0, 18092 <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0x4a>
    frontend_input = input;
    g_is_first_time = false;
   18056:	2000      	movs	r0, #0
   18058:	7010      	strb	r0, [r2, #0]
  } else {
    frontend_input = input + 160;
  }
  FrontendOutput frontend_output = FrontendProcessSamples(
      &g_micro_features_state, frontend_input, input_size, num_samples_read);
   1805a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1805c:	a802      	add	r0, sp, #8
   1805e:	9200      	str	r2, [sp, #0]
   18060:	460a      	mov	r2, r1
   18062:	4910      	ldr	r1, [pc, #64]	; (180a4 <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0x5c>)
   18064:	f7fd f96f 	bl	15346 <FrontendProcessSamples>

  for (int i = 0; i < frontend_output.size; ++i) {
   18068:	e9dd 0502 	ldrd	r0, r5, [sp, #8]
   1806c:	2200      	movs	r2, #0
    // input = (((feature / 25.6) / 26.0) * 256) - 128
    // To simplify this and perform it in 32-bit integer math, we rearrange to:
    // input = (feature * 256) / (25.6 * 26.0) - 128
    constexpr int32_t value_scale = 256;
    constexpr int32_t value_div = static_cast<int32_t>((25.6f * 26.0f) + 0.5f);
    int32_t value =
   1806e:	f240 219a 	movw	r1, #666	; 0x29a
  for (int i = 0; i < frontend_output.size; ++i) {
   18072:	42aa      	cmp	r2, r5
   18074:	d010      	beq.n	18098 <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0x50>
        ((frontend_output.values[i] * value_scale) + (value_div / 2)) /
   18076:	f830 3012 	ldrh.w	r3, [r0, r2, lsl #1]
   1807a:	021b      	lsls	r3, r3, #8
   1807c:	f203 134d 	addw	r3, r3, #333	; 0x14d
    int32_t value =
   18080:	fbb3 f3f1 	udiv	r3, r3, r1
        value_div;
    value -= 128;
   18084:	3b80      	subs	r3, #128	; 0x80
      value = -128;
    }
    if (value > 127) {
      value = 127;
    }
    output[i] = value;
   18086:	2b7f      	cmp	r3, #127	; 0x7f
   18088:	bfa8      	it	ge
   1808a:	237f      	movge	r3, #127	; 0x7f
   1808c:	54a3      	strb	r3, [r4, r2]
  for (int i = 0; i < frontend_output.size; ++i) {
   1808e:	3201      	adds	r2, #1
   18090:	e7ef      	b.n	18072 <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0x2a>
    frontend_input = input + 160;
   18092:	f501 71a0 	add.w	r1, r1, #320	; 0x140
   18096:	e7e0      	b.n	1805a <_Z21GenerateMicroFeaturesPN6tflite13ErrorReporterEPKsiiPaPj+0x12>
  }

  return kTfLiteOk;
}
   18098:	2000      	movs	r0, #0
   1809a:	b005      	add	sp, #20
   1809c:	bd30      	pop	{r4, r5, pc}
   1809e:	bf00      	nop
   180a0:	200200c8 	.word	0x200200c8
   180a4:	20020484 	.word	0x20020484

000180a8 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   180a8:	680b      	ldr	r3, [r1, #0]
   180aa:	3301      	adds	r3, #1
   180ac:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   180ae:	4b01      	ldr	r3, [pc, #4]	; (180b4 <char_out+0xc>)
   180b0:	681b      	ldr	r3, [r3, #0]
   180b2:	4718      	bx	r3
   180b4:	20020014 	.word	0x20020014

000180b8 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   180b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180bc:	ed2d 8b02 	vpush	{d8}
   180c0:	b083      	sub	sp, #12
   180c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   180c4:	469a      	mov	sl, r3
   180c6:	2c01      	cmp	r4, #1
   180c8:	bfb8      	it	lt
   180ca:	2401      	movlt	r4, #1
   180cc:	2b01      	cmp	r3, #1
   180ce:	bf0c      	ite	eq
   180d0:	2330      	moveq	r3, #48	; 0x30
   180d2:	2320      	movne	r3, #32
   180d4:	4615      	mov	r5, r2
   180d6:	4606      	mov	r6, r0
   180d8:	ee08 3a10 	vmov	s16, r3
   180dc:	2701      	movs	r7, #1
   180de:	f04f 080a 	mov.w	r8, #10
   180e2:	2200      	movs	r2, #0
   180e4:	f8df b074 	ldr.w	fp, [pc, #116]	; 1815c <_printk_dec_ulong+0xa4>
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   180e8:	fbb5 f9fb 	udiv	r9, r5, fp
   180ec:	b90a      	cbnz	r2, 180f2 <_printk_dec_ulong+0x3a>
   180ee:	45ab      	cmp	fp, r5
   180f0:	d820      	bhi.n	18134 <_printk_dec_ulong+0x7c>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   180f2:	f109 0030 	add.w	r0, r9, #48	; 0x30
   180f6:	9100      	str	r1, [sp, #0]
   180f8:	47b0      	blx	r6
			found_largest_digit = 1;
   180fa:	2201      	movs	r2, #1
			digits++;
   180fc:	3701      	adds	r7, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
   180fe:	9900      	ldr	r1, [sp, #0]
		}
		remaining--;
		remainder %= pos;
		pos /= 10;
   18100:	230a      	movs	r3, #10
		remaining--;
   18102:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
   18106:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
   1810a:	fb0b 5519 	mls	r5, fp, r9, r5
		pos /= 10;
   1810e:	fbbb fbf3 	udiv	fp, fp, r3
	while (pos >= 10) {
   18112:	d1e9      	bne.n	180e8 <_printk_dec_ulong+0x30>
	}
	out((int)(remainder + 48), ctx);
   18114:	f105 0030 	add.w	r0, r5, #48	; 0x30
   18118:	9100      	str	r1, [sp, #0]
   1811a:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
   1811c:	f1ba 0f03 	cmp.w	sl, #3
   18120:	9900      	ldr	r1, [sp, #0]
   18122:	d102      	bne.n	1812a <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
   18124:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
   18126:	2c00      	cmp	r4, #0
   18128:	dc11      	bgt.n	1814e <_printk_dec_ulong+0x96>
			out(' ', ctx);
		}
	}
}
   1812a:	b003      	add	sp, #12
   1812c:	ecbd 8b02 	vpop	{d8}
   18130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   18134:	4544      	cmp	r4, r8
   18136:	dbe3      	blt.n	18100 <_printk_dec_ulong+0x48>
				&& padding < PAD_SPACE_AFTER) {
   18138:	f1ba 0f02 	cmp.w	sl, #2
   1813c:	d8e0      	bhi.n	18100 <_printk_dec_ulong+0x48>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   1813e:	ee18 0a10 	vmov	r0, s16
   18142:	e9cd 1200 	strd	r1, r2, [sp]
			digits++;
   18146:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   18148:	47b0      	blx	r6
			digits++;
   1814a:	9a01      	ldr	r2, [sp, #4]
   1814c:	e7d7      	b.n	180fe <_printk_dec_ulong+0x46>
			out(' ', ctx);
   1814e:	2020      	movs	r0, #32
   18150:	9100      	str	r1, [sp, #0]
   18152:	3c01      	subs	r4, #1
   18154:	47b0      	blx	r6
   18156:	9900      	ldr	r1, [sp, #0]
   18158:	e7e5      	b.n	18126 <_printk_dec_ulong+0x6e>
   1815a:	bf00      	nop
   1815c:	3b9aca00 	.word	0x3b9aca00

00018160 <__printk_hook_install>:
	_char_out = fn;
   18160:	4b01      	ldr	r3, [pc, #4]	; (18168 <__printk_hook_install+0x8>)
   18162:	6018      	str	r0, [r3, #0]
}
   18164:	4770      	bx	lr
   18166:	bf00      	nop
   18168:	20020014 	.word	0x20020014

0001816c <z_vprintk>:
{
   1816c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   18170:	2700      	movs	r7, #0
{
   18172:	4605      	mov	r5, r0
   18174:	468b      	mov	fp, r1
	int min_width = -1;
   18176:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   1817a:	46b8      	mov	r8, r7
{
   1817c:	461c      	mov	r4, r3
   1817e:	b08d      	sub	sp, #52	; 0x34
   18180:	1e53      	subs	r3, r2, #1
   18182:	9303      	str	r3, [sp, #12]
			might_format = 0;
   18184:	2600      	movs	r6, #0
					break;
   18186:	e005      	b.n	18194 <z_vprintk+0x28>
		if (!might_format) {
   18188:	b96e      	cbnz	r6, 181a6 <z_vprintk+0x3a>
			if (*fmt != '%') {
   1818a:	2825      	cmp	r0, #37	; 0x25
   1818c:	f000 8171 	beq.w	18472 <z_vprintk+0x306>
				out((int)*fmt, ctx);
   18190:	4659      	mov	r1, fp
   18192:	47a8      	blx	r5
	while (*fmt) {
   18194:	9b03      	ldr	r3, [sp, #12]
   18196:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   1819a:	9303      	str	r3, [sp, #12]
   1819c:	2800      	cmp	r0, #0
   1819e:	d1f3      	bne.n	18188 <z_vprintk+0x1c>
}
   181a0:	b00d      	add	sp, #52	; 0x34
   181a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   181a6:	287a      	cmp	r0, #122	; 0x7a
   181a8:	d80a      	bhi.n	181c0 <z_vprintk+0x54>
   181aa:	2862      	cmp	r0, #98	; 0x62
   181ac:	d810      	bhi.n	181d0 <z_vprintk+0x64>
   181ae:	2830      	cmp	r0, #48	; 0x30
   181b0:	d054      	beq.n	1825c <z_vprintk+0xf0>
   181b2:	d845      	bhi.n	18240 <z_vprintk+0xd4>
   181b4:	2825      	cmp	r0, #37	; 0x25
   181b6:	f000 815a 	beq.w	1846e <z_vprintk+0x302>
   181ba:	282d      	cmp	r0, #45	; 0x2d
   181bc:	f000 815f 	beq.w	1847e <z_vprintk+0x312>
					out((int)'%', ctx);
   181c0:	4659      	mov	r1, fp
   181c2:	2025      	movs	r0, #37	; 0x25
   181c4:	47a8      	blx	r5
					out((int)*fmt, ctx);
   181c6:	4659      	mov	r1, fp
   181c8:	9b03      	ldr	r3, [sp, #12]
   181ca:	7818      	ldrb	r0, [r3, #0]
   181cc:	47a8      	blx	r5
   181ce:	e7d9      	b.n	18184 <z_vprintk+0x18>
   181d0:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
   181d4:	2b17      	cmp	r3, #23
   181d6:	d8f3      	bhi.n	181c0 <z_vprintk+0x54>
   181d8:	a201      	add	r2, pc, #4	; (adr r2, 181e0 <z_vprintk+0x74>)
   181da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   181de:	bf00      	nop
   181e0:	00018467 	.word	0x00018467
   181e4:	000182ab 	.word	0x000182ab
   181e8:	000181c1 	.word	0x000181c1
   181ec:	000181c1 	.word	0x000181c1
   181f0:	000181c1 	.word	0x000181c1
   181f4:	0001828d 	.word	0x0001828d
   181f8:	000182ab 	.word	0x000182ab
   181fc:	000181c1 	.word	0x000181c1
   18200:	000181c1 	.word	0x000181c1
   18204:	0001828d 	.word	0x0001828d
   18208:	000181c1 	.word	0x000181c1
   1820c:	000181c1 	.word	0x000181c1
   18210:	000181c1 	.word	0x000181c1
   18214:	0001834d 	.word	0x0001834d
   18218:	000181c1 	.word	0x000181c1
   1821c:	000181c1 	.word	0x000181c1
   18220:	00018437 	.word	0x00018437
   18224:	000181c1 	.word	0x000181c1
   18228:	0001831b 	.word	0x0001831b
   1822c:	000181c1 	.word	0x000181c1
   18230:	000181c1 	.word	0x000181c1
   18234:	00018249 	.word	0x00018249
   18238:	000181c1 	.word	0x000181c1
   1823c:	0001828d 	.word	0x0001828d
			switch (*fmt) {
   18240:	2839      	cmp	r0, #57	; 0x39
   18242:	d91a      	bls.n	1827a <z_vprintk+0x10e>
   18244:	2858      	cmp	r0, #88	; 0x58
   18246:	d1bb      	bne.n	181c0 <z_vprintk+0x54>
				if (*fmt == 'p') {
   18248:	9b03      	ldr	r3, [sp, #12]
   1824a:	781b      	ldrb	r3, [r3, #0]
   1824c:	2b70      	cmp	r3, #112	; 0x70
   1824e:	f040 8088 	bne.w	18362 <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
   18252:	f854 3b04 	ldr.w	r3, [r4], #4
   18256:	2200      	movs	r2, #0
   18258:	9306      	str	r3, [sp, #24]
   1825a:	e090      	b.n	1837e <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
   1825c:	f1b9 0f00 	cmp.w	r9, #0
   18260:	da0e      	bge.n	18280 <z_vprintk+0x114>
   18262:	f1b8 0f00 	cmp.w	r8, #0
   18266:	f000 810d 	beq.w	18484 <z_vprintk+0x318>
					min_width = *fmt - '0';
   1826a:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   1826e:	f1b8 0f00 	cmp.w	r8, #0
   18272:	bf08      	it	eq
   18274:	f04f 0802 	moveq.w	r8, #2
   18278:	e78c      	b.n	18194 <z_vprintk+0x28>
				if (min_width < 0) {
   1827a:	f1b9 0f00 	cmp.w	r9, #0
   1827e:	dbf4      	blt.n	1826a <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
   18280:	230a      	movs	r3, #10
   18282:	fb03 0909 	mla	r9, r3, r9, r0
   18286:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   1828a:	e7f0      	b.n	1826e <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
   1828c:	2868      	cmp	r0, #104	; 0x68
   1828e:	d103      	bne.n	18298 <z_vprintk+0x12c>
   18290:	2f68      	cmp	r7, #104	; 0x68
   18292:	d106      	bne.n	182a2 <z_vprintk+0x136>
					length_mod = 'H';
   18294:	2748      	movs	r7, #72	; 0x48
   18296:	e77d      	b.n	18194 <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
   18298:	286c      	cmp	r0, #108	; 0x6c
   1829a:	d102      	bne.n	182a2 <z_vprintk+0x136>
   1829c:	2f6c      	cmp	r7, #108	; 0x6c
   1829e:	f000 80f4 	beq.w	1848a <z_vprintk+0x31e>
				} else if (length_mod == 0) {
   182a2:	2f00      	cmp	r7, #0
   182a4:	d18c      	bne.n	181c0 <z_vprintk+0x54>
   182a6:	4607      	mov	r7, r0
   182a8:	e774      	b.n	18194 <z_vprintk+0x28>
				if (length_mod == 'z') {
   182aa:	2f7a      	cmp	r7, #122	; 0x7a
   182ac:	d102      	bne.n	182b4 <z_vprintk+0x148>
					d = va_arg(ap, int);
   182ae:	f854 6b04 	ldr.w	r6, [r4], #4
   182b2:	e021      	b.n	182f8 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
   182b4:	2f6c      	cmp	r7, #108	; 0x6c
   182b6:	d0fa      	beq.n	182ae <z_vprintk+0x142>
				} else if (length_mod == 'L') {
   182b8:	2f4c      	cmp	r7, #76	; 0x4c
   182ba:	d1f8      	bne.n	182ae <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
   182bc:	3407      	adds	r4, #7
   182be:	f024 0407 	bic.w	r4, r4, #7
   182c2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   182c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
   182ca:	9b04      	ldr	r3, [sp, #16]
   182cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   182d0:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   182d4:	9b05      	ldr	r3, [sp, #20]
   182d6:	9108      	str	r1, [sp, #32]
   182d8:	f143 0100 	adc.w	r1, r3, #0
   182dc:	9109      	str	r1, [sp, #36]	; 0x24
   182de:	2100      	movs	r1, #0
   182e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   182e4:	4299      	cmp	r1, r3
   182e6:	bf08      	it	eq
   182e8:	4290      	cmpeq	r0, r2
   182ea:	d204      	bcs.n	182f6 <z_vprintk+0x18a>
						print_err(out, ctx);
   182ec:	4659      	mov	r1, fp
   182ee:	4628      	mov	r0, r5
   182f0:	f009 fea4 	bl	2203c <print_err>
						break;
   182f4:	e746      	b.n	18184 <z_vprintk+0x18>
					d = lld;
   182f6:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
   182f8:	2e00      	cmp	r6, #0
   182fa:	da05      	bge.n	18308 <z_vprintk+0x19c>
					out((int)'-', ctx);
   182fc:	4659      	mov	r1, fp
   182fe:	202d      	movs	r0, #45	; 0x2d
   18300:	47a8      	blx	r5
					d = -d;
   18302:	4276      	negs	r6, r6
					min_width--;
   18304:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   18308:	4643      	mov	r3, r8
   1830a:	4632      	mov	r2, r6
   1830c:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   18310:	4659      	mov	r1, fp
   18312:	4628      	mov	r0, r5
   18314:	f7ff fed0 	bl	180b8 <_printk_dec_ulong>
				break;
   18318:	e734      	b.n	18184 <z_vprintk+0x18>
				if (length_mod == 'z') {
   1831a:	2f7a      	cmp	r7, #122	; 0x7a
   1831c:	d102      	bne.n	18324 <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
   1831e:	f854 2b04 	ldr.w	r2, [r4], #4
   18322:	e00f      	b.n	18344 <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
   18324:	2f6c      	cmp	r7, #108	; 0x6c
   18326:	d0fa      	beq.n	1831e <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
   18328:	2f4c      	cmp	r7, #76	; 0x4c
   1832a:	d1f8      	bne.n	1831e <z_vprintk+0x1b2>
					if (llu > ~0UL) {
   1832c:	2100      	movs	r1, #0
   1832e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   18332:	3407      	adds	r4, #7
   18334:	f024 0407 	bic.w	r4, r4, #7
   18338:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   1833c:	4299      	cmp	r1, r3
   1833e:	bf08      	it	eq
   18340:	4290      	cmpeq	r0, r2
   18342:	d3d3      	bcc.n	182ec <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
   18344:	4643      	mov	r3, r8
   18346:	f8cd 9000 	str.w	r9, [sp]
   1834a:	e7e1      	b.n	18310 <z_vprintk+0x1a4>
				out('0', ctx);
   1834c:	4659      	mov	r1, fp
   1834e:	2030      	movs	r0, #48	; 0x30
   18350:	47a8      	blx	r5
				out('x', ctx);
   18352:	4659      	mov	r1, fp
   18354:	2078      	movs	r0, #120	; 0x78
   18356:	47a8      	blx	r5
					min_width = 8;
   18358:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
   1835c:	f04f 0801 	mov.w	r8, #1
   18360:	e772      	b.n	18248 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
   18362:	2f6c      	cmp	r7, #108	; 0x6c
   18364:	f43f af75 	beq.w	18252 <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
   18368:	2f4c      	cmp	r7, #76	; 0x4c
   1836a:	f47f af72 	bne.w	18252 <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
   1836e:	1de3      	adds	r3, r4, #7
   18370:	f023 0307 	bic.w	r3, r3, #7
   18374:	461c      	mov	r4, r3
   18376:	f854 2b08 	ldr.w	r2, [r4], #8
   1837a:	9206      	str	r2, [sp, #24]
   1837c:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
   1837e:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   18380:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
   18382:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
   18386:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
   18388:	9107      	str	r1, [sp, #28]
		shift -= 4;
   1838a:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
   1838e:	9906      	ldr	r1, [sp, #24]
   18390:	f1ca 0e20 	rsb	lr, sl, #32
   18394:	f1aa 0c20 	sub.w	ip, sl, #32
   18398:	fa21 f00a 	lsr.w	r0, r1, sl
   1839c:	fa02 fe0e 	lsl.w	lr, r2, lr
   183a0:	ea40 000e 	orr.w	r0, r0, lr
   183a4:	fa22 fc0c 	lsr.w	ip, r2, ip
   183a8:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   183ac:	f010 000f 	ands.w	r0, r0, #15
   183b0:	d107      	bne.n	183c2 <z_vprintk+0x256>
   183b2:	9907      	ldr	r1, [sp, #28]
   183b4:	b911      	cbnz	r1, 183bc <z_vprintk+0x250>
   183b6:	f1ba 0f00 	cmp.w	sl, #0
   183ba:	d125      	bne.n	18408 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
   183bc:	f04f 0c30 	mov.w	ip, #48	; 0x30
   183c0:	e005      	b.n	183ce <z_vprintk+0x262>
   183c2:	2809      	cmp	r0, #9
   183c4:	bf8c      	ite	hi
   183c6:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   183ca:	f04f 0c30 	movls.w	ip, #48	; 0x30
   183ce:	4460      	add	r0, ip
			out((int)nibble, ctx);
   183d0:	4659      	mov	r1, fp
   183d2:	b240      	sxtb	r0, r0
   183d4:	920a      	str	r2, [sp, #40]	; 0x28
   183d6:	9307      	str	r3, [sp, #28]
   183d8:	47a8      	blx	r5
			digits++;
   183da:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
   183dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
   183de:	3301      	adds	r3, #1
   183e0:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
   183e2:	9b07      	ldr	r3, [sp, #28]
   183e4:	f1ba 0f00 	cmp.w	sl, #0
   183e8:	d123      	bne.n	18432 <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
   183ea:	f1b8 0f03 	cmp.w	r8, #3
   183ee:	f47f aec9 	bne.w	18184 <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
   183f2:	9b04      	ldr	r3, [sp, #16]
   183f4:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
   183f8:	2e00      	cmp	r6, #0
   183fa:	f77f aec3 	ble.w	18184 <z_vprintk+0x18>
			out(' ', ctx);
   183fe:	4659      	mov	r1, fp
   18400:	2020      	movs	r0, #32
   18402:	47a8      	blx	r5
   18404:	3e01      	subs	r6, #1
   18406:	e7f7      	b.n	183f8 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
   18408:	1e59      	subs	r1, r3, #1
   1840a:	4599      	cmp	r9, r3
   1840c:	910a      	str	r1, [sp, #40]	; 0x28
   1840e:	db07      	blt.n	18420 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
   18410:	f1b8 0f01 	cmp.w	r8, #1
   18414:	d106      	bne.n	18424 <z_vprintk+0x2b8>
				out('0', ctx);
   18416:	4659      	mov	r1, fp
   18418:	2030      	movs	r0, #48	; 0x30
   1841a:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
   1841c:	47a8      	blx	r5
   1841e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
   18420:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18422:	e7b2      	b.n	1838a <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
   18424:	f1b8 0f02 	cmp.w	r8, #2
   18428:	d1fa      	bne.n	18420 <z_vprintk+0x2b4>
				out(' ', ctx);
   1842a:	4659      	mov	r1, fp
   1842c:	2020      	movs	r0, #32
   1842e:	920b      	str	r2, [sp, #44]	; 0x2c
   18430:	e7f4      	b.n	1841c <z_vprintk+0x2b0>
			found_largest_digit = 1;
   18432:	9607      	str	r6, [sp, #28]
   18434:	e7a9      	b.n	1838a <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
   18436:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
   1843a:	46b2      	mov	sl, r6
   1843c:	4653      	mov	r3, sl
   1843e:	f81a 0b01 	ldrb.w	r0, [sl], #1
   18442:	b968      	cbnz	r0, 18460 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
   18444:	f1b8 0f03 	cmp.w	r8, #3
   18448:	d121      	bne.n	1848e <z_vprintk+0x322>
					int remaining = min_width - (s - start);
   1844a:	1b9e      	subs	r6, r3, r6
   1844c:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
   18450:	2e00      	cmp	r6, #0
   18452:	f77f ae97 	ble.w	18184 <z_vprintk+0x18>
						out(' ', ctx);
   18456:	4659      	mov	r1, fp
   18458:	2020      	movs	r0, #32
   1845a:	47a8      	blx	r5
   1845c:	3e01      	subs	r6, #1
   1845e:	e7f7      	b.n	18450 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
   18460:	4659      	mov	r1, fp
   18462:	47a8      	blx	r5
   18464:	e7ea      	b.n	1843c <z_vprintk+0x2d0>
				out(c, ctx);
   18466:	4659      	mov	r1, fp
   18468:	f854 0b04 	ldr.w	r0, [r4], #4
   1846c:	e6ae      	b.n	181cc <z_vprintk+0x60>
				out((int)'%', ctx);
   1846e:	4659      	mov	r1, fp
   18470:	e6ac      	b.n	181cc <z_vprintk+0x60>
				length_mod = 0;
   18472:	4637      	mov	r7, r6
				padding = PAD_NONE;
   18474:	46b0      	mov	r8, r6
				min_width = -1;
   18476:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
   1847a:	2601      	movs	r6, #1
   1847c:	e68a      	b.n	18194 <z_vprintk+0x28>
			switch (*fmt) {
   1847e:	f04f 0803 	mov.w	r8, #3
   18482:	e687      	b.n	18194 <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
   18484:	f04f 0801 	mov.w	r8, #1
   18488:	e684      	b.n	18194 <z_vprintk+0x28>
					length_mod = 'L';
   1848a:	274c      	movs	r7, #76	; 0x4c
   1848c:	e682      	b.n	18194 <z_vprintk+0x28>
			might_format = 0;
   1848e:	4606      	mov	r6, r0
		++fmt;
   18490:	e680      	b.n	18194 <z_vprintk+0x28>
   18492:	bf00      	nop

00018494 <vprintk>:
{
   18494:	b507      	push	{r0, r1, r2, lr}
   18496:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   18498:	2100      	movs	r1, #0
{
   1849a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   1849c:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
   1849e:	4803      	ldr	r0, [pc, #12]	; (184ac <vprintk+0x18>)
   184a0:	a901      	add	r1, sp, #4
   184a2:	f7ff fe63 	bl	1816c <z_vprintk>
}
   184a6:	b003      	add	sp, #12
   184a8:	f85d fb04 	ldr.w	pc, [sp], #4
   184ac:	000180a9 	.word	0x000180a9

000184b0 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   184b0:	f04f 0220 	mov.w	r2, #32
   184b4:	f3ef 8311 	mrs	r3, BASEPRI
   184b8:	f382 8811 	msr	BASEPRI, r2
   184bc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   184c0:	2101      	movs	r1, #1
   184c2:	4a04      	ldr	r2, [pc, #16]	; (184d4 <nordicsemi_nrf91_init+0x24>)
   184c4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   184c8:	f383 8811 	msr	BASEPRI, r3
   184cc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   184d0:	2000      	movs	r0, #0
   184d2:	4770      	bx	lr
   184d4:	40039000 	.word	0x40039000

000184d8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   184d8:	b120      	cbz	r0, 184e4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   184da:	4b03      	ldr	r3, [pc, #12]	; (184e8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   184dc:	0180      	lsls	r0, r0, #6
   184de:	f043 0301 	orr.w	r3, r3, #1
   184e2:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   184e4:	4770      	bx	lr
   184e6:	bf00      	nop
   184e8:	00025b10 	.word	0x00025b10

000184ec <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
   184ec:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
   184ee:	4c04      	ldr	r4, [pc, #16]	; (18500 <__do_init_array_aux+0x14>)
   184f0:	4d04      	ldr	r5, [pc, #16]	; (18504 <__do_init_array_aux+0x18>)
   184f2:	42ac      	cmp	r4, r5
   184f4:	d300      	bcc.n	184f8 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
   184f6:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
   184f8:	f854 3b04 	ldr.w	r3, [r4], #4
   184fc:	4798      	blx	r3
		func++) {
   184fe:	e7f8      	b.n	184f2 <__do_init_array_aux+0x6>
   18500:	00024e38 	.word	0x00024e38
   18504:	00024e3c 	.word	0x00024e3c

00018508 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
   18508:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
   1850a:	4c05      	ldr	r4, [pc, #20]	; (18520 <__do_global_ctors_aux+0x18>)
   1850c:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
   1850e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   18512:	b905      	cbnz	r5, 18516 <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
   18514:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
   18516:	f854 3904 	ldr.w	r3, [r4], #-4
   1851a:	3d01      	subs	r5, #1
   1851c:	4798      	blx	r3
   1851e:	e7f8      	b.n	18512 <__do_global_ctors_aux+0xa>
   18520:	00024e30 	.word	0x00024e30

00018524 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
   18524:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   18526:	4806      	ldr	r0, [pc, #24]	; (18540 <uart_console_init+0x1c>)
   18528:	f001 fb3e 	bl	19ba8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
   1852c:	4b05      	ldr	r3, [pc, #20]	; (18544 <uart_console_init+0x20>)
   1852e:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
   18530:	4805      	ldr	r0, [pc, #20]	; (18548 <uart_console_init+0x24>)
   18532:	f000 fdab 	bl	1908c <__stdout_hook_install>
	__printk_hook_install(console_out);
   18536:	4804      	ldr	r0, [pc, #16]	; (18548 <uart_console_init+0x24>)
   18538:	f7ff fe12 	bl	18160 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
   1853c:	2000      	movs	r0, #0
   1853e:	bd08      	pop	{r3, pc}
   18540:	0002af3d 	.word	0x0002af3d
   18544:	20020510 	.word	0x20020510
   18548:	0001854d 	.word	0x0001854d

0001854c <console_out>:
	if ('\n' == c) {
   1854c:	280a      	cmp	r0, #10
{
   1854e:	b538      	push	{r3, r4, r5, lr}
   18550:	4604      	mov	r4, r0
   18552:	4d07      	ldr	r5, [pc, #28]	; (18570 <console_out+0x24>)
	if ('\n' == c) {
   18554:	d104      	bne.n	18560 <console_out+0x14>
   18556:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
   18558:	6883      	ldr	r3, [r0, #8]
   1855a:	210d      	movs	r1, #13
   1855c:	685b      	ldr	r3, [r3, #4]
   1855e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   18560:	6828      	ldr	r0, [r5, #0]
   18562:	6883      	ldr	r3, [r0, #8]
   18564:	b2e1      	uxtb	r1, r4
   18566:	685b      	ldr	r3, [r3, #4]
   18568:	4798      	blx	r3
}
   1856a:	4620      	mov	r0, r4
   1856c:	bd38      	pop	{r3, r4, r5, pc}
   1856e:	bf00      	nop
   18570:	20020510 	.word	0x20020510

00018574 <clock_async_start>:
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
   18574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct nrf_clock_control_sub_data *clk_data;
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
	config = get_sub_config(dev, type);
   18578:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
   1857a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   1857e:	b2cf      	uxtb	r7, r1
			((data != NULL) && (data->cb != NULL)));

	/* if node is in the list it means that it is scheduled for
	 * the second time.
	 */
	if ((data != NULL)
   18580:	b14a      	cbz	r2, 18596 <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
   18582:	230c      	movs	r3, #12
   18584:	437b      	muls	r3, r7
   18586:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
   1858a:	429a      	cmp	r2, r3
   1858c:	d053      	beq.n	18636 <clock_async_start+0xc2>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   1858e:	b113      	cbz	r3, 18596 <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   18590:	681b      	ldr	r3, [r3, #0]
	} while (item);
   18592:	2b00      	cmp	r3, #0
   18594:	d1f9      	bne.n	1858a <clock_async_start+0x16>
	__asm__ volatile(
   18596:	f04f 0320 	mov.w	r3, #32
   1859a:	f3ef 8c11 	mrs	ip, BASEPRI
   1859e:	f383 8811 	msr	BASEPRI, r3
   185a2:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
   185a6:	250c      	movs	r5, #12
   185a8:	437d      	muls	r5, r7
   185aa:	eb0e 0305 	add.w	r3, lr, r5
   185ae:	7a1c      	ldrb	r4, [r3, #8]
   185b0:	3401      	adds	r4, #1
   185b2:	b2e4      	uxtb	r4, r4
   185b4:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   185b6:	f38c 8811 	msr	BASEPRI, ip
   185ba:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(clk_data->ref > 0);
	irq_unlock(key);

	if (data) {
   185be:	b352      	cbz	r2, 18616 <clock_async_start+0xa2>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   185c0:	f04f 0803 	mov.w	r8, #3
   185c4:	f8df c078 	ldr.w	ip, [pc, #120]	; 18640 <clock_async_start+0xcc>
   185c8:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
   185cc:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
   185d0:	f1bc 0f00 	cmp.w	ip, #0
   185d4:	d115      	bne.n	18602 <clock_async_start+0x8e>
	__asm__ volatile(
   185d6:	f04f 0820 	mov.w	r8, #32
   185da:	f3ef 8911 	mrs	r9, BASEPRI
   185de:	f388 8811 	msr	BASEPRI, r8
   185e2:	f3bf 8f6f 	isb	sy
	parent->next = child;
   185e6:	f8c2 c000 	str.w	ip, [r2]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   185ea:	f8d3 8004 	ldr.w	r8, [r3, #4]
   185ee:	f1b8 0f00 	cmp.w	r8, #0
   185f2:	d11c      	bne.n	1862e <clock_async_start+0xba>
	list->tail = node;
   185f4:	605a      	str	r2, [r3, #4]
	list->head = node;
   185f6:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
   185fa:	f389 8811 	msr	BASEPRI, r9
   185fe:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   18602:	2503      	movs	r5, #3
   18604:	4b0e      	ldr	r3, [pc, #56]	; (18640 <clock_async_start+0xcc>)
   18606:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
   1860a:	f1bc 0f00 	cmp.w	ip, #0
   1860e:	d002      	beq.n	18616 <clock_async_start+0xa2>
			data->cb(dev, subsys, data->user_data);
   18610:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
   18614:	4798      	blx	r3
		}
	}

	if (ref == 1) {
   18616:	2c01      	cmp	r4, #1
   18618:	d107      	bne.n	1862a <clock_async_start+0xb6>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			(subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			anomaly_132_workaround();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
   1861a:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1861e:	78b3      	ldrb	r3, [r6, #2]
   18620:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18624:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   18628:	601c      	str	r4, [r3, #0]
	}

	return 0;
   1862a:	2000      	movs	r0, #0
   1862c:	e005      	b.n	1863a <clock_async_start+0xc6>
	parent->next = child;
   1862e:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
   18632:	605a      	str	r2, [r3, #4]
}
   18634:	e7e1      	b.n	185fa <clock_async_start+0x86>
		return -EBUSY;
   18636:	f06f 000f 	mvn.w	r0, #15
}
   1863a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1863e:	bf00      	nop
   18640:	40005000 	.word	0x40005000

00018644 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
   18644:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18646:	2200      	movs	r2, #0
{
   18648:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1864a:	2101      	movs	r1, #1
   1864c:	2005      	movs	r0, #5
   1864e:	f000 f99d 	bl	1898c <z_arm_irq_priority_set>
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_IRQN(0));
   18652:	2005      	movs	r0, #5
   18654:	f000 f98a 	bl	1896c <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   18658:	2202      	movs	r2, #2
   1865a:	4b07      	ldr	r3, [pc, #28]	; (18678 <clk_init+0x34>)
	list->head = NULL;
   1865c:	2000      	movs	r0, #0
   1865e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   18662:	2203      	movs	r2, #3
   18664:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
   18668:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
   1866a:	e9c3 0000 	strd	r0, r0, [r3]
   1866e:	68e3      	ldr	r3, [r4, #12]
   18670:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
   18674:	bd10      	pop	{r4, pc}
   18676:	bf00      	nop
   18678:	40005000 	.word	0x40005000

0001867c <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
   1867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
   1867e:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   18680:	4f11      	ldr	r7, [pc, #68]	; (186c8 <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
   18682:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   18684:	68fb      	ldr	r3, [r7, #12]
	sub_data->started = true;
   18686:	fb04 3400 	mla	r4, r4, r0, r3
   1868a:	2301      	movs	r3, #1
   1868c:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   1868e:	f04f 0320 	mov.w	r3, #32
   18692:	f3ef 8111 	mrs	r1, BASEPRI
   18696:	f383 8811 	msr	BASEPRI, r3
   1869a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1869e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   186a0:	b12b      	cbz	r3, 186ae <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   186a2:	6866      	ldr	r6, [r4, #4]
   186a4:	681a      	ldr	r2, [r3, #0]
   186a6:	42b3      	cmp	r3, r6
	list->head = node;
   186a8:	6022      	str	r2, [r4, #0]
	list->tail = node;
   186aa:	bf08      	it	eq
   186ac:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   186ae:	f381 8811 	msr	BASEPRI, r1
   186b2:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
   186b6:	b903      	cbnz	r3, 186ba <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
   186b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
   186ba:	4629      	mov	r1, r5
   186bc:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
   186c0:	4638      	mov	r0, r7
   186c2:	47b0      	blx	r6
   186c4:	e7e3      	b.n	1868e <clkstarted_handle.constprop.0+0x12>
   186c6:	bf00      	nop
   186c8:	200200cc 	.word	0x200200cc

000186cc <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   186cc:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   186ce:	4b10      	ldr	r3, [pc, #64]	; (18710 <nrf_power_clock_isr+0x44>)
   186d0:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   186d2:	b162      	cbz	r2, 186ee <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
   186d4:	4a0f      	ldr	r2, [pc, #60]	; (18714 <nrf_power_clock_isr+0x48>)
   186d6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   186da:	07d1      	lsls	r1, r2, #31
   186dc:	d507      	bpl.n	186ee <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   186de:	2200      	movs	r2, #0
   186e0:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   186e2:	4b0d      	ldr	r3, [pc, #52]	; (18718 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   186e4:	68db      	ldr	r3, [r3, #12]
   186e6:	7a58      	ldrb	r0, [r3, #9]
   186e8:	b908      	cbnz	r0, 186ee <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   186ea:	f7ff ffc7 	bl	1867c <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   186ee:	4b0b      	ldr	r3, [pc, #44]	; (1871c <nrf_power_clock_isr+0x50>)
   186f0:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   186f2:	b15a      	cbz	r2, 1870c <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
   186f4:	4a07      	ldr	r2, [pc, #28]	; (18714 <nrf_power_clock_isr+0x48>)
   186f6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   186fa:	0792      	lsls	r2, r2, #30
   186fc:	d506      	bpl.n	1870c <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   186fe:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   18700:	2001      	movs	r0, #1
   18702:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   18704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   18708:	f7ff bfb8 	b.w	1867c <clkstarted_handle.constprop.0>
}
   1870c:	bd08      	pop	{r3, pc}
   1870e:	bf00      	nop
   18710:	40005100 	.word	0x40005100
   18714:	40005000 	.word	0x40005000
   18718:	200200cc 	.word	0x200200cc
   1871c:	40005104 	.word	0x40005104

00018720 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
   18720:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   18722:	4b08      	ldr	r3, [pc, #32]	; (18744 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   18724:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   18728:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   1872c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   18730:	4290      	cmp	r0, r2
   18732:	d100      	bne.n	18736 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   18734:	4770      	bx	lr
   18736:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   1873a:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   1873c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   18740:	e7f2      	b.n	18728 <handle_next_tick_case+0x8>
   18742:	bf00      	nop
   18744:	40015000 	.word	0x40015000

00018748 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18748:	2200      	movs	r2, #0
   1874a:	4b06      	ldr	r3, [pc, #24]	; (18764 <rtc1_nrf_isr+0x1c>)
   1874c:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   1874e:	4a06      	ldr	r2, [pc, #24]	; (18768 <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
   18750:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
   18754:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   18756:	1ac0      	subs	r0, r0, r3
   18758:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   1875c:	4403      	add	r3, r0
   1875e:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   18760:	f001 bfc4 	b.w	1a6ec <z_clock_announce>
   18764:	40015140 	.word	0x40015140
   18768:	2002052c 	.word	0x2002052c

0001876c <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
   1876c:	b538      	push	{r3, r4, r5, lr}
   1876e:	4814      	ldr	r0, [pc, #80]	; (187c0 <z_clock_driver_init+0x54>)
   18770:	f001 fa1a 	bl	19ba8 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
   18774:	b300      	cbz	r0, 187b8 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   18776:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   18778:	2400      	movs	r4, #0
   1877a:	2101      	movs	r1, #1
   1877c:	681b      	ldr	r3, [r3, #0]
   1877e:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18780:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   18784:	4d0f      	ldr	r5, [pc, #60]	; (187c4 <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18786:	4b10      	ldr	r3, [pc, #64]	; (187c8 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   18788:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1878c:	601c      	str	r4, [r3, #0]
   1878e:	4b0f      	ldr	r3, [pc, #60]	; (187cc <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   18790:	2101      	movs	r1, #1
   18792:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   18796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1879a:	4622      	mov	r2, r4
   1879c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   187a0:	2015      	movs	r0, #21
   187a2:	f000 f8f3 	bl	1898c <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   187a6:	2015      	movs	r0, #21
   187a8:	f000 f8e0 	bl	1896c <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   187ac:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   187ae:	4620      	mov	r0, r4
   187b0:	4a07      	ldr	r2, [pc, #28]	; (187d0 <z_clock_driver_init+0x64>)
   187b2:	6013      	str	r3, [r2, #0]
   187b4:	602b      	str	r3, [r5, #0]
}
   187b6:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   187b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   187bc:	e7fb      	b.n	187b6 <z_clock_driver_init+0x4a>
   187be:	bf00      	nop
   187c0:	0002af44 	.word	0x0002af44
   187c4:	40015000 	.word	0x40015000
   187c8:	40015140 	.word	0x40015140
   187cc:	e000e100 	.word	0xe000e100
   187d0:	40015008 	.word	0x40015008

000187d4 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   187d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   187d6:	4b2c      	ldr	r3, [pc, #176]	; (18888 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   187d8:	4c2c      	ldr	r4, [pc, #176]	; (1888c <z_clock_set_timeout+0xb8>)
   187da:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
   187de:	4b2c      	ldr	r3, [pc, #176]	; (18890 <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   187e0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   187e4:	bf08      	it	eq
   187e6:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
   187e8:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   187ea:	1a52      	subs	r2, r2, r1
   187ec:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   187f0:	0212      	lsls	r2, r2, #8
   187f2:	d436      	bmi.n	18862 <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   187f4:	3801      	subs	r0, #1
   187f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   187fa:	42a0      	cmp	r0, r4
   187fc:	bfa8      	it	ge
   187fe:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   18800:	3301      	adds	r3, #1
   18802:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   18804:	42a0      	cmp	r0, r4
   18806:	bf94      	ite	ls
   18808:	180c      	addls	r4, r1, r0
   1880a:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   1880c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18810:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
   18812:	4b1d      	ldr	r3, [pc, #116]	; (18888 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18814:	4e1f      	ldr	r6, [pc, #124]	; (18894 <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
   18816:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
   1881a:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
   1881e:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   18822:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
   18826:	1a52      	subs	r2, r2, r1
   18828:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
   1882c:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1882e:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
   18830:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   18834:	461d      	mov	r5, r3
   18836:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
   1883a:	d103      	bne.n	18844 <z_clock_set_timeout+0x70>
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
   1883c:	200f      	movs	r0, #15
   1883e:	f009 ff87 	bl	22750 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   18842:	6037      	str	r7, [r6, #0]
   18844:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   18848:	4b13      	ldr	r3, [pc, #76]	; (18898 <z_clock_set_timeout+0xc4>)
   1884a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   1884e:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   18852:	1a23      	subs	r3, r4, r0
   18854:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
   18858:	2b01      	cmp	r3, #1
   1885a:	d104      	bne.n	18866 <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
   1885c:	f7ff ff60 	bl	18720 <handle_next_tick_case>
   18860:	e00b      	b.n	1887a <z_clock_set_timeout+0xa6>
		ticks = 0;
   18862:	2000      	movs	r0, #0
   18864:	e7cc      	b.n	18800 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   18866:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1886a:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
   1886e:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   18872:	1a24      	subs	r4, r4, r0
   18874:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
   18876:	0223      	lsls	r3, r4, #8
   18878:	d4f0      	bmi.n	1885c <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
   1887a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1887e:	4b02      	ldr	r3, [pc, #8]	; (18888 <z_clock_set_timeout+0xb4>)
   18880:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
   18884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18886:	bf00      	nop
   18888:	40015000 	.word	0x40015000
   1888c:	007fffff 	.word	0x007fffff
   18890:	2002052c 	.word	0x2002052c
   18894:	40015140 	.word	0x40015140
   18898:	e000e100 	.word	0xe000e100

0001889c <z_clock_elapsed>:
	__asm__ volatile(
   1889c:	f04f 0220 	mov.w	r2, #32
   188a0:	f3ef 8311 	mrs	r3, BASEPRI
   188a4:	f382 8811 	msr	BASEPRI, r2
   188a8:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   188ac:	4a06      	ldr	r2, [pc, #24]	; (188c8 <z_clock_elapsed+0x2c>)
   188ae:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   188b2:	4a06      	ldr	r2, [pc, #24]	; (188cc <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   188b4:	6812      	ldr	r2, [r2, #0]
   188b6:	1a80      	subs	r0, r0, r2
   188b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   188bc:	f383 8811 	msr	BASEPRI, r3
   188c0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   188c4:	4770      	bx	lr
   188c6:	bf00      	nop
   188c8:	40015000 	.word	0x40015000
   188cc:	2002052c 	.word	0x2002052c

000188d0 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   188d0:	4a09      	ldr	r2, [pc, #36]	; (188f8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   188d2:	490a      	ldr	r1, [pc, #40]	; (188fc <arch_swap+0x2c>)
	_current->arch.basepri = key;
   188d4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   188d6:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   188d8:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
   188da:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   188dc:	4908      	ldr	r1, [pc, #32]	; (18900 <arch_swap+0x30>)
   188de:	684b      	ldr	r3, [r1, #4]
   188e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   188e4:	604b      	str	r3, [r1, #4]
   188e6:	2300      	movs	r3, #0
   188e8:	f383 8811 	msr	BASEPRI, r3
   188ec:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   188f0:	6893      	ldr	r3, [r2, #8]
}
   188f2:	6f18      	ldr	r0, [r3, #112]	; 0x70
   188f4:	4770      	bx	lr
   188f6:	bf00      	nop
   188f8:	2002065c 	.word	0x2002065c
   188fc:	0002a570 	.word	0x0002a570
   18900:	e000ed00 	.word	0xe000ed00

00018904 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   18904:	490f      	ldr	r1, [pc, #60]	; (18944 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   18906:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   18908:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   1890c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1890e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   18912:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   18916:	2020      	movs	r0, #32
    msr BASEPRI, r0
   18918:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1891c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   18920:	4f09      	ldr	r7, [pc, #36]	; (18948 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   18922:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   18926:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   18928:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   1892a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   1892c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
   1892e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   18930:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   18932:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   18936:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   1893a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1893e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   18942:	4770      	bx	lr
    ldr r1, =_kernel
   18944:	2002065c 	.word	0x2002065c
    ldr v4, =_SCS_ICSR
   18948:	e000ed04 	.word	0xe000ed04

0001894c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   1894c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   18950:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   18952:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   18956:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1895a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1895c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   18960:	2902      	cmp	r1, #2
    beq _oops
   18962:	d0ff      	beq.n	18964 <_oops>

00018964 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   18964:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   18966:	f009 fc95 	bl	22294 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1896a:	bd01      	pop	{r0, pc}

0001896c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   1896c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   1896e:	2b00      	cmp	r3, #0
   18970:	db08      	blt.n	18984 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18972:	2201      	movs	r2, #1
   18974:	f000 001f 	and.w	r0, r0, #31
   18978:	fa02 f000 	lsl.w	r0, r2, r0
   1897c:	4a02      	ldr	r2, [pc, #8]	; (18988 <arch_irq_enable+0x1c>)
   1897e:	095b      	lsrs	r3, r3, #5
   18980:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   18984:	4770      	bx	lr
   18986:	bf00      	nop
   18988:	e000e100 	.word	0xe000e100

0001898c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1898c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1898e:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   18990:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18994:	bfac      	ite	ge
   18996:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1899a:	4b06      	ldrlt	r3, [pc, #24]	; (189b4 <z_arm_irq_priority_set+0x28>)
   1899c:	ea4f 1141 	mov.w	r1, r1, lsl #5
   189a0:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   189a2:	bfab      	itete	ge
   189a4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   189a8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   189ac:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   189b0:	5419      	strblt	r1, [r3, r0]
}
   189b2:	4770      	bx	lr
   189b4:	e000ed14 	.word	0xe000ed14

000189b8 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
   189b8:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
   189bc:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
   189be:	3a20      	subs	r2, #32
   189c0:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
   189c4:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   189c6:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
   189c8:	4907      	ldr	r1, [pc, #28]	; (189e8 <arch_new_thread+0x30>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
   189ca:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   189cc:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
   189ce:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
   189d2:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   189d4:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
   189d6:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   189d8:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
   189da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   189de:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
   189e0:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
   189e2:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   189e4:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   189e6:	4770      	bx	lr
   189e8:	0002209b 	.word	0x0002209b

000189ec <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   189ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   189ee:	461d      	mov	r5, r3
   189f0:	4606      	mov	r6, r0
   189f2:	460c      	mov	r4, r1
   189f4:	4617      	mov	r7, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   189f6:	2300      	movs	r3, #0
   189f8:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   189fc:	f000 f9ce 	bl	18d9c <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
   18a00:	4b08      	ldr	r3, [pc, #32]	; (18a24 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
   18a02:	19e2      	adds	r2, r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
   18a04:	f022 0407 	bic.w	r4, r2, #7
	_current = main_thread;
   18a08:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   18a0a:	4628      	mov	r0, r5
   18a0c:	f384 8809 	msr	PSP, r4
   18a10:	2100      	movs	r1, #0
   18a12:	b663      	cpsie	if
   18a14:	f381 8811 	msr	BASEPRI, r1
   18a18:	f3bf 8f6f 	isb	sy
   18a1c:	2200      	movs	r2, #0
   18a1e:	2300      	movs	r3, #0
   18a20:	f009 fb3b 	bl	2209a <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   18a24:	2002065c 	.word	0x2002065c

00018a28 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   18a28:	4901      	ldr	r1, [pc, #4]	; (18a30 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   18a2a:	2210      	movs	r2, #16
	str	r2, [r1]
   18a2c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   18a2e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   18a30:	e000ed10 	.word	0xe000ed10

00018a34 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   18a34:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   18a36:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   18a38:	f380 8811 	msr	BASEPRI, r0
	isb
   18a3c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   18a40:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   18a44:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   18a46:	b662      	cpsie	i
	isb
   18a48:	f3bf 8f6f 	isb	sy

	bx	lr
   18a4c:	4770      	bx	lr
   18a4e:	bf00      	nop

00018a50 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   18a50:	bf30      	wfi
    b z_SysNmiOnReset
   18a52:	f7ff bffd 	b.w	18a50 <z_SysNmiOnReset>
   18a56:	bf00      	nop

00018a58 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   18a58:	4a17      	ldr	r2, [pc, #92]	; (18ab8 <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   18a5a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   18a5c:	4b17      	ldr	r3, [pc, #92]	; (18abc <z_arm_prep_c+0x64>)
   18a5e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   18a62:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   18a64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18a68:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   18a6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   18a70:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   18a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   18a78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   18a7c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   18a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
   18a84:	4a0e      	ldr	r2, [pc, #56]	; (18ac0 <z_arm_prep_c+0x68>)
   18a86:	6853      	ldr	r3, [r2, #4]
   18a88:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   18a8c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   18a8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18a92:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   18a96:	2300      	movs	r3, #0
   18a98:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   18a9c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   18aa0:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   18aa4:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   18aa8:	f001 f8c2 	bl	19c30 <z_bss_zero>
	z_data_copy();
   18aac:	f001 f8ca 	bl	19c44 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   18ab0:	f000 f942 	bl	18d38 <z_arm_interrupt_init>
	z_cstart();
   18ab4:	f001 f908 	bl	19cc8 <z_cstart>
   18ab8:	0000c000 	.word	0x0000c000
   18abc:	e000ed00 	.word	0xe000ed00
   18ac0:	e000ef30 	.word	0xe000ef30

00018ac4 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   18ac4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   18ac6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   18ac8:	4a0b      	ldr	r2, [pc, #44]	; (18af8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   18aca:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   18acc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   18ace:	bf1e      	ittt	ne
	movne	r1, #0
   18ad0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   18ad2:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   18ad4:	f009 fd66 	blne	225a4 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   18ad8:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   18ada:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   18ade:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   18ae2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   18ae6:	4905      	ldr	r1, [pc, #20]	; (18afc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   18ae8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   18aea:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   18aec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   18aee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   18af2:	4903      	ldr	r1, [pc, #12]	; (18b00 <_isr_wrapper+0x3c>)
	bx r1
   18af4:	4708      	bx	r1
   18af6:	0000      	.short	0x0000
	ldr r2, =_kernel
   18af8:	2002065c 	.word	0x2002065c
	ldr r1, =_sw_isr_table
   18afc:	00024c28 	.word	0x00024c28
	ldr r1, =z_arm_int_exit
   18b00:	00018cf9 	.word	0x00018cf9

00018b04 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   18b04:	f009 fb7e 	bl	22204 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   18b08:	2020      	movs	r0, #32
    msr BASEPRI, r0
   18b0a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   18b0e:	4808      	ldr	r0, [pc, #32]	; (18b30 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   18b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   18b14:	1840      	adds	r0, r0, r1
    msr PSP, r0
   18b16:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   18b1a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   18b1e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   18b20:	4308      	orrs	r0, r1
    msr CONTROL, r0
   18b22:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   18b26:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   18b2a:	f7ff ff95 	bl	18a58 <z_arm_prep_c>
   18b2e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   18b30:	2002a418 	.word	0x2002a418

00018b34 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   18b34:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   18b38:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   18b3c:	4672      	mov	r2, lr

	push {r0, lr}
   18b3e:	b501      	push	{r0, lr}

	bl z_arm_fault
   18b40:	f000 f84e 	bl	18be0 <z_arm_fault>

	pop {r0, pc}
   18b44:	bd01      	pop	{r0, pc}
   18b46:	bf00      	nop

00018b48 <mem_manage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   18b48:	4b0c      	ldr	r3, [pc, #48]	; (18b7c <mem_manage_fault.isra.0+0x34>)
   18b4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   18b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   18b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18b50:	0792      	lsls	r2, r2, #30
   18b52:	d508      	bpl.n	18b66 <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
   18b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   18b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18b58:	0612      	lsls	r2, r2, #24
   18b5a:	d504      	bpl.n	18b66 <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
   18b5c:	b118      	cbz	r0, 18b66 <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   18b5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   18b64:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
   18b66:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   18b68:	4b04      	ldr	r3, [pc, #16]	; (18b7c <mem_manage_fault.isra.0+0x34>)
   18b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   18b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   18b6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   18b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18b72:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   18b76:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   18b78:	7008      	strb	r0, [r1, #0]

	return reason;
}
   18b7a:	4770      	bx	lr
   18b7c:	e000ed00 	.word	0xe000ed00

00018b80 <bus_fault.isra.0>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   18b80:	4b0d      	ldr	r3, [pc, #52]	; (18bb8 <bus_fault.isra.0+0x38>)
   18b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   18b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   18b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18b88:	0592      	lsls	r2, r2, #22
   18b8a:	d508      	bpl.n	18b9e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   18b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   18b8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18b90:	0412      	lsls	r2, r2, #16
   18b92:	d504      	bpl.n	18b9e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
   18b94:	b118      	cbz	r0, 18b9e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   18b96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18b98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   18b9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
   18b9e:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   18ba0:	4b05      	ldr	r3, [pc, #20]	; (18bb8 <bus_fault.isra.0+0x38>)
   18ba2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   18ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18ba6:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   18ba8:	bf58      	it	pl
   18baa:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   18bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18bae:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
   18bb2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   18bb4:	7008      	strb	r0, [r1, #0]

	return reason;
}
   18bb6:	4770      	bx	lr
   18bb8:	e000ed00 	.word	0xe000ed00

00018bbc <usage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   18bbc:	4b07      	ldr	r3, [pc, #28]	; (18bdc <usage_fault.isra.0+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
   18bbe:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   18bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   18bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   18bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   18bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   18bc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   18bca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   18bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   18bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18bd0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
   18bd4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
   18bd8:	629a      	str	r2, [r3, #40]	; 0x28
}
   18bda:	4770      	bx	lr
   18bdc:	e000ed00 	.word	0xe000ed00

00018be0 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   18be0:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   18be2:	4b3d      	ldr	r3, [pc, #244]	; (18cd8 <z_arm_fault+0xf8>)
   18be4:	2500      	movs	r5, #0
   18be6:	685b      	ldr	r3, [r3, #4]
{
   18be8:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   18bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
   18bee:	f385 8811 	msr	BASEPRI, r5
   18bf2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   18bf6:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
   18bfa:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   18bfe:	d119      	bne.n	18c34 <z_arm_fault+0x54>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   18c00:	07d6      	lsls	r6, r2, #31
   18c02:	d417      	bmi.n	18c34 <z_arm_fault+0x54>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   18c04:	0655      	lsls	r5, r2, #25
   18c06:	d404      	bmi.n	18c12 <z_arm_fault+0x32>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   18c08:	0714      	lsls	r4, r2, #28
   18c0a:	d405      	bmi.n	18c18 <z_arm_fault+0x38>
			ptr_esf = (z_arch_esf_t *)msp;
   18c0c:	4604      	mov	r4, r0
			*nested_exc = true;
   18c0e:	2501      	movs	r5, #1
   18c10:	e004      	b.n	18c1c <z_arm_fault+0x3c>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   18c12:	f012 0504 	ands.w	r5, r2, #4
   18c16:	d00b      	beq.n	18c30 <z_arm_fault+0x50>
			ptr_esf = (z_arch_esf_t *)psp;
   18c18:	460c      	mov	r4, r1
	*nested_exc = false;
   18c1a:	2500      	movs	r5, #0
	*recoverable = false;
   18c1c:	2200      	movs	r2, #0
   18c1e:	3b03      	subs	r3, #3
   18c20:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
   18c24:	2b03      	cmp	r3, #3
   18c26:	d84f      	bhi.n	18cc8 <z_arm_fault+0xe8>
   18c28:	e8df f003 	tbb	[pc, r3]
   18c2c:	434a4606 	.word	0x434a4606
			ptr_esf = (z_arch_esf_t *)msp;
   18c30:	4604      	mov	r4, r0
	if (!alternative_state_exc) {
   18c32:	e7f3      	b.n	18c1c <z_arm_fault+0x3c>
		return NULL;
   18c34:	462c      	mov	r4, r5
   18c36:	e7f1      	b.n	18c1c <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   18c38:	4b27      	ldr	r3, [pc, #156]	; (18cd8 <z_arm_fault+0xf8>)
   18c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   18c3c:	0792      	lsls	r2, r2, #30
   18c3e:	d443      	bmi.n	18cc8 <z_arm_fault+0xe8>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   18c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   18c42:	f013 4380 	ands.w	r3, r3, #1073741824	; 0x40000000
   18c46:	d008      	beq.n	18c5a <z_arm_fault+0x7a>
		if (SCB_MMFSR != 0) {
   18c48:	4b24      	ldr	r3, [pc, #144]	; (18cdc <z_arm_fault+0xfc>)
   18c4a:	781b      	ldrb	r3, [r3, #0]
   18c4c:	b31b      	cbz	r3, 18c96 <z_arm_fault+0xb6>
			reason = mem_manage_fault(esf, 1, recoverable);
   18c4e:	2001      	movs	r0, #1
   18c50:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   18c54:	f7ff ff78 	bl	18b48 <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
   18c58:	4603      	mov	r3, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   18c5a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   18c5e:	b9c2      	cbnz	r2, 18c92 <z_arm_fault+0xb2>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   18c60:	ae02      	add	r6, sp, #8
   18c62:	f104 0720 	add.w	r7, r4, #32
   18c66:	4632      	mov	r2, r6
   18c68:	6820      	ldr	r0, [r4, #0]
   18c6a:	6861      	ldr	r1, [r4, #4]
   18c6c:	3408      	adds	r4, #8
   18c6e:	c203      	stmia	r2!, {r0, r1}
   18c70:	42bc      	cmp	r4, r7
   18c72:	4616      	mov	r6, r2
   18c74:	d1f7      	bne.n	18c66 <z_arm_fault+0x86>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   18c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18c78:	b345      	cbz	r5, 18ccc <z_arm_fault+0xec>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   18c7a:	f3c2 0108 	ubfx	r1, r2, #0, #9
   18c7e:	b921      	cbnz	r1, 18c8a <z_arm_fault+0xaa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   18c80:	ea6f 2252 	mvn.w	r2, r2, lsr #9
   18c84:	ea6f 2242 	mvn.w	r2, r2, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   18c88:	9209      	str	r2, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   18c8a:	4618      	mov	r0, r3
   18c8c:	a902      	add	r1, sp, #8
   18c8e:	f009 faff 	bl	22290 <z_arm_fatal_error>
}
   18c92:	b00b      	add	sp, #44	; 0x2c
   18c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
   18c96:	4b12      	ldr	r3, [pc, #72]	; (18ce0 <z_arm_fault+0x100>)
   18c98:	781b      	ldrb	r3, [r3, #0]
   18c9a:	b12b      	cbz	r3, 18ca8 <z_arm_fault+0xc8>
			reason = bus_fault(esf, 1, recoverable);
   18c9c:	2001      	movs	r0, #1
   18c9e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   18ca2:	f7ff ff6d 	bl	18b80 <bus_fault.isra.0>
   18ca6:	e7d7      	b.n	18c58 <z_arm_fault+0x78>
		} else if (SCB_UFSR != 0) {
   18ca8:	4b0e      	ldr	r3, [pc, #56]	; (18ce4 <z_arm_fault+0x104>)
   18caa:	8818      	ldrh	r0, [r3, #0]
   18cac:	b283      	uxth	r3, r0
   18cae:	2b00      	cmp	r3, #0
   18cb0:	d0d3      	beq.n	18c5a <z_arm_fault+0x7a>
		reason = usage_fault(esf);
   18cb2:	f7ff ff83 	bl	18bbc <usage_fault.isra.0>
   18cb6:	e7cf      	b.n	18c58 <z_arm_fault+0x78>
		reason = mem_manage_fault(esf, 0, recoverable);
   18cb8:	2000      	movs	r0, #0
   18cba:	f10d 0107 	add.w	r1, sp, #7
   18cbe:	e7c9      	b.n	18c54 <z_arm_fault+0x74>
		reason = bus_fault(esf, 0, recoverable);
   18cc0:	2000      	movs	r0, #0
   18cc2:	f10d 0107 	add.w	r1, sp, #7
   18cc6:	e7ec      	b.n	18ca2 <z_arm_fault+0xc2>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   18cc8:	2300      	movs	r3, #0
   18cca:	e7c6      	b.n	18c5a <z_arm_fault+0x7a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   18ccc:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
   18cd0:	f022 0201 	bic.w	r2, r2, #1
   18cd4:	e7d8      	b.n	18c88 <z_arm_fault+0xa8>
   18cd6:	bf00      	nop
   18cd8:	e000ed00 	.word	0xe000ed00
   18cdc:	e000ed28 	.word	0xe000ed28
   18ce0:	e000ed29 	.word	0xe000ed29
   18ce4:	e000ed2a 	.word	0xe000ed2a

00018ce8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   18ce8:	4a02      	ldr	r2, [pc, #8]	; (18cf4 <z_arm_fault_init+0xc>)
   18cea:	6953      	ldr	r3, [r2, #20]
   18cec:	f043 0310 	orr.w	r3, r3, #16
   18cf0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   18cf2:	4770      	bx	lr
   18cf4:	e000ed00 	.word	0xe000ed00

00018cf8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   18cf8:	4b04      	ldr	r3, [pc, #16]	; (18d0c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   18cfa:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   18cfc:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   18cfe:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   18d00:	d003      	beq.n	18d0a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   18d02:	4903      	ldr	r1, [pc, #12]	; (18d10 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   18d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   18d08:	600a      	str	r2, [r1, #0]

00018d0a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   18d0a:	4770      	bx	lr
	ldr r3, =_kernel
   18d0c:	2002065c 	.word	0x2002065c
	ldr r1, =_SCS_ICSR
   18d10:	e000ed04 	.word	0xe000ed04

00018d14 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   18d14:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   18d18:	4905      	ldr	r1, [pc, #20]	; (18d30 <sys_arch_reboot+0x1c>)
   18d1a:	4b06      	ldr	r3, [pc, #24]	; (18d34 <sys_arch_reboot+0x20>)
   18d1c:	68ca      	ldr	r2, [r1, #12]
   18d1e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   18d22:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   18d24:	60cb      	str	r3, [r1, #12]
   18d26:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   18d2a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   18d2c:	e7fd      	b.n	18d2a <sys_arch_reboot+0x16>
   18d2e:	bf00      	nop
   18d30:	e000ed00 	.word	0xe000ed00
   18d34:	05fa0004 	.word	0x05fa0004

00018d38 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   18d38:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18d3a:	2120      	movs	r1, #32
   18d3c:	4803      	ldr	r0, [pc, #12]	; (18d4c <z_arm_interrupt_init+0x14>)
   18d3e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   18d40:	3301      	adds	r3, #1
   18d42:	2b41      	cmp	r3, #65	; 0x41
   18d44:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   18d48:	d1f9      	bne.n	18d3e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   18d4a:	4770      	bx	lr
   18d4c:	e000e100 	.word	0xe000e100

00018d50 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   18d50:	b538      	push	{r3, r4, r5, lr}
   18d52:	4604      	mov	r4, r0
	__asm__ volatile(
   18d54:	f04f 0320 	mov.w	r3, #32
   18d58:	f3ef 8511 	mrs	r5, BASEPRI
   18d5c:	f383 8811 	msr	BASEPRI, r3
   18d60:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   18d64:	f001 f9de 	bl	1a124 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   18d68:	4b0a      	ldr	r3, [pc, #40]	; (18d94 <z_impl_k_thread_abort+0x44>)
   18d6a:	689b      	ldr	r3, [r3, #8]
   18d6c:	42a3      	cmp	r3, r4
   18d6e:	d10b      	bne.n	18d88 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   18d70:	4b09      	ldr	r3, [pc, #36]	; (18d98 <z_impl_k_thread_abort+0x48>)
   18d72:	685a      	ldr	r2, [r3, #4]
   18d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
   18d78:	b912      	cbnz	r2, 18d80 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   18d7a:	4628      	mov	r0, r5
   18d7c:	f7ff fda8 	bl	188d0 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   18d80:	685a      	ldr	r2, [r3, #4]
   18d82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   18d86:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   18d88:	4628      	mov	r0, r5
}
   18d8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   18d8e:	f009 bc16 	b.w	225be <z_reschedule_irqlock>
   18d92:	bf00      	nop
   18d94:	2002065c 	.word	0x2002065c
   18d98:	e000ed00 	.word	0xe000ed00

00018d9c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   18d9c:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   18d9e:	4b0e      	ldr	r3, [pc, #56]	; (18dd8 <z_arm_configure_static_mpu_regions+0x3c>)
{
   18da0:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   18da2:	9302      	str	r3, [sp, #8]
   18da4:	4b0d      	ldr	r3, [pc, #52]	; (18ddc <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   18da6:	4c0e      	ldr	r4, [pc, #56]	; (18de0 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   18da8:	9303      	str	r3, [sp, #12]
   18daa:	4b0e      	ldr	r3, [pc, #56]	; (18de4 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   18dac:	4a0e      	ldr	r2, [pc, #56]	; (18de8 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   18dae:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   18db0:	ab02      	add	r3, sp, #8
   18db2:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   18db4:	a801      	add	r0, sp, #4
   18db6:	4623      	mov	r3, r4
   18db8:	2101      	movs	r1, #1
   18dba:	f000 f907 	bl	18fcc <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   18dbe:	2300      	movs	r3, #0
   18dc0:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   18dc2:	4b0a      	ldr	r3, [pc, #40]	; (18dec <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   18dc4:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   18dc6:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   18dc8:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   18dca:	9305      	str	r3, [sp, #20]
   18dcc:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   18dce:	f000 f907 	bl	18fe0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   18dd2:	b008      	add	sp, #32
   18dd4:	bd10      	pop	{r4, pc}
   18dd6:	bf00      	nop
   18dd8:	20020000 	.word	0x20020000
   18ddc:	00000000 	.word	0x00000000
   18de0:	20040000 	.word	0x20040000
   18de4:	00010006 	.word	0x00010006
   18de8:	20020000 	.word	0x20020000
   18dec:	20020168 	.word	0x20020168

00018df0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   18df0:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   18df2:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   18df4:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   18df6:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   18dfa:	f004 031f 	and.w	r3, r4, #31
   18dfe:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   18e00:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   18e02:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   18e04:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   18e08:	4904      	ldr	r1, [pc, #16]	; (18e1c <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   18e0a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   18e0e:	f043 0301 	orr.w	r3, r3, #1
   18e12:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   18e14:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   18e16:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   18e18:	bd10      	pop	{r4, pc}
   18e1a:	bf00      	nop
   18e1c:	e000ed90 	.word	0xe000ed90

00018e20 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   18e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e24:	4607      	mov	r7, r0
   18e26:	4688      	mov	r8, r1
   18e28:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   18e2a:	2600      	movs	r6, #0
	MPU->RNR = index;
   18e2c:	4d4a      	ldr	r5, [pc, #296]	; (18f58 <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   18e2e:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   18e30:	4546      	cmp	r6, r8
   18e32:	da0b      	bge.n	18e4c <mpu_configure_regions_and_partition.constprop.0+0x2c>
		if (regions[i]->size == 0U) {
   18e34:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   18e38:	f8d3 9004 	ldr.w	r9, [r3, #4]
   18e3c:	f1b9 0f00 	cmp.w	r9, #0
   18e40:	d03a      	beq.n	18eb8 <mpu_configure_regions_and_partition.constprop.0+0x98>
		&&
   18e42:	f1b9 0f1f 	cmp.w	r9, #31
   18e46:	d805      	bhi.n	18e54 <mpu_configure_regions_and_partition.constprop.0+0x34>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   18e48:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   18e4c:	4620      	mov	r0, r4
   18e4e:	b005      	add	sp, #20
   18e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
   18e54:	f019 0f1f 	tst.w	r9, #31
   18e58:	d1f6      	bne.n	18e48 <mpu_configure_regions_and_partition.constprop.0+0x28>
		((part->start &
   18e5a:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   18e5e:	f01a 0f1f 	tst.w	sl, #31
   18e62:	d1f1      	bne.n	18e48 <mpu_configure_regions_and_partition.constprop.0+0x28>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   18e64:	4650      	mov	r0, sl
   18e66:	f009 fa45 	bl	222f4 <arm_cmse_mpu_region_get>
   18e6a:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   18e6c:	eb09 000a 	add.w	r0, r9, sl
   18e70:	3801      	subs	r0, #1
   18e72:	f009 fa3f 	bl	222f4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   18e76:	4583      	cmp	fp, r0
   18e78:	d1e6      	bne.n	18e48 <mpu_configure_regions_and_partition.constprop.0+0x28>
		if ((u_reg_index == -EINVAL) ||
   18e7a:	f11b 0f16 	cmn.w	fp, #22
   18e7e:	d0e3      	beq.n	18e48 <mpu_configure_regions_and_partition.constprop.0+0x28>
			(u_reg_index > (reg_index - 1))) {
   18e80:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   18e82:	455b      	cmp	r3, fp
   18e84:	dbe0      	blt.n	18e48 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
   18e86:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   18e8a:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   18e8c:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   18e90:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   18e92:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   18e96:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   18e9a:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   18e9e:	e9d1 3200 	ldrd	r3, r2, [r1]
   18ea2:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   18ea4:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   18ea6:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   18eaa:	d118      	bne.n	18ede <mpu_configure_regions_and_partition.constprop.0+0xbe>
   18eac:	45ca      	cmp	sl, r9
   18eae:	d105      	bne.n	18ebc <mpu_configure_regions_and_partition.constprop.0+0x9c>
			mpu_configure_region(u_reg_index, regions[i]);
   18eb0:	fa5f f08b 	uxtb.w	r0, fp
   18eb4:	f009 f9fe 	bl	222b4 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   18eb8:	3601      	adds	r6, #1
   18eba:	e7b9      	b.n	18e30 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   18ebc:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   18ec0:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   18ec2:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   18ec6:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   18eca:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   18ecc:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   18ece:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   18ed0:	f009 f9f0 	bl	222b4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   18ed4:	f110 0f16 	cmn.w	r0, #22
   18ed8:	d0b6      	beq.n	18e48 <mpu_configure_regions_and_partition.constprop.0+0x28>
			reg_index++;
   18eda:	1c44      	adds	r4, r0, #1
   18edc:	e7ec      	b.n	18eb8 <mpu_configure_regions_and_partition.constprop.0+0x98>
	MPU->RNR = index;
   18ede:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   18ee2:	692a      	ldr	r2, [r5, #16]
   18ee4:	3b01      	subs	r3, #1
   18ee6:	f023 031f 	bic.w	r3, r3, #31
   18eea:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   18eee:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   18ef0:	45ca      	cmp	sl, r9
   18ef2:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   18ef4:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   18ef6:	d0eb      	beq.n	18ed0 <mpu_configure_regions_and_partition.constprop.0+0xb0>
				mpu_configure_region(reg_index, regions[i]);
   18ef8:	f009 f9dc 	bl	222b4 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   18efc:	f110 0f16 	cmn.w	r0, #22
   18f00:	d0a2      	beq.n	18e48 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
   18f02:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   18f06:	68ea      	ldr	r2, [r5, #12]
   18f08:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   18f0c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   18f10:	f362 0304 	bfi	r3, r2, #0, #5
   18f14:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   18f18:	692b      	ldr	r3, [r5, #16]
   18f1a:	f89d 2008 	ldrb.w	r2, [sp, #8]
   18f1e:	085b      	lsrs	r3, r3, #1
   18f20:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   18f24:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   18f28:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   18f2c:	e9d3 1300 	ldrd	r1, r3, [r3]
   18f30:	440b      	add	r3, r1
   18f32:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   18f34:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   18f38:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   18f3a:	4453      	add	r3, sl
   18f3c:	eba3 0309 	sub.w	r3, r3, r9
   18f40:	b2c0      	uxtb	r0, r0
   18f42:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
   18f46:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   18f48:	9303      	str	r3, [sp, #12]
   18f4a:	f63f af7d 	bhi.w	18e48 <mpu_configure_regions_and_partition.constprop.0+0x28>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
   18f4e:	4669      	mov	r1, sp
   18f50:	f7ff ff4e 	bl	18df0 <region_init>
   18f54:	e7c1      	b.n	18eda <mpu_configure_regions_and_partition.constprop.0+0xba>
   18f56:	bf00      	nop
   18f58:	e000ed90 	.word	0xe000ed90

00018f5c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   18f5c:	2205      	movs	r2, #5
   18f5e:	4b03      	ldr	r3, [pc, #12]	; (18f6c <arm_core_mpu_enable+0x10>)
   18f60:	605a      	str	r2, [r3, #4]
   18f62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   18f66:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   18f6a:	4770      	bx	lr
   18f6c:	e000ed90 	.word	0xe000ed90

00018f70 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   18f70:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   18f74:	2200      	movs	r2, #0
   18f76:	4b01      	ldr	r3, [pc, #4]	; (18f7c <arm_core_mpu_disable+0xc>)
   18f78:	605a      	str	r2, [r3, #4]
}
   18f7a:	4770      	bx	lr
   18f7c:	e000ed90 	.word	0xe000ed90

00018f80 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   18f80:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   18f82:	4c0e      	ldr	r4, [pc, #56]	; (18fbc <arm_mpu_init+0x3c>)
   18f84:	6825      	ldr	r5, [r4, #0]
   18f86:	2d10      	cmp	r5, #16
   18f88:	d814      	bhi.n	18fb4 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   18f8a:	f7ff fff1 	bl	18f70 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   18f8e:	2000      	movs	r0, #0
	MPU->MAIR0 =
   18f90:	4b0b      	ldr	r3, [pc, #44]	; (18fc0 <arm_mpu_init+0x40>)
   18f92:	4a0c      	ldr	r2, [pc, #48]	; (18fc4 <arm_mpu_init+0x44>)
   18f94:	631a      	str	r2, [r3, #48]	; 0x30
   18f96:	4285      	cmp	r5, r0
   18f98:	d105      	bne.n	18fa6 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   18f9a:	4b0b      	ldr	r3, [pc, #44]	; (18fc8 <arm_mpu_init+0x48>)
   18f9c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   18f9e:	f7ff ffdd 	bl	18f5c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   18fa2:	2000      	movs	r0, #0
}
   18fa4:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   18fa6:	6861      	ldr	r1, [r4, #4]
   18fa8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   18fac:	f7ff ff20 	bl	18df0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   18fb0:	3001      	adds	r0, #1
   18fb2:	e7f0      	b.n	18f96 <arm_mpu_init+0x16>
		return -1;
   18fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18fb8:	e7f4      	b.n	18fa4 <arm_mpu_init+0x24>
   18fba:	bf00      	nop
   18fbc:	0002a4a8 	.word	0x0002a4a8
   18fc0:	e000ed90 	.word	0xe000ed90
   18fc4:	0044ffaa 	.word	0x0044ffaa
   18fc8:	200282cc 	.word	0x200282cc

00018fcc <arm_core_mpu_configure_static_mpu_regions>:
{
   18fcc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   18fce:	4c03      	ldr	r4, [pc, #12]	; (18fdc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   18fd0:	7822      	ldrb	r2, [r4, #0]
   18fd2:	f7ff ff25 	bl	18e20 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   18fd6:	7020      	strb	r0, [r4, #0]
}
   18fd8:	bd10      	pop	{r4, pc}
   18fda:	bf00      	nop
   18fdc:	200282cc 	.word	0x200282cc

00018fe0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   18fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fe4:	4d26      	ldr	r5, [pc, #152]	; (19080 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   18fe6:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   18fe8:	4606      	mov	r6, r0
   18fea:	f04f 0800 	mov.w	r8, #0
   18fee:	46ab      	mov	fp, r5
	MPU->RNR = index;
   18ff0:	4f24      	ldr	r7, [pc, #144]	; (19084 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   18ff2:	45d0      	cmp	r8, sl
   18ff4:	da1b      	bge.n	1902e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   18ff6:	f8d6 9004 	ldr.w	r9, [r6, #4]
   18ffa:	f1b9 0f00 	cmp.w	r9, #0
   18ffe:	d039      	beq.n	19074 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   19000:	6831      	ldr	r1, [r6, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   19002:	4608      	mov	r0, r1
   19004:	9101      	str	r1, [sp, #4]
   19006:	f009 f975 	bl	222f4 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1900a:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   1900c:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   1900e:	eb09 0001 	add.w	r0, r9, r1
   19012:	3801      	subs	r0, #1
   19014:	f009 f96e 	bl	222f4 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   19018:	4284      	cmp	r4, r0
   1901a:	f04f 0214 	mov.w	r2, #20
   1901e:	4b1a      	ldr	r3, [pc, #104]	; (19088 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   19020:	d008      	beq.n	19034 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   19022:	f06f 0315 	mvn.w	r3, #21
   19026:	fb02 f808 	mul.w	r8, r2, r8
   1902a:	f84b 3008 	str.w	r3, [fp, r8]
}
   1902e:	b003      	add	sp, #12
   19030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   19034:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   19038:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1903a:	d0f8      	beq.n	1902e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1903c:	7819      	ldrb	r1, [r3, #0]
   1903e:	42a1      	cmp	r1, r4
   19040:	ddf5      	ble.n	1902e <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   19042:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   19046:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   19048:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   1904a:	68fc      	ldr	r4, [r7, #12]
   1904c:	f100 0108 	add.w	r1, r0, #8
   19050:	7b00      	ldrb	r0, [r0, #12]
   19052:	f364 0004 	bfi	r0, r4, #0, #5
   19056:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   19058:	6938      	ldr	r0, [r7, #16]
   1905a:	790c      	ldrb	r4, [r1, #4]
   1905c:	0840      	lsrs	r0, r0, #1
   1905e:	f360 1447 	bfi	r4, r0, #5, #3
   19062:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   19064:	68f9      	ldr	r1, [r7, #12]
   19066:	f021 011f 	bic.w	r1, r1, #31
   1906a:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1906c:	6939      	ldr	r1, [r7, #16]
   1906e:	f021 011f 	bic.w	r1, r1, #31
   19072:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   19074:	f108 0801 	add.w	r8, r8, #1
   19078:	3514      	adds	r5, #20
   1907a:	360c      	adds	r6, #12
   1907c:	e7b9      	b.n	18ff2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1907e:	bf00      	nop
   19080:	20020530 	.word	0x20020530
   19084:	e000ed90 	.word	0xe000ed90
   19088:	200282cc 	.word	0x200282cc

0001908c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1908c:	4b01      	ldr	r3, [pc, #4]	; (19094 <__stdout_hook_install+0x8>)
   1908e:	6018      	str	r0, [r3, #0]
}
   19090:	4770      	bx	lr
   19092:	bf00      	nop
   19094:	2002001c 	.word	0x2002001c

00019098 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   19098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1909a:	4606      	mov	r6, r0
   1909c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1909e:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   190a0:	4f06      	ldr	r7, [pc, #24]	; (190bc <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   190a2:	42ac      	cmp	r4, r5
   190a4:	da08      	bge.n	190b8 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   190a6:	683b      	ldr	r3, [r7, #0]
   190a8:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   190aa:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   190ac:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   190ae:	f104 0401 	add.w	r4, r4, #1
   190b2:	d001      	beq.n	190b8 <z_impl_zephyr_read_stdin+0x20>
   190b4:	280d      	cmp	r0, #13
   190b6:	d1f4      	bne.n	190a2 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   190b8:	4620      	mov	r0, r4
   190ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   190bc:	20020018 	.word	0x20020018

000190c0 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   190c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   190c2:	460d      	mov	r5, r1
   190c4:	4f09      	ldr	r7, [pc, #36]	; (190ec <z_impl_zephyr_write_stdout+0x2c>)
   190c6:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   190c8:	f1c0 0401 	rsb	r4, r0, #1
   190cc:	19a3      	adds	r3, r4, r6
   190ce:	429d      	cmp	r5, r3
   190d0:	dc01      	bgt.n	190d6 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   190d2:	4628      	mov	r0, r5
   190d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   190d6:	7873      	ldrb	r3, [r6, #1]
   190d8:	2b0a      	cmp	r3, #10
   190da:	d102      	bne.n	190e2 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   190dc:	200d      	movs	r0, #13
   190de:	683b      	ldr	r3, [r7, #0]
   190e0:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   190e2:	683b      	ldr	r3, [r7, #0]
   190e4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   190e8:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   190ea:	e7ef      	b.n	190cc <z_impl_zephyr_write_stdout+0xc>
   190ec:	2002001c 	.word	0x2002001c

000190f0 <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   190f0:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   190f2:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   190f4:	4801      	ldr	r0, [pc, #4]	; (190fc <_exit+0xc>)
   190f6:	f7ff ffe3 	bl	190c0 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   190fa:	e7fe      	b.n	190fa <_exit+0xa>
   190fc:	0002af54 	.word	0x0002af54

00019100 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   19100:	b510      	push	{r4, lr}
   19102:	4604      	mov	r4, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   19104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1910c:	480a      	ldr	r0, [pc, #40]	; (19138 <_sbrk+0x38>)
   1910e:	f008 ffb5 	bl	2207c <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   19112:	490a      	ldr	r1, [pc, #40]	; (1913c <_sbrk+0x3c>)
   19114:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   19116:	18e0      	adds	r0, r4, r3
   19118:	4c09      	ldr	r4, [pc, #36]	; (19140 <_sbrk+0x40>)
   1911a:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   1911e:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   19122:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   19124:	bf2e      	itee	cs
   19126:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   1912a:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   1912c:	6008      	strcc	r0, [r1, #0]
	}

	sys_sem_give(&heap_sem);
   1912e:	4802      	ldr	r0, [pc, #8]	; (19138 <_sbrk+0x38>)
   19130:	f008 ff9f 	bl	22072 <sys_sem_give>

	return ret;
}
   19134:	4620      	mov	r0, r4
   19136:	bd10      	pop	{r4, pc}
   19138:	20020144 	.word	0x20020144
   1913c:	20020544 	.word	0x20020544
   19140:	2002ac18 	.word	0x2002ac18

00019144 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   19144:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   19146:	4b09      	ldr	r3, [pc, #36]	; (1916c <gpio_nrfx_init+0x28>)
   19148:	781a      	ldrb	r2, [r3, #0]
   1914a:	b96a      	cbnz	r2, 19168 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1914c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1914e:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   19150:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   19152:	2105      	movs	r1, #5
   19154:	f7ff fc1a 	bl	1898c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   19158:	2031      	movs	r0, #49	; 0x31
   1915a:	f7ff fc07 	bl	1896c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1915e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   19162:	4b03      	ldr	r3, [pc, #12]	; (19170 <gpio_nrfx_init+0x2c>)
   19164:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   19168:	2000      	movs	r0, #0
   1916a:	bd08      	pop	{r3, pc}
   1916c:	200282cd 	.word	0x200282cd
   19170:	40031000 	.word	0x40031000

00019174 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   19174:	4b29      	ldr	r3, [pc, #164]	; (1921c <gpio_nrfx_config+0xa8>)
{
   19176:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   19178:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1917a:	4829      	ldr	r0, [pc, #164]	; (19220 <gpio_nrfx_config+0xac>)
   1917c:	4013      	ands	r3, r2
   1917e:	4283      	cmp	r3, r0
   19180:	d03d      	beq.n	191fe <gpio_nrfx_config+0x8a>
   19182:	d80d      	bhi.n	191a0 <gpio_nrfx_config+0x2c>
   19184:	2b06      	cmp	r3, #6
   19186:	d015      	beq.n	191b4 <gpio_nrfx_config+0x40>
   19188:	d805      	bhi.n	19196 <gpio_nrfx_config+0x22>
   1918a:	b19b      	cbz	r3, 191b4 <gpio_nrfx_config+0x40>
   1918c:	2b02      	cmp	r3, #2
   1918e:	d038      	beq.n	19202 <gpio_nrfx_config+0x8e>
   19190:	f06f 0015 	mvn.w	r0, #21
   19194:	e032      	b.n	191fc <gpio_nrfx_config+0x88>
   19196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1919a:	d1f9      	bne.n	19190 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1919c:	2301      	movs	r3, #1
   1919e:	e009      	b.n	191b4 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   191a0:	4820      	ldr	r0, [pc, #128]	; (19224 <gpio_nrfx_config+0xb0>)
   191a2:	4283      	cmp	r3, r0
   191a4:	d02f      	beq.n	19206 <gpio_nrfx_config+0x92>
   191a6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   191aa:	d02e      	beq.n	1920a <gpio_nrfx_config+0x96>
   191ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   191b0:	d1ee      	bne.n	19190 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   191b2:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   191b4:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   191b6:	bf4c      	ite	mi
   191b8:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   191ba:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   191be:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   191c2:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   191c4:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   191c8:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   191cc:	d506      	bpl.n	191dc <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   191ce:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   191d2:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   191d4:	d01b      	beq.n	1920e <gpio_nrfx_config+0x9a>
			nrf_gpio_port_out_set(reg, BIT(pin));
   191d6:	2201      	movs	r2, #1
   191d8:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   191da:	60ba      	str	r2, [r7, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   191dc:	7a32      	ldrb	r2, [r6, #8]
   191de:	f001 011f 	and.w	r1, r1, #31
   191e2:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   191e6:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   191ea:	2000      	movs	r0, #0
   191ec:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   191f0:	4a0d      	ldr	r2, [pc, #52]	; (19228 <gpio_nrfx_config+0xb4>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   191f2:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   191f6:	3180      	adds	r1, #128	; 0x80
   191f8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   191fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   191fe:	2307      	movs	r3, #7
   19200:	e7d8      	b.n	191b4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   19202:	2304      	movs	r3, #4
   19204:	e7d6      	b.n	191b4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   19206:	2305      	movs	r3, #5
   19208:	e7d4      	b.n	191b4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1920a:	2303      	movs	r3, #3
   1920c:	e7d2      	b.n	191b4 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1920e:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   19210:	bf42      	ittt	mi
   19212:	2201      	movmi	r2, #1
   19214:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   19216:	60fa      	strmi	r2, [r7, #12]
}
   19218:	e7e0      	b.n	191dc <gpio_nrfx_config+0x68>
   1921a:	bf00      	nop
   1921c:	00f00006 	.word	0x00f00006
   19220:	00100006 	.word	0x00100006
   19224:	00400002 	.word	0x00400002
   19228:	40842500 	.word	0x40842500

0001922c <gpiote_pin_int_cfg>:
{
   1922c:	b570      	push	{r4, r5, r6, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1922e:	6843      	ldr	r3, [r0, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   19230:	4c4c      	ldr	r4, [pc, #304]	; (19364 <gpiote_pin_int_cfg+0x138>)
   19232:	7a1a      	ldrb	r2, [r3, #8]
   19234:	f001 031f 	and.w	r3, r1, #31
   19238:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1923c:	2200      	movs	r2, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   1923e:	68c6      	ldr	r6, [r0, #12]
   19240:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   19244:	b2c0      	uxtb	r0, r0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19246:	f502 75a2 	add.w	r5, r2, #324	; 0x144
   1924a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   1924e:	f3c5 2504 	ubfx	r5, r5, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   19252:	42ab      	cmp	r3, r5
   19254:	d16c      	bne.n	19330 <gpiote_pin_int_cfg+0x104>
		    && (intenset & BIT(i))) {
   19256:	fa20 f502 	lsr.w	r5, r0, r2
   1925a:	07ed      	lsls	r5, r5, #31
   1925c:	d568      	bpl.n	19330 <gpiote_pin_int_cfg+0x104>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1925e:	0090      	lsls	r0, r2, #2
   19260:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   19264:	f500 3044 	add.w	r0, r0, #200704	; 0x31000
   19268:	f8d0 5510 	ldr.w	r5, [r0, #1296]	; 0x510
   1926c:	f025 0501 	bic.w	r5, r5, #1
   19270:	f8c0 5510 	str.w	r5, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   19274:	2001      	movs	r0, #1
   19276:	fa00 f202 	lsl.w	r2, r0, r2
    p_reg->INTENCLR = mask;
   1927a:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1927e:	4d3a      	ldr	r5, [pc, #232]	; (19368 <gpiote_pin_int_cfg+0x13c>)
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   19280:	68f0      	ldr	r0, [r6, #12]
   19282:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   19286:	f8d5 2200 	ldr.w	r2, [r5, #512]	; 0x200
   1928a:	40c8      	lsrs	r0, r1
   1928c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
   19290:	f010 0001 	ands.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   19294:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
   19298:	d049      	beq.n	1932e <gpiote_pin_int_cfg+0x102>
   1929a:	6930      	ldr	r0, [r6, #16]
   1929c:	40c8      	lsrs	r0, r1
   1929e:	f010 0001 	ands.w	r0, r0, #1
   192a2:	d044      	beq.n	1932e <gpiote_pin_int_cfg+0x102>
		if (data->trig_edge & BIT(pin)) {
   192a4:	69b0      	ldr	r0, [r6, #24]
   192a6:	40c8      	lsrs	r0, r1
   192a8:	f010 0001 	ands.w	r0, r0, #1
   192ac:	d04a      	beq.n	19344 <gpiote_pin_int_cfg+0x118>
			if (data->double_edge & BIT(pin)) {
   192ae:	69f2      	ldr	r2, [r6, #28]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   192b0:	2500      	movs	r5, #0
			if (data->double_edge & BIT(pin)) {
   192b2:	40ca      	lsrs	r2, r1
   192b4:	07d2      	lsls	r2, r2, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   192b6:	bf4f      	iteee	mi
   192b8:	2203      	movmi	r2, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   192ba:	6972      	ldrpl	r2, [r6, #20]
   192bc:	40ca      	lsrpl	r2, r1
   192be:	f002 0201 	andpl.w	r2, r2, #1
   192c2:	bf5c      	itt	pl
   192c4:	f1c2 0202 	rsbpl	r2, r2, #2
   192c8:	b2d2      	uxtbpl	r2, r2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   192ca:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   192ce:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   192d2:	f010 0003 	ands.w	r0, r0, #3
   192d6:	d12f      	bne.n	19338 <gpiote_pin_int_cfg+0x10c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   192d8:	00a9      	lsls	r1, r5, #2
   192da:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   192de:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   192e2:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   192e6:	021b      	lsls	r3, r3, #8
   192e8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   192ec:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   192f0:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   192f4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
			nrf_gpiote_event_t evt =
   192f8:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   192fc:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
   19300:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19302:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   19306:	b29b      	uxth	r3, r3
   19308:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1930c:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19310:	4332      	orrs	r2, r6
   19312:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19316:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   19318:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
   1931c:	f043 0301 	orr.w	r3, r3, #1
   19320:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   19324:	2301      	movs	r3, #1
   19326:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   1932a:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   1932e:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   19330:	3201      	adds	r2, #1
   19332:	2a08      	cmp	r2, #8
   19334:	d187      	bne.n	19246 <gpiote_pin_int_cfg+0x1a>
   19336:	e7a2      	b.n	1927e <gpiote_pin_int_cfg+0x52>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   19338:	3501      	adds	r5, #1
   1933a:	2d08      	cmp	r5, #8
   1933c:	d1c5      	bne.n	192ca <gpiote_pin_int_cfg+0x9e>
	return -ENODEV;
   1933e:	f06f 0012 	mvn.w	r0, #18
   19342:	e7f4      	b.n	1932e <gpiote_pin_int_cfg+0x102>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   19344:	6972      	ldr	r2, [r6, #20]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   19346:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   1934a:	40ca      	lsrs	r2, r1
   1934c:	f002 0201 	and.w	r2, r2, #1
   19350:	f1c2 0203 	rsb	r2, r2, #3
   19354:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   19358:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   1935c:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
}
   19360:	e7e5      	b.n	1932e <gpiote_pin_int_cfg+0x102>
   19362:	bf00      	nop
   19364:	40031000 	.word	0x40031000
   19368:	40842500 	.word	0x40842500

0001936c <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1936c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   19370:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
   19372:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   19374:	d10f      	bne.n	19396 <gpio_nrfx_pin_interrupt_configure+0x2a>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   19376:	6845      	ldr	r5, [r0, #4]
   19378:	7a2e      	ldrb	r6, [r5, #8]
   1937a:	f001 051f 	and.w	r5, r1, #31
   1937e:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   19382:	4e1d      	ldr	r6, [pc, #116]	; (193f8 <gpio_nrfx_pin_interrupt_configure+0x8c>)
   19384:	3580      	adds	r5, #128	; 0x80
   19386:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1938a:	07ed      	lsls	r5, r5, #31
   1938c:	d507      	bpl.n	1939e <gpio_nrfx_pin_interrupt_configure+0x32>
}
   1938e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19392:	bc70      	pop	{r4, r5, r6}
   19394:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   19396:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1939a:	68e5      	ldr	r5, [r4, #12]
   1939c:	d026      	beq.n	193ec <gpio_nrfx_pin_interrupt_configure+0x80>
   1939e:	2501      	movs	r5, #1
   193a0:	68e6      	ldr	r6, [r4, #12]
   193a2:	408d      	lsls	r5, r1
   193a4:	4335      	orrs	r5, r6
   193a6:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   193a8:	2501      	movs	r5, #1
   193aa:	6926      	ldr	r6, [r4, #16]
   193ac:	408d      	lsls	r5, r1
   193ae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   193b2:	bf14      	ite	ne
   193b4:	432e      	orrne	r6, r5
   193b6:	43ae      	biceq	r6, r5
   193b8:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   193ba:	69a6      	ldr	r6, [r4, #24]
   193bc:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   193c0:	69e2      	ldr	r2, [r4, #28]
   193c2:	bf0c      	ite	eq
   193c4:	432e      	orreq	r6, r5
   193c6:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   193c8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   193cc:	bf0c      	ite	eq
   193ce:	432a      	orreq	r2, r5
   193d0:	43aa      	bicne	r2, r5
   193d2:	61e2      	str	r2, [r4, #28]
   193d4:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   193d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   193da:	bf0c      	ite	eq
   193dc:	4315      	orreq	r5, r2
   193de:	ea22 0505 	bicne.w	r5, r2, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   193e2:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   193e4:	6165      	str	r5, [r4, #20]
}
   193e6:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
   193e8:	f7ff bf20 	b.w	1922c <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   193ec:	2601      	movs	r6, #1
   193ee:	408e      	lsls	r6, r1
   193f0:	ea25 0506 	bic.w	r5, r5, r6
   193f4:	e7d7      	b.n	193a6 <gpio_nrfx_pin_interrupt_configure+0x3a>
   193f6:	bf00      	nop
   193f8:	40842500 	.word	0x40842500

000193fc <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   193fc:	494e      	ldr	r1, [pc, #312]	; (19538 <gpiote_event_handler+0x13c>)
{
   193fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19402:	680e      	ldr	r6, [r1, #0]
	if (port_event) {
   19404:	2e00      	cmp	r6, #0
   19406:	d05e      	beq.n	194c6 <gpiote_event_handler+0xca>
	struct gpio_nrfx_data *data = get_port_data(port);
   19408:	4b4c      	ldr	r3, [pc, #304]	; (1953c <gpiote_event_handler+0x140>)
	u32_t pin = 0U;
   1940a:	2500      	movs	r5, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   1940c:	68da      	ldr	r2, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1940e:	f8d3 c004 	ldr.w	ip, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   19412:	e9d2 0303 	ldrd	r0, r3, [r2, #12]
   19416:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   19418:	e9d2 0406 	ldrd	r0, r4, [r2, #24]
   1941c:	4320      	orrs	r0, r4
   1941e:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   19422:	f8dc 0004 	ldr.w	r0, [ip, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   19426:	6952      	ldr	r2, [r2, #20]
    return p_reg->IN;
   19428:	6904      	ldr	r4, [r0, #16]
	u32_t bit = 1U << pin;
   1942a:	2001      	movs	r0, #1
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   1942c:	4054      	eors	r4, r2
   1942e:	f8df e118 	ldr.w	lr, [pc, #280]	; 19548 <gpiote_event_handler+0x14c>
	u32_t out = pin_states & level_pins;
   19432:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   19436:	bb8b      	cbnz	r3, 1949c <gpiote_event_handler+0xa0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19438:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1943a:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1943c:	2001      	movs	r0, #1
   1943e:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   19440:	493f      	ldr	r1, [pc, #252]	; (19540 <gpiote_event_handler+0x144>)
   19442:	4d40      	ldr	r5, [pc, #256]	; (19544 <gpiote_event_handler+0x148>)
   19444:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   19448:	fa00 fc03 	lsl.w	ip, r0, r3
   1944c:	ea1c 0f02 	tst.w	ip, r2
   19450:	d00d      	beq.n	1946e <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19452:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   19456:	b152      	cbz	r2, 1946e <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19458:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1945c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19460:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19464:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   19468:	fa00 f202 	lsl.w	r2, r0, r2
   1946c:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1946e:	3301      	adds	r3, #1
   19470:	2b08      	cmp	r3, #8
   19472:	d1e7      	bne.n	19444 <gpiote_event_handler+0x48>
	if (fired_triggers[0]) {
   19474:	bb4c      	cbnz	r4, 194ca <gpiote_event_handler+0xce>
	if (port_event) {
   19476:	b17e      	cbz	r6, 19498 <gpiote_event_handler+0x9c>
	u32_t bit = 1U << pin;
   19478:	2401      	movs	r4, #1
	u32_t pin = 0U;
   1947a:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   1947c:	4b2f      	ldr	r3, [pc, #188]	; (1953c <gpiote_event_handler+0x140>)
   1947e:	4f32      	ldr	r7, [pc, #200]	; (19548 <gpiote_event_handler+0x14c>)
   19480:	68d8      	ldr	r0, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   19482:	685e      	ldr	r6, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   19484:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   19488:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
   1948a:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
   1948e:	430a      	orrs	r2, r1
   19490:	ea23 0302 	bic.w	r3, r3, r2
	while (level_pins) {
   19494:	2b00      	cmp	r3, #0
   19496:	d133      	bne.n	19500 <gpiote_event_handler+0x104>
}
   19498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1949c:	4203      	tst	r3, r0
   1949e:	d00f      	beq.n	194c0 <gpiote_event_handler+0xc4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   194a0:	f89c 7008 	ldrb.w	r7, [ip, #8]
   194a4:	f005 021f 	and.w	r2, r5, #31
   194a8:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
   194ac:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   194b0:	f8d2 7200 	ldr.w	r7, [r2, #512]	; 0x200
			level_pins &= ~bit;
   194b4:	ea23 0300 	bic.w	r3, r3, r0
   194b8:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   194bc:	f8c2 7200 	str.w	r7, [r2, #512]	; 0x200
		++pin;
   194c0:	3501      	adds	r5, #1
		bit <<= 1;
   194c2:	0040      	lsls	r0, r0, #1
   194c4:	e7b7      	b.n	19436 <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   194c6:	4634      	mov	r4, r6
   194c8:	e7b7      	b.n	1943a <gpiote_event_handler+0x3e>
	struct gpio_nrfx_data *data = get_port_data(port);
   194ca:	481c      	ldr	r0, [pc, #112]	; (1953c <gpiote_event_handler+0x140>)
   194cc:	68c7      	ldr	r7, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   194ce:	6879      	ldr	r1, [r7, #4]
   194d0:	2900      	cmp	r1, #0
   194d2:	d0d0      	beq.n	19476 <gpiote_event_handler+0x7a>
	return node->next;
   194d4:	680d      	ldr	r5, [r1, #0]
			cb->handler(port, cb, cb->pin_mask & pins);
   194d6:	4680      	mov	r8, r0
   194d8:	2d00      	cmp	r5, #0
   194da:	bf38      	it	cc
   194dc:	2500      	movcc	r5, #0
		if ((cb->pin_mask & pins) & data->int_en) {
   194de:	688a      	ldr	r2, [r1, #8]
   194e0:	693b      	ldr	r3, [r7, #16]
   194e2:	4022      	ands	r2, r4
   194e4:	421a      	tst	r2, r3
   194e6:	d002      	beq.n	194ee <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
   194e8:	4640      	mov	r0, r8
   194ea:	684b      	ldr	r3, [r1, #4]
   194ec:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   194ee:	2d00      	cmp	r5, #0
   194f0:	d0c1      	beq.n	19476 <gpiote_event_handler+0x7a>
   194f2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   194f4:	4629      	mov	r1, r5
   194f6:	2b00      	cmp	r3, #0
   194f8:	bf38      	it	cc
   194fa:	2300      	movcc	r3, #0
   194fc:	461d      	mov	r5, r3
   194fe:	e7ee      	b.n	194de <gpiote_event_handler+0xe2>
		if (level_pins & bit) {
   19500:	421c      	tst	r4, r3
   19502:	d016      	beq.n	19532 <gpiote_event_handler+0x136>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   19504:	7a32      	ldrb	r2, [r6, #8]
   19506:	f005 011f 	and.w	r1, r5, #31
   1950a:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1950e:	6942      	ldr	r2, [r0, #20]
   19510:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   19514:	f8d1 c200 	ldr.w	ip, [r1, #512]	; 0x200
   19518:	40ea      	lsrs	r2, r5
   1951a:	f002 0201 	and.w	r2, r2, #1
   1951e:	f1c2 0203 	rsb	r2, r2, #3
   19522:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   19526:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   1952a:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
			level_pins &= ~bit;
   1952e:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
   19532:	3501      	adds	r5, #1
		bit <<= 1;
   19534:	0064      	lsls	r4, r4, #1
   19536:	e7ad      	b.n	19494 <gpiote_event_handler+0x98>
   19538:	4003117c 	.word	0x4003117c
   1953c:	2002010c 	.word	0x2002010c
   19540:	40031000 	.word	0x40031000
   19544:	40031100 	.word	0x40031100
   19548:	40842500 	.word	0x40842500

0001954c <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   1954c:	2100      	movs	r1, #0
   1954e:	4802      	ldr	r0, [pc, #8]	; (19558 <pwm_nrfx_get_cycles_per_sec+0xc>)
   19550:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   19554:	2000      	movs	r0, #0
   19556:	4770      	bx	lr
   19558:	00f42400 	.word	0x00f42400

0001955c <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(struct device *dev)
{
   1955c:	b508      	push	{r3, lr}
	const struct pwm_nrfx_config *config = dev->config_info;

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   1955e:	2300      	movs	r3, #0
	const struct pwm_nrfx_config *config = dev->config_info;
   19560:	6840      	ldr	r0, [r0, #4]
	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   19562:	461a      	mov	r2, r3
   19564:	f100 0108 	add.w	r1, r0, #8
   19568:	f000 fa3a 	bl	199e0 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   1956c:	4b03      	ldr	r3, [pc, #12]	; (1957c <pwm_nrfx_init+0x20>)
   1956e:	4298      	cmp	r0, r3
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
	}

	return 0;
}
   19570:	bf14      	ite	ne
   19572:	f06f 000f 	mvnne.w	r0, #15
   19576:	2000      	moveq	r0, #0
   19578:	bd08      	pop	{r3, pc}
   1957a:	bf00      	nop
   1957c:	0bad0000 	.word	0x0bad0000

00019580 <pwm_nrfx_pin_set>:
{
   19580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19584:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
   19588:	460f      	mov	r7, r1
   1958a:	4690      	mov	r8, r2
   1958c:	4699      	mov	r9, r3
	const struct pwm_nrfx_config *config = dev->config_info;
   1958e:	6846      	ldr	r6, [r0, #4]
	struct pwm_nrfx_data *data = dev->driver_data;
   19590:	68c1      	ldr	r1, [r0, #12]
	if (flags) {
   19592:	bbc4      	cbnz	r4, 19606 <pwm_nrfx_pin_set+0x86>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   19594:	1df2      	adds	r2, r6, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
   19596:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   1959a:	2bff      	cmp	r3, #255	; 0xff
   1959c:	d003      	beq.n	195a6 <pwm_nrfx_pin_set+0x26>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
   1959e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   195a2:	429f      	cmp	r7, r3
   195a4:	d032      	beq.n	1960c <pwm_nrfx_pin_set+0x8c>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   195a6:	3401      	adds	r4, #1
   195a8:	b2e4      	uxtb	r4, r4
   195aa:	2c04      	cmp	r4, #4
   195ac:	d1f3      	bne.n	19596 <pwm_nrfx_pin_set+0x16>
		return -EINVAL;
   195ae:	f06f 0015 	mvn.w	r0, #21
   195b2:	e009      	b.n	195c8 <pwm_nrfx_pin_set+0x48>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   195b4:	2000      	movs	r0, #0
   195b6:	e039      	b.n	1962c <pwm_nrfx_pin_set+0xac>
		countertop >>= 1;
   195b8:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   195ba:	2b08      	cmp	r3, #8
		countertop >>= 1;
   195bc:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   195c0:	d14f      	bne.n	19662 <pwm_nrfx_pin_set+0xe2>
   195c2:	e7f4      	b.n	195ae <pwm_nrfx_pin_set+0x2e>
		if (was_stopped) {
   195c4:	b990      	cbnz	r0, 195ec <pwm_nrfx_pin_set+0x6c>
	return 0;
   195c6:	2000      	movs	r0, #0
}
   195c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& channel_inverted_state;
   195cc:	45c8      	cmp	r8, r9
   195ce:	d879      	bhi.n	196c4 <pwm_nrfx_pin_set+0x144>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   195d0:	2301      	movs	r3, #1
   195d2:	fa03 f707 	lsl.w	r7, r3, r7
    p_reg->OUTCLR = clr_mask;
   195d6:	60d7      	str	r7, [r2, #12]
		if (!any_other_channel_is_active(channel, data)) {
   195d8:	4620      	mov	r0, r4
   195da:	f008 ff16 	bl	2240a <any_other_channel_is_active>
   195de:	2800      	cmp	r0, #0
   195e0:	d1f1      	bne.n	195c6 <pwm_nrfx_pin_set+0x46>
			nrfx_pwm_stop(&config->pwm, false);
   195e2:	4601      	mov	r1, r0
   195e4:	4630      	mov	r0, r6
   195e6:	f008 ffab 	bl	22540 <nrfx_pwm_stop>
   195ea:	e7ec      	b.n	195c6 <pwm_nrfx_pin_set+0x46>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   195ec:	4630      	mov	r0, r6
   195ee:	f000 fab1 	bl	19b54 <nrfx_pwm_is_stopped>
   195f2:	2800      	cmp	r0, #0
   195f4:	d0fa      	beq.n	195ec <pwm_nrfx_pin_set+0x6c>
			nrfx_pwm_simple_playback(&config->pwm,
   195f6:	2302      	movs	r3, #2
   195f8:	2201      	movs	r2, #1
   195fa:	4630      	mov	r0, r6
   195fc:	f106 0118 	add.w	r1, r6, #24
   19600:	f000 fa6a 	bl	19ad8 <nrfx_pwm_simple_playback>
   19604:	e7df      	b.n	195c6 <pwm_nrfx_pin_set+0x46>
		return -ENOTSUP;
   19606:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1960a:	e7dd      	b.n	195c8 <pwm_nrfx_pin_set+0x48>
	u16_t pulse_cycle =
   1960c:	eb01 0a44 	add.w	sl, r1, r4, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   19610:	f8ba b004 	ldrh.w	fp, [sl, #4]
	u16_t pulse_cycle =
   19614:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   19618:	b113      	cbz	r3, 19620 <pwm_nrfx_pin_set+0xa0>
   1961a:	898a      	ldrh	r2, [r1, #12]
   1961c:	429a      	cmp	r2, r3
   1961e:	d8c9      	bhi.n	195b4 <pwm_nrfx_pin_set+0x34>
		      !any_other_channel_is_active(channel, data);
   19620:	4620      	mov	r0, r4
   19622:	f008 fef2 	bl	2240a <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   19626:	f080 0001 	eor.w	r0, r0, #1
   1962a:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   1962c:	7bb5      	ldrb	r5, [r6, #14]
	if (period_cycles != data->period_cycles) {
   1962e:	680b      	ldr	r3, [r1, #0]
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   19630:	2d01      	cmp	r5, #1
		period_cycles /= 2;
   19632:	bf04      	itt	eq
   19634:	ea4f 0858 	moveq.w	r8, r8, lsr #1
		pulse_cycles /= 2;
   19638:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != data->period_cycles) {
   1963c:	4543      	cmp	r3, r8
   1963e:	d022      	beq.n	19686 <pwm_nrfx_pin_set+0x106>
   19640:	2300      	movs	r3, #0
				data->current[i]
   19642:	f101 0c04 	add.w	ip, r1, #4
		if (i != channel) {
   19646:	b2da      	uxtb	r2, r3
   19648:	42a2      	cmp	r2, r4
   1964a:	d005      	beq.n	19658 <pwm_nrfx_pin_set+0xd8>
			u16_t channel_pulse_cycle =
   1964c:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
   19650:	f3c2 020e 	ubfx	r2, r2, #0, #15
   19654:	2a00      	cmp	r2, #0
   19656:	d1aa      	bne.n	195ae <pwm_nrfx_pin_set+0x2e>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   19658:	3301      	adds	r3, #1
   1965a:	2b04      	cmp	r3, #4
   1965c:	d1f3      	bne.n	19646 <pwm_nrfx_pin_set+0xc6>
   1965e:	4642      	mov	r2, r8
   19660:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   19662:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   19666:	fa5f fc83 	uxtb.w	ip, r3
   1966a:	d2a5      	bcs.n	195b8 <pwm_nrfx_pin_set+0x38>
			data->prescaler     = prescaler;
   1966c:	f881 c00e 	strb.w	ip, [r1, #14]
			nrf_pwm_configure(config->pwm.p_registers,
   19670:	f8d6 c000 	ldr.w	ip, [r6]
			data->period_cycles = period_cycles;
   19674:	f8c1 8000 	str.w	r8, [r1]
			data->countertop    = (u16_t)countertop;
   19678:	818a      	strh	r2, [r1, #12]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   1967a:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
   1967e:	f8cc 5504 	str.w	r5, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   19682:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
	pulse_cycles = MIN(pulse_cycles, period_cycles);
   19686:	45c8      	cmp	r8, r9
   19688:	4643      	mov	r3, r8
   1968a:	bf28      	it	cs
   1968c:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
   1968e:	7b8d      	ldrb	r5, [r1, #14]
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   19690:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
   19694:	fa23 f505 	lsr.w	r5, r3, r5
   19698:	ea45 050b 	orr.w	r5, r5, fp
   1969c:	b2ad      	uxth	r5, r5
	data->current[channel] = (
   1969e:	f8aa 5004 	strh.w	r5, [sl, #4]
	u16_t pulse_cycle =
   196a2:	f3c5 050e 	ubfx	r5, r5, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   196a6:	b115      	cbz	r5, 196ae <pwm_nrfx_pin_set+0x12e>
   196a8:	898a      	ldrh	r2, [r1, #12]
   196aa:	42aa      	cmp	r2, r5
   196ac:	d88a      	bhi.n	195c4 <pwm_nrfx_pin_set+0x44>
			config->initial_config.output_pins[channel]
   196ae:	1932      	adds	r2, r6, r4
   196b0:	f992 0008 	ldrsb.w	r0, [r2, #8]
		bool pulse_0_and_not_inverted =
   196b4:	4a07      	ldr	r2, [pc, #28]	; (196d4 <pwm_nrfx_pin_set+0x154>)
			&& !channel_inverted_state;
   196b6:	2b00      	cmp	r3, #0
   196b8:	d088      	beq.n	195cc <pwm_nrfx_pin_set+0x4c>
			&& channel_inverted_state;
   196ba:	45c8      	cmp	r8, r9
   196bc:	d804      	bhi.n	196c8 <pwm_nrfx_pin_set+0x148>
   196be:	2800      	cmp	r0, #0
   196c0:	db86      	blt.n	195d0 <pwm_nrfx_pin_set+0x50>
   196c2:	e001      	b.n	196c8 <pwm_nrfx_pin_set+0x148>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
   196c4:	2800      	cmp	r0, #0
   196c6:	da83      	bge.n	195d0 <pwm_nrfx_pin_set+0x50>
    p_reg->OUTSET = set_mask;
   196c8:	2301      	movs	r3, #1
   196ca:	fa03 f707 	lsl.w	r7, r3, r7
   196ce:	6097      	str	r7, [r2, #8]
}
   196d0:	e782      	b.n	195d8 <pwm_nrfx_pin_set+0x58>
   196d2:	bf00      	nop
   196d4:	40842500 	.word	0x40842500

000196d8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   196d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   196da:	794b      	ldrb	r3, [r1, #5]
   196dc:	2b01      	cmp	r3, #1
   196de:	d029      	beq.n	19734 <uarte_nrfx_configure+0x5c>
   196e0:	2b03      	cmp	r3, #3
   196e2:	d124      	bne.n	1972e <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   196e4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   196e6:	798b      	ldrb	r3, [r1, #6]
   196e8:	2b03      	cmp	r3, #3
   196ea:	d120      	bne.n	1972e <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   196ec:	79cc      	ldrb	r4, [r1, #7]
   196ee:	b124      	cbz	r4, 196fa <uarte_nrfx_configure+0x22>
   196f0:	2c01      	cmp	r4, #1
   196f2:	d11c      	bne.n	1972e <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   196f4:	6843      	ldr	r3, [r0, #4]
   196f6:	791b      	ldrb	r3, [r3, #4]
   196f8:	b1cb      	cbz	r3, 1972e <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   196fa:	790a      	ldrb	r2, [r1, #4]
   196fc:	b112      	cbz	r2, 19704 <uarte_nrfx_configure+0x2c>
   196fe:	2a02      	cmp	r2, #2
   19700:	d115      	bne.n	1972e <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   19702:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   19704:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   19706:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   19708:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1970c:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1970e:	d064      	beq.n	197da <uarte_nrfx_configure+0x102>
   19710:	d82d      	bhi.n	1976e <uarte_nrfx_configure+0x96>
   19712:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   19716:	d063      	beq.n	197e0 <uarte_nrfx_configure+0x108>
   19718:	d816      	bhi.n	19748 <uarte_nrfx_configure+0x70>
   1971a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1971e:	d061      	beq.n	197e4 <uarte_nrfx_configure+0x10c>
   19720:	d80a      	bhi.n	19738 <uarte_nrfx_configure+0x60>
   19722:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   19726:	d060      	beq.n	197ea <uarte_nrfx_configure+0x112>
   19728:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1972c:	d060      	beq.n	197f0 <uarte_nrfx_configure+0x118>
   1972e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19732:	e051      	b.n	197d8 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   19734:	2600      	movs	r6, #0
   19736:	e7d6      	b.n	196e6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   19738:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1973c:	d05b      	beq.n	197f6 <uarte_nrfx_configure+0x11e>
   1973e:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   19742:	d1f4      	bne.n	1972e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   19744:	4b36      	ldr	r3, [pc, #216]	; (19820 <uarte_nrfx_configure+0x148>)
   19746:	e03c      	b.n	197c2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   19748:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1974c:	d056      	beq.n	197fc <uarte_nrfx_configure+0x124>
   1974e:	d807      	bhi.n	19760 <uarte_nrfx_configure+0x88>
   19750:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   19754:	d054      	beq.n	19800 <uarte_nrfx_configure+0x128>
   19756:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1975a:	d1e8      	bne.n	1972e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1975c:	4b31      	ldr	r3, [pc, #196]	; (19824 <uarte_nrfx_configure+0x14c>)
   1975e:	e030      	b.n	197c2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   19760:	f647 2712 	movw	r7, #31250	; 0x7a12
   19764:	42bb      	cmp	r3, r7
   19766:	d1e2      	bne.n	1972e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   19768:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1976c:	e029      	b.n	197c2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1976e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   19772:	d047      	beq.n	19804 <uarte_nrfx_configure+0x12c>
   19774:	d813      	bhi.n	1979e <uarte_nrfx_configure+0xc6>
   19776:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1977a:	d046      	beq.n	1980a <uarte_nrfx_configure+0x132>
   1977c:	d809      	bhi.n	19792 <uarte_nrfx_configure+0xba>
   1977e:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   19782:	42bb      	cmp	r3, r7
   19784:	d043      	beq.n	1980e <uarte_nrfx_configure+0x136>
   19786:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1978a:	d1d0      	bne.n	1972e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1978c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   19790:	e017      	b.n	197c2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   19792:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   19796:	d1ca      	bne.n	1972e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   19798:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1979c:	e011      	b.n	197c2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1979e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   197a2:	d037      	beq.n	19814 <uarte_nrfx_configure+0x13c>
   197a4:	d808      	bhi.n	197b8 <uarte_nrfx_configure+0xe0>
   197a6:	4f20      	ldr	r7, [pc, #128]	; (19828 <uarte_nrfx_configure+0x150>)
   197a8:	42bb      	cmp	r3, r7
   197aa:	d036      	beq.n	1981a <uarte_nrfx_configure+0x142>
   197ac:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   197b0:	d1bd      	bne.n	1972e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   197b2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   197b6:	e004      	b.n	197c2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   197b8:	4f1c      	ldr	r7, [pc, #112]	; (1982c <uarte_nrfx_configure+0x154>)
   197ba:	42bb      	cmp	r3, r7
   197bc:	d1b7      	bne.n	1972e <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   197be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   197c2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   197c6:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   197c8:	68c3      	ldr	r3, [r0, #12]
   197ca:	4322      	orrs	r2, r4
   197cc:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   197ce:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   197d2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   197d6:	2000      	movs	r0, #0
}
   197d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   197da:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   197de:	e7f0      	b.n	197c2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   197e0:	4b13      	ldr	r3, [pc, #76]	; (19830 <uarte_nrfx_configure+0x158>)
   197e2:	e7ee      	b.n	197c2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   197e4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   197e8:	e7eb      	b.n	197c2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   197ea:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   197ee:	e7e8      	b.n	197c2 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   197f0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   197f4:	e7e5      	b.n	197c2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   197f6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   197fa:	e7e2      	b.n	197c2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   197fc:	4b0d      	ldr	r3, [pc, #52]	; (19834 <uarte_nrfx_configure+0x15c>)
   197fe:	e7e0      	b.n	197c2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   19800:	4b0d      	ldr	r3, [pc, #52]	; (19838 <uarte_nrfx_configure+0x160>)
   19802:	e7de      	b.n	197c2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   19804:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   19808:	e7db      	b.n	197c2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1980a:	4b0c      	ldr	r3, [pc, #48]	; (1983c <uarte_nrfx_configure+0x164>)
   1980c:	e7d9      	b.n	197c2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1980e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   19812:	e7d6      	b.n	197c2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   19814:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   19818:	e7d3      	b.n	197c2 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1981a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1981e:	e7d0      	b.n	197c2 <uarte_nrfx_configure+0xea>
   19820:	0013b000 	.word	0x0013b000
   19824:	004ea000 	.word	0x004ea000
   19828:	0003d090 	.word	0x0003d090
   1982c:	000f4240 	.word	0x000f4240
   19830:	00275000 	.word	0x00275000
   19834:	0075c000 	.word	0x0075c000
   19838:	003af000 	.word	0x003af000
   1983c:	013a9000 	.word	0x013a9000

00019840 <uarte_instance_init.isra.0>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19840:	2201      	movs	r2, #1
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   19842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19844:	2703      	movs	r7, #3
   19846:	460d      	mov	r5, r1
	return config->uarte_regs;
   19848:	6843      	ldr	r3, [r0, #4]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   1984a:	6809      	ldr	r1, [r1, #0]
	return config->uarte_regs;
   1984c:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   1984e:	4b21      	ldr	r3, [pc, #132]	; (198d4 <uarte_instance_init.isra.0+0x94>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19850:	408a      	lsls	r2, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   19852:	68c6      	ldr	r6, [r0, #12]
    p_reg->OUTSET = set_mask;
   19854:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19856:	f101 0280 	add.w	r2, r1, #128	; 0x80
   1985a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1985e:	686a      	ldr	r2, [r5, #4]
   19860:	1c57      	adds	r7, r2, #1
   19862:	bf1e      	ittt	ne
   19864:	f04f 0c00 	movne.w	ip, #0
   19868:	f102 0780 	addne.w	r7, r2, #128	; 0x80
   1986c:	f843 c027 	strne.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   19870:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   19874:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
   19876:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   1987a:	1c4a      	adds	r2, r1, #1
   1987c:	d015      	beq.n	198aa <uarte_instance_init.isra.0+0x6a>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1987e:	68ea      	ldr	r2, [r5, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   19880:	1c57      	adds	r7, r2, #1
   19882:	d012      	beq.n	198aa <uarte_instance_init.isra.0+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19884:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19886:	f04f 0c03 	mov.w	ip, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1988a:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
   1988c:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1988e:	f102 0780 	add.w	r7, r2, #128	; 0x80
   19892:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
   19896:	f04f 0c00 	mov.w	ip, #0
   1989a:	f101 0780 	add.w	r7, r1, #128	; 0x80
   1989e:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   198a2:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   198a6:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   198aa:	4631      	mov	r1, r6
   198ac:	f7ff ff14 	bl	196d8 <uarte_nrfx_configure>
	if (err) {
   198b0:	b970      	cbnz	r0, 198d0 <uarte_instance_init.isra.0+0x90>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   198b2:	2308      	movs	r3, #8
   198b4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   198b8:	686b      	ldr	r3, [r5, #4]
   198ba:	3301      	adds	r3, #1
   198bc:	d008      	beq.n	198d0 <uarte_instance_init.isra.0+0x90>
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
   198be:	2301      	movs	r3, #1
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   198c0:	360c      	adds	r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   198c2:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   198c6:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   198ca:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   198ce:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   198d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   198d2:	bf00      	nop
   198d4:	40842500 	.word	0x40842500

000198d8 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   198d8:	b530      	push	{r4, r5, lr}
   198da:	b085      	sub	sp, #20
   198dc:	4605      	mov	r5, r0
   198de:	466c      	mov	r4, sp
   198e0:	4b04      	ldr	r3, [pc, #16]	; (198f4 <uarte_0_init+0x1c>)
   198e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   198e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   198e8:	4621      	mov	r1, r4
   198ea:	4628      	mov	r0, r5
   198ec:	f7ff ffa8 	bl	19840 <uarte_instance_init.isra.0>
   198f0:	b005      	add	sp, #20
   198f2:	bd30      	pop	{r4, r5, pc}
   198f4:	00024e40 	.word	0x00024e40

000198f8 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   198f8:	b530      	push	{r4, r5, lr}
   198fa:	b085      	sub	sp, #20
   198fc:	4605      	mov	r5, r0
   198fe:	466c      	mov	r4, sp
   19900:	4b04      	ldr	r3, [pc, #16]	; (19914 <uarte_1_init+0x1c>)
   19902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   19904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   19908:	4621      	mov	r1, r4
   1990a:	4628      	mov	r0, r5
   1990c:	f7ff ff98 	bl	19840 <uarte_instance_init.isra.0>
   19910:	b005      	add	sp, #20
   19912:	bd30      	pop	{r4, r5, pc}
   19914:	00024e50 	.word	0x00024e50

00019918 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   19918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1991c:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   1991e:	4c21      	ldr	r4, [pc, #132]	; (199a4 <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   19920:	4e21      	ldr	r6, [pc, #132]	; (199a8 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19922:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   19926:	f8df 9088 	ldr.w	r9, [pc, #136]	; 199b0 <check_ext_api_requests+0x98>
{
   1992a:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   1992c:	45a8      	cmp	r8, r5
   1992e:	d803      	bhi.n	19938 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   19930:	2000      	movs	r0, #0
   19932:	b005      	add	sp, #20
   19934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   19938:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1993a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1993e:	681f      	ldr	r7, [r3, #0]
   19940:	ab01      	add	r3, sp, #4
   19942:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   19946:	220c      	movs	r2, #12
   19948:	4619      	mov	r1, r3
   1994a:	4638      	mov	r0, r7
   1994c:	f00a fd95 	bl	2447a <memcmp>
   19950:	b990      	cbnz	r0, 19978 <check_ext_api_requests+0x60>
   19952:	b18f      	cbz	r7, 19978 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   19954:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   19956:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   19958:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   1995a:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   1995c:	4291      	cmp	r1, r2
   1995e:	d10b      	bne.n	19978 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   19960:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   19962:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   19964:	4291      	cmp	r1, r2
   19966:	d807      	bhi.n	19978 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   19968:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   1996a:	4291      	cmp	r1, r2
   1996c:	d904      	bls.n	19978 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   1996e:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   19970:	695b      	ldr	r3, [r3, #20]
   19972:	ea32 0303 	bics.w	r3, r2, r3
   19976:	d00a      	beq.n	1998e <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   19978:	6a27      	ldr	r7, [r4, #32]
   1997a:	b167      	cbz	r7, 19996 <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   1997c:	480b      	ldr	r0, [pc, #44]	; (199ac <check_ext_api_requests+0x94>)
   1997e:	f008 fb6b 	bl	22058 <printk>
			k_panic();
   19982:	4040      	eors	r0, r0
   19984:	f380 8811 	msr	BASEPRI, r0
   19988:	f04f 0004 	mov.w	r0, #4
   1998c:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   1998e:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19990:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   19992:	441c      	add	r4, r3
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   19994:	e7ca      	b.n	1992c <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   19996:	4648      	mov	r0, r9
   19998:	f008 fb5e 	bl	22058 <printk>
			*ext_api_req->ext_api = NULL;
   1999c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1999e:	601f      	str	r7, [r3, #0]
   199a0:	e7f5      	b.n	1998e <check_ext_api_requests+0x76>
   199a2:	bf00      	nop
   199a4:	0000c23c 	.word	0x0000c23c
   199a8:	00024e60 	.word	0x00024e60
   199ac:	0002af7d 	.word	0x0002af7d
   199b0:	0002afa6 	.word	0x0002afa6

000199b4 <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   199b4:	4a07      	ldr	r2, [pc, #28]	; (199d4 <SystemInit+0x20>)
   199b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   199ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   199be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   199c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   199c6:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   199ca:	4b03      	ldr	r3, [pc, #12]	; (199d8 <SystemInit+0x24>)
   199cc:	4a03      	ldr	r2, [pc, #12]	; (199dc <SystemInit+0x28>)
   199ce:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   199d0:	4770      	bx	lr
   199d2:	bf00      	nop
   199d4:	e000ed00 	.word	0xe000ed00
   199d8:	20020050 	.word	0x20020050
   199dc:	03d09000 	.word	0x03d09000

000199e0 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   199e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   199e4:	260c      	movs	r6, #12
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   199e6:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   199e8:	4c37      	ldr	r4, [pc, #220]	; (19ac8 <nrfx_pwm_init+0xe8>)
   199ea:	436e      	muls	r6, r5
   199ec:	19a7      	adds	r7, r4, r6
   199ee:	f897 c008 	ldrb.w	ip, [r7, #8]
{
   199f2:	b085      	sub	sp, #20
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   199f4:	f1bc 0f00 	cmp.w	ip, #0
   199f8:	d164      	bne.n	19ac4 <nrfx_pwm_init+0xe4>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
   199fa:	51a2      	str	r2, [r4, r6]
    p_cb->p_context = p_context;
   199fc:	f04f 0a01 	mov.w	sl, #1
   19a00:	466e      	mov	r6, sp
   19a02:	f04f 0b03 	mov.w	fp, #3
   19a06:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 19ad4 <nrfx_pwm_init+0xf4>
   19a0a:	607b      	str	r3, [r7, #4]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   19a0c:	f101 0903 	add.w	r9, r1, #3
   19a10:	1e4f      	subs	r7, r1, #1
        uint8_t output_pin = p_config->output_pins[i];
   19a12:	f817 ef01 	ldrb.w	lr, [r7, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   19a16:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   19a1a:	d04f      	beq.n	19abc <nrfx_pwm_init+0xdc>
            if (!p_config->skip_gpio_cfg)
   19a1c:	f891 800c 	ldrb.w	r8, [r1, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   19a20:	f02e 0380 	bic.w	r3, lr, #128	; 0x80
   19a24:	6033      	str	r3, [r6, #0]
            if (!p_config->skip_gpio_cfg)
   19a26:	f1b8 0f00 	cmp.w	r8, #0
   19a2a:	d10c      	bne.n	19a46 <nrfx_pwm_init+0x66>
                if (inverted)
   19a2c:	fa0a f803 	lsl.w	r8, sl, r3
   19a30:	f01e 0f80 	tst.w	lr, #128	; 0x80
   19a34:	f103 0380 	add.w	r3, r3, #128	; 0x80
    p_reg->OUTSET = set_mask;
   19a38:	bf14      	ite	ne
   19a3a:	f8cc 8008 	strne.w	r8, [ip, #8]
    p_reg->OUTCLR = clr_mask;
   19a3e:	f8cc 800c 	streq.w	r8, [ip, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19a42:	f84c b023 	str.w	fp, [ip, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   19a46:	454f      	cmp	r7, r9
   19a48:	f106 0604 	add.w	r6, r6, #4
   19a4c:	d1e1      	bne.n	19a12 <nrfx_pwm_init+0x32>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   19a4e:	6800      	ldr	r0, [r0, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
   19a50:	9b00      	ldr	r3, [sp, #0]
   19a52:	f8c0 3560 	str.w	r3, [r0, #1376]	; 0x560
   19a56:	9b01      	ldr	r3, [sp, #4]
   19a58:	f8c0 3564 	str.w	r3, [r0, #1380]	; 0x564
   19a5c:	9b02      	ldr	r3, [sp, #8]
   19a5e:	f8c0 3568 	str.w	r3, [r0, #1384]	; 0x568
   19a62:	9b03      	ldr	r3, [sp, #12]
   19a64:	f8c0 356c 	str.w	r3, [r0, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   19a68:	2301      	movs	r3, #1
   19a6a:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
   19a6e:	798e      	ldrb	r6, [r1, #6]
   19a70:	890b      	ldrh	r3, [r1, #8]
    p_reg->PRESCALER  = base_clock;
   19a72:	794f      	ldrb	r7, [r1, #5]
   19a74:	f8c0 750c 	str.w	r7, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
   19a78:	f8c0 6504 	str.w	r6, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   19a7c:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   19a80:	894b      	ldrh	r3, [r1, #10]
   19a82:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
   19a86:	2300      	movs	r3, #0
   19a88:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
   19a8c:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19a90:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   19a94:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   19a98:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   19a9c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   19aa0:	b11a      	cbz	r2, 19aaa <nrfx_pwm_init+0xca>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   19aa2:	f340 3007 	sbfx	r0, r0, #12, #8
   19aa6:	f7fe ff61 	bl	1896c <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   19aaa:	230c      	movs	r3, #12
   19aac:	fb03 4405 	mla	r4, r3, r5, r4
   19ab0:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   19ab2:	4806      	ldr	r0, [pc, #24]	; (19acc <nrfx_pwm_init+0xec>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   19ab4:	7223      	strb	r3, [r4, #8]
}
   19ab6:	b005      	add	sp, #20
   19ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   19abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19ac0:	6033      	str	r3, [r6, #0]
   19ac2:	e7c0      	b.n	19a46 <nrfx_pwm_init+0x66>
        return err_code;
   19ac4:	4802      	ldr	r0, [pc, #8]	; (19ad0 <nrfx_pwm_init+0xf0>)
   19ac6:	e7f6      	b.n	19ab6 <nrfx_pwm_init+0xd6>
   19ac8:	20020568 	.word	0x20020568
   19acc:	0bad0000 	.word	0x0bad0000
   19ad0:	0bad0005 	.word	0x0bad0005
   19ad4:	40842500 	.word	0x40842500

00019ad8 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   19ad8:	b4f0      	push	{r4, r5, r6, r7}
   19ada:	460d      	mov	r5, r1
   19adc:	461c      	mov	r4, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   19ade:	7901      	ldrb	r1, [r0, #4]
   19ae0:	4b1b      	ldr	r3, [pc, #108]	; (19b50 <nrfx_pwm_simple_playback+0x78>)
   19ae2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   19ae6:	6800      	ldr	r0, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   19ae8:	f8d5 c000 	ldr.w	ip, [r5]
    p_reg->SEQ[seq_id].CNT = length;
   19aec:	88af      	ldrh	r7, [r5, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   19aee:	68ae      	ldr	r6, [r5, #8]
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   19af0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   19af4:	68eb      	ldr	r3, [r5, #12]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   19af6:	f8c0 c520 	str.w	ip, [r0, #1312]	; 0x520
    p_reg->SEQ[seq_id].CNT = length;
   19afa:	f8c0 7524 	str.w	r7, [r0, #1316]	; 0x524
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   19afe:	f8c0 6528 	str.w	r6, [r0, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   19b02:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   19b06:	f8c0 c540 	str.w	ip, [r0, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
   19b0a:	f8c0 7544 	str.w	r7, [r0, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   19b0e:	f8c0 6548 	str.w	r6, [r0, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   19b12:	f8c0 354c 	str.w	r3, [r0, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
   19b16:	f002 0301 	and.w	r3, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   19b1a:	eb03 0252 	add.w	r2, r3, r2, lsr #1
   19b1e:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   19b22:	07e2      	lsls	r2, r4, #31
   19b24:	d411      	bmi.n	19b4a <nrfx_pwm_simple_playback+0x72>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
   19b26:	f014 0202 	ands.w	r2, r4, #2
   19b2a:	d003      	beq.n	19b34 <nrfx_pwm_simple_playback+0x5c>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   19b2c:	2b00      	cmp	r3, #0
   19b2e:	bf14      	ite	ne
   19b30:	2208      	movne	r2, #8
   19b32:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   19b34:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
   19b36:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
   19b3a:	bf18      	it	ne
   19b3c:	230c      	movne	r3, #12
   19b3e:	b2e2      	uxtb	r2, r4
   19b40:	bf08      	it	eq
   19b42:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   19b44:	bcf0      	pop	{r4, r5, r6, r7}
    return start_playback(p_instance, p_cb, flags,
   19b46:	f008 bcda 	b.w	224fe <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   19b4a:	2210      	movs	r2, #16
   19b4c:	e7f2      	b.n	19b34 <nrfx_pwm_simple_playback+0x5c>
   19b4e:	bf00      	nop
   19b50:	20020568 	.word	0x20020568

00019b54 <nrfx_pwm_is_stopped>:

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   19b54:	210c      	movs	r1, #12
   19b56:	4b08      	ldr	r3, [pc, #32]	; (19b78 <nrfx_pwm_is_stopped+0x24>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   19b58:	7902      	ldrb	r2, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   19b5a:	fb01 3202 	mla	r2, r1, r2, r3
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   19b5e:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   19b60:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19b62:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   19b66:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   19b68:	b919      	cbnz	r1, 19b72 <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   19b6a:	1e98      	subs	r0, r3, #2
   19b6c:	bf18      	it	ne
   19b6e:	2001      	movne	r0, #1
   19b70:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   19b72:	2001      	movs	r0, #1
   19b74:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   19b76:	4770      	bx	lr
   19b78:	20020568 	.word	0x20020568

00019b7c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
   19b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   19b7e:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19b80:	4b08      	ldr	r3, [pc, #32]	; (19ba4 <z_sys_init_run_level+0x28>)
   19b82:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   19b86:	3001      	adds	r0, #1
   19b88:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   19b8c:	42a6      	cmp	r6, r4
   19b8e:	d800      	bhi.n	19b92 <z_sys_init_run_level+0x16>
			}
		}
	}
}
   19b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   19b92:	e9d4 3500 	ldrd	r3, r5, [r4]
   19b96:	4628      	mov	r0, r5
   19b98:	4798      	blx	r3
		if (retval != 0) {
   19b9a:	b108      	cbz	r0, 19ba0 <z_sys_init_run_level+0x24>
			if (dev) {
   19b9c:	b105      	cbz	r5, 19ba0 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   19b9e:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19ba0:	3408      	adds	r4, #8
   19ba2:	e7f3      	b.n	19b8c <z_sys_init_run_level+0x10>
   19ba4:	0002a55c 	.word	0x0002a55c

00019ba8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   19ba8:	4b0f      	ldr	r3, [pc, #60]	; (19be8 <z_impl_device_get_binding+0x40>)
{
   19baa:	b570      	push	{r4, r5, r6, lr}
   19bac:	4605      	mov	r5, r0
   19bae:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   19bb0:	4c0e      	ldr	r4, [pc, #56]	; (19bec <z_impl_device_get_binding+0x44>)
   19bb2:	429c      	cmp	r4, r3
   19bb4:	d104      	bne.n	19bc0 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   19bb6:	4c0d      	ldr	r4, [pc, #52]	; (19bec <z_impl_device_get_binding+0x44>)
   19bb8:	42b4      	cmp	r4, r6
   19bba:	d108      	bne.n	19bce <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   19bbc:	2400      	movs	r4, #0
   19bbe:	e010      	b.n	19be2 <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
   19bc0:	68a2      	ldr	r2, [r4, #8]
   19bc2:	b112      	cbz	r2, 19bca <z_impl_device_get_binding+0x22>
   19bc4:	6822      	ldr	r2, [r4, #0]
   19bc6:	42aa      	cmp	r2, r5
   19bc8:	d00b      	beq.n	19be2 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   19bca:	3410      	adds	r4, #16
   19bcc:	e7f1      	b.n	19bb2 <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
   19bce:	68a3      	ldr	r3, [r4, #8]
   19bd0:	b90b      	cbnz	r3, 19bd6 <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   19bd2:	3410      	adds	r4, #16
   19bd4:	e7f0      	b.n	19bb8 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
   19bd6:	4628      	mov	r0, r5
   19bd8:	6821      	ldr	r1, [r4, #0]
   19bda:	f7fc f943 	bl	15e64 <strcmp>
		if ((dev->driver_api != NULL) &&
   19bde:	2800      	cmp	r0, #0
   19be0:	d1f7      	bne.n	19bd2 <z_impl_device_get_binding+0x2a>
}
   19be2:	4620      	mov	r0, r4
   19be4:	bd70      	pop	{r4, r5, r6, pc}
   19be6:	bf00      	nop
   19be8:	2002012c 	.word	0x2002012c
   19bec:	200200cc 	.word	0x200200cc

00019bf0 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   19bf0:	4b01      	ldr	r3, [pc, #4]	; (19bf8 <z_impl_z_errno+0x8>)
   19bf2:	6898      	ldr	r0, [r3, #8]
}
   19bf4:	305c      	adds	r0, #92	; 0x5c
   19bf6:	4770      	bx	lr
   19bf8:	2002065c 	.word	0x2002065c

00019bfc <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   19bfc:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   19bfe:	4d0b      	ldr	r5, [pc, #44]	; (19c2c <idle+0x30>)
   19c00:	f04f 0220 	mov.w	r2, #32
   19c04:	f3ef 8311 	mrs	r3, BASEPRI
   19c08:	f382 8811 	msr	BASEPRI, r2
   19c0c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   19c10:	f008 fdb6 	bl	22780 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   19c14:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   19c16:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   19c18:	2802      	cmp	r0, #2
   19c1a:	bfd8      	it	le
   19c1c:	4608      	movle	r0, r1
   19c1e:	f008 fdbf 	bl	227a0 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   19c22:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   19c24:	f7fe ff06 	bl	18a34 <arch_cpu_idle>
}
   19c28:	e7ea      	b.n	19c00 <idle+0x4>
   19c2a:	bf00      	nop
   19c2c:	2002065c 	.word	0x2002065c

00019c30 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   19c30:	4802      	ldr	r0, [pc, #8]	; (19c3c <z_bss_zero+0xc>)

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
   19c32:	4a03      	ldr	r2, [pc, #12]	; (19c40 <z_bss_zero+0x10>)
   19c34:	2100      	movs	r1, #0
   19c36:	1a12      	subs	r2, r2, r0
   19c38:	f00a bc54 	b.w	244e4 <memset>
   19c3c:	20020168 	.word	0x20020168
   19c40:	200282d8 	.word	0x200282d8

00019c44 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   19c44:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19c46:	4806      	ldr	r0, [pc, #24]	; (19c60 <z_data_copy+0x1c>)
   19c48:	4a06      	ldr	r2, [pc, #24]	; (19c64 <z_data_copy+0x20>)
   19c4a:	4907      	ldr	r1, [pc, #28]	; (19c68 <z_data_copy+0x24>)
   19c4c:	1a12      	subs	r2, r2, r0
   19c4e:	f00a fc22 	bl	24496 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   19c52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19c56:	4a05      	ldr	r2, [pc, #20]	; (19c6c <z_data_copy+0x28>)
   19c58:	4905      	ldr	r1, [pc, #20]	; (19c70 <z_data_copy+0x2c>)
   19c5a:	4806      	ldr	r0, [pc, #24]	; (19c74 <z_data_copy+0x30>)
   19c5c:	f00a bc1b 	b.w	24496 <memcpy>
   19c60:	20020000 	.word	0x20020000
   19c64:	20020168 	.word	0x20020168
   19c68:	0002d2a0 	.word	0x0002d2a0
   19c6c:	00000000 	.word	0x00000000
   19c70:	0002d2a0 	.word	0x0002d2a0
   19c74:	20020000 	.word	0x20020000

00019c78 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   19c78:	2201      	movs	r2, #1
{
   19c7a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   19c7c:	4b0d      	ldr	r3, [pc, #52]	; (19cb4 <bg_thread_main+0x3c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   19c7e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   19c80:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   19c82:	f7ff ff7b 	bl	19b7c <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   19c86:	4a0c      	ldr	r2, [pc, #48]	; (19cb8 <bg_thread_main+0x40>)
   19c88:	490c      	ldr	r1, [pc, #48]	; (19cbc <bg_thread_main+0x44>)
   19c8a:	480d      	ldr	r0, [pc, #52]	; (19cc0 <bg_thread_main+0x48>)
   19c8c:	f008 f9e4 	bl	22058 <printk>

#ifdef CONFIG_CPLUSPLUS
	/* Process the .ctors and .init_array sections */
	extern void __do_global_ctors_aux(void);
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
   19c90:	f7fe fc3a 	bl	18508 <__do_global_ctors_aux>
	__do_init_array_aux();
   19c94:	f7fe fc2a 	bl	184ec <__do_init_array_aux>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   19c98:	2003      	movs	r0, #3
   19c9a:	f7ff ff6f 	bl	19b7c <z_sys_init_run_level>

	z_init_static_threads();
   19c9e:	f000 fc0f 	bl	1a4c0 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   19ca2:	f008 f962 	bl	21f6a <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   19ca6:	4a07      	ldr	r2, [pc, #28]	; (19cc4 <bg_thread_main+0x4c>)
   19ca8:	7b13      	ldrb	r3, [r2, #12]
   19caa:	f023 0301 	bic.w	r3, r3, #1
   19cae:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   19cb0:	bd08      	pop	{r3, pc}
   19cb2:	bf00      	nop
   19cb4:	200282ce 	.word	0x200282ce
   19cb8:	0002afd8 	.word	0x0002afd8
   19cbc:	0002afd9 	.word	0x0002afd9
   19cc0:	0002afe9 	.word	0x0002afe9
   19cc4:	200205e8 	.word	0x200205e8

00019cc8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   19cc8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   19ccc:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 19dbc <z_cstart+0xf4>
   19cd0:	b0a5      	sub	sp, #148	; 0x94
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   19cd2:	f389 8808 	msr	MSP, r9
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19cd6:	2400      	movs	r4, #0
   19cd8:	23e0      	movs	r3, #224	; 0xe0
   19cda:	4d31      	ldr	r5, [pc, #196]	; (19da0 <z_cstart+0xd8>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   19cdc:	f04f 0b01 	mov.w	fp, #1
   19ce0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   19ce4:	77ec      	strb	r4, [r5, #31]
   19ce6:	762c      	strb	r4, [r5, #24]
   19ce8:	766c      	strb	r4, [r5, #25]
   19cea:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   19cec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   19cee:	4e2d      	ldr	r6, [pc, #180]	; (19da4 <z_cstart+0xdc>)
   19cf0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   19cf4:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   19cf6:	f7fe fff7 	bl	18ce8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   19cfa:	f7fe fe95 	bl	18a28 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   19cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19d02:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   19d04:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   19d06:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   19d0a:	4d27      	ldr	r5, [pc, #156]	; (19da8 <z_cstart+0xe0>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   19d0c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
   19d10:	ab07      	add	r3, sp, #28
   19d12:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   19d14:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   19d16:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
   19d1a:	f7ff ff2f 	bl	19b7c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   19d1e:	2001      	movs	r0, #1
   19d20:	f7ff ff2c 	bl	19b7c <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   19d24:	f8df a098 	ldr.w	sl, [pc, #152]	; 19dc0 <z_cstart+0xf8>
	z_sched_init();
   19d28:	f000 fada 	bl	1a2e0 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   19d2c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 19dc4 <z_cstart+0xfc>
   19d30:	4b1e      	ldr	r3, [pc, #120]	; (19dac <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   19d32:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   19d34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   19d38:	4641      	mov	r1, r8
   19d3a:	4630      	mov	r0, r6
   19d3c:	9305      	str	r3, [sp, #20]
   19d3e:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   19d42:	4653      	mov	r3, sl
   19d44:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19d48:	9400      	str	r4, [sp, #0]
   19d4a:	f000 fb93 	bl	1a474 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19d4e:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   19d50:	4630      	mov	r0, r6
   19d52:	f023 0304 	bic.w	r3, r3, #4
   19d56:	7373      	strb	r3, [r6, #13]
   19d58:	f008 fc51 	bl	225fe <z_ready_thread>
	z_setup_new_thread(thread, stack,
   19d5c:	230f      	movs	r3, #15
   19d5e:	4f14      	ldr	r7, [pc, #80]	; (19db0 <z_cstart+0xe8>)
   19d60:	f44f 72a0 	mov.w	r2, #320	; 0x140
   19d64:	4638      	mov	r0, r7
   19d66:	e9cd 4302 	strd	r4, r3, [sp, #8]
   19d6a:	4912      	ldr	r1, [pc, #72]	; (19db4 <z_cstart+0xec>)
   19d6c:	4b12      	ldr	r3, [pc, #72]	; (19db8 <z_cstart+0xf0>)
   19d6e:	e9cd b404 	strd	fp, r4, [sp, #16]
   19d72:	e9cd 4400 	strd	r4, r4, [sp]
   19d76:	f000 fb7d 	bl	1a474 <z_setup_new_thread>
   19d7a:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   19d7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   19d80:	f023 0304 	bic.w	r3, r3, #4
   19d84:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   19d86:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   19d8a:	e9c5 3306 	strd	r3, r3, [r5, #24]
   19d8e:	4641      	mov	r1, r8
   19d90:	4653      	mov	r3, sl
   19d92:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   19d94:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   19d96:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   19d98:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   19d9c:	f7fe fe26 	bl	189ec <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   19da0:	e000ed00 	.word	0xe000ed00
   19da4:	200205e8 	.word	0x200205e8
   19da8:	2002065c 	.word	0x2002065c
   19dac:	0002b010 	.word	0x0002b010
   19db0:	20020574 	.word	0x20020574
   19db4:	2002a2d8 	.word	0x2002a2d8
   19db8:	00019bfd 	.word	0x00019bfd
   19dbc:	2002ac18 	.word	0x2002ac18
   19dc0:	00019c79 	.word	0x00019c79
   19dc4:	200282d8 	.word	0x200282d8

00019dc8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   19dc8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   19dca:	4c08      	ldr	r4, [pc, #32]	; (19dec <z_reset_time_slice+0x24>)
   19dcc:	6823      	ldr	r3, [r4, #0]
   19dce:	b15b      	cbz	r3, 19de8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   19dd0:	f7fe fd64 	bl	1889c <z_clock_elapsed>
   19dd4:	6822      	ldr	r2, [r4, #0]
   19dd6:	4906      	ldr	r1, [pc, #24]	; (19df0 <z_reset_time_slice+0x28>)
   19dd8:	4410      	add	r0, r2
   19dda:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   19ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   19de0:	2100      	movs	r1, #0
   19de2:	4610      	mov	r0, r2
   19de4:	f008 bcdc 	b.w	227a0 <z_set_timeout_expiry>
}
   19de8:	bd10      	pop	{r4, pc}
   19dea:	bf00      	nop
   19dec:	20020694 	.word	0x20020694
   19df0:	2002065c 	.word	0x2002065c

00019df4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   19df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19df6:	460c      	mov	r4, r1
   19df8:	f04f 0320 	mov.w	r3, #32
   19dfc:	f3ef 8511 	mrs	r5, BASEPRI
   19e00:	f383 8811 	msr	BASEPRI, r3
   19e04:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   19e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   19e0c:	f240 36e7 	movw	r6, #999	; 0x3e7
   19e10:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   19e12:	2200      	movs	r2, #0
   19e14:	fbe1 6700 	umlal	r6, r7, r1, r0
   19e18:	4b09      	ldr	r3, [pc, #36]	; (19e40 <k_sched_time_slice_set+0x4c>)
   19e1a:	4630      	mov	r0, r6
   19e1c:	611a      	str	r2, [r3, #16]
   19e1e:	4639      	mov	r1, r7
   19e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19e24:	2300      	movs	r3, #0
   19e26:	f7f4 feed 	bl	ec04 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   19e2a:	4b06      	ldr	r3, [pc, #24]	; (19e44 <k_sched_time_slice_set+0x50>)
   19e2c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   19e2e:	4b06      	ldr	r3, [pc, #24]	; (19e48 <k_sched_time_slice_set+0x54>)
   19e30:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   19e32:	f7ff ffc9 	bl	19dc8 <z_reset_time_slice>
	__asm__ volatile(
   19e36:	f385 8811 	msr	BASEPRI, r5
   19e3a:	f3bf 8f6f 	isb	sy
	}
}
   19e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19e40:	2002065c 	.word	0x2002065c
   19e44:	20020694 	.word	0x20020694
   19e48:	20020690 	.word	0x20020690

00019e4c <k_sched_lock>:
	__asm__ volatile(
   19e4c:	f04f 0320 	mov.w	r3, #32
   19e50:	f3ef 8111 	mrs	r1, BASEPRI
   19e54:	f383 8811 	msr	BASEPRI, r3
   19e58:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   19e5c:	4b04      	ldr	r3, [pc, #16]	; (19e70 <k_sched_lock+0x24>)
   19e5e:	689a      	ldr	r2, [r3, #8]
   19e60:	7bd3      	ldrb	r3, [r2, #15]
   19e62:	3b01      	subs	r3, #1
   19e64:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   19e66:	f381 8811 	msr	BASEPRI, r1
   19e6a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   19e6e:	4770      	bx	lr
   19e70:	2002065c 	.word	0x2002065c

00019e74 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   19e74:	4b09      	ldr	r3, [pc, #36]	; (19e9c <z_priq_dumb_remove+0x28>)
   19e76:	f103 0228 	add.w	r2, r3, #40	; 0x28
   19e7a:	4282      	cmp	r2, r0
   19e7c:	d105      	bne.n	19e8a <z_priq_dumb_remove+0x16>
   19e7e:	689b      	ldr	r3, [r3, #8]
   19e80:	428b      	cmp	r3, r1
   19e82:	d102      	bne.n	19e8a <z_priq_dumb_remove+0x16>
   19e84:	7b4b      	ldrb	r3, [r1, #13]
   19e86:	06db      	lsls	r3, r3, #27
   19e88:	d106      	bne.n	19e98 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   19e8a:	e9d1 3200 	ldrd	r3, r2, [r1]
   19e8e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   19e90:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19e92:	2300      	movs	r3, #0
	node->prev = NULL;
   19e94:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   19e98:	4770      	bx	lr
   19e9a:	bf00      	nop
   19e9c:	2002065c 	.word	0x2002065c

00019ea0 <update_cache>:
{
   19ea0:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   19ea2:	4c10      	ldr	r4, [pc, #64]	; (19ee4 <update_cache+0x44>)
{
   19ea4:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   19ea6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   19eaa:	f008 fb9e 	bl	225ea <z_priq_dumb_best>
   19eae:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   19eb0:	68a3      	ldr	r3, [r4, #8]
   19eb2:	7b59      	ldrb	r1, [r3, #13]
   19eb4:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   19eb6:	bf44      	itt	mi
   19eb8:	f041 0108 	orrmi.w	r1, r1, #8
   19ebc:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   19ebe:	b905      	cbnz	r5, 19ec2 <update_cache+0x22>
   19ec0:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   19ec2:	b94e      	cbnz	r6, 19ed8 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   19ec4:	7b5a      	ldrb	r2, [r3, #13]
   19ec6:	06d2      	lsls	r2, r2, #27
   19ec8:	d106      	bne.n	19ed8 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   19eca:	69aa      	ldr	r2, [r5, #24]
   19ecc:	b922      	cbnz	r2, 19ed8 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   19ece:	89da      	ldrh	r2, [r3, #14]
   19ed0:	2a7f      	cmp	r2, #127	; 0x7f
   19ed2:	d901      	bls.n	19ed8 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   19ed4:	6263      	str	r3, [r4, #36]	; 0x24
}
   19ed6:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   19ed8:	42ab      	cmp	r3, r5
   19eda:	d001      	beq.n	19ee0 <update_cache+0x40>
			z_reset_time_slice();
   19edc:	f7ff ff74 	bl	19dc8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   19ee0:	6265      	str	r5, [r4, #36]	; 0x24
}
   19ee2:	e7f8      	b.n	19ed6 <update_cache+0x36>
   19ee4:	2002065c 	.word	0x2002065c

00019ee8 <k_sched_unlock>:
{
   19ee8:	b510      	push	{r4, lr}
	__asm__ volatile(
   19eea:	f04f 0320 	mov.w	r3, #32
   19eee:	f3ef 8411 	mrs	r4, BASEPRI
   19ef2:	f383 8811 	msr	BASEPRI, r3
   19ef6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   19efa:	4b08      	ldr	r3, [pc, #32]	; (19f1c <k_sched_unlock+0x34>)
		update_cache(0);
   19efc:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   19efe:	689a      	ldr	r2, [r3, #8]
   19f00:	7bd3      	ldrb	r3, [r2, #15]
   19f02:	3301      	adds	r3, #1
   19f04:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   19f06:	f7ff ffcb 	bl	19ea0 <update_cache>
	__asm__ volatile(
   19f0a:	f384 8811 	msr	BASEPRI, r4
   19f0e:	f3bf 8f6f 	isb	sy
}
   19f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   19f16:	f008 bb5e 	b.w	225d6 <z_reschedule_unlocked>
   19f1a:	bf00      	nop
   19f1c:	2002065c 	.word	0x2002065c

00019f20 <ready_thread>:
{
   19f20:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   19f22:	7b43      	ldrb	r3, [r0, #13]
   19f24:	06db      	lsls	r3, r3, #27
   19f26:	d12a      	bne.n	19f7e <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   19f28:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
   19f2a:	bb43      	cbnz	r3, 19f7e <ready_thread+0x5e>
	return list->head == list;
   19f2c:	4a15      	ldr	r2, [pc, #84]	; (19f84 <ready_thread+0x64>)
   19f2e:	4611      	mov	r1, r2
   19f30:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19f34:	428c      	cmp	r4, r1
   19f36:	bf18      	it	ne
   19f38:	4623      	movne	r3, r4
   19f3a:	2b00      	cmp	r3, #0
   19f3c:	bf38      	it	cc
   19f3e:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19f40:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19f42:	b1b3      	cbz	r3, 19f72 <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   19f44:	f990 600e 	ldrsb.w	r6, [r0, #14]
   19f48:	f993 500e 	ldrsb.w	r5, [r3, #14]
   19f4c:	42ae      	cmp	r6, r5
   19f4e:	db03      	blt.n	19f58 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
   19f50:	42a3      	cmp	r3, r4
   19f52:	d00e      	beq.n	19f72 <ready_thread+0x52>
   19f54:	681b      	ldr	r3, [r3, #0]
   19f56:	e7f4      	b.n	19f42 <ready_thread+0x22>
	node->prev = successor->prev;
   19f58:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19f5a:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   19f5e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   19f60:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   19f62:	7b43      	ldrb	r3, [r0, #13]
   19f64:	f063 037f 	orn	r3, r3, #127	; 0x7f
   19f68:	7343      	strb	r3, [r0, #13]
}
   19f6a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   19f6c:	2000      	movs	r0, #0
   19f6e:	f7ff bf97 	b.w	19ea0 <update_cache>
	node->prev = list->tail;
   19f72:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   19f76:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   19f78:	6018      	str	r0, [r3, #0]
	list->tail = node;
   19f7a:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   19f7c:	e7f1      	b.n	19f62 <ready_thread+0x42>
}
   19f7e:	bc70      	pop	{r4, r5, r6}
   19f80:	4770      	bx	lr
   19f82:	bf00      	nop
   19f84:	2002065c 	.word	0x2002065c

00019f88 <z_sched_start>:
{
   19f88:	b510      	push	{r4, lr}
	__asm__ volatile(
   19f8a:	f04f 0220 	mov.w	r2, #32
   19f8e:	f3ef 8411 	mrs	r4, BASEPRI
   19f92:	f382 8811 	msr	BASEPRI, r2
   19f96:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   19f9a:	7b42      	ldrb	r2, [r0, #13]
   19f9c:	0751      	lsls	r1, r2, #29
   19f9e:	d404      	bmi.n	19faa <z_sched_start+0x22>
	__asm__ volatile(
   19fa0:	f384 8811 	msr	BASEPRI, r4
   19fa4:	f3bf 8f6f 	isb	sy
}
   19fa8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   19faa:	f022 0204 	bic.w	r2, r2, #4
   19fae:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   19fb0:	f7ff ffb6 	bl	19f20 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   19fb4:	4621      	mov	r1, r4
}
   19fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   19fba:	4801      	ldr	r0, [pc, #4]	; (19fc0 <z_sched_start+0x38>)
   19fbc:	f008 baf4 	b.w	225a8 <z_reschedule>
   19fc0:	200282cf 	.word	0x200282cf

00019fc4 <z_move_thread_to_end_of_prio_q>:
{
   19fc4:	4601      	mov	r1, r0
   19fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   19fc8:	f04f 0320 	mov.w	r3, #32
   19fcc:	f3ef 8411 	mrs	r4, BASEPRI
   19fd0:	f383 8811 	msr	BASEPRI, r3
   19fd4:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   19fd8:	f990 300d 	ldrsb.w	r3, [r0, #13]
   19fdc:	2b00      	cmp	r3, #0
   19fde:	da02      	bge.n	19fe6 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   19fe0:	4819      	ldr	r0, [pc, #100]	; (1a048 <z_move_thread_to_end_of_prio_q+0x84>)
   19fe2:	f7ff ff47 	bl	19e74 <z_priq_dumb_remove>
	return list->head == list;
   19fe6:	4a19      	ldr	r2, [pc, #100]	; (1a04c <z_move_thread_to_end_of_prio_q+0x88>)
   19fe8:	4610      	mov	r0, r2
   19fea:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   19fee:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19ff0:	4283      	cmp	r3, r0
   19ff2:	bf08      	it	eq
   19ff4:	2300      	moveq	r3, #0
   19ff6:	2b00      	cmp	r3, #0
   19ff8:	bf38      	it	cc
   19ffa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19ffc:	b1eb      	cbz	r3, 1a03a <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   19ffe:	f991 700e 	ldrsb.w	r7, [r1, #14]
   1a002:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1a006:	42b7      	cmp	r7, r6
   1a008:	db03      	blt.n	1a012 <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1a00a:	429d      	cmp	r5, r3
   1a00c:	d015      	beq.n	1a03a <z_move_thread_to_end_of_prio_q+0x76>
   1a00e:	681b      	ldr	r3, [r3, #0]
   1a010:	e7f4      	b.n	19ffc <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
   1a012:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1a014:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1a018:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1a01a:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1a01c:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   1a01e:	6890      	ldr	r0, [r2, #8]
   1a020:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a024:	734b      	strb	r3, [r1, #13]
   1a026:	1a43      	subs	r3, r0, r1
   1a028:	4258      	negs	r0, r3
   1a02a:	4158      	adcs	r0, r3
   1a02c:	f7ff ff38 	bl	19ea0 <update_cache>
	__asm__ volatile(
   1a030:	f384 8811 	msr	BASEPRI, r4
   1a034:	f3bf 8f6f 	isb	sy
}
   1a038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   1a03a:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
   1a03e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1a040:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1a042:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1a044:	e7ea      	b.n	1a01c <z_move_thread_to_end_of_prio_q+0x58>
   1a046:	bf00      	nop
   1a048:	20020684 	.word	0x20020684
   1a04c:	2002065c 	.word	0x2002065c

0001a050 <z_time_slice>:
{
   1a050:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1a052:	4a15      	ldr	r2, [pc, #84]	; (1a0a8 <z_time_slice+0x58>)
   1a054:	4b15      	ldr	r3, [pc, #84]	; (1a0ac <z_time_slice+0x5c>)
   1a056:	6814      	ldr	r4, [r2, #0]
{
   1a058:	4601      	mov	r1, r0
	if (pending_current == _current) {
   1a05a:	6898      	ldr	r0, [r3, #8]
   1a05c:	42a0      	cmp	r0, r4
   1a05e:	461c      	mov	r4, r3
   1a060:	d103      	bne.n	1a06a <z_time_slice+0x1a>
}
   1a062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1a066:	f7ff beaf 	b.w	19dc8 <z_reset_time_slice>
	pending_current = NULL;
   1a06a:	2500      	movs	r5, #0
   1a06c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1a06e:	4a10      	ldr	r2, [pc, #64]	; (1a0b0 <z_time_slice+0x60>)
   1a070:	6812      	ldr	r2, [r2, #0]
   1a072:	b1b2      	cbz	r2, 1a0a2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1a074:	89c2      	ldrh	r2, [r0, #14]
   1a076:	2a7f      	cmp	r2, #127	; 0x7f
   1a078:	d813      	bhi.n	1a0a2 <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1a07a:	4a0e      	ldr	r2, [pc, #56]	; (1a0b4 <z_time_slice+0x64>)
   1a07c:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1a080:	6812      	ldr	r2, [r2, #0]
   1a082:	4295      	cmp	r5, r2
   1a084:	db0d      	blt.n	1a0a2 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   1a086:	4a0c      	ldr	r2, [pc, #48]	; (1a0b8 <z_time_slice+0x68>)
   1a088:	4290      	cmp	r0, r2
   1a08a:	d00a      	beq.n	1a0a2 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1a08c:	6982      	ldr	r2, [r0, #24]
   1a08e:	b942      	cbnz	r2, 1a0a2 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1a090:	691a      	ldr	r2, [r3, #16]
   1a092:	428a      	cmp	r2, r1
   1a094:	dc02      	bgt.n	1a09c <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1a096:	f7ff ff95 	bl	19fc4 <z_move_thread_to_end_of_prio_q>
   1a09a:	e7e2      	b.n	1a062 <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   1a09c:	1a52      	subs	r2, r2, r1
   1a09e:	611a      	str	r2, [r3, #16]
}
   1a0a0:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1a0a2:	2300      	movs	r3, #0
   1a0a4:	6123      	str	r3, [r4, #16]
   1a0a6:	e7fb      	b.n	1a0a0 <z_time_slice+0x50>
   1a0a8:	2002068c 	.word	0x2002068c
   1a0ac:	2002065c 	.word	0x2002065c
   1a0b0:	20020694 	.word	0x20020694
   1a0b4:	20020690 	.word	0x20020690
   1a0b8:	20020574 	.word	0x20020574

0001a0bc <z_impl_k_thread_suspend>:
{
   1a0bc:	b570      	push	{r4, r5, r6, lr}
   1a0be:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1a0c0:	3018      	adds	r0, #24
   1a0c2:	f008 fb47 	bl	22754 <z_abort_timeout>
	__asm__ volatile(
   1a0c6:	f04f 0320 	mov.w	r3, #32
   1a0ca:	f3ef 8611 	mrs	r6, BASEPRI
   1a0ce:	f383 8811 	msr	BASEPRI, r3
   1a0d2:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1a0d6:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1a0da:	2b00      	cmp	r3, #0
   1a0dc:	da07      	bge.n	1a0ee <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1a0de:	4621      	mov	r1, r4
   1a0e0:	480e      	ldr	r0, [pc, #56]	; (1a11c <z_impl_k_thread_suspend+0x60>)
   1a0e2:	f7ff fec7 	bl	19e74 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1a0e6:	7b63      	ldrb	r3, [r4, #13]
   1a0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a0ec:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1a0ee:	4d0c      	ldr	r5, [pc, #48]	; (1a120 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a0f0:	7b63      	ldrb	r3, [r4, #13]
   1a0f2:	68a8      	ldr	r0, [r5, #8]
   1a0f4:	f043 0310 	orr.w	r3, r3, #16
   1a0f8:	7363      	strb	r3, [r4, #13]
   1a0fa:	1b03      	subs	r3, r0, r4
   1a0fc:	4258      	negs	r0, r3
   1a0fe:	4158      	adcs	r0, r3
   1a100:	f7ff fece 	bl	19ea0 <update_cache>
	__asm__ volatile(
   1a104:	f386 8811 	msr	BASEPRI, r6
   1a108:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1a10c:	68ab      	ldr	r3, [r5, #8]
   1a10e:	42a3      	cmp	r3, r4
   1a110:	d103      	bne.n	1a11a <z_impl_k_thread_suspend+0x5e>
}
   1a112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1a116:	f008 ba5e 	b.w	225d6 <z_reschedule_unlocked>
}
   1a11a:	bd70      	pop	{r4, r5, r6, pc}
   1a11c:	20020684 	.word	0x20020684
   1a120:	2002065c 	.word	0x2002065c

0001a124 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1a124:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
   1a126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a12a:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1a12c:	b103      	cbz	r3, 1a130 <z_thread_single_abort+0xc>
		thread->fn_abort();
   1a12e:	4798      	blx	r3
   1a130:	f104 0018 	add.w	r0, r4, #24
   1a134:	f008 fb0e 	bl	22754 <z_abort_timeout>
	__asm__ volatile(
   1a138:	f04f 0320 	mov.w	r3, #32
   1a13c:	f3ef 8611 	mrs	r6, BASEPRI
   1a140:	f383 8811 	msr	BASEPRI, r3
   1a144:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1a148:	7b63      	ldrb	r3, [r4, #13]
   1a14a:	06d8      	lsls	r0, r3, #27
   1a14c:	d123      	bne.n	1a196 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   1a14e:	69a2      	ldr	r2, [r4, #24]
   1a150:	bb0a      	cbnz	r2, 1a196 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   1a152:	0619      	lsls	r1, r3, #24
   1a154:	d507      	bpl.n	1a166 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   1a156:	4621      	mov	r1, r4
   1a158:	481e      	ldr	r0, [pc, #120]	; (1a1d4 <z_thread_single_abort+0xb0>)
   1a15a:	f7ff fe8b 	bl	19e74 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1a15e:	7b63      	ldrb	r3, [r4, #13]
   1a160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a164:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1a166:	4b1c      	ldr	r3, [pc, #112]	; (1a1d8 <z_thread_single_abort+0xb4>)
   1a168:	6898      	ldr	r0, [r3, #8]
   1a16a:	1b02      	subs	r2, r0, r4
   1a16c:	4250      	negs	r0, r2
   1a16e:	4150      	adcs	r0, r2
   1a170:	f7ff fe96 	bl	19ea0 <update_cache>
			waiter->base.pended_on = NULL;
   1a174:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   1a176:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1a178:	f104 0828 	add.w	r8, r4, #40	; 0x28
   1a17c:	f043 0308 	orr.w	r3, r3, #8
   1a180:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1a182:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a184:	4545      	cmp	r5, r8
   1a186:	d000      	beq.n	1a18a <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1a188:	b995      	cbnz	r5, 1a1b0 <z_thread_single_abort+0x8c>
	__asm__ volatile(
   1a18a:	f386 8811 	msr	BASEPRI, r6
   1a18e:	f3bf 8f6f 	isb	sy
}
   1a192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   1a196:	079b      	lsls	r3, r3, #30
   1a198:	d5ec      	bpl.n	1a174 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1a19a:	4621      	mov	r1, r4
   1a19c:	68a0      	ldr	r0, [r4, #8]
   1a19e:	f7ff fe69 	bl	19e74 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1a1a2:	7b63      	ldrb	r3, [r4, #13]
   1a1a4:	f023 0302 	bic.w	r3, r3, #2
   1a1a8:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1a1aa:	2300      	movs	r3, #0
   1a1ac:	60a3      	str	r3, [r4, #8]
   1a1ae:	e7e1      	b.n	1a174 <z_thread_single_abort+0x50>
   1a1b0:	f105 0018 	add.w	r0, r5, #24
   1a1b4:	f008 face 	bl	22754 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1a1b8:	68a8      	ldr	r0, [r5, #8]
   1a1ba:	4629      	mov	r1, r5
   1a1bc:	f7ff fe5a 	bl	19e74 <z_priq_dumb_remove>
   1a1c0:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1a1c2:	4628      	mov	r0, r5
   1a1c4:	f023 0302 	bic.w	r3, r3, #2
   1a1c8:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1a1ca:	60af      	str	r7, [r5, #8]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1a1cc:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
   1a1ce:	f7ff fea7 	bl	19f20 <ready_thread>
   1a1d2:	e7d6      	b.n	1a182 <z_thread_single_abort+0x5e>
   1a1d4:	20020684 	.word	0x20020684
   1a1d8:	2002065c 	.word	0x2002065c

0001a1dc <unready_thread>:
{
   1a1dc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1a1de:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1a1e2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1a1e4:	2b00      	cmp	r3, #0
   1a1e6:	da06      	bge.n	1a1f6 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1a1e8:	4807      	ldr	r0, [pc, #28]	; (1a208 <unready_thread+0x2c>)
   1a1ea:	f7ff fe43 	bl	19e74 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1a1ee:	7b4b      	ldrb	r3, [r1, #13]
   1a1f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1a1f4:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1a1f6:	4b05      	ldr	r3, [pc, #20]	; (1a20c <unready_thread+0x30>)
   1a1f8:	6898      	ldr	r0, [r3, #8]
   1a1fa:	1a43      	subs	r3, r0, r1
   1a1fc:	4258      	negs	r0, r3
   1a1fe:	4158      	adcs	r0, r3
}
   1a200:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1a204:	f7ff be4c 	b.w	19ea0 <update_cache>
   1a208:	20020684 	.word	0x20020684
   1a20c:	2002065c 	.word	0x2002065c

0001a210 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   1a210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a212:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1a214:	f008 fadf 	bl	227d6 <z_tick_get_32>
   1a218:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1a21a:	f04f 0320 	mov.w	r3, #32
   1a21e:	f3ef 8711 	mrs	r7, BASEPRI
   1a222:	f383 8811 	msr	BASEPRI, r3
   1a226:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1a22a:	4e0d      	ldr	r6, [pc, #52]	; (1a260 <z_tick_sleep.part.0+0x50>)
   1a22c:	4b0d      	ldr	r3, [pc, #52]	; (1a264 <z_tick_sleep.part.0+0x54>)
   1a22e:	68b0      	ldr	r0, [r6, #8]
   1a230:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1a232:	f008 fa1f 	bl	22674 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   1a236:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1a238:	490b      	ldr	r1, [pc, #44]	; (1a268 <z_tick_sleep.part.0+0x58>)
   1a23a:	462a      	mov	r2, r5
   1a23c:	17eb      	asrs	r3, r5, #31
   1a23e:	3018      	adds	r0, #24
   1a240:	f000 f9da 	bl	1a5f8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1a244:	68b2      	ldr	r2, [r6, #8]
	ret = arch_swap(key);
   1a246:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1a248:	7b53      	ldrb	r3, [r2, #13]
   1a24a:	f043 0310 	orr.w	r3, r3, #16
   1a24e:	7353      	strb	r3, [r2, #13]
   1a250:	f7fe fb3e 	bl	188d0 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1a254:	f008 fabf 	bl	227d6 <z_tick_get_32>
   1a258:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1a25a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1a25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a260:	2002065c 	.word	0x2002065c
   1a264:	2002068c 	.word	0x2002068c
   1a268:	0002261f 	.word	0x0002261f

0001a26c <pend>:
{
   1a26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a270:	4606      	mov	r6, r0
   1a272:	4614      	mov	r4, r2
   1a274:	461d      	mov	r5, r3
   1a276:	f04f 0320 	mov.w	r3, #32
   1a27a:	f3ef 8711 	mrs	r7, BASEPRI
   1a27e:	f383 8811 	msr	BASEPRI, r3
   1a282:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1a286:	f008 fa05 	bl	22694 <add_to_waitq_locked>
	__asm__ volatile(
   1a28a:	f387 8811 	msr	BASEPRI, r7
   1a28e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a292:	1c6b      	adds	r3, r5, #1
   1a294:	bf08      	it	eq
   1a296:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1a29a:	d008      	beq.n	1a2ae <pend+0x42>
   1a29c:	4622      	mov	r2, r4
   1a29e:	462b      	mov	r3, r5
   1a2a0:	f106 0018 	add.w	r0, r6, #24
   1a2a4:	4903      	ldr	r1, [pc, #12]	; (1a2b4 <pend+0x48>)
}
   1a2a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a2aa:	f000 b9a5 	b.w	1a5f8 <z_add_timeout>
   1a2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a2b2:	bf00      	nop
   1a2b4:	0002261f 	.word	0x0002261f

0001a2b8 <z_pend_curr>:
{
   1a2b8:	b510      	push	{r4, lr}
   1a2ba:	460c      	mov	r4, r1
	pending_current = _current;
   1a2bc:	4b06      	ldr	r3, [pc, #24]	; (1a2d8 <z_pend_curr+0x20>)
{
   1a2be:	4611      	mov	r1, r2
	pending_current = _current;
   1a2c0:	6898      	ldr	r0, [r3, #8]
   1a2c2:	4b06      	ldr	r3, [pc, #24]	; (1a2dc <z_pend_curr+0x24>)
   1a2c4:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   1a2c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a2ca:	f7ff ffcf 	bl	1a26c <pend>
   1a2ce:	4620      	mov	r0, r4
}
   1a2d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a2d4:	f7fe bafc 	b.w	188d0 <arch_swap>
   1a2d8:	2002065c 	.word	0x2002065c
   1a2dc:	2002068c 	.word	0x2002068c

0001a2e0 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1a2e0:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   1a2e2:	4b04      	ldr	r3, [pc, #16]	; (1a2f4 <z_sched_init+0x14>)
   1a2e4:	4608      	mov	r0, r1
   1a2e6:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1a2ea:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1a2ee:	f7ff bd81 	b.w	19df4 <k_sched_time_slice_set>
   1a2f2:	bf00      	nop
   1a2f4:	2002065c 	.word	0x2002065c

0001a2f8 <z_impl_k_yield>:
{
   1a2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1a2fa:	4c24      	ldr	r4, [pc, #144]	; (1a38c <z_impl_k_yield+0x94>)
   1a2fc:	4b24      	ldr	r3, [pc, #144]	; (1a390 <z_impl_k_yield+0x98>)
   1a2fe:	68a2      	ldr	r2, [r4, #8]
   1a300:	429a      	cmp	r2, r3
   1a302:	d030      	beq.n	1a366 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1a304:	f04f 0320 	mov.w	r3, #32
   1a308:	f3ef 8511 	mrs	r5, BASEPRI
   1a30c:	f383 8811 	msr	BASEPRI, r3
   1a310:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1a314:	68a1      	ldr	r1, [r4, #8]
   1a316:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a31a:	f7ff fdab 	bl	19e74 <z_priq_dumb_remove>
	return list->head == list;
   1a31e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1a320:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a322:	4283      	cmp	r3, r0
   1a324:	bf08      	it	eq
   1a326:	2300      	moveq	r3, #0
   1a328:	2b00      	cmp	r3, #0
   1a32a:	bf38      	it	cc
   1a32c:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a32e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1a330:	b32b      	cbz	r3, 1a37e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1a332:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1a336:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1a33a:	42b7      	cmp	r7, r6
   1a33c:	db03      	blt.n	1a346 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1a33e:	428b      	cmp	r3, r1
   1a340:	d01d      	beq.n	1a37e <z_impl_k_yield+0x86>
   1a342:	681b      	ldr	r3, [r3, #0]
   1a344:	e7f4      	b.n	1a330 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1a346:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1a348:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1a34c:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1a34e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1a350:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   1a352:	2001      	movs	r0, #1
   1a354:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1a358:	7353      	strb	r3, [r2, #13]
   1a35a:	f7ff fda1 	bl	19ea0 <update_cache>
	__asm__ volatile(
   1a35e:	f385 8811 	msr	BASEPRI, r5
   1a362:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1a366:	f04f 0320 	mov.w	r3, #32
   1a36a:	f3ef 8011 	mrs	r0, BASEPRI
   1a36e:	f383 8811 	msr	BASEPRI, r3
   1a372:	f3bf 8f6f 	isb	sy
}
   1a376:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1a37a:	f7fe baa9 	b.w	188d0 <arch_swap>
	node->prev = list->tail;
   1a37e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1a382:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a384:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1a386:	62e2      	str	r2, [r4, #44]	; 0x2c
}
   1a388:	e7e2      	b.n	1a350 <z_impl_k_yield+0x58>
   1a38a:	bf00      	nop
   1a38c:	2002065c 	.word	0x2002065c
   1a390:	20020574 	.word	0x20020574

0001a394 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1a394:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a396:	3301      	adds	r3, #1
   1a398:	bf08      	it	eq
   1a39a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1a39e:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a3a0:	d106      	bne.n	1a3b0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1a3a2:	4b0b      	ldr	r3, [pc, #44]	; (1a3d0 <z_impl_k_sleep+0x3c>)
   1a3a4:	6898      	ldr	r0, [r3, #8]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
   1a3a6:	f7ff fe89 	bl	1a0bc <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
   1a3aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1a3ae:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   1a3b0:	4604      	mov	r4, r0
	if (ticks == 0) {
   1a3b2:	b948      	cbnz	r0, 1a3c8 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   1a3b4:	f7ff ffa0 	bl	1a2f8 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   1a3b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1a3bc:	fb84 3400 	smull	r3, r4, r4, r0
   1a3c0:	0bd8      	lsrs	r0, r3, #15
   1a3c2:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1a3c6:	e7f2      	b.n	1a3ae <z_impl_k_sleep+0x1a>
   1a3c8:	f7ff ff22 	bl	1a210 <z_tick_sleep.part.0>
   1a3cc:	4604      	mov	r4, r0
   1a3ce:	e7f3      	b.n	1a3b8 <z_impl_k_sleep+0x24>
   1a3d0:	2002065c 	.word	0x2002065c

0001a3d4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1a3d4:	4b01      	ldr	r3, [pc, #4]	; (1a3dc <z_impl_k_current_get+0x8>)
   1a3d6:	6898      	ldr	r0, [r3, #8]
   1a3d8:	4770      	bx	lr
   1a3da:	bf00      	nop
   1a3dc:	2002065c 	.word	0x2002065c

0001a3e0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1a3e0:	b538      	push	{r3, r4, r5, lr}
   1a3e2:	4604      	mov	r4, r0
   1a3e4:	f04f 0320 	mov.w	r3, #32
   1a3e8:	f3ef 8511 	mrs	r5, BASEPRI
   1a3ec:	f383 8811 	msr	BASEPRI, r3
   1a3f0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1a3f4:	f008 f979 	bl	226ea <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   1a3f8:	b148      	cbz	r0, 1a40e <z_impl_k_sem_give+0x2e>
   1a3fa:	2200      	movs	r2, #0
   1a3fc:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1a3fe:	f008 f8fe 	bl	225fe <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1a402:	4629      	mov	r1, r5
}
   1a404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1a408:	4804      	ldr	r0, [pc, #16]	; (1a41c <z_impl_k_sem_give+0x3c>)
   1a40a:	f008 b8cd 	b.w	225a8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1a40e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1a412:	429a      	cmp	r2, r3
   1a414:	bf18      	it	ne
   1a416:	3301      	addne	r3, #1
   1a418:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   1a41a:	e7f2      	b.n	1a402 <z_impl_k_sem_give+0x22>
   1a41c:	200282d0 	.word	0x200282d0

0001a420 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1a420:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a422:	4614      	mov	r4, r2
   1a424:	461d      	mov	r5, r3
   1a426:	f04f 0320 	mov.w	r3, #32
   1a42a:	f3ef 8111 	mrs	r1, BASEPRI
   1a42e:	f383 8811 	msr	BASEPRI, r3
   1a432:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1a436:	6883      	ldr	r3, [r0, #8]
   1a438:	b143      	cbz	r3, 1a44c <z_impl_k_sem_take+0x2c>
		sem->count--;
   1a43a:	3b01      	subs	r3, #1
   1a43c:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1a43e:	f381 8811 	msr	BASEPRI, r1
   1a442:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1a446:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1a448:	b003      	add	sp, #12
   1a44a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a44c:	ea54 0305 	orrs.w	r3, r4, r5
   1a450:	d106      	bne.n	1a460 <z_impl_k_sem_take+0x40>
   1a452:	f381 8811 	msr	BASEPRI, r1
   1a456:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1a45a:	f06f 000f 	mvn.w	r0, #15
   1a45e:	e7f3      	b.n	1a448 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1a460:	4602      	mov	r2, r0
   1a462:	e9cd 4500 	strd	r4, r5, [sp]
   1a466:	4802      	ldr	r0, [pc, #8]	; (1a470 <z_impl_k_sem_take+0x50>)
   1a468:	f7ff ff26 	bl	1a2b8 <z_pend_curr>
	return ret;
   1a46c:	e7ec      	b.n	1a448 <z_impl_k_sem_take+0x28>
   1a46e:	bf00      	nop
   1a470:	200282d0 	.word	0x200282d0

0001a474 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   1a474:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
   1a476:	f100 0528 	add.w	r5, r0, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1a47a:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   1a47e:	2504      	movs	r5, #4
   1a480:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   1a482:	2500      	movs	r5, #0
{
   1a484:	4604      	mov	r4, r0
   1a486:	b087      	sub	sp, #28
   1a488:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a48c:	e9cd 6703 	strd	r6, r7, [sp, #12]
	thread_base->prio = priority;
   1a490:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a492:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	node->prev = NULL;
   1a494:	e9c0 5506 	strd	r5, r5, [r0, #24]
   1a498:	9602      	str	r6, [sp, #8]
   1a49a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	thread_base->user_options = (u8_t)options;
   1a49c:	7307      	strb	r7, [r0, #12]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a49e:	9601      	str	r6, [sp, #4]
   1a4a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   1a4a2:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a4a4:	9600      	str	r6, [sp, #0]
   1a4a6:	f7fe fa87 	bl	189b8 <arch_new_thread>
	if (!_current) {
   1a4aa:	4b04      	ldr	r3, [pc, #16]	; (1a4bc <z_setup_new_thread+0x48>)
	new_thread->fn_abort = NULL;
   1a4ac:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
   1a4b0:	689b      	ldr	r3, [r3, #8]
   1a4b2:	b103      	cbz	r3, 1a4b6 <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
   1a4b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   1a4b6:	66a3      	str	r3, [r4, #104]	; 0x68
}
   1a4b8:	b007      	add	sp, #28
   1a4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a4bc:	2002065c 	.word	0x2002065c

0001a4c0 <z_init_static_threads>:
{
   1a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1a4c4:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 1a57c <z_init_static_threads+0xbc>
   1a4c8:	4d2b      	ldr	r5, [pc, #172]	; (1a578 <z_init_static_threads+0xb8>)
   1a4ca:	46c8      	mov	r8, r9
{
   1a4cc:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   1a4ce:	454d      	cmp	r5, r9
   1a4d0:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1a4d4:	d30d      	bcc.n	1a4f2 <z_init_static_threads+0x32>
	k_sched_lock();
   1a4d6:	f7ff fcb9 	bl	19e4c <k_sched_lock>
			return (u32_t)((t * to_hz + off) / from_hz);
   1a4da:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	_FOREACH_STATIC_THREAD(thread_data) {
   1a4de:	4c26      	ldr	r4, [pc, #152]	; (1a578 <z_init_static_threads+0xb8>)
   1a4e0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1a580 <z_init_static_threads+0xc0>
   1a4e4:	4544      	cmp	r4, r8
   1a4e6:	d321      	bcc.n	1a52c <z_init_static_threads+0x6c>
}
   1a4e8:	b007      	add	sp, #28
   1a4ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   1a4ee:	f7ff bcfb 	b.w	19ee8 <k_sched_unlock>
		z_setup_new_thread(
   1a4f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a4f6:	9305      	str	r3, [sp, #20]
   1a4f8:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1a4fc:	9304      	str	r3, [sp, #16]
   1a4fe:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1a502:	9303      	str	r3, [sp, #12]
   1a504:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1a508:	9302      	str	r3, [sp, #8]
   1a50a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1a50e:	9301      	str	r3, [sp, #4]
   1a510:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1a514:	9300      	str	r3, [sp, #0]
   1a516:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1a51a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1a51e:	f7ff ffa9 	bl	1a474 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1a522:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1a526:	655d      	str	r5, [r3, #84]	; 0x54
   1a528:	4625      	mov	r5, r4
   1a52a:	e7d0      	b.n	1a4ce <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1a52c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1a52e:	1c4b      	adds	r3, r1, #1
   1a530:	d017      	beq.n	1a562 <z_init_static_threads+0xa2>
   1a532:	f240 3be7 	movw	fp, #999	; 0x3e7
   1a536:	f04f 0c00 	mov.w	ip, #0
					    K_MSEC(thread_data->init_delay));
   1a53a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1a53e:	fbc9 bc01 	smlal	fp, ip, r9, r1
   1a542:	2300      	movs	r3, #0
   1a544:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a548:	4658      	mov	r0, fp
   1a54a:	4661      	mov	r1, ip
   1a54c:	f7f4 fb5a 	bl	ec04 <__aeabi_uldivmod>
   1a550:	2700      	movs	r7, #0
   1a552:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a554:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
   1a558:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a55a:	d104      	bne.n	1a566 <z_init_static_threads+0xa6>
	z_sched_start(thread);
   1a55c:	4628      	mov	r0, r5
   1a55e:	f7ff fd13 	bl	19f88 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1a562:	3430      	adds	r4, #48	; 0x30
   1a564:	e7be      	b.n	1a4e4 <z_init_static_threads+0x24>
   1a566:	4602      	mov	r2, r0
   1a568:	463b      	mov	r3, r7
   1a56a:	4651      	mov	r1, sl
   1a56c:	f105 0018 	add.w	r0, r5, #24
   1a570:	f000 f842 	bl	1a5f8 <z_add_timeout>
   1a574:	e7f5      	b.n	1a562 <z_init_static_threads+0xa2>
   1a576:	bf00      	nop
   1a578:	2002012c 	.word	0x2002012c
   1a57c:	2002012c 	.word	0x2002012c
   1a580:	0002261f 	.word	0x0002261f

0001a584 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1a584:	4b03      	ldr	r3, [pc, #12]	; (1a594 <elapsed+0x10>)
   1a586:	681b      	ldr	r3, [r3, #0]
   1a588:	b90b      	cbnz	r3, 1a58e <elapsed+0xa>
   1a58a:	f7fe b987 	b.w	1889c <z_clock_elapsed>
}
   1a58e:	2000      	movs	r0, #0
   1a590:	4770      	bx	lr
   1a592:	bf00      	nop
   1a594:	20020698 	.word	0x20020698

0001a598 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a598:	6803      	ldr	r3, [r0, #0]
   1a59a:	b140      	cbz	r0, 1a5ae <remove_timeout+0x16>
   1a59c:	4a07      	ldr	r2, [pc, #28]	; (1a5bc <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   1a59e:	6852      	ldr	r2, [r2, #4]
   1a5a0:	4290      	cmp	r0, r2
   1a5a2:	d004      	beq.n	1a5ae <remove_timeout+0x16>
	if (next(t) != NULL) {
   1a5a4:	b11b      	cbz	r3, 1a5ae <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   1a5a6:	689a      	ldr	r2, [r3, #8]
   1a5a8:	6881      	ldr	r1, [r0, #8]
   1a5aa:	440a      	add	r2, r1
   1a5ac:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   1a5ae:	6842      	ldr	r2, [r0, #4]
   1a5b0:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1a5b2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1a5b4:	2300      	movs	r3, #0
	node->prev = NULL;
   1a5b6:	e9c0 3300 	strd	r3, r3, [r0]
}
   1a5ba:	4770      	bx	lr
   1a5bc:	20020054 	.word	0x20020054

0001a5c0 <next_timeout>:
	return list->head == list;
   1a5c0:	4b0b      	ldr	r3, [pc, #44]	; (1a5f0 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   1a5c2:	b510      	push	{r4, lr}
   1a5c4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a5c6:	429c      	cmp	r4, r3
   1a5c8:	bf08      	it	eq
   1a5ca:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   1a5cc:	f7ff ffda 	bl	1a584 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1a5d0:	b154      	cbz	r4, 1a5e8 <next_timeout+0x28>
   1a5d2:	68a3      	ldr	r3, [r4, #8]
   1a5d4:	1a18      	subs	r0, r3, r0
   1a5d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1a5da:	4b06      	ldr	r3, [pc, #24]	; (1a5f4 <next_timeout+0x34>)
   1a5dc:	691b      	ldr	r3, [r3, #16]
   1a5de:	b113      	cbz	r3, 1a5e6 <next_timeout+0x26>
   1a5e0:	4298      	cmp	r0, r3
   1a5e2:	bfa8      	it	ge
   1a5e4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1a5e6:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1a5e8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1a5ec:	e7f5      	b.n	1a5da <next_timeout+0x1a>
   1a5ee:	bf00      	nop
   1a5f0:	20020054 	.word	0x20020054
   1a5f4:	2002065c 	.word	0x2002065c

0001a5f8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1a5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a5fc:	9101      	str	r1, [sp, #4]
   1a5fe:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a600:	1c4b      	adds	r3, r1, #1
   1a602:	bf08      	it	eq
   1a604:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1a608:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1a60a:	d061      	beq.n	1a6d0 <z_add_timeout+0xd8>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1a60c:	f06f 0301 	mvn.w	r3, #1
   1a610:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
   1a614:	1c54      	adds	r4, r2, #1
   1a616:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1a61a:	ebb3 0804 	subs.w	r8, r3, r4
   1a61e:	eb6b 0905 	sbc.w	r9, fp, r5
   1a622:	f1b8 0f00 	cmp.w	r8, #0
   1a626:	f179 0300 	sbcs.w	r3, r9, #0
   1a62a:	db0f      	blt.n	1a64c <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1a62c:	f7ff ffaa 	bl	1a584 <elapsed>
   1a630:	f06f 0301 	mvn.w	r3, #1
   1a634:	4a2b      	ldr	r2, [pc, #172]	; (1a6e4 <z_add_timeout+0xec>)
   1a636:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1a63a:	1a5b      	subs	r3, r3, r1
   1a63c:	eb6b 020c 	sbc.w	r2, fp, ip
   1a640:	1b1e      	subs	r6, r3, r4
   1a642:	eb62 0705 	sbc.w	r7, r2, r5
   1a646:	1a34      	subs	r4, r6, r0
   1a648:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1a64c:	9b01      	ldr	r3, [sp, #4]
   1a64e:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
   1a652:	f04f 0320 	mov.w	r3, #32
   1a656:	f3ef 8611 	mrs	r6, BASEPRI
   1a65a:	f383 8811 	msr	BASEPRI, r3
   1a65e:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1a662:	f7ff ff8f 	bl	1a584 <elapsed>
	ticks = MAX(1, ticks);
   1a666:	2c01      	cmp	r4, #1
   1a668:	f175 0300 	sbcs.w	r3, r5, #0
   1a66c:	bfb8      	it	lt
   1a66e:	2401      	movlt	r4, #1
	return list->head == list;
   1a670:	4b1d      	ldr	r3, [pc, #116]	; (1a6e8 <z_add_timeout+0xf0>)
		to->dticks = ticks + elapsed();
   1a672:	4420      	add	r0, r4
   1a674:	681a      	ldr	r2, [r3, #0]
   1a676:	f8ca 0008 	str.w	r0, [sl, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a67a:	429a      	cmp	r2, r3
   1a67c:	d001      	beq.n	1a682 <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1a67e:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1a680:	b952      	cbnz	r2, 1a698 <z_add_timeout+0xa0>
	node->prev = list->tail;
   1a682:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1a684:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   1a688:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1a68c:	685a      	ldr	r2, [r3, #4]
   1a68e:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1a692:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1a696:	e00d      	b.n	1a6b4 <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1a698:	6890      	ldr	r0, [r2, #8]
   1a69a:	f8da 1008 	ldr.w	r1, [sl, #8]
   1a69e:	4288      	cmp	r0, r1
   1a6a0:	dd19      	ble.n	1a6d6 <z_add_timeout+0xde>
				t->dticks -= to->dticks;
   1a6a2:	1a41      	subs	r1, r0, r1
   1a6a4:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   1a6a6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1a6a8:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1a6ac:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1a6b0:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1a6b4:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a6b6:	429a      	cmp	r2, r3
   1a6b8:	d006      	beq.n	1a6c8 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1a6ba:	4592      	cmp	sl, r2
   1a6bc:	d104      	bne.n	1a6c8 <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
   1a6be:	f7ff ff7f 	bl	1a5c0 <next_timeout>
   1a6c2:	2100      	movs	r1, #0
   1a6c4:	f7fe f886 	bl	187d4 <z_clock_set_timeout>
	__asm__ volatile(
   1a6c8:	f386 8811 	msr	BASEPRI, r6
   1a6cc:	f3bf 8f6f 	isb	sy
		}
	}
}
   1a6d0:	b003      	add	sp, #12
   1a6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1a6d6:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1a6d8:	4294      	cmp	r4, r2
   1a6da:	f8ca 1008 	str.w	r1, [sl, #8]
   1a6de:	d0d0      	beq.n	1a682 <z_add_timeout+0x8a>
   1a6e0:	6812      	ldr	r2, [r2, #0]
   1a6e2:	e7cd      	b.n	1a680 <z_add_timeout+0x88>
   1a6e4:	20020168 	.word	0x20020168
   1a6e8:	20020054 	.word	0x20020054

0001a6ec <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   1a6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a6f0:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1a6f2:	f7ff fcad 	bl	1a050 <z_time_slice>
	__asm__ volatile(
   1a6f6:	f04f 0320 	mov.w	r3, #32
   1a6fa:	f3ef 8411 	mrs	r4, BASEPRI
   1a6fe:	f383 8811 	msr	BASEPRI, r3
   1a702:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1a706:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1a78c <z_clock_announce+0xa0>
   1a70a:	4d1f      	ldr	r5, [pc, #124]	; (1a788 <z_clock_announce+0x9c>)
   1a70c:	46c1      	mov	r9, r8
	return list->head == list;
   1a70e:	f8df a080 	ldr.w	sl, [pc, #128]	; 1a790 <z_clock_announce+0xa4>
   1a712:	602e      	str	r6, [r5, #0]
   1a714:	f8da 0000 	ldr.w	r0, [sl]
   1a718:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a71a:	4550      	cmp	r0, sl
   1a71c:	e9d8 6700 	ldrd	r6, r7, [r8]
   1a720:	d005      	beq.n	1a72e <z_clock_announce+0x42>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1a722:	b120      	cbz	r0, 1a72e <z_clock_announce+0x42>
   1a724:	6883      	ldr	r3, [r0, #8]
   1a726:	4293      	cmp	r3, r2
   1a728:	dd13      	ble.n	1a752 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1a72a:	1a9b      	subs	r3, r3, r2
   1a72c:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
   1a72e:	18b6      	adds	r6, r6, r2
   1a730:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
   1a734:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
   1a738:	2600      	movs	r6, #0
   1a73a:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   1a73c:	f7ff ff40 	bl	1a5c0 <next_timeout>
   1a740:	4631      	mov	r1, r6
   1a742:	f7fe f847 	bl	187d4 <z_clock_set_timeout>
	__asm__ volatile(
   1a746:	f384 8811 	msr	BASEPRI, r4
   1a74a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1a74e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
   1a752:	18f6      	adds	r6, r6, r3
   1a754:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
   1a758:	1ad3      	subs	r3, r2, r3
   1a75a:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
   1a75c:	2300      	movs	r3, #0
   1a75e:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
   1a760:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
   1a764:	f7ff ff18 	bl	1a598 <remove_timeout>
   1a768:	f384 8811 	msr	BASEPRI, r4
   1a76c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1a770:	68c3      	ldr	r3, [r0, #12]
   1a772:	4798      	blx	r3
	__asm__ volatile(
   1a774:	f04f 0320 	mov.w	r3, #32
   1a778:	f3ef 8411 	mrs	r4, BASEPRI
   1a77c:	f383 8811 	msr	BASEPRI, r3
   1a780:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1a784:	e7c6      	b.n	1a714 <z_clock_announce+0x28>
   1a786:	bf00      	nop
   1a788:	20020698 	.word	0x20020698
   1a78c:	20020168 	.word	0x20020168
   1a790:	20020054 	.word	0x20020054

0001a794 <z_tick_get>:

s64_t z_tick_get(void)
{
   1a794:	b510      	push	{r4, lr}
   1a796:	f04f 0320 	mov.w	r3, #32
   1a79a:	f3ef 8411 	mrs	r4, BASEPRI
   1a79e:	f383 8811 	msr	BASEPRI, r3
   1a7a2:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1a7a6:	f7fe f879 	bl	1889c <z_clock_elapsed>
   1a7aa:	4b06      	ldr	r3, [pc, #24]	; (1a7c4 <z_tick_get+0x30>)
   1a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   1a7b0:	1812      	adds	r2, r2, r0
   1a7b2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1a7b6:	f384 8811 	msr	BASEPRI, r4
   1a7ba:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1a7be:	4610      	mov	r0, r2
   1a7c0:	4619      	mov	r1, r3
   1a7c2:	bd10      	pop	{r4, pc}
   1a7c4:	20020168 	.word	0x20020168

0001a7c8 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   1a7c8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1a7ca:	4c06      	ldr	r4, [pc, #24]	; (1a7e4 <statics_init+0x1c>)
   1a7cc:	4d06      	ldr	r5, [pc, #24]	; (1a7e8 <statics_init+0x20>)
   1a7ce:	42ac      	cmp	r4, r5
   1a7d0:	d301      	bcc.n	1a7d6 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1a7d2:	2000      	movs	r0, #0
   1a7d4:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1a7d6:	4620      	mov	r0, r4
   1a7d8:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1a7dc:	f007 ffff 	bl	227de <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1a7e0:	3418      	adds	r4, #24
   1a7e2:	e7f4      	b.n	1a7ce <statics_init+0x6>
   1a7e4:	2002012c 	.word	0x2002012c
   1a7e8:	20020144 	.word	0x20020144

0001a7ec <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
   1a7ec:	b500      	push	{lr}
   1a7ee:	b0c1      	sub	sp, #260	; 0x104
   1a7f0:	4613      	mov	r3, r2
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
   1a7f2:	4668      	mov	r0, sp
   1a7f4:	460a      	mov	r2, r1
   1a7f6:	f44f 7180 	mov.w	r1, #256	; 0x100
   1a7fa:	f000 f983 	bl	1ab04 <MicroVsnprintf>
  DebugLog(log_buffer);
   1a7fe:	4668      	mov	r0, sp
   1a800:	f002 fa64 	bl	1cccc <DebugLog>
  DebugLog("\r\n");
   1a804:	4803      	ldr	r0, [pc, #12]	; (1a814 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x28>)
   1a806:	f002 fa61 	bl	1cccc <DebugLog>
#endif
  return 0;
}
   1a80a:	2000      	movs	r0, #0
   1a80c:	b041      	add	sp, #260	; 0x104
   1a80e:	f85d fb04 	ldr.w	pc, [sp], #4
   1a812:	bf00      	nop
   1a814:	0002afd6 	.word	0x0002afd6

0001a818 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   1a818:	6943      	ldr	r3, [r0, #20]
   1a81a:	2b20      	cmp	r3, #32
   1a81c:	d101      	bne.n	1a822 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0xa>
    return registration->custom_name;
   1a81e:	6980      	ldr	r0, [r0, #24]
   1a820:	4770      	bx	lr
  return (v < low) || (high < v);
   1a822:	b2db      	uxtb	r3, r3
   1a824:	2b7e      	cmp	r3, #126	; 0x7e
}

inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBuiltinOperator()[index];
   1a826:	bf9a      	itte	ls
   1a828:	4a02      	ldrls	r2, [pc, #8]	; (1a834 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1c>)
   1a82a:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
   1a82e:	4802      	ldrhi	r0, [pc, #8]	; (1a838 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
  }
}
   1a830:	4770      	bx	lr
   1a832:	bf00      	nop
   1a834:	0002a588 	.word	0x0002a588
   1a838:	0002afd8 	.word	0x0002afd8

0001a83c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:
      }
    }
  }
}

void MicroInterpreter::Init(tflite::Profiler* profiler) {
   1a83c:	b570      	push	{r4, r5, r6, lr}
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
   1a83e:	6846      	ldr	r6, [r0, #4]
   1a840:	4604      	mov	r4, r0
   1a842:	460d      	mov	r5, r1
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
   1a844:	4630      	mov	r0, r6
   1a846:	2108      	movs	r1, #8
   1a848:	f007 fff2 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1a84c:	b1d0      	cbz	r0, 1a884 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x48>
   1a84e:	5833      	ldr	r3, [r6, r0]
    auto p = data_ + field_offset;
   1a850:	1832      	adds	r2, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1a852:	18d1      	adds	r1, r2, r3
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
  if (subgraphs->size() != 1) {
   1a854:	58d2      	ldr	r2, [r2, r3]
   1a856:	2a01      	cmp	r2, #1
   1a858:	d007      	beq.n	1a86a <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x2e>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1a85a:	490b      	ldr	r1, [pc, #44]	; (1a888 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x4c>)
   1a85c:	68e0      	ldr	r0, [r4, #12]
   1a85e:	f008 fe87 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
   1a862:	2301      	movs	r3, #1
  context_.impl_ = static_cast<void*>(&context_helper_);
  context_.ReportError = context_helper_.ReportOpError;
  context_.recommended_num_threads = 1;
  context_.profiler = profiler;

  initialization_status_ = kTfLiteOk;
   1a864:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
   1a868:	bd70      	pop	{r4, r5, r6, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   1a86a:	1d0b      	adds	r3, r1, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   1a86c:	6849      	ldr	r1, [r1, #4]
  context_.recommended_num_threads = 1;
   1a86e:	6362      	str	r2, [r4, #52]	; 0x34
   1a870:	440b      	add	r3, r1
  subgraph_ = (*subgraphs)[0];
   1a872:	66a3      	str	r3, [r4, #104]	; 0x68
  context_.impl_ = static_cast<void*>(&context_helper_);
   1a874:	f104 036c 	add.w	r3, r4, #108	; 0x6c
   1a878:	61e3      	str	r3, [r4, #28]
  context_.ReportError = context_helper_.ReportOpError;
   1a87a:	4b04      	ldr	r3, [pc, #16]	; (1a88c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x50>)
  context_.profiler = profiler;
   1a87c:	6465      	str	r5, [r4, #68]	; 0x44
  context_.ReportError = context_helper_.ReportOpError;
   1a87e:	6263      	str	r3, [r4, #36]	; 0x24
  initialization_status_ = kTfLiteOk;
   1a880:	2300      	movs	r3, #0
   1a882:	e7ef      	b.n	1a864 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x28>
  if (subgraphs->size() != 1) {
   1a884:	6803      	ldr	r3, [r0, #0]
   1a886:	deff      	udf	#255	; 0xff
   1a888:	0002b015 	.word	0x0002b015
   1a88c:	00022811 	.word	0x00022811

0001a890 <_ZNK11flatbuffers6VectorIiE3GetEj>:
  return_type Get(uoffset_t i) const {
   1a890:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   1a892:	6803      	ldr	r3, [r0, #0]
   1a894:	4299      	cmp	r1, r3
   1a896:	d306      	bcc.n	1a8a6 <_ZNK11flatbuffers6VectorIiE3GetEj+0x16>
   1a898:	f240 1101 	movw	r1, #257	; 0x101
   1a89c:	4b04      	ldr	r3, [pc, #16]	; (1a8b0 <_ZNK11flatbuffers6VectorIiE3GetEj+0x20>)
   1a89e:	4a05      	ldr	r2, [pc, #20]	; (1a8b4 <_ZNK11flatbuffers6VectorIiE3GetEj+0x24>)
   1a8a0:	4805      	ldr	r0, [pc, #20]	; (1a8b8 <_ZNK11flatbuffers6VectorIiE3GetEj+0x28>)
   1a8a2:	f006 f9f1 	bl	20c88 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   1a8a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  }
   1a8aa:	6848      	ldr	r0, [r1, #4]
   1a8ac:	bd08      	pop	{r3, pc}
   1a8ae:	bf00      	nop
   1a8b0:	0002b03e 	.word	0x0002b03e
   1a8b4:	0002b049 	.word	0x0002b049
   1a8b8:	0002b108 	.word	0x0002b108

0001a8bc <_ZN6tflite16MicroInterpreter5inputEj>:
    }
  }
  return kTfLiteOk;
}

TfLiteTensor* MicroInterpreter::input(size_t index) {
   1a8bc:	b513      	push	{r0, r1, r4, lr}
   1a8be:	4604      	mov	r4, r0
   1a8c0:	9101      	str	r1, [sp, #4]
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1a8c2:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1a8c4:	2106      	movs	r1, #6
   1a8c6:	f007 ffe9 	bl	2289c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  const size_t length = inputs_size();
  if ((index < 0) || (index >= length)) {
   1a8ca:	9a01      	ldr	r2, [sp, #4]
  uoffset_t Length() const { return size(); }
   1a8cc:	6803      	ldr	r3, [r0, #0]
   1a8ce:	429a      	cmp	r2, r3
   1a8d0:	d306      	bcc.n	1a8e0 <_ZN6tflite16MicroInterpreter5inputEj+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1a8d2:	4907      	ldr	r1, [pc, #28]	; (1a8f0 <_ZN6tflite16MicroInterpreter5inputEj+0x34>)
   1a8d4:	68e0      	ldr	r0, [r4, #12]
   1a8d6:	f008 fe4b 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
   1a8da:	2000      	movs	r0, #0
  }
  return &(context_.tensors[inputs().Get(index)]);
}
   1a8dc:	b002      	add	sp, #8
   1a8de:	bd10      	pop	{r4, pc}
  return &(context_.tensors[inputs().Get(index)]);
   1a8e0:	4611      	mov	r1, r2
   1a8e2:	f7ff ffd5 	bl	1a890 <_ZNK11flatbuffers6VectorIiE3GetEj>
   1a8e6:	69a3      	ldr	r3, [r4, #24]
   1a8e8:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1a8ec:	e7f6      	b.n	1a8dc <_ZN6tflite16MicroInterpreter5inputEj+0x20>
   1a8ee:	bf00      	nop
   1a8f0:	0002b161 	.word	0x0002b161

0001a8f4 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
   1a8f4:	b513      	push	{r0, r1, r4, lr}
   1a8f6:	4604      	mov	r4, r0
   1a8f8:	9101      	str	r1, [sp, #4]
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1a8fa:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1a8fc:	2108      	movs	r1, #8
   1a8fe:	f007 ffcd 	bl	2289c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  const size_t length = outputs_size();
  if ((index < 0) || (index >= length)) {
   1a902:	9a01      	ldr	r2, [sp, #4]
  uoffset_t Length() const { return size(); }
   1a904:	6803      	ldr	r3, [r0, #0]
   1a906:	429a      	cmp	r2, r3
   1a908:	d306      	bcc.n	1a918 <_ZN6tflite16MicroInterpreter6outputEj+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1a90a:	4907      	ldr	r1, [pc, #28]	; (1a928 <_ZN6tflite16MicroInterpreter6outputEj+0x34>)
   1a90c:	68e0      	ldr	r0, [r4, #12]
   1a90e:	f008 fe2f 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
   1a912:	2000      	movs	r0, #0
  }
  return &(context_.tensors[outputs().Get(index)]);
}
   1a914:	b002      	add	sp, #8
   1a916:	bd10      	pop	{r4, pc}
  return &(context_.tensors[outputs().Get(index)]);
   1a918:	4611      	mov	r1, r2
   1a91a:	f7ff ffb9 	bl	1a890 <_ZNK11flatbuffers6VectorIiE3GetEj>
   1a91e:	69a3      	ldr	r3, [r4, #24]
   1a920:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1a924:	e7f6      	b.n	1a914 <_ZN6tflite16MicroInterpreter6outputEj+0x20>
   1a926:	bf00      	nop
   1a928:	0002b18c 	.word	0x0002b18c

0001a92c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
   1a92c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
   1a930:	f100 0710 	add.w	r7, r0, #16
   1a934:	9000      	str	r0, [sp, #0]
TfLiteStatus MicroInterpreter::AllocateTensors() {
   1a936:	4604      	mov	r4, r0
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
   1a938:	6883      	ldr	r3, [r0, #8]
   1a93a:	6841      	ldr	r1, [r0, #4]
   1a93c:	463a      	mov	r2, r7
   1a93e:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1a940:	f002 fa80 	bl	1ce44 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>
   1a944:	b148      	cbz	r0, 1a95a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2e>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1a946:	4933      	ldr	r1, [pc, #204]	; (1aa14 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe8>)
   1a948:	68e0      	ldr	r0, [r4, #12]
   1a94a:	f008 fe11 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
   1a94e:	2001      	movs	r0, #1
   1a950:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
}
   1a954:	b002      	add	sp, #8
   1a956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   1a95a:	4605      	mov	r5, r0
    auto* node = &(node_and_registrations_[i].node);
   1a95c:	f04f 0828 	mov.w	r8, #40	; 0x28
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
   1a960:	4b2d      	ldr	r3, [pc, #180]	; (1aa18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xec>)
  context_.GetScratchBuffer = nullptr;
   1a962:	e9c4 0014 	strd	r0, r0, [r4, #80]	; 0x50
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
   1a966:	64a3      	str	r3, [r4, #72]	; 0x48
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1a968:	210a      	movs	r1, #10
   1a96a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1a96c:	f007 ff9f 	bl	228ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   1a970:	6803      	ldr	r3, [r0, #0]
   1a972:	429d      	cmp	r5, r3
   1a974:	d212      	bcs.n	1a99c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x70>
    auto* node = &(node_and_registrations_[i].node);
   1a976:	6826      	ldr	r6, [r4, #0]
  static void* GetScratchBuffer(TfLiteContext* ctx, int buffer_idx);

  static void ReportOpError(struct TfLiteContext* context, const char* format,
                            ...);

  void SetNodeIndex(int idx) { current_node_idx_ = idx; }
   1a978:	6765      	str	r5, [r4, #116]	; 0x74
   1a97a:	fb08 6605 	mla	r6, r8, r5, r6
    auto* registration = node_and_registrations_[i].registration;
   1a97e:	6a73      	ldr	r3, [r6, #36]	; 0x24
      init_data = reinterpret_cast<const char*>(node->builtin_data);
   1a980:	6971      	ldr	r1, [r6, #20]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   1a982:	695a      	ldr	r2, [r3, #20]
    if (registration->init) {
   1a984:	681b      	ldr	r3, [r3, #0]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   1a986:	2a20      	cmp	r2, #32
      init_data_size = 0;
   1a988:	bf14      	ite	ne
   1a98a:	2200      	movne	r2, #0
      init_data_size = node->custom_initial_data_size;
   1a98c:	e9d6 1206 	ldrdeq	r1, r2, [r6, #24]
    if (registration->init) {
   1a990:	b113      	cbz	r3, 1a998 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x6c>
          registration->init(&context_, init_data, init_data_size);
   1a992:	4638      	mov	r0, r7
   1a994:	4798      	blx	r3
      node->user_data =
   1a996:	6130      	str	r0, [r6, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   1a998:	3501      	adds	r5, #1
   1a99a:	e7e5      	b.n	1a968 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3c>
   1a99c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   1a9a0:	2500      	movs	r5, #0
    auto* node = &(node_and_registrations_[i].node);
   1a9a2:	2628      	movs	r6, #40	; 0x28
   1a9a4:	6763      	str	r3, [r4, #116]	; 0x74
  context_.RequestScratchBufferInArena =
   1a9a6:	4b1d      	ldr	r3, [pc, #116]	; (1aa1c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf0>)
   1a9a8:	6523      	str	r3, [r4, #80]	; 0x50
   1a9aa:	210a      	movs	r1, #10
   1a9ac:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   1a9ae:	f007 ff7e 	bl	228ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   1a9b2:	6803      	ldr	r3, [r0, #0]
   1a9b4:	429d      	cmp	r5, r3
   1a9b6:	d21a      	bcs.n	1a9ee <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xc2>
    auto* node = &(node_and_registrations_[i].node);
   1a9b8:	6821      	ldr	r1, [r4, #0]
   1a9ba:	6765      	str	r5, [r4, #116]	; 0x74
   1a9bc:	fb06 1105 	mla	r1, r6, r5, r1
    auto* registration = node_and_registrations_[i].registration;
   1a9c0:	f8d1 8024 	ldr.w	r8, [r1, #36]	; 0x24
    if (registration->prepare) {
   1a9c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1a9c8:	b17b      	cbz	r3, 1a9ea <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbe>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
   1a9ca:	4638      	mov	r0, r7
   1a9cc:	4798      	blx	r3
      if (prepare_status != kTfLiteOk) {
   1a9ce:	4601      	mov	r1, r0
   1a9d0:	b158      	cbz	r0, 1a9ea <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbe>
        TF_LITE_REPORT_ERROR(
   1a9d2:	4640      	mov	r0, r8
   1a9d4:	f7ff ff20 	bl	1a818 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
   1a9d8:	462b      	mov	r3, r5
   1a9da:	4602      	mov	r2, r0
   1a9dc:	9100      	str	r1, [sp, #0]
   1a9de:	68e0      	ldr	r0, [r4, #12]
   1a9e0:	490f      	ldr	r1, [pc, #60]	; (1aa20 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf4>)
   1a9e2:	f008 fdc5 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   1a9e6:	2001      	movs	r0, #1
   1a9e8:	e7b4      	b.n	1a954 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   1a9ea:	3501      	adds	r5, #1
   1a9ec:	e7dd      	b.n	1a9aa <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x7e>
   1a9ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a9f2:	6763      	str	r3, [r4, #116]	; 0x74
  context_.AllocatePersistentBuffer = nullptr;
   1a9f4:	2300      	movs	r3, #0
   1a9f6:	64a3      	str	r3, [r4, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
   1a9f8:	6523      	str	r3, [r4, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
   1a9fa:	4b0a      	ldr	r3, [pc, #40]	; (1aa24 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf8>)
  TF_LITE_ENSURE_OK(&context_,
   1a9fc:	463a      	mov	r2, r7
   1a9fe:	6861      	ldr	r1, [r4, #4]
   1aa00:	6e20      	ldr	r0, [r4, #96]	; 0x60
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
   1aa02:	6563      	str	r3, [r4, #84]	; 0x54
  TF_LITE_ENSURE_OK(&context_,
   1aa04:	f002 fa66 	bl	1ced4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>
   1aa08:	2800      	cmp	r0, #0
   1aa0a:	d1a3      	bne.n	1a954 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  tensors_allocated_ = true;
   1aa0c:	2301      	movs	r3, #1
   1aa0e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
  return kTfLiteOk;
   1aa12:	e79f      	b.n	1a954 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
   1aa14:	0002b1b8 	.word	0x0002b1b8
   1aa18:	000227f3 	.word	0x000227f3
   1aa1c:	000227fb 	.word	0x000227fb
   1aa20:	0002b1db 	.word	0x0002b1db
   1aa24:	00022809 	.word	0x00022809

0001aa28 <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
   1aa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (initialization_status_ != kTfLiteOk) {
   1aa2c:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
TfLiteStatus MicroInterpreter::Invoke() {
   1aa30:	4605      	mov	r5, r0
   1aa32:	b087      	sub	sp, #28
  if (initialization_status_ != kTfLiteOk) {
   1aa34:	b143      	cbz	r3, 1aa48 <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1aa36:	4931      	ldr	r1, [pc, #196]	; (1aafc <_ZN6tflite16MicroInterpreter6InvokeEv+0xd4>)
   1aa38:	68c0      	ldr	r0, [r0, #12]
   1aa3a:	f008 fd99 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   1aa3e:	2401      	movs	r4, #1
}
   1aa40:	4620      	mov	r0, r4
   1aa42:	b007      	add	sp, #28
   1aa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!tensors_allocated_) {
   1aa48:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   1aa4c:	2b00      	cmp	r3, #0
   1aa4e:	d044      	beq.n	1aada <_ZN6tflite16MicroInterpreter6InvokeEv+0xb2>
TfLiteStatus MicroInterpreter::Invoke() {
   1aa50:	f04f 0800 	mov.w	r8, #0
    auto* node = &(node_and_registrations_[i].node);
   1aa54:	f04f 0a28 	mov.w	sl, #40	; 0x28
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
   1aa58:	2600      	movs	r6, #0
   1aa5a:	2700      	movs	r7, #0
   1aa5c:	210a      	movs	r1, #10
   1aa5e:	6ea8      	ldr	r0, [r5, #104]	; 0x68
   1aa60:	f007 ff25 	bl	228ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   1aa64:	6803      	ldr	r3, [r0, #0]
   1aa66:	4598      	cmp	r8, r3
   1aa68:	d245      	bcs.n	1aaf6 <_ZN6tflite16MicroInterpreter6InvokeEv+0xce>
    auto* node = &(node_and_registrations_[i].node);
   1aa6a:	682c      	ldr	r4, [r5, #0]
   1aa6c:	fb0a 4408 	mla	r4, sl, r8, r4
    auto* registration = node_and_registrations_[i].registration;
   1aa70:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    if (registration->invoke) {
   1aa74:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1aa78:	2b00      	cmp	r3, #0
   1aa7a:	d039      	beq.n	1aaf0 <_ZN6tflite16MicroInterpreter6InvokeEv+0xc8>
          profiler, OpNameFromRegistration(registration), i);
   1aa7c:	4648      	mov	r0, r9
   1aa7e:	f7ff fecb 	bl	1a818 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
   1aa82:	2300      	movs	r3, #0
      tflite::Profiler* profiler =
   1aa84:	f8d5 b044 	ldr.w	fp, [r5, #68]	; 0x44
          profiler, OpNameFromRegistration(registration), i);
   1aa88:	4601      	mov	r1, r0
   1aa8a:	f8cd b010 	str.w	fp, [sp, #16]
   1aa8e:	9305      	str	r3, [sp, #20]
    if (profiler) {
   1aa90:	f1bb 0f00 	cmp.w	fp, #0
   1aa94:	d00a      	beq.n	1aaac <_ZN6tflite16MicroInterpreter6InvokeEv+0x84>
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
   1aa96:	f8db 2000 	ldr.w	r2, [fp]
   1aa9a:	e9cd 6702 	strd	r6, r7, [sp, #8]

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
   1aa9e:	e9cd 8300 	strd	r8, r3, [sp]
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
   1aaa2:	4658      	mov	r0, fp
   1aaa4:	6893      	ldr	r3, [r2, #8]
   1aaa6:	2202      	movs	r2, #2
   1aaa8:	4798      	blx	r3
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
   1aaaa:	9005      	str	r0, [sp, #20]
      invoke_status = registration->invoke(&context_, node);
   1aaac:	4621      	mov	r1, r4
   1aaae:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1aab2:	f105 0010 	add.w	r0, r5, #16
   1aab6:	4798      	blx	r3
      if (invoke_status == kTfLiteError) {
   1aab8:	2801      	cmp	r0, #1
      invoke_status = registration->invoke(&context_, node);
   1aaba:	4604      	mov	r4, r0
      if (invoke_status == kTfLiteError) {
   1aabc:	d113      	bne.n	1aae6 <_ZN6tflite16MicroInterpreter6InvokeEv+0xbe>
        TF_LITE_REPORT_ERROR(
   1aabe:	4648      	mov	r0, r9
   1aac0:	f7ff feaa 	bl	1a818 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
   1aac4:	4643      	mov	r3, r8
   1aac6:	4602      	mov	r2, r0
   1aac8:	490d      	ldr	r1, [pc, #52]	; (1ab00 <_ZN6tflite16MicroInterpreter6InvokeEv+0xd8>)
   1aaca:	68e8      	ldr	r0, [r5, #12]
   1aacc:	9400      	str	r4, [sp, #0]
   1aace:	f008 fd4f 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
class ScopedOperatorProfile : public ScopedProfile {
   1aad2:	a804      	add	r0, sp, #16
   1aad4:	f007 feb4 	bl	22840 <_ZN6tflite13ScopedProfileD1Ev>
   1aad8:	e7b2      	b.n	1aa40 <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
   1aada:	f7ff ff27 	bl	1a92c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
   1aade:	4604      	mov	r4, r0
   1aae0:	2800      	cmp	r0, #0
   1aae2:	d0b5      	beq.n	1aa50 <_ZN6tflite16MicroInterpreter6InvokeEv+0x28>
   1aae4:	e7ac      	b.n	1aa40 <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
      } else if (invoke_status != kTfLiteOk) {
   1aae6:	2800      	cmp	r0, #0
   1aae8:	d1f3      	bne.n	1aad2 <_ZN6tflite16MicroInterpreter6InvokeEv+0xaa>
   1aaea:	a804      	add	r0, sp, #16
   1aaec:	f007 fea8 	bl	22840 <_ZN6tflite13ScopedProfileD1Ev>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   1aaf0:	f108 0801 	add.w	r8, r8, #1
   1aaf4:	e7b2      	b.n	1aa5c <_ZN6tflite16MicroInterpreter6InvokeEv+0x34>
  return kTfLiteOk;
   1aaf6:	2400      	movs	r4, #0
   1aaf8:	e7a2      	b.n	1aa40 <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
   1aafa:	bf00      	nop
   1aafc:	0002b211 	.word	0x0002b211
   1ab00:	0002b23e 	.word	0x0002b23e

0001ab04 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
   1ab04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab08:	4690      	mov	r8, r2
   1ab0a:	461c      	mov	r4, r3
  int output_index = 0;
   1ab0c:	2500      	movs	r5, #0
                              va_list args) {
   1ab0e:	b095      	sub	sp, #84	; 0x54
   1ab10:	9002      	str	r0, [sp, #8]
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
   1ab12:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
  while (*current != '\0' && output_index < usable_length) {
   1ab16:	9a02      	ldr	r2, [sp, #8]
   1ab18:	f898 3000 	ldrb.w	r3, [r8]
   1ab1c:	4629      	mov	r1, r5
   1ab1e:	1956      	adds	r6, r2, r5
   1ab20:	b343      	cbz	r3, 1ab74 <MicroVsnprintf+0x70>
   1ab22:	454d      	cmp	r5, r9
   1ab24:	da26      	bge.n	1ab74 <MicroVsnprintf+0x70>
    if (*current == '%') {
   1ab26:	2b25      	cmp	r3, #37	; 0x25
   1ab28:	f108 0201 	add.w	r2, r8, #1
   1ab2c:	f040 8109 	bne.w	1ad42 <MicroVsnprintf+0x23e>
      current++;
      switch (*current) {
   1ab30:	f898 3001 	ldrb.w	r3, [r8, #1]
   1ab34:	2b73      	cmp	r3, #115	; 0x73
   1ab36:	f000 8107 	beq.w	1ad48 <MicroVsnprintf+0x244>
   1ab3a:	d808      	bhi.n	1ab4e <MicroVsnprintf+0x4a>
   1ab3c:	2b64      	cmp	r3, #100	; 0x64
   1ab3e:	d015      	beq.n	1ab6c <MicroVsnprintf+0x68>
   1ab40:	2b66      	cmp	r3, #102	; 0x66
   1ab42:	d045      	beq.n	1abd0 <MicroVsnprintf+0xcc>
   1ab44:	2b25      	cmp	r3, #37	; 0x25
   1ab46:	f000 80fa 	beq.w	1ad3e <MicroVsnprintf+0x23a>
            return output_index;
          }
          output[output_index++] = '0';
          output[output_index++] = 'x';
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
   1ab4a:	4690      	mov	r8, r2
   1ab4c:	e7e3      	b.n	1ab16 <MicroVsnprintf+0x12>
      switch (*current) {
   1ab4e:	2b75      	cmp	r3, #117	; 0x75
   1ab50:	d025      	beq.n	1ab9e <MicroVsnprintf+0x9a>
   1ab52:	2b78      	cmp	r3, #120	; 0x78
   1ab54:	d1f9      	bne.n	1ab4a <MicroVsnprintf+0x46>
          if (usable_length - output_index < kMaxHexCharsNeeded) {
   1ab56:	eba9 0205 	sub.w	r2, r9, r5
   1ab5a:	2a09      	cmp	r2, #9
   1ab5c:	f105 0001 	add.w	r0, r5, #1
   1ab60:	dc26      	bgt.n	1abb0 <MicroVsnprintf+0xac>
      }
    } else {
      output[output_index++] = *current++;
    }
  }
  output[output_index++] = '\0';
   1ab62:	2300      	movs	r3, #0
   1ab64:	7033      	strb	r3, [r6, #0]
  return output_index;
}
   1ab66:	b015      	add	sp, #84	; 0x54
   1ab68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (usable_length - output_index < kMaxIntCharsNeeded) {
   1ab6c:	eba9 0305 	sub.w	r3, r9, r5
   1ab70:	2b0a      	cmp	r3, #10
   1ab72:	dc01      	bgt.n	1ab78 <MicroVsnprintf+0x74>
  output[output_index++] = '\0';
   1ab74:	1c68      	adds	r0, r5, #1
   1ab76:	e7f4      	b.n	1ab62 <MicroVsnprintf+0x5e>
              FormatInt32(&output[output_index], va_arg(args, int32_t));
   1ab78:	f854 0b04 	ldr.w	r0, [r4], #4
    *buffer++ = '-';
   1ab7c:	4631      	mov	r1, r6
  if (i < 0) {
   1ab7e:	2800      	cmp	r0, #0
    *buffer++ = '-';
   1ab80:	bfb8      	it	lt
   1ab82:	232d      	movlt	r3, #45	; 0x2d
  return FastUInt32ToBufferLeft(u, buffer, 10);
   1ab84:	f04f 020a 	mov.w	r2, #10
    *buffer++ = '-';
   1ab88:	bfbc      	itt	lt
   1ab8a:	f801 3b01 	strblt.w	r3, [r1], #1
    u = -u;
   1ab8e:	4240      	neglt	r0, r0
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
   1ab90:	f007 fec9 	bl	22926 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
   1ab94:	1b80      	subs	r0, r0, r6
          output_index +=
   1ab96:	4405      	add	r5, r0
          current++;
   1ab98:	f108 0202 	add.w	r2, r8, #2
   1ab9c:	e7d5      	b.n	1ab4a <MicroVsnprintf+0x46>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
   1ab9e:	eba9 0305 	sub.w	r3, r9, r5
   1aba2:	2b0a      	cmp	r3, #10
   1aba4:	dde6      	ble.n	1ab74 <MicroVsnprintf+0x70>
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
   1aba6:	220a      	movs	r2, #10
   1aba8:	4631      	mov	r1, r6
   1abaa:	f854 0b04 	ldr.w	r0, [r4], #4
   1abae:	e7ef      	b.n	1ab90 <MicroVsnprintf+0x8c>
          output[output_index++] = '0';
   1abb0:	f04f 0230 	mov.w	r2, #48	; 0x30
   1abb4:	7032      	strb	r2, [r6, #0]
          output[output_index++] = 'x';
   1abb6:	9a02      	ldr	r2, [sp, #8]
   1abb8:	1cae      	adds	r6, r5, #2
              FormatHex(&output[output_index], va_arg(args, uint32_t));
   1abba:	1995      	adds	r5, r2, r6
          output[output_index++] = 'x';
   1abbc:	5413      	strb	r3, [r2, r0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
   1abbe:	4629      	mov	r1, r5
   1abc0:	2210      	movs	r2, #16
   1abc2:	f854 0b04 	ldr.w	r0, [r4], #4
   1abc6:	f007 feae 	bl	22926 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
   1abca:	1b40      	subs	r0, r0, r5
          output_index +=
   1abcc:	1985      	adds	r5, r0, r6
          current++;
   1abce:	e7e3      	b.n	1ab98 <MicroVsnprintf+0x94>
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
   1abd0:	eba9 0305 	sub.w	r3, r9, r5
   1abd4:	ee07 3a90 	vmov	s15, r3
   1abd8:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
   1abdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1abe0:	eef4 7ac7 	vcmpe.f32	s15, s14
   1abe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1abe8:	d4c4      	bmi.n	1ab74 <MicroVsnprintf+0x70>
              FormatFloat(&output[output_index], va_arg(args, double));
   1abea:	3407      	adds	r4, #7
   1abec:	f024 0407 	bic.w	r4, r4, #7
  char* current_end = buffer + (kFastToBufferSize - 1);
   1abf0:	f106 032f 	add.w	r3, r6, #47	; 0x2f
              FormatFloat(&output[output_index], va_arg(args, double));
   1abf4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
  char* current_end = buffer + (kFastToBufferSize - 1);
   1abf8:	9301      	str	r3, [sp, #4]
              FormatFloat(&output[output_index], va_arg(args, double));
   1abfa:	f7f9 f801 	bl	13c00 <__aeabi_d2f>
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
   1abfe:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  if (u & sign_mask) {
   1ac02:	2800      	cmp	r0, #0
    *current = '-';
   1ac04:	bfb8      	it	lt
   1ac06:	222d      	movlt	r2, #45	; 0x2d
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
   1ac08:	f1a3 0a7f 	sub.w	sl, r3, #127	; 0x7f
   1ac0c:	9303      	str	r3, [sp, #12]
    *current = '-';
   1ac0e:	4633      	mov	r3, r6
   1ac10:	bfb8      	it	lt
   1ac12:	f803 2b01 	strblt.w	r2, [r3], #1
  *current = 0;
   1ac16:	2200      	movs	r2, #0
  if (exponent == 128) {
   1ac18:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
  const uint32_t fraction = (u & fraction_mask);
   1ac1c:	f3c0 0e16 	ubfx	lr, r0, #0, #23
  *current = 0;
   1ac20:	701a      	strb	r2, [r3, #0]
  if (exponent == 128) {
   1ac22:	d10e      	bne.n	1ac42 <MicroVsnprintf+0x13e>
    if (fraction == 0) {
   1ac24:	9a01      	ldr	r2, [sp, #4]
   1ac26:	1ad1      	subs	r1, r2, r3
   1ac28:	f1be 0f00 	cmp.w	lr, #0
   1ac2c:	d107      	bne.n	1ac3e <MicroVsnprintf+0x13a>
      current = StrCatStr(current, (current_end - current), "Inf");
   1ac2e:	4a4e      	ldr	r2, [pc, #312]	; (1ad68 <MicroVsnprintf+0x264>)
      current = StrCatStr(current, (current_end - current), "NaN");
   1ac30:	4618      	mov	r0, r3
  return StrCatStr(main, main_max_length, number_string);
   1ac32:	f007 fe62 	bl	228fa <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
   1ac36:	4607      	mov	r7, r0
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
   1ac38:	1bbe      	subs	r6, r7, r6
          output_index +=
   1ac3a:	4435      	add	r5, r6
          current++;
   1ac3c:	e7ac      	b.n	1ab98 <MicroVsnprintf+0x94>
      current = StrCatStr(current, (current_end - current), "NaN");
   1ac3e:	4a4b      	ldr	r2, [pc, #300]	; (1ad6c <MicroVsnprintf+0x268>)
   1ac40:	e7f6      	b.n	1ac30 <MicroVsnprintf+0x12c>
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
   1ac42:	4a4b      	ldr	r2, [pc, #300]	; (1ad70 <MicroVsnprintf+0x26c>)
   1ac44:	af04      	add	r7, sp, #16
   1ac46:	f102 0b08 	add.w	fp, r2, #8
   1ac4a:	46bc      	mov	ip, r7
   1ac4c:	6810      	ldr	r0, [r2, #0]
   1ac4e:	6851      	ldr	r1, [r2, #4]
   1ac50:	3208      	adds	r2, #8
   1ac52:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1ac56:	455a      	cmp	r2, fp
   1ac58:	4667      	mov	r7, ip
   1ac5a:	d1f6      	bne.n	1ac4a <MicroVsnprintf+0x146>
   1ac5c:	6810      	ldr	r0, [r2, #0]
   1ac5e:	7912      	ldrb	r2, [r2, #4]
   1ac60:	f8cc 0000 	str.w	r0, [ip]
   1ac64:	f88c 2004 	strb.w	r2, [ip, #4]
  uint32_t scaled_fraction = fraction;
   1ac68:	4670      	mov	r0, lr
  for (int i = 0; i < scale_shifts_size; ++i) {
   1ac6a:	2200      	movs	r2, #0
   1ac6c:	af04      	add	r7, sp, #16
    scaled_fraction += (fraction >> scale_shifts[i]);
   1ac6e:	f917 1b01 	ldrsb.w	r1, [r7], #1
  for (int i = 0; i < scale_shifts_size; ++i) {
   1ac72:	3201      	adds	r2, #1
    scaled_fraction += (fraction >> scale_shifts[i]);
   1ac74:	fa2e f101 	lsr.w	r1, lr, r1
  for (int i = 0; i < scale_shifts_size; ++i) {
   1ac78:	2a0d      	cmp	r2, #13
    scaled_fraction += (fraction >> scale_shifts[i]);
   1ac7a:	4408      	add	r0, r1
  for (int i = 0; i < scale_shifts_size; ++i) {
   1ac7c:	d1f7      	bne.n	1ac6e <MicroVsnprintf+0x16a>
  *current = '1';
   1ac7e:	2231      	movs	r2, #49	; 0x31
   1ac80:	701a      	strb	r2, [r3, #0]
  *current = '.';
   1ac82:	222e      	movs	r2, #46	; 0x2e
   1ac84:	705a      	strb	r2, [r3, #1]
  *current = 0;
   1ac86:	2200      	movs	r2, #0
   1ac88:	709a      	strb	r2, [r3, #2]
  if (current_end - current <= kMaxFractionalDigits) {
   1ac8a:	9a01      	ldr	r2, [sp, #4]
  current += 1;
   1ac8c:	1c9f      	adds	r7, r3, #2
  if (current_end - current <= kMaxFractionalDigits) {
   1ac8e:	eba2 0b07 	sub.w	fp, r2, r7
   1ac92:	f1bb 0f07 	cmp.w	fp, #7
   1ac96:	ddcf      	ble.n	1ac38 <MicroVsnprintf+0x134>
   1ac98:	463a      	mov	r2, r7
   1ac9a:	3308      	adds	r3, #8
    *(current + i) = '0';
   1ac9c:	f04f 0130 	mov.w	r1, #48	; 0x30
   1aca0:	f802 1f01 	strb.w	r1, [r2, #1]!
  for (int i = 1; i < kMaxFractionalDigits; i++) {
   1aca4:	4293      	cmp	r3, r2
   1aca6:	d1f9      	bne.n	1ac9c <MicroVsnprintf+0x198>
  FastUInt32ToBufferLeft(number, number_string, base);
   1aca8:	220a      	movs	r2, #10
   1acaa:	a908      	add	r1, sp, #32
   1acac:	f007 fe3b 	bl	22926 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
   1acb0:	4659      	mov	r1, fp
   1acb2:	aa08      	add	r2, sp, #32
   1acb4:	4638      	mov	r0, r7
   1acb6:	f007 fe20 	bl	228fa <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  *current = '0';
   1acba:	f04f 0230 	mov.w	r2, #48	; 0x30
   1acbe:	7002      	strb	r2, [r0, #0]
   1acc0:	4602      	mov	r2, r0
  int fraction_digits = current - previous;
   1acc2:	1bc3      	subs	r3, r0, r7
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
   1acc4:	f1c3 0107 	rsb	r1, r3, #7
  for (int i = 0; i < fraction_digits; i++) {
   1acc8:	eba0 0c02 	sub.w	ip, r0, r2
   1accc:	4563      	cmp	r3, ip
   1acce:	dd08      	ble.n	1ace2 <MicroVsnprintf+0x1de>
    *(current + leading_zeros) = *current;
   1acd0:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   1acd4:	f802 c001 	strb.w	ip, [r2, r1]
    *current = '0';
   1acd8:	f04f 0c30 	mov.w	ip, #48	; 0x30
   1acdc:	f882 c000 	strb.w	ip, [r2]
  for (int i = 0; i < fraction_digits; i++) {
   1ace0:	e7f2      	b.n	1acc8 <MicroVsnprintf+0x1c4>
  current += kMaxFractionalDigits;
   1ace2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1ace6:	f1c3 0307 	rsb	r3, r3, #7
   1acea:	4403      	add	r3, r0
   1acec:	4618      	mov	r0, r3
  while (*(current - 1) == '0' && (current - 1) > previous) {
   1acee:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1acf2:	2a30      	cmp	r2, #48	; 0x30
   1acf4:	d101      	bne.n	1acfa <MicroVsnprintf+0x1f6>
   1acf6:	42bb      	cmp	r3, r7
   1acf8:	d8f8      	bhi.n	1acec <MicroVsnprintf+0x1e8>
  *current = 0;
   1acfa:	2300      	movs	r3, #0
   1acfc:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
   1acfe:	9b01      	ldr	r3, [sp, #4]
   1ad00:	4a1c      	ldr	r2, [pc, #112]	; (1ad74 <MicroVsnprintf+0x270>)
   1ad02:	1a19      	subs	r1, r3, r0
   1ad04:	f007 fdf9 	bl	228fa <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatInt32(current, (current_end - current), exponent);
   1ad08:	9b01      	ldr	r3, [sp, #4]
  if (i < 0) {
   1ad0a:	f1ba 0f00 	cmp.w	sl, #0
  current = StrCatInt32(current, (current_end - current), exponent);
   1ad0e:	eba3 0b00 	sub.w	fp, r3, r0
    *buffer++ = '-';
   1ad12:	bfb8      	it	lt
   1ad14:	232d      	movlt	r3, #45	; 0x2d
  current = StrCatStr(current, (current_end - current), "*2^");
   1ad16:	4607      	mov	r7, r0
    *buffer++ = '-';
   1ad18:	bfbc      	itt	lt
   1ad1a:	f88d 3020 	strblt.w	r3, [sp, #32]
    u = -u;
   1ad1e:	9b03      	ldrlt	r3, [sp, #12]
  return FastUInt32ToBufferLeft(u, buffer, 10);
   1ad20:	f04f 020a 	mov.w	r2, #10
    u = -u;
   1ad24:	bfba      	itte	lt
   1ad26:	f1c3 0a7f 	rsblt	sl, r3, #127	; 0x7f
    *buffer++ = '-';
   1ad2a:	f10d 0121 	addlt.w	r1, sp, #33	; 0x21
   1ad2e:	a908      	addge	r1, sp, #32
  return FastUInt32ToBufferLeft(u, buffer, 10);
   1ad30:	4650      	mov	r0, sl
   1ad32:	f007 fdf8 	bl	22926 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
   1ad36:	4659      	mov	r1, fp
   1ad38:	4638      	mov	r0, r7
   1ad3a:	aa08      	add	r2, sp, #32
   1ad3c:	e779      	b.n	1ac32 <MicroVsnprintf+0x12e>
          output[output_index++] = *current++;
   1ad3e:	f108 0202 	add.w	r2, r8, #2
      output[output_index++] = *current++;
   1ad42:	3501      	adds	r5, #1
   1ad44:	7033      	strb	r3, [r6, #0]
   1ad46:	e700      	b.n	1ab4a <MicroVsnprintf+0x46>
          while (string_idx + output_index < usable_length &&
   1ad48:	f854 2b04 	ldr.w	r2, [r4], #4
   1ad4c:	3a01      	subs	r2, #1
                 string[string_idx] != '\0') {
   1ad4e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
          while (string_idx + output_index < usable_length &&
   1ad52:	2b00      	cmp	r3, #0
   1ad54:	f43f af20 	beq.w	1ab98 <MicroVsnprintf+0x94>
            output[output_index++] = string[string_idx++];
   1ad58:	3102      	adds	r1, #2
          while (string_idx + output_index < usable_length &&
   1ad5a:	4549      	cmp	r1, r9
            output[output_index++] = string[string_idx++];
   1ad5c:	f105 0501 	add.w	r5, r5, #1
   1ad60:	f806 3b01 	strb.w	r3, [r6], #1
          while (string_idx + output_index < usable_length &&
   1ad64:	dbf3      	blt.n	1ad4e <MicroVsnprintf+0x24a>
   1ad66:	e717      	b.n	1ab98 <MicroVsnprintf+0x94>
   1ad68:	0002b74e 	.word	0x0002b74e
   1ad6c:	0002b752 	.word	0x0002b752
   1ad70:	0002b75a 	.word	0x0002b75a
   1ad74:	0002b756 	.word	0x0002b756

0001ad78 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>:
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
                                           quantized_multiplier);
}

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
   1ad78:	b570      	push	{r4, r5, r6, lr}
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
   1ad7a:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
   1ad7e:	2a00      	cmp	r2, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   1ad80:	fa00 f004 	lsl.w	r0, r0, r4
  int right_shift = shift > 0 ? 0 : -shift;
   1ad84:	bfcc      	ite	gt
   1ad86:	2200      	movgt	r2, #0
   1ad88:	4252      	negle	r2, r2
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1ad8a:	4288      	cmp	r0, r1
   1ad8c:	d127      	bne.n	1adde <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x66>
   1ad8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   1ad92:	425e      	negs	r6, r3
   1ad94:	415e      	adcs	r6, r3
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
   1ad96:	fb80 4501 	smull	r4, r5, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   1ad9a:	2c00      	cmp	r4, #0
   1ad9c:	f175 0300 	sbcs.w	r3, r5, #0
   1ada0:	4b1c      	ldr	r3, [pc, #112]	; (1ae14 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x9c>)
   1ada2:	bfa8      	it	ge
   1ada4:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   1ada8:	b9de      	cbnz	r6, 1ade2 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x6a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   1adaa:	18e4      	adds	r4, r4, r3
   1adac:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
   1adb0:	2c00      	cmp	r4, #0
   1adb2:	f175 0300 	sbcs.w	r3, r5, #0
   1adb6:	da06      	bge.n	1adc6 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x4e>
   1adb8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1adbc:	18e4      	adds	r4, r4, r3
   1adbe:	f04f 0300 	mov.w	r3, #0
   1adc2:	eb43 0505 	adc.w	r5, r3, r5
   1adc6:	0fe1      	lsrs	r1, r4, #31
   1adc8:	ea41 0145 	orr.w	r1, r1, r5, lsl #1

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
   1adcc:	2a00      	cmp	r2, #0
   1adce:	da0b      	bge.n	1ade8 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x70>
   1add0:	f44f 71b3 	mov.w	r1, #358	; 0x166
   1add4:	4b10      	ldr	r3, [pc, #64]	; (1ae18 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa0>)
   1add6:	4a11      	ldr	r2, [pc, #68]	; (1ae1c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa4>)
  assert(exponent <= 31);
   1add8:	4811      	ldr	r0, [pc, #68]	; (1ae20 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa8>)
   1adda:	f005 ff55 	bl	20c88 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1adde:	2600      	movs	r6, #0
   1ade0:	e7d9      	b.n	1ad96 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x1e>
   1ade2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1ade6:	e7f1      	b.n	1adcc <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x54>
  assert(exponent <= 31);
   1ade8:	2a1f      	cmp	r2, #31
   1adea:	dd04      	ble.n	1adf6 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x7e>
   1adec:	f240 1167 	movw	r1, #359	; 0x167
   1adf0:	4b0c      	ldr	r3, [pc, #48]	; (1ae24 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xac>)
   1adf2:	4a0a      	ldr	r2, [pc, #40]	; (1ae1c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa4>)
   1adf4:	e7f0      	b.n	1add8 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x60>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   1adf6:	2301      	movs	r3, #1
   1adf8:	4093      	lsls	r3, r2
   1adfa:	3b01      	subs	r3, #1
  return a & b;
   1adfc:	ea03 0001 	and.w	r0, r3, r1
  return a >> offset;
   1ae00:	105b      	asrs	r3, r3, #1
  return a + b;
   1ae02:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
  return a >> offset;
   1ae06:	fa41 f202 	asr.w	r2, r1, r2
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
   1ae0a:	4298      	cmp	r0, r3
   1ae0c:	bfd4      	ite	le
   1ae0e:	4610      	movle	r0, r2
   1ae10:	1c50      	addgt	r0, r2, #1
   1ae12:	bd70      	pop	{r4, r5, r6, pc}
   1ae14:	c0000001 	.word	0xc0000001
   1ae18:	0002b768 	.word	0x0002b768
   1ae1c:	0002b776 	.word	0x0002b776
   1ae20:	0002b7cb 	.word	0x0002b7cb
   1ae24:	0002b817 	.word	0x0002b817

0001ae28 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
   1ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae2c:	ed2d 8b04 	vpush	{d8-d9}
   1ae30:	469a      	mov	sl, r3
  const int stride_width = params.stride_width;
   1ae32:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    float* output_data) {
   1ae36:	b09b      	sub	sp, #108	; 0x6c
  const int stride_width = params.stride_width;
   1ae38:	930b      	str	r3, [sp, #44]	; 0x2c
  const int stride_height = params.stride_height;
   1ae3a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    float* output_data) {
   1ae3e:	460c      	mov	r4, r1
  const int stride_height = params.stride_height;
   1ae40:	930c      	str	r3, [sp, #48]	; 0x30
  const int dilation_width_factor = params.dilation_width_factor;
   1ae42:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  const int dilation_height_factor = params.dilation_height_factor;
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const int depth_multiplier = params.depth_multiplier;
  const float output_activation_min = params.float_activation_min;
   1ae46:	edd0 8a0c 	vldr	s17, [r0, #48]	; 0x30
  const int dilation_width_factor = params.dilation_width_factor;
   1ae4a:	930d      	str	r3, [sp, #52]	; 0x34
  const int dilation_height_factor = params.dilation_height_factor;
   1ae4c:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  const float output_activation_max = params.float_activation_max;
   1ae50:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
  const int dilation_height_factor = params.dilation_height_factor;
   1ae54:	930e      	str	r3, [sp, #56]	; 0x38
  const int pad_width = params.padding_values.width;
   1ae56:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    float* output_data) {
   1ae5a:	9f2b      	ldr	r7, [sp, #172]	; 0xac
  const int pad_width = params.padding_values.width;
   1ae5c:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_height = params.padding_values.height;
   1ae5e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    float* output_data) {
   1ae62:	9219      	str	r2, [sp, #100]	; 0x64
  const int pad_height = params.padding_values.height;
   1ae64:	9311      	str	r3, [sp, #68]	; 0x44
  const int depth_multiplier = params.depth_multiplier;
   1ae66:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   1ae6a:	9307      	str	r3, [sp, #28]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1ae6c:	680b      	ldr	r3, [r1, #0]
   1ae6e:	2b04      	cmp	r3, #4
   1ae70:	d001      	beq.n	1ae76 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4e>
   1ae72:	f009 faed 	bl	24450 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   1ae76:	f8da 3000 	ldr.w	r3, [sl]
   1ae7a:	2b04      	cmp	r3, #4
   1ae7c:	d1f9      	bne.n	1ae72 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1ae7e:	683b      	ldr	r3, [r7, #0]
   1ae80:	2b04      	cmp	r3, #4
   1ae82:	d1f6      	bne.n	1ae72 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1ae84:	2300      	movs	r3, #0
   1ae86:	463a      	mov	r2, r7
   1ae88:	4619      	mov	r1, r3
   1ae8a:	4620      	mov	r0, r4
   1ae8c:	f007 fdca 	bl	22a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   1ae90:	2303      	movs	r3, #3
   1ae92:	463a      	mov	r2, r7
   1ae94:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1ae96:	9012      	str	r0, [sp, #72]	; 0x48
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   1ae98:	4650      	mov	r0, sl
   1ae9a:	f007 fdc3 	bl	22a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   1ae9e:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   1aea0:	4605      	mov	r5, r0
  const int input_height = input_shape.Dims(1);
   1aea2:	4620      	mov	r0, r4
   1aea4:	f007 fd7b 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1aea8:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1aeaa:	9013      	str	r0, [sp, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
   1aeac:	4620      	mov	r0, r4
   1aeae:	f007 fd76 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   1aeb2:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   1aeb4:	9014      	str	r0, [sp, #80]	; 0x50
  const int input_depth = input_shape.Dims(3);
   1aeb6:	4620      	mov	r0, r4
   1aeb8:	f007 fd71 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   1aebc:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   1aebe:	900a      	str	r0, [sp, #40]	; 0x28
  const int filter_height = filter_shape.Dims(1);
   1aec0:	4650      	mov	r0, sl
   1aec2:	f007 fd6c 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   1aec6:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   1aec8:	9015      	str	r0, [sp, #84]	; 0x54
  const int filter_width = filter_shape.Dims(2);
   1aeca:	4650      	mov	r0, sl
   1aecc:	f007 fd67 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1aed0:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   1aed2:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_height = output_shape.Dims(1);
   1aed4:	4638      	mov	r0, r7
   1aed6:	f007 fd62 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1aeda:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1aedc:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
   1aede:	4638      	mov	r0, r7
   1aee0:	f007 fd5d 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   1aee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1aee6:	9a07      	ldr	r2, [sp, #28]
  const int output_width = output_shape.Dims(2);
   1aee8:	9018      	str	r0, [sp, #96]	; 0x60
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   1aeea:	fb03 f602 	mul.w	r6, r3, r2
   1aeee:	42ae      	cmp	r6, r5
   1aef0:	d1bf      	bne.n	1ae72 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   1aef2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1aef4:	f007 fd64 	bl	229c0 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1aef8:	42b0      	cmp	r0, r6
   1aefa:	d1ba      	bne.n	1ae72 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>

  for (int b = 0; b < batches; ++b) {
   1aefc:	f04f 0900 	mov.w	r9, #0
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
                }
              }
            }
            float bias_value = 0.0f;
   1af00:	eddf 9a58 	vldr	s19, [pc, #352]	; 1b064 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23c>
  for (int b = 0; b < batches; ++b) {
   1af04:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1af06:	4599      	cmp	r9, r3
   1af08:	f280 80a6 	bge.w	1b058 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x230>
   1af0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1af0e:	425b      	negs	r3, r3
   1af10:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1af12:	2300      	movs	r3, #0
   1af14:	9302      	str	r3, [sp, #8]
   1af16:	9b02      	ldr	r3, [sp, #8]
   1af18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1af1a:	4293      	cmp	r3, r2
   1af1c:	f280 8099 	bge.w	1b052 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22a>
   1af20:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1af22:	425b      	negs	r3, r3
   1af24:	9308      	str	r3, [sp, #32]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1af26:	2300      	movs	r3, #0
   1af28:	9303      	str	r3, [sp, #12]
   1af2a:	9b03      	ldr	r3, [sp, #12]
   1af2c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1af2e:	4293      	cmp	r3, r2
   1af30:	f280 8087 	bge.w	1b042 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21a>
   1af34:	2600      	movs	r6, #0
        for (int ic = 0; ic < input_depth; ++ic) {
   1af36:	9604      	str	r6, [sp, #16]
   1af38:	9b04      	ldr	r3, [sp, #16]
   1af3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1af3c:	4293      	cmp	r3, r2
   1af3e:	da78      	bge.n	1b032 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20a>
   1af40:	4635      	mov	r5, r6
          for (int m = 0; m < depth_multiplier; m++) {
   1af42:	9a07      	ldr	r2, [sp, #28]
   1af44:	1bab      	subs	r3, r5, r6
   1af46:	429a      	cmp	r2, r3
   1af48:	dd6d      	ble.n	1b026 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1fe>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   1af4a:	2300      	movs	r3, #0
            float total = 0.f;
   1af4c:	ed9f 8a45 	vldr	s16, [pc, #276]	; 1b064 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23c>
            const int oc = m + ic * depth_multiplier;
   1af50:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   1af54:	9305      	str	r3, [sp, #20]
   1af56:	9b05      	ldr	r3, [sp, #20]
   1af58:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1af5a:	4293      	cmp	r3, r2
   1af5c:	da3c      	bge.n	1afd8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b0>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   1af5e:	2300      	movs	r3, #0
                const int in_y =
   1af60:	f8dd 8020 	ldr.w	r8, [sp, #32]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   1af64:	9306      	str	r3, [sp, #24]
   1af66:	9b06      	ldr	r3, [sp, #24]
   1af68:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1af6a:	4293      	cmp	r3, r2
   1af6c:	da2e      	bge.n	1afcc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1a4>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   1af6e:	f1b8 0f00 	cmp.w	r8, #0
   1af72:	db25      	blt.n	1afc0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
   1af74:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1af76:	4543      	cmp	r3, r8
   1af78:	dd22      	ble.n	1afc0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
   1af7a:	f1bb 0f00 	cmp.w	fp, #0
   1af7e:	db1f      	blt.n	1afc0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
   1af80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1af82:	455b      	cmp	r3, fp
   1af84:	dd1c      	ble.n	1afc0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   1af86:	9b04      	ldr	r3, [sp, #16]
   1af88:	465a      	mov	r2, fp
   1af8a:	4649      	mov	r1, r9
   1af8c:	9300      	str	r3, [sp, #0]
   1af8e:	4620      	mov	r0, r4
   1af90:	4643      	mov	r3, r8
   1af92:	f007 fd25 	bl	229e0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  float filter_value = filter_data[Offset(
   1af96:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   1af9a:	900f      	str	r0, [sp, #60]	; 0x3c
                  float filter_value = filter_data[Offset(
   1af9c:	2100      	movs	r1, #0
   1af9e:	4650      	mov	r0, sl
   1afa0:	9500      	str	r5, [sp, #0]
   1afa2:	f007 fd1d 	bl	229e0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   1afa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1afa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1afaa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                      filter_shape, 0, filter_y, filter_x, oc)];
   1afae:	9a28      	ldr	r2, [sp, #160]	; 0xa0
                  total += (input_value * filter_value);
   1afb0:	ed93 7a00 	vldr	s14, [r3]
                      filter_shape, 0, filter_y, filter_x, oc)];
   1afb4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                  total += (input_value * filter_value);
   1afb8:	edd0 7a00 	vldr	s15, [r0]
   1afbc:	eea7 8a27 	vfma.f32	s16, s14, s15
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   1afc0:	9b06      	ldr	r3, [sp, #24]
   1afc2:	3301      	adds	r3, #1
   1afc4:	9306      	str	r3, [sp, #24]
   1afc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1afc8:	4498      	add	r8, r3
   1afca:	e7cc      	b.n	1af66 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x13e>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   1afcc:	9b05      	ldr	r3, [sp, #20]
   1afce:	3301      	adds	r3, #1
   1afd0:	9305      	str	r3, [sp, #20]
   1afd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1afd4:	449b      	add	fp, r3
   1afd6:	e7be      	b.n	1af56 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x12e>
            if (bias_data) {
   1afd8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1afda:	b30b      	cbz	r3, 1b020 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f8>
              bias_value = bias_data[oc];
   1afdc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   1afe0:	edd3 7a00 	vldr	s15, [r3]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   1afe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
                ActivationFunctionWithMinMax(total + bias_value,
   1afe8:	ee38 8a27 	vadd.f32	s16, s16, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   1afec:	9500      	str	r5, [sp, #0]
   1afee:	4649      	mov	r1, r9
   1aff0:	4638      	mov	r0, r7
   1aff2:	f007 fcf5 	bl	229e0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
   1aff6:	eeb4 8a68 	vcmp.f32	s16, s17
   1affa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1affe:	bf48      	it	mi
   1b000:	eeb0 8a68 	vmovmi.f32	s16, s17
	return __b;
   1b004:	eeb4 9a48 	vcmp.f32	s18, s16
   1b008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b00c:	bf48      	it	mi
   1b00e:	eeb0 8a49 	vmovmi.f32	s16, s18
   1b012:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   1b014:	3501      	adds	r5, #1
   1b016:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1b01a:	ed80 8a00 	vstr	s16, [r0]
          for (int m = 0; m < depth_multiplier; m++) {
   1b01e:	e790      	b.n	1af42 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11a>
            float bias_value = 0.0f;
   1b020:	eef0 7a69 	vmov.f32	s15, s19
   1b024:	e7de      	b.n	1afe4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bc>
        for (int ic = 0; ic < input_depth; ++ic) {
   1b026:	9b04      	ldr	r3, [sp, #16]
   1b028:	3301      	adds	r3, #1
   1b02a:	9304      	str	r3, [sp, #16]
   1b02c:	9b07      	ldr	r3, [sp, #28]
   1b02e:	441e      	add	r6, r3
   1b030:	e782      	b.n	1af38 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x110>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1b032:	9b03      	ldr	r3, [sp, #12]
   1b034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b036:	3301      	adds	r3, #1
   1b038:	9303      	str	r3, [sp, #12]
   1b03a:	9b08      	ldr	r3, [sp, #32]
   1b03c:	4413      	add	r3, r2
   1b03e:	9308      	str	r3, [sp, #32]
   1b040:	e773      	b.n	1af2a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x102>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1b042:	9b02      	ldr	r3, [sp, #8]
   1b044:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1b046:	3301      	adds	r3, #1
   1b048:	9302      	str	r3, [sp, #8]
   1b04a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b04c:	4413      	add	r3, r2
   1b04e:	9309      	str	r3, [sp, #36]	; 0x24
   1b050:	e761      	b.n	1af16 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xee>
  for (int b = 0; b < batches; ++b) {
   1b052:	f109 0901 	add.w	r9, r9, #1
   1b056:	e755      	b.n	1af04 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xdc>
          }
        }
      }
    }
  }
}
   1b058:	b01b      	add	sp, #108	; 0x6c
   1b05a:	ecbd 8b04 	vpop	{d8-d9}
   1b05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b062:	bf00      	nop
   1b064:	00000000 	.word	0x00000000

0001b068 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   1b06c:	690d      	ldr	r5, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1b06e:	4604      	mov	r4, r0
   1b070:	4688      	mov	r8, r1
   1b072:	b093      	sub	sp, #76	; 0x4c
  TFLITE_DCHECK(node->user_data != nullptr);
   1b074:	b90d      	cbnz	r5, 1b07a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
   1b076:	f009 f9eb 	bl	24450 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1b07a:	694e      	ldr	r6, [r1, #20]
   1b07c:	2e00      	cmp	r6, #0
   1b07e:	d0fa      	beq.n	1b076 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe>

  auto* params =
      reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1b080:	680a      	ldr	r2, [r1, #0]
   1b082:	f8d0 a008 	ldr.w	sl, [r0, #8]
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}
inline const TfLiteTensor* GetInput(const TfLiteContext* context,
                                    const TfLiteNode* node, int index) {
  return &context->tensors[node->inputs->data[index]];
   1b086:	6853      	ldr	r3, [r2, #4]
   1b088:	6897      	ldr	r7, [r2, #8]
   1b08a:	ea4f 1983 	mov.w	r9, r3, lsl #6
   1b08e:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);

  const TfLiteType data_type = input->type;
   1b092:	f81a 2009 	ldrb.w	r2, [sl, r9]
  int width = SizeOfDimension(input, 2);
   1b096:	689b      	ldr	r3, [r3, #8]
  const TfLiteType data_type = input->type;
   1b098:	9210      	str	r2, [sp, #64]	; 0x40
  return t->dims->data[dim];
   1b09a:	68da      	ldr	r2, [r3, #12]
   1b09c:	689b      	ldr	r3, [r3, #8]
  return &context->tensors[node->inputs->data[index]];
   1b09e:	eb0a 1787 	add.w	r7, sl, r7, lsl #6
  return t->dims->data[dim];
   1b0a2:	930a      	str	r3, [sp, #40]	; 0x28
  int height = SizeOfDimension(input, 1);
  int filter_width = SizeOfDimension(filter, 2);
   1b0a4:	68bb      	ldr	r3, [r7, #8]
   1b0a6:	920d      	str	r2, [sp, #52]	; 0x34
   1b0a8:	68da      	ldr	r2, [r3, #12]

  // Per channel quantization is only needed for int8 inference. For other
  // quantized types, only a single scale and zero point is needed.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
  // Dynimically allocate per-channel quantization parameters.
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
   1b0aa:	6919      	ldr	r1, [r3, #16]
   1b0ac:	920b      	str	r2, [sp, #44]	; 0x2c
   1b0ae:	689a      	ldr	r2, [r3, #8]
   1b0b0:	0089      	lsls	r1, r1, #2
   1b0b2:	920c      	str	r2, [sp, #48]	; 0x30
   1b0b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1b0b6:	f105 0218 	add.w	r2, r5, #24
   1b0ba:	910e      	str	r1, [sp, #56]	; 0x38
   1b0bc:	4798      	blx	r3
   1b0be:	4683      	mov	fp, r0
   1b0c0:	bb48      	cbnz	r0, 1b116 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_multiplier)));
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
   1b0c2:	4620      	mov	r0, r4
   1b0c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1b0c6:	990e      	ldr	r1, [sp, #56]	; 0x38
   1b0c8:	f105 021c 	add.w	r2, r5, #28
   1b0cc:	4798      	blx	r3
   1b0ce:	2800      	cmp	r0, #0
   1b0d0:	f040 80d3 	bne.w	1b27a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x212>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_shift)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
   1b0d4:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1b0d8:	2b09      	cmp	r3, #9
   1b0da:	d14a      	bne.n	1b172 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x10a>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   1b0dc:	f897 b030 	ldrb.w	fp, [r7, #48]	; 0x30
   1b0e0:	f1bb 0f01 	cmp.w	fp, #1
   1b0e4:	d00d      	beq.n	1b102 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x9a>
   1b0e6:	4b68      	ldr	r3, [pc, #416]	; (1b288 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
   1b0e8:	2501      	movs	r5, #1
   1b0ea:	9301      	str	r3, [sp, #4]
   1b0ec:	4b67      	ldr	r3, [pc, #412]	; (1b28c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
   1b0ee:	e9cd b502 	strd	fp, r5, [sp, #8]
   1b0f2:	9300      	str	r3, [sp, #0]
   1b0f4:	2388      	movs	r3, #136	; 0x88
   1b0f6:	6966      	ldr	r6, [r4, #20]
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   1b0f8:	4620      	mov	r0, r4
   1b0fa:	4a65      	ldr	r2, [pc, #404]	; (1b290 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
   1b0fc:	4965      	ldr	r1, [pc, #404]	; (1b294 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
   1b0fe:	47b0      	blx	r6
   1b100:	e046      	b.n	1b190 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
   1b102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
   1b104:	b95b      	cbnz	r3, 1b11e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xb6>
   1b106:	4b64      	ldr	r3, [pc, #400]	; (1b298 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x230>)
   1b108:	6965      	ldr	r5, [r4, #20]
   1b10a:	9300      	str	r3, [sp, #0]
   1b10c:	238e      	movs	r3, #142	; 0x8e
    TF_LITE_ENSURE(context, affine_quantization->scale);
   1b10e:	4620      	mov	r0, r4
   1b110:	4a5f      	ldr	r2, [pc, #380]	; (1b290 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
   1b112:	4962      	ldr	r1, [pc, #392]	; (1b29c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
   1b114:	47a8      	blx	r5
                      affine_quantization->zero_point->size);
  }

  return CalculateOpData(context, node, params, width, height, filter_width,
                         filter_height, data_type, data);
}
   1b116:	4658      	mov	r0, fp
   1b118:	b013      	add	sp, #76	; 0x4c
   1b11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE(context, affine_quantization->scale);
   1b11e:	6819      	ldr	r1, [r3, #0]
   1b120:	b921      	cbnz	r1, 1b12c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
   1b122:	4b5f      	ldr	r3, [pc, #380]	; (1b2a0 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
   1b124:	6965      	ldr	r5, [r4, #20]
   1b126:	9300      	str	r3, [sp, #0]
   1b128:	238f      	movs	r3, #143	; 0x8f
   1b12a:	e7f0      	b.n	1b10e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
   1b12c:	685a      	ldr	r2, [r3, #4]
   1b12e:	b922      	cbnz	r2, 1b13a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xd2>
   1b130:	4b5c      	ldr	r3, [pc, #368]	; (1b2a4 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
   1b132:	6965      	ldr	r5, [r4, #20]
   1b134:	9300      	str	r3, [sp, #0]
   1b136:	2390      	movs	r3, #144	; 0x90
   1b138:	e7e9      	b.n	1b10e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE(
   1b13a:	680b      	ldr	r3, [r1, #0]
   1b13c:	2b01      	cmp	r3, #1
   1b13e:	d008      	beq.n	1b152 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
   1b140:	68b9      	ldr	r1, [r7, #8]
   1b142:	6909      	ldr	r1, [r1, #16]
   1b144:	428b      	cmp	r3, r1
   1b146:	d004      	beq.n	1b152 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
   1b148:	4b57      	ldr	r3, [pc, #348]	; (1b2a8 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
   1b14a:	6965      	ldr	r5, [r4, #20]
   1b14c:	9300      	str	r3, [sp, #0]
   1b14e:	2391      	movs	r3, #145	; 0x91
   1b150:	e7dd      	b.n	1b10e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
   1b152:	6812      	ldr	r2, [r2, #0]
   1b154:	4293      	cmp	r3, r2
   1b156:	d00c      	beq.n	1b172 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x10a>
   1b158:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1b15c:	4b53      	ldr	r3, [pc, #332]	; (1b2ac <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
   1b15e:	4620      	mov	r0, r4
   1b160:	9301      	str	r3, [sp, #4]
   1b162:	4b53      	ldr	r3, [pc, #332]	; (1b2b0 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
   1b164:	6965      	ldr	r5, [r4, #20]
   1b166:	9300      	str	r3, [sp, #0]
   1b168:	4a49      	ldr	r2, [pc, #292]	; (1b290 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
   1b16a:	2395      	movs	r3, #149	; 0x95
   1b16c:	4949      	ldr	r1, [pc, #292]	; (1b294 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
   1b16e:	47a8      	blx	r5
   1b170:	e7d1      	b.n	1b116 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  bool has_bias = node->inputs->size == 3;
   1b172:	f8d8 7000 	ldr.w	r7, [r8]
   1b176:	683b      	ldr	r3, [r7, #0]
   1b178:	930e      	str	r3, [sp, #56]	; 0x38
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   1b17a:	3b02      	subs	r3, #2
   1b17c:	2b01      	cmp	r3, #1
   1b17e:	d90a      	bls.n	1b196 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x12e>
   1b180:	4b4c      	ldr	r3, [pc, #304]	; (1b2b4 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
   1b182:	4620      	mov	r0, r4
   1b184:	9300      	str	r3, [sp, #0]
   1b186:	6965      	ldr	r5, [r4, #20]
   1b188:	2341      	movs	r3, #65	; 0x41
   1b18a:	4a41      	ldr	r2, [pc, #260]	; (1b290 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
   1b18c:	4943      	ldr	r1, [pc, #268]	; (1b29c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
   1b18e:	47a8      	blx	r5
   1b190:	f04f 0b01 	mov.w	fp, #1
   1b194:	e7bf      	b.n	1b116 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   1b196:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b19a:	f8d3 8000 	ldr.w	r8, [r3]
   1b19e:	930f      	str	r3, [sp, #60]	; 0x3c
   1b1a0:	f1b8 0f01 	cmp.w	r8, #1
   1b1a4:	d009      	beq.n	1b1ba <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x152>
   1b1a6:	2501      	movs	r5, #1
   1b1a8:	4b43      	ldr	r3, [pc, #268]	; (1b2b8 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
   1b1aa:	e9cd 8502 	strd	r8, r5, [sp, #8]
   1b1ae:	9301      	str	r3, [sp, #4]
   1b1b0:	4b42      	ldr	r3, [pc, #264]	; (1b2bc <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
   1b1b2:	6966      	ldr	r6, [r4, #20]
   1b1b4:	9300      	str	r3, [sp, #0]
   1b1b6:	2342      	movs	r3, #66	; 0x42
   1b1b8:	e79e      	b.n	1b0f8 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
      &unused_output_width);
   1b1ba:	f896 b000 	ldrb.w	fp, [r6]
   1b1be:	e9d6 9a01 	ldrd	r9, sl, [r6, #4]

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   1b1c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b1c4:	464b      	mov	r3, r9
   1b1c6:	990d      	ldr	r1, [sp, #52]	; 0x34
   1b1c8:	4658      	mov	r0, fp
   1b1ca:	f8cd 8000 	str.w	r8, [sp]
   1b1ce:	f007 fd74 	bl	22cba <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   1b1d2:	4653      	mov	r3, sl
   1b1d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   1b1d6:	9011      	str	r0, [sp, #68]	; 0x44
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   1b1d8:	990a      	ldr	r1, [sp, #40]	; 0x28
   1b1da:	4658      	mov	r0, fp
   1b1dc:	f8cd 8000 	str.w	r8, [sp]
   1b1e0:	f007 fd6b 	bl	22cba <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int total_padding =
   1b1e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b1e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      ((out_size - 1) * stride + effective_filter_size - in_size);
   1b1e8:	3801      	subs	r0, #1
  int total_padding =
   1b1ea:	1a9b      	subs	r3, r3, r2
   1b1ec:	fb0a 3a00 	mla	sl, sl, r0, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
   1b1f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  int total_padding =
   1b1f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
   1b1f4:	1e58      	subs	r0, r3, #1
  int total_padding =
   1b1f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  total_padding = total_padding > 0 ? total_padding : 0;
   1b1f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  int total_padding =
   1b1fc:	1a9b      	subs	r3, r3, r2
   1b1fe:	fb09 3900 	mla	r9, r9, r0, r3
  total_padding = total_padding > 0 ? total_padding : 0;
   1b202:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  return total_padding / 2;
   1b206:	ea4f 0369 	mov.w	r3, r9, asr #1
   1b20a:	602b      	str	r3, [r5, #0]
   1b20c:	ea4f 036a 	mov.w	r3, sl, asr #1
   1b210:	606b      	str	r3, [r5, #4]
  *offset = total_padding % 2;
   1b212:	f009 0301 	and.w	r3, r9, #1
   1b216:	60ab      	str	r3, [r5, #8]
  if (data_type != kTfLiteFloat32) {
   1b218:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1b21a:	f00a 0001 	and.w	r0, sl, #1
   1b21e:	2b01      	cmp	r3, #1
      &unused_output_width);
   1b220:	60e8      	str	r0, [r5, #12]
  if (data_type != kTfLiteFloat32) {
   1b222:	d02e      	beq.n	1b282 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
}

inline const TfLiteTensor* GetOptionalInputTensor(TfLiteContext* context,
                                                  const TfLiteNode* node,
                                                  int index) {
  const bool use_tensor = index < node->inputs->size &&
   1b224:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1b226:	68a0      	ldr	r0, [r4, #8]
  return &context->tensors[node->inputs->data[index]];
   1b228:	6879      	ldr	r1, [r7, #4]
   1b22a:	68ba      	ldr	r2, [r7, #8]
  const bool use_tensor = index < node->inputs->size &&
   1b22c:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
   1b22e:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   1b232:	eb00 1282 	add.w	r2, r0, r2, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   1b236:	dd22      	ble.n	1b27e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x216>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   1b238:	68fb      	ldr	r3, [r7, #12]
  const bool use_tensor = index < node->inputs->size &&
   1b23a:	1c5f      	adds	r7, r3, #1
   1b23c:	d01f      	beq.n	1b27e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x216>
  if (use_tensor) {
    return &context->tensors[node->inputs->data[index]];
   1b23e:	eb00 1383 	add.w	r3, r0, r3, lsl #6
    int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
   1b242:	6897      	ldr	r7, [r2, #8]
        context, input, filter, bias, output, params->activation,
   1b244:	3610      	adds	r6, #16
    return tflite::PopulateConvolutionQuantizationParams(
   1b246:	693f      	ldr	r7, [r7, #16]
   1b248:	9708      	str	r7, [sp, #32]
   1b24a:	69ef      	ldr	r7, [r5, #28]
   1b24c:	9707      	str	r7, [sp, #28]
   1b24e:	69af      	ldr	r7, [r5, #24]
   1b250:	9601      	str	r6, [sp, #4]
   1b252:	9706      	str	r7, [sp, #24]
   1b254:	f105 0724 	add.w	r7, r5, #36	; 0x24
   1b258:	9705      	str	r7, [sp, #20]
   1b25a:	f105 0720 	add.w	r7, r5, #32
   1b25e:	9704      	str	r7, [sp, #16]
   1b260:	f105 0714 	add.w	r7, r5, #20
   1b264:	3510      	adds	r5, #16
   1b266:	9502      	str	r5, [sp, #8]
  return &context->tensors[node->outputs->data[index]];
   1b268:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1b26a:	9703      	str	r7, [sp, #12]
   1b26c:	686d      	ldr	r5, [r5, #4]
   1b26e:	eb00 1085 	add.w	r0, r0, r5, lsl #6
   1b272:	9000      	str	r0, [sp, #0]
   1b274:	4620      	mov	r0, r4
   1b276:	f001 fc13 	bl	1caa0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
   1b27a:	4683      	mov	fp, r0
   1b27c:	e74b      	b.n	1b116 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  }
  return nullptr;
   1b27e:	2300      	movs	r3, #0
   1b280:	e7df      	b.n	1b242 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1da>
  return kTfLiteOk;
   1b282:	f04f 0b00 	mov.w	fp, #0
   1b286:	e746      	b.n	1b116 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
   1b288:	0002b870 	.word	0x0002b870
   1b28c:	0002b88a 	.word	0x0002b88a
   1b290:	0002b826 	.word	0x0002b826
   1b294:	0002b856 	.word	0x0002b856
   1b298:	0002b8bb 	.word	0x0002b8bb
   1b29c:	0002b8a4 	.word	0x0002b8a4
   1b2a0:	0002b8cf 	.word	0x0002b8cf
   1b2a4:	0002b8ea 	.word	0x0002b8ea
   1b2a8:	0002b90a 	.word	0x0002b90a
   1b2ac:	0002b98c 	.word	0x0002b98c
   1b2b0:	0002b9b2 	.word	0x0002b9b2
   1b2b4:	0002b9d3 	.word	0x0002b9d3
   1b2b8:	0002bc02 	.word	0x0002bc02
   1b2bc:	0002b9f7 	.word	0x0002b9f7

0001b2c0 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace depthwise_conv

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
   1b2c0:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/depthwise_conv::Prepare,
          /*invoke=*/depthwise_conv::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1b2c2:	4604      	mov	r4, r0
TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
   1b2c4:	4606      	mov	r6, r0
          /*version=*/0};
   1b2c6:	4d04      	ldr	r5, [pc, #16]	; (1b2d8 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv+0x18>)
   1b2c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b2ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b2cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1b2d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1b2d4:	4630      	mov	r0, r6
   1b2d6:	bd70      	pop	{r4, r5, r6, pc}
   1b2d8:	00024e78 	.word	0x00024e78

0001b2dc <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1b2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   1b2e0:	690a      	ldr	r2, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1b2e2:	4680      	mov	r8, r0
   1b2e4:	b0b3      	sub	sp, #204	; 0xcc
  TFLITE_DCHECK(node->user_data != nullptr);
   1b2e6:	b90a      	cbnz	r2, 1b2ec <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10>
   1b2e8:	f009 f8b2 	bl	24450 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1b2ec:	694b      	ldr	r3, [r1, #20]
   1b2ee:	2b00      	cmp	r3, #0
   1b2f0:	d0fa      	beq.n	1b2e8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xc>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   1b2f2:	6887      	ldr	r7, [r0, #8]
  return &context->tensors[node->outputs->data[index]];
   1b2f4:	6848      	ldr	r0, [r1, #4]
   1b2f6:	6840      	ldr	r0, [r0, #4]
   1b2f8:	eb07 1b80 	add.w	fp, r7, r0, lsl #6
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1b2fc:	6808      	ldr	r0, [r1, #0]
  return &context->tensors[node->inputs->data[index]];
   1b2fe:	6846      	ldr	r6, [r0, #4]
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
   1b300:	6801      	ldr	r1, [r0, #0]
   1b302:	ea4f 1986 	mov.w	r9, r6, lsl #6
   1b306:	2903      	cmp	r1, #3
   1b308:	bf08      	it	eq
   1b30a:	68c4      	ldreq	r4, [r0, #12]
   1b30c:	6885      	ldr	r5, [r0, #8]
  switch (input->type) {  // Already know in/out types are same.
   1b30e:	f817 0009 	ldrb.w	r0, [r7, r9]
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
   1b312:	bf14      	ite	ne
   1b314:	2400      	movne	r4, #0
   1b316:	eb07 1484 	addeq.w	r4, r7, r4, lsl #6
  switch (input->type) {  // Already know in/out types are same.
   1b31a:	2803      	cmp	r0, #3
   1b31c:	eb07 1686 	add.w	r6, r7, r6, lsl #6
   1b320:	eb07 1585 	add.w	r5, r7, r5, lsl #6
   1b324:	f000 80cc 	beq.w	1b4c0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1e4>
   1b328:	2809      	cmp	r0, #9
   1b32a:	d068      	beq.n	1b3fe <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x122>
   1b32c:	2801      	cmp	r0, #1
   1b32e:	f040 811c 	bne.w	1b56a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x28e>
  CalculateActivationRange(params->activation, &output_activation_min,
   1b332:	7c19      	ldrb	r1, [r3, #16]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
   1b334:	2901      	cmp	r1, #1
   1b336:	d05a      	beq.n	1b3ee <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x112>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
   1b338:	2903      	cmp	r1, #3
   1b33a:	d05d      	beq.n	1b3f8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
   1b33c:	ed9f 7a91 	vldr	s14, [pc, #580]	; 1b584 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2a8>
   1b340:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b344:	2902      	cmp	r1, #2
   1b346:	eddf 6a90 	vldr	s13, [pc, #576]	; 1b588 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
   1b34a:	fe47 7a87 	vseleq.f32	s15, s15, s14
   1b34e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   1b352:	fe07 7a26 	vseleq.f32	s14, s14, s13
  op_params.padding_type = PaddingType::kSame;
   1b356:	2101      	movs	r1, #1
   1b358:	f88d 1088 	strb.w	r1, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
   1b35c:	6811      	ldr	r1, [r2, #0]
  op_params.padding_values.height = data->padding.height;
   1b35e:	6852      	ldr	r2, [r2, #4]
  op_params.padding_values.width = data->padding.width;
   1b360:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
  op_params.padding_values.height = data->padding.height;
   1b364:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
   1b368:	685a      	ldr	r2, [r3, #4]
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1b36a:	4631      	mov	r1, r6
  op_params.stride_width = params->stride_width;
   1b36c:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
   1b370:	689a      	ldr	r2, [r3, #8]
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1b372:	a80a      	add	r0, sp, #40	; 0x28
  op_params.stride_height = params->stride_height;
   1b374:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
   1b378:	695a      	ldr	r2, [r3, #20]
   1b37a:	f8ad 2096 	strh.w	r2, [sp, #150]	; 0x96
  op_params.dilation_height_factor = params->dilation_height_factor;
   1b37e:	699a      	ldr	r2, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
   1b380:	68db      	ldr	r3, [r3, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
   1b382:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
  op_params.float_activation_min = output_activation_min;
   1b386:	ed8d 7a2e 	vstr	s14, [sp, #184]	; 0xb8
  op_params.float_activation_max = output_activation_max;
   1b38a:	edcd 7a2f 	vstr	s15, [sp, #188]	; 0xbc
  op_params.depth_multiplier = params->depth_multiplier;
   1b38e:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1b392:	f007 fc70 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<float>(filter),
   1b396:	4629      	mov	r1, r5
   1b398:	a810      	add	r0, sp, #64	; 0x40
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

template <typename T>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b39a:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1b39e:	f007 fc6a 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b3a2:	b105      	cbz	r5, 1b3a6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xca>
   1b3a4:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   1b3a6:	ae16      	add	r6, sp, #88	; 0x58
   1b3a8:	4621      	mov	r1, r4
   1b3aa:	4630      	mov	r0, r6
   1b3ac:	f007 fc63 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b3b0:	b104      	cbz	r4, 1b3b4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xd8>
   1b3b2:	6864      	ldr	r4, [r4, #4]
   1b3b4:	af1c      	add	r7, sp, #112	; 0x70
   1b3b6:	4659      	mov	r1, fp
   1b3b8:	4638      	mov	r0, r7
   1b3ba:	f007 fc5c 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1b3be:	f1bb 0f00 	cmp.w	fp, #0
   1b3c2:	d001      	beq.n	1b3c8 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xec>
   1b3c4:	f8db b004 	ldr.w	fp, [fp, #4]
  tflite::reference_ops::DepthwiseConv(
   1b3c8:	4642      	mov	r2, r8
   1b3ca:	ab10      	add	r3, sp, #64	; 0x40
   1b3cc:	a90a      	add	r1, sp, #40	; 0x28
   1b3ce:	a822      	add	r0, sp, #136	; 0x88
   1b3d0:	e9cd 7b03 	strd	r7, fp, [sp, #12]
   1b3d4:	e9cd 6401 	strd	r6, r4, [sp, #4]
   1b3d8:	9500      	str	r5, [sp, #0]
   1b3da:	f7ff fd25 	bl	1ae28 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   1b3de:	4638      	mov	r0, r7
   1b3e0:	f007 fad2 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
   1b3e4:	4630      	mov	r0, r6
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1b3e6:	f007 facf 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),
   1b3ea:	a810      	add	r0, sp, #64	; 0x40
   1b3ec:	e05f      	b.n	1b4ae <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    *activation_max = std::numeric_limits<T>::max();
   1b3ee:	eddf 7a65 	vldr	s15, [pc, #404]	; 1b584 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2a8>
    *activation_min = 0;
   1b3f2:	ed9f 7a66 	vldr	s14, [pc, #408]	; 1b58c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2b0>
   1b3f6:	e7ae      	b.n	1b356 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x7a>
    *activation_max = 6;
   1b3f8:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   1b3fc:	e7f9      	b.n	1b3f2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x116>
  op_params.padding_type = PaddingType::kSame;
   1b3fe:	2101      	movs	r1, #1
      data->per_channel_output_shift, GetTensorShape(input),
   1b400:	e9d2 9a06 	ldrd	r9, sl, [r2, #24]
  op_params.padding_type = PaddingType::kSame;
   1b404:	f88d 1088 	strb.w	r1, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
   1b408:	6811      	ldr	r1, [r2, #0]
      data->per_channel_output_shift, GetTensorShape(input),
   1b40a:	a80a      	add	r0, sp, #40	; 0x28
  op_params.padding_values.width = data->padding.width;
   1b40c:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
  op_params.padding_values.height = data->padding.height;
   1b410:	6851      	ldr	r1, [r2, #4]
   1b412:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
   1b416:	6859      	ldr	r1, [r3, #4]
   1b418:	f8ad 1092 	strh.w	r1, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
   1b41c:	6899      	ldr	r1, [r3, #8]
   1b41e:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
   1b422:	6959      	ldr	r1, [r3, #20]
   1b424:	f8ad 1096 	strh.w	r1, [sp, #150]	; 0x96
  op_params.dilation_height_factor = params->dilation_height_factor;
   1b428:	6999      	ldr	r1, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
   1b42a:	68db      	ldr	r3, [r3, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
   1b42c:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
  op_params.depth_multiplier = params->depth_multiplier;
   1b430:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  op_params.input_offset = -input->params.zero_point;
   1b434:	6933      	ldr	r3, [r6, #16]
  op_params.quantized_activation_max = std::numeric_limits<int8_t>::max();
   1b436:	f06f 017f 	mvn.w	r1, #127	; 0x7f
  op_params.input_offset = -input->params.zero_point;
   1b43a:	425b      	negs	r3, r3
   1b43c:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.weights_offset = 0;
   1b43e:	2300      	movs	r3, #0
   1b440:	9328      	str	r3, [sp, #160]	; 0xa0
  op_params.output_offset = output->params.zero_point;
   1b442:	f8db 3010 	ldr.w	r3, [fp, #16]
   1b446:	9329      	str	r3, [sp, #164]	; 0xa4
  op_params.quantized_activation_max = std::numeric_limits<int8_t>::max();
   1b448:	237f      	movs	r3, #127	; 0x7f
   1b44a:	e9cd 132c 	strd	r1, r3, [sp, #176]	; 0xb0
      data->per_channel_output_shift, GetTensorShape(input),
   1b44e:	4631      	mov	r1, r6
   1b450:	f007 fc11 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b454:	6873      	ldr	r3, [r6, #4]
      GetTensorData<int8>(input), GetTensorShape(filter),
   1b456:	ae10      	add	r6, sp, #64	; 0x40
   1b458:	4629      	mov	r1, r5
   1b45a:	4630      	mov	r0, r6
   1b45c:	9309      	str	r3, [sp, #36]	; 0x24
   1b45e:	f007 fc0a 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b462:	b105      	cbz	r5, 1b466 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x18a>
   1b464:	686d      	ldr	r5, [r5, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
   1b466:	af16      	add	r7, sp, #88	; 0x58
   1b468:	4621      	mov	r1, r4
   1b46a:	4638      	mov	r0, r7
   1b46c:	f007 fc03 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b470:	b104      	cbz	r4, 1b474 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x198>
   1b472:	6864      	ldr	r4, [r4, #4]
      GetTensorData<int32>(bias), GetTensorShape(output),
   1b474:	f10d 0870 	add.w	r8, sp, #112	; 0x70
   1b478:	4659      	mov	r1, fp
   1b47a:	4640      	mov	r0, r8
   1b47c:	f007 fbfb 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
   1b480:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b484:	4652      	mov	r2, sl
   1b486:	e9cd 8305 	strd	r8, r3, [sp, #20]
   1b48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b48c:	4649      	mov	r1, r9
   1b48e:	9300      	str	r3, [sp, #0]
   1b490:	a822      	add	r0, sp, #136	; 0x88
   1b492:	ab0a      	add	r3, sp, #40	; 0x28
   1b494:	e9cd 7403 	strd	r7, r4, [sp, #12]
   1b498:	e9cd 6501 	strd	r6, r5, [sp, #4]
   1b49c:	f007 fad1 	bl	22a42 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
   1b4a0:	4640      	mov	r0, r8
   1b4a2:	f007 fa71 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
   1b4a6:	4638      	mov	r0, r7
   1b4a8:	f007 fa6e 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
   1b4ac:	4630      	mov	r0, r6
   1b4ae:	f007 fa6b 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
      data->per_channel_output_shift, GetTensorShape(input),
   1b4b2:	a80a      	add	r0, sp, #40	; 0x28
   1b4b4:	f007 fa68 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1b4b8:	2000      	movs	r0, #0
}
   1b4ba:	b033      	add	sp, #204	; 0xcc
   1b4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  op_params.padding_type = PaddingType::kSame;
   1b4c0:	2001      	movs	r0, #1
  const int32_t filter_offset = -filter->params.zero_point;
   1b4c2:	6929      	ldr	r1, [r5, #16]
  const int32_t input_offset = -input->params.zero_point;
   1b4c4:	6937      	ldr	r7, [r6, #16]
  const int32_t output_offset = output->params.zero_point;
   1b4c6:	f8db c010 	ldr.w	ip, [fp, #16]
  op_params.padding_type = PaddingType::kSame;
   1b4ca:	f88d 0088 	strb.w	r0, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
   1b4ce:	6810      	ldr	r0, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
   1b4d0:	427f      	negs	r7, r7
  op_params.padding_values.width = data->padding.width;
   1b4d2:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
  op_params.padding_values.height = data->padding.height;
   1b4d6:	6850      	ldr	r0, [r2, #4]
  const int32_t filter_offset = -filter->params.zero_point;
   1b4d8:	4249      	negs	r1, r1
  op_params.padding_values.height = data->padding.height;
   1b4da:	f8ad 008c 	strh.w	r0, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
   1b4de:	6858      	ldr	r0, [r3, #4]
   1b4e0:	f8ad 0092 	strh.w	r0, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
   1b4e4:	6898      	ldr	r0, [r3, #8]
   1b4e6:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
   1b4ea:	6958      	ldr	r0, [r3, #20]
   1b4ec:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
  op_params.dilation_height_factor = params->dilation_height_factor;
   1b4f0:	6998      	ldr	r0, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
   1b4f2:	68db      	ldr	r3, [r3, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
   1b4f4:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
  op_params.depth_multiplier = params->depth_multiplier;
   1b4f8:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  op_params.quantized_activation_min = data->output_activation_min;
   1b4fc:	6a13      	ldr	r3, [r2, #32]
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1b4fe:	a80a      	add	r0, sp, #40	; 0x28
  op_params.quantized_activation_min = data->output_activation_min;
   1b500:	932c      	str	r3, [sp, #176]	; 0xb0
  op_params.quantized_activation_max = data->output_activation_max;
   1b502:	6a53      	ldr	r3, [r2, #36]	; 0x24
  op_params.weights_offset = filter_offset;
   1b504:	e9cd 7127 	strd	r7, r1, [sp, #156]	; 0x9c
  op_params.quantized_activation_max = data->output_activation_max;
   1b508:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_multiplier = data->output_multiplier;
   1b50a:	6913      	ldr	r3, [r2, #16]
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1b50c:	4631      	mov	r1, r6
  op_params.output_multiplier = data->output_multiplier;
   1b50e:	932a      	str	r3, [sp, #168]	; 0xa8
  op_params.output_shift = -data->output_shift;
   1b510:	6953      	ldr	r3, [r2, #20]
  op_params.output_offset = output_offset;
   1b512:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
  op_params.output_shift = -data->output_shift;
   1b516:	425b      	negs	r3, r3
   1b518:	932b      	str	r3, [sp, #172]	; 0xac
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1b51a:	f007 fbac 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),
   1b51e:	4629      	mov	r1, r5
   1b520:	a810      	add	r0, sp, #64	; 0x40
   1b522:	6877      	ldr	r7, [r6, #4]
   1b524:	f007 fba7 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b528:	f8d5 8004 	ldr.w	r8, [r5, #4]
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1b52c:	ad16      	add	r5, sp, #88	; 0x58
   1b52e:	4621      	mov	r1, r4
   1b530:	4628      	mov	r0, r5
   1b532:	f007 fba0 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b536:	b104      	cbz	r4, 1b53a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x25e>
   1b538:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<uint8_t>(output));
   1b53a:	ae1c      	add	r6, sp, #112	; 0x70
   1b53c:	4659      	mov	r1, fp
   1b53e:	4630      	mov	r0, r6
   1b540:	f007 fb99 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
  return depthwise_conv::DepthwiseConvBasicKernel<
      DepthwiseConvOutputRounding::kAwayFromZero>::Run(params, input_shape,
   1b544:	f8db 3004 	ldr.w	r3, [fp, #4]
   1b548:	463a      	mov	r2, r7
   1b54a:	e9cd 6303 	strd	r6, r3, [sp, #12]
   1b54e:	a90a      	add	r1, sp, #40	; 0x28
   1b550:	ab10      	add	r3, sp, #64	; 0x40
   1b552:	a822      	add	r0, sp, #136	; 0x88
   1b554:	e9cd 5401 	strd	r5, r4, [sp, #4]
   1b558:	f8cd 8000 	str.w	r8, [sp]
   1b55c:	f007 fbbf 	bl	22cde <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph>
   1b560:	4630      	mov	r0, r6
   1b562:	f007 fa11 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1b566:	4628      	mov	r0, r5
   1b568:	e73d      	b.n	1b3e6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1b56a:	f8d8 4014 	ldr.w	r4, [r8, #20]
   1b56e:	f7f3 fecf 	bl	f310 <TfLiteTypeGetName>
   1b572:	f817 3009 	ldrb.w	r3, [r7, r9]
   1b576:	4602      	mov	r2, r0
   1b578:	4905      	ldr	r1, [pc, #20]	; (1b590 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2b4>)
   1b57a:	4640      	mov	r0, r8
   1b57c:	47a0      	blx	r4
      return kTfLiteError;
   1b57e:	2001      	movs	r0, #1
   1b580:	e79b      	b.n	1b4ba <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1de>
   1b582:	bf00      	nop
   1b584:	7f7fffff 	.word	0x7f7fffff
   1b588:	ff7fffff 	.word	0xff7fffff
   1b58c:	00000000 	.word	0x00000000
   1b590:	0002ba0b 	.word	0x0002ba0b

0001b594 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1b594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   1b598:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1b59a:	4604      	mov	r4, r0
   1b59c:	460a      	mov	r2, r1
   1b59e:	b089      	sub	sp, #36	; 0x24
  TFLITE_DCHECK(node->user_data != nullptr);
   1b5a0:	b90f      	cbnz	r7, 1b5a6 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
   1b5a2:	f008 ff55 	bl	24450 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1b5a6:	f8d1 9014 	ldr.w	r9, [r1, #20]
   1b5aa:	f1b9 0f00 	cmp.w	r9, #0
   1b5ae:	d0f8      	beq.n	1b5a2 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe>

  OpData* data = static_cast<OpData*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1b5b0:	f8d1 e000 	ldr.w	lr, [r1]
   1b5b4:	6885      	ldr	r5, [r0, #8]
  const bool use_tensor = index < node->inputs->size &&
   1b5b6:	f8de 3000 	ldr.w	r3, [lr]
  return &context->tensors[node->inputs->data[index]];
   1b5ba:	f8de 1004 	ldr.w	r1, [lr, #4]
  const bool use_tensor = index < node->inputs->size &&
   1b5be:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
   1b5c0:	ea4f 1081 	mov.w	r0, r1, lsl #6
   1b5c4:	eb05 1181 	add.w	r1, r5, r1, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   1b5c8:	dd27      	ble.n	1b61a <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x86>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   1b5ca:	f8de 300c 	ldr.w	r3, [lr, #12]
  const bool use_tensor = index < node->inputs->size &&
   1b5ce:	1c5e      	adds	r6, r3, #1
   1b5d0:	d023      	beq.n	1b61a <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x86>
    return &context->tensors[node->inputs->data[index]];
   1b5d2:	eb05 1383 	add.w	r3, r5, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1b5d6:	6852      	ldr	r2, [r2, #4]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1b5d8:	5c28      	ldrb	r0, [r5, r0]
   1b5da:	6856      	ldr	r6, [r2, #4]
   1b5dc:	ea4f 1886 	mov.w	r8, r6, lsl #6
   1b5e0:	f815 c008 	ldrb.w	ip, [r5, r8]
   1b5e4:	eb05 1686 	add.w	r6, r5, r6, lsl #6
   1b5e8:	4584      	cmp	ip, r0
   1b5ea:	d018      	beq.n	1b61e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
   1b5ec:	6967      	ldr	r7, [r4, #20]
   1b5ee:	f7f3 fe8f 	bl	f310 <TfLiteTypeGetName>
   1b5f2:	4606      	mov	r6, r0
   1b5f4:	f815 0008 	ldrb.w	r0, [r5, r8]
   1b5f8:	f7f3 fe8a 	bl	f310 <TfLiteTypeGetName>
   1b5fc:	4b22      	ldr	r3, [pc, #136]	; (1b688 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
   1b5fe:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1b602:	9301      	str	r3, [sp, #4]
   1b604:	4b21      	ldr	r3, [pc, #132]	; (1b68c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
   1b606:	4620      	mov	r0, r4
   1b608:	9300      	str	r3, [sp, #0]
   1b60a:	4a21      	ldr	r2, [pc, #132]	; (1b690 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
   1b60c:	2360      	movs	r3, #96	; 0x60
   1b60e:	4921      	ldr	r1, [pc, #132]	; (1b694 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   1b610:	47b8      	blx	r7
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
   1b612:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
                         filter, bias, output, data);
}
   1b614:	b009      	add	sp, #36	; 0x24
   1b616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return nullptr;
   1b61a:	2300      	movs	r3, #0
   1b61c:	e7db      	b.n	1b5d6 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
  return &context->tensors[node->inputs->data[index]];
   1b61e:	f8de 2008 	ldr.w	r2, [lr, #8]
   1b622:	0190      	lsls	r0, r2, #6
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
   1b624:	5c28      	ldrb	r0, [r5, r0]
   1b626:	eb05 1282 	add.w	r2, r5, r2, lsl #6
   1b62a:	4560      	cmp	r0, ip
   1b62c:	d004      	beq.n	1b638 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa4>
   1b62e:	4620      	mov	r0, r4
   1b630:	6963      	ldr	r3, [r4, #20]
   1b632:	4919      	ldr	r1, [pc, #100]	; (1b698 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
   1b634:	4798      	blx	r3
   1b636:	e7ec      	b.n	1b612 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x7e>
  if (data_type != kTfLiteFloat32) {
   1b638:	2801      	cmp	r0, #1
   1b63a:	d023      	beq.n	1b684 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>
  return CalculateOpData(context, params->activation, input->type, input,
   1b63c:	f899 5000 	ldrb.w	r5, [r9]
    double real_multiplier = 0.0;
   1b640:	f04f 0800 	mov.w	r8, #0
   1b644:	f04f 0900 	mov.w	r9, #0
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   1b648:	a806      	add	r0, sp, #24
   1b64a:	e9cd 6000 	strd	r6, r0, [sp]
   1b64e:	4620      	mov	r0, r4
    double real_multiplier = 0.0;
   1b650:	e9cd 8906 	strd	r8, r9, [sp, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   1b654:	f7fa fc4c 	bl	15ef0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   1b658:	2800      	cmp	r0, #0
   1b65a:	d1db      	bne.n	1b614 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
   1b65c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1b660:	463a      	mov	r2, r7
   1b662:	ab05      	add	r3, sp, #20
   1b664:	f001 f938 	bl	1c8d8 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    data->output_shift = -exponent;
   1b668:	9b05      	ldr	r3, [sp, #20]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1b66a:	4632      	mov	r2, r6
    data->output_shift = -exponent;
   1b66c:	425b      	negs	r3, r3
   1b66e:	607b      	str	r3, [r7, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1b670:	f107 030c 	add.w	r3, r7, #12
   1b674:	9300      	str	r3, [sp, #0]
   1b676:	4629      	mov	r1, r5
   1b678:	4620      	mov	r0, r4
   1b67a:	f107 0308 	add.w	r3, r7, #8
   1b67e:	f001 f9af 	bl	1c9e0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
   1b682:	e7c7      	b.n	1b614 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  return status;
   1b684:	2000      	movs	r0, #0
   1b686:	e7c5      	b.n	1b614 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
   1b688:	0002ba72 	.word	0x0002ba72
   1b68c:	0002ba7f 	.word	0x0002ba7f
   1b690:	0002ba27 	.word	0x0002ba27
   1b694:	0002ba58 	.word	0x0002ba58
   1b698:	0002ba8b 	.word	0x0002ba8b

0001b69c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:
}

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
   1b69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6a0:	ed2d 8b02 	vpush	{d8}
  if (activation == kTfLiteActRelu) {
   1b6a4:	2a01      	cmp	r2, #1
   1b6a6:	b09d      	sub	sp, #116	; 0x74
   1b6a8:	461c      	mov	r4, r3
   1b6aa:	e9dd 8528 	ldrd	r8, r5, [sp, #160]	; 0xa0
   1b6ae:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
   1b6b2:	d067      	beq.n	1b784 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xe8>
  } else if (activation == kTfLiteActRelu6) {
   1b6b4:	2a03      	cmp	r2, #3
   1b6b6:	d06a      	beq.n	1b78e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xf2>
    *activation_max = std::numeric_limits<T>::max();
   1b6b8:	eddf 7a51 	vldr	s15, [pc, #324]	; 1b800 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x164>
   1b6bc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
   1b6c0:	2a02      	cmp	r2, #2
   1b6c2:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
   1b6c6:	fe48 8aa7 	vseleq.f32	s17, s17, s15
   1b6ca:	eddf 7a4e 	vldr	s15, [pc, #312]	; 1b804 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x168>
   1b6ce:	fe08 8a27 	vseleq.f32	s16, s16, s15
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1b6d2:	4621      	mov	r1, r4
   1b6d4:	a804      	add	r0, sp, #16
   1b6d6:	f007 face 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b6da:	b104      	cbz	r4, 1b6de <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x42>
   1b6dc:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(filter), GetTensorData<float>(filter),
   1b6de:	4641      	mov	r1, r8
   1b6e0:	a80a      	add	r0, sp, #40	; 0x28
   1b6e2:	f007 fac8 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b6e6:	f1b8 0f00 	cmp.w	r8, #0
   1b6ea:	d001      	beq.n	1b6f0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x54>
   1b6ec:	f8d8 8004 	ldr.w	r8, [r8, #4]
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   1b6f0:	4629      	mov	r1, r5
   1b6f2:	a810      	add	r0, sp, #64	; 0x40
   1b6f4:	f007 fabf 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b6f8:	b105      	cbz	r5, 1b6fc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x60>
   1b6fa:	686d      	ldr	r5, [r5, #4]
   1b6fc:	4649      	mov	r1, r9
   1b6fe:	a816      	add	r0, sp, #88	; 0x58
   1b700:	f007 fab9 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1b704:	f1b9 0f00 	cmp.w	r9, #0
   1b708:	d001      	beq.n	1b70e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x72>
   1b70a:	f8d9 9004 	ldr.w	r9, [r9, #4]
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
   1b70e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1b710:	a816      	add	r0, sp, #88	; 0x58
   1b712:	3b01      	subs	r3, #1
   1b714:	4619      	mov	r1, r3
   1b716:	9300      	str	r3, [sp, #0]
   1b718:	f007 fc13 	bl	22f42 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int weights_dims_count = weights_shape.DimensionsCount();
   1b71c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   1b71e:	9b00      	ldr	r3, [sp, #0]
   1b720:	1eb1      	subs	r1, r6, #2
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
   1b722:	9002      	str	r0, [sp, #8]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   1b724:	aa16      	add	r2, sp, #88	; 0x58
   1b726:	a80a      	add	r0, sp, #40	; 0x28
   1b728:	f007 f97c 	bl	22a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   1b72c:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   1b72e:	4683      	mov	fp, r0
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   1b730:	a80a      	add	r0, sp, #40	; 0x28
   1b732:	f007 f934 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
   1b736:	2300      	movs	r3, #0
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
   1b738:	eddf 6a33 	vldr	s13, [pc, #204]	; 1b808 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x16c>
  for (int b = 0; b < batches; ++b) {
   1b73c:	461e      	mov	r6, r3
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   1b73e:	9300      	str	r3, [sp, #0]
  for (int b = 0; b < batches; ++b) {
   1b740:	9a02      	ldr	r2, [sp, #8]
   1b742:	42b2      	cmp	r2, r6
   1b744:	dd4a      	ble.n	1b7dc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x140>
   1b746:	9a00      	ldr	r2, [sp, #0]
   1b748:	462f      	mov	r7, r5
   1b74a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
   1b74e:	9201      	str	r2, [sp, #4]
   1b750:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   1b754:	9203      	str	r2, [sp, #12]
   1b756:	2200      	movs	r2, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1b758:	4694      	mov	ip, r2
   1b75a:	45e3      	cmp	fp, ip
   1b75c:	dd38      	ble.n	1b7d0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x134>
      for (int d = 0; d < accum_depth; ++d) {
   1b75e:	f04f 0e00 	mov.w	lr, #0
      float total = 0.f;
   1b762:	eddf 7a29 	vldr	s15, [pc, #164]	; 1b808 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x16c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1b766:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1b76a:	eb08 0182 	add.w	r1, r8, r2, lsl #2
      for (int d = 0; d < accum_depth; ++d) {
   1b76e:	4570      	cmp	r0, lr
   1b770:	dd10      	ble.n	1b794 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xf8>
        total += input_data[b * accum_depth + d] *
   1b772:	ecba 6a01 	vldmia	sl!, {s12}
                 weights_data[out_c * accum_depth + d];
   1b776:	ecb1 7a01 	vldmia	r1!, {s14}
      for (int d = 0; d < accum_depth; ++d) {
   1b77a:	f10e 0e01 	add.w	lr, lr, #1
        total += input_data[b * accum_depth + d] *
   1b77e:	eee6 7a07 	vfma.f32	s15, s12, s14
      for (int d = 0; d < accum_depth; ++d) {
   1b782:	e7f4      	b.n	1b76e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xd2>
    *activation_max = std::numeric_limits<T>::max();
   1b784:	eddf 8a1e 	vldr	s17, [pc, #120]	; 1b800 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x164>
    *activation_min = 0;
   1b788:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 1b808 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x16c>
   1b78c:	e7a1      	b.n	1b6d2 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x36>
    *activation_max = 6;
   1b78e:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
   1b792:	e7f9      	b.n	1b788 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xec>
      if (bias_data) {
   1b794:	b1cd      	cbz	r5, 1b7ca <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x12e>
        bias_value = bias_data[out_c];
   1b796:	ed97 7a00 	vldr	s14, [r7]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
   1b79a:	ee77 7a87 	vadd.f32	s15, s15, s14
	return __b;
   1b79e:	eef4 7a48 	vcmp.f32	s15, s16
   1b7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b7a6:	bf48      	it	mi
   1b7a8:	eef0 7a48 	vmovmi.f32	s15, s16
	return __b;
   1b7ac:	eef4 7a68 	vcmp.f32	s15, s17
   1b7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b7b4:	9901      	ldr	r1, [sp, #4]
   1b7b6:	fe78 7aa7 	vselgt.f32	s15, s17, s15
   1b7ba:	ece1 7a01 	vstmia	r1!, {s15}
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1b7be:	f10c 0c01 	add.w	ip, ip, #1
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
   1b7c2:	9101      	str	r1, [sp, #4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1b7c4:	3704      	adds	r7, #4
   1b7c6:	4402      	add	r2, r0
   1b7c8:	e7c7      	b.n	1b75a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xbe>
      float bias_value = 0.0f;
   1b7ca:	eeb0 7a66 	vmov.f32	s14, s13
   1b7ce:	e7e4      	b.n	1b79a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xfe>
  for (int b = 0; b < batches; ++b) {
   1b7d0:	9a00      	ldr	r2, [sp, #0]
   1b7d2:	3601      	adds	r6, #1
   1b7d4:	445a      	add	r2, fp
   1b7d6:	9200      	str	r2, [sp, #0]
   1b7d8:	4403      	add	r3, r0
   1b7da:	e7b1      	b.n	1b740 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xa4>
   1b7dc:	a816      	add	r0, sp, #88	; 0x58
   1b7de:	f007 f8d3 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
   1b7e2:	a810      	add	r0, sp, #64	; 0x40
   1b7e4:	f007 f8d0 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
   1b7e8:	a80a      	add	r0, sp, #40	; 0x28
   1b7ea:	f007 f8cd 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1b7ee:	a804      	add	r0, sp, #16
   1b7f0:	f007 f8ca 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
}
   1b7f4:	2000      	movs	r0, #0
   1b7f6:	b01d      	add	sp, #116	; 0x74
   1b7f8:	ecbd 8b02 	vpop	{d8}
   1b7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b800:	7f7fffff 	.word	0x7f7fffff
   1b804:	ff7fffff 	.word	0xff7fffff
   1b808:	00000000 	.word	0x00000000

0001b80c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1b80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b810:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1b814:	694a      	ldr	r2, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1b816:	4680      	mov	r8, r0
   1b818:	b0b5      	sub	sp, #212	; 0xd4
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1b81a:	b90a      	cbnz	r2, 1b820 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x14>
   1b81c:	f008 fe18 	bl	24450 <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1b820:	f8d0 9008 	ldr.w	r9, [r0, #8]
   1b824:	6808      	ldr	r0, [r1, #0]
  const bool use_tensor = index < node->inputs->size &&
   1b826:	6803      	ldr	r3, [r0, #0]
  return &context->tensors[node->inputs->data[index]];
   1b828:	6846      	ldr	r6, [r0, #4]
   1b82a:	6887      	ldr	r7, [r0, #8]
  const bool use_tensor = index < node->inputs->size &&
   1b82c:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
   1b82e:	ea4f 1b86 	mov.w	fp, r6, lsl #6
   1b832:	eb09 1787 	add.w	r7, r9, r7, lsl #6
   1b836:	eb09 1686 	add.w	r6, r9, r6, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   1b83a:	dd23      	ble.n	1b884 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x78>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   1b83c:	68c4      	ldr	r4, [r0, #12]
  const bool use_tensor = index < node->inputs->size &&
   1b83e:	1c63      	adds	r3, r4, #1
   1b840:	d020      	beq.n	1b884 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x78>
    return &context->tensors[node->inputs->data[index]];
   1b842:	eb09 1484 	add.w	r4, r9, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1b846:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
   1b848:	6908      	ldr	r0, [r1, #16]
   1b84a:	685d      	ldr	r5, [r3, #4]
   1b84c:	ea4f 1a85 	mov.w	sl, r5, lsl #6
   1b850:	eb09 1585 	add.w	r5, r9, r5, lsl #6
   1b854:	2800      	cmp	r0, #0
   1b856:	d0e1      	beq.n	1b81c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
   1b858:	f819 300b 	ldrb.w	r3, [r9, fp]
   1b85c:	2b03      	cmp	r3, #3
   1b85e:	d057      	beq.n	1b910 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x104>
   1b860:	2b09      	cmp	r3, #9
   1b862:	d011      	beq.n	1b888 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
   1b864:	2b01      	cmp	r3, #1
   1b866:	f040 8126 	bne.w	1bab6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2aa>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
   1b86a:	7812      	ldrb	r2, [r2, #0]
   1b86c:	4633      	mov	r3, r6
   1b86e:	4640      	mov	r0, r8
   1b870:	e9cd 4501 	strd	r4, r5, [sp, #4]
   1b874:	9700      	str	r7, [sp, #0]
   1b876:	f7ff ff11 	bl	1b69c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   1b87a:	b035      	add	sp, #212	; 0xd4
   1b87c:	ecbd 8b02 	vpop	{d8}
   1b880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return nullptr;
   1b884:	2400      	movs	r4, #0
   1b886:	e7de      	b.n	1b846 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3a>
  op_params.input_offset = -input->params.zero_point;
   1b888:	6933      	ldr	r3, [r6, #16]
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1b88a:	4631      	mov	r1, r6
  op_params.input_offset = -input->params.zero_point;
   1b88c:	425b      	negs	r3, r3
   1b88e:	932a      	str	r3, [sp, #168]	; 0xa8
  op_params.weights_offset = -filter->params.zero_point;
   1b890:	693b      	ldr	r3, [r7, #16]
   1b892:	425b      	negs	r3, r3
   1b894:	932b      	str	r3, [sp, #172]	; 0xac
  op_params.output_offset = output->params.zero_point;
   1b896:	692b      	ldr	r3, [r5, #16]
   1b898:	932c      	str	r3, [sp, #176]	; 0xb0
  op_params.output_multiplier = data.output_multiplier;
   1b89a:	6803      	ldr	r3, [r0, #0]
   1b89c:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_shift = -data.output_shift;
   1b89e:	6843      	ldr	r3, [r0, #4]
   1b8a0:	425b      	negs	r3, r3
   1b8a2:	932e      	str	r3, [sp, #184]	; 0xb8
  op_params.quantized_activation_min = data.output_activation_min;
   1b8a4:	6883      	ldr	r3, [r0, #8]
   1b8a6:	932f      	str	r3, [sp, #188]	; 0xbc
  op_params.quantized_activation_max = data.output_activation_max;
   1b8a8:	68c3      	ldr	r3, [r0, #12]
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1b8aa:	a812      	add	r0, sp, #72	; 0x48
  op_params.quantized_activation_max = data.output_activation_max;
   1b8ac:	9330      	str	r3, [sp, #192]	; 0xc0
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1b8ae:	f007 f9e2 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
   1b8b2:	4639      	mov	r1, r7
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b8b4:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1b8b8:	a818      	add	r0, sp, #96	; 0x60
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1b8ba:	ae1e      	add	r6, sp, #120	; 0x78
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
   1b8bc:	f007 f9db 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1b8c0:	4621      	mov	r1, r4
   1b8c2:	4630      	mov	r0, r6
   1b8c4:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1b8c8:	f007 f9d5 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b8cc:	b104      	cbz	r4, 1b8d0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc4>
   1b8ce:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<int8_t>(output));
   1b8d0:	af24      	add	r7, sp, #144	; 0x90
   1b8d2:	4629      	mov	r1, r5
   1b8d4:	4638      	mov	r0, r7
   1b8d6:	f007 f9ce 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
   1b8da:	686b      	ldr	r3, [r5, #4]
   1b8dc:	4642      	mov	r2, r8
   1b8de:	e9cd 7303 	strd	r7, r3, [sp, #12]
   1b8e2:	e9cd 6401 	strd	r6, r4, [sp, #4]
   1b8e6:	f8cd 9000 	str.w	r9, [sp]
   1b8ea:	ab18      	add	r3, sp, #96	; 0x60
   1b8ec:	a912      	add	r1, sp, #72	; 0x48
   1b8ee:	a82a      	add	r0, sp, #168	; 0xa8
   1b8f0:	f007 fbc3 	bl	2307a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa>
      TF_LITE_FULLY_CONNECTED(uint8_t);
   1b8f4:	4638      	mov	r0, r7
   1b8f6:	f007 f847 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
   1b8fa:	4630      	mov	r0, r6
      TF_LITE_FULLY_CONNECTED(int16_t);
   1b8fc:	f007 f844 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
   1b900:	a818      	add	r0, sp, #96	; 0x60
   1b902:	f007 f841 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
   1b906:	a812      	add	r0, sp, #72	; 0x48
   1b908:	f007 f83e 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1b90c:	2000      	movs	r0, #0
      break;
   1b90e:	e7b4      	b.n	1b87a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  const int32_t filter_offset = -filter->params.zero_point;
   1b910:	693b      	ldr	r3, [r7, #16]
  const int32_t input_offset = -input->params.zero_point;
   1b912:	6932      	ldr	r2, [r6, #16]
  const int32_t filter_offset = -filter->params.zero_point;
   1b914:	425b      	negs	r3, r3
  const int32_t input_offset = -input->params.zero_point;
   1b916:	4252      	negs	r2, r2
  const int32_t output_offset = output->params.zero_point;
   1b918:	6929      	ldr	r1, [r5, #16]
  op_params.weights_offset = filter_offset;
   1b91a:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
  op_params.output_multiplier = data.output_multiplier;
   1b91e:	6803      	ldr	r3, [r0, #0]
  op_params.output_offset = output_offset;
   1b920:	912c      	str	r1, [sp, #176]	; 0xb0
  op_params.output_multiplier = data.output_multiplier;
   1b922:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_shift = -data.output_shift;
   1b924:	6843      	ldr	r3, [r0, #4]
   1b926:	425b      	negs	r3, r3
   1b928:	932e      	str	r3, [sp, #184]	; 0xb8
  op_params.quantized_activation_min = data.output_activation_min;
   1b92a:	6883      	ldr	r3, [r0, #8]
   1b92c:	932f      	str	r3, [sp, #188]	; 0xbc
  op_params.quantized_activation_max = data.output_activation_max;
   1b92e:	68c3      	ldr	r3, [r0, #12]
  switch (output->type) {
   1b930:	f819 000a 	ldrb.w	r0, [r9, sl]
  op_params.quantized_activation_max = data.output_activation_max;
   1b934:	9330      	str	r3, [sp, #192]	; 0xc0
  switch (output->type) {
   1b936:	2803      	cmp	r0, #3
   1b938:	d00d      	beq.n	1b956 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x14a>
   1b93a:	2807      	cmp	r0, #7
   1b93c:	d031      	beq.n	1b9a2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x196>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1b93e:	f8d8 4014 	ldr.w	r4, [r8, #20]
   1b942:	f7f3 fce5 	bl	f310 <TfLiteTypeGetName>
   1b946:	4602      	mov	r2, r0
   1b948:	f819 300a 	ldrb.w	r3, [r9, sl]
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1b94c:	4640      	mov	r0, r8
   1b94e:	495e      	ldr	r1, [pc, #376]	; (1bac8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
   1b950:	47a0      	blx	r4
      return kTfLiteError;
   1b952:	2001      	movs	r0, #1
   1b954:	e791      	b.n	1b87a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
      TF_LITE_FULLY_CONNECTED(uint8_t);
   1b956:	4631      	mov	r1, r6
   1b958:	a812      	add	r0, sp, #72	; 0x48
   1b95a:	f007 f98c 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b95e:	4639      	mov	r1, r7
   1b960:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1b964:	a818      	add	r0, sp, #96	; 0x60
   1b966:	ae1e      	add	r6, sp, #120	; 0x78
   1b968:	f007 f985 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b96c:	4621      	mov	r1, r4
   1b96e:	4630      	mov	r0, r6
   1b970:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1b974:	f007 f97f 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b978:	b104      	cbz	r4, 1b97c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x170>
   1b97a:	6864      	ldr	r4, [r4, #4]
   1b97c:	af24      	add	r7, sp, #144	; 0x90
   1b97e:	4629      	mov	r1, r5
   1b980:	4638      	mov	r0, r7
   1b982:	f007 f978 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b986:	686b      	ldr	r3, [r5, #4]
   1b988:	4642      	mov	r2, r8
   1b98a:	e9cd 7303 	strd	r7, r3, [sp, #12]
   1b98e:	e9cd 6401 	strd	r6, r4, [sp, #4]
   1b992:	f8cd 9000 	str.w	r9, [sp]
   1b996:	ab18      	add	r3, sp, #96	; 0x60
   1b998:	a912      	add	r1, sp, #72	; 0x48
   1b99a:	a82a      	add	r0, sp, #168	; 0xa8
   1b99c:	f007 faea 	bl	22f74 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph>
   1b9a0:	e7a8      	b.n	1b8f4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TF_LITE_FULLY_CONNECTED(int16_t);
   1b9a2:	4631      	mov	r1, r6
   1b9a4:	a812      	add	r0, sp, #72	; 0x48
   1b9a6:	f007 f966 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b9aa:	6873      	ldr	r3, [r6, #4]
   1b9ac:	4639      	mov	r1, r7
   1b9ae:	a818      	add	r0, sp, #96	; 0x60
   1b9b0:	930a      	str	r3, [sp, #40]	; 0x28
   1b9b2:	f007 f960 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b9b6:	687b      	ldr	r3, [r7, #4]
   1b9b8:	4621      	mov	r1, r4
   1b9ba:	a81e      	add	r0, sp, #120	; 0x78
   1b9bc:	930b      	str	r3, [sp, #44]	; 0x2c
   1b9be:	f007 f95a 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b9c2:	b104      	cbz	r4, 1b9c6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ba>
   1b9c4:	6864      	ldr	r4, [r4, #4]
   1b9c6:	4629      	mov	r1, r5
   1b9c8:	a824      	add	r0, sp, #144	; 0x90
   1b9ca:	f007 f954 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1b9ce:	686b      	ldr	r3, [r5, #4]
   1b9d0:	930c      	str	r3, [sp, #48]	; 0x30
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
  const int32 input_offset = params.input_offset;
   1b9d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1b9d4:	930d      	str	r3, [sp, #52]	; 0x34
  const int32 filter_offset = params.weights_offset;
   1b9d6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1b9d8:	930e      	str	r3, [sp, #56]	; 0x38
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
   1b9da:	e9dd 532c 	ldrd	r5, r3, [sp, #176]	; 0xb0
   1b9de:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   1b9e2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1b9e4:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   1b9e8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1b9ea:	9307      	str	r3, [sp, #28]
  const int32 output_activation_max = params.quantized_activation_max;
   1b9ec:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   1b9ee:	9308      	str	r3, [sp, #32]

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   1b9f0:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   1b9f4:	4293      	cmp	r3, r2
   1b9f6:	f73f af11 	bgt.w	1b81c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  TFLITE_DCHECK_EQ(output_offset, 0);
   1b9fa:	2d00      	cmp	r5, #0
   1b9fc:	f47f af0e 	bne.w	1b81c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   1ba00:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ba02:	a824      	add	r0, sp, #144	; 0x90
   1ba04:	3b01      	subs	r3, #1
   1ba06:	4619      	mov	r1, r3
   1ba08:	9309      	str	r3, [sp, #36]	; 0x24
   1ba0a:	f007 fa9a 	bl	22f42 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int filter_dim_count = filter_shape.DimensionsCount();
   1ba0e:	9e18      	ldr	r6, [sp, #96]	; 0x60
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   1ba10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ba12:	1eb1      	subs	r1, r6, #2
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   1ba14:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   1ba16:	aa24      	add	r2, sp, #144	; 0x90
   1ba18:	a818      	add	r0, sp, #96	; 0x60
   1ba1a:	f007 f803 	bl	22a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   1ba1e:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   1ba20:	9009      	str	r0, [sp, #36]	; 0x24
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   1ba22:	a818      	add	r0, sp, #96	; 0x60
   1ba24:	f006 ffbb 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
   1ba28:	46a8      	mov	r8, r5
   1ba2a:	4606      	mov	r6, r0
   1ba2c:	46a9      	mov	r9, r5
  for (int b = 0; b < batches; ++b) {
   1ba2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ba30:	42ab      	cmp	r3, r5
   1ba32:	dd3b      	ble.n	1baac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2a0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1ba34:	2700      	movs	r7, #0
  for (int b = 0; b < batches; ++b) {
   1ba36:	46ba      	mov	sl, r7
   1ba38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ba3a:	eb03 0b49 	add.w	fp, r3, r9, lsl #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1ba3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ba40:	42bb      	cmp	r3, r7
   1ba42:	dd2e      	ble.n	1baa2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x296>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
   1ba44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ba46:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
   1ba4a:	eb03 0e08 	add.w	lr, r3, r8
   1ba4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ba50:	eb03 0c0a 	add.w	ip, r3, sl
   1ba54:	2300      	movs	r3, #0
   1ba56:	429e      	cmp	r6, r3
   1ba58:	dd10      	ble.n	1ba7c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x270>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   1ba5a:	f81e 2b01 	ldrb.w	r2, [lr], #1
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
   1ba5e:	f81c 1b01 	ldrb.w	r1, [ip], #1
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   1ba62:	9210      	str	r2, [sp, #64]	; 0x40
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
   1ba64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      for (int d = 0; d < accum_depth; ++d) {
   1ba66:	3301      	adds	r3, #1
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
   1ba68:	188a      	adds	r2, r1, r2
   1ba6a:	9211      	str	r2, [sp, #68]	; 0x44
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   1ba6c:	9910      	ldr	r1, [sp, #64]	; 0x40
   1ba6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1ba70:	4411      	add	r1, r2
   1ba72:	460a      	mov	r2, r1
        accum += filter_val * input_val;
   1ba74:	9911      	ldr	r1, [sp, #68]	; 0x44
   1ba76:	fb11 0002 	smlabb	r0, r1, r2, r0
      for (int d = 0; d < accum_depth; ++d) {
   1ba7a:	e7ec      	b.n	1ba56 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x24a>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
   1ba7c:	ee18 2a90 	vmov	r2, s17
   1ba80:	ee18 1a10 	vmov	r1, s16
   1ba84:	f7ff f978 	bl	1ad78 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
      accum = std::min(accum, output_activation_max - output_offset);
      accum += output_offset;
      output_data[out_c + output_depth * b] = accum;
   1ba88:	9b07      	ldr	r3, [sp, #28]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1ba8a:	3701      	adds	r7, #1
      output_data[out_c + output_depth * b] = accum;
   1ba8c:	4298      	cmp	r0, r3
   1ba8e:	bfb8      	it	lt
   1ba90:	4618      	movlt	r0, r3
   1ba92:	9b08      	ldr	r3, [sp, #32]
   1ba94:	44b2      	add	sl, r6
   1ba96:	4298      	cmp	r0, r3
   1ba98:	bfa8      	it	ge
   1ba9a:	4618      	movge	r0, r3
   1ba9c:	f82b 0b02 	strh.w	r0, [fp], #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1baa0:	e7cd      	b.n	1ba3e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x232>
  for (int b = 0; b < batches; ++b) {
   1baa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1baa4:	3501      	adds	r5, #1
   1baa6:	4499      	add	r9, r3
   1baa8:	44b0      	add	r8, r6
   1baaa:	e7c0      	b.n	1ba2e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x222>
   1baac:	a824      	add	r0, sp, #144	; 0x90
   1baae:	f006 ff6b 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
   1bab2:	a81e      	add	r0, sp, #120	; 0x78
   1bab4:	e722      	b.n	1b8fc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1bab6:	4618      	mov	r0, r3
   1bab8:	f8d8 4014 	ldr.w	r4, [r8, #20]
   1babc:	f7f3 fc28 	bl	f310 <TfLiteTypeGetName>
   1bac0:	f819 300b 	ldrb.w	r3, [r9, fp]
   1bac4:	4602      	mov	r2, r0
   1bac6:	e741      	b.n	1b94c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x140>
   1bac8:	0002ba0b 	.word	0x0002ba0b

0001bacc <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration Register_FULLY_CONNECTED() {
   1bacc:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/fully_connected::Prepare,
          /*invoke=*/fully_connected::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1bace:	4604      	mov	r4, r0
TfLiteRegistration Register_FULLY_CONNECTED() {
   1bad0:	4606      	mov	r6, r0
          /*version=*/0};
   1bad2:	4d04      	ldr	r5, [pc, #16]	; (1bae4 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x18>)
   1bad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1bad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1bad8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1badc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1bae0:	4630      	mov	r0, r6
   1bae2:	bd70      	pop	{r4, r5, r6, pc}
   1bae4:	00024e98 	.word	0x00024e98

0001bae8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
   1bae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1baec:	f8d1 e000 	ldr.w	lr, [r1]
   1baf0:	6885      	ldr	r5, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1baf2:	f8de 3004 	ldr.w	r3, [lr, #4]
  return &context->tensors[node->outputs->data[index]];
   1baf6:	684a      	ldr	r2, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   1baf8:	ea4f 1c83 	mov.w	ip, r3, lsl #6
   1bafc:	eb05 1383 	add.w	r3, r5, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1bb00:	6856      	ldr	r6, [r2, #4]
  for (int i = 0; i < dims->size; ++i) {
   1bb02:	689f      	ldr	r7, [r3, #8]
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
   1bb04:	4604      	mov	r4, r0
   1bb06:	f04f 0900 	mov.w	r9, #0
  int64_t count = 1;
   1bb0a:	2201      	movs	r2, #1
   1bb0c:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
   1bb0e:	f857 bb04 	ldr.w	fp, [r7], #4
  return &context->tensors[node->outputs->data[index]];
   1bb12:	ea4f 1886 	mov.w	r8, r6, lsl #6
   1bb16:	b085      	sub	sp, #20
   1bb18:	eb05 1686 	add.w	r6, r5, r6, lsl #6
  for (int i = 0; i < dims->size; ++i) {
   1bb1c:	45cb      	cmp	fp, r9
   1bb1e:	dd0c      	ble.n	1bb3a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x52>
    count *= dims->data[i];
   1bb20:	f857 ab04 	ldr.w	sl, [r7], #4
  for (int i = 0; i < dims->size; ++i) {
   1bb24:	f109 0901 	add.w	r9, r9, #1
    count *= dims->data[i];
   1bb28:	4650      	mov	r0, sl
   1bb2a:	17c1      	asrs	r1, r0, #31
   1bb2c:	4351      	muls	r1, r2
   1bb2e:	fb0a 1103 	mla	r1, sl, r3, r1
   1bb32:	fba2 230a 	umull	r2, r3, r2, sl
   1bb36:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
   1bb38:	e7f0      	b.n	1bb1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x34>
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
  TfLiteIntArray* output_shape = output->dims;

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
      output_shape->size == 1 && output_shape->data[0] == 0) {
   1bb3a:	f8de 3000 	ldr.w	r3, [lr]
  TfLiteIntArray* output_shape = output->dims;
   1bb3e:	68b1      	ldr	r1, [r6, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
   1bb40:	2b01      	cmp	r3, #1
   1bb42:	d105      	bne.n	1bb50 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
   1bb44:	680b      	ldr	r3, [r1, #0]
   1bb46:	2b01      	cmp	r3, #1
   1bb48:	d102      	bne.n	1bb50 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
      output_shape->size == 1 && output_shape->data[0] == 0) {
   1bb4a:	684b      	ldr	r3, [r1, #4]
   1bb4c:	b903      	cbnz	r3, 1bb50 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
   1bb4e:	600b      	str	r3, [r1, #0]
  }

  int num_output_elements = 1;
  int stretch_dim = -1;
  for (int i = 0; i < output_shape->size; ++i) {
   1bb50:	460f      	mov	r7, r1
   1bb52:	2600      	movs	r6, #0
  int stretch_dim = -1;
   1bb54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  int num_output_elements = 1;
   1bb58:	2301      	movs	r3, #1
  for (int i = 0; i < output_shape->size; ++i) {
   1bb5a:	f857 9b04 	ldr.w	r9, [r7], #4
   1bb5e:	45b1      	cmp	r9, r6
   1bb60:	dd1a      	ble.n	1bb98 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb0>
    int value = output_shape->data[i];
   1bb62:	f857 eb04 	ldr.w	lr, [r7], #4
    if (value == -1) {
   1bb66:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
   1bb6a:	d10f      	bne.n	1bb8c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
   1bb6c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1bb70:	d010      	beq.n	1bb94 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xac>
   1bb72:	4b23      	ldr	r3, [pc, #140]	; (1bc00 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
   1bb74:	e9cd 0e02 	strd	r0, lr, [sp, #8]
   1bb78:	9301      	str	r3, [sp, #4]
   1bb7a:	4b22      	ldr	r3, [pc, #136]	; (1bc04 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x11c>)
   1bb7c:	6965      	ldr	r5, [r4, #20]
   1bb7e:	9300      	str	r3, [sp, #0]
   1bb80:	2335      	movs	r3, #53	; 0x35
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    num_output_elements *= output_shape->data[stretch_dim];
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   1bb82:	4620      	mov	r0, r4
   1bb84:	4a20      	ldr	r2, [pc, #128]	; (1bc08 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
   1bb86:	4921      	ldr	r1, [pc, #132]	; (1bc0c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x124>)
   1bb88:	47a8      	blx	r5
   1bb8a:	e027      	b.n	1bbdc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf4>
      num_output_elements *= value;
   1bb8c:	fb0e f303 	mul.w	r3, lr, r3
  for (int i = 0; i < output_shape->size; ++i) {
   1bb90:	3601      	adds	r6, #1
   1bb92:	e7e4      	b.n	1bb5e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x76>
   1bb94:	4630      	mov	r0, r6
   1bb96:	e7fb      	b.n	1bb90 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
  if (stretch_dim != -1) {
   1bb98:	1c46      	adds	r6, r0, #1
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
   1bb9a:	bf1e      	ittt	ne
   1bb9c:	fb92 f6f3 	sdivne	r6, r2, r3
   1bba0:	eb01 0180 	addne.w	r1, r1, r0, lsl #2
   1bba4:	604e      	strne	r6, [r1, #4]
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1bba6:	f815 000c 	ldrb.w	r0, [r5, ip]
   1bbaa:	f815 1008 	ldrb.w	r1, [r5, r8]
    num_output_elements *= output_shape->data[stretch_dim];
   1bbae:	bf18      	it	ne
   1bbb0:	4373      	mulne	r3, r6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1bbb2:	4281      	cmp	r1, r0
   1bbb4:	d016      	beq.n	1bbe4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfc>
   1bbb6:	6967      	ldr	r7, [r4, #20]
   1bbb8:	f7f3 fbaa 	bl	f310 <TfLiteTypeGetName>
   1bbbc:	4606      	mov	r6, r0
   1bbbe:	f815 0008 	ldrb.w	r0, [r5, r8]
   1bbc2:	f7f3 fba5 	bl	f310 <TfLiteTypeGetName>
   1bbc6:	4b12      	ldr	r3, [pc, #72]	; (1bc10 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x128>)
   1bbc8:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1bbcc:	9301      	str	r3, [sp, #4]
   1bbce:	4b11      	ldr	r3, [pc, #68]	; (1bc14 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12c>)
   1bbd0:	4620      	mov	r0, r4
   1bbd2:	9300      	str	r3, [sp, #0]
   1bbd4:	4a0c      	ldr	r2, [pc, #48]	; (1bc08 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
   1bbd6:	2340      	movs	r3, #64	; 0x40
   1bbd8:	490f      	ldr	r1, [pc, #60]	; (1bc18 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x130>)
   1bbda:	47b8      	blx	r7
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   1bbdc:	2001      	movs	r0, #1
  return kTfLiteOk;
}
   1bbde:	b005      	add	sp, #20
   1bbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   1bbe4:	4293      	cmp	r3, r2
   1bbe6:	d008      	beq.n	1bbfa <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x112>
   1bbe8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1bbec:	4b0b      	ldr	r3, [pc, #44]	; (1bc1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x134>)
   1bbee:	6965      	ldr	r5, [r4, #20]
   1bbf0:	9301      	str	r3, [sp, #4]
   1bbf2:	4b0b      	ldr	r3, [pc, #44]	; (1bc20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>)
   1bbf4:	9300      	str	r3, [sp, #0]
   1bbf6:	2341      	movs	r3, #65	; 0x41
   1bbf8:	e7c3      	b.n	1bb82 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
  return kTfLiteOk;
   1bbfa:	2000      	movs	r0, #0
   1bbfc:	e7ef      	b.n	1bbde <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf6>
   1bbfe:	bf00      	nop
   1bc00:	0002bb16 	.word	0x0002bb16
   1bc04:	0002bb19 	.word	0x0002bb19
   1bc08:	0002baed 	.word	0x0002baed
   1bc0c:	0002b856 	.word	0x0002b856
   1bc10:	0002ba72 	.word	0x0002ba72
   1bc14:	0002ba7f 	.word	0x0002ba7f
   1bc18:	0002ba58 	.word	0x0002ba58
   1bc1c:	0002bb25 	.word	0x0002bb25
   1bc20:	0002bb39 	.word	0x0002bb39

0001bc24 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1bc24:	680b      	ldr	r3, [r1, #0]

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1bc26:	b5f0      	push	{r4, r5, r6, r7, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   1bc28:	681b      	ldr	r3, [r3, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1bc2a:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   1bc2c:	3b01      	subs	r3, #1
   1bc2e:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1bc30:	460c      	mov	r4, r1
   1bc32:	b085      	sub	sp, #20
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   1bc34:	d909      	bls.n	1bc4a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
   1bc36:	4b19      	ldr	r3, [pc, #100]	; (1bc9c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   1bc38:	4a19      	ldr	r2, [pc, #100]	; (1bca0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1bc3a:	9300      	str	r3, [sp, #0]
   1bc3c:	6944      	ldr	r4, [r0, #20]
   1bc3e:	2346      	movs	r3, #70	; 0x46
   1bc40:	4918      	ldr	r1, [pc, #96]	; (1bca4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
   1bc42:	47a0      	blx	r4
   1bc44:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
   1bc46:	b005      	add	sp, #20
   1bc48:	bdf0      	pop	{r4, r5, r6, r7, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1bc4a:	684b      	ldr	r3, [r1, #4]
   1bc4c:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1bc4e:	2e01      	cmp	r6, #1
   1bc50:	d00c      	beq.n	1bc6c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
   1bc52:	2401      	movs	r4, #1
   1bc54:	4b14      	ldr	r3, [pc, #80]	; (1bca8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
   1bc56:	e9cd 6402 	strd	r6, r4, [sp, #8]
   1bc5a:	9301      	str	r3, [sp, #4]
   1bc5c:	4b13      	ldr	r3, [pc, #76]	; (1bcac <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
   1bc5e:	4a10      	ldr	r2, [pc, #64]	; (1bca0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1bc60:	9300      	str	r3, [sp, #0]
   1bc62:	6945      	ldr	r5, [r0, #20]
   1bc64:	2347      	movs	r3, #71	; 0x47
   1bc66:	4912      	ldr	r1, [pc, #72]	; (1bcb0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
   1bc68:	47a8      	blx	r5
   1bc6a:	e7eb      	b.n	1bc44 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
   1bc6c:	f7ff ff3c 	bl	1bae8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
   1bc70:	2800      	cmp	r0, #0
   1bc72:	d0e8      	beq.n	1bc46 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   1bc74:	4621      	mov	r1, r4
   1bc76:	4628      	mov	r0, r5
   1bc78:	696f      	ldr	r7, [r5, #20]
   1bc7a:	f7ff ff35 	bl	1bae8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
   1bc7e:	2300      	movs	r3, #0
   1bc80:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1bc84:	4b0b      	ldr	r3, [pc, #44]	; (1bcb4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
   1bc86:	4628      	mov	r0, r5
   1bc88:	9301      	str	r3, [sp, #4]
   1bc8a:	4b0b      	ldr	r3, [pc, #44]	; (1bcb8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
   1bc8c:	4a04      	ldr	r2, [pc, #16]	; (1bca0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1bc8e:	9300      	str	r3, [sp, #0]
   1bc90:	4907      	ldr	r1, [pc, #28]	; (1bcb0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
   1bc92:	2348      	movs	r3, #72	; 0x48
   1bc94:	47b8      	blx	r7
   1bc96:	4630      	mov	r0, r6
   1bc98:	e7d5      	b.n	1bc46 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   1bc9a:	bf00      	nop
   1bc9c:	0002bb4c 	.word	0x0002bb4c
   1bca0:	0002baed 	.word	0x0002baed
   1bca4:	0002b8a4 	.word	0x0002b8a4
   1bca8:	0002bc02 	.word	0x0002bc02
   1bcac:	0002bb79 	.word	0x0002bb79
   1bcb0:	0002b856 	.word	0x0002b856
   1bcb4:	0002bb8a 	.word	0x0002bb8a
   1bcb8:	0002bb94 	.word	0x0002bb94

0001bcbc <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
  return kTfLiteOk;
}

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
   1bcbc:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1bcbe:	4604      	mov	r4, r0
TfLiteRegistration Register_RESHAPE() {
   1bcc0:	4606      	mov	r6, r0
          /*version=*/0};
   1bcc2:	4d04      	ldr	r5, [pc, #16]	; (1bcd4 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x18>)
   1bcc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1bcc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1bcc8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1bccc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1bcd0:	4630      	mov	r0, r6
   1bcd2:	bd70      	pop	{r4, r5, r6, pc}
   1bcd4:	00024eb8 	.word	0x00024eb8

0001bcd8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
  return kTfLiteOk;
}

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   1bcd8:	b530      	push	{r4, r5, lr}
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1bcda:	680a      	ldr	r2, [r1, #0]
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   1bcdc:	b085      	sub	sp, #20
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1bcde:	6815      	ldr	r5, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1bce0:	2d01      	cmp	r5, #1
   1bce2:	d00d      	beq.n	1bd00 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28>
   1bce4:	2401      	movs	r4, #1
   1bce6:	4a18      	ldr	r2, [pc, #96]	; (1bd48 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
   1bce8:	e9cd 5402 	strd	r5, r4, [sp, #8]
   1bcec:	9201      	str	r2, [sp, #4]
   1bcee:	4a17      	ldr	r2, [pc, #92]	; (1bd4c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x74>)
   1bcf0:	234c      	movs	r3, #76	; 0x4c
   1bcf2:	9200      	str	r2, [sp, #0]
   1bcf4:	6945      	ldr	r5, [r0, #20]
   1bcf6:	4a16      	ldr	r2, [pc, #88]	; (1bd50 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   1bcf8:	4916      	ldr	r1, [pc, #88]	; (1bd54 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1bcfa:	47a8      	blx	r5
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  const TfLiteTensor* input = GetInput(context, node, 0);
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   1bcfc:	4620      	mov	r0, r4
   1bcfe:	e00f      	b.n	1bd20 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1bd00:	6849      	ldr	r1, [r1, #4]
   1bd02:	680c      	ldr	r4, [r1, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1bd04:	2c01      	cmp	r4, #1
   1bd06:	d00d      	beq.n	1bd24 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4c>
   1bd08:	4a0f      	ldr	r2, [pc, #60]	; (1bd48 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
   1bd0a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1bd0e:	9201      	str	r2, [sp, #4]
   1bd10:	4a11      	ldr	r2, [pc, #68]	; (1bd58 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x80>)
   1bd12:	234d      	movs	r3, #77	; 0x4d
   1bd14:	9200      	str	r2, [sp, #0]
   1bd16:	6944      	ldr	r4, [r0, #20]
   1bd18:	4a0d      	ldr	r2, [pc, #52]	; (1bd50 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   1bd1a:	490e      	ldr	r1, [pc, #56]	; (1bd54 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1bd1c:	47a0      	blx	r4
   1bd1e:	4628      	mov	r0, r5

  return kTfLiteOk;
}
   1bd20:	b005      	add	sp, #20
   1bd22:	bd30      	pop	{r4, r5, pc}
  return &context->tensors[node->inputs->data[index]];
   1bd24:	6851      	ldr	r1, [r2, #4]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   1bd26:	6882      	ldr	r2, [r0, #8]
   1bd28:	eb02 1281 	add.w	r2, r2, r1, lsl #6
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1bd2c:	6892      	ldr	r2, [r2, #8]
   1bd2e:	6812      	ldr	r2, [r2, #0]
   1bd30:	2a00      	cmp	r2, #0
   1bd32:	dc07      	bgt.n	1bd44 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
   1bd34:	4a09      	ldr	r2, [pc, #36]	; (1bd5c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x84>)
   1bd36:	234f      	movs	r3, #79	; 0x4f
   1bd38:	9200      	str	r2, [sp, #0]
   1bd3a:	6945      	ldr	r5, [r0, #20]
   1bd3c:	4a04      	ldr	r2, [pc, #16]	; (1bd50 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   1bd3e:	4908      	ldr	r1, [pc, #32]	; (1bd60 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x88>)
   1bd40:	47a8      	blx	r5
   1bd42:	e7db      	b.n	1bcfc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return kTfLiteOk;
   1bd44:	2000      	movs	r0, #0
   1bd46:	e7eb      	b.n	1bd20 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
   1bd48:	0002bc02 	.word	0x0002bc02
   1bd4c:	0002bbda 	.word	0x0002bbda
   1bd50:	0002bbb1 	.word	0x0002bbb1
   1bd54:	0002b856 	.word	0x0002b856
   1bd58:	0002bb79 	.word	0x0002bb79
   1bd5c:	0002bbea 	.word	0x0002bbea
   1bd60:	0002b8a4 	.word	0x0002b8a4

0001bd64 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1bd64:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
   1bd66:	b510      	push	{r4, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1bd68:	d11f      	bne.n	1bdaa <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x46>
   1bd6a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   1bd6e:	425c      	negs	r4, r3
   1bd70:	415c      	adcs	r4, r3
  std::int64_t ab_64 = a_64 * b_64;
   1bd72:	fb80 2301 	smull	r2, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   1bd76:	2a00      	cmp	r2, #0
   1bd78:	f173 0100 	sbcs.w	r1, r3, #0
   1bd7c:	490d      	ldr	r1, [pc, #52]	; (1bdb4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x50>)
   1bd7e:	bfa8      	it	ge
   1bd80:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   1bd84:	b99c      	cbnz	r4, 1bdae <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   1bd86:	1852      	adds	r2, r2, r1
   1bd88:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   1bd8c:	2a00      	cmp	r2, #0
   1bd8e:	f173 0100 	sbcs.w	r1, r3, #0
   1bd92:	da06      	bge.n	1bda2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x3e>
   1bd94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1bd98:	1852      	adds	r2, r2, r1
   1bd9a:	f04f 0100 	mov.w	r1, #0
   1bd9e:	eb41 0303 	adc.w	r3, r1, r3
   1bda2:	0fd0      	lsrs	r0, r2, #31
   1bda4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
}
   1bda8:	bd10      	pop	{r4, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1bdaa:	2400      	movs	r4, #0
   1bdac:	e7e1      	b.n	1bd72 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0xe>
   1bdae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1bdb2:	e7f9      	b.n	1bda8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x44>
   1bdb4:	c0000001 	.word	0xc0000001

0001bdb8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
   1bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdbc:	ed2d 8b04 	vpush	{d8-d9}
   1bdc0:	460c      	mov	r4, r1
   1bdc2:	b087      	sub	sp, #28
   1bdc4:	9200      	str	r2, [sp, #0]
   1bdc6:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1bdc8:	680b      	ldr	r3, [r1, #0]
                    const RuntimeShape& output_shape, float* output_data) {
   1bdca:	4606      	mov	r6, r0
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1bdcc:	3b01      	subs	r3, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1bdce:	4619      	mov	r1, r3
   1bdd0:	4620      	mov	r0, r4
   1bdd2:	9202      	str	r2, [sp, #8]
   1bdd4:	9301      	str	r3, [sp, #4]
   1bdd6:	f007 f9ef 	bl	231b8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1bdda:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1bdde:	4607      	mov	r7, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1bde0:	4619      	mov	r1, r3
   1bde2:	4620      	mov	r0, r4
   1bde4:	f006 fe1e 	bl	22a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   1bde8:	2500      	movs	r5, #0
   1bdea:	4604      	mov	r4, r0

  for (int i = 0; i < outer_size; ++i) {
   1bdec:	46aa      	mov	sl, r5
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
   1bdee:	ed9f 9a37 	vldr	s18, [pc, #220]	; 1becc <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x114>
      return __a;
   1bdf2:	f10d 0b14 	add.w	fp, sp, #20
  for (int i = 0; i < outer_size; ++i) {
   1bdf6:	45ba      	cmp	sl, r7
   1bdf8:	da62      	bge.n	1bec0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
    float max = std::numeric_limits<float>::lowest();
   1bdfa:	9b00      	ldr	r3, [sp, #0]
   1bdfc:	ed8d 9a05 	vstr	s18, [sp, #20]
    for (int c = 0; c < depth; ++c) {
   1be00:	eb03 0985 	add.w	r9, r3, r5, lsl #2
    float max = std::numeric_limits<float>::lowest();
   1be04:	4649      	mov	r1, r9
    for (int c = 0; c < depth; ++c) {
   1be06:	2200      	movs	r2, #0
   1be08:	ea4f 0885 	mov.w	r8, r5, lsl #2
   1be0c:	42a2      	cmp	r2, r4
   1be0e:	da0f      	bge.n	1be30 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x78>
      max = std::max(max, input_data[i * depth + c]);
   1be10:	460b      	mov	r3, r1
      if (__a < __b)
   1be12:	eddd 7a05 	vldr	s15, [sp, #20]
   1be16:	ed93 7a00 	vldr	s14, [r3]
   1be1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1be1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   1be22:	bfd8      	it	le
   1be24:	465b      	movle	r3, fp
   1be26:	681b      	ldr	r3, [r3, #0]
   1be28:	3104      	adds	r1, #4
   1be2a:	9305      	str	r3, [sp, #20]
    for (int c = 0; c < depth; ++c) {
   1be2c:	3201      	adds	r2, #1
   1be2e:	e7ed      	b.n	1be0c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x54>
   1be30:	464a      	mov	r2, r9
    }

    // Compute sum.
    float sum = 0.f;
    for (int c = 0; c < depth; ++c) {
   1be32:	2300      	movs	r3, #0
    float sum = 0.f;
   1be34:	ed9f 8a26 	vldr	s16, [pc, #152]	; 1bed0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x118>
    for (int c = 0; c < depth; ++c) {
   1be38:	42a3      	cmp	r3, r4
   1be3a:	db20      	blt.n	1be7e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xc6>
   1be3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1be3e:	4498      	add	r8, r3
      sum += std::exp((input_data[i * depth + c] - max) *
                      static_cast<float>(params.beta));
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
   1be40:	2300      	movs	r3, #0
   1be42:	42a3      	cmp	r3, r4
   1be44:	9301      	str	r3, [sp, #4]
   1be46:	da37      	bge.n	1beb8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x100>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
                                            static_cast<float>(params.beta)) /
   1be48:	e9d6 0100 	ldrd	r0, r1, [r6]
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
   1be4c:	eddd 7a05 	vldr	s15, [sp, #20]
   1be50:	ecf9 8a01 	vldmia	r9!, {s17}
   1be54:	ee78 8ae7 	vsub.f32	s17, s17, s15
                                            static_cast<float>(params.beta)) /
   1be58:	f7f7 fed2 	bl	13c00 <__aeabi_d2f>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
   1be5c:	ee07 0a90 	vmov	s15, r0
   1be60:	ee68 7aa7 	vmul.f32	s15, s17, s15
   1be64:	ee17 0a90 	vmov	r0, s15
   1be68:	f002 fd62 	bl	1e930 <expf>
   1be6c:	ee07 0a90 	vmov	s15, r0
   1be70:	eec7 7a88 	vdiv.f32	s15, s15, s16
    for (int c = 0; c < depth; ++c) {
   1be74:	9b01      	ldr	r3, [sp, #4]
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
   1be76:	ece8 7a01 	vstmia	r8!, {s15}
    for (int c = 0; c < depth; ++c) {
   1be7a:	3301      	adds	r3, #1
   1be7c:	e7e1      	b.n	1be42 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8a>
      sum += std::exp((input_data[i * depth + c] - max) *
   1be7e:	ecf2 8a01 	vldmia	r2!, {s17}
                      static_cast<float>(params.beta));
   1be82:	e9d6 0100 	ldrd	r0, r1, [r6]
      sum += std::exp((input_data[i * depth + c] - max) *
   1be86:	eddd 7a05 	vldr	s15, [sp, #20]
   1be8a:	9302      	str	r3, [sp, #8]
   1be8c:	ee78 8ae7 	vsub.f32	s17, s17, s15
   1be90:	9201      	str	r2, [sp, #4]
   1be92:	9203      	str	r2, [sp, #12]
                      static_cast<float>(params.beta));
   1be94:	f7f7 feb4 	bl	13c00 <__aeabi_d2f>
   1be98:	ee07 0a90 	vmov	s15, r0
   1be9c:	ee68 7aa7 	vmul.f32	s15, s17, s15
   1bea0:	ee17 0a90 	vmov	r0, s15
   1bea4:	f002 fd44 	bl	1e930 <expf>
      sum += std::exp((input_data[i * depth + c] - max) *
   1bea8:	ee07 0a90 	vmov	s15, r0
    for (int c = 0; c < depth; ++c) {
   1beac:	9b02      	ldr	r3, [sp, #8]
      sum += std::exp((input_data[i * depth + c] - max) *
   1beae:	ee38 8a27 	vadd.f32	s16, s16, s15
    for (int c = 0; c < depth; ++c) {
   1beb2:	9a01      	ldr	r2, [sp, #4]
   1beb4:	3301      	adds	r3, #1
   1beb6:	e7bf      	b.n	1be38 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x80>
  for (int i = 0; i < outer_size; ++i) {
   1beb8:	f10a 0a01 	add.w	sl, sl, #1
   1bebc:	4425      	add	r5, r4
   1bebe:	e79a      	b.n	1bdf6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3e>
                                   sum;
    }
  }
}
   1bec0:	b007      	add	sp, #28
   1bec2:	ecbd 8b04 	vpop	{d8-d9}
   1bec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1beca:	bf00      	nop
   1becc:	ff7fffff 	.word	0xff7fffff
   1bed0:	00000000 	.word	0x00000000

0001bed4 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
      return kTfLiteError;
  }
}
}  // namespace activations

TfLiteRegistration Register_SOFTMAX() {
   1bed4:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/activations::SoftmaxPrepare,
          /*invoke=*/activations::SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1bed6:	4604      	mov	r4, r0
TfLiteRegistration Register_SOFTMAX() {
   1bed8:	4606      	mov	r6, r0
          /*version=*/0};
   1beda:	4d04      	ldr	r5, [pc, #16]	; (1beec <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x18>)
   1bedc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1bede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1bee0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1bee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1bee8:	4630      	mov	r0, r6
   1beea:	bd70      	pop	{r4, r5, r6, pc}
   1beec:	00024ed8 	.word	0x00024ed8

0001bef0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>:
  assert(exponent >= 0);
   1bef0:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
   1bef2:	b508      	push	{r3, lr}
  assert(exponent >= 0);
   1bef4:	da06      	bge.n	1bf04 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x14>
   1bef6:	f44f 71b3 	mov.w	r1, #358	; 0x166
   1befa:	4b0c      	ldr	r3, [pc, #48]	; (1bf2c <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x3c>)
   1befc:	4a0c      	ldr	r2, [pc, #48]	; (1bf30 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
  assert(exponent <= 31);
   1befe:	480d      	ldr	r0, [pc, #52]	; (1bf34 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x44>)
   1bf00:	f004 fec2 	bl	20c88 <__assert_func>
   1bf04:	291f      	cmp	r1, #31
   1bf06:	dd04      	ble.n	1bf12 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x22>
   1bf08:	f240 1167 	movw	r1, #359	; 0x167
   1bf0c:	4b0a      	ldr	r3, [pc, #40]	; (1bf38 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x48>)
   1bf0e:	4a08      	ldr	r2, [pc, #32]	; (1bf30 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
   1bf10:	e7f5      	b.n	1befe <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   1bf12:	2301      	movs	r3, #1
   1bf14:	408b      	lsls	r3, r1
   1bf16:	3b01      	subs	r3, #1
  return a & b;
   1bf18:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
   1bf1c:	105b      	asrs	r3, r3, #1
  return a + b;
   1bf1e:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
   1bf22:	4108      	asrs	r0, r1
  const IntegerType remainder = BitAnd(x, mask);
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
  return Add(ShiftRight(x, exponent),
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
   1bf24:	429a      	cmp	r2, r3
   1bf26:	bfc8      	it	gt
   1bf28:	3001      	addgt	r0, #1
   1bf2a:	bd08      	pop	{r3, pc}
   1bf2c:	0002b768 	.word	0x0002b768
   1bf30:	0002b776 	.word	0x0002b776
   1bf34:	0002b7cb 	.word	0x0002b7cb
   1bf38:	0002b817 	.word	0x0002b817

0001bf3c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:
  std::int64_t sum = a64 + b64;
   1bf3c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1bf40:	2300      	movs	r3, #0
   1bf42:	1812      	adds	r2, r2, r0
   1bf44:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
   1bf48:	1c59      	adds	r1, r3, #1
   1bf4a:	bf05      	ittet	eq
   1bf4c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1bf50:	4611      	moveq	r1, r2
   1bf52:	2101      	movne	r1, #1
   1bf54:	4618      	moveq	r0, r3
   1bf56:	bf18      	it	ne
   1bf58:	2000      	movne	r0, #0

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
   1bf5a:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  return static_cast<std::int32_t>((sum + sign) / 2);
   1bf5e:	1854      	adds	r4, r2, r1
   1bf60:	eb43 0500 	adc.w	r5, r3, r0
   1bf64:	0feb      	lsrs	r3, r5, #31
   1bf66:	18e4      	adds	r4, r4, r3
   1bf68:	f145 0500 	adc.w	r5, r5, #0
   1bf6c:	ea4f 0854 	mov.w	r8, r4, lsr #1
   1bf70:	ea48 78c5 	orr.w	r8, r8, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1bf74:	4640      	mov	r0, r8
   1bf76:	493b      	ldr	r1, [pc, #236]	; (1c064 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x128>)
   1bf78:	f7ff fef4 	bl	1bd64 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
   1bf7c:	2503      	movs	r5, #3
   1bf7e:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1bf82:	4621      	mov	r1, r4
   1bf84:	4640      	mov	r0, r8
   1bf86:	f7ff feed 	bl	1bd64 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1bf8a:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1bf8e:	4620      	mov	r0, r4
   1bf90:	f7ff fee8 	bl	1bd64 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
   1bf94:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1bf98:	da56      	bge.n	1c048 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10c>
   1bf9a:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   1bf9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bfa2:	f04f 0c00 	mov.w	ip, #0
   1bfa6:	bfc8      	it	gt
   1bfa8:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1bfaa:	ea4f 7be0 	mov.w	fp, r0, asr #31
   1bfae:	0082      	lsls	r2, r0, #2
   1bfb0:	ea4f 038b 	mov.w	r3, fp, lsl #2
   1bfb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
             ? min
   1bfb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1bfbc:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
   1bfc0:	db46      	blt.n	1c050 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x114>
             : wide_shifted > max ? max
   1bfc2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   1bfc6:	f04f 0b00 	mov.w	fp, #0
   1bfca:	4592      	cmp	sl, r2
   1bfcc:	eb7b 0003 	sbcs.w	r0, fp, r3
   1bfd0:	bfb8      	it	lt
   1bfd2:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
   1bfd6:	ea6f 030c 	mvn.w	r3, ip
  return a & b;
   1bfda:	401a      	ands	r2, r3
  return ~a;
   1bfdc:	43cb      	mvns	r3, r1
  return a & b;
   1bfde:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
  return a ^ b;
   1bfe2:	ea82 020c 	eor.w	r2, r2, ip
  return a & b;
   1bfe6:	401a      	ands	r2, r3
   1bfe8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  return a ^ b;
   1bfec:	404a      	eors	r2, r1
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
  for (int i = 0; i < 3; i++) {
   1bfee:	3d01      	subs	r5, #1
  return a + b;
   1bff0:	4414      	add	r4, r2
  for (int i = 0; i < 3; i++) {
   1bff2:	d1c6      	bne.n	1bf82 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x46>
  return a ? BitNot(zero) : zero;
   1bff4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1bff8:	da2d      	bge.n	1c056 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x11a>
   1bffa:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
   1bffe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c002:	462a      	mov	r2, r5
   1c004:	bfc8      	it	gt
   1c006:	2000      	movgt	r0, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1c008:	1926      	adds	r6, r4, r4
   1c00a:	ea4f 75e4 	mov.w	r5, r4, asr #31
   1c00e:	eb45 0705 	adc.w	r7, r5, r5
             ? min
   1c012:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
   1c016:	f177 33ff 	sbcs.w	r3, r7, #4294967295	; 0xffffffff
   1c01a:	db20      	blt.n	1c05e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x122>
             : wide_shifted > max ? max
   1c01c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1c020:	2500      	movs	r5, #0
   1c022:	42b4      	cmp	r4, r6
   1c024:	eb75 0307 	sbcs.w	r3, r5, r7
   1c028:	bfac      	ite	ge
   1c02a:	4633      	movge	r3, r6
   1c02c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
  return ~a;
   1c030:	43d6      	mvns	r6, r2
  return a & b;
   1c032:	401e      	ands	r6, r3
  return ~a;
   1c034:	43c3      	mvns	r3, r0
  return a & b;
   1c036:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  return a ^ b;
   1c03a:	4056      	eors	r6, r2
  return a & b;
   1c03c:	401e      	ands	r6, r3
   1c03e:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
   1c042:	4070      	eors	r0, r6
   1c044:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  return a ? BitNot(zero) : zero;
   1c048:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1c04c:	2100      	movs	r1, #0
   1c04e:	e7ac      	b.n	1bfaa <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x6e>
             ? min
   1c050:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1c054:	e7bf      	b.n	1bfd6 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x9a>
  return a ? BitNot(zero) : zero;
   1c056:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c05a:	4628      	mov	r0, r5
   1c05c:	e7d4      	b.n	1c008 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xcc>
             ? min
   1c05e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1c062:	e7e5      	b.n	1c030 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf4>
   1c064:	c3c3c3c4 	.word	0xc3c3c3c4

0001c068 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
   1c068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c06c:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
   1c06e:	4814      	ldr	r0, [pc, #80]	; (1c0c0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x58>)
   1c070:	f007 f8fd 	bl	2326e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1c074:	4606      	mov	r6, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   1c076:	4813      	ldr	r0, [pc, #76]	; (1c0c4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x5c>)
   1c078:	f007 f8f9 	bl	2326e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a + b;
   1c07c:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   1c080:	4680      	mov	r8, r0
  F x2 = x * x;
   1c082:	4621      	mov	r1, r4
   1c084:	4620      	mov	r0, r4
   1c086:	f007 f8f7 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
   1c08a:	4621      	mov	r1, r4
  F x2 = x * x;
   1c08c:	4605      	mov	r5, r0
  F x3 = x2 * x;
   1c08e:	f007 f8f3 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
   1c092:	4629      	mov	r1, r5
  F x3 = x2 * x;
   1c094:	4607      	mov	r7, r0
  F x4 = x2 * x2;
   1c096:	4628      	mov	r0, r5
   1c098:	f007 f8ee 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1c09c:	2102      	movs	r1, #2
   1c09e:	f7ff ff27 	bl	1bef0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      SaturatingRoundingMultiplyByPOT<-1>(
   1c0a2:	4641      	mov	r1, r8
   1c0a4:	4438      	add	r0, r7
   1c0a6:	f007 f8e7 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1c0aa:	2101      	movs	r1, #1
   1c0ac:	4428      	add	r0, r5
   1c0ae:	f7ff ff1f 	bl	1bef0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return AddSaturatingIf16Bit(
   1c0b2:	1821      	adds	r1, r4, r0
   1c0b4:	4630      	mov	r0, r6
   1c0b6:	f007 f8df 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
}
   1c0ba:	4430      	add	r0, r6
   1c0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c0c0:	70f5a894 	.word	0x70f5a894
   1c0c4:	2aaaaaab 	.word	0x2aaaaaab

0001c0c8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
   1c0c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
   1c0cc:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
FixedPoint<tRawType, 0> exp_on_negative_values(
   1c0d0:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
   1c0d2:	0160      	lsls	r0, r4, #5
   1c0d4:	f7ff ffc8 	bl	1c068 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
   1c0d8:	4606      	mov	r6, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
   1c0da:	4842      	ldr	r0, [pc, #264]	; (1c1e4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
   1c0dc:	f007 f8c7 	bl	2326e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1c0e0:	4601      	mov	r1, r0
   1c0e2:	4630      	mov	r0, r6
   1c0e4:	f007 f8c8 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a - b;
   1c0e8:	1b64      	subs	r4, r4, r5
  return a ? BitNot(zero) : zero;
   1c0ea:	f3c4 6b00 	ubfx	fp, r4, #24, #1
   1c0ee:	f1cb 0900 	rsb	r9, fp, #0
  return a & b;
   1c0f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1c0f6:	ea00 0909 	and.w	r9, r0, r9
   1c0fa:	ea0b 0006 	and.w	r0, fp, r6
  return a ^ b;
   1c0fe:	ea89 0a00 	eor.w	sl, r9, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
   1c102:	4839      	ldr	r0, [pc, #228]	; (1c1e8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
   1c104:	f007 f8b3 	bl	2326e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1c108:	4601      	mov	r1, r0
   1c10a:	4650      	mov	r0, sl
   1c10c:	f007 f8b4 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1c110:	f3c4 6940 	ubfx	r9, r4, #25, #1
   1c114:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
   1c118:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1c11c:	ea00 0008 	and.w	r0, r0, r8
   1c120:	ea09 090a 	and.w	r9, r9, sl
  return a ^ b;
   1c124:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
   1c128:	4830      	ldr	r0, [pc, #192]	; (1c1ec <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
   1c12a:	f007 f8a0 	bl	2326e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1c12e:	4601      	mov	r1, r0
   1c130:	4648      	mov	r0, r9
   1c132:	f007 f8a1 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1c136:	f3c4 6780 	ubfx	r7, r4, #26, #1
   1c13a:	427e      	negs	r6, r7
  return a & b;
   1c13c:	3f01      	subs	r7, #1
   1c13e:	4030      	ands	r0, r6
   1c140:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
   1c144:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
   1c146:	482a      	ldr	r0, [pc, #168]	; (1c1f0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
   1c148:	f007 f891 	bl	2326e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1c14c:	4601      	mov	r1, r0
   1c14e:	4638      	mov	r0, r7
   1c150:	f007 f892 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1c154:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
   1c158:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
   1c15c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1c160:	ea00 000a 	and.w	r0, r0, sl
   1c164:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
   1c168:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
   1c16c:	4821      	ldr	r0, [pc, #132]	; (1c1f4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
   1c16e:	f007 f87e 	bl	2326e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1c172:	4601      	mov	r1, r0
   1c174:	4658      	mov	r0, fp
   1c176:	f007 f87f 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1c17a:	f3c4 7900 	ubfx	r9, r4, #28, #1
   1c17e:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
   1c182:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1c186:	ea00 0008 	and.w	r0, r0, r8
   1c18a:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
   1c18e:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
   1c192:	4819      	ldr	r0, [pc, #100]	; (1c1f8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
   1c194:	f007 f86b 	bl	2326e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1c198:	4601      	mov	r1, r0
   1c19a:	4648      	mov	r0, r9
   1c19c:	f007 f86c 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1c1a0:	f3c4 7740 	ubfx	r7, r4, #29, #1
   1c1a4:	427e      	negs	r6, r7
  return a & b;
   1c1a6:	3f01      	subs	r7, #1
   1c1a8:	4030      	ands	r0, r6
   1c1aa:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
   1c1ae:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
   1c1b0:	20f2      	movs	r0, #242	; 0xf2
   1c1b2:	f007 f85c 	bl	2326e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1c1b6:	4601      	mov	r1, r0
   1c1b8:	4638      	mov	r0, r7
   1c1ba:	f007 f85d 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1c1be:	f3c4 7480 	ubfx	r4, r4, #30, #1
   1c1c2:	4263      	negs	r3, r4
  return a & b;
   1c1c4:	4018      	ands	r0, r3
  return a ? BitNot(zero) : zero;
   1c1c6:	fab5 f385 	clz	r3, r5
  return a & b;
   1c1ca:	3c01      	subs	r4, #1
   1c1cc:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
   1c1ce:	095b      	lsrs	r3, r3, #5
  return a ^ b;
   1c1d0:	4044      	eors	r4, r0
  return a & b;
   1c1d2:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
   1c1d4:	425b      	negs	r3, r3
  return a & b;
   1c1d6:	4020      	ands	r0, r4
   1c1d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
   1c1dc:	4058      	eors	r0, r3
   1c1de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1e2:	bf00      	nop
   1c1e4:	63afbe7b 	.word	0x63afbe7b
   1c1e8:	4da2cbf2 	.word	0x4da2cbf2
   1c1ec:	2f16ac6c 	.word	0x2f16ac6c
   1c1f0:	1152aaa4 	.word	0x1152aaa4
   1c1f4:	02582ab7 	.word	0x02582ab7
   1c1f8:	000afe11 	.word	0x000afe11

0001c1fc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
   1c1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
  const int32 input_beta_left_shift = params.input_left_shift;
   1c200:	e9d0 9a02 	ldrd	r9, sl, [r0, #8]
inline void Softmax(const SoftmaxParams& params,
   1c204:	460d      	mov	r5, r1
   1c206:	4614      	mov	r4, r2
   1c208:	461a      	mov	r2, r3
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1c20a:	680b      	ldr	r3, [r1, #0]
inline void Softmax(const SoftmaxParams& params,
   1c20c:	b08b      	sub	sp, #44	; 0x2c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1c20e:	3b01      	subs	r3, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1c210:	4619      	mov	r1, r3
  const int diff_min = params.diff_min;
   1c212:	f8d0 b018 	ldr.w	fp, [r0, #24]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1c216:	4628      	mov	r0, r5
   1c218:	9202      	str	r2, [sp, #8]
   1c21a:	9301      	str	r3, [sp, #4]
   1c21c:	f006 ffcc 	bl	231b8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1c220:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1c224:	9000      	str	r0, [sp, #0]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1c226:	4619      	mov	r1, r3
   1c228:	4628      	mov	r0, r5
   1c22a:	f006 fbfb 	bl	22a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>

  for (int i = 0; i < outer_size; ++i) {
   1c22e:	2700      	movs	r7, #0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1c230:	4605      	mov	r5, r0
   1c232:	0043      	lsls	r3, r0, #1
   1c234:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1c236:	9301      	str	r3, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
   1c238:	9b00      	ldr	r3, [sp, #0]
   1c23a:	429f      	cmp	r7, r3
   1c23c:	da7a      	bge.n	1c334 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x138>
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1c23e:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1c242:	4621      	mov	r1, r4
    for (int c = 0; c < depth; ++c) {
   1c244:	2200      	movs	r2, #0
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1c246:	f88d 3017 	strb.w	r3, [sp, #23]
   1c24a:	f10d 0e17 	add.w	lr, sp, #23
    for (int c = 0; c < depth; ++c) {
   1c24e:	42aa      	cmp	r2, r5
   1c250:	da0e      	bge.n	1c270 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   1c252:	460b      	mov	r3, r1
      if (__a < __b)
   1c254:	f99d 0017 	ldrsb.w	r0, [sp, #23]
   1c258:	f993 c000 	ldrsb.w	ip, [r3]
   1c25c:	3101      	adds	r1, #1
   1c25e:	4584      	cmp	ip, r0
      return __a;
   1c260:	bfd8      	it	le
   1c262:	4673      	movle	r3, lr
   1c264:	f993 3000 	ldrsb.w	r3, [r3]
    for (int c = 0; c < depth; ++c) {
   1c268:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   1c26a:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int c = 0; c < depth; ++c) {
   1c26e:	e7ee      	b.n	1c24e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x52>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   1c270:	f04f 0800 	mov.w	r8, #0
   1c274:	4622      	mov	r2, r4
    for (int c = 0; c < depth; ++c) {
   1c276:	4643      	mov	r3, r8
   1c278:	42ab      	cmp	r3, r5
   1c27a:	da17      	bge.n	1c2ac <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xb0>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   1c27c:	f912 0b01 	ldrsb.w	r0, [r2], #1
   1c280:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32 input_diff =
   1c284:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   1c286:	4583      	cmp	fp, r0
   1c288:	dc0e      	bgt.n	1c2a8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   1c28a:	4649      	mov	r1, r9
   1c28c:	fa00 f00a 	lsl.w	r0, r0, sl
   1c290:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1c294:	f7ff fd66 	bl	1bd64 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   1c298:	f7ff ff16 	bl	1c0c8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1c29c:	210c      	movs	r1, #12
   1c29e:	f7ff fe27 	bl	1bef0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   1c2a2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1c2a6:	4480      	add	r8, r0
    for (int c = 0; c < depth; ++c) {
   1c2a8:	3301      	adds	r3, #1
   1c2aa:	e7e5      	b.n	1c278 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
                                        exp_on_negative_values(scaled_diff_f8));
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   1c2ac:	4640      	mov	r0, r8
   1c2ae:	aa06      	add	r2, sp, #24
   1c2b0:	210c      	movs	r1, #12
   1c2b2:	f006 ffd1 	bl	23258 <_ZN6tflite13GetReciprocalEiiPi>
   1c2b6:	4622      	mov	r2, r4
   1c2b8:	4680      	mov	r8, r0
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));

    for (int c = 0; c < depth; ++c) {
   1c2ba:	2300      	movs	r3, #0
   1c2bc:	42ab      	cmp	r3, r5
   1c2be:	da34      	bge.n	1c32a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   1c2c0:	f912 0b01 	ldrsb.w	r0, [r2], #1
   1c2c4:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32 input_diff =
   1c2c8:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   1c2ca:	4583      	cmp	fp, r0
   1c2cc:	dc2a      	bgt.n	1c324 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x128>
   1c2ce:	4649      	mov	r1, r9
   1c2d0:	fa00 f00a 	lsl.w	r0, r0, sl
   1c2d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c2d8:	f7ff fd44 	bl	1bd64 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   1c2dc:	f7ff fef4 	bl	1c0c8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   1c2e0:	4601      	mov	r1, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
   1c2e2:	4640      	mov	r0, r8
   1c2e4:	f006 ffc8 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   1c2e8:	9906      	ldr	r1, [sp, #24]
   1c2ea:	310f      	adds	r1, #15
   1c2ec:	f7ff fe00 	bl	1bef0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
            unsat_output +
            static_cast<int32>(std::numeric_limits<OutputT>::min());

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   1c2f0:	f647 73ff 	movw	r3, #32767	; 0x7fff
            unsat_output +
   1c2f4:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
      if (__b < __a)
   1c2f8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        const int32 shifted_output =
   1c2fc:	9007      	str	r0, [sp, #28]
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   1c2fe:	480f      	ldr	r0, [pc, #60]	; (1c33c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x140>)
      return __a;
   1c300:	bfb8      	it	lt
   1c302:	a907      	addlt	r1, sp, #28
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   1c304:	9308      	str	r3, [sp, #32]
	return __b;
   1c306:	bfa8      	it	ge
   1c308:	a908      	addge	r1, sp, #32
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   1c30a:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
   1c30c:	6808      	ldr	r0, [r1, #0]
      if (__b < __a)
   1c30e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if (__a < __b)
   1c312:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
	return __b;
   1c316:	bfb8      	it	lt
   1c318:	a909      	addlt	r1, sp, #36	; 0x24
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   1c31a:	6809      	ldr	r1, [r1, #0]
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   1c31c:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]
    for (int c = 0; c < depth; ++c) {
   1c320:	3301      	adds	r3, #1
   1c322:	e7cb      	b.n	1c2bc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   1c324:	f248 0100 	movw	r1, #32768	; 0x8000
   1c328:	e7f8      	b.n	1c31c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x120>
  for (int i = 0; i < outer_size; ++i) {
   1c32a:	9b01      	ldr	r3, [sp, #4]
   1c32c:	3701      	adds	r7, #1
   1c32e:	442c      	add	r4, r5
   1c330:	441e      	add	r6, r3
   1c332:	e781      	b.n	1c238 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
      }
    }
  }
}
   1c334:	b00b      	add	sp, #44	; 0x2c
   1c336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c33a:	bf00      	nop
   1c33c:	ffff8000 	.word	0xffff8000

0001c340 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1c340:	680b      	ldr	r3, [r1, #0]
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   1c342:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c346:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
   1c348:	6887      	ldr	r7, [r0, #8]
   1c34a:	ea4f 1983 	mov.w	r9, r3, lsl #6
   1c34e:	eb07 1883 	add.w	r8, r7, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1c352:	684b      	ldr	r3, [r1, #4]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
   1c354:	f817 5009 	ldrb.w	r5, [r7, r9]
   1c358:	685e      	ldr	r6, [r3, #4]
   1c35a:	2d03      	cmp	r5, #3
   1c35c:	ea4f 1386 	mov.w	r3, r6, lsl #6
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   1c360:	4604      	mov	r4, r0
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
   1c362:	f8d1 a014 	ldr.w	sl, [r1, #20]
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   1c366:	b096      	sub	sp, #88	; 0x58
   1c368:	eb07 1686 	add.w	r6, r7, r6, lsl #6
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
   1c36c:	d013      	beq.n	1c396 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x56>
   1c36e:	2d09      	cmp	r5, #9
   1c370:	f040 809e 	bne.w	1c4b0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x170>
      if (output->type == kTfLiteInt16) {
   1c374:	5cfb      	ldrb	r3, [r7, r3]
   1c376:	2b07      	cmp	r3, #7
   1c378:	d135      	bne.n	1c3e6 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
   1c37a:	6933      	ldr	r3, [r6, #16]
   1c37c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
   1c380:	d063      	beq.n	1c44a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
   1c382:	4a6e      	ldr	r2, [pc, #440]	; (1c53c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1fc>)
   1c384:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1c388:	4b6d      	ldr	r3, [pc, #436]	; (1c540 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x200>)
   1c38a:	9301      	str	r3, [sp, #4]
   1c38c:	4b6d      	ldr	r3, [pc, #436]	; (1c544 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x204>)
   1c38e:	9300      	str	r3, [sp, #0]
   1c390:	6944      	ldr	r4, [r0, #20]
   1c392:	232c      	movs	r3, #44	; 0x2c
   1c394:	e023      	b.n	1c3de <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
   1c396:	5cfb      	ldrb	r3, [r7, r3]
   1c398:	2b03      	cmp	r3, #3
   1c39a:	d014      	beq.n	1c3c6 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x86>
   1c39c:	6947      	ldr	r7, [r0, #20]
   1c39e:	4618      	mov	r0, r3
   1c3a0:	f7f2 ffb6 	bl	f310 <TfLiteTypeGetName>
   1c3a4:	4606      	mov	r6, r0
   1c3a6:	4628      	mov	r0, r5
   1c3a8:	f7f2 ffb2 	bl	f310 <TfLiteTypeGetName>
   1c3ac:	4b66      	ldr	r3, [pc, #408]	; (1c548 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x208>)
   1c3ae:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1c3b2:	9301      	str	r3, [sp, #4]
   1c3b4:	4b65      	ldr	r3, [pc, #404]	; (1c54c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20c>)
   1c3b6:	9300      	str	r3, [sp, #0]
   1c3b8:	2327      	movs	r3, #39	; 0x27
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
   1c3ba:	4620      	mov	r0, r4
   1c3bc:	4a64      	ldr	r2, [pc, #400]	; (1c550 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1c3be:	4965      	ldr	r1, [pc, #404]	; (1c554 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
   1c3c0:	47b8      	blx	r7
      return kTfLiteError;
   1c3c2:	2501      	movs	r5, #1
   1c3c4:	e09f      	b.n	1c506 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c6>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   1c3c6:	6933      	ldr	r3, [r6, #16]
   1c3c8:	2b00      	cmp	r3, #0
   1c3ca:	d03e      	beq.n	1c44a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
   1c3cc:	2200      	movs	r2, #0
   1c3ce:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1c3d2:	4b61      	ldr	r3, [pc, #388]	; (1c558 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x218>)
   1c3d4:	9301      	str	r3, [sp, #4]
   1c3d6:	4b5b      	ldr	r3, [pc, #364]	; (1c544 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x204>)
   1c3d8:	9300      	str	r3, [sp, #0]
   1c3da:	2328      	movs	r3, #40	; 0x28
   1c3dc:	6944      	ldr	r4, [r0, #20]
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
   1c3de:	4a5c      	ldr	r2, [pc, #368]	; (1c550 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1c3e0:	495e      	ldr	r1, [pc, #376]	; (1c55c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x21c>)
   1c3e2:	47a0      	blx	r4
   1c3e4:	e7ed      	b.n	1c3c2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x82>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
   1c3e6:	2b09      	cmp	r3, #9
   1c3e8:	d00f      	beq.n	1c40a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xca>
   1c3ea:	6947      	ldr	r7, [r0, #20]
   1c3ec:	4618      	mov	r0, r3
   1c3ee:	f7f2 ff8f 	bl	f310 <TfLiteTypeGetName>
   1c3f2:	4606      	mov	r6, r0
   1c3f4:	4628      	mov	r0, r5
   1c3f6:	f7f2 ff8b 	bl	f310 <TfLiteTypeGetName>
   1c3fa:	4b59      	ldr	r3, [pc, #356]	; (1c560 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x220>)
   1c3fc:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1c400:	9301      	str	r3, [sp, #4]
   1c402:	4b52      	ldr	r3, [pc, #328]	; (1c54c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20c>)
   1c404:	9300      	str	r3, [sp, #0]
   1c406:	2330      	movs	r3, #48	; 0x30
   1c408:	e7d7      	b.n	1c3ba <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
   1c40a:	6933      	ldr	r3, [r6, #16]
   1c40c:	f113 0f80 	cmn.w	r3, #128	; 0x80
   1c410:	d00a      	beq.n	1c428 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
   1c412:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   1c416:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1c41a:	4b52      	ldr	r3, [pc, #328]	; (1c564 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x224>)
   1c41c:	9301      	str	r3, [sp, #4]
   1c41e:	4b49      	ldr	r3, [pc, #292]	; (1c544 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x204>)
   1c420:	9300      	str	r3, [sp, #0]
   1c422:	6944      	ldr	r4, [r0, #20]
   1c424:	2331      	movs	r3, #49	; 0x31
   1c426:	e7da      	b.n	1c3de <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
   1c428:	ed96 7a03 	vldr	s14, [r6, #12]
   1c42c:	eddf 7a4e 	vldr	s15, [pc, #312]	; 1c568 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x228>
   1c430:	eeb4 7a67 	vcmp.f32	s14, s15
   1c434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c438:	d007      	beq.n	1c44a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
   1c43a:	4b4c      	ldr	r3, [pc, #304]	; (1c56c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x22c>)
   1c43c:	4a44      	ldr	r2, [pc, #272]	; (1c550 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1c43e:	9300      	str	r3, [sp, #0]
   1c440:	6944      	ldr	r4, [r0, #20]
   1c442:	2332      	movs	r3, #50	; 0x32
   1c444:	494a      	ldr	r1, [pc, #296]	; (1c570 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x230>)
   1c446:	47a0      	blx	r4
   1c448:	e7bb      	b.n	1c3c2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x82>
    tflite::PreprocessSoftmaxScaling(
   1c44a:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1c44e:	f7f7 f8a7 	bl	135a0 <__aeabi_f2d>
   1c452:	4602      	mov	r2, r0
   1c454:	460b      	mov	r3, r1
   1c456:	f8da 0000 	ldr.w	r0, [sl]
   1c45a:	ad07      	add	r5, sp, #28
   1c45c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1c460:	f7f7 f89e 	bl	135a0 <__aeabi_f2d>
   1c464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1c468:	9502      	str	r5, [sp, #8]
   1c46a:	ad0a      	add	r5, sp, #40	; 0x28
   1c46c:	9501      	str	r5, [sp, #4]
   1c46e:	2505      	movs	r5, #5
   1c470:	9500      	str	r5, [sp, #0]
   1c472:	f7f9 fd09 	bl	15e88 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
    op_data->input_left_shift = input_left_shift;
   1c476:	9907      	ldr	r1, [sp, #28]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
   1c478:	221f      	movs	r2, #31
   1c47a:	4628      	mov	r0, r5
    op_data->input_left_shift = input_left_shift;
   1c47c:	910b      	str	r1, [sp, #44]	; 0x2c
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
   1c47e:	f007 f8f3 	bl	23668 <_ZN6tflite20CalculateInputRadiusEiii>
   1c482:	f7f7 f87b 	bl	1357c <__aeabi_i2d>
   1c486:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    op_data->diff_min =
   1c48a:	4619      	mov	r1, r3
   1c48c:	f7f7 fb90 	bl	13bb0 <__aeabi_d2iz>
   1c490:	900e      	str	r0, [sp, #56]	; 0x38
  switch (input->type) {
   1c492:	f817 0009 	ldrb.w	r0, [r7, r9]
   1c496:	2803      	cmp	r0, #3
   1c498:	d040      	beq.n	1c51c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1dc>
   1c49a:	2809      	cmp	r0, #9
   1c49c:	d03e      	beq.n	1c51c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1dc>
   1c49e:	2801      	cmp	r0, #1
   1c4a0:	d142      	bne.n	1c528 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1e8>
      SoftmaxFloat(input, output, op_data);
   1c4a2:	4631      	mov	r1, r6
   1c4a4:	4640      	mov	r0, r8
   1c4a6:	aa08      	add	r2, sp, #32
   1c4a8:	f006 feb6 	bl	23218 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
   1c4ac:	2500      	movs	r5, #0
   1c4ae:	e02a      	b.n	1c506 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c6>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
   1c4b0:	2d01      	cmp	r5, #1
   1c4b2:	d013      	beq.n	1c4dc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x19c>
   1c4b4:	6946      	ldr	r6, [r0, #20]
   1c4b6:	4628      	mov	r0, r5
   1c4b8:	f7f2 ff2a 	bl	f310 <TfLiteTypeGetName>
   1c4bc:	4605      	mov	r5, r0
   1c4be:	2001      	movs	r0, #1
   1c4c0:	f7f2 ff26 	bl	f310 <TfLiteTypeGetName>
   1c4c4:	4b2b      	ldr	r3, [pc, #172]	; (1c574 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x234>)
   1c4c6:	e9cd 5002 	strd	r5, r0, [sp, #8]
   1c4ca:	9301      	str	r3, [sp, #4]
   1c4cc:	4b2a      	ldr	r3, [pc, #168]	; (1c578 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>)
   1c4ce:	4620      	mov	r0, r4
   1c4d0:	9300      	str	r3, [sp, #0]
   1c4d2:	4a1f      	ldr	r2, [pc, #124]	; (1c550 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1c4d4:	2342      	movs	r3, #66	; 0x42
   1c4d6:	491f      	ldr	r1, [pc, #124]	; (1c554 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
   1c4d8:	47b0      	blx	r6
  TF_LITE_ENSURE_STATUS(
   1c4da:	e772      	b.n	1c3c2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x82>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
   1c4dc:	5cf8      	ldrb	r0, [r7, r3]
   1c4de:	2801      	cmp	r0, #1
   1c4e0:	d015      	beq.n	1c50e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ce>
   1c4e2:	6967      	ldr	r7, [r4, #20]
   1c4e4:	f7f2 ff14 	bl	f310 <TfLiteTypeGetName>
   1c4e8:	4606      	mov	r6, r0
   1c4ea:	4628      	mov	r0, r5
   1c4ec:	f7f2 ff10 	bl	f310 <TfLiteTypeGetName>
   1c4f0:	4b20      	ldr	r3, [pc, #128]	; (1c574 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x234>)
   1c4f2:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1c4f6:	9301      	str	r3, [sp, #4]
   1c4f8:	4b14      	ldr	r3, [pc, #80]	; (1c54c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20c>)
   1c4fa:	4620      	mov	r0, r4
   1c4fc:	9300      	str	r3, [sp, #0]
   1c4fe:	4a14      	ldr	r2, [pc, #80]	; (1c550 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1c500:	2343      	movs	r3, #67	; 0x43
   1c502:	4914      	ldr	r1, [pc, #80]	; (1c554 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
   1c504:	47b8      	blx	r7
}
   1c506:	4628      	mov	r0, r5
   1c508:	b016      	add	sp, #88	; 0x58
   1c50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    op_data->beta = static_cast<double>(params->beta);
   1c50e:	f8da 0000 	ldr.w	r0, [sl]
   1c512:	f7f7 f845 	bl	135a0 <__aeabi_f2d>
   1c516:	e9cd 0108 	strd	r0, r1, [sp, #32]
  TF_LITE_ENSURE_STATUS(
   1c51a:	e7ba      	b.n	1c492 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x152>
      SoftmaxQuantized(input, output, op_data);
   1c51c:	4631      	mov	r1, r6
   1c51e:	4640      	mov	r0, r8
   1c520:	aa08      	add	r2, sp, #32
   1c522:	f006 ffdb 	bl	234dc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
   1c526:	e7c1      	b.n	1c4ac <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x16c>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1c528:	6965      	ldr	r5, [r4, #20]
   1c52a:	f7f2 fef1 	bl	f310 <TfLiteTypeGetName>
   1c52e:	f817 3009 	ldrb.w	r3, [r7, r9]
   1c532:	4602      	mov	r2, r0
   1c534:	4911      	ldr	r1, [pc, #68]	; (1c57c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x23c>)
   1c536:	4620      	mov	r0, r4
   1c538:	47a8      	blx	r5
   1c53a:	e742      	b.n	1c3c2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x82>
   1c53c:	ffff8000 	.word	0xffff8000
   1c540:	0002bc2b 	.word	0x0002bc2b
   1c544:	0002bc11 	.word	0x0002bc11
   1c548:	0002bc04 	.word	0x0002bc04
   1c54c:	0002ba72 	.word	0x0002ba72
   1c550:	0002bbb1 	.word	0x0002bbb1
   1c554:	0002ba58 	.word	0x0002ba58
   1c558:	0002bdbc 	.word	0x0002bdbc
   1c55c:	0002b856 	.word	0x0002b856
   1c560:	0002bc32 	.word	0x0002bc32
   1c564:	0002bc3e 	.word	0x0002bc3e
   1c568:	3b800000 	.word	0x3b800000
   1c56c:	0002bc43 	.word	0x0002bc43
   1c570:	0002b8a4 	.word	0x0002b8a4
   1c574:	0002bc65 	.word	0x0002bc65
   1c578:	0002ba7f 	.word	0x0002ba7f
   1c57c:	0002ba0b 	.word	0x0002ba0b

0001c580 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>:
}

// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
   1c580:	b538      	push	{r3, r4, r5, lr}
   1c582:	4604      	mov	r4, r0
   1c584:	4610      	mov	r0, r2
   1c586:	461a      	mov	r2, r3
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
  if (!flat_vector) {
   1c588:	b924      	cbnz	r4, 1c594 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x14>
    TF_LITE_REPORT_ERROR(error_reporter,
   1c58a:	4910      	ldr	r1, [pc, #64]	; (1c5cc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x4c>)
                         op_name);
    return kTfLiteError;
  } else {
    size_t num_dimensions = flat_vector->size();
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
      TF_LITE_REPORT_ERROR(
   1c58c:	f006 fff0 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
   1c590:	2001      	movs	r0, #1
        buffer[i] = flat_vector->Get(i);
      }
    }
  }
  return kTfLiteOk;
}
   1c592:	bd38      	pop	{r3, r4, r5, pc}
    size_t num_dimensions = flat_vector->size();
   1c594:	6825      	ldr	r5, [r4, #0]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
   1c596:	2d08      	cmp	r5, #8
   1c598:	d80d      	bhi.n	1c5b6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x36>
   1c59a:	4622      	mov	r2, r4
      for (size_t i = 0; i < num_dimensions; ++i) {
   1c59c:	2300      	movs	r3, #0
   1c59e:	429d      	cmp	r5, r3
   1c5a0:	d011      	beq.n	1c5c6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x46>
    FLATBUFFERS_ASSERT(i < size());
   1c5a2:	6820      	ldr	r0, [r4, #0]
   1c5a4:	4283      	cmp	r3, r0
   1c5a6:	d308      	bcc.n	1c5ba <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x3a>
   1c5a8:	f240 1101 	movw	r1, #257	; 0x101
   1c5ac:	4b08      	ldr	r3, [pc, #32]	; (1c5d0 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x50>)
   1c5ae:	4a09      	ldr	r2, [pc, #36]	; (1c5d4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x54>)
   1c5b0:	4809      	ldr	r0, [pc, #36]	; (1c5d8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x58>)
   1c5b2:	f004 fb69 	bl	20c88 <__assert_func>
      TF_LITE_REPORT_ERROR(
   1c5b6:	4909      	ldr	r1, [pc, #36]	; (1c5dc <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x5c>)
   1c5b8:	e7e8      	b.n	1c58c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0xc>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   1c5ba:	f852 0f04 	ldr.w	r0, [r2, #4]!
        buffer[i] = flat_vector->Get(i);
   1c5be:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      for (size_t i = 0; i < num_dimensions; ++i) {
   1c5c2:	3301      	adds	r3, #1
   1c5c4:	e7eb      	b.n	1c59e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x1e>
  return kTfLiteOk;
   1c5c6:	2000      	movs	r0, #0
   1c5c8:	e7e3      	b.n	1c592 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x12>
   1c5ca:	bf00      	nop
   1c5cc:	0002bc74 	.word	0x0002bc74
   1c5d0:	0002b03e 	.word	0x0002b03e
   1c5d4:	0002b049 	.word	0x0002b049
   1c5d8:	0002b108 	.word	0x0002b108
   1c5dc:	0002bca2 	.word	0x0002bca2

0001c5e0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}

}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
   1c5e0:	b508      	push	{r3, lr}
   1c5e2:	4603      	mov	r3, r0
   1c5e4:	4610      	mov	r0, r2
   1c5e6:	2b0a      	cmp	r3, #10
   1c5e8:	d821      	bhi.n	1c62e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x4e>
   1c5ea:	e8df f003 	tbb	[pc, r3]
   1c5ee:	060a      	.short	0x060a
   1c5f0:	1a181412 	.word	0x1a181412
   1c5f4:	161e101c 	.word	0x161e101c
   1c5f8:	0e          	.byte	0x0e
   1c5f9:	00          	.byte	0x00
  switch (tensor_type) {
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
   1c5fa:	230a      	movs	r3, #10
      return kTfLiteOk;
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
      return kTfLiteOk;
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
   1c5fc:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
   1c5fe:	2300      	movs	r3, #0
   1c600:	e001      	b.n	1c606 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x26>
      *type = kTfLiteFloat32;
   1c602:	2201      	movs	r2, #1
   1c604:	700a      	strb	r2, [r1, #0]
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
   1c606:	4618      	mov	r0, r3
   1c608:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat64;
   1c60a:	230b      	movs	r3, #11
   1c60c:	e7f6      	b.n	1c5fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt16;
   1c60e:	2307      	movs	r3, #7
   1c610:	e7f4      	b.n	1c5fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt32;
   1c612:	2302      	movs	r3, #2
   1c614:	e7f2      	b.n	1c5fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteUInt8;
   1c616:	2303      	movs	r3, #3
   1c618:	e7f0      	b.n	1c5fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt8;
   1c61a:	2309      	movs	r3, #9
   1c61c:	e7ee      	b.n	1c5fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt64;
   1c61e:	2304      	movs	r3, #4
   1c620:	e7ec      	b.n	1c5fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteString;
   1c622:	2305      	movs	r3, #5
   1c624:	e7ea      	b.n	1c5fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteBool;
   1c626:	2306      	movs	r3, #6
   1c628:	e7e8      	b.n	1c5fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteComplex64;
   1c62a:	2308      	movs	r3, #8
   1c62c:	e7e6      	b.n	1c5fc <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteNoType;
   1c62e:	2200      	movs	r2, #0
   1c630:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
   1c632:	461a      	mov	r2, r3
   1c634:	4902      	ldr	r1, [pc, #8]	; (1c640 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x60>)
   1c636:	f006 ff9b 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   1c63a:	2301      	movs	r3, #1
   1c63c:	e7e3      	b.n	1c606 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x26>
   1c63e:	bf00      	nop
   1c640:	0002bce3 	.word	0x0002bce3

0001c644 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
   1c644:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c648:	4616      	mov	r6, r2
   1c64a:	4605      	mov	r5, r0
   1c64c:	4689      	mov	r9, r1
   1c64e:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   1c650:	f006 ffb2 	bl	235b8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
   1c654:	6833      	ldr	r3, [r6, #0]
   1c656:	2204      	movs	r2, #4
   1c658:	2124      	movs	r1, #36	; 0x24
   1c65a:	4630      	mov	r0, r6
   1c65c:	681b      	ldr	r3, [r3, #0]
   1c65e:	4798      	blx	r3
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   1c660:	4604      	mov	r4, r0
   1c662:	b978      	cbnz	r0, 1c684 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
   1c664:	4b1b      	ldr	r3, [pc, #108]	; (1c6d4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
   1c666:	4649      	mov	r1, r9
   1c668:	9301      	str	r3, [sp, #4]
   1c66a:	f240 23ea 	movw	r3, #746	; 0x2ea
   1c66e:	4648      	mov	r0, r9
   1c670:	9300      	str	r3, [sp, #0]
   1c672:	4a19      	ldr	r2, [pc, #100]	; (1c6d8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
   1c674:	4b19      	ldr	r3, [pc, #100]	; (1c6dc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>)
   1c676:	f006 ff89 	bl	2358c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   1c67a:	2501      	movs	r5, #1
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
   1c67c:	4628      	mov	r0, r5
   1c67e:	b002      	add	sp, #8
   1c680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
   1c684:	4628      	mov	r0, r5
   1c686:	f006 ffb8 	bl	235fa <_ZNK6tflite8Operator20builtin_options_typeEv>
   1c68a:	2811      	cmp	r0, #17
   1c68c:	d119      	bne.n	1c6c2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
   1c68e:	4628      	mov	r0, r5
   1c690:	f006 ffa0 	bl	235d4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   1c694:	4605      	mov	r5, r0
   1c696:	b1a0      	cbz	r0, 1c6c2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    auto field_offset = GetOptionalFieldOffset(field);
   1c698:	2104      	movs	r1, #4
   1c69a:	f006 f8c9 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1c69e:	b180      	cbz	r0, 1c6c2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
   1c6a0:	f855 a000 	ldr.w	sl, [r5, r0]
    auto p = data_ + field_offset;
   1c6a4:	eb05 0800 	add.w	r8, r5, r0
    if (new_shape != nullptr) {
   1c6a8:	eb18 000a 	adds.w	r0, r8, sl
   1c6ac:	d009      	beq.n	1c6c2 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
      TF_LITE_ENSURE_STATUS(
   1c6ae:	464a      	mov	r2, r9
   1c6b0:	4621      	mov	r1, r4
   1c6b2:	4b0b      	ldr	r3, [pc, #44]	; (1c6e0 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>)
   1c6b4:	f7ff ff64 	bl	1c580 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>
   1c6b8:	4605      	mov	r5, r0
   1c6ba:	b928      	cbnz	r0, 1c6c8 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
      params->num_dimensions = new_shape->size();
   1c6bc:	f858 300a 	ldr.w	r3, [r8, sl]
   1c6c0:	6223      	str	r3, [r4, #32]
  return kTfLiteOk;
   1c6c2:	2500      	movs	r5, #0
  *builtin_data = params.release();
   1c6c4:	603c      	str	r4, [r7, #0]

      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
   1c6c6:	e7d9      	b.n	1c67c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x38>
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
	  get_deleter()(std::move(__ptr));
   1c6c8:	4621      	mov	r1, r4
   1c6ca:	4630      	mov	r0, r6
   1c6cc:	f006 ff7f 	bl	235ce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   1c6d0:	e7d4      	b.n	1c67c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x38>
   1c6d2:	bf00      	nop
   1c6d4:	0002bd3a 	.word	0x0002bd3a
   1c6d8:	0002b8a4 	.word	0x0002b8a4
   1c6dc:	0002bd07 	.word	0x0002bd07
   1c6e0:	0002bd4c 	.word	0x0002bd4c

0001c6e4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
   1c6e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c6e6:	4614      	mov	r4, r2
   1c6e8:	4605      	mov	r5, r0
   1c6ea:	460f      	mov	r7, r1
   1c6ec:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   1c6ee:	f006 ff63 	bl	235b8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   1c6f2:	6823      	ldr	r3, [r4, #0]
   1c6f4:	4620      	mov	r0, r4
   1c6f6:	2204      	movs	r2, #4
   1c6f8:	211c      	movs	r1, #28
   1c6fa:	681b      	ldr	r3, [r3, #0]
   1c6fc:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   1c6fe:	4604      	mov	r4, r0
   1c700:	b968      	cbnz	r0, 1c71e <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   1c702:	4b26      	ldr	r3, [pc, #152]	; (1c79c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
   1c704:	4639      	mov	r1, r7
   1c706:	9301      	str	r3, [sp, #4]
   1c708:	f240 135d 	movw	r3, #349	; 0x15d
   1c70c:	4638      	mov	r0, r7
   1c70e:	9300      	str	r3, [sp, #0]
   1c710:	4a23      	ldr	r2, [pc, #140]	; (1c7a0 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
   1c712:	4b24      	ldr	r3, [pc, #144]	; (1c7a4 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
   1c714:	f006 ff3a 	bl	2358c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   1c718:	2001      	movs	r0, #1
}
   1c71a:	b003      	add	sp, #12
   1c71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
   1c71e:	4628      	mov	r0, r5
   1c720:	f006 ff6b 	bl	235fa <_ZNK6tflite8Operator20builtin_options_typeEv>
   1c724:	2802      	cmp	r0, #2
   1c726:	d135      	bne.n	1c794 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
   1c728:	4628      	mov	r0, r5
   1c72a:	f006 ff53 	bl	235d4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   1c72e:	4605      	mov	r5, r0
   1c730:	b380      	cbz	r0, 1c794 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   1c732:	2200      	movs	r2, #0
   1c734:	2104      	movs	r1, #4
   1c736:	f006 ff6f 	bl	23618 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
   1c73a:	b2c0      	uxtb	r0, r0
   1c73c:	f006 ff34 	bl	235a8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   1c740:	2200      	movs	r2, #0
   1c742:	2106      	movs	r1, #6
   1c744:	7020      	strb	r0, [r4, #0]
   1c746:	4628      	mov	r0, r5
   1c748:	f006 ff5d 	bl	23606 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   1c74c:	2200      	movs	r2, #0
   1c74e:	2108      	movs	r1, #8
    params->stride_width = schema_params->stride_w();
   1c750:	6060      	str	r0, [r4, #4]
   1c752:	4628      	mov	r0, r5
   1c754:	f006 ff57 	bl	23606 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
   1c758:	2200      	movs	r2, #0
   1c75a:	210a      	movs	r1, #10
    params->stride_height = schema_params->stride_h();
   1c75c:	60a0      	str	r0, [r4, #8]
   1c75e:	4628      	mov	r0, r5
   1c760:	f006 ff51 	bl	23606 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   1c764:	2200      	movs	r2, #0
   1c766:	210c      	movs	r1, #12
    params->depth_multiplier = schema_params->depth_multiplier();
   1c768:	60e0      	str	r0, [r4, #12]
   1c76a:	4628      	mov	r0, r5
   1c76c:	f006 ff54 	bl	23618 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   1c770:	b2c0      	uxtb	r0, r0
  switch (activation) {
   1c772:	1e43      	subs	r3, r0, #1
   1c774:	2b04      	cmp	r3, #4
   1c776:	bf88      	it	hi
   1c778:	2000      	movhi	r0, #0
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
   1c77a:	2201      	movs	r2, #1
   1c77c:	210e      	movs	r1, #14
    params->activation =
   1c77e:	7420      	strb	r0, [r4, #16]
   1c780:	4628      	mov	r0, r5
   1c782:	f006 ff40 	bl	23606 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
   1c786:	2201      	movs	r2, #1
    params->dilation_width_factor = schema_params->dilation_w_factor();
   1c788:	6160      	str	r0, [r4, #20]
   1c78a:	2110      	movs	r1, #16
   1c78c:	4628      	mov	r0, r5
   1c78e:	f006 ff3a 	bl	23606 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
   1c792:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
   1c794:	2000      	movs	r0, #0
  *builtin_data = params.release();
   1c796:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   1c798:	e7bf      	b.n	1c71a <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   1c79a:	bf00      	nop
   1c79c:	0002bd3a 	.word	0x0002bd3a
   1c7a0:	0002b8a4 	.word	0x0002b8a4
   1c7a4:	0002bd07 	.word	0x0002bd07

0001c7a8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                 void** builtin_data) {
   1c7a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1c7ac:	4617      	mov	r7, r2
   1c7ae:	4605      	mov	r5, r0
   1c7b0:	4688      	mov	r8, r1
   1c7b2:	4699      	mov	r9, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   1c7b4:	f006 ff00 	bl	235b8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   1c7b8:	683b      	ldr	r3, [r7, #0]
   1c7ba:	2201      	movs	r2, #1
   1c7bc:	2104      	movs	r1, #4
   1c7be:	4638      	mov	r0, r7
   1c7c0:	681b      	ldr	r3, [r3, #0]
   1c7c2:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   1c7c4:	4604      	mov	r4, r0
   1c7c6:	b970      	cbnz	r0, 1c7e6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
   1c7c8:	4b25      	ldr	r3, [pc, #148]	; (1c860 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
   1c7ca:	4641      	mov	r1, r8
   1c7cc:	9301      	str	r3, [sp, #4]
   1c7ce:	f240 1399 	movw	r3, #409	; 0x199
   1c7d2:	4640      	mov	r0, r8
   1c7d4:	9300      	str	r3, [sp, #0]
   1c7d6:	4a23      	ldr	r2, [pc, #140]	; (1c864 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
   1c7d8:	4b23      	ldr	r3, [pc, #140]	; (1c868 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
   1c7da:	f006 fed7 	bl	2358c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
        return kTfLiteError;
   1c7de:	2001      	movs	r0, #1
}
   1c7e0:	b002      	add	sp, #8
   1c7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
   1c7e6:	4628      	mov	r0, r5
   1c7e8:	f006 ff07 	bl	235fa <_ZNK6tflite8Operator20builtin_options_typeEv>
   1c7ec:	2808      	cmp	r0, #8
   1c7ee:	4682      	mov	sl, r0
   1c7f0:	d132      	bne.n	1c858 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
   1c7f2:	4628      	mov	r0, r5
   1c7f4:	f006 feee 	bl	235d4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   1c7f8:	4605      	mov	r5, r0
   1c7fa:	b368      	cbz	r0, 1c858 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   1c7fc:	2200      	movs	r2, #0
   1c7fe:	2104      	movs	r1, #4
   1c800:	f006 ff0a 	bl	23618 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   1c804:	b2c6      	uxtb	r6, r0
  switch (activation) {
   1c806:	1e73      	subs	r3, r6, #1
   1c808:	2b04      	cmp	r3, #4
   1c80a:	bf88      	it	hi
   1c80c:	2600      	movhi	r6, #0
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
   1c80e:	2200      	movs	r2, #0
   1c810:	4651      	mov	r1, sl
   1c812:	4628      	mov	r0, r5
    params->activation =
   1c814:	7026      	strb	r6, [r4, #0]
   1c816:	f006 fee7 	bl	235e8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   1c81a:	3800      	subs	r0, #0
   1c81c:	bf18      	it	ne
   1c81e:	2001      	movne	r0, #1
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   1c820:	2200      	movs	r2, #0
   1c822:	210a      	movs	r1, #10
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
   1c824:	70a0      	strb	r0, [r4, #2]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   1c826:	4628      	mov	r0, r5
   1c828:	f006 fede 	bl	235e8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   1c82c:	3800      	subs	r0, #0
   1c82e:	bf18      	it	ne
   1c830:	2001      	movne	r0, #1
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
   1c832:	2200      	movs	r2, #0
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   1c834:	70e0      	strb	r0, [r4, #3]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
   1c836:	2106      	movs	r1, #6
   1c838:	4628      	mov	r0, r5
   1c83a:	f006 feed 	bl	23618 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (schema_params->weights_format()) {
   1c83e:	b150      	cbz	r0, 1c856 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
   1c840:	2801      	cmp	r0, #1
   1c842:	d008      	beq.n	1c856 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
        TF_LITE_REPORT_ERROR(error_reporter,
   1c844:	4640      	mov	r0, r8
   1c846:	4909      	ldr	r1, [pc, #36]	; (1c86c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>)
   1c848:	f006 fe92 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   1c84c:	4621      	mov	r1, r4
   1c84e:	4638      	mov	r0, r7
   1c850:	f006 febd 	bl	235ce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   1c854:	e7c3      	b.n	1c7de <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
        params->weights_format =
   1c856:	7060      	strb	r0, [r4, #1]
  return kTfLiteOk;
   1c858:	2000      	movs	r0, #0
  *builtin_data = params.release();
   1c85a:	f8c9 4000 	str.w	r4, [r9]
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
   1c85e:	e7bf      	b.n	1c7e0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x38>
   1c860:	0002bd3a 	.word	0x0002bd3a
   1c864:	0002b8a4 	.word	0x0002b8a4
   1c868:	0002bd07 	.word	0x0002bd07
   1c86c:	0002bd54 	.word	0x0002bd54

0001c870 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
   1c870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c872:	4614      	mov	r4, r2
   1c874:	4605      	mov	r5, r0
   1c876:	460f      	mov	r7, r1
   1c878:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   1c87a:	f006 fe9d 	bl	235b8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   1c87e:	2204      	movs	r2, #4
   1c880:	6823      	ldr	r3, [r4, #0]
   1c882:	4620      	mov	r0, r4
   1c884:	4611      	mov	r1, r2
   1c886:	681b      	ldr	r3, [r3, #0]
   1c888:	4798      	blx	r3

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   1c88a:	4604      	mov	r4, r0
   1c88c:	b968      	cbnz	r0, 1c8aa <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   1c88e:	4b0f      	ldr	r3, [pc, #60]	; (1c8cc <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>)
   1c890:	4639      	mov	r1, r7
   1c892:	9301      	str	r3, [sp, #4]
   1c894:	f44f 7351 	mov.w	r3, #836	; 0x344
   1c898:	4638      	mov	r0, r7
   1c89a:	9300      	str	r3, [sp, #0]
   1c89c:	4a0c      	ldr	r2, [pc, #48]	; (1c8d0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>)
   1c89e:	4b0d      	ldr	r3, [pc, #52]	; (1c8d4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>)
   1c8a0:	f006 fe74 	bl	2358c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   1c8a4:	2001      	movs	r0, #1
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
   1c8a6:	b003      	add	sp, #12
   1c8a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
   1c8aa:	4628      	mov	r0, r5
   1c8ac:	f006 fea5 	bl	235fa <_ZNK6tflite8Operator20builtin_options_typeEv>
   1c8b0:	2809      	cmp	r0, #9
   1c8b2:	d108      	bne.n	1c8c6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
   1c8b4:	4628      	mov	r0, r5
   1c8b6:	f006 fe8d 	bl	235d4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   1c8ba:	b120      	cbz	r0, 1c8c6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
    return GetField<float>(VT_BETA, 0.0f);
   1c8bc:	2200      	movs	r2, #0
   1c8be:	2104      	movs	r1, #4
   1c8c0:	f006 feb3 	bl	2362a <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    params->beta = schema_params->beta();
   1c8c4:	6020      	str	r0, [r4, #0]
  return kTfLiteOk;
   1c8c6:	2000      	movs	r0, #0
  *builtin_data = params.release();
   1c8c8:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   1c8ca:	e7ec      	b.n	1c8a6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   1c8cc:	0002bd3a 	.word	0x0002bd3a
   1c8d0:	0002b8a4 	.word	0x0002b8a4
   1c8d4:	0002bd07 	.word	0x0002bd07

0001c8d8 <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
   1c8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c8da:	4615      	mov	r5, r2
   1c8dc:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
   1c8de:	2200      	movs	r2, #0
   1c8e0:	2300      	movs	r3, #0
                        int* shift) {
   1c8e2:	4606      	mov	r6, r0
   1c8e4:	460f      	mov	r7, r1
  if (double_multiplier == 0.) {
   1c8e6:	f7f7 f91b 	bl	13b20 <__aeabi_dcmpeq>
   1c8ea:	b118      	cbz	r0, 1c8f4 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1c>
    *quantized_multiplier = 0;
   1c8ec:	2300      	movs	r3, #0
   1c8ee:	602b      	str	r3, [r5, #0]
    *shift = 0;
   1c8f0:	6023      	str	r3, [r4, #0]
}
   1c8f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const double q = std::frexp(double_multiplier, shift);
   1c8f4:	4622      	mov	r2, r4
   1c8f6:	4630      	mov	r0, r6
   1c8f8:	4639      	mov	r1, r7
   1c8fa:	f001 fe1f 	bl	1e53c <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   1c8fe:	2200      	movs	r2, #0
   1c900:	4b11      	ldr	r3, [pc, #68]	; (1c948 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x70>)
   1c902:	f7f6 fea5 	bl	13650 <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
   1c906:	f001 fe7f 	bl	1e608 <round>
   1c90a:	f7f7 fce3 	bl	142d4 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   1c90e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   1c912:	460f      	mov	r7, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   1c914:	2300      	movs	r3, #0
   1c916:	4282      	cmp	r2, r0
   1c918:	eb73 0107 	sbcs.w	r1, r3, r7
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   1c91c:	4606      	mov	r6, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   1c91e:	da01      	bge.n	1c924 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x4c>
   1c920:	f007 fd96 	bl	24450 <abort>
  if (q_fixed == (1ll << 31)) {
   1c924:	429f      	cmp	r7, r3
   1c926:	bf01      	itttt	eq
   1c928:	4296      	cmpeq	r6, r2
    ++*shift;
   1c92a:	6823      	ldreq	r3, [r4, #0]
    q_fixed /= 2;
   1c92c:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    ++*shift;
   1c930:	3301      	addeq	r3, #1
   1c932:	bf08      	it	eq
   1c934:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
   1c936:	6823      	ldr	r3, [r4, #0]
   1c938:	331f      	adds	r3, #31
    *shift = 0;
   1c93a:	bfbe      	ittt	lt
   1c93c:	2300      	movlt	r3, #0
    q_fixed = 0;
   1c93e:	2600      	movlt	r6, #0
    *shift = 0;
   1c940:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   1c942:	602e      	str	r6, [r5, #0]
   1c944:	e7d5      	b.n	1c8f2 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1a>
   1c946:	bf00      	nop
   1c948:	41e00000 	.word	0x41e00000

0001c94c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
   1c94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c94e:	4615      	mov	r5, r2
   1c950:	461c      	mov	r4, r3
  TFLITE_CHECK_GT(double_multiplier, 1.);
   1c952:	2200      	movs	r2, #0
   1c954:	4b08      	ldr	r3, [pc, #32]	; (1c978 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x2c>)
                                      int* left_shift) {
   1c956:	4606      	mov	r6, r0
   1c958:	460f      	mov	r7, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
   1c95a:	f7f7 f909 	bl	13b70 <__aeabi_dcmpgt>
   1c95e:	b908      	cbnz	r0, 1c964 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x18>
   1c960:	f007 fd76 	bl	24450 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
   1c964:	4623      	mov	r3, r4
   1c966:	462a      	mov	r2, r5
   1c968:	4630      	mov	r0, r6
   1c96a:	4639      	mov	r1, r7
   1c96c:	f7ff ffb4 	bl	1c8d8 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
   1c970:	6823      	ldr	r3, [r4, #0]
   1c972:	2b00      	cmp	r3, #0
   1c974:	dbf4      	blt.n	1c960 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x14>
}
   1c976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c978:	3ff00000 	.word	0x3ff00000

0001c97c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
   1c97c:	edd1 7a03 	vldr	s15, [r1, #12]
   1c980:	ed92 7a03 	vldr	s14, [r2, #12]
   1c984:	ee67 7a87 	vmul.f32	s15, s15, s14
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   1c988:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1c98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
   1c990:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c992:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   1c994:	da09      	bge.n	1c9aa <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2e>
   1c996:	4b0f      	ldr	r3, [pc, #60]	; (1c9d4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
   1c998:	4a0f      	ldr	r2, [pc, #60]	; (1c9d8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
   1c99a:	9300      	str	r3, [sp, #0]
   1c99c:	6944      	ldr	r4, [r0, #20]
   1c99e:	23a7      	movs	r3, #167	; 0xa7
   1c9a0:	490e      	ldr	r1, [pc, #56]	; (1c9dc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
   1c9a2:	47a0      	blx	r4
   1c9a4:	2001      	movs	r0, #1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);

  return kTfLiteOk;
}
   1c9a6:	b002      	add	sp, #8
   1c9a8:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
   1c9aa:	ee17 0a90 	vmov	r0, s15
   1c9ae:	f7f6 fdf7 	bl	135a0 <__aeabi_f2d>
   1c9b2:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   1c9b4:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
   1c9b6:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   1c9b8:	f7f6 fdf2 	bl	135a0 <__aeabi_f2d>
   1c9bc:	460b      	mov	r3, r1
   1c9be:	4602      	mov	r2, r0
   1c9c0:	4629      	mov	r1, r5
   1c9c2:	4620      	mov	r0, r4
   1c9c4:	f7f6 ff6e 	bl	138a4 <__aeabi_ddiv>
   1c9c8:	9b06      	ldr	r3, [sp, #24]
   1c9ca:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
   1c9ce:	2000      	movs	r0, #0
   1c9d0:	e7e9      	b.n	1c9a6 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2a>
   1c9d2:	bf00      	nop
   1c9d4:	0002bda5 	.word	0x0002bda5
   1c9d8:	0002bd7e 	.word	0x0002bd7e
   1c9dc:	0002b8a4 	.word	0x0002b8a4

0001c9e0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
   1c9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c9e2:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
   1c9e4:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
   1c9e6:	b085      	sub	sp, #20
  if (output->type == kTfLiteUInt8) {
   1c9e8:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
   1c9ea:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (output->type == kTfLiteUInt8) {
   1c9ec:	d00d      	beq.n	1ca0a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2a>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
   1c9ee:	2b09      	cmp	r3, #9
   1c9f0:	d01e      	beq.n	1ca30 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x50>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
   1c9f2:	2b07      	cmp	r3, #7
   1c9f4:	d020      	beq.n	1ca38 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x58>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
   1c9f6:	4b25      	ldr	r3, [pc, #148]	; (1ca8c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xac>)
   1c9f8:	4a25      	ldr	r2, [pc, #148]	; (1ca90 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb0>)
   1c9fa:	9300      	str	r3, [sp, #0]
   1c9fc:	6944      	ldr	r4, [r0, #20]
   1c9fe:	23da      	movs	r3, #218	; 0xda
   1ca00:	4924      	ldr	r1, [pc, #144]	; (1ca94 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb4>)
   1ca02:	47a0      	blx	r4
   1ca04:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
   1ca06:	b005      	add	sp, #20
   1ca08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    qmax = std::numeric_limits<uint8_t>::max();
   1ca0a:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
   1ca0c:	2600      	movs	r6, #0
  const auto zero_point = output->params.zero_point;
   1ca0e:	6913      	ldr	r3, [r2, #16]
  };
   1ca10:	68d2      	ldr	r2, [r2, #12]
  if (activation == kTfLiteActRelu) {
   1ca12:	2901      	cmp	r1, #1
  };
   1ca14:	9202      	str	r2, [sp, #8]
   1ca16:	9303      	str	r3, [sp, #12]
  if (activation == kTfLiteActRelu) {
   1ca18:	d112      	bne.n	1ca40 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x60>
    *act_min = std::max(qmin, quantize(0.0));
   1ca1a:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 1ca98 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb8>
   1ca1e:	a802      	add	r0, sp, #8
   1ca20:	f006 fe5f 	bl	236e2 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
   1ca24:	4286      	cmp	r6, r0
   1ca26:	bfac      	ite	ge
   1ca28:	602e      	strge	r6, [r5, #0]
   1ca2a:	6028      	strlt	r0, [r5, #0]
    *act_max = qmax;
   1ca2c:	603c      	str	r4, [r7, #0]
   1ca2e:	e01b      	b.n	1ca68 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x88>
    qmax = std::numeric_limits<int8_t>::max();
   1ca30:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
   1ca32:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1ca36:	e7ea      	b.n	1ca0e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
    qmax = std::numeric_limits<int16_t>::max();
   1ca38:	f647 74ff 	movw	r4, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
   1ca3c:	4e17      	ldr	r6, [pc, #92]	; (1ca9c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xbc>)
   1ca3e:	e7e6      	b.n	1ca0e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
  } else if (activation == kTfLiteActRelu6) {
   1ca40:	2903      	cmp	r1, #3
   1ca42:	d113      	bne.n	1ca6c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x8c>
    *act_min = std::max(qmin, quantize(0.0));
   1ca44:	ed9f 0a14 	vldr	s0, [pc, #80]	; 1ca98 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb8>
   1ca48:	a802      	add	r0, sp, #8
   1ca4a:	f006 fe4a 	bl	236e2 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
   1ca4e:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
   1ca52:	4286      	cmp	r6, r0
   1ca54:	bfac      	ite	ge
   1ca56:	602e      	strge	r6, [r5, #0]
   1ca58:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
   1ca5a:	a802      	add	r0, sp, #8
   1ca5c:	f006 fe41 	bl	236e2 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
   1ca60:	4284      	cmp	r4, r0
   1ca62:	bfd4      	ite	le
   1ca64:	603c      	strle	r4, [r7, #0]
   1ca66:	6038      	strgt	r0, [r7, #0]
  return kTfLiteOk;
   1ca68:	2000      	movs	r0, #0
   1ca6a:	e7cc      	b.n	1ca06 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x26>
  } else if (activation == kTfLiteActReluN1To1) {
   1ca6c:	2902      	cmp	r1, #2
   1ca6e:	d10b      	bne.n	1ca88 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xa8>
    *act_min = std::max(qmin, quantize(-1.0));
   1ca70:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   1ca74:	a802      	add	r0, sp, #8
   1ca76:	f006 fe34 	bl	236e2 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
   1ca7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
   1ca7e:	4286      	cmp	r6, r0
   1ca80:	bfac      	ite	ge
   1ca82:	602e      	strge	r6, [r5, #0]
   1ca84:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
   1ca86:	e7e8      	b.n	1ca5a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x7a>
    *act_min = qmin;
   1ca88:	602e      	str	r6, [r5, #0]
   1ca8a:	e7cf      	b.n	1ca2c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4c>
   1ca8c:	0002bde0 	.word	0x0002bde0
   1ca90:	0002bd7e 	.word	0x0002bd7e
   1ca94:	0002b8a4 	.word	0x0002b8a4
   1ca98:	00000000 	.word	0x00000000
   1ca9c:	ffff8000 	.word	0xffff8000

0001caa0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   1caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1caa4:	ed2d 8b04 	vpush	{d8-d9}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   1caa8:	f891 8030 	ldrb.w	r8, [r1, #48]	; 0x30
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   1caac:	4604      	mov	r4, r0
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   1caae:	f1b8 0f01 	cmp.w	r8, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   1cab2:	460d      	mov	r5, r1
   1cab4:	4616      	mov	r6, r2
   1cab6:	ee09 3a10 	vmov	s18, r3
   1caba:	b08b      	sub	sp, #44	; 0x2c
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   1cabc:	d011      	beq.n	1cae2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x42>
   1cabe:	2701      	movs	r7, #1
   1cac0:	4b74      	ldr	r3, [pc, #464]	; (1cc94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f4>)
   1cac2:	e9cd 8702 	strd	r8, r7, [sp, #8]
   1cac6:	9301      	str	r3, [sp, #4]
   1cac8:	4b73      	ldr	r3, [pc, #460]	; (1cc98 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f8>)
   1caca:	4a74      	ldr	r2, [pc, #464]	; (1cc9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   1cacc:	9300      	str	r3, [sp, #0]
   1cace:	6944      	ldr	r4, [r0, #20]
   1cad0:	2335      	movs	r3, #53	; 0x35
   1cad2:	4973      	ldr	r1, [pc, #460]	; (1cca0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   1cad4:	47a0      	blx	r4
}
   1cad6:	4638      	mov	r0, r7
   1cad8:	b00b      	add	sp, #44	; 0x2c
   1cada:	ecbd 8b04 	vpop	{d8-d9}
   1cade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   1cae2:	f892 7030 	ldrb.w	r7, [r2, #48]	; 0x30
   1cae6:	2f01      	cmp	r7, #1
   1cae8:	d00c      	beq.n	1cb04 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x64>
   1caea:	4b6a      	ldr	r3, [pc, #424]	; (1cc94 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f4>)
   1caec:	e9cd 7802 	strd	r7, r8, [sp, #8]
   1caf0:	9301      	str	r3, [sp, #4]
   1caf2:	4b6c      	ldr	r3, [pc, #432]	; (1cca4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x204>)
   1caf4:	4a69      	ldr	r2, [pc, #420]	; (1cc9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   1caf6:	9300      	str	r3, [sp, #0]
   1caf8:	6944      	ldr	r4, [r0, #20]
   1cafa:	2337      	movs	r3, #55	; 0x37
   1cafc:	4968      	ldr	r1, [pc, #416]	; (1cca0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   1cafe:	47a0      	blx	r4
   1cb00:	4647      	mov	r7, r8
   1cb02:	e7e8      	b.n	1cad6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  const auto* affine_quantization =
   1cb04:	6b52      	ldr	r2, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
   1cb06:	b93a      	cbnz	r2, 1cb18 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x78>
   1cb08:	4b67      	ldr	r3, [pc, #412]	; (1cca8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x208>)
   1cb0a:	9300      	str	r3, [sp, #0]
   1cb0c:	2342      	movs	r3, #66	; 0x42
   1cb0e:	6944      	ldr	r4, [r0, #20]
    TF_LITE_ENSURE(context,
   1cb10:	4a62      	ldr	r2, [pc, #392]	; (1cc9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   1cb12:	4966      	ldr	r1, [pc, #408]	; (1ccac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x20c>)
   1cb14:	47a0      	blx	r4
   1cb16:	e7de      	b.n	1cad6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  TF_LITE_ENSURE(context, affine_quantization->scale);
   1cb18:	f8d2 b000 	ldr.w	fp, [r2]
   1cb1c:	f1bb 0f00 	cmp.w	fp, #0
   1cb20:	d104      	bne.n	1cb2c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x8c>
   1cb22:	4b63      	ldr	r3, [pc, #396]	; (1ccb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
   1cb24:	9300      	str	r3, [sp, #0]
   1cb26:	6944      	ldr	r4, [r0, #20]
   1cb28:	2343      	movs	r3, #67	; 0x43
   1cb2a:	e7f1      	b.n	1cb10 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x70>
  const bool is_per_channel = affine_quantization->scale->size > 1;
   1cb2c:	f8db a000 	ldr.w	sl, [fp]
  if (is_per_channel) {
   1cb30:	f1ba 0f01 	cmp.w	sl, #1
   1cb34:	dd37      	ble.n	1cba6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x106>
    TF_LITE_ENSURE(context,
   1cb36:	780b      	ldrb	r3, [r1, #0]
   1cb38:	2b09      	cmp	r3, #9
   1cb3a:	d006      	beq.n	1cb4a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xaa>
   1cb3c:	2b07      	cmp	r3, #7
   1cb3e:	d004      	beq.n	1cb4a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xaa>
   1cb40:	4b5c      	ldr	r3, [pc, #368]	; (1ccb4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x214>)
   1cb42:	9300      	str	r3, [sp, #0]
   1cb44:	6944      	ldr	r4, [r0, #20]
   1cb46:	2347      	movs	r3, #71	; 0x47
   1cb48:	e7e2      	b.n	1cb10 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x70>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
   1cb4a:	7833      	ldrb	r3, [r6, #0]
   1cb4c:	2b09      	cmp	r3, #9
   1cb4e:	d00d      	beq.n	1cb6c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xcc>
   1cb50:	2209      	movs	r2, #9
   1cb52:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1cb56:	4b58      	ldr	r3, [pc, #352]	; (1ccb8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
   1cb58:	9301      	str	r3, [sp, #4]
   1cb5a:	4b58      	ldr	r3, [pc, #352]	; (1ccbc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
   1cb5c:	9300      	str	r3, [sp, #0]
   1cb5e:	2349      	movs	r3, #73	; 0x49
   1cb60:	6965      	ldr	r5, [r4, #20]
    TF_LITE_ENSURE_EQ(
   1cb62:	4620      	mov	r0, r4
   1cb64:	4a4d      	ldr	r2, [pc, #308]	; (1cc9c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   1cb66:	494e      	ldr	r1, [pc, #312]	; (1cca0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   1cb68:	47a8      	blx	r5
   1cb6a:	e7b4      	b.n	1cad6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
   1cb6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1cb6e:	4553      	cmp	r3, sl
   1cb70:	d008      	beq.n	1cb84 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xe4>
   1cb72:	e9cd a302 	strd	sl, r3, [sp, #8]
   1cb76:	4b52      	ldr	r3, [pc, #328]	; (1ccc0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
   1cb78:	9301      	str	r3, [sp, #4]
   1cb7a:	4b52      	ldr	r3, [pc, #328]	; (1ccc4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
   1cb7c:	9300      	str	r3, [sp, #0]
   1cb7e:	6965      	ldr	r5, [r4, #20]
   1cb80:	234a      	movs	r3, #74	; 0x4a
   1cb82:	e7ee      	b.n	1cb62 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc2>
    TF_LITE_ENSURE_EQ(
   1cb84:	6892      	ldr	r2, [r2, #8]
   1cb86:	68b3      	ldr	r3, [r6, #8]
   1cb88:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1cb8c:	685b      	ldr	r3, [r3, #4]
   1cb8e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1cb90:	429a      	cmp	r2, r3
   1cb92:	d008      	beq.n	1cba6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x106>
   1cb94:	9303      	str	r3, [sp, #12]
   1cb96:	4b4c      	ldr	r3, [pc, #304]	; (1ccc8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
   1cb98:	9202      	str	r2, [sp, #8]
   1cb9a:	9301      	str	r3, [sp, #4]
   1cb9c:	4b48      	ldr	r3, [pc, #288]	; (1ccc0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
   1cb9e:	9300      	str	r3, [sp, #0]
   1cba0:	6965      	ldr	r5, [r4, #20]
   1cba2:	234b      	movs	r3, #75	; 0x4b
   1cba4:	e7dd      	b.n	1cb62 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc2>
  const float input_scale = input->params.scale;
   1cba6:	edd5 7a03 	vldr	s15, [r5, #12]
  const float output_scale = output->params.scale;
   1cbaa:	9b18      	ldr	r3, [sp, #96]	; 0x60
  const float input_scale = input->params.scale;
   1cbac:	eeb0 8a67 	vmov.f32	s16, s15
  const float output_scale = output->params.scale;
   1cbb0:	edd3 7a03 	vldr	s15, [r3, #12]
  for (int i = 0; i < num_channels; ++i) {
   1cbb4:	2700      	movs	r7, #0
  const float output_scale = output->params.scale;
   1cbb6:	eef0 8a67 	vmov.f32	s17, s15
  for (int i = 0; i < num_channels; ++i) {
   1cbba:	f10b 0304 	add.w	r3, fp, #4
   1cbbe:	9305      	str	r3, [sp, #20]
   1cbc0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1cbc2:	42bb      	cmp	r3, r7
   1cbc4:	dd31      	ble.n	1cc2a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x18a>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
   1cbc6:	f1ba 0f01 	cmp.w	sl, #1
   1cbca:	bfca      	itet	gt
   1cbcc:	9b05      	ldrgt	r3, [sp, #20]
   1cbce:	f8db 0004 	ldrle.w	r0, [fp, #4]
   1cbd2:	6818      	ldrgt	r0, [r3, #0]
    const double filter_scale = static_cast<double>(scale);
   1cbd4:	f7f6 fce4 	bl	135a0 <__aeabi_f2d>
   1cbd8:	4680      	mov	r8, r0
    const double effective_output_scale = static_cast<double>(input_scale) *
   1cbda:	ee18 0a10 	vmov	r0, s16
    const double filter_scale = static_cast<double>(scale);
   1cbde:	4689      	mov	r9, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   1cbe0:	f7f6 fcde 	bl	135a0 <__aeabi_f2d>
   1cbe4:	4602      	mov	r2, r0
   1cbe6:	460b      	mov	r3, r1
   1cbe8:	4640      	mov	r0, r8
   1cbea:	4649      	mov	r1, r9
   1cbec:	f7f6 fd30 	bl	13650 <__aeabi_dmul>
   1cbf0:	4680      	mov	r8, r0
                                          static_cast<double>(output_scale);
   1cbf2:	ee18 0a90 	vmov	r0, s17
    const double effective_output_scale = static_cast<double>(input_scale) *
   1cbf6:	4689      	mov	r9, r1
                                          static_cast<double>(output_scale);
   1cbf8:	f7f6 fcd2 	bl	135a0 <__aeabi_f2d>
   1cbfc:	4602      	mov	r2, r0
   1cbfe:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   1cc00:	4640      	mov	r0, r8
   1cc02:	4649      	mov	r1, r9
   1cc04:	f7f6 fe4e 	bl	138a4 <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
   1cc08:	ab08      	add	r3, sp, #32
   1cc0a:	aa07      	add	r2, sp, #28
   1cc0c:	f7ff fe64 	bl	1c8d8 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
   1cc10:	9b07      	ldr	r3, [sp, #28]
   1cc12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   1cc14:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
    per_channel_shift[i] = channel_shift;
   1cc18:	9b08      	ldr	r3, [sp, #32]
   1cc1a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1cc1c:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
   1cc20:	9b05      	ldr	r3, [sp, #20]
   1cc22:	3701      	adds	r7, #1
   1cc24:	3304      	adds	r3, #4
   1cc26:	9305      	str	r3, [sp, #20]
   1cc28:	e7ca      	b.n	1cbc0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x120>
  if (input->type == kTfLiteUInt8) {
   1cc2a:	782b      	ldrb	r3, [r5, #0]
   1cc2c:	2b03      	cmp	r3, #3
   1cc2e:	d11c      	bne.n	1cc6a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ca>
    double real_multiplier = 0.0;
   1cc30:	2200      	movs	r2, #0
   1cc32:	2300      	movs	r3, #0
   1cc34:	e9cd 2308 	strd	r2, r3, [sp, #32]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   1cc38:	ab08      	add	r3, sp, #32
   1cc3a:	9301      	str	r3, [sp, #4]
   1cc3c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1cc3e:	4632      	mov	r2, r6
   1cc40:	9300      	str	r3, [sp, #0]
   1cc42:	4629      	mov	r1, r5
   1cc44:	ee19 3a10 	vmov	r3, s18
   1cc48:	4620      	mov	r0, r4
   1cc4a:	f7f9 f951 	bl	15ef0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   1cc4e:	4607      	mov	r7, r0
   1cc50:	2800      	cmp	r0, #0
   1cc52:	f47f af40 	bne.w	1cad6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
   1cc56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   1cc5a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1cc5c:	ab07      	add	r3, sp, #28
   1cc5e:	f7ff fe3b 	bl	1c8d8 <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
   1cc62:	9b07      	ldr	r3, [sp, #28]
   1cc64:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1cc66:	425b      	negs	r3, r3
   1cc68:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   1cc6a:	782b      	ldrb	r3, [r5, #0]
   1cc6c:	2b09      	cmp	r3, #9
   1cc6e:	d003      	beq.n	1cc78 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1d8>
   1cc70:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1cc74:	2b03      	cmp	r3, #3
   1cc76:	d10a      	bne.n	1cc8e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ee>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1cc78:	e9dd 2118 	ldrd	r2, r1, [sp, #96]	; 0x60
   1cc7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1cc7e:	4620      	mov	r0, r4
   1cc80:	9300      	str	r3, [sp, #0]
   1cc82:	7809      	ldrb	r1, [r1, #0]
   1cc84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1cc86:	f7ff feab 	bl	1c9e0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
   1cc8a:	4607      	mov	r7, r0
   1cc8c:	e723      	b.n	1cad6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  return kTfLiteOk;
   1cc8e:	2700      	movs	r7, #0
   1cc90:	e721      	b.n	1cad6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
   1cc92:	bf00      	nop
   1cc94:	0002b870 	.word	0x0002b870
   1cc98:	0002bde6 	.word	0x0002bde6
   1cc9c:	0002bd7e 	.word	0x0002bd7e
   1cca0:	0002b856 	.word	0x0002b856
   1cca4:	0002b88a 	.word	0x0002b88a
   1cca8:	0002b8bb 	.word	0x0002b8bb
   1ccac:	0002b8a4 	.word	0x0002b8a4
   1ccb0:	0002b8cf 	.word	0x0002b8cf
   1ccb4:	0002bdff 	.word	0x0002bdff
   1ccb8:	0002bc32 	.word	0x0002bc32
   1ccbc:	0002be39 	.word	0x0002be39
   1ccc0:	0002be46 	.word	0x0002be46
   1ccc4:	0002b9b2 	.word	0x0002b9b2
   1ccc8:	0002be53 	.word	0x0002be53

0001cccc <DebugLog>:

#include "tensorflow/lite/micro/debug_log.h"

#include <cstdio>

extern "C" void DebugLog(const char* s) { fprintf(stderr, "%s", s); }
   1cccc:	4b03      	ldr	r3, [pc, #12]	; (1ccdc <DebugLog+0x10>)
   1ccce:	4602      	mov	r2, r0
   1ccd0:	681b      	ldr	r3, [r3, #0]
   1ccd2:	4903      	ldr	r1, [pc, #12]	; (1cce0 <DebugLog+0x14>)
   1ccd4:	68d8      	ldr	r0, [r3, #12]
   1ccd6:	f003 bffd 	b.w	20cd4 <fiprintf>
   1ccda:	bf00      	nop
   1ccdc:	20020064 	.word	0x20020064
   1cce0:	0002bfbf 	.word	0x0002bfbf

0001cce4 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                              aligned_arena_size),
                error_reporter);
}

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
   1cce4:	b538      	push	{r3, r4, r5, lr}
   1cce6:	460d      	mov	r5, r1
  TFLITE_DCHECK(memory_allocator != nullptr);
   1cce8:	4604      	mov	r4, r0
   1ccea:	b908      	cbnz	r0, 1ccf0 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0xc>
   1ccec:	f007 fbb0 	bl	24450 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   1ccf0:	2900      	cmp	r1, #0
   1ccf2:	d0fb      	beq.n	1ccec <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x8>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
   1ccf4:	6803      	ldr	r3, [r0, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
   1ccf6:	2204      	movs	r2, #4
   1ccf8:	2118      	movs	r1, #24
   1ccfa:	68db      	ldr	r3, [r3, #12]
   1ccfc:	4798      	blx	r3
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
   1ccfe:	b138      	cbz	r0, 1cd10 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x2c>
      model_is_allocating_(false) {}
   1cd00:	4b04      	ldr	r3, [pc, #16]	; (1cd14 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x30>)
   1cd02:	6085      	str	r5, [r0, #8]
   1cd04:	e9c0 3400 	strd	r3, r4, [r0]
   1cd08:	2300      	movs	r3, #0
   1cd0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   1cd0e:	7303      	strb	r3, [r0, #12]
  return allocator;
}
   1cd10:	bd38      	pop	{r3, r4, r5, pc}
   1cd12:	bf00      	nop
   1cd14:	0002a7ac 	.word	0x0002a7ac

0001cd18 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   1cd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd1a:	460f      	mov	r7, r1
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   1cd1c:	2110      	movs	r1, #16
                                       ErrorReporter* error_reporter) {
   1cd1e:	4604      	mov	r4, r0
   1cd20:	4616      	mov	r6, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   1cd22:	f006 febe 	bl	23aa2 <_ZN6tflite14AlignPointerUpEPhj>
  if (aligned_arena != tensor_arena) {
   1cd26:	4284      	cmp	r4, r0
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   1cd28:	4605      	mov	r5, r0
  if (aligned_arena != tensor_arena) {
   1cd2a:	d004      	beq.n	1cd36 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x1e>
    TF_LITE_REPORT_ERROR(
   1cd2c:	1b02      	subs	r2, r0, r4
   1cd2e:	4907      	ldr	r1, [pc, #28]	; (1cd4c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x34>)
   1cd30:	4630      	mov	r0, r6
   1cd32:	f006 fc1d 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
   1cd36:	19e2      	adds	r2, r4, r7
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
   1cd38:	4629      	mov	r1, r5
   1cd3a:	4630      	mov	r0, r6
   1cd3c:	1b52      	subs	r2, r2, r5
   1cd3e:	f000 fe1d 	bl	1d97c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
   1cd42:	4631      	mov	r1, r6
}
   1cd44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
   1cd48:	f7ff bfcc 	b.w	1cce4 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
   1cd4c:	0002be90 	.word	0x0002be90

0001cd50 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>:
  model_is_allocating_ = false;
  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocatePersistentBuffer(size_t bytes,
                                                      void** ptr) {
   1cd50:	b570      	push	{r4, r5, r6, lr}
   1cd52:	4604      	mov	r4, r0
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   1cd54:	6840      	ldr	r0, [r0, #4]
                                                      void** ptr) {
   1cd56:	4615      	mov	r5, r2
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   1cd58:	6803      	ldr	r3, [r0, #0]
   1cd5a:	2210      	movs	r2, #16
   1cd5c:	68db      	ldr	r3, [r3, #12]
                                                      void** ptr) {
   1cd5e:	460e      	mov	r6, r1
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   1cd60:	4798      	blx	r3
  if (data == nullptr) {
   1cd62:	b930      	cbnz	r0, 1cd72 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1cd64:	4632      	mov	r2, r6
   1cd66:	4904      	ldr	r1, [pc, #16]	; (1cd78 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x28>)
   1cd68:	68a0      	ldr	r0, [r4, #8]
   1cd6a:	f006 fc01 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate persistent buffer of size %d",
                         bytes);
    return kTfLiteError;
   1cd6e:	2001      	movs	r0, #1
  }
  (*ptr) = data;
  return kTfLiteOk;
}
   1cd70:	bd70      	pop	{r4, r5, r6, pc}
  (*ptr) = data;
   1cd72:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
   1cd74:	2000      	movs	r0, #0
   1cd76:	e7fb      	b.n	1cd70 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x20>
   1cd78:	0002befb 	.word	0x0002befb

0001cd7c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(int node_id,
                                                         size_t bytes,
                                                         int* buffer_idx) {
   1cd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // A sanity check to make sure scratch_buffer_handles_ is contiguous i.e.
  // scratch_buffer_handles_ is pointing to the last allocation from memory
  // allocator.
  if (scratch_buffer_handles_ != nullptr &&
   1cd80:	6905      	ldr	r5, [r0, #16]
                                                         int* buffer_idx) {
   1cd82:	4604      	mov	r4, r0
   1cd84:	460e      	mov	r6, r1
   1cd86:	4690      	mov	r8, r2
   1cd88:	461f      	mov	r7, r3
  if (scratch_buffer_handles_ != nullptr &&
   1cd8a:	b15d      	cbz	r5, 1cda4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
      reinterpret_cast<uint8_t*>(scratch_buffer_handles_) !=
          memory_allocator_->GetTail()) {
   1cd8c:	6840      	ldr	r0, [r0, #4]
   1cd8e:	f006 fd0c 	bl	237aa <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
  if (scratch_buffer_handles_ != nullptr &&
   1cd92:	4285      	cmp	r5, r0
   1cd94:	d006      	beq.n	1cda4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1cd96:	4910      	ldr	r1, [pc, #64]	; (1cdd8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x5c>)
   1cd98:	68a0      	ldr	r0, [r4, #8]
   1cd9a:	f006 fbe9 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
              alignof(internal::ScratchBufferHandle)));
  if (handle == nullptr) {
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Failed to register scratch buffer handle for node %s",
                         node_id);
    return kTfLiteError;
   1cd9e:	2001      	movs	r0, #1
  scratch_buffer_count_ += 1;
  // scratch_buffer_handles_ is in reverse order. The following code ensures
  // that scratch_buffers[0] is pointing to the newly allocated handle.
  scratch_buffer_handles_ = handle;
  return kTfLiteOk;
}
   1cda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          memory_allocator_->AllocateFromTail(
   1cda4:	6860      	ldr	r0, [r4, #4]
   1cda6:	2204      	movs	r2, #4
              alignof(internal::ScratchBufferHandle)));
   1cda8:	6803      	ldr	r3, [r0, #0]
          memory_allocator_->AllocateFromTail(
   1cdaa:	210c      	movs	r1, #12
   1cdac:	68db      	ldr	r3, [r3, #12]
   1cdae:	4798      	blx	r3
  if (handle == nullptr) {
   1cdb0:	b928      	cbnz	r0, 1cdbe <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1cdb2:	4632      	mov	r2, r6
   1cdb4:	4909      	ldr	r1, [pc, #36]	; (1cddc <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x60>)
   1cdb6:	68a0      	ldr	r0, [r4, #8]
   1cdb8:	f006 fbda 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   1cdbc:	e7ef      	b.n	1cd9e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x22>
  *handle = {};
   1cdbe:	2500      	movs	r5, #0
  *buffer_idx = scratch_buffer_count_;
   1cdc0:	6963      	ldr	r3, [r4, #20]
  handle->bytes = bytes;
   1cdc2:	e9c0 5800 	strd	r5, r8, [r0]
  handle->node_idx = node_id;
   1cdc6:	6086      	str	r6, [r0, #8]
  *buffer_idx = scratch_buffer_count_;
   1cdc8:	603b      	str	r3, [r7, #0]
  scratch_buffer_count_ += 1;
   1cdca:	6963      	ldr	r3, [r4, #20]
   1cdcc:	3301      	adds	r3, #1
  scratch_buffer_handles_ = handle;
   1cdce:	e9c4 0304 	strd	r0, r3, [r4, #16]
  return kTfLiteOk;
   1cdd2:	4628      	mov	r0, r5
   1cdd4:	e7e4      	b.n	1cda0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x24>
   1cdd6:	bf00      	nop
   1cdd8:	0002bf2b 	.word	0x0002bf2b
   1cddc:	0002bf8d 	.word	0x0002bf8d

0001cde0 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:

void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
   1cde0:	b508      	push	{r3, lr}
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
   1cde2:	6943      	ldr	r3, [r0, #20]
void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
   1cde4:	460a      	mov	r2, r1
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
   1cde6:	428b      	cmp	r3, r1
   1cde8:	d805      	bhi.n	1cdf6 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x16>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1cdea:	4907      	ldr	r1, [pc, #28]	; (1ce08 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>)
   1cdec:	6880      	ldr	r0, [r0, #8]
   1cdee:	f006 fbbf 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Buffer %d not found. %d buffers available.",
                         buffer_idx, scratch_buffer_count_);
    return nullptr;
   1cdf2:	2000      	movs	r0, #0
  }
  // scratch_buffer_handles_ is in reverse order.
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
}
   1cdf4:	bd08      	pop	{r3, pc}
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
   1cdf6:	220c      	movs	r2, #12
   1cdf8:	1a59      	subs	r1, r3, r1
   1cdfa:	6903      	ldr	r3, [r0, #16]
   1cdfc:	fb02 3101 	mla	r1, r2, r1, r3
   1ce00:	f851 0c0c 	ldr.w	r0, [r1, #-12]
   1ce04:	e7f6      	b.n	1cdf4 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x14>
   1ce06:	bf00      	nop
   1ce08:	0002bfc2 	.word	0x0002bfc2

0001ce0c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
   1ce0c:	b538      	push	{r3, r4, r5, lr}
   1ce0e:	460c      	mov	r4, r1
   1ce10:	4605      	mov	r5, r0
    auto field_offset = GetOptionalFieldOffset(field);
   1ce12:	2108      	movs	r1, #8
   1ce14:	4620      	mov	r0, r4
   1ce16:	f005 fd0b 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1ce1a:	b178      	cbz	r0, 1ce3c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x30>
   1ce1c:	5822      	ldr	r2, [r4, r0]
    auto p = data_ + field_offset;
   1ce1e:	1821      	adds	r1, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1ce20:	188b      	adds	r3, r1, r2
  auto* subgraphs = model->subgraphs();
  if (subgraphs->size() != 1) {
   1ce22:	588a      	ldr	r2, [r1, r2]
   1ce24:	2a01      	cmp	r2, #1
   1ce26:	d005      	beq.n	1ce34 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1ce28:	4905      	ldr	r1, [pc, #20]	; (1ce40 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x34>)
   1ce2a:	68a8      	ldr	r0, [r5, #8]
   1ce2c:	f006 fba0 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   1ce30:	2000      	movs	r0, #0
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
  }
  return (*subgraphs)[0];
}
   1ce32:	bd38      	pop	{r3, r4, r5, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   1ce34:	1d18      	adds	r0, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   1ce36:	685b      	ldr	r3, [r3, #4]
   1ce38:	4418      	add	r0, r3
  return (*subgraphs)[0];
   1ce3a:	e7fa      	b.n	1ce32 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x26>
  if (subgraphs->size() != 1) {
   1ce3c:	6803      	ldr	r3, [r0, #0]
   1ce3e:	deff      	udf	#255	; 0xff
   1ce40:	0002b015 	.word	0x0002b015

0001ce44 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>:
    NodeAndRegistration** node_and_registrations) {
   1ce44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ce48:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1ce4c:	4604      	mov	r4, r0
   1ce4e:	4691      	mov	r9, r2
   1ce50:	461f      	mov	r7, r3
  TFLITE_DCHECK(model != nullptr);
   1ce52:	460e      	mov	r6, r1
   1ce54:	b909      	cbnz	r1, 1ce5a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x16>
   1ce56:	f007 fafb 	bl	24450 <abort>
  TFLITE_DCHECK(context != nullptr);
   1ce5a:	2a00      	cmp	r2, #0
   1ce5c:	d0fb      	beq.n	1ce56 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x12>
  if (model_is_allocating_) {
   1ce5e:	7b03      	ldrb	r3, [r0, #12]
   1ce60:	b133      	cbz	r3, 1ce70 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1ce62:	491b      	ldr	r1, [pc, #108]	; (1ced0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x8c>)
   1ce64:	6880      	ldr	r0, [r0, #8]
   1ce66:	f006 fb83 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   1ce6a:	2001      	movs	r0, #1
}
   1ce6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  const SubGraph* subgraph = GetSubGraphFromModel(model);
   1ce70:	f7ff ffcc 	bl	1ce0c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
  TFLITE_DCHECK(subgraph != nullptr);
   1ce74:	4605      	mov	r5, r0
   1ce76:	2800      	cmp	r0, #0
   1ce78:	d0ed      	beq.n	1ce56 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x12>
  model_is_allocating_ = true;
   1ce7a:	2301      	movs	r3, #1
   1ce7c:	7323      	strb	r3, [r4, #12]
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
   1ce7e:	6823      	ldr	r3, [r4, #0]
   1ce80:	4602      	mov	r2, r0
   1ce82:	4649      	mov	r1, r9
   1ce84:	4620      	mov	r0, r4
   1ce86:	689b      	ldr	r3, [r3, #8]
   1ce88:	4798      	blx	r3
   1ce8a:	2800      	cmp	r0, #0
   1ce8c:	d1ee      	bne.n	1ce6c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x28>
  TF_LITE_ENSURE_STATUS(
   1ce8e:	6823      	ldr	r3, [r4, #0]
   1ce90:	464a      	mov	r2, r9
   1ce92:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   1ce96:	4631      	mov	r1, r6
   1ce98:	462b      	mov	r3, r5
   1ce9a:	4620      	mov	r0, r4
   1ce9c:	47d0      	blx	sl
   1ce9e:	2800      	cmp	r0, #0
   1cea0:	d1e4      	bne.n	1ce6c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x28>
  TF_LITE_ENSURE_STATUS(
   1cea2:	6823      	ldr	r3, [r4, #0]
   1cea4:	4642      	mov	r2, r8
   1cea6:	4629      	mov	r1, r5
   1cea8:	4620      	mov	r0, r4
   1ceaa:	691b      	ldr	r3, [r3, #16]
   1ceac:	4798      	blx	r3
   1ceae:	2800      	cmp	r0, #0
   1ceb0:	d1dc      	bne.n	1ce6c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x28>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
   1ceb2:	f8d8 2000 	ldr.w	r2, [r8]
   1ceb6:	6823      	ldr	r3, [r4, #0]
   1ceb8:	9208      	str	r2, [sp, #32]
   1ceba:	f8d3 e014 	ldr.w	lr, [r3, #20]
   1cebe:	462a      	mov	r2, r5
   1cec0:	463b      	mov	r3, r7
   1cec2:	4631      	mov	r1, r6
   1cec4:	4620      	mov	r0, r4
   1cec6:	46f4      	mov	ip, lr
}
   1cec8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
   1cecc:	4760      	bx	ip
   1cece:	bf00      	nop
   1ced0:	0002bfed 	.word	0x0002bfed

0001ced4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>:
  if (!model_is_allocating_) {
   1ced4:	7b03      	ldrb	r3, [r0, #12]
                                                   TfLiteContext* context) {
   1ced6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ceda:	4604      	mov	r4, r0
   1cedc:	460f      	mov	r7, r1
   1cede:	4616      	mov	r6, r2
  if (!model_is_allocating_) {
   1cee0:	b933      	cbnz	r3, 1cef0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x1c>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1cee2:	4910      	ldr	r1, [pc, #64]	; (1cf24 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x50>)
   1cee4:	6880      	ldr	r0, [r0, #8]
   1cee6:	f006 fb43 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   1ceea:	2001      	movs	r0, #1
}
   1ceec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  const SubGraph* subgraph = GetSubGraphFromModel(model);
   1cef0:	f7ff ff8c 	bl	1ce0c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
  TFLITE_DCHECK(subgraph != nullptr);
   1cef4:	4605      	mov	r5, r0
   1cef6:	b908      	cbnz	r0, 1cefc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x28>
   1cef8:	f007 faaa 	bl	24450 <abort>
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, context, subgraph));
   1cefc:	6823      	ldr	r3, [r4, #0]
   1cefe:	4632      	mov	r2, r6
   1cf00:	f8d3 801c 	ldr.w	r8, [r3, #28]
   1cf04:	4639      	mov	r1, r7
   1cf06:	4603      	mov	r3, r0
   1cf08:	4620      	mov	r0, r4
   1cf0a:	47c0      	blx	r8
   1cf0c:	2800      	cmp	r0, #0
   1cf0e:	d1ed      	bne.n	1ceec <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
  TF_LITE_ENSURE_STATUS(AllocateVariables(context, subgraph));
   1cf10:	6823      	ldr	r3, [r4, #0]
   1cf12:	462a      	mov	r2, r5
   1cf14:	4631      	mov	r1, r6
   1cf16:	4620      	mov	r0, r4
   1cf18:	699b      	ldr	r3, [r3, #24]
   1cf1a:	4798      	blx	r3
   1cf1c:	2800      	cmp	r0, #0
   1cf1e:	d1e5      	bne.n	1ceec <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
  model_is_allocating_ = false;
   1cf20:	7320      	strb	r0, [r4, #12]
  return kTfLiteOk;
   1cf22:	e7e3      	b.n	1ceec <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
   1cf24:	0002c042 	.word	0x0002c042

0001cf28 <_ZNK11flatbuffers6VectorIxE3GetEj>:
  return_type Get(uoffset_t i) const {
   1cf28:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   1cf2a:	6803      	ldr	r3, [r0, #0]
   1cf2c:	4299      	cmp	r1, r3
   1cf2e:	d306      	bcc.n	1cf3e <_ZNK11flatbuffers6VectorIxE3GetEj+0x16>
   1cf30:	f240 1101 	movw	r1, #257	; 0x101
   1cf34:	4b04      	ldr	r3, [pc, #16]	; (1cf48 <_ZNK11flatbuffers6VectorIxE3GetEj+0x20>)
   1cf36:	4a05      	ldr	r2, [pc, #20]	; (1cf4c <_ZNK11flatbuffers6VectorIxE3GetEj+0x24>)
   1cf38:	4805      	ldr	r0, [pc, #20]	; (1cf50 <_ZNK11flatbuffers6VectorIxE3GetEj+0x28>)
   1cf3a:	f003 fea5 	bl	20c88 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   1cf3e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  }
   1cf42:	e9d1 0101 	ldrd	r0, r1, [r1, #4]
   1cf46:	bd08      	pop	{r3, pc}
   1cf48:	0002b03e 	.word	0x0002b03e
   1cf4c:	0002c08d 	.word	0x0002c08d
   1cf50:	0002b108 	.word	0x0002b108

0001cf54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
   1cf54:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   1cf56:	6803      	ldr	r3, [r0, #0]
   1cf58:	4299      	cmp	r1, r3
   1cf5a:	d306      	bcc.n	1cf6a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x16>
   1cf5c:	f240 1101 	movw	r1, #257	; 0x101
   1cf60:	4b05      	ldr	r3, [pc, #20]	; (1cf78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x24>)
   1cf62:	4a06      	ldr	r2, [pc, #24]	; (1cf7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x28>)
   1cf64:	4806      	ldr	r0, [pc, #24]	; (1cf80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x2c>)
   1cf66:	f003 fe8f 	bl	20c88 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   1cf6a:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
   1cf6c:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   1cf70:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
   1cf74:	4410      	add	r0, r2
   1cf76:	bd08      	pop	{r3, pc}
   1cf78:	0002b03e 	.word	0x0002b03e
   1cf7c:	0002c160 	.word	0x0002c160
   1cf80:	0002b108 	.word	0x0002b108

0001cf84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
   1cf84:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   1cf86:	6803      	ldr	r3, [r0, #0]
   1cf88:	4299      	cmp	r1, r3
   1cf8a:	d306      	bcc.n	1cf9a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x16>
   1cf8c:	f240 1101 	movw	r1, #257	; 0x101
   1cf90:	4b05      	ldr	r3, [pc, #20]	; (1cfa8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x24>)
   1cf92:	4a06      	ldr	r2, [pc, #24]	; (1cfac <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x28>)
   1cf94:	4806      	ldr	r0, [pc, #24]	; (1cfb0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x2c>)
   1cf96:	f003 fe77 	bl	20c88 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   1cf9a:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
   1cf9c:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   1cfa0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
   1cfa4:	4410      	add	r0, r2
   1cfa6:	bd08      	pop	{r3, pc}
   1cfa8:	0002b03e 	.word	0x0002b03e
   1cfac:	0002c251 	.word	0x0002c251
   1cfb0:	0002b108 	.word	0x0002b108

0001cfb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
   1cfb4:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   1cfb6:	6803      	ldr	r3, [r0, #0]
   1cfb8:	4299      	cmp	r1, r3
   1cfba:	d306      	bcc.n	1cfca <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x16>
   1cfbc:	f240 1101 	movw	r1, #257	; 0x101
   1cfc0:	4b05      	ldr	r3, [pc, #20]	; (1cfd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x24>)
   1cfc2:	4a06      	ldr	r2, [pc, #24]	; (1cfdc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x28>)
   1cfc4:	4806      	ldr	r0, [pc, #24]	; (1cfe0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x2c>)
   1cfc6:	f003 fe5f 	bl	20c88 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   1cfca:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
   1cfcc:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   1cfd0:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
   1cfd4:	4410      	add	r0, r2
   1cfd6:	bd08      	pop	{r3, pc}
   1cfd8:	0002b03e 	.word	0x0002b03e
   1cfdc:	0002c346 	.word	0x0002c346
   1cfe0:	0002b108 	.word	0x0002b108

0001cfe4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
   1cfe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cfe8:	460d      	mov	r5, r1
   1cfea:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  *result = {};
   1cfec:	2100      	movs	r1, #0
    ErrorReporter* error_reporter, TfLiteTensor* result) {
   1cfee:	4607      	mov	r7, r0
   1cff0:	4691      	mov	r9, r2
  *result = {};
   1cff2:	4620      	mov	r0, r4
   1cff4:	2240      	movs	r2, #64	; 0x40
    ErrorReporter* error_reporter, TfLiteTensor* result) {
   1cff6:	4698      	mov	r8, r3
  *result = {};
   1cff8:	f007 fa74 	bl	244e4 <memset>
    auto field_offset = GetOptionalFieldOffset(field);
   1cffc:	2106      	movs	r1, #6
   1cffe:	4628      	mov	r0, r5
   1d000:	f005 fc16 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1d004:	b100      	cbz	r0, 1d008 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24>
   1d006:	5628      	ldrsb	r0, [r5, r0]
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
   1d008:	4642      	mov	r2, r8
   1d00a:	4621      	mov	r1, r4
   1d00c:	b2c0      	uxtb	r0, r0
   1d00e:	f7ff fae7 	bl	1c5e0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   1d012:	4606      	mov	r6, r0
   1d014:	2800      	cmp	r0, #0
   1d016:	d161      	bne.n	1d0dc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
  result->is_variable = flatbuffer_tensor.is_variable();
   1d018:	4628      	mov	r0, r5
   1d01a:	f006 fba0 	bl	2375e <_ZNK6tflite6Tensor11is_variableEv>
    auto field_offset = GetOptionalFieldOffset(field);
   1d01e:	2108      	movs	r1, #8
   1d020:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
   1d024:	4628      	mov	r0, r5
   1d026:	f005 fc03 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1d02a:	2800      	cmp	r0, #0
   1d02c:	d05a      	beq.n	1d0e4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x100>
   1d02e:	5829      	ldr	r1, [r5, r0]
  return_type operator[](uoffset_t i) const { return Get(i); }
   1d030:	4648      	mov	r0, r9
   1d032:	f7ff ffbf 	bl	1cfb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
   1d036:	b148      	cbz	r0, 1d04c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1d038:	2104      	movs	r1, #4
   1d03a:	f006 fb9b 	bl	23774 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
    if (auto* array = buffer->data()) {
   1d03e:	b128      	cbz	r0, 1d04c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
      if (array->size()) {
   1d040:	6803      	ldr	r3, [r0, #0]
   1d042:	b11b      	cbz	r3, 1d04c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
        result->allocation_type = kTfLiteMmapRo;
   1d044:	2301      	movs	r3, #1
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   1d046:	3004      	adds	r0, #4
        result->data.data =
   1d048:	6060      	str	r0, [r4, #4]
        result->allocation_type = kTfLiteMmapRo;
   1d04a:	7523      	strb	r3, [r4, #20]
  if (result->data.data == nullptr) {
   1d04c:	6863      	ldr	r3, [r4, #4]
   1d04e:	b90b      	cbnz	r3, 1d054 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x70>
    result->allocation_type = kTfLiteArenaRw;
   1d050:	2302      	movs	r3, #2
   1d052:	7523      	strb	r3, [r4, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
   1d054:	4643      	mov	r3, r8
   1d056:	4628      	mov	r0, r5
   1d058:	aa01      	add	r2, sp, #4
   1d05a:	f104 0118 	add.w	r1, r4, #24
   1d05e:	f006 fd48 	bl	23af2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
   1d062:	4606      	mov	r6, r0
   1d064:	2800      	cmp	r0, #0
   1d066:	d139      	bne.n	1d0dc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1d068:	2104      	movs	r1, #4
   1d06a:	4628      	mov	r0, r5
   1d06c:	f005 fc16 	bl	2289c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  if (flatbuffer_tensor.shape() == nullptr) {
   1d070:	2800      	cmp	r0, #0
   1d072:	d139      	bne.n	1d0e8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
   1d074:	4b3c      	ldr	r3, [pc, #240]	; (1d168 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x184>)
   1d076:	60a3      	str	r3, [r4, #8]
    auto field_offset = GetOptionalFieldOffset(field);
   1d078:	210c      	movs	r1, #12
   1d07a:	4628      	mov	r0, r5
   1d07c:	f005 fbd8 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d080:	b360      	cbz	r0, 1d0dc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    auto p = data_ + field_offset;
   1d082:	182a      	adds	r2, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d084:	582d      	ldr	r5, [r5, r0]
      src_quantization->zero_point() &&
   1d086:	1955      	adds	r5, r2, r5
   1d088:	d028      	beq.n	1d0dc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
  if (src_quantization && src_quantization->scale() &&
   1d08a:	4628      	mov	r0, r5
   1d08c:	f006 fb53 	bl	23736 <_ZNK6tflite22QuantizationParameters5scaleEv>
   1d090:	4681      	mov	r9, r0
   1d092:	b318      	cbz	r0, 1d0dc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
   1d094:	6803      	ldr	r3, [r0, #0]
   1d096:	b30b      	cbz	r3, 1d0dc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
      src_quantization->zero_point() &&
   1d098:	4628      	mov	r0, r5
   1d09a:	f006 fb56 	bl	2374a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
      (src_quantization->scale()->size() > 0) &&
   1d09e:	b1e8      	cbz	r0, 1d0dc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
      src_quantization->zero_point() &&
   1d0a0:	6803      	ldr	r3, [r0, #0]
   1d0a2:	b1db      	cbz	r3, 1d0dc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   1d0a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
   1d0a8:	4628      	mov	r0, r5
    result->params.scale = src_quantization->scale()->Get(0);
   1d0aa:	60e3      	str	r3, [r4, #12]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
   1d0ac:	f006 fb4d 	bl	2374a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
   1d0b0:	2100      	movs	r1, #0
   1d0b2:	f7ff ff39 	bl	1cf28 <_ZNK11flatbuffers6VectorIxE3GetEj>
    result->params.zero_point =
   1d0b6:	6120      	str	r0, [r4, #16]
    int channels = src_quantization->scale()->size();
   1d0b8:	4628      	mov	r0, r5
   1d0ba:	f006 fb3c 	bl	23736 <_ZNK6tflite22QuantizationParameters5scaleEv>
                                        alignof(TfLiteAffineQuantization)));
   1d0be:	683b      	ldr	r3, [r7, #0]
    int channels = src_quantization->scale()->size();
   1d0c0:	f8d0 a000 	ldr.w	sl, [r0]
            allocator->AllocateFromTail(sizeof(TfLiteAffineQuantization),
   1d0c4:	2204      	movs	r2, #4
   1d0c6:	210c      	movs	r1, #12
   1d0c8:	4638      	mov	r0, r7
   1d0ca:	68db      	ldr	r3, [r3, #12]
   1d0cc:	4798      	blx	r3
    if (quantization == nullptr) {
   1d0ce:	4681      	mov	r9, r0
   1d0d0:	b988      	cbnz	r0, 1d0f6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x112>
      TF_LITE_REPORT_ERROR(error_reporter,
   1d0d2:	4926      	ldr	r1, [pc, #152]	; (1d16c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x188>)
      TF_LITE_REPORT_ERROR(error_reporter,
   1d0d4:	4640      	mov	r0, r8
   1d0d6:	f006 fa4b 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   1d0da:	2601      	movs	r6, #1
}
   1d0dc:	4630      	mov	r0, r6
   1d0de:	b003      	add	sp, #12
   1d0e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1d0e4:	4601      	mov	r1, r0
   1d0e6:	e7a3      	b.n	1d030 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4c>
  TFLITE_DCHECK(error_reporter != nullptr);
   1d0e8:	f1b8 0f00 	cmp.w	r8, #0
   1d0ec:	d101      	bne.n	1d0f2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10e>
   1d0ee:	f007 f9af 	bl	24450 <abort>
    *result = const_cast<kTfLiteArrayType*>(
   1d0f2:	60a0      	str	r0, [r4, #8]
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
   1d0f4:	e7c0      	b.n	1d078 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x94>
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
   1d0f6:	683b      	ldr	r3, [r7, #0]
   1d0f8:	4650      	mov	r0, sl
   1d0fa:	f8d3 b00c 	ldr.w	fp, [r3, #12]
   1d0fe:	f7f1 fefd 	bl	eefc <TfLiteIntArrayGetSizeInBytes>
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
   1d102:	2204      	movs	r2, #4
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
   1d104:	4601      	mov	r1, r0
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
   1d106:	4638      	mov	r0, r7
   1d108:	47d8      	blx	fp
   1d10a:	4607      	mov	r7, r0
    quantization->zero_point =
   1d10c:	f8c9 0004 	str.w	r0, [r9, #4]
    if (quantization->zero_point == nullptr) {
   1d110:	b908      	cbnz	r0, 1d116 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x132>
      TF_LITE_REPORT_ERROR(error_reporter,
   1d112:	4917      	ldr	r1, [pc, #92]	; (1d170 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x18c>)
   1d114:	e7de      	b.n	1d0d4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
   1d116:	4628      	mov	r0, r5
   1d118:	f006 fb0d 	bl	23736 <_ZNK6tflite22QuantizationParameters5scaleEv>
  TFLITE_DCHECK(error_reporter != nullptr);
   1d11c:	f1b8 0f00 	cmp.w	r8, #0
   1d120:	d0e5      	beq.n	1d0ee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10a>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   1d122:	2800      	cmp	r0, #0
   1d124:	d0e3      	beq.n	1d0ee <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10a>
    for (int i = 0; i < channels; i++) {
   1d126:	f04f 0800 	mov.w	r8, #0
    *result = const_cast<kTfLiteArrayType*>(
   1d12a:	f8c9 0000 	str.w	r0, [r9]
    quantization->zero_point->size = channels;
   1d12e:	f8c7 a000 	str.w	sl, [r7]
    for (int i = 0; i < channels; i++) {
   1d132:	45c2      	cmp	sl, r8
   1d134:	dd0a      	ble.n	1d14c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x168>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
   1d136:	4628      	mov	r0, r5
   1d138:	f006 fb07 	bl	2374a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
   1d13c:	4641      	mov	r1, r8
   1d13e:	f7ff fef3 	bl	1cf28 <_ZNK11flatbuffers6VectorIxE3GetEj>
    for (int i = 0; i < channels; i++) {
   1d142:	f108 0801 	add.w	r8, r8, #1
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
   1d146:	f847 0f04 	str.w	r0, [r7, #4]!
    for (int i = 0; i < channels; i++) {
   1d14a:	e7f2      	b.n	1d132 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x14e>
    auto field_offset = GetOptionalFieldOffset(field);
   1d14c:	2110      	movs	r1, #16
   1d14e:	4628      	mov	r0, r5
   1d150:	f005 fb6e 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1d154:	b100      	cbz	r0, 1d158 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x174>
   1d156:	5828      	ldr	r0, [r5, r0]
    result->quantization = {kTfLiteAffineQuantization, quantization};
   1d158:	2301      	movs	r3, #1
    quantization->quantized_dimension = src_quantization->quantized_dimension();
   1d15a:	f8c9 0008 	str.w	r0, [r9, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
   1d15e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   1d162:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   1d166:	e7b9      	b.n	1d0dc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
   1d168:	0002a788 	.word	0x0002a788
   1d16c:	0002c437 	.word	0x0002c437
   1d170:	0002c465 	.word	0x0002c465

0001d174 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
   1d174:	e92d 4fe3 	stmdb	sp!, {r0, r1, r5, r6, r7, r8, r9, sl, fp, lr}
   1d178:	4606      	mov	r6, r0
   1d17a:	460f      	mov	r7, r1
   1d17c:	4690      	mov	r8, r2
   1d17e:	4699      	mov	r9, r3
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
   1d180:	2500      	movs	r5, #0
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1d182:	2104      	movs	r1, #4
   1d184:	4648      	mov	r0, r9
   1d186:	f006 fafe 	bl	23786 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
   1d18a:	6803      	ldr	r3, [r0, #0]
   1d18c:	429d      	cmp	r5, r3
   1d18e:	d224      	bcs.n	1d1da <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x66>
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
   1d190:	4629      	mov	r1, r5
   1d192:	f7ff fedf 	bl	1cf54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    auto field_offset = GetOptionalFieldOffset(field);
   1d196:	210c      	movs	r1, #12
   1d198:	4682      	mov	sl, r0
   1d19a:	4638      	mov	r0, r7
   1d19c:	f005 fb48 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
   1d1a0:	f8d6 b004 	ldr.w	fp, [r6, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d1a4:	4602      	mov	r2, r0
   1d1a6:	b110      	cbz	r0, 1d1ae <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3a>
   1d1a8:	58ba      	ldr	r2, [r7, r2]
    auto p = data_ + field_offset;
   1d1aa:	1838      	adds	r0, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d1ac:	4402      	add	r2, r0
   1d1ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1d1b2:	4651      	mov	r1, sl
   1d1b4:	eb03 1385 	add.w	r3, r3, r5, lsl #6
   1d1b8:	9300      	str	r3, [sp, #0]
   1d1ba:	4658      	mov	r0, fp
   1d1bc:	68b3      	ldr	r3, [r6, #8]
   1d1be:	f7ff ff11 	bl	1cfe4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
    if (status != kTfLiteOk) {
   1d1c2:	b140      	cbz	r0, 1d1d6 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x62>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
   1d1c4:	462a      	mov	r2, r5
   1d1c6:	4906      	ldr	r1, [pc, #24]	; (1d1e0 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6c>)
   1d1c8:	68b0      	ldr	r0, [r6, #8]
   1d1ca:	f006 f9d1 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   1d1ce:	2001      	movs	r0, #1
}
   1d1d0:	b002      	add	sp, #8
   1d1d2:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
   1d1d6:	3501      	adds	r5, #1
   1d1d8:	e7d3      	b.n	1d182 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xe>
  return kTfLiteOk;
   1d1da:	2000      	movs	r0, #0
   1d1dc:	e7f8      	b.n	1d1d0 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5c>
   1d1de:	bf00      	nop
   1d1e0:	0002c493 	.word	0x0002c493

0001d1e4 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE>:
                                               const SubGraph* subgraph) {
   1d1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d1e8:	4606      	mov	r6, r0
   1d1ea:	460c      	mov	r4, r1
   1d1ec:	4691      	mov	r9, r2
  for (size_t i = 0; i < context->tensors_size; ++i) {
   1d1ee:	2500      	movs	r5, #0
   1d1f0:	6823      	ldr	r3, [r4, #0]
   1d1f2:	42ab      	cmp	r3, r5
   1d1f4:	d926      	bls.n	1d244 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x60>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1d1f6:	2104      	movs	r1, #4
   1d1f8:	4648      	mov	r0, r9
   1d1fa:	f006 fac4 	bl	23786 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
    if (subgraph->tensors()->Get(i)->is_variable()) {
   1d1fe:	4629      	mov	r1, r5
   1d200:	f7ff fea8 	bl	1cf54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
   1d204:	f006 faab 	bl	2375e <_ZNK6tflite6Tensor11is_variableEv>
   1d208:	ea4f 1885 	mov.w	r8, r5, lsl #6
   1d20c:	b1a0      	cbz	r0, 1d238 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x54>
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
   1d20e:	6870      	ldr	r0, [r6, #4]
   1d210:	68a7      	ldr	r7, [r4, #8]
          context->tensors[i].bytes, kBufferAlignment);
   1d212:	6803      	ldr	r3, [r0, #0]
   1d214:	4447      	add	r7, r8
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
   1d216:	2210      	movs	r2, #16
   1d218:	68db      	ldr	r3, [r3, #12]
   1d21a:	69b9      	ldr	r1, [r7, #24]
   1d21c:	4798      	blx	r3
      if (context->tensors[i].data.data == nullptr) {
   1d21e:	68a3      	ldr	r3, [r4, #8]
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
   1d220:	6078      	str	r0, [r7, #4]
      if (context->tensors[i].data.data == nullptr) {
   1d222:	4443      	add	r3, r8
   1d224:	685a      	ldr	r2, [r3, #4]
   1d226:	b93a      	cbnz	r2, 1d238 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x54>
        TF_LITE_REPORT_ERROR(error_reporter_,
   1d228:	699a      	ldr	r2, [r3, #24]
   1d22a:	4907      	ldr	r1, [pc, #28]	; (1d248 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x64>)
   1d22c:	68b0      	ldr	r0, [r6, #8]
   1d22e:	f006 f99f 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   1d232:	2001      	movs	r0, #1
}
   1d234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    tflite::ResetVariableTensor(&(context->tensors[i]));
   1d238:	68a0      	ldr	r0, [r4, #8]
  for (size_t i = 0; i < context->tensors_size; ++i) {
   1d23a:	3501      	adds	r5, #1
    tflite::ResetVariableTensor(&(context->tensors[i]));
   1d23c:	4440      	add	r0, r8
   1d23e:	f006 f9fe 	bl	2363e <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>
  for (size_t i = 0; i < context->tensors_size; ++i) {
   1d242:	e7d5      	b.n	1d1f0 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xc>
  return kTfLiteOk;
   1d244:	2000      	movs	r0, #0
   1d246:	e7f5      	b.n	1d234 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x50>
   1d248:	0002c4b2 	.word	0x0002c4b2

0001d24c <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE>:
    TfLiteContext* context, const SubGraph* subgraph) {
   1d24c:	b538      	push	{r3, r4, r5, lr}
   1d24e:	460c      	mov	r4, r1
   1d250:	4605      	mov	r5, r0
   1d252:	2104      	movs	r1, #4
   1d254:	4610      	mov	r0, r2
   1d256:	f006 fa96 	bl	23786 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
  context->tensors_size = subgraph->tensors()->size();
   1d25a:	6801      	ldr	r1, [r0, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   1d25c:	6868      	ldr	r0, [r5, #4]
  context->tensors_size = subgraph->tensors()->size();
   1d25e:	6021      	str	r1, [r4, #0]
          sizeof(TfLiteTensor) * context->tensors_size, alignof(TfLiteTensor)));
   1d260:	6803      	ldr	r3, [r0, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   1d262:	2204      	movs	r2, #4
   1d264:	68db      	ldr	r3, [r3, #12]
   1d266:	0189      	lsls	r1, r1, #6
   1d268:	4798      	blx	r3
  context->tensors =
   1d26a:	60a0      	str	r0, [r4, #8]
  if (context->tensors == nullptr) {
   1d26c:	b938      	cbnz	r0, 1d27e <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x32>
    TF_LITE_REPORT_ERROR(
   1d26e:	6822      	ldr	r2, [r4, #0]
   1d270:	4904      	ldr	r1, [pc, #16]	; (1d284 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x38>)
   1d272:	68a8      	ldr	r0, [r5, #8]
   1d274:	0192      	lsls	r2, r2, #6
   1d276:	f006 f97b 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   1d27a:	2001      	movs	r0, #1
}
   1d27c:	bd38      	pop	{r3, r4, r5, pc}
  return kTfLiteOk;
   1d27e:	2000      	movs	r0, #0
   1d280:	e7fc      	b.n	1d27c <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x30>
   1d282:	bf00      	nop
   1d284:	0002c4e0 	.word	0x0002c4e0

0001d288 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:
    NodeAndRegistration* node_and_registrations) {
   1d288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d28c:	460c      	mov	r4, r1
   1d28e:	ed2d 8b02 	vpush	{d8}
   1d292:	4605      	mov	r5, r0
   1d294:	b087      	sub	sp, #28
    auto field_offset = GetOptionalFieldOffset(field);
   1d296:	2106      	movs	r1, #6
   1d298:	4620      	mov	r0, r4
   1d29a:	ee08 2a90 	vmov	s17, r2
   1d29e:	4698      	mov	r8, r3
   1d2a0:	f005 fac6 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d2a4:	b340      	cbz	r0, 1d2f8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x70>
    auto p = data_ + field_offset;
   1d2a6:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d2a8:	5820      	ldr	r0, [r4, r0]
   1d2aa:	4403      	add	r3, r0
   1d2ac:	9301      	str	r3, [sp, #4]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
   1d2ae:	f04f 0b00 	mov.w	fp, #0
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
   1d2b2:	686b      	ldr	r3, [r5, #4]
      : memory_allocator_(memory_allocator) {}
   1d2b4:	4a5d      	ldr	r2, [pc, #372]	; (1d42c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1a4>)
   1d2b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1d2b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1d2bc:	210a      	movs	r1, #10
   1d2be:	ee18 0a90 	vmov	r0, s17
   1d2c2:	f005 faf4 	bl	228ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
   1d2c6:	6803      	ldr	r3, [r0, #0]
   1d2c8:	459b      	cmp	fp, r3
   1d2ca:	f080 80ab 	bcs.w	1d424 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x19c>
    const auto* op = subgraph->operators()->Get(i);
   1d2ce:	4659      	mov	r1, fp
   1d2d0:	f7ff fe58 	bl	1cf84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>
    auto field_offset = GetOptionalFieldOffset(field);
   1d2d4:	2104      	movs	r1, #4
   1d2d6:	4607      	mov	r7, r0
   1d2d8:	f005 faaa 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1d2dc:	b170      	cbz	r0, 1d2fc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x74>
   1d2de:	583e      	ldr	r6, [r7, r0]
    if (index >= opcodes->size()) {
   1d2e0:	9b01      	ldr	r3, [sp, #4]
   1d2e2:	68a8      	ldr	r0, [r5, #8]
   1d2e4:	681b      	ldr	r3, [r3, #0]
   1d2e6:	42b3      	cmp	r3, r6
   1d2e8:	d80a      	bhi.n	1d300 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x78>
      TF_LITE_REPORT_ERROR(error_reporter_,
   1d2ea:	4632      	mov	r2, r6
   1d2ec:	4950      	ldr	r1, [pc, #320]	; (1d430 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1a8>)
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
   1d2ee:	f006 f93f 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   1d2f2:	f04f 0a01 	mov.w	sl, #1
   1d2f6:	e028      	b.n	1d34a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d2f8:	9001      	str	r0, [sp, #4]
   1d2fa:	e7d8      	b.n	1d2ae <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1d2fc:	4606      	mov	r6, r0
   1d2fe:	e7ef      	b.n	1d2e0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x58>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   1d300:	9b01      	ldr	r3, [sp, #4]
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
   1d302:	4602      	mov	r2, r0
   1d304:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
   1d306:	eb03 0986 	add.w	r9, r3, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   1d30a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   1d30e:	4641      	mov	r1, r8
   1d310:	4499      	add	r9, r3
   1d312:	4648      	mov	r0, r9
   1d314:	f104 0324 	add.w	r3, r4, #36	; 0x24
   1d318:	f000 fbb0 	bl	1da7c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
                                  &(node_and_registrations[i].registration));
   1d31c:	ee08 4a10 	vmov	s16, r4
    if (status != kTfLiteOk) {
   1d320:	4682      	mov	sl, r0
   1d322:	b1c0      	cbz	r0, 1d356 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xce>
    auto field_offset = GetOptionalFieldOffset(field);
   1d324:	2104      	movs	r1, #4
   1d326:	4648      	mov	r0, r9
      TF_LITE_REPORT_ERROR(error_reporter_,
   1d328:	68ac      	ldr	r4, [r5, #8]
   1d32a:	f005 fa81 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1d32e:	b108      	cbz	r0, 1d334 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xac>
   1d330:	f919 0000 	ldrsb.w	r0, [r9, r0]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
   1d334:	b2c0      	uxtb	r0, r0
  return (v < low) || (high < v);
   1d336:	287e      	cmp	r0, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
   1d338:	bf96      	itet	ls
   1d33a:	4b3e      	ldrls	r3, [pc, #248]	; (1d434 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
   1d33c:	4a3e      	ldrhi	r2, [pc, #248]	; (1d438 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
  return EnumNamesBuiltinOperator()[index];
   1d33e:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
   1d342:	493e      	ldr	r1, [pc, #248]	; (1d43c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b4>)
   1d344:	4620      	mov	r0, r4
   1d346:	f006 f913 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
}
   1d34a:	4650      	mov	r0, sl
   1d34c:	b007      	add	sp, #28
   1d34e:	ecbd 8b02 	vpop	{d8}
   1d352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const auto* registration = node_and_registrations[i].registration;
   1d356:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (registration == nullptr) {
   1d358:	b91b      	cbnz	r3, 1d362 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xda>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
   1d35a:	4632      	mov	r2, r6
   1d35c:	4938      	ldr	r1, [pc, #224]	; (1d440 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b8>)
   1d35e:	68a8      	ldr	r0, [r5, #8]
   1d360:	e7c5      	b.n	1d2ee <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
    BuiltinOperator op_type =
   1d362:	f893 9014 	ldrb.w	r9, [r3, #20]
    unsigned char* builtin_data = nullptr;
   1d366:	9003      	str	r0, [sp, #12]
    if (op_type == BuiltinOperator_CUSTOM) {
   1d368:	f1b9 0f20 	cmp.w	r9, #32
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1d36c:	f04f 010e 	mov.w	r1, #14
   1d370:	4638      	mov	r0, r7
   1d372:	d113      	bne.n	1d39c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x114>
   1d374:	f006 f9fe 	bl	23774 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
      if (op->custom_options() != nullptr) {
   1d378:	b960      	cbnz	r0, 1d394 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10c>
    size_t custom_data_size = 0;
   1d37a:	f04f 0a00 	mov.w	sl, #0
    const char* custom_data = nullptr;
   1d37e:	4656      	mov	r6, sl
   1d380:	2106      	movs	r1, #6
   1d382:	4638      	mov	r0, r7
   1d384:	f005 fa8a 	bl	2289c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  TFLITE_DCHECK(error_reporter != nullptr);
   1d388:	68ab      	ldr	r3, [r5, #8]
   1d38a:	4681      	mov	r9, r0
   1d38c:	2b00      	cmp	r3, #0
   1d38e:	d12f      	bne.n	1d3f0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x168>
   1d390:	f007 f85e 	bl	24450 <abort>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   1d394:	4606      	mov	r6, r0
        custom_data_size = op->custom_options()->size();
   1d396:	f856 ab04 	ldr.w	sl, [r6], #4
   1d39a:	e7f1      	b.n	1d380 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xf8>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1d39c:	f006 f9ea 	bl	23774 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
      if (op->custom_options() != nullptr) {
   1d3a0:	b150      	cbz	r0, 1d3b8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x130>
  return (v < low) || (high < v);
   1d3a2:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
   1d3a6:	bf98      	it	ls
   1d3a8:	4b22      	ldrls	r3, [pc, #136]	; (1d434 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
        TF_LITE_REPORT_ERROR(
   1d3aa:	68a8      	ldr	r0, [r5, #8]
   1d3ac:	bf94      	ite	ls
   1d3ae:	f853 2029 	ldrls.w	r2, [r3, r9, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
   1d3b2:	4a21      	ldrhi	r2, [pc, #132]	; (1d438 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
   1d3b4:	4923      	ldr	r1, [pc, #140]	; (1d444 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1bc>)
   1d3b6:	e79a      	b.n	1d2ee <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
          op_resolver.GetOpDataParser(op_type);
   1d3b8:	f8d8 3000 	ldr.w	r3, [r8]
   1d3bc:	4649      	mov	r1, r9
   1d3be:	4640      	mov	r0, r8
   1d3c0:	699b      	ldr	r3, [r3, #24]
   1d3c2:	4798      	blx	r3
      if (parser == nullptr) {
   1d3c4:	4606      	mov	r6, r0
   1d3c6:	b950      	cbnz	r0, 1d3de <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x156>
   1d3c8:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
   1d3cc:	bf98      	it	ls
   1d3ce:	4b19      	ldrls	r3, [pc, #100]	; (1d434 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
   1d3d0:	68a8      	ldr	r0, [r5, #8]
   1d3d2:	bf94      	ite	ls
   1d3d4:	f853 2029 	ldrls.w	r2, [r3, r9, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
   1d3d8:	4a17      	ldrhi	r2, [pc, #92]	; (1d438 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
   1d3da:	491b      	ldr	r1, [pc, #108]	; (1d448 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1c0>)
   1d3dc:	e787      	b.n	1d2ee <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
   1d3de:	4638      	mov	r0, r7
   1d3e0:	68a9      	ldr	r1, [r5, #8]
   1d3e2:	ab03      	add	r3, sp, #12
   1d3e4:	aa04      	add	r2, sp, #16
   1d3e6:	47b0      	blx	r6
   1d3e8:	4682      	mov	sl, r0
   1d3ea:	2800      	cmp	r0, #0
   1d3ec:	d0c5      	beq.n	1d37a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xf2>
   1d3ee:	e7ac      	b.n	1d34a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   1d3f0:	2800      	cmp	r0, #0
   1d3f2:	d0cd      	beq.n	1d390 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x108>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1d3f4:	4638      	mov	r0, r7
   1d3f6:	2108      	movs	r1, #8
   1d3f8:	f005 fa50 	bl	2289c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   1d3fc:	3428      	adds	r4, #40	; 0x28
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   1d3fe:	4607      	mov	r7, r0
   1d400:	2800      	cmp	r0, #0
   1d402:	d0c5      	beq.n	1d390 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x108>
    *node = {};
   1d404:	2224      	movs	r2, #36	; 0x24
   1d406:	2100      	movs	r1, #0
   1d408:	ee18 0a10 	vmov	r0, s16
   1d40c:	f007 f86a 	bl	244e4 <memset>
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
   1d410:	9b03      	ldr	r3, [sp, #12]
    node->outputs = outputs_array;
   1d412:	e944 970a 	strd	r9, r7, [r4, #-40]	; 0x28
    node->custom_initial_data = custom_data;
   1d416:	e944 3605 	strd	r3, r6, [r4, #-20]
    node->custom_initial_data_size = custom_data_size;
   1d41a:	f844 ac0c 	str.w	sl, [r4, #-12]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
   1d41e:	f10b 0b01 	add.w	fp, fp, #1
   1d422:	e74b      	b.n	1d2bc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x34>
  return kTfLiteOk;
   1d424:	f04f 0a00 	mov.w	sl, #0
   1d428:	e78f      	b.n	1d34a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
   1d42a:	bf00      	nop
   1d42c:	0002a794 	.word	0x0002a794
   1d430:	0002c522 	.word	0x0002c522
   1d434:	0002a588 	.word	0x0002a588
   1d438:	0002afd8 	.word	0x0002afd8
   1d43c:	0002c54c 	.word	0x0002c54c
   1d440:	0002c579 	.word	0x0002c579
   1d444:	0002c59a 	.word	0x0002c59a
   1d448:	0002c5e0 	.word	0x0002c5e0

0001d44c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE>:
    const SubGraph* subgraph, NodeAndRegistration** node_and_registrations) {
   1d44c:	b570      	push	{r4, r5, r6, lr}
   1d44e:	4604      	mov	r4, r0
   1d450:	4608      	mov	r0, r1
   1d452:	210a      	movs	r1, #10
   1d454:	4615      	mov	r5, r2
   1d456:	f005 fa2a 	bl	228ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
      memory_allocator_->AllocateFromTail(
   1d45a:	6801      	ldr	r1, [r0, #0]
   1d45c:	2028      	movs	r0, #40	; 0x28
   1d45e:	6866      	ldr	r6, [r4, #4]
   1d460:	4341      	muls	r1, r0
          alignof(NodeAndRegistration)));
   1d462:	6833      	ldr	r3, [r6, #0]
      memory_allocator_->AllocateFromTail(
   1d464:	2204      	movs	r2, #4
   1d466:	4630      	mov	r0, r6
   1d468:	68db      	ldr	r3, [r3, #12]
   1d46a:	4798      	blx	r3
  if (output == nullptr) {
   1d46c:	b928      	cbnz	r0, 1d47a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x2e>
    TF_LITE_REPORT_ERROR(
   1d46e:	4904      	ldr	r1, [pc, #16]	; (1d480 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x34>)
   1d470:	68a0      	ldr	r0, [r4, #8]
   1d472:	f006 f87d 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   1d476:	2001      	movs	r0, #1
}
   1d478:	bd70      	pop	{r4, r5, r6, pc}
  *node_and_registrations = output;
   1d47a:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
   1d47c:	2000      	movs	r0, #0
   1d47e:	e7fb      	b.n	1d478 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x2c>
   1d480:	0002c5fd 	.word	0x0002c5fd

0001d484 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(const Model* model,
                                                    TfLiteContext* context,
                                                    const SubGraph* subgraph) {
   1d484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d488:	ed2d 8b02 	vpush	{d8}
   1d48c:	460e      	mov	r6, r1
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
   1d48e:	6881      	ldr	r1, [r0, #8]
                                                    const SubGraph* subgraph) {
   1d490:	b099      	sub	sp, #100	; 0x64
   1d492:	4605      	mov	r5, r0
                                        memory_allocator_->GetTail());
   1d494:	6840      	ldr	r0, [r0, #4]
                                                    const SubGraph* subgraph) {
   1d496:	469a      	mov	sl, r3
   1d498:	9204      	str	r2, [sp, #16]
                                        memory_allocator_->GetTail());
   1d49a:	9103      	str	r1, [sp, #12]
   1d49c:	f006 f983 	bl	237a6 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
   1d4a0:	9002      	str	r0, [sp, #8]
   1d4a2:	6868      	ldr	r0, [r5, #4]
   1d4a4:	f006 f981 	bl	237aa <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
   1d4a8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   1d4ac:	4603      	mov	r3, r0
   1d4ae:	a807      	add	r0, sp, #28
   1d4b0:	f000 fa58 	bl	1d964 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
   1d4b4:	68ab      	ldr	r3, [r5, #8]
   1d4b6:	2104      	movs	r1, #4
   1d4b8:	4650      	mov	r0, sl
   1d4ba:	ee08 3a10 	vmov	s16, r3
   1d4be:	f006 f962 	bl	23786 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
    TF_LITE_ENSURE_STATUS(
   1d4c2:	6803      	ldr	r3, [r0, #0]
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
   1d4c4:	a807      	add	r0, sp, #28
    TF_LITE_ENSURE_STATUS(
   1d4c6:	9302      	str	r3, [sp, #8]
  size_t Size() const { return tensor_count_ + buffer_count_; }
   1d4c8:	9a02      	ldr	r2, [sp, #8]
   1d4ca:	696b      	ldr	r3, [r5, #20]
   1d4cc:	18d3      	adds	r3, r2, r3
   1d4ce:	9303      	str	r3, [sp, #12]
  size_t bytes = sizeof(AllocationInfo) * Size();
   1d4d0:	2318      	movs	r3, #24
   1d4d2:	9a03      	ldr	r2, [sp, #12]
   1d4d4:	4353      	muls	r3, r2
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
   1d4d6:	2204      	movs	r2, #4
   1d4d8:	4619      	mov	r1, r3
  size_t bytes = sizeof(AllocationInfo) * Size();
   1d4da:	ee08 3a90 	vmov	s17, r3
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
   1d4de:	f000 fa27 	bl	1d930 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  if (info_ == nullptr) {
   1d4e2:	4604      	mov	r4, r0
   1d4e4:	2800      	cmp	r0, #0
   1d4e6:	d03c      	beq.n	1d562 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xde>
    auto field_offset = GetOptionalFieldOffset(field);
   1d4e8:	2110      	movs	r1, #16
   1d4ea:	4630      	mov	r0, r6
   1d4ec:	f005 f9a0 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d4f0:	2800      	cmp	r0, #0
   1d4f2:	d142      	bne.n	1d57a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf6>
   1d4f4:	4607      	mov	r7, r0
  for (size_t i = 0; i < tensor_count_; ++i) {
   1d4f6:	9b04      	ldr	r3, [sp, #16]
   1d4f8:	46a0      	mov	r8, r4
   1d4fa:	689b      	ldr	r3, [r3, #8]
        builder.Init(subgraph->tensors()->size(), scratch_buffer_count_));

    const int32_t* offline_planner_offsets = nullptr;
    TF_LITE_ENSURE_STATUS(
        builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
   1d4fc:	46a1      	mov	r9, r4
   1d4fe:	f103 0b04 	add.w	fp, r3, #4
  for (size_t i = 0; i < tensor_count_; ++i) {
   1d502:	2600      	movs	r6, #0
    current->first_created = -1;
   1d504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  for (size_t i = 0; i < tensor_count_; ++i) {
   1d508:	9a02      	ldr	r2, [sp, #8]
   1d50a:	42b2      	cmp	r2, r6
   1d50c:	f000 8094 	beq.w	1d638 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1b4>
    current->bytes = runtime_tensors[i].bytes;
   1d510:	f8db 2014 	ldr.w	r2, [fp, #20]
    current->output_ptr = &(runtime_tensors[i].data.data);
   1d514:	f8c9 b004 	str.w	fp, [r9, #4]
    current->bytes = runtime_tensors[i].bytes;
   1d518:	f8c9 2000 	str.w	r2, [r9]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
   1d51c:	f8db 2000 	ldr.w	r2, [fp]
    current->last_used = -1;
   1d520:	e9c9 3302 	strd	r3, r3, [r9, #8]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
   1d524:	2a00      	cmp	r2, #0
   1d526:	f040 8082 	bne.w	1d62e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1aa>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1d52a:	2104      	movs	r1, #4
   1d52c:	4650      	mov	r0, sl
   1d52e:	f006 f92a 	bl	23786 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
                                (!subgraph->tensors()->Get(i)->is_variable());
   1d532:	4631      	mov	r1, r6
   1d534:	f7ff fd0e 	bl	1cf54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
   1d538:	f006 f911 	bl	2375e <_ZNK6tflite6Tensor11is_variableEv>
   1d53c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
   1d540:	f080 0001 	eor.w	r0, r0, #1
   1d544:	b2c0      	uxtb	r0, r0
   1d546:	f889 0014 	strb.w	r0, [r9, #20]
    if (offline_offsets) {
   1d54a:	2f00      	cmp	r7, #0
   1d54c:	d071      	beq.n	1d632 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1ae>
      current->offline_offset = offline_offsets[i];
   1d54e:	f857 2026 	ldr.w	r2, [r7, r6, lsl #2]
   1d552:	f8c9 2010 	str.w	r2, [r9, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
   1d556:	3601      	adds	r6, #1
   1d558:	f109 0918 	add.w	r9, r9, #24
   1d55c:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
   1d560:	e7d2      	b.n	1d508 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x84>
    TF_LITE_REPORT_ERROR(
   1d562:	ee18 2a90 	vmov	r2, s17
   1d566:	ee18 0a10 	vmov	r0, s16
   1d56a:	49ba      	ldr	r1, [pc, #744]	; (1d854 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d0>)
   1d56c:	f006 f800 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>

    // Remaining arena size that memory planner can use for calculating offsets.
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
    uint8_t* planner_arena =
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
   1d570:	2601      	movs	r6, #1
                                        memory_allocator_->GetTail());
   1d572:	a807      	add	r0, sp, #28
   1d574:	f006 f910 	bl	23798 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
   1d578:	e181      	b.n	1d87e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3fa>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d57a:	5837      	ldr	r7, [r6, r0]
    auto p = data_ + field_offset;
   1d57c:	1833      	adds	r3, r6, r0
  if (model->metadata()) {
   1d57e:	19df      	adds	r7, r3, r7
   1d580:	d0b9      	beq.n	1d4f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x72>
    const int32_t* offline_planner_offsets = nullptr;
   1d582:	2700      	movs	r7, #0
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
   1d584:	46b9      	mov	r9, r7
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
   1d586:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 1d86c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3e8>
    auto field_offset = GetOptionalFieldOffset(field);
   1d58a:	2110      	movs	r1, #16
   1d58c:	4630      	mov	r0, r6
   1d58e:	f005 f94f 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d592:	2800      	cmp	r0, #0
   1d594:	f000 81a7 	beq.w	1d8e6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x462>
   1d598:	5832      	ldr	r2, [r6, r0]
    auto p = data_ + field_offset;
   1d59a:	1831      	adds	r1, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d59c:	188b      	adds	r3, r1, r2
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
   1d59e:	588a      	ldr	r2, [r1, r2]
   1d5a0:	454a      	cmp	r2, r9
   1d5a2:	d9a8      	bls.n	1d4f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x72>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   1d5a4:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
   1d5a6:	eb03 0889 	add.w	r8, r3, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   1d5aa:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
    auto field_offset = GetOptionalFieldOffset(field);
   1d5ae:	2104      	movs	r1, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   1d5b0:	4498      	add	r8, r3
    auto field_offset = GetOptionalFieldOffset(field);
   1d5b2:	4640      	mov	r0, r8
   1d5b4:	f005 f93c 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d5b8:	b380      	cbz	r0, 1d61c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x198>
    auto p = data_ + field_offset;
   1d5ba:	eb08 0300 	add.w	r3, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d5be:	f858 0000 	ldr.w	r0, [r8, r0]
   1d5c2:	4403      	add	r3, r0
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
   1d5c4:	4658      	mov	r0, fp
   1d5c6:	9305      	str	r3, [sp, #20]
   1d5c8:	f7f8 fc56 	bl	15e78 <strlen>
   1d5cc:	9b05      	ldr	r3, [sp, #20]
   1d5ce:	4602      	mov	r2, r0
   1d5d0:	4659      	mov	r1, fp
   1d5d2:	1d18      	adds	r0, r3, #4
   1d5d4:	f007 f88e 	bl	246f4 <strncmp>
   1d5d8:	bb30      	cbnz	r0, 1d628 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a4>
    auto field_offset = GetOptionalFieldOffset(field);
   1d5da:	210c      	movs	r1, #12
   1d5dc:	4630      	mov	r0, r6
   1d5de:	f005 f927 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d5e2:	b1e8      	cbz	r0, 1d620 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x19c>
   1d5e4:	5837      	ldr	r7, [r6, r0]
    auto p = data_ + field_offset;
   1d5e6:	1833      	adds	r3, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d5e8:	441f      	add	r7, r3
    auto field_offset = GetOptionalFieldOffset(field);
   1d5ea:	2106      	movs	r1, #6
   1d5ec:	4640      	mov	r0, r8
   1d5ee:	f005 f91f 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1d5f2:	b1b8      	cbz	r0, 1d624 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a0>
   1d5f4:	f858 1000 	ldr.w	r1, [r8, r0]
  return_type operator[](uoffset_t i) const { return Get(i); }
   1d5f8:	4638      	mov	r0, r7
   1d5fa:	f7ff fcdb 	bl	1cfb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1d5fe:	2104      	movs	r1, #4
   1d600:	f006 f8b8 	bl	23774 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
        if (tensor_count_ != nbr_tensors) {
   1d604:	9b02      	ldr	r3, [sp, #8]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
   1d606:	68c2      	ldr	r2, [r0, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
   1d608:	f100 0710 	add.w	r7, r0, #16
        if (tensor_count_ != nbr_tensors) {
   1d60c:	4293      	cmp	r3, r2
   1d60e:	d00b      	beq.n	1d628 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a4>
          TF_LITE_REPORT_ERROR(reporter_,
   1d610:	ee18 0a10 	vmov	r0, s16
   1d614:	4990      	ldr	r1, [pc, #576]	; (1d858 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d4>)
   1d616:	f005 ffab 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE_STATUS(
   1d61a:	e7a9      	b.n	1d570 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1d61c:	4603      	mov	r3, r0
   1d61e:	e7d1      	b.n	1d5c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x140>
   1d620:	4607      	mov	r7, r0
   1d622:	e7e2      	b.n	1d5ea <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x166>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1d624:	4601      	mov	r1, r0
   1d626:	e7e7      	b.n	1d5f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x174>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
   1d628:	f109 0901 	add.w	r9, r9, #1
   1d62c:	e7ad      	b.n	1d58a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x106>
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
   1d62e:	2000      	movs	r0, #0
   1d630:	e789      	b.n	1d546 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xc2>
      current->offline_offset = kOnlinePlannedBuffer;
   1d632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d636:	e78c      	b.n	1d552 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xce>
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
   1d638:	f04f 0b00 	mov.w	fp, #0
    current->first_created = 0;
   1d63c:	f04f 0918 	mov.w	r9, #24
   1d640:	465f      	mov	r7, fp
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1d642:	2106      	movs	r1, #6
   1d644:	4650      	mov	r0, sl
   1d646:	f005 f929 	bl	2289c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
   1d64a:	6803      	ldr	r3, [r0, #0]
   1d64c:	455b      	cmp	r3, fp
   1d64e:	d908      	bls.n	1d662 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1de>
    const int tensor_index = subgraph->inputs()->Get(i);
   1d650:	4659      	mov	r1, fp
   1d652:	f7fd f91d 	bl	1a890 <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->first_created = 0;
   1d656:	fb09 4000 	mla	r0, r9, r0, r4
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
   1d65a:	f10b 0b01 	add.w	fp, fp, #1
    current->first_created = 0;
   1d65e:	6087      	str	r7, [r0, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
   1d660:	e7ef      	b.n	1d642 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1be>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
   1d662:	f04f 0b00 	mov.w	fp, #0
    current->last_used = subgraph->operators()->size() - 1;
   1d666:	f04f 0918 	mov.w	r9, #24
   1d66a:	2108      	movs	r1, #8
   1d66c:	4650      	mov	r0, sl
   1d66e:	f005 f915 	bl	2289c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
   1d672:	210a      	movs	r1, #10
   1d674:	9002      	str	r0, [sp, #8]
   1d676:	4650      	mov	r0, sl
   1d678:	f005 f919 	bl	228ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
   1d67c:	9b02      	ldr	r3, [sp, #8]
   1d67e:	4607      	mov	r7, r0
   1d680:	681a      	ldr	r2, [r3, #0]
   1d682:	455a      	cmp	r2, fp
   1d684:	d90b      	bls.n	1d69e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21a>
    const int tensor_index = subgraph->outputs()->Get(i);
   1d686:	4659      	mov	r1, fp
   1d688:	4618      	mov	r0, r3
   1d68a:	f7fd f901 	bl	1a890 <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->last_used = subgraph->operators()->size() - 1;
   1d68e:	fb09 4000 	mla	r0, r9, r0, r4
   1d692:	683b      	ldr	r3, [r7, #0]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
   1d694:	f10b 0b01 	add.w	fp, fp, #1
    current->last_used = subgraph->operators()->size() - 1;
   1d698:	3b01      	subs	r3, #1
   1d69a:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
   1d69c:	e7e5      	b.n	1d66a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1e6>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
   1d69e:	6807      	ldr	r7, [r0, #0]
   1d6a0:	3f01      	subs	r7, #1
   1d6a2:	2f00      	cmp	r7, #0
   1d6a4:	db37      	blt.n	1d716 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x292>
   1d6a6:	210a      	movs	r1, #10
   1d6a8:	4650      	mov	r0, sl
   1d6aa:	f005 f900 	bl	228ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
    const auto* op = subgraph->operators()->Get(i);
   1d6ae:	4639      	mov	r1, r7
   1d6b0:	f7ff fc68 	bl	1cf84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
   1d6b4:	f04f 0b00 	mov.w	fp, #0
    const auto* op = subgraph->operators()->Get(i);
   1d6b8:	4681      	mov	r9, r0
   1d6ba:	2106      	movs	r1, #6
   1d6bc:	4648      	mov	r0, r9
   1d6be:	f005 f8ed 	bl	2289c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
   1d6c2:	6802      	ldr	r2, [r0, #0]
   1d6c4:	455a      	cmp	r2, fp
   1d6c6:	d90e      	bls.n	1d6e6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x262>
      const int tensor_index = op->inputs()->Get(n);
   1d6c8:	4659      	mov	r1, fp
   1d6ca:	f7fd f8e1 	bl	1a890 <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
   1d6ce:	2318      	movs	r3, #24
   1d6d0:	fb03 4000 	mla	r0, r3, r0, r4
      if (((current->last_used == -1) || (current->last_used < i))) {
   1d6d4:	68c2      	ldr	r2, [r0, #12]
   1d6d6:	1c51      	adds	r1, r2, #1
   1d6d8:	d001      	beq.n	1d6de <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x25a>
   1d6da:	4297      	cmp	r7, r2
   1d6dc:	dd00      	ble.n	1d6e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x25c>
        current->last_used = i;
   1d6de:	60c7      	str	r7, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
   1d6e0:	f10b 0b01 	add.w	fp, fp, #1
   1d6e4:	e7e9      	b.n	1d6ba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x236>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
   1d6e6:	f04f 0b00 	mov.w	fp, #0
   1d6ea:	2108      	movs	r1, #8
   1d6ec:	4648      	mov	r0, r9
   1d6ee:	f005 f8d5 	bl	2289c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
   1d6f2:	6802      	ldr	r2, [r0, #0]
   1d6f4:	455a      	cmp	r2, fp
   1d6f6:	d9d3      	bls.n	1d6a0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21c>
      const int tensor_index = op->outputs()->Get(n);
   1d6f8:	4659      	mov	r1, fp
   1d6fa:	f7fd f8c9 	bl	1a890 <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
   1d6fe:	2318      	movs	r3, #24
   1d700:	fb03 4000 	mla	r0, r3, r0, r4
      if ((current->first_created == -1) || (current->first_created > i)) {
   1d704:	6882      	ldr	r2, [r0, #8]
   1d706:	1c53      	adds	r3, r2, #1
   1d708:	d001      	beq.n	1d70e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x28a>
   1d70a:	4297      	cmp	r7, r2
   1d70c:	da00      	bge.n	1d710 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x28c>
        current->first_created = i;
   1d70e:	6087      	str	r7, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
   1d710:	f10b 0b01 	add.w	fp, fp, #1
   1d714:	e7e9      	b.n	1d6ea <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x266>
  for (size_t i = 0; i < tensor_count_; ++i) {
   1d716:	2200      	movs	r2, #0
   1d718:	4621      	mov	r1, r4
      current->needs_allocating = false;
   1d71a:	4617      	mov	r7, r2
  for (size_t i = 0; i < tensor_count_; ++i) {
   1d71c:	4296      	cmp	r6, r2
   1d71e:	d018      	beq.n	1d752 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ce>
    const bool is_read_only =
   1d720:	e9d1 3002 	ldrd	r3, r0, [r1, #8]
        (current->first_created == -1) && (current->last_used != -1);
   1d724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1d728:	d105      	bne.n	1d736 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b2>
   1d72a:	3001      	adds	r0, #1
   1d72c:	d005      	beq.n	1d73a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b6>
      current->needs_allocating = false;
   1d72e:	750f      	strb	r7, [r1, #20]
  for (size_t i = 0; i < tensor_count_; ++i) {
   1d730:	3201      	adds	r2, #1
   1d732:	3118      	adds	r1, #24
   1d734:	e7f2      	b.n	1d71c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x298>
        ((current->first_created == -1) || (current->last_used == -1));
   1d736:	3001      	adds	r0, #1
   1d738:	d1fa      	bne.n	1d730 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>
    if (has_partial_lifetime && current->needs_allocating) {
   1d73a:	7d08      	ldrb	r0, [r1, #20]
   1d73c:	2800      	cmp	r0, #0
   1d73e:	d0f7      	beq.n	1d730 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>
      TF_LITE_REPORT_ERROR(
   1d740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d744:	ee18 0a10 	vmov	r0, s16
   1d748:	9100      	str	r1, [sp, #0]
   1d74a:	4944      	ldr	r1, [pc, #272]	; (1d85c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d8>)
   1d74c:	f005 ff10 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
   1d750:	e70e      	b.n	1d570 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   1d752:	2318      	movs	r3, #24
    current->needs_allocating = true;
   1d754:	2701      	movs	r7, #1
    current->offline_offset = kOnlinePlannedBuffer;
   1d756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d75a:	fb03 4306 	mla	r3, r3, r6, r4
   1d75e:	692a      	ldr	r2, [r5, #16]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   1d760:	9903      	ldr	r1, [sp, #12]
   1d762:	3318      	adds	r3, #24
   1d764:	42b1      	cmp	r1, r6
   1d766:	d90e      	bls.n	1d786 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x302>
    current->bytes = handle->bytes;
   1d768:	6851      	ldr	r1, [r2, #4]
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
   1d76a:	f843 2c14 	str.w	r2, [r3, #-20]
    current->bytes = handle->bytes;
   1d76e:	f843 1c18 	str.w	r1, [r3, #-24]
    current->first_created = handle->node_idx;
   1d772:	6891      	ldr	r1, [r2, #8]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   1d774:	3601      	adds	r6, #1
    current->last_used = handle->node_idx;
   1d776:	e943 1104 	strd	r1, r1, [r3, #-16]
    current->needs_allocating = true;
   1d77a:	f803 7c04 	strb.w	r7, [r3, #-4]
    current->offline_offset = kOnlinePlannedBuffer;
   1d77e:	f843 0c08 	str.w	r0, [r3, #-8]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   1d782:	320c      	adds	r2, #12
   1d784:	e7ec      	b.n	1d760 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2dc>
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
   1d786:	a807      	add	r0, sp, #28
   1d788:	f006 f811 	bl	237ae <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
   1d78c:	2201      	movs	r2, #1
   1d78e:	4601      	mov	r1, r0
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
   1d790:	4606      	mov	r6, r0
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
   1d792:	a807      	add	r0, sp, #28
   1d794:	f000 f8b2 	bl	1d8fc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
   1d798:	4601      	mov	r1, r0
   1d79a:	b958      	cbnz	r0, 1d7b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x330>
   1d79c:	4b30      	ldr	r3, [pc, #192]	; (1d860 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3dc>)
   1d79e:	68a9      	ldr	r1, [r5, #8]
   1d7a0:	9301      	str	r3, [sp, #4]
   1d7a2:	f240 338f 	movw	r3, #911	; 0x38f
   1d7a6:	4608      	mov	r0, r1
   1d7a8:	9300      	str	r3, [sp, #0]
   1d7aa:	4a2e      	ldr	r2, [pc, #184]	; (1d864 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3e0>)
   1d7ac:	4b2e      	ldr	r3, [pc, #184]	; (1d868 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3e4>)
   1d7ae:	f005 feed 	bl	2358c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   1d7b2:	e6dd      	b.n	1d570 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
   1d7b4:	4632      	mov	r2, r6
   1d7b6:	a80d      	add	r0, sp, #52	; 0x34
   1d7b8:	f000 f926 	bl	1da08 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
    TF_LITE_ENSURE_STATUS(
   1d7bc:	ee18 3a90 	vmov	r3, s17
   1d7c0:	4423      	add	r3, r4
   1d7c2:	4699      	mov	r9, r3
   1d7c4:	68af      	ldr	r7, [r5, #8]
  for (size_t i = 0; i < allocation_info_size; ++i) {
   1d7c6:	454c      	cmp	r4, r9
   1d7c8:	d077      	beq.n	1d8ba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x436>
    if (current->needs_allocating) {
   1d7ca:	7d23      	ldrb	r3, [r4, #20]
   1d7cc:	b90b      	cbnz	r3, 1d7d2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x34e>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   1d7ce:	3418      	adds	r4, #24
   1d7d0:	e7f9      	b.n	1d7c6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x342>
          AlignSizeUp(current->bytes, kBufferAlignment);
   1d7d2:	2110      	movs	r1, #16
   1d7d4:	6820      	ldr	r0, [r4, #0]
   1d7d6:	f006 f96f 	bl	23ab8 <_ZN6tflite11AlignSizeUpEjj>
      if (current->offline_offset == kOnlinePlannedBuffer) {
   1d7da:	6923      	ldr	r3, [r4, #16]
          AlignSizeUp(current->bytes, kBufferAlignment);
   1d7dc:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
   1d7de:	1c59      	adds	r1, r3, #1
   1d7e0:	d10d      	bne.n	1d7fe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x37a>
        TF_LITE_ENSURE_STATUS(
   1d7e2:	68e3      	ldr	r3, [r4, #12]
   1d7e4:	4639      	mov	r1, r7
   1d7e6:	9300      	str	r3, [sp, #0]
   1d7e8:	68a3      	ldr	r3, [r4, #8]
   1d7ea:	a80d      	add	r0, sp, #52	; 0x34
   1d7ec:	f000 f8ea 	bl	1d9c4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
   1d7f0:	4606      	mov	r6, r0
   1d7f2:	2800      	cmp	r0, #0
   1d7f4:	d0eb      	beq.n	1d7ce <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x34a>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
   1d7f6:	a80d      	add	r0, sp, #52	; 0x34
   1d7f8:	f005 ffdd 	bl	237b6 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
   1d7fc:	e6b9      	b.n	1d572 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xee>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
   1d7fe:	9301      	str	r3, [sp, #4]
   1d800:	68e3      	ldr	r3, [r4, #12]
   1d802:	4639      	mov	r1, r7
   1d804:	9300      	str	r3, [sp, #0]
   1d806:	68a3      	ldr	r3, [r4, #8]
   1d808:	a80d      	add	r0, sp, #52	; 0x34
   1d80a:	f005 fffa 	bl	23802 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
   1d80e:	e7ef      	b.n	1d7f0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x36c>
          planner.GetMaximumMemorySize(), actual_available_arena_size);
      return kTfLiteError;
    }

    // Commit the plan.
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
   1d810:	6868      	ldr	r0, [r5, #4]
   1d812:	f005 ffc8 	bl	237a6 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
  int planner_index = 0;
   1d816:	f04f 0b00 	mov.w	fp, #0
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
   1d81a:	4607      	mov	r7, r0
      int offset = -1;
   1d81c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
  for (size_t i = 0; i < allocation_info_size; ++i) {
   1d820:	4544      	cmp	r4, r8
   1d822:	d032      	beq.n	1d88a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x406>
    if (current->needs_allocating) {
   1d824:	f898 3014 	ldrb.w	r3, [r8, #20]
   1d828:	b18b      	cbz	r3, 1d84e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ca>
      TF_LITE_ENSURE_STATUS(
   1d82a:	465a      	mov	r2, fp
   1d82c:	4649      	mov	r1, r9
   1d82e:	ab06      	add	r3, sp, #24
   1d830:	a80d      	add	r0, sp, #52	; 0x34
      int offset = -1;
   1d832:	f8cd a018 	str.w	sl, [sp, #24]
      TF_LITE_ENSURE_STATUS(
   1d836:	f000 f905 	bl	1da44 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>
   1d83a:	4606      	mov	r6, r0
   1d83c:	2800      	cmp	r0, #0
   1d83e:	d1da      	bne.n	1d7f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x372>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
   1d840:	9b06      	ldr	r3, [sp, #24]
   1d842:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1d846:	443b      	add	r3, r7
   1d848:	6013      	str	r3, [r2, #0]
      ++planner_index;
   1d84a:	f10b 0b01 	add.w	fp, fp, #1
  for (size_t i = 0; i < allocation_info_size; ++i) {
   1d84e:	f108 0818 	add.w	r8, r8, #24
   1d852:	e7e5      	b.n	1d820 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x39c>
   1d854:	0002c633 	.word	0x0002c633
   1d858:	0002c674 	.word	0x0002c674
   1d85c:	0002c6bf 	.word	0x0002c6bf
   1d860:	0002c74b 	.word	0x0002c74b
   1d864:	0002b8a4 	.word	0x0002b8a4
   1d868:	0002c722 	.word	0x0002c722
   1d86c:	0002c7dc 	.word	0x0002c7dc
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
   1d870:	a80d      	add	r0, sp, #52	; 0x34
   1d872:	f005 ffa0 	bl	237b6 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
                                        memory_allocator_->GetTail());
   1d876:	a807      	add	r0, sp, #28
   1d878:	f005 ff8e 	bl	23798 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
    uint8_t* allocated_tensor_memory =
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
                                            /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
  }
  return kTfLiteOk;
   1d87c:	2600      	movs	r6, #0
}
   1d87e:	4630      	mov	r0, r6
   1d880:	b019      	add	sp, #100	; 0x64
   1d882:	ecbd 8b02 	vpop	{d8}
   1d886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
   1d88a:	686c      	ldr	r4, [r5, #4]
   1d88c:	a80d      	add	r0, sp, #52	; 0x34
                                            /*alignment=*/1);
   1d88e:	6823      	ldr	r3, [r4, #0]
   1d890:	689e      	ldr	r6, [r3, #8]
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
   1d892:	f006 f8ae 	bl	239f2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
   1d896:	2201      	movs	r2, #1
   1d898:	4601      	mov	r1, r0
   1d89a:	4620      	mov	r0, r4
   1d89c:	47b0      	blx	r6
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
   1d89e:	2800      	cmp	r0, #0
   1d8a0:	d1e6      	bne.n	1d870 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ec>
   1d8a2:	4b12      	ldr	r3, [pc, #72]	; (1d8ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x468>)
   1d8a4:	68a9      	ldr	r1, [r5, #8]
   1d8a6:	9301      	str	r3, [sp, #4]
   1d8a8:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   1d8ac:	4608      	mov	r0, r1
   1d8ae:	9300      	str	r3, [sp, #0]
   1d8b0:	4a0f      	ldr	r2, [pc, #60]	; (1d8f0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x46c>)
   1d8b2:	4b10      	ldr	r3, [pc, #64]	; (1d8f4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x470>)
   1d8b4:	f005 fe6a 	bl	2358c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   1d8b8:	e013      	b.n	1d8e2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x45e>
        memory_allocator_->GetAvailableMemory();
   1d8ba:	6868      	ldr	r0, [r5, #4]
   1d8bc:	f005 ff77 	bl	237ae <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
   1d8c0:	4606      	mov	r6, r0
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
   1d8c2:	a80d      	add	r0, sp, #52	; 0x34
   1d8c4:	f006 f895 	bl	239f2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
   1d8c8:	42b0      	cmp	r0, r6
   1d8ca:	f8d5 9008 	ldr.w	r9, [r5, #8]
   1d8ce:	d99f      	bls.n	1d810 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x38c>
      TF_LITE_REPORT_ERROR(
   1d8d0:	a80d      	add	r0, sp, #52	; 0x34
   1d8d2:	f006 f88e 	bl	239f2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
   1d8d6:	4633      	mov	r3, r6
   1d8d8:	4602      	mov	r2, r0
   1d8da:	4907      	ldr	r1, [pc, #28]	; (1d8f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x474>)
   1d8dc:	4648      	mov	r0, r9
   1d8de:	f005 fe47 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
   1d8e2:	2601      	movs	r6, #1
   1d8e4:	e787      	b.n	1d7f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x372>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
   1d8e6:	6803      	ldr	r3, [r0, #0]
   1d8e8:	deff      	udf	#255	; 0xff
   1d8ea:	bf00      	nop
   1d8ec:	0002c7b9 	.word	0x0002c7b9
   1d8f0:	0002b8a4 	.word	0x0002b8a4
   1d8f4:	0002c722 	.word	0x0002c722
   1d8f8:	0002c764 	.word	0x0002c764

0001d8fc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}

uint8_t* SimpleMemoryAllocator::AllocateFromHead(size_t size,
                                                 size_t alignment) {
   1d8fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d8fe:	4605      	mov	r5, r0
   1d900:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(head_, alignment);
   1d902:	6900      	ldr	r0, [r0, #16]
   1d904:	4611      	mov	r1, r2
   1d906:	f006 f8cc 	bl	23aa2 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
   1d90a:	696b      	ldr	r3, [r5, #20]
   1d90c:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
   1d90e:	42a3      	cmp	r3, r4
   1d910:	d209      	bcs.n	1d926 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x2a>
    TF_LITE_REPORT_ERROR(
   1d912:	1ae2      	subs	r2, r4, r3
   1d914:	9200      	str	r2, [sp, #0]
   1d916:	4905      	ldr	r1, [pc, #20]	; (1d92c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x30>)
   1d918:	4622      	mov	r2, r4
   1d91a:	6868      	ldr	r0, [r5, #4]
   1d91c:	f005 fe28 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
   1d920:	2000      	movs	r0, #0
  }
  head_ = aligned_result + size;
  return aligned_result;
}
   1d922:	b003      	add	sp, #12
   1d924:	bd30      	pop	{r4, r5, pc}
  head_ = aligned_result + size;
   1d926:	4404      	add	r4, r0
   1d928:	612c      	str	r4, [r5, #16]
  return aligned_result;
   1d92a:	e7fa      	b.n	1d922 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x26>
   1d92c:	0002c7f4 	.word	0x0002c7f4

0001d930 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
   1d930:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d932:	460d      	mov	r5, r1
   1d934:	4604      	mov	r4, r0
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
   1d936:	6940      	ldr	r0, [r0, #20]
   1d938:	4611      	mov	r1, r2
   1d93a:	1b40      	subs	r0, r0, r5
   1d93c:	f006 f8b8 	bl	23ab0 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
   1d940:	6923      	ldr	r3, [r4, #16]
   1d942:	4283      	cmp	r3, r0
   1d944:	d90a      	bls.n	1d95c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x2c>
    const size_t missing_memory = head_ - aligned_result;
   1d946:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(
   1d948:	9300      	str	r3, [sp, #0]
   1d94a:	462a      	mov	r2, r5
   1d94c:	4904      	ldr	r1, [pc, #16]	; (1d960 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x30>)
   1d94e:	6860      	ldr	r0, [r4, #4]
   1d950:	1aeb      	subs	r3, r5, r3
   1d952:	f005 fe0d 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, size - missing_memory, missing_memory);
    return nullptr;
   1d956:	2000      	movs	r0, #0
  }
  tail_ = aligned_result;
  return aligned_result;
}
   1d958:	b003      	add	sp, #12
   1d95a:	bd30      	pop	{r4, r5, pc}
  tail_ = aligned_result;
   1d95c:	6160      	str	r0, [r4, #20]
  return aligned_result;
   1d95e:	e7fb      	b.n	1d958 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x28>
   1d960:	0002c7f4 	.word	0x0002c7f4

0001d964 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
   1d964:	b530      	push	{r4, r5, lr}
      tail_(buffer_tail) {}
   1d966:	4d04      	ldr	r5, [pc, #16]	; (1d978 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x14>)
   1d968:	e9c0 2302 	strd	r2, r3, [r0, #8]
   1d96c:	e9c0 5100 	strd	r5, r1, [r0]
   1d970:	e9c0 2304 	strd	r2, r3, [r0, #16]
   1d974:	bd30      	pop	{r4, r5, pc}
   1d976:	bf00      	nop
   1d978:	0002a7d4 	.word	0x0002a7d4

0001d97c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
   1d97c:	b510      	push	{r4, lr}
   1d97e:	b086      	sub	sp, #24
  TFLITE_DCHECK(error_reporter != nullptr);
   1d980:	b908      	cbnz	r0, 1d986 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0xa>
   1d982:	f006 fd65 	bl	24450 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
   1d986:	2900      	cmp	r1, #0
   1d988:	d0fb      	beq.n	1d982 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x6>
      tail_(buffer_tail) {}
   1d98a:	4c0d      	ldr	r4, [pc, #52]	; (1d9c0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x44>)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
   1d98c:	440a      	add	r2, r1
      tail_(buffer_tail) {}
   1d98e:	e9cd 1202 	strd	r1, r2, [sp, #8]
   1d992:	e9cd 1204 	strd	r1, r2, [sp, #16]
   1d996:	e9cd 4000 	strd	r4, r0, [sp]
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
   1d99a:	2204      	movs	r2, #4
   1d99c:	2118      	movs	r1, #24
   1d99e:	4668      	mov	r0, sp
   1d9a0:	f7ff ffc6 	bl	1d930 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
   1d9a4:	b150      	cbz	r0, 1d9bc <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x40>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
   1d9a6:	9b01      	ldr	r3, [sp, #4]
   1d9a8:	6004      	str	r4, [r0, #0]
   1d9aa:	6043      	str	r3, [r0, #4]
   1d9ac:	9b02      	ldr	r3, [sp, #8]
   1d9ae:	6083      	str	r3, [r0, #8]
   1d9b0:	9b03      	ldr	r3, [sp, #12]
   1d9b2:	60c3      	str	r3, [r0, #12]
   1d9b4:	9b04      	ldr	r3, [sp, #16]
   1d9b6:	6103      	str	r3, [r0, #16]
   1d9b8:	9b05      	ldr	r3, [sp, #20]
   1d9ba:	6143      	str	r3, [r0, #20]
}
   1d9bc:	b006      	add	sp, #24
   1d9be:	bd10      	pop	{r4, pc}
   1d9c0:	0002a7d4 	.word	0x0002a7d4

0001d9c4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
  // We don't own the scratch buffer, so don't deallocate anything.
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
   1d9c4:	b570      	push	{r4, r5, r6, lr}
   1d9c6:	4604      	mov	r4, r0
   1d9c8:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
   1d9ca:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
   1d9ce:	428d      	cmp	r5, r1
   1d9d0:	db05      	blt.n	1d9de <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x1a>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
   1d9d2:	460a      	mov	r2, r1
   1d9d4:	490b      	ldr	r1, [pc, #44]	; (1da04 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
   1d9d6:	f005 fdcb 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
   1d9da:	2001      	movs	r0, #1
  current->last_time_used = last_time_used;
  current->offline_offset = kOnlinePlannedBuffer;
  ++buffer_count_;
  need_to_calculate_offsets_ = true;
  return kTfLiteOk;
}
   1d9dc:	bd70      	pop	{r4, r5, r6, pc}
  BufferRequirements* current = &requirements_[buffer_count_];
   1d9de:	68e0      	ldr	r0, [r4, #12]
   1d9e0:	012e      	lsls	r6, r5, #4
   1d9e2:	eb00 1105 	add.w	r1, r0, r5, lsl #4
  current->size = size;
   1d9e6:	5182      	str	r2, [r0, r6]
  current->first_time_used = first_time_used;
   1d9e8:	608b      	str	r3, [r1, #8]
  current->last_time_used = last_time_used;
   1d9ea:	9b04      	ldr	r3, [sp, #16]
  ++buffer_count_;
   1d9ec:	3501      	adds	r5, #1
  current->last_time_used = last_time_used;
   1d9ee:	60cb      	str	r3, [r1, #12]
  current->offline_offset = kOnlinePlannedBuffer;
   1d9f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d9f4:	604b      	str	r3, [r1, #4]
  need_to_calculate_offsets_ = true;
   1d9f6:	2301      	movs	r3, #1
  return kTfLiteOk;
   1d9f8:	2000      	movs	r0, #0
  ++buffer_count_;
   1d9fa:	60a5      	str	r5, [r4, #8]
  need_to_calculate_offsets_ = true;
   1d9fc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
   1da00:	e7ec      	b.n	1d9dc <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x18>
   1da02:	bf00      	nop
   1da04:	0002c838 	.word	0x0002c838

0001da08 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
   1da08:	b510      	push	{r4, lr}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
   1da0a:	4c0d      	ldr	r4, [pc, #52]	; (1da40 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x38>)
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
   1da0c:	60c1      	str	r1, [r0, #12]
    : buffer_count_(0), need_to_calculate_offsets_(true) {
   1da0e:	6004      	str	r4, [r0, #0]
   1da10:	2400      	movs	r4, #0
   1da12:	6084      	str	r4, [r0, #8]
   1da14:	2401      	movs	r4, #1
   1da16:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
   1da1a:	2428      	movs	r4, #40	; 0x28
   1da1c:	fbb2 f2f4 	udiv	r2, r2, r4
  next_free += sizeof(ListEntry) * max_buffer_count_;
   1da20:	240c      	movs	r4, #12
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
   1da22:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
   1da26:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
   1da28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
   1da2c:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
   1da2e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
   1da32:	6042      	str	r2, [r0, #4]
  next_free += sizeof(ListEntry) * max_buffer_count_;
   1da34:	fb04 1202 	mla	r2, r4, r2, r1
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
   1da38:	6181      	str	r1, [r0, #24]
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
   1da3a:	6242      	str	r2, [r0, #36]	; 0x24
}
   1da3c:	bd10      	pop	{r4, pc}
   1da3e:	bf00      	nop
   1da40:	0002a7ec 	.word	0x0002a7ec

0001da44 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
   1da44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da46:	4614      	mov	r4, r2
   1da48:	4605      	mov	r5, r0
   1da4a:	460f      	mov	r7, r1
   1da4c:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
   1da4e:	f005 ff16 	bl	2387e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
   1da52:	2c00      	cmp	r4, #0
   1da54:	db02      	blt.n	1da5c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x18>
   1da56:	68ab      	ldr	r3, [r5, #8]
   1da58:	42a3      	cmp	r3, r4
   1da5a:	dc07      	bgt.n	1da6c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter,
   1da5c:	4622      	mov	r2, r4
   1da5e:	4638      	mov	r0, r7
   1da60:	68ab      	ldr	r3, [r5, #8]
   1da62:	4905      	ldr	r1, [pc, #20]	; (1da78 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
   1da64:	f005 fd84 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   1da68:	2001      	movs	r0, #1
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
  return kTfLiteOk;
}
   1da6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *offset = buffer_offsets_[buffer_index];
   1da6c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  return kTfLiteOk;
   1da6e:	2000      	movs	r0, #0
  *offset = buffer_offsets_[buffer_index];
   1da70:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   1da74:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
   1da76:	e7f8      	b.n	1da6a <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x26>
   1da78:	0002c855 	.word	0x0002c855

0001da7c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   1da7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1da80:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
   1da82:	2300      	movs	r3, #0
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   1da84:	460f      	mov	r7, r1
  *registration = nullptr;
   1da86:	6033      	str	r3, [r6, #0]
    auto field_offset = GetOptionalFieldOffset(field);
   1da88:	2104      	movs	r1, #4
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   1da8a:	4605      	mov	r5, r0
   1da8c:	4690      	mov	r8, r2
   1da8e:	f004 fecf 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1da92:	b100      	cbz	r0, 1da96 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x1a>
   1da94:	5628      	ldrsb	r0, [r5, r0]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
   1da96:	b2c4      	uxtb	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   1da98:	2108      	movs	r1, #8
   1da9a:	4628      	mov	r0, r5
   1da9c:	f004 fec8 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   1daa0:	b158      	cbz	r0, 1daba <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3e>
   1daa2:	582a      	ldr	r2, [r5, r0]
  auto builtin_code = opcode->builtin_code();
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX ||
   1daa4:	2c7e      	cmp	r4, #126	; 0x7e
   1daa6:	d90a      	bls.n	1dabe <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
   1daa8:	4622      	mov	r2, r4
   1daaa:	4640      	mov	r0, r8
   1daac:	491c      	ldr	r1, [pc, #112]	; (1db20 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa4>)
   1daae:	f005 fd5f 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    }
  } else if (!opcode->custom_code()) {
    TF_LITE_REPORT_ERROR(
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
   1dab2:	2001      	movs	r0, #1
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
   1dab4:	b002      	add	sp, #8
   1dab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1daba:	2201      	movs	r2, #1
   1dabc:	e7f2      	b.n	1daa4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x28>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
   1dabe:	2c20      	cmp	r4, #32
   1dac0:	d011      	beq.n	1dae6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x6a>
    *registration = op_resolver.FindOp(builtin_code, version);
   1dac2:	683b      	ldr	r3, [r7, #0]
   1dac4:	9201      	str	r2, [sp, #4]
   1dac6:	4621      	mov	r1, r4
   1dac8:	4638      	mov	r0, r7
   1daca:	681b      	ldr	r3, [r3, #0]
   1dacc:	4798      	blx	r3
    if (*registration == nullptr) {
   1dace:	9a01      	ldr	r2, [sp, #4]
    *registration = op_resolver.FindOp(builtin_code, version);
   1dad0:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
   1dad2:	bb10      	cbnz	r0, 1db1a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9e>
      TF_LITE_REPORT_ERROR(
   1dad4:	4613      	mov	r3, r2
   1dad6:	4a13      	ldr	r2, [pc, #76]	; (1db24 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>)
   1dad8:	4640      	mov	r0, r8
   1dada:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   1dade:	4912      	ldr	r1, [pc, #72]	; (1db28 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xac>)
   1dae0:	f005 fd46 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
   1dae4:	e7e5      	b.n	1dab2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    auto field_offset = GetOptionalFieldOffset(field);
   1dae6:	2106      	movs	r1, #6
   1dae8:	4628      	mov	r0, r5
   1daea:	9201      	str	r2, [sp, #4]
   1daec:	f004 fea0 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   1daf0:	b120      	cbz	r0, 1dafc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x80>
   1daf2:	582b      	ldr	r3, [r5, r0]
    auto p = data_ + field_offset;
   1daf4:	1829      	adds	r1, r5, r0
  } else if (!opcode->custom_code()) {
   1daf6:	18c9      	adds	r1, r1, r3
   1daf8:	9a01      	ldr	r2, [sp, #4]
   1dafa:	d104      	bne.n	1db06 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8a>
    TF_LITE_REPORT_ERROR(
   1dafc:	4640      	mov	r0, r8
   1dafe:	490b      	ldr	r1, [pc, #44]	; (1db2c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb0>)
   1db00:	f005 fd36 	bl	23570 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   1db04:	e7d5      	b.n	1dab2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    *registration = op_resolver.FindOp(name, version);
   1db06:	683b      	ldr	r3, [r7, #0]
   1db08:	4638      	mov	r0, r7
   1db0a:	685b      	ldr	r3, [r3, #4]
   1db0c:	3104      	adds	r1, #4
   1db0e:	4798      	blx	r3
   1db10:	6030      	str	r0, [r6, #0]
    status = kTfLiteError;
   1db12:	fab0 f080 	clz	r0, r0
   1db16:	0940      	lsrs	r0, r0, #5
   1db18:	e7cc      	b.n	1dab4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
  TfLiteStatus status = kTfLiteOk;
   1db1a:	2000      	movs	r0, #0
   1db1c:	e7ca      	b.n	1dab4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
   1db1e:	bf00      	nop
   1db20:	0002c87e 	.word	0x0002c87e
   1db24:	0002a588 	.word	0x0002a588
   1db28:	0002c8d2 	.word	0x0002c8d2
   1db2c:	0002c907 	.word	0x0002c907

0001db30 <FftPopulateState>:
#include "kiss_fft.h"
#include "tools/kiss_fftr.h"

int FftPopulateState(struct FftState* state, size_t input_size) {
  state->input_size = input_size;
  state->fft_size = 1;
   1db30:	2301      	movs	r3, #1
int FftPopulateState(struct FftState* state, size_t input_size) {
   1db32:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1db34:	4605      	mov	r5, r0
  state->input_size = input_size;
   1db36:	60c1      	str	r1, [r0, #12]
  state->fft_size = 1;
   1db38:	6083      	str	r3, [r0, #8]
  while (state->fft_size < state->input_size) {
   1db3a:	68a8      	ldr	r0, [r5, #8]
   1db3c:	4288      	cmp	r0, r1
   1db3e:	ea4f 0040 	mov.w	r0, r0, lsl #1
   1db42:	d201      	bcs.n	1db48 <FftPopulateState+0x18>
    state->fft_size <<= 1;
   1db44:	60a8      	str	r0, [r5, #8]
  while (state->fft_size < state->input_size) {
   1db46:	e7f8      	b.n	1db3a <FftPopulateState+0xa>
  }

  state->input = reinterpret_cast<int16_t*>(
      malloc(state->fft_size * sizeof(*state->input)));
   1db48:	f003 facc 	bl	210e4 <malloc>
   1db4c:	4604      	mov	r4, r0
  state->input = reinterpret_cast<int16_t*>(
   1db4e:	6028      	str	r0, [r5, #0]
  if (state->input == nullptr) {
   1db50:	b940      	cbnz	r0, 1db64 <FftPopulateState+0x34>
    fprintf(stderr, "Failed to alloc fft input buffer\n");
   1db52:	4b21      	ldr	r3, [pc, #132]	; (1dbd8 <FftPopulateState+0xa8>)
   1db54:	4921      	ldr	r1, [pc, #132]	; (1dbdc <FftPopulateState+0xac>)
   1db56:	681b      	ldr	r3, [r3, #0]
  }

  state->output = reinterpret_cast<complex_int16_t*>(
      malloc((state->fft_size / 2 + 1) * sizeof(*state->output) * 2));
  if (state->output == nullptr) {
    fprintf(stderr, "Failed to alloc fft output buffer\n");
   1db58:	68d8      	ldr	r0, [r3, #12]
   1db5a:	f003 f8bb 	bl	20cd4 <fiprintf>
  if (kfft_cfg != state->scratch) {
    fprintf(stderr, "Kiss memory preallocation strategy failed.\n");
    return 0;
  }
  return 1;
}
   1db5e:	4620      	mov	r0, r4
   1db60:	b002      	add	sp, #8
   1db62:	bd70      	pop	{r4, r5, r6, pc}
      malloc((state->fft_size / 2 + 1) * sizeof(*state->output) * 2));
   1db64:	68a8      	ldr	r0, [r5, #8]
   1db66:	0840      	lsrs	r0, r0, #1
   1db68:	3001      	adds	r0, #1
   1db6a:	00c0      	lsls	r0, r0, #3
   1db6c:	f003 faba 	bl	210e4 <malloc>
   1db70:	4604      	mov	r4, r0
  state->output = reinterpret_cast<complex_int16_t*>(
   1db72:	6068      	str	r0, [r5, #4]
  if (state->output == nullptr) {
   1db74:	b918      	cbnz	r0, 1db7e <FftPopulateState+0x4e>
    fprintf(stderr, "Failed to alloc fft output buffer\n");
   1db76:	4b18      	ldr	r3, [pc, #96]	; (1dbd8 <FftPopulateState+0xa8>)
   1db78:	4919      	ldr	r1, [pc, #100]	; (1dbe0 <FftPopulateState+0xb0>)
   1db7a:	681b      	ldr	r3, [r3, #0]
   1db7c:	e7ec      	b.n	1db58 <FftPopulateState+0x28>
  size_t scratch_size = 0;
   1db7e:	2600      	movs	r6, #0
  kiss_fftr_cfg kfft_cfg = kiss_fftr_alloc(
   1db80:	68a8      	ldr	r0, [r5, #8]
   1db82:	4632      	mov	r2, r6
   1db84:	4631      	mov	r1, r6
   1db86:	ab01      	add	r3, sp, #4
  size_t scratch_size = 0;
   1db88:	9601      	str	r6, [sp, #4]
  kiss_fftr_cfg kfft_cfg = kiss_fftr_alloc(
   1db8a:	f7ee fff1 	bl	cb70 <kiss_fftr_alloc>
  if (kfft_cfg != nullptr) {
   1db8e:	4604      	mov	r4, r0
   1db90:	b138      	cbz	r0, 1dba2 <FftPopulateState+0x72>
    fprintf(stderr, "Kiss memory sizing failed.\n");
   1db92:	4b11      	ldr	r3, [pc, #68]	; (1dbd8 <FftPopulateState+0xa8>)
   1db94:	4913      	ldr	r1, [pc, #76]	; (1dbe4 <FftPopulateState+0xb4>)
   1db96:	681b      	ldr	r3, [r3, #0]
    fprintf(stderr, "Failed to alloc fft scratch buffer\n");
   1db98:	68d8      	ldr	r0, [r3, #12]
   1db9a:	f003 f89b 	bl	20cd4 <fiprintf>
    return 0;
   1db9e:	4634      	mov	r4, r6
   1dba0:	e7dd      	b.n	1db5e <FftPopulateState+0x2e>
  state->scratch = malloc(scratch_size);
   1dba2:	9801      	ldr	r0, [sp, #4]
   1dba4:	f003 fa9e 	bl	210e4 <malloc>
   1dba8:	4606      	mov	r6, r0
   1dbaa:	6128      	str	r0, [r5, #16]
  if (state->scratch == nullptr) {
   1dbac:	b918      	cbnz	r0, 1dbb6 <FftPopulateState+0x86>
    fprintf(stderr, "Failed to alloc fft scratch buffer\n");
   1dbae:	4b0a      	ldr	r3, [pc, #40]	; (1dbd8 <FftPopulateState+0xa8>)
   1dbb0:	490d      	ldr	r1, [pc, #52]	; (1dbe8 <FftPopulateState+0xb8>)
   1dbb2:	681b      	ldr	r3, [r3, #0]
   1dbb4:	e7f0      	b.n	1db98 <FftPopulateState+0x68>
  state->scratch_size = scratch_size;
   1dbb6:	9b01      	ldr	r3, [sp, #4]
  kfft_cfg = kiss_fftr_alloc(state->fft_size, 0,
   1dbb8:	4602      	mov	r2, r0
  state->scratch_size = scratch_size;
   1dbba:	616b      	str	r3, [r5, #20]
  kfft_cfg = kiss_fftr_alloc(state->fft_size, 0,
   1dbbc:	4621      	mov	r1, r4
   1dbbe:	ab01      	add	r3, sp, #4
   1dbc0:	68a8      	ldr	r0, [r5, #8]
   1dbc2:	f7ee ffd5 	bl	cb70 <kiss_fftr_alloc>
  if (kfft_cfg != state->scratch) {
   1dbc6:	692b      	ldr	r3, [r5, #16]
   1dbc8:	4283      	cmp	r3, r0
   1dbca:	d003      	beq.n	1dbd4 <FftPopulateState+0xa4>
    fprintf(stderr, "Kiss memory preallocation strategy failed.\n");
   1dbcc:	4b02      	ldr	r3, [pc, #8]	; (1dbd8 <FftPopulateState+0xa8>)
   1dbce:	4907      	ldr	r1, [pc, #28]	; (1dbec <FftPopulateState+0xbc>)
   1dbd0:	681b      	ldr	r3, [r3, #0]
   1dbd2:	e7c1      	b.n	1db58 <FftPopulateState+0x28>
  return 1;
   1dbd4:	2401      	movs	r4, #1
   1dbd6:	e7c2      	b.n	1db5e <FftPopulateState+0x2e>
   1dbd8:	20020064 	.word	0x20020064
   1dbdc:	0002c93e 	.word	0x0002c93e
   1dbe0:	0002c960 	.word	0x0002c960
   1dbe4:	0002c983 	.word	0x0002c983
   1dbe8:	0002c99f 	.word	0x0002c99f
   1dbec:	0002c9c3 	.word	0x0002c9c3

0001dbf0 <__cxa_guard_acquire>:
   1dbf0:	6803      	ldr	r3, [r0, #0]
   1dbf2:	07db      	lsls	r3, r3, #31
   1dbf4:	b510      	push	{r4, lr}
   1dbf6:	d410      	bmi.n	1dc1a <__cxa_guard_acquire+0x2a>
   1dbf8:	7843      	ldrb	r3, [r0, #1]
   1dbfa:	b153      	cbz	r3, 1dc12 <__cxa_guard_acquire+0x22>
   1dbfc:	2004      	movs	r0, #4
   1dbfe:	f006 f8bf 	bl	23d80 <__cxa_allocate_exception>
   1dc02:	4604      	mov	r4, r0
   1dc04:	f000 f81a 	bl	1dc3c <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
   1dc08:	4a05      	ldr	r2, [pc, #20]	; (1dc20 <__cxa_guard_acquire+0x30>)
   1dc0a:	4906      	ldr	r1, [pc, #24]	; (1dc24 <__cxa_guard_acquire+0x34>)
   1dc0c:	4620      	mov	r0, r4
   1dc0e:	f006 f918 	bl	23e42 <__cxa_throw>
   1dc12:	2301      	movs	r3, #1
   1dc14:	7043      	strb	r3, [r0, #1]
   1dc16:	4618      	mov	r0, r3
   1dc18:	bd10      	pop	{r4, pc}
   1dc1a:	2000      	movs	r0, #0
   1dc1c:	e7fc      	b.n	1dc18 <__cxa_guard_acquire+0x28>
   1dc1e:	bf00      	nop
   1dc20:	0001dc29 	.word	0x0001dc29
   1dc24:	0002a804 	.word	0x0002a804

0001dc28 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
   1dc28:	4b03      	ldr	r3, [pc, #12]	; (1dc38 <_ZN9__gnu_cxx20recursive_init_errorD1Ev+0x10>)
   1dc2a:	b510      	push	{r4, lr}
   1dc2c:	4604      	mov	r4, r0
   1dc2e:	6003      	str	r3, [r0, #0]
   1dc30:	f006 f8bc 	bl	23dac <_ZNSt9exceptionD1Ev>
   1dc34:	4620      	mov	r0, r4
   1dc36:	bd10      	pop	{r4, pc}
   1dc38:	0002a818 	.word	0x0002a818

0001dc3c <_ZN9__gnu_cxx20recursive_init_errorC1Ev>:
   1dc3c:	4b01      	ldr	r3, [pc, #4]	; (1dc44 <_ZN9__gnu_cxx20recursive_init_errorC1Ev+0x8>)
   1dc3e:	6003      	str	r3, [r0, #0]
   1dc40:	4770      	bx	lr
   1dc42:	bf00      	nop
   1dc44:	0002a818 	.word	0x0002a818

0001dc48 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   1dc48:	4b03      	ldr	r3, [pc, #12]	; (1dc58 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   1dc4a:	b510      	push	{r4, lr}
   1dc4c:	4604      	mov	r4, r0
   1dc4e:	6003      	str	r3, [r0, #0]
   1dc50:	f000 f804 	bl	1dc5c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   1dc54:	4620      	mov	r0, r4
   1dc56:	bd10      	pop	{r4, pc}
   1dc58:	0002a838 	.word	0x0002a838

0001dc5c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   1dc5c:	4b03      	ldr	r3, [pc, #12]	; (1dc6c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   1dc5e:	b510      	push	{r4, lr}
   1dc60:	4604      	mov	r4, r0
   1dc62:	6003      	str	r3, [r0, #0]
   1dc64:	f006 f807 	bl	23c76 <_ZNSt9type_infoD1Ev>
   1dc68:	4620      	mov	r0, r4
   1dc6a:	bd10      	pop	{r4, pc}
   1dc6c:	0002a878 	.word	0x0002a878

0001dc70 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
   1dc70:	4a1a      	ldr	r2, [pc, #104]	; (1dcdc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x6c>)
   1dc72:	6853      	ldr	r3, [r2, #4]
   1dc74:	b570      	push	{r4, r5, r6, lr}
   1dc76:	f1a0 0408 	sub.w	r4, r0, #8
   1dc7a:	4616      	mov	r6, r2
   1dc7c:	b123      	cbz	r3, 1dc88 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x18>
   1dc7e:	f850 1c08 	ldr.w	r1, [r0, #-8]
   1dc82:	1865      	adds	r5, r4, r1
   1dc84:	42ab      	cmp	r3, r5
   1dc86:	d903      	bls.n	1dc90 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x20>
   1dc88:	f840 3c04 	str.w	r3, [r0, #-4]
   1dc8c:	6074      	str	r4, [r6, #4]
   1dc8e:	bd70      	pop	{r4, r5, r6, pc}
   1dc90:	d106      	bne.n	1dca0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
   1dc92:	e9d3 3500 	ldrd	r3, r5, [r3]
   1dc96:	4419      	add	r1, r3
   1dc98:	e940 1502 	strd	r1, r5, [r0, #-8]
   1dc9c:	6054      	str	r4, [r2, #4]
   1dc9e:	e7f6      	b.n	1dc8e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
   1dca0:	3204      	adds	r2, #4
   1dca2:	685e      	ldr	r6, [r3, #4]
   1dca4:	b14e      	cbz	r6, 1dcba <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x4a>
   1dca6:	42b5      	cmp	r5, r6
   1dca8:	d202      	bcs.n	1dcb0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x40>
   1dcaa:	1d1a      	adds	r2, r3, #4
   1dcac:	4633      	mov	r3, r6
   1dcae:	e7f8      	b.n	1dca2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x32>
   1dcb0:	bf01      	itttt	eq
   1dcb2:	682e      	ldreq	r6, [r5, #0]
   1dcb4:	686d      	ldreq	r5, [r5, #4]
   1dcb6:	1989      	addeq	r1, r1, r6
   1dcb8:	605d      	streq	r5, [r3, #4]
   1dcba:	6813      	ldr	r3, [r2, #0]
   1dcbc:	681d      	ldr	r5, [r3, #0]
   1dcbe:	195e      	adds	r6, r3, r5
   1dcc0:	42b4      	cmp	r4, r6
   1dcc2:	bf17      	itett	ne
   1dcc4:	685b      	ldrne	r3, [r3, #4]
   1dcc6:	1949      	addeq	r1, r1, r5
   1dcc8:	f840 1c08 	strne.w	r1, [r0, #-8]
   1dccc:	f840 3c04 	strne.w	r3, [r0, #-4]
   1dcd0:	bf16      	itet	ne
   1dcd2:	6813      	ldrne	r3, [r2, #0]
   1dcd4:	6019      	streq	r1, [r3, #0]
   1dcd6:	605c      	strne	r4, [r3, #4]
   1dcd8:	e7d9      	b.n	1dc8e <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
   1dcda:	bf00      	nop
   1dcdc:	20024efc 	.word	0x20024efc

0001dce0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
   1dce0:	f100 0308 	add.w	r3, r0, #8
   1dce4:	4a0f      	ldr	r2, [pc, #60]	; (1dd24 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
   1dce6:	2b08      	cmp	r3, #8
   1dce8:	f852 0f04 	ldr.w	r0, [r2, #4]!
   1dcec:	bf38      	it	cc
   1dcee:	2308      	movcc	r3, #8
   1dcf0:	3307      	adds	r3, #7
   1dcf2:	f023 0307 	bic.w	r3, r3, #7
   1dcf6:	b530      	push	{r4, r5, lr}
   1dcf8:	b168      	cbz	r0, 1dd16 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x36>
   1dcfa:	e9d0 1400 	ldrd	r1, r4, [r0]
   1dcfe:	428b      	cmp	r3, r1
   1dd00:	d90a      	bls.n	1dd18 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x38>
   1dd02:	1d02      	adds	r2, r0, #4
   1dd04:	4620      	mov	r0, r4
   1dd06:	e7f7      	b.n	1dcf8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x18>
   1dd08:	18c5      	adds	r5, r0, r3
   1dd0a:	606c      	str	r4, [r5, #4]
   1dd0c:	50c1      	str	r1, [r0, r3]
   1dd0e:	6810      	ldr	r0, [r2, #0]
   1dd10:	6003      	str	r3, [r0, #0]
   1dd12:	6015      	str	r5, [r2, #0]
   1dd14:	3008      	adds	r0, #8
   1dd16:	bd30      	pop	{r4, r5, pc}
   1dd18:	1ac9      	subs	r1, r1, r3
   1dd1a:	2907      	cmp	r1, #7
   1dd1c:	d8f4      	bhi.n	1dd08 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x28>
   1dd1e:	6014      	str	r4, [r2, #0]
   1dd20:	e7f8      	b.n	1dd14 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x34>
   1dd22:	bf00      	nop
   1dd24:	20024efc 	.word	0x20024efc

0001dd28 <__cxa_free_exception>:
   1dd28:	4a06      	ldr	r2, [pc, #24]	; (1dd44 <__cxa_free_exception+0x1c>)
   1dd2a:	3880      	subs	r0, #128	; 0x80
   1dd2c:	6893      	ldr	r3, [r2, #8]
   1dd2e:	4298      	cmp	r0, r3
   1dd30:	d905      	bls.n	1dd3e <__cxa_free_exception+0x16>
   1dd32:	68d2      	ldr	r2, [r2, #12]
   1dd34:	4413      	add	r3, r2
   1dd36:	4298      	cmp	r0, r3
   1dd38:	d201      	bcs.n	1dd3e <__cxa_free_exception+0x16>
   1dd3a:	f7ff bf99 	b.w	1dc70 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
   1dd3e:	f003 b9d9 	b.w	210f4 <free>
   1dd42:	bf00      	nop
   1dd44:	20024efc 	.word	0x20024efc

0001dd48 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   1dd48:	b538      	push	{r3, r4, r5, lr}
   1dd4a:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   1dd4e:	4c07      	ldr	r4, [pc, #28]	; (1dd6c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   1dd50:	4628      	mov	r0, r5
   1dd52:	60e5      	str	r5, [r4, #12]
   1dd54:	f003 f9c6 	bl	210e4 <malloc>
   1dd58:	60a0      	str	r0, [r4, #8]
   1dd5a:	b910      	cbnz	r0, 1dd62 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
   1dd5c:	60e0      	str	r0, [r4, #12]
   1dd5e:	6060      	str	r0, [r4, #4]
   1dd60:	bd38      	pop	{r3, r4, r5, pc}
   1dd62:	2300      	movs	r3, #0
   1dd64:	6060      	str	r0, [r4, #4]
   1dd66:	6005      	str	r5, [r0, #0]
   1dd68:	6043      	str	r3, [r0, #4]
   1dd6a:	e7f9      	b.n	1dd60 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
   1dd6c:	20024efc 	.word	0x20024efc

0001dd70 <_ZGTtNKSt9exception4whatEv>:
   1dd70:	4800      	ldr	r0, [pc, #0]	; (1dd74 <_ZGTtNKSt9exception4whatEv+0x4>)
   1dd72:	4770      	bx	lr
   1dd74:	0002ca66 	.word	0x0002ca66

0001dd78 <_ZGTtNKSt13bad_exception4whatEv>:
   1dd78:	4800      	ldr	r0, [pc, #0]	; (1dd7c <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   1dd7a:	4770      	bx	lr
   1dd7c:	0002ca75 	.word	0x0002ca75

0001dd80 <_ZSt13get_terminatev>:
   1dd80:	4b01      	ldr	r3, [pc, #4]	; (1dd88 <_ZSt13get_terminatev+0x8>)
   1dd82:	e8d3 0faf 	lda	r0, [r3]
   1dd86:	4770      	bx	lr
   1dd88:	20020060 	.word	0x20020060

0001dd8c <_ZSt14get_unexpectedv>:
   1dd8c:	4b01      	ldr	r3, [pc, #4]	; (1dd94 <_ZSt14get_unexpectedv+0x8>)
   1dd8e:	e8d3 0faf 	lda	r0, [r3]
   1dd92:	4770      	bx	lr
   1dd94:	2002005c 	.word	0x2002005c

0001dd98 <__cxa_init_primary_exception>:
   1dd98:	b538      	push	{r3, r4, r5, lr}
   1dd9a:	2500      	movs	r5, #0
   1dd9c:	4604      	mov	r4, r0
   1dd9e:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
   1dda2:	f840 5c80 	str.w	r5, [r0, #-128]
   1dda6:	f7ff fff1 	bl	1dd8c <_ZSt14get_unexpectedv>
   1ddaa:	f844 0c70 	str.w	r0, [r4, #-112]
   1ddae:	f7ff ffe7 	bl	1dd80 <_ZSt13get_terminatev>
   1ddb2:	2347      	movs	r3, #71	; 0x47
   1ddb4:	f844 0c6c 	str.w	r0, [r4, #-108]
   1ddb8:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
   1ddbc:	f804 3c58 	strb.w	r3, [r4, #-88]
   1ddc0:	234e      	movs	r3, #78	; 0x4e
   1ddc2:	f804 5c51 	strb.w	r5, [r4, #-81]
   1ddc6:	f804 3c57 	strb.w	r3, [r4, #-87]
   1ddca:	2355      	movs	r3, #85	; 0x55
   1ddcc:	f804 3c56 	strb.w	r3, [r4, #-86]
   1ddd0:	2343      	movs	r3, #67	; 0x43
   1ddd2:	f804 3c55 	strb.w	r3, [r4, #-85]
   1ddd6:	f804 3c54 	strb.w	r3, [r4, #-84]
   1ddda:	232b      	movs	r3, #43	; 0x2b
   1dddc:	f804 3c53 	strb.w	r3, [r4, #-83]
   1dde0:	f804 3c52 	strb.w	r3, [r4, #-82]
   1dde4:	4b01      	ldr	r3, [pc, #4]	; (1ddec <__cxa_init_primary_exception+0x54>)
   1dde6:	f844 3c50 	str.w	r3, [r4, #-80]
   1ddea:	bd38      	pop	{r3, r4, r5, pc}
   1ddec:	00023e01 	.word	0x00023e01

0001ddf0 <_Znwj>:
   1ddf0:	2801      	cmp	r0, #1
   1ddf2:	bf38      	it	cc
   1ddf4:	2001      	movcc	r0, #1
   1ddf6:	b510      	push	{r4, lr}
   1ddf8:	4604      	mov	r4, r0
   1ddfa:	4620      	mov	r0, r4
   1ddfc:	f003 f972 	bl	210e4 <malloc>
   1de00:	b968      	cbnz	r0, 1de1e <_Znwj+0x2e>
   1de02:	f000 faa3 	bl	1e34c <_ZSt15get_new_handlerv>
   1de06:	b940      	cbnz	r0, 1de1a <_Znwj+0x2a>
   1de08:	2004      	movs	r0, #4
   1de0a:	f005 ffb9 	bl	23d80 <__cxa_allocate_exception>
   1de0e:	4b04      	ldr	r3, [pc, #16]	; (1de20 <_Znwj+0x30>)
   1de10:	4a04      	ldr	r2, [pc, #16]	; (1de24 <_Znwj+0x34>)
   1de12:	4905      	ldr	r1, [pc, #20]	; (1de28 <_Znwj+0x38>)
   1de14:	6003      	str	r3, [r0, #0]
   1de16:	f006 f814 	bl	23e42 <__cxa_throw>
   1de1a:	4780      	blx	r0
   1de1c:	e7ed      	b.n	1ddfa <_Znwj+0xa>
   1de1e:	bd10      	pop	{r4, pc}
   1de20:	0002a8e8 	.word	0x0002a8e8
   1de24:	0001de35 	.word	0x0001de35
   1de28:	0002a8d4 	.word	0x0002a8d4

0001de2c <_ZNKSt9bad_alloc4whatEv>:
   1de2c:	4800      	ldr	r0, [pc, #0]	; (1de30 <_ZNKSt9bad_alloc4whatEv+0x4>)
   1de2e:	4770      	bx	lr
   1de30:	0002caeb 	.word	0x0002caeb

0001de34 <_ZNSt9bad_allocD1Ev>:
   1de34:	4b03      	ldr	r3, [pc, #12]	; (1de44 <_ZNSt9bad_allocD1Ev+0x10>)
   1de36:	b510      	push	{r4, lr}
   1de38:	4604      	mov	r4, r0
   1de3a:	6003      	str	r3, [r0, #0]
   1de3c:	f005 ffb6 	bl	23dac <_ZNSt9exceptionD1Ev>
   1de40:	4620      	mov	r0, r4
   1de42:	bd10      	pop	{r4, pc}
   1de44:	0002a8e8 	.word	0x0002a8e8

0001de48 <__cxa_type_match>:
   1de48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1de4c:	461d      	mov	r5, r3
   1de4e:	7803      	ldrb	r3, [r0, #0]
   1de50:	460e      	mov	r6, r1
   1de52:	4602      	mov	r2, r0
   1de54:	2b47      	cmp	r3, #71	; 0x47
   1de56:	79c1      	ldrb	r1, [r0, #7]
   1de58:	d113      	bne.n	1de82 <__cxa_type_match+0x3a>
   1de5a:	7843      	ldrb	r3, [r0, #1]
   1de5c:	2b4e      	cmp	r3, #78	; 0x4e
   1de5e:	d110      	bne.n	1de82 <__cxa_type_match+0x3a>
   1de60:	7883      	ldrb	r3, [r0, #2]
   1de62:	2b55      	cmp	r3, #85	; 0x55
   1de64:	d10d      	bne.n	1de82 <__cxa_type_match+0x3a>
   1de66:	78c3      	ldrb	r3, [r0, #3]
   1de68:	2b43      	cmp	r3, #67	; 0x43
   1de6a:	d10a      	bne.n	1de82 <__cxa_type_match+0x3a>
   1de6c:	7903      	ldrb	r3, [r0, #4]
   1de6e:	2b46      	cmp	r3, #70	; 0x46
   1de70:	d107      	bne.n	1de82 <__cxa_type_match+0x3a>
   1de72:	7943      	ldrb	r3, [r0, #5]
   1de74:	2b4f      	cmp	r3, #79	; 0x4f
   1de76:	d104      	bne.n	1de82 <__cxa_type_match+0x3a>
   1de78:	7983      	ldrb	r3, [r0, #6]
   1de7a:	2b52      	cmp	r3, #82	; 0x52
   1de7c:	d101      	bne.n	1de82 <__cxa_type_match+0x3a>
   1de7e:	2900      	cmp	r1, #0
   1de80:	d030      	beq.n	1dee4 <__cxa_type_match+0x9c>
   1de82:	4610      	mov	r0, r2
   1de84:	f006 f83e 	bl	23f04 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   1de88:	f080 0001 	eor.w	r0, r0, #1
   1de8c:	2300      	movs	r3, #0
   1de8e:	b2c0      	uxtb	r0, r0
   1de90:	2400      	movs	r4, #0
   1de92:	9401      	str	r4, [sp, #4]
   1de94:	bb4b      	cbnz	r3, 1deea <__cxa_type_match+0xa2>
   1de96:	bb50      	cbnz	r0, 1deee <__cxa_type_match+0xa6>
   1de98:	2901      	cmp	r1, #1
   1de9a:	bf0a      	itet	eq
   1de9c:	f852 3c20 	ldreq.w	r3, [r2, #-32]
   1dea0:	f1a2 0320 	subne.w	r3, r2, #32
   1dea4:	3b78      	subeq	r3, #120	; 0x78
   1dea6:	2901      	cmp	r1, #1
   1dea8:	bf0c      	ite	eq
   1deaa:	f852 2c20 	ldreq.w	r2, [r2, #-32]
   1deae:	3258      	addne	r2, #88	; 0x58
   1deb0:	681c      	ldr	r4, [r3, #0]
   1deb2:	9201      	str	r2, [sp, #4]
   1deb4:	6823      	ldr	r3, [r4, #0]
   1deb6:	4620      	mov	r0, r4
   1deb8:	689b      	ldr	r3, [r3, #8]
   1deba:	4798      	blx	r3
   1debc:	b1c8      	cbz	r0, 1def2 <__cxa_type_match+0xaa>
   1debe:	9b01      	ldr	r3, [sp, #4]
   1dec0:	2702      	movs	r7, #2
   1dec2:	681b      	ldr	r3, [r3, #0]
   1dec4:	9301      	str	r3, [sp, #4]
   1dec6:	6833      	ldr	r3, [r6, #0]
   1dec8:	aa01      	add	r2, sp, #4
   1deca:	4621      	mov	r1, r4
   1decc:	4630      	mov	r0, r6
   1dece:	f8d3 8010 	ldr.w	r8, [r3, #16]
   1ded2:	2301      	movs	r3, #1
   1ded4:	47c0      	blx	r8
   1ded6:	b170      	cbz	r0, 1def6 <__cxa_type_match+0xae>
   1ded8:	9b01      	ldr	r3, [sp, #4]
   1deda:	602b      	str	r3, [r5, #0]
   1dedc:	4638      	mov	r0, r7
   1dede:	b002      	add	sp, #8
   1dee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dee4:	2301      	movs	r3, #1
   1dee6:	4608      	mov	r0, r1
   1dee8:	e7d2      	b.n	1de90 <__cxa_type_match+0x48>
   1deea:	4c04      	ldr	r4, [pc, #16]	; (1defc <__cxa_type_match+0xb4>)
   1deec:	e7e2      	b.n	1deb4 <__cxa_type_match+0x6c>
   1deee:	4c04      	ldr	r4, [pc, #16]	; (1df00 <__cxa_type_match+0xb8>)
   1def0:	e7e0      	b.n	1deb4 <__cxa_type_match+0x6c>
   1def2:	2701      	movs	r7, #1
   1def4:	e7e7      	b.n	1dec6 <__cxa_type_match+0x7e>
   1def6:	4607      	mov	r7, r0
   1def8:	e7f0      	b.n	1dedc <__cxa_type_match+0x94>
   1defa:	bf00      	nop
   1defc:	0002a89c 	.word	0x0002a89c
   1df00:	0002a8a4 	.word	0x0002a8a4

0001df04 <__cxa_call_unexpected>:
   1df04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df08:	ed2d 8b02 	vpush	{d8}
   1df0c:	b085      	sub	sp, #20
   1df0e:	4602      	mov	r2, r0
   1df10:	f006 f84b 	bl	23faa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   1df14:	b188      	cbz	r0, 1df3a <__cxa_call_unexpected+0x36>
   1df16:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
   1df1a:	2600      	movs	r6, #0
   1df1c:	e952 7406 	ldrd	r7, r4, [r2, #-24]
   1df20:	e9d2 850c 	ldrd	r8, r5, [r2, #48]	; 0x30
   1df24:	4610      	mov	r0, r2
   1df26:	f006 f889 	bl	2403c <__cxa_begin_catch>
   1df2a:	b16e      	cbz	r6, 1df48 <__cxa_call_unexpected+0x44>
   1df2c:	f005 ff63 	bl	23df6 <_ZSt10unexpectedv>
   1df30:	f006 f884 	bl	2403c <__cxa_begin_catch>
   1df34:	b15e      	cbz	r6, 1df4e <__cxa_call_unexpected+0x4a>
   1df36:	f005 ff55 	bl	23de4 <_ZSt9terminatev>
   1df3a:	4604      	mov	r4, r0
   1df3c:	4607      	mov	r7, r0
   1df3e:	2601      	movs	r6, #1
   1df40:	4605      	mov	r5, r0
   1df42:	4680      	mov	r8, r0
   1df44:	4682      	mov	sl, r0
   1df46:	e7ed      	b.n	1df24 <__cxa_call_unexpected+0x20>
   1df48:	4638      	mov	r0, r7
   1df4a:	f005 ff50 	bl	23dee <_ZN10__cxxabiv112__unexpectedEPFvvE>
   1df4e:	f000 f851 	bl	1dff4 <__cxa_get_globals_fast>
   1df52:	6807      	ldr	r7, [r0, #0]
   1df54:	f04f 0900 	mov.w	r9, #0
   1df58:	f8df b094 	ldr.w	fp, [pc, #148]	; 1dff0 <__cxa_call_unexpected+0xec>
   1df5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1df60:	2b01      	cmp	r3, #1
   1df62:	bf0c      	ite	eq
   1df64:	683b      	ldreq	r3, [r7, #0]
   1df66:	f107 0378 	addne.w	r3, r7, #120	; 0x78
   1df6a:	9302      	str	r3, [sp, #8]
   1df6c:	f028 0303 	bic.w	r3, r8, #3
   1df70:	9301      	str	r3, [sp, #4]
   1df72:	f107 0320 	add.w	r3, r7, #32
   1df76:	ee08 3a10 	vmov	s16, r3
   1df7a:	45ca      	cmp	sl, r9
   1df7c:	dd27      	ble.n	1dfce <__cxa_call_unexpected+0xca>
   1df7e:	f8d5 8000 	ldr.w	r8, [r5]
   1df82:	f1b8 0f00 	cmp.w	r8, #0
   1df86:	d000      	beq.n	1df8a <__cxa_call_unexpected+0x86>
   1df88:	44a8      	add	r8, r5
   1df8a:	ab02      	add	r3, sp, #8
   1df8c:	2200      	movs	r2, #0
   1df8e:	4641      	mov	r1, r8
   1df90:	ee18 0a10 	vmov	r0, s16
   1df94:	f7ff ff58 	bl	1de48 <__cxa_type_match>
   1df98:	b138      	cbz	r0, 1dfaa <__cxa_call_unexpected+0xa6>
   1df9a:	f005 ff6c 	bl	23e76 <__cxa_rethrow>
   1df9e:	f006 f876 	bl	2408e <__cxa_end_catch>
   1dfa2:	f006 f874 	bl	2408e <__cxa_end_catch>
   1dfa6:	f005 ffa7 	bl	23ef8 <__cxa_end_cleanup>
   1dfaa:	f8d8 3000 	ldr.w	r3, [r8]
   1dfae:	aa03      	add	r2, sp, #12
   1dfb0:	9003      	str	r0, [sp, #12]
   1dfb2:	4659      	mov	r1, fp
   1dfb4:	691b      	ldr	r3, [r3, #16]
   1dfb6:	4640      	mov	r0, r8
   1dfb8:	461f      	mov	r7, r3
   1dfba:	2301      	movs	r3, #1
   1dfbc:	47b8      	blx	r7
   1dfbe:	9b01      	ldr	r3, [sp, #4]
   1dfc0:	2800      	cmp	r0, #0
   1dfc2:	bf18      	it	ne
   1dfc4:	4606      	movne	r6, r0
   1dfc6:	f109 0901 	add.w	r9, r9, #1
   1dfca:	441d      	add	r5, r3
   1dfcc:	e7d5      	b.n	1df7a <__cxa_call_unexpected+0x76>
   1dfce:	b146      	cbz	r6, 1dfe2 <__cxa_call_unexpected+0xde>
   1dfd0:	2004      	movs	r0, #4
   1dfd2:	f005 fed5 	bl	23d80 <__cxa_allocate_exception>
   1dfd6:	4b04      	ldr	r3, [pc, #16]	; (1dfe8 <__cxa_call_unexpected+0xe4>)
   1dfd8:	4a04      	ldr	r2, [pc, #16]	; (1dfec <__cxa_call_unexpected+0xe8>)
   1dfda:	4905      	ldr	r1, [pc, #20]	; (1dff0 <__cxa_call_unexpected+0xec>)
   1dfdc:	6003      	str	r3, [r0, #0]
   1dfde:	f005 ff30 	bl	23e42 <__cxa_throw>
   1dfe2:	4620      	mov	r0, r4
   1dfe4:	f005 feeb 	bl	23dbe <_ZN10__cxxabiv111__terminateEPFvvE>
   1dfe8:	0002a8c8 	.word	0x0002a8c8
   1dfec:	00023daf 	.word	0x00023daf
   1dff0:	0002a8ac 	.word	0x0002a8ac

0001dff4 <__cxa_get_globals_fast>:
   1dff4:	4800      	ldr	r0, [pc, #0]	; (1dff8 <__cxa_get_globals_fast+0x4>)
   1dff6:	4770      	bx	lr
   1dff8:	20024f0c 	.word	0x20024f0c

0001dffc <__cxa_get_globals>:
   1dffc:	4800      	ldr	r0, [pc, #0]	; (1e000 <__cxa_get_globals+0x4>)
   1dffe:	4770      	bx	lr
   1e000:	20024f0c 	.word	0x20024f0c

0001e004 <__gxx_personality_v0>:
   1e004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e008:	2300      	movs	r3, #0
   1e00a:	b091      	sub	sp, #68	; 0x44
   1e00c:	4606      	mov	r6, r0
   1e00e:	460c      	mov	r4, r1
   1e010:	9305      	str	r3, [sp, #20]
   1e012:	f000 0303 	and.w	r3, r0, #3
   1e016:	4617      	mov	r7, r2
   1e018:	2b01      	cmp	r3, #1
   1e01a:	d00e      	beq.n	1e03a <__gxx_personality_v0+0x36>
   1e01c:	2b02      	cmp	r3, #2
   1e01e:	d003      	beq.n	1e028 <__gxx_personality_v0+0x24>
   1e020:	2b00      	cmp	r3, #0
   1e022:	d13b      	bne.n	1e09c <__gxx_personality_v0+0x98>
   1e024:	0701      	lsls	r1, r0, #28
   1e026:	d53b      	bpl.n	1e0a0 <__gxx_personality_v0+0x9c>
   1e028:	4639      	mov	r1, r7
   1e02a:	4620      	mov	r0, r4
   1e02c:	f7f7 f926 	bl	1527c <__gnu_unwind_frame>
   1e030:	b390      	cbz	r0, 1e098 <__gxx_personality_v0+0x94>
   1e032:	2009      	movs	r0, #9
   1e034:	b011      	add	sp, #68	; 0x44
   1e036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e03a:	0702      	lsls	r2, r0, #28
   1e03c:	d406      	bmi.n	1e04c <__gxx_personality_v0+0x48>
   1e03e:	6a0d      	ldr	r5, [r1, #32]
   1e040:	4638      	mov	r0, r7
   1e042:	210d      	movs	r1, #13
   1e044:	f006 f918 	bl	24278 <_Unwind_GetGR>
   1e048:	4285      	cmp	r5, r0
   1e04a:	d02b      	beq.n	1e0a4 <__gxx_personality_v0+0xa0>
   1e04c:	2002      	movs	r0, #2
   1e04e:	f006 0608 	and.w	r6, r6, #8
   1e052:	2300      	movs	r3, #0
   1e054:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
   1e058:	220c      	movs	r2, #12
   1e05a:	4306      	orrs	r6, r0
   1e05c:	4619      	mov	r1, r3
   1e05e:	4638      	mov	r0, r7
   1e060:	f8cd a000 	str.w	sl, [sp]
   1e064:	940a      	str	r4, [sp, #40]	; 0x28
   1e066:	f7f6 fb5f 	bl	14728 <_Unwind_VRS_Set>
   1e06a:	2e06      	cmp	r6, #6
   1e06c:	d11c      	bne.n	1e0a8 <__gxx_personality_v0+0xa4>
   1e06e:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   1e072:	f1b8 0f00 	cmp.w	r8, #0
   1e076:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
   1e07a:	bf0c      	ite	eq
   1e07c:	f04f 0b01 	moveq.w	fp, #1
   1e080:	f04f 0b03 	movne.w	fp, #3
   1e084:	f016 0608 	ands.w	r6, r6, #8
   1e088:	f000 810f 	beq.w	1e2aa <__gxx_personality_v0+0x2a6>
   1e08c:	f1bb 0f01 	cmp.w	fp, #1
   1e090:	f040 8104 	bne.w	1e29c <__gxx_personality_v0+0x298>
   1e094:	f005 fea6 	bl	23de4 <_ZSt9terminatev>
   1e098:	2008      	movs	r0, #8
   1e09a:	e7cb      	b.n	1e034 <__gxx_personality_v0+0x30>
   1e09c:	f006 f9d8 	bl	24450 <abort>
   1e0a0:	2001      	movs	r0, #1
   1e0a2:	e7d4      	b.n	1e04e <__gxx_personality_v0+0x4a>
   1e0a4:	2006      	movs	r0, #6
   1e0a6:	e7d2      	b.n	1e04e <__gxx_personality_v0+0x4a>
   1e0a8:	4638      	mov	r0, r7
   1e0aa:	f7f7 f903 	bl	152b4 <_Unwind_GetLanguageSpecificData>
   1e0ae:	4681      	mov	r9, r0
   1e0b0:	2800      	cmp	r0, #0
   1e0b2:	d0b9      	beq.n	1e028 <__gxx_personality_v0+0x24>
   1e0b4:	4652      	mov	r2, sl
   1e0b6:	4601      	mov	r1, r0
   1e0b8:	4638      	mov	r0, r7
   1e0ba:	f006 f8ac 	bl	24216 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1e0be:	4639      	mov	r1, r7
   1e0c0:	4605      	mov	r5, r0
   1e0c2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   1e0c6:	f006 f871 	bl	241ac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1e0ca:	210f      	movs	r1, #15
   1e0cc:	900c      	str	r0, [sp, #48]	; 0x30
   1e0ce:	4638      	mov	r0, r7
   1e0d0:	f006 f8d2 	bl	24278 <_Unwind_GetGR>
   1e0d4:	f020 0801 	bic.w	r8, r0, #1
   1e0d8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1e0dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e0de:	42ab      	cmp	r3, r5
   1e0e0:	f240 80c4 	bls.w	1e26c <__gxx_personality_v0+0x268>
   1e0e4:	462a      	mov	r2, r5
   1e0e6:	ab06      	add	r3, sp, #24
   1e0e8:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
   1e0ec:	2000      	movs	r0, #0
   1e0ee:	f006 f881 	bl	241f4 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
   1e0f2:	ab07      	add	r3, sp, #28
   1e0f4:	4602      	mov	r2, r0
   1e0f6:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
   1e0fa:	2000      	movs	r0, #0
   1e0fc:	f006 f87a 	bl	241f4 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
   1e100:	ab08      	add	r3, sp, #32
   1e102:	4602      	mov	r2, r0
   1e104:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
   1e108:	2000      	movs	r0, #0
   1e10a:	f006 f873 	bl	241f4 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
   1e10e:	a909      	add	r1, sp, #36	; 0x24
   1e110:	f005 ffe1 	bl	240d6 <_ZL12read_uleb128PKhPm>
   1e114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e116:	9a06      	ldr	r2, [sp, #24]
   1e118:	4605      	mov	r5, r0
   1e11a:	4413      	add	r3, r2
   1e11c:	4543      	cmp	r3, r8
   1e11e:	d901      	bls.n	1e124 <__gxx_personality_v0+0x120>
   1e120:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1e122:	e7db      	b.n	1e0dc <__gxx_personality_v0+0xd8>
   1e124:	9a07      	ldr	r2, [sp, #28]
   1e126:	4413      	add	r3, r2
   1e128:	4543      	cmp	r3, r8
   1e12a:	d9d7      	bls.n	1e0dc <__gxx_personality_v0+0xd8>
   1e12c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1e130:	f1b8 0f00 	cmp.w	r8, #0
   1e134:	d001      	beq.n	1e13a <__gxx_personality_v0+0x136>
   1e136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e138:	4498      	add	r8, r3
   1e13a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1e13c:	b115      	cbz	r5, 1e144 <__gxx_personality_v0+0x140>
   1e13e:	3d01      	subs	r5, #1
   1e140:	980e      	ldr	r0, [sp, #56]	; 0x38
   1e142:	4405      	add	r5, r0
   1e144:	f1b8 0f00 	cmp.w	r8, #0
   1e148:	f43f af6e 	beq.w	1e028 <__gxx_personality_v0+0x24>
   1e14c:	2d00      	cmp	r5, #0
   1e14e:	f000 80fa 	beq.w	1e346 <__gxx_personality_v0+0x342>
   1e152:	f016 0308 	ands.w	r3, r6, #8
   1e156:	9302      	str	r3, [sp, #8]
   1e158:	d034      	beq.n	1e1c4 <__gxx_personality_v0+0x1c0>
   1e15a:	2347      	movs	r3, #71	; 0x47
   1e15c:	7023      	strb	r3, [r4, #0]
   1e15e:	234e      	movs	r3, #78	; 0x4e
   1e160:	7063      	strb	r3, [r4, #1]
   1e162:	2355      	movs	r3, #85	; 0x55
   1e164:	70a3      	strb	r3, [r4, #2]
   1e166:	2343      	movs	r3, #67	; 0x43
   1e168:	70e3      	strb	r3, [r4, #3]
   1e16a:	2346      	movs	r3, #70	; 0x46
   1e16c:	7123      	strb	r3, [r4, #4]
   1e16e:	234f      	movs	r3, #79	; 0x4f
   1e170:	7163      	strb	r3, [r4, #5]
   1e172:	2352      	movs	r3, #82	; 0x52
   1e174:	71a3      	strb	r3, [r4, #6]
   1e176:	2300      	movs	r3, #0
   1e178:	71e3      	strb	r3, [r4, #7]
   1e17a:	f04f 0b00 	mov.w	fp, #0
   1e17e:	a907      	add	r1, sp, #28
   1e180:	4628      	mov	r0, r5
   1e182:	f005 ffb6 	bl	240f2 <_ZL12read_sleb128PKhPl>
   1e186:	a908      	add	r1, sp, #32
   1e188:	9003      	str	r0, [sp, #12]
   1e18a:	f005 ffb2 	bl	240f2 <_ZL12read_sleb128PKhPl>
   1e18e:	9907      	ldr	r1, [sp, #28]
   1e190:	2900      	cmp	r1, #0
   1e192:	d068      	beq.n	1e266 <__gxx_personality_v0+0x262>
   1e194:	dd3a      	ble.n	1e20c <__gxx_personality_v0+0x208>
   1e196:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   1e19a:	28ff      	cmp	r0, #255	; 0xff
   1e19c:	d032      	beq.n	1e204 <__gxx_personality_v0+0x200>
   1e19e:	f000 0307 	and.w	r3, r0, #7
   1e1a2:	2b04      	cmp	r3, #4
   1e1a4:	f63f af7a 	bhi.w	1e09c <__gxx_personality_v0+0x98>
   1e1a8:	a201      	add	r2, pc, #4	; (adr r2, 1e1b0 <__gxx_personality_v0+0x1ac>)
   1e1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e1ae:	bf00      	nop
   1e1b0:	0001e209 	.word	0x0001e209
   1e1b4:	0001e09d 	.word	0x0001e09d
   1e1b8:	0001e1d7 	.word	0x0001e1d7
   1e1bc:	0001e209 	.word	0x0001e209
   1e1c0:	0001e201 	.word	0x0001e201
   1e1c4:	79e3      	ldrb	r3, [r4, #7]
   1e1c6:	2b01      	cmp	r3, #1
   1e1c8:	bf0c      	ite	eq
   1e1ca:	f854 3c20 	ldreq.w	r3, [r4, #-32]
   1e1ce:	f104 0358 	addne.w	r3, r4, #88	; 0x58
   1e1d2:	9305      	str	r3, [sp, #20]
   1e1d4:	e7d1      	b.n	1e17a <__gxx_personality_v0+0x176>
   1e1d6:	2502      	movs	r5, #2
   1e1d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1e1da:	ab09      	add	r3, sp, #36	; 0x24
   1e1dc:	fb05 2211 	mls	r2, r5, r1, r2
   1e1e0:	990c      	ldr	r1, [sp, #48]	; 0x30
   1e1e2:	f005 ff9d 	bl	24120 <_ZL28read_encoded_value_with_basehjPKhPj>
   1e1e6:	9909      	ldr	r1, [sp, #36]	; 0x24
   1e1e8:	b131      	cbz	r1, 1e1f8 <__gxx_personality_v0+0x1f4>
   1e1ea:	b37c      	cbz	r4, 1e24c <__gxx_personality_v0+0x248>
   1e1ec:	ab05      	add	r3, sp, #20
   1e1ee:	2200      	movs	r2, #0
   1e1f0:	4620      	mov	r0, r4
   1e1f2:	f7ff fe29 	bl	1de48 <__cxa_type_match>
   1e1f6:	b348      	cbz	r0, 1e24c <__gxx_personality_v0+0x248>
   1e1f8:	9d07      	ldr	r5, [sp, #28]
   1e1fa:	f04f 0b03 	mov.w	fp, #3
   1e1fe:	e039      	b.n	1e274 <__gxx_personality_v0+0x270>
   1e200:	2508      	movs	r5, #8
   1e202:	e7e9      	b.n	1e1d8 <__gxx_personality_v0+0x1d4>
   1e204:	2500      	movs	r5, #0
   1e206:	e7e7      	b.n	1e1d8 <__gxx_personality_v0+0x1d4>
   1e208:	2504      	movs	r5, #4
   1e20a:	e7e5      	b.n	1e1d8 <__gxx_personality_v0+0x1d4>
   1e20c:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
   1e210:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1e212:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
   1e216:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
   1e21a:	313f      	adds	r1, #63	; 0x3f
   1e21c:	eb03 0581 	add.w	r5, r3, r1, lsl #2
   1e220:	b1dc      	cbz	r4, 1e25a <__gxx_personality_v0+0x256>
   1e222:	9a02      	ldr	r2, [sp, #8]
   1e224:	b9ca      	cbnz	r2, 1e25a <__gxx_personality_v0+0x256>
   1e226:	9b05      	ldr	r3, [sp, #20]
   1e228:	3d04      	subs	r5, #4
   1e22a:	9309      	str	r3, [sp, #36]	; 0x24
   1e22c:	f855 1f04 	ldr.w	r1, [r5, #4]!
   1e230:	b141      	cbz	r1, 1e244 <__gxx_personality_v0+0x240>
   1e232:	ab09      	add	r3, sp, #36	; 0x24
   1e234:	2200      	movs	r2, #0
   1e236:	4429      	add	r1, r5
   1e238:	4620      	mov	r0, r4
   1e23a:	f7ff fe05 	bl	1de48 <__cxa_type_match>
   1e23e:	2800      	cmp	r0, #0
   1e240:	d0f4      	beq.n	1e22c <__gxx_personality_v0+0x228>
   1e242:	2101      	movs	r1, #1
   1e244:	f081 0101 	eor.w	r1, r1, #1
   1e248:	2900      	cmp	r1, #0
   1e24a:	d1d5      	bne.n	1e1f8 <__gxx_personality_v0+0x1f4>
   1e24c:	9d08      	ldr	r5, [sp, #32]
   1e24e:	2d00      	cmp	r5, #0
   1e250:	d075      	beq.n	1e33e <__gxx_personality_v0+0x33a>
   1e252:	9b03      	ldr	r3, [sp, #12]
   1e254:	442b      	add	r3, r5
   1e256:	461d      	mov	r5, r3
   1e258:	e791      	b.n	1e17e <__gxx_personality_v0+0x17a>
   1e25a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   1e25e:	fab1 f181 	clz	r1, r1
   1e262:	0949      	lsrs	r1, r1, #5
   1e264:	e7f0      	b.n	1e248 <__gxx_personality_v0+0x244>
   1e266:	f04f 0b01 	mov.w	fp, #1
   1e26a:	e7ef      	b.n	1e24c <__gxx_personality_v0+0x248>
   1e26c:	2500      	movs	r5, #0
   1e26e:	f04f 0b01 	mov.w	fp, #1
   1e272:	46a8      	mov	r8, r5
   1e274:	07f3      	lsls	r3, r6, #31
   1e276:	f57f af05 	bpl.w	1e084 <__gxx_personality_v0+0x80>
   1e27a:	f1bb 0f02 	cmp.w	fp, #2
   1e27e:	f43f aed3 	beq.w	1e028 <__gxx_personality_v0+0x24>
   1e282:	9e05      	ldr	r6, [sp, #20]
   1e284:	210d      	movs	r1, #13
   1e286:	4638      	mov	r0, r7
   1e288:	f005 fff6 	bl	24278 <_Unwind_GetGR>
   1e28c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
   1e290:	e9c4 0608 	strd	r0, r6, [r4, #32]
   1e294:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
   1e298:	2006      	movs	r0, #6
   1e29a:	e6cb      	b.n	1e034 <__gxx_personality_v0+0x30>
   1e29c:	2d00      	cmp	r5, #0
   1e29e:	da25      	bge.n	1e2ec <__gxx_personality_v0+0x2e8>
   1e2a0:	f005 fda9 	bl	23df6 <_ZSt10unexpectedv>
   1e2a4:	f005 feca 	bl	2403c <__cxa_begin_catch>
   1e2a8:	e6f4      	b.n	1e094 <__gxx_personality_v0+0x90>
   1e2aa:	f1bb 0f01 	cmp.w	fp, #1
   1e2ae:	d102      	bne.n	1e2b6 <__gxx_personality_v0+0x2b2>
   1e2b0:	4620      	mov	r0, r4
   1e2b2:	f005 fe97 	bl	23fe4 <__cxa_call_terminate>
   1e2b6:	2d00      	cmp	r5, #0
   1e2b8:	da18      	bge.n	1e2ec <__gxx_personality_v0+0x2e8>
   1e2ba:	4652      	mov	r2, sl
   1e2bc:	4649      	mov	r1, r9
   1e2be:	4638      	mov	r0, r7
   1e2c0:	f005 ffa9 	bl	24216 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   1e2c4:	4639      	mov	r1, r7
   1e2c6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   1e2ca:	f005 ff6f 	bl	241ac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   1e2ce:	43eb      	mvns	r3, r5
   1e2d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1e2d2:	900c      	str	r0, [sp, #48]	; 0x30
   1e2d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1e2d8:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
   1e2dc:	b10a      	cbz	r2, 1e2e2 <__gxx_personality_v0+0x2de>
   1e2de:	3601      	adds	r6, #1
   1e2e0:	e7fa      	b.n	1e2d8 <__gxx_personality_v0+0x2d4>
   1e2e2:	2204      	movs	r2, #4
   1e2e4:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
   1e2e8:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   1e2ec:	2300      	movs	r3, #0
   1e2ee:	ae09      	add	r6, sp, #36	; 0x24
   1e2f0:	4638      	mov	r0, r7
   1e2f2:	9409      	str	r4, [sp, #36]	; 0x24
   1e2f4:	461a      	mov	r2, r3
   1e2f6:	4619      	mov	r1, r3
   1e2f8:	9600      	str	r6, [sp, #0]
   1e2fa:	f7f6 fa15 	bl	14728 <_Unwind_VRS_Set>
   1e2fe:	2300      	movs	r3, #0
   1e300:	2201      	movs	r2, #1
   1e302:	4638      	mov	r0, r7
   1e304:	4619      	mov	r1, r3
   1e306:	9600      	str	r6, [sp, #0]
   1e308:	9509      	str	r5, [sp, #36]	; 0x24
   1e30a:	f7f6 fa0d 	bl	14728 <_Unwind_VRS_Set>
   1e30e:	210f      	movs	r1, #15
   1e310:	4638      	mov	r0, r7
   1e312:	f005 ffb1 	bl	24278 <_Unwind_GetGR>
   1e316:	f000 0001 	and.w	r0, r0, #1
   1e31a:	2300      	movs	r3, #0
   1e31c:	220f      	movs	r2, #15
   1e31e:	ea40 0008 	orr.w	r0, r0, r8
   1e322:	9600      	str	r6, [sp, #0]
   1e324:	4619      	mov	r1, r3
   1e326:	9009      	str	r0, [sp, #36]	; 0x24
   1e328:	4638      	mov	r0, r7
   1e32a:	f7f6 f9fd 	bl	14728 <_Unwind_VRS_Set>
   1e32e:	f1bb 0f02 	cmp.w	fp, #2
   1e332:	d102      	bne.n	1e33a <__gxx_personality_v0+0x336>
   1e334:	4620      	mov	r0, r4
   1e336:	f005 fe02 	bl	23f3e <__cxa_begin_cleanup>
   1e33a:	2007      	movs	r0, #7
   1e33c:	e67a      	b.n	1e034 <__gxx_personality_v0+0x30>
   1e33e:	f1bb 0f00 	cmp.w	fp, #0
   1e342:	f43f ae71 	beq.w	1e028 <__gxx_personality_v0+0x24>
   1e346:	f04f 0b02 	mov.w	fp, #2
   1e34a:	e793      	b.n	1e274 <__gxx_personality_v0+0x270>

0001e34c <_ZSt15get_new_handlerv>:
   1e34c:	4b01      	ldr	r3, [pc, #4]	; (1e354 <_ZSt15get_new_handlerv+0x8>)
   1e34e:	e8d3 0faf 	lda	r0, [r3]
   1e352:	4770      	bx	lr
   1e354:	20024f18 	.word	0x20024f18

0001e358 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   1e358:	4b32      	ldr	r3, [pc, #200]	; (1e424 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>)
   1e35a:	781a      	ldrb	r2, [r3, #0]
   1e35c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e35e:	4c32      	ldr	r4, [pc, #200]	; (1e428 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>)
   1e360:	b132      	cbz	r2, 1e370 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x18>
   1e362:	6823      	ldr	r3, [r4, #0]
   1e364:	4831      	ldr	r0, [pc, #196]	; (1e42c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd4>)
   1e366:	68d9      	ldr	r1, [r3, #12]
   1e368:	f002 fd24 	bl	20db4 <fputs>
   1e36c:	f006 f870 	bl	24450 <abort>
   1e370:	2201      	movs	r2, #1
   1e372:	701a      	strb	r2, [r3, #0]
   1e374:	f005 ff8c 	bl	24290 <__cxa_current_exception_type>
   1e378:	2800      	cmp	r0, #0
   1e37a:	d038      	beq.n	1e3ee <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x96>
   1e37c:	6845      	ldr	r5, [r0, #4]
   1e37e:	2200      	movs	r2, #0
   1e380:	782b      	ldrb	r3, [r5, #0]
   1e382:	4611      	mov	r1, r2
   1e384:	2b2a      	cmp	r3, #42	; 0x2a
   1e386:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e38a:	bf08      	it	eq
   1e38c:	3501      	addeq	r5, #1
   1e38e:	9301      	str	r3, [sp, #4]
   1e390:	ab01      	add	r3, sp, #4
   1e392:	4628      	mov	r0, r5
   1e394:	f7f4 ff3e 	bl	13214 <__cxa_demangle>
   1e398:	6823      	ldr	r3, [r4, #0]
   1e39a:	4606      	mov	r6, r0
   1e39c:	4824      	ldr	r0, [pc, #144]	; (1e430 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd8>)
   1e39e:	68d9      	ldr	r1, [r3, #12]
   1e3a0:	f002 fd08 	bl	20db4 <fputs>
   1e3a4:	9b01      	ldr	r3, [sp, #4]
   1e3a6:	b9f3      	cbnz	r3, 1e3e6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8e>
   1e3a8:	6823      	ldr	r3, [r4, #0]
   1e3aa:	4630      	mov	r0, r6
   1e3ac:	68d9      	ldr	r1, [r3, #12]
   1e3ae:	f002 fd01 	bl	20db4 <fputs>
   1e3b2:	6823      	ldr	r3, [r4, #0]
   1e3b4:	481f      	ldr	r0, [pc, #124]	; (1e434 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xdc>)
   1e3b6:	68d9      	ldr	r1, [r3, #12]
   1e3b8:	f002 fcfc 	bl	20db4 <fputs>
   1e3bc:	9b01      	ldr	r3, [sp, #4]
   1e3be:	b913      	cbnz	r3, 1e3c6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6e>
   1e3c0:	4630      	mov	r0, r6
   1e3c2:	f002 fe97 	bl	210f4 <free>
   1e3c6:	f005 fd56 	bl	23e76 <__cxa_rethrow>
   1e3ca:	2901      	cmp	r1, #1
   1e3cc:	d120      	bne.n	1e410 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xb8>
   1e3ce:	f005 fe35 	bl	2403c <__cxa_begin_catch>
   1e3d2:	6803      	ldr	r3, [r0, #0]
   1e3d4:	689b      	ldr	r3, [r3, #8]
   1e3d6:	4798      	blx	r3
   1e3d8:	6823      	ldr	r3, [r4, #0]
   1e3da:	4605      	mov	r5, r0
   1e3dc:	4816      	ldr	r0, [pc, #88]	; (1e438 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe0>)
   1e3de:	68d9      	ldr	r1, [r3, #12]
   1e3e0:	f002 fce8 	bl	20db4 <fputs>
   1e3e4:	e007      	b.n	1e3f6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x9e>
   1e3e6:	6823      	ldr	r3, [r4, #0]
   1e3e8:	4628      	mov	r0, r5
   1e3ea:	68d9      	ldr	r1, [r3, #12]
   1e3ec:	e7df      	b.n	1e3ae <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   1e3ee:	6823      	ldr	r3, [r4, #0]
   1e3f0:	4812      	ldr	r0, [pc, #72]	; (1e43c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe4>)
   1e3f2:	68d9      	ldr	r1, [r3, #12]
   1e3f4:	e7b8      	b.n	1e368 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10>
   1e3f6:	6823      	ldr	r3, [r4, #0]
   1e3f8:	4628      	mov	r0, r5
   1e3fa:	68d9      	ldr	r1, [r3, #12]
   1e3fc:	f002 fcda 	bl	20db4 <fputs>
   1e400:	6823      	ldr	r3, [r4, #0]
   1e402:	200a      	movs	r0, #10
   1e404:	68d9      	ldr	r1, [r3, #12]
   1e406:	f002 fc9d 	bl	20d44 <fputc>
   1e40a:	f005 fe40 	bl	2408e <__cxa_end_catch>
   1e40e:	e7ad      	b.n	1e36c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x14>
   1e410:	f005 fe14 	bl	2403c <__cxa_begin_catch>
   1e414:	f005 fe3b 	bl	2408e <__cxa_end_catch>
   1e418:	e7a8      	b.n	1e36c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x14>
   1e41a:	f005 fe38 	bl	2408e <__cxa_end_catch>
   1e41e:	f005 fd6b 	bl	23ef8 <__cxa_end_cleanup>
   1e422:	bf00      	nop
   1e424:	200282d1 	.word	0x200282d1
   1e428:	20020064 	.word	0x20020064
   1e42c:	0002cb07 	.word	0x0002cb07
   1e430:	0002cb25 	.word	0x0002cb25
   1e434:	0002c904 	.word	0x0002c904
   1e438:	0002cb84 	.word	0x0002cb84
   1e43c:	0002cb56 	.word	0x0002cb56

0001e440 <cos>:
   1e440:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e442:	b08f      	sub	sp, #60	; 0x3c
   1e444:	af02      	add	r7, sp, #8
   1e446:	e9c7 0100 	strd	r0, r1, [r7]
   1e44a:	f04f 0200 	mov.w	r2, #0
   1e44e:	f04f 0300 	mov.w	r3, #0
   1e452:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1e456:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e45a:	e9c7 2302 	strd	r2, r3, [r7, #8]
   1e45e:	68fb      	ldr	r3, [r7, #12]
   1e460:	627b      	str	r3, [r7, #36]	; 0x24
   1e462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1e468:	627b      	str	r3, [r7, #36]	; 0x24
   1e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e46c:	4a31      	ldr	r2, [pc, #196]	; (1e534 <cos+0xf4>)
   1e46e:	4293      	cmp	r3, r2
   1e470:	dc08      	bgt.n	1e484 <cos+0x44>
   1e472:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   1e476:	e9d7 0100 	ldrd	r0, r1, [r7]
   1e47a:	f7f8 fea9 	bl	171d0 <__kernel_cos>
   1e47e:	4604      	mov	r4, r0
   1e480:	460d      	mov	r5, r1
   1e482:	e04f      	b.n	1e524 <cos+0xe4>
   1e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e486:	4a2c      	ldr	r2, [pc, #176]	; (1e538 <cos+0xf8>)
   1e488:	4293      	cmp	r3, r2
   1e48a:	dd0a      	ble.n	1e4a2 <cos+0x62>
   1e48c:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e490:	e9d7 0100 	ldrd	r0, r1, [r7]
   1e494:	f7f4 ff24 	bl	132e0 <__aeabi_dsub>
   1e498:	4602      	mov	r2, r0
   1e49a:	460b      	mov	r3, r1
   1e49c:	4614      	mov	r4, r2
   1e49e:	461d      	mov	r5, r3
   1e4a0:	e040      	b.n	1e524 <cos+0xe4>
   1e4a2:	f107 0310 	add.w	r3, r7, #16
   1e4a6:	461a      	mov	r2, r3
   1e4a8:	e9d7 0100 	ldrd	r0, r1, [r7]
   1e4ac:	f7f8 f97c 	bl	167a8 <__ieee754_rem_pio2>
   1e4b0:	6238      	str	r0, [r7, #32]
   1e4b2:	6a3b      	ldr	r3, [r7, #32]
   1e4b4:	f003 0303 	and.w	r3, r3, #3
   1e4b8:	2b02      	cmp	r3, #2
   1e4ba:	d01d      	beq.n	1e4f8 <cos+0xb8>
   1e4bc:	2b02      	cmp	r3, #2
   1e4be:	dc27      	bgt.n	1e510 <cos+0xd0>
   1e4c0:	2b00      	cmp	r3, #0
   1e4c2:	d002      	beq.n	1e4ca <cos+0x8a>
   1e4c4:	2b01      	cmp	r3, #1
   1e4c6:	d009      	beq.n	1e4dc <cos+0x9c>
   1e4c8:	e022      	b.n	1e510 <cos+0xd0>
   1e4ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1e4ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1e4d2:	f7f8 fe7d 	bl	171d0 <__kernel_cos>
   1e4d6:	4604      	mov	r4, r0
   1e4d8:	460d      	mov	r5, r1
   1e4da:	e023      	b.n	1e524 <cos+0xe4>
   1e4dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1e4e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1e4e4:	2601      	movs	r6, #1
   1e4e6:	9600      	str	r6, [sp, #0]
   1e4e8:	f7f8 ffb2 	bl	17450 <__kernel_sin>
   1e4ec:	4602      	mov	r2, r0
   1e4ee:	460b      	mov	r3, r1
   1e4f0:	4614      	mov	r4, r2
   1e4f2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   1e4f6:	e015      	b.n	1e524 <cos+0xe4>
   1e4f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1e4fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1e500:	f7f8 fe66 	bl	171d0 <__kernel_cos>
   1e504:	4602      	mov	r2, r0
   1e506:	460b      	mov	r3, r1
   1e508:	4614      	mov	r4, r2
   1e50a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   1e50e:	e009      	b.n	1e524 <cos+0xe4>
   1e510:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1e514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1e518:	2401      	movs	r4, #1
   1e51a:	9400      	str	r4, [sp, #0]
   1e51c:	f7f8 ff98 	bl	17450 <__kernel_sin>
   1e520:	4604      	mov	r4, r0
   1e522:	460d      	mov	r5, r1
   1e524:	4622      	mov	r2, r4
   1e526:	462b      	mov	r3, r5
   1e528:	4610      	mov	r0, r2
   1e52a:	4619      	mov	r1, r3
   1e52c:	3734      	adds	r7, #52	; 0x34
   1e52e:	46bd      	mov	sp, r7
   1e530:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e532:	bf00      	nop
   1e534:	3fe921fb 	.word	0x3fe921fb
   1e538:	7fefffff 	.word	0x7fefffff

0001e53c <frexp>:
   1e53c:	b580      	push	{r7, lr}
   1e53e:	b08e      	sub	sp, #56	; 0x38
   1e540:	af00      	add	r7, sp, #0
   1e542:	e9c7 0102 	strd	r0, r1, [r7, #8]
   1e546:	607a      	str	r2, [r7, #4]
   1e548:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1e54c:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e552:	637b      	str	r3, [r7, #52]	; 0x34
   1e554:	6a3b      	ldr	r3, [r7, #32]
   1e556:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e55a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1e55e:	633b      	str	r3, [r7, #48]	; 0x30
   1e560:	687b      	ldr	r3, [r7, #4]
   1e562:	2200      	movs	r2, #0
   1e564:	601a      	str	r2, [r3, #0]
   1e566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e568:	4a23      	ldr	r2, [pc, #140]	; (1e5f8 <frexp+0xbc>)
   1e56a:	4293      	cmp	r3, r2
   1e56c:	dc04      	bgt.n	1e578 <frexp+0x3c>
   1e56e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1e570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e572:	4313      	orrs	r3, r2
   1e574:	2b00      	cmp	r3, #0
   1e576:	d102      	bne.n	1e57e <frexp+0x42>
   1e578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1e57c:	e037      	b.n	1e5ee <frexp+0xb2>
   1e57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1e584:	da18      	bge.n	1e5b8 <frexp+0x7c>
   1e586:	f04f 0200 	mov.w	r2, #0
   1e58a:	4b1c      	ldr	r3, [pc, #112]	; (1e5fc <frexp+0xc0>)
   1e58c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   1e590:	f7f5 f85e 	bl	13650 <__aeabi_dmul>
   1e594:	4602      	mov	r2, r0
   1e596:	460b      	mov	r3, r1
   1e598:	e9c7 2302 	strd	r2, r3, [r7, #8]
   1e59c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1e5a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
   1e5a4:	69fb      	ldr	r3, [r7, #28]
   1e5a6:	637b      	str	r3, [r7, #52]	; 0x34
   1e5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e5aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1e5ae:	633b      	str	r3, [r7, #48]	; 0x30
   1e5b0:	687b      	ldr	r3, [r7, #4]
   1e5b2:	f06f 0235 	mvn.w	r2, #53	; 0x35
   1e5b6:	601a      	str	r2, [r3, #0]
   1e5b8:	687b      	ldr	r3, [r7, #4]
   1e5ba:	681a      	ldr	r2, [r3, #0]
   1e5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1e5be:	151b      	asrs	r3, r3, #20
   1e5c0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   1e5c4:	441a      	add	r2, r3
   1e5c6:	687b      	ldr	r3, [r7, #4]
   1e5c8:	601a      	str	r2, [r3, #0]
   1e5ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e5cc:	4a0c      	ldr	r2, [pc, #48]	; (1e600 <frexp+0xc4>)
   1e5ce:	401a      	ands	r2, r3
   1e5d0:	4b0c      	ldr	r3, [pc, #48]	; (1e604 <frexp+0xc8>)
   1e5d2:	4313      	orrs	r3, r2
   1e5d4:	637b      	str	r3, [r7, #52]	; 0x34
   1e5d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1e5da:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1e5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e5e0:	617b      	str	r3, [r7, #20]
   1e5e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   1e5e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
   1e5ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1e5ee:	4610      	mov	r0, r2
   1e5f0:	4619      	mov	r1, r3
   1e5f2:	3738      	adds	r7, #56	; 0x38
   1e5f4:	46bd      	mov	sp, r7
   1e5f6:	bd80      	pop	{r7, pc}
   1e5f8:	7fefffff 	.word	0x7fefffff
   1e5fc:	43500000 	.word	0x43500000
   1e600:	800fffff 	.word	0x800fffff
   1e604:	3fe00000 	.word	0x3fe00000

0001e608 <round>:
   1e608:	b580      	push	{r7, lr}
   1e60a:	b08c      	sub	sp, #48	; 0x30
   1e60c:	af00      	add	r7, sp, #0
   1e60e:	e9c7 0100 	strd	r0, r1, [r7]
   1e612:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e616:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1e61a:	697b      	ldr	r3, [r7, #20]
   1e61c:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e61e:	693b      	ldr	r3, [r7, #16]
   1e620:	62bb      	str	r3, [r7, #40]	; 0x28
   1e622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e624:	151b      	asrs	r3, r3, #20
   1e626:	f3c3 030a 	ubfx	r3, r3, #0, #11
   1e62a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   1e62e:	627b      	str	r3, [r7, #36]	; 0x24
   1e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e632:	2b13      	cmp	r3, #19
   1e634:	dc31      	bgt.n	1e69a <round+0x92>
   1e636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e638:	2b00      	cmp	r3, #0
   1e63a:	da0e      	bge.n	1e65a <round+0x52>
   1e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e63e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   1e642:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e64a:	d103      	bne.n	1e654 <round+0x4c>
   1e64c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e64e:	4b37      	ldr	r3, [pc, #220]	; (1e72c <round+0x124>)
   1e650:	4313      	orrs	r3, r2
   1e652:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e654:	2300      	movs	r3, #0
   1e656:	62bb      	str	r3, [r7, #40]	; 0x28
   1e658:	e059      	b.n	1e70e <round+0x106>
   1e65a:	4a35      	ldr	r2, [pc, #212]	; (1e730 <round+0x128>)
   1e65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e65e:	fa42 f303 	asr.w	r3, r2, r3
   1e662:	61bb      	str	r3, [r7, #24]
   1e664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e666:	69bb      	ldr	r3, [r7, #24]
   1e668:	4013      	ands	r3, r2
   1e66a:	2b00      	cmp	r3, #0
   1e66c:	d105      	bne.n	1e67a <round+0x72>
   1e66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e670:	2b00      	cmp	r3, #0
   1e672:	d102      	bne.n	1e67a <round+0x72>
   1e674:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e678:	e053      	b.n	1e722 <round+0x11a>
   1e67a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   1e67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e680:	fa42 f303 	asr.w	r3, r2, r3
   1e684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   1e686:	4413      	add	r3, r2
   1e688:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e68a:	69bb      	ldr	r3, [r7, #24]
   1e68c:	43da      	mvns	r2, r3
   1e68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e690:	4013      	ands	r3, r2
   1e692:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e694:	2300      	movs	r3, #0
   1e696:	62bb      	str	r3, [r7, #40]	; 0x28
   1e698:	e039      	b.n	1e70e <round+0x106>
   1e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e69c:	2b33      	cmp	r3, #51	; 0x33
   1e69e:	dd0f      	ble.n	1e6c0 <round+0xb8>
   1e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e6a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1e6a6:	d108      	bne.n	1e6ba <round+0xb2>
   1e6a8:	e9d7 0100 	ldrd	r0, r1, [r7]
   1e6ac:	4602      	mov	r2, r0
   1e6ae:	460b      	mov	r3, r1
   1e6b0:	f7f4 fe18 	bl	132e4 <__adddf3>
   1e6b4:	4602      	mov	r2, r0
   1e6b6:	460b      	mov	r3, r1
   1e6b8:	e033      	b.n	1e722 <round+0x11a>
   1e6ba:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e6be:	e030      	b.n	1e722 <round+0x11a>
   1e6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e6c2:	3b14      	subs	r3, #20
   1e6c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e6c8:	fa22 f303 	lsr.w	r3, r2, r3
   1e6cc:	623b      	str	r3, [r7, #32]
   1e6ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e6d0:	6a3b      	ldr	r3, [r7, #32]
   1e6d2:	4013      	ands	r3, r2
   1e6d4:	2b00      	cmp	r3, #0
   1e6d6:	d102      	bne.n	1e6de <round+0xd6>
   1e6d8:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e6dc:	e021      	b.n	1e722 <round+0x11a>
   1e6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e6e0:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
   1e6e4:	2201      	movs	r2, #1
   1e6e6:	fa02 f303 	lsl.w	r3, r2, r3
   1e6ea:	461a      	mov	r2, r3
   1e6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e6ee:	4413      	add	r3, r2
   1e6f0:	61fb      	str	r3, [r7, #28]
   1e6f2:	69fa      	ldr	r2, [r7, #28]
   1e6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e6f6:	429a      	cmp	r2, r3
   1e6f8:	d202      	bcs.n	1e700 <round+0xf8>
   1e6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e6fc:	3301      	adds	r3, #1
   1e6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   1e700:	69fb      	ldr	r3, [r7, #28]
   1e702:	62bb      	str	r3, [r7, #40]	; 0x28
   1e704:	6a3b      	ldr	r3, [r7, #32]
   1e706:	43db      	mvns	r3, r3
   1e708:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1e70a:	4013      	ands	r3, r2
   1e70c:	62bb      	str	r3, [r7, #40]	; 0x28
   1e70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1e710:	60fb      	str	r3, [r7, #12]
   1e712:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e714:	60bb      	str	r3, [r7, #8]
   1e716:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   1e71a:	e9c7 2300 	strd	r2, r3, [r7]
   1e71e:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e722:	4610      	mov	r0, r2
   1e724:	4619      	mov	r1, r3
   1e726:	3730      	adds	r7, #48	; 0x30
   1e728:	46bd      	mov	sp, r7
   1e72a:	bd80      	pop	{r7, pc}
   1e72c:	3ff00000 	.word	0x3ff00000
   1e730:	000fffff 	.word	0x000fffff

0001e734 <sin>:
   1e734:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e736:	b08f      	sub	sp, #60	; 0x3c
   1e738:	af02      	add	r7, sp, #8
   1e73a:	e9c7 0100 	strd	r0, r1, [r7]
   1e73e:	f04f 0200 	mov.w	r2, #0
   1e742:	f04f 0300 	mov.w	r3, #0
   1e746:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
   1e74a:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e74e:	e9c7 2302 	strd	r2, r3, [r7, #8]
   1e752:	68fb      	ldr	r3, [r7, #12]
   1e754:	627b      	str	r3, [r7, #36]	; 0x24
   1e756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1e75c:	627b      	str	r3, [r7, #36]	; 0x24
   1e75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e760:	4a32      	ldr	r2, [pc, #200]	; (1e82c <sin+0xf8>)
   1e762:	4293      	cmp	r3, r2
   1e764:	dc0a      	bgt.n	1e77c <sin+0x48>
   1e766:	2300      	movs	r3, #0
   1e768:	9300      	str	r3, [sp, #0]
   1e76a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
   1e76e:	e9d7 0100 	ldrd	r0, r1, [r7]
   1e772:	f7f8 fe6d 	bl	17450 <__kernel_sin>
   1e776:	4604      	mov	r4, r0
   1e778:	460d      	mov	r5, r1
   1e77a:	e04f      	b.n	1e81c <sin+0xe8>
   1e77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1e77e:	4a2c      	ldr	r2, [pc, #176]	; (1e830 <sin+0xfc>)
   1e780:	4293      	cmp	r3, r2
   1e782:	dd0a      	ble.n	1e79a <sin+0x66>
   1e784:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e788:	e9d7 0100 	ldrd	r0, r1, [r7]
   1e78c:	f7f4 fda8 	bl	132e0 <__aeabi_dsub>
   1e790:	4602      	mov	r2, r0
   1e792:	460b      	mov	r3, r1
   1e794:	4614      	mov	r4, r2
   1e796:	461d      	mov	r5, r3
   1e798:	e040      	b.n	1e81c <sin+0xe8>
   1e79a:	f107 0310 	add.w	r3, r7, #16
   1e79e:	461a      	mov	r2, r3
   1e7a0:	e9d7 0100 	ldrd	r0, r1, [r7]
   1e7a4:	f7f8 f800 	bl	167a8 <__ieee754_rem_pio2>
   1e7a8:	6238      	str	r0, [r7, #32]
   1e7aa:	6a3b      	ldr	r3, [r7, #32]
   1e7ac:	f003 0303 	and.w	r3, r3, #3
   1e7b0:	2b02      	cmp	r3, #2
   1e7b2:	d01a      	beq.n	1e7ea <sin+0xb6>
   1e7b4:	2b02      	cmp	r3, #2
   1e7b6:	dc26      	bgt.n	1e806 <sin+0xd2>
   1e7b8:	2b00      	cmp	r3, #0
   1e7ba:	d002      	beq.n	1e7c2 <sin+0x8e>
   1e7bc:	2b01      	cmp	r3, #1
   1e7be:	d00b      	beq.n	1e7d8 <sin+0xa4>
   1e7c0:	e021      	b.n	1e806 <sin+0xd2>
   1e7c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1e7c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1e7ca:	2401      	movs	r4, #1
   1e7cc:	9400      	str	r4, [sp, #0]
   1e7ce:	f7f8 fe3f 	bl	17450 <__kernel_sin>
   1e7d2:	4604      	mov	r4, r0
   1e7d4:	460d      	mov	r5, r1
   1e7d6:	e021      	b.n	1e81c <sin+0xe8>
   1e7d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1e7dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1e7e0:	f7f8 fcf6 	bl	171d0 <__kernel_cos>
   1e7e4:	4604      	mov	r4, r0
   1e7e6:	460d      	mov	r5, r1
   1e7e8:	e018      	b.n	1e81c <sin+0xe8>
   1e7ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1e7ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1e7f2:	2601      	movs	r6, #1
   1e7f4:	9600      	str	r6, [sp, #0]
   1e7f6:	f7f8 fe2b 	bl	17450 <__kernel_sin>
   1e7fa:	4602      	mov	r2, r0
   1e7fc:	460b      	mov	r3, r1
   1e7fe:	4614      	mov	r4, r2
   1e800:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   1e804:	e00a      	b.n	1e81c <sin+0xe8>
   1e806:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   1e80a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1e80e:	f7f8 fcdf 	bl	171d0 <__kernel_cos>
   1e812:	4602      	mov	r2, r0
   1e814:	460b      	mov	r3, r1
   1e816:	4614      	mov	r4, r2
   1e818:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
   1e81c:	4622      	mov	r2, r4
   1e81e:	462b      	mov	r3, r5
   1e820:	4610      	mov	r0, r2
   1e822:	4619      	mov	r1, r3
   1e824:	3734      	adds	r7, #52	; 0x34
   1e826:	46bd      	mov	sp, r7
   1e828:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e82a:	bf00      	nop
   1e82c:	3fe921fb 	.word	0x3fe921fb
   1e830:	7fefffff 	.word	0x7fefffff

0001e834 <sqrt>:
   1e834:	b580      	push	{r7, lr}
   1e836:	b08e      	sub	sp, #56	; 0x38
   1e838:	af00      	add	r7, sp, #0
   1e83a:	e9c7 0100 	strd	r0, r1, [r7]
   1e83e:	e9d7 0100 	ldrd	r0, r1, [r7]
   1e842:	f7f8 fb19 	bl	16e78 <__ieee754_sqrt>
   1e846:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
   1e84a:	4b37      	ldr	r3, [pc, #220]	; (1e928 <sqrt+0xf4>)
   1e84c:	f993 3000 	ldrsb.w	r3, [r3]
   1e850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e854:	d008      	beq.n	1e868 <sqrt+0x34>
   1e856:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e85a:	e9d7 0100 	ldrd	r0, r1, [r7]
   1e85e:	f7f5 f991 	bl	13b84 <__aeabi_dcmpun>
   1e862:	4603      	mov	r3, r0
   1e864:	2b00      	cmp	r3, #0
   1e866:	d002      	beq.n	1e86e <sqrt+0x3a>
   1e868:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   1e86c:	e057      	b.n	1e91e <sqrt+0xea>
   1e86e:	f04f 0200 	mov.w	r2, #0
   1e872:	f04f 0300 	mov.w	r3, #0
   1e876:	e9d7 0100 	ldrd	r0, r1, [r7]
   1e87a:	f7f5 f95b 	bl	13b34 <__aeabi_dcmplt>
   1e87e:	4603      	mov	r3, r0
   1e880:	2b00      	cmp	r3, #0
   1e882:	d04a      	beq.n	1e91a <sqrt+0xe6>
   1e884:	2301      	movs	r3, #1
   1e886:	60bb      	str	r3, [r7, #8]
   1e888:	4b28      	ldr	r3, [pc, #160]	; (1e92c <sqrt+0xf8>)
   1e88a:	60fb      	str	r3, [r7, #12]
   1e88c:	2300      	movs	r3, #0
   1e88e:	62bb      	str	r3, [r7, #40]	; 0x28
   1e890:	e9d7 2300 	ldrd	r2, r3, [r7]
   1e894:	e9c7 2306 	strd	r2, r3, [r7, #24]
   1e898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1e89c:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1e8a0:	4b21      	ldr	r3, [pc, #132]	; (1e928 <sqrt+0xf4>)
   1e8a2:	f993 3000 	ldrsb.w	r3, [r3]
   1e8a6:	2b00      	cmp	r3, #0
   1e8a8:	d106      	bne.n	1e8b8 <sqrt+0x84>
   1e8aa:	f04f 0200 	mov.w	r2, #0
   1e8ae:	f04f 0300 	mov.w	r3, #0
   1e8b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1e8b6:	e00d      	b.n	1e8d4 <sqrt+0xa0>
   1e8b8:	f04f 0200 	mov.w	r2, #0
   1e8bc:	f04f 0300 	mov.w	r3, #0
   1e8c0:	f04f 0000 	mov.w	r0, #0
   1e8c4:	f04f 0100 	mov.w	r1, #0
   1e8c8:	f7f4 ffec 	bl	138a4 <__aeabi_ddiv>
   1e8cc:	4602      	mov	r2, r0
   1e8ce:	460b      	mov	r3, r1
   1e8d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1e8d4:	4b14      	ldr	r3, [pc, #80]	; (1e928 <sqrt+0xf4>)
   1e8d6:	f993 3000 	ldrsb.w	r3, [r3]
   1e8da:	2b02      	cmp	r3, #2
   1e8dc:	d105      	bne.n	1e8ea <sqrt+0xb6>
   1e8de:	f003 fd30 	bl	22342 <__errno>
   1e8e2:	4603      	mov	r3, r0
   1e8e4:	2221      	movs	r2, #33	; 0x21
   1e8e6:	601a      	str	r2, [r3, #0]
   1e8e8:	e00c      	b.n	1e904 <sqrt+0xd0>
   1e8ea:	f107 0308 	add.w	r3, r7, #8
   1e8ee:	4618      	mov	r0, r3
   1e8f0:	f005 fd0d 	bl	2430e <matherr>
   1e8f4:	4603      	mov	r3, r0
   1e8f6:	2b00      	cmp	r3, #0
   1e8f8:	d104      	bne.n	1e904 <sqrt+0xd0>
   1e8fa:	f003 fd22 	bl	22342 <__errno>
   1e8fe:	4603      	mov	r3, r0
   1e900:	2221      	movs	r2, #33	; 0x21
   1e902:	601a      	str	r2, [r3, #0]
   1e904:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e906:	2b00      	cmp	r3, #0
   1e908:	d004      	beq.n	1e914 <sqrt+0xe0>
   1e90a:	f003 fd1a 	bl	22342 <__errno>
   1e90e:	4602      	mov	r2, r0
   1e910:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e912:	6013      	str	r3, [r2, #0]
   1e914:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   1e918:	e001      	b.n	1e91e <sqrt+0xea>
   1e91a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
   1e91e:	4610      	mov	r0, r2
   1e920:	4619      	mov	r1, r3
   1e922:	3738      	adds	r7, #56	; 0x38
   1e924:	46bd      	mov	sp, r7
   1e926:	bd80      	pop	{r7, pc}
   1e928:	200200c9 	.word	0x200200c9
   1e92c:	00025ae8 	.word	0x00025ae8

0001e930 <expf>:
   1e930:	b580      	push	{r7, lr}
   1e932:	b08e      	sub	sp, #56	; 0x38
   1e934:	af00      	add	r7, sp, #0
   1e936:	6078      	str	r0, [r7, #4]
   1e938:	6878      	ldr	r0, [r7, #4]
   1e93a:	f000 fb4b 	bl	1efd4 <__ieee754_expf>
   1e93e:	6378      	str	r0, [r7, #52]	; 0x34
   1e940:	4b56      	ldr	r3, [pc, #344]	; (1ea9c <expf+0x16c>)
   1e942:	f993 3000 	ldrsb.w	r3, [r3]
   1e946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1e94a:	d101      	bne.n	1e950 <expf+0x20>
   1e94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1e94e:	e0a1      	b.n	1ea94 <expf+0x164>
   1e950:	6878      	ldr	r0, [r7, #4]
   1e952:	f005 fd09 	bl	24368 <finitef>
   1e956:	4603      	mov	r3, r0
   1e958:	2b00      	cmp	r3, #0
   1e95a:	f000 809a 	beq.w	1ea92 <expf+0x162>
   1e95e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 1eaa0 <expf+0x170>
   1e962:	edd7 7a01 	vldr	s15, [r7, #4]
   1e966:	eef4 7ac7 	vcmpe.f32	s15, s14
   1e96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e96e:	dd48      	ble.n	1ea02 <expf+0xd2>
   1e970:	2303      	movs	r3, #3
   1e972:	60bb      	str	r3, [r7, #8]
   1e974:	4b4b      	ldr	r3, [pc, #300]	; (1eaa4 <expf+0x174>)
   1e976:	60fb      	str	r3, [r7, #12]
   1e978:	2300      	movs	r3, #0
   1e97a:	62bb      	str	r3, [r7, #40]	; 0x28
   1e97c:	6878      	ldr	r0, [r7, #4]
   1e97e:	f7f4 fe0f 	bl	135a0 <__aeabi_f2d>
   1e982:	4602      	mov	r2, r0
   1e984:	460b      	mov	r3, r1
   1e986:	e9c7 2306 	strd	r2, r3, [r7, #24]
   1e98a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1e98e:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1e992:	4b42      	ldr	r3, [pc, #264]	; (1ea9c <expf+0x16c>)
   1e994:	f993 3000 	ldrsb.w	r3, [r3]
   1e998:	2b00      	cmp	r3, #0
   1e99a:	d105      	bne.n	1e9a8 <expf+0x78>
   1e99c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1e9a0:	4b41      	ldr	r3, [pc, #260]	; (1eaa8 <expf+0x178>)
   1e9a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1e9a6:	e004      	b.n	1e9b2 <expf+0x82>
   1e9a8:	f04f 0200 	mov.w	r2, #0
   1e9ac:	4b3f      	ldr	r3, [pc, #252]	; (1eaac <expf+0x17c>)
   1e9ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1e9b2:	4b3a      	ldr	r3, [pc, #232]	; (1ea9c <expf+0x16c>)
   1e9b4:	f993 3000 	ldrsb.w	r3, [r3]
   1e9b8:	2b02      	cmp	r3, #2
   1e9ba:	d105      	bne.n	1e9c8 <expf+0x98>
   1e9bc:	f003 fcc1 	bl	22342 <__errno>
   1e9c0:	4603      	mov	r3, r0
   1e9c2:	2222      	movs	r2, #34	; 0x22
   1e9c4:	601a      	str	r2, [r3, #0]
   1e9c6:	e00c      	b.n	1e9e2 <expf+0xb2>
   1e9c8:	f107 0308 	add.w	r3, r7, #8
   1e9cc:	4618      	mov	r0, r3
   1e9ce:	f005 fc9e 	bl	2430e <matherr>
   1e9d2:	4603      	mov	r3, r0
   1e9d4:	2b00      	cmp	r3, #0
   1e9d6:	d104      	bne.n	1e9e2 <expf+0xb2>
   1e9d8:	f003 fcb3 	bl	22342 <__errno>
   1e9dc:	4603      	mov	r3, r0
   1e9de:	2222      	movs	r2, #34	; 0x22
   1e9e0:	601a      	str	r2, [r3, #0]
   1e9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e9e4:	2b00      	cmp	r3, #0
   1e9e6:	d004      	beq.n	1e9f2 <expf+0xc2>
   1e9e8:	f003 fcab 	bl	22342 <__errno>
   1e9ec:	4602      	mov	r2, r0
   1e9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1e9f0:	6013      	str	r3, [r2, #0]
   1e9f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   1e9f6:	4610      	mov	r0, r2
   1e9f8:	4619      	mov	r1, r3
   1e9fa:	f7f5 f901 	bl	13c00 <__aeabi_d2f>
   1e9fe:	4603      	mov	r3, r0
   1ea00:	e048      	b.n	1ea94 <expf+0x164>
   1ea02:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 1eab0 <expf+0x180>
   1ea06:	edd7 7a01 	vldr	s15, [r7, #4]
   1ea0a:	eef4 7ac7 	vcmpe.f32	s15, s14
   1ea0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ea12:	d53e      	bpl.n	1ea92 <expf+0x162>
   1ea14:	2304      	movs	r3, #4
   1ea16:	60bb      	str	r3, [r7, #8]
   1ea18:	4b22      	ldr	r3, [pc, #136]	; (1eaa4 <expf+0x174>)
   1ea1a:	60fb      	str	r3, [r7, #12]
   1ea1c:	2300      	movs	r3, #0
   1ea1e:	62bb      	str	r3, [r7, #40]	; 0x28
   1ea20:	6878      	ldr	r0, [r7, #4]
   1ea22:	f7f4 fdbd 	bl	135a0 <__aeabi_f2d>
   1ea26:	4602      	mov	r2, r0
   1ea28:	460b      	mov	r3, r1
   1ea2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
   1ea2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   1ea32:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1ea36:	f04f 0200 	mov.w	r2, #0
   1ea3a:	f04f 0300 	mov.w	r3, #0
   1ea3e:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1ea42:	4b16      	ldr	r3, [pc, #88]	; (1ea9c <expf+0x16c>)
   1ea44:	f993 3000 	ldrsb.w	r3, [r3]
   1ea48:	2b02      	cmp	r3, #2
   1ea4a:	d105      	bne.n	1ea58 <expf+0x128>
   1ea4c:	f003 fc79 	bl	22342 <__errno>
   1ea50:	4603      	mov	r3, r0
   1ea52:	2222      	movs	r2, #34	; 0x22
   1ea54:	601a      	str	r2, [r3, #0]
   1ea56:	e00c      	b.n	1ea72 <expf+0x142>
   1ea58:	f107 0308 	add.w	r3, r7, #8
   1ea5c:	4618      	mov	r0, r3
   1ea5e:	f005 fc56 	bl	2430e <matherr>
   1ea62:	4603      	mov	r3, r0
   1ea64:	2b00      	cmp	r3, #0
   1ea66:	d104      	bne.n	1ea72 <expf+0x142>
   1ea68:	f003 fc6b 	bl	22342 <__errno>
   1ea6c:	4603      	mov	r3, r0
   1ea6e:	2222      	movs	r2, #34	; 0x22
   1ea70:	601a      	str	r2, [r3, #0]
   1ea72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ea74:	2b00      	cmp	r3, #0
   1ea76:	d004      	beq.n	1ea82 <expf+0x152>
   1ea78:	f003 fc63 	bl	22342 <__errno>
   1ea7c:	4602      	mov	r2, r0
   1ea7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ea80:	6013      	str	r3, [r2, #0]
   1ea82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   1ea86:	4610      	mov	r0, r2
   1ea88:	4619      	mov	r1, r3
   1ea8a:	f7f5 f8b9 	bl	13c00 <__aeabi_d2f>
   1ea8e:	4603      	mov	r3, r0
   1ea90:	e000      	b.n	1ea94 <expf+0x164>
   1ea92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ea94:	4618      	mov	r0, r3
   1ea96:	3738      	adds	r7, #56	; 0x38
   1ea98:	46bd      	mov	sp, r7
   1ea9a:	bd80      	pop	{r7, pc}
   1ea9c:	200200c9 	.word	0x200200c9
   1eaa0:	42b17180 	.word	0x42b17180
   1eaa4:	00025af0 	.word	0x00025af0
   1eaa8:	47efffff 	.word	0x47efffff
   1eaac:	7ff00000 	.word	0x7ff00000
   1eab0:	c2cff1b5 	.word	0xc2cff1b5

0001eab4 <powf>:
   1eab4:	b580      	push	{r7, lr}
   1eab6:	b08e      	sub	sp, #56	; 0x38
   1eab8:	af00      	add	r7, sp, #0
   1eaba:	6078      	str	r0, [r7, #4]
   1eabc:	6039      	str	r1, [r7, #0]
   1eabe:	6839      	ldr	r1, [r7, #0]
   1eac0:	6878      	ldr	r0, [r7, #4]
   1eac2:	f000 fbf1 	bl	1f2a8 <__ieee754_powf>
   1eac6:	6378      	str	r0, [r7, #52]	; 0x34
   1eac8:	4bb5      	ldr	r3, [pc, #724]	; (1eda0 <powf+0x2ec>)
   1eaca:	f993 3000 	ldrsb.w	r3, [r3]
   1eace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ead2:	d008      	beq.n	1eae6 <powf+0x32>
   1ead4:	ed97 7a00 	vldr	s14, [r7]
   1ead8:	edd7 7a00 	vldr	s15, [r7]
   1eadc:	eeb4 7a67 	vcmp.f32	s14, s15
   1eae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1eae4:	d701      	bvc.n	1eaea <powf+0x36>
   1eae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1eae8:	e263      	b.n	1efb2 <powf+0x4fe>
   1eaea:	ed97 7a01 	vldr	s14, [r7, #4]
   1eaee:	edd7 7a01 	vldr	s15, [r7, #4]
   1eaf2:	eeb4 7a67 	vcmp.f32	s14, s15
   1eaf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1eafa:	d74f      	bvc.n	1eb9c <powf+0xe8>
   1eafc:	edd7 7a00 	vldr	s15, [r7]
   1eb00:	eef5 7a40 	vcmp.f32	s15, #0.0
   1eb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1eb08:	d146      	bne.n	1eb98 <powf+0xe4>
   1eb0a:	2301      	movs	r3, #1
   1eb0c:	60bb      	str	r3, [r7, #8]
   1eb0e:	4ba5      	ldr	r3, [pc, #660]	; (1eda4 <powf+0x2f0>)
   1eb10:	60fb      	str	r3, [r7, #12]
   1eb12:	2300      	movs	r3, #0
   1eb14:	62bb      	str	r3, [r7, #40]	; 0x28
   1eb16:	6878      	ldr	r0, [r7, #4]
   1eb18:	f7f4 fd42 	bl	135a0 <__aeabi_f2d>
   1eb1c:	4602      	mov	r2, r0
   1eb1e:	460b      	mov	r3, r1
   1eb20:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1eb24:	6838      	ldr	r0, [r7, #0]
   1eb26:	f7f4 fd3b 	bl	135a0 <__aeabi_f2d>
   1eb2a:	4602      	mov	r2, r0
   1eb2c:	460b      	mov	r3, r1
   1eb2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
   1eb32:	f04f 0200 	mov.w	r2, #0
   1eb36:	4b9c      	ldr	r3, [pc, #624]	; (1eda8 <powf+0x2f4>)
   1eb38:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1eb3c:	4b98      	ldr	r3, [pc, #608]	; (1eda0 <powf+0x2ec>)
   1eb3e:	f993 3000 	ldrsb.w	r3, [r3]
   1eb42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1eb46:	d004      	beq.n	1eb52 <powf+0x9e>
   1eb48:	4b95      	ldr	r3, [pc, #596]	; (1eda0 <powf+0x2ec>)
   1eb4a:	f993 3000 	ldrsb.w	r3, [r3]
   1eb4e:	2b02      	cmp	r3, #2
   1eb50:	d105      	bne.n	1eb5e <powf+0xaa>
   1eb52:	f04f 0200 	mov.w	r2, #0
   1eb56:	4b94      	ldr	r3, [pc, #592]	; (1eda8 <powf+0x2f4>)
   1eb58:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1eb5c:	e00c      	b.n	1eb78 <powf+0xc4>
   1eb5e:	f107 0308 	add.w	r3, r7, #8
   1eb62:	4618      	mov	r0, r3
   1eb64:	f005 fbd3 	bl	2430e <matherr>
   1eb68:	4603      	mov	r3, r0
   1eb6a:	2b00      	cmp	r3, #0
   1eb6c:	d104      	bne.n	1eb78 <powf+0xc4>
   1eb6e:	f003 fbe8 	bl	22342 <__errno>
   1eb72:	4603      	mov	r3, r0
   1eb74:	2221      	movs	r2, #33	; 0x21
   1eb76:	601a      	str	r2, [r3, #0]
   1eb78:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eb7a:	2b00      	cmp	r3, #0
   1eb7c:	d004      	beq.n	1eb88 <powf+0xd4>
   1eb7e:	f003 fbe0 	bl	22342 <__errno>
   1eb82:	4602      	mov	r2, r0
   1eb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eb86:	6013      	str	r3, [r2, #0]
   1eb88:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   1eb8c:	4610      	mov	r0, r2
   1eb8e:	4619      	mov	r1, r3
   1eb90:	f7f5 f836 	bl	13c00 <__aeabi_d2f>
   1eb94:	4603      	mov	r3, r0
   1eb96:	e20c      	b.n	1efb2 <powf+0x4fe>
   1eb98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1eb9a:	e20a      	b.n	1efb2 <powf+0x4fe>
   1eb9c:	edd7 7a01 	vldr	s15, [r7, #4]
   1eba0:	eef5 7a40 	vcmp.f32	s15, #0.0
   1eba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1eba8:	f040 80a5 	bne.w	1ecf6 <powf+0x242>
   1ebac:	edd7 7a00 	vldr	s15, [r7]
   1ebb0:	eef5 7a40 	vcmp.f32	s15, #0.0
   1ebb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ebb8:	d141      	bne.n	1ec3e <powf+0x18a>
   1ebba:	2301      	movs	r3, #1
   1ebbc:	60bb      	str	r3, [r7, #8]
   1ebbe:	4b79      	ldr	r3, [pc, #484]	; (1eda4 <powf+0x2f0>)
   1ebc0:	60fb      	str	r3, [r7, #12]
   1ebc2:	2300      	movs	r3, #0
   1ebc4:	62bb      	str	r3, [r7, #40]	; 0x28
   1ebc6:	6878      	ldr	r0, [r7, #4]
   1ebc8:	f7f4 fcea 	bl	135a0 <__aeabi_f2d>
   1ebcc:	4602      	mov	r2, r0
   1ebce:	460b      	mov	r3, r1
   1ebd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1ebd4:	6838      	ldr	r0, [r7, #0]
   1ebd6:	f7f4 fce3 	bl	135a0 <__aeabi_f2d>
   1ebda:	4602      	mov	r2, r0
   1ebdc:	460b      	mov	r3, r1
   1ebde:	e9c7 2306 	strd	r2, r3, [r7, #24]
   1ebe2:	f04f 0200 	mov.w	r2, #0
   1ebe6:	f04f 0300 	mov.w	r3, #0
   1ebea:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1ebee:	4b6c      	ldr	r3, [pc, #432]	; (1eda0 <powf+0x2ec>)
   1ebf0:	f993 3000 	ldrsb.w	r3, [r3]
   1ebf4:	2b00      	cmp	r3, #0
   1ebf6:	d005      	beq.n	1ec04 <powf+0x150>
   1ebf8:	f04f 0200 	mov.w	r2, #0
   1ebfc:	4b6a      	ldr	r3, [pc, #424]	; (1eda8 <powf+0x2f4>)
   1ebfe:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1ec02:	e00c      	b.n	1ec1e <powf+0x16a>
   1ec04:	f107 0308 	add.w	r3, r7, #8
   1ec08:	4618      	mov	r0, r3
   1ec0a:	f005 fb80 	bl	2430e <matherr>
   1ec0e:	4603      	mov	r3, r0
   1ec10:	2b00      	cmp	r3, #0
   1ec12:	d104      	bne.n	1ec1e <powf+0x16a>
   1ec14:	f003 fb95 	bl	22342 <__errno>
   1ec18:	4603      	mov	r3, r0
   1ec1a:	2221      	movs	r2, #33	; 0x21
   1ec1c:	601a      	str	r2, [r3, #0]
   1ec1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec20:	2b00      	cmp	r3, #0
   1ec22:	d004      	beq.n	1ec2e <powf+0x17a>
   1ec24:	f003 fb8d 	bl	22342 <__errno>
   1ec28:	4602      	mov	r2, r0
   1ec2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ec2c:	6013      	str	r3, [r2, #0]
   1ec2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   1ec32:	4610      	mov	r0, r2
   1ec34:	4619      	mov	r1, r3
   1ec36:	f7f4 ffe3 	bl	13c00 <__aeabi_d2f>
   1ec3a:	4603      	mov	r3, r0
   1ec3c:	e1b9      	b.n	1efb2 <powf+0x4fe>
   1ec3e:	6838      	ldr	r0, [r7, #0]
   1ec40:	f005 fb92 	bl	24368 <finitef>
   1ec44:	4603      	mov	r3, r0
   1ec46:	2b00      	cmp	r3, #0
   1ec48:	d053      	beq.n	1ecf2 <powf+0x23e>
   1ec4a:	edd7 7a00 	vldr	s15, [r7]
   1ec4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1ec52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ec56:	d54c      	bpl.n	1ecf2 <powf+0x23e>
   1ec58:	2301      	movs	r3, #1
   1ec5a:	60bb      	str	r3, [r7, #8]
   1ec5c:	4b51      	ldr	r3, [pc, #324]	; (1eda4 <powf+0x2f0>)
   1ec5e:	60fb      	str	r3, [r7, #12]
   1ec60:	2300      	movs	r3, #0
   1ec62:	62bb      	str	r3, [r7, #40]	; 0x28
   1ec64:	6878      	ldr	r0, [r7, #4]
   1ec66:	f7f4 fc9b 	bl	135a0 <__aeabi_f2d>
   1ec6a:	4602      	mov	r2, r0
   1ec6c:	460b      	mov	r3, r1
   1ec6e:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1ec72:	6838      	ldr	r0, [r7, #0]
   1ec74:	f7f4 fc94 	bl	135a0 <__aeabi_f2d>
   1ec78:	4602      	mov	r2, r0
   1ec7a:	460b      	mov	r3, r1
   1ec7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
   1ec80:	4b47      	ldr	r3, [pc, #284]	; (1eda0 <powf+0x2ec>)
   1ec82:	f993 3000 	ldrsb.w	r3, [r3]
   1ec86:	2b00      	cmp	r3, #0
   1ec88:	d106      	bne.n	1ec98 <powf+0x1e4>
   1ec8a:	f04f 0200 	mov.w	r2, #0
   1ec8e:	f04f 0300 	mov.w	r3, #0
   1ec92:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1ec96:	e004      	b.n	1eca2 <powf+0x1ee>
   1ec98:	f04f 0200 	mov.w	r2, #0
   1ec9c:	4b43      	ldr	r3, [pc, #268]	; (1edac <powf+0x2f8>)
   1ec9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1eca2:	4b3f      	ldr	r3, [pc, #252]	; (1eda0 <powf+0x2ec>)
   1eca4:	f993 3000 	ldrsb.w	r3, [r3]
   1eca8:	2b02      	cmp	r3, #2
   1ecaa:	d105      	bne.n	1ecb8 <powf+0x204>
   1ecac:	f003 fb49 	bl	22342 <__errno>
   1ecb0:	4603      	mov	r3, r0
   1ecb2:	2221      	movs	r2, #33	; 0x21
   1ecb4:	601a      	str	r2, [r3, #0]
   1ecb6:	e00c      	b.n	1ecd2 <powf+0x21e>
   1ecb8:	f107 0308 	add.w	r3, r7, #8
   1ecbc:	4618      	mov	r0, r3
   1ecbe:	f005 fb26 	bl	2430e <matherr>
   1ecc2:	4603      	mov	r3, r0
   1ecc4:	2b00      	cmp	r3, #0
   1ecc6:	d104      	bne.n	1ecd2 <powf+0x21e>
   1ecc8:	f003 fb3b 	bl	22342 <__errno>
   1eccc:	4603      	mov	r3, r0
   1ecce:	2221      	movs	r2, #33	; 0x21
   1ecd0:	601a      	str	r2, [r3, #0]
   1ecd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ecd4:	2b00      	cmp	r3, #0
   1ecd6:	d004      	beq.n	1ece2 <powf+0x22e>
   1ecd8:	f003 fb33 	bl	22342 <__errno>
   1ecdc:	4602      	mov	r2, r0
   1ecde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ece0:	6013      	str	r3, [r2, #0]
   1ece2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   1ece6:	4610      	mov	r0, r2
   1ece8:	4619      	mov	r1, r3
   1ecea:	f7f4 ff89 	bl	13c00 <__aeabi_d2f>
   1ecee:	4603      	mov	r3, r0
   1ecf0:	e15f      	b.n	1efb2 <powf+0x4fe>
   1ecf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1ecf4:	e15d      	b.n	1efb2 <powf+0x4fe>
   1ecf6:	6b78      	ldr	r0, [r7, #52]	; 0x34
   1ecf8:	f005 fb36 	bl	24368 <finitef>
   1ecfc:	4603      	mov	r3, r0
   1ecfe:	2b00      	cmp	r3, #0
   1ed00:	f040 8101 	bne.w	1ef06 <powf+0x452>
   1ed04:	6878      	ldr	r0, [r7, #4]
   1ed06:	f005 fb2f 	bl	24368 <finitef>
   1ed0a:	4603      	mov	r3, r0
   1ed0c:	2b00      	cmp	r3, #0
   1ed0e:	f000 80fa 	beq.w	1ef06 <powf+0x452>
   1ed12:	6838      	ldr	r0, [r7, #0]
   1ed14:	f005 fb28 	bl	24368 <finitef>
   1ed18:	4603      	mov	r3, r0
   1ed1a:	2b00      	cmp	r3, #0
   1ed1c:	f000 80f3 	beq.w	1ef06 <powf+0x452>
   1ed20:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
   1ed24:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
   1ed28:	eeb4 7a67 	vcmp.f32	s14, s15
   1ed2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ed30:	d75d      	bvc.n	1edee <powf+0x33a>
   1ed32:	2301      	movs	r3, #1
   1ed34:	60bb      	str	r3, [r7, #8]
   1ed36:	4b1b      	ldr	r3, [pc, #108]	; (1eda4 <powf+0x2f0>)
   1ed38:	60fb      	str	r3, [r7, #12]
   1ed3a:	2300      	movs	r3, #0
   1ed3c:	62bb      	str	r3, [r7, #40]	; 0x28
   1ed3e:	6878      	ldr	r0, [r7, #4]
   1ed40:	f7f4 fc2e 	bl	135a0 <__aeabi_f2d>
   1ed44:	4602      	mov	r2, r0
   1ed46:	460b      	mov	r3, r1
   1ed48:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1ed4c:	6838      	ldr	r0, [r7, #0]
   1ed4e:	f7f4 fc27 	bl	135a0 <__aeabi_f2d>
   1ed52:	4602      	mov	r2, r0
   1ed54:	460b      	mov	r3, r1
   1ed56:	e9c7 2306 	strd	r2, r3, [r7, #24]
   1ed5a:	4b11      	ldr	r3, [pc, #68]	; (1eda0 <powf+0x2ec>)
   1ed5c:	f993 3000 	ldrsb.w	r3, [r3]
   1ed60:	2b00      	cmp	r3, #0
   1ed62:	d106      	bne.n	1ed72 <powf+0x2be>
   1ed64:	f04f 0200 	mov.w	r2, #0
   1ed68:	f04f 0300 	mov.w	r3, #0
   1ed6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1ed70:	e00b      	b.n	1ed8a <powf+0x2d6>
   1ed72:	eddf 7a0f 	vldr	s15, [pc, #60]	; 1edb0 <powf+0x2fc>
   1ed76:	ee87 7aa7 	vdiv.f32	s14, s15, s15
   1ed7a:	ee17 0a10 	vmov	r0, s14
   1ed7e:	f7f4 fc0f 	bl	135a0 <__aeabi_f2d>
   1ed82:	4602      	mov	r2, r0
   1ed84:	460b      	mov	r3, r1
   1ed86:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1ed8a:	4b05      	ldr	r3, [pc, #20]	; (1eda0 <powf+0x2ec>)
   1ed8c:	f993 3000 	ldrsb.w	r3, [r3]
   1ed90:	2b02      	cmp	r3, #2
   1ed92:	d10f      	bne.n	1edb4 <powf+0x300>
   1ed94:	f003 fad5 	bl	22342 <__errno>
   1ed98:	4603      	mov	r3, r0
   1ed9a:	2221      	movs	r2, #33	; 0x21
   1ed9c:	601a      	str	r2, [r3, #0]
   1ed9e:	e016      	b.n	1edce <powf+0x31a>
   1eda0:	200200c9 	.word	0x200200c9
   1eda4:	00025af8 	.word	0x00025af8
   1eda8:	3ff00000 	.word	0x3ff00000
   1edac:	fff00000 	.word	0xfff00000
   1edb0:	00000000 	.word	0x00000000
   1edb4:	f107 0308 	add.w	r3, r7, #8
   1edb8:	4618      	mov	r0, r3
   1edba:	f005 faa8 	bl	2430e <matherr>
   1edbe:	4603      	mov	r3, r0
   1edc0:	2b00      	cmp	r3, #0
   1edc2:	d104      	bne.n	1edce <powf+0x31a>
   1edc4:	f003 fabd 	bl	22342 <__errno>
   1edc8:	4603      	mov	r3, r0
   1edca:	2221      	movs	r2, #33	; 0x21
   1edcc:	601a      	str	r2, [r3, #0]
   1edce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1edd0:	2b00      	cmp	r3, #0
   1edd2:	d004      	beq.n	1edde <powf+0x32a>
   1edd4:	f003 fab5 	bl	22342 <__errno>
   1edd8:	4602      	mov	r2, r0
   1edda:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eddc:	6013      	str	r3, [r2, #0]
   1edde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   1ede2:	4610      	mov	r0, r2
   1ede4:	4619      	mov	r1, r3
   1ede6:	f7f4 ff0b 	bl	13c00 <__aeabi_d2f>
   1edea:	4603      	mov	r3, r0
   1edec:	e0e1      	b.n	1efb2 <powf+0x4fe>
   1edee:	2303      	movs	r3, #3
   1edf0:	60bb      	str	r3, [r7, #8]
   1edf2:	4b72      	ldr	r3, [pc, #456]	; (1efbc <powf+0x508>)
   1edf4:	60fb      	str	r3, [r7, #12]
   1edf6:	2300      	movs	r3, #0
   1edf8:	62bb      	str	r3, [r7, #40]	; 0x28
   1edfa:	6878      	ldr	r0, [r7, #4]
   1edfc:	f7f4 fbd0 	bl	135a0 <__aeabi_f2d>
   1ee00:	4602      	mov	r2, r0
   1ee02:	460b      	mov	r3, r1
   1ee04:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1ee08:	6838      	ldr	r0, [r7, #0]
   1ee0a:	f7f4 fbc9 	bl	135a0 <__aeabi_f2d>
   1ee0e:	4602      	mov	r2, r0
   1ee10:	460b      	mov	r3, r1
   1ee12:	e9c7 2306 	strd	r2, r3, [r7, #24]
   1ee16:	4b6a      	ldr	r3, [pc, #424]	; (1efc0 <powf+0x50c>)
   1ee18:	f993 3000 	ldrsb.w	r3, [r3]
   1ee1c:	2b00      	cmp	r3, #0
   1ee1e:	d125      	bne.n	1ee6c <powf+0x3b8>
   1ee20:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1ee24:	4b67      	ldr	r3, [pc, #412]	; (1efc4 <powf+0x510>)
   1ee26:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1ee2a:	edd7 7a00 	vldr	s15, [r7]
   1ee2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1ee32:	ee67 7a87 	vmul.f32	s15, s15, s14
   1ee36:	edc7 7a00 	vstr	s15, [r7]
   1ee3a:	edd7 7a01 	vldr	s15, [r7, #4]
   1ee3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1ee42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ee46:	d536      	bpl.n	1eeb6 <powf+0x402>
   1ee48:	6838      	ldr	r0, [r7, #0]
   1ee4a:	f005 faa6 	bl	2439a <rintf>
   1ee4e:	ee07 0a10 	vmov	s14, r0
   1ee52:	edd7 7a00 	vldr	s15, [r7]
   1ee56:	eef4 7a47 	vcmp.f32	s15, s14
   1ee5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ee5e:	d02a      	beq.n	1eeb6 <powf+0x402>
   1ee60:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   1ee64:	4b58      	ldr	r3, [pc, #352]	; (1efc8 <powf+0x514>)
   1ee66:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1ee6a:	e024      	b.n	1eeb6 <powf+0x402>
   1ee6c:	f04f 0200 	mov.w	r2, #0
   1ee70:	4b56      	ldr	r3, [pc, #344]	; (1efcc <powf+0x518>)
   1ee72:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1ee76:	edd7 7a00 	vldr	s15, [r7]
   1ee7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   1ee7e:	ee67 7a87 	vmul.f32	s15, s15, s14
   1ee82:	edc7 7a00 	vstr	s15, [r7]
   1ee86:	edd7 7a01 	vldr	s15, [r7, #4]
   1ee8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1ee8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ee92:	d510      	bpl.n	1eeb6 <powf+0x402>
   1ee94:	6838      	ldr	r0, [r7, #0]
   1ee96:	f005 fa80 	bl	2439a <rintf>
   1ee9a:	ee07 0a10 	vmov	s14, r0
   1ee9e:	edd7 7a00 	vldr	s15, [r7]
   1eea2:	eef4 7a47 	vcmp.f32	s15, s14
   1eea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1eeaa:	d004      	beq.n	1eeb6 <powf+0x402>
   1eeac:	f04f 0200 	mov.w	r2, #0
   1eeb0:	4b47      	ldr	r3, [pc, #284]	; (1efd0 <powf+0x51c>)
   1eeb2:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1eeb6:	4b42      	ldr	r3, [pc, #264]	; (1efc0 <powf+0x50c>)
   1eeb8:	f993 3000 	ldrsb.w	r3, [r3]
   1eebc:	2b02      	cmp	r3, #2
   1eebe:	d105      	bne.n	1eecc <powf+0x418>
   1eec0:	f003 fa3f 	bl	22342 <__errno>
   1eec4:	4603      	mov	r3, r0
   1eec6:	2222      	movs	r2, #34	; 0x22
   1eec8:	601a      	str	r2, [r3, #0]
   1eeca:	e00c      	b.n	1eee6 <powf+0x432>
   1eecc:	f107 0308 	add.w	r3, r7, #8
   1eed0:	4618      	mov	r0, r3
   1eed2:	f005 fa1c 	bl	2430e <matherr>
   1eed6:	4603      	mov	r3, r0
   1eed8:	2b00      	cmp	r3, #0
   1eeda:	d104      	bne.n	1eee6 <powf+0x432>
   1eedc:	f003 fa31 	bl	22342 <__errno>
   1eee0:	4603      	mov	r3, r0
   1eee2:	2222      	movs	r2, #34	; 0x22
   1eee4:	601a      	str	r2, [r3, #0]
   1eee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eee8:	2b00      	cmp	r3, #0
   1eeea:	d004      	beq.n	1eef6 <powf+0x442>
   1eeec:	f003 fa29 	bl	22342 <__errno>
   1eef0:	4602      	mov	r2, r0
   1eef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1eef4:	6013      	str	r3, [r2, #0]
   1eef6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   1eefa:	4610      	mov	r0, r2
   1eefc:	4619      	mov	r1, r3
   1eefe:	f7f4 fe7f 	bl	13c00 <__aeabi_d2f>
   1ef02:	4603      	mov	r3, r0
   1ef04:	e055      	b.n	1efb2 <powf+0x4fe>
   1ef06:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
   1ef0a:	eef5 7a40 	vcmp.f32	s15, #0.0
   1ef0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ef12:	d14d      	bne.n	1efb0 <powf+0x4fc>
   1ef14:	6878      	ldr	r0, [r7, #4]
   1ef16:	f005 fa27 	bl	24368 <finitef>
   1ef1a:	4603      	mov	r3, r0
   1ef1c:	2b00      	cmp	r3, #0
   1ef1e:	d047      	beq.n	1efb0 <powf+0x4fc>
   1ef20:	6838      	ldr	r0, [r7, #0]
   1ef22:	f005 fa21 	bl	24368 <finitef>
   1ef26:	4603      	mov	r3, r0
   1ef28:	2b00      	cmp	r3, #0
   1ef2a:	d041      	beq.n	1efb0 <powf+0x4fc>
   1ef2c:	2304      	movs	r3, #4
   1ef2e:	60bb      	str	r3, [r7, #8]
   1ef30:	4b22      	ldr	r3, [pc, #136]	; (1efbc <powf+0x508>)
   1ef32:	60fb      	str	r3, [r7, #12]
   1ef34:	2300      	movs	r3, #0
   1ef36:	62bb      	str	r3, [r7, #40]	; 0x28
   1ef38:	6878      	ldr	r0, [r7, #4]
   1ef3a:	f7f4 fb31 	bl	135a0 <__aeabi_f2d>
   1ef3e:	4602      	mov	r2, r0
   1ef40:	460b      	mov	r3, r1
   1ef42:	e9c7 2304 	strd	r2, r3, [r7, #16]
   1ef46:	6838      	ldr	r0, [r7, #0]
   1ef48:	f7f4 fb2a 	bl	135a0 <__aeabi_f2d>
   1ef4c:	4602      	mov	r2, r0
   1ef4e:	460b      	mov	r3, r1
   1ef50:	e9c7 2306 	strd	r2, r3, [r7, #24]
   1ef54:	f04f 0200 	mov.w	r2, #0
   1ef58:	f04f 0300 	mov.w	r3, #0
   1ef5c:	e9c7 2308 	strd	r2, r3, [r7, #32]
   1ef60:	4b17      	ldr	r3, [pc, #92]	; (1efc0 <powf+0x50c>)
   1ef62:	f993 3000 	ldrsb.w	r3, [r3]
   1ef66:	2b02      	cmp	r3, #2
   1ef68:	d105      	bne.n	1ef76 <powf+0x4c2>
   1ef6a:	f003 f9ea 	bl	22342 <__errno>
   1ef6e:	4603      	mov	r3, r0
   1ef70:	2222      	movs	r2, #34	; 0x22
   1ef72:	601a      	str	r2, [r3, #0]
   1ef74:	e00c      	b.n	1ef90 <powf+0x4dc>
   1ef76:	f107 0308 	add.w	r3, r7, #8
   1ef7a:	4618      	mov	r0, r3
   1ef7c:	f005 f9c7 	bl	2430e <matherr>
   1ef80:	4603      	mov	r3, r0
   1ef82:	2b00      	cmp	r3, #0
   1ef84:	d104      	bne.n	1ef90 <powf+0x4dc>
   1ef86:	f003 f9dc 	bl	22342 <__errno>
   1ef8a:	4603      	mov	r3, r0
   1ef8c:	2222      	movs	r2, #34	; 0x22
   1ef8e:	601a      	str	r2, [r3, #0]
   1ef90:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ef92:	2b00      	cmp	r3, #0
   1ef94:	d004      	beq.n	1efa0 <powf+0x4ec>
   1ef96:	f003 f9d4 	bl	22342 <__errno>
   1ef9a:	4602      	mov	r2, r0
   1ef9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ef9e:	6013      	str	r3, [r2, #0]
   1efa0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   1efa4:	4610      	mov	r0, r2
   1efa6:	4619      	mov	r1, r3
   1efa8:	f7f4 fe2a 	bl	13c00 <__aeabi_d2f>
   1efac:	4603      	mov	r3, r0
   1efae:	e000      	b.n	1efb2 <powf+0x4fe>
   1efb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1efb2:	4618      	mov	r0, r3
   1efb4:	3738      	adds	r7, #56	; 0x38
   1efb6:	46bd      	mov	sp, r7
   1efb8:	bd80      	pop	{r7, pc}
   1efba:	bf00      	nop
   1efbc:	00025af8 	.word	0x00025af8
   1efc0:	200200c9 	.word	0x200200c9
   1efc4:	47efffff 	.word	0x47efffff
   1efc8:	c7efffff 	.word	0xc7efffff
   1efcc:	7ff00000 	.word	0x7ff00000
   1efd0:	fff00000 	.word	0xfff00000

0001efd4 <__ieee754_expf>:
   1efd4:	b480      	push	{r7}
   1efd6:	b093      	sub	sp, #76	; 0x4c
   1efd8:	af00      	add	r7, sp, #0
   1efda:	6078      	str	r0, [r7, #4]
   1efdc:	2300      	movs	r3, #0
   1efde:	63fb      	str	r3, [r7, #60]	; 0x3c
   1efe0:	687b      	ldr	r3, [r7, #4]
   1efe2:	61bb      	str	r3, [r7, #24]
   1efe4:	69bb      	ldr	r3, [r7, #24]
   1efe6:	63bb      	str	r3, [r7, #56]	; 0x38
   1efe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1efea:	0fdb      	lsrs	r3, r3, #31
   1efec:	637b      	str	r3, [r7, #52]	; 0x34
   1efee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1eff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1eff4:	633b      	str	r3, [r7, #48]	; 0x30
   1eff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1eff8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1effc:	d904      	bls.n	1f008 <__ieee754_expf+0x34>
   1effe:	edd7 7a01 	vldr	s15, [r7, #4]
   1f002:	ee77 7aa7 	vadd.f32	s15, s15, s15
   1f006:	e123      	b.n	1f250 <__ieee754_expf+0x27c>
   1f008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f00a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1f00e:	d108      	bne.n	1f022 <__ieee754_expf+0x4e>
   1f010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1f012:	2b00      	cmp	r3, #0
   1f014:	d102      	bne.n	1f01c <__ieee754_expf+0x48>
   1f016:	edd7 7a01 	vldr	s15, [r7, #4]
   1f01a:	e119      	b.n	1f250 <__ieee754_expf+0x27c>
   1f01c:	eddf 7a90 	vldr	s15, [pc, #576]	; 1f260 <__ieee754_expf+0x28c>
   1f020:	e116      	b.n	1f250 <__ieee754_expf+0x27c>
   1f022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f024:	4a8f      	ldr	r2, [pc, #572]	; (1f264 <__ieee754_expf+0x290>)
   1f026:	4293      	cmp	r3, r2
   1f028:	dd06      	ble.n	1f038 <__ieee754_expf+0x64>
   1f02a:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 1f268 <__ieee754_expf+0x294>
   1f02e:	eddf 7a8e 	vldr	s15, [pc, #568]	; 1f268 <__ieee754_expf+0x294>
   1f032:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f036:	e10b      	b.n	1f250 <__ieee754_expf+0x27c>
   1f038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f03a:	2b00      	cmp	r3, #0
   1f03c:	da0a      	bge.n	1f054 <__ieee754_expf+0x80>
   1f03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f040:	4a8a      	ldr	r2, [pc, #552]	; (1f26c <__ieee754_expf+0x298>)
   1f042:	4293      	cmp	r3, r2
   1f044:	d906      	bls.n	1f054 <__ieee754_expf+0x80>
   1f046:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 1f270 <__ieee754_expf+0x29c>
   1f04a:	eddf 7a89 	vldr	s15, [pc, #548]	; 1f270 <__ieee754_expf+0x29c>
   1f04e:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f052:	e0fd      	b.n	1f250 <__ieee754_expf+0x27c>
   1f054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f056:	4a87      	ldr	r2, [pc, #540]	; (1f274 <__ieee754_expf+0x2a0>)
   1f058:	4293      	cmp	r3, r2
   1f05a:	d953      	bls.n	1f104 <__ieee754_expf+0x130>
   1f05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f05e:	4a86      	ldr	r2, [pc, #536]	; (1f278 <__ieee754_expf+0x2a4>)
   1f060:	4293      	cmp	r3, r2
   1f062:	d818      	bhi.n	1f096 <__ieee754_expf+0xc2>
   1f064:	4a85      	ldr	r2, [pc, #532]	; (1f27c <__ieee754_expf+0x2a8>)
   1f066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1f068:	009b      	lsls	r3, r3, #2
   1f06a:	4413      	add	r3, r2
   1f06c:	edd3 7a00 	vldr	s15, [r3]
   1f070:	ed97 7a01 	vldr	s14, [r7, #4]
   1f074:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f078:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
   1f07c:	4a80      	ldr	r2, [pc, #512]	; (1f280 <__ieee754_expf+0x2ac>)
   1f07e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1f080:	009b      	lsls	r3, r3, #2
   1f082:	4413      	add	r3, r2
   1f084:	681b      	ldr	r3, [r3, #0]
   1f086:	643b      	str	r3, [r7, #64]	; 0x40
   1f088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1f08a:	f1c3 0201 	rsb	r2, r3, #1
   1f08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1f090:	1ad3      	subs	r3, r2, r3
   1f092:	63fb      	str	r3, [r7, #60]	; 0x3c
   1f094:	e02d      	b.n	1f0f2 <__ieee754_expf+0x11e>
   1f096:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 1f284 <__ieee754_expf+0x2b0>
   1f09a:	edd7 7a01 	vldr	s15, [r7, #4]
   1f09e:	ee27 7a27 	vmul.f32	s14, s14, s15
   1f0a2:	4a79      	ldr	r2, [pc, #484]	; (1f288 <__ieee754_expf+0x2b4>)
   1f0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1f0a6:	009b      	lsls	r3, r3, #2
   1f0a8:	4413      	add	r3, r2
   1f0aa:	edd3 7a00 	vldr	s15, [r3]
   1f0ae:	ee77 7a27 	vadd.f32	s15, s14, s15
   1f0b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1f0b6:	ee17 3a90 	vmov	r3, s15
   1f0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   1f0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f0be:	ee07 3a90 	vmov	s15, r3
   1f0c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1f0c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   1f0ca:	ed9f 7a70 	vldr	s14, [pc, #448]	; 1f28c <__ieee754_expf+0x2b8>
   1f0ce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   1f0d2:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f0d6:	ed97 7a01 	vldr	s14, [r7, #4]
   1f0da:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f0de:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
   1f0e2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 1f290 <__ieee754_expf+0x2bc>
   1f0e6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   1f0ea:	ee67 7a87 	vmul.f32	s15, s15, s14
   1f0ee:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
   1f0f2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
   1f0f6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   1f0fa:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f0fe:	edc7 7a01 	vstr	s15, [r7, #4]
   1f102:	e017      	b.n	1f134 <__ieee754_expf+0x160>
   1f104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f106:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
   1f10a:	d213      	bcs.n	1f134 <__ieee754_expf+0x160>
   1f10c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 1f268 <__ieee754_expf+0x294>
   1f110:	edd7 7a01 	vldr	s15, [r7, #4]
   1f114:	ee77 7a27 	vadd.f32	s15, s14, s15
   1f118:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1f11c:	eef4 7ac7 	vcmpe.f32	s15, s14
   1f120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f124:	dd06      	ble.n	1f134 <__ieee754_expf+0x160>
   1f126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1f12a:	edd7 7a01 	vldr	s15, [r7, #4]
   1f12e:	ee77 7a27 	vadd.f32	s15, s14, s15
   1f132:	e08d      	b.n	1f250 <__ieee754_expf+0x27c>
   1f134:	edd7 7a01 	vldr	s15, [r7, #4]
   1f138:	ee67 7aa7 	vmul.f32	s15, s15, s15
   1f13c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   1f140:	ed9f 7a54 	vldr	s14, [pc, #336]	; 1f294 <__ieee754_expf+0x2c0>
   1f144:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   1f148:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f14c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 1f298 <__ieee754_expf+0x2c4>
   1f150:	ee37 7a87 	vadd.f32	s14, s15, s14
   1f154:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   1f158:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f15c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 1f29c <__ieee754_expf+0x2c8>
   1f160:	ee37 7a87 	vadd.f32	s14, s15, s14
   1f164:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   1f168:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f16c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 1f2a0 <__ieee754_expf+0x2cc>
   1f170:	ee37 7a87 	vadd.f32	s14, s15, s14
   1f174:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   1f178:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f17c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 1f2a4 <__ieee754_expf+0x2d0>
   1f180:	ee37 7a87 	vadd.f32	s14, s15, s14
   1f184:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   1f188:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f18c:	ed97 7a01 	vldr	s14, [r7, #4]
   1f190:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f194:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
   1f198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f19a:	2b00      	cmp	r3, #0
   1f19c:	d116      	bne.n	1f1cc <__ieee754_expf+0x1f8>
   1f19e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1f1a2:	ed97 7a01 	vldr	s14, [r7, #4]
   1f1a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   1f1aa:	ee67 6a27 	vmul.f32	s13, s14, s15
   1f1ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   1f1b2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   1f1b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1f1ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   1f1be:	edd7 7a01 	vldr	s15, [r7, #4]
   1f1c2:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f1c6:	ee76 7a67 	vsub.f32	s15, s12, s15
   1f1ca:	e041      	b.n	1f250 <__ieee754_expf+0x27c>
   1f1cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   1f1d0:	ed97 7a01 	vldr	s14, [r7, #4]
   1f1d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   1f1d8:	ee67 6a27 	vmul.f32	s13, s14, s15
   1f1dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   1f1e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   1f1e4:	ee37 7a67 	vsub.f32	s14, s14, s15
   1f1e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
   1f1ec:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
   1f1f0:	ee37 7a67 	vsub.f32	s14, s14, s15
   1f1f4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
   1f1f8:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f1fc:	ee76 7a67 	vsub.f32	s15, s12, s15
   1f200:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
   1f204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f206:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
   1f20a:	db0e      	blt.n	1f22a <__ieee754_expf+0x256>
   1f20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f20e:	617b      	str	r3, [r7, #20]
   1f210:	697b      	ldr	r3, [r7, #20]
   1f212:	61fb      	str	r3, [r7, #28]
   1f214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f216:	05db      	lsls	r3, r3, #23
   1f218:	461a      	mov	r2, r3
   1f21a:	69fb      	ldr	r3, [r7, #28]
   1f21c:	4413      	add	r3, r2
   1f21e:	613b      	str	r3, [r7, #16]
   1f220:	693b      	ldr	r3, [r7, #16]
   1f222:	627b      	str	r3, [r7, #36]	; 0x24
   1f224:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   1f228:	e012      	b.n	1f250 <__ieee754_expf+0x27c>
   1f22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1f22c:	60fb      	str	r3, [r7, #12]
   1f22e:	68fb      	ldr	r3, [r7, #12]
   1f230:	623b      	str	r3, [r7, #32]
   1f232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f234:	3364      	adds	r3, #100	; 0x64
   1f236:	05db      	lsls	r3, r3, #23
   1f238:	461a      	mov	r2, r3
   1f23a:	6a3b      	ldr	r3, [r7, #32]
   1f23c:	4413      	add	r3, r2
   1f23e:	60bb      	str	r3, [r7, #8]
   1f240:	68bb      	ldr	r3, [r7, #8]
   1f242:	627b      	str	r3, [r7, #36]	; 0x24
   1f244:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 1f270 <__ieee754_expf+0x29c>
   1f248:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   1f24c:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f250:	ee17 3a90 	vmov	r3, s15
   1f254:	4618      	mov	r0, r3
   1f256:	374c      	adds	r7, #76	; 0x4c
   1f258:	46bd      	mov	sp, r7
   1f25a:	f85d 7b04 	ldr.w	r7, [sp], #4
   1f25e:	4770      	bx	lr
   1f260:	00000000 	.word	0x00000000
   1f264:	42b17217 	.word	0x42b17217
   1f268:	7149f2ca 	.word	0x7149f2ca
   1f26c:	42cff1b5 	.word	0x42cff1b5
   1f270:	0d800000 	.word	0x0d800000
   1f274:	3eb17218 	.word	0x3eb17218
   1f278:	3f851591 	.word	0x3f851591
   1f27c:	0002aa84 	.word	0x0002aa84
   1f280:	0002aa8c 	.word	0x0002aa8c
   1f284:	3fb8aa3b 	.word	0x3fb8aa3b
   1f288:	0002aa7c 	.word	0x0002aa7c
   1f28c:	3f317180 	.word	0x3f317180
   1f290:	3717f7d1 	.word	0x3717f7d1
   1f294:	3331bb4c 	.word	0x3331bb4c
   1f298:	b5ddea0e 	.word	0xb5ddea0e
   1f29c:	388ab355 	.word	0x388ab355
   1f2a0:	bb360b61 	.word	0xbb360b61
   1f2a4:	3e2aaaab 	.word	0x3e2aaaab

0001f2a8 <__ieee754_powf>:
   1f2a8:	b580      	push	{r7, lr}
   1f2aa:	b0b8      	sub	sp, #224	; 0xe0
   1f2ac:	af00      	add	r7, sp, #0
   1f2ae:	6078      	str	r0, [r7, #4]
   1f2b0:	6039      	str	r1, [r7, #0]
   1f2b2:	687b      	ldr	r3, [r7, #4]
   1f2b4:	667b      	str	r3, [r7, #100]	; 0x64
   1f2b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   1f2b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   1f2bc:	683b      	ldr	r3, [r7, #0]
   1f2be:	663b      	str	r3, [r7, #96]	; 0x60
   1f2c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   1f2c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
   1f2c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1f2ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1f2ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   1f2d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1f2d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1f2da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   1f2de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1f2e2:	2b00      	cmp	r3, #0
   1f2e4:	d103      	bne.n	1f2ee <__ieee754_powf+0x46>
   1f2e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1f2ea:	f000 bd80 	b.w	1fdee <__ieee754_powf+0xb46>
   1f2ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f2f2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1f2f6:	dc04      	bgt.n	1f302 <__ieee754_powf+0x5a>
   1f2f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1f2fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1f300:	dd0f      	ble.n	1f322 <__ieee754_powf+0x7a>
   1f302:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f306:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   1f30a:	d103      	bne.n	1f314 <__ieee754_powf+0x6c>
   1f30c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1f310:	f000 bd6d 	b.w	1fdee <__ieee754_powf+0xb46>
   1f314:	48e5      	ldr	r0, [pc, #916]	; (1f6ac <__ieee754_powf+0x404>)
   1f316:	f001 fbff 	bl	20b18 <nanf>
   1f31a:	ee07 0a90 	vmov	s15, r0
   1f31e:	f000 bd66 	b.w	1fdee <__ieee754_powf+0xb46>
   1f322:	2300      	movs	r3, #0
   1f324:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   1f328:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1f32c:	2b00      	cmp	r3, #0
   1f32e:	da31      	bge.n	1f394 <__ieee754_powf+0xec>
   1f330:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1f334:	f1b3 4f97 	cmp.w	r3, #1266679808	; 0x4b800000
   1f338:	db03      	blt.n	1f342 <__ieee754_powf+0x9a>
   1f33a:	2302      	movs	r3, #2
   1f33c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   1f340:	e028      	b.n	1f394 <__ieee754_powf+0xec>
   1f342:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1f346:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   1f34a:	db23      	blt.n	1f394 <__ieee754_powf+0xec>
   1f34c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1f350:	15db      	asrs	r3, r3, #23
   1f352:	3b7f      	subs	r3, #127	; 0x7f
   1f354:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   1f358:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1f35c:	f1c3 0317 	rsb	r3, r3, #23
   1f360:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   1f364:	fa42 f303 	asr.w	r3, r2, r3
   1f368:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1f36c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1f370:	f1c3 0317 	rsb	r3, r3, #23
   1f374:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1f378:	fa02 f303 	lsl.w	r3, r2, r3
   1f37c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   1f380:	429a      	cmp	r2, r3
   1f382:	d107      	bne.n	1f394 <__ieee754_powf+0xec>
   1f384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1f388:	f003 0301 	and.w	r3, r3, #1
   1f38c:	f1c3 0302 	rsb	r3, r3, #2
   1f390:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   1f394:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1f398:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1f39c:	d127      	bne.n	1f3ee <__ieee754_powf+0x146>
   1f39e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f3a2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   1f3a6:	d103      	bne.n	1f3b0 <__ieee754_powf+0x108>
   1f3a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1f3ac:	f000 bd1f 	b.w	1fdee <__ieee754_powf+0xb46>
   1f3b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f3b4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   1f3b8:	dd0b      	ble.n	1f3d2 <__ieee754_powf+0x12a>
   1f3ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1f3be:	2b00      	cmp	r3, #0
   1f3c0:	db03      	blt.n	1f3ca <__ieee754_powf+0x122>
   1f3c2:	edd7 7a00 	vldr	s15, [r7]
   1f3c6:	f000 bd12 	b.w	1fdee <__ieee754_powf+0xb46>
   1f3ca:	eddf 7ab9 	vldr	s15, [pc, #740]	; 1f6b0 <__ieee754_powf+0x408>
   1f3ce:	f000 bd0e 	b.w	1fdee <__ieee754_powf+0xb46>
   1f3d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1f3d6:	2b00      	cmp	r3, #0
   1f3d8:	da05      	bge.n	1f3e6 <__ieee754_powf+0x13e>
   1f3da:	edd7 7a00 	vldr	s15, [r7]
   1f3de:	eef1 7a67 	vneg.f32	s15, s15
   1f3e2:	f000 bd04 	b.w	1fdee <__ieee754_powf+0xb46>
   1f3e6:	eddf 7ab2 	vldr	s15, [pc, #712]	; 1f6b0 <__ieee754_powf+0x408>
   1f3ea:	f000 bd00 	b.w	1fdee <__ieee754_powf+0xb46>
   1f3ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1f3f2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   1f3f6:	d10f      	bne.n	1f418 <__ieee754_powf+0x170>
   1f3f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1f3fc:	2b00      	cmp	r3, #0
   1f3fe:	da07      	bge.n	1f410 <__ieee754_powf+0x168>
   1f400:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   1f404:	ed97 7a01 	vldr	s14, [r7, #4]
   1f408:	eec6 7a87 	vdiv.f32	s15, s13, s14
   1f40c:	f000 bcef 	b.w	1fdee <__ieee754_powf+0xb46>
   1f410:	edd7 7a01 	vldr	s15, [r7, #4]
   1f414:	f000 bceb 	b.w	1fdee <__ieee754_powf+0xb46>
   1f418:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1f41c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   1f420:	d105      	bne.n	1f42e <__ieee754_powf+0x186>
   1f422:	edd7 7a01 	vldr	s15, [r7, #4]
   1f426:	ee67 7aa7 	vmul.f32	s15, s15, s15
   1f42a:	f000 bce0 	b.w	1fdee <__ieee754_powf+0xb46>
   1f42e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1f432:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1f436:	d10a      	bne.n	1f44e <__ieee754_powf+0x1a6>
   1f438:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1f43c:	2b00      	cmp	r3, #0
   1f43e:	db06      	blt.n	1f44e <__ieee754_powf+0x1a6>
   1f440:	6878      	ldr	r0, [r7, #4]
   1f442:	f004 ff33 	bl	242ac <__ieee754_sqrtf>
   1f446:	ee07 0a90 	vmov	s15, r0
   1f44a:	f000 bcd0 	b.w	1fdee <__ieee754_powf+0xb46>
   1f44e:	6878      	ldr	r0, [r7, #4]
   1f450:	f004 ff75 	bl	2433e <fabsf>
   1f454:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
   1f458:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f45c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   1f460:	d008      	beq.n	1f474 <__ieee754_powf+0x1cc>
   1f462:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f466:	2b00      	cmp	r3, #0
   1f468:	d004      	beq.n	1f474 <__ieee754_powf+0x1cc>
   1f46a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f46e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   1f472:	d137      	bne.n	1f4e4 <__ieee754_powf+0x23c>
   1f474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   1f478:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
   1f47c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1f480:	2b00      	cmp	r3, #0
   1f482:	da07      	bge.n	1f494 <__ieee754_powf+0x1ec>
   1f484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   1f488:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
   1f48c:	eec6 7a87 	vdiv.f32	s15, s13, s14
   1f490:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
   1f494:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1f498:	2b00      	cmp	r3, #0
   1f49a:	da1f      	bge.n	1f4dc <__ieee754_powf+0x234>
   1f49c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f4a0:	f1a3 527e 	sub.w	r2, r3, #1065353216	; 0x3f800000
   1f4a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   1f4a8:	4313      	orrs	r3, r2
   1f4aa:	2b00      	cmp	r3, #0
   1f4ac:	d10c      	bne.n	1f4c8 <__ieee754_powf+0x220>
   1f4ae:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
   1f4b2:	ee77 6ae7 	vsub.f32	s13, s15, s15
   1f4b6:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
   1f4ba:	ee37 7ae7 	vsub.f32	s14, s15, s15
   1f4be:	eec6 7a87 	vdiv.f32	s15, s13, s14
   1f4c2:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
   1f4c6:	e009      	b.n	1f4dc <__ieee754_powf+0x234>
   1f4c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   1f4cc:	2b01      	cmp	r3, #1
   1f4ce:	d105      	bne.n	1f4dc <__ieee754_powf+0x234>
   1f4d0:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
   1f4d4:	eef1 7a67 	vneg.f32	s15, s15
   1f4d8:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
   1f4dc:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
   1f4e0:	f000 bc85 	b.w	1fdee <__ieee754_powf+0xb46>
   1f4e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1f4e8:	0fdb      	lsrs	r3, r3, #31
   1f4ea:	1e5a      	subs	r2, r3, #1
   1f4ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   1f4f0:	4313      	orrs	r3, r2
   1f4f2:	2b00      	cmp	r3, #0
   1f4f4:	d10b      	bne.n	1f50e <__ieee754_powf+0x266>
   1f4f6:	edd7 7a01 	vldr	s15, [r7, #4]
   1f4fa:	ee77 6ae7 	vsub.f32	s13, s15, s15
   1f4fe:	edd7 7a01 	vldr	s15, [r7, #4]
   1f502:	ee37 7ae7 	vsub.f32	s14, s15, s15
   1f506:	eec6 7a87 	vdiv.f32	s15, s13, s14
   1f50a:	f000 bc70 	b.w	1fdee <__ieee754_powf+0xb46>
   1f50e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   1f512:	f1b3 4f9a 	cmp.w	r3, #1291845632	; 0x4d000000
   1f516:	f340 808f 	ble.w	1f638 <__ieee754_powf+0x390>
   1f51a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f51e:	4a65      	ldr	r2, [pc, #404]	; (1f6b4 <__ieee754_powf+0x40c>)
   1f520:	4293      	cmp	r3, r2
   1f522:	dc13      	bgt.n	1f54c <__ieee754_powf+0x2a4>
   1f524:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1f528:	2b00      	cmp	r3, #0
   1f52a:	da07      	bge.n	1f53c <__ieee754_powf+0x294>
   1f52c:	ed9f 7a62 	vldr	s14, [pc, #392]	; 1f6b8 <__ieee754_powf+0x410>
   1f530:	eddf 7a61 	vldr	s15, [pc, #388]	; 1f6b8 <__ieee754_powf+0x410>
   1f534:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f538:	f000 bc59 	b.w	1fdee <__ieee754_powf+0xb46>
   1f53c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 1f6bc <__ieee754_powf+0x414>
   1f540:	eddf 7a5e 	vldr	s15, [pc, #376]	; 1f6bc <__ieee754_powf+0x414>
   1f544:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f548:	f000 bc51 	b.w	1fdee <__ieee754_powf+0xb46>
   1f54c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f550:	4a5b      	ldr	r2, [pc, #364]	; (1f6c0 <__ieee754_powf+0x418>)
   1f552:	4293      	cmp	r3, r2
   1f554:	dd13      	ble.n	1f57e <__ieee754_powf+0x2d6>
   1f556:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
   1f55a:	2b00      	cmp	r3, #0
   1f55c:	dd07      	ble.n	1f56e <__ieee754_powf+0x2c6>
   1f55e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 1f6b8 <__ieee754_powf+0x410>
   1f562:	eddf 7a55 	vldr	s15, [pc, #340]	; 1f6b8 <__ieee754_powf+0x410>
   1f566:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f56a:	f000 bc40 	b.w	1fdee <__ieee754_powf+0xb46>
   1f56e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 1f6bc <__ieee754_powf+0x414>
   1f572:	eddf 7a52 	vldr	s15, [pc, #328]	; 1f6bc <__ieee754_powf+0x414>
   1f576:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f57a:	f000 bc38 	b.w	1fdee <__ieee754_powf+0xb46>
   1f57e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
   1f582:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   1f586:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1f58a:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   1f58e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
   1f592:	ee27 7aa7 	vmul.f32	s14, s15, s15
   1f596:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
   1f59a:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
   1f59e:	ee67 7aa6 	vmul.f32	s15, s15, s13
   1f5a2:	eddf 6a48 	vldr	s13, [pc, #288]	; 1f6c4 <__ieee754_powf+0x41c>
   1f5a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
   1f5aa:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
   1f5ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
   1f5b2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   1f5b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
   1f5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f5be:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
   1f5c2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 1f6c8 <__ieee754_powf+0x420>
   1f5c6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
   1f5ca:	ee67 7a87 	vmul.f32	s15, s15, s14
   1f5ce:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
   1f5d2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 1f6cc <__ieee754_powf+0x424>
   1f5d6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
   1f5da:	ee27 7a27 	vmul.f32	s14, s14, s15
   1f5de:	eddf 6a3c 	vldr	s13, [pc, #240]	; 1f6d0 <__ieee754_powf+0x428>
   1f5e2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
   1f5e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
   1f5ea:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f5ee:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
   1f5f2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
   1f5f6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
   1f5fa:	ee77 7a27 	vadd.f32	s15, s14, s15
   1f5fe:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
   1f602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   1f606:	65fb      	str	r3, [r7, #92]	; 0x5c
   1f608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   1f60a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   1f60e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   1f612:	4b30      	ldr	r3, [pc, #192]	; (1f6d4 <__ieee754_powf+0x42c>)
   1f614:	4013      	ands	r3, r2
   1f616:	65bb      	str	r3, [r7, #88]	; 0x58
   1f618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   1f61a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
   1f61e:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
   1f622:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
   1f626:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f62a:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
   1f62e:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f632:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
   1f636:	e1fa      	b.n	1fa2e <__ieee754_powf+0x786>
   1f638:	2300      	movs	r3, #0
   1f63a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
   1f63e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   1f646:	da12      	bge.n	1f66e <__ieee754_powf+0x3c6>
   1f648:	ed9f 7a23 	vldr	s14, [pc, #140]	; 1f6d8 <__ieee754_powf+0x430>
   1f64c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
   1f650:	ee67 7a87 	vmul.f32	s15, s15, s14
   1f654:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
   1f658:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   1f65c:	3b18      	subs	r3, #24
   1f65e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
   1f662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
   1f666:	657b      	str	r3, [r7, #84]	; 0x54
   1f668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1f66a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   1f66e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f672:	15db      	asrs	r3, r3, #23
   1f674:	3b7f      	subs	r3, #127	; 0x7f
   1f676:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
   1f67a:	4413      	add	r3, r2
   1f67c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
   1f680:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f684:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1f688:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1f68c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1f690:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
   1f694:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   1f698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1f69c:	4a0f      	ldr	r2, [pc, #60]	; (1f6dc <__ieee754_powf+0x434>)
   1f69e:	4293      	cmp	r3, r2
   1f6a0:	dc1e      	bgt.n	1f6e0 <__ieee754_powf+0x438>
   1f6a2:	2300      	movs	r3, #0
   1f6a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   1f6a8:	e034      	b.n	1f714 <__ieee754_powf+0x46c>
   1f6aa:	bf00      	nop
   1f6ac:	00025b00 	.word	0x00025b00
   1f6b0:	00000000 	.word	0x00000000
   1f6b4:	3f7ffff7 	.word	0x3f7ffff7
   1f6b8:	7149f2ca 	.word	0x7149f2ca
   1f6bc:	0da24260 	.word	0x0da24260
   1f6c0:	3f800007 	.word	0x3f800007
   1f6c4:	3eaaaaab 	.word	0x3eaaaaab
   1f6c8:	3fb8aa00 	.word	0x3fb8aa00
   1f6cc:	36eca570 	.word	0x36eca570
   1f6d0:	3fb8aa3b 	.word	0x3fb8aa3b
   1f6d4:	fffff000 	.word	0xfffff000
   1f6d8:	4b800000 	.word	0x4b800000
   1f6dc:	001cc471 	.word	0x001cc471
   1f6e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1f6e4:	4a03      	ldr	r2, [pc, #12]	; (1f6f4 <__ieee754_powf+0x44c>)
   1f6e6:	4293      	cmp	r3, r2
   1f6e8:	dc06      	bgt.n	1f6f8 <__ieee754_powf+0x450>
   1f6ea:	2301      	movs	r3, #1
   1f6ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   1f6f0:	e010      	b.n	1f714 <__ieee754_powf+0x46c>
   1f6f2:	bf00      	nop
   1f6f4:	005db3d6 	.word	0x005db3d6
   1f6f8:	2300      	movs	r3, #0
   1f6fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   1f6fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   1f702:	3301      	adds	r3, #1
   1f704:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
   1f708:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f70c:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   1f710:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   1f714:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f718:	653b      	str	r3, [r7, #80]	; 0x50
   1f71a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1f71c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
   1f720:	4aea      	ldr	r2, [pc, #936]	; (1facc <__ieee754_powf+0x824>)
   1f722:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1f726:	009b      	lsls	r3, r3, #2
   1f728:	4413      	add	r3, r2
   1f72a:	edd3 7a00 	vldr	s15, [r3]
   1f72e:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
   1f732:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f736:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
   1f73a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   1f73e:	4ae3      	ldr	r2, [pc, #908]	; (1facc <__ieee754_powf+0x824>)
   1f740:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1f744:	009b      	lsls	r3, r3, #2
   1f746:	4413      	add	r3, r2
   1f748:	ed93 7a00 	vldr	s14, [r3]
   1f74c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
   1f750:	ee37 7a27 	vadd.f32	s14, s14, s15
   1f754:	eec6 7a87 	vdiv.f32	s15, s13, s14
   1f758:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
   1f75c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
   1f760:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
   1f764:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f768:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
   1f76c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
   1f770:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   1f774:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
   1f778:	64fb      	str	r3, [r7, #76]	; 0x4c
   1f77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   1f77c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   1f780:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   1f784:	4bd2      	ldr	r3, [pc, #840]	; (1fad0 <__ieee754_powf+0x828>)
   1f786:	4013      	ands	r3, r2
   1f788:	64bb      	str	r3, [r7, #72]	; 0x48
   1f78a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   1f78c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   1f790:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
   1f794:	105b      	asrs	r3, r3, #1
   1f796:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   1f79a:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
   1f79e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1f7a2:	055b      	lsls	r3, r3, #21
   1f7a4:	4413      	add	r3, r2
   1f7a6:	647b      	str	r3, [r7, #68]	; 0x44
   1f7a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1f7aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   1f7ae:	4ac7      	ldr	r2, [pc, #796]	; (1facc <__ieee754_powf+0x824>)
   1f7b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1f7b4:	009b      	lsls	r3, r3, #2
   1f7b6:	4413      	add	r3, r2
   1f7b8:	edd3 7a00 	vldr	s15, [r3]
   1f7bc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
   1f7c0:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f7c4:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
   1f7c8:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f7cc:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
   1f7d0:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
   1f7d4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
   1f7d8:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f7dc:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
   1f7e0:	ee37 7a67 	vsub.f32	s14, s14, s15
   1f7e4:	edd7 6a27 	vldr	s13, [r7, #156]	; 0x9c
   1f7e8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
   1f7ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
   1f7f0:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f7f4:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
   1f7f8:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f7fc:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
   1f800:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
   1f804:	ee67 7aa7 	vmul.f32	s15, s15, s15
   1f808:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
   1f80c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
   1f810:	ee27 7aa7 	vmul.f32	s14, s15, s15
   1f814:	eddf 6aaf 	vldr	s13, [pc, #700]	; 1fad4 <__ieee754_powf+0x82c>
   1f818:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
   1f81c:	ee66 7aa7 	vmul.f32	s15, s13, s15
   1f820:	eddf 6aad 	vldr	s13, [pc, #692]	; 1fad8 <__ieee754_powf+0x830>
   1f824:	ee77 6aa6 	vadd.f32	s13, s15, s13
   1f828:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
   1f82c:	ee66 7aa7 	vmul.f32	s15, s13, s15
   1f830:	eddf 6aaa 	vldr	s13, [pc, #680]	; 1fadc <__ieee754_powf+0x834>
   1f834:	ee77 6aa6 	vadd.f32	s13, s15, s13
   1f838:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
   1f83c:	ee66 7aa7 	vmul.f32	s15, s13, s15
   1f840:	eddf 6aa7 	vldr	s13, [pc, #668]	; 1fae0 <__ieee754_powf+0x838>
   1f844:	ee77 6aa6 	vadd.f32	s13, s15, s13
   1f848:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
   1f84c:	ee66 7aa7 	vmul.f32	s15, s13, s15
   1f850:	eddf 6aa4 	vldr	s13, [pc, #656]	; 1fae4 <__ieee754_powf+0x83c>
   1f854:	ee77 6aa6 	vadd.f32	s13, s15, s13
   1f858:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
   1f85c:	ee66 7aa7 	vmul.f32	s15, s13, s15
   1f860:	eddf 6aa1 	vldr	s13, [pc, #644]	; 1fae8 <__ieee754_powf+0x840>
   1f864:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1f868:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f86c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
   1f870:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
   1f874:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
   1f878:	ee37 7a27 	vadd.f32	s14, s14, s15
   1f87c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
   1f880:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f884:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
   1f888:	ee77 7a27 	vadd.f32	s15, s14, s15
   1f88c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
   1f890:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
   1f894:	ee67 7aa7 	vmul.f32	s15, s15, s15
   1f898:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
   1f89c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
   1f8a0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
   1f8a4:	ee77 7a87 	vadd.f32	s15, s15, s14
   1f8a8:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
   1f8ac:	ee77 7a27 	vadd.f32	s15, s14, s15
   1f8b0:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
   1f8b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
   1f8b8:	643b      	str	r3, [r7, #64]	; 0x40
   1f8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1f8bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   1f8c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   1f8c4:	4b82      	ldr	r3, [pc, #520]	; (1fad0 <__ieee754_powf+0x828>)
   1f8c6:	4013      	ands	r3, r2
   1f8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   1f8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   1f8cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   1f8d0:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
   1f8d4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
   1f8d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
   1f8dc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
   1f8e0:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f8e4:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
   1f8e8:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f8ec:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
   1f8f0:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
   1f8f4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
   1f8f8:	ee67 7a27 	vmul.f32	s15, s14, s15
   1f8fc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
   1f900:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
   1f904:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
   1f908:	ee27 7a27 	vmul.f32	s14, s14, s15
   1f90c:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
   1f910:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
   1f914:	ee66 7aa7 	vmul.f32	s15, s13, s15
   1f918:	ee77 7a27 	vadd.f32	s15, s14, s15
   1f91c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
   1f920:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
   1f924:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
   1f928:	ee77 7a27 	vadd.f32	s15, s14, s15
   1f92c:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
   1f930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
   1f934:	63bb      	str	r3, [r7, #56]	; 0x38
   1f936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1f938:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   1f93c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   1f940:	4b63      	ldr	r3, [pc, #396]	; (1fad0 <__ieee754_powf+0x828>)
   1f942:	4013      	ands	r3, r2
   1f944:	637b      	str	r3, [r7, #52]	; 0x34
   1f946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1f948:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
   1f94c:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
   1f950:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
   1f954:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f958:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
   1f95c:	ee77 7a67 	vsub.f32	s15, s14, s15
   1f960:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
   1f964:	ed9f 7a61 	vldr	s14, [pc, #388]	; 1faec <__ieee754_powf+0x844>
   1f968:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
   1f96c:	ee67 7a87 	vmul.f32	s15, s15, s14
   1f970:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
   1f974:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 1faf0 <__ieee754_powf+0x848>
   1f978:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
   1f97c:	ee27 7a27 	vmul.f32	s14, s14, s15
   1f980:	eddf 6a5c 	vldr	s13, [pc, #368]	; 1faf4 <__ieee754_powf+0x84c>
   1f984:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
   1f988:	ee66 7aa7 	vmul.f32	s15, s13, s15
   1f98c:	ee37 7a27 	vadd.f32	s14, s14, s15
   1f990:	4a59      	ldr	r2, [pc, #356]	; (1faf8 <__ieee754_powf+0x850>)
   1f992:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1f996:	009b      	lsls	r3, r3, #2
   1f998:	4413      	add	r3, r2
   1f99a:	edd3 7a00 	vldr	s15, [r3]
   1f99e:	ee77 7a27 	vadd.f32	s15, s14, s15
   1f9a2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
   1f9a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   1f9aa:	ee07 3a90 	vmov	s15, r3
   1f9ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1f9b2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   1f9b6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
   1f9ba:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
   1f9be:	ee37 7a27 	vadd.f32	s14, s14, s15
   1f9c2:	4a4e      	ldr	r2, [pc, #312]	; (1fafc <__ieee754_powf+0x854>)
   1f9c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1f9c8:	009b      	lsls	r3, r3, #2
   1f9ca:	4413      	add	r3, r2
   1f9cc:	edd3 7a00 	vldr	s15, [r3]
   1f9d0:	ee77 7a27 	vadd.f32	s15, s14, s15
   1f9d4:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
   1f9d8:	ee77 7a27 	vadd.f32	s15, s14, s15
   1f9dc:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
   1f9e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
   1f9e4:	633b      	str	r3, [r7, #48]	; 0x30
   1f9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f9e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   1f9ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   1f9f0:	4b37      	ldr	r3, [pc, #220]	; (1fad0 <__ieee754_powf+0x828>)
   1f9f2:	4013      	ands	r3, r2
   1f9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   1f9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1f9f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
   1f9fc:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
   1fa00:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
   1fa04:	ee37 7a67 	vsub.f32	s14, s14, s15
   1fa08:	4a3c      	ldr	r2, [pc, #240]	; (1fafc <__ieee754_powf+0x854>)
   1fa0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1fa0e:	009b      	lsls	r3, r3, #2
   1fa10:	4413      	add	r3, r2
   1fa12:	edd3 7a00 	vldr	s15, [r3]
   1fa16:	ee37 7a67 	vsub.f32	s14, s14, s15
   1fa1a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
   1fa1e:	ee77 7a67 	vsub.f32	s15, s14, s15
   1fa22:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
   1fa26:	ee77 7a67 	vsub.f32	s15, s14, s15
   1fa2a:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
   1fa2e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   1fa32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
   1fa36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
   1fa3a:	0fdb      	lsrs	r3, r3, #31
   1fa3c:	3b01      	subs	r3, #1
   1fa3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
   1fa42:	3a01      	subs	r2, #1
   1fa44:	4313      	orrs	r3, r2
   1fa46:	2b00      	cmp	r3, #0
   1fa48:	d105      	bne.n	1fa56 <__ieee754_powf+0x7ae>
   1fa4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1fa4e:	eef1 7a67 	vneg.f32	s15, s15
   1fa52:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
   1fa56:	683b      	ldr	r3, [r7, #0]
   1fa58:	62bb      	str	r3, [r7, #40]	; 0x28
   1fa5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1fa5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   1fa60:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   1fa64:	4b1a      	ldr	r3, [pc, #104]	; (1fad0 <__ieee754_powf+0x828>)
   1fa66:	4013      	ands	r3, r2
   1fa68:	627b      	str	r3, [r7, #36]	; 0x24
   1fa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1fa6c:	66fb      	str	r3, [r7, #108]	; 0x6c
   1fa6e:	ed97 7a00 	vldr	s14, [r7]
   1fa72:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
   1fa76:	ee37 7a67 	vsub.f32	s14, s14, s15
   1fa7a:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
   1fa7e:	ee27 7a27 	vmul.f32	s14, s14, s15
   1fa82:	edd7 6a00 	vldr	s13, [r7]
   1fa86:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
   1fa8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
   1fa8e:	ee77 7a27 	vadd.f32	s15, s14, s15
   1fa92:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
   1fa96:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
   1fa9a:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
   1fa9e:	ee67 7a27 	vmul.f32	s15, s14, s15
   1faa2:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
   1faa6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
   1faaa:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
   1faae:	ee77 7a27 	vadd.f32	s15, s14, s15
   1fab2:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
   1fab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
   1faba:	623b      	str	r3, [r7, #32]
   1fabc:	6a3b      	ldr	r3, [r7, #32]
   1fabe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1fac2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1fac6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1faca:	e01d      	b.n	1fb08 <__ieee754_powf+0x860>
   1facc:	0002aa94 	.word	0x0002aa94
   1fad0:	fffff000 	.word	0xfffff000
   1fad4:	3e53f142 	.word	0x3e53f142
   1fad8:	3e6c3255 	.word	0x3e6c3255
   1fadc:	3e8ba305 	.word	0x3e8ba305
   1fae0:	3eaaaaab 	.word	0x3eaaaaab
   1fae4:	3edb6db7 	.word	0x3edb6db7
   1fae8:	3f19999a 	.word	0x3f19999a
   1faec:	3f763800 	.word	0x3f763800
   1faf0:	369dc3a0 	.word	0x369dc3a0
   1faf4:	3f76384f 	.word	0x3f76384f
   1faf8:	0002aaa4 	.word	0x0002aaa4
   1fafc:	0002aa9c 	.word	0x0002aa9c
   1fb00:	3338aa3c 	.word	0x3338aa3c
   1fb04:	7149f2ca 	.word	0x7149f2ca
   1fb08:	66bb      	str	r3, [r7, #104]	; 0x68
   1fb0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1fb0e:	2b00      	cmp	r3, #0
   1fb10:	dd2e      	ble.n	1fb70 <__ieee754_powf+0x8c8>
   1fb12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1fb14:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   1fb18:	dd0a      	ble.n	1fb30 <__ieee754_powf+0x888>
   1fb1a:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 1fb04 <__ieee754_powf+0x85c>
   1fb1e:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
   1fb22:	ee67 7a27 	vmul.f32	s15, s14, s15
   1fb26:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 1fb04 <__ieee754_powf+0x85c>
   1fb2a:	ee67 7a87 	vmul.f32	s15, s15, s14
   1fb2e:	e15e      	b.n	1fdee <__ieee754_powf+0xb46>
   1fb30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1fb32:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
   1fb36:	d146      	bne.n	1fbc6 <__ieee754_powf+0x91e>
   1fb38:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 1fb00 <__ieee754_powf+0x858>
   1fb3c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
   1fb40:	ee37 7a27 	vadd.f32	s14, s14, s15
   1fb44:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
   1fb48:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
   1fb4c:	ee76 7ae7 	vsub.f32	s15, s13, s15
   1fb50:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1fb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fb58:	dd35      	ble.n	1fbc6 <__ieee754_powf+0x91e>
   1fb5a:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 1fb04 <__ieee754_powf+0x85c>
   1fb5e:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
   1fb62:	ee67 7a27 	vmul.f32	s15, s14, s15
   1fb66:	ed1f 7a19 	vldr	s14, [pc, #-100]	; 1fb04 <__ieee754_powf+0x85c>
   1fb6a:	ee67 7a87 	vmul.f32	s15, s15, s14
   1fb6e:	e13e      	b.n	1fdee <__ieee754_powf+0xb46>
   1fb70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1fb72:	4aa2      	ldr	r2, [pc, #648]	; (1fdfc <__ieee754_powf+0xb54>)
   1fb74:	4293      	cmp	r3, r2
   1fb76:	dd0a      	ble.n	1fb8e <__ieee754_powf+0x8e6>
   1fb78:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 1fe00 <__ieee754_powf+0xb58>
   1fb7c:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
   1fb80:	ee67 7a27 	vmul.f32	s15, s14, s15
   1fb84:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 1fe00 <__ieee754_powf+0xb58>
   1fb88:	ee67 7a87 	vmul.f32	s15, s15, s14
   1fb8c:	e12f      	b.n	1fdee <__ieee754_powf+0xb46>
   1fb8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1fb90:	4a9a      	ldr	r2, [pc, #616]	; (1fdfc <__ieee754_powf+0xb54>)
   1fb92:	4293      	cmp	r3, r2
   1fb94:	d117      	bne.n	1fbc6 <__ieee754_powf+0x91e>
   1fb96:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
   1fb9a:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
   1fb9e:	ee77 7a67 	vsub.f32	s15, s14, s15
   1fba2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
   1fba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1fbaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1fbae:	d80a      	bhi.n	1fbc6 <__ieee754_powf+0x91e>
   1fbb0:	ed9f 7a93 	vldr	s14, [pc, #588]	; 1fe00 <__ieee754_powf+0xb58>
   1fbb4:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
   1fbb8:	ee67 7a27 	vmul.f32	s15, s14, s15
   1fbbc:	ed9f 7a90 	vldr	s14, [pc, #576]	; 1fe00 <__ieee754_powf+0xb58>
   1fbc0:	ee67 7a87 	vmul.f32	s15, s15, s14
   1fbc4:	e113      	b.n	1fdee <__ieee754_powf+0xb46>
   1fbc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1fbc8:	15db      	asrs	r3, r3, #23
   1fbca:	3b7f      	subs	r3, #127	; 0x7f
   1fbcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   1fbd0:	2300      	movs	r3, #0
   1fbd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
   1fbd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1fbd8:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
   1fbdc:	dd3d      	ble.n	1fc5a <__ieee754_powf+0x9b2>
   1fbde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1fbe2:	3301      	adds	r3, #1
   1fbe4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   1fbe8:	fa42 f303 	asr.w	r3, r2, r3
   1fbec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1fbf0:	4413      	add	r3, r2
   1fbf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
   1fbf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   1fbfa:	15db      	asrs	r3, r3, #23
   1fbfc:	b2db      	uxtb	r3, r3
   1fbfe:	3b7f      	subs	r3, #127	; 0x7f
   1fc00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
   1fc04:	4a7f      	ldr	r2, [pc, #508]	; (1fe04 <__ieee754_powf+0xb5c>)
   1fc06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1fc0a:	fa42 f303 	asr.w	r3, r2, r3
   1fc0e:	43da      	mvns	r2, r3
   1fc10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   1fc14:	4013      	ands	r3, r2
   1fc16:	61fb      	str	r3, [r7, #28]
   1fc18:	69fb      	ldr	r3, [r7, #28]
   1fc1a:	677b      	str	r3, [r7, #116]	; 0x74
   1fc1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   1fc20:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1fc24:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
   1fc28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
   1fc2c:	f1c3 0317 	rsb	r3, r3, #23
   1fc30:	fa42 f303 	asr.w	r3, r2, r3
   1fc34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
   1fc38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1fc3c:	2b00      	cmp	r3, #0
   1fc3e:	da04      	bge.n	1fc4a <__ieee754_powf+0x9a2>
   1fc40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   1fc44:	425b      	negs	r3, r3
   1fc46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
   1fc4a:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
   1fc4e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
   1fc52:	ee77 7a67 	vsub.f32	s15, s14, s15
   1fc56:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8
   1fc5a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
   1fc5e:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
   1fc62:	ee77 7a27 	vadd.f32	s15, s14, s15
   1fc66:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   1fc6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   1fc6c:	61bb      	str	r3, [r7, #24]
   1fc6e:	69bb      	ldr	r3, [r7, #24]
   1fc70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   1fc74:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
   1fc78:	4b63      	ldr	r3, [pc, #396]	; (1fe08 <__ieee754_powf+0xb60>)
   1fc7a:	4013      	ands	r3, r2
   1fc7c:	617b      	str	r3, [r7, #20]
   1fc7e:	697b      	ldr	r3, [r7, #20]
   1fc80:	677b      	str	r3, [r7, #116]	; 0x74
   1fc82:	ed9f 7a62 	vldr	s14, [pc, #392]	; 1fe0c <__ieee754_powf+0xb64>
   1fc86:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
   1fc8a:	ee67 7a87 	vmul.f32	s15, s15, s14
   1fc8e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
   1fc92:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
   1fc96:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
   1fc9a:	ee77 7a67 	vsub.f32	s15, s14, s15
   1fc9e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
   1fca2:	ee77 7a67 	vsub.f32	s15, s14, s15
   1fca6:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 1fe10 <__ieee754_powf+0xb68>
   1fcaa:	ee27 7a87 	vmul.f32	s14, s15, s14
   1fcae:	eddf 6a59 	vldr	s13, [pc, #356]	; 1fe14 <__ieee754_powf+0xb6c>
   1fcb2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
   1fcb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
   1fcba:	ee77 7a27 	vadd.f32	s15, s14, s15
   1fcbe:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
   1fcc2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
   1fcc6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
   1fcca:	ee77 7a27 	vadd.f32	s15, s14, s15
   1fcce:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
   1fcd2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
   1fcd6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
   1fcda:	ee77 7a67 	vsub.f32	s15, s14, s15
   1fcde:	ed97 7a28 	vldr	s14, [r7, #160]	; 0xa0
   1fce2:	ee77 7a67 	vsub.f32	s15, s14, s15
   1fce6:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
   1fcea:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
   1fcee:	ee67 7aa7 	vmul.f32	s15, s15, s15
   1fcf2:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
   1fcf6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 1fe18 <__ieee754_powf+0xb70>
   1fcfa:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
   1fcfe:	ee67 7a27 	vmul.f32	s15, s14, s15
   1fd02:	ed9f 7a46 	vldr	s14, [pc, #280]	; 1fe1c <__ieee754_powf+0xb74>
   1fd06:	ee37 7a87 	vadd.f32	s14, s15, s14
   1fd0a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
   1fd0e:	ee67 7a27 	vmul.f32	s15, s14, s15
   1fd12:	ed9f 7a43 	vldr	s14, [pc, #268]	; 1fe20 <__ieee754_powf+0xb78>
   1fd16:	ee37 7a87 	vadd.f32	s14, s15, s14
   1fd1a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
   1fd1e:	ee67 7a27 	vmul.f32	s15, s14, s15
   1fd22:	ed9f 7a40 	vldr	s14, [pc, #256]	; 1fe24 <__ieee754_powf+0xb7c>
   1fd26:	ee37 7a87 	vadd.f32	s14, s15, s14
   1fd2a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
   1fd2e:	ee67 7a27 	vmul.f32	s15, s14, s15
   1fd32:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 1fe28 <__ieee754_powf+0xb80>
   1fd36:	ee37 7a87 	vadd.f32	s14, s15, s14
   1fd3a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
   1fd3e:	ee67 7a27 	vmul.f32	s15, s14, s15
   1fd42:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
   1fd46:	ee77 7a67 	vsub.f32	s15, s14, s15
   1fd4a:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
   1fd4e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
   1fd52:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
   1fd56:	ee67 6a27 	vmul.f32	s13, s14, s15
   1fd5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   1fd5e:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
   1fd62:	ee77 7ac7 	vsub.f32	s15, s15, s14
   1fd66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   1fd6a:	edd7 6a37 	vldr	s13, [r7, #220]	; 0xdc
   1fd6e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
   1fd72:	ee66 6aa7 	vmul.f32	s13, s13, s15
   1fd76:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
   1fd7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
   1fd7e:	ee77 7a67 	vsub.f32	s15, s14, s15
   1fd82:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
   1fd86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   1fd8a:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
   1fd8e:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
   1fd92:	ee77 7a67 	vsub.f32	s15, s14, s15
   1fd96:	ee76 7ae7 	vsub.f32	s15, s13, s15
   1fd9a:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc
   1fd9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
   1fda2:	613b      	str	r3, [r7, #16]
   1fda4:	693b      	ldr	r3, [r7, #16]
   1fda6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1fdaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
   1fdae:	05db      	lsls	r3, r3, #23
   1fdb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
   1fdb4:	4413      	add	r3, r2
   1fdb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   1fdba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1fdbe:	15db      	asrs	r3, r3, #23
   1fdc0:	2b00      	cmp	r3, #0
   1fdc2:	dc08      	bgt.n	1fdd6 <__ieee754_powf+0xb2e>
   1fdc4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
   1fdc8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
   1fdcc:	f000 feb4 	bl	20b38 <scalbnf>
   1fdd0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
   1fdd4:	e005      	b.n	1fde2 <__ieee754_powf+0xb3a>
   1fdd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
   1fdda:	60fb      	str	r3, [r7, #12]
   1fddc:	68fb      	ldr	r3, [r7, #12]
   1fdde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
   1fde2:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
   1fde6:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
   1fdea:	ee67 7a27 	vmul.f32	s15, s14, s15
   1fdee:	ee17 3a90 	vmov	r3, s15
   1fdf2:	4618      	mov	r0, r3
   1fdf4:	37e0      	adds	r7, #224	; 0xe0
   1fdf6:	46bd      	mov	sp, r7
   1fdf8:	bd80      	pop	{r7, pc}
   1fdfa:	bf00      	nop
   1fdfc:	43160000 	.word	0x43160000
   1fe00:	0da24260 	.word	0x0da24260
   1fe04:	007fffff 	.word	0x007fffff
   1fe08:	fffff000 	.word	0xfffff000
   1fe0c:	3f317200 	.word	0x3f317200
   1fe10:	3f317218 	.word	0x3f317218
   1fe14:	35bfbe8c 	.word	0x35bfbe8c
   1fe18:	3331bb4c 	.word	0x3331bb4c
   1fe1c:	b5ddea0e 	.word	0xb5ddea0e
   1fe20:	388ab355 	.word	0x388ab355
   1fe24:	bb360b61 	.word	0xbb360b61
   1fe28:	3e2aaaab 	.word	0x3e2aaaab

0001fe2c <__kernel_rem_pio2>:
   1fe2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe30:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
   1fe34:	af00      	add	r7, sp, #0
   1fe36:	f107 0424 	add.w	r4, r7, #36	; 0x24
   1fe3a:	6020      	str	r0, [r4, #0]
   1fe3c:	f107 0020 	add.w	r0, r7, #32
   1fe40:	6001      	str	r1, [r0, #0]
   1fe42:	f107 011c 	add.w	r1, r7, #28
   1fe46:	600a      	str	r2, [r1, #0]
   1fe48:	f107 0218 	add.w	r2, r7, #24
   1fe4c:	6013      	str	r3, [r2, #0]
   1fe4e:	4ad6      	ldr	r2, [pc, #856]	; (201a8 <__kernel_ram_size+0x310>)
   1fe50:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
   1fe54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1fe58:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
   1fe5c:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
   1fe60:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
   1fe64:	f107 0318 	add.w	r3, r7, #24
   1fe68:	681b      	ldr	r3, [r3, #0]
   1fe6a:	3b01      	subs	r3, #1
   1fe6c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
   1fe70:	f107 031c 	add.w	r3, r7, #28
   1fe74:	681b      	ldr	r3, [r3, #0]
   1fe76:	1ed9      	subs	r1, r3, #3
   1fe78:	4bcc      	ldr	r3, [pc, #816]	; (201ac <__kernel_ram_size+0x314>)
   1fe7a:	fb83 2301 	smull	r2, r3, r3, r1
   1fe7e:	109a      	asrs	r2, r3, #2
   1fe80:	17cb      	asrs	r3, r1, #31
   1fe82:	1ad3      	subs	r3, r2, r3
   1fe84:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
   1fe88:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
   1fe8c:	2b00      	cmp	r3, #0
   1fe8e:	da02      	bge.n	1fe96 <__kernel_rem_pio2+0x6a>
   1fe90:	2300      	movs	r3, #0
   1fe92:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
   1fe96:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
   1fe9a:	1c5a      	adds	r2, r3, #1
   1fe9c:	4613      	mov	r3, r2
   1fe9e:	0092      	lsls	r2, r2, #2
   1fea0:	1a9b      	subs	r3, r3, r2
   1fea2:	00db      	lsls	r3, r3, #3
   1fea4:	461a      	mov	r2, r3
   1fea6:	f107 031c 	add.w	r3, r7, #28
   1feaa:	681b      	ldr	r3, [r3, #0]
   1feac:	4413      	add	r3, r2
   1feae:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
   1feb2:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
   1feb6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
   1feba:	1ad3      	subs	r3, r2, r3
   1febc:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
   1fec0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
   1fec4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
   1fec8:	4413      	add	r3, r2
   1feca:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
   1fece:	2300      	movs	r3, #0
   1fed0:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   1fed4:	e024      	b.n	1ff20 <__kernel_ram_size+0x88>
   1fed6:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   1feda:	2b00      	cmp	r3, #0
   1fedc:	db0a      	blt.n	1fef4 <__kernel_ram_size+0x5c>
   1fede:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   1fee2:	009b      	lsls	r3, r3, #2
   1fee4:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
   1fee8:	4413      	add	r3, r2
   1feea:	681b      	ldr	r3, [r3, #0]
   1feec:	4618      	mov	r0, r3
   1feee:	f7f3 fb45 	bl	1357c <__aeabi_i2d>
   1fef2:	e003      	b.n	1fefc <__kernel_ram_size+0x64>
   1fef4:	f04f 0000 	mov.w	r0, #0
   1fef8:	f04f 0100 	mov.w	r1, #0
   1fefc:	f507 72b4 	add.w	r2, r7, #360	; 0x168
   1ff00:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   1ff04:	00db      	lsls	r3, r3, #3
   1ff06:	4413      	add	r3, r2
   1ff08:	e9c3 0100 	strd	r0, r1, [r3]
   1ff0c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   1ff10:	3301      	adds	r3, #1
   1ff12:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   1ff16:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   1ff1a:	3301      	adds	r3, #1
   1ff1c:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
   1ff20:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
   1ff24:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
   1ff28:	429a      	cmp	r2, r3
   1ff2a:	ddd4      	ble.n	1fed6 <__kernel_ram_size+0x3e>
   1ff2c:	2300      	movs	r3, #0
   1ff2e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   1ff32:	e046      	b.n	1ffc2 <__kernel_ram_size+0x12a>
   1ff34:	2300      	movs	r3, #0
   1ff36:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
   1ff3a:	f04f 0200 	mov.w	r2, #0
   1ff3e:	f04f 0300 	mov.w	r3, #0
   1ff42:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   1ff46:	e027      	b.n	1ff98 <__kernel_ram_size+0x100>
   1ff48:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   1ff4c:	00da      	lsls	r2, r3, #3
   1ff4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
   1ff52:	681b      	ldr	r3, [r3, #0]
   1ff54:	4413      	add	r3, r2
   1ff56:	e9d3 0100 	ldrd	r0, r1, [r3]
   1ff5a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
   1ff5e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   1ff62:	441a      	add	r2, r3
   1ff64:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   1ff68:	1ad3      	subs	r3, r2, r3
   1ff6a:	f507 72b4 	add.w	r2, r7, #360	; 0x168
   1ff6e:	00db      	lsls	r3, r3, #3
   1ff70:	4413      	add	r3, r2
   1ff72:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ff76:	f7f3 fb6b 	bl	13650 <__aeabi_dmul>
   1ff7a:	4602      	mov	r2, r0
   1ff7c:	460b      	mov	r3, r1
   1ff7e:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
   1ff82:	f7f3 f9af 	bl	132e4 <__adddf3>
   1ff86:	4602      	mov	r2, r0
   1ff88:	460b      	mov	r3, r1
   1ff8a:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   1ff8e:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   1ff92:	3301      	adds	r3, #1
   1ff94:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
   1ff98:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
   1ff9c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
   1ffa0:	429a      	cmp	r2, r3
   1ffa2:	ddd1      	ble.n	1ff48 <__kernel_ram_size+0xb0>
   1ffa4:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1ffa8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   1ffac:	00db      	lsls	r3, r3, #3
   1ffae:	18d1      	adds	r1, r2, r3
   1ffb0:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
   1ffb4:	e9c1 2300 	strd	r2, r3, [r1]
   1ffb8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   1ffbc:	3301      	adds	r3, #1
   1ffbe:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   1ffc2:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
   1ffc6:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
   1ffca:	429a      	cmp	r2, r3
   1ffcc:	ddb2      	ble.n	1ff34 <__kernel_ram_size+0x9c>
   1ffce:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
   1ffd2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
   1ffd6:	2300      	movs	r3, #0
   1ffd8:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   1ffdc:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   1ffe0:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
   1ffe4:	f107 0228 	add.w	r2, r7, #40	; 0x28
   1ffe8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   1ffec:	00db      	lsls	r3, r3, #3
   1ffee:	4413      	add	r3, r2
   1fff0:	e9d3 2300 	ldrd	r2, r3, [r3]
   1fff4:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
   1fff8:	e04b      	b.n	20092 <__kernel_ram_size+0x1fa>
   1fffa:	f04f 0000 	mov.w	r0, #0
   1fffe:	496c      	ldr	r1, [pc, #432]	; (201b0 <__kernel_ram_size+0x318>)
   20000:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
   20004:	f7f3 fb24 	bl	13650 <__aeabi_dmul>
   20008:	4602      	mov	r2, r0
   2000a:	460b      	mov	r3, r1
   2000c:	4610      	mov	r0, r2
   2000e:	4619      	mov	r1, r3
   20010:	f7f3 fdce 	bl	13bb0 <__aeabi_d2iz>
   20014:	4603      	mov	r3, r0
   20016:	4618      	mov	r0, r3
   20018:	f7f3 fab0 	bl	1357c <__aeabi_i2d>
   2001c:	4602      	mov	r2, r0
   2001e:	460b      	mov	r3, r1
   20020:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   20024:	f04f 0000 	mov.w	r0, #0
   20028:	4962      	ldr	r1, [pc, #392]	; (201b4 <__kernel_ram_size+0x31c>)
   2002a:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
   2002e:	f7f3 fb0f 	bl	13650 <__aeabi_dmul>
   20032:	4602      	mov	r2, r0
   20034:	460b      	mov	r3, r1
   20036:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
   2003a:	f7f3 f951 	bl	132e0 <__aeabi_dsub>
   2003e:	4602      	mov	r2, r0
   20040:	460b      	mov	r3, r1
   20042:	4610      	mov	r0, r2
   20044:	4619      	mov	r1, r3
   20046:	f7f3 fdb3 	bl	13bb0 <__aeabi_d2iz>
   2004a:	4602      	mov	r2, r0
   2004c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20050:	009b      	lsls	r3, r3, #2
   20052:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
   20056:	440b      	add	r3, r1
   20058:	f843 2c98 	str.w	r2, [r3, #-152]
   2005c:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   20060:	3b01      	subs	r3, #1
   20062:	f107 0228 	add.w	r2, r7, #40	; 0x28
   20066:	00db      	lsls	r3, r3, #3
   20068:	4413      	add	r3, r2
   2006a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2006e:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
   20072:	f7f3 f937 	bl	132e4 <__adddf3>
   20076:	4602      	mov	r2, r0
   20078:	460b      	mov	r3, r1
   2007a:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
   2007e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20082:	3301      	adds	r3, #1
   20084:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20088:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   2008c:	3b01      	subs	r3, #1
   2008e:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
   20092:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   20096:	2b00      	cmp	r3, #0
   20098:	dcaf      	bgt.n	1fffa <__kernel_ram_size+0x162>
   2009a:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
   2009e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
   200a2:	f7f7 fad5 	bl	17650 <scalbn>
   200a6:	e9c7 019c 	strd	r0, r1, [r7, #624]	; 0x270
   200aa:	f04f 0200 	mov.w	r2, #0
   200ae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   200b2:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
   200b6:	f7f3 facb 	bl	13650 <__aeabi_dmul>
   200ba:	4602      	mov	r2, r0
   200bc:	460b      	mov	r3, r1
   200be:	4610      	mov	r0, r2
   200c0:	4619      	mov	r1, r3
   200c2:	f7f5 ff6d 	bl	15fa0 <floor>
   200c6:	f04f 0200 	mov.w	r2, #0
   200ca:	4b3b      	ldr	r3, [pc, #236]	; (201b8 <__kernel_ram_size+0x320>)
   200cc:	f7f3 fac0 	bl	13650 <__aeabi_dmul>
   200d0:	4602      	mov	r2, r0
   200d2:	460b      	mov	r3, r1
   200d4:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
   200d8:	f7f3 f902 	bl	132e0 <__aeabi_dsub>
   200dc:	4602      	mov	r2, r0
   200de:	460b      	mov	r3, r1
   200e0:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
   200e4:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
   200e8:	f7f3 fd62 	bl	13bb0 <__aeabi_d2iz>
   200ec:	4603      	mov	r3, r0
   200ee:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
   200f2:	f8d7 0290 	ldr.w	r0, [r7, #656]	; 0x290
   200f6:	f7f3 fa41 	bl	1357c <__aeabi_i2d>
   200fa:	4602      	mov	r2, r0
   200fc:	460b      	mov	r3, r1
   200fe:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
   20102:	f7f3 f8ed 	bl	132e0 <__aeabi_dsub>
   20106:	4602      	mov	r2, r0
   20108:	460b      	mov	r3, r1
   2010a:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
   2010e:	2300      	movs	r3, #0
   20110:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
   20114:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
   20118:	2b00      	cmp	r3, #0
   2011a:	dd4f      	ble.n	201bc <__kernel_ram_size+0x324>
   2011c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   20120:	3b01      	subs	r3, #1
   20122:	009b      	lsls	r3, r3, #2
   20124:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   20128:	4413      	add	r3, r2
   2012a:	f853 2c98 	ldr.w	r2, [r3, #-152]
   2012e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
   20132:	f1c3 0318 	rsb	r3, r3, #24
   20136:	fa42 f303 	asr.w	r3, r2, r3
   2013a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   2013e:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
   20142:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20146:	4413      	add	r3, r2
   20148:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
   2014c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   20150:	3b01      	subs	r3, #1
   20152:	009b      	lsls	r3, r3, #2
   20154:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   20158:	4413      	add	r3, r2
   2015a:	f853 1c98 	ldr.w	r1, [r3, #-152]
   2015e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
   20162:	f1c3 0218 	rsb	r2, r3, #24
   20166:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2016a:	fa03 f202 	lsl.w	r2, r3, r2
   2016e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   20172:	3b01      	subs	r3, #1
   20174:	1a8a      	subs	r2, r1, r2
   20176:	009b      	lsls	r3, r3, #2
   20178:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
   2017c:	440b      	add	r3, r1
   2017e:	f843 2c98 	str.w	r2, [r3, #-152]
   20182:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   20186:	3b01      	subs	r3, #1
   20188:	009b      	lsls	r3, r3, #2
   2018a:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   2018e:	4413      	add	r3, r2
   20190:	f853 2c98 	ldr.w	r2, [r3, #-152]
   20194:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
   20198:	f1c3 0317 	rsb	r3, r3, #23
   2019c:	fa42 f303 	asr.w	r3, r2, r3
   201a0:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
   201a4:	e028      	b.n	201f8 <__kernel_ram_size+0x360>
   201a6:	bf00      	nop
   201a8:	0002aaac 	.word	0x0002aaac
   201ac:	2aaaaaab 	.word	0x2aaaaaab
   201b0:	3e700000 	.word	0x3e700000
   201b4:	41700000 	.word	0x41700000
   201b8:	40200000 	.word	0x40200000
   201bc:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
   201c0:	2b00      	cmp	r3, #0
   201c2:	d10c      	bne.n	201de <__kernel_ram_size+0x346>
   201c4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   201c8:	3b01      	subs	r3, #1
   201ca:	009b      	lsls	r3, r3, #2
   201cc:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   201d0:	4413      	add	r3, r2
   201d2:	f853 3c98 	ldr.w	r3, [r3, #-152]
   201d6:	15db      	asrs	r3, r3, #23
   201d8:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
   201dc:	e00c      	b.n	201f8 <__kernel_ram_size+0x360>
   201de:	f04f 0200 	mov.w	r2, #0
   201e2:	4bcd      	ldr	r3, [pc, #820]	; (20518 <__kernel_ram_size+0x680>)
   201e4:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
   201e8:	f7f3 fcb8 	bl	13b5c <__aeabi_dcmpge>
   201ec:	4603      	mov	r3, r0
   201ee:	2b00      	cmp	r3, #0
   201f0:	d002      	beq.n	201f8 <__kernel_ram_size+0x360>
   201f2:	2302      	movs	r3, #2
   201f4:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
   201f8:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
   201fc:	2b00      	cmp	r3, #0
   201fe:	f340 80a2 	ble.w	20346 <__kernel_ram_size+0x4ae>
   20202:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
   20206:	3301      	adds	r3, #1
   20208:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
   2020c:	2300      	movs	r3, #0
   2020e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
   20212:	2300      	movs	r3, #0
   20214:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20218:	e033      	b.n	20282 <__kernel_ram_size+0x3ea>
   2021a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2021e:	009b      	lsls	r3, r3, #2
   20220:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   20224:	4413      	add	r3, r2
   20226:	f853 3c98 	ldr.w	r3, [r3, #-152]
   2022a:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
   2022e:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
   20232:	2b00      	cmp	r3, #0
   20234:	d113      	bne.n	2025e <__kernel_ram_size+0x3c6>
   20236:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   2023a:	2b00      	cmp	r3, #0
   2023c:	d01c      	beq.n	20278 <__kernel_ram_size+0x3e0>
   2023e:	2301      	movs	r3, #1
   20240:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
   20244:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   20248:	f1c3 7280 	rsb	r2, r3, #16777216	; 0x1000000
   2024c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20250:	009b      	lsls	r3, r3, #2
   20252:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
   20256:	440b      	add	r3, r1
   20258:	f843 2c98 	str.w	r2, [r3, #-152]
   2025c:	e00c      	b.n	20278 <__kernel_ram_size+0x3e0>
   2025e:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   20262:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
   20266:	1ad2      	subs	r2, r2, r3
   20268:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2026c:	009b      	lsls	r3, r3, #2
   2026e:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
   20272:	440b      	add	r3, r1
   20274:	f843 2c98 	str.w	r2, [r3, #-152]
   20278:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2027c:	3301      	adds	r3, #1
   2027e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20282:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
   20286:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   2028a:	429a      	cmp	r2, r3
   2028c:	dbc5      	blt.n	2021a <__kernel_ram_size+0x382>
   2028e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
   20292:	2b00      	cmp	r3, #0
   20294:	dd32      	ble.n	202fc <__kernel_ram_size+0x464>
   20296:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
   2029a:	2b01      	cmp	r3, #1
   2029c:	d004      	beq.n	202a8 <__kernel_ram_size+0x410>
   2029e:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
   202a2:	2b02      	cmp	r3, #2
   202a4:	d015      	beq.n	202d2 <__kernel_ram_size+0x43a>
   202a6:	e02a      	b.n	202fe <__kernel_ram_size+0x466>
   202a8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   202ac:	3b01      	subs	r3, #1
   202ae:	009b      	lsls	r3, r3, #2
   202b0:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   202b4:	4413      	add	r3, r2
   202b6:	f853 2c98 	ldr.w	r2, [r3, #-152]
   202ba:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   202be:	3b01      	subs	r3, #1
   202c0:	f3c2 0216 	ubfx	r2, r2, #0, #23
   202c4:	009b      	lsls	r3, r3, #2
   202c6:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
   202ca:	440b      	add	r3, r1
   202cc:	f843 2c98 	str.w	r2, [r3, #-152]
   202d0:	e015      	b.n	202fe <__kernel_ram_size+0x466>
   202d2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   202d6:	3b01      	subs	r3, #1
   202d8:	009b      	lsls	r3, r3, #2
   202da:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   202de:	4413      	add	r3, r2
   202e0:	f853 2c98 	ldr.w	r2, [r3, #-152]
   202e4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   202e8:	3b01      	subs	r3, #1
   202ea:	f3c2 0215 	ubfx	r2, r2, #0, #22
   202ee:	009b      	lsls	r3, r3, #2
   202f0:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
   202f4:	440b      	add	r3, r1
   202f6:	f843 2c98 	str.w	r2, [r3, #-152]
   202fa:	e000      	b.n	202fe <__kernel_ram_size+0x466>
   202fc:	bf00      	nop
   202fe:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
   20302:	2b02      	cmp	r3, #2
   20304:	d11f      	bne.n	20346 <__kernel_ram_size+0x4ae>
   20306:	f04f 0000 	mov.w	r0, #0
   2030a:	4984      	ldr	r1, [pc, #528]	; (2051c <__kernel_ram_size+0x684>)
   2030c:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
   20310:	f7f2 ffe6 	bl	132e0 <__aeabi_dsub>
   20314:	4602      	mov	r2, r0
   20316:	460b      	mov	r3, r1
   20318:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
   2031c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
   20320:	2b00      	cmp	r3, #0
   20322:	d010      	beq.n	20346 <__kernel_ram_size+0x4ae>
   20324:	f04f 0000 	mov.w	r0, #0
   20328:	497c      	ldr	r1, [pc, #496]	; (2051c <__kernel_ram_size+0x684>)
   2032a:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
   2032e:	f7f7 f98f 	bl	17650 <scalbn>
   20332:	4602      	mov	r2, r0
   20334:	460b      	mov	r3, r1
   20336:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
   2033a:	f7f2 ffd1 	bl	132e0 <__aeabi_dsub>
   2033e:	4602      	mov	r2, r0
   20340:	460b      	mov	r3, r1
   20342:	e9c7 239c 	strd	r2, r3, [r7, #624]	; 0x270
   20346:	f04f 0200 	mov.w	r2, #0
   2034a:	f04f 0300 	mov.w	r3, #0
   2034e:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
   20352:	f7f3 fbe5 	bl	13b20 <__aeabi_dcmpeq>
   20356:	4603      	mov	r3, r0
   20358:	2b00      	cmp	r3, #0
   2035a:	f000 80b2 	beq.w	204c2 <__kernel_ram_size+0x62a>
   2035e:	2300      	movs	r3, #0
   20360:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
   20364:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   20368:	3b01      	subs	r3, #1
   2036a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   2036e:	e011      	b.n	20394 <__kernel_ram_size+0x4fc>
   20370:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20374:	009b      	lsls	r3, r3, #2
   20376:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   2037a:	4413      	add	r3, r2
   2037c:	f853 3c98 	ldr.w	r3, [r3, #-152]
   20380:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
   20384:	4313      	orrs	r3, r2
   20386:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
   2038a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2038e:	3b01      	subs	r3, #1
   20390:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20394:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
   20398:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
   2039c:	429a      	cmp	r2, r3
   2039e:	dae7      	bge.n	20370 <__kernel_ram_size+0x4d8>
   203a0:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   203a4:	2b00      	cmp	r3, #0
   203a6:	f040 808c 	bne.w	204c2 <__kernel_ram_size+0x62a>
   203aa:	2301      	movs	r3, #1
   203ac:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
   203b0:	e004      	b.n	203bc <__kernel_ram_size+0x524>
   203b2:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
   203b6:	3301      	adds	r3, #1
   203b8:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
   203bc:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
   203c0:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
   203c4:	1ad3      	subs	r3, r2, r3
   203c6:	009b      	lsls	r3, r3, #2
   203c8:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   203cc:	4413      	add	r3, r2
   203ce:	f853 3c98 	ldr.w	r3, [r3, #-152]
   203d2:	2b00      	cmp	r3, #0
   203d4:	d0ed      	beq.n	203b2 <__kernel_ram_size+0x51a>
   203d6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   203da:	3301      	adds	r3, #1
   203dc:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   203e0:	e05e      	b.n	204a0 <__kernel_ram_size+0x608>
   203e2:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
   203e6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   203ea:	4413      	add	r3, r2
   203ec:	009b      	lsls	r3, r3, #2
   203ee:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
   203f2:	4413      	add	r3, r2
   203f4:	6819      	ldr	r1, [r3, #0]
   203f6:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
   203fa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   203fe:	18d4      	adds	r4, r2, r3
   20400:	4608      	mov	r0, r1
   20402:	f7f3 f8bb 	bl	1357c <__aeabi_i2d>
   20406:	f507 72b4 	add.w	r2, r7, #360	; 0x168
   2040a:	00e3      	lsls	r3, r4, #3
   2040c:	4413      	add	r3, r2
   2040e:	e9c3 0100 	strd	r0, r1, [r3]
   20412:	2300      	movs	r3, #0
   20414:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
   20418:	f04f 0200 	mov.w	r2, #0
   2041c:	f04f 0300 	mov.w	r3, #0
   20420:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   20424:	e027      	b.n	20476 <__kernel_ram_size+0x5de>
   20426:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   2042a:	00da      	lsls	r2, r3, #3
   2042c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   20430:	681b      	ldr	r3, [r3, #0]
   20432:	4413      	add	r3, r2
   20434:	e9d3 0100 	ldrd	r0, r1, [r3]
   20438:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
   2043c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20440:	441a      	add	r2, r3
   20442:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   20446:	1ad3      	subs	r3, r2, r3
   20448:	f507 72b4 	add.w	r2, r7, #360	; 0x168
   2044c:	00db      	lsls	r3, r3, #3
   2044e:	4413      	add	r3, r2
   20450:	e9d3 2300 	ldrd	r2, r3, [r3]
   20454:	f7f3 f8fc 	bl	13650 <__aeabi_dmul>
   20458:	4602      	mov	r2, r0
   2045a:	460b      	mov	r3, r1
   2045c:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
   20460:	f7f2 ff40 	bl	132e4 <__adddf3>
   20464:	4602      	mov	r2, r0
   20466:	460b      	mov	r3, r1
   20468:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   2046c:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
   20470:	3301      	adds	r3, #1
   20472:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
   20476:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
   2047a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
   2047e:	429a      	cmp	r2, r3
   20480:	ddd1      	ble.n	20426 <__kernel_ram_size+0x58e>
   20482:	f107 0228 	add.w	r2, r7, #40	; 0x28
   20486:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2048a:	00db      	lsls	r3, r3, #3
   2048c:	18d1      	adds	r1, r2, r3
   2048e:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
   20492:	e9c1 2300 	strd	r2, r3, [r1]
   20496:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2049a:	3301      	adds	r3, #1
   2049c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   204a0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
   204a4:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
   204a8:	4413      	add	r3, r2
   204aa:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
   204ae:	429a      	cmp	r2, r3
   204b0:	dd97      	ble.n	203e2 <__kernel_ram_size+0x54a>
   204b2:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
   204b6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
   204ba:	4413      	add	r3, r2
   204bc:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
   204c0:	e589      	b.n	1ffd6 <__kernel_ram_size+0x13e>
   204c2:	f04f 0200 	mov.w	r2, #0
   204c6:	f04f 0300 	mov.w	r3, #0
   204ca:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
   204ce:	f7f3 fb27 	bl	13b20 <__aeabi_dcmpeq>
   204d2:	4603      	mov	r3, r0
   204d4:	2b00      	cmp	r3, #0
   204d6:	d023      	beq.n	20520 <__kernel_ram_size+0x688>
   204d8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   204dc:	3b01      	subs	r3, #1
   204de:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
   204e2:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
   204e6:	3b18      	subs	r3, #24
   204e8:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
   204ec:	e009      	b.n	20502 <__kernel_ram_size+0x66a>
   204ee:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   204f2:	3b01      	subs	r3, #1
   204f4:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
   204f8:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
   204fc:	3b18      	subs	r3, #24
   204fe:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
   20502:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   20506:	009b      	lsls	r3, r3, #2
   20508:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   2050c:	4413      	add	r3, r2
   2050e:	f853 3c98 	ldr.w	r3, [r3, #-152]
   20512:	2b00      	cmp	r3, #0
   20514:	d0eb      	beq.n	204ee <__kernel_ram_size+0x656>
   20516:	e06d      	b.n	205f4 <__kernel_ram_size+0x75c>
   20518:	3fe00000 	.word	0x3fe00000
   2051c:	3ff00000 	.word	0x3ff00000
   20520:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
   20524:	425b      	negs	r3, r3
   20526:	461a      	mov	r2, r3
   20528:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
   2052c:	f7f7 f890 	bl	17650 <scalbn>
   20530:	e9c7 019c 	strd	r0, r1, [r7, #624]	; 0x270
   20534:	f04f 0200 	mov.w	r2, #0
   20538:	4bca      	ldr	r3, [pc, #808]	; (20864 <__kernel_ram_size+0x9cc>)
   2053a:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
   2053e:	f7f3 fb0d 	bl	13b5c <__aeabi_dcmpge>
   20542:	4603      	mov	r3, r0
   20544:	2b00      	cmp	r3, #0
   20546:	d048      	beq.n	205da <__kernel_ram_size+0x742>
   20548:	f04f 0000 	mov.w	r0, #0
   2054c:	49c6      	ldr	r1, [pc, #792]	; (20868 <__kernel_ram_size+0x9d0>)
   2054e:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
   20552:	f7f3 f87d 	bl	13650 <__aeabi_dmul>
   20556:	4602      	mov	r2, r0
   20558:	460b      	mov	r3, r1
   2055a:	4610      	mov	r0, r2
   2055c:	4619      	mov	r1, r3
   2055e:	f7f3 fb27 	bl	13bb0 <__aeabi_d2iz>
   20562:	4603      	mov	r3, r0
   20564:	4618      	mov	r0, r3
   20566:	f7f3 f809 	bl	1357c <__aeabi_i2d>
   2056a:	4602      	mov	r2, r0
   2056c:	460b      	mov	r3, r1
   2056e:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   20572:	f04f 0000 	mov.w	r0, #0
   20576:	49bb      	ldr	r1, [pc, #748]	; (20864 <__kernel_ram_size+0x9cc>)
   20578:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
   2057c:	f7f3 f868 	bl	13650 <__aeabi_dmul>
   20580:	4602      	mov	r2, r0
   20582:	460b      	mov	r3, r1
   20584:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
   20588:	f7f2 feaa 	bl	132e0 <__aeabi_dsub>
   2058c:	4602      	mov	r2, r0
   2058e:	460b      	mov	r3, r1
   20590:	4610      	mov	r0, r2
   20592:	4619      	mov	r1, r3
   20594:	f7f3 fb0c 	bl	13bb0 <__aeabi_d2iz>
   20598:	4602      	mov	r2, r0
   2059a:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   2059e:	009b      	lsls	r3, r3, #2
   205a0:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
   205a4:	440b      	add	r3, r1
   205a6:	f843 2c98 	str.w	r2, [r3, #-152]
   205aa:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   205ae:	3301      	adds	r3, #1
   205b0:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
   205b4:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
   205b8:	3318      	adds	r3, #24
   205ba:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
   205be:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
   205c2:	f7f3 faf5 	bl	13bb0 <__aeabi_d2iz>
   205c6:	4602      	mov	r2, r0
   205c8:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   205cc:	009b      	lsls	r3, r3, #2
   205ce:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
   205d2:	440b      	add	r3, r1
   205d4:	f843 2c98 	str.w	r2, [r3, #-152]
   205d8:	e00c      	b.n	205f4 <__kernel_ram_size+0x75c>
   205da:	e9d7 019c 	ldrd	r0, r1, [r7, #624]	; 0x270
   205de:	f7f3 fae7 	bl	13bb0 <__aeabi_d2iz>
   205e2:	4602      	mov	r2, r0
   205e4:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   205e8:	009b      	lsls	r3, r3, #2
   205ea:	f507 7128 	add.w	r1, r7, #672	; 0x2a0
   205ee:	440b      	add	r3, r1
   205f0:	f843 2c98 	str.w	r2, [r3, #-152]
   205f4:	f04f 0000 	mov.w	r0, #0
   205f8:	499c      	ldr	r1, [pc, #624]	; (2086c <__kernel_ram_size+0x9d4>)
   205fa:	f8d7 2280 	ldr.w	r2, [r7, #640]	; 0x280
   205fe:	f7f7 f827 	bl	17650 <scalbn>
   20602:	e9c7 019a 	strd	r0, r1, [r7, #616]	; 0x268
   20606:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   2060a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   2060e:	e02a      	b.n	20666 <__kernel_ram_size+0x7ce>
   20610:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20614:	009b      	lsls	r3, r3, #2
   20616:	f507 7228 	add.w	r2, r7, #672	; 0x2a0
   2061a:	4413      	add	r3, r2
   2061c:	f853 3c98 	ldr.w	r3, [r3, #-152]
   20620:	4618      	mov	r0, r3
   20622:	f7f2 ffab 	bl	1357c <__aeabi_i2d>
   20626:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
   2062a:	f7f3 f811 	bl	13650 <__aeabi_dmul>
   2062e:	4602      	mov	r2, r0
   20630:	460b      	mov	r3, r1
   20632:	4610      	mov	r0, r2
   20634:	4619      	mov	r1, r3
   20636:	f107 0228 	add.w	r2, r7, #40	; 0x28
   2063a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2063e:	00db      	lsls	r3, r3, #3
   20640:	4413      	add	r3, r2
   20642:	e9c3 0100 	strd	r0, r1, [r3]
   20646:	f04f 0200 	mov.w	r2, #0
   2064a:	4b87      	ldr	r3, [pc, #540]	; (20868 <__kernel_ram_size+0x9d0>)
   2064c:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
   20650:	f7f2 fffe 	bl	13650 <__aeabi_dmul>
   20654:	4602      	mov	r2, r0
   20656:	460b      	mov	r3, r1
   20658:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   2065c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20660:	3b01      	subs	r3, #1
   20662:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20666:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2066a:	2b00      	cmp	r3, #0
   2066c:	dad0      	bge.n	20610 <__kernel_ram_size+0x778>
   2066e:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   20672:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20676:	e04d      	b.n	20714 <__kernel_ram_size+0x87c>
   20678:	f04f 0200 	mov.w	r2, #0
   2067c:	f04f 0300 	mov.w	r3, #0
   20680:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   20684:	2300      	movs	r3, #0
   20686:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
   2068a:	e022      	b.n	206d2 <__kernel_ram_size+0x83a>
   2068c:	4a78      	ldr	r2, [pc, #480]	; (20870 <__kernel_ram_size+0x9d8>)
   2068e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
   20692:	00db      	lsls	r3, r3, #3
   20694:	4413      	add	r3, r2
   20696:	e9d3 0100 	ldrd	r0, r1, [r3]
   2069a:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
   2069e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
   206a2:	4413      	add	r3, r2
   206a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
   206a8:	00db      	lsls	r3, r3, #3
   206aa:	4413      	add	r3, r2
   206ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   206b0:	f7f2 ffce 	bl	13650 <__aeabi_dmul>
   206b4:	4602      	mov	r2, r0
   206b6:	460b      	mov	r3, r1
   206b8:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
   206bc:	f7f2 fe12 	bl	132e4 <__adddf3>
   206c0:	4602      	mov	r2, r0
   206c2:	460b      	mov	r3, r1
   206c4:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   206c8:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
   206cc:	3301      	adds	r3, #1
   206ce:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
   206d2:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
   206d6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
   206da:	429a      	cmp	r2, r3
   206dc:	dc08      	bgt.n	206f0 <__kernel_ram_size+0x858>
   206de:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
   206e2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   206e6:	1ad3      	subs	r3, r2, r3
   206e8:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
   206ec:	429a      	cmp	r2, r3
   206ee:	ddcd      	ble.n	2068c <__kernel_ram_size+0x7f4>
   206f0:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
   206f4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   206f8:	1ad3      	subs	r3, r2, r3
   206fa:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   206fe:	00db      	lsls	r3, r3, #3
   20700:	18d1      	adds	r1, r2, r3
   20702:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
   20706:	e9c1 2300 	strd	r2, r3, [r1]
   2070a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2070e:	3b01      	subs	r3, #1
   20710:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20714:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20718:	2b00      	cmp	r3, #0
   2071a:	daad      	bge.n	20678 <__kernel_ram_size+0x7e0>
   2071c:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
   20720:	2b03      	cmp	r3, #3
   20722:	f000 80d6 	beq.w	208d2 <__kernel_ram_size+0xa3a>
   20726:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
   2072a:	2b03      	cmp	r3, #3
   2072c:	f300 81ea 	bgt.w	20b04 <__kernel_ram_size+0xc6c>
   20730:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
   20734:	2b00      	cmp	r3, #0
   20736:	d00b      	beq.n	20750 <__kernel_ram_size+0x8b8>
   20738:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
   2073c:	2b00      	cmp	r3, #0
   2073e:	f2c0 81e1 	blt.w	20b04 <__kernel_ram_size+0xc6c>
   20742:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
   20746:	3b01      	subs	r3, #1
   20748:	2b01      	cmp	r3, #1
   2074a:	f200 81db 	bhi.w	20b04 <__kernel_ram_size+0xc6c>
   2074e:	e03c      	b.n	207ca <__kernel_ram_size+0x932>
   20750:	f04f 0200 	mov.w	r2, #0
   20754:	f04f 0300 	mov.w	r3, #0
   20758:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   2075c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   20760:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20764:	e014      	b.n	20790 <__kernel_ram_size+0x8f8>
   20766:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   2076a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2076e:	00db      	lsls	r3, r3, #3
   20770:	4413      	add	r3, r2
   20772:	e9d3 2300 	ldrd	r2, r3, [r3]
   20776:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
   2077a:	f7f2 fdb3 	bl	132e4 <__adddf3>
   2077e:	4602      	mov	r2, r0
   20780:	460b      	mov	r3, r1
   20782:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   20786:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2078a:	3b01      	subs	r3, #1
   2078c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20790:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20794:	2b00      	cmp	r3, #0
   20796:	dae6      	bge.n	20766 <__kernel_ram_size+0x8ce>
   20798:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
   2079c:	2b00      	cmp	r3, #0
   2079e:	d008      	beq.n	207b2 <__kernel_ram_size+0x91a>
   207a0:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
   207a4:	613b      	str	r3, [r7, #16]
   207a6:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
   207aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   207ae:	617b      	str	r3, [r7, #20]
   207b0:	e003      	b.n	207ba <__kernel_ram_size+0x922>
   207b2:	ed97 7b9a 	vldr	d7, [r7, #616]	; 0x268
   207b6:	ed87 7b04 	vstr	d7, [r7, #16]
   207ba:	f107 0320 	add.w	r3, r7, #32
   207be:	681b      	ldr	r3, [r3, #0]
   207c0:	ed97 7b04 	vldr	d7, [r7, #16]
   207c4:	ed83 7b00 	vstr	d7, [r3]
   207c8:	e19c      	b.n	20b04 <__kernel_ram_size+0xc6c>
   207ca:	f04f 0200 	mov.w	r2, #0
   207ce:	f04f 0300 	mov.w	r3, #0
   207d2:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   207d6:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   207da:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   207de:	e014      	b.n	2080a <__kernel_ram_size+0x972>
   207e0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   207e4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   207e8:	00db      	lsls	r3, r3, #3
   207ea:	4413      	add	r3, r2
   207ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   207f0:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
   207f4:	f7f2 fd76 	bl	132e4 <__adddf3>
   207f8:	4602      	mov	r2, r0
   207fa:	460b      	mov	r3, r1
   207fc:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   20800:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20804:	3b01      	subs	r3, #1
   20806:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   2080a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2080e:	2b00      	cmp	r3, #0
   20810:	dae6      	bge.n	207e0 <__kernel_ram_size+0x948>
   20812:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
   20816:	2b00      	cmp	r3, #0
   20818:	d008      	beq.n	2082c <__kernel_ram_size+0x994>
   2081a:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
   2081e:	60bb      	str	r3, [r7, #8]
   20820:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
   20824:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   20828:	60fb      	str	r3, [r7, #12]
   2082a:	e003      	b.n	20834 <__kernel_ram_size+0x99c>
   2082c:	ed97 7b9a 	vldr	d7, [r7, #616]	; 0x268
   20830:	ed87 7b02 	vstr	d7, [r7, #8]
   20834:	f107 0320 	add.w	r3, r7, #32
   20838:	681b      	ldr	r3, [r3, #0]
   2083a:	ed97 7b02 	vldr	d7, [r7, #8]
   2083e:	ed83 7b00 	vstr	d7, [r3]
   20842:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   20846:	e9d3 0100 	ldrd	r0, r1, [r3]
   2084a:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
   2084e:	f7f2 fd47 	bl	132e0 <__aeabi_dsub>
   20852:	4602      	mov	r2, r0
   20854:	460b      	mov	r3, r1
   20856:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   2085a:	2301      	movs	r3, #1
   2085c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20860:	e01d      	b.n	2089e <__kernel_ram_size+0xa06>
   20862:	bf00      	nop
   20864:	41700000 	.word	0x41700000
   20868:	3e700000 	.word	0x3e700000
   2086c:	3ff00000 	.word	0x3ff00000
   20870:	00025b18 	.word	0x00025b18
   20874:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   20878:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2087c:	00db      	lsls	r3, r3, #3
   2087e:	4413      	add	r3, r2
   20880:	e9d3 2300 	ldrd	r2, r3, [r3]
   20884:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
   20888:	f7f2 fd2c 	bl	132e4 <__adddf3>
   2088c:	4602      	mov	r2, r0
   2088e:	460b      	mov	r3, r1
   20890:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   20894:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20898:	3301      	adds	r3, #1
   2089a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   2089e:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
   208a2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   208a6:	429a      	cmp	r2, r3
   208a8:	dde4      	ble.n	20874 <__kernel_ram_size+0x9dc>
   208aa:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
   208ae:	2b00      	cmp	r3, #0
   208b0:	d006      	beq.n	208c0 <__kernel_ram_size+0xa28>
   208b2:	f8d7 5268 	ldr.w	r5, [r7, #616]	; 0x268
   208b6:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
   208ba:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
   208be:	e001      	b.n	208c4 <__kernel_ram_size+0xa2c>
   208c0:	e9d7 569a 	ldrd	r5, r6, [r7, #616]	; 0x268
   208c4:	f107 0320 	add.w	r3, r7, #32
   208c8:	681b      	ldr	r3, [r3, #0]
   208ca:	3308      	adds	r3, #8
   208cc:	e9c3 5600 	strd	r5, r6, [r3]
   208d0:	e118      	b.n	20b04 <__kernel_ram_size+0xc6c>
   208d2:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   208d6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   208da:	e04b      	b.n	20974 <__kernel_ram_size+0xadc>
   208dc:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   208e0:	3b01      	subs	r3, #1
   208e2:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   208e6:	00db      	lsls	r3, r3, #3
   208e8:	4413      	add	r3, r2
   208ea:	e9d3 0100 	ldrd	r0, r1, [r3]
   208ee:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   208f2:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   208f6:	00db      	lsls	r3, r3, #3
   208f8:	4413      	add	r3, r2
   208fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   208fe:	f7f2 fcf1 	bl	132e4 <__adddf3>
   20902:	4602      	mov	r2, r0
   20904:	460b      	mov	r3, r1
   20906:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   2090a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   2090e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20912:	00db      	lsls	r3, r3, #3
   20914:	4413      	add	r3, r2
   20916:	e9d3 4500 	ldrd	r4, r5, [r3]
   2091a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2091e:	3b01      	subs	r3, #1
   20920:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   20924:	00db      	lsls	r3, r3, #3
   20926:	4413      	add	r3, r2
   20928:	e9d3 0100 	ldrd	r0, r1, [r3]
   2092c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
   20930:	f7f2 fcd6 	bl	132e0 <__aeabi_dsub>
   20934:	4602      	mov	r2, r0
   20936:	460b      	mov	r3, r1
   20938:	4620      	mov	r0, r4
   2093a:	4629      	mov	r1, r5
   2093c:	f7f2 fcd2 	bl	132e4 <__adddf3>
   20940:	4602      	mov	r2, r0
   20942:	460b      	mov	r3, r1
   20944:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
   20948:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
   2094c:	00c9      	lsls	r1, r1, #3
   2094e:	4401      	add	r1, r0
   20950:	e9c1 2300 	strd	r2, r3, [r1]
   20954:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20958:	3b01      	subs	r3, #1
   2095a:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   2095e:	00db      	lsls	r3, r3, #3
   20960:	18d1      	adds	r1, r2, r3
   20962:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
   20966:	e9c1 2300 	strd	r2, r3, [r1]
   2096a:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2096e:	3b01      	subs	r3, #1
   20970:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20974:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20978:	2b00      	cmp	r3, #0
   2097a:	dcaf      	bgt.n	208dc <__kernel_ram_size+0xa44>
   2097c:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   20980:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20984:	e04b      	b.n	20a1e <__kernel_ram_size+0xb86>
   20986:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   2098a:	3b01      	subs	r3, #1
   2098c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   20990:	00db      	lsls	r3, r3, #3
   20992:	4413      	add	r3, r2
   20994:	e9d3 0100 	ldrd	r0, r1, [r3]
   20998:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   2099c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   209a0:	00db      	lsls	r3, r3, #3
   209a2:	4413      	add	r3, r2
   209a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   209a8:	f7f2 fc9c 	bl	132e4 <__adddf3>
   209ac:	4602      	mov	r2, r0
   209ae:	460b      	mov	r3, r1
   209b0:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   209b4:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   209b8:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   209bc:	00db      	lsls	r3, r3, #3
   209be:	4413      	add	r3, r2
   209c0:	e9d3 4500 	ldrd	r4, r5, [r3]
   209c4:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   209c8:	3b01      	subs	r3, #1
   209ca:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   209ce:	00db      	lsls	r3, r3, #3
   209d0:	4413      	add	r3, r2
   209d2:	e9d3 0100 	ldrd	r0, r1, [r3]
   209d6:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
   209da:	f7f2 fc81 	bl	132e0 <__aeabi_dsub>
   209de:	4602      	mov	r2, r0
   209e0:	460b      	mov	r3, r1
   209e2:	4620      	mov	r0, r4
   209e4:	4629      	mov	r1, r5
   209e6:	f7f2 fc7d 	bl	132e4 <__adddf3>
   209ea:	4602      	mov	r2, r0
   209ec:	460b      	mov	r3, r1
   209ee:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
   209f2:	f8d7 128c 	ldr.w	r1, [r7, #652]	; 0x28c
   209f6:	00c9      	lsls	r1, r1, #3
   209f8:	4401      	add	r1, r0
   209fa:	e9c1 2300 	strd	r2, r3, [r1]
   209fe:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20a02:	3b01      	subs	r3, #1
   20a04:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   20a08:	00db      	lsls	r3, r3, #3
   20a0a:	18d1      	adds	r1, r2, r3
   20a0c:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
   20a10:	e9c1 2300 	strd	r2, r3, [r1]
   20a14:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20a18:	3b01      	subs	r3, #1
   20a1a:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20a1e:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20a22:	2b01      	cmp	r3, #1
   20a24:	dcaf      	bgt.n	20986 <__kernel_ram_size+0xaee>
   20a26:	f04f 0200 	mov.w	r2, #0
   20a2a:	f04f 0300 	mov.w	r3, #0
   20a2e:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   20a32:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
   20a36:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20a3a:	e014      	b.n	20a66 <__kernel_ram_size+0xbce>
   20a3c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
   20a40:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20a44:	00db      	lsls	r3, r3, #3
   20a46:	4413      	add	r3, r2
   20a48:	e9d3 2300 	ldrd	r2, r3, [r3]
   20a4c:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	; 0x268
   20a50:	f7f2 fc48 	bl	132e4 <__adddf3>
   20a54:	4602      	mov	r2, r0
   20a56:	460b      	mov	r3, r1
   20a58:	e9c7 239a 	strd	r2, r3, [r7, #616]	; 0x268
   20a5c:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20a60:	3b01      	subs	r3, #1
   20a62:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
   20a66:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
   20a6a:	2b01      	cmp	r3, #1
   20a6c:	dce6      	bgt.n	20a3c <__kernel_ram_size+0xba4>
   20a6e:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
   20a72:	2b00      	cmp	r3, #0
   20a74:	d11d      	bne.n	20ab2 <__kernel_ram_size+0xc1a>
   20a76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   20a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   20a7e:	f107 0120 	add.w	r1, r7, #32
   20a82:	6809      	ldr	r1, [r1, #0]
   20a84:	e9c1 2300 	strd	r2, r3, [r1]
   20a88:	f107 0320 	add.w	r3, r7, #32
   20a8c:	681b      	ldr	r3, [r3, #0]
   20a8e:	f103 0108 	add.w	r1, r3, #8
   20a92:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   20a96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   20a9a:	e9c1 2300 	strd	r2, r3, [r1]
   20a9e:	f107 0320 	add.w	r3, r7, #32
   20aa2:	681b      	ldr	r3, [r3, #0]
   20aa4:	f103 0110 	add.w	r1, r3, #16
   20aa8:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
   20aac:	e9c1 2300 	strd	r2, r3, [r1]
   20ab0:	e028      	b.n	20b04 <__kernel_ram_size+0xc6c>
   20ab2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   20ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
   20aba:	4692      	mov	sl, r2
   20abc:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
   20ac0:	f107 0320 	add.w	r3, r7, #32
   20ac4:	681b      	ldr	r3, [r3, #0]
   20ac6:	e9c3 ab00 	strd	sl, fp, [r3]
   20aca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
   20ace:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   20ad2:	f107 0120 	add.w	r1, r7, #32
   20ad6:	6809      	ldr	r1, [r1, #0]
   20ad8:	3108      	adds	r1, #8
   20ada:	4690      	mov	r8, r2
   20adc:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
   20ae0:	e9c1 8900 	strd	r8, r9, [r1]
   20ae4:	f107 0320 	add.w	r3, r7, #32
   20ae8:	681b      	ldr	r3, [r3, #0]
   20aea:	3310      	adds	r3, #16
   20aec:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
   20af0:	603a      	str	r2, [r7, #0]
   20af2:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
   20af6:	f082 4200 	eor.w	r2, r2, #2147483648	; 0x80000000
   20afa:	607a      	str	r2, [r7, #4]
   20afc:	ed97 7b00 	vldr	d7, [r7]
   20b00:	ed83 7b00 	vstr	d7, [r3]
   20b04:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
   20b08:	f003 0307 	and.w	r3, r3, #7
   20b0c:	4618      	mov	r0, r3
   20b0e:	f507 7729 	add.w	r7, r7, #676	; 0x2a4
   20b12:	46bd      	mov	sp, r7
   20b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00020b18 <nanf>:
   20b18:	b480      	push	{r7}
   20b1a:	b085      	sub	sp, #20
   20b1c:	af00      	add	r7, sp, #0
   20b1e:	6078      	str	r0, [r7, #4]
   20b20:	4b04      	ldr	r3, [pc, #16]	; (20b34 <nanf+0x1c>)
   20b22:	60fb      	str	r3, [r7, #12]
   20b24:	68fb      	ldr	r3, [r7, #12]
   20b26:	4618      	mov	r0, r3
   20b28:	3714      	adds	r7, #20
   20b2a:	46bd      	mov	sp, r7
   20b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   20b30:	4770      	bx	lr
   20b32:	bf00      	nop
   20b34:	7fc00000 	.word	0x7fc00000

00020b38 <scalbnf>:
   20b38:	b580      	push	{r7, lr}
   20b3a:	b08a      	sub	sp, #40	; 0x28
   20b3c:	af00      	add	r7, sp, #0
   20b3e:	6078      	str	r0, [r7, #4]
   20b40:	6039      	str	r1, [r7, #0]
   20b42:	687b      	ldr	r3, [r7, #4]
   20b44:	61bb      	str	r3, [r7, #24]
   20b46:	69bb      	ldr	r3, [r7, #24]
   20b48:	623b      	str	r3, [r7, #32]
   20b4a:	6a3b      	ldr	r3, [r7, #32]
   20b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   20b50:	61fb      	str	r3, [r7, #28]
   20b52:	69fb      	ldr	r3, [r7, #28]
   20b54:	0ddb      	lsrs	r3, r3, #23
   20b56:	627b      	str	r3, [r7, #36]	; 0x24
   20b58:	69fb      	ldr	r3, [r7, #28]
   20b5a:	2b00      	cmp	r3, #0
   20b5c:	d102      	bne.n	20b64 <scalbnf+0x2c>
   20b5e:	edd7 7a01 	vldr	s15, [r7, #4]
   20b62:	e07d      	b.n	20c60 <scalbnf+0x128>
   20b64:	69fb      	ldr	r3, [r7, #28]
   20b66:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   20b6a:	d304      	bcc.n	20b76 <scalbnf+0x3e>
   20b6c:	edd7 7a01 	vldr	s15, [r7, #4]
   20b70:	ee77 7aa7 	vadd.f32	s15, s15, s15
   20b74:	e074      	b.n	20c60 <scalbnf+0x128>
   20b76:	69fb      	ldr	r3, [r7, #28]
   20b78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   20b7c:	d21b      	bcs.n	20bb6 <scalbnf+0x7e>
   20b7e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 20c6c <scalbnf+0x134>
   20b82:	edd7 7a01 	vldr	s15, [r7, #4]
   20b86:	ee67 7a87 	vmul.f32	s15, s15, s14
   20b8a:	edc7 7a01 	vstr	s15, [r7, #4]
   20b8e:	687b      	ldr	r3, [r7, #4]
   20b90:	617b      	str	r3, [r7, #20]
   20b92:	697b      	ldr	r3, [r7, #20]
   20b94:	623b      	str	r3, [r7, #32]
   20b96:	6a3b      	ldr	r3, [r7, #32]
   20b98:	15db      	asrs	r3, r3, #23
   20b9a:	b2db      	uxtb	r3, r3
   20b9c:	3b19      	subs	r3, #25
   20b9e:	627b      	str	r3, [r7, #36]	; 0x24
   20ba0:	683b      	ldr	r3, [r7, #0]
   20ba2:	4a33      	ldr	r2, [pc, #204]	; (20c70 <scalbnf+0x138>)
   20ba4:	4293      	cmp	r3, r2
   20ba6:	da06      	bge.n	20bb6 <scalbnf+0x7e>
   20ba8:	ed9f 7a32 	vldr	s14, [pc, #200]	; 20c74 <scalbnf+0x13c>
   20bac:	edd7 7a01 	vldr	s15, [r7, #4]
   20bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
   20bb4:	e054      	b.n	20c60 <scalbnf+0x128>
   20bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20bb8:	683b      	ldr	r3, [r7, #0]
   20bba:	4413      	add	r3, r2
   20bbc:	627b      	str	r3, [r7, #36]	; 0x24
   20bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20bc0:	2bfe      	cmp	r3, #254	; 0xfe
   20bc2:	dd0b      	ble.n	20bdc <scalbnf+0xa4>
   20bc4:	4b2c      	ldr	r3, [pc, #176]	; (20c78 <scalbnf+0x140>)
   20bc6:	6879      	ldr	r1, [r7, #4]
   20bc8:	4618      	mov	r0, r3
   20bca:	f003 fc23 	bl	24414 <copysignf>
   20bce:	ee07 0a10 	vmov	s14, r0
   20bd2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 20c7c <scalbnf+0x144>
   20bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
   20bda:	e041      	b.n	20c60 <scalbnf+0x128>
   20bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20bde:	2b00      	cmp	r3, #0
   20be0:	dd0b      	ble.n	20bfa <scalbnf+0xc2>
   20be2:	6a3b      	ldr	r3, [r7, #32]
   20be4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   20be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20bea:	05d2      	lsls	r2, r2, #23
   20bec:	4313      	orrs	r3, r2
   20bee:	613b      	str	r3, [r7, #16]
   20bf0:	693b      	ldr	r3, [r7, #16]
   20bf2:	607b      	str	r3, [r7, #4]
   20bf4:	edd7 7a01 	vldr	s15, [r7, #4]
   20bf8:	e032      	b.n	20c60 <scalbnf+0x128>
   20bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20bfc:	f113 0f16 	cmn.w	r3, #22
   20c00:	da1c      	bge.n	20c3c <scalbnf+0x104>
   20c02:	683b      	ldr	r3, [r7, #0]
   20c04:	f24c 3250 	movw	r2, #50000	; 0xc350
   20c08:	4293      	cmp	r3, r2
   20c0a:	dd0b      	ble.n	20c24 <scalbnf+0xec>
   20c0c:	4b1a      	ldr	r3, [pc, #104]	; (20c78 <scalbnf+0x140>)
   20c0e:	6879      	ldr	r1, [r7, #4]
   20c10:	4618      	mov	r0, r3
   20c12:	f003 fbff 	bl	24414 <copysignf>
   20c16:	ee07 0a10 	vmov	s14, r0
   20c1a:	eddf 7a18 	vldr	s15, [pc, #96]	; 20c7c <scalbnf+0x144>
   20c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
   20c22:	e01d      	b.n	20c60 <scalbnf+0x128>
   20c24:	4b16      	ldr	r3, [pc, #88]	; (20c80 <scalbnf+0x148>)
   20c26:	6879      	ldr	r1, [r7, #4]
   20c28:	4618      	mov	r0, r3
   20c2a:	f003 fbf3 	bl	24414 <copysignf>
   20c2e:	ee07 0a10 	vmov	s14, r0
   20c32:	eddf 7a10 	vldr	s15, [pc, #64]	; 20c74 <scalbnf+0x13c>
   20c36:	ee67 7a27 	vmul.f32	s15, s14, s15
   20c3a:	e011      	b.n	20c60 <scalbnf+0x128>
   20c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   20c3e:	3319      	adds	r3, #25
   20c40:	627b      	str	r3, [r7, #36]	; 0x24
   20c42:	6a3b      	ldr	r3, [r7, #32]
   20c44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   20c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   20c4a:	05d2      	lsls	r2, r2, #23
   20c4c:	4313      	orrs	r3, r2
   20c4e:	60fb      	str	r3, [r7, #12]
   20c50:	68fb      	ldr	r3, [r7, #12]
   20c52:	607b      	str	r3, [r7, #4]
   20c54:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 20c84 <scalbnf+0x14c>
   20c58:	edd7 7a01 	vldr	s15, [r7, #4]
   20c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
   20c60:	ee17 3a90 	vmov	r3, s15
   20c64:	4618      	mov	r0, r3
   20c66:	3728      	adds	r7, #40	; 0x28
   20c68:	46bd      	mov	sp, r7
   20c6a:	bd80      	pop	{r7, pc}
   20c6c:	4c000000 	.word	0x4c000000
   20c70:	ffff3cb0 	.word	0xffff3cb0
   20c74:	0da24260 	.word	0x0da24260
   20c78:	7149f2ca 	.word	0x7149f2ca
   20c7c:	7149f2ca 	.word	0x7149f2ca
   20c80:	0da24260 	.word	0x0da24260
   20c84:	33000000 	.word	0x33000000

00020c88 <__assert_func>:
   20c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   20c8a:	4614      	mov	r4, r2
   20c8c:	461a      	mov	r2, r3
   20c8e:	4b09      	ldr	r3, [pc, #36]	; (20cb4 <__assert_func+0x2c>)
   20c90:	4605      	mov	r5, r0
   20c92:	681b      	ldr	r3, [r3, #0]
   20c94:	68d8      	ldr	r0, [r3, #12]
   20c96:	b14c      	cbz	r4, 20cac <__assert_func+0x24>
   20c98:	4b07      	ldr	r3, [pc, #28]	; (20cb8 <__assert_func+0x30>)
   20c9a:	9100      	str	r1, [sp, #0]
   20c9c:	4907      	ldr	r1, [pc, #28]	; (20cbc <__assert_func+0x34>)
   20c9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
   20ca2:	462b      	mov	r3, r5
   20ca4:	f000 f816 	bl	20cd4 <fiprintf>
   20ca8:	f003 fbd2 	bl	24450 <abort>
   20cac:	4b04      	ldr	r3, [pc, #16]	; (20cc0 <__assert_func+0x38>)
   20cae:	461c      	mov	r4, r3
   20cb0:	e7f3      	b.n	20c9a <__assert_func+0x12>
   20cb2:	bf00      	nop
   20cb4:	20020064 	.word	0x20020064
   20cb8:	0002d22c 	.word	0x0002d22c
   20cbc:	0002d239 	.word	0x0002d239
   20cc0:	0002afd8 	.word	0x0002afd8

00020cc4 <calloc>:
   20cc4:	4b02      	ldr	r3, [pc, #8]	; (20cd0 <calloc+0xc>)
   20cc6:	460a      	mov	r2, r1
   20cc8:	4601      	mov	r1, r0
   20cca:	6818      	ldr	r0, [r3, #0]
   20ccc:	f003 bc12 	b.w	244f4 <_calloc_r>
   20cd0:	20020064 	.word	0x20020064

00020cd4 <fiprintf>:
   20cd4:	b40e      	push	{r1, r2, r3}
   20cd6:	b503      	push	{r0, r1, lr}
   20cd8:	ab03      	add	r3, sp, #12
   20cda:	4601      	mov	r1, r0
   20cdc:	4805      	ldr	r0, [pc, #20]	; (20cf4 <fiprintf+0x20>)
   20cde:	f853 2b04 	ldr.w	r2, [r3], #4
   20ce2:	6800      	ldr	r0, [r0, #0]
   20ce4:	9301      	str	r3, [sp, #4]
   20ce6:	f000 fab7 	bl	21258 <_vfiprintf_r>
   20cea:	b002      	add	sp, #8
   20cec:	f85d eb04 	ldr.w	lr, [sp], #4
   20cf0:	b003      	add	sp, #12
   20cf2:	4770      	bx	lr
   20cf4:	20020064 	.word	0x20020064

00020cf8 <_fputc_r>:
   20cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20cfa:	4614      	mov	r4, r2
   20cfc:	4605      	mov	r5, r0
   20cfe:	b128      	cbz	r0, 20d0c <_fputc_r+0x14>
   20d00:	6983      	ldr	r3, [r0, #24]
   20d02:	b91b      	cbnz	r3, 20d0c <_fputc_r+0x14>
   20d04:	9101      	str	r1, [sp, #4]
   20d06:	f000 ff0d 	bl	21b24 <__sinit>
   20d0a:	9901      	ldr	r1, [sp, #4]
   20d0c:	4b0a      	ldr	r3, [pc, #40]	; (20d38 <_fputc_r+0x40>)
   20d0e:	429c      	cmp	r4, r3
   20d10:	d107      	bne.n	20d22 <_fputc_r+0x2a>
   20d12:	686c      	ldr	r4, [r5, #4]
   20d14:	4622      	mov	r2, r4
   20d16:	4628      	mov	r0, r5
   20d18:	b003      	add	sp, #12
   20d1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   20d1e:	f000 bcd7 	b.w	216d0 <_putc_r>
   20d22:	4b06      	ldr	r3, [pc, #24]	; (20d3c <_fputc_r+0x44>)
   20d24:	429c      	cmp	r4, r3
   20d26:	d101      	bne.n	20d2c <_fputc_r+0x34>
   20d28:	68ac      	ldr	r4, [r5, #8]
   20d2a:	e7f3      	b.n	20d14 <_fputc_r+0x1c>
   20d2c:	4b04      	ldr	r3, [pc, #16]	; (20d40 <_fputc_r+0x48>)
   20d2e:	429c      	cmp	r4, r3
   20d30:	bf08      	it	eq
   20d32:	68ec      	ldreq	r4, [r5, #12]
   20d34:	e7ee      	b.n	20d14 <_fputc_r+0x1c>
   20d36:	bf00      	nop
   20d38:	0002aae0 	.word	0x0002aae0
   20d3c:	0002ab00 	.word	0x0002ab00
   20d40:	0002aac0 	.word	0x0002aac0

00020d44 <fputc>:
   20d44:	4b02      	ldr	r3, [pc, #8]	; (20d50 <fputc+0xc>)
   20d46:	460a      	mov	r2, r1
   20d48:	4601      	mov	r1, r0
   20d4a:	6818      	ldr	r0, [r3, #0]
   20d4c:	f7ff bfd4 	b.w	20cf8 <_fputc_r>
   20d50:	20020064 	.word	0x20020064

00020d54 <_fputs_r>:
   20d54:	b530      	push	{r4, r5, lr}
   20d56:	b087      	sub	sp, #28
   20d58:	4604      	mov	r4, r0
   20d5a:	4608      	mov	r0, r1
   20d5c:	4615      	mov	r5, r2
   20d5e:	9101      	str	r1, [sp, #4]
   20d60:	f7f5 f88a 	bl	15e78 <strlen>
   20d64:	ab01      	add	r3, sp, #4
   20d66:	9005      	str	r0, [sp, #20]
   20d68:	9002      	str	r0, [sp, #8]
   20d6a:	9303      	str	r3, [sp, #12]
   20d6c:	2301      	movs	r3, #1
   20d6e:	9304      	str	r3, [sp, #16]
   20d70:	b124      	cbz	r4, 20d7c <_fputs_r+0x28>
   20d72:	69a3      	ldr	r3, [r4, #24]
   20d74:	b913      	cbnz	r3, 20d7c <_fputs_r+0x28>
   20d76:	4620      	mov	r0, r4
   20d78:	f000 fed4 	bl	21b24 <__sinit>
   20d7c:	4b0a      	ldr	r3, [pc, #40]	; (20da8 <_fputs_r+0x54>)
   20d7e:	429d      	cmp	r5, r3
   20d80:	d107      	bne.n	20d92 <_fputs_r+0x3e>
   20d82:	6865      	ldr	r5, [r4, #4]
   20d84:	aa03      	add	r2, sp, #12
   20d86:	4629      	mov	r1, r5
   20d88:	4620      	mov	r0, r4
   20d8a:	f000 f81b 	bl	20dc4 <__sfvwrite_r>
   20d8e:	b007      	add	sp, #28
   20d90:	bd30      	pop	{r4, r5, pc}
   20d92:	4b06      	ldr	r3, [pc, #24]	; (20dac <_fputs_r+0x58>)
   20d94:	429d      	cmp	r5, r3
   20d96:	d101      	bne.n	20d9c <_fputs_r+0x48>
   20d98:	68a5      	ldr	r5, [r4, #8]
   20d9a:	e7f3      	b.n	20d84 <_fputs_r+0x30>
   20d9c:	4b04      	ldr	r3, [pc, #16]	; (20db0 <_fputs_r+0x5c>)
   20d9e:	429d      	cmp	r5, r3
   20da0:	bf08      	it	eq
   20da2:	68e5      	ldreq	r5, [r4, #12]
   20da4:	e7ee      	b.n	20d84 <_fputs_r+0x30>
   20da6:	bf00      	nop
   20da8:	0002aae0 	.word	0x0002aae0
   20dac:	0002ab00 	.word	0x0002ab00
   20db0:	0002aac0 	.word	0x0002aac0

00020db4 <fputs>:
   20db4:	4b02      	ldr	r3, [pc, #8]	; (20dc0 <fputs+0xc>)
   20db6:	460a      	mov	r2, r1
   20db8:	4601      	mov	r1, r0
   20dba:	6818      	ldr	r0, [r3, #0]
   20dbc:	f7ff bfca 	b.w	20d54 <_fputs_r>
   20dc0:	20020064 	.word	0x20020064

00020dc4 <__sfvwrite_r>:
   20dc4:	6893      	ldr	r3, [r2, #8]
   20dc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20dca:	4606      	mov	r6, r0
   20dcc:	460c      	mov	r4, r1
   20dce:	4690      	mov	r8, r2
   20dd0:	b91b      	cbnz	r3, 20dda <__sfvwrite_r+0x16>
   20dd2:	2000      	movs	r0, #0
   20dd4:	b003      	add	sp, #12
   20dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20dda:	898b      	ldrh	r3, [r1, #12]
   20ddc:	0718      	lsls	r0, r3, #28
   20dde:	d550      	bpl.n	20e82 <__sfvwrite_r+0xbe>
   20de0:	690b      	ldr	r3, [r1, #16]
   20de2:	2b00      	cmp	r3, #0
   20de4:	d04d      	beq.n	20e82 <__sfvwrite_r+0xbe>
   20de6:	89a3      	ldrh	r3, [r4, #12]
   20de8:	f8d8 7000 	ldr.w	r7, [r8]
   20dec:	f013 0902 	ands.w	r9, r3, #2
   20df0:	d16c      	bne.n	20ecc <__sfvwrite_r+0x108>
   20df2:	f013 0301 	ands.w	r3, r3, #1
   20df6:	f000 809c 	beq.w	20f32 <__sfvwrite_r+0x16e>
   20dfa:	4648      	mov	r0, r9
   20dfc:	46ca      	mov	sl, r9
   20dfe:	46cb      	mov	fp, r9
   20e00:	f1bb 0f00 	cmp.w	fp, #0
   20e04:	f000 8103 	beq.w	2100e <__sfvwrite_r+0x24a>
   20e08:	b950      	cbnz	r0, 20e20 <__sfvwrite_r+0x5c>
   20e0a:	465a      	mov	r2, fp
   20e0c:	210a      	movs	r1, #10
   20e0e:	4650      	mov	r0, sl
   20e10:	f003 fb25 	bl	2445e <memchr>
   20e14:	2800      	cmp	r0, #0
   20e16:	f000 80ff 	beq.w	21018 <__sfvwrite_r+0x254>
   20e1a:	3001      	adds	r0, #1
   20e1c:	eba0 090a 	sub.w	r9, r0, sl
   20e20:	45d9      	cmp	r9, fp
   20e22:	6820      	ldr	r0, [r4, #0]
   20e24:	6921      	ldr	r1, [r4, #16]
   20e26:	464a      	mov	r2, r9
   20e28:	bf28      	it	cs
   20e2a:	465a      	movcs	r2, fp
   20e2c:	6963      	ldr	r3, [r4, #20]
   20e2e:	4288      	cmp	r0, r1
   20e30:	f240 80f5 	bls.w	2101e <__sfvwrite_r+0x25a>
   20e34:	68a5      	ldr	r5, [r4, #8]
   20e36:	441d      	add	r5, r3
   20e38:	42aa      	cmp	r2, r5
   20e3a:	f340 80f0 	ble.w	2101e <__sfvwrite_r+0x25a>
   20e3e:	4651      	mov	r1, sl
   20e40:	462a      	mov	r2, r5
   20e42:	f003 fb35 	bl	244b0 <memmove>
   20e46:	6823      	ldr	r3, [r4, #0]
   20e48:	4621      	mov	r1, r4
   20e4a:	4630      	mov	r0, r6
   20e4c:	442b      	add	r3, r5
   20e4e:	6023      	str	r3, [r4, #0]
   20e50:	f000 fe14 	bl	21a7c <_fflush_r>
   20e54:	2800      	cmp	r0, #0
   20e56:	d167      	bne.n	20f28 <__sfvwrite_r+0x164>
   20e58:	ebb9 0905 	subs.w	r9, r9, r5
   20e5c:	f040 80f7 	bne.w	2104e <__sfvwrite_r+0x28a>
   20e60:	4621      	mov	r1, r4
   20e62:	4630      	mov	r0, r6
   20e64:	f000 fe0a 	bl	21a7c <_fflush_r>
   20e68:	2800      	cmp	r0, #0
   20e6a:	d15d      	bne.n	20f28 <__sfvwrite_r+0x164>
   20e6c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   20e70:	44aa      	add	sl, r5
   20e72:	ebab 0b05 	sub.w	fp, fp, r5
   20e76:	1b55      	subs	r5, r2, r5
   20e78:	f8c8 5008 	str.w	r5, [r8, #8]
   20e7c:	2d00      	cmp	r5, #0
   20e7e:	d1bf      	bne.n	20e00 <__sfvwrite_r+0x3c>
   20e80:	e7a7      	b.n	20dd2 <__sfvwrite_r+0xe>
   20e82:	4621      	mov	r1, r4
   20e84:	4630      	mov	r0, r6
   20e86:	f000 fcfd 	bl	21884 <__swsetup_r>
   20e8a:	2800      	cmp	r0, #0
   20e8c:	d0ab      	beq.n	20de6 <__sfvwrite_r+0x22>
   20e8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20e92:	e79f      	b.n	20dd4 <__sfvwrite_r+0x10>
   20e94:	e9d7 b900 	ldrd	fp, r9, [r7]
   20e98:	3708      	adds	r7, #8
   20e9a:	f1b9 0f00 	cmp.w	r9, #0
   20e9e:	d0f9      	beq.n	20e94 <__sfvwrite_r+0xd0>
   20ea0:	45d1      	cmp	r9, sl
   20ea2:	464b      	mov	r3, r9
   20ea4:	465a      	mov	r2, fp
   20ea6:	6a21      	ldr	r1, [r4, #32]
   20ea8:	bf28      	it	cs
   20eaa:	4653      	movcs	r3, sl
   20eac:	4630      	mov	r0, r6
   20eae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   20eb0:	47a8      	blx	r5
   20eb2:	2800      	cmp	r0, #0
   20eb4:	dd38      	ble.n	20f28 <__sfvwrite_r+0x164>
   20eb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   20eba:	4483      	add	fp, r0
   20ebc:	eba9 0900 	sub.w	r9, r9, r0
   20ec0:	1a18      	subs	r0, r3, r0
   20ec2:	f8c8 0008 	str.w	r0, [r8, #8]
   20ec6:	2800      	cmp	r0, #0
   20ec8:	d1e7      	bne.n	20e9a <__sfvwrite_r+0xd6>
   20eca:	e782      	b.n	20dd2 <__sfvwrite_r+0xe>
   20ecc:	f04f 0b00 	mov.w	fp, #0
   20ed0:	f8df a180 	ldr.w	sl, [pc, #384]	; 21054 <__sfvwrite_r+0x290>
   20ed4:	46d9      	mov	r9, fp
   20ed6:	e7e0      	b.n	20e9a <__sfvwrite_r+0xd6>
   20ed8:	e9d7 9a00 	ldrd	r9, sl, [r7]
   20edc:	3708      	adds	r7, #8
   20ede:	f1ba 0f00 	cmp.w	sl, #0
   20ee2:	d0f9      	beq.n	20ed8 <__sfvwrite_r+0x114>
   20ee4:	89a3      	ldrh	r3, [r4, #12]
   20ee6:	68a2      	ldr	r2, [r4, #8]
   20ee8:	0599      	lsls	r1, r3, #22
   20eea:	6820      	ldr	r0, [r4, #0]
   20eec:	d563      	bpl.n	20fb6 <__sfvwrite_r+0x1f2>
   20eee:	4552      	cmp	r2, sl
   20ef0:	d836      	bhi.n	20f60 <__sfvwrite_r+0x19c>
   20ef2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   20ef6:	d033      	beq.n	20f60 <__sfvwrite_r+0x19c>
   20ef8:	6921      	ldr	r1, [r4, #16]
   20efa:	6965      	ldr	r5, [r4, #20]
   20efc:	eba0 0b01 	sub.w	fp, r0, r1
   20f00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   20f04:	f10b 0201 	add.w	r2, fp, #1
   20f08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   20f0c:	4452      	add	r2, sl
   20f0e:	106d      	asrs	r5, r5, #1
   20f10:	4295      	cmp	r5, r2
   20f12:	bf38      	it	cc
   20f14:	4615      	movcc	r5, r2
   20f16:	055b      	lsls	r3, r3, #21
   20f18:	d53d      	bpl.n	20f96 <__sfvwrite_r+0x1d2>
   20f1a:	4629      	mov	r1, r5
   20f1c:	4630      	mov	r0, r6
   20f1e:	f000 f941 	bl	211a4 <_malloc_r>
   20f22:	b948      	cbnz	r0, 20f38 <__sfvwrite_r+0x174>
   20f24:	230c      	movs	r3, #12
   20f26:	6033      	str	r3, [r6, #0]
   20f28:	89a3      	ldrh	r3, [r4, #12]
   20f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   20f2e:	81a3      	strh	r3, [r4, #12]
   20f30:	e7ad      	b.n	20e8e <__sfvwrite_r+0xca>
   20f32:	4699      	mov	r9, r3
   20f34:	469a      	mov	sl, r3
   20f36:	e7d2      	b.n	20ede <__sfvwrite_r+0x11a>
   20f38:	465a      	mov	r2, fp
   20f3a:	6921      	ldr	r1, [r4, #16]
   20f3c:	9001      	str	r0, [sp, #4]
   20f3e:	f003 faaa 	bl	24496 <memcpy>
   20f42:	89a2      	ldrh	r2, [r4, #12]
   20f44:	9b01      	ldr	r3, [sp, #4]
   20f46:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   20f4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   20f4e:	81a2      	strh	r2, [r4, #12]
   20f50:	6123      	str	r3, [r4, #16]
   20f52:	4652      	mov	r2, sl
   20f54:	445b      	add	r3, fp
   20f56:	6165      	str	r5, [r4, #20]
   20f58:	eba5 050b 	sub.w	r5, r5, fp
   20f5c:	6023      	str	r3, [r4, #0]
   20f5e:	60a5      	str	r5, [r4, #8]
   20f60:	4552      	cmp	r2, sl
   20f62:	4649      	mov	r1, r9
   20f64:	6820      	ldr	r0, [r4, #0]
   20f66:	4655      	mov	r5, sl
   20f68:	bf28      	it	cs
   20f6a:	4652      	movcs	r2, sl
   20f6c:	9201      	str	r2, [sp, #4]
   20f6e:	f003 fa9f 	bl	244b0 <memmove>
   20f72:	68a3      	ldr	r3, [r4, #8]
   20f74:	9a01      	ldr	r2, [sp, #4]
   20f76:	1a9b      	subs	r3, r3, r2
   20f78:	60a3      	str	r3, [r4, #8]
   20f7a:	6823      	ldr	r3, [r4, #0]
   20f7c:	441a      	add	r2, r3
   20f7e:	6022      	str	r2, [r4, #0]
   20f80:	f8d8 0008 	ldr.w	r0, [r8, #8]
   20f84:	44a9      	add	r9, r5
   20f86:	ebaa 0a05 	sub.w	sl, sl, r5
   20f8a:	1b45      	subs	r5, r0, r5
   20f8c:	f8c8 5008 	str.w	r5, [r8, #8]
   20f90:	2d00      	cmp	r5, #0
   20f92:	d1a4      	bne.n	20ede <__sfvwrite_r+0x11a>
   20f94:	e71d      	b.n	20dd2 <__sfvwrite_r+0xe>
   20f96:	462a      	mov	r2, r5
   20f98:	4630      	mov	r0, r6
   20f9a:	f003 faba 	bl	24512 <_realloc_r>
   20f9e:	4603      	mov	r3, r0
   20fa0:	2800      	cmp	r0, #0
   20fa2:	d1d5      	bne.n	20f50 <__sfvwrite_r+0x18c>
   20fa4:	6921      	ldr	r1, [r4, #16]
   20fa6:	4630      	mov	r0, r6
   20fa8:	f000 f8ac 	bl	21104 <_free_r>
   20fac:	89a3      	ldrh	r3, [r4, #12]
   20fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   20fb2:	81a3      	strh	r3, [r4, #12]
   20fb4:	e7b6      	b.n	20f24 <__sfvwrite_r+0x160>
   20fb6:	6923      	ldr	r3, [r4, #16]
   20fb8:	4283      	cmp	r3, r0
   20fba:	d302      	bcc.n	20fc2 <__sfvwrite_r+0x1fe>
   20fbc:	6961      	ldr	r1, [r4, #20]
   20fbe:	4551      	cmp	r1, sl
   20fc0:	d915      	bls.n	20fee <__sfvwrite_r+0x22a>
   20fc2:	4552      	cmp	r2, sl
   20fc4:	4649      	mov	r1, r9
   20fc6:	bf28      	it	cs
   20fc8:	4652      	movcs	r2, sl
   20fca:	4615      	mov	r5, r2
   20fcc:	f003 fa70 	bl	244b0 <memmove>
   20fd0:	68a3      	ldr	r3, [r4, #8]
   20fd2:	6822      	ldr	r2, [r4, #0]
   20fd4:	1b5b      	subs	r3, r3, r5
   20fd6:	442a      	add	r2, r5
   20fd8:	60a3      	str	r3, [r4, #8]
   20fda:	6022      	str	r2, [r4, #0]
   20fdc:	2b00      	cmp	r3, #0
   20fde:	d1cf      	bne.n	20f80 <__sfvwrite_r+0x1bc>
   20fe0:	4621      	mov	r1, r4
   20fe2:	4630      	mov	r0, r6
   20fe4:	f000 fd4a 	bl	21a7c <_fflush_r>
   20fe8:	2800      	cmp	r0, #0
   20fea:	d0c9      	beq.n	20f80 <__sfvwrite_r+0x1bc>
   20fec:	e79c      	b.n	20f28 <__sfvwrite_r+0x164>
   20fee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   20ff2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   20ff4:	464a      	mov	r2, r9
   20ff6:	4630      	mov	r0, r6
   20ff8:	459a      	cmp	sl, r3
   20ffa:	bf38      	it	cc
   20ffc:	4653      	movcc	r3, sl
   20ffe:	fb93 f3f1 	sdiv	r3, r3, r1
   21002:	434b      	muls	r3, r1
   21004:	6a21      	ldr	r1, [r4, #32]
   21006:	47a8      	blx	r5
   21008:	1e05      	subs	r5, r0, #0
   2100a:	dcb9      	bgt.n	20f80 <__sfvwrite_r+0x1bc>
   2100c:	e78c      	b.n	20f28 <__sfvwrite_r+0x164>
   2100e:	e9d7 ab00 	ldrd	sl, fp, [r7]
   21012:	2000      	movs	r0, #0
   21014:	3708      	adds	r7, #8
   21016:	e6f3      	b.n	20e00 <__sfvwrite_r+0x3c>
   21018:	f10b 0901 	add.w	r9, fp, #1
   2101c:	e700      	b.n	20e20 <__sfvwrite_r+0x5c>
   2101e:	4293      	cmp	r3, r2
   21020:	dc08      	bgt.n	21034 <__sfvwrite_r+0x270>
   21022:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   21024:	4652      	mov	r2, sl
   21026:	6a21      	ldr	r1, [r4, #32]
   21028:	4630      	mov	r0, r6
   2102a:	47a8      	blx	r5
   2102c:	1e05      	subs	r5, r0, #0
   2102e:	f73f af13 	bgt.w	20e58 <__sfvwrite_r+0x94>
   21032:	e779      	b.n	20f28 <__sfvwrite_r+0x164>
   21034:	4651      	mov	r1, sl
   21036:	9201      	str	r2, [sp, #4]
   21038:	f003 fa3a 	bl	244b0 <memmove>
   2103c:	9a01      	ldr	r2, [sp, #4]
   2103e:	68a3      	ldr	r3, [r4, #8]
   21040:	4615      	mov	r5, r2
   21042:	1a9b      	subs	r3, r3, r2
   21044:	60a3      	str	r3, [r4, #8]
   21046:	6823      	ldr	r3, [r4, #0]
   21048:	4413      	add	r3, r2
   2104a:	6023      	str	r3, [r4, #0]
   2104c:	e704      	b.n	20e58 <__sfvwrite_r+0x94>
   2104e:	2001      	movs	r0, #1
   21050:	e70c      	b.n	20e6c <__sfvwrite_r+0xa8>
   21052:	bf00      	nop
   21054:	7ffffc00 	.word	0x7ffffc00

00021058 <_fwrite_r>:
   21058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2105c:	b086      	sub	sp, #24
   2105e:	fb02 f703 	mul.w	r7, r2, r3
   21062:	461e      	mov	r6, r3
   21064:	4690      	mov	r8, r2
   21066:	ab01      	add	r3, sp, #4
   21068:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2106a:	4604      	mov	r4, r0
   2106c:	9101      	str	r1, [sp, #4]
   2106e:	9303      	str	r3, [sp, #12]
   21070:	2301      	movs	r3, #1
   21072:	9702      	str	r7, [sp, #8]
   21074:	9705      	str	r7, [sp, #20]
   21076:	9304      	str	r3, [sp, #16]
   21078:	b118      	cbz	r0, 21082 <_fwrite_r+0x2a>
   2107a:	6983      	ldr	r3, [r0, #24]
   2107c:	b90b      	cbnz	r3, 21082 <_fwrite_r+0x2a>
   2107e:	f000 fd51 	bl	21b24 <__sinit>
   21082:	4b0e      	ldr	r3, [pc, #56]	; (210bc <_fwrite_r+0x64>)
   21084:	429d      	cmp	r5, r3
   21086:	d10e      	bne.n	210a6 <_fwrite_r+0x4e>
   21088:	6865      	ldr	r5, [r4, #4]
   2108a:	aa03      	add	r2, sp, #12
   2108c:	4629      	mov	r1, r5
   2108e:	4620      	mov	r0, r4
   21090:	f7ff fe98 	bl	20dc4 <__sfvwrite_r>
   21094:	b118      	cbz	r0, 2109e <_fwrite_r+0x46>
   21096:	9e05      	ldr	r6, [sp, #20]
   21098:	1bbe      	subs	r6, r7, r6
   2109a:	fbb6 f6f8 	udiv	r6, r6, r8
   2109e:	4630      	mov	r0, r6
   210a0:	b006      	add	sp, #24
   210a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   210a6:	4b06      	ldr	r3, [pc, #24]	; (210c0 <_fwrite_r+0x68>)
   210a8:	429d      	cmp	r5, r3
   210aa:	d101      	bne.n	210b0 <_fwrite_r+0x58>
   210ac:	68a5      	ldr	r5, [r4, #8]
   210ae:	e7ec      	b.n	2108a <_fwrite_r+0x32>
   210b0:	4b04      	ldr	r3, [pc, #16]	; (210c4 <_fwrite_r+0x6c>)
   210b2:	429d      	cmp	r5, r3
   210b4:	bf08      	it	eq
   210b6:	68e5      	ldreq	r5, [r4, #12]
   210b8:	e7e7      	b.n	2108a <_fwrite_r+0x32>
   210ba:	bf00      	nop
   210bc:	0002aae0 	.word	0x0002aae0
   210c0:	0002ab00 	.word	0x0002ab00
   210c4:	0002aac0 	.word	0x0002aac0

000210c8 <fwrite>:
   210c8:	b507      	push	{r0, r1, r2, lr}
   210ca:	9300      	str	r3, [sp, #0]
   210cc:	4613      	mov	r3, r2
   210ce:	460a      	mov	r2, r1
   210d0:	4601      	mov	r1, r0
   210d2:	4803      	ldr	r0, [pc, #12]	; (210e0 <fwrite+0x18>)
   210d4:	6800      	ldr	r0, [r0, #0]
   210d6:	f7ff ffbf 	bl	21058 <_fwrite_r>
   210da:	b003      	add	sp, #12
   210dc:	f85d fb04 	ldr.w	pc, [sp], #4
   210e0:	20020064 	.word	0x20020064

000210e4 <malloc>:
   210e4:	4b02      	ldr	r3, [pc, #8]	; (210f0 <malloc+0xc>)
   210e6:	4601      	mov	r1, r0
   210e8:	6818      	ldr	r0, [r3, #0]
   210ea:	f000 b85b 	b.w	211a4 <_malloc_r>
   210ee:	bf00      	nop
   210f0:	20020064 	.word	0x20020064

000210f4 <free>:
   210f4:	4b02      	ldr	r3, [pc, #8]	; (21100 <free+0xc>)
   210f6:	4601      	mov	r1, r0
   210f8:	6818      	ldr	r0, [r3, #0]
   210fa:	f000 b803 	b.w	21104 <_free_r>
   210fe:	bf00      	nop
   21100:	20020064 	.word	0x20020064

00021104 <_free_r>:
   21104:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21106:	2900      	cmp	r1, #0
   21108:	d047      	beq.n	2119a <_free_r+0x96>
   2110a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2110e:	1f0c      	subs	r4, r1, #4
   21110:	9001      	str	r0, [sp, #4]
   21112:	2b00      	cmp	r3, #0
   21114:	bfb8      	it	lt
   21116:	18e4      	addlt	r4, r4, r3
   21118:	f003 fb5e 	bl	247d8 <__malloc_lock>
   2111c:	4a20      	ldr	r2, [pc, #128]	; (211a0 <_free_r+0x9c>)
   2111e:	9801      	ldr	r0, [sp, #4]
   21120:	6813      	ldr	r3, [r2, #0]
   21122:	4615      	mov	r5, r2
   21124:	b933      	cbnz	r3, 21134 <_free_r+0x30>
   21126:	6063      	str	r3, [r4, #4]
   21128:	6014      	str	r4, [r2, #0]
   2112a:	b003      	add	sp, #12
   2112c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   21130:	f003 bb53 	b.w	247da <__malloc_unlock>
   21134:	42a3      	cmp	r3, r4
   21136:	d90b      	bls.n	21150 <_free_r+0x4c>
   21138:	6821      	ldr	r1, [r4, #0]
   2113a:	1862      	adds	r2, r4, r1
   2113c:	4293      	cmp	r3, r2
   2113e:	bf02      	ittt	eq
   21140:	681a      	ldreq	r2, [r3, #0]
   21142:	685b      	ldreq	r3, [r3, #4]
   21144:	1852      	addeq	r2, r2, r1
   21146:	6063      	str	r3, [r4, #4]
   21148:	bf08      	it	eq
   2114a:	6022      	streq	r2, [r4, #0]
   2114c:	602c      	str	r4, [r5, #0]
   2114e:	e7ec      	b.n	2112a <_free_r+0x26>
   21150:	461a      	mov	r2, r3
   21152:	685b      	ldr	r3, [r3, #4]
   21154:	b10b      	cbz	r3, 2115a <_free_r+0x56>
   21156:	42a3      	cmp	r3, r4
   21158:	d9fa      	bls.n	21150 <_free_r+0x4c>
   2115a:	6811      	ldr	r1, [r2, #0]
   2115c:	1855      	adds	r5, r2, r1
   2115e:	42a5      	cmp	r5, r4
   21160:	d10b      	bne.n	2117a <_free_r+0x76>
   21162:	6824      	ldr	r4, [r4, #0]
   21164:	4421      	add	r1, r4
   21166:	1854      	adds	r4, r2, r1
   21168:	6011      	str	r1, [r2, #0]
   2116a:	42a3      	cmp	r3, r4
   2116c:	d1dd      	bne.n	2112a <_free_r+0x26>
   2116e:	681c      	ldr	r4, [r3, #0]
   21170:	685b      	ldr	r3, [r3, #4]
   21172:	4421      	add	r1, r4
   21174:	6053      	str	r3, [r2, #4]
   21176:	6011      	str	r1, [r2, #0]
   21178:	e7d7      	b.n	2112a <_free_r+0x26>
   2117a:	d902      	bls.n	21182 <_free_r+0x7e>
   2117c:	230c      	movs	r3, #12
   2117e:	6003      	str	r3, [r0, #0]
   21180:	e7d3      	b.n	2112a <_free_r+0x26>
   21182:	6825      	ldr	r5, [r4, #0]
   21184:	1961      	adds	r1, r4, r5
   21186:	428b      	cmp	r3, r1
   21188:	bf02      	ittt	eq
   2118a:	6819      	ldreq	r1, [r3, #0]
   2118c:	685b      	ldreq	r3, [r3, #4]
   2118e:	1949      	addeq	r1, r1, r5
   21190:	6063      	str	r3, [r4, #4]
   21192:	bf08      	it	eq
   21194:	6021      	streq	r1, [r4, #0]
   21196:	6054      	str	r4, [r2, #4]
   21198:	e7c7      	b.n	2112a <_free_r+0x26>
   2119a:	b003      	add	sp, #12
   2119c:	bd30      	pop	{r4, r5, pc}
   2119e:	bf00      	nop
   211a0:	20024f1c 	.word	0x20024f1c

000211a4 <_malloc_r>:
   211a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   211a6:	1ccd      	adds	r5, r1, #3
   211a8:	4606      	mov	r6, r0
   211aa:	f025 0503 	bic.w	r5, r5, #3
   211ae:	3508      	adds	r5, #8
   211b0:	2d0c      	cmp	r5, #12
   211b2:	bf38      	it	cc
   211b4:	250c      	movcc	r5, #12
   211b6:	2d00      	cmp	r5, #0
   211b8:	db01      	blt.n	211be <_malloc_r+0x1a>
   211ba:	42a9      	cmp	r1, r5
   211bc:	d903      	bls.n	211c6 <_malloc_r+0x22>
   211be:	230c      	movs	r3, #12
   211c0:	6033      	str	r3, [r6, #0]
   211c2:	2000      	movs	r0, #0
   211c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   211c6:	f003 fb07 	bl	247d8 <__malloc_lock>
   211ca:	4921      	ldr	r1, [pc, #132]	; (21250 <_malloc_r+0xac>)
   211cc:	680a      	ldr	r2, [r1, #0]
   211ce:	4614      	mov	r4, r2
   211d0:	b99c      	cbnz	r4, 211fa <_malloc_r+0x56>
   211d2:	4f20      	ldr	r7, [pc, #128]	; (21254 <_malloc_r+0xb0>)
   211d4:	683b      	ldr	r3, [r7, #0]
   211d6:	b923      	cbnz	r3, 211e2 <_malloc_r+0x3e>
   211d8:	4621      	mov	r1, r4
   211da:	4630      	mov	r0, r6
   211dc:	f000 fab6 	bl	2174c <_sbrk_r>
   211e0:	6038      	str	r0, [r7, #0]
   211e2:	4629      	mov	r1, r5
   211e4:	4630      	mov	r0, r6
   211e6:	f000 fab1 	bl	2174c <_sbrk_r>
   211ea:	1c43      	adds	r3, r0, #1
   211ec:	d123      	bne.n	21236 <_malloc_r+0x92>
   211ee:	230c      	movs	r3, #12
   211f0:	4630      	mov	r0, r6
   211f2:	6033      	str	r3, [r6, #0]
   211f4:	f003 faf1 	bl	247da <__malloc_unlock>
   211f8:	e7e3      	b.n	211c2 <_malloc_r+0x1e>
   211fa:	6823      	ldr	r3, [r4, #0]
   211fc:	1b5b      	subs	r3, r3, r5
   211fe:	d417      	bmi.n	21230 <_malloc_r+0x8c>
   21200:	2b0b      	cmp	r3, #11
   21202:	d903      	bls.n	2120c <_malloc_r+0x68>
   21204:	6023      	str	r3, [r4, #0]
   21206:	441c      	add	r4, r3
   21208:	6025      	str	r5, [r4, #0]
   2120a:	e004      	b.n	21216 <_malloc_r+0x72>
   2120c:	6863      	ldr	r3, [r4, #4]
   2120e:	42a2      	cmp	r2, r4
   21210:	bf0c      	ite	eq
   21212:	600b      	streq	r3, [r1, #0]
   21214:	6053      	strne	r3, [r2, #4]
   21216:	4630      	mov	r0, r6
   21218:	f003 fadf 	bl	247da <__malloc_unlock>
   2121c:	f104 000b 	add.w	r0, r4, #11
   21220:	1d23      	adds	r3, r4, #4
   21222:	f020 0007 	bic.w	r0, r0, #7
   21226:	1ac2      	subs	r2, r0, r3
   21228:	d0cc      	beq.n	211c4 <_malloc_r+0x20>
   2122a:	1a1b      	subs	r3, r3, r0
   2122c:	50a3      	str	r3, [r4, r2]
   2122e:	e7c9      	b.n	211c4 <_malloc_r+0x20>
   21230:	4622      	mov	r2, r4
   21232:	6864      	ldr	r4, [r4, #4]
   21234:	e7cc      	b.n	211d0 <_malloc_r+0x2c>
   21236:	1cc4      	adds	r4, r0, #3
   21238:	f024 0403 	bic.w	r4, r4, #3
   2123c:	42a0      	cmp	r0, r4
   2123e:	d0e3      	beq.n	21208 <_malloc_r+0x64>
   21240:	1a21      	subs	r1, r4, r0
   21242:	4630      	mov	r0, r6
   21244:	f000 fa82 	bl	2174c <_sbrk_r>
   21248:	3001      	adds	r0, #1
   2124a:	d1dd      	bne.n	21208 <_malloc_r+0x64>
   2124c:	e7cf      	b.n	211ee <_malloc_r+0x4a>
   2124e:	bf00      	nop
   21250:	20024f1c 	.word	0x20024f1c
   21254:	20024f20 	.word	0x20024f20

00021258 <_vfiprintf_r>:
   21258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2125c:	460d      	mov	r5, r1
   2125e:	b09d      	sub	sp, #116	; 0x74
   21260:	4614      	mov	r4, r2
   21262:	4698      	mov	r8, r3
   21264:	4606      	mov	r6, r0
   21266:	b118      	cbz	r0, 21270 <_vfiprintf_r+0x18>
   21268:	6983      	ldr	r3, [r0, #24]
   2126a:	b90b      	cbnz	r3, 21270 <_vfiprintf_r+0x18>
   2126c:	f000 fc5a 	bl	21b24 <__sinit>
   21270:	4b7c      	ldr	r3, [pc, #496]	; (21464 <_flash_used+0x5c>)
   21272:	429d      	cmp	r5, r3
   21274:	d161      	bne.n	2133a <_vfiprintf_r+0xe2>
   21276:	6875      	ldr	r5, [r6, #4]
   21278:	89ab      	ldrh	r3, [r5, #12]
   2127a:	071b      	lsls	r3, r3, #28
   2127c:	d567      	bpl.n	2134e <_vfiprintf_r+0xf6>
   2127e:	692b      	ldr	r3, [r5, #16]
   21280:	2b00      	cmp	r3, #0
   21282:	d064      	beq.n	2134e <_vfiprintf_r+0xf6>
   21284:	2300      	movs	r3, #0
   21286:	f8cd 800c 	str.w	r8, [sp, #12]
   2128a:	f04f 0901 	mov.w	r9, #1
   2128e:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 21468 <_flash_used+0x60>
   21292:	9309      	str	r3, [sp, #36]	; 0x24
   21294:	2320      	movs	r3, #32
   21296:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2129a:	2330      	movs	r3, #48	; 0x30
   2129c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   212a0:	4623      	mov	r3, r4
   212a2:	469a      	mov	sl, r3
   212a4:	f813 2b01 	ldrb.w	r2, [r3], #1
   212a8:	b10a      	cbz	r2, 212ae <_vfiprintf_r+0x56>
   212aa:	2a25      	cmp	r2, #37	; 0x25
   212ac:	d1f9      	bne.n	212a2 <_vfiprintf_r+0x4a>
   212ae:	ebba 0b04 	subs.w	fp, sl, r4
   212b2:	d00b      	beq.n	212cc <_vfiprintf_r+0x74>
   212b4:	465b      	mov	r3, fp
   212b6:	4622      	mov	r2, r4
   212b8:	4629      	mov	r1, r5
   212ba:	4630      	mov	r0, r6
   212bc:	f003 f966 	bl	2458c <__sfputs_r>
   212c0:	3001      	adds	r0, #1
   212c2:	f000 80c0 	beq.w	21446 <_flash_used+0x3e>
   212c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   212c8:	445a      	add	r2, fp
   212ca:	9209      	str	r2, [sp, #36]	; 0x24
   212cc:	f89a 3000 	ldrb.w	r3, [sl]
   212d0:	2b00      	cmp	r3, #0
   212d2:	f000 80b8 	beq.w	21446 <_flash_used+0x3e>
   212d6:	2300      	movs	r3, #0
   212d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   212dc:	f10a 0a01 	add.w	sl, sl, #1
   212e0:	9304      	str	r3, [sp, #16]
   212e2:	9307      	str	r3, [sp, #28]
   212e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   212e8:	931a      	str	r3, [sp, #104]	; 0x68
   212ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
   212ee:	4654      	mov	r4, sl
   212f0:	2205      	movs	r2, #5
   212f2:	485d      	ldr	r0, [pc, #372]	; (21468 <_flash_used+0x60>)
   212f4:	f814 1b01 	ldrb.w	r1, [r4], #1
   212f8:	f003 f8b1 	bl	2445e <memchr>
   212fc:	9a04      	ldr	r2, [sp, #16]
   212fe:	2800      	cmp	r0, #0
   21300:	d130      	bne.n	21364 <_vfiprintf_r+0x10c>
   21302:	06d0      	lsls	r0, r2, #27
   21304:	bf44      	itt	mi
   21306:	2320      	movmi	r3, #32
   21308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2130c:	0711      	lsls	r1, r2, #28
   2130e:	bf44      	itt	mi
   21310:	232b      	movmi	r3, #43	; 0x2b
   21312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   21316:	f89a 3000 	ldrb.w	r3, [sl]
   2131a:	2b2a      	cmp	r3, #42	; 0x2a
   2131c:	d02a      	beq.n	21374 <_vfiprintf_r+0x11c>
   2131e:	9a07      	ldr	r2, [sp, #28]
   21320:	4654      	mov	r4, sl
   21322:	2000      	movs	r0, #0
   21324:	f04f 0c0a 	mov.w	ip, #10
   21328:	4621      	mov	r1, r4
   2132a:	f811 3b01 	ldrb.w	r3, [r1], #1
   2132e:	3b30      	subs	r3, #48	; 0x30
   21330:	2b09      	cmp	r3, #9
   21332:	d963      	bls.n	213fc <_vfiprintf_r+0x1a4>
   21334:	b358      	cbz	r0, 2138e <_vfiprintf_r+0x136>
   21336:	9207      	str	r2, [sp, #28]
   21338:	e029      	b.n	2138e <_vfiprintf_r+0x136>
   2133a:	4b4c      	ldr	r3, [pc, #304]	; (2146c <_flash_used+0x64>)
   2133c:	429d      	cmp	r5, r3
   2133e:	d101      	bne.n	21344 <_vfiprintf_r+0xec>
   21340:	68b5      	ldr	r5, [r6, #8]
   21342:	e799      	b.n	21278 <_vfiprintf_r+0x20>
   21344:	4b4a      	ldr	r3, [pc, #296]	; (21470 <_flash_used+0x68>)
   21346:	429d      	cmp	r5, r3
   21348:	bf08      	it	eq
   2134a:	68f5      	ldreq	r5, [r6, #12]
   2134c:	e794      	b.n	21278 <_vfiprintf_r+0x20>
   2134e:	4629      	mov	r1, r5
   21350:	4630      	mov	r0, r6
   21352:	f000 fa97 	bl	21884 <__swsetup_r>
   21356:	2800      	cmp	r0, #0
   21358:	d094      	beq.n	21284 <_vfiprintf_r+0x2c>
   2135a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2135e:	b01d      	add	sp, #116	; 0x74
   21360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21364:	eba0 0308 	sub.w	r3, r0, r8
   21368:	46a2      	mov	sl, r4
   2136a:	fa09 f303 	lsl.w	r3, r9, r3
   2136e:	4313      	orrs	r3, r2
   21370:	9304      	str	r3, [sp, #16]
   21372:	e7bc      	b.n	212ee <_vfiprintf_r+0x96>
   21374:	9b03      	ldr	r3, [sp, #12]
   21376:	1d19      	adds	r1, r3, #4
   21378:	681b      	ldr	r3, [r3, #0]
   2137a:	2b00      	cmp	r3, #0
   2137c:	9103      	str	r1, [sp, #12]
   2137e:	bfbb      	ittet	lt
   21380:	425b      	neglt	r3, r3
   21382:	f042 0202 	orrlt.w	r2, r2, #2
   21386:	9307      	strge	r3, [sp, #28]
   21388:	9307      	strlt	r3, [sp, #28]
   2138a:	bfb8      	it	lt
   2138c:	9204      	strlt	r2, [sp, #16]
   2138e:	7823      	ldrb	r3, [r4, #0]
   21390:	2b2e      	cmp	r3, #46	; 0x2e
   21392:	d10c      	bne.n	213ae <_vfiprintf_r+0x156>
   21394:	7863      	ldrb	r3, [r4, #1]
   21396:	2b2a      	cmp	r3, #42	; 0x2a
   21398:	d135      	bne.n	21406 <_vfiprintf_r+0x1ae>
   2139a:	9b03      	ldr	r3, [sp, #12]
   2139c:	3402      	adds	r4, #2
   2139e:	1d1a      	adds	r2, r3, #4
   213a0:	681b      	ldr	r3, [r3, #0]
   213a2:	2b00      	cmp	r3, #0
   213a4:	9203      	str	r2, [sp, #12]
   213a6:	bfb8      	it	lt
   213a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   213ac:	9305      	str	r3, [sp, #20]
   213ae:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 21480 <_flash_used+0x78>
   213b2:	2203      	movs	r2, #3
   213b4:	7821      	ldrb	r1, [r4, #0]
   213b6:	4650      	mov	r0, sl
   213b8:	f003 f851 	bl	2445e <memchr>
   213bc:	b140      	cbz	r0, 213d0 <_vfiprintf_r+0x178>
   213be:	2340      	movs	r3, #64	; 0x40
   213c0:	eba0 000a 	sub.w	r0, r0, sl
   213c4:	3401      	adds	r4, #1
   213c6:	fa03 f000 	lsl.w	r0, r3, r0
   213ca:	9b04      	ldr	r3, [sp, #16]
   213cc:	4303      	orrs	r3, r0
   213ce:	9304      	str	r3, [sp, #16]
   213d0:	f814 1b01 	ldrb.w	r1, [r4], #1
   213d4:	2206      	movs	r2, #6
   213d6:	4827      	ldr	r0, [pc, #156]	; (21474 <_flash_used+0x6c>)
   213d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   213dc:	f003 f83f 	bl	2445e <memchr>
   213e0:	2800      	cmp	r0, #0
   213e2:	d035      	beq.n	21450 <_flash_used+0x48>
   213e4:	4b24      	ldr	r3, [pc, #144]	; (21478 <_flash_used+0x70>)
   213e6:	bb1b      	cbnz	r3, 21430 <_flash_used+0x28>
   213e8:	9b03      	ldr	r3, [sp, #12]
   213ea:	3307      	adds	r3, #7
   213ec:	f023 0307 	bic.w	r3, r3, #7
   213f0:	3308      	adds	r3, #8
   213f2:	9303      	str	r3, [sp, #12]
   213f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   213f6:	443b      	add	r3, r7
   213f8:	9309      	str	r3, [sp, #36]	; 0x24
   213fa:	e751      	b.n	212a0 <_vfiprintf_r+0x48>
   213fc:	fb0c 3202 	mla	r2, ip, r2, r3
   21400:	460c      	mov	r4, r1
   21402:	2001      	movs	r0, #1
   21404:	e790      	b.n	21328 <_vfiprintf_r+0xd0>
   21406:	2300      	movs	r3, #0
   21408:	3401      	adds	r4, #1
   2140a:	f04f 0c0a 	mov.w	ip, #10
   2140e:	4619      	mov	r1, r3
   21410:	9305      	str	r3, [sp, #20]
   21412:	4620      	mov	r0, r4
   21414:	f810 2b01 	ldrb.w	r2, [r0], #1
   21418:	3a30      	subs	r2, #48	; 0x30
   2141a:	2a09      	cmp	r2, #9
   2141c:	d903      	bls.n	21426 <_flash_used+0x1e>
   2141e:	2b00      	cmp	r3, #0
   21420:	d0c5      	beq.n	213ae <_vfiprintf_r+0x156>
   21422:	9105      	str	r1, [sp, #20]
   21424:	e7c3      	b.n	213ae <_vfiprintf_r+0x156>
   21426:	fb0c 2101 	mla	r1, ip, r1, r2
   2142a:	4604      	mov	r4, r0
   2142c:	2301      	movs	r3, #1
   2142e:	e7f0      	b.n	21412 <_flash_used+0xa>
   21430:	ab03      	add	r3, sp, #12
   21432:	462a      	mov	r2, r5
   21434:	a904      	add	r1, sp, #16
   21436:	4630      	mov	r0, r6
   21438:	9300      	str	r3, [sp, #0]
   2143a:	4b10      	ldr	r3, [pc, #64]	; (2147c <_flash_used+0x74>)
   2143c:	e000      	b.n	21440 <_flash_used+0x38>
   2143e:	bf00      	nop
   21440:	1c42      	adds	r2, r0, #1
   21442:	4607      	mov	r7, r0
   21444:	d1d6      	bne.n	213f4 <_vfiprintf_r+0x19c>
   21446:	89ab      	ldrh	r3, [r5, #12]
   21448:	065b      	lsls	r3, r3, #25
   2144a:	d486      	bmi.n	2135a <_vfiprintf_r+0x102>
   2144c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2144e:	e786      	b.n	2135e <_vfiprintf_r+0x106>
   21450:	ab03      	add	r3, sp, #12
   21452:	462a      	mov	r2, r5
   21454:	a904      	add	r1, sp, #16
   21456:	4630      	mov	r0, r6
   21458:	9300      	str	r3, [sp, #0]
   2145a:	4b08      	ldr	r3, [pc, #32]	; (2147c <_flash_used+0x74>)
   2145c:	f000 f812 	bl	21484 <_printf_i>
   21460:	e7ee      	b.n	21440 <_flash_used+0x38>
   21462:	bf00      	nop
   21464:	0002aae0 	.word	0x0002aae0
   21468:	0002d268 	.word	0x0002d268
   2146c:	0002ab00 	.word	0x0002ab00
   21470:	0002aac0 	.word	0x0002aac0
   21474:	0002d272 	.word	0x0002d272
   21478:	00000000 	.word	0x00000000
   2147c:	0002458d 	.word	0x0002458d
   21480:	0002d26e 	.word	0x0002d26e

00021484 <_printf_i>:
   21484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   21488:	460c      	mov	r4, r1
   2148a:	4691      	mov	r9, r2
   2148c:	4680      	mov	r8, r0
   2148e:	469a      	mov	sl, r3
   21490:	7e27      	ldrb	r7, [r4, #24]
   21492:	f104 0243 	add.w	r2, r4, #67	; 0x43
   21496:	990c      	ldr	r1, [sp, #48]	; 0x30
   21498:	2f78      	cmp	r7, #120	; 0x78
   2149a:	d807      	bhi.n	214ac <_printf_i+0x28>
   2149c:	2f62      	cmp	r7, #98	; 0x62
   2149e:	d80a      	bhi.n	214b6 <_printf_i+0x32>
   214a0:	2f00      	cmp	r7, #0
   214a2:	f000 80d8 	beq.w	21656 <_printf_i+0x1d2>
   214a6:	2f58      	cmp	r7, #88	; 0x58
   214a8:	f000 80a3 	beq.w	215f2 <_printf_i+0x16e>
   214ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
   214b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   214b4:	e03a      	b.n	2152c <_printf_i+0xa8>
   214b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   214ba:	2b15      	cmp	r3, #21
   214bc:	d8f6      	bhi.n	214ac <_printf_i+0x28>
   214be:	a001      	add	r0, pc, #4	; (adr r0, 214c4 <_printf_i+0x40>)
   214c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   214c4:	0002151d 	.word	0x0002151d
   214c8:	00021531 	.word	0x00021531
   214cc:	000214ad 	.word	0x000214ad
   214d0:	000214ad 	.word	0x000214ad
   214d4:	000214ad 	.word	0x000214ad
   214d8:	000214ad 	.word	0x000214ad
   214dc:	00021531 	.word	0x00021531
   214e0:	000214ad 	.word	0x000214ad
   214e4:	000214ad 	.word	0x000214ad
   214e8:	000214ad 	.word	0x000214ad
   214ec:	000214ad 	.word	0x000214ad
   214f0:	0002163d 	.word	0x0002163d
   214f4:	00021561 	.word	0x00021561
   214f8:	0002161f 	.word	0x0002161f
   214fc:	000214ad 	.word	0x000214ad
   21500:	000214ad 	.word	0x000214ad
   21504:	0002165f 	.word	0x0002165f
   21508:	000214ad 	.word	0x000214ad
   2150c:	00021561 	.word	0x00021561
   21510:	000214ad 	.word	0x000214ad
   21514:	000214ad 	.word	0x000214ad
   21518:	00021627 	.word	0x00021627
   2151c:	680b      	ldr	r3, [r1, #0]
   2151e:	f104 0642 	add.w	r6, r4, #66	; 0x42
   21522:	1d1a      	adds	r2, r3, #4
   21524:	681b      	ldr	r3, [r3, #0]
   21526:	600a      	str	r2, [r1, #0]
   21528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2152c:	2301      	movs	r3, #1
   2152e:	e0a3      	b.n	21678 <_printf_i+0x1f4>
   21530:	6825      	ldr	r5, [r4, #0]
   21532:	6808      	ldr	r0, [r1, #0]
   21534:	062e      	lsls	r6, r5, #24
   21536:	f100 0304 	add.w	r3, r0, #4
   2153a:	d50a      	bpl.n	21552 <_printf_i+0xce>
   2153c:	6805      	ldr	r5, [r0, #0]
   2153e:	600b      	str	r3, [r1, #0]
   21540:	2d00      	cmp	r5, #0
   21542:	da03      	bge.n	2154c <_printf_i+0xc8>
   21544:	232d      	movs	r3, #45	; 0x2d
   21546:	426d      	negs	r5, r5
   21548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2154c:	485e      	ldr	r0, [pc, #376]	; (216c8 <_printf_i+0x244>)
   2154e:	230a      	movs	r3, #10
   21550:	e019      	b.n	21586 <_printf_i+0x102>
   21552:	f015 0f40 	tst.w	r5, #64	; 0x40
   21556:	6805      	ldr	r5, [r0, #0]
   21558:	600b      	str	r3, [r1, #0]
   2155a:	bf18      	it	ne
   2155c:	b22d      	sxthne	r5, r5
   2155e:	e7ef      	b.n	21540 <_printf_i+0xbc>
   21560:	680b      	ldr	r3, [r1, #0]
   21562:	6825      	ldr	r5, [r4, #0]
   21564:	1d18      	adds	r0, r3, #4
   21566:	6008      	str	r0, [r1, #0]
   21568:	0628      	lsls	r0, r5, #24
   2156a:	d501      	bpl.n	21570 <_printf_i+0xec>
   2156c:	681d      	ldr	r5, [r3, #0]
   2156e:	e002      	b.n	21576 <_printf_i+0xf2>
   21570:	0669      	lsls	r1, r5, #25
   21572:	d5fb      	bpl.n	2156c <_printf_i+0xe8>
   21574:	881d      	ldrh	r5, [r3, #0]
   21576:	2f6f      	cmp	r7, #111	; 0x6f
   21578:	4853      	ldr	r0, [pc, #332]	; (216c8 <_printf_i+0x244>)
   2157a:	bf0c      	ite	eq
   2157c:	2308      	moveq	r3, #8
   2157e:	230a      	movne	r3, #10
   21580:	2100      	movs	r1, #0
   21582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   21586:	6866      	ldr	r6, [r4, #4]
   21588:	2e00      	cmp	r6, #0
   2158a:	60a6      	str	r6, [r4, #8]
   2158c:	bfa2      	ittt	ge
   2158e:	6821      	ldrge	r1, [r4, #0]
   21590:	f021 0104 	bicge.w	r1, r1, #4
   21594:	6021      	strge	r1, [r4, #0]
   21596:	b90d      	cbnz	r5, 2159c <_printf_i+0x118>
   21598:	2e00      	cmp	r6, #0
   2159a:	d04d      	beq.n	21638 <_printf_i+0x1b4>
   2159c:	4616      	mov	r6, r2
   2159e:	fbb5 f1f3 	udiv	r1, r5, r3
   215a2:	fb03 5711 	mls	r7, r3, r1, r5
   215a6:	5dc7      	ldrb	r7, [r0, r7]
   215a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
   215ac:	462f      	mov	r7, r5
   215ae:	460d      	mov	r5, r1
   215b0:	42bb      	cmp	r3, r7
   215b2:	d9f4      	bls.n	2159e <_printf_i+0x11a>
   215b4:	2b08      	cmp	r3, #8
   215b6:	d10b      	bne.n	215d0 <_printf_i+0x14c>
   215b8:	6823      	ldr	r3, [r4, #0]
   215ba:	07df      	lsls	r7, r3, #31
   215bc:	d508      	bpl.n	215d0 <_printf_i+0x14c>
   215be:	6923      	ldr	r3, [r4, #16]
   215c0:	6861      	ldr	r1, [r4, #4]
   215c2:	4299      	cmp	r1, r3
   215c4:	bfde      	ittt	le
   215c6:	2330      	movle	r3, #48	; 0x30
   215c8:	f806 3c01 	strble.w	r3, [r6, #-1]
   215cc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   215d0:	1b92      	subs	r2, r2, r6
   215d2:	6122      	str	r2, [r4, #16]
   215d4:	464b      	mov	r3, r9
   215d6:	aa03      	add	r2, sp, #12
   215d8:	4621      	mov	r1, r4
   215da:	4640      	mov	r0, r8
   215dc:	f8cd a000 	str.w	sl, [sp]
   215e0:	f002 ffe6 	bl	245b0 <_printf_common>
   215e4:	3001      	adds	r0, #1
   215e6:	d14c      	bne.n	21682 <_printf_i+0x1fe>
   215e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   215ec:	b004      	add	sp, #16
   215ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   215f2:	4835      	ldr	r0, [pc, #212]	; (216c8 <_printf_i+0x244>)
   215f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   215f8:	6823      	ldr	r3, [r4, #0]
   215fa:	680e      	ldr	r6, [r1, #0]
   215fc:	061f      	lsls	r7, r3, #24
   215fe:	f856 5b04 	ldr.w	r5, [r6], #4
   21602:	600e      	str	r6, [r1, #0]
   21604:	d514      	bpl.n	21630 <_printf_i+0x1ac>
   21606:	07d9      	lsls	r1, r3, #31
   21608:	bf44      	itt	mi
   2160a:	f043 0320 	orrmi.w	r3, r3, #32
   2160e:	6023      	strmi	r3, [r4, #0]
   21610:	b91d      	cbnz	r5, 2161a <_printf_i+0x196>
   21612:	6823      	ldr	r3, [r4, #0]
   21614:	f023 0320 	bic.w	r3, r3, #32
   21618:	6023      	str	r3, [r4, #0]
   2161a:	2310      	movs	r3, #16
   2161c:	e7b0      	b.n	21580 <_printf_i+0xfc>
   2161e:	6823      	ldr	r3, [r4, #0]
   21620:	f043 0320 	orr.w	r3, r3, #32
   21624:	6023      	str	r3, [r4, #0]
   21626:	2378      	movs	r3, #120	; 0x78
   21628:	4828      	ldr	r0, [pc, #160]	; (216cc <_printf_i+0x248>)
   2162a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   2162e:	e7e3      	b.n	215f8 <_printf_i+0x174>
   21630:	065e      	lsls	r6, r3, #25
   21632:	bf48      	it	mi
   21634:	b2ad      	uxthmi	r5, r5
   21636:	e7e6      	b.n	21606 <_printf_i+0x182>
   21638:	4616      	mov	r6, r2
   2163a:	e7bb      	b.n	215b4 <_printf_i+0x130>
   2163c:	680b      	ldr	r3, [r1, #0]
   2163e:	6826      	ldr	r6, [r4, #0]
   21640:	1d1d      	adds	r5, r3, #4
   21642:	6960      	ldr	r0, [r4, #20]
   21644:	600d      	str	r5, [r1, #0]
   21646:	0635      	lsls	r5, r6, #24
   21648:	681b      	ldr	r3, [r3, #0]
   2164a:	d501      	bpl.n	21650 <_printf_i+0x1cc>
   2164c:	6018      	str	r0, [r3, #0]
   2164e:	e002      	b.n	21656 <_printf_i+0x1d2>
   21650:	0671      	lsls	r1, r6, #25
   21652:	d5fb      	bpl.n	2164c <_printf_i+0x1c8>
   21654:	8018      	strh	r0, [r3, #0]
   21656:	2300      	movs	r3, #0
   21658:	4616      	mov	r6, r2
   2165a:	6123      	str	r3, [r4, #16]
   2165c:	e7ba      	b.n	215d4 <_printf_i+0x150>
   2165e:	680b      	ldr	r3, [r1, #0]
   21660:	1d1a      	adds	r2, r3, #4
   21662:	600a      	str	r2, [r1, #0]
   21664:	2100      	movs	r1, #0
   21666:	681e      	ldr	r6, [r3, #0]
   21668:	6862      	ldr	r2, [r4, #4]
   2166a:	4630      	mov	r0, r6
   2166c:	f002 fef7 	bl	2445e <memchr>
   21670:	b108      	cbz	r0, 21676 <_printf_i+0x1f2>
   21672:	1b80      	subs	r0, r0, r6
   21674:	6060      	str	r0, [r4, #4]
   21676:	6863      	ldr	r3, [r4, #4]
   21678:	6123      	str	r3, [r4, #16]
   2167a:	2300      	movs	r3, #0
   2167c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   21680:	e7a8      	b.n	215d4 <_printf_i+0x150>
   21682:	6923      	ldr	r3, [r4, #16]
   21684:	4632      	mov	r2, r6
   21686:	4649      	mov	r1, r9
   21688:	4640      	mov	r0, r8
   2168a:	47d0      	blx	sl
   2168c:	3001      	adds	r0, #1
   2168e:	d0ab      	beq.n	215e8 <_printf_i+0x164>
   21690:	6823      	ldr	r3, [r4, #0]
   21692:	079b      	lsls	r3, r3, #30
   21694:	d413      	bmi.n	216be <_printf_i+0x23a>
   21696:	68e0      	ldr	r0, [r4, #12]
   21698:	9b03      	ldr	r3, [sp, #12]
   2169a:	4298      	cmp	r0, r3
   2169c:	bfb8      	it	lt
   2169e:	4618      	movlt	r0, r3
   216a0:	e7a4      	b.n	215ec <_printf_i+0x168>
   216a2:	2301      	movs	r3, #1
   216a4:	4632      	mov	r2, r6
   216a6:	4649      	mov	r1, r9
   216a8:	4640      	mov	r0, r8
   216aa:	47d0      	blx	sl
   216ac:	3001      	adds	r0, #1
   216ae:	d09b      	beq.n	215e8 <_printf_i+0x164>
   216b0:	3501      	adds	r5, #1
   216b2:	68e3      	ldr	r3, [r4, #12]
   216b4:	9903      	ldr	r1, [sp, #12]
   216b6:	1a5b      	subs	r3, r3, r1
   216b8:	42ab      	cmp	r3, r5
   216ba:	dcf2      	bgt.n	216a2 <_printf_i+0x21e>
   216bc:	e7eb      	b.n	21696 <_printf_i+0x212>
   216be:	2500      	movs	r5, #0
   216c0:	f104 0619 	add.w	r6, r4, #25
   216c4:	e7f5      	b.n	216b2 <_printf_i+0x22e>
   216c6:	bf00      	nop
   216c8:	0002d279 	.word	0x0002d279
   216cc:	0002d28a 	.word	0x0002d28a

000216d0 <_putc_r>:
   216d0:	b570      	push	{r4, r5, r6, lr}
   216d2:	460d      	mov	r5, r1
   216d4:	4614      	mov	r4, r2
   216d6:	4606      	mov	r6, r0
   216d8:	b118      	cbz	r0, 216e2 <_putc_r+0x12>
   216da:	6983      	ldr	r3, [r0, #24]
   216dc:	b90b      	cbnz	r3, 216e2 <_putc_r+0x12>
   216de:	f000 fa21 	bl	21b24 <__sinit>
   216e2:	4b13      	ldr	r3, [pc, #76]	; (21730 <_putc_r+0x60>)
   216e4:	429c      	cmp	r4, r3
   216e6:	d111      	bne.n	2170c <_putc_r+0x3c>
   216e8:	6874      	ldr	r4, [r6, #4]
   216ea:	68a3      	ldr	r3, [r4, #8]
   216ec:	3b01      	subs	r3, #1
   216ee:	2b00      	cmp	r3, #0
   216f0:	60a3      	str	r3, [r4, #8]
   216f2:	da05      	bge.n	21700 <_putc_r+0x30>
   216f4:	69a2      	ldr	r2, [r4, #24]
   216f6:	4293      	cmp	r3, r2
   216f8:	db12      	blt.n	21720 <_putc_r+0x50>
   216fa:	b2eb      	uxtb	r3, r5
   216fc:	2b0a      	cmp	r3, #10
   216fe:	d00f      	beq.n	21720 <_putc_r+0x50>
   21700:	6823      	ldr	r3, [r4, #0]
   21702:	b2e8      	uxtb	r0, r5
   21704:	1c5a      	adds	r2, r3, #1
   21706:	6022      	str	r2, [r4, #0]
   21708:	701d      	strb	r5, [r3, #0]
   2170a:	bd70      	pop	{r4, r5, r6, pc}
   2170c:	4b09      	ldr	r3, [pc, #36]	; (21734 <_putc_r+0x64>)
   2170e:	429c      	cmp	r4, r3
   21710:	d101      	bne.n	21716 <_putc_r+0x46>
   21712:	68b4      	ldr	r4, [r6, #8]
   21714:	e7e9      	b.n	216ea <_putc_r+0x1a>
   21716:	4b08      	ldr	r3, [pc, #32]	; (21738 <_putc_r+0x68>)
   21718:	429c      	cmp	r4, r3
   2171a:	bf08      	it	eq
   2171c:	68f4      	ldreq	r4, [r6, #12]
   2171e:	e7e4      	b.n	216ea <_putc_r+0x1a>
   21720:	4622      	mov	r2, r4
   21722:	4629      	mov	r1, r5
   21724:	4630      	mov	r0, r6
   21726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2172a:	f000 b859 	b.w	217e0 <__swbuf_r>
   2172e:	bf00      	nop
   21730:	0002aae0 	.word	0x0002aae0
   21734:	0002ab00 	.word	0x0002ab00
   21738:	0002aac0 	.word	0x0002aac0

0002173c <realloc>:
   2173c:	4b02      	ldr	r3, [pc, #8]	; (21748 <realloc+0xc>)
   2173e:	460a      	mov	r2, r1
   21740:	4601      	mov	r1, r0
   21742:	6818      	ldr	r0, [r3, #0]
   21744:	f002 bee5 	b.w	24512 <_realloc_r>
   21748:	20020064 	.word	0x20020064

0002174c <_sbrk_r>:
   2174c:	b538      	push	{r3, r4, r5, lr}
   2174e:	2300      	movs	r3, #0
   21750:	4d05      	ldr	r5, [pc, #20]	; (21768 <_sbrk_r+0x1c>)
   21752:	4604      	mov	r4, r0
   21754:	4608      	mov	r0, r1
   21756:	602b      	str	r3, [r5, #0]
   21758:	f7f7 fcd2 	bl	19100 <_sbrk>
   2175c:	1c43      	adds	r3, r0, #1
   2175e:	d102      	bne.n	21766 <_sbrk_r+0x1a>
   21760:	682b      	ldr	r3, [r5, #0]
   21762:	b103      	cbz	r3, 21766 <_sbrk_r+0x1a>
   21764:	6023      	str	r3, [r4, #0]
   21766:	bd38      	pop	{r3, r4, r5, pc}
   21768:	200282d4 	.word	0x200282d4

0002176c <raise>:
   2176c:	4b02      	ldr	r3, [pc, #8]	; (21778 <raise+0xc>)
   2176e:	4601      	mov	r1, r0
   21770:	6818      	ldr	r0, [r3, #0]
   21772:	f002 bf8d 	b.w	24690 <_raise_r>
   21776:	bf00      	nop
   21778:	20020064 	.word	0x20020064

0002177c <_kill_r>:
   2177c:	b538      	push	{r3, r4, r5, lr}
   2177e:	2300      	movs	r3, #0
   21780:	4d06      	ldr	r5, [pc, #24]	; (2179c <_kill_r+0x20>)
   21782:	4604      	mov	r4, r0
   21784:	4608      	mov	r0, r1
   21786:	4611      	mov	r1, r2
   21788:	602b      	str	r3, [r5, #0]
   2178a:	f000 fdd1 	bl	22330 <_kill>
   2178e:	1c43      	adds	r3, r0, #1
   21790:	d102      	bne.n	21798 <_kill_r+0x1c>
   21792:	682b      	ldr	r3, [r5, #0]
   21794:	b103      	cbz	r3, 21798 <_kill_r+0x1c>
   21796:	6023      	str	r3, [r4, #0]
   21798:	bd38      	pop	{r3, r4, r5, pc}
   2179a:	bf00      	nop
   2179c:	200282d4 	.word	0x200282d4

000217a0 <siprintf>:
   217a0:	b40e      	push	{r1, r2, r3}
   217a2:	b500      	push	{lr}
   217a4:	b09a      	sub	sp, #104	; 0x68
   217a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   217aa:	ab1b      	add	r3, sp, #108	; 0x6c
   217ac:	9001      	str	r0, [sp, #4]
   217ae:	9005      	str	r0, [sp, #20]
   217b0:	9106      	str	r1, [sp, #24]
   217b2:	9103      	str	r1, [sp, #12]
   217b4:	4808      	ldr	r0, [pc, #32]	; (217d8 <siprintf+0x38>)
   217b6:	4909      	ldr	r1, [pc, #36]	; (217dc <siprintf+0x3c>)
   217b8:	f853 2b04 	ldr.w	r2, [r3], #4
   217bc:	9104      	str	r1, [sp, #16]
   217be:	a901      	add	r1, sp, #4
   217c0:	6800      	ldr	r0, [r0, #0]
   217c2:	9300      	str	r3, [sp, #0]
   217c4:	f000 fa5a 	bl	21c7c <_svfiprintf_r>
   217c8:	9b01      	ldr	r3, [sp, #4]
   217ca:	2200      	movs	r2, #0
   217cc:	701a      	strb	r2, [r3, #0]
   217ce:	b01a      	add	sp, #104	; 0x68
   217d0:	f85d eb04 	ldr.w	lr, [sp], #4
   217d4:	b003      	add	sp, #12
   217d6:	4770      	bx	lr
   217d8:	20020064 	.word	0x20020064
   217dc:	ffff0208 	.word	0xffff0208

000217e0 <__swbuf_r>:
   217e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   217e2:	460e      	mov	r6, r1
   217e4:	4614      	mov	r4, r2
   217e6:	4605      	mov	r5, r0
   217e8:	b118      	cbz	r0, 217f2 <__swbuf_r+0x12>
   217ea:	6983      	ldr	r3, [r0, #24]
   217ec:	b90b      	cbnz	r3, 217f2 <__swbuf_r+0x12>
   217ee:	f000 f999 	bl	21b24 <__sinit>
   217f2:	4b21      	ldr	r3, [pc, #132]	; (21878 <__swbuf_r+0x98>)
   217f4:	429c      	cmp	r4, r3
   217f6:	d12b      	bne.n	21850 <__swbuf_r+0x70>
   217f8:	686c      	ldr	r4, [r5, #4]
   217fa:	69a3      	ldr	r3, [r4, #24]
   217fc:	60a3      	str	r3, [r4, #8]
   217fe:	89a3      	ldrh	r3, [r4, #12]
   21800:	071a      	lsls	r2, r3, #28
   21802:	d52f      	bpl.n	21864 <__swbuf_r+0x84>
   21804:	6923      	ldr	r3, [r4, #16]
   21806:	b36b      	cbz	r3, 21864 <__swbuf_r+0x84>
   21808:	6923      	ldr	r3, [r4, #16]
   2180a:	b2f6      	uxtb	r6, r6
   2180c:	6820      	ldr	r0, [r4, #0]
   2180e:	4637      	mov	r7, r6
   21810:	1ac0      	subs	r0, r0, r3
   21812:	6963      	ldr	r3, [r4, #20]
   21814:	4283      	cmp	r3, r0
   21816:	dc04      	bgt.n	21822 <__swbuf_r+0x42>
   21818:	4621      	mov	r1, r4
   2181a:	4628      	mov	r0, r5
   2181c:	f000 f92e 	bl	21a7c <_fflush_r>
   21820:	bb30      	cbnz	r0, 21870 <__swbuf_r+0x90>
   21822:	68a3      	ldr	r3, [r4, #8]
   21824:	3001      	adds	r0, #1
   21826:	3b01      	subs	r3, #1
   21828:	60a3      	str	r3, [r4, #8]
   2182a:	6823      	ldr	r3, [r4, #0]
   2182c:	1c5a      	adds	r2, r3, #1
   2182e:	6022      	str	r2, [r4, #0]
   21830:	701e      	strb	r6, [r3, #0]
   21832:	6963      	ldr	r3, [r4, #20]
   21834:	4283      	cmp	r3, r0
   21836:	d004      	beq.n	21842 <__swbuf_r+0x62>
   21838:	89a3      	ldrh	r3, [r4, #12]
   2183a:	07db      	lsls	r3, r3, #31
   2183c:	d506      	bpl.n	2184c <__swbuf_r+0x6c>
   2183e:	2e0a      	cmp	r6, #10
   21840:	d104      	bne.n	2184c <__swbuf_r+0x6c>
   21842:	4621      	mov	r1, r4
   21844:	4628      	mov	r0, r5
   21846:	f000 f919 	bl	21a7c <_fflush_r>
   2184a:	b988      	cbnz	r0, 21870 <__swbuf_r+0x90>
   2184c:	4638      	mov	r0, r7
   2184e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21850:	4b0a      	ldr	r3, [pc, #40]	; (2187c <__swbuf_r+0x9c>)
   21852:	429c      	cmp	r4, r3
   21854:	d101      	bne.n	2185a <__swbuf_r+0x7a>
   21856:	68ac      	ldr	r4, [r5, #8]
   21858:	e7cf      	b.n	217fa <__swbuf_r+0x1a>
   2185a:	4b09      	ldr	r3, [pc, #36]	; (21880 <__swbuf_r+0xa0>)
   2185c:	429c      	cmp	r4, r3
   2185e:	bf08      	it	eq
   21860:	68ec      	ldreq	r4, [r5, #12]
   21862:	e7ca      	b.n	217fa <__swbuf_r+0x1a>
   21864:	4621      	mov	r1, r4
   21866:	4628      	mov	r0, r5
   21868:	f000 f80c 	bl	21884 <__swsetup_r>
   2186c:	2800      	cmp	r0, #0
   2186e:	d0cb      	beq.n	21808 <__swbuf_r+0x28>
   21870:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   21874:	e7ea      	b.n	2184c <__swbuf_r+0x6c>
   21876:	bf00      	nop
   21878:	0002aae0 	.word	0x0002aae0
   2187c:	0002ab00 	.word	0x0002ab00
   21880:	0002aac0 	.word	0x0002aac0

00021884 <__swsetup_r>:
   21884:	4b32      	ldr	r3, [pc, #200]	; (21950 <__swsetup_r+0xcc>)
   21886:	b570      	push	{r4, r5, r6, lr}
   21888:	681d      	ldr	r5, [r3, #0]
   2188a:	4606      	mov	r6, r0
   2188c:	460c      	mov	r4, r1
   2188e:	b125      	cbz	r5, 2189a <__swsetup_r+0x16>
   21890:	69ab      	ldr	r3, [r5, #24]
   21892:	b913      	cbnz	r3, 2189a <__swsetup_r+0x16>
   21894:	4628      	mov	r0, r5
   21896:	f000 f945 	bl	21b24 <__sinit>
   2189a:	4b2e      	ldr	r3, [pc, #184]	; (21954 <__swsetup_r+0xd0>)
   2189c:	429c      	cmp	r4, r3
   2189e:	d10f      	bne.n	218c0 <__swsetup_r+0x3c>
   218a0:	686c      	ldr	r4, [r5, #4]
   218a2:	89a3      	ldrh	r3, [r4, #12]
   218a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   218a8:	0719      	lsls	r1, r3, #28
   218aa:	d42c      	bmi.n	21906 <__swsetup_r+0x82>
   218ac:	06dd      	lsls	r5, r3, #27
   218ae:	d411      	bmi.n	218d4 <__swsetup_r+0x50>
   218b0:	2309      	movs	r3, #9
   218b2:	6033      	str	r3, [r6, #0]
   218b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   218b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   218bc:	81a3      	strh	r3, [r4, #12]
   218be:	e03e      	b.n	2193e <__swsetup_r+0xba>
   218c0:	4b25      	ldr	r3, [pc, #148]	; (21958 <__swsetup_r+0xd4>)
   218c2:	429c      	cmp	r4, r3
   218c4:	d101      	bne.n	218ca <__swsetup_r+0x46>
   218c6:	68ac      	ldr	r4, [r5, #8]
   218c8:	e7eb      	b.n	218a2 <__swsetup_r+0x1e>
   218ca:	4b24      	ldr	r3, [pc, #144]	; (2195c <__swsetup_r+0xd8>)
   218cc:	429c      	cmp	r4, r3
   218ce:	bf08      	it	eq
   218d0:	68ec      	ldreq	r4, [r5, #12]
   218d2:	e7e6      	b.n	218a2 <__swsetup_r+0x1e>
   218d4:	0758      	lsls	r0, r3, #29
   218d6:	d512      	bpl.n	218fe <__swsetup_r+0x7a>
   218d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
   218da:	b141      	cbz	r1, 218ee <__swsetup_r+0x6a>
   218dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
   218e0:	4299      	cmp	r1, r3
   218e2:	d002      	beq.n	218ea <__swsetup_r+0x66>
   218e4:	4630      	mov	r0, r6
   218e6:	f7ff fc0d 	bl	21104 <_free_r>
   218ea:	2300      	movs	r3, #0
   218ec:	6363      	str	r3, [r4, #52]	; 0x34
   218ee:	89a3      	ldrh	r3, [r4, #12]
   218f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   218f4:	81a3      	strh	r3, [r4, #12]
   218f6:	2300      	movs	r3, #0
   218f8:	6063      	str	r3, [r4, #4]
   218fa:	6923      	ldr	r3, [r4, #16]
   218fc:	6023      	str	r3, [r4, #0]
   218fe:	89a3      	ldrh	r3, [r4, #12]
   21900:	f043 0308 	orr.w	r3, r3, #8
   21904:	81a3      	strh	r3, [r4, #12]
   21906:	6923      	ldr	r3, [r4, #16]
   21908:	b94b      	cbnz	r3, 2191e <__swsetup_r+0x9a>
   2190a:	89a3      	ldrh	r3, [r4, #12]
   2190c:	f403 7320 	and.w	r3, r3, #640	; 0x280
   21910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   21914:	d003      	beq.n	2191e <__swsetup_r+0x9a>
   21916:	4621      	mov	r1, r4
   21918:	4630      	mov	r0, r6
   2191a:	f000 f96f 	bl	21bfc <__smakebuf_r>
   2191e:	89a0      	ldrh	r0, [r4, #12]
   21920:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   21924:	f010 0301 	ands.w	r3, r0, #1
   21928:	d00a      	beq.n	21940 <__swsetup_r+0xbc>
   2192a:	2300      	movs	r3, #0
   2192c:	60a3      	str	r3, [r4, #8]
   2192e:	6963      	ldr	r3, [r4, #20]
   21930:	425b      	negs	r3, r3
   21932:	61a3      	str	r3, [r4, #24]
   21934:	6923      	ldr	r3, [r4, #16]
   21936:	b943      	cbnz	r3, 2194a <__swsetup_r+0xc6>
   21938:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   2193c:	d1ba      	bne.n	218b4 <__swsetup_r+0x30>
   2193e:	bd70      	pop	{r4, r5, r6, pc}
   21940:	0781      	lsls	r1, r0, #30
   21942:	bf58      	it	pl
   21944:	6963      	ldrpl	r3, [r4, #20]
   21946:	60a3      	str	r3, [r4, #8]
   21948:	e7f4      	b.n	21934 <__swsetup_r+0xb0>
   2194a:	2000      	movs	r0, #0
   2194c:	e7f7      	b.n	2193e <__swsetup_r+0xba>
   2194e:	bf00      	nop
   21950:	20020064 	.word	0x20020064
   21954:	0002aae0 	.word	0x0002aae0
   21958:	0002ab00 	.word	0x0002ab00
   2195c:	0002aac0 	.word	0x0002aac0

00021960 <__sflush_r>:
   21960:	898b      	ldrh	r3, [r1, #12]
   21962:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   21966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2196a:	4605      	mov	r5, r0
   2196c:	0718      	lsls	r0, r3, #28
   2196e:	460c      	mov	r4, r1
   21970:	d45f      	bmi.n	21a32 <__sflush_r+0xd2>
   21972:	684b      	ldr	r3, [r1, #4]
   21974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   21978:	2b00      	cmp	r3, #0
   2197a:	818a      	strh	r2, [r1, #12]
   2197c:	dc05      	bgt.n	2198a <__sflush_r+0x2a>
   2197e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   21980:	2b00      	cmp	r3, #0
   21982:	dc02      	bgt.n	2198a <__sflush_r+0x2a>
   21984:	2000      	movs	r0, #0
   21986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2198a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2198c:	2e00      	cmp	r6, #0
   2198e:	d0f9      	beq.n	21984 <__sflush_r+0x24>
   21990:	2300      	movs	r3, #0
   21992:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   21996:	682f      	ldr	r7, [r5, #0]
   21998:	602b      	str	r3, [r5, #0]
   2199a:	d036      	beq.n	21a0a <__sflush_r+0xaa>
   2199c:	6d60      	ldr	r0, [r4, #84]	; 0x54
   2199e:	89a3      	ldrh	r3, [r4, #12]
   219a0:	075a      	lsls	r2, r3, #29
   219a2:	d505      	bpl.n	219b0 <__sflush_r+0x50>
   219a4:	6863      	ldr	r3, [r4, #4]
   219a6:	1ac0      	subs	r0, r0, r3
   219a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   219aa:	b10b      	cbz	r3, 219b0 <__sflush_r+0x50>
   219ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
   219ae:	1ac0      	subs	r0, r0, r3
   219b0:	2300      	movs	r3, #0
   219b2:	4602      	mov	r2, r0
   219b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   219b6:	4628      	mov	r0, r5
   219b8:	6a21      	ldr	r1, [r4, #32]
   219ba:	47b0      	blx	r6
   219bc:	1c43      	adds	r3, r0, #1
   219be:	89a3      	ldrh	r3, [r4, #12]
   219c0:	d106      	bne.n	219d0 <__sflush_r+0x70>
   219c2:	6829      	ldr	r1, [r5, #0]
   219c4:	291d      	cmp	r1, #29
   219c6:	d830      	bhi.n	21a2a <__sflush_r+0xca>
   219c8:	4a2b      	ldr	r2, [pc, #172]	; (21a78 <__sflush_r+0x118>)
   219ca:	40ca      	lsrs	r2, r1
   219cc:	07d6      	lsls	r6, r2, #31
   219ce:	d52c      	bpl.n	21a2a <__sflush_r+0xca>
   219d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   219d4:	2200      	movs	r2, #0
   219d6:	b21b      	sxth	r3, r3
   219d8:	6062      	str	r2, [r4, #4]
   219da:	6922      	ldr	r2, [r4, #16]
   219dc:	04d9      	lsls	r1, r3, #19
   219de:	81a3      	strh	r3, [r4, #12]
   219e0:	6022      	str	r2, [r4, #0]
   219e2:	d504      	bpl.n	219ee <__sflush_r+0x8e>
   219e4:	1c42      	adds	r2, r0, #1
   219e6:	d101      	bne.n	219ec <__sflush_r+0x8c>
   219e8:	682b      	ldr	r3, [r5, #0]
   219ea:	b903      	cbnz	r3, 219ee <__sflush_r+0x8e>
   219ec:	6560      	str	r0, [r4, #84]	; 0x54
   219ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
   219f0:	602f      	str	r7, [r5, #0]
   219f2:	2900      	cmp	r1, #0
   219f4:	d0c6      	beq.n	21984 <__sflush_r+0x24>
   219f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
   219fa:	4299      	cmp	r1, r3
   219fc:	d002      	beq.n	21a04 <__sflush_r+0xa4>
   219fe:	4628      	mov	r0, r5
   21a00:	f7ff fb80 	bl	21104 <_free_r>
   21a04:	2000      	movs	r0, #0
   21a06:	6360      	str	r0, [r4, #52]	; 0x34
   21a08:	e7bd      	b.n	21986 <__sflush_r+0x26>
   21a0a:	6a21      	ldr	r1, [r4, #32]
   21a0c:	2301      	movs	r3, #1
   21a0e:	4628      	mov	r0, r5
   21a10:	47b0      	blx	r6
   21a12:	1c41      	adds	r1, r0, #1
   21a14:	d1c3      	bne.n	2199e <__sflush_r+0x3e>
   21a16:	682b      	ldr	r3, [r5, #0]
   21a18:	2b00      	cmp	r3, #0
   21a1a:	d0c0      	beq.n	2199e <__sflush_r+0x3e>
   21a1c:	2b1d      	cmp	r3, #29
   21a1e:	d001      	beq.n	21a24 <__sflush_r+0xc4>
   21a20:	2b16      	cmp	r3, #22
   21a22:	d101      	bne.n	21a28 <__sflush_r+0xc8>
   21a24:	602f      	str	r7, [r5, #0]
   21a26:	e7ad      	b.n	21984 <__sflush_r+0x24>
   21a28:	89a3      	ldrh	r3, [r4, #12]
   21a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21a2e:	81a3      	strh	r3, [r4, #12]
   21a30:	e7a9      	b.n	21986 <__sflush_r+0x26>
   21a32:	690f      	ldr	r7, [r1, #16]
   21a34:	2f00      	cmp	r7, #0
   21a36:	d0a5      	beq.n	21984 <__sflush_r+0x24>
   21a38:	079b      	lsls	r3, r3, #30
   21a3a:	680e      	ldr	r6, [r1, #0]
   21a3c:	600f      	str	r7, [r1, #0]
   21a3e:	bf0c      	ite	eq
   21a40:	694b      	ldreq	r3, [r1, #20]
   21a42:	2300      	movne	r3, #0
   21a44:	eba6 0807 	sub.w	r8, r6, r7
   21a48:	608b      	str	r3, [r1, #8]
   21a4a:	f1b8 0f00 	cmp.w	r8, #0
   21a4e:	dd99      	ble.n	21984 <__sflush_r+0x24>
   21a50:	4643      	mov	r3, r8
   21a52:	463a      	mov	r2, r7
   21a54:	6a21      	ldr	r1, [r4, #32]
   21a56:	4628      	mov	r0, r5
   21a58:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   21a5a:	47b0      	blx	r6
   21a5c:	2800      	cmp	r0, #0
   21a5e:	dc06      	bgt.n	21a6e <__sflush_r+0x10e>
   21a60:	89a3      	ldrh	r3, [r4, #12]
   21a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21a6a:	81a3      	strh	r3, [r4, #12]
   21a6c:	e78b      	b.n	21986 <__sflush_r+0x26>
   21a6e:	4407      	add	r7, r0
   21a70:	eba8 0800 	sub.w	r8, r8, r0
   21a74:	e7e9      	b.n	21a4a <__sflush_r+0xea>
   21a76:	bf00      	nop
   21a78:	20400001 	.word	0x20400001

00021a7c <_fflush_r>:
   21a7c:	b538      	push	{r3, r4, r5, lr}
   21a7e:	690b      	ldr	r3, [r1, #16]
   21a80:	4605      	mov	r5, r0
   21a82:	460c      	mov	r4, r1
   21a84:	b1db      	cbz	r3, 21abe <_fflush_r+0x42>
   21a86:	b118      	cbz	r0, 21a90 <_fflush_r+0x14>
   21a88:	6983      	ldr	r3, [r0, #24]
   21a8a:	b90b      	cbnz	r3, 21a90 <_fflush_r+0x14>
   21a8c:	f000 f84a 	bl	21b24 <__sinit>
   21a90:	4b0c      	ldr	r3, [pc, #48]	; (21ac4 <_fflush_r+0x48>)
   21a92:	429c      	cmp	r4, r3
   21a94:	d109      	bne.n	21aaa <_fflush_r+0x2e>
   21a96:	686c      	ldr	r4, [r5, #4]
   21a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21a9c:	b17b      	cbz	r3, 21abe <_fflush_r+0x42>
   21a9e:	4621      	mov	r1, r4
   21aa0:	4628      	mov	r0, r5
   21aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   21aa6:	f7ff bf5b 	b.w	21960 <__sflush_r>
   21aaa:	4b07      	ldr	r3, [pc, #28]	; (21ac8 <_fflush_r+0x4c>)
   21aac:	429c      	cmp	r4, r3
   21aae:	d101      	bne.n	21ab4 <_fflush_r+0x38>
   21ab0:	68ac      	ldr	r4, [r5, #8]
   21ab2:	e7f1      	b.n	21a98 <_fflush_r+0x1c>
   21ab4:	4b05      	ldr	r3, [pc, #20]	; (21acc <_fflush_r+0x50>)
   21ab6:	429c      	cmp	r4, r3
   21ab8:	bf08      	it	eq
   21aba:	68ec      	ldreq	r4, [r5, #12]
   21abc:	e7ec      	b.n	21a98 <_fflush_r+0x1c>
   21abe:	2000      	movs	r0, #0
   21ac0:	bd38      	pop	{r3, r4, r5, pc}
   21ac2:	bf00      	nop
   21ac4:	0002aae0 	.word	0x0002aae0
   21ac8:	0002ab00 	.word	0x0002ab00
   21acc:	0002aac0 	.word	0x0002aac0

00021ad0 <std>:
   21ad0:	2300      	movs	r3, #0
   21ad2:	b510      	push	{r4, lr}
   21ad4:	4604      	mov	r4, r0
   21ad6:	6083      	str	r3, [r0, #8]
   21ad8:	8181      	strh	r1, [r0, #12]
   21ada:	4619      	mov	r1, r3
   21adc:	6603      	str	r3, [r0, #96]	; 0x60
   21ade:	81c2      	strh	r2, [r0, #14]
   21ae0:	2208      	movs	r2, #8
   21ae2:	6183      	str	r3, [r0, #24]
   21ae4:	e9c0 3300 	strd	r3, r3, [r0]
   21ae8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   21aec:	3058      	adds	r0, #88	; 0x58
   21aee:	f002 fcf9 	bl	244e4 <memset>
   21af2:	4b05      	ldr	r3, [pc, #20]	; (21b08 <std+0x38>)
   21af4:	6224      	str	r4, [r4, #32]
   21af6:	6263      	str	r3, [r4, #36]	; 0x24
   21af8:	4b04      	ldr	r3, [pc, #16]	; (21b0c <std+0x3c>)
   21afa:	62a3      	str	r3, [r4, #40]	; 0x28
   21afc:	4b04      	ldr	r3, [pc, #16]	; (21b10 <std+0x40>)
   21afe:	62e3      	str	r3, [r4, #44]	; 0x2c
   21b00:	4b04      	ldr	r3, [pc, #16]	; (21b14 <std+0x44>)
   21b02:	6323      	str	r3, [r4, #48]	; 0x30
   21b04:	bd10      	pop	{r4, pc}
   21b06:	bf00      	nop
   21b08:	000248a3 	.word	0x000248a3
   21b0c:	000248c5 	.word	0x000248c5
   21b10:	000248fd 	.word	0x000248fd
   21b14:	00024921 	.word	0x00024921

00021b18 <_cleanup_r>:
   21b18:	4901      	ldr	r1, [pc, #4]	; (21b20 <_cleanup_r+0x8>)
   21b1a:	f002 be13 	b.w	24744 <_fwalk_reent>
   21b1e:	bf00      	nop
   21b20:	00021a7d 	.word	0x00021a7d

00021b24 <__sinit>:
   21b24:	6983      	ldr	r3, [r0, #24]
   21b26:	b510      	push	{r4, lr}
   21b28:	4604      	mov	r4, r0
   21b2a:	bb33      	cbnz	r3, 21b7a <__sinit+0x56>
   21b2c:	6503      	str	r3, [r0, #80]	; 0x50
   21b2e:	4a13      	ldr	r2, [pc, #76]	; (21b7c <__sinit+0x58>)
   21b30:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
   21b34:	4b12      	ldr	r3, [pc, #72]	; (21b80 <__sinit+0x5c>)
   21b36:	6282      	str	r2, [r0, #40]	; 0x28
   21b38:	681b      	ldr	r3, [r3, #0]
   21b3a:	4298      	cmp	r0, r3
   21b3c:	bf04      	itt	eq
   21b3e:	2301      	moveq	r3, #1
   21b40:	6183      	streq	r3, [r0, #24]
   21b42:	f000 f81f 	bl	21b84 <__sfp>
   21b46:	6060      	str	r0, [r4, #4]
   21b48:	4620      	mov	r0, r4
   21b4a:	f000 f81b 	bl	21b84 <__sfp>
   21b4e:	60a0      	str	r0, [r4, #8]
   21b50:	4620      	mov	r0, r4
   21b52:	f000 f817 	bl	21b84 <__sfp>
   21b56:	2200      	movs	r2, #0
   21b58:	2104      	movs	r1, #4
   21b5a:	60e0      	str	r0, [r4, #12]
   21b5c:	6860      	ldr	r0, [r4, #4]
   21b5e:	f7ff ffb7 	bl	21ad0 <std>
   21b62:	2201      	movs	r2, #1
   21b64:	2109      	movs	r1, #9
   21b66:	68a0      	ldr	r0, [r4, #8]
   21b68:	f7ff ffb2 	bl	21ad0 <std>
   21b6c:	2202      	movs	r2, #2
   21b6e:	2112      	movs	r1, #18
   21b70:	68e0      	ldr	r0, [r4, #12]
   21b72:	f7ff ffad 	bl	21ad0 <std>
   21b76:	2301      	movs	r3, #1
   21b78:	61a3      	str	r3, [r4, #24]
   21b7a:	bd10      	pop	{r4, pc}
   21b7c:	00021b19 	.word	0x00021b19
   21b80:	0002aabc 	.word	0x0002aabc

00021b84 <__sfp>:
   21b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21b86:	4b1b      	ldr	r3, [pc, #108]	; (21bf4 <__sfp+0x70>)
   21b88:	4607      	mov	r7, r0
   21b8a:	681e      	ldr	r6, [r3, #0]
   21b8c:	69b3      	ldr	r3, [r6, #24]
   21b8e:	b913      	cbnz	r3, 21b96 <__sfp+0x12>
   21b90:	4630      	mov	r0, r6
   21b92:	f7ff ffc7 	bl	21b24 <__sinit>
   21b96:	3648      	adds	r6, #72	; 0x48
   21b98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   21b9c:	3b01      	subs	r3, #1
   21b9e:	d503      	bpl.n	21ba8 <__sfp+0x24>
   21ba0:	6833      	ldr	r3, [r6, #0]
   21ba2:	b1db      	cbz	r3, 21bdc <__sfp+0x58>
   21ba4:	6836      	ldr	r6, [r6, #0]
   21ba6:	e7f7      	b.n	21b98 <__sfp+0x14>
   21ba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   21bac:	b9a5      	cbnz	r5, 21bd8 <__sfp+0x54>
   21bae:	4b12      	ldr	r3, [pc, #72]	; (21bf8 <__sfp+0x74>)
   21bb0:	2208      	movs	r2, #8
   21bb2:	4629      	mov	r1, r5
   21bb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   21bb8:	6625      	str	r5, [r4, #96]	; 0x60
   21bba:	60a5      	str	r5, [r4, #8]
   21bbc:	e9c4 5500 	strd	r5, r5, [r4]
   21bc0:	e9c4 3503 	strd	r3, r5, [r4, #12]
   21bc4:	e9c4 5505 	strd	r5, r5, [r4, #20]
   21bc8:	f002 fc8c 	bl	244e4 <memset>
   21bcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   21bd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   21bd4:	4620      	mov	r0, r4
   21bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21bd8:	3464      	adds	r4, #100	; 0x64
   21bda:	e7df      	b.n	21b9c <__sfp+0x18>
   21bdc:	2104      	movs	r1, #4
   21bde:	4638      	mov	r0, r7
   21be0:	f002 fd9a 	bl	24718 <__sfmoreglue>
   21be4:	4604      	mov	r4, r0
   21be6:	6030      	str	r0, [r6, #0]
   21be8:	2800      	cmp	r0, #0
   21bea:	d1db      	bne.n	21ba4 <__sfp+0x20>
   21bec:	230c      	movs	r3, #12
   21bee:	603b      	str	r3, [r7, #0]
   21bf0:	e7f0      	b.n	21bd4 <__sfp+0x50>
   21bf2:	bf00      	nop
   21bf4:	0002aabc 	.word	0x0002aabc
   21bf8:	ffff0001 	.word	0xffff0001

00021bfc <__smakebuf_r>:
   21bfc:	898b      	ldrh	r3, [r1, #12]
   21bfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
   21c00:	079d      	lsls	r5, r3, #30
   21c02:	4606      	mov	r6, r0
   21c04:	460c      	mov	r4, r1
   21c06:	d507      	bpl.n	21c18 <__smakebuf_r+0x1c>
   21c08:	f104 0347 	add.w	r3, r4, #71	; 0x47
   21c0c:	6023      	str	r3, [r4, #0]
   21c0e:	6123      	str	r3, [r4, #16]
   21c10:	2301      	movs	r3, #1
   21c12:	6163      	str	r3, [r4, #20]
   21c14:	b002      	add	sp, #8
   21c16:	bd70      	pop	{r4, r5, r6, pc}
   21c18:	ab01      	add	r3, sp, #4
   21c1a:	466a      	mov	r2, sp
   21c1c:	f002 fdb1 	bl	24782 <__swhatbuf_r>
   21c20:	9900      	ldr	r1, [sp, #0]
   21c22:	4605      	mov	r5, r0
   21c24:	4630      	mov	r0, r6
   21c26:	f7ff fabd 	bl	211a4 <_malloc_r>
   21c2a:	b948      	cbnz	r0, 21c40 <__smakebuf_r+0x44>
   21c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21c30:	059a      	lsls	r2, r3, #22
   21c32:	d4ef      	bmi.n	21c14 <__smakebuf_r+0x18>
   21c34:	f023 0303 	bic.w	r3, r3, #3
   21c38:	f043 0302 	orr.w	r3, r3, #2
   21c3c:	81a3      	strh	r3, [r4, #12]
   21c3e:	e7e3      	b.n	21c08 <__smakebuf_r+0xc>
   21c40:	4b0d      	ldr	r3, [pc, #52]	; (21c78 <__smakebuf_r+0x7c>)
   21c42:	62b3      	str	r3, [r6, #40]	; 0x28
   21c44:	89a3      	ldrh	r3, [r4, #12]
   21c46:	6020      	str	r0, [r4, #0]
   21c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21c4c:	6120      	str	r0, [r4, #16]
   21c4e:	81a3      	strh	r3, [r4, #12]
   21c50:	9b00      	ldr	r3, [sp, #0]
   21c52:	6163      	str	r3, [r4, #20]
   21c54:	9b01      	ldr	r3, [sp, #4]
   21c56:	b15b      	cbz	r3, 21c70 <__smakebuf_r+0x74>
   21c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   21c5c:	4630      	mov	r0, r6
   21c5e:	f000 f941 	bl	21ee4 <_isatty_r>
   21c62:	b128      	cbz	r0, 21c70 <__smakebuf_r+0x74>
   21c64:	89a3      	ldrh	r3, [r4, #12]
   21c66:	f023 0303 	bic.w	r3, r3, #3
   21c6a:	f043 0301 	orr.w	r3, r3, #1
   21c6e:	81a3      	strh	r3, [r4, #12]
   21c70:	89a0      	ldrh	r0, [r4, #12]
   21c72:	4305      	orrs	r5, r0
   21c74:	81a5      	strh	r5, [r4, #12]
   21c76:	e7cd      	b.n	21c14 <__smakebuf_r+0x18>
   21c78:	00021b19 	.word	0x00021b19

00021c7c <_svfiprintf_r>:
   21c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c80:	4698      	mov	r8, r3
   21c82:	898b      	ldrh	r3, [r1, #12]
   21c84:	b09d      	sub	sp, #116	; 0x74
   21c86:	4607      	mov	r7, r0
   21c88:	061b      	lsls	r3, r3, #24
   21c8a:	460d      	mov	r5, r1
   21c8c:	4614      	mov	r4, r2
   21c8e:	d50e      	bpl.n	21cae <_svfiprintf_r+0x32>
   21c90:	690b      	ldr	r3, [r1, #16]
   21c92:	b963      	cbnz	r3, 21cae <_svfiprintf_r+0x32>
   21c94:	2140      	movs	r1, #64	; 0x40
   21c96:	f7ff fa85 	bl	211a4 <_malloc_r>
   21c9a:	6028      	str	r0, [r5, #0]
   21c9c:	6128      	str	r0, [r5, #16]
   21c9e:	b920      	cbnz	r0, 21caa <_svfiprintf_r+0x2e>
   21ca0:	230c      	movs	r3, #12
   21ca2:	603b      	str	r3, [r7, #0]
   21ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21ca8:	e0d1      	b.n	21e4e <_svfiprintf_r+0x1d2>
   21caa:	2340      	movs	r3, #64	; 0x40
   21cac:	616b      	str	r3, [r5, #20]
   21cae:	2300      	movs	r3, #0
   21cb0:	f8cd 800c 	str.w	r8, [sp, #12]
   21cb4:	f04f 0901 	mov.w	r9, #1
   21cb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 21e68 <_svfiprintf_r+0x1ec>
   21cbc:	9309      	str	r3, [sp, #36]	; 0x24
   21cbe:	2320      	movs	r3, #32
   21cc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   21cc4:	2330      	movs	r3, #48	; 0x30
   21cc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   21cca:	4623      	mov	r3, r4
   21ccc:	469a      	mov	sl, r3
   21cce:	f813 2b01 	ldrb.w	r2, [r3], #1
   21cd2:	b10a      	cbz	r2, 21cd8 <_svfiprintf_r+0x5c>
   21cd4:	2a25      	cmp	r2, #37	; 0x25
   21cd6:	d1f9      	bne.n	21ccc <_svfiprintf_r+0x50>
   21cd8:	ebba 0b04 	subs.w	fp, sl, r4
   21cdc:	d00b      	beq.n	21cf6 <_svfiprintf_r+0x7a>
   21cde:	465b      	mov	r3, fp
   21ce0:	4622      	mov	r2, r4
   21ce2:	4629      	mov	r1, r5
   21ce4:	4638      	mov	r0, r7
   21ce6:	f002 fd81 	bl	247ec <__ssputs_r>
   21cea:	3001      	adds	r0, #1
   21cec:	f000 80aa 	beq.w	21e44 <_svfiprintf_r+0x1c8>
   21cf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   21cf2:	445a      	add	r2, fp
   21cf4:	9209      	str	r2, [sp, #36]	; 0x24
   21cf6:	f89a 3000 	ldrb.w	r3, [sl]
   21cfa:	2b00      	cmp	r3, #0
   21cfc:	f000 80a2 	beq.w	21e44 <_svfiprintf_r+0x1c8>
   21d00:	2300      	movs	r3, #0
   21d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21d06:	f10a 0a01 	add.w	sl, sl, #1
   21d0a:	9304      	str	r3, [sp, #16]
   21d0c:	9307      	str	r3, [sp, #28]
   21d0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   21d12:	931a      	str	r3, [sp, #104]	; 0x68
   21d14:	e9cd 2305 	strd	r2, r3, [sp, #20]
   21d18:	4654      	mov	r4, sl
   21d1a:	2205      	movs	r2, #5
   21d1c:	4852      	ldr	r0, [pc, #328]	; (21e68 <_svfiprintf_r+0x1ec>)
   21d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
   21d22:	f002 fb9c 	bl	2445e <memchr>
   21d26:	9a04      	ldr	r2, [sp, #16]
   21d28:	b9d8      	cbnz	r0, 21d62 <_svfiprintf_r+0xe6>
   21d2a:	06d0      	lsls	r0, r2, #27
   21d2c:	bf44      	itt	mi
   21d2e:	2320      	movmi	r3, #32
   21d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   21d34:	0711      	lsls	r1, r2, #28
   21d36:	bf44      	itt	mi
   21d38:	232b      	movmi	r3, #43	; 0x2b
   21d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   21d3e:	f89a 3000 	ldrb.w	r3, [sl]
   21d42:	2b2a      	cmp	r3, #42	; 0x2a
   21d44:	d015      	beq.n	21d72 <_svfiprintf_r+0xf6>
   21d46:	9a07      	ldr	r2, [sp, #28]
   21d48:	4654      	mov	r4, sl
   21d4a:	2000      	movs	r0, #0
   21d4c:	f04f 0c0a 	mov.w	ip, #10
   21d50:	4621      	mov	r1, r4
   21d52:	f811 3b01 	ldrb.w	r3, [r1], #1
   21d56:	3b30      	subs	r3, #48	; 0x30
   21d58:	2b09      	cmp	r3, #9
   21d5a:	d94e      	bls.n	21dfa <_svfiprintf_r+0x17e>
   21d5c:	b1b0      	cbz	r0, 21d8c <_svfiprintf_r+0x110>
   21d5e:	9207      	str	r2, [sp, #28]
   21d60:	e014      	b.n	21d8c <_svfiprintf_r+0x110>
   21d62:	eba0 0308 	sub.w	r3, r0, r8
   21d66:	46a2      	mov	sl, r4
   21d68:	fa09 f303 	lsl.w	r3, r9, r3
   21d6c:	4313      	orrs	r3, r2
   21d6e:	9304      	str	r3, [sp, #16]
   21d70:	e7d2      	b.n	21d18 <_svfiprintf_r+0x9c>
   21d72:	9b03      	ldr	r3, [sp, #12]
   21d74:	1d19      	adds	r1, r3, #4
   21d76:	681b      	ldr	r3, [r3, #0]
   21d78:	2b00      	cmp	r3, #0
   21d7a:	9103      	str	r1, [sp, #12]
   21d7c:	bfbb      	ittet	lt
   21d7e:	425b      	neglt	r3, r3
   21d80:	f042 0202 	orrlt.w	r2, r2, #2
   21d84:	9307      	strge	r3, [sp, #28]
   21d86:	9307      	strlt	r3, [sp, #28]
   21d88:	bfb8      	it	lt
   21d8a:	9204      	strlt	r2, [sp, #16]
   21d8c:	7823      	ldrb	r3, [r4, #0]
   21d8e:	2b2e      	cmp	r3, #46	; 0x2e
   21d90:	d10c      	bne.n	21dac <_svfiprintf_r+0x130>
   21d92:	7863      	ldrb	r3, [r4, #1]
   21d94:	2b2a      	cmp	r3, #42	; 0x2a
   21d96:	d135      	bne.n	21e04 <_svfiprintf_r+0x188>
   21d98:	9b03      	ldr	r3, [sp, #12]
   21d9a:	3402      	adds	r4, #2
   21d9c:	1d1a      	adds	r2, r3, #4
   21d9e:	681b      	ldr	r3, [r3, #0]
   21da0:	2b00      	cmp	r3, #0
   21da2:	9203      	str	r2, [sp, #12]
   21da4:	bfb8      	it	lt
   21da6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   21daa:	9305      	str	r3, [sp, #20]
   21dac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 21e78 <_svfiprintf_r+0x1fc>
   21db0:	2203      	movs	r2, #3
   21db2:	7821      	ldrb	r1, [r4, #0]
   21db4:	4650      	mov	r0, sl
   21db6:	f002 fb52 	bl	2445e <memchr>
   21dba:	b140      	cbz	r0, 21dce <_svfiprintf_r+0x152>
   21dbc:	2340      	movs	r3, #64	; 0x40
   21dbe:	eba0 000a 	sub.w	r0, r0, sl
   21dc2:	3401      	adds	r4, #1
   21dc4:	fa03 f000 	lsl.w	r0, r3, r0
   21dc8:	9b04      	ldr	r3, [sp, #16]
   21dca:	4303      	orrs	r3, r0
   21dcc:	9304      	str	r3, [sp, #16]
   21dce:	f814 1b01 	ldrb.w	r1, [r4], #1
   21dd2:	2206      	movs	r2, #6
   21dd4:	4825      	ldr	r0, [pc, #148]	; (21e6c <_svfiprintf_r+0x1f0>)
   21dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   21dda:	f002 fb40 	bl	2445e <memchr>
   21dde:	2800      	cmp	r0, #0
   21de0:	d038      	beq.n	21e54 <_svfiprintf_r+0x1d8>
   21de2:	4b23      	ldr	r3, [pc, #140]	; (21e70 <_svfiprintf_r+0x1f4>)
   21de4:	bb1b      	cbnz	r3, 21e2e <_svfiprintf_r+0x1b2>
   21de6:	9b03      	ldr	r3, [sp, #12]
   21de8:	3307      	adds	r3, #7
   21dea:	f023 0307 	bic.w	r3, r3, #7
   21dee:	3308      	adds	r3, #8
   21df0:	9303      	str	r3, [sp, #12]
   21df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   21df4:	4433      	add	r3, r6
   21df6:	9309      	str	r3, [sp, #36]	; 0x24
   21df8:	e767      	b.n	21cca <_svfiprintf_r+0x4e>
   21dfa:	fb0c 3202 	mla	r2, ip, r2, r3
   21dfe:	460c      	mov	r4, r1
   21e00:	2001      	movs	r0, #1
   21e02:	e7a5      	b.n	21d50 <_svfiprintf_r+0xd4>
   21e04:	2300      	movs	r3, #0
   21e06:	3401      	adds	r4, #1
   21e08:	f04f 0c0a 	mov.w	ip, #10
   21e0c:	4619      	mov	r1, r3
   21e0e:	9305      	str	r3, [sp, #20]
   21e10:	4620      	mov	r0, r4
   21e12:	f810 2b01 	ldrb.w	r2, [r0], #1
   21e16:	3a30      	subs	r2, #48	; 0x30
   21e18:	2a09      	cmp	r2, #9
   21e1a:	d903      	bls.n	21e24 <_svfiprintf_r+0x1a8>
   21e1c:	2b00      	cmp	r3, #0
   21e1e:	d0c5      	beq.n	21dac <_svfiprintf_r+0x130>
   21e20:	9105      	str	r1, [sp, #20]
   21e22:	e7c3      	b.n	21dac <_svfiprintf_r+0x130>
   21e24:	fb0c 2101 	mla	r1, ip, r1, r2
   21e28:	4604      	mov	r4, r0
   21e2a:	2301      	movs	r3, #1
   21e2c:	e7f0      	b.n	21e10 <_svfiprintf_r+0x194>
   21e2e:	ab03      	add	r3, sp, #12
   21e30:	462a      	mov	r2, r5
   21e32:	a904      	add	r1, sp, #16
   21e34:	4638      	mov	r0, r7
   21e36:	9300      	str	r3, [sp, #0]
   21e38:	4b0e      	ldr	r3, [pc, #56]	; (21e74 <_svfiprintf_r+0x1f8>)
   21e3a:	e000      	b.n	21e3e <_svfiprintf_r+0x1c2>
   21e3c:	bf00      	nop
   21e3e:	1c42      	adds	r2, r0, #1
   21e40:	4606      	mov	r6, r0
   21e42:	d1d6      	bne.n	21df2 <_svfiprintf_r+0x176>
   21e44:	89ab      	ldrh	r3, [r5, #12]
   21e46:	065b      	lsls	r3, r3, #25
   21e48:	f53f af2c 	bmi.w	21ca4 <_svfiprintf_r+0x28>
   21e4c:	9809      	ldr	r0, [sp, #36]	; 0x24
   21e4e:	b01d      	add	sp, #116	; 0x74
   21e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e54:	ab03      	add	r3, sp, #12
   21e56:	462a      	mov	r2, r5
   21e58:	a904      	add	r1, sp, #16
   21e5a:	4638      	mov	r0, r7
   21e5c:	9300      	str	r3, [sp, #0]
   21e5e:	4b05      	ldr	r3, [pc, #20]	; (21e74 <_svfiprintf_r+0x1f8>)
   21e60:	f7ff fb10 	bl	21484 <_printf_i>
   21e64:	e7eb      	b.n	21e3e <_svfiprintf_r+0x1c2>
   21e66:	bf00      	nop
   21e68:	0002d268 	.word	0x0002d268
   21e6c:	0002d272 	.word	0x0002d272
   21e70:	00000000 	.word	0x00000000
   21e74:	000247ed 	.word	0x000247ed
   21e78:	0002d26e 	.word	0x0002d26e

00021e7c <_write_r>:
   21e7c:	b538      	push	{r3, r4, r5, lr}
   21e7e:	4604      	mov	r4, r0
   21e80:	4d06      	ldr	r5, [pc, #24]	; (21e9c <_write_r+0x20>)
   21e82:	4608      	mov	r0, r1
   21e84:	4611      	mov	r1, r2
   21e86:	2200      	movs	r2, #0
   21e88:	602a      	str	r2, [r5, #0]
   21e8a:	461a      	mov	r2, r3
   21e8c:	f000 fa45 	bl	2231a <_write>
   21e90:	1c43      	adds	r3, r0, #1
   21e92:	d102      	bne.n	21e9a <_write_r+0x1e>
   21e94:	682b      	ldr	r3, [r5, #0]
   21e96:	b103      	cbz	r3, 21e9a <_write_r+0x1e>
   21e98:	6023      	str	r3, [r4, #0]
   21e9a:	bd38      	pop	{r3, r4, r5, pc}
   21e9c:	200282d4 	.word	0x200282d4

00021ea0 <_close_r>:
   21ea0:	b538      	push	{r3, r4, r5, lr}
   21ea2:	2300      	movs	r3, #0
   21ea4:	4d05      	ldr	r5, [pc, #20]	; (21ebc <_close_r+0x1c>)
   21ea6:	4604      	mov	r4, r0
   21ea8:	4608      	mov	r0, r1
   21eaa:	602b      	str	r3, [r5, #0]
   21eac:	f000 fa39 	bl	22322 <_close>
   21eb0:	1c43      	adds	r3, r0, #1
   21eb2:	d102      	bne.n	21eba <_close_r+0x1a>
   21eb4:	682b      	ldr	r3, [r5, #0]
   21eb6:	b103      	cbz	r3, 21eba <_close_r+0x1a>
   21eb8:	6023      	str	r3, [r4, #0]
   21eba:	bd38      	pop	{r3, r4, r5, pc}
   21ebc:	200282d4 	.word	0x200282d4

00021ec0 <_fstat_r>:
   21ec0:	b538      	push	{r3, r4, r5, lr}
   21ec2:	2300      	movs	r3, #0
   21ec4:	4d06      	ldr	r5, [pc, #24]	; (21ee0 <_fstat_r+0x20>)
   21ec6:	4604      	mov	r4, r0
   21ec8:	4608      	mov	r0, r1
   21eca:	4611      	mov	r1, r2
   21ecc:	602b      	str	r3, [r5, #0]
   21ece:	f000 fa33 	bl	22338 <_fstat>
   21ed2:	1c43      	adds	r3, r0, #1
   21ed4:	d102      	bne.n	21edc <_fstat_r+0x1c>
   21ed6:	682b      	ldr	r3, [r5, #0]
   21ed8:	b103      	cbz	r3, 21edc <_fstat_r+0x1c>
   21eda:	6023      	str	r3, [r4, #0]
   21edc:	bd38      	pop	{r3, r4, r5, pc}
   21ede:	bf00      	nop
   21ee0:	200282d4 	.word	0x200282d4

00021ee4 <_isatty_r>:
   21ee4:	b538      	push	{r3, r4, r5, lr}
   21ee6:	2300      	movs	r3, #0
   21ee8:	4d05      	ldr	r5, [pc, #20]	; (21f00 <_isatty_r+0x1c>)
   21eea:	4604      	mov	r4, r0
   21eec:	4608      	mov	r0, r1
   21eee:	602b      	str	r3, [r5, #0]
   21ef0:	f000 fa1c 	bl	2232c <_isatty>
   21ef4:	1c43      	adds	r3, r0, #1
   21ef6:	d102      	bne.n	21efe <_isatty_r+0x1a>
   21ef8:	682b      	ldr	r3, [r5, #0]
   21efa:	b103      	cbz	r3, 21efe <_isatty_r+0x1a>
   21efc:	6023      	str	r3, [r4, #0]
   21efe:	bd38      	pop	{r3, r4, r5, pc}
   21f00:	200282d4 	.word	0x200282d4

00021f04 <_lseek_r>:
   21f04:	b538      	push	{r3, r4, r5, lr}
   21f06:	4604      	mov	r4, r0
   21f08:	4d06      	ldr	r5, [pc, #24]	; (21f24 <_lseek_r+0x20>)
   21f0a:	4608      	mov	r0, r1
   21f0c:	4611      	mov	r1, r2
   21f0e:	2200      	movs	r2, #0
   21f10:	602a      	str	r2, [r5, #0]
   21f12:	461a      	mov	r2, r3
   21f14:	f000 fa08 	bl	22328 <_lseek>
   21f18:	1c43      	adds	r3, r0, #1
   21f1a:	d102      	bne.n	21f22 <_lseek_r+0x1e>
   21f1c:	682b      	ldr	r3, [r5, #0]
   21f1e:	b103      	cbz	r3, 21f22 <_lseek_r+0x1e>
   21f20:	6023      	str	r3, [r4, #0]
   21f22:	bd38      	pop	{r3, r4, r5, pc}
   21f24:	200282d4 	.word	0x200282d4

00021f28 <_read_r>:
   21f28:	b538      	push	{r3, r4, r5, lr}
   21f2a:	4604      	mov	r4, r0
   21f2c:	4d06      	ldr	r5, [pc, #24]	; (21f48 <_read_r+0x20>)
   21f2e:	4608      	mov	r0, r1
   21f30:	4611      	mov	r1, r2
   21f32:	2200      	movs	r2, #0
   21f34:	602a      	str	r2, [r5, #0]
   21f36:	461a      	mov	r2, r3
   21f38:	f000 f9eb 	bl	22312 <_read>
   21f3c:	1c43      	adds	r3, r0, #1
   21f3e:	d102      	bne.n	21f46 <_read_r+0x1e>
   21f40:	682b      	ldr	r3, [r5, #0]
   21f42:	b103      	cbz	r3, 21f46 <_read_r+0x1e>
   21f44:	6023      	str	r3, [r4, #0]
   21f46:	bd38      	pop	{r3, r4, r5, pc}
   21f48:	200282d4 	.word	0x200282d4

00021f4c <_ZN15FeatureProviderC1EiPa>:
      is_first_run_(true) {
   21f4c:	2301      	movs	r3, #1
   21f4e:	7203      	strb	r3, [r0, #8]
  for (int n = 0; n < feature_size_; ++n) {
   21f50:	2300      	movs	r3, #0
      is_first_run_(true) {
   21f52:	e9c0 1200 	strd	r1, r2, [r0]
    feature_data_[n] = 0;
   21f56:	4619      	mov	r1, r3
  for (int n = 0; n < feature_size_; ++n) {
   21f58:	6802      	ldr	r2, [r0, #0]
   21f5a:	429a      	cmp	r2, r3
   21f5c:	dd03      	ble.n	21f66 <_ZN15FeatureProviderC1EiPa+0x1a>
    feature_data_[n] = 0;
   21f5e:	6842      	ldr	r2, [r0, #4]
   21f60:	54d1      	strb	r1, [r2, r3]
  for (int n = 0; n < feature_size_; ++n) {
   21f62:	3301      	adds	r3, #1
   21f64:	e7f8      	b.n	21f58 <_ZN15FeatureProviderC1EiPa+0xc>
}
   21f66:	4770      	bx	lr

00021f68 <_ZN15FeatureProviderD1Ev>:
FeatureProvider::~FeatureProvider() {}
   21f68:	4770      	bx	lr

00021f6a <main>:

// This is the default main used on systems that have the standard C entry
// point. Other devices (for example FreeRTOS or ESP32) that have different
// requirements for entry code (like an app_main function) should specialize
// this main.cc file in a target-specific subfolder.
int main(int argc, char* argv[]) {
   21f6a:	b508      	push	{r3, lr}
  setup();
   21f6c:	f7f5 fdaa 	bl	17ac4 <setup>
  while (true) {
    loop();
   21f70:	f7f5 fce8 	bl	17944 <loop>
  while (true) {
   21f74:	e7fc      	b.n	21f70 <main+0x6>

00021f76 <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
   21f76:	4770      	bx	lr

00021f78 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
                                   int version) const final {
    return FindOp(op);
   21f78:	6803      	ldr	r3, [r0, #0]
   21f7a:	691b      	ldr	r3, [r3, #16]
   21f7c:	4718      	bx	r3

00021f7e <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:
  }

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
    return FindOp(op);
   21f7e:	6803      	ldr	r3, [r0, #0]
   21f80:	695b      	ldr	r3, [r3, #20]
   21f82:	4718      	bx	r3

00021f84 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   21f84:	2920      	cmp	r1, #32
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
   21f86:	b570      	push	{r4, r5, r6, lr}
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   21f88:	d00f      	beq.n	21faa <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x26>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   21f8a:	2300      	movs	r3, #0
   21f8c:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
      if (registration.builtin_code == op) {
   21f90:	f100 0518 	add.w	r5, r0, #24
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   21f94:	429c      	cmp	r4, r3
   21f96:	d008      	beq.n	21faa <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x26>
   21f98:	015a      	lsls	r2, r3, #5
      if (registration.builtin_code == op) {
   21f9a:	58ae      	ldr	r6, [r5, r2]
   21f9c:	428e      	cmp	r6, r1
   21f9e:	d102      	bne.n	21fa6 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x22>
      const TfLiteRegistration& registration = registrations_[i];
   21fa0:	3204      	adds	r2, #4
   21fa2:	4410      	add	r0, r2
  }
   21fa4:	bd70      	pop	{r4, r5, r6, pc}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   21fa6:	3301      	adds	r3, #1
   21fa8:	e7f4      	b.n	21f94 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x10>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   21faa:	2000      	movs	r0, #0
   21fac:	e7fa      	b.n	21fa4 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpENS_15BuiltinOperatorE+0x20>

00021fae <_ZN6tflite22MicroMutableOpResolverILj4EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
   21fae:	4770      	bx	lr

00021fb0 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE>:
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   21fb0:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
   21fb4:	b538      	push	{r3, r4, r5, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   21fb6:	2a04      	cmp	r2, #4
   21fb8:	d80d      	bhi.n	21fd6 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x26>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   21fba:	2300      	movs	r3, #0
   21fbc:	f100 0488 	add.w	r4, r0, #136	; 0x88
   21fc0:	429a      	cmp	r2, r3
   21fc2:	d00c      	beq.n	21fde <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x2e>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
   21fc4:	f814 5b01 	ldrb.w	r5, [r4], #1
   21fc8:	428d      	cmp	r5, r1
   21fca:	d106      	bne.n	21fda <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
   21fcc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   21fd0:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
  }
   21fd4:	bd38      	pop	{r3, r4, r5, pc}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   21fd6:	f002 fa3b 	bl	24450 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   21fda:	3301      	adds	r3, #1
   21fdc:	e7f0      	b.n	21fc0 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x10>
    return nullptr;
   21fde:	2000      	movs	r0, #0
   21fe0:	e7f8      	b.n	21fd4 <_ZNK6tflite22MicroMutableOpResolverILj4EE15GetOpDataParserENS_15BuiltinOperatorE+0x24>

00021fe2 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
   21fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21fe4:	4604      	mov	r4, r0
   21fe6:	460f      	mov	r7, r1
   21fe8:	4606      	mov	r6, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   21fea:	2500      	movs	r5, #0
   21fec:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   21ff0:	42ab      	cmp	r3, r5
   21ff2:	d90f      	bls.n	22014 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x32>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   21ff4:	69b3      	ldr	r3, [r6, #24]
   21ff6:	2b20      	cmp	r3, #32
   21ff8:	d002      	beq.n	22000 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x1e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   21ffa:	3501      	adds	r5, #1
   21ffc:	3620      	adds	r6, #32
   21ffe:	e7f5      	b.n	21fec <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0xa>
          (strcmp(registration.custom_name, op) == 0)) {
   22000:	4639      	mov	r1, r7
   22002:	69f0      	ldr	r0, [r6, #28]
   22004:	f7f3 ff2e 	bl	15e64 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   22008:	2800      	cmp	r0, #0
   2200a:	d1f6      	bne.n	21ffa <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x18>
      const TfLiteRegistration& registration = registrations_[i];
   2200c:	eb04 1045 	add.w	r0, r4, r5, lsl #5
   22010:	3004      	adds	r0, #4
  }
   22012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return nullptr;
   22014:	2000      	movs	r0, #0
   22016:	e7fc      	b.n	22012 <_ZNK6tflite22MicroMutableOpResolverILj4EE6FindOpEPKc+0x30>

00022018 <_ZN6tflite22MicroMutableOpResolverILj4EED0Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
   22018:	b510      	push	{r4, lr}
   2201a:	4604      	mov	r4, r0
   2201c:	f001 fda3 	bl	23b66 <_ZdlPv>
   22020:	4620      	mov	r0, r4
   22022:	bd10      	pop	{r4, pc}

00022024 <_ZN6tflite18MicroErrorReporterD0Ev>:
   22024:	b510      	push	{r4, lr}
   22026:	4604      	mov	r4, r0
   22028:	f001 fd9d 	bl	23b66 <_ZdlPv>
   2202c:	4620      	mov	r0, r4
   2202e:	bd10      	pop	{r4, pc}

00022030 <_ZN20PreviousResultsQueue6ResultC1Ev>:
    Result() : time_(0), scores() {}
   22030:	2200      	movs	r2, #0
   22032:	e9c0 2200 	strd	r2, r2, [r0]
   22036:	4770      	bx	lr

00022038 <arch_printk_char_out>:
}
   22038:	2000      	movs	r0, #0
   2203a:	4770      	bx	lr

0002203c <print_err>:
{
   2203c:	b570      	push	{r4, r5, r6, lr}
   2203e:	460d      	mov	r5, r1
   22040:	4604      	mov	r4, r0
	out('E', ctx);
   22042:	2045      	movs	r0, #69	; 0x45
   22044:	47a0      	blx	r4
	out('R', ctx);
   22046:	4629      	mov	r1, r5
   22048:	2052      	movs	r0, #82	; 0x52
   2204a:	47a0      	blx	r4
	out('R', ctx);
   2204c:	4629      	mov	r1, r5
   2204e:	4623      	mov	r3, r4
}
   22050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   22054:	2052      	movs	r0, #82	; 0x52
   22056:	4718      	bx	r3

00022058 <printk>:
{
   22058:	b40f      	push	{r0, r1, r2, r3}
   2205a:	b507      	push	{r0, r1, r2, lr}
   2205c:	a904      	add	r1, sp, #16
   2205e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   22062:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   22064:	f7f6 fa16 	bl	18494 <vprintk>
}
   22068:	b003      	add	sp, #12
   2206a:	f85d eb04 	ldr.w	lr, [sp], #4
   2206e:	b004      	add	sp, #16
   22070:	4770      	bx	lr

00022072 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   22072:	b508      	push	{r3, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   22074:	f7f8 f9b4 	bl	1a3e0 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   22078:	2000      	movs	r0, #0
   2207a:	bd08      	pop	{r3, pc}

0002207c <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   2207c:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   2207e:	f7f8 f9cf 	bl	1a420 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   22082:	f110 0f0b 	cmn.w	r0, #11
   22086:	d005      	beq.n	22094 <sys_sem_take+0x18>
   22088:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   2208c:	bf08      	it	eq
   2208e:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   22092:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   22094:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   22098:	e7fb      	b.n	22092 <sys_sem_take+0x16>

0002209a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2209a:	4604      	mov	r4, r0
   2209c:	b508      	push	{r3, lr}
   2209e:	4608      	mov	r0, r1
   220a0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   220a2:	461a      	mov	r2, r3
   220a4:	47a0      	blx	r4
	return z_impl_k_current_get();
   220a6:	f7f8 f995 	bl	1a3d4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   220aa:	f7f6 fe51 	bl	18d50 <z_impl_k_thread_abort>

000220ae <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   220ae:	6803      	ldr	r3, [r0, #0]
   220b0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   220b4:	6883      	ldr	r3, [r0, #8]
   220b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   220ba:	bf2c      	ite	cs
   220bc:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   220c0:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   220c4:	4770      	bx	lr

000220c6 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   220c6:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   220c8:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   220ca:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   220cc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   220d0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   220d4:	bf2c      	ite	cs
   220d6:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   220da:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   220de:	bd10      	pop	{r4, pc}

000220e0 <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   220e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   220e4:	4604      	mov	r4, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   220e6:	2200      	movs	r2, #0
   220e8:	460d      	mov	r5, r1
   220ea:	f7ff ffe0 	bl	220ae <chunk_field>
   220ee:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   220f0:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   220f2:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   220f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   220f8:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   220fc:	bf34      	ite	cc
   220fe:	2000      	movcc	r0, #0
   22100:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   22102:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   22104:	f1c0 001f 	rsb	r0, r0, #31
   22108:	1a80      	subs	r0, r0, r2
   2210a:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   2210e:	684a      	ldr	r2, [r1, #4]
   22110:	1c56      	adds	r6, r2, #1
   22112:	604e      	str	r6, [r1, #4]
   22114:	b9a2      	cbnz	r2, 22140 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   22116:	2201      	movs	r2, #1
   22118:	fa02 f100 	lsl.w	r1, r2, r0
   2211c:	6962      	ldr	r2, [r4, #20]
   2211e:	430a      	orrs	r2, r1
   22120:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   22122:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   22124:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   22128:	2202      	movs	r2, #2
   2212a:	462b      	mov	r3, r5
   2212c:	4620      	mov	r0, r4
   2212e:	f7ff ffca 	bl	220c6 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   22132:	2203      	movs	r2, #3
   22134:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   22136:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   22138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   2213c:	f7ff bfc3 	b.w	220c6 <chunk_set>
		chunkid_t second = h->buckets[b].next;
   22140:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   22144:	2202      	movs	r2, #2
   22146:	4639      	mov	r1, r7
   22148:	4620      	mov	r0, r4
   2214a:	f7ff ffb0 	bl	220ae <chunk_field>
   2214e:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
   22150:	4603      	mov	r3, r0
   22152:	2202      	movs	r2, #2
   22154:	4629      	mov	r1, r5
   22156:	4620      	mov	r0, r4
   22158:	f7ff ffb5 	bl	220c6 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   2215c:	463b      	mov	r3, r7
   2215e:	2203      	movs	r2, #3
   22160:	4629      	mov	r1, r5
   22162:	4620      	mov	r0, r4
   22164:	f7ff ffaf 	bl	220c6 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   22168:	2203      	movs	r2, #3
   2216a:	4631      	mov	r1, r6
   2216c:	462b      	mov	r3, r5
   2216e:	4620      	mov	r0, r4
   22170:	f7ff ffa9 	bl	220c6 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   22174:	2202      	movs	r2, #2
   22176:	4639      	mov	r1, r7
   22178:	e7dd      	b.n	22136 <free_list_add+0x56>

0002217a <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   2217a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   2217c:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   2217e:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   22182:	1dcc      	adds	r4, r1, #7
   22184:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   22188:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   2218c:	1b1b      	subs	r3, r3, r4
   2218e:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   22190:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   22194:	bf2c      	ite	cs
   22196:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   2219a:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
   2219c:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
   2219e:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   221a0:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   221a2:	60e1      	str	r1, [r4, #12]
   221a4:	bf94      	ite	ls
   221a6:	2100      	movls	r1, #0
   221a8:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   221aa:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   221ae:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   221b0:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   221b2:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   221b6:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   221ba:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   221bc:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   221c0:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   221c4:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   221c6:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   221c8:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   221ca:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   221cc:	68a2      	ldr	r2, [r4, #8]
   221ce:	42ba      	cmp	r2, r7
   221d0:	bf94      	ite	ls
   221d2:	2200      	movls	r2, #0
   221d4:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   221d6:	f1c2 021f 	rsb	r2, r2, #31
   221da:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   221dc:	4290      	cmp	r0, r2
   221de:	dd0a      	ble.n	221f6 <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   221e0:	4620      	mov	r0, r4
   221e2:	1a5b      	subs	r3, r3, r1
   221e4:	2200      	movs	r2, #0
   221e6:	f7ff ff6e 	bl	220c6 <chunk_set>
	free_list_add(h, h->chunk0);
   221ea:	4620      	mov	r0, r4
   221ec:	6921      	ldr	r1, [r4, #16]
}
   221ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   221f2:	f7ff bf75 	b.w	220e0 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   221f6:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   221fa:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   221fc:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   22200:	e7e4      	b.n	221cc <sys_heap_init+0x52>

00022202 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   22202:	4770      	bx	lr

00022204 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   22204:	f7f7 bbd6 	b.w	199b4 <SystemInit>

00022208 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   22208:	2000      	movs	r0, #0
   2220a:	4770      	bx	lr

0002220c <get_status>:
	if (data->started) {
   2220c:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
   2220e:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
   22210:	b2c9      	uxtb	r1, r1
	if (data->started) {
   22212:	fb02 3101 	mla	r1, r2, r1, r3
   22216:	7a4b      	ldrb	r3, [r1, #9]
   22218:	b923      	cbnz	r3, 22224 <get_status+0x18>
	if (data->ref > 0) {
   2221a:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   2221c:	fab0 f080 	clz	r0, r0
   22220:	0940      	lsrs	r0, r0, #5
   22222:	4770      	bx	lr
   22224:	2002      	movs	r0, #2
}
   22226:	4770      	bx	lr

00022228 <clock_stop>:
{
   22228:	b570      	push	{r4, r5, r6, lr}
   2222a:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
   2222c:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
   2222e:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
   22230:	f04f 0320 	mov.w	r3, #32
   22234:	f3ef 8611 	mrs	r6, BASEPRI
   22238:	f383 8811 	msr	BASEPRI, r3
   2223c:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   22240:	230c      	movs	r3, #12
   22242:	434b      	muls	r3, r1
   22244:	18ea      	adds	r2, r5, r3
   22246:	7a10      	ldrb	r0, [r2, #8]
   22248:	b1a0      	cbz	r0, 22274 <clock_stop+0x4c>
	data->ref--;
   2224a:	3801      	subs	r0, #1
   2224c:	b2c0      	uxtb	r0, r0
   2224e:	7210      	strb	r0, [r2, #8]
	if (data->ref == 0) {
   22250:	b998      	cbnz	r0, 2227a <clock_stop+0x52>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   22252:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	list->head = NULL;
   22256:	50e8      	str	r0, [r5, r3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22258:	78cb      	ldrb	r3, [r1, #3]
   2225a:	2101      	movs	r1, #1
   2225c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22260:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
	list->tail = NULL;
   22264:	6050      	str	r0, [r2, #4]
   22266:	6019      	str	r1, [r3, #0]
		data->started = false;
   22268:	7250      	strb	r0, [r2, #9]
	__asm__ volatile(
   2226a:	f386 8811 	msr	BASEPRI, r6
   2226e:	f3bf 8f6f 	isb	sy
}
   22272:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   22274:	f06f 0077 	mvn.w	r0, #119	; 0x77
   22278:	e7f7      	b.n	2226a <clock_stop+0x42>
	int err = 0;
   2227a:	2000      	movs	r0, #0
   2227c:	e7f5      	b.n	2226a <clock_stop+0x42>

0002227e <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   2227e:	2200      	movs	r2, #0
   22280:	f7f6 b978 	b.w	18574 <clock_async_start>

00022284 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   22284:	4770      	bx	lr

00022286 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   22286:	4770      	bx	lr

00022288 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   22288:	2100      	movs	r1, #0
   2228a:	2001      	movs	r0, #1
   2228c:	f000 b800 	b.w	22290 <z_arm_fatal_error>

00022290 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   22290:	f000 b96c 	b.w	2256c <z_fatal_error>

00022294 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   22294:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   22296:	6800      	ldr	r0, [r0, #0]
   22298:	f000 b968 	b.w	2256c <z_fatal_error>

0002229c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2229c:	b508      	push	{r3, lr}
	handler();
   2229e:	f7f6 fbd7 	bl	18a50 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   222a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   222a6:	f7f6 bd27 	b.w	18cf8 <z_arm_exc_exit>

000222aa <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   222aa:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   222ac:	4601      	mov	r1, r0
   222ae:	4618      	mov	r0, r3
   222b0:	f7ff bfaa 	b.w	22208 <__cxa_atexit>

000222b4 <mpu_configure_region>:
{
   222b4:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   222b6:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
   222b8:	680c      	ldr	r4, [r1, #0]
{
   222ba:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
   222bc:	890a      	ldrh	r2, [r1, #8]
   222be:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   222c0:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   222c2:	3b01      	subs	r3, #1
   222c4:	f024 041f 	bic.w	r4, r4, #31
   222c8:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
   222ca:	f002 021f 	and.w	r2, r2, #31
   222ce:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   222d2:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   222d6:	280f      	cmp	r0, #15
   222d8:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
   222da:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   222de:	9303      	str	r3, [sp, #12]
   222e0:	d805      	bhi.n	222ee <mpu_configure_region+0x3a>
	region_init(index, region_conf);
   222e2:	4669      	mov	r1, sp
   222e4:	f7f6 fd84 	bl	18df0 <region_init>
}
   222e8:	4620      	mov	r0, r4
   222ea:	b005      	add	sp, #20
   222ec:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   222ee:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
   222f2:	e7f9      	b.n	222e8 <mpu_configure_region+0x34>

000222f4 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   222f4:	e840 f000 	tt	r0, r0
   222f8:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   222fa:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   222fe:	bf14      	ite	ne
   22300:	4618      	movne	r0, r3
   22302:	f06f 0015 	mvneq.w	r0, #21
   22306:	4770      	bx	lr

00022308 <_stdout_hook_default>:
}
   22308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2230c:	4770      	bx	lr

0002230e <_stdin_hook_default>:
}
   2230e:	2000      	movs	r0, #0
   22310:	4770      	bx	lr

00022312 <_read>:
{
   22312:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   22314:	4611      	mov	r1, r2
   22316:	f7f6 bebf 	b.w	19098 <z_impl_zephyr_read_stdin>

0002231a <_write>:
{
   2231a:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   2231c:	4611      	mov	r1, r2
   2231e:	f7f6 becf 	b.w	190c0 <z_impl_zephyr_write_stdout>

00022322 <_close>:
   22322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22326:	4770      	bx	lr

00022328 <_lseek>:
}
   22328:	2000      	movs	r0, #0
   2232a:	4770      	bx	lr

0002232c <_isatty>:
}
   2232c:	2001      	movs	r0, #1
   2232e:	4770      	bx	lr

00022330 <_kill>:
}
   22330:	2000      	movs	r0, #0
   22332:	4770      	bx	lr

00022334 <_getpid>:
}
   22334:	2000      	movs	r0, #0
   22336:	4770      	bx	lr

00022338 <_fstat>:
	st->st_mode = S_IFCHR;
   22338:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   2233c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   2233e:	604b      	str	r3, [r1, #4]
}
   22340:	4770      	bx	lr

00022342 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   22342:	f7f7 bc55 	b.w	19bf0 <z_impl_z_errno>

00022346 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22346:	6843      	ldr	r3, [r0, #4]
}
   22348:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2234a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2234c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   2234e:	600b      	str	r3, [r1, #0]
}
   22350:	4770      	bx	lr

00022352 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22352:	6843      	ldr	r3, [r0, #4]
   22354:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   22356:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   22358:	4042      	eors	r2, r0
   2235a:	400a      	ands	r2, r1
   2235c:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2235e:	605a      	str	r2, [r3, #4]
}
   22360:	2000      	movs	r0, #0
   22362:	4770      	bx	lr

00022364 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22364:	6843      	ldr	r3, [r0, #4]
}
   22366:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22368:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   2236a:	6099      	str	r1, [r3, #8]
}
   2236c:	4770      	bx	lr

0002236e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2236e:	6843      	ldr	r3, [r0, #4]
}
   22370:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22372:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   22374:	60d9      	str	r1, [r3, #12]
}
   22376:	4770      	bx	lr

00022378 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   22378:	6843      	ldr	r3, [r0, #4]
}
   2237a:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2237c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2237e:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   22380:	4059      	eors	r1, r3
    p_reg->OUT = value;
   22382:	6051      	str	r1, [r2, #4]
}
   22384:	4770      	bx	lr

00022386 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   22386:	68c3      	ldr	r3, [r0, #12]
{
   22388:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   2238a:	6858      	ldr	r0, [r3, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   2238c:	b158      	cbz	r0, 223a6 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2238e:	2400      	movs	r4, #0
   22390:	4281      	cmp	r1, r0
   22392:	d113      	bne.n	223bc <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   22394:	6808      	ldr	r0, [r1, #0]
   22396:	b95c      	cbnz	r4, 223b0 <gpio_nrfx_manage_callback+0x2a>
   22398:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   2239a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2239c:	42a1      	cmp	r1, r4
   2239e:	d100      	bne.n	223a2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   223a0:	6098      	str	r0, [r3, #8]
	parent->next = child;
   223a2:	2000      	movs	r0, #0
   223a4:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   223a6:	b972      	cbnz	r2, 223c6 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   223a8:	2000      	movs	r0, #0
}
   223aa:	bd30      	pop	{r4, r5, pc}
   223ac:	4628      	mov	r0, r5
   223ae:	e7ef      	b.n	22390 <gpio_nrfx_manage_callback+0xa>
   223b0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   223b2:	6898      	ldr	r0, [r3, #8]
   223b4:	4281      	cmp	r1, r0
	list->tail = node;
   223b6:	bf08      	it	eq
   223b8:	609c      	streq	r4, [r3, #8]
}
   223ba:	e7f2      	b.n	223a2 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   223bc:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   223be:	4604      	mov	r4, r0
   223c0:	2d00      	cmp	r5, #0
   223c2:	d1f3      	bne.n	223ac <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   223c4:	b13a      	cbz	r2, 223d6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   223c6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   223c8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   223ca:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   223cc:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   223ce:	2800      	cmp	r0, #0
   223d0:	d1ea      	bne.n	223a8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   223d2:	6099      	str	r1, [r3, #8]
}
   223d4:	e7e9      	b.n	223aa <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   223d6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   223da:	e7e6      	b.n	223aa <gpio_nrfx_manage_callback+0x24>

000223dc <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   223dc:	2201      	movs	r2, #1
{
   223de:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   223e0:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   223e2:	408a      	lsls	r2, r1
   223e4:	6923      	ldr	r3, [r4, #16]
   223e6:	ea23 0302 	bic.w	r3, r3, r2
   223ea:	6123      	str	r3, [r4, #16]
}
   223ec:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   223f0:	f7f6 bf1c 	b.w	1922c <gpiote_pin_int_cfg>

000223f4 <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   223f4:	2201      	movs	r2, #1
{
   223f6:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   223f8:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   223fa:	408a      	lsls	r2, r1
   223fc:	6923      	ldr	r3, [r4, #16]
   223fe:	4313      	orrs	r3, r2
   22400:	6123      	str	r3, [r4, #16]
}
   22402:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   22406:	f7f6 bf11 	b.w	1922c <gpiote_pin_int_cfg>

0002240a <any_other_channel_is_active>:
{
   2240a:	2300      	movs	r3, #0
   2240c:	b530      	push	{r4, r5, lr}
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   2240e:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
   22410:	b2da      	uxtb	r2, r3
   22412:	4282      	cmp	r2, r0
   22414:	d007      	beq.n	22426 <any_other_channel_is_active+0x1c>
	u16_t pulse_cycle =
   22416:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
   2241a:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   2241e:	b112      	cbz	r2, 22426 <any_other_channel_is_active+0x1c>
   22420:	898d      	ldrh	r5, [r1, #12]
   22422:	4295      	cmp	r5, r2
   22424:	d804      	bhi.n	22430 <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   22426:	3301      	adds	r3, #1
   22428:	2b04      	cmp	r3, #4
   2242a:	d1f1      	bne.n	22410 <any_other_channel_is_active+0x6>
	return false;
   2242c:	2000      	movs	r0, #0
}
   2242e:	bd30      	pop	{r4, r5, pc}
			return true;
   22430:	2001      	movs	r0, #1
   22432:	e7fc      	b.n	2242e <any_other_channel_is_active+0x24>

00022434 <uarte_nrfx_config_get>:
{
   22434:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   22436:	68c2      	ldr	r2, [r0, #12]
   22438:	e892 0003 	ldmia.w	r2, {r0, r1}
   2243c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   22440:	2000      	movs	r0, #0
   22442:	4770      	bx	lr

00022444 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   22444:	6843      	ldr	r3, [r0, #4]
   22446:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   22448:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2244c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   22450:	4770      	bx	lr

00022452 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   22452:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   22454:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   22456:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22458:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2245c:	b138      	cbz	r0, 2246e <uarte_nrfx_poll_in+0x1c>
	*c = data->rx_data;
   2245e:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22460:	2000      	movs	r0, #0
   22462:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22464:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22466:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2246a:	601a      	str	r2, [r3, #0]
	return 0;
   2246c:	4770      	bx	lr
		return -1;
   2246e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   22472:	4770      	bx	lr

00022474 <uarte_nrfx_poll_out>:
{
   22474:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   22478:	6843      	ldr	r3, [r0, #4]
{
   2247a:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   2247e:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   22480:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   22482:	f000 f95f 	bl	22744 <k_is_in_isr>
   22486:	b9c0      	cbnz	r0, 224ba <uarte_nrfx_poll_out+0x46>
   22488:	2564      	movs	r5, #100	; 0x64
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2248a:	f04f 0801 	mov.w	r8, #1
   2248e:	f106 0708 	add.w	r7, r6, #8
   22492:	e8d7 3fef 	ldaex	r3, [r7]
   22496:	2b00      	cmp	r3, #0
   22498:	d103      	bne.n	224a2 <uarte_nrfx_poll_out+0x2e>
   2249a:	e8c7 8fe2 	stlex	r2, r8, [r7]
   2249e:	2a00      	cmp	r2, #0
   224a0:	d1f7      	bne.n	22492 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   224a2:	d00c      	beq.n	224be <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
   224a4:	2021      	movs	r0, #33	; 0x21
   224a6:	2100      	movs	r1, #0
   224a8:	3d01      	subs	r5, #1
   224aa:	f7f7 ff73 	bl	1a394 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   224ae:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   224b2:	d1ee      	bne.n	22492 <uarte_nrfx_poll_out+0x1e>
}
   224b4:	b002      	add	sp, #8
   224b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   224ba:	2301      	movs	r3, #1
   224bc:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   224be:	2300      	movs	r3, #0
   224c0:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   224c4:	f10d 0307 	add.w	r3, sp, #7
   224c8:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   224cc:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   224ce:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   224d2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   224d6:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   224d8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   224dc:	b923      	cbnz	r3, 224e8 <uarte_nrfx_poll_out+0x74>
   224de:	2001      	movs	r0, #1
   224e0:	f000 f80b 	bl	224fa <nrfx_busy_wait>
   224e4:	3d01      	subs	r5, #1
   224e6:	d1f7      	bne.n	224d8 <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   224e8:	2301      	movs	r3, #1
   224ea:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   224ec:	2300      	movs	r3, #0
   224ee:	60b3      	str	r3, [r6, #8]
   224f0:	e7e0      	b.n	224b4 <uarte_nrfx_poll_out+0x40>

000224f2 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
   224f2:	2000      	movs	r0, #0
{
   224f4:	b508      	push	{r3, lr}
	sys_arch_reboot(0);
   224f6:	f7f6 fc0d 	bl	18d14 <sys_arch_reboot>

000224fa <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   224fa:	f000 b929 	b.w	22750 <z_impl_k_busy_wait>

000224fe <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
   224fe:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   22500:	2402      	movs	r4, #2
    p_cb->flags = flags;
   22502:	724a      	strb	r2, [r1, #9]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   22504:	720c      	strb	r4, [r1, #8]
    if (p_cb->handler)
   22506:	6809      	ldr	r1, [r1, #0]
   22508:	b171      	cbz	r1, 22528 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   2250a:	f012 0f04 	tst.w	r2, #4
   2250e:	bf0c      	ite	eq
   22510:	2182      	moveq	r1, #130	; 0x82
   22512:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   22514:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   22516:	bf48      	it	mi
   22518:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   2251c:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   2251e:	bf48      	it	mi
   22520:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   22524:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   22528:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2252a:	f04f 0100 	mov.w	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2252e:	bf58      	it	pl
   22530:	2201      	movpl	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22532:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22536:	bf56      	itet	pl
   22538:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   2253a:	18c0      	addmi	r0, r0, r3
    return 0;
   2253c:	4608      	movpl	r0, r1
}
   2253e:	bd10      	pop	{r4, pc}

00022540 <nrfx_pwm_stop>:
    p_reg->SHORTS = mask;
   22540:	2200      	movs	r2, #0
{
   22542:	b538      	push	{r3, r4, r5, lr}
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   22544:	6803      	ldr	r3, [r0, #0]
{
   22546:	4605      	mov	r5, r0
   22548:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2254c:	2201      	movs	r2, #1
   2254e:	605a      	str	r2, [r3, #4]
   22550:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
   22552:	f7f7 faff 	bl	19b54 <nrfx_pwm_is_stopped>
   22556:	b938      	cbnz	r0, 22568 <nrfx_pwm_stop+0x28>
            if (nrfx_pwm_is_stopped(p_instance))
   22558:	4628      	mov	r0, r5
   2255a:	f7f7 fafb 	bl	19b54 <nrfx_pwm_is_stopped>
   2255e:	b918      	cbnz	r0, 22568 <nrfx_pwm_stop+0x28>
        } while (wait_until_stopped);
   22560:	2c00      	cmp	r4, #0
   22562:	d1f9      	bne.n	22558 <nrfx_pwm_stop+0x18>
}
   22564:	4620      	mov	r0, r4
   22566:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
   22568:	2401      	movs	r4, #1
   2256a:	e7fb      	b.n	22564 <nrfx_pwm_stop+0x24>

0002256c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   2256c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2256e:	4605      	mov	r5, r0
   22570:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   22572:	f04f 0320 	mov.w	r3, #32
   22576:	f3ef 8611 	mrs	r6, BASEPRI
   2257a:	f383 8811 	msr	BASEPRI, r3
   2257e:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   22582:	f7f7 ff27 	bl	1a3d4 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   22586:	9901      	ldr	r1, [sp, #4]
   22588:	4604      	mov	r4, r0
   2258a:	4628      	mov	r0, r5
   2258c:	f7ff ffb1 	bl	224f2 <k_sys_fatal_error_handler>
	__asm__ volatile(
   22590:	f386 8811 	msr	BASEPRI, r6
   22594:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   22598:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   2259a:	b002      	add	sp, #8
   2259c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   225a0:	f7f6 bbd6 	b.w	18d50 <z_impl_k_thread_abort>

000225a4 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   225a4:	f7ff be6f 	b.w	22286 <z_clock_idle_exit>

000225a8 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   225a8:	b921      	cbnz	r1, 225b4 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   225aa:	f3ef 8005 	mrs	r0, IPSR
   225ae:	b908      	cbnz	r0, 225b4 <z_reschedule+0xc>
   225b0:	f7f6 b98e 	b.w	188d0 <arch_swap>
   225b4:	f381 8811 	msr	BASEPRI, r1
   225b8:	f3bf 8f6f 	isb	sy
}
   225bc:	4770      	bx	lr

000225be <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   225be:	4603      	mov	r3, r0
   225c0:	b920      	cbnz	r0, 225cc <z_reschedule_irqlock+0xe>
   225c2:	f3ef 8205 	mrs	r2, IPSR
   225c6:	b90a      	cbnz	r2, 225cc <z_reschedule_irqlock+0xe>
   225c8:	f7f6 b982 	b.w	188d0 <arch_swap>
   225cc:	f383 8811 	msr	BASEPRI, r3
   225d0:	f3bf 8f6f 	isb	sy
}
   225d4:	4770      	bx	lr

000225d6 <z_reschedule_unlocked>:
	__asm__ volatile(
   225d6:	f04f 0320 	mov.w	r3, #32
   225da:	f3ef 8011 	mrs	r0, BASEPRI
   225de:	f383 8811 	msr	BASEPRI, r3
   225e2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   225e6:	f7ff bfea 	b.w	225be <z_reschedule_irqlock>

000225ea <z_priq_dumb_best>:
	return list->head == list;
   225ea:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   225ec:	4298      	cmp	r0, r3
   225ee:	d004      	beq.n	225fa <z_priq_dumb_best+0x10>
	if (n != NULL) {
   225f0:	2b00      	cmp	r3, #0
   225f2:	bf38      	it	cc
   225f4:	2300      	movcc	r3, #0
   225f6:	4618      	mov	r0, r3
   225f8:	4770      	bx	lr
	struct k_thread *thread = NULL;
   225fa:	2000      	movs	r0, #0
}
   225fc:	4770      	bx	lr

000225fe <z_ready_thread>:
{
   225fe:	b510      	push	{r4, lr}
   22600:	f04f 0320 	mov.w	r3, #32
   22604:	f3ef 8411 	mrs	r4, BASEPRI
   22608:	f383 8811 	msr	BASEPRI, r3
   2260c:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   22610:	f7f7 fc86 	bl	19f20 <ready_thread>
	__asm__ volatile(
   22614:	f384 8811 	msr	BASEPRI, r4
   22618:	f3bf 8f6f 	isb	sy
}
   2261c:	bd10      	pop	{r4, pc}

0002261e <z_thread_timeout>:
{
   2261e:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   22620:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   22624:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   22626:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   2262a:	b1c3      	cbz	r3, 2265e <z_thread_timeout+0x40>
	__asm__ volatile(
   2262c:	f04f 0320 	mov.w	r3, #32
   22630:	f3ef 8511 	mrs	r5, BASEPRI
   22634:	f383 8811 	msr	BASEPRI, r3
   22638:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2263c:	f850 0c10 	ldr.w	r0, [r0, #-16]
   22640:	f7f7 fc18 	bl	19e74 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22644:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   22648:	f023 0302 	bic.w	r3, r3, #2
   2264c:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   22650:	2300      	movs	r3, #0
   22652:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   22656:	f385 8811 	msr	BASEPRI, r5
   2265a:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2265e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   22662:	4608      	mov	r0, r1
   22664:	f023 0314 	bic.w	r3, r3, #20
   22668:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
   2266c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   22670:	f7ff bfc5 	b.w	225fe <z_ready_thread>

00022674 <z_remove_thread_from_ready_q>:
{
   22674:	b510      	push	{r4, lr}
	__asm__ volatile(
   22676:	f04f 0320 	mov.w	r3, #32
   2267a:	f3ef 8411 	mrs	r4, BASEPRI
   2267e:	f383 8811 	msr	BASEPRI, r3
   22682:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   22686:	f7f7 fda9 	bl	1a1dc <unready_thread>
	__asm__ volatile(
   2268a:	f384 8811 	msr	BASEPRI, r4
   2268e:	f3bf 8f6f 	isb	sy
}
   22692:	bd10      	pop	{r4, pc}

00022694 <add_to_waitq_locked>:
{
   22694:	b538      	push	{r3, r4, r5, lr}
   22696:	4604      	mov	r4, r0
   22698:	460d      	mov	r5, r1
	unready_thread(thread);
   2269a:	f7f7 fd9f 	bl	1a1dc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2269e:	7b63      	ldrb	r3, [r4, #13]
   226a0:	f043 0302 	orr.w	r3, r3, #2
   226a4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   226a6:	b1c5      	cbz	r5, 226da <add_to_waitq_locked+0x46>
	return list->head == list;
   226a8:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   226aa:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   226ac:	429d      	cmp	r5, r3
   226ae:	bf08      	it	eq
   226b0:	2300      	moveq	r3, #0
   226b2:	2b00      	cmp	r3, #0
   226b4:	bf38      	it	cc
   226b6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   226b8:	b183      	cbz	r3, 226dc <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   226ba:	f994 100e 	ldrsb.w	r1, [r4, #14]
   226be:	f993 200e 	ldrsb.w	r2, [r3, #14]
   226c2:	4291      	cmp	r1, r2
   226c4:	db04      	blt.n	226d0 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   226c6:	686a      	ldr	r2, [r5, #4]
   226c8:	429a      	cmp	r2, r3
   226ca:	d007      	beq.n	226dc <add_to_waitq_locked+0x48>
   226cc:	681b      	ldr	r3, [r3, #0]
   226ce:	e7f3      	b.n	226b8 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   226d0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   226d2:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   226d6:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   226d8:	605c      	str	r4, [r3, #4]
}
   226da:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   226dc:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   226de:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   226e0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   226e2:	686b      	ldr	r3, [r5, #4]
   226e4:	601c      	str	r4, [r3, #0]
	list->tail = node;
   226e6:	606c      	str	r4, [r5, #4]
   226e8:	e7f7      	b.n	226da <add_to_waitq_locked+0x46>

000226ea <z_unpend_first_thread>:
{
   226ea:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   226ec:	f04f 0320 	mov.w	r3, #32
   226f0:	f3ef 8211 	mrs	r2, BASEPRI
   226f4:	f383 8811 	msr	BASEPRI, r3
   226f8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   226fc:	f7ff ff75 	bl	225ea <z_priq_dumb_best>
   22700:	4604      	mov	r4, r0
	__asm__ volatile(
   22702:	f382 8811 	msr	BASEPRI, r2
   22706:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2270a:	b1c8      	cbz	r0, 22740 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   2270c:	f04f 0320 	mov.w	r3, #32
   22710:	f3ef 8511 	mrs	r5, BASEPRI
   22714:	f383 8811 	msr	BASEPRI, r3
   22718:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2271c:	4601      	mov	r1, r0
   2271e:	6880      	ldr	r0, [r0, #8]
   22720:	f7f7 fba8 	bl	19e74 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   22724:	7b63      	ldrb	r3, [r4, #13]
   22726:	f023 0302 	bic.w	r3, r3, #2
   2272a:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   2272c:	2300      	movs	r3, #0
   2272e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   22730:	f385 8811 	msr	BASEPRI, r5
   22734:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   22738:	f104 0018 	add.w	r0, r4, #24
   2273c:	f000 f80a 	bl	22754 <z_abort_timeout>
}
   22740:	4620      	mov	r0, r4
   22742:	bd38      	pop	{r3, r4, r5, pc}

00022744 <k_is_in_isr>:
   22744:	f3ef 8005 	mrs	r0, IPSR
}
   22748:	3800      	subs	r0, #0
   2274a:	bf18      	it	ne
   2274c:	2001      	movne	r0, #1
   2274e:	4770      	bx	lr

00022750 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   22750:	f7f5 bec2 	b.w	184d8 <arch_busy_wait>

00022754 <z_abort_timeout>:
{
   22754:	b510      	push	{r4, lr}
	__asm__ volatile(
   22756:	f04f 0220 	mov.w	r2, #32
   2275a:	f3ef 8411 	mrs	r4, BASEPRI
   2275e:	f382 8811 	msr	BASEPRI, r2
   22762:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   22766:	6803      	ldr	r3, [r0, #0]
   22768:	b13b      	cbz	r3, 2277a <z_abort_timeout+0x26>
			remove_timeout(to);
   2276a:	f7f7 ff15 	bl	1a598 <remove_timeout>
			ret = 0;
   2276e:	2000      	movs	r0, #0
	__asm__ volatile(
   22770:	f384 8811 	msr	BASEPRI, r4
   22774:	f3bf 8f6f 	isb	sy
}
   22778:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2277a:	f06f 0015 	mvn.w	r0, #21
   2277e:	e7f7      	b.n	22770 <z_abort_timeout+0x1c>

00022780 <z_get_next_timeout_expiry>:
{
   22780:	b510      	push	{r4, lr}
	__asm__ volatile(
   22782:	f04f 0320 	mov.w	r3, #32
   22786:	f3ef 8411 	mrs	r4, BASEPRI
   2278a:	f383 8811 	msr	BASEPRI, r3
   2278e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   22792:	f7f7 ff15 	bl	1a5c0 <next_timeout>
	__asm__ volatile(
   22796:	f384 8811 	msr	BASEPRI, r4
   2279a:	f3bf 8f6f 	isb	sy
}
   2279e:	bd10      	pop	{r4, pc}

000227a0 <z_set_timeout_expiry>:
{
   227a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   227a2:	4604      	mov	r4, r0
   227a4:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   227a6:	f04f 0320 	mov.w	r3, #32
   227aa:	f3ef 8511 	mrs	r5, BASEPRI
   227ae:	f383 8811 	msr	BASEPRI, r3
   227b2:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   227b6:	f7f7 ff03 	bl	1a5c0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   227ba:	2801      	cmp	r0, #1
   227bc:	dd05      	ble.n	227ca <z_set_timeout_expiry+0x2a>
   227be:	42a0      	cmp	r0, r4
   227c0:	9901      	ldr	r1, [sp, #4]
   227c2:	dd02      	ble.n	227ca <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   227c4:	4620      	mov	r0, r4
   227c6:	f7f6 f805 	bl	187d4 <z_clock_set_timeout>
	__asm__ volatile(
   227ca:	f385 8811 	msr	BASEPRI, r5
   227ce:	f3bf 8f6f 	isb	sy
}
   227d2:	b003      	add	sp, #12
   227d4:	bd30      	pop	{r4, r5, pc}

000227d6 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   227d6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   227d8:	f7f7 ffdc 	bl	1a794 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   227dc:	bd08      	pop	{r3, pc}

000227de <k_heap_init>:
{
   227de:	b410      	push	{r4}
   227e0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   227e4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   227e8:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   227ec:	f7ff bcc5 	b.w	2217a <sys_heap_init>

000227f0 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   227f0:	4770      	bx	lr

000227f2 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv>:
      ->allocator_->AllocatePersistentBuffer(bytes, ptr);
   227f2:	68c3      	ldr	r3, [r0, #12]
   227f4:	6818      	ldr	r0, [r3, #0]
   227f6:	f7fa baab 	b.w	1cd50 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>

000227fa <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
   227fa:	68c0      	ldr	r0, [r0, #12]
                                                        int* buffer_idx) {
   227fc:	4613      	mov	r3, r2
  return helper->allocator_->RequestScratchBufferInArena(
   227fe:	460a      	mov	r2, r1
   22800:	6881      	ldr	r1, [r0, #8]
   22802:	6800      	ldr	r0, [r0, #0]
   22804:	f7fa baba 	b.w	1cd7c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>

00022808 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:
      ->allocator_->GetScratchBuffer(buffer_idx);
   22808:	68c3      	ldr	r3, [r0, #12]
   2280a:	6818      	ldr	r0, [r3, #0]
   2280c:	f7fa bae8 	b.w	1cde0 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>

00022810 <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:
                                  const char* format, ...) {
   22810:	b40e      	push	{r1, r2, r3}
   22812:	b503      	push	{r0, r1, lr}
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
   22814:	68c3      	ldr	r3, [r0, #12]
                                  const char* format, ...) {
   22816:	aa03      	add	r2, sp, #12
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   22818:	6858      	ldr	r0, [r3, #4]
                                  const char* format, ...) {
   2281a:	f852 1b04 	ldr.w	r1, [r2], #4
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   2281e:	6803      	ldr	r3, [r0, #0]
  va_start(args, format);
   22820:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   22822:	689b      	ldr	r3, [r3, #8]
   22824:	4798      	blx	r3
}
   22826:	b002      	add	sp, #8
   22828:	f85d eb04 	ldr.w	lr, [sp], #4
   2282c:	b003      	add	sp, #12
   2282e:	4770      	bx	lr

00022830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:
    return data_ - ReadScalar<soffset_t>(data_);
   22830:	6803      	ldr	r3, [r0, #0]
   22832:	1ac0      	subs	r0, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   22834:	8803      	ldrh	r3, [r0, #0]
   22836:	428b      	cmp	r3, r1
   22838:	bf8c      	ite	hi
   2283a:	5a40      	ldrhhi	r0, [r0, r1]
   2283c:	2000      	movls	r0, #0
  }
   2283e:	4770      	bx	lr

00022840 <_ZN6tflite13ScopedProfileD1Ev>:
  ~ScopedProfile() {
   22840:	b510      	push	{r4, lr}
   22842:	4604      	mov	r4, r0
    if (profiler_) {
   22844:	6800      	ldr	r0, [r0, #0]
   22846:	b118      	cbz	r0, 22850 <_ZN6tflite13ScopedProfileD1Ev+0x10>
      profiler_->EndEvent(event_handle_);
   22848:	6803      	ldr	r3, [r0, #0]
   2284a:	6861      	ldr	r1, [r4, #4]
   2284c:	691b      	ldr	r3, [r3, #16]
   2284e:	4798      	blx	r3
  }
   22850:	4620      	mov	r0, r4
   22852:	bd10      	pop	{r4, pc}

00022854 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
   22854:	b570      	push	{r4, r5, r6, lr}
   22856:	461d      	mov	r5, r3
      context_helper_(error_reporter_, &allocator_) {
   22858:	2300      	movs	r3, #0
MicroInterpreter::MicroInterpreter(const Model* model,
   2285a:	9e05      	ldr	r6, [sp, #20]
   2285c:	4604      	mov	r4, r0
      context_helper_(error_reporter_, &allocator_) {
   2285e:	e9c0 3100 	strd	r3, r1, [r0]
   22862:	e9c0 2602 	strd	r2, r6, [r0, #8]
   22866:	4619      	mov	r1, r3
   22868:	2250      	movs	r2, #80	; 0x50
   2286a:	3010      	adds	r0, #16
   2286c:	f001 fe3a 	bl	244e4 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
   22870:	4632      	mov	r2, r6
   22872:	9904      	ldr	r1, [sp, #16]
   22874:	4628      	mov	r0, r5
   22876:	f7fa fa4f 	bl	1cd18 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
      context_helper_(error_reporter_, &allocator_) {
   2287a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2287e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
   22882:	68e3      	ldr	r3, [r4, #12]
   22884:	6620      	str	r0, [r4, #96]	; 0x60
      : allocator_(allocator), error_reporter_(error_reporter) {}
   22886:	e9c4 031b 	strd	r0, r3, [r4, #108]	; 0x6c
   2288a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  Init(profiler);
   2288e:	4620      	mov	r0, r4
   22890:	9906      	ldr	r1, [sp, #24]
   22892:	6763      	str	r3, [r4, #116]	; 0x74
   22894:	f7f7 ffd2 	bl	1a83c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
   22898:	4620      	mov	r0, r4
   2289a:	bd70      	pop	{r4, r5, r6, pc}

0002289c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   2289c:	b510      	push	{r4, lr}
   2289e:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   228a0:	f7ff ffc6 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   228a4:	b110      	cbz	r0, 228ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t+0x10>
    auto p = data_ + field_offset;
   228a6:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   228a8:	5820      	ldr	r0, [r4, r0]
   228aa:	4418      	add	r0, r3
  }
   228ac:	bd10      	pop	{r4, pc}

000228ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   228ae:	b510      	push	{r4, lr}
   228b0:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   228b2:	f7ff ffbd 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   228b6:	b110      	cbz	r0, 228be <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x10>
    auto p = data_ + field_offset;
   228b8:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   228ba:	5820      	ldr	r0, [r4, r0]
   228bc:	4418      	add	r0, r3
  }
   228be:	bd10      	pop	{r4, pc}

000228c0 <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
   228c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (node_and_registrations_ != nullptr) {
   228c2:	6803      	ldr	r3, [r0, #0]
MicroInterpreter::~MicroInterpreter() {
   228c4:	4604      	mov	r4, r0
  if (node_and_registrations_ != nullptr) {
   228c6:	b1b3      	cbz	r3, 228f6 <_ZN6tflite16MicroInterpreterD1Ev+0x36>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   228c8:	2500      	movs	r5, #0
      TfLiteNode* node = &(node_and_registrations_[i].node);
   228ca:	2628      	movs	r6, #40	; 0x28
        registration->free(&context_, node->user_data);
   228cc:	f100 0710 	add.w	r7, r0, #16
    return const_cast<Table *>(this)->GetPointer<P>(field);
   228d0:	210a      	movs	r1, #10
   228d2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   228d4:	f7ff ffeb 	bl	228ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   228d8:	6803      	ldr	r3, [r0, #0]
   228da:	42ab      	cmp	r3, r5
   228dc:	d90b      	bls.n	228f6 <_ZN6tflite16MicroInterpreterD1Ev+0x36>
      TfLiteNode* node = &(node_and_registrations_[i].node);
   228de:	6823      	ldr	r3, [r4, #0]
   228e0:	fb06 3305 	mla	r3, r6, r5, r3
      const TfLiteRegistration* registration =
   228e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      if (registration != nullptr && registration->free != nullptr) {
   228e6:	b122      	cbz	r2, 228f2 <_ZN6tflite16MicroInterpreterD1Ev+0x32>
   228e8:	6852      	ldr	r2, [r2, #4]
   228ea:	b112      	cbz	r2, 228f2 <_ZN6tflite16MicroInterpreterD1Ev+0x32>
        registration->free(&context_, node->user_data);
   228ec:	4638      	mov	r0, r7
   228ee:	6919      	ldr	r1, [r3, #16]
   228f0:	4790      	blx	r2
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   228f2:	3501      	adds	r5, #1
   228f4:	e7ec      	b.n	228d0 <_ZN6tflite16MicroInterpreterD1Ev+0x10>
}
   228f6:	4620      	mov	r0, r4
   228f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000228fa <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
   228fa:	b530      	push	{r4, r5, lr}
   228fc:	4603      	mov	r3, r0
  char* current = main;
   228fe:	4604      	mov	r4, r0
   22900:	4620      	mov	r0, r4
  while (*current != 0) {
   22902:	f814 5b01 	ldrb.w	r5, [r4], #1
   22906:	2d00      	cmp	r5, #0
   22908:	d1fa      	bne.n	22900 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x6>
  char* current_end = main + (main_max_length - 1);
   2290a:	3901      	subs	r1, #1
   2290c:	440b      	add	r3, r1
   2290e:	3a01      	subs	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
   22910:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   22914:	b121      	cbz	r1, 22920 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
   22916:	4298      	cmp	r0, r3
   22918:	d202      	bcs.n	22920 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
    *current = *to_append;
   2291a:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*to_append != 0) && (current < current_end)) {
   2291e:	e7f7      	b.n	22910 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x16>
  *current = 0;
   22920:	2300      	movs	r3, #0
   22922:	7003      	strb	r3, [r0, #0]
}
   22924:	bd30      	pop	{r4, r5, pc}

00022926 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
   22926:	b570      	push	{r4, r5, r6, lr}
   22928:	460c      	mov	r4, r1
    int32_t digit = i % base;
   2292a:	fbb0 f6f2 	udiv	r6, r0, r2
   2292e:	fb02 0516 	mls	r5, r2, r6, r0
    if (digit < 10) {
   22932:	b26b      	sxtb	r3, r5
   22934:	2d09      	cmp	r5, #9
    *buffer++ = character;
   22936:	4625      	mov	r5, r4
      character = '0' + digit;
   22938:	bf94      	ite	ls
   2293a:	3330      	addls	r3, #48	; 0x30
      character = 'a' + (digit - 10);
   2293c:	3357      	addhi	r3, #87	; 0x57
   2293e:	b2db      	uxtb	r3, r3
  } while (i > 0);
   22940:	4282      	cmp	r2, r0
    *buffer++ = character;
   22942:	f805 3b01 	strb.w	r3, [r5], #1
  } while (i > 0);
   22946:	d90a      	bls.n	2295e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x38>
  *buffer = 0;
   22948:	2300      	movs	r3, #0
   2294a:	702b      	strb	r3, [r5, #0]
  while (p1 < p2) {
   2294c:	42a1      	cmp	r1, r4
   2294e:	d209      	bcs.n	22964 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x3e>
    char tmp = *p1;
   22950:	780b      	ldrb	r3, [r1, #0]
    *p1++ = *p2;
   22952:	7822      	ldrb	r2, [r4, #0]
   22954:	f801 2b01 	strb.w	r2, [r1], #1
    *p2-- = tmp;
   22958:	f804 3901 	strb.w	r3, [r4], #-1
  while (p1 < p2) {
   2295c:	e7f6      	b.n	2294c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x26>
   2295e:	462c      	mov	r4, r5
    i /= base;
   22960:	4630      	mov	r0, r6
   22962:	e7e2      	b.n	2292a <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x4>
}
   22964:	4628      	mov	r0, r5
   22966:	bd70      	pop	{r4, r5, r6, pc}

00022968 <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   22968:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   2296a:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2296c:	b90b      	cbnz	r3, 22972 <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj+0xa>
   2296e:	f001 fd6f 	bl	24450 <abort>
  void* data = nullptr;
   22972:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   22974:	2128      	movs	r1, #40	; 0x28
  void* data = nullptr;
   22976:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   22978:	aa01      	add	r2, sp, #4
   2297a:	4798      	blx	r3
   2297c:	2801      	cmp	r0, #1
    return nullptr;
   2297e:	bf0c      	ite	eq
   22980:	4620      	moveq	r0, r4
  return data;
   22982:	9801      	ldrne	r0, [sp, #4]
}
   22984:	b002      	add	sp, #8
   22986:	bd10      	pop	{r4, pc}

00022988 <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
    if (size_ > kMaxSmallSize) {
   22988:	6803      	ldr	r3, [r0, #0]
  ~RuntimeShape() {
   2298a:	b510      	push	{r4, lr}
    if (size_ > kMaxSmallSize) {
   2298c:	2b05      	cmp	r3, #5
  ~RuntimeShape() {
   2298e:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
   22990:	dd03      	ble.n	2299a <_ZN6tflite12RuntimeShapeD1Ev+0x12>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
   22992:	6840      	ldr	r0, [r0, #4]
   22994:	b108      	cbz	r0, 2299a <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   22996:	f001 f8e8 	bl	23b6a <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
   2299a:	4620      	mov	r0, r4
   2299c:	bd10      	pop	{r4, pc}

0002299e <_ZNK6tflite12RuntimeShape4DimsEi>:

  inline int32 DimensionsCount() const { return size_; }
  inline int32 Dims(int i) const {
    TFLITE_DCHECK_GE(i, 0);
   2299e:	2900      	cmp	r1, #0
  inline int32 Dims(int i) const {
   229a0:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   229a2:	da01      	bge.n	229a8 <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
   229a4:	f001 fd54 	bl	24450 <abort>
    TFLITE_DCHECK_LT(i, size_);
   229a8:	6803      	ldr	r3, [r0, #0]
   229aa:	428b      	cmp	r3, r1
   229ac:	ddfa      	ble.n	229a4 <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   229ae:	2b05      	cmp	r3, #5
   229b0:	bfcb      	itete	gt
   229b2:	6843      	ldrgt	r3, [r0, #4]
   229b4:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
   229b8:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
   229bc:	6840      	ldrle	r0, [r0, #4]
  }
   229be:	bd08      	pop	{r3, pc}

000229c0 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:

  inline int32* DimsData() {
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  inline const int32* DimsData() const {
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   229c0:	6801      	ldr	r1, [r0, #0]
  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
    int buffer_size = 1;
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
    for (int i = 0; i < size_; i++) {
   229c2:	2200      	movs	r2, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   229c4:	2905      	cmp	r1, #5
   229c6:	bfcc      	ite	gt
   229c8:	6843      	ldrgt	r3, [r0, #4]
   229ca:	1d03      	addle	r3, r0, #4
    int buffer_size = 1;
   229cc:	2001      	movs	r0, #1
  inline int FlatSize() const {
   229ce:	b510      	push	{r4, lr}
    for (int i = 0; i < size_; i++) {
   229d0:	428a      	cmp	r2, r1
   229d2:	da04      	bge.n	229de <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
   229d4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
   229d8:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
   229da:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
   229dc:	e7f8      	b.n	229d0 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
    }
    return buffer_size;
  }
   229de:	bd10      	pop	{r4, pc}

000229e0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   229e0:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   229e2:	6804      	ldr	r4, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   229e4:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   229e6:	2c04      	cmp	r4, #4
   229e8:	d001      	beq.n	229ee <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
   229ea:	f001 fd31 	bl	24450 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   229ee:	2900      	cmp	r1, #0
   229f0:	dbfb      	blt.n	229ea <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   229f2:	6844      	ldr	r4, [r0, #4]
   229f4:	428c      	cmp	r4, r1
   229f6:	ddf8      	ble.n	229ea <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   229f8:	2a00      	cmp	r2, #0
   229fa:	dbf6      	blt.n	229ea <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   229fc:	6884      	ldr	r4, [r0, #8]
   229fe:	4294      	cmp	r4, r2
   22a00:	ddf3      	ble.n	229ea <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   22a02:	2b00      	cmp	r3, #0
   22a04:	dbf1      	blt.n	229ea <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   22a06:	68c6      	ldr	r6, [r0, #12]
   22a08:	429e      	cmp	r6, r3
   22a0a:	ddee      	ble.n	229ea <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   22a0c:	2d00      	cmp	r5, #0
   22a0e:	dbec      	blt.n	229ea <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   22a10:	6900      	ldr	r0, [r0, #16]
   22a12:	42a8      	cmp	r0, r5
   22a14:	dde9      	ble.n	229ea <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   22a16:	fb01 2204 	mla	r2, r1, r4, r2
   22a1a:	fb06 3302 	mla	r3, r6, r2, r3
}
   22a1e:	fb00 5003 	mla	r0, r0, r3, r5
   22a22:	bd70      	pop	{r4, r5, r6, pc}

00022a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
   22a24:	b570      	push	{r4, r5, r6, lr}
   22a26:	4615      	mov	r5, r2
   22a28:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   22a2a:	f7ff ffb8 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
   22a2e:	4631      	mov	r1, r6
   22a30:	4604      	mov	r4, r0
   22a32:	4628      	mov	r0, r5
   22a34:	f7ff ffb3 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
   22a38:	4284      	cmp	r4, r0
   22a3a:	d001      	beq.n	22a40 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
   22a3c:	f001 fd08 	bl	24450 <abort>
  return shape1.Dims(index1);
}
   22a40:	bd70      	pop	{r4, r5, r6, pc}

00022a42 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
   22a42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a46:	4699      	mov	r9, r3
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
   22a48:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int8* output_data) {
   22a4c:	b0a1      	sub	sp, #132	; 0x84
  const int stride_width = params.stride_width;
   22a4e:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
   22a50:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    int8* output_data) {
   22a54:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  const int stride_height = params.stride_height;
   22a58:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_width_factor = params.dilation_width_factor;
   22a5a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int8* output_data) {
   22a5e:	9e2b      	ldr	r6, [sp, #172]	; 0xac
  const int dilation_width_factor = params.dilation_width_factor;
   22a60:	9310      	str	r3, [sp, #64]	; 0x40
  const int dilation_height_factor = params.dilation_height_factor;
   22a62:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    int8* output_data) {
   22a66:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  const int dilation_height_factor = params.dilation_height_factor;
   22a68:	9311      	str	r3, [sp, #68]	; 0x44
  const int pad_width = params.padding_values.width;
   22a6a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   22a6e:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
   22a70:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   22a74:	9314      	str	r3, [sp, #80]	; 0x50
  const int depth_multiplier = params.depth_multiplier;
   22a76:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   22a7a:	9308      	str	r3, [sp, #32]
  const int32 input_offset = params.input_offset;
   22a7c:	6943      	ldr	r3, [r0, #20]
   22a7e:	9315      	str	r3, [sp, #84]	; 0x54
  const int32 output_offset = params.output_offset;
   22a80:	69c3      	ldr	r3, [r0, #28]
   22a82:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
   22a84:	6a83      	ldr	r3, [r0, #40]	; 0x28
   22a86:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32 output_activation_max = params.quantized_activation_max;
   22a88:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22a8a:	930c      	str	r3, [sp, #48]	; 0x30

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   22a8c:	f8d9 3000 	ldr.w	r3, [r9]
   22a90:	2b04      	cmp	r3, #4
   22a92:	d001      	beq.n	22a98 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56>
   22a94:	f001 fcdc 	bl	24450 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   22a98:	6833      	ldr	r3, [r6, #0]
   22a9a:	2b04      	cmp	r3, #4
   22a9c:	d1fa      	bne.n	22a94 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   22a9e:	683b      	ldr	r3, [r7, #0]
   22aa0:	2b04      	cmp	r3, #4
   22aa2:	d1f7      	bne.n	22a94 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   22aa4:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
   22aa8:	4293      	cmp	r3, r2
   22aaa:	dcf3      	bgt.n	22a94 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   22aac:	2300      	movs	r3, #0
   22aae:	463a      	mov	r2, r7
   22ab0:	4619      	mov	r1, r3
   22ab2:	4648      	mov	r0, r9
   22ab4:	f7ff ffb6 	bl	22a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   22ab8:	2303      	movs	r3, #3
   22aba:	463a      	mov	r2, r7
   22abc:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   22abe:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   22ac0:	4630      	mov	r0, r6
   22ac2:	f7ff ffaf 	bl	22a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   22ac6:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   22ac8:	4604      	mov	r4, r0
  const int input_height = input_shape.Dims(1);
   22aca:	4648      	mov	r0, r9
   22acc:	f7ff ff67 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   22ad0:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   22ad2:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
   22ad4:	4648      	mov	r0, r9
   22ad6:	f7ff ff62 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   22ada:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   22adc:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_depth = input_shape.Dims(3);
   22ade:	4648      	mov	r0, r9
   22ae0:	f7ff ff5d 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   22ae4:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   22ae6:	900d      	str	r0, [sp, #52]	; 0x34
  const int filter_height = filter_shape.Dims(1);
   22ae8:	4630      	mov	r0, r6
   22aea:	f7ff ff58 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   22aee:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   22af0:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
   22af2:	4630      	mov	r0, r6
   22af4:	f7ff ff53 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   22af8:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   22afa:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
   22afc:	4638      	mov	r0, r7
   22afe:	f7ff ff4e 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   22b02:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   22b04:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
   22b06:	4638      	mov	r0, r7
   22b08:	f7ff ff49 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   22b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22b0e:	9a08      	ldr	r2, [sp, #32]
  const int output_width = output_shape.Dims(2);
   22b10:	901d      	str	r0, [sp, #116]	; 0x74
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   22b12:	fb03 f502 	mul.w	r5, r3, r2
   22b16:	42a5      	cmp	r5, r4
   22b18:	d1bc      	bne.n	22a94 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   22b1a:	982d      	ldr	r0, [sp, #180]	; 0xb4
   22b1c:	f7ff ff50 	bl	229c0 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   22b20:	42a8      	cmp	r0, r5
   22b22:	d1b7      	bne.n	22a94 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  for (int batch = 0; batch < batches; ++batch) {
   22b24:	f04f 0b00 	mov.w	fp, #0
   22b28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   22b2a:	459b      	cmp	fp, r3
   22b2c:	f280 80a0 	bge.w	22c70 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22e>
   22b30:	9b14      	ldr	r3, [sp, #80]	; 0x50
   22b32:	425b      	negs	r3, r3
   22b34:	930a      	str	r3, [sp, #40]	; 0x28
    for (int out_y = 0; out_y < output_height; ++out_y) {
   22b36:	2300      	movs	r3, #0
   22b38:	9303      	str	r3, [sp, #12]
   22b3a:	9b03      	ldr	r3, [sp, #12]
   22b3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   22b3e:	4293      	cmp	r3, r2
   22b40:	f280 8093 	bge.w	22c6a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
   22b44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   22b46:	425b      	negs	r3, r3
   22b48:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   22b4a:	2300      	movs	r3, #0
   22b4c:	9304      	str	r3, [sp, #16]
   22b4e:	9b04      	ldr	r3, [sp, #16]
   22b50:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   22b52:	4293      	cmp	r3, r2
   22b54:	f280 8081 	bge.w	22c5a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x218>
   22b58:	2300      	movs	r3, #0
   22b5a:	9302      	str	r3, [sp, #8]
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   22b5c:	9305      	str	r3, [sp, #20]
   22b5e:	9b05      	ldr	r3, [sp, #20]
   22b60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   22b62:	4293      	cmp	r3, r2
   22b64:	da71      	bge.n	22c4a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x208>
   22b66:	9c02      	ldr	r4, [sp, #8]
          for (int m = 0; m < depth_multiplier; ++m) {
   22b68:	9b02      	ldr	r3, [sp, #8]
   22b6a:	9a08      	ldr	r2, [sp, #32]
   22b6c:	1ae3      	subs	r3, r4, r3
   22b6e:	4293      	cmp	r3, r2
   22b70:	da63      	bge.n	22c3a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f8>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32 acc = 0;
   22b72:	2500      	movs	r5, #0
            const int output_channel = m + in_channel * depth_multiplier;
   22b74:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   22b78:	9506      	str	r5, [sp, #24]
   22b7a:	9b06      	ldr	r3, [sp, #24]
   22b7c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   22b7e:	4293      	cmp	r3, r2
   22b80:	da38      	bge.n	22bf4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b2>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   22b82:	2300      	movs	r3, #0
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
   22b84:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   22b88:	9307      	str	r3, [sp, #28]
   22b8a:	9b07      	ldr	r3, [sp, #28]
   22b8c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   22b8e:	4293      	cmp	r3, r2
   22b90:	da2a      	bge.n	22be8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a6>
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   22b92:	f1b8 0f00 	cmp.w	r8, #0
   22b96:	db21      	blt.n	22bdc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   22b98:	9b19      	ldr	r3, [sp, #100]	; 0x64
   22b9a:	4543      	cmp	r3, r8
   22b9c:	dd1e      	ble.n	22bdc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   22b9e:	f1ba 0f00 	cmp.w	sl, #0
   22ba2:	db1b      	blt.n	22bdc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   22ba4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   22ba6:	4553      	cmp	r3, sl
   22ba8:	dd18      	ble.n	22bdc <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   22baa:	9b05      	ldr	r3, [sp, #20]
   22bac:	4652      	mov	r2, sl
   22bae:	4659      	mov	r1, fp
   22bb0:	9300      	str	r3, [sp, #0]
   22bb2:	4648      	mov	r0, r9
   22bb4:	4643      	mov	r3, r8
   22bb6:	f7ff ff13 	bl	229e0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val = filter_data[Offset(
   22bba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   22bbe:	9012      	str	r0, [sp, #72]	; 0x48
                  int32 filter_val = filter_data[Offset(
   22bc0:	2100      	movs	r1, #0
   22bc2:	4630      	mov	r0, r6
   22bc4:	9400      	str	r4, [sp, #0]
   22bc6:	f7ff ff0b 	bl	229e0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   22bca:	9a12      	ldr	r2, [sp, #72]	; 0x48
   22bcc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   22bce:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
   22bd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   22bd2:	4413      	add	r3, r2
                      filter_shape, 0, filter_y, filter_x, output_channel)];
   22bd4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   22bd6:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
   22bd8:	fb02 5503 	mla	r5, r2, r3, r5
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   22bdc:	9b07      	ldr	r3, [sp, #28]
   22bde:	3301      	adds	r3, #1
   22be0:	9307      	str	r3, [sp, #28]
   22be2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22be4:	4498      	add	r8, r3
   22be6:	e7d0      	b.n	22b8a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x148>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   22be8:	9b06      	ldr	r3, [sp, #24]
   22bea:	3301      	adds	r3, #1
   22bec:	9306      	str	r3, [sp, #24]
   22bee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22bf0:	449a      	add	sl, r3
   22bf2:	e7c2      	b.n	22b7a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x138>
                }
              }
            }
            if (bias_data) {
   22bf4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   22bf6:	b113      	cbz	r3, 22bfe <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1bc>
              acc += bias_data[output_channel];
   22bf8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   22bfc:	441d      	add	r5, r3
            }
            acc = MultiplyByQuantizedMultiplier(
   22bfe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   22c00:	4628      	mov	r0, r5
   22c02:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   22c06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   22c08:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   22c0c:	f7f8 f8b4 	bl	1ad78 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
   22c10:	9b16      	ldr	r3, [sp, #88]	; 0x58
            acc = std::max(acc, output_activation_min);
            acc = std::min(acc, output_activation_max);
            output_data[Offset(output_shape, batch, out_y, out_x,
   22c12:	9400      	str	r4, [sp, #0]
            acc += output_offset;
   22c14:	18c5      	adds	r5, r0, r3
   22c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            output_data[Offset(output_shape, batch, out_y, out_x,
   22c18:	4659      	mov	r1, fp
   22c1a:	429d      	cmp	r5, r3
   22c1c:	bfb8      	it	lt
   22c1e:	461d      	movlt	r5, r3
   22c20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22c22:	4638      	mov	r0, r7
   22c24:	429d      	cmp	r5, r3
   22c26:	bfa8      	it	ge
   22c28:	461d      	movge	r5, r3
   22c2a:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   22c2e:	f7ff fed7 	bl	229e0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                               output_channel)] = static_cast<int8_t>(acc);
   22c32:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   22c34:	3401      	adds	r4, #1
   22c36:	541d      	strb	r5, [r3, r0]
          for (int m = 0; m < depth_multiplier; ++m) {
   22c38:	e796      	b.n	22b68 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x126>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   22c3a:	9b05      	ldr	r3, [sp, #20]
   22c3c:	9a08      	ldr	r2, [sp, #32]
   22c3e:	3301      	adds	r3, #1
   22c40:	9305      	str	r3, [sp, #20]
   22c42:	9b02      	ldr	r3, [sp, #8]
   22c44:	4413      	add	r3, r2
   22c46:	9302      	str	r3, [sp, #8]
   22c48:	e789      	b.n	22b5e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   22c4a:	9b04      	ldr	r3, [sp, #16]
   22c4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   22c4e:	3301      	adds	r3, #1
   22c50:	9304      	str	r3, [sp, #16]
   22c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22c54:	4413      	add	r3, r2
   22c56:	9309      	str	r3, [sp, #36]	; 0x24
   22c58:	e779      	b.n	22b4e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   22c5a:	9b03      	ldr	r3, [sp, #12]
   22c5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   22c5e:	3301      	adds	r3, #1
   22c60:	9303      	str	r3, [sp, #12]
   22c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22c64:	4413      	add	r3, r2
   22c66:	930a      	str	r3, [sp, #40]	; 0x28
   22c68:	e767      	b.n	22b3a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf8>
  for (int batch = 0; batch < batches; ++batch) {
   22c6a:	f10b 0b01 	add.w	fp, fp, #1
   22c6e:	e75b      	b.n	22b28 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe6>
          }
        }
      }
    }
  }
}
   22c70:	b021      	add	sp, #132	; 0x84
   22c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
   22c76:	b570      	push	{r4, r5, r6, lr}
   22c78:	4604      	mov	r4, r0
  if (tensor == nullptr) {
   22c7a:	b911      	cbnz	r1, 22c82 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
   22c7c:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   22c7e:	4620      	mov	r0, r4
   22c80:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   22c82:	688d      	ldr	r5, [r1, #8]
   22c84:	f855 3b04 	ldr.w	r3, [r5], #4
    if (dimensions_count > kMaxSmallSize) {
   22c88:	2b05      	cmp	r3, #5
    size_ = dimensions_count;
   22c8a:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   22c8c:	ea4f 0683 	mov.w	r6, r3, lsl #2
   22c90:	dc05      	bgt.n	22c9e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   22c92:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   22c94:	4632      	mov	r2, r6
   22c96:	4629      	mov	r1, r5
   22c98:	f001 fbfd 	bl	24496 <memcpy>
  }
   22c9c:	e7ef      	b.n	22c7e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
      dims_pointer_ = new int32[dimensions_count];
   22c9e:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
   22ca2:	4283      	cmp	r3, r0
   22ca4:	bfb4      	ite	lt
   22ca6:	4630      	movlt	r0, r6
   22ca8:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   22cac:	f000 ff6c 	bl	23b88 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   22cb0:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32[dimensions_count];
   22cb2:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   22cb4:	2b05      	cmp	r3, #5
   22cb6:	dced      	bgt.n	22c94 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1e>
   22cb8:	e7eb      	b.n	22c92 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1c>

00022cba <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
  switch (padding) {
   22cba:	2801      	cmp	r0, #1
   22cbc:	d003      	beq.n	22cc6 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
   22cbe:	2802      	cmp	r0, #2
   22cc0:	d006      	beq.n	22cd0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x16>
   22cc2:	2000      	movs	r0, #0
   22cc4:	4770      	bx	lr
      return (image_size + stride - 1) / stride;
   22cc6:	1e58      	subs	r0, r3, #1
   22cc8:	4408      	add	r0, r1
      return (image_size + stride - effective_filter_size) / stride;
   22cca:	fb90 f0f3 	sdiv	r0, r0, r3
}
   22cce:	4770      	bx	lr
      return (image_size + stride - effective_filter_size) / stride;
   22cd0:	1e58      	subs	r0, r3, #1
   22cd2:	4408      	add	r0, r1
   22cd4:	9900      	ldr	r1, [sp, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   22cd6:	3a01      	subs	r2, #1
      return (image_size + stride - effective_filter_size) / stride;
   22cd8:	fb01 0012 	mls	r0, r1, r2, r0
   22cdc:	e7f5      	b.n	22cca <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x10>

00022cde <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph>:
  static inline void Run(const DepthwiseParams& params,
   22cde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ce2:	ed2d 8b02 	vpush	{d8}
   22ce6:	469a      	mov	sl, r3
    const int stride_width = params.stride_width;
   22ce8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  static inline void Run(const DepthwiseParams& params,
   22cec:	b0a1      	sub	sp, #132	; 0x84
    const int stride_width = params.stride_width;
   22cee:	930e      	str	r3, [sp, #56]	; 0x38
    const int stride_height = params.stride_height;
   22cf0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  static inline void Run(const DepthwiseParams& params,
   22cf4:	4689      	mov	r9, r1
    const int stride_height = params.stride_height;
   22cf6:	930f      	str	r3, [sp, #60]	; 0x3c
    const int dilation_width_factor = params.dilation_width_factor;
   22cf8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  static inline void Run(const DepthwiseParams& params,
   22cfc:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
    const int dilation_width_factor = params.dilation_width_factor;
   22cfe:	9310      	str	r3, [sp, #64]	; 0x40
    const int dilation_height_factor = params.dilation_height_factor;
   22d00:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  static inline void Run(const DepthwiseParams& params,
   22d04:	921f      	str	r2, [sp, #124]	; 0x7c
    const int dilation_height_factor = params.dilation_height_factor;
   22d06:	9311      	str	r3, [sp, #68]	; 0x44
    const int pad_width = params.padding_values.width;
   22d08:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   22d0c:	9313      	str	r3, [sp, #76]	; 0x4c
    const int pad_height = params.padding_values.height;
   22d0e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   22d12:	9314      	str	r3, [sp, #80]	; 0x50
    const int depth_multiplier = params.depth_multiplier;
   22d14:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   22d18:	9308      	str	r3, [sp, #32]
    const int32 output_activation_min = params.quantized_activation_min;
   22d1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   22d1c:	930b      	str	r3, [sp, #44]	; 0x2c
    const int32 output_activation_max = params.quantized_activation_max;
   22d1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22d20:	930c      	str	r3, [sp, #48]	; 0x30
    const int32 input_offset = params.input_offset;
   22d22:	6943      	ldr	r3, [r0, #20]
   22d24:	9315      	str	r3, [sp, #84]	; 0x54
    const int32 filter_offset = params.weights_offset;
   22d26:	6983      	ldr	r3, [r0, #24]
   22d28:	9316      	str	r3, [sp, #88]	; 0x58
    const int32 output_offset = params.output_offset;
   22d2a:	69c3      	ldr	r3, [r0, #28]
   22d2c:	9317      	str	r3, [sp, #92]	; 0x5c
    const int32 output_multiplier = params.output_multiplier;
   22d2e:	6a03      	ldr	r3, [r0, #32]
   22d30:	ee08 3a10 	vmov	s16, r3
    const int output_shift = params.output_shift;
   22d34:	6a43      	ldr	r3, [r0, #36]	; 0x24
   22d36:	ee08 3a90 	vmov	s17, r3
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   22d3a:	680b      	ldr	r3, [r1, #0]
   22d3c:	2b04      	cmp	r3, #4
   22d3e:	d001      	beq.n	22d44 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x66>
   22d40:	f001 fb86 	bl	24450 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   22d44:	f8da 3000 	ldr.w	r3, [sl]
   22d48:	2b04      	cmp	r3, #4
   22d4a:	d1f9      	bne.n	22d40 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   22d4c:	6833      	ldr	r3, [r6, #0]
   22d4e:	2b04      	cmp	r3, #4
   22d50:	d1f6      	bne.n	22d40 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   22d52:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
   22d56:	4293      	cmp	r3, r2
   22d58:	dcf2      	bgt.n	22d40 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   22d5a:	2300      	movs	r3, #0
   22d5c:	4632      	mov	r2, r6
   22d5e:	4619      	mov	r1, r3
   22d60:	4648      	mov	r0, r9
   22d62:	f7ff fe5f 	bl	22a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   22d66:	2303      	movs	r3, #3
   22d68:	4632      	mov	r2, r6
   22d6a:	4619      	mov	r1, r3
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   22d6c:	9018      	str	r0, [sp, #96]	; 0x60
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   22d6e:	4650      	mov	r0, sl
   22d70:	f7ff fe58 	bl	22a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int input_height = input_shape.Dims(1);
   22d74:	2101      	movs	r1, #1
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   22d76:	4604      	mov	r4, r0
    const int input_height = input_shape.Dims(1);
   22d78:	4648      	mov	r0, r9
   22d7a:	f7ff fe10 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
    const int input_width = input_shape.Dims(2);
   22d7e:	2102      	movs	r1, #2
    const int input_height = input_shape.Dims(1);
   22d80:	9019      	str	r0, [sp, #100]	; 0x64
    const int input_width = input_shape.Dims(2);
   22d82:	4648      	mov	r0, r9
   22d84:	f7ff fe0b 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
    const int input_depth = input_shape.Dims(3);
   22d88:	2103      	movs	r1, #3
    const int input_width = input_shape.Dims(2);
   22d8a:	901a      	str	r0, [sp, #104]	; 0x68
    const int input_depth = input_shape.Dims(3);
   22d8c:	4648      	mov	r0, r9
   22d8e:	f7ff fe06 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
    const int filter_height = filter_shape.Dims(1);
   22d92:	2101      	movs	r1, #1
    const int input_depth = input_shape.Dims(3);
   22d94:	900d      	str	r0, [sp, #52]	; 0x34
    const int filter_height = filter_shape.Dims(1);
   22d96:	4650      	mov	r0, sl
   22d98:	f7ff fe01 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
    const int filter_width = filter_shape.Dims(2);
   22d9c:	2102      	movs	r1, #2
    const int filter_height = filter_shape.Dims(1);
   22d9e:	901b      	str	r0, [sp, #108]	; 0x6c
    const int filter_width = filter_shape.Dims(2);
   22da0:	4650      	mov	r0, sl
   22da2:	f7ff fdfc 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
    const int output_height = output_shape.Dims(1);
   22da6:	2101      	movs	r1, #1
    const int filter_width = filter_shape.Dims(2);
   22da8:	901c      	str	r0, [sp, #112]	; 0x70
    const int output_height = output_shape.Dims(1);
   22daa:	4630      	mov	r0, r6
   22dac:	f7ff fdf7 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
    const int output_width = output_shape.Dims(2);
   22db0:	2102      	movs	r1, #2
    const int output_height = output_shape.Dims(1);
   22db2:	901d      	str	r0, [sp, #116]	; 0x74
    const int output_width = output_shape.Dims(2);
   22db4:	4630      	mov	r0, r6
   22db6:	f7ff fdf2 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   22dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   22dbc:	9a08      	ldr	r2, [sp, #32]
    const int output_width = output_shape.Dims(2);
   22dbe:	901e      	str	r0, [sp, #120]	; 0x78
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   22dc0:	fb03 f502 	mul.w	r5, r3, r2
   22dc4:	42a5      	cmp	r5, r4
   22dc6:	d1bb      	bne.n	22d40 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   22dc8:	982d      	ldr	r0, [sp, #180]	; 0xb4
   22dca:	f7ff fdf9 	bl	229c0 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   22dce:	42a8      	cmp	r0, r5
   22dd0:	d1b6      	bne.n	22d40 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    for (int b = 0; b < batches; ++b) {
   22dd2:	f04f 0b00 	mov.w	fp, #0
   22dd6:	9b18      	ldr	r3, [sp, #96]	; 0x60
   22dd8:	459b      	cmp	fp, r3
   22dda:	f280 809d 	bge.w	22f18 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x23a>
   22dde:	9b14      	ldr	r3, [sp, #80]	; 0x50
   22de0:	425b      	negs	r3, r3
   22de2:	930a      	str	r3, [sp, #40]	; 0x28
      for (int out_y = 0; out_y < output_height; ++out_y) {
   22de4:	2300      	movs	r3, #0
   22de6:	9303      	str	r3, [sp, #12]
   22de8:	9b03      	ldr	r3, [sp, #12]
   22dea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   22dec:	4293      	cmp	r3, r2
   22dee:	f280 8090 	bge.w	22f12 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x234>
   22df2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   22df4:	425b      	negs	r3, r3
   22df6:	9309      	str	r3, [sp, #36]	; 0x24
        for (int out_x = 0; out_x < output_width; ++out_x) {
   22df8:	2300      	movs	r3, #0
   22dfa:	9304      	str	r3, [sp, #16]
   22dfc:	9b04      	ldr	r3, [sp, #16]
   22dfe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   22e00:	4293      	cmp	r3, r2
   22e02:	da7e      	bge.n	22f02 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x224>
   22e04:	2300      	movs	r3, #0
   22e06:	9302      	str	r3, [sp, #8]
          for (int ic = 0; ic < input_depth; ++ic) {
   22e08:	9305      	str	r3, [sp, #20]
   22e0a:	9b05      	ldr	r3, [sp, #20]
   22e0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   22e0e:	4293      	cmp	r3, r2
   22e10:	da6f      	bge.n	22ef2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x214>
   22e12:	9c02      	ldr	r4, [sp, #8]
            for (int m = 0; m < depth_multiplier; m++) {
   22e14:	9b02      	ldr	r3, [sp, #8]
   22e16:	9a08      	ldr	r2, [sp, #32]
   22e18:	1ae3      	subs	r3, r4, r3
   22e1a:	429a      	cmp	r2, r3
   22e1c:	dd61      	ble.n	22ee2 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x204>
              int32 acc = 0;
   22e1e:	2500      	movs	r5, #0
              const int oc = m + ic * depth_multiplier;
   22e20:	9f0a      	ldr	r7, [sp, #40]	; 0x28
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   22e22:	9506      	str	r5, [sp, #24]
   22e24:	9b06      	ldr	r3, [sp, #24]
   22e26:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   22e28:	4293      	cmp	r3, r2
   22e2a:	da39      	bge.n	22ea0 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1c2>
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   22e2c:	2300      	movs	r3, #0
                  const int in_y =
   22e2e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   22e32:	9307      	str	r3, [sp, #28]
   22e34:	9b07      	ldr	r3, [sp, #28]
   22e36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   22e38:	4293      	cmp	r3, r2
   22e3a:	da2b      	bge.n	22e94 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1b6>
                  if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   22e3c:	f1b8 0f00 	cmp.w	r8, #0
   22e40:	db22      	blt.n	22e88 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   22e42:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   22e44:	4543      	cmp	r3, r8
   22e46:	dd1f      	ble.n	22e88 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   22e48:	2f00      	cmp	r7, #0
   22e4a:	db1d      	blt.n	22e88 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   22e4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   22e4e:	42bb      	cmp	r3, r7
   22e50:	dd1a      	ble.n	22e88 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
   22e52:	9b05      	ldr	r3, [sp, #20]
   22e54:	463a      	mov	r2, r7
   22e56:	4659      	mov	r1, fp
   22e58:	9300      	str	r3, [sp, #0]
   22e5a:	4648      	mov	r0, r9
   22e5c:	4643      	mov	r3, r8
   22e5e:	f7ff fdbf 	bl	229e0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                    int32 filter_val = filter_data[Offset(
   22e62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   22e66:	2100      	movs	r1, #0
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
   22e68:	9012      	str	r0, [sp, #72]	; 0x48
                    int32 filter_val = filter_data[Offset(
   22e6a:	9400      	str	r4, [sp, #0]
   22e6c:	4650      	mov	r0, sl
   22e6e:	f7ff fdb7 	bl	229e0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   22e72:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
                    acc += (filter_val + filter_offset) *
   22e74:	9a16      	ldr	r2, [sp, #88]	; 0x58
                    int32 filter_val = filter_data[Offset(
   22e76:	5c1b      	ldrb	r3, [r3, r0]
                    int32 input_val =
   22e78:	9912      	ldr	r1, [sp, #72]	; 0x48
                    acc += (filter_val + filter_offset) *
   22e7a:	4413      	add	r3, r2
                    int32 input_val =
   22e7c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   22e7e:	5c52      	ldrb	r2, [r2, r1]
                           (input_val + input_offset);
   22e80:	9915      	ldr	r1, [sp, #84]	; 0x54
   22e82:	440a      	add	r2, r1
                    acc += (filter_val + filter_offset) *
   22e84:	fb02 5503 	mla	r5, r2, r3, r5
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   22e88:	9b07      	ldr	r3, [sp, #28]
   22e8a:	3301      	adds	r3, #1
   22e8c:	9307      	str	r3, [sp, #28]
   22e8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   22e90:	4498      	add	r8, r3
   22e92:	e7cf      	b.n	22e34 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x156>
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   22e94:	9b06      	ldr	r3, [sp, #24]
   22e96:	3301      	adds	r3, #1
   22e98:	9306      	str	r3, [sp, #24]
   22e9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   22e9c:	441f      	add	r7, r3
   22e9e:	e7c1      	b.n	22e24 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x146>
              if (bias_data) {
   22ea0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   22ea2:	b113      	cbz	r3, 22eaa <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1cc>
                acc += bias_data[oc];
   22ea4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   22ea8:	441d      	add	r5, r3
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
   22eaa:	ee18 2a90 	vmov	r2, s17
   22eae:	ee18 1a10 	vmov	r1, s16
   22eb2:	4628      	mov	r0, r5
   22eb4:	f7f7 ff60 	bl	1ad78 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              acc += output_offset;
   22eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   22eba:	9400      	str	r4, [sp, #0]
              acc += output_offset;
   22ebc:	181d      	adds	r5, r3, r0
   22ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   22ec0:	4659      	mov	r1, fp
   22ec2:	429d      	cmp	r5, r3
   22ec4:	bfb8      	it	lt
   22ec6:	461d      	movlt	r5, r3
   22ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   22eca:	4630      	mov	r0, r6
   22ecc:	429d      	cmp	r5, r3
   22ece:	bfa8      	it	ge
   22ed0:	461d      	movge	r5, r3
   22ed2:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   22ed6:	f7ff fd83 	bl	229e0 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   22eda:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   22edc:	3401      	adds	r4, #1
   22ede:	541d      	strb	r5, [r3, r0]
            for (int m = 0; m < depth_multiplier; m++) {
   22ee0:	e798      	b.n	22e14 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x136>
          for (int ic = 0; ic < input_depth; ++ic) {
   22ee2:	9b05      	ldr	r3, [sp, #20]
   22ee4:	9a08      	ldr	r2, [sp, #32]
   22ee6:	3301      	adds	r3, #1
   22ee8:	9305      	str	r3, [sp, #20]
   22eea:	9b02      	ldr	r3, [sp, #8]
   22eec:	4413      	add	r3, r2
   22eee:	9302      	str	r3, [sp, #8]
   22ef0:	e78b      	b.n	22e0a <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x12c>
        for (int out_x = 0; out_x < output_width; ++out_x) {
   22ef2:	9b04      	ldr	r3, [sp, #16]
   22ef4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   22ef6:	3301      	adds	r3, #1
   22ef8:	9304      	str	r3, [sp, #16]
   22efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22efc:	4413      	add	r3, r2
   22efe:	9309      	str	r3, [sp, #36]	; 0x24
   22f00:	e77c      	b.n	22dfc <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x11e>
      for (int out_y = 0; out_y < output_height; ++out_y) {
   22f02:	9b03      	ldr	r3, [sp, #12]
   22f04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   22f06:	3301      	adds	r3, #1
   22f08:	9303      	str	r3, [sp, #12]
   22f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   22f0c:	4413      	add	r3, r2
   22f0e:	930a      	str	r3, [sp, #40]	; 0x28
   22f10:	e76a      	b.n	22de8 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x10a>
    for (int b = 0; b < batches; ++b) {
   22f12:	f10b 0b01 	add.w	fp, fp, #1
   22f16:	e75e      	b.n	22dd6 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0xf8>
  }
   22f18:	b021      	add	sp, #132	; 0x84
   22f1a:	ecbd 8b02 	vpop	{d8}
   22f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00022f22 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   22f22:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   22f24:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   22f26:	b90b      	cbnz	r3, 22f2c <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0xa>
   22f28:	f001 fa92 	bl	24450 <abort>
  void* data = nullptr;
   22f2c:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   22f2e:	2114      	movs	r1, #20
  void* data = nullptr;
   22f30:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   22f32:	aa01      	add	r2, sp, #4
   22f34:	4798      	blx	r3
   22f36:	2801      	cmp	r0, #1
    return nullptr;
   22f38:	bf0c      	ite	eq
   22f3a:	4620      	moveq	r0, r4
  return data;
   22f3c:	9801      	ldrne	r0, [sp, #4]
}
   22f3e:	b002      	add	sp, #8
   22f40:	bd10      	pop	{r4, pc}

00022f42 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   22f42:	2900      	cmp	r1, #0
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
   22f44:	b538      	push	{r3, r4, r5, lr}
  const int dims_count = shape.DimensionsCount();
   22f46:	6804      	ldr	r4, [r0, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   22f48:	db01      	blt.n	22f4e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0xc>
   22f4a:	42a1      	cmp	r1, r4
   22f4c:	db01      	blt.n	22f52 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x10>
   22f4e:	f001 fa7f 	bl	24450 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   22f52:	2c05      	cmp	r4, #5
   22f54:	bfcc      	ite	gt
   22f56:	6843      	ldrgt	r3, [r0, #4]
   22f58:	1d03      	addle	r3, r0, #4
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
   22f5a:	2200      	movs	r2, #0
  int flat_size = 1;
   22f5c:	2001      	movs	r0, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   22f5e:	4291      	cmp	r1, r2
   22f60:	bf0c      	ite	eq
   22f62:	2501      	moveq	r5, #1
   22f64:	f853 5022 	ldrne.w	r5, [r3, r2, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   22f68:	3201      	adds	r2, #1
   22f6a:	42a2      	cmp	r2, r4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   22f6c:	fb05 f000 	mul.w	r0, r5, r0
  for (int i = 0; i < dims_count; ++i) {
   22f70:	dbf5      	blt.n	22f5e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x1c>
  }
  return flat_size;
}
   22f72:	bd38      	pop	{r3, r4, r5, pc}

00022f74 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph>:
    uint8* output_data) {
   22f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f78:	ed2d 8b02 	vpush	{d8}
   22f7c:	461d      	mov	r5, r3
  const int32 input_offset = params.input_offset;
   22f7e:	6803      	ldr	r3, [r0, #0]
    uint8* output_data) {
   22f80:	b089      	sub	sp, #36	; 0x24
  const int32 input_offset = params.input_offset;
   22f82:	9303      	str	r3, [sp, #12]
  const int32 filter_offset = params.weights_offset;
   22f84:	6843      	ldr	r3, [r0, #4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   22f86:	682e      	ldr	r6, [r5, #0]
  const int32 filter_offset = params.weights_offset;
   22f88:	9304      	str	r3, [sp, #16]
  const int32 output_offset = params.output_offset;
   22f8a:	6883      	ldr	r3, [r0, #8]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   22f8c:	2e01      	cmp	r6, #1
  const int32 output_offset = params.output_offset;
   22f8e:	9305      	str	r3, [sp, #20]
  const int32 output_multiplier = params.output_multiplier;
   22f90:	68c3      	ldr	r3, [r0, #12]
    uint8* output_data) {
   22f92:	4614      	mov	r4, r2
  const int32 output_multiplier = params.output_multiplier;
   22f94:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   22f98:	6903      	ldr	r3, [r0, #16]
    uint8* output_data) {
   22f9a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  const int output_shift = params.output_shift;
   22f9c:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   22fa0:	6943      	ldr	r3, [r0, #20]
   22fa2:	9300      	str	r3, [sp, #0]
  const int32 output_activation_max = params.quantized_activation_max;
   22fa4:	6983      	ldr	r3, [r0, #24]
   22fa6:	9301      	str	r3, [sp, #4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   22fa8:	dc01      	bgt.n	22fae <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x3a>
   22faa:	f001 fa51 	bl	24450 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
   22fae:	683b      	ldr	r3, [r7, #0]
   22fb0:	2b00      	cmp	r3, #0
   22fb2:	ddfa      	ble.n	22faa <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x36>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   22fb4:	e9dd 2100 	ldrd	r2, r1, [sp]
   22fb8:	428a      	cmp	r2, r1
   22fba:	dcf6      	bgt.n	22faa <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x36>
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   22fbc:	3b01      	subs	r3, #1
   22fbe:	4619      	mov	r1, r3
   22fc0:	4638      	mov	r0, r7
   22fc2:	9302      	str	r3, [sp, #8]
   22fc4:	f7ff ffbd 	bl	22f42 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   22fc8:	463a      	mov	r2, r7
   22fca:	1eb1      	subs	r1, r6, #2
   22fcc:	9b02      	ldr	r3, [sp, #8]
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   22fce:	9006      	str	r0, [sp, #24]
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   22fd0:	4628      	mov	r0, r5
   22fd2:	f7ff fd27 	bl	22a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   22fd6:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   22fd8:	4607      	mov	r7, r0
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   22fda:	4628      	mov	r0, r5
   22fdc:	f7ff fcdf 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
   22fe0:	2600      	movs	r6, #0
   22fe2:	4605      	mov	r5, r0
  for (int b = 0; b < batches; ++b) {
   22fe4:	46b2      	mov	sl, r6
   22fe6:	9b06      	ldr	r3, [sp, #24]
   22fe8:	459a      	cmp	sl, r3
   22fea:	da41      	bge.n	23070 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xfc>
   22fec:	f04f 0800 	mov.w	r8, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   22ff0:	46c1      	mov	r9, r8
   22ff2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   22ff4:	eb03 0b06 	add.w	fp, r3, r6
   22ff8:	45b9      	cmp	r9, r7
   22ffa:	da34      	bge.n	23066 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xf2>
      for (int d = 0; d < accum_depth; ++d) {
   22ffc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   22ffe:	46a6      	mov	lr, r4
   23000:	eb03 0c08 	add.w	ip, r3, r8
      int32 acc = 0;
   23004:	2300      	movs	r3, #0
      for (int d = 0; d < accum_depth; ++d) {
   23006:	461a      	mov	r2, r3
   23008:	42aa      	cmp	r2, r5
   2300a:	da10      	bge.n	2302e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xba>
        int32 input_val = input_data[b * accum_depth + d];
   2300c:	f81e 1b01 	ldrb.w	r1, [lr], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   23010:	9804      	ldr	r0, [sp, #16]
        int32 input_val = input_data[b * accum_depth + d];
   23012:	9102      	str	r1, [sp, #8]
        int32 filter_val = filter_data[out_c * accum_depth + d];
   23014:	f81c 1b01 	ldrb.w	r1, [ip], #1
      for (int d = 0; d < accum_depth; ++d) {
   23018:	3201      	adds	r2, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   2301a:	4401      	add	r1, r0
   2301c:	9107      	str	r1, [sp, #28]
   2301e:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   23022:	4401      	add	r1, r0
   23024:	4608      	mov	r0, r1
   23026:	9907      	ldr	r1, [sp, #28]
   23028:	fb00 3301 	mla	r3, r0, r1, r3
      for (int d = 0; d < accum_depth; ++d) {
   2302c:	e7ec      	b.n	23008 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x94>
      if (bias_data) {
   2302e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   23030:	b112      	cbz	r2, 23038 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xc4>
        acc += bias_data[out_c];
   23032:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
   23036:	4413      	add	r3, r2
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
   23038:	4618      	mov	r0, r3
   2303a:	ee18 2a90 	vmov	r2, s17
   2303e:	ee18 1a10 	vmov	r1, s16
   23042:	f7f7 fe99 	bl	1ad78 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      acc += output_offset;
   23046:	9b05      	ldr	r3, [sp, #20]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   23048:	f109 0901 	add.w	r9, r9, #1
      acc += output_offset;
   2304c:	4418      	add	r0, r3
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
   2304e:	9b00      	ldr	r3, [sp, #0]
   23050:	44a8      	add	r8, r5
   23052:	4298      	cmp	r0, r3
   23054:	bfb8      	it	lt
   23056:	4618      	movlt	r0, r3
   23058:	9b01      	ldr	r3, [sp, #4]
   2305a:	4298      	cmp	r0, r3
   2305c:	bfa8      	it	ge
   2305e:	4618      	movge	r0, r3
   23060:	f80b 0b01 	strb.w	r0, [fp], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   23064:	e7c8      	b.n	22ff8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x84>
  for (int b = 0; b < batches; ++b) {
   23066:	f10a 0a01 	add.w	sl, sl, #1
   2306a:	443e      	add	r6, r7
   2306c:	442c      	add	r4, r5
   2306e:	e7ba      	b.n	22fe6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x72>
}
   23070:	b009      	add	sp, #36	; 0x24
   23072:	ecbd 8b02 	vpop	{d8}
   23076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002307a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
   2307a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2307e:	ed2d 8b02 	vpush	{d8}
   23082:	461d      	mov	r5, r3
  const int32 input_offset = params.input_offset;
   23084:	6803      	ldr	r3, [r0, #0]
    int8_t* output_data) {
   23086:	b089      	sub	sp, #36	; 0x24
  const int32 input_offset = params.input_offset;
   23088:	9303      	str	r3, [sp, #12]
  const int32 filter_offset = params.weights_offset;
   2308a:	6843      	ldr	r3, [r0, #4]
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   2308c:	682f      	ldr	r7, [r5, #0]
  const int32 filter_offset = params.weights_offset;
   2308e:	9304      	str	r3, [sp, #16]
  const int32 output_offset = params.output_offset;
   23090:	6883      	ldr	r3, [r0, #8]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   23092:	2f01      	cmp	r7, #1
  const int32 output_offset = params.output_offset;
   23094:	9305      	str	r3, [sp, #20]
  const int32 output_multiplier = params.output_multiplier;
   23096:	68c3      	ldr	r3, [r0, #12]
    int8_t* output_data) {
   23098:	4614      	mov	r4, r2
  const int32 output_multiplier = params.output_multiplier;
   2309a:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   2309e:	6903      	ldr	r3, [r0, #16]
    int8_t* output_data) {
   230a0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  const int output_shift = params.output_shift;
   230a2:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   230a6:	6943      	ldr	r3, [r0, #20]
   230a8:	9300      	str	r3, [sp, #0]
  const int32 output_activation_max = params.quantized_activation_max;
   230aa:	6983      	ldr	r3, [r0, #24]
   230ac:	9301      	str	r3, [sp, #4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   230ae:	dc01      	bgt.n	230b4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x3a>
   230b0:	f001 f9ce 	bl	24450 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
   230b4:	6833      	ldr	r3, [r6, #0]
   230b6:	2b02      	cmp	r3, #2
   230b8:	d1fa      	bne.n	230b0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   230ba:	e9dd 3200 	ldrd	r3, r2, [sp]
   230be:	4293      	cmp	r3, r2
   230c0:	dcf6      	bgt.n	230b0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
   230c2:	2100      	movs	r1, #0
   230c4:	4630      	mov	r0, r6
   230c6:	f7ff fc6a 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
   230ca:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
   230cc:	9006      	str	r0, [sp, #24]
  const int output_depth = output_shape.Dims(1);
   230ce:	4630      	mov	r0, r6
   230d0:	f7ff fc65 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
   230d4:	1eb9      	subs	r1, r7, #2
  const int output_depth = output_shape.Dims(1);
   230d6:	4606      	mov	r6, r0
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
   230d8:	4628      	mov	r0, r5
   230da:	f7ff fc60 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
   230de:	42b0      	cmp	r0, r6
   230e0:	dbe6      	blt.n	230b0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   230e2:	4628      	mov	r0, r5
   230e4:	1e79      	subs	r1, r7, #1
   230e6:	f7ff fc5a 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
   230ea:	2700      	movs	r7, #0
   230ec:	4605      	mov	r5, r0
  for (int b = 0; b < batches; ++b) {
   230ee:	46ba      	mov	sl, r7
   230f0:	9b06      	ldr	r3, [sp, #24]
   230f2:	459a      	cmp	sl, r3
   230f4:	da41      	bge.n	2317a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x100>
   230f6:	f04f 0800 	mov.w	r8, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   230fa:	46c1      	mov	r9, r8
   230fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   230fe:	eb03 0b07 	add.w	fp, r3, r7
   23102:	45b1      	cmp	r9, r6
   23104:	da34      	bge.n	23170 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xf6>
      int32 acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
   23106:	9b14      	ldr	r3, [sp, #80]	; 0x50
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   23108:	46a6      	mov	lr, r4
   2310a:	eb03 0c08 	add.w	ip, r3, r8
      int32 acc = 0;
   2310e:	2300      	movs	r3, #0
      for (int d = 0; d < accum_depth; ++d) {
   23110:	461a      	mov	r2, r3
   23112:	42aa      	cmp	r2, r5
   23114:	da10      	bge.n	23138 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xbe>
        int32 input_val = input_data[b * accum_depth + d];
   23116:	f91e 1b01 	ldrsb.w	r1, [lr], #1
        int32 filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   2311a:	9804      	ldr	r0, [sp, #16]
        int32 input_val = input_data[b * accum_depth + d];
   2311c:	9102      	str	r1, [sp, #8]
        int32 filter_val = filter_data[out_c * accum_depth + d];
   2311e:	f91c 1b01 	ldrsb.w	r1, [ip], #1
      for (int d = 0; d < accum_depth; ++d) {
   23122:	3201      	adds	r2, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   23124:	4401      	add	r1, r0
   23126:	9107      	str	r1, [sp, #28]
   23128:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   2312c:	4401      	add	r1, r0
   2312e:	4608      	mov	r0, r1
   23130:	9907      	ldr	r1, [sp, #28]
   23132:	fb00 3301 	mla	r3, r0, r1, r3
      for (int d = 0; d < accum_depth; ++d) {
   23136:	e7ec      	b.n	23112 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x98>
      }
      if (bias_data) {
   23138:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2313a:	b112      	cbz	r2, 23142 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xc8>
        acc += bias_data[out_c];
   2313c:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
   23140:	4413      	add	r3, r2
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
   23142:	4618      	mov	r0, r3
   23144:	ee18 2a90 	vmov	r2, s17
   23148:	ee18 1a10 	vmov	r1, s16
   2314c:	f7f7 fe14 	bl	1ad78 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      acc += output_offset;
   23150:	9b05      	ldr	r3, [sp, #20]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   23152:	f109 0901 	add.w	r9, r9, #1
      acc += output_offset;
   23156:	4418      	add	r0, r3
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
   23158:	9b00      	ldr	r3, [sp, #0]
   2315a:	44a8      	add	r8, r5
   2315c:	4298      	cmp	r0, r3
   2315e:	bfb8      	it	lt
   23160:	4618      	movlt	r0, r3
   23162:	9b01      	ldr	r3, [sp, #4]
   23164:	4298      	cmp	r0, r3
   23166:	bfa8      	it	ge
   23168:	4618      	movge	r0, r3
   2316a:	f80b 0b01 	strb.w	r0, [fp], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2316e:	e7c8      	b.n	23102 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x88>
  for (int b = 0; b < batches; ++b) {
   23170:	f10a 0a01 	add.w	sl, sl, #1
   23174:	4437      	add	r7, r6
   23176:	442c      	add	r4, r5
   23178:	e7ba      	b.n	230f0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x76>
    }
  }
}
   2317a:	b009      	add	sp, #36	; 0x24
   2317c:	ecbd 8b02 	vpop	{d8}
   23180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023184 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   23184:	680b      	ldr	r3, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   23186:	6882      	ldr	r2, [r0, #8]
   23188:	6858      	ldr	r0, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   2318a:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   2318c:	eb02 1080 	add.w	r0, r2, r0, lsl #6
  return &context->tensors[node->outputs->data[index]];
   23190:	685b      	ldr	r3, [r3, #4]
  if (input->data.raw != output->data.raw) {
   23192:	6841      	ldr	r1, [r0, #4]
   23194:	eb02 1283 	add.w	r2, r2, r3, lsl #6
   23198:	6853      	ldr	r3, [r2, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   2319a:	b510      	push	{r4, lr}
  if (input->data.raw != output->data.raw) {
   2319c:	4299      	cmp	r1, r3
   2319e:	d009      	beq.n	231b4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x30>
    for (size_t i = 0; i < input->bytes; ++i) {
   231a0:	2300      	movs	r3, #0
   231a2:	6981      	ldr	r1, [r0, #24]
   231a4:	4299      	cmp	r1, r3
   231a6:	d905      	bls.n	231b4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x30>
      output->data.raw[i] = input->data.raw[i];
   231a8:	6841      	ldr	r1, [r0, #4]
   231aa:	5ccc      	ldrb	r4, [r1, r3]
   231ac:	6851      	ldr	r1, [r2, #4]
   231ae:	54cc      	strb	r4, [r1, r3]
    for (size_t i = 0; i < input->bytes; ++i) {
   231b0:	3301      	adds	r3, #1
   231b2:	e7f6      	b.n	231a2 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x1e>
}
   231b4:	2000      	movs	r0, #0
   231b6:	bd10      	pop	{r4, pc}

000231b8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
   231b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   231bc:	4604      	mov	r4, r0
   231be:	460d      	mov	r5, r1
   231c0:	4690      	mov	r8, r2
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
   231c2:	2600      	movs	r6, #0
  const int dims_count = shape.DimensionsCount();
   231c4:	6807      	ldr	r7, [r0, #0]
  for (int i = 0; i < dims_count; ++i) {
   231c6:	42be      	cmp	r6, r7
   231c8:	da10      	bge.n	231ec <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
   231ca:	42ae      	cmp	r6, r5
   231cc:	d00c      	beq.n	231e8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   231ce:	4631      	mov	r1, r6
   231d0:	4620      	mov	r0, r4
   231d2:	f7ff fbe4 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
   231d6:	4631      	mov	r1, r6
   231d8:	4681      	mov	r9, r0
   231da:	4640      	mov	r0, r8
   231dc:	f7ff fbdf 	bl	2299e <_ZNK6tflite12RuntimeShape4DimsEi>
   231e0:	4581      	cmp	r9, r0
   231e2:	d001      	beq.n	231e8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
   231e4:	f001 f934 	bl	24450 <abort>
  for (int i = 0; i < dims_count; ++i) {
   231e8:	3601      	adds	r6, #1
   231ea:	e7ec      	b.n	231c6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   231ec:	2d00      	cmp	r5, #0
   231ee:	dbf9      	blt.n	231e4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
   231f0:	42bd      	cmp	r5, r7
   231f2:	daf7      	bge.n	231e4 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
  int flat_size = 1;
   231f4:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
   231f6:	2300      	movs	r3, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   231f8:	2f05      	cmp	r7, #5
   231fa:	bfcc      	ite	gt
   231fc:	6864      	ldrgt	r4, [r4, #4]
   231fe:	3404      	addle	r4, #4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   23200:	429d      	cmp	r5, r3
   23202:	bf0c      	ite	eq
   23204:	2201      	moveq	r2, #1
   23206:	f854 2023 	ldrne.w	r2, [r4, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   2320a:	3301      	adds	r3, #1
   2320c:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   2320e:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
   23212:	dcf5      	bgt.n	23200 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x48>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
}
   23214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00023218 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                  const SoftmaxParams& op_data) {
   23218:	b570      	push	{r4, r5, r6, lr}
   2321a:	4604      	mov	r4, r0
   2321c:	b08e      	sub	sp, #56	; 0x38
   2321e:	460d      	mov	r5, r1
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   23220:	4601      	mov	r1, r0
   23222:	a802      	add	r0, sp, #8
                  const SoftmaxParams& op_data) {
   23224:	4616      	mov	r6, r2
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   23226:	f7ff fd26 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2322a:	b104      	cbz	r4, 2322e <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x16>
   2322c:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<float>(output));
   2322e:	4629      	mov	r1, r5
   23230:	a808      	add	r0, sp, #32
   23232:	f7ff fd20 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   23236:	b105      	cbz	r5, 2323a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x22>
   23238:	686d      	ldr	r5, [r5, #4]
  tflite::reference_ops::Softmax(
   2323a:	4622      	mov	r2, r4
   2323c:	ab08      	add	r3, sp, #32
   2323e:	a902      	add	r1, sp, #8
   23240:	4630      	mov	r0, r6
   23242:	9500      	str	r5, [sp, #0]
   23244:	f7f8 fdb8 	bl	1bdb8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
   23248:	a808      	add	r0, sp, #32
   2324a:	f7ff fb9d 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   2324e:	a802      	add	r0, sp, #8
   23250:	f7ff fb9a 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
}
   23254:	b00e      	add	sp, #56	; 0x38
   23256:	bd70      	pop	{r4, r5, r6, pc}

00023258 <_ZN6tflite13GetReciprocalEiiPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32 GetReciprocal(int32 x, int x_integer_digits,
                           int* num_bits_over_unit) {
   23258:	b508      	push	{r3, lr}
  return integer_input ? __builtin_clz(integer_input)
   2325a:	fab0 f380 	clz	r3, r0
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   2325e:	1ac9      	subs	r1, r1, r3
  const int32 shifted_sum_minus_one =
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
   23260:	4098      	lsls	r0, r3
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   23262:	6011      	str	r1, [r2, #0]
                         (static_cast<uint32>(1) << 31));

  gemmlowp::FixedPoint<int32, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
   23264:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   23268:	f7f8 fe68 	bl	1bf3c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
  return shifted_scale.raw();
}
   2326c:	bd08      	pop	{r3, pc}

0002326e <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
   2326e:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   23270:	2100      	movs	r1, #0
   23272:	f7f8 fe3d 	bl	1bef0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
}
   23276:	bd08      	pop	{r3, pc}

00023278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
   23278:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   2327a:	f7f8 fd73 	bl	1bd64 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
}
   2327e:	bd08      	pop	{r3, pc}

00023280 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   23280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23284:	460c      	mov	r4, r1
   23286:	b08d      	sub	sp, #52	; 0x34
   23288:	9203      	str	r2, [sp, #12]
   2328a:	461a      	mov	r2, r3
  const int32 input_beta_left_shift = params.input_left_shift;
   2328c:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   23290:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   23292:	6983      	ldr	r3, [r0, #24]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   23294:	4620      	mov	r0, r4
  const int diff_min = params.diff_min;
   23296:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   23298:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2329a:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   2329c:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2329e:	4619      	mov	r1, r3
   232a0:	9304      	str	r3, [sp, #16]
   232a2:	f7ff ff89 	bl	231b8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   232a6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   232aa:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   232ac:	4619      	mov	r1, r3
   232ae:	4620      	mov	r0, r4
   232b0:	f7ff fbb8 	bl	22a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   232b4:	2400      	movs	r4, #0
   232b6:	4605      	mov	r5, r0
  for (int i = 0; i < outer_size; ++i) {
   232b8:	46a0      	mov	r8, r4
    InputT max_in_row = std::numeric_limits<InputT>::min();
   232ba:	46a1      	mov	r9, r4
  for (int i = 0; i < outer_size; ++i) {
   232bc:	9b02      	ldr	r3, [sp, #8]
   232be:	4598      	cmp	r8, r3
   232c0:	da71      	bge.n	233a6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
   232c2:	9b03      	ldr	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   232c4:	2200      	movs	r2, #0
   232c6:	191f      	adds	r7, r3, r4
    InputT max_in_row = std::numeric_limits<InputT>::min();
   232c8:	4639      	mov	r1, r7
   232ca:	f88d 901f 	strb.w	r9, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   232ce:	42aa      	cmp	r2, r5
   232d0:	da0e      	bge.n	232f0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   232d2:	460b      	mov	r3, r1
      if (__a < __b)
   232d4:	f89d 001f 	ldrb.w	r0, [sp, #31]
   232d8:	781e      	ldrb	r6, [r3, #0]
   232da:	3101      	adds	r1, #1
   232dc:	4286      	cmp	r6, r0
      return __a;
   232de:	f10d 001f 	add.w	r0, sp, #31
   232e2:	bf98      	it	ls
   232e4:	4603      	movls	r3, r0
   232e6:	781b      	ldrb	r3, [r3, #0]
    for (int c = 0; c < depth; ++c) {
   232e8:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   232ea:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   232ee:	e7ee      	b.n	232ce <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   232f0:	2600      	movs	r6, #0
   232f2:	463b      	mov	r3, r7
    for (int c = 0; c < depth; ++c) {
   232f4:	46b2      	mov	sl, r6
   232f6:	45aa      	cmp	sl, r5
   232f8:	da17      	bge.n	2332a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   232fa:	f89d 201f 	ldrb.w	r2, [sp, #31]
   232fe:	f813 0b01 	ldrb.w	r0, [r3], #1
      int32 input_diff =
   23302:	1a80      	subs	r0, r0, r2
      if (input_diff >= diff_min) {
   23304:	9a01      	ldr	r2, [sp, #4]
   23306:	4282      	cmp	r2, r0
   23308:	dc0c      	bgt.n	23324 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa4>
   2330a:	9304      	str	r3, [sp, #16]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   2330c:	9b00      	ldr	r3, [sp, #0]
   2330e:	4659      	mov	r1, fp
   23310:	4098      	lsls	r0, r3
   23312:	f7f8 fd27 	bl	1bd64 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   23316:	f7f8 fed7 	bl	1c0c8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   2331a:	210c      	movs	r1, #12
   2331c:	f7f8 fde8 	bl	1bef0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   23320:	9b04      	ldr	r3, [sp, #16]
   23322:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   23324:	f10a 0a01 	add.w	sl, sl, #1
   23328:	e7e5      	b.n	232f6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   2332a:	4630      	mov	r0, r6
   2332c:	210c      	movs	r1, #12
   2332e:	aa08      	add	r2, sp, #32
   23330:	f7ff ff92 	bl	23258 <_ZN6tflite13GetReciprocalEiiPi>
   23334:	9b16      	ldr	r3, [sp, #88]	; 0x58
   23336:	4682      	mov	sl, r0
   23338:	191e      	adds	r6, r3, r4
    for (int c = 0; c < depth; ++c) {
   2333a:	2300      	movs	r3, #0
   2333c:	42ab      	cmp	r3, r5
   2333e:	da2e      	bge.n	2339e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   23340:	f89d 101f 	ldrb.w	r1, [sp, #31]
   23344:	f817 0b01 	ldrb.w	r0, [r7], #1
      int32 input_diff =
   23348:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   2334a:	9901      	ldr	r1, [sp, #4]
   2334c:	4281      	cmp	r1, r0
   2334e:	dc23      	bgt.n	23398 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x118>
   23350:	9304      	str	r3, [sp, #16]
   23352:	9b00      	ldr	r3, [sp, #0]
   23354:	4659      	mov	r1, fp
   23356:	4098      	lsls	r0, r3
   23358:	f7f8 fd04 	bl	1bd64 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   2335c:	f7f8 feb4 	bl	1c0c8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   23360:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   23362:	4650      	mov	r0, sl
   23364:	f7ff ff88 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   23368:	9908      	ldr	r1, [sp, #32]
   2336a:	3117      	adds	r1, #23
   2336c:	f7f8 fdc0 	bl	1bef0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   23370:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   23372:	4298      	cmp	r0, r3
	return __b;
   23374:	bfcc      	ite	gt
   23376:	a90a      	addgt	r1, sp, #40	; 0x28
      return __a;
   23378:	a909      	addle	r1, sp, #36	; 0x24
   2337a:	930a      	str	r3, [sp, #40]	; 0x28
        const int32 shifted_output =
   2337c:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
   2337e:	6808      	ldr	r0, [r1, #0]
      if (__b < __a)
   23380:	aa0b      	add	r2, sp, #44	; 0x2c
      if (__a < __b)
   23382:	2800      	cmp	r0, #0
	return __b;
   23384:	bfb8      	it	lt
   23386:	4611      	movlt	r1, r2
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   23388:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   2338c:	6809      	ldr	r1, [r1, #0]
      if (__b < __a)
   2338e:	9b04      	ldr	r3, [sp, #16]
   23390:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   23392:	3301      	adds	r3, #1
   23394:	3601      	adds	r6, #1
   23396:	e7d1      	b.n	2333c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xbc>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   23398:	f886 9000 	strb.w	r9, [r6]
   2339c:	e7f9      	b.n	23392 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
  for (int i = 0; i < outer_size; ++i) {
   2339e:	f108 0801 	add.w	r8, r8, #1
   233a2:	442c      	add	r4, r5
   233a4:	e78a      	b.n	232bc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
}
   233a6:	b00d      	add	sp, #52	; 0x34
   233a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000233ac <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   233ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   233b0:	460c      	mov	r4, r1
   233b2:	b08d      	sub	sp, #52	; 0x34
   233b4:	9203      	str	r2, [sp, #12]
   233b6:	461a      	mov	r2, r3
  const int32 input_beta_left_shift = params.input_left_shift;
   233b8:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   233bc:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   233be:	6983      	ldr	r3, [r0, #24]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   233c0:	4620      	mov	r0, r4
  const int diff_min = params.diff_min;
   233c2:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   233c4:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   233c6:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   233c8:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   233ca:	4619      	mov	r1, r3
   233cc:	9304      	str	r3, [sp, #16]
   233ce:	f7ff fef3 	bl	231b8 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   233d2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   233d6:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   233d8:	4619      	mov	r1, r3
   233da:	4620      	mov	r0, r4
   233dc:	f7ff fb22 	bl	22a24 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   233e0:	2500      	movs	r5, #0
   233e2:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
   233e4:	46a8      	mov	r8, r5
   233e6:	9b02      	ldr	r3, [sp, #8]
   233e8:	4598      	cmp	r8, r3
   233ea:	da74      	bge.n	234d6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12a>
    InputT max_in_row = std::numeric_limits<InputT>::min();
   233ec:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   233f0:	f88d 301f 	strb.w	r3, [sp, #31]
   233f4:	9b03      	ldr	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   233f6:	2200      	movs	r2, #0
   233f8:	195f      	adds	r7, r3, r5
    InputT max_in_row = std::numeric_limits<InputT>::min();
   233fa:	4639      	mov	r1, r7
    for (int c = 0; c < depth; ++c) {
   233fc:	42a2      	cmp	r2, r4
   233fe:	da10      	bge.n	23422 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   23400:	460b      	mov	r3, r1
      if (__a < __b)
   23402:	f99d 001f 	ldrsb.w	r0, [sp, #31]
   23406:	f993 6000 	ldrsb.w	r6, [r3]
   2340a:	3101      	adds	r1, #1
   2340c:	4286      	cmp	r6, r0
      return __a;
   2340e:	f10d 001f 	add.w	r0, sp, #31
   23412:	bfd8      	it	le
   23414:	4603      	movle	r3, r0
   23416:	f993 3000 	ldrsb.w	r3, [r3]
    for (int c = 0; c < depth; ++c) {
   2341a:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   2341c:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   23420:	e7ec      	b.n	233fc <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x50>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   23422:	2600      	movs	r6, #0
   23424:	46ba      	mov	sl, r7
    for (int c = 0; c < depth; ++c) {
   23426:	46b1      	mov	r9, r6
   23428:	45a1      	cmp	r9, r4
   2342a:	da15      	bge.n	23458 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   2342c:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   23430:	f91a 0b01 	ldrsb.w	r0, [sl], #1
      int32 input_diff =
   23434:	1ac0      	subs	r0, r0, r3
      if (input_diff >= diff_min) {
   23436:	9b01      	ldr	r3, [sp, #4]
   23438:	4283      	cmp	r3, r0
   2343a:	dc0a      	bgt.n	23452 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa6>
   2343c:	9b00      	ldr	r3, [sp, #0]
   2343e:	4659      	mov	r1, fp
   23440:	4098      	lsls	r0, r3
   23442:	f7f8 fc8f 	bl	1bd64 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   23446:	f7f8 fe3f 	bl	1c0c8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   2344a:	210c      	movs	r1, #12
   2344c:	f7f8 fd50 	bl	1bef0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   23450:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   23452:	f109 0901 	add.w	r9, r9, #1
   23456:	e7e7      	b.n	23428 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   23458:	4630      	mov	r0, r6
   2345a:	210c      	movs	r1, #12
   2345c:	aa08      	add	r2, sp, #32
   2345e:	f7ff fefb 	bl	23258 <_ZN6tflite13GetReciprocalEiiPi>
    for (int c = 0; c < depth; ++c) {
   23462:	f04f 0900 	mov.w	r9, #0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   23466:	4682      	mov	sl, r0
   23468:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2346a:	195e      	adds	r6, r3, r5
    for (int c = 0; c < depth; ++c) {
   2346c:	45a1      	cmp	r9, r4
   2346e:	da2e      	bge.n	234ce <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   23470:	f99d 101f 	ldrsb.w	r1, [sp, #31]
   23474:	f917 0b01 	ldrsb.w	r0, [r7], #1
      int32 input_diff =
   23478:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   2347a:	9901      	ldr	r1, [sp, #4]
   2347c:	4281      	cmp	r1, r0
   2347e:	dc23      	bgt.n	234c8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11c>
   23480:	9b00      	ldr	r3, [sp, #0]
   23482:	4659      	mov	r1, fp
   23484:	4098      	lsls	r0, r3
   23486:	f7f8 fc6d 	bl	1bd64 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   2348a:	f7f8 fe1d 	bl	1c0c8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   2348e:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   23490:	4650      	mov	r0, sl
   23492:	f7ff fef1 	bl	23278 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   23496:	9908      	ldr	r1, [sp, #32]
   23498:	3117      	adds	r1, #23
   2349a:	f7f8 fd29 	bl	1bef0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   2349e:	237f      	movs	r3, #127	; 0x7f
      if (__b < __a)
   234a0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
            unsat_output +
   234a4:	3880      	subs	r0, #128	; 0x80
   234a6:	4298      	cmp	r0, r3
	return __b;
   234a8:	bfcc      	ite	gt
   234aa:	a90a      	addgt	r1, sp, #40	; 0x28
      return __a;
   234ac:	a909      	addle	r1, sp, #36	; 0x24
        const int32 shifted_output =
   234ae:	9009      	str	r0, [sp, #36]	; 0x24
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   234b0:	930a      	str	r3, [sp, #40]	; 0x28
      if (__a < __b)
   234b2:	6808      	ldr	r0, [r1, #0]
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   234b4:	920b      	str	r2, [sp, #44]	; 0x2c
   234b6:	3080      	adds	r0, #128	; 0x80
	return __b;
   234b8:	bfb8      	it	lt
   234ba:	a90b      	addlt	r1, sp, #44	; 0x2c
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   234bc:	6809      	ldr	r1, [r1, #0]
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   234be:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   234c0:	f109 0901 	add.w	r9, r9, #1
   234c4:	3601      	adds	r6, #1
   234c6:	e7d1      	b.n	2346c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   234c8:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   234cc:	e7f7      	b.n	234be <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
  for (int i = 0; i < outer_size; ++i) {
   234ce:	f108 0801 	add.w	r8, r8, #1
   234d2:	4425      	add	r5, r4
   234d4:	e787      	b.n	233e6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a>
}
   234d6:	b00d      	add	sp, #52	; 0x34
   234d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000234dc <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                      const SoftmaxParams& op_data) {
   234dc:	b570      	push	{r4, r5, r6, lr}
  if (input->type == kTfLiteUInt8) {
   234de:	7803      	ldrb	r3, [r0, #0]
                      const SoftmaxParams& op_data) {
   234e0:	4605      	mov	r5, r0
  if (input->type == kTfLiteUInt8) {
   234e2:	2b03      	cmp	r3, #3
                      const SoftmaxParams& op_data) {
   234e4:	460c      	mov	r4, r1
   234e6:	4616      	mov	r6, r2
   234e8:	b090      	sub	sp, #64	; 0x40
  if (input->type == kTfLiteUInt8) {
   234ea:	d11a      	bne.n	23522 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x46>
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
   234ec:	4601      	mov	r1, r0
   234ee:	a804      	add	r0, sp, #16
   234f0:	f7ff fbc1 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   234f4:	686a      	ldr	r2, [r5, #4]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   234f6:	4621      	mov	r1, r4
   234f8:	a80a      	add	r0, sp, #40	; 0x28
   234fa:	9203      	str	r2, [sp, #12]
   234fc:	f7ff fbbb 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   23500:	9a03      	ldr	r2, [sp, #12]
   23502:	b104      	cbz	r4, 23506 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a>
   23504:	6864      	ldr	r4, [r4, #4]
    tflite::reference_ops::Softmax(
   23506:	4630      	mov	r0, r6
   23508:	9400      	str	r4, [sp, #0]
   2350a:	ab0a      	add	r3, sp, #40	; 0x28
   2350c:	a904      	add	r1, sp, #16
   2350e:	f7ff feb7 	bl	23280 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int8_t>(output));
   23512:	a80a      	add	r0, sp, #40	; 0x28
   23514:	f7ff fa38 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   23518:	a804      	add	r0, sp, #16
   2351a:	f7ff fa35 	bl	22988 <_ZN6tflite12RuntimeShapeD1Ev>
}
   2351e:	b010      	add	sp, #64	; 0x40
   23520:	bd70      	pop	{r4, r5, r6, pc}
    if (output->type == kTfLiteInt16) {
   23522:	780b      	ldrb	r3, [r1, #0]
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   23524:	4601      	mov	r1, r0
    if (output->type == kTfLiteInt16) {
   23526:	2b07      	cmp	r3, #7
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   23528:	a804      	add	r0, sp, #16
    if (output->type == kTfLiteInt16) {
   2352a:	d110      	bne.n	2354e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x72>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   2352c:	f7ff fba3 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   23530:	686a      	ldr	r2, [r5, #4]
          GetTensorShape(output), GetTensorData<int16_t>(output));
   23532:	4621      	mov	r1, r4
   23534:	a80a      	add	r0, sp, #40	; 0x28
   23536:	9203      	str	r2, [sp, #12]
   23538:	f7ff fb9d 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
   2353c:	6863      	ldr	r3, [r4, #4]
   2353e:	4630      	mov	r0, r6
   23540:	9300      	str	r3, [sp, #0]
   23542:	9a03      	ldr	r2, [sp, #12]
   23544:	ab0a      	add	r3, sp, #40	; 0x28
   23546:	a904      	add	r1, sp, #16
   23548:	f7f8 fe58 	bl	1c1fc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
   2354c:	e7e1      	b.n	23512 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x36>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   2354e:	f7ff fb92 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   23552:	686a      	ldr	r2, [r5, #4]
          GetTensorShape(output), GetTensorData<int8_t>(output));
   23554:	4621      	mov	r1, r4
   23556:	a80a      	add	r0, sp, #40	; 0x28
   23558:	9203      	str	r2, [sp, #12]
   2355a:	f7ff fb8c 	bl	22c76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
   2355e:	6863      	ldr	r3, [r4, #4]
   23560:	4630      	mov	r0, r6
   23562:	9300      	str	r3, [sp, #0]
   23564:	9a03      	ldr	r2, [sp, #12]
   23566:	ab0a      	add	r3, sp, #40	; 0x28
   23568:	a904      	add	r1, sp, #16
   2356a:	f7ff ff1f 	bl	233ac <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
   2356e:	e7d0      	b.n	23512 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x36>

00023570 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
   23570:	b40e      	push	{r1, r2, r3}
   23572:	b503      	push	{r0, r1, lr}
   23574:	aa03      	add	r2, sp, #12
   23576:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
   2357a:	6803      	ldr	r3, [r0, #0]
  va_start(args, format);
   2357c:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   2357e:	689b      	ldr	r3, [r3, #8]
   23580:	4798      	blx	r3
  va_end(args);
  return code;
}
   23582:	b002      	add	sp, #8
   23584:	f85d eb04 	ldr.w	lr, [sp], #4
   23588:	b003      	add	sp, #12
   2358a:	4770      	bx	lr

0002358c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
   2358c:	b40c      	push	{r2, r3}
   2358e:	b507      	push	{r0, r1, r2, lr}
   23590:	aa04      	add	r2, sp, #16
   23592:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
   23596:	6803      	ldr	r3, [r0, #0]
  va_start(args, format);
   23598:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   2359a:	689b      	ldr	r3, [r3, #8]
   2359c:	4798      	blx	r3
  va_end(args);
  return code;
}
   2359e:	b003      	add	sp, #12
   235a0:	f85d eb04 	ldr.w	lr, [sp], #4
   235a4:	b002      	add	sp, #8
   235a6:	4770      	bx	lr

000235a8 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
  switch (padding) {
   235a8:	b120      	cbz	r0, 235b4 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xc>
   235aa:	2801      	cmp	r0, #1
   235ac:	bf14      	ite	ne
   235ae:	2000      	movne	r0, #0
   235b0:	2002      	moveq	r0, #2
   235b2:	4770      	bx	lr
      return kTfLitePaddingSame;
   235b4:	2001      	movs	r0, #1
}
   235b6:	4770      	bx	lr

000235b8 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
   235b8:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
   235ba:	b908      	cbnz	r0, 235c0 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8>
   235bc:	f000 ff48 	bl	24450 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   235c0:	2900      	cmp	r1, #0
   235c2:	d0fb      	beq.n	235bc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(allocator != nullptr);
   235c4:	2a00      	cmp	r2, #0
   235c6:	d0f9      	beq.n	235bc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(builtin_data != nullptr);
   235c8:	2b00      	cmp	r3, #0
   235ca:	d0f7      	beq.n	235bc <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
}
   235cc:	bd08      	pop	{r3, pc}

000235ce <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>:
    void operator()(void* data) { allocator_->Deallocate(data); }
   235ce:	6803      	ldr	r3, [r0, #0]
   235d0:	685b      	ldr	r3, [r3, #4]
   235d2:	4718      	bx	r3

000235d4 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
   235d4:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   235d6:	210c      	movs	r1, #12
   235d8:	4604      	mov	r4, r0
   235da:	f7ff f929 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   235de:	b110      	cbz	r0, 235e6 <_ZNK6tflite8Operator15builtin_optionsEv+0x12>
    auto p = data_ + field_offset;
   235e0:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   235e2:	5820      	ldr	r0, [r4, r0]
   235e4:	4418      	add	r0, r3
  }
   235e6:	bd10      	pop	{r4, pc}

000235e8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   235e8:	b538      	push	{r3, r4, r5, lr}
   235ea:	4605      	mov	r5, r0
   235ec:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   235ee:	f7ff f91f 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   235f2:	b100      	cbz	r0, 235f6 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0xe>
   235f4:	5c2c      	ldrb	r4, [r5, r0]
  }
   235f6:	4620      	mov	r0, r4
   235f8:	bd38      	pop	{r3, r4, r5, pc}

000235fa <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
   235fa:	b508      	push	{r3, lr}
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
   235fc:	2200      	movs	r2, #0
   235fe:	210a      	movs	r1, #10
   23600:	f7ff fff2 	bl	235e8 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
  }
   23604:	bd08      	pop	{r3, pc}

00023606 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   23606:	b538      	push	{r3, r4, r5, lr}
   23608:	4605      	mov	r5, r0
   2360a:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   2360c:	f7ff f910 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   23610:	b100      	cbz	r0, 23614 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_+0xe>
   23612:	582c      	ldr	r4, [r5, r0]
  }
   23614:	4620      	mov	r0, r4
   23616:	bd38      	pop	{r3, r4, r5, pc}

00023618 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   23618:	b538      	push	{r3, r4, r5, lr}
   2361a:	4605      	mov	r5, r0
   2361c:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   2361e:	f7ff f907 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   23622:	b100      	cbz	r0, 23626 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0xe>
   23624:	562c      	ldrsb	r4, [r5, r0]
  }
   23626:	4620      	mov	r0, r4
   23628:	bd38      	pop	{r3, r4, r5, pc}

0002362a <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   2362a:	b538      	push	{r3, r4, r5, lr}
   2362c:	4604      	mov	r4, r0
   2362e:	4615      	mov	r5, r2
    auto field_offset = GetOptionalFieldOffset(field);
   23630:	f7ff f8fe 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   23634:	b108      	cbz	r0, 2363a <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x10>
   23636:	4420      	add	r0, r4
   23638:	6805      	ldr	r5, [r0, #0]
  }
   2363a:	4628      	mov	r0, r5
   2363c:	bd38      	pop	{r3, r4, r5, pc}

0002363e <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:
#include "tensorflow/lite/c/common.h"

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
  if (!tensor->is_variable) {
   2363e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
   23642:	b510      	push	{r4, lr}
  if (!tensor->is_variable) {
   23644:	b173      	cbz	r3, 23664 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x26>
    return kTfLiteOk;
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
  if (tensor->type == kTfLiteInt8) {
   23646:	7803      	ldrb	r3, [r0, #0]
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
   23648:	6841      	ldr	r1, [r0, #4]
  if (tensor->type == kTfLiteInt8) {
   2364a:	2b09      	cmp	r3, #9
  int value = 0;
   2364c:	bf18      	it	ne
   2364e:	2200      	movne	r2, #0
  for (size_t i = 0; i < tensor->bytes; ++i) {
   23650:	f04f 0300 	mov.w	r3, #0
    value = tensor->params.zero_point;
   23654:	bf08      	it	eq
   23656:	6902      	ldreq	r2, [r0, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
   23658:	6984      	ldr	r4, [r0, #24]
   2365a:	429c      	cmp	r4, r3
   2365c:	d902      	bls.n	23664 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x26>
    *raw_ptr = value;
   2365e:	54ca      	strb	r2, [r1, r3]
  for (size_t i = 0; i < tensor->bytes; ++i) {
   23660:	3301      	adds	r3, #1
   23662:	e7f9      	b.n	23658 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x1a>
    raw_ptr++;
  }
#endif
  return kTfLiteOk;
}
   23664:	2000      	movs	r0, #0
   23666:	bd10      	pop	{r4, pc}

00023668 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   23668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   2366c:	2401      	movs	r4, #1
                         int total_signed_bits) {
   2366e:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   23670:	fa04 f000 	lsl.w	r0, r4, r0
   23674:	3801      	subs	r0, #1
                         int total_signed_bits) {
   23676:	4688      	mov	r8, r1
   23678:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   2367a:	f7ef ff7f 	bl	1357c <__aeabi_i2d>
   2367e:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   23680:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
   23684:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
   23686:	f1c0 0320 	rsb	r3, r0, #32
   2368a:	f1a0 0120 	sub.w	r1, r0, #32
   2368e:	fa24 f303 	lsr.w	r3, r4, r3
   23692:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   23696:	fa04 f000 	lsl.w	r0, r4, r0
   2369a:	4319      	orrs	r1, r3
   2369c:	f7ef ffaa 	bl	135f4 <__aeabi_l2d>
   236a0:	4602      	mov	r2, r0
   236a2:	460b      	mov	r3, r1
   236a4:	4630      	mov	r0, r6
   236a6:	4639      	mov	r1, r7
   236a8:	f7ef ffd2 	bl	13650 <__aeabi_dmul>
      (1ll << input_left_shift);
   236ac:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   236b0:	460f      	mov	r7, r1
      (1ll << input_left_shift);
   236b2:	f1a8 0120 	sub.w	r1, r8, #32
   236b6:	fa24 f303 	lsr.w	r3, r4, r3
   236ba:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   236be:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   236c0:	4319      	orrs	r1, r3
   236c2:	fa04 f008 	lsl.w	r0, r4, r8
   236c6:	f7ef ff95 	bl	135f4 <__aeabi_l2d>
   236ca:	4602      	mov	r2, r0
   236cc:	460b      	mov	r3, r1
  const double max_input_rescaled =
   236ce:	4630      	mov	r0, r6
   236d0:	4639      	mov	r1, r7
   236d2:	f7f0 f8e7 	bl	138a4 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   236d6:	f7f2 fc63 	bl	15fa0 <floor>
   236da:	f7f0 fa69 	bl	13bb0 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   236de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000236e2 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>:
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   236e2:	edd0 7a00 	vldr	s15, [r0]
   236e6:	eec0 7a27 	vdiv.f32	s15, s0, s15
  auto quantize = [scale, zero_point](float f) {
   236ea:	b510      	push	{r4, lr}
   236ec:	4604      	mov	r4, r0
   236ee:	ee17 0a90 	vmov	r0, s15
   236f2:	f7ef ff55 	bl	135a0 <__aeabi_f2d>
   236f6:	f7fa ff87 	bl	1e608 <round>
   236fa:	f7f0 fa81 	bl	13c00 <__aeabi_d2f>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   236fe:	ee07 0a90 	vmov	s15, r0
   23702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   23706:	ee17 0a90 	vmov	r0, s15
   2370a:	6863      	ldr	r3, [r4, #4]
  };
   2370c:	4418      	add	r0, r3
   2370e:	bd10      	pop	{r4, pc}

00023710 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
   23710:	6840      	ldr	r0, [r0, #4]
   23712:	6803      	ldr	r3, [r0, #0]
   23714:	68db      	ldr	r3, [r3, #12]
   23716:	4718      	bx	r3

00023718 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
   23718:	4770      	bx	lr

0002371a <_ZN6tflite14MicroAllocatorD1Ev>:
MicroAllocator::~MicroAllocator() {}
   2371a:	4770      	bx	lr

0002371c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   2371c:	4770      	bx	lr

0002371e <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
   2371e:	b510      	push	{r4, lr}
   23720:	4604      	mov	r4, r0
   23722:	f000 fa20 	bl	23b66 <_ZdlPv>
   23726:	4620      	mov	r0, r4
   23728:	bd10      	pop	{r4, pc}

0002372a <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   2372a:	b510      	push	{r4, lr}
   2372c:	4604      	mov	r4, r0
   2372e:	f000 fa1a 	bl	23b66 <_ZdlPv>
   23732:	4620      	mov	r0, r4
   23734:	bd10      	pop	{r4, pc}

00023736 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
   23736:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   23738:	2108      	movs	r1, #8
   2373a:	4604      	mov	r4, r0
   2373c:	f7ff f878 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   23740:	b110      	cbz	r0, 23748 <_ZNK6tflite22QuantizationParameters5scaleEv+0x12>
    auto p = data_ + field_offset;
   23742:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   23744:	5820      	ldr	r0, [r4, r0]
   23746:	4418      	add	r0, r3
  }
   23748:	bd10      	pop	{r4, pc}

0002374a <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
   2374a:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   2374c:	210a      	movs	r1, #10
   2374e:	4604      	mov	r4, r0
   23750:	f7ff f86e 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   23754:	b110      	cbz	r0, 2375c <_ZNK6tflite22QuantizationParameters10zero_pointEv+0x12>
    auto p = data_ + field_offset;
   23756:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   23758:	5820      	ldr	r0, [r4, r0]
   2375a:	4418      	add	r0, r3
  }
   2375c:	bd10      	pop	{r4, pc}

0002375e <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
   2375e:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   23760:	210e      	movs	r1, #14
   23762:	4604      	mov	r4, r0
   23764:	f7ff f864 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   23768:	b100      	cbz	r0, 2376c <_ZNK6tflite6Tensor11is_variableEv+0xe>
   2376a:	5c20      	ldrb	r0, [r4, r0]
  }
   2376c:	3800      	subs	r0, #0
   2376e:	bf18      	it	ne
   23770:	2001      	movne	r0, #1
   23772:	bd10      	pop	{r4, pc}

00023774 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   23774:	b510      	push	{r4, lr}
   23776:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   23778:	f7ff f85a 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   2377c:	b110      	cbz	r0, 23784 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x10>
    auto p = data_ + field_offset;
   2377e:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   23780:	5820      	ldr	r0, [r4, r0]
   23782:	4418      	add	r0, r3
  }
   23784:	bd10      	pop	{r4, pc}

00023786 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   23786:	b510      	push	{r4, lr}
   23788:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   2378a:	f7ff f851 	bl	22830 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   2378e:	b110      	cbz	r0, 23796 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x10>
    auto p = data_ + field_offset;
   23790:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   23792:	5820      	ldr	r0, [r4, r0]
   23794:	4418      	add	r0, r3
  }
   23796:	bd10      	pop	{r4, pc}

00023798 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   23798:	4770      	bx	lr

0002379a <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
   2379a:	b510      	push	{r4, lr}
   2379c:	4604      	mov	r4, r0
   2379e:	f000 f9e2 	bl	23b66 <_ZdlPv>
   237a2:	4620      	mov	r0, r4
   237a4:	bd10      	pop	{r4, pc}

000237a6 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
   237a6:	6900      	ldr	r0, [r0, #16]
   237a8:	4770      	bx	lr

000237aa <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
   237aa:	6940      	ldr	r0, [r0, #20]
   237ac:	4770      	bx	lr

000237ae <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:
size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
  return tail_ - head_;
   237ae:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
}
   237b2:	1a10      	subs	r0, r2, r0
   237b4:	4770      	bx	lr

000237b6 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
}
   237b6:	4770      	bx	lr

000237b8 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
   237b8:	6880      	ldr	r0, [r0, #8]
   237ba:	4770      	bx	lr

000237bc <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   237bc:	b510      	push	{r4, lr}
   237be:	4604      	mov	r4, r0
}
   237c0:	f000 f9d1 	bl	23b66 <_ZdlPv>
   237c4:	4620      	mov	r0, r4
   237c6:	bd10      	pop	{r4, pc}

000237c8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
   237c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (int i = 1; i < size; ++i) {
   237ca:	4604      	mov	r4, r0
   237cc:	460b      	mov	r3, r1
   237ce:	2501      	movs	r5, #1
    any_swapped = false;
   237d0:	2600      	movs	r6, #0
    for (int i = 1; i < size; ++i) {
   237d2:	4295      	cmp	r5, r2
   237d4:	da12      	bge.n	237fc <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x34>
      if (values[i - 1] < values[i]) {
   237d6:	e9d4 7c00 	ldrd	r7, ip, [r4]
   237da:	4567      	cmp	r7, ip
        values[i] = value_temp;
   237dc:	bfb8      	it	lt
   237de:	e9c4 c700 	strdlt	ip, r7, [r4]
    for (int i = 1; i < size; ++i) {
   237e2:	f105 0501 	add.w	r5, r5, #1
        ids[i - 1] = ids[i];
   237e6:	bfb8      	it	lt
   237e8:	e9d3 6700 	ldrdlt	r6, r7, [r3]
   237ec:	f104 0404 	add.w	r4, r4, #4
        ids[i] = id_temp;
   237f0:	bfbc      	itt	lt
   237f2:	e9c3 7600 	strdlt	r7, r6, [r3]
        any_swapped = true;
   237f6:	2601      	movlt	r6, #1
    for (int i = 1; i < size; ++i) {
   237f8:	3304      	adds	r3, #4
   237fa:	e7ea      	b.n	237d2 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
  do {
   237fc:	2e00      	cmp	r6, #0
   237fe:	d1e4      	bne.n	237ca <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
   23800:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023802 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
   23802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BufferRequirements* current = &requirements_[buffer_count_];
   23804:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
   23808:	9f08      	ldr	r7, [sp, #32]
   2380a:	6804      	ldr	r4, [r0, #0]
   2380c:	9700      	str	r7, [sp, #0]
   2380e:	68a4      	ldr	r4, [r4, #8]
   23810:	47a0      	blx	r4
   23812:	b928      	cbnz	r0, 23820 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1e>
  current->offline_offset = offline_offset;
   23814:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23816:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   2381a:	606b      	str	r3, [r5, #4]
}
   2381c:	b003      	add	sp, #12
   2381e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return kTfLiteError;
   23820:	2001      	movs	r0, #1
   23822:	e7fb      	b.n	2381c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1a>

00023824 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
    const int last_time_used) const {
   23824:	b510      	push	{r4, lr}
      &requirements_[entry->requirements_index];
   23826:	684c      	ldr	r4, [r1, #4]
  const BufferRequirements* entry_requirements =
   23828:	68c1      	ldr	r1, [r0, #12]
   2382a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
   2382e:	6888      	ldr	r0, [r1, #8]
   23830:	4298      	cmp	r0, r3
   23832:	dc05      	bgt.n	23840 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  if (first_time_used > entry_requirements->last_time_used) {
   23834:	68c8      	ldr	r0, [r1, #12]
   23836:	4290      	cmp	r0, r2
   23838:	bfb4      	ite	lt
   2383a:	2000      	movlt	r0, #0
   2383c:	2001      	movge	r0, #1
}
   2383e:	bd10      	pop	{r4, pc}
    return false;
   23840:	2000      	movs	r0, #0
   23842:	e7fc      	b.n	2383e <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1a>

00023844 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
   23844:	b570      	push	{r4, r5, r6, lr}
   23846:	4605      	mov	r5, r0
  if (start == nullptr) {
   23848:	b989      	cbnz	r1, 2386e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x2a>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
   2384a:	6a04      	ldr	r4, [r0, #32]
   2384c:	200c      	movs	r0, #12
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
   2384e:	260c      	movs	r6, #12
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
   23850:	69a9      	ldr	r1, [r5, #24]
   23852:	fb00 1404 	mla	r4, r0, r4, r1
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   23856:	4621      	mov	r1, r4
   23858:	4628      	mov	r0, r5
   2385a:	f7ff ffe3 	bl	23824 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
   2385e:	b950      	cbnz	r0, 23876 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>
    if (candidate_next_entry->next_entry_index == -1) {
   23860:	68a4      	ldr	r4, [r4, #8]
   23862:	1c61      	adds	r1, r4, #1
   23864:	d009      	beq.n	2387a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x36>
    candidate_next_entry =
   23866:	69a9      	ldr	r1, [r5, #24]
   23868:	fb06 1404 	mla	r4, r6, r4, r1
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   2386c:	e7f3      	b.n	23856 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x12>
    if (start->next_entry_index == -1) {
   2386e:	688c      	ldr	r4, [r1, #8]
   23870:	1c60      	adds	r0, r4, #1
   23872:	d1eb      	bne.n	2384c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8>
      return nullptr;
   23874:	2400      	movs	r4, #0
}
   23876:	4620      	mov	r0, r4
   23878:	bd70      	pop	{r4, r5, r6, pc}
      return nullptr;
   2387a:	4604      	mov	r4, r0
   2387c:	e7fb      	b.n	23876 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>

0002387e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   2387e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   23882:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   23886:	4604      	mov	r4, r0
   23888:	b085      	sub	sp, #20
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   2388a:	2b00      	cmp	r3, #0
   2388c:	f000 80ae 	beq.w	239ec <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
   23890:	6885      	ldr	r5, [r0, #8]
   23892:	2d00      	cmp	r5, #0
   23894:	f000 80aa 	beq.w	239ec <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
  need_to_calculate_offsets_ = false;
   23898:	e9d0 7604 	ldrd	r7, r6, [r0, #16]
   2389c:	2300      	movs	r3, #0
  int idx_from_head = 0;
   2389e:	461a      	mov	r2, r3
  need_to_calculate_offsets_ = false;
   238a0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
   238a4:	f8d4 c008 	ldr.w	ip, [r4, #8]
   238a8:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   238ac:	459c      	cmp	ip, r3
   238ae:	eb07 0082 	add.w	r0, r7, r2, lsl #2
   238b2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
   238b6:	dd1e      	ble.n	238f6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x78>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
   238b8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   238bc:	0119      	lsls	r1, r3, #4
   238be:	eb0c 1003 	add.w	r0, ip, r3, lsl #4
   238c2:	f8d0 8004 	ldr.w	r8, [r0, #4]
   238c6:	f85c c001 	ldr.w	ip, [ip, r1]
   238ca:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   238ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
   238d0:	d108      	bne.n	238e4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x66>
      idx_from_tail--;
   238d2:	3d01      	subs	r5, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
   238d4:	f847 c025 	str.w	ip, [r7, r5, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
   238d8:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
      buffer_offsets_[i] = -1;
   238dc:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
  for (int i = 0; i < buffer_count_; ++i) {
   238e0:	3301      	adds	r3, #1
   238e2:	e7df      	b.n	238a4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x26>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
   238e4:	f847 c00e 	str.w	ip, [r7, lr]
      buffer_ids_sorted_[idx_from_head] = i;
   238e8:	f846 300e 	str.w	r3, [r6, lr]
      buffer_offsets_[i] = requirements_[i].offline_offset;
   238ec:	6840      	ldr	r0, [r0, #4]
      idx_from_head++;
   238ee:	3201      	adds	r2, #1
      buffer_offsets_[i] = requirements_[i].offline_offset;
   238f0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      idx_from_head++;
   238f4:	e7f4      	b.n	238e0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x62>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   238f6:	ebac 0202 	sub.w	r2, ip, r2
   238fa:	f7ff ff65 	bl	237c8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  next_free_entry_ = 1;
   238fe:	2301      	movs	r3, #1
   23900:	2200      	movs	r2, #0
   23902:	e9c4 3207 	strd	r3, r2, [r4, #28]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
   23906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
   2390a:	69a6      	ldr	r6, [r4, #24]
  for (int i = 1; i < buffer_count_; ++i) {
   2390c:	2701      	movs	r7, #1
  first_entry->offset = buffer_offsets_[buffer_id];
   2390e:	46b2      	mov	sl, r6
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
   23910:	60b3      	str	r3, [r6, #8]
  int buffer_id = buffer_ids_sorted_[0];
   23912:	6963      	ldr	r3, [r4, #20]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   23914:	f8d4 800c 	ldr.w	r8, [r4, #12]
  int buffer_id = buffer_ids_sorted_[0];
   23918:	9301      	str	r3, [sp, #4]
   2391a:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
   2391c:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   23920:	eb08 1103 	add.w	r1, r8, r3, lsl #4
   23924:	6849      	ldr	r1, [r1, #4]
  first_entry->requirements_index = buffer_id;
   23926:	6073      	str	r3, [r6, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   23928:	3101      	adds	r1, #1
    buffer_offsets_[buffer_id] = 0;
   2392a:	bf08      	it	eq
   2392c:	f84b 2023 	streq.w	r2, [fp, r3, lsl #2]
  first_entry->offset = buffer_offsets_[buffer_id];
   23930:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
   23934:	6033      	str	r3, [r6, #0]
  for (int i = 1; i < buffer_count_; ++i) {
   23936:	68a3      	ldr	r3, [r4, #8]
   23938:	42bb      	cmp	r3, r7
   2393a:	dd57      	ble.n	239ec <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    buffer_id = buffer_ids_sorted_[i];
   2393c:	9b01      	ldr	r3, [sp, #4]
   2393e:	f853 9027 	ldr.w	r9, [r3, r7, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   23942:	eb08 1309 	add.w	r3, r8, r9, lsl #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
   23946:	685d      	ldr	r5, [r3, #4]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   23948:	ea4f 1209 	mov.w	r2, r9, lsl #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
   2394c:	1c69      	adds	r1, r5, #1
   2394e:	d120      	bne.n	23992 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x114>
      ListEntry* prior_entry = nullptr;
   23950:	2000      	movs	r0, #0
    const int wanted_last_time_used = wanted_requirements->last_time_used;
   23952:	edd3 7a03 	vldr	s15, [r3, #12]
    int candidate_offset = 0;
   23956:	4605      	mov	r5, r0
    const int wanted_size = wanted_requirements->size;
   23958:	f858 2002 	ldr.w	r2, [r8, r2]
   2395c:	9202      	str	r2, [sp, #8]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
   2395e:	689a      	ldr	r2, [r3, #8]
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
   23960:	4601      	mov	r1, r0
   23962:	9003      	str	r0, [sp, #12]
   23964:	ee17 3a90 	vmov	r3, s15
   23968:	4620      	mov	r0, r4
   2396a:	f7ff ff6b 	bl	23844 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
        if (prior_entry) {
   2396e:	9903      	ldr	r1, [sp, #12]
   23970:	b149      	cbz	r1, 23986 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x108>
              prior_entry->offset + candidate_requirements->size;
   23972:	684b      	ldr	r3, [r1, #4]
          const int prior_entry_offset =
   23974:	6809      	ldr	r1, [r1, #0]
              prior_entry->offset + candidate_requirements->size;
   23976:	ea4f 1c03 	mov.w	ip, r3, lsl #4
          const int prior_entry_offset =
   2397a:	f858 c00c 	ldr.w	ip, [r8, ip]
   2397e:	448c      	add	ip, r1
   23980:	4565      	cmp	r5, ip
   23982:	bfb8      	it	lt
   23984:	4665      	movlt	r5, ip
        if (next_entry == nullptr) {
   23986:	b120      	cbz	r0, 23992 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x114>
        const int gap = next_entry->offset - candidate_offset;
   23988:	6801      	ldr	r1, [r0, #0]
        if (gap >= wanted_size) {
   2398a:	9b02      	ldr	r3, [sp, #8]
        const int gap = next_entry->offset - candidate_offset;
   2398c:	1b49      	subs	r1, r1, r5
        if (gap >= wanted_size) {
   2398e:	428b      	cmp	r3, r1
   23990:	dce6      	bgt.n	23960 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe2>
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   23992:	220c      	movs	r2, #12
    buffer_offsets_[buffer_id] = candidate_offset;
   23994:	f84b 5029 	str.w	r5, [fp, r9, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   23998:	69e3      	ldr	r3, [r4, #28]
   2399a:	fb02 f103 	mul.w	r1, r2, r3
    new_entry->offset = candidate_offset;
   2399e:	5075      	str	r5, [r6, r1]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   239a0:	1872      	adds	r2, r6, r1
    ++next_free_entry_;
   239a2:	1c59      	adds	r1, r3, #1
    new_entry->requirements_index = buffer_id;
   239a4:	f8c2 9004 	str.w	r9, [r2, #4]
    ++next_free_entry_;
   239a8:	61e1      	str	r1, [r4, #28]
    if (first_entry->offset > candidate_offset) {
   239aa:	f8da 1000 	ldr.w	r1, [sl]
   239ae:	42a9      	cmp	r1, r5
   239b0:	dd05      	ble.n	239be <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x140>
      first_entry->next_entry_index = first_entry_index_;
   239b2:	4692      	mov	sl, r2
   239b4:	6a21      	ldr	r1, [r4, #32]
   239b6:	6091      	str	r1, [r2, #8]
      first_entry_index_ = new_entry_index;
   239b8:	6223      	str	r3, [r4, #32]
  for (int i = 1; i < buffer_count_; ++i) {
   239ba:	3701      	adds	r7, #1
   239bc:	e7bb      	b.n	23936 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb8>
   239be:	4651      	mov	r1, sl
        const int next_entry_index = current_entry->next_entry_index;
   239c0:	6888      	ldr	r0, [r1, #8]
        if (next_entry_index == -1) {
   239c2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   239c6:	d104      	bne.n	239d2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x154>
          current_entry->next_entry_index = new_entry_index;
   239c8:	608b      	str	r3, [r1, #8]
          new_entry->next_entry_index = -1;
   239ca:	6090      	str	r0, [r2, #8]
          break;
   239cc:	e7f5      	b.n	239ba <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13c>
   239ce:	4671      	mov	r1, lr
   239d0:	e7f6      	b.n	239c0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x142>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
   239d2:	f04f 0c0c 	mov.w	ip, #12
   239d6:	fb0c fc00 	mul.w	ip, ip, r0
   239da:	eb06 0e0c 	add.w	lr, r6, ip
        if (next_entry->offset > candidate_offset) {
   239de:	f856 c00c 	ldr.w	ip, [r6, ip]
   239e2:	45ac      	cmp	ip, r5
   239e4:	ddf3      	ble.n	239ce <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x150>
          new_entry->next_entry_index = current_entry->next_entry_index;
   239e6:	6090      	str	r0, [r2, #8]
          current_entry->next_entry_index = new_entry_index;
   239e8:	608b      	str	r3, [r1, #8]
          break;
   239ea:	e7e6      	b.n	239ba <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13c>
}
   239ec:	b005      	add	sp, #20
   239ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000239f2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
   239f2:	b570      	push	{r4, r5, r6, lr}
   239f4:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
   239f6:	f7ff ff42 	bl	2387e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
   239fa:	68a0      	ldr	r0, [r4, #8]
   239fc:	b1a8      	cbz	r0, 23a2a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
   239fe:	220c      	movs	r2, #12
  size_t max_size = 0;
   23a00:	2000      	movs	r0, #0
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
   23a02:	69a5      	ldr	r5, [r4, #24]
   23a04:	6a23      	ldr	r3, [r4, #32]
   23a06:	fb02 5303 	mla	r3, r2, r3, r5
  while (entry) {
   23a0a:	b173      	cbz	r3, 23a2a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
        &requirements_[entry->requirements_index];
   23a0c:	6859      	ldr	r1, [r3, #4]
    const size_t current_size = entry->offset + requirements->size;
   23a0e:	68e6      	ldr	r6, [r4, #12]
   23a10:	0109      	lsls	r1, r1, #4
   23a12:	5871      	ldr	r1, [r6, r1]
   23a14:	681e      	ldr	r6, [r3, #0]
    if (entry->next_entry_index == -1) {
   23a16:	689b      	ldr	r3, [r3, #8]
    const size_t current_size = entry->offset + requirements->size;
   23a18:	4431      	add	r1, r6
   23a1a:	4288      	cmp	r0, r1
   23a1c:	bf38      	it	cc
   23a1e:	4608      	movcc	r0, r1
    if (entry->next_entry_index == -1) {
   23a20:	1c59      	adds	r1, r3, #1
   23a22:	d002      	beq.n	23a2a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
   23a24:	fb02 5303 	mla	r3, r2, r3, r5
  while (entry) {
   23a28:	e7ef      	b.n	23a0a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x18>
}
   23a2a:	bd70      	pop	{r4, r5, r6, pc}

00023a2c <FftCompute>:
#define FIXED_POINT 16
#include "kiss_fft.h"
#include "tools/kiss_fftr.h"

void FftCompute(struct FftState* state, const int16_t* input,
                int input_scale_shift) {
   23a2c:	b4f0      	push	{r4, r5, r6, r7}
  const size_t input_size = state->input_size;
  const size_t fft_size = state->fft_size;
   23a2e:	e9d0 7302 	ldrd	r7, r3, [r0, #8]

  int16_t* fft_input = state->input;
  // First, scale the input by the given shift.
  size_t i;
  for (i = 0; i < input_size; ++i) {
   23a32:	2400      	movs	r4, #0
                int input_scale_shift) {
   23a34:	460e      	mov	r6, r1
  int16_t* fft_input = state->input;
   23a36:	6801      	ldr	r1, [r0, #0]
  for (i = 0; i < input_size; ++i) {
   23a38:	429c      	cmp	r4, r3
   23a3a:	d106      	bne.n	23a4a <FftCompute+0x1e>
    fft_input[i] = static_cast<int16_t>(static_cast<uint16_t>(input[i])
                                        << input_scale_shift);
  }
  // Zero out whatever else remains in the top part of the input.
  for (; i < fft_size; ++i) {
    fft_input[i] = 0;
   23a3c:	2200      	movs	r2, #0
  for (; i < fft_size; ++i) {
   23a3e:	42bb      	cmp	r3, r7
   23a40:	d20a      	bcs.n	23a58 <FftCompute+0x2c>
    fft_input[i] = 0;
   23a42:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  for (; i < fft_size; ++i) {
   23a46:	3301      	adds	r3, #1
   23a48:	e7f9      	b.n	23a3e <FftCompute+0x12>
    fft_input[i] = static_cast<int16_t>(static_cast<uint16_t>(input[i])
   23a4a:	f836 5014 	ldrh.w	r5, [r6, r4, lsl #1]
                                        << input_scale_shift);
   23a4e:	4095      	lsls	r5, r2
    fft_input[i] = static_cast<int16_t>(static_cast<uint16_t>(input[i])
   23a50:	f821 5014 	strh.w	r5, [r1, r4, lsl #1]
  for (i = 0; i < input_size; ++i) {
   23a54:	3401      	adds	r4, #1
   23a56:	e7ef      	b.n	23a38 <FftCompute+0xc>
  }

  // Apply the FFT.
  kiss_fftr(
   23a58:	6842      	ldr	r2, [r0, #4]
      reinterpret_cast<const kiss_fftr_cfg>(state->scratch),
      state->input,
      reinterpret_cast<kiss_fft_cpx*>(state->output));
}
   23a5a:	bcf0      	pop	{r4, r5, r6, r7}
  kiss_fftr(
   23a5c:	6900      	ldr	r0, [r0, #16]
   23a5e:	f7e9 b975 	b.w	cd4c <kiss_fftr>

00023a62 <FftInit>:

void FftInit(struct FftState* state) {
  // All the initialization is done in FftPopulateState()
}
   23a62:	4770      	bx	lr

00023a64 <FftReset>:

void FftReset(struct FftState* state) {
   23a64:	b510      	push	{r4, lr}
   23a66:	4604      	mov	r4, r0
  memset(state->input, 0, state->fft_size * sizeof(*state->input));
   23a68:	6882      	ldr	r2, [r0, #8]
   23a6a:	2100      	movs	r1, #0
   23a6c:	0052      	lsls	r2, r2, #1
   23a6e:	6800      	ldr	r0, [r0, #0]
   23a70:	f000 fd38 	bl	244e4 <memset>
  memset(state->output, 0, (state->fft_size / 2 + 1) * sizeof(*state->output));
   23a74:	68a2      	ldr	r2, [r4, #8]
   23a76:	6860      	ldr	r0, [r4, #4]
   23a78:	0852      	lsrs	r2, r2, #1
   23a7a:	3201      	adds	r2, #1
   23a7c:	2100      	movs	r1, #0
}
   23a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memset(state->output, 0, (state->fft_size / 2 + 1) * sizeof(*state->output));
   23a82:	0092      	lsls	r2, r2, #2
   23a84:	f000 bd2e 	b.w	244e4 <memset>

00023a88 <FftFreeStateContents>:

void FftFreeStateContents(struct FftState* state) {
   23a88:	b510      	push	{r4, lr}
   23a8a:	4604      	mov	r4, r0
  free(state->input);
   23a8c:	6800      	ldr	r0, [r0, #0]
   23a8e:	f7fd fb31 	bl	210f4 <free>
  free(state->output);
   23a92:	6860      	ldr	r0, [r4, #4]
   23a94:	f7fd fb2e 	bl	210f4 <free>
  free(state->scratch);
   23a98:	6920      	ldr	r0, [r4, #16]
}
   23a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  free(state->scratch);
   23a9e:	f7fd bb29 	b.w	210f4 <free>

00023aa2 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
   23aa2:	1e4b      	subs	r3, r1, #1
   23aa4:	4403      	add	r3, r0
   23aa6:	fbb3 f3f1 	udiv	r3, r3, r1
  return aligned_result;
}
   23aaa:	fb01 f003 	mul.w	r0, r1, r3
   23aae:	4770      	bx	lr

00023ab0 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
   23ab0:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
   23ab4:	4348      	muls	r0, r1
   23ab6:	4770      	bx	lr

00023ab8 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
   23ab8:	1e43      	subs	r3, r0, #1
   23aba:	440b      	add	r3, r1
   23abc:	fbb3 f3f1 	udiv	r3, r3, r1
  return aligned_size;
}
   23ac0:	fb01 f003 	mul.w	r0, r1, r3
   23ac4:	4770      	bx	lr

00023ac6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
   23ac6:	3801      	subs	r0, #1
   23ac8:	2808      	cmp	r0, #8
   23aca:	d810      	bhi.n	23aee <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x28>
   23acc:	e8df f000 	tbb	[pc, r0]
   23ad0:	0d0b0505 	.word	0x0d0b0505
   23ad4:	0d090b0f 	.word	0x0d090b0f
   23ad8:	0b          	.byte	0x0b
   23ad9:	00          	.byte	0x00
    case kTfLiteFloat32:
      *size = sizeof(float);
   23ada:	2304      	movs	r3, #4
      *size = sizeof(float) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
   23adc:	2000      	movs	r0, #0
      *size = sizeof(int16_t);
   23ade:	600b      	str	r3, [r1, #0]
      break;
   23ae0:	4770      	bx	lr
      *size = sizeof(int16_t);
   23ae2:	2302      	movs	r3, #2
   23ae4:	e7fa      	b.n	23adc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x16>
      *size = sizeof(uint8_t);
   23ae6:	2301      	movs	r3, #1
   23ae8:	e7f8      	b.n	23adc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x16>
      *size = sizeof(int64_t);
   23aea:	2308      	movs	r3, #8
   23aec:	e7f6      	b.n	23adc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x16>
  return kTfLiteOk;
   23aee:	2001      	movs	r0, #1
}
   23af0:	4770      	bx	lr

00023af2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
   23af2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   23af6:	460e      	mov	r6, r1
    return data_ - ReadScalar<soffset_t>(data_);
   23af8:	6801      	ldr	r1, [r0, #0]
   23afa:	4617      	mov	r7, r2
   23afc:	1a41      	subs	r1, r0, r1
   23afe:	f8b1 c000 	ldrh.w	ip, [r1]
   23b02:	461a      	mov	r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   23b04:	f1bc 0f04 	cmp.w	ip, #4
   23b08:	d92a      	bls.n	23b60 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
   23b0a:	888b      	ldrh	r3, [r1, #4]
    auto p = data_ + field_offset;
   23b0c:	18c4      	adds	r4, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   23b0e:	b173      	cbz	r3, 23b2e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3c>
   23b10:	58c3      	ldr	r3, [r0, r3]
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
   23b12:	18e5      	adds	r5, r4, r3
   23b14:	d00b      	beq.n	23b2e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3c>
  uoffset_t Length() const { return size(); }
   23b16:	f854 8003 	ldr.w	r8, [r4, r3]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   23b1a:	2300      	movs	r3, #0
  int element_count = 1;
   23b1c:	2401      	movs	r4, #1
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   23b1e:	4543      	cmp	r3, r8
   23b20:	d006      	beq.n	23b30 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
   23b22:	f855 ef04 	ldr.w	lr, [r5, #4]!
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   23b26:	3301      	adds	r3, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
   23b28:	fb0e f404 	mul.w	r4, lr, r4
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   23b2c:	e7f7      	b.n	23b1e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
  int element_count = 1;
   23b2e:	2401      	movs	r4, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   23b30:	f1bc 0f06 	cmp.w	ip, #6
   23b34:	d915      	bls.n	23b62 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x70>
   23b36:	88cd      	ldrh	r5, [r1, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   23b38:	b105      	cbz	r5, 23b3c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4a>
   23b3a:	5745      	ldrsb	r5, [r0, r5]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
   23b3c:	f10d 0107 	add.w	r1, sp, #7
   23b40:	b2e8      	uxtb	r0, r5
   23b42:	f7f8 fd4d 	bl	1c5e0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   23b46:	b940      	cbnz	r0, 23b5a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x68>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
   23b48:	4639      	mov	r1, r7
   23b4a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23b4e:	f7ff ffba 	bl	23ac6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   23b52:	b910      	cbnz	r0, 23b5a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x68>
  *bytes = element_count * (*type_size);
   23b54:	683b      	ldr	r3, [r7, #0]
   23b56:	435c      	muls	r4, r3
   23b58:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
}
   23b5a:	b002      	add	sp, #8
   23b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int element_count = 1;
   23b60:	2401      	movs	r4, #1
   23b62:	2500      	movs	r5, #0
   23b64:	e7ea      	b.n	23b3c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4a>

00023b66 <_ZdlPv>:
   23b66:	f7fd bac5 	b.w	210f4 <free>

00023b6a <_ZdaPv>:
   23b6a:	f7ff bffc 	b.w	23b66 <_ZdlPv>

00023b6e <__cxa_guard_release>:
   23b6e:	2301      	movs	r3, #1
   23b70:	6003      	str	r3, [r0, #0]
   23b72:	4770      	bx	lr

00023b74 <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
   23b74:	b510      	push	{r4, lr}
   23b76:	4604      	mov	r4, r0
   23b78:	f7fa f856 	bl	1dc28 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>
   23b7c:	2104      	movs	r1, #4
   23b7e:	4620      	mov	r0, r4
   23b80:	f000 f8fc 	bl	23d7c <_ZdlPvj>
   23b84:	4620      	mov	r0, r4
   23b86:	bd10      	pop	{r4, pc}

00023b88 <_Znaj>:
   23b88:	f7fa b932 	b.w	1ddf0 <_Znwj>

00023b8c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   23b8c:	b510      	push	{r4, lr}
   23b8e:	4604      	mov	r4, r0
   23b90:	f7fa f85a 	bl	1dc48 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   23b94:	210c      	movs	r1, #12
   23b96:	4620      	mov	r0, r4
   23b98:	f000 f8f0 	bl	23d7c <_ZdlPvj>
   23b9c:	4620      	mov	r0, r4
   23b9e:	bd10      	pop	{r4, pc}

00023ba0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   23ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23ba2:	9f08      	ldr	r7, [sp, #32]
   23ba4:	4605      	mov	r5, r0
   23ba6:	460e      	mov	r6, r1
   23ba8:	4614      	mov	r4, r2
   23baa:	4297      	cmp	r7, r2
   23bac:	d00a      	beq.n	23bc4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   23bae:	68a8      	ldr	r0, [r5, #8]
   23bb0:	4631      	mov	r1, r6
   23bb2:	6802      	ldr	r2, [r0, #0]
   23bb4:	9708      	str	r7, [sp, #32]
   23bb6:	6a15      	ldr	r5, [r2, #32]
   23bb8:	4622      	mov	r2, r4
   23bba:	46ac      	mov	ip, r5
   23bbc:	b003      	add	sp, #12
   23bbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   23bc2:	4760      	bx	ip
   23bc4:	4619      	mov	r1, r3
   23bc6:	9301      	str	r3, [sp, #4]
   23bc8:	f000 f858 	bl	23c7c <_ZNKSt9type_infoeqERKS_>
   23bcc:	9b01      	ldr	r3, [sp, #4]
   23bce:	2800      	cmp	r0, #0
   23bd0:	d0ed      	beq.n	23bae <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   23bd2:	2006      	movs	r0, #6
   23bd4:	b003      	add	sp, #12
   23bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023bd8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   23bd8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23bdc:	460d      	mov	r5, r1
   23bde:	4619      	mov	r1, r3
   23be0:	4681      	mov	r9, r0
   23be2:	4617      	mov	r7, r2
   23be4:	4698      	mov	r8, r3
   23be6:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   23bea:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   23bee:	f000 f845 	bl	23c7c <_ZNKSt9type_infoeqERKS_>
   23bf2:	b190      	cbz	r0, 23c1a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   23bf4:	2d00      	cmp	r5, #0
   23bf6:	6034      	str	r4, [r6, #0]
   23bf8:	7137      	strb	r7, [r6, #4]
   23bfa:	db09      	blt.n	23c10 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   23bfc:	1961      	adds	r1, r4, r5
   23bfe:	458a      	cmp	sl, r1
   23c00:	bf0c      	ite	eq
   23c02:	2106      	moveq	r1, #6
   23c04:	2101      	movne	r1, #1
   23c06:	71b1      	strb	r1, [r6, #6]
   23c08:	2000      	movs	r0, #0
   23c0a:	b001      	add	sp, #4
   23c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23c10:	3502      	adds	r5, #2
   23c12:	d1f9      	bne.n	23c08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   23c14:	2301      	movs	r3, #1
   23c16:	71b3      	strb	r3, [r6, #6]
   23c18:	e7f6      	b.n	23c08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   23c1a:	4554      	cmp	r4, sl
   23c1c:	d106      	bne.n	23c2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   23c1e:	4659      	mov	r1, fp
   23c20:	4648      	mov	r0, r9
   23c22:	f000 f82b 	bl	23c7c <_ZNKSt9type_infoeqERKS_>
   23c26:	b108      	cbz	r0, 23c2c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   23c28:	7177      	strb	r7, [r6, #5]
   23c2a:	e7ed      	b.n	23c08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   23c2c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   23c30:	463a      	mov	r2, r7
   23c32:	4629      	mov	r1, r5
   23c34:	6803      	ldr	r3, [r0, #0]
   23c36:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   23c3a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   23c3e:	69dc      	ldr	r4, [r3, #28]
   23c40:	4643      	mov	r3, r8
   23c42:	46a4      	mov	ip, r4
   23c44:	b001      	add	sp, #4
   23c46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c4a:	4760      	bx	ip

00023c4c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   23c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c50:	4607      	mov	r7, r0
   23c52:	460c      	mov	r4, r1
   23c54:	4615      	mov	r5, r2
   23c56:	461e      	mov	r6, r3
   23c58:	f000 f86f 	bl	23d3a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   23c5c:	b948      	cbnz	r0, 23c72 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   23c5e:	68b8      	ldr	r0, [r7, #8]
   23c60:	462a      	mov	r2, r5
   23c62:	4621      	mov	r1, r4
   23c64:	6803      	ldr	r3, [r0, #0]
   23c66:	699f      	ldr	r7, [r3, #24]
   23c68:	4633      	mov	r3, r6
   23c6a:	46bc      	mov	ip, r7
   23c6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23c70:	4760      	bx	ip
   23c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023c76 <_ZNSt9type_infoD1Ev>:
   23c76:	4770      	bx	lr

00023c78 <_ZNKSt9type_info14__is_pointer_pEv>:
   23c78:	2000      	movs	r0, #0
   23c7a:	4770      	bx	lr

00023c7c <_ZNKSt9type_infoeqERKS_>:
   23c7c:	4281      	cmp	r1, r0
   23c7e:	b508      	push	{r3, lr}
   23c80:	d00e      	beq.n	23ca0 <_ZNKSt9type_infoeqERKS_+0x24>
   23c82:	6840      	ldr	r0, [r0, #4]
   23c84:	7803      	ldrb	r3, [r0, #0]
   23c86:	2b2a      	cmp	r3, #42	; 0x2a
   23c88:	d00c      	beq.n	23ca4 <_ZNKSt9type_infoeqERKS_+0x28>
   23c8a:	6849      	ldr	r1, [r1, #4]
   23c8c:	780b      	ldrb	r3, [r1, #0]
   23c8e:	2b2a      	cmp	r3, #42	; 0x2a
   23c90:	bf08      	it	eq
   23c92:	3101      	addeq	r1, #1
   23c94:	f7f2 f8e6 	bl	15e64 <strcmp>
   23c98:	fab0 f080 	clz	r0, r0
   23c9c:	0940      	lsrs	r0, r0, #5
   23c9e:	bd08      	pop	{r3, pc}
   23ca0:	2001      	movs	r0, #1
   23ca2:	e7fc      	b.n	23c9e <_ZNKSt9type_infoeqERKS_+0x22>
   23ca4:	2000      	movs	r0, #0
   23ca6:	e7fa      	b.n	23c9e <_ZNKSt9type_infoeqERKS_+0x22>

00023ca8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   23ca8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   23caa:	2400      	movs	r4, #0
   23cac:	2310      	movs	r3, #16
   23cae:	4615      	mov	r5, r2
   23cb0:	6812      	ldr	r2, [r2, #0]
   23cb2:	9400      	str	r4, [sp, #0]
   23cb4:	f88d 4004 	strb.w	r4, [sp, #4]
   23cb8:	e9cd 3402 	strd	r3, r4, [sp, #8]
   23cbc:	6803      	ldr	r3, [r0, #0]
   23cbe:	699e      	ldr	r6, [r3, #24]
   23cc0:	466b      	mov	r3, sp
   23cc2:	47b0      	blx	r6
   23cc4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   23cc8:	f003 0306 	and.w	r3, r3, #6
   23ccc:	2b06      	cmp	r3, #6
   23cce:	bf05      	ittet	eq
   23cd0:	9b00      	ldreq	r3, [sp, #0]
   23cd2:	2001      	moveq	r0, #1
   23cd4:	4620      	movne	r0, r4
   23cd6:	602b      	streq	r3, [r5, #0]
   23cd8:	b004      	add	sp, #16
   23cda:	bd70      	pop	{r4, r5, r6, pc}

00023cdc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   23cdc:	9800      	ldr	r0, [sp, #0]
   23cde:	4290      	cmp	r0, r2
   23ce0:	bf14      	ite	ne
   23ce2:	2001      	movne	r0, #1
   23ce4:	2006      	moveq	r0, #6
   23ce6:	4770      	bx	lr

00023ce8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   23ce8:	b510      	push	{r4, lr}
   23cea:	4604      	mov	r4, r0
   23cec:	f7f9 ffb6 	bl	1dc5c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   23cf0:	2108      	movs	r1, #8
   23cf2:	4620      	mov	r0, r4
   23cf4:	f000 f842 	bl	23d7c <_ZdlPvj>
   23cf8:	4620      	mov	r0, r4
   23cfa:	bd10      	pop	{r4, pc}

00023cfc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   23cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d00:	f8dd 8018 	ldr.w	r8, [sp, #24]
   23d04:	461f      	mov	r7, r3
   23d06:	4606      	mov	r6, r0
   23d08:	4615      	mov	r5, r2
   23d0a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   23d0e:	4598      	cmp	r8, r3
   23d10:	d107      	bne.n	23d22 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   23d12:	9907      	ldr	r1, [sp, #28]
   23d14:	f7ff ffb2 	bl	23c7c <_ZNKSt9type_infoeqERKS_>
   23d18:	b118      	cbz	r0, 23d22 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   23d1a:	7165      	strb	r5, [r4, #5]
   23d1c:	2000      	movs	r0, #0
   23d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23d22:	4639      	mov	r1, r7
   23d24:	4630      	mov	r0, r6
   23d26:	f7ff ffa9 	bl	23c7c <_ZNKSt9type_infoeqERKS_>
   23d2a:	2800      	cmp	r0, #0
   23d2c:	d0f6      	beq.n	23d1c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   23d2e:	2301      	movs	r3, #1
   23d30:	f8c4 8000 	str.w	r8, [r4]
   23d34:	7125      	strb	r5, [r4, #4]
   23d36:	71a3      	strb	r3, [r4, #6]
   23d38:	e7f0      	b.n	23d1c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

00023d3a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   23d3a:	b538      	push	{r3, r4, r5, lr}
   23d3c:	4615      	mov	r5, r2
   23d3e:	461c      	mov	r4, r3
   23d40:	f7ff ff9c 	bl	23c7c <_ZNKSt9type_infoeqERKS_>
   23d44:	b120      	cbz	r0, 23d50 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   23d46:	2308      	movs	r3, #8
   23d48:	6025      	str	r5, [r4, #0]
   23d4a:	60e3      	str	r3, [r4, #12]
   23d4c:	2306      	movs	r3, #6
   23d4e:	7123      	strb	r3, [r4, #4]
   23d50:	bd38      	pop	{r3, r4, r5, pc}

00023d52 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   23d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23d54:	4605      	mov	r5, r0
   23d56:	460c      	mov	r4, r1
   23d58:	461e      	mov	r6, r3
   23d5a:	9201      	str	r2, [sp, #4]
   23d5c:	f7ff ff8e 	bl	23c7c <_ZNKSt9type_infoeqERKS_>
   23d60:	b950      	cbnz	r0, 23d78 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   23d62:	2e03      	cmp	r6, #3
   23d64:	d808      	bhi.n	23d78 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   23d66:	6823      	ldr	r3, [r4, #0]
   23d68:	4629      	mov	r1, r5
   23d6a:	9a01      	ldr	r2, [sp, #4]
   23d6c:	4620      	mov	r0, r4
   23d6e:	695b      	ldr	r3, [r3, #20]
   23d70:	b002      	add	sp, #8
   23d72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   23d76:	4718      	bx	r3
   23d78:	b002      	add	sp, #8
   23d7a:	bd70      	pop	{r4, r5, r6, pc}

00023d7c <_ZdlPvj>:
   23d7c:	f7ff bef3 	b.w	23b66 <_ZdlPv>

00023d80 <__cxa_allocate_exception>:
   23d80:	b510      	push	{r4, lr}
   23d82:	f100 0480 	add.w	r4, r0, #128	; 0x80
   23d86:	4620      	mov	r0, r4
   23d88:	f7fd f9ac 	bl	210e4 <malloc>
   23d8c:	4603      	mov	r3, r0
   23d8e:	b930      	cbnz	r0, 23d9e <__cxa_allocate_exception+0x1e>
   23d90:	4620      	mov	r0, r4
   23d92:	f7f9 ffa5 	bl	1dce0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
   23d96:	4603      	mov	r3, r0
   23d98:	b908      	cbnz	r0, 23d9e <__cxa_allocate_exception+0x1e>
   23d9a:	f000 f823 	bl	23de4 <_ZSt9terminatev>
   23d9e:	2280      	movs	r2, #128	; 0x80
   23da0:	2100      	movs	r1, #0
   23da2:	4618      	mov	r0, r3
   23da4:	f000 fb9e 	bl	244e4 <memset>
   23da8:	3080      	adds	r0, #128	; 0x80
   23daa:	bd10      	pop	{r4, pc}

00023dac <_ZNSt9exceptionD1Ev>:
   23dac:	4770      	bx	lr

00023dae <_ZNSt13bad_exceptionD1Ev>:
   23dae:	4770      	bx	lr

00023db0 <_ZNSt13bad_exceptionD0Ev>:
   23db0:	b510      	push	{r4, lr}
   23db2:	4604      	mov	r4, r0
   23db4:	2104      	movs	r1, #4
   23db6:	f7ff ffe1 	bl	23d7c <_ZdlPvj>
   23dba:	4620      	mov	r0, r4
   23dbc:	bd10      	pop	{r4, pc}

00023dbe <_ZN10__cxxabiv111__terminateEPFvvE>:
   23dbe:	b507      	push	{r0, r1, r2, lr}
   23dc0:	4780      	blx	r0
   23dc2:	f000 fb45 	bl	24450 <abort>
   23dc6:	f000 f939 	bl	2403c <__cxa_begin_catch>
   23dca:	f000 fb41 	bl	24450 <abort>
   23dce:	460c      	mov	r4, r1
   23dd0:	9001      	str	r0, [sp, #4]
   23dd2:	f000 f95c 	bl	2408e <__cxa_end_catch>
   23dd6:	9801      	ldr	r0, [sp, #4]
   23dd8:	3401      	adds	r4, #1
   23dda:	d001      	beq.n	23de0 <_ZN10__cxxabiv111__terminateEPFvvE+0x22>
   23ddc:	f000 f88c 	bl	23ef8 <__cxa_end_cleanup>
   23de0:	f7fa f890 	bl	1df04 <__cxa_call_unexpected>

00023de4 <_ZSt9terminatev>:
   23de4:	b508      	push	{r3, lr}
   23de6:	f7f9 ffcb 	bl	1dd80 <_ZSt13get_terminatev>
   23dea:	f7ff ffe8 	bl	23dbe <_ZN10__cxxabiv111__terminateEPFvvE>

00023dee <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   23dee:	b508      	push	{r3, lr}
   23df0:	4780      	blx	r0
   23df2:	f7ff fff7 	bl	23de4 <_ZSt9terminatev>

00023df6 <_ZSt10unexpectedv>:
   23df6:	b508      	push	{r3, lr}
   23df8:	f7f9 ffc8 	bl	1dd8c <_ZSt14get_unexpectedv>
   23dfc:	f7ff fff7 	bl	23dee <_ZN10__cxxabiv112__unexpectedEPFvvE>

00023e00 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   23e00:	2801      	cmp	r0, #1
   23e02:	b507      	push	{r0, r1, r2, lr}
   23e04:	d903      	bls.n	23e0e <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   23e06:	f851 0c14 	ldr.w	r0, [r1, #-20]
   23e0a:	f7ff ffd8 	bl	23dbe <_ZN10__cxxabiv111__terminateEPFvvE>
   23e0e:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   23e12:	e8d3 2fef 	ldaex	r2, [r3]
   23e16:	3a01      	subs	r2, #1
   23e18:	e8c3 2fe0 	stlex	r0, r2, [r3]
   23e1c:	2800      	cmp	r0, #0
   23e1e:	d1f8      	bne.n	23e12 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x12>
   23e20:	b962      	cbnz	r2, 23e3c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   23e22:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   23e26:	f101 0058 	add.w	r0, r1, #88	; 0x58
   23e2a:	b113      	cbz	r3, 23e32 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x32>
   23e2c:	9001      	str	r0, [sp, #4]
   23e2e:	4798      	blx	r3
   23e30:	9801      	ldr	r0, [sp, #4]
   23e32:	b003      	add	sp, #12
   23e34:	f85d eb04 	ldr.w	lr, [sp], #4
   23e38:	f7f9 bf76 	b.w	1dd28 <__cxa_free_exception>
   23e3c:	b003      	add	sp, #12
   23e3e:	f85d fb04 	ldr.w	pc, [sp], #4

00023e42 <__cxa_throw>:
   23e42:	b513      	push	{r0, r1, r4, lr}
   23e44:	4604      	mov	r4, r0
   23e46:	e9cd 2100 	strd	r2, r1, [sp]
   23e4a:	f7fa f8d7 	bl	1dffc <__cxa_get_globals>
   23e4e:	6843      	ldr	r3, [r0, #4]
   23e50:	3301      	adds	r3, #1
   23e52:	e9dd 2100 	ldrd	r2, r1, [sp]
   23e56:	6043      	str	r3, [r0, #4]
   23e58:	4620      	mov	r0, r4
   23e5a:	f7f9 ff9d 	bl	1dd98 <__cxa_init_primary_exception>
   23e5e:	2301      	movs	r3, #1
   23e60:	4604      	mov	r4, r0
   23e62:	f844 3b28 	str.w	r3, [r4], #40
   23e66:	4620      	mov	r0, r4
   23e68:	f7f1 f80c 	bl	14e84 <_Unwind_RaiseException>
   23e6c:	4620      	mov	r0, r4
   23e6e:	f000 f8e5 	bl	2403c <__cxa_begin_catch>
   23e72:	f7ff ffb7 	bl	23de4 <_ZSt9terminatev>

00023e76 <__cxa_rethrow>:
   23e76:	b510      	push	{r4, lr}
   23e78:	f7fa f8c0 	bl	1dffc <__cxa_get_globals>
   23e7c:	e9d0 4200 	ldrd	r4, r2, [r0]
   23e80:	3201      	adds	r2, #1
   23e82:	6042      	str	r2, [r0, #4]
   23e84:	b34c      	cbz	r4, 23eda <__cxa_rethrow+0x64>
   23e86:	f894 2020 	ldrb.w	r2, [r4, #32]
   23e8a:	2a47      	cmp	r2, #71	; 0x47
   23e8c:	d127      	bne.n	23ede <__cxa_rethrow+0x68>
   23e8e:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   23e92:	2a4e      	cmp	r2, #78	; 0x4e
   23e94:	d123      	bne.n	23ede <__cxa_rethrow+0x68>
   23e96:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   23e9a:	2a55      	cmp	r2, #85	; 0x55
   23e9c:	d11f      	bne.n	23ede <__cxa_rethrow+0x68>
   23e9e:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   23ea2:	2a43      	cmp	r2, #67	; 0x43
   23ea4:	d11b      	bne.n	23ede <__cxa_rethrow+0x68>
   23ea6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   23eaa:	2a43      	cmp	r2, #67	; 0x43
   23eac:	d117      	bne.n	23ede <__cxa_rethrow+0x68>
   23eae:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   23eb2:	2a2b      	cmp	r2, #43	; 0x2b
   23eb4:	d113      	bne.n	23ede <__cxa_rethrow+0x68>
   23eb6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   23eba:	2a2b      	cmp	r2, #43	; 0x2b
   23ebc:	d10f      	bne.n	23ede <__cxa_rethrow+0x68>
   23ebe:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   23ec2:	2a01      	cmp	r2, #1
   23ec4:	d80b      	bhi.n	23ede <__cxa_rethrow+0x68>
   23ec6:	6962      	ldr	r2, [r4, #20]
   23ec8:	4252      	negs	r2, r2
   23eca:	6162      	str	r2, [r4, #20]
   23ecc:	3420      	adds	r4, #32
   23ece:	4620      	mov	r0, r4
   23ed0:	f7f0 fffc 	bl	14ecc <_Unwind_Resume_or_Rethrow>
   23ed4:	4620      	mov	r0, r4
   23ed6:	f000 f8b1 	bl	2403c <__cxa_begin_catch>
   23eda:	f7ff ff83 	bl	23de4 <_ZSt9terminatev>
   23ede:	2200      	movs	r2, #0
   23ee0:	6002      	str	r2, [r0, #0]
   23ee2:	e7f3      	b.n	23ecc <__cxa_rethrow+0x56>

00023ee4 <_ZNSt9bad_allocD0Ev>:
   23ee4:	b510      	push	{r4, lr}
   23ee6:	4604      	mov	r4, r0
   23ee8:	f7f9 ffa4 	bl	1de34 <_ZNSt9bad_allocD1Ev>
   23eec:	2104      	movs	r1, #4
   23eee:	4620      	mov	r0, r4
   23ef0:	f7ff ff44 	bl	23d7c <_ZdlPvj>
   23ef4:	4620      	mov	r0, r4
   23ef6:	bd10      	pop	{r4, pc}

00023ef8 <__cxa_end_cleanup>:
   23ef8:	b41e      	push	{r1, r2, r3, r4}
   23efa:	f000 f83d 	bl	23f78 <__gnu_end_cleanup>
   23efe:	bc1e      	pop	{r1, r2, r3, r4}
   23f00:	f7f0 ffd2 	bl	14ea8 <_Unwind_Resume>

00023f04 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   23f04:	7803      	ldrb	r3, [r0, #0]
   23f06:	2b47      	cmp	r3, #71	; 0x47
   23f08:	d117      	bne.n	23f3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   23f0a:	7843      	ldrb	r3, [r0, #1]
   23f0c:	2b4e      	cmp	r3, #78	; 0x4e
   23f0e:	d114      	bne.n	23f3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   23f10:	7883      	ldrb	r3, [r0, #2]
   23f12:	2b55      	cmp	r3, #85	; 0x55
   23f14:	d111      	bne.n	23f3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   23f16:	78c3      	ldrb	r3, [r0, #3]
   23f18:	2b43      	cmp	r3, #67	; 0x43
   23f1a:	d10e      	bne.n	23f3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   23f1c:	7903      	ldrb	r3, [r0, #4]
   23f1e:	2b43      	cmp	r3, #67	; 0x43
   23f20:	d10b      	bne.n	23f3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   23f22:	7943      	ldrb	r3, [r0, #5]
   23f24:	2b2b      	cmp	r3, #43	; 0x2b
   23f26:	d108      	bne.n	23f3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   23f28:	7983      	ldrb	r3, [r0, #6]
   23f2a:	2b2b      	cmp	r3, #43	; 0x2b
   23f2c:	d105      	bne.n	23f3a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   23f2e:	79c0      	ldrb	r0, [r0, #7]
   23f30:	2801      	cmp	r0, #1
   23f32:	bf8c      	ite	hi
   23f34:	2000      	movhi	r0, #0
   23f36:	2001      	movls	r0, #1
   23f38:	4770      	bx	lr
   23f3a:	2000      	movs	r0, #0
   23f3c:	4770      	bx	lr

00023f3e <__cxa_begin_cleanup>:
   23f3e:	b510      	push	{r4, lr}
   23f40:	4604      	mov	r4, r0
   23f42:	f7fa f85b 	bl	1dffc <__cxa_get_globals>
   23f46:	4602      	mov	r2, r0
   23f48:	4620      	mov	r0, r4
   23f4a:	f1a4 0120 	sub.w	r1, r4, #32
   23f4e:	f7ff ffd9 	bl	23f04 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   23f52:	b160      	cbz	r0, 23f6e <__cxa_begin_cleanup+0x30>
   23f54:	f854 3c04 	ldr.w	r3, [r4, #-4]
   23f58:	3301      	adds	r3, #1
   23f5a:	2b01      	cmp	r3, #1
   23f5c:	f844 3c04 	str.w	r3, [r4, #-4]
   23f60:	d103      	bne.n	23f6a <__cxa_begin_cleanup+0x2c>
   23f62:	6893      	ldr	r3, [r2, #8]
   23f64:	f844 3c08 	str.w	r3, [r4, #-8]
   23f68:	6091      	str	r1, [r2, #8]
   23f6a:	2001      	movs	r0, #1
   23f6c:	bd10      	pop	{r4, pc}
   23f6e:	6893      	ldr	r3, [r2, #8]
   23f70:	2b00      	cmp	r3, #0
   23f72:	d0f9      	beq.n	23f68 <__cxa_begin_cleanup+0x2a>
   23f74:	f7ff ff36 	bl	23de4 <_ZSt9terminatev>

00023f78 <__gnu_end_cleanup>:
   23f78:	b510      	push	{r4, lr}
   23f7a:	f7fa f83f 	bl	1dffc <__cxa_get_globals>
   23f7e:	6882      	ldr	r2, [r0, #8]
   23f80:	4601      	mov	r1, r0
   23f82:	b90a      	cbnz	r2, 23f88 <__gnu_end_cleanup+0x10>
   23f84:	f7ff ff2e 	bl	23de4 <_ZSt9terminatev>
   23f88:	f102 0420 	add.w	r4, r2, #32
   23f8c:	4620      	mov	r0, r4
   23f8e:	f7ff ffb9 	bl	23f04 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   23f92:	b140      	cbz	r0, 23fa6 <__gnu_end_cleanup+0x2e>
   23f94:	69d3      	ldr	r3, [r2, #28]
   23f96:	3b01      	subs	r3, #1
   23f98:	61d3      	str	r3, [r2, #28]
   23f9a:	b913      	cbnz	r3, 23fa2 <__gnu_end_cleanup+0x2a>
   23f9c:	6990      	ldr	r0, [r2, #24]
   23f9e:	6088      	str	r0, [r1, #8]
   23fa0:	6193      	str	r3, [r2, #24]
   23fa2:	4620      	mov	r0, r4
   23fa4:	bd10      	pop	{r4, pc}
   23fa6:	6088      	str	r0, [r1, #8]
   23fa8:	e7fb      	b.n	23fa2 <__gnu_end_cleanup+0x2a>

00023faa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   23faa:	7803      	ldrb	r3, [r0, #0]
   23fac:	2b47      	cmp	r3, #71	; 0x47
   23fae:	d117      	bne.n	23fe0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   23fb0:	7843      	ldrb	r3, [r0, #1]
   23fb2:	2b4e      	cmp	r3, #78	; 0x4e
   23fb4:	d114      	bne.n	23fe0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   23fb6:	7883      	ldrb	r3, [r0, #2]
   23fb8:	2b55      	cmp	r3, #85	; 0x55
   23fba:	d111      	bne.n	23fe0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   23fbc:	78c3      	ldrb	r3, [r0, #3]
   23fbe:	2b43      	cmp	r3, #67	; 0x43
   23fc0:	d10e      	bne.n	23fe0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   23fc2:	7903      	ldrb	r3, [r0, #4]
   23fc4:	2b43      	cmp	r3, #67	; 0x43
   23fc6:	d10b      	bne.n	23fe0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   23fc8:	7943      	ldrb	r3, [r0, #5]
   23fca:	2b2b      	cmp	r3, #43	; 0x2b
   23fcc:	d108      	bne.n	23fe0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   23fce:	7983      	ldrb	r3, [r0, #6]
   23fd0:	2b2b      	cmp	r3, #43	; 0x2b
   23fd2:	d105      	bne.n	23fe0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   23fd4:	79c0      	ldrb	r0, [r0, #7]
   23fd6:	2801      	cmp	r0, #1
   23fd8:	bf8c      	ite	hi
   23fda:	2000      	movhi	r0, #0
   23fdc:	2001      	movls	r0, #1
   23fde:	4770      	bx	lr
   23fe0:	2000      	movs	r0, #0
   23fe2:	4770      	bx	lr

00023fe4 <__cxa_call_terminate>:
   23fe4:	b510      	push	{r4, lr}
   23fe6:	4604      	mov	r4, r0
   23fe8:	b148      	cbz	r0, 23ffe <__cxa_call_terminate+0x1a>
   23fea:	f000 f827 	bl	2403c <__cxa_begin_catch>
   23fee:	4620      	mov	r0, r4
   23ff0:	f7ff ffdb 	bl	23faa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   23ff4:	b118      	cbz	r0, 23ffe <__cxa_call_terminate+0x1a>
   23ff6:	f854 0c14 	ldr.w	r0, [r4, #-20]
   23ffa:	f7ff fee0 	bl	23dbe <_ZN10__cxxabiv111__terminateEPFvvE>
   23ffe:	f7ff fef1 	bl	23de4 <_ZSt9terminatev>

00024002 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   24002:	7803      	ldrb	r3, [r0, #0]
   24004:	2b47      	cmp	r3, #71	; 0x47
   24006:	d117      	bne.n	24038 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   24008:	7843      	ldrb	r3, [r0, #1]
   2400a:	2b4e      	cmp	r3, #78	; 0x4e
   2400c:	d114      	bne.n	24038 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   2400e:	7883      	ldrb	r3, [r0, #2]
   24010:	2b55      	cmp	r3, #85	; 0x55
   24012:	d111      	bne.n	24038 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   24014:	78c3      	ldrb	r3, [r0, #3]
   24016:	2b43      	cmp	r3, #67	; 0x43
   24018:	d10e      	bne.n	24038 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   2401a:	7903      	ldrb	r3, [r0, #4]
   2401c:	2b43      	cmp	r3, #67	; 0x43
   2401e:	d10b      	bne.n	24038 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   24020:	7943      	ldrb	r3, [r0, #5]
   24022:	2b2b      	cmp	r3, #43	; 0x2b
   24024:	d108      	bne.n	24038 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   24026:	7983      	ldrb	r3, [r0, #6]
   24028:	2b2b      	cmp	r3, #43	; 0x2b
   2402a:	d105      	bne.n	24038 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   2402c:	79c0      	ldrb	r0, [r0, #7]
   2402e:	2801      	cmp	r0, #1
   24030:	bf8c      	ite	hi
   24032:	2000      	movhi	r0, #0
   24034:	2001      	movls	r0, #1
   24036:	4770      	bx	lr
   24038:	2000      	movs	r0, #0
   2403a:	4770      	bx	lr

0002403c <__cxa_begin_catch>:
   2403c:	b538      	push	{r3, r4, r5, lr}
   2403e:	4604      	mov	r4, r0
   24040:	f7f9 ffdc 	bl	1dffc <__cxa_get_globals>
   24044:	4602      	mov	r2, r0
   24046:	6805      	ldr	r5, [r0, #0]
   24048:	4620      	mov	r0, r4
   2404a:	f1a4 0120 	sub.w	r1, r4, #32
   2404e:	f7ff ffd8 	bl	24002 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   24052:	b928      	cbnz	r0, 24060 <__cxa_begin_catch+0x24>
   24054:	b10d      	cbz	r5, 2405a <__cxa_begin_catch+0x1e>
   24056:	f7ff fec5 	bl	23de4 <_ZSt9terminatev>
   2405a:	6011      	str	r1, [r2, #0]
   2405c:	4628      	mov	r0, r5
   2405e:	bd38      	pop	{r3, r4, r5, pc}
   24060:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   24064:	4620      	mov	r0, r4
   24066:	2b00      	cmp	r3, #0
   24068:	bfb4      	ite	lt
   2406a:	f1c3 0301 	rsblt	r3, r3, #1
   2406e:	3301      	addge	r3, #1
   24070:	428d      	cmp	r5, r1
   24072:	f844 3c0c 	str.w	r3, [r4, #-12]
   24076:	6853      	ldr	r3, [r2, #4]
   24078:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2407c:	6053      	str	r3, [r2, #4]
   2407e:	bf1c      	itt	ne
   24080:	f844 5c10 	strne.w	r5, [r4, #-16]
   24084:	6011      	strne	r1, [r2, #0]
   24086:	6a65      	ldr	r5, [r4, #36]	; 0x24
   24088:	f7f0 fb20 	bl	146cc <_Unwind_Complete>
   2408c:	e7e6      	b.n	2405c <__cxa_begin_catch+0x20>

0002408e <__cxa_end_catch>:
   2408e:	b510      	push	{r4, lr}
   24090:	f7f9 ffb0 	bl	1dff4 <__cxa_get_globals_fast>
   24094:	6802      	ldr	r2, [r0, #0]
   24096:	4601      	mov	r1, r0
   24098:	b19a      	cbz	r2, 240c2 <__cxa_end_catch+0x34>
   2409a:	f102 0420 	add.w	r4, r2, #32
   2409e:	4620      	mov	r0, r4
   240a0:	f7ff ffaf 	bl	24002 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   240a4:	b928      	cbnz	r0, 240b2 <__cxa_end_catch+0x24>
   240a6:	6008      	str	r0, [r1, #0]
   240a8:	4620      	mov	r0, r4
   240aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   240ae:	f7f0 bb0f 	b.w	146d0 <_Unwind_DeleteException>
   240b2:	6953      	ldr	r3, [r2, #20]
   240b4:	2b00      	cmp	r3, #0
   240b6:	da05      	bge.n	240c4 <__cxa_end_catch+0x36>
   240b8:	3301      	adds	r3, #1
   240ba:	d101      	bne.n	240c0 <__cxa_end_catch+0x32>
   240bc:	6910      	ldr	r0, [r2, #16]
   240be:	6008      	str	r0, [r1, #0]
   240c0:	6153      	str	r3, [r2, #20]
   240c2:	bd10      	pop	{r4, pc}
   240c4:	3b01      	subs	r3, #1
   240c6:	d102      	bne.n	240ce <__cxa_end_catch+0x40>
   240c8:	6913      	ldr	r3, [r2, #16]
   240ca:	600b      	str	r3, [r1, #0]
   240cc:	e7ec      	b.n	240a8 <__cxa_end_catch+0x1a>
   240ce:	1c59      	adds	r1, r3, #1
   240d0:	d1f6      	bne.n	240c0 <__cxa_end_catch+0x32>
   240d2:	f7ff fe87 	bl	23de4 <_ZSt9terminatev>

000240d6 <_ZL12read_uleb128PKhPm>:
   240d6:	2300      	movs	r3, #0
   240d8:	461a      	mov	r2, r3
   240da:	b530      	push	{r4, r5, lr}
   240dc:	f810 5b01 	ldrb.w	r5, [r0], #1
   240e0:	f005 047f 	and.w	r4, r5, #127	; 0x7f
   240e4:	4094      	lsls	r4, r2
   240e6:	3207      	adds	r2, #7
   240e8:	4323      	orrs	r3, r4
   240ea:	062c      	lsls	r4, r5, #24
   240ec:	d4f6      	bmi.n	240dc <_ZL12read_uleb128PKhPm+0x6>
   240ee:	600b      	str	r3, [r1, #0]
   240f0:	bd30      	pop	{r4, r5, pc}

000240f2 <_ZL12read_sleb128PKhPl>:
   240f2:	2300      	movs	r3, #0
   240f4:	461a      	mov	r2, r3
   240f6:	b530      	push	{r4, r5, lr}
   240f8:	f810 4b01 	ldrb.w	r4, [r0], #1
   240fc:	f004 057f 	and.w	r5, r4, #127	; 0x7f
   24100:	4095      	lsls	r5, r2
   24102:	3207      	adds	r2, #7
   24104:	432b      	orrs	r3, r5
   24106:	0625      	lsls	r5, r4, #24
   24108:	d4f6      	bmi.n	240f8 <_ZL12read_sleb128PKhPl+0x6>
   2410a:	2a1f      	cmp	r2, #31
   2410c:	d806      	bhi.n	2411c <_ZL12read_sleb128PKhPl+0x2a>
   2410e:	0664      	lsls	r4, r4, #25
   24110:	bf42      	ittt	mi
   24112:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
   24116:	fa04 f202 	lslmi.w	r2, r4, r2
   2411a:	4313      	orrmi	r3, r2
   2411c:	600b      	str	r3, [r1, #0]
   2411e:	bd30      	pop	{r4, r5, pc}

00024120 <_ZL28read_encoded_value_with_basehjPKhPj>:
   24120:	2850      	cmp	r0, #80	; 0x50
   24122:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24126:	4606      	mov	r6, r0
   24128:	4688      	mov	r8, r1
   2412a:	4615      	mov	r5, r2
   2412c:	461f      	mov	r7, r3
   2412e:	d108      	bne.n	24142 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
   24130:	3203      	adds	r2, #3
   24132:	f022 0003 	bic.w	r0, r2, #3
   24136:	f850 4b04 	ldr.w	r4, [r0], #4
   2413a:	603c      	str	r4, [r7, #0]
   2413c:	b002      	add	sp, #8
   2413e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24142:	f000 030f 	and.w	r3, r0, #15
   24146:	2b0c      	cmp	r3, #12
   24148:	d82e      	bhi.n	241a8 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
   2414a:	e8df f003 	tbb	[pc, r3]
   2414e:	0725      	.short	0x0725
   24150:	2d29251d 	.word	0x2d29251d
   24154:	182d2d2d 	.word	0x182d2d2d
   24158:	2521      	.short	0x2521
   2415a:	29          	.byte	0x29
   2415b:	00          	.byte	0x00
   2415c:	a901      	add	r1, sp, #4
   2415e:	4628      	mov	r0, r5
   24160:	f7ff ffb9 	bl	240d6 <_ZL12read_uleb128PKhPm>
   24164:	9c01      	ldr	r4, [sp, #4]
   24166:	2c00      	cmp	r4, #0
   24168:	d0e7      	beq.n	2413a <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
   2416a:	f006 0370 	and.w	r3, r6, #112	; 0x70
   2416e:	2b10      	cmp	r3, #16
   24170:	bf08      	it	eq
   24172:	46a8      	moveq	r8, r5
   24174:	0633      	lsls	r3, r6, #24
   24176:	4444      	add	r4, r8
   24178:	bf48      	it	mi
   2417a:	6824      	ldrmi	r4, [r4, #0]
   2417c:	e7dd      	b.n	2413a <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
   2417e:	a901      	add	r1, sp, #4
   24180:	4628      	mov	r0, r5
   24182:	f7ff ffb6 	bl	240f2 <_ZL12read_sleb128PKhPl>
   24186:	e7ed      	b.n	24164 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
   24188:	4628      	mov	r0, r5
   2418a:	f830 4b02 	ldrh.w	r4, [r0], #2
   2418e:	e7ea      	b.n	24166 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
   24190:	4628      	mov	r0, r5
   24192:	f930 4b02 	ldrsh.w	r4, [r0], #2
   24196:	e7e6      	b.n	24166 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
   24198:	4628      	mov	r0, r5
   2419a:	f850 4b04 	ldr.w	r4, [r0], #4
   2419e:	e7e2      	b.n	24166 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
   241a0:	4628      	mov	r0, r5
   241a2:	f850 4b08 	ldr.w	r4, [r0], #8
   241a6:	e7de      	b.n	24166 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
   241a8:	f000 f952 	bl	24450 <abort>

000241ac <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   241ac:	b508      	push	{r3, lr}
   241ae:	4603      	mov	r3, r0
   241b0:	4608      	mov	r0, r1
   241b2:	2bff      	cmp	r3, #255	; 0xff
   241b4:	d010      	beq.n	241d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   241b6:	f003 0270 	and.w	r2, r3, #112	; 0x70
   241ba:	2a30      	cmp	r2, #48	; 0x30
   241bc:	d012      	beq.n	241e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   241be:	d807      	bhi.n	241d0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   241c0:	2a20      	cmp	r2, #32
   241c2:	d00b      	beq.n	241dc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
   241c4:	d802      	bhi.n	241cc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   241c6:	f013 0f60 	tst.w	r3, #96	; 0x60
   241ca:	d005      	beq.n	241d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   241cc:	f000 f940 	bl	24450 <abort>
   241d0:	2a40      	cmp	r2, #64	; 0x40
   241d2:	d00b      	beq.n	241ec <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
   241d4:	2a50      	cmp	r2, #80	; 0x50
   241d6:	d1f9      	bne.n	241cc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   241d8:	2000      	movs	r0, #0
   241da:	bd08      	pop	{r3, pc}
   241dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   241e0:	f000 bba5 	b.w	2492e <_Unwind_GetTextRelBase>
   241e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   241e8:	f000 bb9e 	b.w	24928 <_Unwind_GetDataRelBase>
   241ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   241f0:	f7f1 b85a 	b.w	152a8 <_Unwind_GetRegionStart>

000241f4 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
   241f4:	b513      	push	{r0, r1, r4, lr}
   241f6:	460c      	mov	r4, r1
   241f8:	4601      	mov	r1, r0
   241fa:	4620      	mov	r0, r4
   241fc:	e9cd 3200 	strd	r3, r2, [sp]
   24200:	f7ff ffd4 	bl	241ac <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   24204:	4601      	mov	r1, r0
   24206:	4620      	mov	r0, r4
   24208:	e9dd 3200 	ldrd	r3, r2, [sp]
   2420c:	b002      	add	sp, #8
   2420e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24212:	f7ff bf85 	b.w	24120 <_ZL28read_encoded_value_with_basehjPKhPj>

00024216 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   24216:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24218:	460c      	mov	r4, r1
   2421a:	4615      	mov	r5, r2
   2421c:	4606      	mov	r6, r0
   2421e:	b328      	cbz	r0, 2426c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
   24220:	f7f1 f842 	bl	152a8 <_Unwind_GetRegionStart>
   24224:	4603      	mov	r3, r0
   24226:	4620      	mov	r0, r4
   24228:	602b      	str	r3, [r5, #0]
   2422a:	f810 1b01 	ldrb.w	r1, [r0], #1
   2422e:	29ff      	cmp	r1, #255	; 0xff
   24230:	d01e      	beq.n	24270 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
   24232:	4602      	mov	r2, r0
   24234:	1d2b      	adds	r3, r5, #4
   24236:	4630      	mov	r0, r6
   24238:	f7ff ffdc 	bl	241f4 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
   2423c:	f810 3b01 	ldrb.w	r3, [r0], #1
   24240:	2bff      	cmp	r3, #255	; 0xff
   24242:	752b      	strb	r3, [r5, #20]
   24244:	d016      	beq.n	24274 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   24246:	2310      	movs	r3, #16
   24248:	a901      	add	r1, sp, #4
   2424a:	752b      	strb	r3, [r5, #20]
   2424c:	f7ff ff43 	bl	240d6 <_ZL12read_uleb128PKhPm>
   24250:	9b01      	ldr	r3, [sp, #4]
   24252:	4403      	add	r3, r0
   24254:	60eb      	str	r3, [r5, #12]
   24256:	a901      	add	r1, sp, #4
   24258:	f810 3b01 	ldrb.w	r3, [r0], #1
   2425c:	756b      	strb	r3, [r5, #21]
   2425e:	f7ff ff3a 	bl	240d6 <_ZL12read_uleb128PKhPm>
   24262:	9b01      	ldr	r3, [sp, #4]
   24264:	4403      	add	r3, r0
   24266:	612b      	str	r3, [r5, #16]
   24268:	b002      	add	sp, #8
   2426a:	bd70      	pop	{r4, r5, r6, pc}
   2426c:	4603      	mov	r3, r0
   2426e:	e7da      	b.n	24226 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
   24270:	606b      	str	r3, [r5, #4]
   24272:	e7e3      	b.n	2423c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
   24274:	2300      	movs	r3, #0
   24276:	e7ed      	b.n	24254 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

00024278 <_Unwind_GetGR>:
   24278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2427a:	ab03      	add	r3, sp, #12
   2427c:	460a      	mov	r2, r1
   2427e:	9300      	str	r3, [sp, #0]
   24280:	2300      	movs	r3, #0
   24282:	4619      	mov	r1, r3
   24284:	f7f0 fa2a 	bl	146dc <_Unwind_VRS_Get>
   24288:	9803      	ldr	r0, [sp, #12]
   2428a:	b005      	add	sp, #20
   2428c:	f85d fb04 	ldr.w	pc, [sp], #4

00024290 <__cxa_current_exception_type>:
   24290:	b508      	push	{r3, lr}
   24292:	f7f9 feb3 	bl	1dffc <__cxa_get_globals>
   24296:	6800      	ldr	r0, [r0, #0]
   24298:	b138      	cbz	r0, 242aa <__cxa_current_exception_type+0x1a>
   2429a:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
   2429e:	6803      	ldr	r3, [r0, #0]
   242a0:	2a01      	cmp	r2, #1
   242a2:	bf08      	it	eq
   242a4:	f1a3 0078 	subeq.w	r0, r3, #120	; 0x78
   242a8:	6800      	ldr	r0, [r0, #0]
   242aa:	bd08      	pop	{r3, pc}

000242ac <__ieee754_sqrtf>:
   242ac:	b480      	push	{r7}
   242ae:	b085      	sub	sp, #20
   242b0:	af00      	add	r7, sp, #0
   242b2:	6078      	str	r0, [r7, #4]
   242b4:	edd7 7a01 	vldr	s15, [r7, #4]
   242b8:	eef1 7ae7 	vsqrt.f32	s15, s15
   242bc:	edc7 7a03 	vstr	s15, [r7, #12]
   242c0:	68fb      	ldr	r3, [r7, #12]
   242c2:	4618      	mov	r0, r3
   242c4:	3714      	adds	r7, #20
   242c6:	46bd      	mov	sp, r7
   242c8:	f85d 7b04 	ldr.w	r7, [sp], #4
   242cc:	4770      	bx	lr

000242ce <fabs>:
   242ce:	b480      	push	{r7}
   242d0:	b089      	sub	sp, #36	; 0x24
   242d2:	af00      	add	r7, sp, #0
   242d4:	e9c7 0100 	strd	r0, r1, [r7]
   242d8:	e9d7 2300 	ldrd	r2, r3, [r7]
   242dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
   242e0:	697b      	ldr	r3, [r7, #20]
   242e2:	61fb      	str	r3, [r7, #28]
   242e4:	e9d7 2300 	ldrd	r2, r3, [r7]
   242e8:	e9c7 2302 	strd	r2, r3, [r7, #8]
   242ec:	69fb      	ldr	r3, [r7, #28]
   242ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   242f2:	60fb      	str	r3, [r7, #12]
   242f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   242f8:	e9c7 2300 	strd	r2, r3, [r7]
   242fc:	e9d7 2300 	ldrd	r2, r3, [r7]
   24300:	4610      	mov	r0, r2
   24302:	4619      	mov	r1, r3
   24304:	3724      	adds	r7, #36	; 0x24
   24306:	46bd      	mov	sp, r7
   24308:	f85d 7b04 	ldr.w	r7, [sp], #4
   2430c:	4770      	bx	lr

0002430e <matherr>:
   2430e:	b580      	push	{r7, lr}
   24310:	b084      	sub	sp, #16
   24312:	af00      	add	r7, sp, #0
   24314:	6078      	str	r0, [r7, #4]
   24316:	2300      	movs	r3, #0
   24318:	60fb      	str	r3, [r7, #12]
   2431a:	687b      	ldr	r3, [r7, #4]
   2431c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   24320:	687b      	ldr	r3, [r7, #4]
   24322:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   24326:	f7ef fbfb 	bl	13b20 <__aeabi_dcmpeq>
   2432a:	4603      	mov	r3, r0
   2432c:	2b00      	cmp	r3, #0
   2432e:	d101      	bne.n	24334 <matherr+0x26>
   24330:	2300      	movs	r3, #0
   24332:	e000      	b.n	24336 <matherr+0x28>
   24334:	68fb      	ldr	r3, [r7, #12]
   24336:	4618      	mov	r0, r3
   24338:	3710      	adds	r7, #16
   2433a:	46bd      	mov	sp, r7
   2433c:	bd80      	pop	{r7, pc}

0002433e <fabsf>:
   2433e:	b480      	push	{r7}
   24340:	b087      	sub	sp, #28
   24342:	af00      	add	r7, sp, #0
   24344:	6078      	str	r0, [r7, #4]
   24346:	687b      	ldr	r3, [r7, #4]
   24348:	613b      	str	r3, [r7, #16]
   2434a:	693b      	ldr	r3, [r7, #16]
   2434c:	617b      	str	r3, [r7, #20]
   2434e:	697b      	ldr	r3, [r7, #20]
   24350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   24354:	60fb      	str	r3, [r7, #12]
   24356:	68fb      	ldr	r3, [r7, #12]
   24358:	607b      	str	r3, [r7, #4]
   2435a:	687b      	ldr	r3, [r7, #4]
   2435c:	4618      	mov	r0, r3
   2435e:	371c      	adds	r7, #28
   24360:	46bd      	mov	sp, r7
   24362:	f85d 7b04 	ldr.w	r7, [sp], #4
   24366:	4770      	bx	lr

00024368 <finitef>:
   24368:	b480      	push	{r7}
   2436a:	b085      	sub	sp, #20
   2436c:	af00      	add	r7, sp, #0
   2436e:	6078      	str	r0, [r7, #4]
   24370:	687b      	ldr	r3, [r7, #4]
   24372:	60bb      	str	r3, [r7, #8]
   24374:	68bb      	ldr	r3, [r7, #8]
   24376:	60fb      	str	r3, [r7, #12]
   24378:	68fb      	ldr	r3, [r7, #12]
   2437a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   2437e:	60fb      	str	r3, [r7, #12]
   24380:	68fb      	ldr	r3, [r7, #12]
   24382:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   24386:	bfb4      	ite	lt
   24388:	2301      	movlt	r3, #1
   2438a:	2300      	movge	r3, #0
   2438c:	b2db      	uxtb	r3, r3
   2438e:	4618      	mov	r0, r3
   24390:	3714      	adds	r7, #20
   24392:	46bd      	mov	sp, r7
   24394:	f85d 7b04 	ldr.w	r7, [sp], #4
   24398:	4770      	bx	lr

0002439a <rintf>:
   2439a:	b480      	push	{r7}
   2439c:	b085      	sub	sp, #20
   2439e:	af00      	add	r7, sp, #0
   243a0:	6078      	str	r0, [r7, #4]
   243a2:	edd7 7a01 	vldr	s15, [r7, #4]
   243a6:	eef7 7a67 	vrintx.f32	s15, s15
   243aa:	edc7 7a03 	vstr	s15, [r7, #12]
   243ae:	68fb      	ldr	r3, [r7, #12]
   243b0:	4618      	mov	r0, r3
   243b2:	3714      	adds	r7, #20
   243b4:	46bd      	mov	sp, r7
   243b6:	f85d 7b04 	ldr.w	r7, [sp], #4
   243ba:	4770      	bx	lr

000243bc <copysign>:
   243bc:	b480      	push	{r7}
   243be:	b08d      	sub	sp, #52	; 0x34
   243c0:	af00      	add	r7, sp, #0
   243c2:	e9c7 0102 	strd	r0, r1, [r7, #8]
   243c6:	e9c7 2300 	strd	r2, r3, [r7]
   243ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   243ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
   243d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   243d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   243d6:	e9d7 2300 	ldrd	r2, r3, [r7]
   243da:	e9c7 2306 	strd	r2, r3, [r7, #24]
   243de:	69fb      	ldr	r3, [r7, #28]
   243e0:	62bb      	str	r3, [r7, #40]	; 0x28
   243e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   243e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
   243ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   243ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   243f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   243f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   243f6:	4313      	orrs	r3, r2
   243f8:	617b      	str	r3, [r7, #20]
   243fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   243fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
   24402:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   24406:	4610      	mov	r0, r2
   24408:	4619      	mov	r1, r3
   2440a:	3734      	adds	r7, #52	; 0x34
   2440c:	46bd      	mov	sp, r7
   2440e:	f85d 7b04 	ldr.w	r7, [sp], #4
   24412:	4770      	bx	lr

00024414 <copysignf>:
   24414:	b480      	push	{r7}
   24416:	b089      	sub	sp, #36	; 0x24
   24418:	af00      	add	r7, sp, #0
   2441a:	6078      	str	r0, [r7, #4]
   2441c:	6039      	str	r1, [r7, #0]
   2441e:	687b      	ldr	r3, [r7, #4]
   24420:	617b      	str	r3, [r7, #20]
   24422:	697b      	ldr	r3, [r7, #20]
   24424:	61fb      	str	r3, [r7, #28]
   24426:	683b      	ldr	r3, [r7, #0]
   24428:	613b      	str	r3, [r7, #16]
   2442a:	693b      	ldr	r3, [r7, #16]
   2442c:	61bb      	str	r3, [r7, #24]
   2442e:	69fb      	ldr	r3, [r7, #28]
   24430:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   24434:	69bb      	ldr	r3, [r7, #24]
   24436:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   2443a:	4313      	orrs	r3, r2
   2443c:	60fb      	str	r3, [r7, #12]
   2443e:	68fb      	ldr	r3, [r7, #12]
   24440:	607b      	str	r3, [r7, #4]
   24442:	687b      	ldr	r3, [r7, #4]
   24444:	4618      	mov	r0, r3
   24446:	3724      	adds	r7, #36	; 0x24
   24448:	46bd      	mov	sp, r7
   2444a:	f85d 7b04 	ldr.w	r7, [sp], #4
   2444e:	4770      	bx	lr

00024450 <abort>:
   24450:	2006      	movs	r0, #6
   24452:	b508      	push	{r3, lr}
   24454:	f7fd f98a 	bl	2176c <raise>
   24458:	2001      	movs	r0, #1
   2445a:	f7f4 fe49 	bl	190f0 <_exit>

0002445e <memchr>:
   2445e:	b2c9      	uxtb	r1, r1
   24460:	4402      	add	r2, r0
   24462:	b510      	push	{r4, lr}
   24464:	4290      	cmp	r0, r2
   24466:	4603      	mov	r3, r0
   24468:	d101      	bne.n	2446e <memchr+0x10>
   2446a:	2300      	movs	r3, #0
   2446c:	e003      	b.n	24476 <memchr+0x18>
   2446e:	781c      	ldrb	r4, [r3, #0]
   24470:	3001      	adds	r0, #1
   24472:	428c      	cmp	r4, r1
   24474:	d1f6      	bne.n	24464 <memchr+0x6>
   24476:	4618      	mov	r0, r3
   24478:	bd10      	pop	{r4, pc}

0002447a <memcmp>:
   2447a:	b530      	push	{r4, r5, lr}
   2447c:	3901      	subs	r1, #1
   2447e:	2400      	movs	r4, #0
   24480:	42a2      	cmp	r2, r4
   24482:	d101      	bne.n	24488 <memcmp+0xe>
   24484:	2000      	movs	r0, #0
   24486:	e005      	b.n	24494 <memcmp+0x1a>
   24488:	5d03      	ldrb	r3, [r0, r4]
   2448a:	3401      	adds	r4, #1
   2448c:	5d0d      	ldrb	r5, [r1, r4]
   2448e:	42ab      	cmp	r3, r5
   24490:	d0f6      	beq.n	24480 <memcmp+0x6>
   24492:	1b58      	subs	r0, r3, r5
   24494:	bd30      	pop	{r4, r5, pc}

00024496 <memcpy>:
   24496:	440a      	add	r2, r1
   24498:	1e43      	subs	r3, r0, #1
   2449a:	4291      	cmp	r1, r2
   2449c:	d100      	bne.n	244a0 <memcpy+0xa>
   2449e:	4770      	bx	lr
   244a0:	b510      	push	{r4, lr}
   244a2:	f811 4b01 	ldrb.w	r4, [r1], #1
   244a6:	4291      	cmp	r1, r2
   244a8:	f803 4f01 	strb.w	r4, [r3, #1]!
   244ac:	d1f9      	bne.n	244a2 <memcpy+0xc>
   244ae:	bd10      	pop	{r4, pc}

000244b0 <memmove>:
   244b0:	4288      	cmp	r0, r1
   244b2:	b510      	push	{r4, lr}
   244b4:	eb01 0402 	add.w	r4, r1, r2
   244b8:	d902      	bls.n	244c0 <memmove+0x10>
   244ba:	4284      	cmp	r4, r0
   244bc:	4623      	mov	r3, r4
   244be:	d807      	bhi.n	244d0 <memmove+0x20>
   244c0:	1e43      	subs	r3, r0, #1
   244c2:	42a1      	cmp	r1, r4
   244c4:	d008      	beq.n	244d8 <memmove+0x28>
   244c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   244ca:	f803 2f01 	strb.w	r2, [r3, #1]!
   244ce:	e7f8      	b.n	244c2 <memmove+0x12>
   244d0:	4402      	add	r2, r0
   244d2:	4601      	mov	r1, r0
   244d4:	428a      	cmp	r2, r1
   244d6:	d100      	bne.n	244da <memmove+0x2a>
   244d8:	bd10      	pop	{r4, pc}
   244da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   244de:	f802 4d01 	strb.w	r4, [r2, #-1]!
   244e2:	e7f7      	b.n	244d4 <memmove+0x24>

000244e4 <memset>:
   244e4:	4402      	add	r2, r0
   244e6:	4603      	mov	r3, r0
   244e8:	4293      	cmp	r3, r2
   244ea:	d100      	bne.n	244ee <memset+0xa>
   244ec:	4770      	bx	lr
   244ee:	f803 1b01 	strb.w	r1, [r3], #1
   244f2:	e7f9      	b.n	244e8 <memset+0x4>

000244f4 <_calloc_r>:
   244f4:	434a      	muls	r2, r1
   244f6:	b513      	push	{r0, r1, r4, lr}
   244f8:	4611      	mov	r1, r2
   244fa:	9201      	str	r2, [sp, #4]
   244fc:	f7fc fe52 	bl	211a4 <_malloc_r>
   24500:	4604      	mov	r4, r0
   24502:	b118      	cbz	r0, 2450c <_calloc_r+0x18>
   24504:	9a01      	ldr	r2, [sp, #4]
   24506:	2100      	movs	r1, #0
   24508:	f7ff ffec 	bl	244e4 <memset>
   2450c:	4620      	mov	r0, r4
   2450e:	b002      	add	sp, #8
   24510:	bd10      	pop	{r4, pc}

00024512 <_realloc_r>:
   24512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24514:	4607      	mov	r7, r0
   24516:	4614      	mov	r4, r2
   24518:	460e      	mov	r6, r1
   2451a:	b921      	cbnz	r1, 24526 <_realloc_r+0x14>
   2451c:	4611      	mov	r1, r2
   2451e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   24522:	f7fc be3f 	b.w	211a4 <_malloc_r>
   24526:	b922      	cbnz	r2, 24532 <_realloc_r+0x20>
   24528:	4625      	mov	r5, r4
   2452a:	f7fc fdeb 	bl	21104 <_free_r>
   2452e:	4628      	mov	r0, r5
   24530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24532:	f000 f953 	bl	247dc <_malloc_usable_size_r>
   24536:	42a0      	cmp	r0, r4
   24538:	d20f      	bcs.n	2455a <_realloc_r+0x48>
   2453a:	4621      	mov	r1, r4
   2453c:	4638      	mov	r0, r7
   2453e:	f7fc fe31 	bl	211a4 <_malloc_r>
   24542:	4605      	mov	r5, r0
   24544:	2800      	cmp	r0, #0
   24546:	d0f2      	beq.n	2452e <_realloc_r+0x1c>
   24548:	4631      	mov	r1, r6
   2454a:	4622      	mov	r2, r4
   2454c:	f7ff ffa3 	bl	24496 <memcpy>
   24550:	4631      	mov	r1, r6
   24552:	4638      	mov	r0, r7
   24554:	f7fc fdd6 	bl	21104 <_free_r>
   24558:	e7e9      	b.n	2452e <_realloc_r+0x1c>
   2455a:	4635      	mov	r5, r6
   2455c:	e7e7      	b.n	2452e <_realloc_r+0x1c>

0002455e <__sfputc_r>:
   2455e:	6893      	ldr	r3, [r2, #8]
   24560:	3b01      	subs	r3, #1
   24562:	2b00      	cmp	r3, #0
   24564:	6093      	str	r3, [r2, #8]
   24566:	b410      	push	{r4}
   24568:	da08      	bge.n	2457c <__sfputc_r+0x1e>
   2456a:	6994      	ldr	r4, [r2, #24]
   2456c:	42a3      	cmp	r3, r4
   2456e:	db01      	blt.n	24574 <__sfputc_r+0x16>
   24570:	290a      	cmp	r1, #10
   24572:	d103      	bne.n	2457c <__sfputc_r+0x1e>
   24574:	f85d 4b04 	ldr.w	r4, [sp], #4
   24578:	f7fd b932 	b.w	217e0 <__swbuf_r>
   2457c:	6813      	ldr	r3, [r2, #0]
   2457e:	1c58      	adds	r0, r3, #1
   24580:	6010      	str	r0, [r2, #0]
   24582:	4608      	mov	r0, r1
   24584:	7019      	strb	r1, [r3, #0]
   24586:	f85d 4b04 	ldr.w	r4, [sp], #4
   2458a:	4770      	bx	lr

0002458c <__sfputs_r>:
   2458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2458e:	4606      	mov	r6, r0
   24590:	460f      	mov	r7, r1
   24592:	4614      	mov	r4, r2
   24594:	18d5      	adds	r5, r2, r3
   24596:	42ac      	cmp	r4, r5
   24598:	d101      	bne.n	2459e <__sfputs_r+0x12>
   2459a:	2000      	movs	r0, #0
   2459c:	e007      	b.n	245ae <__sfputs_r+0x22>
   2459e:	463a      	mov	r2, r7
   245a0:	f814 1b01 	ldrb.w	r1, [r4], #1
   245a4:	4630      	mov	r0, r6
   245a6:	f7ff ffda 	bl	2455e <__sfputc_r>
   245aa:	1c43      	adds	r3, r0, #1
   245ac:	d1f3      	bne.n	24596 <__sfputs_r+0xa>
   245ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000245b0 <_printf_common>:
   245b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   245b4:	4616      	mov	r6, r2
   245b6:	4699      	mov	r9, r3
   245b8:	688a      	ldr	r2, [r1, #8]
   245ba:	4607      	mov	r7, r0
   245bc:	690b      	ldr	r3, [r1, #16]
   245be:	460c      	mov	r4, r1
   245c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
   245c4:	4293      	cmp	r3, r2
   245c6:	bfb8      	it	lt
   245c8:	4613      	movlt	r3, r2
   245ca:	6033      	str	r3, [r6, #0]
   245cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   245d0:	b10a      	cbz	r2, 245d6 <_printf_common+0x26>
   245d2:	3301      	adds	r3, #1
   245d4:	6033      	str	r3, [r6, #0]
   245d6:	6823      	ldr	r3, [r4, #0]
   245d8:	0699      	lsls	r1, r3, #26
   245da:	bf42      	ittt	mi
   245dc:	6833      	ldrmi	r3, [r6, #0]
   245de:	3302      	addmi	r3, #2
   245e0:	6033      	strmi	r3, [r6, #0]
   245e2:	6825      	ldr	r5, [r4, #0]
   245e4:	f015 0506 	ands.w	r5, r5, #6
   245e8:	d106      	bne.n	245f8 <_printf_common+0x48>
   245ea:	f104 0a19 	add.w	sl, r4, #25
   245ee:	68e3      	ldr	r3, [r4, #12]
   245f0:	6832      	ldr	r2, [r6, #0]
   245f2:	1a9b      	subs	r3, r3, r2
   245f4:	42ab      	cmp	r3, r5
   245f6:	dc29      	bgt.n	2464c <_printf_common+0x9c>
   245f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   245fc:	1e13      	subs	r3, r2, #0
   245fe:	6822      	ldr	r2, [r4, #0]
   24600:	bf18      	it	ne
   24602:	2301      	movne	r3, #1
   24604:	0692      	lsls	r2, r2, #26
   24606:	d42e      	bmi.n	24666 <_printf_common+0xb6>
   24608:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2460c:	4649      	mov	r1, r9
   2460e:	4638      	mov	r0, r7
   24610:	47c0      	blx	r8
   24612:	3001      	adds	r0, #1
   24614:	d021      	beq.n	2465a <_printf_common+0xaa>
   24616:	6823      	ldr	r3, [r4, #0]
   24618:	341a      	adds	r4, #26
   2461a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   2461e:	f003 0306 	and.w	r3, r3, #6
   24622:	6832      	ldr	r2, [r6, #0]
   24624:	2600      	movs	r6, #0
   24626:	2b04      	cmp	r3, #4
   24628:	f854 3c12 	ldr.w	r3, [r4, #-18]
   2462c:	bf08      	it	eq
   2462e:	1aad      	subeq	r5, r5, r2
   24630:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   24634:	bf14      	ite	ne
   24636:	2500      	movne	r5, #0
   24638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2463c:	4293      	cmp	r3, r2
   2463e:	bfc4      	itt	gt
   24640:	1a9b      	subgt	r3, r3, r2
   24642:	18ed      	addgt	r5, r5, r3
   24644:	42b5      	cmp	r5, r6
   24646:	d11a      	bne.n	2467e <_printf_common+0xce>
   24648:	2000      	movs	r0, #0
   2464a:	e008      	b.n	2465e <_printf_common+0xae>
   2464c:	2301      	movs	r3, #1
   2464e:	4652      	mov	r2, sl
   24650:	4649      	mov	r1, r9
   24652:	4638      	mov	r0, r7
   24654:	47c0      	blx	r8
   24656:	3001      	adds	r0, #1
   24658:	d103      	bne.n	24662 <_printf_common+0xb2>
   2465a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2465e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24662:	3501      	adds	r5, #1
   24664:	e7c3      	b.n	245ee <_printf_common+0x3e>
   24666:	18e1      	adds	r1, r4, r3
   24668:	1c5a      	adds	r2, r3, #1
   2466a:	2030      	movs	r0, #48	; 0x30
   2466c:	3302      	adds	r3, #2
   2466e:	4422      	add	r2, r4
   24670:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   24674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   24678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2467c:	e7c4      	b.n	24608 <_printf_common+0x58>
   2467e:	2301      	movs	r3, #1
   24680:	4622      	mov	r2, r4
   24682:	4649      	mov	r1, r9
   24684:	4638      	mov	r0, r7
   24686:	47c0      	blx	r8
   24688:	3001      	adds	r0, #1
   2468a:	d0e6      	beq.n	2465a <_printf_common+0xaa>
   2468c:	3601      	adds	r6, #1
   2468e:	e7d9      	b.n	24644 <_printf_common+0x94>

00024690 <_raise_r>:
   24690:	291f      	cmp	r1, #31
   24692:	b538      	push	{r3, r4, r5, lr}
   24694:	4604      	mov	r4, r0
   24696:	460d      	mov	r5, r1
   24698:	d904      	bls.n	246a4 <_raise_r+0x14>
   2469a:	2316      	movs	r3, #22
   2469c:	6003      	str	r3, [r0, #0]
   2469e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   246a2:	bd38      	pop	{r3, r4, r5, pc}
   246a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
   246a6:	b112      	cbz	r2, 246ae <_raise_r+0x1e>
   246a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   246ac:	b94b      	cbnz	r3, 246c2 <_raise_r+0x32>
   246ae:	4620      	mov	r0, r4
   246b0:	f000 f816 	bl	246e0 <_getpid_r>
   246b4:	462a      	mov	r2, r5
   246b6:	4601      	mov	r1, r0
   246b8:	4620      	mov	r0, r4
   246ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   246be:	f7fd b85d 	b.w	2177c <_kill_r>
   246c2:	2b01      	cmp	r3, #1
   246c4:	d00a      	beq.n	246dc <_raise_r+0x4c>
   246c6:	1c59      	adds	r1, r3, #1
   246c8:	d103      	bne.n	246d2 <_raise_r+0x42>
   246ca:	2316      	movs	r3, #22
   246cc:	6003      	str	r3, [r0, #0]
   246ce:	2001      	movs	r0, #1
   246d0:	e7e7      	b.n	246a2 <_raise_r+0x12>
   246d2:	2400      	movs	r4, #0
   246d4:	4628      	mov	r0, r5
   246d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   246da:	4798      	blx	r3
   246dc:	2000      	movs	r0, #0
   246de:	e7e0      	b.n	246a2 <_raise_r+0x12>

000246e0 <_getpid_r>:
   246e0:	f7fd be28 	b.w	22334 <_getpid>

000246e4 <strcpy>:
   246e4:	4603      	mov	r3, r0
   246e6:	f811 2b01 	ldrb.w	r2, [r1], #1
   246ea:	f803 2b01 	strb.w	r2, [r3], #1
   246ee:	2a00      	cmp	r2, #0
   246f0:	d1f9      	bne.n	246e6 <strcpy+0x2>
   246f2:	4770      	bx	lr

000246f4 <strncmp>:
   246f4:	b510      	push	{r4, lr}
   246f6:	b16a      	cbz	r2, 24714 <strncmp+0x20>
   246f8:	3901      	subs	r1, #1
   246fa:	1884      	adds	r4, r0, r2
   246fc:	f810 3b01 	ldrb.w	r3, [r0], #1
   24700:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24704:	4293      	cmp	r3, r2
   24706:	d103      	bne.n	24710 <strncmp+0x1c>
   24708:	42a0      	cmp	r0, r4
   2470a:	d001      	beq.n	24710 <strncmp+0x1c>
   2470c:	2b00      	cmp	r3, #0
   2470e:	d1f5      	bne.n	246fc <strncmp+0x8>
   24710:	1a98      	subs	r0, r3, r2
   24712:	bd10      	pop	{r4, pc}
   24714:	4610      	mov	r0, r2
   24716:	e7fc      	b.n	24712 <strncmp+0x1e>

00024718 <__sfmoreglue>:
   24718:	b570      	push	{r4, r5, r6, lr}
   2471a:	1e4a      	subs	r2, r1, #1
   2471c:	2564      	movs	r5, #100	; 0x64
   2471e:	460e      	mov	r6, r1
   24720:	4355      	muls	r5, r2
   24722:	f105 0170 	add.w	r1, r5, #112	; 0x70
   24726:	f7fc fd3d 	bl	211a4 <_malloc_r>
   2472a:	4604      	mov	r4, r0
   2472c:	b140      	cbz	r0, 24740 <__sfmoreglue+0x28>
   2472e:	2100      	movs	r1, #0
   24730:	f105 0264 	add.w	r2, r5, #100	; 0x64
   24734:	e9c0 1600 	strd	r1, r6, [r0]
   24738:	300c      	adds	r0, #12
   2473a:	60a0      	str	r0, [r4, #8]
   2473c:	f7ff fed2 	bl	244e4 <memset>
   24740:	4620      	mov	r0, r4
   24742:	bd70      	pop	{r4, r5, r6, pc}

00024744 <_fwalk_reent>:
   24744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24748:	4606      	mov	r6, r0
   2474a:	4688      	mov	r8, r1
   2474c:	f100 0448 	add.w	r4, r0, #72	; 0x48
   24750:	2700      	movs	r7, #0
   24752:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   24756:	f1b9 0901 	subs.w	r9, r9, #1
   2475a:	d505      	bpl.n	24768 <_fwalk_reent+0x24>
   2475c:	6824      	ldr	r4, [r4, #0]
   2475e:	2c00      	cmp	r4, #0
   24760:	d1f7      	bne.n	24752 <_fwalk_reent+0xe>
   24762:	4638      	mov	r0, r7
   24764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24768:	89ab      	ldrh	r3, [r5, #12]
   2476a:	2b01      	cmp	r3, #1
   2476c:	d907      	bls.n	2477e <_fwalk_reent+0x3a>
   2476e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   24772:	3301      	adds	r3, #1
   24774:	d003      	beq.n	2477e <_fwalk_reent+0x3a>
   24776:	4629      	mov	r1, r5
   24778:	4630      	mov	r0, r6
   2477a:	47c0      	blx	r8
   2477c:	4307      	orrs	r7, r0
   2477e:	3564      	adds	r5, #100	; 0x64
   24780:	e7e9      	b.n	24756 <_fwalk_reent+0x12>

00024782 <__swhatbuf_r>:
   24782:	b570      	push	{r4, r5, r6, lr}
   24784:	460e      	mov	r6, r1
   24786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2478a:	b096      	sub	sp, #88	; 0x58
   2478c:	4614      	mov	r4, r2
   2478e:	2900      	cmp	r1, #0
   24790:	461d      	mov	r5, r3
   24792:	da09      	bge.n	247a8 <__swhatbuf_r+0x26>
   24794:	89b3      	ldrh	r3, [r6, #12]
   24796:	2200      	movs	r2, #0
   24798:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   2479c:	602a      	str	r2, [r5, #0]
   2479e:	d116      	bne.n	247ce <__swhatbuf_r+0x4c>
   247a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   247a4:	6023      	str	r3, [r4, #0]
   247a6:	e015      	b.n	247d4 <__swhatbuf_r+0x52>
   247a8:	466a      	mov	r2, sp
   247aa:	f7fd fb89 	bl	21ec0 <_fstat_r>
   247ae:	2800      	cmp	r0, #0
   247b0:	dbf0      	blt.n	24794 <__swhatbuf_r+0x12>
   247b2:	9a01      	ldr	r2, [sp, #4]
   247b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
   247b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   247bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   247c0:	425a      	negs	r2, r3
   247c2:	415a      	adcs	r2, r3
   247c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   247c8:	602a      	str	r2, [r5, #0]
   247ca:	6023      	str	r3, [r4, #0]
   247cc:	e002      	b.n	247d4 <__swhatbuf_r+0x52>
   247ce:	2340      	movs	r3, #64	; 0x40
   247d0:	4610      	mov	r0, r2
   247d2:	6023      	str	r3, [r4, #0]
   247d4:	b016      	add	sp, #88	; 0x58
   247d6:	bd70      	pop	{r4, r5, r6, pc}

000247d8 <__malloc_lock>:
   247d8:	4770      	bx	lr

000247da <__malloc_unlock>:
   247da:	4770      	bx	lr

000247dc <_malloc_usable_size_r>:
   247dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
   247e0:	1f18      	subs	r0, r3, #4
   247e2:	2b00      	cmp	r3, #0
   247e4:	bfbc      	itt	lt
   247e6:	580b      	ldrlt	r3, [r1, r0]
   247e8:	18c0      	addlt	r0, r0, r3
   247ea:	4770      	bx	lr

000247ec <__ssputs_r>:
   247ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   247f0:	688e      	ldr	r6, [r1, #8]
   247f2:	4682      	mov	sl, r0
   247f4:	460c      	mov	r4, r1
   247f6:	4690      	mov	r8, r2
   247f8:	429e      	cmp	r6, r3
   247fa:	461f      	mov	r7, r3
   247fc:	d838      	bhi.n	24870 <__ssputs_r+0x84>
   247fe:	898a      	ldrh	r2, [r1, #12]
   24800:	f412 6f90 	tst.w	r2, #1152	; 0x480
   24804:	d032      	beq.n	2486c <__ssputs_r+0x80>
   24806:	6825      	ldr	r5, [r4, #0]
   24808:	3301      	adds	r3, #1
   2480a:	6909      	ldr	r1, [r1, #16]
   2480c:	eba5 0901 	sub.w	r9, r5, r1
   24810:	6965      	ldr	r5, [r4, #20]
   24812:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   24816:	444b      	add	r3, r9
   24818:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2481c:	106d      	asrs	r5, r5, #1
   2481e:	429d      	cmp	r5, r3
   24820:	bf38      	it	cc
   24822:	461d      	movcc	r5, r3
   24824:	0553      	lsls	r3, r2, #21
   24826:	d531      	bpl.n	2488c <__ssputs_r+0xa0>
   24828:	4629      	mov	r1, r5
   2482a:	f7fc fcbb 	bl	211a4 <_malloc_r>
   2482e:	4606      	mov	r6, r0
   24830:	b950      	cbnz	r0, 24848 <__ssputs_r+0x5c>
   24832:	230c      	movs	r3, #12
   24834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24838:	f8ca 3000 	str.w	r3, [sl]
   2483c:	89a3      	ldrh	r3, [r4, #12]
   2483e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24842:	81a3      	strh	r3, [r4, #12]
   24844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24848:	464a      	mov	r2, r9
   2484a:	6921      	ldr	r1, [r4, #16]
   2484c:	f7ff fe23 	bl	24496 <memcpy>
   24850:	89a3      	ldrh	r3, [r4, #12]
   24852:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   24856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2485a:	81a3      	strh	r3, [r4, #12]
   2485c:	6126      	str	r6, [r4, #16]
   2485e:	444e      	add	r6, r9
   24860:	6165      	str	r5, [r4, #20]
   24862:	eba5 0509 	sub.w	r5, r5, r9
   24866:	6026      	str	r6, [r4, #0]
   24868:	463e      	mov	r6, r7
   2486a:	60a5      	str	r5, [r4, #8]
   2486c:	42be      	cmp	r6, r7
   2486e:	d900      	bls.n	24872 <__ssputs_r+0x86>
   24870:	463e      	mov	r6, r7
   24872:	4632      	mov	r2, r6
   24874:	4641      	mov	r1, r8
   24876:	6820      	ldr	r0, [r4, #0]
   24878:	f7ff fe1a 	bl	244b0 <memmove>
   2487c:	68a3      	ldr	r3, [r4, #8]
   2487e:	6822      	ldr	r2, [r4, #0]
   24880:	2000      	movs	r0, #0
   24882:	1b9b      	subs	r3, r3, r6
   24884:	4432      	add	r2, r6
   24886:	60a3      	str	r3, [r4, #8]
   24888:	6022      	str	r2, [r4, #0]
   2488a:	e7db      	b.n	24844 <__ssputs_r+0x58>
   2488c:	462a      	mov	r2, r5
   2488e:	f7ff fe40 	bl	24512 <_realloc_r>
   24892:	4606      	mov	r6, r0
   24894:	2800      	cmp	r0, #0
   24896:	d1e1      	bne.n	2485c <__ssputs_r+0x70>
   24898:	6921      	ldr	r1, [r4, #16]
   2489a:	4650      	mov	r0, sl
   2489c:	f7fc fc32 	bl	21104 <_free_r>
   248a0:	e7c7      	b.n	24832 <__ssputs_r+0x46>

000248a2 <__sread>:
   248a2:	b510      	push	{r4, lr}
   248a4:	460c      	mov	r4, r1
   248a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   248aa:	f7fd fb3d 	bl	21f28 <_read_r>
   248ae:	2800      	cmp	r0, #0
   248b0:	bfab      	itete	ge
   248b2:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   248b4:	89a3      	ldrhlt	r3, [r4, #12]
   248b6:	181b      	addge	r3, r3, r0
   248b8:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   248bc:	bfac      	ite	ge
   248be:	6563      	strge	r3, [r4, #84]	; 0x54
   248c0:	81a3      	strhlt	r3, [r4, #12]
   248c2:	bd10      	pop	{r4, pc}

000248c4 <__swrite>:
   248c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   248c8:	461f      	mov	r7, r3
   248ca:	898b      	ldrh	r3, [r1, #12]
   248cc:	4605      	mov	r5, r0
   248ce:	460c      	mov	r4, r1
   248d0:	05db      	lsls	r3, r3, #23
   248d2:	4616      	mov	r6, r2
   248d4:	d505      	bpl.n	248e2 <__swrite+0x1e>
   248d6:	2302      	movs	r3, #2
   248d8:	2200      	movs	r2, #0
   248da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   248de:	f7fd fb11 	bl	21f04 <_lseek_r>
   248e2:	89a3      	ldrh	r3, [r4, #12]
   248e4:	4632      	mov	r2, r6
   248e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   248ea:	4628      	mov	r0, r5
   248ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   248f0:	81a3      	strh	r3, [r4, #12]
   248f2:	463b      	mov	r3, r7
   248f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   248f8:	f7fd bac0 	b.w	21e7c <_write_r>

000248fc <__sseek>:
   248fc:	b510      	push	{r4, lr}
   248fe:	460c      	mov	r4, r1
   24900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   24904:	f7fd fafe 	bl	21f04 <_lseek_r>
   24908:	1c43      	adds	r3, r0, #1
   2490a:	89a3      	ldrh	r3, [r4, #12]
   2490c:	bf15      	itete	ne
   2490e:	6560      	strne	r0, [r4, #84]	; 0x54
   24910:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   24914:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   24918:	81a3      	strheq	r3, [r4, #12]
   2491a:	bf18      	it	ne
   2491c:	81a3      	strhne	r3, [r4, #12]
   2491e:	bd10      	pop	{r4, pc}

00024920 <__sclose>:
   24920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   24924:	f7fd babc 	b.w	21ea0 <_close_r>

00024928 <_Unwind_GetDataRelBase>:
   24928:	b508      	push	{r3, lr}
   2492a:	f7ff fd91 	bl	24450 <abort>

0002492e <_Unwind_GetTextRelBase>:
   2492e:	b508      	push	{r3, lr}
   24930:	f7ff fffa 	bl	24928 <_Unwind_GetDataRelBase>
