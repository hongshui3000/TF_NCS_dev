
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

0000c000 <_vector_table>:
    c000:	20029438 	.word	0x20029438
    c004:	000138dd 	.word	0x000138dd
    c008:	00026deb 	.word	0x00026deb
    c00c:	0001390d 	.word	0x0001390d
    c010:	0001390d 	.word	0x0001390d
    c014:	0001390d 	.word	0x0001390d
    c018:	0001390d 	.word	0x0001390d
    c01c:	0001390d 	.word	0x0001390d
	...
    c02c:	000136b5 	.word	0x000136b5
    c030:	0001390d 	.word	0x0001390d
    c034:	00000000 	.word	0x00000000
    c038:	0001366d 	.word	0x0001366d
    c03c:	00026d23 	.word	0x00026d23

0000c040 <_irq_vector_table>:
    c040:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c050:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c060:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c070:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c080:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c090:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c0a0:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c0b0:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c0c0:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c0d0:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c0e0:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c0f0:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c100:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c110:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c120:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c130:	0001389d 0001389d 0001389d 0001389d     .8...8...8...8..
    c140:	0001389d                                .8..

0000c144 <_vector_end>:
	...

0000c200 <m_firmware_info>:
    c200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
    c210:	0002b89c 00000001 0000c000 0000c000     ................
    c220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000c240 <__aeabi_drsub>:
    c240:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c244:	e002      	b.n	c24c <__adddf3>
    c246:	bf00      	nop

0000c248 <__aeabi_dsub>:
    c248:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c24c <__adddf3>:
    c24c:	b530      	push	{r4, r5, lr}
    c24e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c252:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c256:	ea94 0f05 	teq	r4, r5
    c25a:	bf08      	it	eq
    c25c:	ea90 0f02 	teqeq	r0, r2
    c260:	bf1f      	itttt	ne
    c262:	ea54 0c00 	orrsne.w	ip, r4, r0
    c266:	ea55 0c02 	orrsne.w	ip, r5, r2
    c26a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c26e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c272:	f000 80e2 	beq.w	c43a <__adddf3+0x1ee>
    c276:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c27a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c27e:	bfb8      	it	lt
    c280:	426d      	neglt	r5, r5
    c282:	dd0c      	ble.n	c29e <__adddf3+0x52>
    c284:	442c      	add	r4, r5
    c286:	ea80 0202 	eor.w	r2, r0, r2
    c28a:	ea81 0303 	eor.w	r3, r1, r3
    c28e:	ea82 0000 	eor.w	r0, r2, r0
    c292:	ea83 0101 	eor.w	r1, r3, r1
    c296:	ea80 0202 	eor.w	r2, r0, r2
    c29a:	ea81 0303 	eor.w	r3, r1, r3
    c29e:	2d36      	cmp	r5, #54	; 0x36
    c2a0:	bf88      	it	hi
    c2a2:	bd30      	pophi	{r4, r5, pc}
    c2a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c2a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c2ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c2b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c2b4:	d002      	beq.n	c2bc <__adddf3+0x70>
    c2b6:	4240      	negs	r0, r0
    c2b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c2bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c2c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c2c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c2c8:	d002      	beq.n	c2d0 <__adddf3+0x84>
    c2ca:	4252      	negs	r2, r2
    c2cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c2d0:	ea94 0f05 	teq	r4, r5
    c2d4:	f000 80a7 	beq.w	c426 <__adddf3+0x1da>
    c2d8:	f1a4 0401 	sub.w	r4, r4, #1
    c2dc:	f1d5 0e20 	rsbs	lr, r5, #32
    c2e0:	db0d      	blt.n	c2fe <__adddf3+0xb2>
    c2e2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c2e6:	fa22 f205 	lsr.w	r2, r2, r5
    c2ea:	1880      	adds	r0, r0, r2
    c2ec:	f141 0100 	adc.w	r1, r1, #0
    c2f0:	fa03 f20e 	lsl.w	r2, r3, lr
    c2f4:	1880      	adds	r0, r0, r2
    c2f6:	fa43 f305 	asr.w	r3, r3, r5
    c2fa:	4159      	adcs	r1, r3
    c2fc:	e00e      	b.n	c31c <__adddf3+0xd0>
    c2fe:	f1a5 0520 	sub.w	r5, r5, #32
    c302:	f10e 0e20 	add.w	lr, lr, #32
    c306:	2a01      	cmp	r2, #1
    c308:	fa03 fc0e 	lsl.w	ip, r3, lr
    c30c:	bf28      	it	cs
    c30e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c312:	fa43 f305 	asr.w	r3, r3, r5
    c316:	18c0      	adds	r0, r0, r3
    c318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c31c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c320:	d507      	bpl.n	c332 <__adddf3+0xe6>
    c322:	f04f 0e00 	mov.w	lr, #0
    c326:	f1dc 0c00 	rsbs	ip, ip, #0
    c32a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c32e:	eb6e 0101 	sbc.w	r1, lr, r1
    c332:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c336:	d31b      	bcc.n	c370 <__adddf3+0x124>
    c338:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c33c:	d30c      	bcc.n	c358 <__adddf3+0x10c>
    c33e:	0849      	lsrs	r1, r1, #1
    c340:	ea5f 0030 	movs.w	r0, r0, rrx
    c344:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c348:	f104 0401 	add.w	r4, r4, #1
    c34c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c350:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c354:	f080 809a 	bcs.w	c48c <__adddf3+0x240>
    c358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c35c:	bf08      	it	eq
    c35e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c362:	f150 0000 	adcs.w	r0, r0, #0
    c366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c36a:	ea41 0105 	orr.w	r1, r1, r5
    c36e:	bd30      	pop	{r4, r5, pc}
    c370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c374:	4140      	adcs	r0, r0
    c376:	eb41 0101 	adc.w	r1, r1, r1
    c37a:	3c01      	subs	r4, #1
    c37c:	bf28      	it	cs
    c37e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c382:	d2e9      	bcs.n	c358 <__adddf3+0x10c>
    c384:	f091 0f00 	teq	r1, #0
    c388:	bf04      	itt	eq
    c38a:	4601      	moveq	r1, r0
    c38c:	2000      	moveq	r0, #0
    c38e:	fab1 f381 	clz	r3, r1
    c392:	bf08      	it	eq
    c394:	3320      	addeq	r3, #32
    c396:	f1a3 030b 	sub.w	r3, r3, #11
    c39a:	f1b3 0220 	subs.w	r2, r3, #32
    c39e:	da0c      	bge.n	c3ba <__adddf3+0x16e>
    c3a0:	320c      	adds	r2, #12
    c3a2:	dd08      	ble.n	c3b6 <__adddf3+0x16a>
    c3a4:	f102 0c14 	add.w	ip, r2, #20
    c3a8:	f1c2 020c 	rsb	r2, r2, #12
    c3ac:	fa01 f00c 	lsl.w	r0, r1, ip
    c3b0:	fa21 f102 	lsr.w	r1, r1, r2
    c3b4:	e00c      	b.n	c3d0 <__adddf3+0x184>
    c3b6:	f102 0214 	add.w	r2, r2, #20
    c3ba:	bfd8      	it	le
    c3bc:	f1c2 0c20 	rsble	ip, r2, #32
    c3c0:	fa01 f102 	lsl.w	r1, r1, r2
    c3c4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c3c8:	bfdc      	itt	le
    c3ca:	ea41 010c 	orrle.w	r1, r1, ip
    c3ce:	4090      	lslle	r0, r2
    c3d0:	1ae4      	subs	r4, r4, r3
    c3d2:	bfa2      	ittt	ge
    c3d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c3d8:	4329      	orrge	r1, r5
    c3da:	bd30      	popge	{r4, r5, pc}
    c3dc:	ea6f 0404 	mvn.w	r4, r4
    c3e0:	3c1f      	subs	r4, #31
    c3e2:	da1c      	bge.n	c41e <__adddf3+0x1d2>
    c3e4:	340c      	adds	r4, #12
    c3e6:	dc0e      	bgt.n	c406 <__adddf3+0x1ba>
    c3e8:	f104 0414 	add.w	r4, r4, #20
    c3ec:	f1c4 0220 	rsb	r2, r4, #32
    c3f0:	fa20 f004 	lsr.w	r0, r0, r4
    c3f4:	fa01 f302 	lsl.w	r3, r1, r2
    c3f8:	ea40 0003 	orr.w	r0, r0, r3
    c3fc:	fa21 f304 	lsr.w	r3, r1, r4
    c400:	ea45 0103 	orr.w	r1, r5, r3
    c404:	bd30      	pop	{r4, r5, pc}
    c406:	f1c4 040c 	rsb	r4, r4, #12
    c40a:	f1c4 0220 	rsb	r2, r4, #32
    c40e:	fa20 f002 	lsr.w	r0, r0, r2
    c412:	fa01 f304 	lsl.w	r3, r1, r4
    c416:	ea40 0003 	orr.w	r0, r0, r3
    c41a:	4629      	mov	r1, r5
    c41c:	bd30      	pop	{r4, r5, pc}
    c41e:	fa21 f004 	lsr.w	r0, r1, r4
    c422:	4629      	mov	r1, r5
    c424:	bd30      	pop	{r4, r5, pc}
    c426:	f094 0f00 	teq	r4, #0
    c42a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c42e:	bf06      	itte	eq
    c430:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c434:	3401      	addeq	r4, #1
    c436:	3d01      	subne	r5, #1
    c438:	e74e      	b.n	c2d8 <__adddf3+0x8c>
    c43a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c43e:	bf18      	it	ne
    c440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c444:	d029      	beq.n	c49a <__adddf3+0x24e>
    c446:	ea94 0f05 	teq	r4, r5
    c44a:	bf08      	it	eq
    c44c:	ea90 0f02 	teqeq	r0, r2
    c450:	d005      	beq.n	c45e <__adddf3+0x212>
    c452:	ea54 0c00 	orrs.w	ip, r4, r0
    c456:	bf04      	itt	eq
    c458:	4619      	moveq	r1, r3
    c45a:	4610      	moveq	r0, r2
    c45c:	bd30      	pop	{r4, r5, pc}
    c45e:	ea91 0f03 	teq	r1, r3
    c462:	bf1e      	ittt	ne
    c464:	2100      	movne	r1, #0
    c466:	2000      	movne	r0, #0
    c468:	bd30      	popne	{r4, r5, pc}
    c46a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c46e:	d105      	bne.n	c47c <__adddf3+0x230>
    c470:	0040      	lsls	r0, r0, #1
    c472:	4149      	adcs	r1, r1
    c474:	bf28      	it	cs
    c476:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c47a:	bd30      	pop	{r4, r5, pc}
    c47c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c480:	bf3c      	itt	cc
    c482:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c486:	bd30      	popcc	{r4, r5, pc}
    c488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c48c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c494:	f04f 0000 	mov.w	r0, #0
    c498:	bd30      	pop	{r4, r5, pc}
    c49a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c49e:	bf1a      	itte	ne
    c4a0:	4619      	movne	r1, r3
    c4a2:	4610      	movne	r0, r2
    c4a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c4a8:	bf1c      	itt	ne
    c4aa:	460b      	movne	r3, r1
    c4ac:	4602      	movne	r2, r0
    c4ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c4b2:	bf06      	itte	eq
    c4b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c4b8:	ea91 0f03 	teqeq	r1, r3
    c4bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c4c0:	bd30      	pop	{r4, r5, pc}
    c4c2:	bf00      	nop

0000c4c4 <__aeabi_ui2d>:
    c4c4:	f090 0f00 	teq	r0, #0
    c4c8:	bf04      	itt	eq
    c4ca:	2100      	moveq	r1, #0
    c4cc:	4770      	bxeq	lr
    c4ce:	b530      	push	{r4, r5, lr}
    c4d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4d8:	f04f 0500 	mov.w	r5, #0
    c4dc:	f04f 0100 	mov.w	r1, #0
    c4e0:	e750      	b.n	c384 <__adddf3+0x138>
    c4e2:	bf00      	nop

0000c4e4 <__aeabi_i2d>:
    c4e4:	f090 0f00 	teq	r0, #0
    c4e8:	bf04      	itt	eq
    c4ea:	2100      	moveq	r1, #0
    c4ec:	4770      	bxeq	lr
    c4ee:	b530      	push	{r4, r5, lr}
    c4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c4f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c4fc:	bf48      	it	mi
    c4fe:	4240      	negmi	r0, r0
    c500:	f04f 0100 	mov.w	r1, #0
    c504:	e73e      	b.n	c384 <__adddf3+0x138>
    c506:	bf00      	nop

0000c508 <__aeabi_f2d>:
    c508:	0042      	lsls	r2, r0, #1
    c50a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c50e:	ea4f 0131 	mov.w	r1, r1, rrx
    c512:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c516:	bf1f      	itttt	ne
    c518:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c51c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c520:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c524:	4770      	bxne	lr
    c526:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c52a:	bf08      	it	eq
    c52c:	4770      	bxeq	lr
    c52e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c532:	bf04      	itt	eq
    c534:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c538:	4770      	bxeq	lr
    c53a:	b530      	push	{r4, r5, lr}
    c53c:	f44f 7460 	mov.w	r4, #896	; 0x380
    c540:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c544:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c548:	e71c      	b.n	c384 <__adddf3+0x138>
    c54a:	bf00      	nop

0000c54c <__aeabi_ul2d>:
    c54c:	ea50 0201 	orrs.w	r2, r0, r1
    c550:	bf08      	it	eq
    c552:	4770      	bxeq	lr
    c554:	b530      	push	{r4, r5, lr}
    c556:	f04f 0500 	mov.w	r5, #0
    c55a:	e00a      	b.n	c572 <__aeabi_l2d+0x16>

0000c55c <__aeabi_l2d>:
    c55c:	ea50 0201 	orrs.w	r2, r0, r1
    c560:	bf08      	it	eq
    c562:	4770      	bxeq	lr
    c564:	b530      	push	{r4, r5, lr}
    c566:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c56a:	d502      	bpl.n	c572 <__aeabi_l2d+0x16>
    c56c:	4240      	negs	r0, r0
    c56e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c572:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c576:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c57a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c57e:	f43f aed8 	beq.w	c332 <__adddf3+0xe6>
    c582:	f04f 0203 	mov.w	r2, #3
    c586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c58a:	bf18      	it	ne
    c58c:	3203      	addne	r2, #3
    c58e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c592:	bf18      	it	ne
    c594:	3203      	addne	r2, #3
    c596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c59a:	f1c2 0320 	rsb	r3, r2, #32
    c59e:	fa00 fc03 	lsl.w	ip, r0, r3
    c5a2:	fa20 f002 	lsr.w	r0, r0, r2
    c5a6:	fa01 fe03 	lsl.w	lr, r1, r3
    c5aa:	ea40 000e 	orr.w	r0, r0, lr
    c5ae:	fa21 f102 	lsr.w	r1, r1, r2
    c5b2:	4414      	add	r4, r2
    c5b4:	e6bd      	b.n	c332 <__adddf3+0xe6>
    c5b6:	bf00      	nop

0000c5b8 <__aeabi_uldivmod>:
    c5b8:	b953      	cbnz	r3, c5d0 <__aeabi_uldivmod+0x18>
    c5ba:	b94a      	cbnz	r2, c5d0 <__aeabi_uldivmod+0x18>
    c5bc:	2900      	cmp	r1, #0
    c5be:	bf08      	it	eq
    c5c0:	2800      	cmpeq	r0, #0
    c5c2:	bf1c      	itt	ne
    c5c4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    c5c8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    c5cc:	f000 b96e 	b.w	c8ac <__aeabi_idiv0>
    c5d0:	f1ad 0c08 	sub.w	ip, sp, #8
    c5d4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    c5d8:	f000 f806 	bl	c5e8 <__udivmoddi4>
    c5dc:	f8dd e004 	ldr.w	lr, [sp, #4]
    c5e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    c5e4:	b004      	add	sp, #16
    c5e6:	4770      	bx	lr

0000c5e8 <__udivmoddi4>:
    c5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
    c5ee:	460f      	mov	r7, r1
    c5f0:	4604      	mov	r4, r0
    c5f2:	4689      	mov	r9, r1
    c5f4:	2b00      	cmp	r3, #0
    c5f6:	d17c      	bne.n	c6f2 <__udivmoddi4+0x10a>
    c5f8:	428a      	cmp	r2, r1
    c5fa:	4616      	mov	r6, r2
    c5fc:	d940      	bls.n	c680 <__udivmoddi4+0x98>
    c5fe:	fab2 f282 	clz	r2, r2
    c602:	b14a      	cbz	r2, c618 <__udivmoddi4+0x30>
    c604:	f1c2 0120 	rsb	r1, r2, #32
    c608:	fa07 f302 	lsl.w	r3, r7, r2
    c60c:	4096      	lsls	r6, r2
    c60e:	4094      	lsls	r4, r2
    c610:	fa20 f101 	lsr.w	r1, r0, r1
    c614:	ea41 0903 	orr.w	r9, r1, r3
    c618:	ea4f 4e16 	mov.w	lr, r6, lsr #16
    c61c:	0c27      	lsrs	r7, r4, #16
    c61e:	fa1f f886 	uxth.w	r8, r6
    c622:	fbb9 fcfe 	udiv	ip, r9, lr
    c626:	fb0e 931c 	mls	r3, lr, ip, r9
    c62a:	fb0c f108 	mul.w	r1, ip, r8
    c62e:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    c632:	4299      	cmp	r1, r3
    c634:	d906      	bls.n	c644 <__udivmoddi4+0x5c>
    c636:	18f3      	adds	r3, r6, r3
    c638:	d202      	bcs.n	c640 <__udivmoddi4+0x58>
    c63a:	4299      	cmp	r1, r3
    c63c:	f200 8123 	bhi.w	c886 <__udivmoddi4+0x29e>
    c640:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c644:	1a59      	subs	r1, r3, r1
    c646:	b2a3      	uxth	r3, r4
    c648:	fbb1 f0fe 	udiv	r0, r1, lr
    c64c:	fb0e 1110 	mls	r1, lr, r0, r1
    c650:	fb00 f808 	mul.w	r8, r0, r8
    c654:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
    c658:	45a0      	cmp	r8, r4
    c65a:	d905      	bls.n	c668 <__udivmoddi4+0x80>
    c65c:	1934      	adds	r4, r6, r4
    c65e:	d202      	bcs.n	c666 <__udivmoddi4+0x7e>
    c660:	45a0      	cmp	r8, r4
    c662:	f200 810d 	bhi.w	c880 <__udivmoddi4+0x298>
    c666:	3801      	subs	r0, #1
    c668:	eba4 0408 	sub.w	r4, r4, r8
    c66c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c670:	2100      	movs	r1, #0
    c672:	b11d      	cbz	r5, c67c <__udivmoddi4+0x94>
    c674:	40d4      	lsrs	r4, r2
    c676:	2300      	movs	r3, #0
    c678:	e9c5 4300 	strd	r4, r3, [r5]
    c67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c680:	b902      	cbnz	r2, c684 <__udivmoddi4+0x9c>
    c682:	deff      	udf	#255	; 0xff
    c684:	fab2 f282 	clz	r2, r2
    c688:	2a00      	cmp	r2, #0
    c68a:	d14d      	bne.n	c728 <__udivmoddi4+0x140>
    c68c:	1b8f      	subs	r7, r1, r6
    c68e:	ea4f 4e16 	mov.w	lr, r6, lsr #16
    c692:	fa1f f886 	uxth.w	r8, r6
    c696:	2101      	movs	r1, #1
    c698:	0c23      	lsrs	r3, r4, #16
    c69a:	fbb7 fcfe 	udiv	ip, r7, lr
    c69e:	fb0e 771c 	mls	r7, lr, ip, r7
    c6a2:	fb08 f00c 	mul.w	r0, r8, ip
    c6a6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    c6aa:	4298      	cmp	r0, r3
    c6ac:	d90a      	bls.n	c6c4 <__udivmoddi4+0xdc>
    c6ae:	18f3      	adds	r3, r6, r3
    c6b0:	bf2c      	ite	cs
    c6b2:	2701      	movcs	r7, #1
    c6b4:	2700      	movcc	r7, #0
    c6b6:	4298      	cmp	r0, r3
    c6b8:	d902      	bls.n	c6c0 <__udivmoddi4+0xd8>
    c6ba:	2f00      	cmp	r7, #0
    c6bc:	f000 80d9 	beq.w	c872 <__udivmoddi4+0x28a>
    c6c0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    c6c4:	1a1f      	subs	r7, r3, r0
    c6c6:	b2a3      	uxth	r3, r4
    c6c8:	fbb7 f0fe 	udiv	r0, r7, lr
    c6cc:	fb0e 7710 	mls	r7, lr, r0, r7
    c6d0:	fb08 f800 	mul.w	r8, r8, r0
    c6d4:	ea43 4407 	orr.w	r4, r3, r7, lsl #16
    c6d8:	45a0      	cmp	r8, r4
    c6da:	d905      	bls.n	c6e8 <__udivmoddi4+0x100>
    c6dc:	1934      	adds	r4, r6, r4
    c6de:	d202      	bcs.n	c6e6 <__udivmoddi4+0xfe>
    c6e0:	45a0      	cmp	r8, r4
    c6e2:	f200 80ca 	bhi.w	c87a <__udivmoddi4+0x292>
    c6e6:	3801      	subs	r0, #1
    c6e8:	eba4 0408 	sub.w	r4, r4, r8
    c6ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    c6f0:	e7bf      	b.n	c672 <__udivmoddi4+0x8a>
    c6f2:	428b      	cmp	r3, r1
    c6f4:	d908      	bls.n	c708 <__udivmoddi4+0x120>
    c6f6:	2d00      	cmp	r5, #0
    c6f8:	f000 80b2 	beq.w	c860 <__udivmoddi4+0x278>
    c6fc:	2100      	movs	r1, #0
    c6fe:	e9c5 0700 	strd	r0, r7, [r5]
    c702:	4608      	mov	r0, r1
    c704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c708:	fab3 f183 	clz	r1, r3
    c70c:	2900      	cmp	r1, #0
    c70e:	d149      	bne.n	c7a4 <__udivmoddi4+0x1bc>
    c710:	42bb      	cmp	r3, r7
    c712:	f0c0 80a8 	bcc.w	c866 <__udivmoddi4+0x27e>
    c716:	4282      	cmp	r2, r0
    c718:	f240 80a5 	bls.w	c866 <__udivmoddi4+0x27e>
    c71c:	4608      	mov	r0, r1
    c71e:	2d00      	cmp	r5, #0
    c720:	d0ac      	beq.n	c67c <__udivmoddi4+0x94>
    c722:	e9c5 4900 	strd	r4, r9, [r5]
    c726:	e7a9      	b.n	c67c <__udivmoddi4+0x94>
    c728:	f1c2 0020 	rsb	r0, r2, #32
    c72c:	4096      	lsls	r6, r2
    c72e:	4091      	lsls	r1, r2
    c730:	fa27 f300 	lsr.w	r3, r7, r0
    c734:	ea4f 4e16 	mov.w	lr, r6, lsr #16
    c738:	fa24 f700 	lsr.w	r7, r4, r0
    c73c:	fa1f f886 	uxth.w	r8, r6
    c740:	4094      	lsls	r4, r2
    c742:	430f      	orrs	r7, r1
    c744:	fbb3 f0fe 	udiv	r0, r3, lr
    c748:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    c74c:	fb0e 3310 	mls	r3, lr, r0, r3
    c750:	fb00 f108 	mul.w	r1, r0, r8
    c754:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    c758:	4299      	cmp	r1, r3
    c75a:	d90c      	bls.n	c776 <__udivmoddi4+0x18e>
    c75c:	18f3      	adds	r3, r6, r3
    c75e:	bf2c      	ite	cs
    c760:	f04f 0c01 	movcs.w	ip, #1
    c764:	f04f 0c00 	movcc.w	ip, #0
    c768:	4299      	cmp	r1, r3
    c76a:	d903      	bls.n	c774 <__udivmoddi4+0x18c>
    c76c:	f1bc 0f00 	cmp.w	ip, #0
    c770:	f000 8092 	beq.w	c898 <__udivmoddi4+0x2b0>
    c774:	3801      	subs	r0, #1
    c776:	1a5b      	subs	r3, r3, r1
    c778:	b2bf      	uxth	r7, r7
    c77a:	fbb3 f1fe 	udiv	r1, r3, lr
    c77e:	fb0e 3311 	mls	r3, lr, r1, r3
    c782:	fb01 fc08 	mul.w	ip, r1, r8
    c786:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    c78a:	45bc      	cmp	ip, r7
    c78c:	d905      	bls.n	c79a <__udivmoddi4+0x1b2>
    c78e:	19f7      	adds	r7, r6, r7
    c790:	d202      	bcs.n	c798 <__udivmoddi4+0x1b0>
    c792:	45bc      	cmp	ip, r7
    c794:	f200 8087 	bhi.w	c8a6 <__udivmoddi4+0x2be>
    c798:	3901      	subs	r1, #1
    c79a:	eba7 070c 	sub.w	r7, r7, ip
    c79e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c7a2:	e779      	b.n	c698 <__udivmoddi4+0xb0>
    c7a4:	f1c1 0620 	rsb	r6, r1, #32
    c7a8:	fa03 f401 	lsl.w	r4, r3, r1
    c7ac:	fa02 fc01 	lsl.w	ip, r2, r1
    c7b0:	fa07 f801 	lsl.w	r8, r7, r1
    c7b4:	40f2      	lsrs	r2, r6
    c7b6:	fa27 f306 	lsr.w	r3, r7, r6
    c7ba:	fa20 f706 	lsr.w	r7, r0, r6
    c7be:	fa00 fe01 	lsl.w	lr, r0, r1
    c7c2:	4322      	orrs	r2, r4
    c7c4:	ea47 0408 	orr.w	r4, r7, r8
    c7c8:	ea4f 4812 	mov.w	r8, r2, lsr #16
    c7cc:	0c20      	lsrs	r0, r4, #16
    c7ce:	fa1f f982 	uxth.w	r9, r2
    c7d2:	fbb3 faf8 	udiv	sl, r3, r8
    c7d6:	fb08 371a 	mls	r7, r8, sl, r3
    c7da:	fb0a fb09 	mul.w	fp, sl, r9
    c7de:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    c7e2:	45bb      	cmp	fp, r7
    c7e4:	d909      	bls.n	c7fa <__udivmoddi4+0x212>
    c7e6:	19d7      	adds	r7, r2, r7
    c7e8:	bf2c      	ite	cs
    c7ea:	2301      	movcs	r3, #1
    c7ec:	2300      	movcc	r3, #0
    c7ee:	45bb      	cmp	fp, r7
    c7f0:	d901      	bls.n	c7f6 <__udivmoddi4+0x20e>
    c7f2:	2b00      	cmp	r3, #0
    c7f4:	d053      	beq.n	c89e <__udivmoddi4+0x2b6>
    c7f6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    c7fa:	eba7 070b 	sub.w	r7, r7, fp
    c7fe:	b2a4      	uxth	r4, r4
    c800:	fbb7 f0f8 	udiv	r0, r7, r8
    c804:	fb08 7710 	mls	r7, r8, r0, r7
    c808:	fb00 f909 	mul.w	r9, r0, r9
    c80c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
    c810:	45b9      	cmp	r9, r7
    c812:	d904      	bls.n	c81e <__udivmoddi4+0x236>
    c814:	19d7      	adds	r7, r2, r7
    c816:	d201      	bcs.n	c81c <__udivmoddi4+0x234>
    c818:	45b9      	cmp	r9, r7
    c81a:	d83a      	bhi.n	c892 <__udivmoddi4+0x2aa>
    c81c:	3801      	subs	r0, #1
    c81e:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
    c822:	eba7 0709 	sub.w	r7, r7, r9
    c826:	fba0 890c 	umull	r8, r9, r0, ip
    c82a:	454f      	cmp	r7, r9
    c82c:	46c3      	mov	fp, r8
    c82e:	464c      	mov	r4, r9
    c830:	d302      	bcc.n	c838 <__udivmoddi4+0x250>
    c832:	d107      	bne.n	c844 <__udivmoddi4+0x25c>
    c834:	45c6      	cmp	lr, r8
    c836:	d205      	bcs.n	c844 <__udivmoddi4+0x25c>
    c838:	ebb8 0b0c 	subs.w	fp, r8, ip
    c83c:	eb69 0202 	sbc.w	r2, r9, r2
    c840:	3801      	subs	r0, #1
    c842:	4614      	mov	r4, r2
    c844:	b31d      	cbz	r5, c88e <__udivmoddi4+0x2a6>
    c846:	ebbe 030b 	subs.w	r3, lr, fp
    c84a:	eb67 0704 	sbc.w	r7, r7, r4
    c84e:	fa07 f606 	lsl.w	r6, r7, r6
    c852:	40cb      	lsrs	r3, r1
    c854:	40cf      	lsrs	r7, r1
    c856:	2100      	movs	r1, #0
    c858:	431e      	orrs	r6, r3
    c85a:	e9c5 6700 	strd	r6, r7, [r5]
    c85e:	e70d      	b.n	c67c <__udivmoddi4+0x94>
    c860:	4629      	mov	r1, r5
    c862:	4628      	mov	r0, r5
    c864:	e70a      	b.n	c67c <__udivmoddi4+0x94>
    c866:	1a84      	subs	r4, r0, r2
    c868:	eb67 0303 	sbc.w	r3, r7, r3
    c86c:	2001      	movs	r0, #1
    c86e:	4699      	mov	r9, r3
    c870:	e755      	b.n	c71e <__udivmoddi4+0x136>
    c872:	f1ac 0c02 	sub.w	ip, ip, #2
    c876:	4433      	add	r3, r6
    c878:	e724      	b.n	c6c4 <__udivmoddi4+0xdc>
    c87a:	3802      	subs	r0, #2
    c87c:	4434      	add	r4, r6
    c87e:	e733      	b.n	c6e8 <__udivmoddi4+0x100>
    c880:	3802      	subs	r0, #2
    c882:	4434      	add	r4, r6
    c884:	e6f0      	b.n	c668 <__udivmoddi4+0x80>
    c886:	f1ac 0c02 	sub.w	ip, ip, #2
    c88a:	4433      	add	r3, r6
    c88c:	e6da      	b.n	c644 <__udivmoddi4+0x5c>
    c88e:	4629      	mov	r1, r5
    c890:	e6f4      	b.n	c67c <__udivmoddi4+0x94>
    c892:	3802      	subs	r0, #2
    c894:	4417      	add	r7, r2
    c896:	e7c2      	b.n	c81e <__udivmoddi4+0x236>
    c898:	3802      	subs	r0, #2
    c89a:	4433      	add	r3, r6
    c89c:	e76b      	b.n	c776 <__udivmoddi4+0x18e>
    c89e:	f1aa 0a02 	sub.w	sl, sl, #2
    c8a2:	4417      	add	r7, r2
    c8a4:	e7a9      	b.n	c7fa <__udivmoddi4+0x212>
    c8a6:	3902      	subs	r1, #2
    c8a8:	4437      	add	r7, r6
    c8aa:	e776      	b.n	c79a <__udivmoddi4+0x1b2>

0000c8ac <__aeabi_idiv0>:
    c8ac:	4770      	bx	lr
    c8ae:	bf00      	nop

0000c8b0 <TfLiteIntArrayGetSizeInBytes>:
    c8b0:	b480      	push	{r7}
    c8b2:	b083      	sub	sp, #12
    c8b4:	af00      	add	r7, sp, #0
    c8b6:	6078      	str	r0, [r7, #4]
    c8b8:	687b      	ldr	r3, [r7, #4]
    c8ba:	3301      	adds	r3, #1
    c8bc:	009b      	lsls	r3, r3, #2
    c8be:	4618      	mov	r0, r3
    c8c0:	370c      	adds	r7, #12
    c8c2:	46bd      	mov	sp, r7
    c8c4:	bc80      	pop	{r7}
    c8c6:	4770      	bx	lr

0000c8c8 <TfLiteIntArrayEqual>:
    c8c8:	b580      	push	{r7, lr}
    c8ca:	b082      	sub	sp, #8
    c8cc:	af00      	add	r7, sp, #0
    c8ce:	6078      	str	r0, [r7, #4]
    c8d0:	6039      	str	r1, [r7, #0]
    c8d2:	687a      	ldr	r2, [r7, #4]
    c8d4:	683b      	ldr	r3, [r7, #0]
    c8d6:	429a      	cmp	r2, r3
    c8d8:	d101      	bne.n	c8de <TfLiteIntArrayEqual+0x16>
    c8da:	2301      	movs	r3, #1
    c8dc:	e010      	b.n	c900 <TfLiteIntArrayEqual+0x38>
    c8de:	687b      	ldr	r3, [r7, #4]
    c8e0:	2b00      	cmp	r3, #0
    c8e2:	d002      	beq.n	c8ea <TfLiteIntArrayEqual+0x22>
    c8e4:	683b      	ldr	r3, [r7, #0]
    c8e6:	2b00      	cmp	r3, #0
    c8e8:	d101      	bne.n	c8ee <TfLiteIntArrayEqual+0x26>
    c8ea:	2300      	movs	r3, #0
    c8ec:	e008      	b.n	c900 <TfLiteIntArrayEqual+0x38>
    c8ee:	683b      	ldr	r3, [r7, #0]
    c8f0:	6819      	ldr	r1, [r3, #0]
    c8f2:	683b      	ldr	r3, [r7, #0]
    c8f4:	3304      	adds	r3, #4
    c8f6:	461a      	mov	r2, r3
    c8f8:	6878      	ldr	r0, [r7, #4]
    c8fa:	f000 f805 	bl	c908 <TfLiteIntArrayEqualsArray>
    c8fe:	4603      	mov	r3, r0
    c900:	4618      	mov	r0, r3
    c902:	3708      	adds	r7, #8
    c904:	46bd      	mov	sp, r7
    c906:	bd80      	pop	{r7, pc}

0000c908 <TfLiteIntArrayEqualsArray>:
    c908:	b480      	push	{r7}
    c90a:	b087      	sub	sp, #28
    c90c:	af00      	add	r7, sp, #0
    c90e:	60f8      	str	r0, [r7, #12]
    c910:	60b9      	str	r1, [r7, #8]
    c912:	607a      	str	r2, [r7, #4]
    c914:	68fb      	ldr	r3, [r7, #12]
    c916:	2b00      	cmp	r3, #0
    c918:	d106      	bne.n	c928 <TfLiteIntArrayEqualsArray+0x20>
    c91a:	68bb      	ldr	r3, [r7, #8]
    c91c:	2b00      	cmp	r3, #0
    c91e:	bf0c      	ite	eq
    c920:	2301      	moveq	r3, #1
    c922:	2300      	movne	r3, #0
    c924:	b2db      	uxtb	r3, r3
    c926:	e020      	b.n	c96a <TfLiteIntArrayEqualsArray+0x62>
    c928:	68fb      	ldr	r3, [r7, #12]
    c92a:	681b      	ldr	r3, [r3, #0]
    c92c:	68ba      	ldr	r2, [r7, #8]
    c92e:	429a      	cmp	r2, r3
    c930:	d001      	beq.n	c936 <TfLiteIntArrayEqualsArray+0x2e>
    c932:	2300      	movs	r3, #0
    c934:	e019      	b.n	c96a <TfLiteIntArrayEqualsArray+0x62>
    c936:	2300      	movs	r3, #0
    c938:	617b      	str	r3, [r7, #20]
    c93a:	e010      	b.n	c95e <TfLiteIntArrayEqualsArray+0x56>
    c93c:	68fa      	ldr	r2, [r7, #12]
    c93e:	697b      	ldr	r3, [r7, #20]
    c940:	009b      	lsls	r3, r3, #2
    c942:	4413      	add	r3, r2
    c944:	685a      	ldr	r2, [r3, #4]
    c946:	697b      	ldr	r3, [r7, #20]
    c948:	009b      	lsls	r3, r3, #2
    c94a:	6879      	ldr	r1, [r7, #4]
    c94c:	440b      	add	r3, r1
    c94e:	681b      	ldr	r3, [r3, #0]
    c950:	429a      	cmp	r2, r3
    c952:	d001      	beq.n	c958 <TfLiteIntArrayEqualsArray+0x50>
    c954:	2300      	movs	r3, #0
    c956:	e008      	b.n	c96a <TfLiteIntArrayEqualsArray+0x62>
    c958:	697b      	ldr	r3, [r7, #20]
    c95a:	3301      	adds	r3, #1
    c95c:	617b      	str	r3, [r7, #20]
    c95e:	68fb      	ldr	r3, [r7, #12]
    c960:	681b      	ldr	r3, [r3, #0]
    c962:	697a      	ldr	r2, [r7, #20]
    c964:	429a      	cmp	r2, r3
    c966:	dbe9      	blt.n	c93c <TfLiteIntArrayEqualsArray+0x34>
    c968:	2301      	movs	r3, #1
    c96a:	4618      	mov	r0, r3
    c96c:	371c      	adds	r7, #28
    c96e:	46bd      	mov	sp, r7
    c970:	bc80      	pop	{r7}
    c972:	4770      	bx	lr

0000c974 <TfLiteIntArrayCreate>:
    c974:	b580      	push	{r7, lr}
    c976:	b084      	sub	sp, #16
    c978:	af00      	add	r7, sp, #0
    c97a:	6078      	str	r0, [r7, #4]
    c97c:	6878      	ldr	r0, [r7, #4]
    c97e:	f7ff ff97 	bl	c8b0 <TfLiteIntArrayGetSizeInBytes>
    c982:	4603      	mov	r3, r0
    c984:	4618      	mov	r0, r3
    c986:	f018 fe2b 	bl	255e0 <malloc>
    c98a:	4603      	mov	r3, r0
    c98c:	60fb      	str	r3, [r7, #12]
    c98e:	68fb      	ldr	r3, [r7, #12]
    c990:	687a      	ldr	r2, [r7, #4]
    c992:	601a      	str	r2, [r3, #0]
    c994:	68fb      	ldr	r3, [r7, #12]
    c996:	4618      	mov	r0, r3
    c998:	3710      	adds	r7, #16
    c99a:	46bd      	mov	sp, r7
    c99c:	bd80      	pop	{r7, pc}

0000c99e <TfLiteIntArrayCopy>:
    c99e:	b580      	push	{r7, lr}
    c9a0:	b084      	sub	sp, #16
    c9a2:	af00      	add	r7, sp, #0
    c9a4:	6078      	str	r0, [r7, #4]
    c9a6:	687b      	ldr	r3, [r7, #4]
    c9a8:	2b00      	cmp	r3, #0
    c9aa:	d101      	bne.n	c9b0 <TfLiteIntArrayCopy+0x12>
    c9ac:	2300      	movs	r3, #0
    c9ae:	e013      	b.n	c9d8 <TfLiteIntArrayCopy+0x3a>
    c9b0:	687b      	ldr	r3, [r7, #4]
    c9b2:	681b      	ldr	r3, [r3, #0]
    c9b4:	4618      	mov	r0, r3
    c9b6:	f7ff ffdd 	bl	c974 <TfLiteIntArrayCreate>
    c9ba:	60f8      	str	r0, [r7, #12]
    c9bc:	68fb      	ldr	r3, [r7, #12]
    c9be:	2b00      	cmp	r3, #0
    c9c0:	d009      	beq.n	c9d6 <TfLiteIntArrayCopy+0x38>
    c9c2:	68fb      	ldr	r3, [r7, #12]
    c9c4:	1d18      	adds	r0, r3, #4
    c9c6:	687b      	ldr	r3, [r7, #4]
    c9c8:	1d19      	adds	r1, r3, #4
    c9ca:	687b      	ldr	r3, [r7, #4]
    c9cc:	681b      	ldr	r3, [r3, #0]
    c9ce:	009b      	lsls	r3, r3, #2
    c9d0:	461a      	mov	r2, r3
    c9d2:	f024 fa49 	bl	30e68 <memcpy>
    c9d6:	68fb      	ldr	r3, [r7, #12]
    c9d8:	4618      	mov	r0, r3
    c9da:	3710      	adds	r7, #16
    c9dc:	46bd      	mov	sp, r7
    c9de:	bd80      	pop	{r7, pc}

0000c9e0 <TfLiteIntArrayFree>:
    c9e0:	b580      	push	{r7, lr}
    c9e2:	b082      	sub	sp, #8
    c9e4:	af00      	add	r7, sp, #0
    c9e6:	6078      	str	r0, [r7, #4]
    c9e8:	6878      	ldr	r0, [r7, #4]
    c9ea:	f018 fe01 	bl	255f0 <free>
    c9ee:	bf00      	nop
    c9f0:	3708      	adds	r7, #8
    c9f2:	46bd      	mov	sp, r7
    c9f4:	bd80      	pop	{r7, pc}

0000c9f6 <TfLiteFloatArrayGetSizeInBytes>:
    c9f6:	b480      	push	{r7}
    c9f8:	b083      	sub	sp, #12
    c9fa:	af00      	add	r7, sp, #0
    c9fc:	6078      	str	r0, [r7, #4]
    c9fe:	687b      	ldr	r3, [r7, #4]
    ca00:	3301      	adds	r3, #1
    ca02:	009b      	lsls	r3, r3, #2
    ca04:	4618      	mov	r0, r3
    ca06:	370c      	adds	r7, #12
    ca08:	46bd      	mov	sp, r7
    ca0a:	bc80      	pop	{r7}
    ca0c:	4770      	bx	lr

0000ca0e <TfLiteFloatArrayCreate>:
    ca0e:	b580      	push	{r7, lr}
    ca10:	b084      	sub	sp, #16
    ca12:	af00      	add	r7, sp, #0
    ca14:	6078      	str	r0, [r7, #4]
    ca16:	6878      	ldr	r0, [r7, #4]
    ca18:	f7ff ffed 	bl	c9f6 <TfLiteFloatArrayGetSizeInBytes>
    ca1c:	4603      	mov	r3, r0
    ca1e:	4618      	mov	r0, r3
    ca20:	f018 fdde 	bl	255e0 <malloc>
    ca24:	4603      	mov	r3, r0
    ca26:	60fb      	str	r3, [r7, #12]
    ca28:	68fb      	ldr	r3, [r7, #12]
    ca2a:	687a      	ldr	r2, [r7, #4]
    ca2c:	601a      	str	r2, [r3, #0]
    ca2e:	68fb      	ldr	r3, [r7, #12]
    ca30:	4618      	mov	r0, r3
    ca32:	3710      	adds	r7, #16
    ca34:	46bd      	mov	sp, r7
    ca36:	bd80      	pop	{r7, pc}

0000ca38 <TfLiteFloatArrayFree>:
    ca38:	b580      	push	{r7, lr}
    ca3a:	b082      	sub	sp, #8
    ca3c:	af00      	add	r7, sp, #0
    ca3e:	6078      	str	r0, [r7, #4]
    ca40:	6878      	ldr	r0, [r7, #4]
    ca42:	f018 fdd5 	bl	255f0 <free>
    ca46:	bf00      	nop
    ca48:	3708      	adds	r7, #8
    ca4a:	46bd      	mov	sp, r7
    ca4c:	bd80      	pop	{r7, pc}

0000ca4e <TfLiteTensorDataFree>:
    ca4e:	b580      	push	{r7, lr}
    ca50:	b082      	sub	sp, #8
    ca52:	af00      	add	r7, sp, #0
    ca54:	6078      	str	r0, [r7, #4]
    ca56:	687b      	ldr	r3, [r7, #4]
    ca58:	7d1b      	ldrb	r3, [r3, #20]
    ca5a:	2b04      	cmp	r3, #4
    ca5c:	d003      	beq.n	ca66 <TfLiteTensorDataFree+0x18>
    ca5e:	687b      	ldr	r3, [r7, #4]
    ca60:	7d1b      	ldrb	r3, [r3, #20]
    ca62:	2b05      	cmp	r3, #5
    ca64:	d104      	bne.n	ca70 <TfLiteTensorDataFree+0x22>
    ca66:	687b      	ldr	r3, [r7, #4]
    ca68:	685b      	ldr	r3, [r3, #4]
    ca6a:	4618      	mov	r0, r3
    ca6c:	f018 fdc0 	bl	255f0 <free>
    ca70:	687b      	ldr	r3, [r7, #4]
    ca72:	2200      	movs	r2, #0
    ca74:	605a      	str	r2, [r3, #4]
    ca76:	bf00      	nop
    ca78:	3708      	adds	r7, #8
    ca7a:	46bd      	mov	sp, r7
    ca7c:	bd80      	pop	{r7, pc}

0000ca7e <TfLiteQuantizationFree>:
    ca7e:	b580      	push	{r7, lr}
    ca80:	b084      	sub	sp, #16
    ca82:	af00      	add	r7, sp, #0
    ca84:	6078      	str	r0, [r7, #4]
    ca86:	687b      	ldr	r3, [r7, #4]
    ca88:	781b      	ldrb	r3, [r3, #0]
    ca8a:	2b01      	cmp	r3, #1
    ca8c:	d11d      	bne.n	caca <TfLiteQuantizationFree+0x4c>
    ca8e:	687b      	ldr	r3, [r7, #4]
    ca90:	685b      	ldr	r3, [r3, #4]
    ca92:	60fb      	str	r3, [r7, #12]
    ca94:	68fb      	ldr	r3, [r7, #12]
    ca96:	681b      	ldr	r3, [r3, #0]
    ca98:	2b00      	cmp	r3, #0
    ca9a:	d007      	beq.n	caac <TfLiteQuantizationFree+0x2e>
    ca9c:	68fb      	ldr	r3, [r7, #12]
    ca9e:	681b      	ldr	r3, [r3, #0]
    caa0:	4618      	mov	r0, r3
    caa2:	f7ff ffc9 	bl	ca38 <TfLiteFloatArrayFree>
    caa6:	68fb      	ldr	r3, [r7, #12]
    caa8:	2200      	movs	r2, #0
    caaa:	601a      	str	r2, [r3, #0]
    caac:	68fb      	ldr	r3, [r7, #12]
    caae:	685b      	ldr	r3, [r3, #4]
    cab0:	2b00      	cmp	r3, #0
    cab2:	d007      	beq.n	cac4 <TfLiteQuantizationFree+0x46>
    cab4:	68fb      	ldr	r3, [r7, #12]
    cab6:	685b      	ldr	r3, [r3, #4]
    cab8:	4618      	mov	r0, r3
    caba:	f7ff ff91 	bl	c9e0 <TfLiteIntArrayFree>
    cabe:	68fb      	ldr	r3, [r7, #12]
    cac0:	2200      	movs	r2, #0
    cac2:	605a      	str	r2, [r3, #4]
    cac4:	68f8      	ldr	r0, [r7, #12]
    cac6:	f018 fd93 	bl	255f0 <free>
    caca:	687b      	ldr	r3, [r7, #4]
    cacc:	2200      	movs	r2, #0
    cace:	605a      	str	r2, [r3, #4]
    cad0:	687b      	ldr	r3, [r7, #4]
    cad2:	2200      	movs	r2, #0
    cad4:	701a      	strb	r2, [r3, #0]
    cad6:	bf00      	nop
    cad8:	3710      	adds	r7, #16
    cada:	46bd      	mov	sp, r7
    cadc:	bd80      	pop	{r7, pc}

0000cade <TfLiteSparsityFree>:
    cade:	b590      	push	{r4, r7, lr}
    cae0:	b089      	sub	sp, #36	; 0x24
    cae2:	af00      	add	r7, sp, #0
    cae4:	6078      	str	r0, [r7, #4]
    cae6:	687b      	ldr	r3, [r7, #4]
    cae8:	2b00      	cmp	r3, #0
    caea:	d04b      	beq.n	cb84 <TfLiteSparsityFree+0xa6>
    caec:	687b      	ldr	r3, [r7, #4]
    caee:	681b      	ldr	r3, [r3, #0]
    caf0:	2b00      	cmp	r3, #0
    caf2:	d007      	beq.n	cb04 <TfLiteSparsityFree+0x26>
    caf4:	687b      	ldr	r3, [r7, #4]
    caf6:	681b      	ldr	r3, [r3, #0]
    caf8:	4618      	mov	r0, r3
    cafa:	f7ff ff71 	bl	c9e0 <TfLiteIntArrayFree>
    cafe:	687b      	ldr	r3, [r7, #4]
    cb00:	2200      	movs	r2, #0
    cb02:	601a      	str	r2, [r3, #0]
    cb04:	687b      	ldr	r3, [r7, #4]
    cb06:	685b      	ldr	r3, [r3, #4]
    cb08:	2b00      	cmp	r3, #0
    cb0a:	d007      	beq.n	cb1c <TfLiteSparsityFree+0x3e>
    cb0c:	687b      	ldr	r3, [r7, #4]
    cb0e:	685b      	ldr	r3, [r3, #4]
    cb10:	4618      	mov	r0, r3
    cb12:	f7ff ff65 	bl	c9e0 <TfLiteIntArrayFree>
    cb16:	687b      	ldr	r3, [r7, #4]
    cb18:	2200      	movs	r2, #0
    cb1a:	605a      	str	r2, [r3, #4]
    cb1c:	687b      	ldr	r3, [r7, #4]
    cb1e:	689b      	ldr	r3, [r3, #8]
    cb20:	2b00      	cmp	r3, #0
    cb22:	d02b      	beq.n	cb7c <TfLiteSparsityFree+0x9e>
    cb24:	2300      	movs	r3, #0
    cb26:	61fb      	str	r3, [r7, #28]
    cb28:	e01b      	b.n	cb62 <TfLiteSparsityFree+0x84>
    cb2a:	687b      	ldr	r3, [r7, #4]
    cb2c:	689a      	ldr	r2, [r3, #8]
    cb2e:	69fb      	ldr	r3, [r7, #28]
    cb30:	011b      	lsls	r3, r3, #4
    cb32:	4413      	add	r3, r2
    cb34:	f107 040c 	add.w	r4, r7, #12
    cb38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    cb3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    cb3e:	7b3b      	ldrb	r3, [r7, #12]
    cb40:	2b01      	cmp	r3, #1
    cb42:	d10b      	bne.n	cb5c <TfLiteSparsityFree+0x7e>
    cb44:	697b      	ldr	r3, [r7, #20]
    cb46:	4618      	mov	r0, r3
    cb48:	f7ff ff4a 	bl	c9e0 <TfLiteIntArrayFree>
    cb4c:	2300      	movs	r3, #0
    cb4e:	617b      	str	r3, [r7, #20]
    cb50:	69bb      	ldr	r3, [r7, #24]
    cb52:	4618      	mov	r0, r3
    cb54:	f7ff ff44 	bl	c9e0 <TfLiteIntArrayFree>
    cb58:	2300      	movs	r3, #0
    cb5a:	61bb      	str	r3, [r7, #24]
    cb5c:	69fb      	ldr	r3, [r7, #28]
    cb5e:	3301      	adds	r3, #1
    cb60:	61fb      	str	r3, [r7, #28]
    cb62:	687b      	ldr	r3, [r7, #4]
    cb64:	68db      	ldr	r3, [r3, #12]
    cb66:	69fa      	ldr	r2, [r7, #28]
    cb68:	429a      	cmp	r2, r3
    cb6a:	dbde      	blt.n	cb2a <TfLiteSparsityFree+0x4c>
    cb6c:	687b      	ldr	r3, [r7, #4]
    cb6e:	689b      	ldr	r3, [r3, #8]
    cb70:	4618      	mov	r0, r3
    cb72:	f018 fd3d 	bl	255f0 <free>
    cb76:	687b      	ldr	r3, [r7, #4]
    cb78:	2200      	movs	r2, #0
    cb7a:	609a      	str	r2, [r3, #8]
    cb7c:	6878      	ldr	r0, [r7, #4]
    cb7e:	f018 fd37 	bl	255f0 <free>
    cb82:	e000      	b.n	cb86 <TfLiteSparsityFree+0xa8>
    cb84:	bf00      	nop
    cb86:	3724      	adds	r7, #36	; 0x24
    cb88:	46bd      	mov	sp, r7
    cb8a:	bd90      	pop	{r4, r7, pc}

0000cb8c <TfLiteTensorFree>:
    cb8c:	b580      	push	{r7, lr}
    cb8e:	b082      	sub	sp, #8
    cb90:	af00      	add	r7, sp, #0
    cb92:	6078      	str	r0, [r7, #4]
    cb94:	6878      	ldr	r0, [r7, #4]
    cb96:	f7ff ff5a 	bl	ca4e <TfLiteTensorDataFree>
    cb9a:	687b      	ldr	r3, [r7, #4]
    cb9c:	689b      	ldr	r3, [r3, #8]
    cb9e:	2b00      	cmp	r3, #0
    cba0:	d004      	beq.n	cbac <TfLiteTensorFree+0x20>
    cba2:	687b      	ldr	r3, [r7, #4]
    cba4:	689b      	ldr	r3, [r3, #8]
    cba6:	4618      	mov	r0, r3
    cba8:	f7ff ff1a 	bl	c9e0 <TfLiteIntArrayFree>
    cbac:	687b      	ldr	r3, [r7, #4]
    cbae:	2200      	movs	r2, #0
    cbb0:	609a      	str	r2, [r3, #8]
    cbb2:	687b      	ldr	r3, [r7, #4]
    cbb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d004      	beq.n	cbc4 <TfLiteTensorFree+0x38>
    cbba:	687b      	ldr	r3, [r7, #4]
    cbbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    cbbe:	4618      	mov	r0, r3
    cbc0:	f7ff ff0e 	bl	c9e0 <TfLiteIntArrayFree>
    cbc4:	687b      	ldr	r3, [r7, #4]
    cbc6:	2200      	movs	r2, #0
    cbc8:	63da      	str	r2, [r3, #60]	; 0x3c
    cbca:	687b      	ldr	r3, [r7, #4]
    cbcc:	3330      	adds	r3, #48	; 0x30
    cbce:	4618      	mov	r0, r3
    cbd0:	f7ff ff55 	bl	ca7e <TfLiteQuantizationFree>
    cbd4:	687b      	ldr	r3, [r7, #4]
    cbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    cbd8:	4618      	mov	r0, r3
    cbda:	f7ff ff80 	bl	cade <TfLiteSparsityFree>
    cbde:	687b      	ldr	r3, [r7, #4]
    cbe0:	2200      	movs	r2, #0
    cbe2:	639a      	str	r2, [r3, #56]	; 0x38
    cbe4:	bf00      	nop
    cbe6:	3708      	adds	r7, #8
    cbe8:	46bd      	mov	sp, r7
    cbea:	bd80      	pop	{r7, pc}

0000cbec <TfLiteTensorReset>:
    cbec:	b082      	sub	sp, #8
    cbee:	b580      	push	{r7, lr}
    cbf0:	b084      	sub	sp, #16
    cbf2:	af00      	add	r7, sp, #0
    cbf4:	60b9      	str	r1, [r7, #8]
    cbf6:	607a      	str	r2, [r7, #4]
    cbf8:	61fb      	str	r3, [r7, #28]
    cbfa:	4603      	mov	r3, r0
    cbfc:	73fb      	strb	r3, [r7, #15]
    cbfe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    cc00:	f7ff ffc4 	bl	cb8c <TfLiteTensorFree>
    cc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc06:	7bfa      	ldrb	r2, [r7, #15]
    cc08:	701a      	strb	r2, [r3, #0]
    cc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc0c:	68ba      	ldr	r2, [r7, #8]
    cc0e:	621a      	str	r2, [r3, #32]
    cc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc12:	687a      	ldr	r2, [r7, #4]
    cc14:	609a      	str	r2, [r3, #8]
    cc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc18:	330c      	adds	r3, #12
    cc1a:	f107 021c 	add.w	r2, r7, #28
    cc1e:	e892 0003 	ldmia.w	r2, {r0, r1}
    cc22:	e883 0003 	stmia.w	r3, {r0, r1}
    cc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    cc2a:	605a      	str	r2, [r3, #4]
    cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    cc30:	619a      	str	r2, [r3, #24]
    cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc34:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
    cc38:	751a      	strb	r2, [r3, #20]
    cc3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    cc3e:	61da      	str	r2, [r3, #28]
    cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc42:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
    cc46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    cc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc4c:	2200      	movs	r2, #0
    cc4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    cc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    cc54:	2200      	movs	r2, #0
    cc56:	635a      	str	r2, [r3, #52]	; 0x34
    cc58:	bf00      	nop
    cc5a:	3710      	adds	r7, #16
    cc5c:	46bd      	mov	sp, r7
    cc5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    cc62:	b002      	add	sp, #8
    cc64:	4770      	bx	lr

0000cc66 <TfLiteTensorRealloc>:
    cc66:	b580      	push	{r7, lr}
    cc68:	b082      	sub	sp, #8
    cc6a:	af00      	add	r7, sp, #0
    cc6c:	6078      	str	r0, [r7, #4]
    cc6e:	6039      	str	r1, [r7, #0]
    cc70:	683b      	ldr	r3, [r7, #0]
    cc72:	7d1b      	ldrb	r3, [r3, #20]
    cc74:	2b04      	cmp	r3, #4
    cc76:	d003      	beq.n	cc80 <TfLiteTensorRealloc+0x1a>
    cc78:	683b      	ldr	r3, [r7, #0]
    cc7a:	7d1b      	ldrb	r3, [r3, #20]
    cc7c:	2b05      	cmp	r3, #5
    cc7e:	d11d      	bne.n	ccbc <TfLiteTensorRealloc+0x56>
    cc80:	683b      	ldr	r3, [r7, #0]
    cc82:	685b      	ldr	r3, [r3, #4]
    cc84:	2b00      	cmp	r3, #0
    cc86:	d107      	bne.n	cc98 <TfLiteTensorRealloc+0x32>
    cc88:	6878      	ldr	r0, [r7, #4]
    cc8a:	f018 fca9 	bl	255e0 <malloc>
    cc8e:	4603      	mov	r3, r0
    cc90:	461a      	mov	r2, r3
    cc92:	683b      	ldr	r3, [r7, #0]
    cc94:	605a      	str	r2, [r3, #4]
    cc96:	e00d      	b.n	ccb4 <TfLiteTensorRealloc+0x4e>
    cc98:	683b      	ldr	r3, [r7, #0]
    cc9a:	699b      	ldr	r3, [r3, #24]
    cc9c:	687a      	ldr	r2, [r7, #4]
    cc9e:	429a      	cmp	r2, r3
    cca0:	d908      	bls.n	ccb4 <TfLiteTensorRealloc+0x4e>
    cca2:	683b      	ldr	r3, [r7, #0]
    cca4:	685b      	ldr	r3, [r3, #4]
    cca6:	6879      	ldr	r1, [r7, #4]
    cca8:	4618      	mov	r0, r3
    ccaa:	f018 ffc5 	bl	25c38 <realloc>
    ccae:	4602      	mov	r2, r0
    ccb0:	683b      	ldr	r3, [r7, #0]
    ccb2:	605a      	str	r2, [r3, #4]
    ccb4:	683b      	ldr	r3, [r7, #0]
    ccb6:	687a      	ldr	r2, [r7, #4]
    ccb8:	619a      	str	r2, [r3, #24]
    ccba:	e000      	b.n	ccbe <TfLiteTensorRealloc+0x58>
    ccbc:	bf00      	nop
    ccbe:	3708      	adds	r7, #8
    ccc0:	46bd      	mov	sp, r7
    ccc2:	bd80      	pop	{r7, pc}

0000ccc4 <TfLiteTypeGetName>:
    ccc4:	b480      	push	{r7}
    ccc6:	b083      	sub	sp, #12
    ccc8:	af00      	add	r7, sp, #0
    ccca:	4603      	mov	r3, r0
    cccc:	71fb      	strb	r3, [r7, #7]
    ccce:	79fb      	ldrb	r3, [r7, #7]
    ccd0:	2b0b      	cmp	r3, #11
    ccd2:	d833      	bhi.n	cd3c <TfLiteTypeGetName+0x78>
    ccd4:	a201      	add	r2, pc, #4	; (adr r2, ccdc <TfLiteTypeGetName+0x18>)
    ccd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ccda:	bf00      	nop
    ccdc:	0000cd0d 	.word	0x0000cd0d
    cce0:	0000cd11 	.word	0x0000cd11
    cce4:	0000cd19 	.word	0x0000cd19
    cce8:	0000cd1d 	.word	0x0000cd1d
    ccec:	0000cd25 	.word	0x0000cd25
    ccf0:	0000cd31 	.word	0x0000cd31
    ccf4:	0000cd29 	.word	0x0000cd29
    ccf8:	0000cd15 	.word	0x0000cd15
    ccfc:	0000cd2d 	.word	0x0000cd2d
    cd00:	0000cd21 	.word	0x0000cd21
    cd04:	0000cd35 	.word	0x0000cd35
    cd08:	0000cd39 	.word	0x0000cd39
    cd0c:	4b0e      	ldr	r3, [pc, #56]	; (cd48 <TfLiteTypeGetName+0x84>)
    cd0e:	e016      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd10:	4b0e      	ldr	r3, [pc, #56]	; (cd4c <TfLiteTypeGetName+0x88>)
    cd12:	e014      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd14:	4b0e      	ldr	r3, [pc, #56]	; (cd50 <TfLiteTypeGetName+0x8c>)
    cd16:	e012      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd18:	4b0e      	ldr	r3, [pc, #56]	; (cd54 <TfLiteTypeGetName+0x90>)
    cd1a:	e010      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd1c:	4b0e      	ldr	r3, [pc, #56]	; (cd58 <TfLiteTypeGetName+0x94>)
    cd1e:	e00e      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd20:	4b0e      	ldr	r3, [pc, #56]	; (cd5c <TfLiteTypeGetName+0x98>)
    cd22:	e00c      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd24:	4b0e      	ldr	r3, [pc, #56]	; (cd60 <TfLiteTypeGetName+0x9c>)
    cd26:	e00a      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd28:	4b0e      	ldr	r3, [pc, #56]	; (cd64 <TfLiteTypeGetName+0xa0>)
    cd2a:	e008      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd2c:	4b0e      	ldr	r3, [pc, #56]	; (cd68 <TfLiteTypeGetName+0xa4>)
    cd2e:	e006      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd30:	4b0e      	ldr	r3, [pc, #56]	; (cd6c <TfLiteTypeGetName+0xa8>)
    cd32:	e004      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd34:	4b0e      	ldr	r3, [pc, #56]	; (cd70 <TfLiteTypeGetName+0xac>)
    cd36:	e002      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd38:	4b0e      	ldr	r3, [pc, #56]	; (cd74 <TfLiteTypeGetName+0xb0>)
    cd3a:	e000      	b.n	cd3e <TfLiteTypeGetName+0x7a>
    cd3c:	4b0e      	ldr	r3, [pc, #56]	; (cd78 <TfLiteTypeGetName+0xb4>)
    cd3e:	4618      	mov	r0, r3
    cd40:	370c      	adds	r7, #12
    cd42:	46bd      	mov	sp, r7
    cd44:	bc80      	pop	{r7}
    cd46:	4770      	bx	lr
    cd48:	00031c48 	.word	0x00031c48
    cd4c:	00031c50 	.word	0x00031c50
    cd50:	00031c58 	.word	0x00031c58
    cd54:	00031c60 	.word	0x00031c60
    cd58:	00031c68 	.word	0x00031c68
    cd5c:	00031c70 	.word	0x00031c70
    cd60:	00031c78 	.word	0x00031c78
    cd64:	00031c80 	.word	0x00031c80
    cd68:	00031c88 	.word	0x00031c88
    cd6c:	00031c94 	.word	0x00031c94
    cd70:	00031c9c 	.word	0x00031c9c
    cd74:	00031ca4 	.word	0x00031ca4
    cd78:	00031cac 	.word	0x00031cac

0000cd7c <TfLiteDelegateCreate>:
    cd7c:	b5b0      	push	{r4, r5, r7, lr}
    cd7e:	b08a      	sub	sp, #40	; 0x28
    cd80:	af00      	add	r7, sp, #0
    cd82:	6078      	str	r0, [r7, #4]
    cd84:	f107 0308 	add.w	r3, r7, #8
    cd88:	2220      	movs	r2, #32
    cd8a:	2100      	movs	r1, #0
    cd8c:	4618      	mov	r0, r3
    cd8e:	f024 f892 	bl	30eb6 <memset>
    cd92:	687b      	ldr	r3, [r7, #4]
    cd94:	461d      	mov	r5, r3
    cd96:	f107 0408 	add.w	r4, r7, #8
    cd9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    cd9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cd9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    cda2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    cda6:	6878      	ldr	r0, [r7, #4]
    cda8:	3728      	adds	r7, #40	; 0x28
    cdaa:	46bd      	mov	sp, r7
    cdac:	bdb0      	pop	{r4, r5, r7, pc}
    cdae:	bf00      	nop

0000cdb0 <is_fnqual_component_type>:
    cdb0:	284d      	cmp	r0, #77	; 0x4d
    cdb2:	d009      	beq.n	cdc8 <is_fnqual_component_type+0x18>
    cdb4:	d805      	bhi.n	cdc2 <is_fnqual_component_type+0x12>
    cdb6:	381c      	subs	r0, #28
    cdb8:	2804      	cmp	r0, #4
    cdba:	bf8c      	ite	hi
    cdbc:	2000      	movhi	r0, #0
    cdbe:	2001      	movls	r0, #1
    cdc0:	4770      	bx	lr
    cdc2:	384f      	subs	r0, #79	; 0x4f
    cdc4:	2801      	cmp	r0, #1
    cdc6:	e7f8      	b.n	cdba <is_fnqual_component_type+0xa>
    cdc8:	2001      	movs	r0, #1
    cdca:	4770      	bx	lr

0000cdcc <d_make_empty>:
    cdcc:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
    cdd0:	2100      	movs	r1, #0
    cdd2:	429a      	cmp	r2, r3
    cdd4:	bfb7      	itett	lt
    cdd6:	6903      	ldrlt	r3, [r0, #16]
    cdd8:	460b      	movge	r3, r1
    cdda:	eb03 1302 	addlt.w	r3, r3, r2, lsl #4
    cdde:	3201      	addlt	r2, #1
    cde0:	bfbc      	itt	lt
    cde2:	6059      	strlt	r1, [r3, #4]
    cde4:	6142      	strlt	r2, [r0, #20]
    cde6:	4618      	mov	r0, r3
    cde8:	4770      	bx	lr

0000cdea <d_make_comp>:
    cdea:	b570      	push	{r4, r5, r6, lr}
    cdec:	461d      	mov	r5, r3
    cdee:	1e4b      	subs	r3, r1, #1
    cdf0:	460e      	mov	r6, r1
    cdf2:	4614      	mov	r4, r2
    cdf4:	2b4f      	cmp	r3, #79	; 0x4f
    cdf6:	d837      	bhi.n	ce68 <d_make_comp+0x7e>
    cdf8:	e8df f003 	tbb	[pc, r3]
    cdfc:	28282828 	.word	0x28282828
    ce00:	36363636 	.word	0x36363636
    ce04:	32283232 	.word	0x32283232
    ce08:	32323232 	.word	0x32323232
    ce0c:	32323232 	.word	0x32323232
    ce10:	36323232 	.word	0x36323232
    ce14:	2a2a2a2a 	.word	0x2a2a2a2a
    ce18:	2a2a2a2a 	.word	0x2a2a2a2a
    ce1c:	32323228 	.word	0x32323228
    ce20:	32363232 	.word	0x32363232
    ce24:	3628292a 	.word	0x3628292a
    ce28:	322a2a28 	.word	0x322a2a28
    ce2c:	32363629 	.word	0x32363629
    ce30:	28283232 	.word	0x28283232
    ce34:	32282828 	.word	0x32282828
    ce38:	28322828 	.word	0x28322828
    ce3c:	32323636 	.word	0x32323636
    ce40:	36363632 	.word	0x36363632
    ce44:	28323232 	.word	0x28323232
    ce48:	2a2a282a 	.word	0x2a2a282a
    ce4c:	b154      	cbz	r4, ce64 <d_make_comp+0x7a>
    ce4e:	b15d      	cbz	r5, ce68 <d_make_comp+0x7e>
    ce50:	f7ff ffbc 	bl	cdcc <d_make_empty>
    ce54:	b110      	cbz	r0, ce5c <d_make_comp+0x72>
    ce56:	7006      	strb	r6, [r0, #0]
    ce58:	e9c0 4502 	strd	r4, r5, [r0, #8]
    ce5c:	4604      	mov	r4, r0
    ce5e:	e001      	b.n	ce64 <d_make_comp+0x7a>
    ce60:	2c00      	cmp	r4, #0
    ce62:	d1f5      	bne.n	ce50 <d_make_comp+0x66>
    ce64:	4620      	mov	r0, r4
    ce66:	bd70      	pop	{r4, r5, r6, pc}
    ce68:	2400      	movs	r4, #0
    ce6a:	e7fb      	b.n	ce64 <d_make_comp+0x7a>

0000ce6c <d_make_name>:
    ce6c:	b538      	push	{r3, r4, r5, lr}
    ce6e:	460c      	mov	r4, r1
    ce70:	4615      	mov	r5, r2
    ce72:	f7ff ffab 	bl	cdcc <d_make_empty>
    ce76:	b138      	cbz	r0, ce88 <d_make_name+0x1c>
    ce78:	2300      	movs	r3, #0
    ce7a:	b134      	cbz	r4, ce8a <d_make_name+0x1e>
    ce7c:	429d      	cmp	r5, r3
    ce7e:	dd06      	ble.n	ce8e <d_make_name+0x22>
    ce80:	6043      	str	r3, [r0, #4]
    ce82:	7003      	strb	r3, [r0, #0]
    ce84:	e9c0 4502 	strd	r4, r5, [r0, #8]
    ce88:	bd38      	pop	{r3, r4, r5, pc}
    ce8a:	4620      	mov	r0, r4
    ce8c:	e7fc      	b.n	ce88 <d_make_name+0x1c>
    ce8e:	4618      	mov	r0, r3
    ce90:	e7fa      	b.n	ce88 <d_make_name+0x1c>

0000ce92 <d_make_builtin_type>:
    ce92:	b510      	push	{r4, lr}
    ce94:	460c      	mov	r4, r1
    ce96:	f7ff ff99 	bl	cdcc <d_make_empty>
    ce9a:	b110      	cbz	r0, cea2 <d_make_builtin_type+0x10>
    ce9c:	2327      	movs	r3, #39	; 0x27
    ce9e:	6084      	str	r4, [r0, #8]
    cea0:	7003      	strb	r3, [r0, #0]
    cea2:	bd10      	pop	{r4, pc}

0000cea4 <d_ref_qualifier>:
    cea4:	68c3      	ldr	r3, [r0, #12]
    cea6:	460a      	mov	r2, r1
    cea8:	7819      	ldrb	r1, [r3, #0]
    ceaa:	2952      	cmp	r1, #82	; 0x52
    ceac:	d006      	beq.n	cebc <d_ref_qualifier+0x18>
    ceae:	294f      	cmp	r1, #79	; 0x4f
    ceb0:	d10c      	bne.n	cecc <d_ref_qualifier+0x28>
    ceb2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    ceb4:	3103      	adds	r1, #3
    ceb6:	62c1      	str	r1, [r0, #44]	; 0x2c
    ceb8:	2120      	movs	r1, #32
    ceba:	e003      	b.n	cec4 <d_ref_qualifier+0x20>
    cebc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    cebe:	3102      	adds	r1, #2
    cec0:	62c1      	str	r1, [r0, #44]	; 0x2c
    cec2:	211f      	movs	r1, #31
    cec4:	3301      	adds	r3, #1
    cec6:	60c3      	str	r3, [r0, #12]
    cec8:	2300      	movs	r3, #0
    ceca:	e78e      	b.n	cdea <d_make_comp>
    cecc:	4610      	mov	r0, r2
    cece:	4770      	bx	lr

0000ced0 <d_add_substitution>:
    ced0:	b151      	cbz	r1, cee8 <d_add_substitution+0x18>
    ced2:	e9d0 3208 	ldrd	r3, r2, [r0, #32]
    ced6:	4293      	cmp	r3, r2
    ced8:	da06      	bge.n	cee8 <d_add_substitution+0x18>
    ceda:	69c2      	ldr	r2, [r0, #28]
    cedc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    cee0:	3301      	adds	r3, #1
    cee2:	6203      	str	r3, [r0, #32]
    cee4:	2001      	movs	r0, #1
    cee6:	4770      	bx	lr
    cee8:	2000      	movs	r0, #0
    ceea:	4770      	bx	lr

0000ceec <d_count_templates_scopes>:
    ceec:	b538      	push	{r3, r4, r5, lr}
    ceee:	4605      	mov	r5, r0
    cef0:	460c      	mov	r4, r1
    cef2:	2c00      	cmp	r4, #0
    cef4:	d047      	beq.n	cf86 <d_count_templates_scopes+0x9a>
    cef6:	7823      	ldrb	r3, [r4, #0]
    cef8:	3b01      	subs	r3, #1
    cefa:	2b4f      	cmp	r3, #79	; 0x4f
    cefc:	d843      	bhi.n	cf86 <d_count_templates_scopes+0x9a>
    cefe:	e8df f003 	tbb	[pc, r3]
    cf02:	2d2d      	.short	0x2d2d
    cf04:	4242282d 	.word	0x4242282d
    cf08:	2d2d4d4d 	.word	0x2d2d4d4d
    cf0c:	2d2d2d2d 	.word	0x2d2d2d2d
    cf10:	2d2d2d2d 	.word	0x2d2d2d2d
    cf14:	2d2d2d2d 	.word	0x2d2d2d2d
    cf18:	2d2d422d 	.word	0x2d2d422d
    cf1c:	2d2d2d2d 	.word	0x2d2d2d2d
    cf20:	2d2d2d2d 	.word	0x2d2d2d2d
    cf24:	2d2d4343 	.word	0x2d2d4343
    cf28:	2d2d2d42 	.word	0x2d2d2d42
    cf2c:	2d2d4f2d 	.word	0x2d2d4f2d
    cf30:	422d2d2d 	.word	0x422d2d2d
    cf34:	2d2d2d4d 	.word	0x2d2d2d4d
    cf38:	2d2d2d2d 	.word	0x2d2d2d2d
    cf3c:	2d2d2d2d 	.word	0x2d2d2d2d
    cf40:	42422d2d 	.word	0x42422d2d
    cf44:	4f4f4f2d 	.word	0x4f4f4f2d
    cf48:	2d2d424f 	.word	0x2d2d424f
    cf4c:	2d2d2d2d 	.word	0x2d2d2d2d
    cf50:	2d2d      	.short	0x2d2d
    cf52:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
    cf56:	3301      	adds	r3, #1
    cf58:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
    cf5c:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    cf60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    cf64:	dc0f      	bgt.n	cf86 <d_count_templates_scopes+0x9a>
    cf66:	3301      	adds	r3, #1
    cf68:	68a1      	ldr	r1, [r4, #8]
    cf6a:	4628      	mov	r0, r5
    cf6c:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
    cf70:	f7ff ffbc 	bl	ceec <d_count_templates_scopes>
    cf74:	68e1      	ldr	r1, [r4, #12]
    cf76:	4628      	mov	r0, r5
    cf78:	f7ff ffb8 	bl	ceec <d_count_templates_scopes>
    cf7c:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    cf80:	3b01      	subs	r3, #1
    cf82:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
    cf86:	bd38      	pop	{r3, r4, r5, pc}
    cf88:	68a3      	ldr	r3, [r4, #8]
    cf8a:	781b      	ldrb	r3, [r3, #0]
    cf8c:	2b05      	cmp	r3, #5
    cf8e:	bf02      	ittt	eq
    cf90:	f8d5 3138 	ldreq.w	r3, [r5, #312]	; 0x138
    cf94:	3301      	addeq	r3, #1
    cf96:	f8c5 3138 	streq.w	r3, [r5, #312]	; 0x138
    cf9a:	e7df      	b.n	cf5c <d_count_templates_scopes+0x70>
    cf9c:	68e4      	ldr	r4, [r4, #12]
    cf9e:	e7a8      	b.n	cef2 <d_count_templates_scopes+0x6>
    cfa0:	68a4      	ldr	r4, [r4, #8]
    cfa2:	e7a6      	b.n	cef2 <d_count_templates_scopes+0x6>

0000cfa4 <d_print_flush>:
    cfa4:	b538      	push	{r3, r4, r5, lr}
    cfa6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
    cfaa:	2500      	movs	r5, #0
    cfac:	4604      	mov	r4, r0
    cfae:	5445      	strb	r5, [r0, r1]
    cfb0:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
    cfb4:	4798      	blx	r3
    cfb6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    cfba:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
    cfbe:	3301      	adds	r3, #1
    cfc0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
    cfc4:	bd38      	pop	{r3, r4, r5, pc}

0000cfc6 <d_append_char>:
    cfc6:	b538      	push	{r3, r4, r5, lr}
    cfc8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
    cfcc:	4604      	mov	r4, r0
    cfce:	460d      	mov	r5, r1
    cfd0:	2bff      	cmp	r3, #255	; 0xff
    cfd2:	d101      	bne.n	cfd8 <d_append_char+0x12>
    cfd4:	f7ff ffe6 	bl	cfa4 <d_print_flush>
    cfd8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    cfdc:	1c5a      	adds	r2, r3, #1
    cfde:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    cfe2:	54e5      	strb	r5, [r4, r3]
    cfe4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
    cfe8:	bd38      	pop	{r3, r4, r5, pc}

0000cfea <d_append_buffer>:
    cfea:	b570      	push	{r4, r5, r6, lr}
    cfec:	4606      	mov	r6, r0
    cfee:	460c      	mov	r4, r1
    cff0:	188d      	adds	r5, r1, r2
    cff2:	42ac      	cmp	r4, r5
    cff4:	d100      	bne.n	cff8 <d_append_buffer+0xe>
    cff6:	bd70      	pop	{r4, r5, r6, pc}
    cff8:	f814 1b01 	ldrb.w	r1, [r4], #1
    cffc:	4630      	mov	r0, r6
    cffe:	f7ff ffe2 	bl	cfc6 <d_append_char>
    d002:	e7f6      	b.n	cff2 <d_append_buffer+0x8>

0000d004 <d_pack_length>:
    d004:	2300      	movs	r3, #0
    d006:	b120      	cbz	r0, d012 <d_pack_length+0xe>
    d008:	7802      	ldrb	r2, [r0, #0]
    d00a:	2a2f      	cmp	r2, #47	; 0x2f
    d00c:	d101      	bne.n	d012 <d_pack_length+0xe>
    d00e:	6882      	ldr	r2, [r0, #8]
    d010:	b90a      	cbnz	r2, d016 <d_pack_length+0x12>
    d012:	4618      	mov	r0, r3
    d014:	4770      	bx	lr
    d016:	3301      	adds	r3, #1
    d018:	68c0      	ldr	r0, [r0, #12]
    d01a:	e7f4      	b.n	d006 <d_pack_length+0x2>

0000d01c <d_append_string>:
    d01c:	b513      	push	{r0, r1, r4, lr}
    d01e:	4604      	mov	r4, r0
    d020:	4608      	mov	r0, r1
    d022:	9101      	str	r1, [sp, #4]
    d024:	f004 fd78 	bl	11b18 <strlen>
    d028:	9901      	ldr	r1, [sp, #4]
    d02a:	4602      	mov	r2, r0
    d02c:	4620      	mov	r0, r4
    d02e:	b002      	add	sp, #8
    d030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d034:	e7d9      	b.n	cfea <d_append_buffer>

0000d036 <d_append_num>:
    d036:	b510      	push	{r4, lr}
    d038:	b088      	sub	sp, #32
    d03a:	4604      	mov	r4, r0
    d03c:	460a      	mov	r2, r1
    d03e:	4905      	ldr	r1, [pc, #20]	; (d054 <d_append_num+0x1e>)
    d040:	a801      	add	r0, sp, #4
    d042:	f018 fe2b 	bl	25c9c <siprintf>
    d046:	a901      	add	r1, sp, #4
    d048:	4620      	mov	r0, r4
    d04a:	f7ff ffe7 	bl	d01c <d_append_string>
    d04e:	b008      	add	sp, #32
    d050:	bd10      	pop	{r4, pc}
    d052:	bf00      	nop
    d054:	00036b92 	.word	0x00036b92

0000d058 <d_number.isra.0>:
    d058:	6801      	ldr	r1, [r0, #0]
    d05a:	4602      	mov	r2, r0
    d05c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d05e:	780b      	ldrb	r3, [r1, #0]
    d060:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    d064:	240a      	movs	r4, #10
    d066:	2b6e      	cmp	r3, #110	; 0x6e
    d068:	bf05      	ittet	eq
    d06a:	1c4b      	addeq	r3, r1, #1
    d06c:	2501      	moveq	r5, #1
    d06e:	2500      	movne	r5, #0
    d070:	6003      	streq	r3, [r0, #0]
    d072:	f04f 0000 	mov.w	r0, #0
    d076:	bf08      	it	eq
    d078:	784b      	ldrbeq	r3, [r1, #1]
    d07a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    d07e:	b2cf      	uxtb	r7, r1
    d080:	2f09      	cmp	r7, #9
    d082:	d902      	bls.n	d08a <d_number.isra.0+0x32>
    d084:	b105      	cbz	r5, d088 <d_number.isra.0+0x30>
    d086:	4240      	negs	r0, r0
    d088:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d08a:	1a71      	subs	r1, r6, r1
    d08c:	fbb1 f1f4 	udiv	r1, r1, r4
    d090:	4281      	cmp	r1, r0
    d092:	db08      	blt.n	d0a6 <d_number.isra.0+0x4e>
    d094:	fb04 3300 	mla	r3, r4, r0, r3
    d098:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    d09c:	6813      	ldr	r3, [r2, #0]
    d09e:	1c59      	adds	r1, r3, #1
    d0a0:	6011      	str	r1, [r2, #0]
    d0a2:	785b      	ldrb	r3, [r3, #1]
    d0a4:	e7e9      	b.n	d07a <d_number.isra.0+0x22>
    d0a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d0aa:	e7ed      	b.n	d088 <d_number.isra.0+0x30>

0000d0ac <d_number_component>:
    d0ac:	b538      	push	{r3, r4, r5, lr}
    d0ae:	4605      	mov	r5, r0
    d0b0:	f7ff fe8c 	bl	cdcc <d_make_empty>
    d0b4:	4604      	mov	r4, r0
    d0b6:	b130      	cbz	r0, d0c6 <d_number_component+0x1a>
    d0b8:	2342      	movs	r3, #66	; 0x42
    d0ba:	7003      	strb	r3, [r0, #0]
    d0bc:	f105 000c 	add.w	r0, r5, #12
    d0c0:	f7ff ffca 	bl	d058 <d_number.isra.0>
    d0c4:	60a0      	str	r0, [r4, #8]
    d0c6:	4620      	mov	r0, r4
    d0c8:	bd38      	pop	{r3, r4, r5, pc}

0000d0ca <d_compact_number>:
    d0ca:	68c3      	ldr	r3, [r0, #12]
    d0cc:	b510      	push	{r4, lr}
    d0ce:	781b      	ldrb	r3, [r3, #0]
    d0d0:	4604      	mov	r4, r0
    d0d2:	2b5f      	cmp	r3, #95	; 0x5f
    d0d4:	d010      	beq.n	d0f8 <d_compact_number+0x2e>
    d0d6:	2b6e      	cmp	r3, #110	; 0x6e
    d0d8:	d102      	bne.n	d0e0 <d_compact_number+0x16>
    d0da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d0de:	bd10      	pop	{r4, pc}
    d0e0:	300c      	adds	r0, #12
    d0e2:	f7ff ffb9 	bl	d058 <d_number.isra.0>
    d0e6:	3001      	adds	r0, #1
    d0e8:	d4f7      	bmi.n	d0da <d_compact_number+0x10>
    d0ea:	68e3      	ldr	r3, [r4, #12]
    d0ec:	781a      	ldrb	r2, [r3, #0]
    d0ee:	2a5f      	cmp	r2, #95	; 0x5f
    d0f0:	d1f3      	bne.n	d0da <d_compact_number+0x10>
    d0f2:	3301      	adds	r3, #1
    d0f4:	60e3      	str	r3, [r4, #12]
    d0f6:	e7f2      	b.n	d0de <d_compact_number+0x14>
    d0f8:	2000      	movs	r0, #0
    d0fa:	e7f6      	b.n	d0ea <d_compact_number+0x20>

0000d0fc <d_template_param>:
    d0fc:	b538      	push	{r3, r4, r5, lr}
    d0fe:	68c3      	ldr	r3, [r0, #12]
    d100:	4604      	mov	r4, r0
    d102:	781a      	ldrb	r2, [r3, #0]
    d104:	2a54      	cmp	r2, #84	; 0x54
    d106:	d001      	beq.n	d10c <d_template_param+0x10>
    d108:	2000      	movs	r0, #0
    d10a:	bd38      	pop	{r3, r4, r5, pc}
    d10c:	3301      	adds	r3, #1
    d10e:	60c3      	str	r3, [r0, #12]
    d110:	f7ff ffdb 	bl	d0ca <d_compact_number>
    d114:	1e05      	subs	r5, r0, #0
    d116:	dbf7      	blt.n	d108 <d_template_param+0xc>
    d118:	4620      	mov	r0, r4
    d11a:	f7ff fe57 	bl	cdcc <d_make_empty>
    d11e:	2800      	cmp	r0, #0
    d120:	d0f3      	beq.n	d10a <d_template_param+0xe>
    d122:	2305      	movs	r3, #5
    d124:	6085      	str	r5, [r0, #8]
    d126:	7003      	strb	r3, [r0, #0]
    d128:	e7ef      	b.n	d10a <d_template_param+0xe>

0000d12a <d_source_name>:
    d12a:	b570      	push	{r4, r5, r6, lr}
    d12c:	4604      	mov	r4, r0
    d12e:	300c      	adds	r0, #12
    d130:	f7ff ff92 	bl	d058 <d_number.isra.0>
    d134:	1e05      	subs	r5, r0, #0
    d136:	dd30      	ble.n	d19a <d_source_name+0x70>
    d138:	68e6      	ldr	r6, [r4, #12]
    d13a:	6863      	ldr	r3, [r4, #4]
    d13c:	1b9b      	subs	r3, r3, r6
    d13e:	429d      	cmp	r5, r3
    d140:	dc29      	bgt.n	d196 <d_source_name+0x6c>
    d142:	68a2      	ldr	r2, [r4, #8]
    d144:	1973      	adds	r3, r6, r5
    d146:	0752      	lsls	r2, r2, #29
    d148:	60e3      	str	r3, [r4, #12]
    d14a:	d504      	bpl.n	d156 <d_source_name+0x2c>
    d14c:	5d72      	ldrb	r2, [r6, r5]
    d14e:	2a24      	cmp	r2, #36	; 0x24
    d150:	bf04      	itt	eq
    d152:	3301      	addeq	r3, #1
    d154:	60e3      	streq	r3, [r4, #12]
    d156:	2d09      	cmp	r5, #9
    d158:	dd1a      	ble.n	d190 <d_source_name+0x66>
    d15a:	2208      	movs	r2, #8
    d15c:	4910      	ldr	r1, [pc, #64]	; (d1a0 <d_source_name+0x76>)
    d15e:	4630      	mov	r0, r6
    d160:	f023 fe74 	bl	30e4c <memcmp>
    d164:	b9a0      	cbnz	r0, d190 <d_source_name+0x66>
    d166:	7a33      	ldrb	r3, [r6, #8]
    d168:	2b2e      	cmp	r3, #46	; 0x2e
    d16a:	d003      	beq.n	d174 <d_source_name+0x4a>
    d16c:	2b5f      	cmp	r3, #95	; 0x5f
    d16e:	d001      	beq.n	d174 <d_source_name+0x4a>
    d170:	2b24      	cmp	r3, #36	; 0x24
    d172:	d10d      	bne.n	d190 <d_source_name+0x66>
    d174:	7a73      	ldrb	r3, [r6, #9]
    d176:	2b4e      	cmp	r3, #78	; 0x4e
    d178:	d10a      	bne.n	d190 <d_source_name+0x66>
    d17a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    d17c:	2215      	movs	r2, #21
    d17e:	4909      	ldr	r1, [pc, #36]	; (d1a4 <d_source_name+0x7a>)
    d180:	3016      	adds	r0, #22
    d182:	1b45      	subs	r5, r0, r5
    d184:	62e5      	str	r5, [r4, #44]	; 0x2c
    d186:	4620      	mov	r0, r4
    d188:	f7ff fe70 	bl	ce6c <d_make_name>
    d18c:	62a0      	str	r0, [r4, #40]	; 0x28
    d18e:	bd70      	pop	{r4, r5, r6, pc}
    d190:	462a      	mov	r2, r5
    d192:	4631      	mov	r1, r6
    d194:	e7f7      	b.n	d186 <d_source_name+0x5c>
    d196:	2000      	movs	r0, #0
    d198:	e7f8      	b.n	d18c <d_source_name+0x62>
    d19a:	2000      	movs	r0, #0
    d19c:	e7f7      	b.n	d18e <d_source_name+0x64>
    d19e:	bf00      	nop
    d1a0:	00036f52 	.word	0x00036f52
    d1a4:	00036f5b 	.word	0x00036f5b

0000d1a8 <d_abi_tags>:
    d1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d1aa:	4604      	mov	r4, r0
    d1ac:	6a85      	ldr	r5, [r0, #40]	; 0x28
    d1ae:	460a      	mov	r2, r1
    d1b0:	68e3      	ldr	r3, [r4, #12]
    d1b2:	7819      	ldrb	r1, [r3, #0]
    d1b4:	2942      	cmp	r1, #66	; 0x42
    d1b6:	d003      	beq.n	d1c0 <d_abi_tags+0x18>
    d1b8:	4610      	mov	r0, r2
    d1ba:	62a5      	str	r5, [r4, #40]	; 0x28
    d1bc:	b003      	add	sp, #12
    d1be:	bd30      	pop	{r4, r5, pc}
    d1c0:	3301      	adds	r3, #1
    d1c2:	4620      	mov	r0, r4
    d1c4:	9201      	str	r2, [sp, #4]
    d1c6:	60e3      	str	r3, [r4, #12]
    d1c8:	f7ff ffaf 	bl	d12a <d_source_name>
    d1cc:	9a01      	ldr	r2, [sp, #4]
    d1ce:	4603      	mov	r3, r0
    d1d0:	214c      	movs	r1, #76	; 0x4c
    d1d2:	4620      	mov	r0, r4
    d1d4:	f7ff fe09 	bl	cdea <d_make_comp>
    d1d8:	4602      	mov	r2, r0
    d1da:	e7e9      	b.n	d1b0 <d_abi_tags+0x8>

0000d1dc <d_call_offset>:
    d1dc:	b538      	push	{r3, r4, r5, lr}
    d1de:	4604      	mov	r4, r0
    d1e0:	b939      	cbnz	r1, d1f2 <d_call_offset+0x16>
    d1e2:	68c3      	ldr	r3, [r0, #12]
    d1e4:	781a      	ldrb	r2, [r3, #0]
    d1e6:	b90a      	cbnz	r2, d1ec <d_call_offset+0x10>
    d1e8:	2000      	movs	r0, #0
    d1ea:	bd38      	pop	{r3, r4, r5, pc}
    d1ec:	1c5a      	adds	r2, r3, #1
    d1ee:	60c2      	str	r2, [r0, #12]
    d1f0:	7819      	ldrb	r1, [r3, #0]
    d1f2:	2968      	cmp	r1, #104	; 0x68
    d1f4:	d10b      	bne.n	d20e <d_call_offset+0x32>
    d1f6:	f104 000c 	add.w	r0, r4, #12
    d1fa:	f7ff ff2d 	bl	d058 <d_number.isra.0>
    d1fe:	68e3      	ldr	r3, [r4, #12]
    d200:	781a      	ldrb	r2, [r3, #0]
    d202:	2a5f      	cmp	r2, #95	; 0x5f
    d204:	d1f0      	bne.n	d1e8 <d_call_offset+0xc>
    d206:	3301      	adds	r3, #1
    d208:	2001      	movs	r0, #1
    d20a:	60e3      	str	r3, [r4, #12]
    d20c:	e7ed      	b.n	d1ea <d_call_offset+0xe>
    d20e:	2976      	cmp	r1, #118	; 0x76
    d210:	d1ea      	bne.n	d1e8 <d_call_offset+0xc>
    d212:	f104 050c 	add.w	r5, r4, #12
    d216:	4628      	mov	r0, r5
    d218:	f7ff ff1e 	bl	d058 <d_number.isra.0>
    d21c:	68e3      	ldr	r3, [r4, #12]
    d21e:	781a      	ldrb	r2, [r3, #0]
    d220:	2a5f      	cmp	r2, #95	; 0x5f
    d222:	d1e1      	bne.n	d1e8 <d_call_offset+0xc>
    d224:	3301      	adds	r3, #1
    d226:	4628      	mov	r0, r5
    d228:	60e3      	str	r3, [r4, #12]
    d22a:	e7e6      	b.n	d1fa <d_call_offset+0x1e>

0000d22c <next_is_type_qual.isra.0>:
    d22c:	7803      	ldrb	r3, [r0, #0]
    d22e:	2b72      	cmp	r3, #114	; 0x72
    d230:	d012      	beq.n	d258 <next_is_type_qual.isra.0+0x2c>
    d232:	2b56      	cmp	r3, #86	; 0x56
    d234:	d010      	beq.n	d258 <next_is_type_qual.isra.0+0x2c>
    d236:	2b4b      	cmp	r3, #75	; 0x4b
    d238:	d00e      	beq.n	d258 <next_is_type_qual.isra.0+0x2c>
    d23a:	2b44      	cmp	r3, #68	; 0x44
    d23c:	d10a      	bne.n	d254 <next_is_type_qual.isra.0+0x28>
    d23e:	7840      	ldrb	r0, [r0, #1]
    d240:	f000 03df 	and.w	r3, r0, #223	; 0xdf
    d244:	2b4f      	cmp	r3, #79	; 0x4f
    d246:	d007      	beq.n	d258 <next_is_type_qual.isra.0+0x2c>
    d248:	3877      	subs	r0, #119	; 0x77
    d24a:	2801      	cmp	r0, #1
    d24c:	bf8c      	ite	hi
    d24e:	2000      	movhi	r0, #0
    d250:	2001      	movls	r0, #1
    d252:	4770      	bx	lr
    d254:	2000      	movs	r0, #0
    d256:	4770      	bx	lr
    d258:	2001      	movs	r0, #1
    d25a:	4770      	bx	lr

0000d25c <op_is_new_cast.isra.0>:
    d25c:	6803      	ldr	r3, [r0, #0]
    d25e:	785a      	ldrb	r2, [r3, #1]
    d260:	2a63      	cmp	r2, #99	; 0x63
    d262:	d10a      	bne.n	d27a <op_is_new_cast.isra.0+0x1e>
    d264:	7818      	ldrb	r0, [r3, #0]
    d266:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    d26a:	2b01      	cmp	r3, #1
    d26c:	d907      	bls.n	d27e <op_is_new_cast.isra.0+0x22>
    d26e:	3872      	subs	r0, #114	; 0x72
    d270:	2801      	cmp	r0, #1
    d272:	bf8c      	ite	hi
    d274:	2000      	movhi	r0, #0
    d276:	2001      	movls	r0, #1
    d278:	4770      	bx	lr
    d27a:	2000      	movs	r0, #0
    d27c:	4770      	bx	lr
    d27e:	2001      	movs	r0, #1
    d280:	4770      	bx	lr

0000d282 <d_discriminator>:
    d282:	b538      	push	{r3, r4, r5, lr}
    d284:	68c3      	ldr	r3, [r0, #12]
    d286:	4604      	mov	r4, r0
    d288:	781a      	ldrb	r2, [r3, #0]
    d28a:	2a5f      	cmp	r2, #95	; 0x5f
    d28c:	d001      	beq.n	d292 <d_discriminator+0x10>
    d28e:	2001      	movs	r0, #1
    d290:	bd38      	pop	{r3, r4, r5, pc}
    d292:	1c5a      	adds	r2, r3, #1
    d294:	300c      	adds	r0, #12
    d296:	6002      	str	r2, [r0, #0]
    d298:	785a      	ldrb	r2, [r3, #1]
    d29a:	2a5f      	cmp	r2, #95	; 0x5f
    d29c:	bf05      	ittet	eq
    d29e:	3302      	addeq	r3, #2
    d2a0:	2502      	moveq	r5, #2
    d2a2:	2501      	movne	r5, #1
    d2a4:	6003      	streq	r3, [r0, #0]
    d2a6:	f7ff fed7 	bl	d058 <d_number.isra.0>
    d2aa:	2800      	cmp	r0, #0
    d2ac:	db0a      	blt.n	d2c4 <d_discriminator+0x42>
    d2ae:	2d02      	cmp	r5, #2
    d2b0:	d1ed      	bne.n	d28e <d_discriminator+0xc>
    d2b2:	2809      	cmp	r0, #9
    d2b4:	ddeb      	ble.n	d28e <d_discriminator+0xc>
    d2b6:	68e3      	ldr	r3, [r4, #12]
    d2b8:	781a      	ldrb	r2, [r3, #0]
    d2ba:	2a5f      	cmp	r2, #95	; 0x5f
    d2bc:	d102      	bne.n	d2c4 <d_discriminator+0x42>
    d2be:	3301      	adds	r3, #1
    d2c0:	60e3      	str	r3, [r4, #12]
    d2c2:	e7e4      	b.n	d28e <d_discriminator+0xc>
    d2c4:	2000      	movs	r0, #0
    d2c6:	e7e3      	b.n	d290 <d_discriminator+0xe>

0000d2c8 <d_index_template_argument.part.0>:
    d2c8:	b900      	cbnz	r0, d2cc <d_index_template_argument.part.0+0x4>
    d2ca:	4770      	bx	lr
    d2cc:	7803      	ldrb	r3, [r0, #0]
    d2ce:	2b2f      	cmp	r3, #47	; 0x2f
    d2d0:	d107      	bne.n	d2e2 <d_index_template_argument.part.0+0x1a>
    d2d2:	2900      	cmp	r1, #0
    d2d4:	dd04      	ble.n	d2e0 <d_index_template_argument.part.0+0x18>
    d2d6:	3901      	subs	r1, #1
    d2d8:	68c0      	ldr	r0, [r0, #12]
    d2da:	e7f5      	b.n	d2c8 <d_index_template_argument.part.0>
    d2dc:	6880      	ldr	r0, [r0, #8]
    d2de:	4770      	bx	lr
    d2e0:	d0fc      	beq.n	d2dc <d_index_template_argument.part.0+0x14>
    d2e2:	2000      	movs	r0, #0
    d2e4:	4770      	bx	lr

0000d2e6 <d_growable_string_callback_adapter>:
    d2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2ea:	1c4b      	adds	r3, r1, #1
    d2ec:	4614      	mov	r4, r2
    d2ee:	6852      	ldr	r2, [r2, #4]
    d2f0:	4680      	mov	r8, r0
    d2f2:	68a5      	ldr	r5, [r4, #8]
    d2f4:	460f      	mov	r7, r1
    d2f6:	4413      	add	r3, r2
    d2f8:	42ab      	cmp	r3, r5
    d2fa:	d91a      	bls.n	d332 <d_growable_string_callback_adapter+0x4c>
    d2fc:	68e2      	ldr	r2, [r4, #12]
    d2fe:	b992      	cbnz	r2, d326 <d_growable_string_callback_adapter+0x40>
    d300:	2d00      	cmp	r5, #0
    d302:	bf08      	it	eq
    d304:	2502      	moveq	r5, #2
    d306:	42ab      	cmp	r3, r5
    d308:	d80f      	bhi.n	d32a <d_growable_string_callback_adapter+0x44>
    d30a:	4629      	mov	r1, r5
    d30c:	6820      	ldr	r0, [r4, #0]
    d30e:	f018 fc93 	bl	25c38 <realloc>
    d312:	4606      	mov	r6, r0
    d314:	b958      	cbnz	r0, d32e <d_growable_string_callback_adapter+0x48>
    d316:	6820      	ldr	r0, [r4, #0]
    d318:	f018 f96a 	bl	255f0 <free>
    d31c:	2301      	movs	r3, #1
    d31e:	60a6      	str	r6, [r4, #8]
    d320:	60e3      	str	r3, [r4, #12]
    d322:	e9c4 6600 	strd	r6, r6, [r4]
    d326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d32a:	006d      	lsls	r5, r5, #1
    d32c:	e7eb      	b.n	d306 <d_growable_string_callback_adapter+0x20>
    d32e:	6020      	str	r0, [r4, #0]
    d330:	60a5      	str	r5, [r4, #8]
    d332:	68e5      	ldr	r5, [r4, #12]
    d334:	2d00      	cmp	r5, #0
    d336:	d1f6      	bne.n	d326 <d_growable_string_callback_adapter+0x40>
    d338:	463a      	mov	r2, r7
    d33a:	4641      	mov	r1, r8
    d33c:	e9d4 0300 	ldrd	r0, r3, [r4]
    d340:	4418      	add	r0, r3
    d342:	f023 fd91 	bl	30e68 <memcpy>
    d346:	e9d4 3200 	ldrd	r3, r2, [r4]
    d34a:	443b      	add	r3, r7
    d34c:	549d      	strb	r5, [r3, r2]
    d34e:	6861      	ldr	r1, [r4, #4]
    d350:	4439      	add	r1, r7
    d352:	6061      	str	r1, [r4, #4]
    d354:	e7e7      	b.n	d326 <d_growable_string_callback_adapter+0x40>

0000d356 <d_lookup_template_argument.isra.0>:
    d356:	4603      	mov	r3, r0
    d358:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
    d35c:	b918      	cbnz	r0, d366 <d_lookup_template_argument.isra.0+0x10>
    d35e:	2201      	movs	r2, #1
    d360:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    d364:	4770      	bx	lr
    d366:	6809      	ldr	r1, [r1, #0]
    d368:	6843      	ldr	r3, [r0, #4]
    d36a:	2900      	cmp	r1, #0
    d36c:	68d8      	ldr	r0, [r3, #12]
    d36e:	db00      	blt.n	d372 <d_lookup_template_argument.isra.0+0x1c>
    d370:	e7aa      	b.n	d2c8 <d_index_template_argument.part.0>
    d372:	4770      	bx	lr

0000d374 <d_find_pack>:
    d374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d378:	4605      	mov	r5, r0
    d37a:	460c      	mov	r4, r1
    d37c:	2601      	movs	r6, #1
    d37e:	4f25      	ldr	r7, [pc, #148]	; (d414 <d_find_pack+0xa0>)
    d380:	f8df 8094 	ldr.w	r8, [pc, #148]	; d418 <d_find_pack+0xa4>
    d384:	b16c      	cbz	r4, d3a2 <d_find_pack+0x2e>
    d386:	7823      	ldrb	r3, [r4, #0]
    d388:	2b08      	cmp	r3, #8
    d38a:	d914      	bls.n	d3b6 <d_find_pack+0x42>
    d38c:	2b2c      	cmp	r3, #44	; 0x2c
    d38e:	d829      	bhi.n	d3e4 <d_find_pack+0x70>
    d390:	2b17      	cmp	r3, #23
    d392:	d92b      	bls.n	d3ec <d_find_pack+0x78>
    d394:	3b18      	subs	r3, #24
    d396:	b2db      	uxtb	r3, r3
    d398:	fa06 f303 	lsl.w	r3, r6, r3
    d39c:	ea13 0f08 	tst.w	r3, r8
    d3a0:	d024      	beq.n	d3ec <d_find_pack+0x78>
    d3a2:	2000      	movs	r0, #0
    d3a4:	e033      	b.n	d40e <d_find_pack+0x9a>
    d3a6:	fa06 f303 	lsl.w	r3, r6, r3
    d3aa:	423b      	tst	r3, r7
    d3ac:	d1f9      	bne.n	d3a2 <d_find_pack+0x2e>
    d3ae:	079b      	lsls	r3, r3, #30
    d3b0:	d51c      	bpl.n	d3ec <d_find_pack+0x78>
    d3b2:	68e4      	ldr	r4, [r4, #12]
    d3b4:	e7e6      	b.n	d384 <d_find_pack+0x10>
    d3b6:	2b08      	cmp	r3, #8
    d3b8:	d818      	bhi.n	d3ec <d_find_pack+0x78>
    d3ba:	a201      	add	r2, pc, #4	; (adr r2, d3c0 <d_find_pack+0x4c>)
    d3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d3c0:	0000d3a3 	.word	0x0000d3a3
    d3c4:	0000d3ed 	.word	0x0000d3ed
    d3c8:	0000d3ed 	.word	0x0000d3ed
    d3cc:	0000d3ed 	.word	0x0000d3ed
    d3d0:	0000d3ed 	.word	0x0000d3ed
    d3d4:	0000d3fb 	.word	0x0000d3fb
    d3d8:	0000d3a3 	.word	0x0000d3a3
    d3dc:	0000d3b3 	.word	0x0000d3b3
    d3e0:	0000d3b3 	.word	0x0000d3b3
    d3e4:	3b32      	subs	r3, #50	; 0x32
    d3e6:	b2db      	uxtb	r3, r3
    d3e8:	2b1a      	cmp	r3, #26
    d3ea:	d9dc      	bls.n	d3a6 <d_find_pack+0x32>
    d3ec:	68a1      	ldr	r1, [r4, #8]
    d3ee:	4628      	mov	r0, r5
    d3f0:	f7ff ffc0 	bl	d374 <d_find_pack>
    d3f4:	2800      	cmp	r0, #0
    d3f6:	d0dc      	beq.n	d3b2 <d_find_pack+0x3e>
    d3f8:	e009      	b.n	d40e <d_find_pack+0x9a>
    d3fa:	f104 0108 	add.w	r1, r4, #8
    d3fe:	4628      	mov	r0, r5
    d400:	f7ff ffa9 	bl	d356 <d_lookup_template_argument.isra.0>
    d404:	2800      	cmp	r0, #0
    d406:	d0cc      	beq.n	d3a2 <d_find_pack+0x2e>
    d408:	7803      	ldrb	r3, [r0, #0]
    d40a:	2b2f      	cmp	r3, #47	; 0x2f
    d40c:	d1c9      	bne.n	d3a2 <d_find_pack+0x2e>
    d40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d412:	bf00      	nop
    d414:	06718001 	.word	0x06718001
    d418:	00108001 	.word	0x00108001

0000d41c <d_substitution>:
    d41c:	68c2      	ldr	r2, [r0, #12]
    d41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d422:	7813      	ldrb	r3, [r2, #0]
    d424:	4604      	mov	r4, r0
    d426:	2b53      	cmp	r3, #83	; 0x53
    d428:	d14d      	bne.n	d4c6 <d_substitution+0xaa>
    d42a:	1c53      	adds	r3, r2, #1
    d42c:	60c3      	str	r3, [r0, #12]
    d42e:	7853      	ldrb	r3, [r2, #1]
    d430:	b163      	cbz	r3, d44c <d_substitution+0x30>
    d432:	1c93      	adds	r3, r2, #2
    d434:	60c3      	str	r3, [r0, #12]
    d436:	7853      	ldrb	r3, [r2, #1]
    d438:	2b5f      	cmp	r3, #95	; 0x5f
    d43a:	d070      	beq.n	d51e <d_substitution+0x102>
    d43c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d440:	2a09      	cmp	r2, #9
    d442:	d960      	bls.n	d506 <d_substitution+0xea>
    d444:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    d448:	2a19      	cmp	r2, #25
    d44a:	d95c      	bls.n	d506 <d_substitution+0xea>
    d44c:	68a2      	ldr	r2, [r4, #8]
    d44e:	f002 0208 	and.w	r2, r2, #8
    d452:	2a00      	cmp	r2, #0
    d454:	bf14      	ite	ne
    d456:	2601      	movne	r6, #1
    d458:	2600      	moveq	r6, #0
    d45a:	d106      	bne.n	d46a <d_substitution+0x4e>
    d45c:	b129      	cbz	r1, d46a <d_substitution+0x4e>
    d45e:	68e2      	ldr	r2, [r4, #12]
    d460:	7812      	ldrb	r2, [r2, #0]
    d462:	3a43      	subs	r2, #67	; 0x43
    d464:	2a01      	cmp	r2, #1
    d466:	bf98      	it	ls
    d468:	460e      	movls	r6, r1
    d46a:	2207      	movs	r2, #7
    d46c:	4d31      	ldr	r5, [pc, #196]	; (d534 <d_substitution+0x118>)
    d46e:	7829      	ldrb	r1, [r5, #0]
    d470:	4299      	cmp	r1, r3
    d472:	d159      	bne.n	d528 <d_substitution+0x10c>
    d474:	696f      	ldr	r7, [r5, #20]
    d476:	b157      	cbz	r7, d48e <d_substitution+0x72>
    d478:	4620      	mov	r0, r4
    d47a:	f8d5 8018 	ldr.w	r8, [r5, #24]
    d47e:	f7ff fca5 	bl	cdcc <d_make_empty>
    d482:	b118      	cbz	r0, d48c <d_substitution+0x70>
    d484:	2318      	movs	r3, #24
    d486:	e9c0 7802 	strd	r7, r8, [r0, #8]
    d48a:	7003      	strb	r3, [r0, #0]
    d48c:	62a0      	str	r0, [r4, #40]	; 0x28
    d48e:	2e00      	cmp	r6, #0
    d490:	d047      	beq.n	d522 <d_substitution+0x106>
    d492:	e9d5 6503 	ldrd	r6, r5, [r5, #12]
    d496:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d498:	4620      	mov	r0, r4
    d49a:	442b      	add	r3, r5
    d49c:	62e3      	str	r3, [r4, #44]	; 0x2c
    d49e:	f7ff fc95 	bl	cdcc <d_make_empty>
    d4a2:	4601      	mov	r1, r0
    d4a4:	b118      	cbz	r0, d4ae <d_substitution+0x92>
    d4a6:	2318      	movs	r3, #24
    d4a8:	e9c0 6502 	strd	r6, r5, [r0, #8]
    d4ac:	7003      	strb	r3, [r0, #0]
    d4ae:	68e3      	ldr	r3, [r4, #12]
    d4b0:	781b      	ldrb	r3, [r3, #0]
    d4b2:	2b42      	cmp	r3, #66	; 0x42
    d4b4:	d124      	bne.n	d500 <d_substitution+0xe4>
    d4b6:	4620      	mov	r0, r4
    d4b8:	f7ff fe76 	bl	d1a8 <d_abi_tags>
    d4bc:	4601      	mov	r1, r0
    d4be:	4620      	mov	r0, r4
    d4c0:	f7ff fd06 	bl	ced0 <d_add_substitution>
    d4c4:	b9e0      	cbnz	r0, d500 <d_substitution+0xe4>
    d4c6:	2100      	movs	r1, #0
    d4c8:	e01a      	b.n	d500 <d_substitution+0xe4>
    d4ca:	4611      	mov	r1, r2
    d4cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d4d0:	2a09      	cmp	r2, #9
    d4d2:	d81b      	bhi.n	d50c <d_substitution+0xf0>
    d4d4:	fb00 3301 	mla	r3, r0, r1, r3
    d4d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    d4dc:	4291      	cmp	r1, r2
    d4de:	d8f2      	bhi.n	d4c6 <d_substitution+0xaa>
    d4e0:	68e1      	ldr	r1, [r4, #12]
    d4e2:	780b      	ldrb	r3, [r1, #0]
    d4e4:	2b00      	cmp	r3, #0
    d4e6:	d0f0      	beq.n	d4ca <d_substitution+0xae>
    d4e8:	1c4b      	adds	r3, r1, #1
    d4ea:	60e3      	str	r3, [r4, #12]
    d4ec:	780b      	ldrb	r3, [r1, #0]
    d4ee:	2b5f      	cmp	r3, #95	; 0x5f
    d4f0:	d1eb      	bne.n	d4ca <d_substitution+0xae>
    d4f2:	3201      	adds	r2, #1
    d4f4:	6a23      	ldr	r3, [r4, #32]
    d4f6:	4293      	cmp	r3, r2
    d4f8:	d9e5      	bls.n	d4c6 <d_substitution+0xaa>
    d4fa:	69e3      	ldr	r3, [r4, #28]
    d4fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d500:	4608      	mov	r0, r1
    d502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d506:	2100      	movs	r1, #0
    d508:	2024      	movs	r0, #36	; 0x24
    d50a:	e7df      	b.n	d4cc <d_substitution+0xb0>
    d50c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    d510:	2a19      	cmp	r2, #25
    d512:	d8d8      	bhi.n	d4c6 <d_substitution+0xaa>
    d514:	fb00 3301 	mla	r3, r0, r1, r3
    d518:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
    d51c:	e7de      	b.n	d4dc <d_substitution+0xc0>
    d51e:	2200      	movs	r2, #0
    d520:	e7e8      	b.n	d4f4 <d_substitution+0xd8>
    d522:	e9d5 6501 	ldrd	r6, r5, [r5, #4]
    d526:	e7b6      	b.n	d496 <d_substitution+0x7a>
    d528:	3a01      	subs	r2, #1
    d52a:	f105 051c 	add.w	r5, r5, #28
    d52e:	d19e      	bne.n	d46e <d_substitution+0x52>
    d530:	e7c9      	b.n	d4c6 <d_substitution+0xaa>
    d532:	bf00      	nop
    d534:	00031cbc 	.word	0x00031cbc

0000d538 <d_expr_primary>:
    d538:	68c3      	ldr	r3, [r0, #12]
    d53a:	b570      	push	{r4, r5, r6, lr}
    d53c:	781a      	ldrb	r2, [r3, #0]
    d53e:	4604      	mov	r4, r0
    d540:	2a4c      	cmp	r2, #76	; 0x4c
    d542:	d001      	beq.n	d548 <d_expr_primary+0x10>
    d544:	2000      	movs	r0, #0
    d546:	bd70      	pop	{r4, r5, r6, pc}
    d548:	1c5a      	adds	r2, r3, #1
    d54a:	60c2      	str	r2, [r0, #12]
    d54c:	785a      	ldrb	r2, [r3, #1]
    d54e:	2a5f      	cmp	r2, #95	; 0x5f
    d550:	d028      	beq.n	d5a4 <d_expr_primary+0x6c>
    d552:	2a5a      	cmp	r2, #90	; 0x5a
    d554:	d028      	beq.n	d5a8 <d_expr_primary+0x70>
    d556:	f000 fa2b 	bl	d9b0 <d_type>
    d55a:	4605      	mov	r5, r0
    d55c:	2800      	cmp	r0, #0
    d55e:	d0f1      	beq.n	d544 <d_expr_primary+0xc>
    d560:	7803      	ldrb	r3, [r0, #0]
    d562:	2b27      	cmp	r3, #39	; 0x27
    d564:	d106      	bne.n	d574 <d_expr_primary+0x3c>
    d566:	6882      	ldr	r2, [r0, #8]
    d568:	7c13      	ldrb	r3, [r2, #16]
    d56a:	b11b      	cbz	r3, d574 <d_expr_primary+0x3c>
    d56c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d56e:	6852      	ldr	r2, [r2, #4]
    d570:	1a9b      	subs	r3, r3, r2
    d572:	62e3      	str	r3, [r4, #44]	; 0x2c
    d574:	68e3      	ldr	r3, [r4, #12]
    d576:	781a      	ldrb	r2, [r3, #0]
    d578:	2a6e      	cmp	r2, #110	; 0x6e
    d57a:	bf05      	ittet	eq
    d57c:	3301      	addeq	r3, #1
    d57e:	263e      	moveq	r6, #62	; 0x3e
    d580:	263d      	movne	r6, #61	; 0x3d
    d582:	60e3      	streq	r3, [r4, #12]
    d584:	68e1      	ldr	r1, [r4, #12]
    d586:	68e2      	ldr	r2, [r4, #12]
    d588:	7813      	ldrb	r3, [r2, #0]
    d58a:	2b45      	cmp	r3, #69	; 0x45
    d58c:	d11d      	bne.n	d5ca <d_expr_primary+0x92>
    d58e:	1a52      	subs	r2, r2, r1
    d590:	4620      	mov	r0, r4
    d592:	f7ff fc6b 	bl	ce6c <d_make_name>
    d596:	462a      	mov	r2, r5
    d598:	4603      	mov	r3, r0
    d59a:	4631      	mov	r1, r6
    d59c:	4620      	mov	r0, r4
    d59e:	f7ff fc24 	bl	cdea <d_make_comp>
    d5a2:	e00b      	b.n	d5bc <d_expr_primary+0x84>
    d5a4:	3302      	adds	r3, #2
    d5a6:	60c3      	str	r3, [r0, #12]
    d5a8:	68e3      	ldr	r3, [r4, #12]
    d5aa:	781a      	ldrb	r2, [r3, #0]
    d5ac:	2a5a      	cmp	r2, #90	; 0x5a
    d5ae:	d111      	bne.n	d5d4 <d_expr_primary+0x9c>
    d5b0:	3301      	adds	r3, #1
    d5b2:	2100      	movs	r1, #0
    d5b4:	4620      	mov	r0, r4
    d5b6:	60e3      	str	r3, [r4, #12]
    d5b8:	f001 f912 	bl	e7e0 <d_encoding>
    d5bc:	68e3      	ldr	r3, [r4, #12]
    d5be:	781a      	ldrb	r2, [r3, #0]
    d5c0:	2a45      	cmp	r2, #69	; 0x45
    d5c2:	d1bf      	bne.n	d544 <d_expr_primary+0xc>
    d5c4:	3301      	adds	r3, #1
    d5c6:	60e3      	str	r3, [r4, #12]
    d5c8:	e7bd      	b.n	d546 <d_expr_primary+0xe>
    d5ca:	2b00      	cmp	r3, #0
    d5cc:	d0ba      	beq.n	d544 <d_expr_primary+0xc>
    d5ce:	3201      	adds	r2, #1
    d5d0:	60e2      	str	r2, [r4, #12]
    d5d2:	e7d8      	b.n	d586 <d_expr_primary+0x4e>
    d5d4:	2000      	movs	r0, #0
    d5d6:	e7f1      	b.n	d5bc <d_expr_primary+0x84>

0000d5d8 <d_expression_1>:
    d5d8:	68c3      	ldr	r3, [r0, #12]
    d5da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d5dc:	781a      	ldrb	r2, [r3, #0]
    d5de:	4604      	mov	r4, r0
    d5e0:	2a4c      	cmp	r2, #76	; 0x4c
    d5e2:	d103      	bne.n	d5ec <d_expression_1+0x14>
    d5e4:	b003      	add	sp, #12
    d5e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d5ea:	e7a5      	b.n	d538 <d_expr_primary>
    d5ec:	2a54      	cmp	r2, #84	; 0x54
    d5ee:	d103      	bne.n	d5f8 <d_expression_1+0x20>
    d5f0:	b003      	add	sp, #12
    d5f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d5f6:	e581      	b.n	d0fc <d_template_param>
    d5f8:	2a73      	cmp	r2, #115	; 0x73
    d5fa:	d12d      	bne.n	d658 <d_expression_1+0x80>
    d5fc:	785a      	ldrb	r2, [r3, #1]
    d5fe:	2a72      	cmp	r2, #114	; 0x72
    d600:	d120      	bne.n	d644 <d_expression_1+0x6c>
    d602:	3302      	adds	r3, #2
    d604:	60c3      	str	r3, [r0, #12]
    d606:	f000 f9d3 	bl	d9b0 <d_type>
    d60a:	4605      	mov	r5, r0
    d60c:	4620      	mov	r0, r4
    d60e:	f000 fea0 	bl	e352 <d_unqualified_name>
    d612:	68e3      	ldr	r3, [r4, #12]
    d614:	781b      	ldrb	r3, [r3, #0]
    d616:	2b49      	cmp	r3, #73	; 0x49
    d618:	d008      	beq.n	d62c <d_expression_1+0x54>
    d61a:	4603      	mov	r3, r0
    d61c:	462a      	mov	r2, r5
    d61e:	2101      	movs	r1, #1
    d620:	4620      	mov	r0, r4
    d622:	b003      	add	sp, #12
    d624:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    d628:	f7ff bbdf 	b.w	cdea <d_make_comp>
    d62c:	9001      	str	r0, [sp, #4]
    d62e:	4620      	mov	r0, r4
    d630:	f000 fcf5 	bl	e01e <d_template_args>
    d634:	9a01      	ldr	r2, [sp, #4]
    d636:	4603      	mov	r3, r0
    d638:	2104      	movs	r1, #4
    d63a:	4620      	mov	r0, r4
    d63c:	f7ff fbd5 	bl	cdea <d_make_comp>
    d640:	4603      	mov	r3, r0
    d642:	e7eb      	b.n	d61c <d_expression_1+0x44>
    d644:	2a70      	cmp	r2, #112	; 0x70
    d646:	d162      	bne.n	d70e <d_expression_1+0x136>
    d648:	3302      	adds	r3, #2
    d64a:	60c3      	str	r3, [r0, #12]
    d64c:	f7ff ffc4 	bl	d5d8 <d_expression_1>
    d650:	2300      	movs	r3, #0
    d652:	4602      	mov	r2, r0
    d654:	214b      	movs	r1, #75	; 0x4b
    d656:	e7e3      	b.n	d620 <d_expression_1+0x48>
    d658:	2a66      	cmp	r2, #102	; 0x66
    d65a:	d11f      	bne.n	d69c <d_expression_1+0xc4>
    d65c:	785a      	ldrb	r2, [r3, #1]
    d65e:	2a70      	cmp	r2, #112	; 0x70
    d660:	d155      	bne.n	d70e <d_expression_1+0x136>
    d662:	1c9a      	adds	r2, r3, #2
    d664:	60c2      	str	r2, [r0, #12]
    d666:	789a      	ldrb	r2, [r3, #2]
    d668:	2a54      	cmp	r2, #84	; 0x54
    d66a:	d10d      	bne.n	d688 <d_expression_1+0xb0>
    d66c:	3303      	adds	r3, #3
    d66e:	2600      	movs	r6, #0
    d670:	60c3      	str	r3, [r0, #12]
    d672:	4620      	mov	r0, r4
    d674:	f7ff fbaa 	bl	cdcc <d_make_empty>
    d678:	4605      	mov	r5, r0
    d67a:	b110      	cbz	r0, d682 <d_expression_1+0xaa>
    d67c:	2306      	movs	r3, #6
    d67e:	6086      	str	r6, [r0, #8]
    d680:	7003      	strb	r3, [r0, #0]
    d682:	4628      	mov	r0, r5
    d684:	b003      	add	sp, #12
    d686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d688:	f7ff fd1f 	bl	d0ca <d_compact_number>
    d68c:	43c3      	mvns	r3, r0
    d68e:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
    d692:	d101      	bne.n	d698 <d_expression_1+0xc0>
    d694:	2500      	movs	r5, #0
    d696:	e7f4      	b.n	d682 <d_expression_1+0xaa>
    d698:	1c46      	adds	r6, r0, #1
    d69a:	e7ea      	b.n	d672 <d_expression_1+0x9a>
    d69c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    d6a0:	2909      	cmp	r1, #9
    d6a2:	d906      	bls.n	d6b2 <d_expression_1+0xda>
    d6a4:	2a6f      	cmp	r2, #111	; 0x6f
    d6a6:	d115      	bne.n	d6d4 <d_expression_1+0xfc>
    d6a8:	785a      	ldrb	r2, [r3, #1]
    d6aa:	2a6e      	cmp	r2, #110	; 0x6e
    d6ac:	d12f      	bne.n	d70e <d_expression_1+0x136>
    d6ae:	3302      	adds	r3, #2
    d6b0:	60c3      	str	r3, [r0, #12]
    d6b2:	4620      	mov	r0, r4
    d6b4:	f000 fe4d 	bl	e352 <d_unqualified_name>
    d6b8:	4605      	mov	r5, r0
    d6ba:	2800      	cmp	r0, #0
    d6bc:	d0ea      	beq.n	d694 <d_expression_1+0xbc>
    d6be:	68e3      	ldr	r3, [r4, #12]
    d6c0:	781b      	ldrb	r3, [r3, #0]
    d6c2:	2b49      	cmp	r3, #73	; 0x49
    d6c4:	d1dd      	bne.n	d682 <d_expression_1+0xaa>
    d6c6:	4620      	mov	r0, r4
    d6c8:	f000 fca9 	bl	e01e <d_template_args>
    d6cc:	462a      	mov	r2, r5
    d6ce:	4603      	mov	r3, r0
    d6d0:	2104      	movs	r1, #4
    d6d2:	e7a5      	b.n	d620 <d_expression_1+0x48>
    d6d4:	2a69      	cmp	r2, #105	; 0x69
    d6d6:	d001      	beq.n	d6dc <d_expression_1+0x104>
    d6d8:	2a74      	cmp	r2, #116	; 0x74
    d6da:	d118      	bne.n	d70e <d_expression_1+0x136>
    d6dc:	7859      	ldrb	r1, [r3, #1]
    d6de:	296c      	cmp	r1, #108	; 0x6c
    d6e0:	d115      	bne.n	d70e <d_expression_1+0x136>
    d6e2:	3302      	adds	r3, #2
    d6e4:	2a74      	cmp	r2, #116	; 0x74
    d6e6:	60e3      	str	r3, [r4, #12]
    d6e8:	d10f      	bne.n	d70a <d_expression_1+0x132>
    d6ea:	4620      	mov	r0, r4
    d6ec:	f000 f960 	bl	d9b0 <d_type>
    d6f0:	4605      	mov	r5, r0
    d6f2:	68e3      	ldr	r3, [r4, #12]
    d6f4:	785b      	ldrb	r3, [r3, #1]
    d6f6:	2b00      	cmp	r3, #0
    d6f8:	d0cc      	beq.n	d694 <d_expression_1+0xbc>
    d6fa:	2145      	movs	r1, #69	; 0x45
    d6fc:	4620      	mov	r0, r4
    d6fe:	f000 f92a 	bl	d956 <d_exprlist>
    d702:	462a      	mov	r2, r5
    d704:	4603      	mov	r3, r0
    d706:	2131      	movs	r1, #49	; 0x31
    d708:	e78a      	b.n	d620 <d_expression_1+0x48>
    d70a:	2500      	movs	r5, #0
    d70c:	e7f1      	b.n	d6f2 <d_expression_1+0x11a>
    d70e:	4620      	mov	r0, r4
    d710:	f000 fc8f 	bl	e032 <d_operator_name>
    d714:	4605      	mov	r5, r0
    d716:	2800      	cmp	r0, #0
    d718:	d0bc      	beq.n	d694 <d_expression_1+0xbc>
    d71a:	7803      	ldrb	r3, [r0, #0]
    d71c:	2b32      	cmp	r3, #50	; 0x32
    d71e:	d113      	bne.n	d748 <d_expression_1+0x170>
    d720:	6883      	ldr	r3, [r0, #8]
    d722:	4982      	ldr	r1, [pc, #520]	; (d92c <d_expression_1+0x354>)
    d724:	689a      	ldr	r2, [r3, #8]
    d726:	681e      	ldr	r6, [r3, #0]
    d728:	3a02      	subs	r2, #2
    d72a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d72c:	4630      	mov	r0, r6
    d72e:	4413      	add	r3, r2
    d730:	62e3      	str	r3, [r4, #44]	; 0x2c
    d732:	f004 f9e7 	bl	11b04 <strcmp>
    d736:	68ab      	ldr	r3, [r5, #8]
    d738:	b9d0      	cbnz	r0, d770 <d_expression_1+0x198>
    d73a:	4620      	mov	r0, r4
    d73c:	f000 f938 	bl	d9b0 <d_type>
    d740:	4603      	mov	r3, r0
    d742:	462a      	mov	r2, r5
    d744:	2137      	movs	r1, #55	; 0x37
    d746:	e76b      	b.n	d620 <d_expression_1+0x48>
    d748:	2b34      	cmp	r3, #52	; 0x34
    d74a:	d03c      	beq.n	d7c6 <d_expression_1+0x1ee>
    d74c:	d8a2      	bhi.n	d694 <d_expression_1+0xbc>
    d74e:	2b33      	cmp	r3, #51	; 0x33
    d750:	d1a0      	bne.n	d694 <d_expression_1+0xbc>
    d752:	6883      	ldr	r3, [r0, #8]
    d754:	2b03      	cmp	r3, #3
    d756:	d89d      	bhi.n	d694 <d_expression_1+0xbc>
    d758:	a201      	add	r2, pc, #4	; (adr r2, d760 <d_expression_1+0x188>)
    d75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    d75e:	bf00      	nop
    d760:	0000d77f 	.word	0x0000d77f
    d764:	0000d7dd 	.word	0x0000d7dd
    d768:	0000d695 	.word	0x0000d695
    d76c:	0000d695 	.word	0x0000d695
    d770:	68df      	ldr	r7, [r3, #12]
    d772:	2f03      	cmp	r7, #3
    d774:	d88e      	bhi.n	d694 <d_expression_1+0xbc>
    d776:	e8df f007 	tbb	[pc, r7]
    d77a:	0602      	.short	0x0602
    d77c:	7c36      	.short	0x7c36
    d77e:	2300      	movs	r3, #0
    d780:	462a      	mov	r2, r5
    d782:	2136      	movs	r1, #54	; 0x36
    d784:	e74c      	b.n	d620 <d_expression_1+0x48>
    d786:	7833      	ldrb	r3, [r6, #0]
    d788:	2b70      	cmp	r3, #112	; 0x70
    d78a:	d001      	beq.n	d790 <d_expression_1+0x1b8>
    d78c:	2b6d      	cmp	r3, #109	; 0x6d
    d78e:	d108      	bne.n	d7a2 <d_expression_1+0x1ca>
    d790:	7872      	ldrb	r2, [r6, #1]
    d792:	429a      	cmp	r2, r3
    d794:	d105      	bne.n	d7a2 <d_expression_1+0x1ca>
    d796:	68e3      	ldr	r3, [r4, #12]
    d798:	781a      	ldrb	r2, [r3, #0]
    d79a:	2a5f      	cmp	r2, #95	; 0x5f
    d79c:	d102      	bne.n	d7a4 <d_expression_1+0x1cc>
    d79e:	3301      	adds	r3, #1
    d7a0:	60e3      	str	r3, [r4, #12]
    d7a2:	2700      	movs	r7, #0
    d7a4:	4962      	ldr	r1, [pc, #392]	; (d930 <d_expression_1+0x358>)
    d7a6:	4630      	mov	r0, r6
    d7a8:	f004 f9ac 	bl	11b04 <strcmp>
    d7ac:	b9b8      	cbnz	r0, d7de <d_expression_1+0x206>
    d7ae:	4620      	mov	r0, r4
    d7b0:	f000 fc06 	bl	dfc0 <d_template_args_1>
    d7b4:	2f00      	cmp	r7, #0
    d7b6:	d0c3      	beq.n	d740 <d_expression_1+0x168>
    d7b8:	4603      	mov	r3, r0
    d7ba:	4602      	mov	r2, r0
    d7bc:	2139      	movs	r1, #57	; 0x39
    d7be:	4620      	mov	r0, r4
    d7c0:	f7ff fb13 	bl	cdea <d_make_comp>
    d7c4:	e7bc      	b.n	d740 <d_expression_1+0x168>
    d7c6:	68e3      	ldr	r3, [r4, #12]
    d7c8:	781a      	ldrb	r2, [r3, #0]
    d7ca:	2a5f      	cmp	r2, #95	; 0x5f
    d7cc:	d106      	bne.n	d7dc <d_expression_1+0x204>
    d7ce:	3301      	adds	r3, #1
    d7d0:	2145      	movs	r1, #69	; 0x45
    d7d2:	4620      	mov	r0, r4
    d7d4:	60e3      	str	r3, [r4, #12]
    d7d6:	f000 f8be 	bl	d956 <d_exprlist>
    d7da:	e7b1      	b.n	d740 <d_expression_1+0x168>
    d7dc:	2700      	movs	r7, #0
    d7de:	4620      	mov	r0, r4
    d7e0:	f7ff fefa 	bl	d5d8 <d_expression_1>
    d7e4:	e7e6      	b.n	d7b4 <d_expression_1+0x1dc>
    d7e6:	68a8      	ldr	r0, [r5, #8]
    d7e8:	f7ff fd38 	bl	d25c <op_is_new_cast.isra.0>
    d7ec:	b1b8      	cbz	r0, d81e <d_expression_1+0x246>
    d7ee:	4620      	mov	r0, r4
    d7f0:	f000 f8de 	bl	d9b0 <d_type>
    d7f4:	4607      	mov	r7, r0
    d7f6:	494f      	ldr	r1, [pc, #316]	; (d934 <d_expression_1+0x35c>)
    d7f8:	4630      	mov	r0, r6
    d7fa:	f004 f983 	bl	11b04 <strcmp>
    d7fe:	b9c0      	cbnz	r0, d832 <d_expression_1+0x25a>
    d800:	2145      	movs	r1, #69	; 0x45
    d802:	4620      	mov	r0, r4
    d804:	f000 f8a7 	bl	d956 <d_exprlist>
    d808:	4606      	mov	r6, r0
    d80a:	4633      	mov	r3, r6
    d80c:	463a      	mov	r2, r7
    d80e:	2139      	movs	r1, #57	; 0x39
    d810:	4620      	mov	r0, r4
    d812:	f7ff faea 	bl	cdea <d_make_comp>
    d816:	462a      	mov	r2, r5
    d818:	4603      	mov	r3, r0
    d81a:	2138      	movs	r1, #56	; 0x38
    d81c:	e700      	b.n	d620 <d_expression_1+0x48>
    d81e:	7833      	ldrb	r3, [r6, #0]
    d820:	4620      	mov	r0, r4
    d822:	2b66      	cmp	r3, #102	; 0x66
    d824:	d102      	bne.n	d82c <d_expression_1+0x254>
    d826:	f000 fc04 	bl	e032 <d_operator_name>
    d82a:	e7e3      	b.n	d7f4 <d_expression_1+0x21c>
    d82c:	f7ff fed4 	bl	d5d8 <d_expression_1>
    d830:	e7e0      	b.n	d7f4 <d_expression_1+0x21c>
    d832:	4941      	ldr	r1, [pc, #260]	; (d938 <d_expression_1+0x360>)
    d834:	4630      	mov	r0, r6
    d836:	f004 f965 	bl	11b04 <strcmp>
    d83a:	b120      	cbz	r0, d846 <d_expression_1+0x26e>
    d83c:	493f      	ldr	r1, [pc, #252]	; (d93c <d_expression_1+0x364>)
    d83e:	4630      	mov	r0, r6
    d840:	f004 f960 	bl	11b04 <strcmp>
    d844:	b988      	cbnz	r0, d86a <d_expression_1+0x292>
    d846:	4620      	mov	r0, r4
    d848:	f000 fd83 	bl	e352 <d_unqualified_name>
    d84c:	68e3      	ldr	r3, [r4, #12]
    d84e:	4606      	mov	r6, r0
    d850:	781b      	ldrb	r3, [r3, #0]
    d852:	2b49      	cmp	r3, #73	; 0x49
    d854:	d1d9      	bne.n	d80a <d_expression_1+0x232>
    d856:	4620      	mov	r0, r4
    d858:	f000 fbe1 	bl	e01e <d_template_args>
    d85c:	4632      	mov	r2, r6
    d85e:	4603      	mov	r3, r0
    d860:	2104      	movs	r1, #4
    d862:	4620      	mov	r0, r4
    d864:	f7ff fac1 	bl	cdea <d_make_comp>
    d868:	e7ce      	b.n	d808 <d_expression_1+0x230>
    d86a:	4620      	mov	r0, r4
    d86c:	f7ff feb4 	bl	d5d8 <d_expression_1>
    d870:	e7ca      	b.n	d808 <d_expression_1+0x230>
    d872:	4933      	ldr	r1, [pc, #204]	; (d940 <d_expression_1+0x368>)
    d874:	4630      	mov	r0, r6
    d876:	f004 f945 	bl	11b04 <strcmp>
    d87a:	b9e8      	cbnz	r0, d8b8 <d_expression_1+0x2e0>
    d87c:	4620      	mov	r0, r4
    d87e:	f7ff feab 	bl	d5d8 <d_expression_1>
    d882:	4606      	mov	r6, r0
    d884:	4620      	mov	r0, r4
    d886:	f7ff fea7 	bl	d5d8 <d_expression_1>
    d88a:	4607      	mov	r7, r0
    d88c:	4620      	mov	r0, r4
    d88e:	f7ff fea3 	bl	d5d8 <d_expression_1>
    d892:	2800      	cmp	r0, #0
    d894:	f43f aefe 	beq.w	d694 <d_expression_1+0xbc>
    d898:	4603      	mov	r3, r0
    d89a:	463a      	mov	r2, r7
    d89c:	213c      	movs	r1, #60	; 0x3c
    d89e:	4620      	mov	r0, r4
    d8a0:	f7ff faa3 	bl	cdea <d_make_comp>
    d8a4:	4632      	mov	r2, r6
    d8a6:	4603      	mov	r3, r0
    d8a8:	213b      	movs	r1, #59	; 0x3b
    d8aa:	4620      	mov	r0, r4
    d8ac:	f7ff fa9d 	bl	cdea <d_make_comp>
    d8b0:	462a      	mov	r2, r5
    d8b2:	4603      	mov	r3, r0
    d8b4:	213a      	movs	r1, #58	; 0x3a
    d8b6:	e6b3      	b.n	d620 <d_expression_1+0x48>
    d8b8:	7833      	ldrb	r3, [r6, #0]
    d8ba:	2b66      	cmp	r3, #102	; 0x66
    d8bc:	d103      	bne.n	d8c6 <d_expression_1+0x2ee>
    d8be:	4620      	mov	r0, r4
    d8c0:	f000 fbb7 	bl	e032 <d_operator_name>
    d8c4:	e7dd      	b.n	d882 <d_expression_1+0x2aa>
    d8c6:	2b6e      	cmp	r3, #110	; 0x6e
    d8c8:	f47f aee4 	bne.w	d694 <d_expression_1+0xbc>
    d8cc:	7873      	ldrb	r3, [r6, #1]
    d8ce:	2b77      	cmp	r3, #119	; 0x77
    d8d0:	d002      	beq.n	d8d8 <d_expression_1+0x300>
    d8d2:	2b61      	cmp	r3, #97	; 0x61
    d8d4:	f47f aede 	bne.w	d694 <d_expression_1+0xbc>
    d8d8:	215f      	movs	r1, #95	; 0x5f
    d8da:	4620      	mov	r0, r4
    d8dc:	f000 f83b 	bl	d956 <d_exprlist>
    d8e0:	4606      	mov	r6, r0
    d8e2:	4620      	mov	r0, r4
    d8e4:	f000 f864 	bl	d9b0 <d_type>
    d8e8:	68e3      	ldr	r3, [r4, #12]
    d8ea:	4607      	mov	r7, r0
    d8ec:	781a      	ldrb	r2, [r3, #0]
    d8ee:	2a45      	cmp	r2, #69	; 0x45
    d8f0:	d103      	bne.n	d8fa <d_expression_1+0x322>
    d8f2:	3301      	adds	r3, #1
    d8f4:	2000      	movs	r0, #0
    d8f6:	60e3      	str	r3, [r4, #12]
    d8f8:	e7ce      	b.n	d898 <d_expression_1+0x2c0>
    d8fa:	2a70      	cmp	r2, #112	; 0x70
    d8fc:	d10a      	bne.n	d914 <d_expression_1+0x33c>
    d8fe:	785a      	ldrb	r2, [r3, #1]
    d900:	2a69      	cmp	r2, #105	; 0x69
    d902:	f47f aec7 	bne.w	d694 <d_expression_1+0xbc>
    d906:	3302      	adds	r3, #2
    d908:	2145      	movs	r1, #69	; 0x45
    d90a:	4620      	mov	r0, r4
    d90c:	60e3      	str	r3, [r4, #12]
    d90e:	f000 f822 	bl	d956 <d_exprlist>
    d912:	e7c1      	b.n	d898 <d_expression_1+0x2c0>
    d914:	2a69      	cmp	r2, #105	; 0x69
    d916:	f47f aebd 	bne.w	d694 <d_expression_1+0xbc>
    d91a:	785b      	ldrb	r3, [r3, #1]
    d91c:	2b6c      	cmp	r3, #108	; 0x6c
    d91e:	f47f aeb9 	bne.w	d694 <d_expression_1+0xbc>
    d922:	4620      	mov	r0, r4
    d924:	f7ff fe58 	bl	d5d8 <d_expression_1>
    d928:	e7b6      	b.n	d898 <d_expression_1+0x2c0>
    d92a:	bf00      	nop
    d92c:	000373f3 	.word	0x000373f3
    d930:	00036f7a 	.word	0x00036f7a
    d934:	00036f71 	.word	0x00036f71
    d938:	00036f74 	.word	0x00036f74
    d93c:	00037211 	.word	0x00037211
    d940:	00036f77 	.word	0x00036f77

0000d944 <d_expression>:
    d944:	b538      	push	{r3, r4, r5, lr}
    d946:	2301      	movs	r3, #1
    d948:	6b05      	ldr	r5, [r0, #48]	; 0x30
    d94a:	4604      	mov	r4, r0
    d94c:	6303      	str	r3, [r0, #48]	; 0x30
    d94e:	f7ff fe43 	bl	d5d8 <d_expression_1>
    d952:	6325      	str	r5, [r4, #48]	; 0x30
    d954:	bd38      	pop	{r3, r4, r5, pc}

0000d956 <d_exprlist>:
    d956:	68c2      	ldr	r2, [r0, #12]
    d958:	2300      	movs	r3, #0
    d95a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d95c:	460d      	mov	r5, r1
    d95e:	7811      	ldrb	r1, [r2, #0]
    d960:	4604      	mov	r4, r0
    d962:	9301      	str	r3, [sp, #4]
    d964:	42a9      	cmp	r1, r5
    d966:	d108      	bne.n	d97a <d_exprlist+0x24>
    d968:	3201      	adds	r2, #1
    d96a:	212e      	movs	r1, #46	; 0x2e
    d96c:	60c2      	str	r2, [r0, #12]
    d96e:	461a      	mov	r2, r3
    d970:	b002      	add	sp, #8
    d972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d976:	f7ff ba38 	b.w	cdea <d_make_comp>
    d97a:	ae01      	add	r6, sp, #4
    d97c:	4620      	mov	r0, r4
    d97e:	f7ff ffe1 	bl	d944 <d_expression>
    d982:	4602      	mov	r2, r0
    d984:	b910      	cbnz	r0, d98c <d_exprlist+0x36>
    d986:	2000      	movs	r0, #0
    d988:	b002      	add	sp, #8
    d98a:	bd70      	pop	{r4, r5, r6, pc}
    d98c:	2300      	movs	r3, #0
    d98e:	212e      	movs	r1, #46	; 0x2e
    d990:	4620      	mov	r0, r4
    d992:	f7ff fa2a 	bl	cdea <d_make_comp>
    d996:	6030      	str	r0, [r6, #0]
    d998:	2800      	cmp	r0, #0
    d99a:	d0f4      	beq.n	d986 <d_exprlist+0x30>
    d99c:	68e3      	ldr	r3, [r4, #12]
    d99e:	f100 060c 	add.w	r6, r0, #12
    d9a2:	781a      	ldrb	r2, [r3, #0]
    d9a4:	42aa      	cmp	r2, r5
    d9a6:	d1e9      	bne.n	d97c <d_exprlist+0x26>
    d9a8:	3301      	adds	r3, #1
    d9aa:	9801      	ldr	r0, [sp, #4]
    d9ac:	60e3      	str	r3, [r4, #12]
    d9ae:	e7eb      	b.n	d988 <d_exprlist+0x32>

0000d9b0 <d_type>:
    d9b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    d9b4:	68c2      	ldr	r2, [r0, #12]
    d9b6:	4604      	mov	r4, r0
    d9b8:	4610      	mov	r0, r2
    d9ba:	f7ff fc37 	bl	d22c <next_is_type_qual.isra.0>
    d9be:	b350      	cbz	r0, da16 <d_type+0x66>
    d9c0:	2200      	movs	r2, #0
    d9c2:	a903      	add	r1, sp, #12
    d9c4:	4620      	mov	r0, r4
    d9c6:	f000 fbd9 	bl	e17c <d_cv_qualifiers>
    d9ca:	4605      	mov	r5, r0
    d9cc:	b918      	cbnz	r0, d9d6 <d_type+0x26>
    d9ce:	2000      	movs	r0, #0
    d9d0:	b004      	add	sp, #16
    d9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d9d6:	68e3      	ldr	r3, [r4, #12]
    d9d8:	4620      	mov	r0, r4
    d9da:	781b      	ldrb	r3, [r3, #0]
    d9dc:	2b46      	cmp	r3, #70	; 0x46
    d9de:	d117      	bne.n	da10 <d_type+0x60>
    d9e0:	f000 fc88 	bl	e2f4 <d_function_type>
    d9e4:	6028      	str	r0, [r5, #0]
    d9e6:	682b      	ldr	r3, [r5, #0]
    d9e8:	2b00      	cmp	r3, #0
    d9ea:	d0f0      	beq.n	d9ce <d_type+0x1e>
    d9ec:	781a      	ldrb	r2, [r3, #0]
    d9ee:	3a1f      	subs	r2, #31
    d9f0:	2a01      	cmp	r2, #1
    d9f2:	d805      	bhi.n	da00 <d_type+0x50>
    d9f4:	9903      	ldr	r1, [sp, #12]
    d9f6:	689a      	ldr	r2, [r3, #8]
    d9f8:	6099      	str	r1, [r3, #8]
    d9fa:	682b      	ldr	r3, [r5, #0]
    d9fc:	9303      	str	r3, [sp, #12]
    d9fe:	602a      	str	r2, [r5, #0]
    da00:	9903      	ldr	r1, [sp, #12]
    da02:	4620      	mov	r0, r4
    da04:	f7ff fa64 	bl	ced0 <d_add_substitution>
    da08:	2800      	cmp	r0, #0
    da0a:	f040 80b4 	bne.w	db76 <d_type+0x1c6>
    da0e:	e7de      	b.n	d9ce <d_type+0x1e>
    da10:	f7ff ffce 	bl	d9b0 <d_type>
    da14:	e7e6      	b.n	d9e4 <d_type+0x34>
    da16:	7811      	ldrb	r1, [r2, #0]
    da18:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    da1c:	2b4a      	cmp	r3, #74	; 0x4a
    da1e:	d8d6      	bhi.n	d9ce <d_type+0x1e>
    da20:	a001      	add	r0, pc, #4	; (adr r0, da28 <d_type+0x78>)
    da22:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    da26:	bf00      	nop
    da28:	0000db9d 	.word	0x0000db9d
    da2c:	0000db9d 	.word	0x0000db9d
    da30:	0000db9d 	.word	0x0000db9d
    da34:	0000db9d 	.word	0x0000db9d
    da38:	0000db9d 	.word	0x0000db9d
    da3c:	0000db9d 	.word	0x0000db9d
    da40:	0000db9d 	.word	0x0000db9d
    da44:	0000db9d 	.word	0x0000db9d
    da48:	0000db9d 	.word	0x0000db9d
    da4c:	0000db9d 	.word	0x0000db9d
    da50:	0000d9cf 	.word	0x0000d9cf
    da54:	0000d9cf 	.word	0x0000d9cf
    da58:	0000d9cf 	.word	0x0000d9cf
    da5c:	0000d9cf 	.word	0x0000d9cf
    da60:	0000d9cf 	.word	0x0000d9cf
    da64:	0000d9cf 	.word	0x0000d9cf
    da68:	0000d9cf 	.word	0x0000d9cf
    da6c:	0000dba5 	.word	0x0000dba5
    da70:	0000d9cf 	.word	0x0000d9cf
    da74:	0000dd0b 	.word	0x0000dd0b
    da78:	0000dd67 	.word	0x0000dd67
    da7c:	0000d9cf 	.word	0x0000d9cf
    da80:	0000db93 	.word	0x0000db93
    da84:	0000dd1d 	.word	0x0000dd1d
    da88:	0000d9cf 	.word	0x0000d9cf
    da8c:	0000d9cf 	.word	0x0000d9cf
    da90:	0000d9cf 	.word	0x0000d9cf
    da94:	0000d9cf 	.word	0x0000d9cf
    da98:	0000d9cf 	.word	0x0000d9cf
    da9c:	0000dbf7 	.word	0x0000dbf7
    daa0:	0000db9d 	.word	0x0000db9d
    daa4:	0000dcd5 	.word	0x0000dcd5
    daa8:	0000dce7 	.word	0x0000dce7
    daac:	0000d9cf 	.word	0x0000d9cf
    dab0:	0000dcf9 	.word	0x0000dcf9
    dab4:	0000dc87 	.word	0x0000dc87
    dab8:	0000dc19 	.word	0x0000dc19
    dabc:	0000dd2f 	.word	0x0000dd2f
    dac0:	0000d9cf 	.word	0x0000d9cf
    dac4:	0000d9cf 	.word	0x0000d9cf
    dac8:	0000d9cf 	.word	0x0000d9cf
    dacc:	0000d9cf 	.word	0x0000d9cf
    dad0:	0000db9d 	.word	0x0000db9d
    dad4:	0000d9cf 	.word	0x0000d9cf
    dad8:	0000d9cf 	.word	0x0000d9cf
    dadc:	0000d9cf 	.word	0x0000d9cf
    dae0:	0000d9cf 	.word	0x0000d9cf
    dae4:	0000d9cf 	.word	0x0000d9cf
    dae8:	0000d9cf 	.word	0x0000d9cf
    daec:	0000db55 	.word	0x0000db55
    daf0:	0000db55 	.word	0x0000db55
    daf4:	0000db55 	.word	0x0000db55
    daf8:	0000db55 	.word	0x0000db55
    dafc:	0000db55 	.word	0x0000db55
    db00:	0000db55 	.word	0x0000db55
    db04:	0000db55 	.word	0x0000db55
    db08:	0000db55 	.word	0x0000db55
    db0c:	0000db55 	.word	0x0000db55
    db10:	0000db55 	.word	0x0000db55
    db14:	0000d9cf 	.word	0x0000d9cf
    db18:	0000db55 	.word	0x0000db55
    db1c:	0000db55 	.word	0x0000db55
    db20:	0000db55 	.word	0x0000db55
    db24:	0000db55 	.word	0x0000db55
    db28:	0000d9cf 	.word	0x0000d9cf
    db2c:	0000d9cf 	.word	0x0000d9cf
    db30:	0000d9cf 	.word	0x0000d9cf
    db34:	0000db55 	.word	0x0000db55
    db38:	0000db55 	.word	0x0000db55
    db3c:	0000db7b 	.word	0x0000db7b
    db40:	0000db55 	.word	0x0000db55
    db44:	0000db55 	.word	0x0000db55
    db48:	0000db55 	.word	0x0000db55
    db4c:	0000db55 	.word	0x0000db55
    db50:	0000db55 	.word	0x0000db55
    db54:	4bbf      	ldr	r3, [pc, #764]	; (de54 <d_type+0x4a4>)
    db56:	2214      	movs	r2, #20
    db58:	3961      	subs	r1, #97	; 0x61
    db5a:	4620      	mov	r0, r4
    db5c:	fb02 3101 	mla	r1, r2, r1, r3
    db60:	f7ff f997 	bl	ce92 <d_make_builtin_type>
    db64:	6882      	ldr	r2, [r0, #8]
    db66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    db68:	6852      	ldr	r2, [r2, #4]
    db6a:	9003      	str	r0, [sp, #12]
    db6c:	4413      	add	r3, r2
    db6e:	62e3      	str	r3, [r4, #44]	; 0x2c
    db70:	68e3      	ldr	r3, [r4, #12]
    db72:	3301      	adds	r3, #1
    db74:	60e3      	str	r3, [r4, #12]
    db76:	9803      	ldr	r0, [sp, #12]
    db78:	e72a      	b.n	d9d0 <d_type+0x20>
    db7a:	3201      	adds	r2, #1
    db7c:	4620      	mov	r0, r4
    db7e:	60e2      	str	r2, [r4, #12]
    db80:	f7ff fad3 	bl	d12a <d_source_name>
    db84:	2300      	movs	r3, #0
    db86:	4602      	mov	r2, r0
    db88:	2128      	movs	r1, #40	; 0x28
    db8a:	4620      	mov	r0, r4
    db8c:	f7ff f92d 	bl	cdea <d_make_comp>
    db90:	e002      	b.n	db98 <d_type+0x1e8>
    db92:	4620      	mov	r0, r4
    db94:	f000 fbae 	bl	e2f4 <d_function_type>
    db98:	9003      	str	r0, [sp, #12]
    db9a:	e731      	b.n	da00 <d_type+0x50>
    db9c:	4620      	mov	r0, r4
    db9e:	f000 fcdb 	bl	e558 <d_name>
    dba2:	e7f9      	b.n	db98 <d_type+0x1e8>
    dba4:	1c51      	adds	r1, r2, #1
    dba6:	60e1      	str	r1, [r4, #12]
    dba8:	7853      	ldrb	r3, [r2, #1]
    dbaa:	2b5f      	cmp	r3, #95	; 0x5f
    dbac:	d015      	beq.n	dbda <d_type+0x22a>
    dbae:	3b30      	subs	r3, #48	; 0x30
    dbb0:	2b09      	cmp	r3, #9
    dbb2:	d80e      	bhi.n	dbd2 <d_type+0x222>
    dbb4:	68e3      	ldr	r3, [r4, #12]
    dbb6:	1c5a      	adds	r2, r3, #1
    dbb8:	60e2      	str	r2, [r4, #12]
    dbba:	785b      	ldrb	r3, [r3, #1]
    dbbc:	3b30      	subs	r3, #48	; 0x30
    dbbe:	2b09      	cmp	r3, #9
    dbc0:	d9f8      	bls.n	dbb4 <d_type+0x204>
    dbc2:	1a52      	subs	r2, r2, r1
    dbc4:	4620      	mov	r0, r4
    dbc6:	f7ff f951 	bl	ce6c <d_make_name>
    dbca:	4605      	mov	r5, r0
    dbcc:	b930      	cbnz	r0, dbdc <d_type+0x22c>
    dbce:	2000      	movs	r0, #0
    dbd0:	e7e2      	b.n	db98 <d_type+0x1e8>
    dbd2:	4620      	mov	r0, r4
    dbd4:	f7ff feb6 	bl	d944 <d_expression>
    dbd8:	e7f7      	b.n	dbca <d_type+0x21a>
    dbda:	2500      	movs	r5, #0
    dbdc:	68e3      	ldr	r3, [r4, #12]
    dbde:	781a      	ldrb	r2, [r3, #0]
    dbe0:	2a5f      	cmp	r2, #95	; 0x5f
    dbe2:	d1f4      	bne.n	dbce <d_type+0x21e>
    dbe4:	3301      	adds	r3, #1
    dbe6:	4620      	mov	r0, r4
    dbe8:	60e3      	str	r3, [r4, #12]
    dbea:	f7ff fee1 	bl	d9b0 <d_type>
    dbee:	462a      	mov	r2, r5
    dbf0:	4603      	mov	r3, r0
    dbf2:	212a      	movs	r1, #42	; 0x2a
    dbf4:	e7c9      	b.n	db8a <d_type+0x1da>
    dbf6:	3201      	adds	r2, #1
    dbf8:	4620      	mov	r0, r4
    dbfa:	60e2      	str	r2, [r4, #12]
    dbfc:	f7ff fed8 	bl	d9b0 <d_type>
    dc00:	4605      	mov	r5, r0
    dc02:	2800      	cmp	r0, #0
    dc04:	d0e3      	beq.n	dbce <d_type+0x21e>
    dc06:	4620      	mov	r0, r4
    dc08:	f7ff fed2 	bl	d9b0 <d_type>
    dc0c:	4603      	mov	r3, r0
    dc0e:	2800      	cmp	r0, #0
    dc10:	d0dd      	beq.n	dbce <d_type+0x21e>
    dc12:	462a      	mov	r2, r5
    dc14:	212b      	movs	r1, #43	; 0x2b
    dc16:	e7b8      	b.n	db8a <d_type+0x1da>
    dc18:	4620      	mov	r0, r4
    dc1a:	f7ff fa6f 	bl	d0fc <d_template_param>
    dc1e:	68e5      	ldr	r5, [r4, #12]
    dc20:	9003      	str	r0, [sp, #12]
    dc22:	4601      	mov	r1, r0
    dc24:	782b      	ldrb	r3, [r5, #0]
    dc26:	2b49      	cmp	r3, #73	; 0x49
    dc28:	f47f aeea 	bne.w	da00 <d_type+0x50>
    dc2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    dc2e:	b973      	cbnz	r3, dc4e <d_type+0x29e>
    dc30:	4620      	mov	r0, r4
    dc32:	f7ff f94d 	bl	ced0 <d_add_substitution>
    dc36:	2800      	cmp	r0, #0
    dc38:	f43f aec9 	beq.w	d9ce <d_type+0x1e>
    dc3c:	9a03      	ldr	r2, [sp, #12]
    dc3e:	4620      	mov	r0, r4
    dc40:	9201      	str	r2, [sp, #4]
    dc42:	f000 f9ec 	bl	e01e <d_template_args>
    dc46:	9a01      	ldr	r2, [sp, #4]
    dc48:	4603      	mov	r3, r0
    dc4a:	2104      	movs	r1, #4
    dc4c:	e79d      	b.n	db8a <d_type+0x1da>
    dc4e:	4620      	mov	r0, r4
    dc50:	f8d4 8014 	ldr.w	r8, [r4, #20]
    dc54:	6a27      	ldr	r7, [r4, #32]
    dc56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    dc58:	f000 f9e1 	bl	e01e <d_template_args>
    dc5c:	68e2      	ldr	r2, [r4, #12]
    dc5e:	7812      	ldrb	r2, [r2, #0]
    dc60:	2a49      	cmp	r2, #73	; 0x49
    dc62:	d10a      	bne.n	dc7a <d_type+0x2ca>
    dc64:	9001      	str	r0, [sp, #4]
    dc66:	4620      	mov	r0, r4
    dc68:	9903      	ldr	r1, [sp, #12]
    dc6a:	f7ff f931 	bl	ced0 <d_add_substitution>
    dc6e:	9b01      	ldr	r3, [sp, #4]
    dc70:	2800      	cmp	r0, #0
    dc72:	f43f aead 	beq.w	d9d0 <d_type+0x20>
    dc76:	9a03      	ldr	r2, [sp, #12]
    dc78:	e7e7      	b.n	dc4a <d_type+0x29a>
    dc7a:	60e5      	str	r5, [r4, #12]
    dc7c:	f8c4 8014 	str.w	r8, [r4, #20]
    dc80:	6227      	str	r7, [r4, #32]
    dc82:	62e6      	str	r6, [r4, #44]	; 0x2c
    dc84:	e6bc      	b.n	da00 <d_type+0x50>
    dc86:	7853      	ldrb	r3, [r2, #1]
    dc88:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    dc8c:	2a09      	cmp	r2, #9
    dc8e:	d904      	bls.n	dc9a <d_type+0x2ea>
    dc90:	2b5f      	cmp	r3, #95	; 0x5f
    dc92:	d002      	beq.n	dc9a <d_type+0x2ea>
    dc94:	3b41      	subs	r3, #65	; 0x41
    dc96:	2b19      	cmp	r3, #25
    dc98:	d810      	bhi.n	dcbc <d_type+0x30c>
    dc9a:	2100      	movs	r1, #0
    dc9c:	4620      	mov	r0, r4
    dc9e:	f7ff fbbd 	bl	d41c <d_substitution>
    dca2:	68e3      	ldr	r3, [r4, #12]
    dca4:	9003      	str	r0, [sp, #12]
    dca6:	4605      	mov	r5, r0
    dca8:	781b      	ldrb	r3, [r3, #0]
    dcaa:	2b49      	cmp	r3, #73	; 0x49
    dcac:	f47f af63 	bne.w	db76 <d_type+0x1c6>
    dcb0:	4620      	mov	r0, r4
    dcb2:	f000 f9b4 	bl	e01e <d_template_args>
    dcb6:	462a      	mov	r2, r5
    dcb8:	4603      	mov	r3, r0
    dcba:	e7c6      	b.n	dc4a <d_type+0x29a>
    dcbc:	4620      	mov	r0, r4
    dcbe:	f000 fc4b 	bl	e558 <d_name>
    dcc2:	9003      	str	r0, [sp, #12]
    dcc4:	2800      	cmp	r0, #0
    dcc6:	f43f ae9b 	beq.w	da00 <d_type+0x50>
    dcca:	7803      	ldrb	r3, [r0, #0]
    dccc:	2b18      	cmp	r3, #24
    dcce:	f47f ae97 	bne.w	da00 <d_type+0x50>
    dcd2:	e750      	b.n	db76 <d_type+0x1c6>
    dcd4:	3201      	adds	r2, #1
    dcd6:	4620      	mov	r0, r4
    dcd8:	60e2      	str	r2, [r4, #12]
    dcda:	f7ff fe69 	bl	d9b0 <d_type>
    dcde:	2300      	movs	r3, #0
    dce0:	4602      	mov	r2, r0
    dce2:	2124      	movs	r1, #36	; 0x24
    dce4:	e751      	b.n	db8a <d_type+0x1da>
    dce6:	3201      	adds	r2, #1
    dce8:	4620      	mov	r0, r4
    dcea:	60e2      	str	r2, [r4, #12]
    dcec:	f7ff fe60 	bl	d9b0 <d_type>
    dcf0:	2300      	movs	r3, #0
    dcf2:	4602      	mov	r2, r0
    dcf4:	2122      	movs	r1, #34	; 0x22
    dcf6:	e748      	b.n	db8a <d_type+0x1da>
    dcf8:	3201      	adds	r2, #1
    dcfa:	4620      	mov	r0, r4
    dcfc:	60e2      	str	r2, [r4, #12]
    dcfe:	f7ff fe57 	bl	d9b0 <d_type>
    dd02:	2300      	movs	r3, #0
    dd04:	4602      	mov	r2, r0
    dd06:	2123      	movs	r1, #35	; 0x23
    dd08:	e73f      	b.n	db8a <d_type+0x1da>
    dd0a:	3201      	adds	r2, #1
    dd0c:	4620      	mov	r0, r4
    dd0e:	60e2      	str	r2, [r4, #12]
    dd10:	f7ff fe4e 	bl	d9b0 <d_type>
    dd14:	2300      	movs	r3, #0
    dd16:	4602      	mov	r2, r0
    dd18:	2125      	movs	r1, #37	; 0x25
    dd1a:	e736      	b.n	db8a <d_type+0x1da>
    dd1c:	3201      	adds	r2, #1
    dd1e:	4620      	mov	r0, r4
    dd20:	60e2      	str	r2, [r4, #12]
    dd22:	f7ff fe45 	bl	d9b0 <d_type>
    dd26:	2300      	movs	r3, #0
    dd28:	4602      	mov	r2, r0
    dd2a:	2126      	movs	r1, #38	; 0x26
    dd2c:	e72d      	b.n	db8a <d_type+0x1da>
    dd2e:	3201      	adds	r2, #1
    dd30:	4620      	mov	r0, r4
    dd32:	60e2      	str	r2, [r4, #12]
    dd34:	f7ff f9f9 	bl	d12a <d_source_name>
    dd38:	68e3      	ldr	r3, [r4, #12]
    dd3a:	9003      	str	r0, [sp, #12]
    dd3c:	4605      	mov	r5, r0
    dd3e:	781b      	ldrb	r3, [r3, #0]
    dd40:	2b49      	cmp	r3, #73	; 0x49
    dd42:	d109      	bne.n	dd58 <d_type+0x3a8>
    dd44:	4620      	mov	r0, r4
    dd46:	f000 f96a 	bl	e01e <d_template_args>
    dd4a:	462a      	mov	r2, r5
    dd4c:	4603      	mov	r3, r0
    dd4e:	2104      	movs	r1, #4
    dd50:	4620      	mov	r0, r4
    dd52:	f7ff f84a 	bl	cdea <d_make_comp>
    dd56:	9003      	str	r0, [sp, #12]
    dd58:	4620      	mov	r0, r4
    dd5a:	f7ff fe29 	bl	d9b0 <d_type>
    dd5e:	9b03      	ldr	r3, [sp, #12]
    dd60:	4602      	mov	r2, r0
    dd62:	2121      	movs	r1, #33	; 0x21
    dd64:	e711      	b.n	db8a <d_type+0x1da>
    dd66:	1c53      	adds	r3, r2, #1
    dd68:	60e3      	str	r3, [r4, #12]
    dd6a:	7853      	ldrb	r3, [r2, #1]
    dd6c:	2b00      	cmp	r3, #0
    dd6e:	f43f ae2e 	beq.w	d9ce <d_type+0x1e>
    dd72:	1c93      	adds	r3, r2, #2
    dd74:	60e3      	str	r3, [r4, #12]
    dd76:	7853      	ldrb	r3, [r2, #1]
    dd78:	2b46      	cmp	r3, #70	; 0x46
    dd7a:	f000 8095 	beq.w	dea8 <d_type+0x4f8>
    dd7e:	3b54      	subs	r3, #84	; 0x54
    dd80:	b2d9      	uxtb	r1, r3
    dd82:	2922      	cmp	r1, #34	; 0x22
    dd84:	f63f ae23 	bhi.w	d9ce <d_type+0x1e>
    dd88:	2b22      	cmp	r3, #34	; 0x22
    dd8a:	f63f ae20 	bhi.w	d9ce <d_type+0x1e>
    dd8e:	a101      	add	r1, pc, #4	; (adr r1, dd94 <d_type+0x3e4>)
    dd90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    dd94:	0000de21 	.word	0x0000de21
    dd98:	0000d9cf 	.word	0x0000d9cf
    dd9c:	0000d9cf 	.word	0x0000d9cf
    dda0:	0000d9cf 	.word	0x0000d9cf
    dda4:	0000d9cf 	.word	0x0000d9cf
    dda8:	0000d9cf 	.word	0x0000d9cf
    ddac:	0000d9cf 	.word	0x0000d9cf
    ddb0:	0000d9cf 	.word	0x0000d9cf
    ddb4:	0000d9cf 	.word	0x0000d9cf
    ddb8:	0000d9cf 	.word	0x0000d9cf
    ddbc:	0000d9cf 	.word	0x0000d9cf
    ddc0:	0000d9cf 	.word	0x0000d9cf
    ddc4:	0000d9cf 	.word	0x0000d9cf
    ddc8:	0000de67 	.word	0x0000de67
    ddcc:	0000d9cf 	.word	0x0000d9cf
    ddd0:	0000de75 	.word	0x0000de75
    ddd4:	0000de91 	.word	0x0000de91
    ddd8:	0000de95 	.word	0x0000de95
    dddc:	0000de7b 	.word	0x0000de7b
    dde0:	0000d9cf 	.word	0x0000d9cf
    dde4:	0000de99 	.word	0x0000de99
    dde8:	0000dea5 	.word	0x0000dea5
    ddec:	0000d9cf 	.word	0x0000d9cf
    ddf0:	0000d9cf 	.word	0x0000d9cf
    ddf4:	0000d9cf 	.word	0x0000d9cf
    ddf8:	0000d9cf 	.word	0x0000d9cf
    ddfc:	0000df4b 	.word	0x0000df4b
    de00:	0000d9cf 	.word	0x0000d9cf
    de04:	0000de59 	.word	0x0000de59
    de08:	0000d9cf 	.word	0x0000d9cf
    de0c:	0000d9cf 	.word	0x0000d9cf
    de10:	0000dea1 	.word	0x0000dea1
    de14:	0000de21 	.word	0x0000de21
    de18:	0000de9d 	.word	0x0000de9d
    de1c:	0000df07 	.word	0x0000df07
    de20:	4620      	mov	r0, r4
    de22:	f7ff fd8f 	bl	d944 <d_expression>
    de26:	2300      	movs	r3, #0
    de28:	4602      	mov	r2, r0
    de2a:	2143      	movs	r1, #67	; 0x43
    de2c:	4620      	mov	r0, r4
    de2e:	f7fe ffdc 	bl	cdea <d_make_comp>
    de32:	9003      	str	r0, [sp, #12]
    de34:	2800      	cmp	r0, #0
    de36:	f43f ade3 	beq.w	da00 <d_type+0x50>
    de3a:	68e3      	ldr	r3, [r4, #12]
    de3c:	781a      	ldrb	r2, [r3, #0]
    de3e:	b912      	cbnz	r2, de46 <d_type+0x496>
    de40:	2300      	movs	r3, #0
    de42:	9303      	str	r3, [sp, #12]
    de44:	e5dc      	b.n	da00 <d_type+0x50>
    de46:	1c5a      	adds	r2, r3, #1
    de48:	60e2      	str	r2, [r4, #12]
    de4a:	781b      	ldrb	r3, [r3, #0]
    de4c:	2b45      	cmp	r3, #69	; 0x45
    de4e:	d1f7      	bne.n	de40 <d_type+0x490>
    de50:	e5d6      	b.n	da00 <d_type+0x50>
    de52:	bf00      	nop
    de54:	00031d80 	.word	0x00031d80
    de58:	4620      	mov	r0, r4
    de5a:	f7ff fda9 	bl	d9b0 <d_type>
    de5e:	2300      	movs	r3, #0
    de60:	4602      	mov	r2, r0
    de62:	214b      	movs	r1, #75	; 0x4b
    de64:	e691      	b.n	db8a <d_type+0x1da>
    de66:	2204      	movs	r2, #4
    de68:	4939      	ldr	r1, [pc, #228]	; (df50 <d_type+0x5a0>)
    de6a:	4620      	mov	r0, r4
    de6c:	f7fe fffe 	bl	ce6c <d_make_name>
    de70:	9003      	str	r0, [sp, #12]
    de72:	e680      	b.n	db76 <d_type+0x1c6>
    de74:	220e      	movs	r2, #14
    de76:	4937      	ldr	r1, [pc, #220]	; (df54 <d_type+0x5a4>)
    de78:	e7f7      	b.n	de6a <d_type+0x4ba>
    de7a:	4937      	ldr	r1, [pc, #220]	; (df58 <d_type+0x5a8>)
    de7c:	4620      	mov	r0, r4
    de7e:	f7ff f808 	bl	ce92 <d_make_builtin_type>
    de82:	9003      	str	r0, [sp, #12]
    de84:	6882      	ldr	r2, [r0, #8]
    de86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    de88:	6852      	ldr	r2, [r2, #4]
    de8a:	4413      	add	r3, r2
    de8c:	62e3      	str	r3, [r4, #44]	; 0x2c
    de8e:	e672      	b.n	db76 <d_type+0x1c6>
    de90:	4932      	ldr	r1, [pc, #200]	; (df5c <d_type+0x5ac>)
    de92:	e7f3      	b.n	de7c <d_type+0x4cc>
    de94:	4932      	ldr	r1, [pc, #200]	; (df60 <d_type+0x5b0>)
    de96:	e7f1      	b.n	de7c <d_type+0x4cc>
    de98:	4932      	ldr	r1, [pc, #200]	; (df64 <d_type+0x5b4>)
    de9a:	e7ef      	b.n	de7c <d_type+0x4cc>
    de9c:	4932      	ldr	r1, [pc, #200]	; (df68 <d_type+0x5b8>)
    de9e:	e7ed      	b.n	de7c <d_type+0x4cc>
    dea0:	4932      	ldr	r1, [pc, #200]	; (df6c <d_type+0x5bc>)
    dea2:	e7eb      	b.n	de7c <d_type+0x4cc>
    dea4:	4932      	ldr	r1, [pc, #200]	; (df70 <d_type+0x5c0>)
    dea6:	e7e9      	b.n	de7c <d_type+0x4cc>
    dea8:	4620      	mov	r0, r4
    deaa:	f7fe ff8f 	bl	cdcc <d_make_empty>
    deae:	232c      	movs	r3, #44	; 0x2c
    deb0:	9003      	str	r0, [sp, #12]
    deb2:	7003      	strb	r3, [r0, #0]
    deb4:	68e3      	ldr	r3, [r4, #12]
    deb6:	781b      	ldrb	r3, [r3, #0]
    deb8:	3b30      	subs	r3, #48	; 0x30
    deba:	b2db      	uxtb	r3, r3
    debc:	2b09      	cmp	r3, #9
    debe:	bf94      	ite	ls
    dec0:	2301      	movls	r3, #1
    dec2:	2300      	movhi	r3, #0
    dec4:	8183      	strh	r3, [r0, #12]
    dec6:	d803      	bhi.n	ded0 <d_type+0x520>
    dec8:	f104 000c 	add.w	r0, r4, #12
    decc:	f7ff f8c4 	bl	d058 <d_number.isra.0>
    ded0:	4620      	mov	r0, r4
    ded2:	9d03      	ldr	r5, [sp, #12]
    ded4:	f7ff fd6c 	bl	d9b0 <d_type>
    ded8:	9b03      	ldr	r3, [sp, #12]
    deda:	60a8      	str	r0, [r5, #8]
    dedc:	689b      	ldr	r3, [r3, #8]
    dede:	2b00      	cmp	r3, #0
    dee0:	f43f ad75 	beq.w	d9ce <d_type+0x1e>
    dee4:	f104 000c 	add.w	r0, r4, #12
    dee8:	f7ff f8b6 	bl	d058 <d_number.isra.0>
    deec:	68e2      	ldr	r2, [r4, #12]
    deee:	7813      	ldrb	r3, [r2, #0]
    def0:	b113      	cbz	r3, def8 <d_type+0x548>
    def2:	1c53      	adds	r3, r2, #1
    def4:	60e3      	str	r3, [r4, #12]
    def6:	7813      	ldrb	r3, [r2, #0]
    def8:	f1a3 0273 	sub.w	r2, r3, #115	; 0x73
    defc:	4253      	negs	r3, r2
    defe:	4153      	adcs	r3, r2
    df00:	9a03      	ldr	r2, [sp, #12]
    df02:	81d3      	strh	r3, [r2, #14]
    df04:	e637      	b.n	db76 <d_type+0x1c6>
    df06:	7893      	ldrb	r3, [r2, #2]
    df08:	2b5f      	cmp	r3, #95	; 0x5f
    df0a:	d118      	bne.n	df3e <d_type+0x58e>
    df0c:	3203      	adds	r2, #3
    df0e:	4620      	mov	r0, r4
    df10:	60e2      	str	r2, [r4, #12]
    df12:	f7ff fd17 	bl	d944 <d_expression>
    df16:	4605      	mov	r5, r0
    df18:	b178      	cbz	r0, df3a <d_type+0x58a>
    df1a:	68e3      	ldr	r3, [r4, #12]
    df1c:	781a      	ldrb	r2, [r3, #0]
    df1e:	2a5f      	cmp	r2, #95	; 0x5f
    df20:	d111      	bne.n	df46 <d_type+0x596>
    df22:	3301      	adds	r3, #1
    df24:	4620      	mov	r0, r4
    df26:	60e3      	str	r3, [r4, #12]
    df28:	f7ff fd42 	bl	d9b0 <d_type>
    df2c:	462a      	mov	r2, r5
    df2e:	4603      	mov	r3, r0
    df30:	212d      	movs	r1, #45	; 0x2d
    df32:	4620      	mov	r0, r4
    df34:	f7fe ff59 	bl	cdea <d_make_comp>
    df38:	4605      	mov	r5, r0
    df3a:	9503      	str	r5, [sp, #12]
    df3c:	e560      	b.n	da00 <d_type+0x50>
    df3e:	4620      	mov	r0, r4
    df40:	f7ff f8b4 	bl	d0ac <d_number_component>
    df44:	e7e7      	b.n	df16 <d_type+0x566>
    df46:	2500      	movs	r5, #0
    df48:	e7f7      	b.n	df3a <d_type+0x58a>
    df4a:	490a      	ldr	r1, [pc, #40]	; (df74 <d_type+0x5c4>)
    df4c:	e796      	b.n	de7c <d_type+0x4cc>
    df4e:	bf00      	nop
    df50:	00036f7d 	.word	0x00036f7d
    df54:	00036f82 	.word	0x00036f82
    df58:	00031f88 	.word	0x00031f88
    df5c:	00031f9c 	.word	0x00031f9c
    df60:	00031fb0 	.word	0x00031fb0
    df64:	00031fc4 	.word	0x00031fc4
    df68:	00031fd8 	.word	0x00031fd8
    df6c:	00031fec 	.word	0x00031fec
    df70:	00032000 	.word	0x00032000
    df74:	00032014 	.word	0x00032014

0000df78 <d_template_arg>:
    df78:	68c2      	ldr	r2, [r0, #12]
    df7a:	b510      	push	{r4, lr}
    df7c:	7813      	ldrb	r3, [r2, #0]
    df7e:	4604      	mov	r4, r0
    df80:	2b4c      	cmp	r3, #76	; 0x4c
    df82:	d014      	beq.n	dfae <d_template_arg+0x36>
    df84:	d806      	bhi.n	df94 <d_template_arg+0x1c>
    df86:	3b49      	subs	r3, #73	; 0x49
    df88:	2b01      	cmp	r3, #1
    df8a:	d914      	bls.n	dfb6 <d_template_arg+0x3e>
    df8c:	4620      	mov	r0, r4
    df8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df92:	e50d      	b.n	d9b0 <d_type>
    df94:	2b58      	cmp	r3, #88	; 0x58
    df96:	d1f9      	bne.n	df8c <d_template_arg+0x14>
    df98:	3201      	adds	r2, #1
    df9a:	60c2      	str	r2, [r0, #12]
    df9c:	f7ff fcd2 	bl	d944 <d_expression>
    dfa0:	68e3      	ldr	r3, [r4, #12]
    dfa2:	781a      	ldrb	r2, [r3, #0]
    dfa4:	2a45      	cmp	r2, #69	; 0x45
    dfa6:	d109      	bne.n	dfbc <d_template_arg+0x44>
    dfa8:	3301      	adds	r3, #1
    dfaa:	60e3      	str	r3, [r4, #12]
    dfac:	bd10      	pop	{r4, pc}
    dfae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dfb2:	f7ff bac1 	b.w	d538 <d_expr_primary>
    dfb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dfba:	e030      	b.n	e01e <d_template_args>
    dfbc:	2000      	movs	r0, #0
    dfbe:	e7f5      	b.n	dfac <d_template_arg+0x34>

0000dfc0 <d_template_args_1>:
    dfc0:	68c3      	ldr	r3, [r0, #12]
    dfc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
    dfc4:	781a      	ldrb	r2, [r3, #0]
    dfc6:	4604      	mov	r4, r0
    dfc8:	6a85      	ldr	r5, [r0, #40]	; 0x28
    dfca:	2a45      	cmp	r2, #69	; 0x45
    dfcc:	d109      	bne.n	dfe2 <d_template_args_1+0x22>
    dfce:	3301      	adds	r3, #1
    dfd0:	212f      	movs	r1, #47	; 0x2f
    dfd2:	60c3      	str	r3, [r0, #12]
    dfd4:	2300      	movs	r3, #0
    dfd6:	461a      	mov	r2, r3
    dfd8:	b002      	add	sp, #8
    dfda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dfde:	f7fe bf04 	b.w	cdea <d_make_comp>
    dfe2:	2300      	movs	r3, #0
    dfe4:	ae01      	add	r6, sp, #4
    dfe6:	9301      	str	r3, [sp, #4]
    dfe8:	4620      	mov	r0, r4
    dfea:	f7ff ffc5 	bl	df78 <d_template_arg>
    dfee:	4602      	mov	r2, r0
    dff0:	b910      	cbnz	r0, dff8 <d_template_args_1+0x38>
    dff2:	2000      	movs	r0, #0
    dff4:	b002      	add	sp, #8
    dff6:	bd70      	pop	{r4, r5, r6, pc}
    dff8:	2300      	movs	r3, #0
    dffa:	212f      	movs	r1, #47	; 0x2f
    dffc:	4620      	mov	r0, r4
    dffe:	f7fe fef4 	bl	cdea <d_make_comp>
    e002:	6030      	str	r0, [r6, #0]
    e004:	2800      	cmp	r0, #0
    e006:	d0f4      	beq.n	dff2 <d_template_args_1+0x32>
    e008:	68e3      	ldr	r3, [r4, #12]
    e00a:	f100 060c 	add.w	r6, r0, #12
    e00e:	781a      	ldrb	r2, [r3, #0]
    e010:	2a45      	cmp	r2, #69	; 0x45
    e012:	d1e9      	bne.n	dfe8 <d_template_args_1+0x28>
    e014:	3301      	adds	r3, #1
    e016:	9801      	ldr	r0, [sp, #4]
    e018:	62a5      	str	r5, [r4, #40]	; 0x28
    e01a:	60e3      	str	r3, [r4, #12]
    e01c:	e7ea      	b.n	dff4 <d_template_args_1+0x34>

0000e01e <d_template_args>:
    e01e:	68c2      	ldr	r2, [r0, #12]
    e020:	7811      	ldrb	r1, [r2, #0]
    e022:	3949      	subs	r1, #73	; 0x49
    e024:	2901      	cmp	r1, #1
    e026:	d802      	bhi.n	e02e <d_template_args+0x10>
    e028:	3201      	adds	r2, #1
    e02a:	60c2      	str	r2, [r0, #12]
    e02c:	e7c8      	b.n	dfc0 <d_template_args_1>
    e02e:	2000      	movs	r0, #0
    e030:	4770      	bx	lr

0000e032 <d_operator_name>:
    e032:	68c3      	ldr	r3, [r0, #12]
    e034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e038:	781a      	ldrb	r2, [r3, #0]
    e03a:	4604      	mov	r4, r0
    e03c:	b112      	cbz	r2, e044 <d_operator_name+0x12>
    e03e:	1c5a      	adds	r2, r3, #1
    e040:	60c2      	str	r2, [r0, #12]
    e042:	781a      	ldrb	r2, [r3, #0]
    e044:	68e3      	ldr	r3, [r4, #12]
    e046:	7819      	ldrb	r1, [r3, #0]
    e048:	2900      	cmp	r1, #0
    e04a:	d035      	beq.n	e0b8 <d_operator_name+0x86>
    e04c:	1c59      	adds	r1, r3, #1
    e04e:	2a76      	cmp	r2, #118	; 0x76
    e050:	60e1      	str	r1, [r4, #12]
    e052:	7819      	ldrb	r1, [r3, #0]
    e054:	d117      	bne.n	e086 <d_operator_name+0x54>
    e056:	f1a1 0630 	sub.w	r6, r1, #48	; 0x30
    e05a:	b2f3      	uxtb	r3, r6
    e05c:	2b09      	cmp	r3, #9
    e05e:	d82b      	bhi.n	e0b8 <d_operator_name+0x86>
    e060:	4620      	mov	r0, r4
    e062:	f7ff f862 	bl	d12a <d_source_name>
    e066:	4605      	mov	r5, r0
    e068:	4620      	mov	r0, r4
    e06a:	f7fe feaf 	bl	cdcc <d_make_empty>
    e06e:	2800      	cmp	r0, #0
    e070:	d046      	beq.n	e100 <d_operator_name+0xce>
    e072:	2d00      	cmp	r5, #0
    e074:	d044      	beq.n	e100 <d_operator_name+0xce>
    e076:	2300      	movs	r3, #0
    e078:	6043      	str	r3, [r0, #4]
    e07a:	2333      	movs	r3, #51	; 0x33
    e07c:	e9c0 6502 	strd	r6, r5, [r0, #8]
    e080:	7003      	strb	r3, [r0, #0]
    e082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e086:	2a63      	cmp	r2, #99	; 0x63
    e088:	d116      	bne.n	e0b8 <d_operator_name+0x86>
    e08a:	2976      	cmp	r1, #118	; 0x76
    e08c:	d114      	bne.n	e0b8 <d_operator_name+0x86>
    e08e:	4620      	mov	r0, r4
    e090:	e9d4 350c 	ldrd	r3, r5, [r4, #48]	; 0x30
    e094:	fab3 f383 	clz	r3, r3
    e098:	095b      	lsrs	r3, r3, #5
    e09a:	6363      	str	r3, [r4, #52]	; 0x34
    e09c:	f7ff fc88 	bl	d9b0 <d_type>
    e0a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e0a2:	4602      	mov	r2, r0
    e0a4:	b133      	cbz	r3, e0b4 <d_operator_name+0x82>
    e0a6:	2300      	movs	r3, #0
    e0a8:	2135      	movs	r1, #53	; 0x35
    e0aa:	4620      	mov	r0, r4
    e0ac:	f7fe fe9d 	bl	cdea <d_make_comp>
    e0b0:	6365      	str	r5, [r4, #52]	; 0x34
    e0b2:	e7e6      	b.n	e082 <d_operator_name+0x50>
    e0b4:	2134      	movs	r1, #52	; 0x34
    e0b6:	e7f8      	b.n	e0aa <d_operator_name+0x78>
    e0b8:	2543      	movs	r5, #67	; 0x43
    e0ba:	2000      	movs	r0, #0
    e0bc:	4e11      	ldr	r6, [pc, #68]	; (e104 <d_operator_name+0xd2>)
    e0be:	1a2b      	subs	r3, r5, r0
    e0c0:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    e0c4:	eb00 0363 	add.w	r3, r0, r3, asr #1
    e0c8:	011f      	lsls	r7, r3, #4
    e0ca:	eb06 1803 	add.w	r8, r6, r3, lsl #4
    e0ce:	59f7      	ldr	r7, [r6, r7]
    e0d0:	f897 c000 	ldrb.w	ip, [r7]
    e0d4:	4594      	cmp	ip, r2
    e0d6:	d10e      	bne.n	e0f6 <d_operator_name+0xc4>
    e0d8:	787f      	ldrb	r7, [r7, #1]
    e0da:	428f      	cmp	r7, r1
    e0dc:	d10b      	bne.n	e0f6 <d_operator_name+0xc4>
    e0de:	4620      	mov	r0, r4
    e0e0:	f7fe fe74 	bl	cdcc <d_make_empty>
    e0e4:	2800      	cmp	r0, #0
    e0e6:	d0cc      	beq.n	e082 <d_operator_name+0x50>
    e0e8:	2332      	movs	r3, #50	; 0x32
    e0ea:	f8c0 8008 	str.w	r8, [r0, #8]
    e0ee:	7003      	strb	r3, [r0, #0]
    e0f0:	e7c7      	b.n	e082 <d_operator_name+0x50>
    e0f2:	461d      	mov	r5, r3
    e0f4:	e7e3      	b.n	e0be <d_operator_name+0x8c>
    e0f6:	bf9c      	itt	ls
    e0f8:	1c58      	addls	r0, r3, #1
    e0fa:	462b      	movls	r3, r5
    e0fc:	4298      	cmp	r0, r3
    e0fe:	d1f8      	bne.n	e0f2 <d_operator_name+0xc0>
    e100:	2000      	movs	r0, #0
    e102:	e7be      	b.n	e082 <d_operator_name+0x50>
    e104:	00032028 	.word	0x00032028

0000e108 <d_parmlist>:
    e108:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e10a:	2300      	movs	r3, #0
    e10c:	4604      	mov	r4, r0
    e10e:	ad01      	add	r5, sp, #4
    e110:	9301      	str	r3, [sp, #4]
    e112:	68e2      	ldr	r2, [r4, #12]
    e114:	7813      	ldrb	r3, [r2, #0]
    e116:	b1eb      	cbz	r3, e154 <d_parmlist+0x4c>
    e118:	2b45      	cmp	r3, #69	; 0x45
    e11a:	d01b      	beq.n	e154 <d_parmlist+0x4c>
    e11c:	2b2e      	cmp	r3, #46	; 0x2e
    e11e:	d019      	beq.n	e154 <d_parmlist+0x4c>
    e120:	2b52      	cmp	r3, #82	; 0x52
    e122:	d001      	beq.n	e128 <d_parmlist+0x20>
    e124:	2b4f      	cmp	r3, #79	; 0x4f
    e126:	d102      	bne.n	e12e <d_parmlist+0x26>
    e128:	7853      	ldrb	r3, [r2, #1]
    e12a:	2b45      	cmp	r3, #69	; 0x45
    e12c:	d012      	beq.n	e154 <d_parmlist+0x4c>
    e12e:	4620      	mov	r0, r4
    e130:	f7ff fc3e 	bl	d9b0 <d_type>
    e134:	4602      	mov	r2, r0
    e136:	b910      	cbnz	r0, e13e <d_parmlist+0x36>
    e138:	2000      	movs	r0, #0
    e13a:	b003      	add	sp, #12
    e13c:	bd30      	pop	{r4, r5, pc}
    e13e:	2300      	movs	r3, #0
    e140:	212e      	movs	r1, #46	; 0x2e
    e142:	4620      	mov	r0, r4
    e144:	f7fe fe51 	bl	cdea <d_make_comp>
    e148:	6028      	str	r0, [r5, #0]
    e14a:	2800      	cmp	r0, #0
    e14c:	d0f4      	beq.n	e138 <d_parmlist+0x30>
    e14e:	f100 050c 	add.w	r5, r0, #12
    e152:	e7de      	b.n	e112 <d_parmlist+0xa>
    e154:	9801      	ldr	r0, [sp, #4]
    e156:	2800      	cmp	r0, #0
    e158:	d0ee      	beq.n	e138 <d_parmlist+0x30>
    e15a:	68c2      	ldr	r2, [r0, #12]
    e15c:	2a00      	cmp	r2, #0
    e15e:	d1ec      	bne.n	e13a <d_parmlist+0x32>
    e160:	6883      	ldr	r3, [r0, #8]
    e162:	7819      	ldrb	r1, [r3, #0]
    e164:	2927      	cmp	r1, #39	; 0x27
    e166:	d1e8      	bne.n	e13a <d_parmlist+0x32>
    e168:	6899      	ldr	r1, [r3, #8]
    e16a:	7c0b      	ldrb	r3, [r1, #16]
    e16c:	2b09      	cmp	r3, #9
    e16e:	d1e4      	bne.n	e13a <d_parmlist+0x32>
    e170:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e172:	6849      	ldr	r1, [r1, #4]
    e174:	1a5b      	subs	r3, r3, r1
    e176:	62e3      	str	r3, [r4, #44]	; 0x2c
    e178:	6082      	str	r2, [r0, #8]
    e17a:	e7de      	b.n	e13a <d_parmlist+0x32>

0000e17c <d_cv_qualifiers>:
    e17c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e180:	1e17      	subs	r7, r2, #0
    e182:	460d      	mov	r5, r1
    e184:	68c3      	ldr	r3, [r0, #12]
    e186:	4604      	mov	r4, r0
    e188:	bf14      	ite	ne
    e18a:	f04f 0a1e 	movne.w	sl, #30
    e18e:	f04f 0a1b 	moveq.w	sl, #27
    e192:	7819      	ldrb	r1, [r3, #0]
    e194:	bf15      	itete	ne
    e196:	f04f 091d 	movne.w	r9, #29
    e19a:	f04f 091a 	moveq.w	r9, #26
    e19e:	f04f 081c 	movne.w	r8, #28
    e1a2:	f04f 0819 	moveq.w	r8, #25
    e1a6:	462e      	mov	r6, r5
    e1a8:	68e2      	ldr	r2, [r4, #12]
    e1aa:	4610      	mov	r0, r2
    e1ac:	f7ff f83e 	bl	d22c <next_is_type_qual.isra.0>
    e1b0:	b9a0      	cbnz	r0, e1dc <d_cv_qualifiers+0x60>
    e1b2:	2f00      	cmp	r7, #0
    e1b4:	d139      	bne.n	e22a <d_cv_qualifiers+0xae>
    e1b6:	2946      	cmp	r1, #70	; 0x46
    e1b8:	d137      	bne.n	e22a <d_cv_qualifiers+0xae>
    e1ba:	201d      	movs	r0, #29
    e1bc:	241e      	movs	r4, #30
    e1be:	271c      	movs	r7, #28
    e1c0:	42ae      	cmp	r6, r5
    e1c2:	d032      	beq.n	e22a <d_cv_qualifiers+0xae>
    e1c4:	682b      	ldr	r3, [r5, #0]
    e1c6:	781a      	ldrb	r2, [r3, #0]
    e1c8:	2a1a      	cmp	r2, #26
    e1ca:	d070      	beq.n	e2ae <d_cv_qualifiers+0x132>
    e1cc:	2a1b      	cmp	r2, #27
    e1ce:	d070      	beq.n	e2b2 <d_cv_qualifiers+0x136>
    e1d0:	2a19      	cmp	r2, #25
    e1d2:	d100      	bne.n	e1d6 <d_cv_qualifiers+0x5a>
    e1d4:	701f      	strb	r7, [r3, #0]
    e1d6:	682d      	ldr	r5, [r5, #0]
    e1d8:	3508      	adds	r5, #8
    e1da:	e7f1      	b.n	e1c0 <d_cv_qualifiers+0x44>
    e1dc:	1c53      	adds	r3, r2, #1
    e1de:	2972      	cmp	r1, #114	; 0x72
    e1e0:	60e3      	str	r3, [r4, #12]
    e1e2:	d111      	bne.n	e208 <d_cv_qualifiers+0x8c>
    e1e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e1e6:	46c3      	mov	fp, r8
    e1e8:	3309      	adds	r3, #9
    e1ea:	62e3      	str	r3, [r4, #44]	; 0x2c
    e1ec:	2000      	movs	r0, #0
    e1ee:	4603      	mov	r3, r0
    e1f0:	2200      	movs	r2, #0
    e1f2:	4659      	mov	r1, fp
    e1f4:	4620      	mov	r0, r4
    e1f6:	f7fe fdf8 	bl	cdea <d_make_comp>
    e1fa:	6030      	str	r0, [r6, #0]
    e1fc:	b1a0      	cbz	r0, e228 <d_cv_qualifiers+0xac>
    e1fe:	68e3      	ldr	r3, [r4, #12]
    e200:	f100 0608 	add.w	r6, r0, #8
    e204:	7819      	ldrb	r1, [r3, #0]
    e206:	e7cf      	b.n	e1a8 <d_cv_qualifiers+0x2c>
    e208:	2956      	cmp	r1, #86	; 0x56
    e20a:	d104      	bne.n	e216 <d_cv_qualifiers+0x9a>
    e20c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e20e:	46cb      	mov	fp, r9
    e210:	3309      	adds	r3, #9
    e212:	62e3      	str	r3, [r4, #44]	; 0x2c
    e214:	e7ea      	b.n	e1ec <d_cv_qualifiers+0x70>
    e216:	294b      	cmp	r1, #75	; 0x4b
    e218:	d104      	bne.n	e224 <d_cv_qualifiers+0xa8>
    e21a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e21c:	46d3      	mov	fp, sl
    e21e:	3306      	adds	r3, #6
    e220:	62e3      	str	r3, [r4, #44]	; 0x2c
    e222:	e7e3      	b.n	e1ec <d_cv_qualifiers+0x70>
    e224:	7853      	ldrb	r3, [r2, #1]
    e226:	b91b      	cbnz	r3, e230 <d_cv_qualifiers+0xb4>
    e228:	2600      	movs	r6, #0
    e22a:	4630      	mov	r0, r6
    e22c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e230:	1c93      	adds	r3, r2, #2
    e232:	60e3      	str	r3, [r4, #12]
    e234:	f892 b001 	ldrb.w	fp, [r2, #1]
    e238:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
    e23c:	d106      	bne.n	e24c <d_cv_qualifiers+0xd0>
    e23e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e240:	2000      	movs	r0, #0
    e242:	f04f 0b4d 	mov.w	fp, #77	; 0x4d
    e246:	3311      	adds	r3, #17
    e248:	62e3      	str	r3, [r4, #44]	; 0x2c
    e24a:	e7d0      	b.n	e1ee <d_cv_qualifiers+0x72>
    e24c:	f1bb 0f6f 	cmp.w	fp, #111	; 0x6f
    e250:	d002      	beq.n	e258 <d_cv_qualifiers+0xdc>
    e252:	f1bb 0f4f 	cmp.w	fp, #79	; 0x4f
    e256:	d112      	bne.n	e27e <d_cv_qualifiers+0x102>
    e258:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e25a:	f1bb 0f4f 	cmp.w	fp, #79	; 0x4f
    e25e:	f103 0309 	add.w	r3, r3, #9
    e262:	62e3      	str	r3, [r4, #44]	; 0x2c
    e264:	d11f      	bne.n	e2a6 <d_cv_qualifiers+0x12a>
    e266:	4620      	mov	r0, r4
    e268:	f7ff fb6c 	bl	d944 <d_expression>
    e26c:	2800      	cmp	r0, #0
    e26e:	d0db      	beq.n	e228 <d_cv_qualifiers+0xac>
    e270:	68e3      	ldr	r3, [r4, #12]
    e272:	781a      	ldrb	r2, [r3, #0]
    e274:	2a45      	cmp	r2, #69	; 0x45
    e276:	d1d7      	bne.n	e228 <d_cv_qualifiers+0xac>
    e278:	3301      	adds	r3, #1
    e27a:	60e3      	str	r3, [r4, #12]
    e27c:	e7b7      	b.n	e1ee <d_cv_qualifiers+0x72>
    e27e:	f1bb 0f77 	cmp.w	fp, #119	; 0x77
    e282:	d1d1      	bne.n	e228 <d_cv_qualifiers+0xac>
    e284:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e286:	4620      	mov	r0, r4
    e288:	3306      	adds	r3, #6
    e28a:	62e3      	str	r3, [r4, #44]	; 0x2c
    e28c:	f7ff ff3c 	bl	e108 <d_parmlist>
    e290:	2800      	cmp	r0, #0
    e292:	d0c9      	beq.n	e228 <d_cv_qualifiers+0xac>
    e294:	68e3      	ldr	r3, [r4, #12]
    e296:	781a      	ldrb	r2, [r3, #0]
    e298:	2a45      	cmp	r2, #69	; 0x45
    e29a:	d1c5      	bne.n	e228 <d_cv_qualifiers+0xac>
    e29c:	3301      	adds	r3, #1
    e29e:	f04f 0b50 	mov.w	fp, #80	; 0x50
    e2a2:	60e3      	str	r3, [r4, #12]
    e2a4:	e7a3      	b.n	e1ee <d_cv_qualifiers+0x72>
    e2a6:	2000      	movs	r0, #0
    e2a8:	f04f 0b4f 	mov.w	fp, #79	; 0x4f
    e2ac:	e79f      	b.n	e1ee <d_cv_qualifiers+0x72>
    e2ae:	7018      	strb	r0, [r3, #0]
    e2b0:	e791      	b.n	e1d6 <d_cv_qualifiers+0x5a>
    e2b2:	701c      	strb	r4, [r3, #0]
    e2b4:	e78f      	b.n	e1d6 <d_cv_qualifiers+0x5a>

0000e2b6 <d_bare_function_type>:
    e2b6:	68c3      	ldr	r3, [r0, #12]
    e2b8:	b570      	push	{r4, r5, r6, lr}
    e2ba:	781a      	ldrb	r2, [r3, #0]
    e2bc:	4605      	mov	r5, r0
    e2be:	2a4a      	cmp	r2, #74	; 0x4a
    e2c0:	d108      	bne.n	e2d4 <d_bare_function_type+0x1e>
    e2c2:	3301      	adds	r3, #1
    e2c4:	60c3      	str	r3, [r0, #12]
    e2c6:	4628      	mov	r0, r5
    e2c8:	f7ff fb72 	bl	d9b0 <d_type>
    e2cc:	4604      	mov	r4, r0
    e2ce:	b920      	cbnz	r0, e2da <d_bare_function_type+0x24>
    e2d0:	2000      	movs	r0, #0
    e2d2:	bd70      	pop	{r4, r5, r6, pc}
    e2d4:	2900      	cmp	r1, #0
    e2d6:	d1f6      	bne.n	e2c6 <d_bare_function_type+0x10>
    e2d8:	460c      	mov	r4, r1
    e2da:	4628      	mov	r0, r5
    e2dc:	f7ff ff14 	bl	e108 <d_parmlist>
    e2e0:	4603      	mov	r3, r0
    e2e2:	2800      	cmp	r0, #0
    e2e4:	d0f4      	beq.n	e2d0 <d_bare_function_type+0x1a>
    e2e6:	4622      	mov	r2, r4
    e2e8:	4628      	mov	r0, r5
    e2ea:	2129      	movs	r1, #41	; 0x29
    e2ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e2f0:	f7fe bd7b 	b.w	cdea <d_make_comp>

0000e2f4 <d_function_type>:
    e2f4:	b510      	push	{r4, lr}
    e2f6:	4604      	mov	r4, r0
    e2f8:	6880      	ldr	r0, [r0, #8]
    e2fa:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
    e2fe:	d105      	bne.n	e30c <d_function_type+0x18>
    e300:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    e302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    e306:	d80d      	bhi.n	e324 <d_function_type+0x30>
    e308:	3301      	adds	r3, #1
    e30a:	63a3      	str	r3, [r4, #56]	; 0x38
    e30c:	68e3      	ldr	r3, [r4, #12]
    e30e:	781a      	ldrb	r2, [r3, #0]
    e310:	2a46      	cmp	r2, #70	; 0x46
    e312:	d008      	beq.n	e326 <d_function_type+0x32>
    e314:	2000      	movs	r0, #0
    e316:	68a3      	ldr	r3, [r4, #8]
    e318:	035b      	lsls	r3, r3, #13
    e31a:	bf5e      	ittt	pl
    e31c:	6ba3      	ldrpl	r3, [r4, #56]	; 0x38
    e31e:	f103 33ff 	addpl.w	r3, r3, #4294967295	; 0xffffffff
    e322:	63a3      	strpl	r3, [r4, #56]	; 0x38
    e324:	bd10      	pop	{r4, pc}
    e326:	1c5a      	adds	r2, r3, #1
    e328:	2101      	movs	r1, #1
    e32a:	4620      	mov	r0, r4
    e32c:	60e2      	str	r2, [r4, #12]
    e32e:	785a      	ldrb	r2, [r3, #1]
    e330:	2a59      	cmp	r2, #89	; 0x59
    e332:	bf04      	itt	eq
    e334:	3302      	addeq	r3, #2
    e336:	60e3      	streq	r3, [r4, #12]
    e338:	f7ff ffbd 	bl	e2b6 <d_bare_function_type>
    e33c:	4601      	mov	r1, r0
    e33e:	4620      	mov	r0, r4
    e340:	f7fe fdb0 	bl	cea4 <d_ref_qualifier>
    e344:	68e3      	ldr	r3, [r4, #12]
    e346:	781a      	ldrb	r2, [r3, #0]
    e348:	2a45      	cmp	r2, #69	; 0x45
    e34a:	d1e3      	bne.n	e314 <d_function_type+0x20>
    e34c:	3301      	adds	r3, #1
    e34e:	60e3      	str	r3, [r4, #12]
    e350:	e7e1      	b.n	e316 <d_function_type+0x22>

0000e352 <d_unqualified_name>:
    e352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e354:	68c3      	ldr	r3, [r0, #12]
    e356:	4605      	mov	r5, r0
    e358:	781a      	ldrb	r2, [r3, #0]
    e35a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
    e35e:	2909      	cmp	r1, #9
    e360:	d80d      	bhi.n	e37e <d_unqualified_name+0x2c>
    e362:	f7fe fee2 	bl	d12a <d_source_name>
    e366:	4604      	mov	r4, r0
    e368:	68eb      	ldr	r3, [r5, #12]
    e36a:	781b      	ldrb	r3, [r3, #0]
    e36c:	2b42      	cmp	r3, #66	; 0x42
    e36e:	f040 80a0 	bne.w	e4b2 <d_unqualified_name+0x160>
    e372:	4621      	mov	r1, r4
    e374:	4628      	mov	r0, r5
    e376:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e37a:	f7fe bf15 	b.w	d1a8 <d_abi_tags>
    e37e:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
    e382:	2919      	cmp	r1, #25
    e384:	d824      	bhi.n	e3d0 <d_unqualified_name+0x7e>
    e386:	2a6f      	cmp	r2, #111	; 0x6f
    e388:	d104      	bne.n	e394 <d_unqualified_name+0x42>
    e38a:	785a      	ldrb	r2, [r3, #1]
    e38c:	2a6e      	cmp	r2, #110	; 0x6e
    e38e:	bf04      	itt	eq
    e390:	3302      	addeq	r3, #2
    e392:	60c3      	streq	r3, [r0, #12]
    e394:	4628      	mov	r0, r5
    e396:	f7ff fe4c 	bl	e032 <d_operator_name>
    e39a:	4604      	mov	r4, r0
    e39c:	b360      	cbz	r0, e3f8 <d_unqualified_name+0xa6>
    e39e:	7803      	ldrb	r3, [r0, #0]
    e3a0:	2b32      	cmp	r3, #50	; 0x32
    e3a2:	d1e1      	bne.n	e368 <d_unqualified_name+0x16>
    e3a4:	6882      	ldr	r2, [r0, #8]
    e3a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    e3a8:	6891      	ldr	r1, [r2, #8]
    e3aa:	3307      	adds	r3, #7
    e3ac:	6810      	ldr	r0, [r2, #0]
    e3ae:	440b      	add	r3, r1
    e3b0:	4968      	ldr	r1, [pc, #416]	; (e554 <d_unqualified_name+0x202>)
    e3b2:	62eb      	str	r3, [r5, #44]	; 0x2c
    e3b4:	f003 fba6 	bl	11b04 <strcmp>
    e3b8:	2800      	cmp	r0, #0
    e3ba:	d1d5      	bne.n	e368 <d_unqualified_name+0x16>
    e3bc:	4628      	mov	r0, r5
    e3be:	f7fe feb4 	bl	d12a <d_source_name>
    e3c2:	4622      	mov	r2, r4
    e3c4:	4603      	mov	r3, r0
    e3c6:	2137      	movs	r1, #55	; 0x37
    e3c8:	4628      	mov	r0, r5
    e3ca:	f7fe fd0e 	bl	cdea <d_make_comp>
    e3ce:	e7ca      	b.n	e366 <d_unqualified_name+0x14>
    e3d0:	f1a2 0143 	sub.w	r1, r2, #67	; 0x43
    e3d4:	2901      	cmp	r1, #1
    e3d6:	d863      	bhi.n	e4a0 <d_unqualified_name+0x14e>
    e3d8:	6a86      	ldr	r6, [r0, #40]	; 0x28
    e3da:	b146      	cbz	r6, e3ee <d_unqualified_name+0x9c>
    e3dc:	7832      	ldrb	r2, [r6, #0]
    e3de:	b922      	cbnz	r2, e3ea <d_unqualified_name+0x98>
    e3e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    e3e2:	68f1      	ldr	r1, [r6, #12]
    e3e4:	440a      	add	r2, r1
    e3e6:	62ea      	str	r2, [r5, #44]	; 0x2c
    e3e8:	e001      	b.n	e3ee <d_unqualified_name+0x9c>
    e3ea:	2a18      	cmp	r2, #24
    e3ec:	d0f8      	beq.n	e3e0 <d_unqualified_name+0x8e>
    e3ee:	781a      	ldrb	r2, [r3, #0]
    e3f0:	2a43      	cmp	r2, #67	; 0x43
    e3f2:	d003      	beq.n	e3fc <d_unqualified_name+0xaa>
    e3f4:	2a44      	cmp	r2, #68	; 0x44
    e3f6:	d025      	beq.n	e444 <d_unqualified_name+0xf2>
    e3f8:	2400      	movs	r4, #0
    e3fa:	e7b5      	b.n	e368 <d_unqualified_name+0x16>
    e3fc:	785a      	ldrb	r2, [r3, #1]
    e3fe:	2a49      	cmp	r2, #73	; 0x49
    e400:	bf05      	ittet	eq
    e402:	3301      	addeq	r3, #1
    e404:	2201      	moveq	r2, #1
    e406:	2200      	movne	r2, #0
    e408:	60eb      	streq	r3, [r5, #12]
    e40a:	68eb      	ldr	r3, [r5, #12]
    e40c:	785e      	ldrb	r6, [r3, #1]
    e40e:	f1a6 0131 	sub.w	r1, r6, #49	; 0x31
    e412:	2904      	cmp	r1, #4
    e414:	d8f0      	bhi.n	e3f8 <d_unqualified_name+0xa6>
    e416:	3302      	adds	r3, #2
    e418:	60eb      	str	r3, [r5, #12]
    e41a:	b112      	cbz	r2, e422 <d_unqualified_name+0xd0>
    e41c:	4628      	mov	r0, r5
    e41e:	f7ff fac7 	bl	d9b0 <d_type>
    e422:	4628      	mov	r0, r5
    e424:	6aaf      	ldr	r7, [r5, #40]	; 0x28
    e426:	f7fe fcd1 	bl	cdcc <d_make_empty>
    e42a:	4604      	mov	r4, r0
    e42c:	2800      	cmp	r0, #0
    e42e:	d0e3      	beq.n	e3f8 <d_unqualified_name+0xa6>
    e430:	2f00      	cmp	r7, #0
    e432:	d0e1      	beq.n	e3f8 <d_unqualified_name+0xa6>
    e434:	2300      	movs	r3, #0
    e436:	3e30      	subs	r6, #48	; 0x30
    e438:	60c7      	str	r7, [r0, #12]
    e43a:	6043      	str	r3, [r0, #4]
    e43c:	2307      	movs	r3, #7
    e43e:	7206      	strb	r6, [r0, #8]
    e440:	7003      	strb	r3, [r0, #0]
    e442:	e791      	b.n	e368 <d_unqualified_name+0x16>
    e444:	785a      	ldrb	r2, [r3, #1]
    e446:	3a30      	subs	r2, #48	; 0x30
    e448:	2a05      	cmp	r2, #5
    e44a:	d8d5      	bhi.n	e3f8 <d_unqualified_name+0xa6>
    e44c:	a101      	add	r1, pc, #4	; (adr r1, e454 <d_unqualified_name+0x102>)
    e44e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    e452:	bf00      	nop
    e454:	0000e49d 	.word	0x0000e49d
    e458:	0000e46d 	.word	0x0000e46d
    e45c:	0000e491 	.word	0x0000e491
    e460:	0000e3f9 	.word	0x0000e3f9
    e464:	0000e495 	.word	0x0000e495
    e468:	0000e499 	.word	0x0000e499
    e46c:	2702      	movs	r7, #2
    e46e:	3302      	adds	r3, #2
    e470:	4628      	mov	r0, r5
    e472:	60eb      	str	r3, [r5, #12]
    e474:	f7fe fcaa 	bl	cdcc <d_make_empty>
    e478:	4604      	mov	r4, r0
    e47a:	2800      	cmp	r0, #0
    e47c:	d0bc      	beq.n	e3f8 <d_unqualified_name+0xa6>
    e47e:	2e00      	cmp	r6, #0
    e480:	d0ba      	beq.n	e3f8 <d_unqualified_name+0xa6>
    e482:	2300      	movs	r3, #0
    e484:	7207      	strb	r7, [r0, #8]
    e486:	60c6      	str	r6, [r0, #12]
    e488:	6043      	str	r3, [r0, #4]
    e48a:	2308      	movs	r3, #8
    e48c:	7003      	strb	r3, [r0, #0]
    e48e:	e76b      	b.n	e368 <d_unqualified_name+0x16>
    e490:	2703      	movs	r7, #3
    e492:	e7ec      	b.n	e46e <d_unqualified_name+0x11c>
    e494:	2704      	movs	r7, #4
    e496:	e7ea      	b.n	e46e <d_unqualified_name+0x11c>
    e498:	2705      	movs	r7, #5
    e49a:	e7e8      	b.n	e46e <d_unqualified_name+0x11c>
    e49c:	2701      	movs	r7, #1
    e49e:	e7e6      	b.n	e46e <d_unqualified_name+0x11c>
    e4a0:	2a4c      	cmp	r2, #76	; 0x4c
    e4a2:	d10f      	bne.n	e4c4 <d_unqualified_name+0x172>
    e4a4:	3301      	adds	r3, #1
    e4a6:	60c3      	str	r3, [r0, #12]
    e4a8:	f7fe fe3f 	bl	d12a <d_source_name>
    e4ac:	4604      	mov	r4, r0
    e4ae:	b910      	cbnz	r0, e4b6 <d_unqualified_name+0x164>
    e4b0:	2400      	movs	r4, #0
    e4b2:	4620      	mov	r0, r4
    e4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e4b6:	4628      	mov	r0, r5
    e4b8:	f7fe fee3 	bl	d282 <d_discriminator>
    e4bc:	2800      	cmp	r0, #0
    e4be:	f47f af53 	bne.w	e368 <d_unqualified_name+0x16>
    e4c2:	e7f5      	b.n	e4b0 <d_unqualified_name+0x15e>
    e4c4:	2a55      	cmp	r2, #85	; 0x55
    e4c6:	d1f3      	bne.n	e4b0 <d_unqualified_name+0x15e>
    e4c8:	785a      	ldrb	r2, [r3, #1]
    e4ca:	2a6c      	cmp	r2, #108	; 0x6c
    e4cc:	d015      	beq.n	e4fa <d_unqualified_name+0x1a8>
    e4ce:	2a74      	cmp	r2, #116	; 0x74
    e4d0:	d1ee      	bne.n	e4b0 <d_unqualified_name+0x15e>
    e4d2:	1c5a      	adds	r2, r3, #1
    e4d4:	60c2      	str	r2, [r0, #12]
    e4d6:	785a      	ldrb	r2, [r3, #1]
    e4d8:	2a74      	cmp	r2, #116	; 0x74
    e4da:	d18d      	bne.n	e3f8 <d_unqualified_name+0xa6>
    e4dc:	3302      	adds	r3, #2
    e4de:	60c3      	str	r3, [r0, #12]
    e4e0:	f7fe fdf3 	bl	d0ca <d_compact_number>
    e4e4:	1e06      	subs	r6, r0, #0
    e4e6:	db87      	blt.n	e3f8 <d_unqualified_name+0xa6>
    e4e8:	4628      	mov	r0, r5
    e4ea:	f7fe fc6f 	bl	cdcc <d_make_empty>
    e4ee:	4604      	mov	r4, r0
    e4f0:	b338      	cbz	r0, e542 <d_unqualified_name+0x1f0>
    e4f2:	2348      	movs	r3, #72	; 0x48
    e4f4:	6086      	str	r6, [r0, #8]
    e4f6:	7003      	strb	r3, [r0, #0]
    e4f8:	e023      	b.n	e542 <d_unqualified_name+0x1f0>
    e4fa:	1c5a      	adds	r2, r3, #1
    e4fc:	60c2      	str	r2, [r0, #12]
    e4fe:	785a      	ldrb	r2, [r3, #1]
    e500:	2a6c      	cmp	r2, #108	; 0x6c
    e502:	f47f af79 	bne.w	e3f8 <d_unqualified_name+0xa6>
    e506:	3302      	adds	r3, #2
    e508:	60c3      	str	r3, [r0, #12]
    e50a:	f7ff fdfd 	bl	e108 <d_parmlist>
    e50e:	4607      	mov	r7, r0
    e510:	2800      	cmp	r0, #0
    e512:	f43f af71 	beq.w	e3f8 <d_unqualified_name+0xa6>
    e516:	68eb      	ldr	r3, [r5, #12]
    e518:	781a      	ldrb	r2, [r3, #0]
    e51a:	2a45      	cmp	r2, #69	; 0x45
    e51c:	f47f af6c 	bne.w	e3f8 <d_unqualified_name+0xa6>
    e520:	3301      	adds	r3, #1
    e522:	4628      	mov	r0, r5
    e524:	60eb      	str	r3, [r5, #12]
    e526:	f7fe fdd0 	bl	d0ca <d_compact_number>
    e52a:	1e06      	subs	r6, r0, #0
    e52c:	f6ff af64 	blt.w	e3f8 <d_unqualified_name+0xa6>
    e530:	4628      	mov	r0, r5
    e532:	f7fe fc4b 	bl	cdcc <d_make_empty>
    e536:	4604      	mov	r4, r0
    e538:	b118      	cbz	r0, e542 <d_unqualified_name+0x1f0>
    e53a:	2346      	movs	r3, #70	; 0x46
    e53c:	e9c0 7602 	strd	r7, r6, [r0, #8]
    e540:	7003      	strb	r3, [r0, #0]
    e542:	4621      	mov	r1, r4
    e544:	4628      	mov	r0, r5
    e546:	f7fe fcc3 	bl	ced0 <d_add_substitution>
    e54a:	2800      	cmp	r0, #0
    e54c:	f47f af0c 	bne.w	e368 <d_unqualified_name+0x16>
    e550:	e752      	b.n	e3f8 <d_unqualified_name+0xa6>
    e552:	bf00      	nop
    e554:	00036f91 	.word	0x00036f91

0000e558 <d_name>:
    e558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    e55c:	68c3      	ldr	r3, [r0, #12]
    e55e:	4604      	mov	r4, r0
    e560:	781a      	ldrb	r2, [r3, #0]
    e562:	2a55      	cmp	r2, #85	; 0x55
    e564:	f000 8106 	beq.w	e774 <d_name+0x21c>
    e568:	d815      	bhi.n	e596 <d_name+0x3e>
    e56a:	2a4e      	cmp	r2, #78	; 0x4e
    e56c:	d041      	beq.n	e5f2 <d_name+0x9a>
    e56e:	2a53      	cmp	r2, #83	; 0x53
    e570:	f000 8104 	beq.w	e77c <d_name+0x224>
    e574:	4620      	mov	r0, r4
    e576:	f7ff feec 	bl	e352 <d_unqualified_name>
    e57a:	68e3      	ldr	r3, [r4, #12]
    e57c:	4605      	mov	r5, r0
    e57e:	781b      	ldrb	r3, [r3, #0]
    e580:	2b49      	cmp	r3, #73	; 0x49
    e582:	f040 80c6 	bne.w	e712 <d_name+0x1ba>
    e586:	4629      	mov	r1, r5
    e588:	4620      	mov	r0, r4
    e58a:	f7fe fca1 	bl	ced0 <d_add_substitution>
    e58e:	2800      	cmp	r0, #0
    e590:	f040 8103 	bne.w	e79a <d_name+0x242>
    e594:	e035      	b.n	e602 <d_name+0xaa>
    e596:	2a5a      	cmp	r2, #90	; 0x5a
    e598:	d1ec      	bne.n	e574 <d_name+0x1c>
    e59a:	3301      	adds	r3, #1
    e59c:	2100      	movs	r1, #0
    e59e:	60c3      	str	r3, [r0, #12]
    e5a0:	f000 f91e 	bl	e7e0 <d_encoding>
    e5a4:	4605      	mov	r5, r0
    e5a6:	b360      	cbz	r0, e602 <d_name+0xaa>
    e5a8:	68e3      	ldr	r3, [r4, #12]
    e5aa:	781a      	ldrb	r2, [r3, #0]
    e5ac:	2a45      	cmp	r2, #69	; 0x45
    e5ae:	d128      	bne.n	e602 <d_name+0xaa>
    e5b0:	1c5a      	adds	r2, r3, #1
    e5b2:	60e2      	str	r2, [r4, #12]
    e5b4:	785a      	ldrb	r2, [r3, #1]
    e5b6:	2a73      	cmp	r2, #115	; 0x73
    e5b8:	f040 80af 	bne.w	e71a <d_name+0x1c2>
    e5bc:	3302      	adds	r3, #2
    e5be:	4620      	mov	r0, r4
    e5c0:	60e3      	str	r3, [r4, #12]
    e5c2:	f7fe fe5e 	bl	d282 <d_discriminator>
    e5c6:	b1e0      	cbz	r0, e602 <d_name+0xaa>
    e5c8:	220e      	movs	r2, #14
    e5ca:	4982      	ldr	r1, [pc, #520]	; (e7d4 <d_name+0x27c>)
    e5cc:	4620      	mov	r0, r4
    e5ce:	f7fe fc4d 	bl	ce6c <d_make_name>
    e5d2:	4603      	mov	r3, r0
    e5d4:	782a      	ldrb	r2, [r5, #0]
    e5d6:	2a03      	cmp	r2, #3
    e5d8:	d105      	bne.n	e5e6 <d_name+0x8e>
    e5da:	68ea      	ldr	r2, [r5, #12]
    e5dc:	7811      	ldrb	r1, [r2, #0]
    e5de:	2929      	cmp	r1, #41	; 0x29
    e5e0:	bf04      	itt	eq
    e5e2:	2100      	moveq	r1, #0
    e5e4:	6091      	streq	r1, [r2, #8]
    e5e6:	462a      	mov	r2, r5
    e5e8:	2102      	movs	r1, #2
    e5ea:	4620      	mov	r0, r4
    e5ec:	f7fe fbfd 	bl	cdea <d_make_comp>
    e5f0:	e0c2      	b.n	e778 <d_name+0x220>
    e5f2:	3301      	adds	r3, #1
    e5f4:	2201      	movs	r2, #1
    e5f6:	a903      	add	r1, sp, #12
    e5f8:	60c3      	str	r3, [r0, #12]
    e5fa:	f7ff fdbf 	bl	e17c <d_cv_qualifiers>
    e5fe:	4607      	mov	r7, r0
    e600:	b908      	cbnz	r0, e606 <d_name+0xae>
    e602:	2500      	movs	r5, #0
    e604:	e085      	b.n	e712 <d_name+0x1ba>
    e606:	2100      	movs	r1, #0
    e608:	4620      	mov	r0, r4
    e60a:	f7fe fc4b 	bl	cea4 <d_ref_qualifier>
    e60e:	f04f 0a00 	mov.w	sl, #0
    e612:	4680      	mov	r8, r0
    e614:	f8df 91c4 	ldr.w	r9, [pc, #452]	; e7dc <d_name+0x284>
    e618:	68e3      	ldr	r3, [r4, #12]
    e61a:	781e      	ldrb	r6, [r3, #0]
    e61c:	b916      	cbnz	r6, e624 <d_name+0xcc>
    e61e:	2300      	movs	r3, #0
    e620:	603b      	str	r3, [r7, #0]
    e622:	e7ee      	b.n	e602 <d_name+0xaa>
    e624:	2e44      	cmp	r6, #68	; 0x44
    e626:	d118      	bne.n	e65a <d_name+0x102>
    e628:	785b      	ldrb	r3, [r3, #1]
    e62a:	4620      	mov	r0, r4
    e62c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    e630:	2b54      	cmp	r3, #84	; 0x54
    e632:	d10f      	bne.n	e654 <d_name+0xfc>
    e634:	f7ff f9bc 	bl	d9b0 <d_type>
    e638:	4605      	mov	r5, r0
    e63a:	f1ba 0f00 	cmp.w	sl, #0
    e63e:	d11e      	bne.n	e67e <d_name+0x126>
    e640:	68e3      	ldr	r3, [r4, #12]
    e642:	781b      	ldrb	r3, [r3, #0]
    e644:	2b45      	cmp	r3, #69	; 0x45
    e646:	d03d      	beq.n	e6c4 <d_name+0x16c>
    e648:	4629      	mov	r1, r5
    e64a:	4620      	mov	r0, r4
    e64c:	f7fe fc40 	bl	ced0 <d_add_substitution>
    e650:	bbc0      	cbnz	r0, e6c4 <d_name+0x16c>
    e652:	e7e4      	b.n	e61e <d_name+0xc6>
    e654:	f7ff fe7d 	bl	e352 <d_unqualified_name>
    e658:	e7ee      	b.n	e638 <d_name+0xe0>
    e65a:	f1a6 0230 	sub.w	r2, r6, #48	; 0x30
    e65e:	b2d2      	uxtb	r2, r2
    e660:	2a1c      	cmp	r2, #28
    e662:	d90e      	bls.n	e682 <d_name+0x12a>
    e664:	f1a6 0261 	sub.w	r2, r6, #97	; 0x61
    e668:	2a19      	cmp	r2, #25
    e66a:	d901      	bls.n	e670 <d_name+0x118>
    e66c:	2e55      	cmp	r6, #85	; 0x55
    e66e:	d11f      	bne.n	e6b0 <d_name+0x158>
    e670:	4620      	mov	r0, r4
    e672:	f7ff fe6e 	bl	e352 <d_unqualified_name>
    e676:	4605      	mov	r5, r0
    e678:	f1ba 0f00 	cmp.w	sl, #0
    e67c:	d015      	beq.n	e6aa <d_name+0x152>
    e67e:	2101      	movs	r1, #1
    e680:	e00d      	b.n	e69e <d_name+0x146>
    e682:	fa29 f202 	lsr.w	r2, r9, r2
    e686:	07d2      	lsls	r2, r2, #31
    e688:	d4f2      	bmi.n	e670 <d_name+0x118>
    e68a:	2e49      	cmp	r6, #73	; 0x49
    e68c:	d11c      	bne.n	e6c8 <d_name+0x170>
    e68e:	f1ba 0f00 	cmp.w	sl, #0
    e692:	d0c4      	beq.n	e61e <d_name+0xc6>
    e694:	4620      	mov	r0, r4
    e696:	f7ff fcc2 	bl	e01e <d_template_args>
    e69a:	2104      	movs	r1, #4
    e69c:	4605      	mov	r5, r0
    e69e:	462b      	mov	r3, r5
    e6a0:	4652      	mov	r2, sl
    e6a2:	4620      	mov	r0, r4
    e6a4:	f7fe fba1 	bl	cdea <d_make_comp>
    e6a8:	4605      	mov	r5, r0
    e6aa:	2e53      	cmp	r6, #83	; 0x53
    e6ac:	d1c8      	bne.n	e640 <d_name+0xe8>
    e6ae:	e009      	b.n	e6c4 <d_name+0x16c>
    e6b0:	2e53      	cmp	r6, #83	; 0x53
    e6b2:	d1ea      	bne.n	e68a <d_name+0x132>
    e6b4:	2101      	movs	r1, #1
    e6b6:	4620      	mov	r0, r4
    e6b8:	f7fe feb0 	bl	d41c <d_substitution>
    e6bc:	4605      	mov	r5, r0
    e6be:	f1ba 0f00 	cmp.w	sl, #0
    e6c2:	d1dc      	bne.n	e67e <d_name+0x126>
    e6c4:	46aa      	mov	sl, r5
    e6c6:	e7a7      	b.n	e618 <d_name+0xc0>
    e6c8:	2e54      	cmp	r6, #84	; 0x54
    e6ca:	d103      	bne.n	e6d4 <d_name+0x17c>
    e6cc:	4620      	mov	r0, r4
    e6ce:	f7fe fd15 	bl	d0fc <d_template_param>
    e6d2:	e7b1      	b.n	e638 <d_name+0xe0>
    e6d4:	2e45      	cmp	r6, #69	; 0x45
    e6d6:	d008      	beq.n	e6ea <d_name+0x192>
    e6d8:	2e4d      	cmp	r6, #77	; 0x4d
    e6da:	d1a0      	bne.n	e61e <d_name+0xc6>
    e6dc:	f1ba 0f00 	cmp.w	sl, #0
    e6e0:	d09d      	beq.n	e61e <d_name+0xc6>
    e6e2:	3301      	adds	r3, #1
    e6e4:	4655      	mov	r5, sl
    e6e6:	60e3      	str	r3, [r4, #12]
    e6e8:	e7ec      	b.n	e6c4 <d_name+0x16c>
    e6ea:	f8c7 a000 	str.w	sl, [r7]
    e6ee:	f1ba 0f00 	cmp.w	sl, #0
    e6f2:	d086      	beq.n	e602 <d_name+0xaa>
    e6f4:	f1b8 0f00 	cmp.w	r8, #0
    e6f8:	d004      	beq.n	e704 <d_name+0x1ac>
    e6fa:	9a03      	ldr	r2, [sp, #12]
    e6fc:	f8cd 800c 	str.w	r8, [sp, #12]
    e700:	f8c8 2008 	str.w	r2, [r8, #8]
    e704:	781a      	ldrb	r2, [r3, #0]
    e706:	2a45      	cmp	r2, #69	; 0x45
    e708:	f47f af7b 	bne.w	e602 <d_name+0xaa>
    e70c:	3301      	adds	r3, #1
    e70e:	9d03      	ldr	r5, [sp, #12]
    e710:	60e3      	str	r3, [r4, #12]
    e712:	4628      	mov	r0, r5
    e714:	b004      	add	sp, #16
    e716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e71a:	2a64      	cmp	r2, #100	; 0x64
    e71c:	d110      	bne.n	e740 <d_name+0x1e8>
    e71e:	3302      	adds	r3, #2
    e720:	4620      	mov	r0, r4
    e722:	60e3      	str	r3, [r4, #12]
    e724:	f7fe fcd1 	bl	d0ca <d_compact_number>
    e728:	1e07      	subs	r7, r0, #0
    e72a:	f6ff af6a 	blt.w	e602 <d_name+0xaa>
    e72e:	4620      	mov	r0, r4
    e730:	f7ff ff12 	bl	e558 <d_name>
    e734:	4606      	mov	r6, r0
    e736:	b930      	cbnz	r0, e746 <d_name+0x1ee>
    e738:	1c7b      	adds	r3, r7, #1
    e73a:	d10f      	bne.n	e75c <d_name+0x204>
    e73c:	4633      	mov	r3, r6
    e73e:	e749      	b.n	e5d4 <d_name+0x7c>
    e740:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    e744:	e7f3      	b.n	e72e <d_name+0x1d6>
    e746:	7803      	ldrb	r3, [r0, #0]
    e748:	2b46      	cmp	r3, #70	; 0x46
    e74a:	d0f5      	beq.n	e738 <d_name+0x1e0>
    e74c:	2b48      	cmp	r3, #72	; 0x48
    e74e:	d0f3      	beq.n	e738 <d_name+0x1e0>
    e750:	4620      	mov	r0, r4
    e752:	f7fe fd96 	bl	d282 <d_discriminator>
    e756:	2800      	cmp	r0, #0
    e758:	d1ee      	bne.n	e738 <d_name+0x1e0>
    e75a:	e752      	b.n	e602 <d_name+0xaa>
    e75c:	4620      	mov	r0, r4
    e75e:	f7fe fb35 	bl	cdcc <d_make_empty>
    e762:	4603      	mov	r3, r0
    e764:	2800      	cmp	r0, #0
    e766:	f43f af35 	beq.w	e5d4 <d_name+0x7c>
    e76a:	2247      	movs	r2, #71	; 0x47
    e76c:	e9c0 6702 	strd	r6, r7, [r0, #8]
    e770:	7002      	strb	r2, [r0, #0]
    e772:	e72f      	b.n	e5d4 <d_name+0x7c>
    e774:	f7ff fded 	bl	e352 <d_unqualified_name>
    e778:	4605      	mov	r5, r0
    e77a:	e7ca      	b.n	e712 <d_name+0x1ba>
    e77c:	785a      	ldrb	r2, [r3, #1]
    e77e:	2a74      	cmp	r2, #116	; 0x74
    e780:	d012      	beq.n	e7a8 <d_name+0x250>
    e782:	2100      	movs	r1, #0
    e784:	f7fe fe4a 	bl	d41c <d_substitution>
    e788:	2301      	movs	r3, #1
    e78a:	4605      	mov	r5, r0
    e78c:	68e2      	ldr	r2, [r4, #12]
    e78e:	7812      	ldrb	r2, [r2, #0]
    e790:	2a49      	cmp	r2, #73	; 0x49
    e792:	d1be      	bne.n	e712 <d_name+0x1ba>
    e794:	2b00      	cmp	r3, #0
    e796:	f43f aef6 	beq.w	e586 <d_name+0x2e>
    e79a:	4620      	mov	r0, r4
    e79c:	f7ff fc3f 	bl	e01e <d_template_args>
    e7a0:	462a      	mov	r2, r5
    e7a2:	4603      	mov	r3, r0
    e7a4:	2104      	movs	r1, #4
    e7a6:	e720      	b.n	e5ea <d_name+0x92>
    e7a8:	3302      	adds	r3, #2
    e7aa:	2203      	movs	r2, #3
    e7ac:	490a      	ldr	r1, [pc, #40]	; (e7d8 <d_name+0x280>)
    e7ae:	60c3      	str	r3, [r0, #12]
    e7b0:	f7fe fb5c 	bl	ce6c <d_make_name>
    e7b4:	9001      	str	r0, [sp, #4]
    e7b6:	4620      	mov	r0, r4
    e7b8:	f7ff fdcb 	bl	e352 <d_unqualified_name>
    e7bc:	9a01      	ldr	r2, [sp, #4]
    e7be:	4603      	mov	r3, r0
    e7c0:	2101      	movs	r1, #1
    e7c2:	4620      	mov	r0, r4
    e7c4:	f7fe fb11 	bl	cdea <d_make_comp>
    e7c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e7ca:	4605      	mov	r5, r0
    e7cc:	3303      	adds	r3, #3
    e7ce:	62e3      	str	r3, [r4, #44]	; 0x2c
    e7d0:	2300      	movs	r3, #0
    e7d2:	e7db      	b.n	e78c <d_name+0x234>
    e7d4:	00036f94 	.word	0x00036f94
    e7d8:	00036fa3 	.word	0x00036fa3
    e7dc:	100803ff 	.word	0x100803ff

0000e7e0 <d_encoding>:
    e7e0:	68c3      	ldr	r3, [r0, #12]
    e7e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    e7e6:	781a      	ldrb	r2, [r3, #0]
    e7e8:	4604      	mov	r4, r0
    e7ea:	460e      	mov	r6, r1
    e7ec:	2a47      	cmp	r2, #71	; 0x47
    e7ee:	d002      	beq.n	e7f6 <d_encoding+0x16>
    e7f0:	2a54      	cmp	r2, #84	; 0x54
    e7f2:	f040 818d 	bne.w	eb10 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xb0>
    e7f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    e7f8:	f102 0114 	add.w	r1, r2, #20
    e7fc:	62e1      	str	r1, [r4, #44]	; 0x2c
    e7fe:	7819      	ldrb	r1, [r3, #0]
    e800:	2954      	cmp	r1, #84	; 0x54
    e802:	d108      	bne.n	e816 <d_encoding+0x36>
    e804:	1c59      	adds	r1, r3, #1
    e806:	60e1      	str	r1, [r4, #12]
    e808:	7859      	ldrb	r1, [r3, #1]
    e80a:	bb19      	cbnz	r1, e854 <d_encoding+0x74>
    e80c:	2500      	movs	r5, #0
    e80e:	4628      	mov	r0, r5
    e810:	b003      	add	sp, #12
    e812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e816:	2947      	cmp	r1, #71	; 0x47
    e818:	d1f8      	bne.n	e80c <d_encoding+0x2c>
    e81a:	1c5a      	adds	r2, r3, #1
    e81c:	60e2      	str	r2, [r4, #12]
    e81e:	785a      	ldrb	r2, [r3, #1]
    e820:	2a00      	cmp	r2, #0
    e822:	d0f3      	beq.n	e80c <d_encoding+0x2c>
    e824:	1c9a      	adds	r2, r3, #2
    e826:	60e2      	str	r2, [r4, #12]
    e828:	785a      	ldrb	r2, [r3, #1]
    e82a:	2a54      	cmp	r2, #84	; 0x54
    e82c:	f000 813f 	beq.w	eaae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4e>
    e830:	f200 80e6 	bhi.w	ea00 <d_encoding+0x220>
    e834:	2a41      	cmp	r2, #65	; 0x41
    e836:	f000 8132 	beq.w	ea9e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x3e>
    e83a:	2a52      	cmp	r2, #82	; 0x52
    e83c:	d1e6      	bne.n	e80c <d_encoding+0x2c>
    e83e:	4620      	mov	r0, r4
    e840:	f7ff fe8a 	bl	e558 <d_name>
    e844:	9001      	str	r0, [sp, #4]
    e846:	4620      	mov	r0, r4
    e848:	f7fe fc30 	bl	d0ac <d_number_component>
    e84c:	9a01      	ldr	r2, [sp, #4]
    e84e:	4603      	mov	r3, r0
    e850:	2116      	movs	r1, #22
    e852:	e05d      	b.n	e910 <d_encoding+0x130>
    e854:	1c99      	adds	r1, r3, #2
    e856:	60e1      	str	r1, [r4, #12]
    e858:	7859      	ldrb	r1, [r3, #1]
    e85a:	2957      	cmp	r1, #87	; 0x57
    e85c:	d836      	bhi.n	e8cc <d_encoding+0xec>
    e85e:	2940      	cmp	r1, #64	; 0x40
    e860:	d9d4      	bls.n	e80c <d_encoding+0x2c>
    e862:	3941      	subs	r1, #65	; 0x41
    e864:	2916      	cmp	r1, #22
    e866:	d8d1      	bhi.n	e80c <d_encoding+0x2c>
    e868:	a301      	add	r3, pc, #4	; (adr r3, e870 <d_encoding+0x90>)
    e86a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    e86e:	bf00      	nop
    e870:	0000e9f3 	.word	0x0000e9f3
    e874:	0000e80d 	.word	0x0000e80d
    e878:	0000e983 	.word	0x0000e983
    e87c:	0000e80d 	.word	0x0000e80d
    e880:	0000e80d 	.word	0x0000e80d
    e884:	0000e9bb 	.word	0x0000e9bb
    e888:	0000e80d 	.word	0x0000e80d
    e88c:	0000e9d7 	.word	0x0000e9d7
    e890:	0000e92f 	.word	0x0000e92f
    e894:	0000e9c9 	.word	0x0000e9c9
    e898:	0000e80d 	.word	0x0000e80d
    e89c:	0000e80d 	.word	0x0000e80d
    e8a0:	0000e80d 	.word	0x0000e80d
    e8a4:	0000e80d 	.word	0x0000e80d
    e8a8:	0000e80d 	.word	0x0000e80d
    e8ac:	0000e80d 	.word	0x0000e80d
    e8b0:	0000e80d 	.word	0x0000e80d
    e8b4:	0000e80d 	.word	0x0000e80d
    e8b8:	0000e93d 	.word	0x0000e93d
    e8bc:	0000e91d 	.word	0x0000e91d
    e8c0:	0000e80d 	.word	0x0000e80d
    e8c4:	0000e901 	.word	0x0000e901
    e8c8:	0000e9e5 	.word	0x0000e9e5
    e8cc:	2968      	cmp	r1, #104	; 0x68
    e8ce:	d03c      	beq.n	e94a <d_encoding+0x16a>
    e8d0:	2976      	cmp	r1, #118	; 0x76
    e8d2:	d048      	beq.n	e966 <d_encoding+0x186>
    e8d4:	2963      	cmp	r1, #99	; 0x63
    e8d6:	d199      	bne.n	e80c <d_encoding+0x2c>
    e8d8:	2100      	movs	r1, #0
    e8da:	4620      	mov	r0, r4
    e8dc:	f7fe fc7e 	bl	d1dc <d_call_offset>
    e8e0:	2800      	cmp	r0, #0
    e8e2:	d093      	beq.n	e80c <d_encoding+0x2c>
    e8e4:	2100      	movs	r1, #0
    e8e6:	4620      	mov	r0, r4
    e8e8:	f7fe fc78 	bl	d1dc <d_call_offset>
    e8ec:	2800      	cmp	r0, #0
    e8ee:	d08d      	beq.n	e80c <d_encoding+0x2c>
    e8f0:	2100      	movs	r1, #0
    e8f2:	4620      	mov	r0, r4
    e8f4:	f7ff ff74 	bl	e7e0 <d_encoding>
    e8f8:	2300      	movs	r3, #0
    e8fa:	4602      	mov	r2, r0
    e8fc:	2111      	movs	r1, #17
    e8fe:	e007      	b.n	e910 <d_encoding+0x130>
    e900:	320f      	adds	r2, #15
    e902:	4620      	mov	r0, r4
    e904:	62e2      	str	r2, [r4, #44]	; 0x2c
    e906:	f7ff f853 	bl	d9b0 <d_type>
    e90a:	2300      	movs	r3, #0
    e90c:	4602      	mov	r2, r0
    e90e:	2109      	movs	r1, #9
    e910:	4620      	mov	r0, r4
    e912:	b003      	add	sp, #12
    e914:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e918:	f7fe ba67 	b.w	cdea <d_make_comp>
    e91c:	320a      	adds	r2, #10
    e91e:	4620      	mov	r0, r4
    e920:	62e2      	str	r2, [r4, #44]	; 0x2c
    e922:	f7ff f845 	bl	d9b0 <d_type>
    e926:	2300      	movs	r3, #0
    e928:	4602      	mov	r2, r0
    e92a:	210a      	movs	r1, #10
    e92c:	e7f0      	b.n	e910 <d_encoding+0x130>
    e92e:	4620      	mov	r0, r4
    e930:	f7ff f83e 	bl	d9b0 <d_type>
    e934:	2300      	movs	r3, #0
    e936:	4602      	mov	r2, r0
    e938:	210c      	movs	r1, #12
    e93a:	e7e9      	b.n	e910 <d_encoding+0x130>
    e93c:	4620      	mov	r0, r4
    e93e:	f7ff f837 	bl	d9b0 <d_type>
    e942:	2300      	movs	r3, #0
    e944:	4602      	mov	r2, r0
    e946:	210d      	movs	r1, #13
    e948:	e7e2      	b.n	e910 <d_encoding+0x130>
    e94a:	4620      	mov	r0, r4
    e94c:	f7fe fc46 	bl	d1dc <d_call_offset>
    e950:	2800      	cmp	r0, #0
    e952:	f43f af5b 	beq.w	e80c <d_encoding+0x2c>
    e956:	2100      	movs	r1, #0
    e958:	4620      	mov	r0, r4
    e95a:	f7ff ff41 	bl	e7e0 <d_encoding>
    e95e:	2300      	movs	r3, #0
    e960:	4602      	mov	r2, r0
    e962:	210f      	movs	r1, #15
    e964:	e7d4      	b.n	e910 <d_encoding+0x130>
    e966:	4620      	mov	r0, r4
    e968:	f7fe fc38 	bl	d1dc <d_call_offset>
    e96c:	2800      	cmp	r0, #0
    e96e:	f43f af4d 	beq.w	e80c <d_encoding+0x2c>
    e972:	2100      	movs	r1, #0
    e974:	4620      	mov	r0, r4
    e976:	f7ff ff33 	bl	e7e0 <d_encoding>
    e97a:	2300      	movs	r3, #0
    e97c:	4602      	mov	r2, r0
    e97e:	2110      	movs	r1, #16
    e980:	e7c6      	b.n	e910 <d_encoding+0x130>
    e982:	4620      	mov	r0, r4
    e984:	f7ff f814 	bl	d9b0 <d_type>
    e988:	4605      	mov	r5, r0
    e98a:	f104 000c 	add.w	r0, r4, #12
    e98e:	f7fe fb63 	bl	d058 <d_number.isra.0>
    e992:	2800      	cmp	r0, #0
    e994:	f6ff af3a 	blt.w	e80c <d_encoding+0x2c>
    e998:	68e2      	ldr	r2, [r4, #12]
    e99a:	7813      	ldrb	r3, [r2, #0]
    e99c:	2b5f      	cmp	r3, #95	; 0x5f
    e99e:	f47f af35 	bne.w	e80c <d_encoding+0x2c>
    e9a2:	3201      	adds	r2, #1
    e9a4:	4620      	mov	r0, r4
    e9a6:	60e2      	str	r2, [r4, #12]
    e9a8:	f7ff f802 	bl	d9b0 <d_type>
    e9ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e9ae:	4602      	mov	r2, r0
    e9b0:	210b      	movs	r1, #11
    e9b2:	3305      	adds	r3, #5
    e9b4:	62e3      	str	r3, [r4, #44]	; 0x2c
    e9b6:	462b      	mov	r3, r5
    e9b8:	e7aa      	b.n	e910 <d_encoding+0x130>
    e9ba:	4620      	mov	r0, r4
    e9bc:	f7fe fff8 	bl	d9b0 <d_type>
    e9c0:	2300      	movs	r3, #0
    e9c2:	4602      	mov	r2, r0
    e9c4:	210e      	movs	r1, #14
    e9c6:	e7a3      	b.n	e910 <d_encoding+0x130>
    e9c8:	4620      	mov	r0, r4
    e9ca:	f7fe fff1 	bl	d9b0 <d_type>
    e9ce:	2300      	movs	r3, #0
    e9d0:	4602      	mov	r2, r0
    e9d2:	2112      	movs	r1, #18
    e9d4:	e79c      	b.n	e910 <d_encoding+0x130>
    e9d6:	4620      	mov	r0, r4
    e9d8:	f7ff fdbe 	bl	e558 <d_name>
    e9dc:	2300      	movs	r3, #0
    e9de:	4602      	mov	r2, r0
    e9e0:	2114      	movs	r1, #20
    e9e2:	e795      	b.n	e910 <d_encoding+0x130>
    e9e4:	4620      	mov	r0, r4
    e9e6:	f7ff fdb7 	bl	e558 <d_name>
    e9ea:	2300      	movs	r3, #0
    e9ec:	4602      	mov	r2, r0
    e9ee:	2115      	movs	r1, #21
    e9f0:	e78e      	b.n	e910 <d_encoding+0x130>
    e9f2:	4620      	mov	r0, r4
    e9f4:	f7ff fac0 	bl	df78 <d_template_arg>
    e9f8:	2300      	movs	r3, #0
    e9fa:	4602      	mov	r2, r0
    e9fc:	2130      	movs	r1, #48	; 0x30
    e9fe:	e787      	b.n	e910 <d_encoding+0x130>
    ea00:	2a56      	cmp	r2, #86	; 0x56
    ea02:	d045      	beq.n	ea90 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x30>
    ea04:	2a72      	cmp	r2, #114	; 0x72
    ea06:	f47f af01 	bne.w	e80c <d_encoding+0x2c>
    ea0a:	f104 000c 	add.w	r0, r4, #12
    ea0e:	f7fe fb23 	bl	d058 <d_number.isra.0>
    ea12:	2801      	cmp	r0, #1
    ea14:	f77f aefa 	ble.w	e80c <d_encoding+0x2c>
    ea18:	68e3      	ldr	r3, [r4, #12]
    ea1a:	781a      	ldrb	r2, [r3, #0]
    ea1c:	2a00      	cmp	r2, #0
    ea1e:	f43f aef5 	beq.w	e80c <d_encoding+0x2c>
    ea22:	1c5d      	adds	r5, r3, #1
    ea24:	60e5      	str	r5, [r4, #12]
    ea26:	781b      	ldrb	r3, [r3, #0]
    ea28:	2b5f      	cmp	r3, #95	; 0x5f
    ea2a:	f47f aeef 	bne.w	e80c <d_encoding+0x2c>
    ea2e:	1e46      	subs	r6, r0, #1
    ea30:	f04f 0800 	mov.w	r8, #0
    ea34:	2741      	movs	r7, #65	; 0x41
    ea36:	782b      	ldrb	r3, [r5, #0]
    ea38:	2b00      	cmp	r3, #0
    ea3a:	f43f aee7 	beq.w	e80c <d_encoding+0x2c>
    ea3e:	2b24      	cmp	r3, #36	; 0x24
    ea40:	d150      	bne.n	eae4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x84>
    ea42:	786d      	ldrb	r5, [r5, #1]
    ea44:	2d53      	cmp	r5, #83	; 0x53
    ea46:	d049      	beq.n	eadc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x7c>
    ea48:	2d5f      	cmp	r5, #95	; 0x5f
    ea4a:	d049      	beq.n	eae0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x80>
    ea4c:	2d24      	cmp	r5, #36	; 0x24
    ea4e:	f47f aedd 	bne.w	e80c <d_encoding+0x2c>
    ea52:	4620      	mov	r0, r4
    ea54:	f7fe f9ba 	bl	cdcc <d_make_empty>
    ea58:	b108      	cbz	r0, ea5e <d_encoding+0x27e>
    ea5a:	7007      	strb	r7, [r0, #0]
    ea5c:	6085      	str	r5, [r0, #8]
    ea5e:	68e5      	ldr	r5, [r4, #12]
    ea60:	3e02      	subs	r6, #2
    ea62:	3502      	adds	r5, #2
    ea64:	60e5      	str	r5, [r4, #12]
    ea66:	2800      	cmp	r0, #0
    ea68:	f43f aed0 	beq.w	e80c <d_encoding+0x2c>
    ea6c:	f1b8 0f00 	cmp.w	r8, #0
    ea70:	d008      	beq.n	ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>
    ea72:	4603      	mov	r3, r0
    ea74:	4642      	mov	r2, r8
    ea76:	2140      	movs	r1, #64	; 0x40
    ea78:	4620      	mov	r0, r4
    ea7a:	f7fe f9b6 	bl	cdea <d_make_comp>
    ea7e:	2800      	cmp	r0, #0
    ea80:	f43f aec4 	beq.w	e80c <d_encoding+0x2c>
    ea84:	2e00      	cmp	r6, #0
    ea86:	dc27      	bgt.n	ead8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x78>
    ea88:	2300      	movs	r3, #0
    ea8a:	4602      	mov	r2, r0
    ea8c:	213f      	movs	r1, #63	; 0x3f
    ea8e:	e73f      	b.n	e910 <d_encoding+0x130>
    ea90:	4620      	mov	r0, r4
    ea92:	f7ff fd61 	bl	e558 <d_name>
    ea96:	2300      	movs	r3, #0
    ea98:	4602      	mov	r2, r0
    ea9a:	2113      	movs	r1, #19
    ea9c:	e738      	b.n	e910 <d_encoding+0x130>
    ea9e:	2100      	movs	r1, #0
    eaa0:	4620      	mov	r0, r4
    eaa2:	f7ff fe9d 	bl	e7e0 <d_encoding>
    eaa6:	2300      	movs	r3, #0
    eaa8:	4602      	mov	r2, r0
    eaaa:	2117      	movs	r1, #23
    eaac:	e730      	b.n	e910 <d_encoding+0x130>
    eaae:	789a      	ldrb	r2, [r3, #2]
    eab0:	2100      	movs	r1, #0
    eab2:	4620      	mov	r0, r4
    eab4:	b152      	cbz	r2, eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>
    eab6:	1cda      	adds	r2, r3, #3
    eab8:	60e2      	str	r2, [r4, #12]
    eaba:	789b      	ldrb	r3, [r3, #2]
    eabc:	2b6e      	cmp	r3, #110	; 0x6e
    eabe:	d105      	bne.n	eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>
    eac0:	f7ff fe8e 	bl	e7e0 <d_encoding>
    eac4:	2300      	movs	r3, #0
    eac6:	4602      	mov	r2, r0
    eac8:	214a      	movs	r1, #74	; 0x4a
    eaca:	e721      	b.n	e910 <d_encoding+0x130>
    eacc:	f7ff fe88 	bl	e7e0 <d_encoding>
    ead0:	2300      	movs	r3, #0
    ead2:	4602      	mov	r2, r0
    ead4:	2149      	movs	r1, #73	; 0x49
    ead6:	e71b      	b.n	e910 <d_encoding+0x130>
    ead8:	4680      	mov	r8, r0
    eada:	e7ac      	b.n	ea36 <d_encoding+0x256>
    eadc:	252f      	movs	r5, #47	; 0x2f
    eade:	e7b8      	b.n	ea52 <d_encoding+0x272>
    eae0:	252e      	movs	r5, #46	; 0x2e
    eae2:	e7b6      	b.n	ea52 <d_encoding+0x272>
    eae4:	f04f 0900 	mov.w	r9, #0
    eae8:	f815 3009 	ldrb.w	r3, [r5, r9]
    eaec:	b12b      	cbz	r3, eafa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a>
    eaee:	2b24      	cmp	r3, #36	; 0x24
    eaf0:	d003      	beq.n	eafa <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x9a>
    eaf2:	f109 0901 	add.w	r9, r9, #1
    eaf6:	45b1      	cmp	r9, r6
    eaf8:	dbf6      	blt.n	eae8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x88>
    eafa:	4629      	mov	r1, r5
    eafc:	464a      	mov	r2, r9
    eafe:	4620      	mov	r0, r4
    eb00:	eba6 0609 	sub.w	r6, r6, r9
    eb04:	f7fe f9b2 	bl	ce6c <d_make_name>
    eb08:	68e5      	ldr	r5, [r4, #12]
    eb0a:	444d      	add	r5, r9
    eb0c:	60e5      	str	r5, [r4, #12]
    eb0e:	e7aa      	b.n	ea66 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6>
    eb10:	f7ff fd22 	bl	e558 <d_name>
    eb14:	4605      	mov	r5, r0
    eb16:	2800      	cmp	r0, #0
    eb18:	f43f ae78 	beq.w	e80c <d_encoding+0x2c>
    eb1c:	b116      	cbz	r6, eb24 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xc4>
    eb1e:	68a3      	ldr	r3, [r4, #8]
    eb20:	07d9      	lsls	r1, r3, #31
    eb22:	d511      	bpl.n	eb48 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe8>
    eb24:	68e3      	ldr	r3, [r4, #12]
    eb26:	781b      	ldrb	r3, [r3, #0]
    eb28:	2b00      	cmp	r3, #0
    eb2a:	f43f ae70 	beq.w	e80e <d_encoding+0x2e>
    eb2e:	2b45      	cmp	r3, #69	; 0x45
    eb30:	f43f ae6d 	beq.w	e80e <d_encoding+0x2e>
    eb34:	4629      	mov	r1, r5
    eb36:	780a      	ldrb	r2, [r1, #0]
    eb38:	2a04      	cmp	r2, #4
    eb3a:	d038      	beq.n	ebae <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x14e>
    eb3c:	d817      	bhi.n	eb6e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x10e>
    eb3e:	2a02      	cmp	r2, #2
    eb40:	d020      	beq.n	eb84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x124>
    eb42:	2100      	movs	r1, #0
    eb44:	e021      	b.n	eb8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12a>
    eb46:	68ad      	ldr	r5, [r5, #8]
    eb48:	782b      	ldrb	r3, [r5, #0]
    eb4a:	4618      	mov	r0, r3
    eb4c:	f7fe f930 	bl	cdb0 <is_fnqual_component_type>
    eb50:	2800      	cmp	r0, #0
    eb52:	d1f8      	bne.n	eb46 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe6>
    eb54:	2b02      	cmp	r3, #2
    eb56:	f47f ae5a 	bne.w	e80e <d_encoding+0x2e>
    eb5a:	68eb      	ldr	r3, [r5, #12]
    eb5c:	7818      	ldrb	r0, [r3, #0]
    eb5e:	f7fe f927 	bl	cdb0 <is_fnqual_component_type>
    eb62:	2800      	cmp	r0, #0
    eb64:	f43f ae53 	beq.w	e80e <d_encoding+0x2e>
    eb68:	689b      	ldr	r3, [r3, #8]
    eb6a:	60eb      	str	r3, [r5, #12]
    eb6c:	e7f5      	b.n	eb5a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xfa>
    eb6e:	2a4d      	cmp	r2, #77	; 0x4d
    eb70:	d003      	beq.n	eb7a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11a>
    eb72:	d804      	bhi.n	eb7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x11e>
    eb74:	3a1c      	subs	r2, #28
    eb76:	2a04      	cmp	r2, #4
    eb78:	d8e3      	bhi.n	eb42 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xe2>
    eb7a:	6889      	ldr	r1, [r1, #8]
    eb7c:	e003      	b.n	eb86 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x126>
    eb7e:	3a4f      	subs	r2, #79	; 0x4f
    eb80:	2a01      	cmp	r2, #1
    eb82:	e7f9      	b.n	eb78 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x118>
    eb84:	68c9      	ldr	r1, [r1, #12]
    eb86:	2900      	cmp	r1, #0
    eb88:	d1d5      	bne.n	eb36 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0xd6>
    eb8a:	4620      	mov	r0, r4
    eb8c:	f7ff fb93 	bl	e2b6 <d_bare_function_type>
    eb90:	2800      	cmp	r0, #0
    eb92:	f43f ae3b 	beq.w	e80c <d_encoding+0x2c>
    eb96:	b936      	cbnz	r6, eba6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x146>
    eb98:	782b      	ldrb	r3, [r5, #0]
    eb9a:	2b02      	cmp	r3, #2
    eb9c:	d103      	bne.n	eba6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x146>
    eb9e:	7803      	ldrb	r3, [r0, #0]
    eba0:	2b29      	cmp	r3, #41	; 0x29
    eba2:	bf08      	it	eq
    eba4:	6086      	streq	r6, [r0, #8]
    eba6:	4603      	mov	r3, r0
    eba8:	462a      	mov	r2, r5
    ebaa:	2103      	movs	r1, #3
    ebac:	e6b0      	b.n	e910 <d_encoding+0x130>
    ebae:	688b      	ldr	r3, [r1, #8]
    ebb0:	b16b      	cbz	r3, ebce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16e>
    ebb2:	7819      	ldrb	r1, [r3, #0]
    ebb4:	2908      	cmp	r1, #8
    ebb6:	d806      	bhi.n	ebc6 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x166>
    ebb8:	2906      	cmp	r1, #6
    ebba:	d80d      	bhi.n	ebd8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x178>
    ebbc:	3901      	subs	r1, #1
    ebbe:	2901      	cmp	r1, #1
    ebc0:	d908      	bls.n	ebd4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x174>
    ebc2:	2300      	movs	r3, #0
    ebc4:	e003      	b.n	ebce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16e>
    ebc6:	f1a1 0235 	sub.w	r2, r1, #53	; 0x35
    ebca:	4253      	negs	r3, r2
    ebcc:	4153      	adcs	r3, r2
    ebce:	f083 0101 	eor.w	r1, r3, #1
    ebd2:	e7da      	b.n	eb8a <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x12a>
    ebd4:	68db      	ldr	r3, [r3, #12]
    ebd6:	e7eb      	b.n	ebb0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x150>
    ebd8:	2301      	movs	r3, #1
    ebda:	e7f8      	b.n	ebce <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x16e>

0000ebdc <d_print_comp>:
    ebdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebe0:	4604      	mov	r4, r0
    ebe2:	b097      	sub	sp, #92	; 0x5c
    ebe4:	460e      	mov	r6, r1
    ebe6:	4615      	mov	r5, r2
    ebe8:	b13a      	cbz	r2, ebfa <d_print_comp+0x1e>
    ebea:	6852      	ldr	r2, [r2, #4]
    ebec:	2a01      	cmp	r2, #1
    ebee:	dc04      	bgt.n	ebfa <d_print_comp+0x1e>
    ebf0:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
    ebf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    ebf8:	dd05      	ble.n	ec06 <d_print_comp+0x2a>
    ebfa:	2301      	movs	r3, #1
    ebfc:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    ec00:	b017      	add	sp, #92	; 0x5c
    ec02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec06:	3301      	adds	r3, #1
    ec08:	3201      	adds	r2, #1
    ec0a:	a902      	add	r1, sp, #8
    ec0c:	9502      	str	r5, [sp, #8]
    ec0e:	606a      	str	r2, [r5, #4]
    ec10:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    ec14:	f8d0 8118 	ldr.w	r8, [r0, #280]	; 0x118
    ec18:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
    ec1c:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
    ec20:	9303      	str	r3, [sp, #12]
    ec22:	f1b8 0f00 	cmp.w	r8, #0
    ec26:	d15d      	bne.n	ece4 <d_print_comp+0x108>
    ec28:	782b      	ldrb	r3, [r5, #0]
    ec2a:	2b50      	cmp	r3, #80	; 0x50
    ec2c:	f200 8634 	bhi.w	f898 <d_print_comp+0xcbc>
    ec30:	e8df f013 	tbh	[pc, r3, lsl #1]
    ec34:	00b60051 	.word	0x00b60051
    ec38:	00dd00b6 	.word	0x00dd00b6
    ec3c:	01670120 	.word	0x01670120
    ec40:	019e0781 	.word	0x019e0781
    ec44:	01ac01a3 	.word	0x01ac01a3
    ec48:	01be01b5 	.word	0x01be01b5
    ec4c:	01d901d0 	.word	0x01d901d0
    ec50:	01eb01e2 	.word	0x01eb01e2
    ec54:	01fd01f4 	.word	0x01fd01f4
    ec58:	020f0206 	.word	0x020f0206
    ec5c:	02210218 	.word	0x02210218
    ec60:	02680256 	.word	0x02680256
    ec64:	02880283 	.word	0x02880283
    ec68:	02880288 	.word	0x02880288
    ec6c:	033e033e 	.word	0x033e033e
    ec70:	033e033e 	.word	0x033e033e
    ec74:	033e033e 	.word	0x033e033e
    ec78:	02c6033e 	.word	0x02c6033e
    ec7c:	033e02c6 	.word	0x033e02c6
    ec80:	0343033e 	.word	0x0343033e
    ec84:	0352034d 	.word	0x0352034d
    ec88:	03f2038f 	.word	0x03f2038f
    ec8c:	03f2040d 	.word	0x03f2040d
    ec90:	042d042d 	.word	0x042d042d
    ec94:	04590195 	.word	0x04590195
    ec98:	048a046e 	.word	0x048a046e
    ec9c:	04940632 	.word	0x04940632
    eca0:	04e404de 	.word	0x04e404de
    eca4:	0632059c 	.word	0x0632059c
    eca8:	06320637 	.word	0x06320637
    ecac:	068e0632 	.word	0x068e0632
    ecb0:	0715068e 	.word	0x0715068e
    ecb4:	072a071f 	.word	0x072a071f
    ecb8:	07480710 	.word	0x07480710
    ecbc:	079f0795 	.word	0x079f0795
    ecc0:	063207a9 	.word	0x063207a9
    ecc4:	027107ca 	.word	0x027107ca
    ecc8:	0756027a 	.word	0x0756027a
    eccc:	033e00a4 	.word	0x033e00a4
    ecd0:	033e07d8 	.word	0x033e07d8
    ecd4:	033e      	.short	0x033e
    ecd6:	0776      	lsls	r6, r6, #29
    ecd8:	68af      	ldr	r7, [r5, #8]
    ecda:	d40f      	bmi.n	ecfc <d_print_comp+0x120>
    ecdc:	68ea      	ldr	r2, [r5, #12]
    ecde:	4639      	mov	r1, r7
    ece0:	f7fe f983 	bl	cfea <d_append_buffer>
    ece4:	9b03      	ldr	r3, [sp, #12]
    ece6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    ecea:	686b      	ldr	r3, [r5, #4]
    ecec:	3b01      	subs	r3, #1
    ecee:	606b      	str	r3, [r5, #4]
    ecf0:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    ecf4:	3b01      	subs	r3, #1
    ecf6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
    ecfa:	e781      	b.n	ec00 <d_print_comp+0x24>
    ecfc:	68eb      	ldr	r3, [r5, #12]
    ecfe:	eb07 0803 	add.w	r8, r7, r3
    ed02:	45b8      	cmp	r8, r7
    ed04:	d9ee      	bls.n	ece4 <d_print_comp+0x108>
    ed06:	eba8 0307 	sub.w	r3, r8, r7
    ed0a:	7839      	ldrb	r1, [r7, #0]
    ed0c:	2b03      	cmp	r3, #3
    ed0e:	dd0c      	ble.n	ed2a <d_print_comp+0x14e>
    ed10:	295f      	cmp	r1, #95	; 0x5f
    ed12:	d10a      	bne.n	ed2a <d_print_comp+0x14e>
    ed14:	787b      	ldrb	r3, [r7, #1]
    ed16:	2b5f      	cmp	r3, #95	; 0x5f
    ed18:	d107      	bne.n	ed2a <d_print_comp+0x14e>
    ed1a:	78bb      	ldrb	r3, [r7, #2]
    ed1c:	2b55      	cmp	r3, #85	; 0x55
    ed1e:	d104      	bne.n	ed2a <d_print_comp+0x14e>
    ed20:	1cfe      	adds	r6, r7, #3
    ed22:	2000      	movs	r0, #0
    ed24:	45b0      	cmp	r8, r6
    ed26:	46b1      	mov	r9, r6
    ed28:	d804      	bhi.n	ed34 <d_print_comp+0x158>
    ed2a:	4620      	mov	r0, r4
    ed2c:	46b9      	mov	r9, r7
    ed2e:	f7fe f94a 	bl	cfc6 <d_append_char>
    ed32:	e020      	b.n	ed76 <d_print_comp+0x19a>
    ed34:	f816 3b01 	ldrb.w	r3, [r6], #1
    ed38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ed3c:	fa5f fc82 	uxtb.w	ip, r2
    ed40:	f1bc 0f09 	cmp.w	ip, #9
    ed44:	d803      	bhi.n	ed4e <d_print_comp+0x172>
    ed46:	4613      	mov	r3, r2
    ed48:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    ed4c:	e7ea      	b.n	ed24 <d_print_comp+0x148>
    ed4e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    ed52:	2a05      	cmp	r2, #5
    ed54:	d801      	bhi.n	ed5a <d_print_comp+0x17e>
    ed56:	3b37      	subs	r3, #55	; 0x37
    ed58:	e7f6      	b.n	ed48 <d_print_comp+0x16c>
    ed5a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    ed5e:	2a05      	cmp	r2, #5
    ed60:	d801      	bhi.n	ed66 <d_print_comp+0x18a>
    ed62:	3b57      	subs	r3, #87	; 0x57
    ed64:	e7f0      	b.n	ed48 <d_print_comp+0x16c>
    ed66:	2b5f      	cmp	r3, #95	; 0x5f
    ed68:	d1df      	bne.n	ed2a <d_print_comp+0x14e>
    ed6a:	28ff      	cmp	r0, #255	; 0xff
    ed6c:	d8dd      	bhi.n	ed2a <d_print_comp+0x14e>
    ed6e:	b2c1      	uxtb	r1, r0
    ed70:	4620      	mov	r0, r4
    ed72:	f7fe f928 	bl	cfc6 <d_append_char>
    ed76:	f109 0701 	add.w	r7, r9, #1
    ed7a:	e7c2      	b.n	ed02 <d_print_comp+0x126>
    ed7c:	68aa      	ldr	r2, [r5, #8]
    ed7e:	4631      	mov	r1, r6
    ed80:	f7ff ff2c 	bl	ebdc <d_print_comp>
    ed84:	4620      	mov	r0, r4
    ed86:	49c0      	ldr	r1, [pc, #768]	; (f088 <d_print_comp+0x4ac>)
    ed88:	f7fe f948 	bl	d01c <d_append_string>
    ed8c:	4631      	mov	r1, r6
    ed8e:	4620      	mov	r0, r4
    ed90:	68ea      	ldr	r2, [r5, #12]
    ed92:	f7ff ff23 	bl	ebdc <d_print_comp>
    ed96:	215d      	movs	r1, #93	; 0x5d
    ed98:	4620      	mov	r0, r4
    ed9a:	f7fe f914 	bl	cfc6 <d_append_char>
    ed9e:	e7a1      	b.n	ece4 <d_print_comp+0x108>
    eda0:	68aa      	ldr	r2, [r5, #8]
    eda2:	4631      	mov	r1, r6
    eda4:	f7ff ff1a 	bl	ebdc <d_print_comp>
    eda8:	0770      	lsls	r0, r6, #29
    edaa:	d41b      	bmi.n	ede4 <d_print_comp+0x208>
    edac:	49b7      	ldr	r1, [pc, #732]	; (f08c <d_print_comp+0x4b0>)
    edae:	4620      	mov	r0, r4
    edb0:	f7fe f934 	bl	d01c <d_append_string>
    edb4:	68ef      	ldr	r7, [r5, #12]
    edb6:	783b      	ldrb	r3, [r7, #0]
    edb8:	2b47      	cmp	r3, #71	; 0x47
    edba:	d10d      	bne.n	edd8 <d_print_comp+0x1fc>
    edbc:	49b4      	ldr	r1, [pc, #720]	; (f090 <d_print_comp+0x4b4>)
    edbe:	4620      	mov	r0, r4
    edc0:	f7fe f92c 	bl	d01c <d_append_string>
    edc4:	68f9      	ldr	r1, [r7, #12]
    edc6:	4620      	mov	r0, r4
    edc8:	3101      	adds	r1, #1
    edca:	f7fe f934 	bl	d036 <d_append_num>
    edce:	49b1      	ldr	r1, [pc, #708]	; (f094 <d_print_comp+0x4b8>)
    edd0:	4620      	mov	r0, r4
    edd2:	f7fe f923 	bl	d01c <d_append_string>
    edd6:	68bf      	ldr	r7, [r7, #8]
    edd8:	463a      	mov	r2, r7
    edda:	4631      	mov	r1, r6
    eddc:	4620      	mov	r0, r4
    edde:	f7ff fefd 	bl	ebdc <d_print_comp>
    ede2:	e77f      	b.n	ece4 <d_print_comp+0x108>
    ede4:	212e      	movs	r1, #46	; 0x2e
    ede6:	4620      	mov	r0, r4
    ede8:	f7fe f8ed 	bl	cfc6 <d_append_char>
    edec:	e7e2      	b.n	edb4 <d_print_comp+0x1d8>
    edee:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    edf2:	2200      	movs	r2, #0
    edf4:	68af      	ldr	r7, [r5, #8]
    edf6:	9301      	str	r3, [sp, #4]
    edf8:	ab06      	add	r3, sp, #24
    edfa:	4690      	mov	r8, r2
    edfc:	4611      	mov	r1, r2
    edfe:	4699      	mov	r9, r3
    ee00:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
    ee04:	b117      	cbz	r7, ee0c <d_print_comp+0x230>
    ee06:	f1b8 0f04 	cmp.w	r8, #4
    ee0a:	d103      	bne.n	ee14 <d_print_comp+0x238>
    ee0c:	2301      	movs	r3, #1
    ee0e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    ee12:	e767      	b.n	ece4 <d_print_comp+0x108>
    ee14:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
    ee18:	f108 0801 	add.w	r8, r8, #1
    ee1c:	f8d4 a110 	ldr.w	sl, [r4, #272]	; 0x110
    ee20:	601a      	str	r2, [r3, #0]
    ee22:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    ee26:	f8c3 a00c 	str.w	sl, [r3, #12]
    ee2a:	e9c3 7101 	strd	r7, r1, [r3, #4]
    ee2e:	783a      	ldrb	r2, [r7, #0]
    ee30:	4610      	mov	r0, r2
    ee32:	f7fd ffbd 	bl	cdb0 <is_fnqual_component_type>
    ee36:	3310      	adds	r3, #16
    ee38:	2800      	cmp	r0, #0
    ee3a:	f000 86e6 	beq.w	fc0a <d_print_comp+0x102e>
    ee3e:	68bf      	ldr	r7, [r7, #8]
    ee40:	e7e0      	b.n	ee04 <d_print_comp+0x228>
    ee42:	f1b8 0f04 	cmp.w	r8, #4
    ee46:	f109 0c10 	add.w	ip, r9, #16
    ee4a:	d0df      	beq.n	ee0c <d_print_comp+0x230>
    ee4c:	f1a9 0e10 	sub.w	lr, r9, #16
    ee50:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
    ee54:	f108 0801 	add.w	r8, r8, #1
    ee58:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
    ee5c:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    ee60:	f84c ec10 	str.w	lr, [ip, #-16]
    ee64:	f849 ac04 	str.w	sl, [r9, #-4]
    ee68:	e949 7b03 	strd	r7, fp, [r9, #-12]
    ee6c:	46e1      	mov	r9, ip
    ee6e:	68bf      	ldr	r7, [r7, #8]
    ee70:	f000 bed9 	b.w	fc26 <d_print_comp+0x104a>
    ee74:	2300      	movs	r3, #0
    ee76:	0771      	lsls	r1, r6, #29
    ee78:	f8d0 8148 	ldr.w	r8, [r0, #328]	; 0x148
    ee7c:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
    ee80:	68af      	ldr	r7, [r5, #8]
    ee82:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
    ee86:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    ee8a:	d517      	bpl.n	eebc <d_print_comp+0x2e0>
    ee8c:	783b      	ldrb	r3, [r7, #0]
    ee8e:	b9ab      	cbnz	r3, eebc <d_print_comp+0x2e0>
    ee90:	68fa      	ldr	r2, [r7, #12]
    ee92:	2a06      	cmp	r2, #6
    ee94:	d112      	bne.n	eebc <d_print_comp+0x2e0>
    ee96:	4980      	ldr	r1, [pc, #512]	; (f098 <d_print_comp+0x4bc>)
    ee98:	68b8      	ldr	r0, [r7, #8]
    ee9a:	f022 f905 	bl	310a8 <strncmp>
    ee9e:	b968      	cbnz	r0, eebc <d_print_comp+0x2e0>
    eea0:	4631      	mov	r1, r6
    eea2:	4620      	mov	r0, r4
    eea4:	68ea      	ldr	r2, [r5, #12]
    eea6:	f7ff fe99 	bl	ebdc <d_print_comp>
    eeaa:	497c      	ldr	r1, [pc, #496]	; (f09c <d_print_comp+0x4c0>)
    eeac:	4620      	mov	r0, r4
    eeae:	f7fe f8b5 	bl	d01c <d_append_string>
    eeb2:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
    eeb6:	f8c4 8148 	str.w	r8, [r4, #328]	; 0x148
    eeba:	e713      	b.n	ece4 <d_print_comp+0x108>
    eebc:	463a      	mov	r2, r7
    eebe:	4631      	mov	r1, r6
    eec0:	4620      	mov	r0, r4
    eec2:	f7ff fe8b 	bl	ebdc <d_print_comp>
    eec6:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    eeca:	2b3c      	cmp	r3, #60	; 0x3c
    eecc:	d103      	bne.n	eed6 <d_print_comp+0x2fa>
    eece:	2120      	movs	r1, #32
    eed0:	4620      	mov	r0, r4
    eed2:	f7fe f878 	bl	cfc6 <d_append_char>
    eed6:	213c      	movs	r1, #60	; 0x3c
    eed8:	4620      	mov	r0, r4
    eeda:	f7fe f874 	bl	cfc6 <d_append_char>
    eede:	68ea      	ldr	r2, [r5, #12]
    eee0:	4631      	mov	r1, r6
    eee2:	4620      	mov	r0, r4
    eee4:	f7ff fe7a 	bl	ebdc <d_print_comp>
    eee8:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    eeec:	2b3e      	cmp	r3, #62	; 0x3e
    eeee:	d103      	bne.n	eef8 <d_print_comp+0x31c>
    eef0:	2120      	movs	r1, #32
    eef2:	4620      	mov	r0, r4
    eef4:	f7fe f867 	bl	cfc6 <d_append_char>
    eef8:	213e      	movs	r1, #62	; 0x3e
    eefa:	4620      	mov	r0, r4
    eefc:	f7fe f863 	bl	cfc6 <d_append_char>
    ef00:	e7d7      	b.n	eeb2 <d_print_comp+0x2d6>
    ef02:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
    ef06:	b14b      	cbz	r3, ef1c <d_print_comp+0x340>
    ef08:	2205      	movs	r2, #5
    ef0a:	4965      	ldr	r1, [pc, #404]	; (f0a0 <d_print_comp+0x4c4>)
    ef0c:	f7fe f86d 	bl	cfea <d_append_buffer>
    ef10:	68a9      	ldr	r1, [r5, #8]
    ef12:	4620      	mov	r0, r4
    ef14:	3101      	adds	r1, #1
    ef16:	f7fe f88e 	bl	d036 <d_append_num>
    ef1a:	e6e3      	b.n	ece4 <d_print_comp+0x108>
    ef1c:	f105 0108 	add.w	r1, r5, #8
    ef20:	f7fe fa19 	bl	d356 <d_lookup_template_argument.isra.0>
    ef24:	4602      	mov	r2, r0
    ef26:	b150      	cbz	r0, ef3e <d_print_comp+0x362>
    ef28:	7803      	ldrb	r3, [r0, #0]
    ef2a:	2b2f      	cmp	r3, #47	; 0x2f
    ef2c:	d10b      	bne.n	ef46 <d_print_comp+0x36a>
    ef2e:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    ef32:	2900      	cmp	r1, #0
    ef34:	db07      	blt.n	ef46 <d_print_comp+0x36a>
    ef36:	f7fe f9c7 	bl	d2c8 <d_index_template_argument.part.0>
    ef3a:	4602      	mov	r2, r0
    ef3c:	b918      	cbnz	r0, ef46 <d_print_comp+0x36a>
    ef3e:	2301      	movs	r3, #1
    ef40:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    ef44:	e6ce      	b.n	ece4 <d_print_comp+0x108>
    ef46:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
    ef4a:	4631      	mov	r1, r6
    ef4c:	4620      	mov	r0, r4
    ef4e:	683b      	ldr	r3, [r7, #0]
    ef50:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    ef54:	f7ff fe42 	bl	ebdc <d_print_comp>
    ef58:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    ef5c:	e6c2      	b.n	ece4 <d_print_comp+0x108>
    ef5e:	4951      	ldr	r1, [pc, #324]	; (f0a4 <d_print_comp+0x4c8>)
    ef60:	f7fe f85c 	bl	d01c <d_append_string>
    ef64:	68aa      	ldr	r2, [r5, #8]
    ef66:	4631      	mov	r1, r6
    ef68:	4620      	mov	r0, r4
    ef6a:	f7ff fe37 	bl	ebdc <d_print_comp>
    ef6e:	e6b9      	b.n	ece4 <d_print_comp+0x108>
    ef70:	68ea      	ldr	r2, [r5, #12]
    ef72:	4631      	mov	r1, r6
    ef74:	f7ff fe32 	bl	ebdc <d_print_comp>
    ef78:	e6b4      	b.n	ece4 <d_print_comp+0x108>
    ef7a:	217e      	movs	r1, #126	; 0x7e
    ef7c:	f7fe f823 	bl	cfc6 <d_append_char>
    ef80:	68ea      	ldr	r2, [r5, #12]
    ef82:	4631      	mov	r1, r6
    ef84:	4620      	mov	r0, r4
    ef86:	f7ff fe29 	bl	ebdc <d_print_comp>
    ef8a:	e6ab      	b.n	ece4 <d_print_comp+0x108>
    ef8c:	4946      	ldr	r1, [pc, #280]	; (f0a8 <d_print_comp+0x4cc>)
    ef8e:	f7fe f845 	bl	d01c <d_append_string>
    ef92:	68aa      	ldr	r2, [r5, #8]
    ef94:	4631      	mov	r1, r6
    ef96:	4620      	mov	r0, r4
    ef98:	f7ff fe20 	bl	ebdc <d_print_comp>
    ef9c:	e6a2      	b.n	ece4 <d_print_comp+0x108>
    ef9e:	4943      	ldr	r1, [pc, #268]	; (f0ac <d_print_comp+0x4d0>)
    efa0:	f7fe f83c 	bl	d01c <d_append_string>
    efa4:	68aa      	ldr	r2, [r5, #8]
    efa6:	4631      	mov	r1, r6
    efa8:	4620      	mov	r0, r4
    efaa:	f7ff fe17 	bl	ebdc <d_print_comp>
    efae:	e699      	b.n	ece4 <d_print_comp+0x108>
    efb0:	493f      	ldr	r1, [pc, #252]	; (f0b0 <d_print_comp+0x4d4>)
    efb2:	f7fe f833 	bl	d01c <d_append_string>
    efb6:	68aa      	ldr	r2, [r5, #8]
    efb8:	4631      	mov	r1, r6
    efba:	4620      	mov	r0, r4
    efbc:	f7ff fe0e 	bl	ebdc <d_print_comp>
    efc0:	4620      	mov	r0, r4
    efc2:	493c      	ldr	r1, [pc, #240]	; (f0b4 <d_print_comp+0x4d8>)
    efc4:	f7fe f82a 	bl	d01c <d_append_string>
    efc8:	68ea      	ldr	r2, [r5, #12]
    efca:	4631      	mov	r1, r6
    efcc:	4620      	mov	r0, r4
    efce:	f7ff fe05 	bl	ebdc <d_print_comp>
    efd2:	e687      	b.n	ece4 <d_print_comp+0x108>
    efd4:	4938      	ldr	r1, [pc, #224]	; (f0b8 <d_print_comp+0x4dc>)
    efd6:	f7fe f821 	bl	d01c <d_append_string>
    efda:	68aa      	ldr	r2, [r5, #8]
    efdc:	4631      	mov	r1, r6
    efde:	4620      	mov	r0, r4
    efe0:	f7ff fdfc 	bl	ebdc <d_print_comp>
    efe4:	e67e      	b.n	ece4 <d_print_comp+0x108>
    efe6:	4935      	ldr	r1, [pc, #212]	; (f0bc <d_print_comp+0x4e0>)
    efe8:	f7fe f818 	bl	d01c <d_append_string>
    efec:	68aa      	ldr	r2, [r5, #8]
    efee:	4631      	mov	r1, r6
    eff0:	4620      	mov	r0, r4
    eff2:	f7ff fdf3 	bl	ebdc <d_print_comp>
    eff6:	e675      	b.n	ece4 <d_print_comp+0x108>
    eff8:	4931      	ldr	r1, [pc, #196]	; (f0c0 <d_print_comp+0x4e4>)
    effa:	f7fe f80f 	bl	d01c <d_append_string>
    effe:	68aa      	ldr	r2, [r5, #8]
    f000:	4631      	mov	r1, r6
    f002:	4620      	mov	r0, r4
    f004:	f7ff fdea 	bl	ebdc <d_print_comp>
    f008:	e66c      	b.n	ece4 <d_print_comp+0x108>
    f00a:	492e      	ldr	r1, [pc, #184]	; (f0c4 <d_print_comp+0x4e8>)
    f00c:	f7fe f806 	bl	d01c <d_append_string>
    f010:	68aa      	ldr	r2, [r5, #8]
    f012:	4631      	mov	r1, r6
    f014:	4620      	mov	r0, r4
    f016:	f7ff fde1 	bl	ebdc <d_print_comp>
    f01a:	e663      	b.n	ece4 <d_print_comp+0x108>
    f01c:	492a      	ldr	r1, [pc, #168]	; (f0c8 <d_print_comp+0x4ec>)
    f01e:	f7fd fffd 	bl	d01c <d_append_string>
    f022:	68aa      	ldr	r2, [r5, #8]
    f024:	4631      	mov	r1, r6
    f026:	4620      	mov	r0, r4
    f028:	f7ff fdd8 	bl	ebdc <d_print_comp>
    f02c:	e65a      	b.n	ece4 <d_print_comp+0x108>
    f02e:	4927      	ldr	r1, [pc, #156]	; (f0cc <d_print_comp+0x4f0>)
    f030:	f7fd fff4 	bl	d01c <d_append_string>
    f034:	68aa      	ldr	r2, [r5, #8]
    f036:	4631      	mov	r1, r6
    f038:	4620      	mov	r0, r4
    f03a:	f7ff fdcf 	bl	ebdc <d_print_comp>
    f03e:	e651      	b.n	ece4 <d_print_comp+0x108>
    f040:	4923      	ldr	r1, [pc, #140]	; (f0d0 <d_print_comp+0x4f4>)
    f042:	f7fd ffeb 	bl	d01c <d_append_string>
    f046:	68aa      	ldr	r2, [r5, #8]
    f048:	4631      	mov	r1, r6
    f04a:	4620      	mov	r0, r4
    f04c:	f7ff fdc6 	bl	ebdc <d_print_comp>
    f050:	e648      	b.n	ece4 <d_print_comp+0x108>
    f052:	4920      	ldr	r1, [pc, #128]	; (f0d4 <d_print_comp+0x4f8>)
    f054:	f7fd ffe2 	bl	d01c <d_append_string>
    f058:	68aa      	ldr	r2, [r5, #8]
    f05a:	4631      	mov	r1, r6
    f05c:	4620      	mov	r0, r4
    f05e:	f7ff fdbd 	bl	ebdc <d_print_comp>
    f062:	e63f      	b.n	ece4 <d_print_comp+0x108>
    f064:	491c      	ldr	r1, [pc, #112]	; (f0d8 <d_print_comp+0x4fc>)
    f066:	f7fd ffd9 	bl	d01c <d_append_string>
    f06a:	68aa      	ldr	r2, [r5, #8]
    f06c:	4631      	mov	r1, r6
    f06e:	4620      	mov	r0, r4
    f070:	f7ff fdb4 	bl	ebdc <d_print_comp>
    f074:	e636      	b.n	ece4 <d_print_comp+0x108>
    f076:	4919      	ldr	r1, [pc, #100]	; (f0dc <d_print_comp+0x500>)
    f078:	f7fd ffd0 	bl	d01c <d_append_string>
    f07c:	68aa      	ldr	r2, [r5, #8]
    f07e:	4631      	mov	r1, r6
    f080:	4620      	mov	r0, r4
    f082:	f7ff fdab 	bl	ebdc <d_print_comp>
    f086:	e62d      	b.n	ece4 <d_print_comp+0x108>
    f088:	00036fa7 	.word	0x00036fa7
    f08c:	00036fbc 	.word	0x00036fbc
    f090:	00036fad 	.word	0x00036fad
    f094:	00036fbb 	.word	0x00036fbb
    f098:	00036fbf 	.word	0x00036fbf
    f09c:	00037467 	.word	0x00037467
    f0a0:	00036fc6 	.word	0x00036fc6
    f0a4:	00036fcc 	.word	0x00036fcc
    f0a8:	00037001 	.word	0x00037001
    f0ac:	00036feb 	.word	0x00036feb
    f0b0:	00036ff4 	.word	0x00036ff4
    f0b4:	0003700d 	.word	0x0003700d
    f0b8:	00037012 	.word	0x00037012
    f0bc:	00037020 	.word	0x00037020
    f0c0:	00037033 	.word	0x00037033
    f0c4:	00037044 	.word	0x00037044
    f0c8:	00037048 	.word	0x00037048
    f0cc:	0003705a 	.word	0x0003705a
    f0d0:	00037075 	.word	0x00037075
    f0d4:	00037085 	.word	0x00037085
    f0d8:	00037099 	.word	0x00037099
    f0dc:	000370b0 	.word	0x000370b0
    f0e0:	49b8      	ldr	r1, [pc, #736]	; (f3c4 <d_print_comp+0x7e8>)
    f0e2:	f7fd ff9b 	bl	d01c <d_append_string>
    f0e6:	68ea      	ldr	r2, [r5, #12]
    f0e8:	4631      	mov	r1, r6
    f0ea:	4620      	mov	r0, r4
    f0ec:	f7ff fd76 	bl	ebdc <d_print_comp>
    f0f0:	4620      	mov	r0, r4
    f0f2:	49b5      	ldr	r1, [pc, #724]	; (f3c8 <d_print_comp+0x7ec>)
    f0f4:	f7fd ff92 	bl	d01c <d_append_string>
    f0f8:	68aa      	ldr	r2, [r5, #8]
    f0fa:	4631      	mov	r1, r6
    f0fc:	4620      	mov	r0, r4
    f0fe:	f7ff fd6d 	bl	ebdc <d_print_comp>
    f102:	e5ef      	b.n	ece4 <d_print_comp+0x108>
    f104:	49b1      	ldr	r1, [pc, #708]	; (f3cc <d_print_comp+0x7f0>)
    f106:	f7fd ff89 	bl	d01c <d_append_string>
    f10a:	68aa      	ldr	r2, [r5, #8]
    f10c:	4631      	mov	r1, r6
    f10e:	4620      	mov	r0, r4
    f110:	f7ff fd64 	bl	ebdc <d_print_comp>
    f114:	e5e6      	b.n	ece4 <d_print_comp+0x108>
    f116:	49ae      	ldr	r1, [pc, #696]	; (f3d0 <d_print_comp+0x7f4>)
    f118:	f7fd ff80 	bl	d01c <d_append_string>
    f11c:	68aa      	ldr	r2, [r5, #8]
    f11e:	4631      	mov	r1, r6
    f120:	4620      	mov	r0, r4
    f122:	f7ff fd5b 	bl	ebdc <d_print_comp>
    f126:	e5dd      	b.n	ece4 <d_print_comp+0x108>
    f128:	49aa      	ldr	r1, [pc, #680]	; (f3d4 <d_print_comp+0x7f8>)
    f12a:	f7fd ff77 	bl	d01c <d_append_string>
    f12e:	68aa      	ldr	r2, [r5, #8]
    f130:	4631      	mov	r1, r6
    f132:	4620      	mov	r0, r4
    f134:	f7ff fd52 	bl	ebdc <d_print_comp>
    f138:	e5d4      	b.n	ece4 <d_print_comp+0x108>
    f13a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    f13e:	f7fd ff54 	bl	cfea <d_append_buffer>
    f142:	e5cf      	b.n	ece4 <d_print_comp+0x108>
    f144:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    f148:	bb22      	cbnz	r2, f194 <d_print_comp+0x5b8>
    f14a:	4690      	mov	r8, r2
    f14c:	462f      	mov	r7, r5
    f14e:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f152:	9707      	str	r7, [sp, #28]
    f154:	9306      	str	r3, [sp, #24]
    f156:	ab06      	add	r3, sp, #24
    f158:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f15c:	2300      	movs	r3, #0
    f15e:	9308      	str	r3, [sp, #32]
    f160:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    f164:	9309      	str	r3, [sp, #36]	; 0x24
    f166:	b902      	cbnz	r2, f16a <d_print_comp+0x58e>
    f168:	68ba      	ldr	r2, [r7, #8]
    f16a:	4631      	mov	r1, r6
    f16c:	4620      	mov	r0, r4
    f16e:	f7ff fd35 	bl	ebdc <d_print_comp>
    f172:	9b08      	ldr	r3, [sp, #32]
    f174:	b923      	cbnz	r3, f180 <d_print_comp+0x5a4>
    f176:	463a      	mov	r2, r7
    f178:	4631      	mov	r1, r6
    f17a:	4620      	mov	r0, r4
    f17c:	f000 fd9e 	bl	fcbc <d_print_mod>
    f180:	9b06      	ldr	r3, [sp, #24]
    f182:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f186:	f1b8 0f00 	cmp.w	r8, #0
    f18a:	f43f adab 	beq.w	ece4 <d_print_comp+0x108>
    f18e:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
    f192:	e5a7      	b.n	ece4 <d_print_comp+0x108>
    f194:	f8d2 8008 	ldr.w	r8, [r2, #8]
    f198:	f1b8 0f00 	cmp.w	r8, #0
    f19c:	d10e      	bne.n	f1bc <d_print_comp+0x5e0>
    f19e:	6851      	ldr	r1, [r2, #4]
    f1a0:	7809      	ldrb	r1, [r1, #0]
    f1a2:	f1a1 0019 	sub.w	r0, r1, #25
    f1a6:	2802      	cmp	r0, #2
    f1a8:	f200 8084 	bhi.w	f2b4 <d_print_comp+0x6d8>
    f1ac:	428b      	cmp	r3, r1
    f1ae:	d105      	bne.n	f1bc <d_print_comp+0x5e0>
    f1b0:	68aa      	ldr	r2, [r5, #8]
    f1b2:	4631      	mov	r1, r6
    f1b4:	4620      	mov	r0, r4
    f1b6:	f7ff fd11 	bl	ebdc <d_print_comp>
    f1ba:	e593      	b.n	ece4 <d_print_comp+0x108>
    f1bc:	6812      	ldr	r2, [r2, #0]
    f1be:	e7c3      	b.n	f148 <d_print_comp+0x56c>
    f1c0:	f8d0 8120 	ldr.w	r8, [r0, #288]	; 0x120
    f1c4:	68af      	ldr	r7, [r5, #8]
    f1c6:	f1b8 0f00 	cmp.w	r8, #0
    f1ca:	d165      	bne.n	f298 <d_print_comp+0x6bc>
    f1cc:	783b      	ldrb	r3, [r7, #0]
    f1ce:	2b05      	cmp	r3, #5
    f1d0:	d164      	bne.n	f29c <d_print_comp+0x6c0>
    f1d2:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    f1d6:	4642      	mov	r2, r8
    f1d8:	429a      	cmp	r2, r3
    f1da:	db07      	blt.n	f1ec <d_print_comp+0x610>
    f1dc:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    f1e0:	4293      	cmp	r3, r2
    f1e2:	db0d      	blt.n	f200 <d_print_comp+0x624>
    f1e4:	2301      	movs	r3, #1
    f1e6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    f1ea:	e57b      	b.n	ece4 <d_print_comp+0x108>
    f1ec:	f8d4 0130 	ldr.w	r0, [r4, #304]	; 0x130
    f1f0:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
    f1f4:	f850 0032 	ldr.w	r0, [r0, r2, lsl #3]
    f1f8:	4287      	cmp	r7, r0
    f1fa:	d039      	beq.n	f270 <d_print_comp+0x694>
    f1fc:	3201      	adds	r2, #1
    f1fe:	e7eb      	b.n	f1d8 <d_print_comp+0x5fc>
    f200:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
    f204:	1c58      	adds	r0, r3, #1
    f206:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    f20a:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
    f20e:	f841 7033 	str.w	r7, [r1, r3, lsl #3]
    f212:	1d13      	adds	r3, r2, #4
    f214:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    f218:	b9ca      	cbnz	r2, f24e <d_print_comp+0x672>
    f21a:	601a      	str	r2, [r3, #0]
    f21c:	f107 0108 	add.w	r1, r7, #8
    f220:	4620      	mov	r0, r4
    f222:	f7fe f898 	bl	d356 <d_lookup_template_argument.isra.0>
    f226:	4607      	mov	r7, r0
    f228:	b150      	cbz	r0, f240 <d_print_comp+0x664>
    f22a:	7803      	ldrb	r3, [r0, #0]
    f22c:	2b2f      	cmp	r3, #47	; 0x2f
    f22e:	d135      	bne.n	f29c <d_print_comp+0x6c0>
    f230:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    f234:	2900      	cmp	r1, #0
    f236:	db31      	blt.n	f29c <d_print_comp+0x6c0>
    f238:	f7fe f846 	bl	d2c8 <d_index_template_argument.part.0>
    f23c:	4607      	mov	r7, r0
    f23e:	bb68      	cbnz	r0, f29c <d_print_comp+0x6c0>
    f240:	f1b8 0f00 	cmp.w	r8, #0
    f244:	f43f ae7b 	beq.w	ef3e <d_print_comp+0x362>
    f248:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
    f24c:	e677      	b.n	ef3e <d_print_comp+0x362>
    f24e:	e9d4 1050 	ldrd	r1, r0, [r4, #320]	; 0x140
    f252:	4281      	cmp	r1, r0
    f254:	dac6      	bge.n	f1e4 <d_print_comp+0x608>
    f256:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
    f25a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    f25e:	3101      	adds	r1, #1
    f260:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
    f264:	6851      	ldr	r1, [r2, #4]
    f266:	6041      	str	r1, [r0, #4]
    f268:	6018      	str	r0, [r3, #0]
    f26a:	4603      	mov	r3, r0
    f26c:	6812      	ldr	r2, [r2, #0]
    f26e:	e7d3      	b.n	f218 <d_print_comp+0x63c>
    f270:	460b      	mov	r3, r1
    f272:	681a      	ldr	r2, [r3, #0]
    f274:	4297      	cmp	r7, r2
    f276:	d0d1      	beq.n	f21c <d_print_comp+0x640>
    f278:	4295      	cmp	r5, r2
    f27a:	d101      	bne.n	f280 <d_print_comp+0x6a4>
    f27c:	428b      	cmp	r3, r1
    f27e:	d1cd      	bne.n	f21c <d_print_comp+0x640>
    f280:	685b      	ldr	r3, [r3, #4]
    f282:	2b00      	cmp	r3, #0
    f284:	d1f5      	bne.n	f272 <d_print_comp+0x696>
    f286:	f8dc 3004 	ldr.w	r3, [ip, #4]
    f28a:	f04f 0801 	mov.w	r8, #1
    f28e:	f8d4 9110 	ldr.w	r9, [r4, #272]	; 0x110
    f292:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f296:	e7c1      	b.n	f21c <d_print_comp+0x640>
    f298:	f04f 0800 	mov.w	r8, #0
    f29c:	783b      	ldrb	r3, [r7, #0]
    f29e:	2b23      	cmp	r3, #35	; 0x23
    f2a0:	d009      	beq.n	f2b6 <d_print_comp+0x6da>
    f2a2:	782a      	ldrb	r2, [r5, #0]
    f2a4:	429a      	cmp	r2, r3
    f2a6:	d006      	beq.n	f2b6 <d_print_comp+0x6da>
    f2a8:	2b24      	cmp	r3, #36	; 0x24
    f2aa:	d103      	bne.n	f2b4 <d_print_comp+0x6d8>
    f2ac:	68ba      	ldr	r2, [r7, #8]
    f2ae:	e74d      	b.n	f14c <d_print_comp+0x570>
    f2b0:	f04f 0800 	mov.w	r8, #0
    f2b4:	462f      	mov	r7, r5
    f2b6:	2200      	movs	r2, #0
    f2b8:	e749      	b.n	f14e <d_print_comp+0x572>
    f2ba:	68ab      	ldr	r3, [r5, #8]
    f2bc:	0772      	lsls	r2, r6, #29
    f2be:	bf54      	ite	pl
    f2c0:	e9d3 1200 	ldrdpl	r1, r2, [r3]
    f2c4:	e9d3 1202 	ldrdmi	r1, r2, [r3, #8]
    f2c8:	f7fd fe8f 	bl	cfea <d_append_buffer>
    f2cc:	e50a      	b.n	ece4 <d_print_comp+0x108>
    f2ce:	68aa      	ldr	r2, [r5, #8]
    f2d0:	4631      	mov	r1, r6
    f2d2:	f7ff fc83 	bl	ebdc <d_print_comp>
    f2d6:	e505      	b.n	ece4 <d_print_comp+0x108>
    f2d8:	f016 0720 	ands.w	r7, r6, #32
    f2dc:	d007      	beq.n	f2ee <d_print_comp+0x712>
    f2de:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    f2e2:	f105 020c 	add.w	r2, r5, #12
    f2e6:	f026 0160 	bic.w	r1, r6, #96	; 0x60
    f2ea:	f000 fd81 	bl	fdf0 <d_print_function_type.isra.0>
    f2ee:	68aa      	ldr	r2, [r5, #8]
    f2f0:	b35a      	cbz	r2, f34a <d_print_comp+0x76e>
    f2f2:	f026 0160 	bic.w	r1, r6, #96	; 0x60
    f2f6:	b11f      	cbz	r7, f300 <d_print_comp+0x724>
    f2f8:	4620      	mov	r0, r4
    f2fa:	f7ff fc6f 	bl	ebdc <d_print_comp>
    f2fe:	e4f1      	b.n	ece4 <d_print_comp+0x108>
    f300:	0673      	lsls	r3, r6, #25
    f302:	d418      	bmi.n	f336 <d_print_comp+0x75a>
    f304:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f308:	4620      	mov	r0, r4
    f30a:	9306      	str	r3, [sp, #24]
    f30c:	ab06      	add	r3, sp, #24
    f30e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f312:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    f316:	e9cd 5707 	strd	r5, r7, [sp, #28]
    f31a:	9309      	str	r3, [sp, #36]	; 0x24
    f31c:	f7ff fc5e 	bl	ebdc <d_print_comp>
    f320:	9b06      	ldr	r3, [sp, #24]
    f322:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f326:	9b08      	ldr	r3, [sp, #32]
    f328:	2b00      	cmp	r3, #0
    f32a:	f47f acdb 	bne.w	ece4 <d_print_comp+0x108>
    f32e:	2120      	movs	r1, #32
    f330:	4620      	mov	r0, r4
    f332:	f7fd fe48 	bl	cfc6 <d_append_char>
    f336:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f33a:	f105 020c 	add.w	r2, r5, #12
    f33e:	f026 0160 	bic.w	r1, r6, #96	; 0x60
    f342:	4620      	mov	r0, r4
    f344:	f000 fd54 	bl	fdf0 <d_print_function_type.isra.0>
    f348:	e4cc      	b.n	ece4 <d_print_comp+0x108>
    f34a:	2f00      	cmp	r7, #0
    f34c:	f47f acca 	bne.w	ece4 <d_print_comp+0x108>
    f350:	e7f1      	b.n	f336 <d_print_comp+0x75a>
    f352:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
    f356:	2300      	movs	r3, #0
    f358:	2701      	movs	r7, #1
    f35a:	f10d 0818 	add.w	r8, sp, #24
    f35e:	9308      	str	r3, [sp, #32]
    f360:	46cc      	mov	ip, r9
    f362:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    f366:	46ba      	mov	sl, r7
    f368:	f8cd 9018 	str.w	r9, [sp, #24]
    f36c:	f8c0 8114 	str.w	r8, [r0, #276]	; 0x114
    f370:	9507      	str	r5, [sp, #28]
    f372:	9309      	str	r3, [sp, #36]	; 0x24
    f374:	f1bc 0f00 	cmp.w	ip, #0
    f378:	d005      	beq.n	f386 <d_print_comp+0x7aa>
    f37a:	f8dc 3004 	ldr.w	r3, [ip, #4]
    f37e:	781b      	ldrb	r3, [r3, #0]
    f380:	3b19      	subs	r3, #25
    f382:	2b02      	cmp	r3, #2
    f384:	d915      	bls.n	f3b2 <d_print_comp+0x7d6>
    f386:	68ea      	ldr	r2, [r5, #12]
    f388:	4631      	mov	r1, r6
    f38a:	4620      	mov	r0, r4
    f38c:	f7ff fc26 	bl	ebdc <d_print_comp>
    f390:	9b08      	ldr	r3, [sp, #32]
    f392:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
    f396:	2b00      	cmp	r3, #0
    f398:	f47f aca4 	bne.w	ece4 <d_print_comp+0x108>
    f39c:	2f01      	cmp	r7, #1
    f39e:	d132      	bne.n	f406 <d_print_comp+0x82a>
    f3a0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f3a4:	f105 0208 	add.w	r2, r5, #8
    f3a8:	4631      	mov	r1, r6
    f3aa:	4620      	mov	r0, r4
    f3ac:	f000 fdf4 	bl	ff98 <d_print_array_type.isra.0>
    f3b0:	e498      	b.n	ece4 <d_print_comp+0x108>
    f3b2:	f8dc 3008 	ldr.w	r3, [ip, #8]
    f3b6:	bb1b      	cbnz	r3, f400 <d_print_comp+0x824>
    f3b8:	2f03      	cmp	r7, #3
    f3ba:	d90d      	bls.n	f3d8 <d_print_comp+0x7fc>
    f3bc:	2301      	movs	r3, #1
    f3be:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    f3c2:	e48f      	b.n	ece4 <d_print_comp+0x108>
    f3c4:	000370ca 	.word	0x000370ca
    f3c8:	00036fee 	.word	0x00036fee
    f3cc:	000370e0 	.word	0x000370e0
    f3d0:	000370f6 	.word	0x000370f6
    f3d4:	000370f2 	.word	0x000370f2
    f3d8:	ab16      	add	r3, sp, #88	; 0x58
    f3da:	eb03 1b07 	add.w	fp, r3, r7, lsl #4
    f3de:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
    f3e2:	f1ab 0e40 	sub.w	lr, fp, #64	; 0x40
    f3e6:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    f3ea:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
    f3ee:	f84b 3c40 	str.w	r3, [fp, #-64]
    f3f2:	eb08 1307 	add.w	r3, r8, r7, lsl #4
    f3f6:	3701      	adds	r7, #1
    f3f8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f3fc:	f8cc a008 	str.w	sl, [ip, #8]
    f400:	f8dc c000 	ldr.w	ip, [ip]
    f404:	e7b6      	b.n	f374 <d_print_comp+0x798>
    f406:	3f01      	subs	r7, #1
    f408:	4631      	mov	r1, r6
    f40a:	4620      	mov	r0, r4
    f40c:	eb08 1307 	add.w	r3, r8, r7, lsl #4
    f410:	685a      	ldr	r2, [r3, #4]
    f412:	f000 fc53 	bl	fcbc <d_print_mod>
    f416:	e7c1      	b.n	f39c <d_print_comp+0x7c0>
    f418:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
    f41c:	4631      	mov	r1, r6
    f41e:	68ea      	ldr	r2, [r5, #12]
    f420:	9306      	str	r3, [sp, #24]
    f422:	ab06      	add	r3, sp, #24
    f424:	9507      	str	r5, [sp, #28]
    f426:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    f42a:	2300      	movs	r3, #0
    f42c:	9308      	str	r3, [sp, #32]
    f42e:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
    f432:	9309      	str	r3, [sp, #36]	; 0x24
    f434:	f7ff fbd2 	bl	ebdc <d_print_comp>
    f438:	9b08      	ldr	r3, [sp, #32]
    f43a:	b923      	cbnz	r3, f446 <d_print_comp+0x86a>
    f43c:	462a      	mov	r2, r5
    f43e:	4631      	mov	r1, r6
    f440:	4620      	mov	r0, r4
    f442:	f000 fc3b 	bl	fcbc <d_print_mod>
    f446:	9b06      	ldr	r3, [sp, #24]
    f448:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    f44c:	e44a      	b.n	ece4 <d_print_comp+0x108>
    f44e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    f452:	b113      	cbz	r3, f45a <d_print_comp+0x87e>
    f454:	49b9      	ldr	r1, [pc, #740]	; (f73c <d_print_comp+0xb60>)
    f456:	f7fd fde1 	bl	d01c <d_append_string>
    f45a:	68aa      	ldr	r2, [r5, #8]
    f45c:	4bb8      	ldr	r3, [pc, #736]	; (f740 <d_print_comp+0xb64>)
    f45e:	6891      	ldr	r1, [r2, #8]
    f460:	4299      	cmp	r1, r3
    f462:	d007      	beq.n	f474 <d_print_comp+0x898>
    f464:	4631      	mov	r1, r6
    f466:	4620      	mov	r0, r4
    f468:	f7ff fbb8 	bl	ebdc <d_print_comp>
    f46c:	2120      	movs	r1, #32
    f46e:	4620      	mov	r0, r4
    f470:	f7fd fda9 	bl	cfc6 <d_append_char>
    f474:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
    f478:	b123      	cbz	r3, f484 <d_print_comp+0x8a8>
    f47a:	49b2      	ldr	r1, [pc, #712]	; (f744 <d_print_comp+0xb68>)
    f47c:	4620      	mov	r0, r4
    f47e:	f7fd fdcd 	bl	d01c <d_append_string>
    f482:	e42f      	b.n	ece4 <d_print_comp+0x108>
    f484:	49b0      	ldr	r1, [pc, #704]	; (f748 <d_print_comp+0xb6c>)
    f486:	4620      	mov	r0, r4
    f488:	f7fd fdc8 	bl	d01c <d_append_string>
    f48c:	e42a      	b.n	ece4 <d_print_comp+0x108>
    f48e:	68aa      	ldr	r2, [r5, #8]
    f490:	b112      	cbz	r2, f498 <d_print_comp+0x8bc>
    f492:	4631      	mov	r1, r6
    f494:	f7ff fba2 	bl	ebdc <d_print_comp>
    f498:	68eb      	ldr	r3, [r5, #12]
    f49a:	2b00      	cmp	r3, #0
    f49c:	f43f ac22 	beq.w	ece4 <d_print_comp+0x108>
    f4a0:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f4a4:	2bfd      	cmp	r3, #253	; 0xfd
    f4a6:	d902      	bls.n	f4ae <d_print_comp+0x8d2>
    f4a8:	4620      	mov	r0, r4
    f4aa:	f7fd fd7b 	bl	cfa4 <d_print_flush>
    f4ae:	49a7      	ldr	r1, [pc, #668]	; (f74c <d_print_comp+0xb70>)
    f4b0:	4620      	mov	r0, r4
    f4b2:	f7fd fdb3 	bl	d01c <d_append_string>
    f4b6:	68ea      	ldr	r2, [r5, #12]
    f4b8:	4631      	mov	r1, r6
    f4ba:	4620      	mov	r0, r4
    f4bc:	f8d4 8128 	ldr.w	r8, [r4, #296]	; 0x128
    f4c0:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
    f4c4:	f7ff fb8a 	bl	ebdc <d_print_comp>
    f4c8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
    f4cc:	4598      	cmp	r8, r3
    f4ce:	f47f ac09 	bne.w	ece4 <d_print_comp+0x108>
    f4d2:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    f4d6:	429f      	cmp	r7, r3
    f4d8:	f47f ac04 	bne.w	ece4 <d_print_comp+0x108>
    f4dc:	3f02      	subs	r7, #2
    f4de:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
    f4e2:	f7ff bbff 	b.w	ece4 <d_print_comp+0x108>
    f4e6:	e9d5 2702 	ldrd	r2, r7, [r5, #8]
    f4ea:	b112      	cbz	r2, f4f2 <d_print_comp+0x916>
    f4ec:	4631      	mov	r1, r6
    f4ee:	f7ff fb75 	bl	ebdc <d_print_comp>
    f4f2:	4620      	mov	r0, r4
    f4f4:	217b      	movs	r1, #123	; 0x7b
    f4f6:	f7fd fd66 	bl	cfc6 <d_append_char>
    f4fa:	4631      	mov	r1, r6
    f4fc:	4620      	mov	r0, r4
    f4fe:	463a      	mov	r2, r7
    f500:	f7ff fb6c 	bl	ebdc <d_print_comp>
    f504:	217d      	movs	r1, #125	; 0x7d
    f506:	4620      	mov	r0, r4
    f508:	f7fd fd5d 	bl	cfc6 <d_append_char>
    f50c:	f7ff bbea 	b.w	ece4 <d_print_comp+0x108>
    f510:	68af      	ldr	r7, [r5, #8]
    f512:	498f      	ldr	r1, [pc, #572]	; (f750 <d_print_comp+0xb74>)
    f514:	68be      	ldr	r6, [r7, #8]
    f516:	f7fd fd81 	bl	d01c <d_append_string>
    f51a:	687b      	ldr	r3, [r7, #4]
    f51c:	781b      	ldrb	r3, [r3, #0]
    f51e:	3b61      	subs	r3, #97	; 0x61
    f520:	2b19      	cmp	r3, #25
    f522:	d803      	bhi.n	f52c <d_print_comp+0x950>
    f524:	2120      	movs	r1, #32
    f526:	4620      	mov	r0, r4
    f528:	f7fd fd4d 	bl	cfc6 <d_append_char>
    f52c:	6879      	ldr	r1, [r7, #4]
    f52e:	4620      	mov	r0, r4
    f530:	198b      	adds	r3, r1, r6
    f532:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    f536:	2b20      	cmp	r3, #32
    f538:	bf08      	it	eq
    f53a:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
    f53e:	4632      	mov	r2, r6
    f540:	f7fd fd53 	bl	cfea <d_append_buffer>
    f544:	f7ff bbce 	b.w	ece4 <d_print_comp+0x108>
    f548:	4982      	ldr	r1, [pc, #520]	; (f754 <d_print_comp+0xb78>)
    f54a:	f7fd fd67 	bl	d01c <d_append_string>
    f54e:	68ea      	ldr	r2, [r5, #12]
    f550:	4631      	mov	r1, r6
    f552:	4620      	mov	r0, r4
    f554:	f7ff fb42 	bl	ebdc <d_print_comp>
    f558:	f7ff bbc4 	b.w	ece4 <d_print_comp+0x108>
    f55c:	497d      	ldr	r1, [pc, #500]	; (f754 <d_print_comp+0xb78>)
    f55e:	f7fd fd5d 	bl	d01c <d_append_string>
    f562:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    f566:	b133      	cbz	r3, f576 <d_print_comp+0x99a>
    f568:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    f56c:	9307      	str	r3, [sp, #28]
    f56e:	9206      	str	r2, [sp, #24]
    f570:	aa06      	add	r2, sp, #24
    f572:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    f576:	68aa      	ldr	r2, [r5, #8]
    f578:	7813      	ldrb	r3, [r2, #0]
    f57a:	2b04      	cmp	r3, #4
    f57c:	d00d      	beq.n	f59a <d_print_comp+0x9be>
    f57e:	4631      	mov	r1, r6
    f580:	4620      	mov	r0, r4
    f582:	f7ff fb2b 	bl	ebdc <d_print_comp>
    f586:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    f58a:	2b00      	cmp	r3, #0
    f58c:	f43f abaa 	beq.w	ece4 <d_print_comp+0x108>
    f590:	9b06      	ldr	r3, [sp, #24]
    f592:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f596:	f7ff bba5 	b.w	ece4 <d_print_comp+0x108>
    f59a:	6892      	ldr	r2, [r2, #8]
    f59c:	4631      	mov	r1, r6
    f59e:	4620      	mov	r0, r4
    f5a0:	f7ff fb1c 	bl	ebdc <d_print_comp>
    f5a4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    f5a8:	b113      	cbz	r3, f5b0 <d_print_comp+0x9d4>
    f5aa:	9b06      	ldr	r3, [sp, #24]
    f5ac:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f5b0:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    f5b4:	2b3c      	cmp	r3, #60	; 0x3c
    f5b6:	d103      	bne.n	f5c0 <d_print_comp+0x9e4>
    f5b8:	2120      	movs	r1, #32
    f5ba:	4620      	mov	r0, r4
    f5bc:	f7fd fd03 	bl	cfc6 <d_append_char>
    f5c0:	213c      	movs	r1, #60	; 0x3c
    f5c2:	4620      	mov	r0, r4
    f5c4:	f7fd fcff 	bl	cfc6 <d_append_char>
    f5c8:	68ab      	ldr	r3, [r5, #8]
    f5ca:	4631      	mov	r1, r6
    f5cc:	4620      	mov	r0, r4
    f5ce:	68da      	ldr	r2, [r3, #12]
    f5d0:	f7ff fb04 	bl	ebdc <d_print_comp>
    f5d4:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    f5d8:	2b3e      	cmp	r3, #62	; 0x3e
    f5da:	d103      	bne.n	f5e4 <d_print_comp+0xa08>
    f5dc:	2120      	movs	r1, #32
    f5de:	4620      	mov	r0, r4
    f5e0:	f7fd fcf1 	bl	cfc6 <d_append_char>
    f5e4:	213e      	movs	r1, #62	; 0x3e
    f5e6:	4620      	mov	r0, r4
    f5e8:	f7fd fced 	bl	cfc6 <d_append_char>
    f5ec:	f7ff bb7a 	b.w	ece4 <d_print_comp+0x108>
    f5f0:	68aa      	ldr	r2, [r5, #8]
    f5f2:	4631      	mov	r1, r6
    f5f4:	f000 fd14 	bl	10020 <d_print_expr_op>
    f5f8:	f7ff bb74 	b.w	ece4 <d_print_comp+0x108>
    f5fc:	e9d5 a702 	ldrd	sl, r7, [r5, #8]
    f600:	f89a 3000 	ldrb.w	r3, [sl]
    f604:	2b32      	cmp	r3, #50	; 0x32
    f606:	d134      	bne.n	f672 <d_print_comp+0xa96>
    f608:	f8da 3008 	ldr.w	r3, [sl, #8]
    f60c:	4952      	ldr	r1, [pc, #328]	; (f758 <d_print_comp+0xb7c>)
    f60e:	f8d3 9000 	ldr.w	r9, [r3]
    f612:	4648      	mov	r0, r9
    f614:	f002 fa76 	bl	11b04 <strcmp>
    f618:	b958      	cbnz	r0, f632 <d_print_comp+0xa56>
    f61a:	783b      	ldrb	r3, [r7, #0]
    f61c:	2b03      	cmp	r3, #3
    f61e:	d108      	bne.n	f632 <d_print_comp+0xa56>
    f620:	68bb      	ldr	r3, [r7, #8]
    f622:	781a      	ldrb	r2, [r3, #0]
    f624:	2a01      	cmp	r2, #1
    f626:	d104      	bne.n	f632 <d_print_comp+0xa56>
    f628:	68fa      	ldr	r2, [r7, #12]
    f62a:	7812      	ldrb	r2, [r2, #0]
    f62c:	2a29      	cmp	r2, #41	; 0x29
    f62e:	bf08      	it	eq
    f630:	461f      	moveq	r7, r3
    f632:	783b      	ldrb	r3, [r7, #0]
    f634:	2b39      	cmp	r3, #57	; 0x39
    f636:	d10b      	bne.n	f650 <d_print_comp+0xa74>
    f638:	68ba      	ldr	r2, [r7, #8]
    f63a:	4631      	mov	r1, r6
    f63c:	4620      	mov	r0, r4
    f63e:	f000 fcfe 	bl	1003e <d_print_subexpr>
    f642:	4652      	mov	r2, sl
    f644:	4631      	mov	r1, r6
    f646:	4620      	mov	r0, r4
    f648:	f000 fcea 	bl	10020 <d_print_expr_op>
    f64c:	f7ff bb4a 	b.w	ece4 <d_print_comp+0x108>
    f650:	4942      	ldr	r1, [pc, #264]	; (f75c <d_print_comp+0xb80>)
    f652:	4648      	mov	r0, r9
    f654:	f002 fa56 	bl	11b04 <strcmp>
    f658:	b9f0      	cbnz	r0, f698 <d_print_comp+0xabc>
    f65a:	4639      	mov	r1, r7
    f65c:	4620      	mov	r0, r4
    f65e:	f7fd fe89 	bl	d374 <d_find_pack>
    f662:	f7fd fccf 	bl	d004 <d_pack_length>
    f666:	4601      	mov	r1, r0
    f668:	4620      	mov	r0, r4
    f66a:	f7fd fce4 	bl	d036 <d_append_num>
    f66e:	f7ff bb39 	b.w	ece4 <d_print_comp+0x108>
    f672:	2b34      	cmp	r3, #52	; 0x34
    f674:	d032      	beq.n	f6dc <d_print_comp+0xb00>
    f676:	f04f 0900 	mov.w	r9, #0
    f67a:	4652      	mov	r2, sl
    f67c:	4631      	mov	r1, r6
    f67e:	4620      	mov	r0, r4
    f680:	f000 fcce 	bl	10020 <d_print_expr_op>
    f684:	f1b9 0f00 	cmp.w	r9, #0
    f688:	d136      	bne.n	f6f8 <d_print_comp+0xb1c>
    f68a:	463a      	mov	r2, r7
    f68c:	4631      	mov	r1, r6
    f68e:	4620      	mov	r0, r4
    f690:	f000 fcd5 	bl	1003e <d_print_subexpr>
    f694:	f7ff bb26 	b.w	ece4 <d_print_comp+0x108>
    f698:	4931      	ldr	r1, [pc, #196]	; (f760 <d_print_comp+0xb84>)
    f69a:	4648      	mov	r0, r9
    f69c:	f002 fa32 	bl	11b04 <strcmp>
    f6a0:	4680      	mov	r8, r0
    f6a2:	2800      	cmp	r0, #0
    f6a4:	d1e9      	bne.n	f67a <d_print_comp+0xa9e>
    f6a6:	783b      	ldrb	r3, [r7, #0]
    f6a8:	2b2f      	cmp	r3, #47	; 0x2f
    f6aa:	d10e      	bne.n	f6ca <d_print_comp+0xaee>
    f6ac:	68bb      	ldr	r3, [r7, #8]
    f6ae:	b163      	cbz	r3, f6ca <d_print_comp+0xaee>
    f6b0:	781a      	ldrb	r2, [r3, #0]
    f6b2:	2a4b      	cmp	r2, #75	; 0x4b
    f6b4:	d10f      	bne.n	f6d6 <d_print_comp+0xafa>
    f6b6:	6899      	ldr	r1, [r3, #8]
    f6b8:	4620      	mov	r0, r4
    f6ba:	f7fd fe5b 	bl	d374 <d_find_pack>
    f6be:	f7fd fca1 	bl	d004 <d_pack_length>
    f6c2:	4480      	add	r8, r0
    f6c4:	68ff      	ldr	r7, [r7, #12]
    f6c6:	2f00      	cmp	r7, #0
    f6c8:	d1ed      	bne.n	f6a6 <d_print_comp+0xaca>
    f6ca:	4641      	mov	r1, r8
    f6cc:	4620      	mov	r0, r4
    f6ce:	f7fd fcb2 	bl	d036 <d_append_num>
    f6d2:	f7ff bb07 	b.w	ece4 <d_print_comp+0x108>
    f6d6:	f108 0801 	add.w	r8, r8, #1
    f6da:	e7f3      	b.n	f6c4 <d_print_comp+0xae8>
    f6dc:	2128      	movs	r1, #40	; 0x28
    f6de:	f7fd fc72 	bl	cfc6 <d_append_char>
    f6e2:	4631      	mov	r1, r6
    f6e4:	4620      	mov	r0, r4
    f6e6:	f8da 2008 	ldr.w	r2, [sl, #8]
    f6ea:	f7ff fa77 	bl	ebdc <d_print_comp>
    f6ee:	2129      	movs	r1, #41	; 0x29
    f6f0:	4620      	mov	r0, r4
    f6f2:	f7fd fc68 	bl	cfc6 <d_append_char>
    f6f6:	e7c8      	b.n	f68a <d_print_comp+0xaae>
    f6f8:	491a      	ldr	r1, [pc, #104]	; (f764 <d_print_comp+0xb88>)
    f6fa:	4648      	mov	r0, r9
    f6fc:	f002 fa02 	bl	11b04 <strcmp>
    f700:	b930      	cbnz	r0, f710 <d_print_comp+0xb34>
    f702:	463a      	mov	r2, r7
    f704:	4631      	mov	r1, r6
    f706:	4620      	mov	r0, r4
    f708:	f7ff fa68 	bl	ebdc <d_print_comp>
    f70c:	f7ff baea 	b.w	ece4 <d_print_comp+0x108>
    f710:	4915      	ldr	r1, [pc, #84]	; (f768 <d_print_comp+0xb8c>)
    f712:	4648      	mov	r0, r9
    f714:	f002 f9f6 	bl	11b04 <strcmp>
    f718:	2800      	cmp	r0, #0
    f71a:	d1b6      	bne.n	f68a <d_print_comp+0xaae>
    f71c:	4620      	mov	r0, r4
    f71e:	2128      	movs	r1, #40	; 0x28
    f720:	f7fd fc51 	bl	cfc6 <d_append_char>
    f724:	4631      	mov	r1, r6
    f726:	4620      	mov	r0, r4
    f728:	463a      	mov	r2, r7
    f72a:	f7ff fa57 	bl	ebdc <d_print_comp>
    f72e:	2129      	movs	r1, #41	; 0x29
    f730:	4620      	mov	r0, r4
    f732:	f7fd fc48 	bl	cfc6 <d_append_char>
    f736:	f7ff bad5 	b.w	ece4 <d_print_comp+0x108>
    f73a:	bf00      	nop
    f73c:	0003710d 	.word	0x0003710d
    f740:	00031e20 	.word	0x00031e20
    f744:	00037113 	.word	0x00037113
    f748:	0003711a 	.word	0x0003711a
    f74c:	00037121 	.word	0x00037121
    f750:	00037124 	.word	0x00037124
    f754:	0003712d 	.word	0x0003712d
    f758:	00033d42 	.word	0x00033d42
    f75c:	00037137 	.word	0x00037137
    f760:	00036f7a 	.word	0x00036f7a
    f764:	0003713a 	.word	0x0003713a
    f768:	000373f3 	.word	0x000373f3
    f76c:	68eb      	ldr	r3, [r5, #12]
    f76e:	781b      	ldrb	r3, [r3, #0]
    f770:	2b39      	cmp	r3, #57	; 0x39
    f772:	f47f abe4 	bne.w	ef3e <d_print_comp+0x362>
    f776:	68a9      	ldr	r1, [r5, #8]
    f778:	6888      	ldr	r0, [r1, #8]
    f77a:	f7fd fd6f 	bl	d25c <op_is_new_cast.isra.0>
    f77e:	b1f0      	cbz	r0, f7be <d_print_comp+0xbe2>
    f780:	460a      	mov	r2, r1
    f782:	4620      	mov	r0, r4
    f784:	4631      	mov	r1, r6
    f786:	f000 fc4b 	bl	10020 <d_print_expr_op>
    f78a:	4620      	mov	r0, r4
    f78c:	213c      	movs	r1, #60	; 0x3c
    f78e:	f7fd fc1a 	bl	cfc6 <d_append_char>
    f792:	68eb      	ldr	r3, [r5, #12]
    f794:	4631      	mov	r1, r6
    f796:	4620      	mov	r0, r4
    f798:	689a      	ldr	r2, [r3, #8]
    f79a:	f7ff fa1f 	bl	ebdc <d_print_comp>
    f79e:	4620      	mov	r0, r4
    f7a0:	49bc      	ldr	r1, [pc, #752]	; (fa94 <d_print_comp+0xeb8>)
    f7a2:	f7fd fc3b 	bl	d01c <d_append_string>
    f7a6:	68eb      	ldr	r3, [r5, #12]
    f7a8:	4631      	mov	r1, r6
    f7aa:	4620      	mov	r0, r4
    f7ac:	68da      	ldr	r2, [r3, #12]
    f7ae:	f7ff fa15 	bl	ebdc <d_print_comp>
    f7b2:	2129      	movs	r1, #41	; 0x29
    f7b4:	4620      	mov	r0, r4
    f7b6:	f7fd fc06 	bl	cfc6 <d_append_char>
    f7ba:	f7ff ba93 	b.w	ece4 <d_print_comp+0x108>
    f7be:	462a      	mov	r2, r5
    f7c0:	4631      	mov	r1, r6
    f7c2:	4620      	mov	r0, r4
    f7c4:	f000 fc59 	bl	1007a <d_maybe_print_fold_expression>
    f7c8:	2800      	cmp	r0, #0
    f7ca:	f47f aa8b 	bne.w	ece4 <d_print_comp+0x108>
    f7ce:	68ab      	ldr	r3, [r5, #8]
    f7d0:	781a      	ldrb	r2, [r3, #0]
    f7d2:	2a32      	cmp	r2, #50	; 0x32
    f7d4:	d10b      	bne.n	f7ee <d_print_comp+0xc12>
    f7d6:	689b      	ldr	r3, [r3, #8]
    f7d8:	689a      	ldr	r2, [r3, #8]
    f7da:	2a01      	cmp	r2, #1
    f7dc:	d107      	bne.n	f7ee <d_print_comp+0xc12>
    f7de:	685b      	ldr	r3, [r3, #4]
    f7e0:	781b      	ldrb	r3, [r3, #0]
    f7e2:	2b3e      	cmp	r3, #62	; 0x3e
    f7e4:	d103      	bne.n	f7ee <d_print_comp+0xc12>
    f7e6:	2128      	movs	r1, #40	; 0x28
    f7e8:	4620      	mov	r0, r4
    f7ea:	f7fd fbec 	bl	cfc6 <d_append_char>
    f7ee:	68ab      	ldr	r3, [r5, #8]
    f7f0:	49a9      	ldr	r1, [pc, #676]	; (fa98 <d_print_comp+0xebc>)
    f7f2:	689b      	ldr	r3, [r3, #8]
    f7f4:	6818      	ldr	r0, [r3, #0]
    f7f6:	f002 f985 	bl	11b04 <strcmp>
    f7fa:	68eb      	ldr	r3, [r5, #12]
    f7fc:	689a      	ldr	r2, [r3, #8]
    f7fe:	b950      	cbnz	r0, f816 <d_print_comp+0xc3a>
    f800:	7813      	ldrb	r3, [r2, #0]
    f802:	2b03      	cmp	r3, #3
    f804:	d107      	bne.n	f816 <d_print_comp+0xc3a>
    f806:	68d3      	ldr	r3, [r2, #12]
    f808:	781b      	ldrb	r3, [r3, #0]
    f80a:	2b29      	cmp	r3, #41	; 0x29
    f80c:	bf1c      	itt	ne
    f80e:	2301      	movne	r3, #1
    f810:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
    f814:	6892      	ldr	r2, [r2, #8]
    f816:	4631      	mov	r1, r6
    f818:	4620      	mov	r0, r4
    f81a:	f000 fc10 	bl	1003e <d_print_subexpr>
    f81e:	68af      	ldr	r7, [r5, #8]
    f820:	499e      	ldr	r1, [pc, #632]	; (fa9c <d_print_comp+0xec0>)
    f822:	68bb      	ldr	r3, [r7, #8]
    f824:	f8d3 8000 	ldr.w	r8, [r3]
    f828:	4640      	mov	r0, r8
    f82a:	f002 f96b 	bl	11b04 <strcmp>
    f82e:	bb10      	cbnz	r0, f876 <d_print_comp+0xc9a>
    f830:	215b      	movs	r1, #91	; 0x5b
    f832:	4620      	mov	r0, r4
    f834:	f7fd fbc7 	bl	cfc6 <d_append_char>
    f838:	68eb      	ldr	r3, [r5, #12]
    f83a:	4631      	mov	r1, r6
    f83c:	4620      	mov	r0, r4
    f83e:	68da      	ldr	r2, [r3, #12]
    f840:	f7ff f9cc 	bl	ebdc <d_print_comp>
    f844:	215d      	movs	r1, #93	; 0x5d
    f846:	4620      	mov	r0, r4
    f848:	f7fd fbbd 	bl	cfc6 <d_append_char>
    f84c:	68ab      	ldr	r3, [r5, #8]
    f84e:	781a      	ldrb	r2, [r3, #0]
    f850:	2a32      	cmp	r2, #50	; 0x32
    f852:	f47f aa47 	bne.w	ece4 <d_print_comp+0x108>
    f856:	689b      	ldr	r3, [r3, #8]
    f858:	689a      	ldr	r2, [r3, #8]
    f85a:	2a01      	cmp	r2, #1
    f85c:	f47f aa42 	bne.w	ece4 <d_print_comp+0x108>
    f860:	685b      	ldr	r3, [r3, #4]
    f862:	781b      	ldrb	r3, [r3, #0]
    f864:	2b3e      	cmp	r3, #62	; 0x3e
    f866:	f47f aa3d 	bne.w	ece4 <d_print_comp+0x108>
    f86a:	2129      	movs	r1, #41	; 0x29
    f86c:	4620      	mov	r0, r4
    f86e:	f7fd fbaa 	bl	cfc6 <d_append_char>
    f872:	f7ff ba37 	b.w	ece4 <d_print_comp+0x108>
    f876:	4988      	ldr	r1, [pc, #544]	; (fa98 <d_print_comp+0xebc>)
    f878:	4640      	mov	r0, r8
    f87a:	f002 f943 	bl	11b04 <strcmp>
    f87e:	b120      	cbz	r0, f88a <d_print_comp+0xcae>
    f880:	463a      	mov	r2, r7
    f882:	4631      	mov	r1, r6
    f884:	4620      	mov	r0, r4
    f886:	f000 fbcb 	bl	10020 <d_print_expr_op>
    f88a:	68eb      	ldr	r3, [r5, #12]
    f88c:	4631      	mov	r1, r6
    f88e:	4620      	mov	r0, r4
    f890:	68da      	ldr	r2, [r3, #12]
    f892:	f000 fbd4 	bl	1003e <d_print_subexpr>
    f896:	e7d9      	b.n	f84c <d_print_comp+0xc70>
    f898:	2301      	movs	r3, #1
    f89a:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
    f89e:	f7ff ba21 	b.w	ece4 <d_print_comp+0x108>
    f8a2:	68eb      	ldr	r3, [r5, #12]
    f8a4:	781a      	ldrb	r2, [r3, #0]
    f8a6:	2a3b      	cmp	r2, #59	; 0x3b
    f8a8:	f47f ab49 	bne.w	ef3e <d_print_comp+0x362>
    f8ac:	68db      	ldr	r3, [r3, #12]
    f8ae:	781b      	ldrb	r3, [r3, #0]
    f8b0:	2b3c      	cmp	r3, #60	; 0x3c
    f8b2:	f47f ab44 	bne.w	ef3e <d_print_comp+0x362>
    f8b6:	462a      	mov	r2, r5
    f8b8:	4631      	mov	r1, r6
    f8ba:	f000 fbde 	bl	1007a <d_maybe_print_fold_expression>
    f8be:	2800      	cmp	r0, #0
    f8c0:	f47f aa10 	bne.w	ece4 <d_print_comp+0x108>
    f8c4:	4976      	ldr	r1, [pc, #472]	; (faa0 <d_print_comp+0xec4>)
    f8c6:	e9d5 a302 	ldrd	sl, r3, [r5, #8]
    f8ca:	e9d3 8302 	ldrd	r8, r3, [r3, #8]
    f8ce:	e9d3 9702 	ldrd	r9, r7, [r3, #8]
    f8d2:	f8da 3008 	ldr.w	r3, [sl, #8]
    f8d6:	6818      	ldr	r0, [r3, #0]
    f8d8:	f002 f914 	bl	11b04 <strcmp>
    f8dc:	b9c8      	cbnz	r0, f912 <d_print_comp+0xd36>
    f8de:	4642      	mov	r2, r8
    f8e0:	4631      	mov	r1, r6
    f8e2:	4620      	mov	r0, r4
    f8e4:	f000 fbab 	bl	1003e <d_print_subexpr>
    f8e8:	4652      	mov	r2, sl
    f8ea:	4631      	mov	r1, r6
    f8ec:	4620      	mov	r0, r4
    f8ee:	f000 fb97 	bl	10020 <d_print_expr_op>
    f8f2:	464a      	mov	r2, r9
    f8f4:	4631      	mov	r1, r6
    f8f6:	4620      	mov	r0, r4
    f8f8:	f000 fba1 	bl	1003e <d_print_subexpr>
    f8fc:	4620      	mov	r0, r4
    f8fe:	4969      	ldr	r1, [pc, #420]	; (faa4 <d_print_comp+0xec8>)
    f900:	f7fd fb8c 	bl	d01c <d_append_string>
    f904:	463a      	mov	r2, r7
    f906:	4631      	mov	r1, r6
    f908:	4620      	mov	r0, r4
    f90a:	f000 fb98 	bl	1003e <d_print_subexpr>
    f90e:	f7ff b9e9 	b.w	ece4 <d_print_comp+0x108>
    f912:	4965      	ldr	r1, [pc, #404]	; (faa8 <d_print_comp+0xecc>)
    f914:	4620      	mov	r0, r4
    f916:	f7fd fb81 	bl	d01c <d_append_string>
    f91a:	f8d8 3008 	ldr.w	r3, [r8, #8]
    f91e:	b143      	cbz	r3, f932 <d_print_comp+0xd56>
    f920:	4631      	mov	r1, r6
    f922:	4620      	mov	r0, r4
    f924:	4642      	mov	r2, r8
    f926:	f000 fb8a 	bl	1003e <d_print_subexpr>
    f92a:	2120      	movs	r1, #32
    f92c:	4620      	mov	r0, r4
    f92e:	f7fd fb4a 	bl	cfc6 <d_append_char>
    f932:	464a      	mov	r2, r9
    f934:	4631      	mov	r1, r6
    f936:	4620      	mov	r0, r4
    f938:	f7ff f950 	bl	ebdc <d_print_comp>
    f93c:	2f00      	cmp	r7, #0
    f93e:	f43f a9d1 	beq.w	ece4 <d_print_comp+0x108>
    f942:	463a      	mov	r2, r7
    f944:	4631      	mov	r1, r6
    f946:	4620      	mov	r0, r4
    f948:	f000 fb79 	bl	1003e <d_print_subexpr>
    f94c:	f7ff b9ca 	b.w	ece4 <d_print_comp+0x108>
    f950:	68aa      	ldr	r2, [r5, #8]
    f952:	7811      	ldrb	r1, [r2, #0]
    f954:	2927      	cmp	r1, #39	; 0x27
    f956:	d17b      	bne.n	fa50 <d_print_comp+0xe74>
    f958:	6892      	ldr	r2, [r2, #8]
    f95a:	7c17      	ldrb	r7, [r2, #16]
    f95c:	2f06      	cmp	r7, #6
    f95e:	d816      	bhi.n	f98e <d_print_comp+0xdb2>
    f960:	b1bf      	cbz	r7, f992 <d_print_comp+0xdb6>
    f962:	68ea      	ldr	r2, [r5, #12]
    f964:	7812      	ldrb	r2, [r2, #0]
    f966:	b9a2      	cbnz	r2, f992 <d_print_comp+0xdb6>
    f968:	2b3e      	cmp	r3, #62	; 0x3e
    f96a:	d102      	bne.n	f972 <d_print_comp+0xd96>
    f96c:	212d      	movs	r1, #45	; 0x2d
    f96e:	f7fd fb2a 	bl	cfc6 <d_append_char>
    f972:	3f02      	subs	r7, #2
    f974:	68ea      	ldr	r2, [r5, #12]
    f976:	4631      	mov	r1, r6
    f978:	4620      	mov	r0, r4
    f97a:	f7ff f92f 	bl	ebdc <d_print_comp>
    f97e:	2f04      	cmp	r7, #4
    f980:	f63f a9b0 	bhi.w	ece4 <d_print_comp+0x108>
    f984:	e8df f007 	tbb	[pc, r7]
    f988:	3f39332d 	.word	0x3f39332d
    f98c:	45          	.byte	0x45
    f98d:	00          	.byte	0x00
    f98e:	2f07      	cmp	r7, #7
    f990:	d045      	beq.n	fa1e <d_print_comp+0xe42>
    f992:	2128      	movs	r1, #40	; 0x28
    f994:	4620      	mov	r0, r4
    f996:	f7fd fb16 	bl	cfc6 <d_append_char>
    f99a:	68aa      	ldr	r2, [r5, #8]
    f99c:	4631      	mov	r1, r6
    f99e:	4620      	mov	r0, r4
    f9a0:	f7ff f91c 	bl	ebdc <d_print_comp>
    f9a4:	2129      	movs	r1, #41	; 0x29
    f9a6:	4620      	mov	r0, r4
    f9a8:	f7fd fb0d 	bl	cfc6 <d_append_char>
    f9ac:	782b      	ldrb	r3, [r5, #0]
    f9ae:	2b3e      	cmp	r3, #62	; 0x3e
    f9b0:	d103      	bne.n	f9ba <d_print_comp+0xdde>
    f9b2:	212d      	movs	r1, #45	; 0x2d
    f9b4:	4620      	mov	r0, r4
    f9b6:	f7fd fb06 	bl	cfc6 <d_append_char>
    f9ba:	2f08      	cmp	r7, #8
    f9bc:	d103      	bne.n	f9c6 <d_print_comp+0xdea>
    f9be:	215b      	movs	r1, #91	; 0x5b
    f9c0:	4620      	mov	r0, r4
    f9c2:	f7fd fb00 	bl	cfc6 <d_append_char>
    f9c6:	68ea      	ldr	r2, [r5, #12]
    f9c8:	4631      	mov	r1, r6
    f9ca:	4620      	mov	r0, r4
    f9cc:	f7ff f906 	bl	ebdc <d_print_comp>
    f9d0:	2f08      	cmp	r7, #8
    f9d2:	f47f a987 	bne.w	ece4 <d_print_comp+0x108>
    f9d6:	215d      	movs	r1, #93	; 0x5d
    f9d8:	4620      	mov	r0, r4
    f9da:	f7fd faf4 	bl	cfc6 <d_append_char>
    f9de:	f7ff b981 	b.w	ece4 <d_print_comp+0x108>
    f9e2:	2175      	movs	r1, #117	; 0x75
    f9e4:	4620      	mov	r0, r4
    f9e6:	f7fd faee 	bl	cfc6 <d_append_char>
    f9ea:	f7ff b97b 	b.w	ece4 <d_print_comp+0x108>
    f9ee:	216c      	movs	r1, #108	; 0x6c
    f9f0:	4620      	mov	r0, r4
    f9f2:	f7fd fae8 	bl	cfc6 <d_append_char>
    f9f6:	f7ff b975 	b.w	ece4 <d_print_comp+0x108>
    f9fa:	492c      	ldr	r1, [pc, #176]	; (faac <d_print_comp+0xed0>)
    f9fc:	4620      	mov	r0, r4
    f9fe:	f7fd fb0d 	bl	d01c <d_append_string>
    fa02:	f7ff b96f 	b.w	ece4 <d_print_comp+0x108>
    fa06:	492a      	ldr	r1, [pc, #168]	; (fab0 <d_print_comp+0xed4>)
    fa08:	4620      	mov	r0, r4
    fa0a:	f7fd fb07 	bl	d01c <d_append_string>
    fa0e:	f7ff b969 	b.w	ece4 <d_print_comp+0x108>
    fa12:	4928      	ldr	r1, [pc, #160]	; (fab4 <d_print_comp+0xed8>)
    fa14:	4620      	mov	r0, r4
    fa16:	f7fd fb01 	bl	d01c <d_append_string>
    fa1a:	f7ff b963 	b.w	ece4 <d_print_comp+0x108>
    fa1e:	68ea      	ldr	r2, [r5, #12]
    fa20:	7811      	ldrb	r1, [r2, #0]
    fa22:	2900      	cmp	r1, #0
    fa24:	d1b5      	bne.n	f992 <d_print_comp+0xdb6>
    fa26:	68d1      	ldr	r1, [r2, #12]
    fa28:	2901      	cmp	r1, #1
    fa2a:	d1b2      	bne.n	f992 <d_print_comp+0xdb6>
    fa2c:	2b3d      	cmp	r3, #61	; 0x3d
    fa2e:	d1b0      	bne.n	f992 <d_print_comp+0xdb6>
    fa30:	6893      	ldr	r3, [r2, #8]
    fa32:	781b      	ldrb	r3, [r3, #0]
    fa34:	2b30      	cmp	r3, #48	; 0x30
    fa36:	d006      	beq.n	fa46 <d_print_comp+0xe6a>
    fa38:	2b31      	cmp	r3, #49	; 0x31
    fa3a:	d1aa      	bne.n	f992 <d_print_comp+0xdb6>
    fa3c:	491e      	ldr	r1, [pc, #120]	; (fab8 <d_print_comp+0xedc>)
    fa3e:	f7fd faed 	bl	d01c <d_append_string>
    fa42:	f7ff b94f 	b.w	ece4 <d_print_comp+0x108>
    fa46:	491d      	ldr	r1, [pc, #116]	; (fabc <d_print_comp+0xee0>)
    fa48:	f7fd fae8 	bl	d01c <d_append_string>
    fa4c:	f7ff b94a 	b.w	ece4 <d_print_comp+0x108>
    fa50:	2700      	movs	r7, #0
    fa52:	e79e      	b.n	f992 <d_print_comp+0xdb6>
    fa54:	68a9      	ldr	r1, [r5, #8]
    fa56:	f7fd faee 	bl	d036 <d_append_num>
    fa5a:	f7ff b943 	b.w	ece4 <d_print_comp+0x108>
    fa5e:	4918      	ldr	r1, [pc, #96]	; (fac0 <d_print_comp+0xee4>)
    fa60:	f7fd fadc 	bl	d01c <d_append_string>
    fa64:	68aa      	ldr	r2, [r5, #8]
    fa66:	4631      	mov	r1, r6
    fa68:	4620      	mov	r0, r4
    fa6a:	f7ff f8b7 	bl	ebdc <d_print_comp>
    fa6e:	f7ff b939 	b.w	ece4 <d_print_comp+0x108>
    fa72:	68aa      	ldr	r2, [r5, #8]
    fa74:	4631      	mov	r1, r6
    fa76:	f7ff f8b1 	bl	ebdc <d_print_comp>
    fa7a:	68ea      	ldr	r2, [r5, #12]
    fa7c:	4631      	mov	r1, r6
    fa7e:	4620      	mov	r0, r4
    fa80:	f7ff f8ac 	bl	ebdc <d_print_comp>
    fa84:	f7ff b92e 	b.w	ece4 <d_print_comp+0x108>
    fa88:	7a29      	ldrb	r1, [r5, #8]
    fa8a:	f7fd fa9c 	bl	cfc6 <d_append_char>
    fa8e:	f7ff b929 	b.w	ece4 <d_print_comp+0x108>
    fa92:	bf00      	nop
    fa94:	0003713d 	.word	0x0003713d
    fa98:	00036f71 	.word	0x00036f71
    fa9c:	00037140 	.word	0x00037140
    faa0:	00036f77 	.word	0x00036f77
    faa4:	00037143 	.word	0x00037143
    faa8:	00037147 	.word	0x00037147
    faac:	0003714c 	.word	0x0003714c
    fab0:	00037150 	.word	0x00037150
    fab4:	0003714f 	.word	0x0003714f
    fab8:	00037153 	.word	0x00037153
    fabc:	0003628d 	.word	0x0003628d
    fac0:	00037158 	.word	0x00037158
    fac4:	4972      	ldr	r1, [pc, #456]	; (fc90 <d_print_comp+0x10b4>)
    fac6:	f7fd faa9 	bl	d01c <d_append_string>
    faca:	4631      	mov	r1, r6
    facc:	4620      	mov	r0, r4
    face:	68aa      	ldr	r2, [r5, #8]
    fad0:	f7ff f884 	bl	ebdc <d_print_comp>
    fad4:	2129      	movs	r1, #41	; 0x29
    fad6:	4620      	mov	r0, r4
    fad8:	f7fd fa75 	bl	cfc6 <d_append_char>
    fadc:	f7ff b902 	b.w	ece4 <d_print_comp+0x108>
    fae0:	68a9      	ldr	r1, [r5, #8]
    fae2:	f7fd fc47 	bl	d374 <d_find_pack>
    fae6:	b950      	cbnz	r0, fafe <d_print_comp+0xf22>
    fae8:	4631      	mov	r1, r6
    faea:	4620      	mov	r0, r4
    faec:	68aa      	ldr	r2, [r5, #8]
    faee:	f000 faa6 	bl	1003e <d_print_subexpr>
    faf2:	4968      	ldr	r1, [pc, #416]	; (fc94 <d_print_comp+0x10b8>)
    faf4:	4620      	mov	r0, r4
    faf6:	f7fd fa91 	bl	d01c <d_append_string>
    fafa:	f7ff b8f3 	b.w	ece4 <d_print_comp+0x108>
    fafe:	f7fd fa81 	bl	d004 <d_pack_length>
    fb02:	f8df b1b4 	ldr.w	fp, [pc, #436]	; fcb8 <d_print_comp+0x10dc>
    fb06:	4607      	mov	r7, r0
    fb08:	f8d5 9008 	ldr.w	r9, [r5, #8]
    fb0c:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
    fb10:	4547      	cmp	r7, r8
    fb12:	f77f a8e7 	ble.w	ece4 <d_print_comp+0x108>
    fb16:	464a      	mov	r2, r9
    fb18:	4631      	mov	r1, r6
    fb1a:	4620      	mov	r0, r4
    fb1c:	f8c4 8124 	str.w	r8, [r4, #292]	; 0x124
    fb20:	f7ff f85c 	bl	ebdc <d_print_comp>
    fb24:	45d0      	cmp	r8, sl
    fb26:	da03      	bge.n	fb30 <d_print_comp+0xf54>
    fb28:	4659      	mov	r1, fp
    fb2a:	4620      	mov	r0, r4
    fb2c:	f7fd fa76 	bl	d01c <d_append_string>
    fb30:	f108 0801 	add.w	r8, r8, #1
    fb34:	e7ec      	b.n	fb10 <d_print_comp+0xf34>
    fb36:	68ae      	ldr	r6, [r5, #8]
    fb38:	b926      	cbnz	r6, fb44 <d_print_comp+0xf68>
    fb3a:	4957      	ldr	r1, [pc, #348]	; (fc98 <d_print_comp+0x10bc>)
    fb3c:	f7fd fa6e 	bl	d01c <d_append_string>
    fb40:	f7ff b8d0 	b.w	ece4 <d_print_comp+0x108>
    fb44:	4955      	ldr	r1, [pc, #340]	; (fc9c <d_print_comp+0x10c0>)
    fb46:	f7fd fa69 	bl	d01c <d_append_string>
    fb4a:	4631      	mov	r1, r6
    fb4c:	4620      	mov	r0, r4
    fb4e:	f7fd fa72 	bl	d036 <d_append_num>
    fb52:	217d      	movs	r1, #125	; 0x7d
    fb54:	4620      	mov	r0, r4
    fb56:	f7fd fa36 	bl	cfc6 <d_append_char>
    fb5a:	f7ff b8c3 	b.w	ece4 <d_print_comp+0x108>
    fb5e:	4950      	ldr	r1, [pc, #320]	; (fca0 <d_print_comp+0x10c4>)
    fb60:	f7fd fa5c 	bl	d01c <d_append_string>
    fb64:	68aa      	ldr	r2, [r5, #8]
    fb66:	4631      	mov	r1, r6
    fb68:	4620      	mov	r0, r4
    fb6a:	f7ff f837 	bl	ebdc <d_print_comp>
    fb6e:	f7ff b8b9 	b.w	ece4 <d_print_comp+0x108>
    fb72:	494c      	ldr	r1, [pc, #304]	; (fca4 <d_print_comp+0x10c8>)
    fb74:	f7fd fa52 	bl	d01c <d_append_string>
    fb78:	68aa      	ldr	r2, [r5, #8]
    fb7a:	4631      	mov	r1, r6
    fb7c:	4620      	mov	r0, r4
    fb7e:	f7ff f82d 	bl	ebdc <d_print_comp>
    fb82:	f7ff b8af 	b.w	ece4 <d_print_comp+0x108>
    fb86:	4948      	ldr	r1, [pc, #288]	; (fca8 <d_print_comp+0x10cc>)
    fb88:	f7fd fa48 	bl	d01c <d_append_string>
    fb8c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    fb90:	68aa      	ldr	r2, [r5, #8]
    fb92:	4631      	mov	r1, r6
    fb94:	3301      	adds	r3, #1
    fb96:	4620      	mov	r0, r4
    fb98:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    fb9c:	f7ff f81e 	bl	ebdc <d_print_comp>
    fba0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    fba4:	4620      	mov	r0, r4
    fba6:	4941      	ldr	r1, [pc, #260]	; (fcac <d_print_comp+0x10d0>)
    fba8:	3b01      	subs	r3, #1
    fbaa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    fbae:	f7fd fa35 	bl	d01c <d_append_string>
    fbb2:	68e9      	ldr	r1, [r5, #12]
    fbb4:	4620      	mov	r0, r4
    fbb6:	3101      	adds	r1, #1
    fbb8:	f7fd fa3d 	bl	d036 <d_append_num>
    fbbc:	217d      	movs	r1, #125	; 0x7d
    fbbe:	4620      	mov	r0, r4
    fbc0:	f7fd fa01 	bl	cfc6 <d_append_char>
    fbc4:	f7ff b88e 	b.w	ece4 <d_print_comp+0x108>
    fbc8:	4939      	ldr	r1, [pc, #228]	; (fcb0 <d_print_comp+0x10d4>)
    fbca:	f7fd fa27 	bl	d01c <d_append_string>
    fbce:	68a9      	ldr	r1, [r5, #8]
    fbd0:	4620      	mov	r0, r4
    fbd2:	3101      	adds	r1, #1
    fbd4:	f7fd fa2f 	bl	d036 <d_append_num>
    fbd8:	217d      	movs	r1, #125	; 0x7d
    fbda:	4620      	mov	r0, r4
    fbdc:	f7fd f9f3 	bl	cfc6 <d_append_char>
    fbe0:	f7ff b880 	b.w	ece4 <d_print_comp+0x108>
    fbe4:	68aa      	ldr	r2, [r5, #8]
    fbe6:	4631      	mov	r1, r6
    fbe8:	f7fe fff8 	bl	ebdc <d_print_comp>
    fbec:	4620      	mov	r0, r4
    fbee:	4931      	ldr	r1, [pc, #196]	; (fcb4 <d_print_comp+0x10d8>)
    fbf0:	f7fd fa14 	bl	d01c <d_append_string>
    fbf4:	4631      	mov	r1, r6
    fbf6:	4620      	mov	r0, r4
    fbf8:	68ea      	ldr	r2, [r5, #12]
    fbfa:	f7fe ffef 	bl	ebdc <d_print_comp>
    fbfe:	215d      	movs	r1, #93	; 0x5d
    fc00:	4620      	mov	r0, r4
    fc02:	f7fd f9e0 	bl	cfc6 <d_append_char>
    fc06:	f7ff b86d 	b.w	ece4 <d_print_comp+0x108>
    fc0a:	2a02      	cmp	r2, #2
    fc0c:	d111      	bne.n	fc32 <d_print_comp+0x1056>
    fc0e:	68ff      	ldr	r7, [r7, #12]
    fc10:	783b      	ldrb	r3, [r7, #0]
    fc12:	2b47      	cmp	r3, #71	; 0x47
    fc14:	d103      	bne.n	fc1e <d_print_comp+0x1042>
    fc16:	68bf      	ldr	r7, [r7, #8]
    fc18:	2f00      	cmp	r7, #0
    fc1a:	f43f a8f7 	beq.w	ee0c <d_print_comp+0x230>
    fc1e:	eb09 1908 	add.w	r9, r9, r8, lsl #4
    fc22:	f04f 0b00 	mov.w	fp, #0
    fc26:	7838      	ldrb	r0, [r7, #0]
    fc28:	f7fd f8c2 	bl	cdb0 <is_fnqual_component_type>
    fc2c:	2800      	cmp	r0, #0
    fc2e:	f47f a908 	bne.w	ee42 <d_print_comp+0x266>
    fc32:	783b      	ldrb	r3, [r7, #0]
    fc34:	4631      	mov	r1, r6
    fc36:	68ea      	ldr	r2, [r5, #12]
    fc38:	4620      	mov	r0, r4
    fc3a:	2b04      	cmp	r3, #4
    fc3c:	bf01      	itttt	eq
    fc3e:	ab04      	addeq	r3, sp, #16
    fc40:	9705      	streq	r7, [sp, #20]
    fc42:	f8cd a010 	streq.w	sl, [sp, #16]
    fc46:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
    fc4a:	f7fe ffc7 	bl	ebdc <d_print_comp>
    fc4e:	783b      	ldrb	r3, [r7, #0]
    fc50:	2b04      	cmp	r3, #4
    fc52:	bf04      	itt	eq
    fc54:	9b04      	ldreq	r3, [sp, #16]
    fc56:	f8c4 3110 	streq.w	r3, [r4, #272]	; 0x110
    fc5a:	ab06      	add	r3, sp, #24
    fc5c:	eb03 1708 	add.w	r7, r3, r8, lsl #4
    fc60:	f857 3c08 	ldr.w	r3, [r7, #-8]
    fc64:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    fc68:	b94b      	cbnz	r3, fc7e <d_print_comp+0x10a2>
    fc6a:	2120      	movs	r1, #32
    fc6c:	4620      	mov	r0, r4
    fc6e:	f7fd f9aa 	bl	cfc6 <d_append_char>
    fc72:	f857 2c0c 	ldr.w	r2, [r7, #-12]
    fc76:	4631      	mov	r1, r6
    fc78:	4620      	mov	r0, r4
    fc7a:	f000 f81f 	bl	fcbc <d_print_mod>
    fc7e:	3f10      	subs	r7, #16
    fc80:	f1b8 0f00 	cmp.w	r8, #0
    fc84:	d1ec      	bne.n	fc60 <d_print_comp+0x1084>
    fc86:	9b01      	ldr	r3, [sp, #4]
    fc88:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    fc8c:	f7ff b82a 	b.w	ece4 <d_print_comp+0x108>
    fc90:	00037167 	.word	0x00037167
    fc94:	00037242 	.word	0x00037242
    fc98:	00037172 	.word	0x00037172
    fc9c:	00037177 	.word	0x00037177
    fca0:	0003717e 	.word	0x0003717e
    fca4:	0003719c 	.word	0x0003719c
    fca8:	000371b9 	.word	0x000371b9
    fcac:	000371c2 	.word	0x000371c2
    fcb0:	000371c5 	.word	0x000371c5
    fcb4:	000371d4 	.word	0x000371d4
    fcb8:	00037121 	.word	0x00037121

0000fcbc <d_print_mod>:
    fcbc:	b570      	push	{r4, r5, r6, lr}
    fcbe:	7813      	ldrb	r3, [r2, #0]
    fcc0:	4604      	mov	r4, r0
    fcc2:	460e      	mov	r6, r1
    fcc4:	4615      	mov	r5, r2
    fcc6:	2b03      	cmp	r3, #3
    fcc8:	d06e      	beq.n	fda8 <d_print_mod+0xec>
    fcca:	3b19      	subs	r3, #25
    fccc:	b2da      	uxtb	r2, r3
    fcce:	2a37      	cmp	r2, #55	; 0x37
    fcd0:	d874      	bhi.n	fdbc <d_print_mod+0x100>
    fcd2:	2b37      	cmp	r3, #55	; 0x37
    fcd4:	d872      	bhi.n	fdbc <d_print_mod+0x100>
    fcd6:	e8df f003 	tbb	[pc, r3]
    fcda:	221c      	.short	0x221c
    fcdc:	24221c24 	.word	0x24221c24
    fce0:	433c504b 	.word	0x433c504b
    fce4:	5755534e 	.word	0x5755534e
    fce8:	71717171 	.word	0x71717171
    fcec:	716c7159 	.word	0x716c7159
    fcf0:	71717171 	.word	0x71717171
    fcf4:	71717171 	.word	0x71717171
    fcf8:	71717171 	.word	0x71717171
    fcfc:	71717171 	.word	0x71717171
    fd00:	71717171 	.word	0x71717171
    fd04:	71717171 	.word	0x71717171
    fd08:	71717171 	.word	0x71717171
    fd0c:	71267171 	.word	0x71267171
    fd10:	3a28      	.short	0x3a28
    fd12:	492c      	ldr	r1, [pc, #176]	; (fdc4 <d_print_mod+0x108>)
    fd14:	4620      	mov	r0, r4
    fd16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fd1a:	f7fd b97f 	b.w	d01c <d_append_string>
    fd1e:	492a      	ldr	r1, [pc, #168]	; (fdc8 <d_print_mod+0x10c>)
    fd20:	e7f8      	b.n	fd14 <d_print_mod+0x58>
    fd22:	492a      	ldr	r1, [pc, #168]	; (fdcc <d_print_mod+0x110>)
    fd24:	e7f6      	b.n	fd14 <d_print_mod+0x58>
    fd26:	492a      	ldr	r1, [pc, #168]	; (fdd0 <d_print_mod+0x114>)
    fd28:	e7f4      	b.n	fd14 <d_print_mod+0x58>
    fd2a:	492a      	ldr	r1, [pc, #168]	; (fdd4 <d_print_mod+0x118>)
    fd2c:	4620      	mov	r0, r4
    fd2e:	f7fd f975 	bl	d01c <d_append_string>
    fd32:	68eb      	ldr	r3, [r5, #12]
    fd34:	2b00      	cmp	r3, #0
    fd36:	d043      	beq.n	fdc0 <d_print_mod+0x104>
    fd38:	2128      	movs	r1, #40	; 0x28
    fd3a:	4620      	mov	r0, r4
    fd3c:	f7fd f943 	bl	cfc6 <d_append_char>
    fd40:	68ea      	ldr	r2, [r5, #12]
    fd42:	4631      	mov	r1, r6
    fd44:	4620      	mov	r0, r4
    fd46:	f7fe ff49 	bl	ebdc <d_print_comp>
    fd4a:	2129      	movs	r1, #41	; 0x29
    fd4c:	e00b      	b.n	fd66 <d_print_mod+0xaa>
    fd4e:	4922      	ldr	r1, [pc, #136]	; (fdd8 <d_print_mod+0x11c>)
    fd50:	e7ec      	b.n	fd2c <d_print_mod+0x70>
    fd52:	2120      	movs	r1, #32
    fd54:	f7fd f937 	bl	cfc6 <d_append_char>
    fd58:	68ea      	ldr	r2, [r5, #12]
    fd5a:	4631      	mov	r1, r6
    fd5c:	4620      	mov	r0, r4
    fd5e:	e024      	b.n	fdaa <d_print_mod+0xee>
    fd60:	074b      	lsls	r3, r1, #29
    fd62:	d42d      	bmi.n	fdc0 <d_print_mod+0x104>
    fd64:	212a      	movs	r1, #42	; 0x2a
    fd66:	4620      	mov	r0, r4
    fd68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fd6c:	f7fd b92b 	b.w	cfc6 <d_append_char>
    fd70:	2120      	movs	r1, #32
    fd72:	f7fd f928 	bl	cfc6 <d_append_char>
    fd76:	2126      	movs	r1, #38	; 0x26
    fd78:	e7f5      	b.n	fd66 <d_print_mod+0xaa>
    fd7a:	2120      	movs	r1, #32
    fd7c:	f7fd f923 	bl	cfc6 <d_append_char>
    fd80:	4916      	ldr	r1, [pc, #88]	; (fddc <d_print_mod+0x120>)
    fd82:	e7c7      	b.n	fd14 <d_print_mod+0x58>
    fd84:	4916      	ldr	r1, [pc, #88]	; (fde0 <d_print_mod+0x124>)
    fd86:	e7c5      	b.n	fd14 <d_print_mod+0x58>
    fd88:	4916      	ldr	r1, [pc, #88]	; (fde4 <d_print_mod+0x128>)
    fd8a:	e7c3      	b.n	fd14 <d_print_mod+0x58>
    fd8c:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
    fd90:	2b28      	cmp	r3, #40	; 0x28
    fd92:	d002      	beq.n	fd9a <d_print_mod+0xde>
    fd94:	2120      	movs	r1, #32
    fd96:	f7fd f916 	bl	cfc6 <d_append_char>
    fd9a:	4631      	mov	r1, r6
    fd9c:	68aa      	ldr	r2, [r5, #8]
    fd9e:	4620      	mov	r0, r4
    fda0:	f7fe ff1c 	bl	ebdc <d_print_comp>
    fda4:	4910      	ldr	r1, [pc, #64]	; (fde8 <d_print_mod+0x12c>)
    fda6:	e7b5      	b.n	fd14 <d_print_mod+0x58>
    fda8:	6892      	ldr	r2, [r2, #8]
    fdaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    fdae:	f7fe bf15 	b.w	ebdc <d_print_comp>
    fdb2:	490e      	ldr	r1, [pc, #56]	; (fdec <d_print_mod+0x130>)
    fdb4:	f7fd f932 	bl	d01c <d_append_string>
    fdb8:	68aa      	ldr	r2, [r5, #8]
    fdba:	e7c2      	b.n	fd42 <d_print_mod+0x86>
    fdbc:	462a      	mov	r2, r5
    fdbe:	e7cc      	b.n	fd5a <d_print_mod+0x9e>
    fdc0:	bd70      	pop	{r4, r5, r6, pc}
    fdc2:	bf00      	nop
    fdc4:	000371dd 	.word	0x000371dd
    fdc8:	000371e7 	.word	0x000371e7
    fdcc:	000371f1 	.word	0x000371f1
    fdd0:	000371f8 	.word	0x000371f8
    fdd4:	0003720a 	.word	0x0003720a
    fdd8:	00037214 	.word	0x00037214
    fddc:	0003721b 	.word	0x0003721b
    fde0:	0003721e 	.word	0x0003721e
    fde4:	00037227 	.word	0x00037227
    fde8:	00037232 	.word	0x00037232
    fdec:	00037236 	.word	0x00037236

0000fdf0 <d_print_function_type.isra.0>:
    fdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    fdf4:	4604      	mov	r4, r0
    fdf6:	460e      	mov	r6, r1
    fdf8:	4690      	mov	r8, r2
    fdfa:	461f      	mov	r7, r3
    fdfc:	461d      	mov	r5, r3
    fdfe:	bb3d      	cbnz	r5, fe50 <d_print_function_type.isra.0+0x60>
    fe00:	2300      	movs	r3, #0
    fe02:	f8d4 9114 	ldr.w	r9, [r4, #276]	; 0x114
    fe06:	463a      	mov	r2, r7
    fe08:	4631      	mov	r1, r6
    fe0a:	4620      	mov	r0, r4
    fe0c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    fe10:	f000 f849 	bl	fea6 <d_print_mod_list>
    fe14:	b11d      	cbz	r5, fe1e <d_print_function_type.isra.0+0x2e>
    fe16:	2129      	movs	r1, #41	; 0x29
    fe18:	4620      	mov	r0, r4
    fe1a:	f7fd f8d4 	bl	cfc6 <d_append_char>
    fe1e:	2128      	movs	r1, #40	; 0x28
    fe20:	4620      	mov	r0, r4
    fe22:	f7fd f8d0 	bl	cfc6 <d_append_char>
    fe26:	f8d8 2000 	ldr.w	r2, [r8]
    fe2a:	b11a      	cbz	r2, fe34 <d_print_function_type.isra.0+0x44>
    fe2c:	4631      	mov	r1, r6
    fe2e:	4620      	mov	r0, r4
    fe30:	f7fe fed4 	bl	ebdc <d_print_comp>
    fe34:	2129      	movs	r1, #41	; 0x29
    fe36:	4620      	mov	r0, r4
    fe38:	f7fd f8c5 	bl	cfc6 <d_append_char>
    fe3c:	2301      	movs	r3, #1
    fe3e:	463a      	mov	r2, r7
    fe40:	4631      	mov	r1, r6
    fe42:	4620      	mov	r0, r4
    fe44:	f000 f82f 	bl	fea6 <d_print_mod_list>
    fe48:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
    fe4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fe50:	68ab      	ldr	r3, [r5, #8]
    fe52:	b993      	cbnz	r3, fe7a <d_print_function_type.isra.0+0x8a>
    fe54:	686b      	ldr	r3, [r5, #4]
    fe56:	781b      	ldrb	r3, [r3, #0]
    fe58:	3b19      	subs	r3, #25
    fe5a:	2b12      	cmp	r3, #18
    fe5c:	d80b      	bhi.n	fe76 <d_print_function_type.isra.0+0x86>
    fe5e:	e8df f003 	tbb	[pc, r3]
    fe62:	1414      	.short	0x1414
    fe64:	0a0a0a14 	.word	0x0a0a0a14
    fe68:	0e140a0a 	.word	0x0e140a0a
    fe6c:	14140e0e 	.word	0x14140e0e
    fe70:	0a0a0a0a 	.word	0x0a0a0a0a
    fe74:	14          	.byte	0x14
    fe75:	00          	.byte	0x00
    fe76:	682d      	ldr	r5, [r5, #0]
    fe78:	e7c1      	b.n	fdfe <d_print_function_type.isra.0+0xe>
    fe7a:	2500      	movs	r5, #0
    fe7c:	e7c0      	b.n	fe00 <d_print_function_type.isra.0+0x10>
    fe7e:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    fe82:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    fe86:	2b28      	cmp	r3, #40	; 0x28
    fe88:	d007      	beq.n	fe9a <d_print_function_type.isra.0+0xaa>
    fe8a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
    fe8e:	2b20      	cmp	r3, #32
    fe90:	d003      	beq.n	fe9a <d_print_function_type.isra.0+0xaa>
    fe92:	2120      	movs	r1, #32
    fe94:	4620      	mov	r0, r4
    fe96:	f7fd f896 	bl	cfc6 <d_append_char>
    fe9a:	2128      	movs	r1, #40	; 0x28
    fe9c:	4620      	mov	r0, r4
    fe9e:	2501      	movs	r5, #1
    fea0:	f7fd f891 	bl	cfc6 <d_append_char>
    fea4:	e7ac      	b.n	fe00 <d_print_function_type.isra.0+0x10>

0000fea6 <d_print_mod_list>:
    fea6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    feaa:	4604      	mov	r4, r0
    feac:	460e      	mov	r6, r1
    feae:	4615      	mov	r5, r2
    feb0:	4698      	mov	r8, r3
    feb2:	f04f 0901 	mov.w	r9, #1
    feb6:	b305      	cbz	r5, fefa <d_print_mod_list+0x54>
    feb8:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    febc:	b9eb      	cbnz	r3, fefa <d_print_mod_list+0x54>
    febe:	68ab      	ldr	r3, [r5, #8]
    fec0:	b943      	cbnz	r3, fed4 <d_print_mod_list+0x2e>
    fec2:	686a      	ldr	r2, [r5, #4]
    fec4:	7811      	ldrb	r1, [r2, #0]
    fec6:	f1b8 0f00 	cmp.w	r8, #0
    feca:	d105      	bne.n	fed8 <d_print_mod_list+0x32>
    fecc:	4608      	mov	r0, r1
    fece:	f7fc ff6f 	bl	cdb0 <is_fnqual_component_type>
    fed2:	b108      	cbz	r0, fed8 <d_print_mod_list+0x32>
    fed4:	682d      	ldr	r5, [r5, #0]
    fed6:	e7ee      	b.n	feb6 <d_print_mod_list+0x10>
    fed8:	68eb      	ldr	r3, [r5, #12]
    feda:	2929      	cmp	r1, #41	; 0x29
    fedc:	f8d4 7110 	ldr.w	r7, [r4, #272]	; 0x110
    fee0:	f8c5 9008 	str.w	r9, [r5, #8]
    fee4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    fee8:	d109      	bne.n	fefe <d_print_mod_list+0x58>
    feea:	682b      	ldr	r3, [r5, #0]
    feec:	320c      	adds	r2, #12
    feee:	4631      	mov	r1, r6
    fef0:	4620      	mov	r0, r4
    fef2:	f7ff ff7d 	bl	fdf0 <d_print_function_type.isra.0>
    fef6:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    fefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fefe:	292a      	cmp	r1, #42	; 0x2a
    ff00:	d106      	bne.n	ff10 <d_print_mod_list+0x6a>
    ff02:	682b      	ldr	r3, [r5, #0]
    ff04:	3208      	adds	r2, #8
    ff06:	4631      	mov	r1, r6
    ff08:	4620      	mov	r0, r4
    ff0a:	f000 f845 	bl	ff98 <d_print_array_type.isra.0>
    ff0e:	e7f2      	b.n	fef6 <d_print_mod_list+0x50>
    ff10:	2902      	cmp	r1, #2
    ff12:	d134      	bne.n	ff7e <d_print_mod_list+0xd8>
    ff14:	2300      	movs	r3, #0
    ff16:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
    ff1a:	6892      	ldr	r2, [r2, #8]
    ff1c:	4631      	mov	r1, r6
    ff1e:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
    ff22:	4620      	mov	r0, r4
    ff24:	f7fe fe5a 	bl	ebdc <d_print_comp>
    ff28:	0773      	lsls	r3, r6, #29
    ff2a:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
    ff2e:	d421      	bmi.n	ff74 <d_print_mod_list+0xce>
    ff30:	4916      	ldr	r1, [pc, #88]	; (ff8c <d_print_mod_list+0xe6>)
    ff32:	4620      	mov	r0, r4
    ff34:	f7fd f872 	bl	d01c <d_append_string>
    ff38:	686b      	ldr	r3, [r5, #4]
    ff3a:	68dd      	ldr	r5, [r3, #12]
    ff3c:	782b      	ldrb	r3, [r5, #0]
    ff3e:	2b47      	cmp	r3, #71	; 0x47
    ff40:	d10d      	bne.n	ff5e <d_print_mod_list+0xb8>
    ff42:	4913      	ldr	r1, [pc, #76]	; (ff90 <d_print_mod_list+0xea>)
    ff44:	4620      	mov	r0, r4
    ff46:	f7fd f869 	bl	d01c <d_append_string>
    ff4a:	68e9      	ldr	r1, [r5, #12]
    ff4c:	4620      	mov	r0, r4
    ff4e:	3101      	adds	r1, #1
    ff50:	f7fd f871 	bl	d036 <d_append_num>
    ff54:	490f      	ldr	r1, [pc, #60]	; (ff94 <d_print_mod_list+0xee>)
    ff56:	4620      	mov	r0, r4
    ff58:	f7fd f860 	bl	d01c <d_append_string>
    ff5c:	68ad      	ldr	r5, [r5, #8]
    ff5e:	7828      	ldrb	r0, [r5, #0]
    ff60:	f7fc ff26 	bl	cdb0 <is_fnqual_component_type>
    ff64:	2800      	cmp	r0, #0
    ff66:	d1f9      	bne.n	ff5c <d_print_mod_list+0xb6>
    ff68:	462a      	mov	r2, r5
    ff6a:	4631      	mov	r1, r6
    ff6c:	4620      	mov	r0, r4
    ff6e:	f7fe fe35 	bl	ebdc <d_print_comp>
    ff72:	e7c0      	b.n	fef6 <d_print_mod_list+0x50>
    ff74:	212e      	movs	r1, #46	; 0x2e
    ff76:	4620      	mov	r0, r4
    ff78:	f7fd f825 	bl	cfc6 <d_append_char>
    ff7c:	e7dc      	b.n	ff38 <d_print_mod_list+0x92>
    ff7e:	4631      	mov	r1, r6
    ff80:	4620      	mov	r0, r4
    ff82:	f7ff fe9b 	bl	fcbc <d_print_mod>
    ff86:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    ff8a:	e7a3      	b.n	fed4 <d_print_mod_list+0x2e>
    ff8c:	00036fbc 	.word	0x00036fbc
    ff90:	00036fad 	.word	0x00036fad
    ff94:	00036fbb 	.word	0x00036fbb

0000ff98 <d_print_array_type.isra.0>:
    ff98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    ff9c:	460f      	mov	r7, r1
    ff9e:	4690      	mov	r8, r2
    ffa0:	461e      	mov	r6, r3
    ffa2:	b9b3      	cbnz	r3, ffd2 <d_print_array_type.isra.0+0x3a>
    ffa4:	2120      	movs	r1, #32
    ffa6:	9001      	str	r0, [sp, #4]
    ffa8:	f7fd f80d 	bl	cfc6 <d_append_char>
    ffac:	9801      	ldr	r0, [sp, #4]
    ffae:	215b      	movs	r1, #91	; 0x5b
    ffb0:	9001      	str	r0, [sp, #4]
    ffb2:	f7fd f808 	bl	cfc6 <d_append_char>
    ffb6:	f8d8 2000 	ldr.w	r2, [r8]
    ffba:	9801      	ldr	r0, [sp, #4]
    ffbc:	b11a      	cbz	r2, ffc6 <d_print_array_type.isra.0+0x2e>
    ffbe:	4639      	mov	r1, r7
    ffc0:	f7fe fe0c 	bl	ebdc <d_print_comp>
    ffc4:	9801      	ldr	r0, [sp, #4]
    ffc6:	215d      	movs	r1, #93	; 0x5d
    ffc8:	b002      	add	sp, #8
    ffca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ffce:	f7fc bffa 	b.w	cfc6 <d_append_char>
    ffd2:	461c      	mov	r4, r3
    ffd4:	68a5      	ldr	r5, [r4, #8]
    ffd6:	b95d      	cbnz	r5, fff0 <d_print_array_type.isra.0+0x58>
    ffd8:	6863      	ldr	r3, [r4, #4]
    ffda:	781b      	ldrb	r3, [r3, #0]
    ffdc:	2b2a      	cmp	r3, #42	; 0x2a
    ffde:	d01a      	beq.n	10016 <d_print_array_type.isra.0+0x7e>
    ffe0:	2401      	movs	r4, #1
    ffe2:	490e      	ldr	r1, [pc, #56]	; (1001c <d_print_array_type.isra.0+0x84>)
    ffe4:	9001      	str	r0, [sp, #4]
    ffe6:	f7fd f819 	bl	d01c <d_append_string>
    ffea:	4625      	mov	r5, r4
    ffec:	9801      	ldr	r0, [sp, #4]
    ffee:	e003      	b.n	fff8 <d_print_array_type.isra.0+0x60>
    fff0:	6824      	ldr	r4, [r4, #0]
    fff2:	2c00      	cmp	r4, #0
    fff4:	d1ee      	bne.n	ffd4 <d_print_array_type.isra.0+0x3c>
    fff6:	2501      	movs	r5, #1
    fff8:	2300      	movs	r3, #0
    fffa:	4632      	mov	r2, r6
    fffc:	4639      	mov	r1, r7
    fffe:	9001      	str	r0, [sp, #4]
   10000:	f7ff ff51 	bl	fea6 <d_print_mod_list>
   10004:	9801      	ldr	r0, [sp, #4]
   10006:	b11c      	cbz	r4, 10010 <d_print_array_type.isra.0+0x78>
   10008:	2129      	movs	r1, #41	; 0x29
   1000a:	f7fc ffdc 	bl	cfc6 <d_append_char>
   1000e:	9801      	ldr	r0, [sp, #4]
   10010:	2d00      	cmp	r5, #0
   10012:	d1c7      	bne.n	ffa4 <d_print_array_type.isra.0+0xc>
   10014:	e7cb      	b.n	ffae <d_print_array_type.isra.0+0x16>
   10016:	462c      	mov	r4, r5
   10018:	e7ee      	b.n	fff8 <d_print_array_type.isra.0+0x60>
   1001a:	bf00      	nop
   1001c:	0003716f 	.word	0x0003716f

00010020 <d_print_expr_op>:
   10020:	b410      	push	{r4}
   10022:	7814      	ldrb	r4, [r2, #0]
   10024:	2c32      	cmp	r4, #50	; 0x32
   10026:	d106      	bne.n	10036 <d_print_expr_op+0x16>
   10028:	6893      	ldr	r3, [r2, #8]
   1002a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1002e:	e9d3 1201 	ldrd	r1, r2, [r3, #4]
   10032:	f7fc bfda 	b.w	cfea <d_append_buffer>
   10036:	f85d 4b04 	ldr.w	r4, [sp], #4
   1003a:	f7fe bdcf 	b.w	ebdc <d_print_comp>

0001003e <d_print_subexpr>:
   1003e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10040:	7813      	ldrb	r3, [r2, #0]
   10042:	4604      	mov	r4, r0
   10044:	460f      	mov	r7, r1
   10046:	4616      	mov	r6, r2
   10048:	2b01      	cmp	r3, #1
   1004a:	d913      	bls.n	10074 <d_print_subexpr+0x36>
   1004c:	2b31      	cmp	r3, #49	; 0x31
   1004e:	d011      	beq.n	10074 <d_print_subexpr+0x36>
   10050:	2b06      	cmp	r3, #6
   10052:	d00f      	beq.n	10074 <d_print_subexpr+0x36>
   10054:	2500      	movs	r5, #0
   10056:	2128      	movs	r1, #40	; 0x28
   10058:	f7fc ffb5 	bl	cfc6 <d_append_char>
   1005c:	4632      	mov	r2, r6
   1005e:	4639      	mov	r1, r7
   10060:	4620      	mov	r0, r4
   10062:	f7fe fdbb 	bl	ebdc <d_print_comp>
   10066:	b93d      	cbnz	r5, 10078 <d_print_subexpr+0x3a>
   10068:	4620      	mov	r0, r4
   1006a:	2129      	movs	r1, #41	; 0x29
   1006c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   10070:	f7fc bfa9 	b.w	cfc6 <d_append_char>
   10074:	2501      	movs	r5, #1
   10076:	e7f1      	b.n	1005c <d_print_subexpr+0x1e>
   10078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001007a <d_maybe_print_fold_expression>:
   1007a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1007e:	6893      	ldr	r3, [r2, #8]
   10080:	460d      	mov	r5, r1
   10082:	4604      	mov	r4, r0
   10084:	689b      	ldr	r3, [r3, #8]
   10086:	681b      	ldr	r3, [r3, #0]
   10088:	7819      	ldrb	r1, [r3, #0]
   1008a:	2966      	cmp	r1, #102	; 0x66
   1008c:	d15c      	bne.n	10148 <d_maybe_print_fold_expression+0xce>
   1008e:	68d2      	ldr	r2, [r2, #12]
   10090:	f8d0 9124 	ldr.w	r9, [r0, #292]	; 0x124
   10094:	e9d2 7602 	ldrd	r7, r6, [r2, #8]
   10098:	7832      	ldrb	r2, [r6, #0]
   1009a:	2a3c      	cmp	r2, #60	; 0x3c
   1009c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   100a0:	bf08      	it	eq
   100a2:	e9d6 6802 	ldrdeq	r6, r8, [r6, #8]
   100a6:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   100aa:	bf18      	it	ne
   100ac:	f04f 0800 	movne.w	r8, #0
   100b0:	785b      	ldrb	r3, [r3, #1]
   100b2:	2b6c      	cmp	r3, #108	; 0x6c
   100b4:	d01d      	beq.n	100f2 <d_maybe_print_fold_expression+0x78>
   100b6:	d808      	bhi.n	100ca <d_maybe_print_fold_expression+0x50>
   100b8:	2b4c      	cmp	r3, #76	; 0x4c
   100ba:	d02c      	beq.n	10116 <d_maybe_print_fold_expression+0x9c>
   100bc:	2b52      	cmp	r3, #82	; 0x52
   100be:	d02a      	beq.n	10116 <d_maybe_print_fold_expression+0x9c>
   100c0:	2001      	movs	r0, #1
   100c2:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
   100c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   100ca:	2b72      	cmp	r3, #114	; 0x72
   100cc:	d1f8      	bne.n	100c0 <d_maybe_print_fold_expression+0x46>
   100ce:	2128      	movs	r1, #40	; 0x28
   100d0:	f7fc ff79 	bl	cfc6 <d_append_char>
   100d4:	4632      	mov	r2, r6
   100d6:	4629      	mov	r1, r5
   100d8:	4620      	mov	r0, r4
   100da:	f7ff ffb0 	bl	1003e <d_print_subexpr>
   100de:	4629      	mov	r1, r5
   100e0:	4620      	mov	r0, r4
   100e2:	463a      	mov	r2, r7
   100e4:	f7ff ff9c 	bl	10020 <d_print_expr_op>
   100e8:	4918      	ldr	r1, [pc, #96]	; (1014c <d_maybe_print_fold_expression+0xd2>)
   100ea:	4620      	mov	r0, r4
   100ec:	f7fc ff96 	bl	d01c <d_append_string>
   100f0:	e7e6      	b.n	100c0 <d_maybe_print_fold_expression+0x46>
   100f2:	4917      	ldr	r1, [pc, #92]	; (10150 <d_maybe_print_fold_expression+0xd6>)
   100f4:	f7fc ff92 	bl	d01c <d_append_string>
   100f8:	463a      	mov	r2, r7
   100fa:	4629      	mov	r1, r5
   100fc:	4620      	mov	r0, r4
   100fe:	f7ff ff8f 	bl	10020 <d_print_expr_op>
   10102:	4632      	mov	r2, r6
   10104:	4629      	mov	r1, r5
   10106:	4620      	mov	r0, r4
   10108:	f7ff ff99 	bl	1003e <d_print_subexpr>
   1010c:	2129      	movs	r1, #41	; 0x29
   1010e:	4620      	mov	r0, r4
   10110:	f7fc ff59 	bl	cfc6 <d_append_char>
   10114:	e7d4      	b.n	100c0 <d_maybe_print_fold_expression+0x46>
   10116:	2128      	movs	r1, #40	; 0x28
   10118:	4620      	mov	r0, r4
   1011a:	f7fc ff54 	bl	cfc6 <d_append_char>
   1011e:	4632      	mov	r2, r6
   10120:	4629      	mov	r1, r5
   10122:	4620      	mov	r0, r4
   10124:	f7ff ff8b 	bl	1003e <d_print_subexpr>
   10128:	463a      	mov	r2, r7
   1012a:	4629      	mov	r1, r5
   1012c:	4620      	mov	r0, r4
   1012e:	f7ff ff77 	bl	10020 <d_print_expr_op>
   10132:	4908      	ldr	r1, [pc, #32]	; (10154 <d_maybe_print_fold_expression+0xda>)
   10134:	4620      	mov	r0, r4
   10136:	f7fc ff71 	bl	d01c <d_append_string>
   1013a:	463a      	mov	r2, r7
   1013c:	4629      	mov	r1, r5
   1013e:	4620      	mov	r0, r4
   10140:	f7ff ff6e 	bl	10020 <d_print_expr_op>
   10144:	4642      	mov	r2, r8
   10146:	e7dd      	b.n	10104 <d_maybe_print_fold_expression+0x8a>
   10148:	2000      	movs	r0, #0
   1014a:	e7bc      	b.n	100c6 <d_maybe_print_fold_expression+0x4c>
   1014c:	00037246 	.word	0x00037246
   10150:	00037241 	.word	0x00037241
   10154:	00037242 	.word	0x00037242

00010158 <d_demangle_callback.constprop.0>:
   10158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1015c:	b0e5      	sub	sp, #404	; 0x194
   1015e:	4605      	mov	r5, r0
   10160:	4689      	mov	r9, r1
   10162:	4690      	mov	r8, r2
   10164:	f890 b000 	ldrb.w	fp, [r0]
   10168:	af00      	add	r7, sp, #0
   1016a:	f1bb 0f5f 	cmp.w	fp, #95	; 0x5f
   1016e:	d102      	bne.n	10176 <d_demangle_callback.constprop.0+0x1e>
   10170:	7843      	ldrb	r3, [r0, #1]
   10172:	2b5a      	cmp	r3, #90	; 0x5a
   10174:	d071      	beq.n	1025a <d_demangle_callback.constprop.0+0x102>
   10176:	2208      	movs	r2, #8
   10178:	499a      	ldr	r1, [pc, #616]	; (103e4 <d_demangle_callback.constprop.0+0x28c>)
   1017a:	4628      	mov	r0, r5
   1017c:	f020 ff94 	bl	310a8 <strncmp>
   10180:	2800      	cmp	r0, #0
   10182:	d16d      	bne.n	10260 <d_demangle_callback.constprop.0+0x108>
   10184:	7a2b      	ldrb	r3, [r5, #8]
   10186:	2b2e      	cmp	r3, #46	; 0x2e
   10188:	d003      	beq.n	10192 <d_demangle_callback.constprop.0+0x3a>
   1018a:	2b5f      	cmp	r3, #95	; 0x5f
   1018c:	d001      	beq.n	10192 <d_demangle_callback.constprop.0+0x3a>
   1018e:	2b24      	cmp	r3, #36	; 0x24
   10190:	d166      	bne.n	10260 <d_demangle_callback.constprop.0+0x108>
   10192:	7a6b      	ldrb	r3, [r5, #9]
   10194:	2b44      	cmp	r3, #68	; 0x44
   10196:	d001      	beq.n	1019c <d_demangle_callback.constprop.0+0x44>
   10198:	2b49      	cmp	r3, #73	; 0x49
   1019a:	d161      	bne.n	10260 <d_demangle_callback.constprop.0+0x108>
   1019c:	7aaa      	ldrb	r2, [r5, #10]
   1019e:	2a5f      	cmp	r2, #95	; 0x5f
   101a0:	d15e      	bne.n	10260 <d_demangle_callback.constprop.0+0x108>
   101a2:	2b49      	cmp	r3, #73	; 0x49
   101a4:	bf0c      	ite	eq
   101a6:	f04f 0a02 	moveq.w	sl, #2
   101aa:	f04f 0a03 	movne.w	sl, #3
   101ae:	4628      	mov	r0, r5
   101b0:	2400      	movs	r4, #0
   101b2:	f001 fcb1 	bl	11b18 <strlen>
   101b6:	182b      	adds	r3, r5, r0
   101b8:	60bd      	str	r5, [r7, #8]
   101ba:	60fb      	str	r3, [r7, #12]
   101bc:	2311      	movs	r3, #17
   101be:	61fc      	str	r4, [r7, #28]
   101c0:	643c      	str	r4, [r7, #64]	; 0x40
   101c2:	e9c7 3504 	strd	r3, r5, [r7, #16]
   101c6:	0043      	lsls	r3, r0, #1
   101c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   101cc:	623b      	str	r3, [r7, #32]
   101ce:	e9c7 400a 	strd	r4, r0, [r7, #40]	; 0x28
   101d2:	e9c7 440c 	strd	r4, r4, [r7, #48]	; 0x30
   101d6:	e9c7 440e 	strd	r4, r4, [r7, #56]	; 0x38
   101da:	f200 80a0 	bhi.w	1031e <d_demangle_callback.constprop.0+0x1c6>
   101de:	466e      	mov	r6, sp
   101e0:	f1ba 0f01 	cmp.w	sl, #1
   101e4:	eba6 1340 	sub.w	r3, r6, r0, lsl #5
   101e8:	ea4f 0080 	mov.w	r0, r0, lsl #2
   101ec:	469d      	mov	sp, r3
   101ee:	61bb      	str	r3, [r7, #24]
   101f0:	f100 0007 	add.w	r0, r0, #7
   101f4:	f020 0007 	bic.w	r0, r0, #7
   101f8:	ebad 0d00 	sub.w	sp, sp, r0
   101fc:	f8c7 d024 	str.w	sp, [r7, #36]	; 0x24
   10200:	f000 8093 	beq.w	1032a <d_demangle_callback.constprop.0+0x1d2>
   10204:	f1aa 0302 	sub.w	r3, sl, #2
   10208:	2b01      	cmp	r3, #1
   1020a:	d82c      	bhi.n	10266 <d_demangle_callback.constprop.0+0x10e>
   1020c:	f1ba 0f02 	cmp.w	sl, #2
   10210:	7aeb      	ldrb	r3, [r5, #11]
   10212:	f105 010b 	add.w	r1, r5, #11
   10216:	bf0c      	ite	eq
   10218:	f04f 0a44 	moveq.w	sl, #68	; 0x44
   1021c:	f04f 0a45 	movne.w	sl, #69	; 0x45
   10220:	2b5f      	cmp	r3, #95	; 0x5f
   10222:	6179      	str	r1, [r7, #20]
   10224:	f000 80cf 	beq.w	103c6 <d_demangle_callback.constprop.0+0x26e>
   10228:	4608      	mov	r0, r1
   1022a:	6079      	str	r1, [r7, #4]
   1022c:	f001 fc74 	bl	11b18 <strlen>
   10230:	6879      	ldr	r1, [r7, #4]
   10232:	4602      	mov	r2, r0
   10234:	f107 0008 	add.w	r0, r7, #8
   10238:	f7fc fe18 	bl	ce6c <d_make_name>
   1023c:	4602      	mov	r2, r0
   1023e:	2300      	movs	r3, #0
   10240:	4651      	mov	r1, sl
   10242:	f107 0008 	add.w	r0, r7, #8
   10246:	f7fc fdd0 	bl	cdea <d_make_comp>
   1024a:	697d      	ldr	r5, [r7, #20]
   1024c:	4604      	mov	r4, r0
   1024e:	4628      	mov	r0, r5
   10250:	f001 fc62 	bl	11b18 <strlen>
   10254:	4428      	add	r0, r5
   10256:	6178      	str	r0, [r7, #20]
   10258:	e00a      	b.n	10270 <d_demangle_callback.constprop.0+0x118>
   1025a:	f04f 0a01 	mov.w	sl, #1
   1025e:	e7a6      	b.n	101ae <d_demangle_callback.constprop.0+0x56>
   10260:	f04f 0a00 	mov.w	sl, #0
   10264:	e7a3      	b.n	101ae <d_demangle_callback.constprop.0+0x56>
   10266:	f107 0008 	add.w	r0, r7, #8
   1026a:	f7fd fba1 	bl	d9b0 <d_type>
   1026e:	4604      	mov	r4, r0
   10270:	697b      	ldr	r3, [r7, #20]
   10272:	781d      	ldrb	r5, [r3, #0]
   10274:	2d00      	cmp	r5, #0
   10276:	f040 80b2 	bne.w	103de <d_demangle_callback.constprop.0+0x286>
   1027a:	2c00      	cmp	r4, #0
   1027c:	d04e      	beq.n	1031c <d_demangle_callback.constprop.0+0x1c4>
   1027e:	4621      	mov	r1, r4
   10280:	f107 0044 	add.w	r0, r7, #68	; 0x44
   10284:	f8c7 5144 	str.w	r5, [r7, #324]	; 0x144
   10288:	f887 5148 	strb.w	r5, [r7, #328]	; 0x148
   1028c:	f8c7 5164 	str.w	r5, [r7, #356]	; 0x164
   10290:	f8c7 5188 	str.w	r5, [r7, #392]	; 0x188
   10294:	e9c7 5555 	strd	r5, r5, [r7, #340]	; 0x154
   10298:	e9c7 555a 	strd	r5, r5, [r7, #360]	; 0x168
   1029c:	e9c7 5557 	strd	r5, r5, [r7, #348]	; 0x15c
   102a0:	e9c7 555c 	strd	r5, r5, [r7, #368]	; 0x170
   102a4:	e9c7 555e 	strd	r5, r5, [r7, #376]	; 0x178
   102a8:	e9c7 5560 	strd	r5, r5, [r7, #384]	; 0x180
   102ac:	e9c7 9853 	strd	r9, r8, [r7, #332]	; 0x14c
   102b0:	f7fc fe1c 	bl	ceec <d_count_templates_scopes>
   102b4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   102b8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   102bc:	2100      	movs	r1, #0
   102be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   102c2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
   102c6:	f8c7 118c 	str.w	r1, [r7, #396]	; 0x18c
   102ca:	f107 0044 	add.w	r0, r7, #68	; 0x44
   102ce:	bfb8      	it	lt
   102d0:	f8c7 5160 	strlt.w	r5, [r7, #352]	; 0x160
   102d4:	2a01      	cmp	r2, #1
   102d6:	fb03 f302 	mul.w	r3, r3, r2
   102da:	466d      	mov	r5, sp
   102dc:	bfb8      	it	lt
   102de:	2201      	movlt	r2, #1
   102e0:	2b01      	cmp	r3, #1
   102e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   102e6:	eba5 02c2 	sub.w	r2, r5, r2, lsl #3
   102ea:	bfb8      	it	lt
   102ec:	2301      	movlt	r3, #1
   102ee:	4695      	mov	sp, r2
   102f0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
   102f4:	4622      	mov	r2, r4
   102f6:	4669      	mov	r1, sp
   102f8:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
   102fc:	2111      	movs	r1, #17
   102fe:	469d      	mov	sp, r3
   10300:	f8c7 d180 	str.w	sp, [r7, #384]	; 0x180
   10304:	f7fe fc6a 	bl	ebdc <d_print_comp>
   10308:	f107 0044 	add.w	r0, r7, #68	; 0x44
   1030c:	46ad      	mov	sp, r5
   1030e:	f7fc fe49 	bl	cfa4 <d_print_flush>
   10312:	f8d7 415c 	ldr.w	r4, [r7, #348]	; 0x15c
   10316:	fab4 f484 	clz	r4, r4
   1031a:	0964      	lsrs	r4, r4, #5
   1031c:	46b5      	mov	sp, r6
   1031e:	4620      	mov	r0, r4
   10320:	f507 77ca 	add.w	r7, r7, #404	; 0x194
   10324:	46bd      	mov	sp, r7
   10326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1032a:	f1bb 0f5f 	cmp.w	fp, #95	; 0x5f
   1032e:	d001      	beq.n	10334 <d_demangle_callback.constprop.0+0x1dc>
   10330:	2400      	movs	r4, #0
   10332:	e79d      	b.n	10270 <d_demangle_callback.constprop.0+0x118>
   10334:	1c6b      	adds	r3, r5, #1
   10336:	617b      	str	r3, [r7, #20]
   10338:	786b      	ldrb	r3, [r5, #1]
   1033a:	2b5a      	cmp	r3, #90	; 0x5a
   1033c:	d1f8      	bne.n	10330 <d_demangle_callback.constprop.0+0x1d8>
   1033e:	3502      	adds	r5, #2
   10340:	4651      	mov	r1, sl
   10342:	f107 0008 	add.w	r0, r7, #8
   10346:	617d      	str	r5, [r7, #20]
   10348:	f7fe fa4a 	bl	e7e0 <d_encoding>
   1034c:	693b      	ldr	r3, [r7, #16]
   1034e:	4604      	mov	r4, r0
   10350:	07db      	lsls	r3, r3, #31
   10352:	d58d      	bpl.n	10270 <d_demangle_callback.constprop.0+0x118>
   10354:	6979      	ldr	r1, [r7, #20]
   10356:	780b      	ldrb	r3, [r1, #0]
   10358:	2b2e      	cmp	r3, #46	; 0x2e
   1035a:	d189      	bne.n	10270 <d_demangle_callback.constprop.0+0x118>
   1035c:	784b      	ldrb	r3, [r1, #1]
   1035e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   10362:	2a19      	cmp	r2, #25
   10364:	d907      	bls.n	10376 <d_demangle_callback.constprop.0+0x21e>
   10366:	2b5f      	cmp	r3, #95	; 0x5f
   10368:	d005      	beq.n	10376 <d_demangle_callback.constprop.0+0x21e>
   1036a:	3b30      	subs	r3, #48	; 0x30
   1036c:	2b09      	cmp	r3, #9
   1036e:	f63f af7f 	bhi.w	10270 <d_demangle_callback.constprop.0+0x118>
   10372:	460a      	mov	r2, r1
   10374:	e009      	b.n	1038a <d_demangle_callback.constprop.0+0x232>
   10376:	1c8b      	adds	r3, r1, #2
   10378:	461a      	mov	r2, r3
   1037a:	f813 0b01 	ldrb.w	r0, [r3], #1
   1037e:	f1a0 0561 	sub.w	r5, r0, #97	; 0x61
   10382:	2d19      	cmp	r5, #25
   10384:	d9f8      	bls.n	10378 <d_demangle_callback.constprop.0+0x220>
   10386:	285f      	cmp	r0, #95	; 0x5f
   10388:	d0f6      	beq.n	10378 <d_demangle_callback.constprop.0+0x220>
   1038a:	7813      	ldrb	r3, [r2, #0]
   1038c:	2b2e      	cmp	r3, #46	; 0x2e
   1038e:	d00e      	beq.n	103ae <d_demangle_callback.constprop.0+0x256>
   10390:	617a      	str	r2, [r7, #20]
   10392:	f107 0008 	add.w	r0, r7, #8
   10396:	1a52      	subs	r2, r2, r1
   10398:	f7fc fd68 	bl	ce6c <d_make_name>
   1039c:	4622      	mov	r2, r4
   1039e:	4603      	mov	r3, r0
   103a0:	214e      	movs	r1, #78	; 0x4e
   103a2:	f107 0008 	add.w	r0, r7, #8
   103a6:	f7fc fd20 	bl	cdea <d_make_comp>
   103aa:	4604      	mov	r4, r0
   103ac:	e7d2      	b.n	10354 <d_demangle_callback.constprop.0+0x1fc>
   103ae:	7853      	ldrb	r3, [r2, #1]
   103b0:	3b30      	subs	r3, #48	; 0x30
   103b2:	2b09      	cmp	r3, #9
   103b4:	d8ec      	bhi.n	10390 <d_demangle_callback.constprop.0+0x238>
   103b6:	1c90      	adds	r0, r2, #2
   103b8:	4602      	mov	r2, r0
   103ba:	3001      	adds	r0, #1
   103bc:	7813      	ldrb	r3, [r2, #0]
   103be:	3b30      	subs	r3, #48	; 0x30
   103c0:	2b09      	cmp	r3, #9
   103c2:	d9f9      	bls.n	103b8 <d_demangle_callback.constprop.0+0x260>
   103c4:	e7e1      	b.n	1038a <d_demangle_callback.constprop.0+0x232>
   103c6:	7b2b      	ldrb	r3, [r5, #12]
   103c8:	2b5a      	cmp	r3, #90	; 0x5a
   103ca:	f47f af2d 	bne.w	10228 <d_demangle_callback.constprop.0+0xd0>
   103ce:	350d      	adds	r5, #13
   103d0:	4621      	mov	r1, r4
   103d2:	f107 0008 	add.w	r0, r7, #8
   103d6:	617d      	str	r5, [r7, #20]
   103d8:	f7fe fa02 	bl	e7e0 <d_encoding>
   103dc:	e72e      	b.n	1023c <d_demangle_callback.constprop.0+0xe4>
   103de:	2400      	movs	r4, #0
   103e0:	e79c      	b.n	1031c <d_demangle_callback.constprop.0+0x1c4>
   103e2:	bf00      	nop
   103e4:	00036f52 	.word	0x00036f52

000103e8 <__cxa_demangle>:
   103e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   103ec:	460f      	mov	r7, r1
   103ee:	4616      	mov	r6, r2
   103f0:	461c      	mov	r4, r3
   103f2:	b948      	cbnz	r0, 10408 <__cxa_demangle+0x20>
   103f4:	b924      	cbnz	r4, 10400 <__cxa_demangle+0x18>
   103f6:	2500      	movs	r5, #0
   103f8:	4628      	mov	r0, r5
   103fa:	b004      	add	sp, #16
   103fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10400:	f06f 0302 	mvn.w	r3, #2
   10404:	6023      	str	r3, [r4, #0]
   10406:	e7f6      	b.n	103f6 <__cxa_demangle+0xe>
   10408:	b109      	cbz	r1, 1040e <__cxa_demangle+0x26>
   1040a:	2a00      	cmp	r2, #0
   1040c:	d0f2      	beq.n	103f4 <__cxa_demangle+0xc>
   1040e:	2300      	movs	r3, #0
   10410:	466a      	mov	r2, sp
   10412:	491e      	ldr	r1, [pc, #120]	; (1048c <__cxa_demangle+0xa4>)
   10414:	e9cd 3300 	strd	r3, r3, [sp]
   10418:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1041c:	f7ff fe9c 	bl	10158 <d_demangle_callback.constprop.0>
   10420:	b938      	cbnz	r0, 10432 <__cxa_demangle+0x4a>
   10422:	9800      	ldr	r0, [sp, #0]
   10424:	f015 f8e4 	bl	255f0 <free>
   10428:	2c00      	cmp	r4, #0
   1042a:	d0e4      	beq.n	103f6 <__cxa_demangle+0xe>
   1042c:	f06f 0301 	mvn.w	r3, #1
   10430:	e7e8      	b.n	10404 <__cxa_demangle+0x1c>
   10432:	9b03      	ldr	r3, [sp, #12]
   10434:	b963      	cbnz	r3, 10450 <__cxa_demangle+0x68>
   10436:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1043a:	9d00      	ldr	r5, [sp, #0]
   1043c:	b95d      	cbnz	r5, 10456 <__cxa_demangle+0x6e>
   1043e:	2c00      	cmp	r4, #0
   10440:	d0d9      	beq.n	103f6 <__cxa_demangle+0xe>
   10442:	f1b8 0f01 	cmp.w	r8, #1
   10446:	d1f1      	bne.n	1042c <__cxa_demangle+0x44>
   10448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1044c:	6023      	str	r3, [r4, #0]
   1044e:	e7d3      	b.n	103f8 <__cxa_demangle+0x10>
   10450:	f04f 0801 	mov.w	r8, #1
   10454:	e7f1      	b.n	1043a <__cxa_demangle+0x52>
   10456:	b91f      	cbnz	r7, 10460 <__cxa_demangle+0x78>
   10458:	b186      	cbz	r6, 1047c <__cxa_demangle+0x94>
   1045a:	f8c6 8000 	str.w	r8, [r6]
   1045e:	e00d      	b.n	1047c <__cxa_demangle+0x94>
   10460:	4628      	mov	r0, r5
   10462:	f001 fb59 	bl	11b18 <strlen>
   10466:	6833      	ldr	r3, [r6, #0]
   10468:	4298      	cmp	r0, r3
   1046a:	d20b      	bcs.n	10484 <__cxa_demangle+0x9c>
   1046c:	4629      	mov	r1, r5
   1046e:	4638      	mov	r0, r7
   10470:	f020 fe12 	bl	31098 <strcpy>
   10474:	4628      	mov	r0, r5
   10476:	463d      	mov	r5, r7
   10478:	f015 f8ba 	bl	255f0 <free>
   1047c:	2c00      	cmp	r4, #0
   1047e:	d0bb      	beq.n	103f8 <__cxa_demangle+0x10>
   10480:	2300      	movs	r3, #0
   10482:	e7e3      	b.n	1044c <__cxa_demangle+0x64>
   10484:	4638      	mov	r0, r7
   10486:	f015 f8b3 	bl	255f0 <free>
   1048a:	e7e6      	b.n	1045a <__cxa_demangle+0x72>
   1048c:	0000d2e7 	.word	0x0000d2e7

00010490 <__gcclibcxx_demangle_callback>:
   10490:	b508      	push	{r3, lr}
   10492:	b140      	cbz	r0, 104a6 <__gcclibcxx_demangle_callback+0x16>
   10494:	b139      	cbz	r1, 104a6 <__gcclibcxx_demangle_callback+0x16>
   10496:	f7ff fe5f 	bl	10158 <d_demangle_callback.constprop.0>
   1049a:	2800      	cmp	r0, #0
   1049c:	bf14      	ite	ne
   1049e:	2000      	movne	r0, #0
   104a0:	f06f 0001 	mvneq.w	r0, #1
   104a4:	bd08      	pop	{r3, pc}
   104a6:	f06f 0002 	mvn.w	r0, #2
   104aa:	e7fb      	b.n	104a4 <__gcclibcxx_demangle_callback+0x14>

000104ac <__aeabi_dmul>:
   104ac:	b570      	push	{r4, r5, r6, lr}
   104ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   104b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   104b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   104ba:	bf1d      	ittte	ne
   104bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   104c0:	ea94 0f0c 	teqne	r4, ip
   104c4:	ea95 0f0c 	teqne	r5, ip
   104c8:	f000 f8de 	bleq	10688 <__aeabi_dmul+0x1dc>
   104cc:	442c      	add	r4, r5
   104ce:	ea81 0603 	eor.w	r6, r1, r3
   104d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   104d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   104da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   104de:	bf18      	it	ne
   104e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   104e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   104e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   104ec:	d038      	beq.n	10560 <__aeabi_dmul+0xb4>
   104ee:	fba0 ce02 	umull	ip, lr, r0, r2
   104f2:	f04f 0500 	mov.w	r5, #0
   104f6:	fbe1 e502 	umlal	lr, r5, r1, r2
   104fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   104fe:	fbe0 e503 	umlal	lr, r5, r0, r3
   10502:	f04f 0600 	mov.w	r6, #0
   10506:	fbe1 5603 	umlal	r5, r6, r1, r3
   1050a:	f09c 0f00 	teq	ip, #0
   1050e:	bf18      	it	ne
   10510:	f04e 0e01 	orrne.w	lr, lr, #1
   10514:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   10518:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   1051c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   10520:	d204      	bcs.n	1052c <__aeabi_dmul+0x80>
   10522:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   10526:	416d      	adcs	r5, r5
   10528:	eb46 0606 	adc.w	r6, r6, r6
   1052c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   10530:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   10534:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   10538:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   1053c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   10540:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10544:	bf88      	it	hi
   10546:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   1054a:	d81e      	bhi.n	1058a <__aeabi_dmul+0xde>
   1054c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   10550:	bf08      	it	eq
   10552:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   10556:	f150 0000 	adcs.w	r0, r0, #0
   1055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1055e:	bd70      	pop	{r4, r5, r6, pc}
   10560:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   10564:	ea46 0101 	orr.w	r1, r6, r1
   10568:	ea40 0002 	orr.w	r0, r0, r2
   1056c:	ea81 0103 	eor.w	r1, r1, r3
   10570:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   10574:	bfc2      	ittt	gt
   10576:	ebd4 050c 	rsbsgt	r5, r4, ip
   1057a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1057e:	bd70      	popgt	{r4, r5, r6, pc}
   10580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10584:	f04f 0e00 	mov.w	lr, #0
   10588:	3c01      	subs	r4, #1
   1058a:	f300 80ab 	bgt.w	106e4 <__aeabi_dmul+0x238>
   1058e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   10592:	bfde      	ittt	le
   10594:	2000      	movle	r0, #0
   10596:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   1059a:	bd70      	pople	{r4, r5, r6, pc}
   1059c:	f1c4 0400 	rsb	r4, r4, #0
   105a0:	3c20      	subs	r4, #32
   105a2:	da35      	bge.n	10610 <__aeabi_dmul+0x164>
   105a4:	340c      	adds	r4, #12
   105a6:	dc1b      	bgt.n	105e0 <__aeabi_dmul+0x134>
   105a8:	f104 0414 	add.w	r4, r4, #20
   105ac:	f1c4 0520 	rsb	r5, r4, #32
   105b0:	fa00 f305 	lsl.w	r3, r0, r5
   105b4:	fa20 f004 	lsr.w	r0, r0, r4
   105b8:	fa01 f205 	lsl.w	r2, r1, r5
   105bc:	ea40 0002 	orr.w	r0, r0, r2
   105c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   105c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   105c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   105cc:	fa21 f604 	lsr.w	r6, r1, r4
   105d0:	eb42 0106 	adc.w	r1, r2, r6
   105d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   105d8:	bf08      	it	eq
   105da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   105de:	bd70      	pop	{r4, r5, r6, pc}
   105e0:	f1c4 040c 	rsb	r4, r4, #12
   105e4:	f1c4 0520 	rsb	r5, r4, #32
   105e8:	fa00 f304 	lsl.w	r3, r0, r4
   105ec:	fa20 f005 	lsr.w	r0, r0, r5
   105f0:	fa01 f204 	lsl.w	r2, r1, r4
   105f4:	ea40 0002 	orr.w	r0, r0, r2
   105f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   105fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   10600:	f141 0100 	adc.w	r1, r1, #0
   10604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10608:	bf08      	it	eq
   1060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1060e:	bd70      	pop	{r4, r5, r6, pc}
   10610:	f1c4 0520 	rsb	r5, r4, #32
   10614:	fa00 f205 	lsl.w	r2, r0, r5
   10618:	ea4e 0e02 	orr.w	lr, lr, r2
   1061c:	fa20 f304 	lsr.w	r3, r0, r4
   10620:	fa01 f205 	lsl.w	r2, r1, r5
   10624:	ea43 0302 	orr.w	r3, r3, r2
   10628:	fa21 f004 	lsr.w	r0, r1, r4
   1062c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   10630:	fa21 f204 	lsr.w	r2, r1, r4
   10634:	ea20 0002 	bic.w	r0, r0, r2
   10638:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   1063c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   10640:	bf08      	it	eq
   10642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   10646:	bd70      	pop	{r4, r5, r6, pc}
   10648:	f094 0f00 	teq	r4, #0
   1064c:	d10f      	bne.n	1066e <__aeabi_dmul+0x1c2>
   1064e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   10652:	0040      	lsls	r0, r0, #1
   10654:	eb41 0101 	adc.w	r1, r1, r1
   10658:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   1065c:	bf08      	it	eq
   1065e:	3c01      	subeq	r4, #1
   10660:	d0f7      	beq.n	10652 <__aeabi_dmul+0x1a6>
   10662:	ea41 0106 	orr.w	r1, r1, r6
   10666:	f095 0f00 	teq	r5, #0
   1066a:	bf18      	it	ne
   1066c:	4770      	bxne	lr
   1066e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   10672:	0052      	lsls	r2, r2, #1
   10674:	eb43 0303 	adc.w	r3, r3, r3
   10678:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1067c:	bf08      	it	eq
   1067e:	3d01      	subeq	r5, #1
   10680:	d0f7      	beq.n	10672 <__aeabi_dmul+0x1c6>
   10682:	ea43 0306 	orr.w	r3, r3, r6
   10686:	4770      	bx	lr
   10688:	ea94 0f0c 	teq	r4, ip
   1068c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   10690:	bf18      	it	ne
   10692:	ea95 0f0c 	teqne	r5, ip
   10696:	d00c      	beq.n	106b2 <__aeabi_dmul+0x206>
   10698:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   1069c:	bf18      	it	ne
   1069e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   106a2:	d1d1      	bne.n	10648 <__aeabi_dmul+0x19c>
   106a4:	ea81 0103 	eor.w	r1, r1, r3
   106a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   106ac:	f04f 0000 	mov.w	r0, #0
   106b0:	bd70      	pop	{r4, r5, r6, pc}
   106b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   106b6:	bf06      	itte	eq
   106b8:	4610      	moveq	r0, r2
   106ba:	4619      	moveq	r1, r3
   106bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   106c0:	d019      	beq.n	106f6 <__aeabi_dmul+0x24a>
   106c2:	ea94 0f0c 	teq	r4, ip
   106c6:	d102      	bne.n	106ce <__aeabi_dmul+0x222>
   106c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   106cc:	d113      	bne.n	106f6 <__aeabi_dmul+0x24a>
   106ce:	ea95 0f0c 	teq	r5, ip
   106d2:	d105      	bne.n	106e0 <__aeabi_dmul+0x234>
   106d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   106d8:	bf1c      	itt	ne
   106da:	4610      	movne	r0, r2
   106dc:	4619      	movne	r1, r3
   106de:	d10a      	bne.n	106f6 <__aeabi_dmul+0x24a>
   106e0:	ea81 0103 	eor.w	r1, r1, r3
   106e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   106e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   106ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   106f0:	f04f 0000 	mov.w	r0, #0
   106f4:	bd70      	pop	{r4, r5, r6, pc}
   106f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   106fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   106fe:	bd70      	pop	{r4, r5, r6, pc}

00010700 <__aeabi_ddiv>:
   10700:	b570      	push	{r4, r5, r6, lr}
   10702:	f04f 0cff 	mov.w	ip, #255	; 0xff
   10706:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   1070a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1070e:	bf1d      	ittte	ne
   10710:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   10714:	ea94 0f0c 	teqne	r4, ip
   10718:	ea95 0f0c 	teqne	r5, ip
   1071c:	f000 f8a7 	bleq	1086e <__aeabi_ddiv+0x16e>
   10720:	eba4 0405 	sub.w	r4, r4, r5
   10724:	ea81 0e03 	eor.w	lr, r1, r3
   10728:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   1072c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   10730:	f000 8088 	beq.w	10844 <__aeabi_ddiv+0x144>
   10734:	ea4f 3303 	mov.w	r3, r3, lsl #12
   10738:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   1073c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   10740:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   10744:	ea4f 2202 	mov.w	r2, r2, lsl #8
   10748:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   1074c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   10750:	ea4f 2600 	mov.w	r6, r0, lsl #8
   10754:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   10758:	429d      	cmp	r5, r3
   1075a:	bf08      	it	eq
   1075c:	4296      	cmpeq	r6, r2
   1075e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   10762:	f504 7440 	add.w	r4, r4, #768	; 0x300
   10766:	d202      	bcs.n	1076e <__aeabi_ddiv+0x6e>
   10768:	085b      	lsrs	r3, r3, #1
   1076a:	ea4f 0232 	mov.w	r2, r2, rrx
   1076e:	1ab6      	subs	r6, r6, r2
   10770:	eb65 0503 	sbc.w	r5, r5, r3
   10774:	085b      	lsrs	r3, r3, #1
   10776:	ea4f 0232 	mov.w	r2, r2, rrx
   1077a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1077e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   10782:	ebb6 0e02 	subs.w	lr, r6, r2
   10786:	eb75 0e03 	sbcs.w	lr, r5, r3
   1078a:	bf22      	ittt	cs
   1078c:	1ab6      	subcs	r6, r6, r2
   1078e:	4675      	movcs	r5, lr
   10790:	ea40 000c 	orrcs.w	r0, r0, ip
   10794:	085b      	lsrs	r3, r3, #1
   10796:	ea4f 0232 	mov.w	r2, r2, rrx
   1079a:	ebb6 0e02 	subs.w	lr, r6, r2
   1079e:	eb75 0e03 	sbcs.w	lr, r5, r3
   107a2:	bf22      	ittt	cs
   107a4:	1ab6      	subcs	r6, r6, r2
   107a6:	4675      	movcs	r5, lr
   107a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   107ac:	085b      	lsrs	r3, r3, #1
   107ae:	ea4f 0232 	mov.w	r2, r2, rrx
   107b2:	ebb6 0e02 	subs.w	lr, r6, r2
   107b6:	eb75 0e03 	sbcs.w	lr, r5, r3
   107ba:	bf22      	ittt	cs
   107bc:	1ab6      	subcs	r6, r6, r2
   107be:	4675      	movcs	r5, lr
   107c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   107c4:	085b      	lsrs	r3, r3, #1
   107c6:	ea4f 0232 	mov.w	r2, r2, rrx
   107ca:	ebb6 0e02 	subs.w	lr, r6, r2
   107ce:	eb75 0e03 	sbcs.w	lr, r5, r3
   107d2:	bf22      	ittt	cs
   107d4:	1ab6      	subcs	r6, r6, r2
   107d6:	4675      	movcs	r5, lr
   107d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   107dc:	ea55 0e06 	orrs.w	lr, r5, r6
   107e0:	d018      	beq.n	10814 <__aeabi_ddiv+0x114>
   107e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   107e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   107ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
   107ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   107f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   107f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   107fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   107fe:	d1c0      	bne.n	10782 <__aeabi_ddiv+0x82>
   10800:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10804:	d10b      	bne.n	1081e <__aeabi_ddiv+0x11e>
   10806:	ea41 0100 	orr.w	r1, r1, r0
   1080a:	f04f 0000 	mov.w	r0, #0
   1080e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   10812:	e7b6      	b.n	10782 <__aeabi_ddiv+0x82>
   10814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   10818:	bf04      	itt	eq
   1081a:	4301      	orreq	r1, r0
   1081c:	2000      	moveq	r0, #0
   1081e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   10822:	bf88      	it	hi
   10824:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   10828:	f63f aeaf 	bhi.w	1058a <__aeabi_dmul+0xde>
   1082c:	ebb5 0c03 	subs.w	ip, r5, r3
   10830:	bf04      	itt	eq
   10832:	ebb6 0c02 	subseq.w	ip, r6, r2
   10836:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   1083a:	f150 0000 	adcs.w	r0, r0, #0
   1083e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   10842:	bd70      	pop	{r4, r5, r6, pc}
   10844:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   10848:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   1084c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   10850:	bfc2      	ittt	gt
   10852:	ebd4 050c 	rsbsgt	r5, r4, ip
   10856:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1085a:	bd70      	popgt	{r4, r5, r6, pc}
   1085c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10860:	f04f 0e00 	mov.w	lr, #0
   10864:	3c01      	subs	r4, #1
   10866:	e690      	b.n	1058a <__aeabi_dmul+0xde>
   10868:	ea45 0e06 	orr.w	lr, r5, r6
   1086c:	e68d      	b.n	1058a <__aeabi_dmul+0xde>
   1086e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   10872:	ea94 0f0c 	teq	r4, ip
   10876:	bf08      	it	eq
   10878:	ea95 0f0c 	teqeq	r5, ip
   1087c:	f43f af3b 	beq.w	106f6 <__aeabi_dmul+0x24a>
   10880:	ea94 0f0c 	teq	r4, ip
   10884:	d10a      	bne.n	1089c <__aeabi_ddiv+0x19c>
   10886:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   1088a:	f47f af34 	bne.w	106f6 <__aeabi_dmul+0x24a>
   1088e:	ea95 0f0c 	teq	r5, ip
   10892:	f47f af25 	bne.w	106e0 <__aeabi_dmul+0x234>
   10896:	4610      	mov	r0, r2
   10898:	4619      	mov	r1, r3
   1089a:	e72c      	b.n	106f6 <__aeabi_dmul+0x24a>
   1089c:	ea95 0f0c 	teq	r5, ip
   108a0:	d106      	bne.n	108b0 <__aeabi_ddiv+0x1b0>
   108a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   108a6:	f43f aefd 	beq.w	106a4 <__aeabi_dmul+0x1f8>
   108aa:	4610      	mov	r0, r2
   108ac:	4619      	mov	r1, r3
   108ae:	e722      	b.n	106f6 <__aeabi_dmul+0x24a>
   108b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   108b4:	bf18      	it	ne
   108b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   108ba:	f47f aec5 	bne.w	10648 <__aeabi_dmul+0x19c>
   108be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   108c2:	f47f af0d 	bne.w	106e0 <__aeabi_dmul+0x234>
   108c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   108ca:	f47f aeeb 	bne.w	106a4 <__aeabi_dmul+0x1f8>
   108ce:	e712      	b.n	106f6 <__aeabi_dmul+0x24a>

000108d0 <__gedf2>:
   108d0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   108d4:	e006      	b.n	108e4 <__cmpdf2+0x4>
   108d6:	bf00      	nop

000108d8 <__ledf2>:
   108d8:	f04f 0c01 	mov.w	ip, #1
   108dc:	e002      	b.n	108e4 <__cmpdf2+0x4>
   108de:	bf00      	nop

000108e0 <__cmpdf2>:
   108e0:	f04f 0c01 	mov.w	ip, #1
   108e4:	f84d cd04 	str.w	ip, [sp, #-4]!
   108e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   108ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   108f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   108f4:	bf18      	it	ne
   108f6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   108fa:	d01b      	beq.n	10934 <__cmpdf2+0x54>
   108fc:	b001      	add	sp, #4
   108fe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   10902:	bf0c      	ite	eq
   10904:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   10908:	ea91 0f03 	teqne	r1, r3
   1090c:	bf02      	ittt	eq
   1090e:	ea90 0f02 	teqeq	r0, r2
   10912:	2000      	moveq	r0, #0
   10914:	4770      	bxeq	lr
   10916:	f110 0f00 	cmn.w	r0, #0
   1091a:	ea91 0f03 	teq	r1, r3
   1091e:	bf58      	it	pl
   10920:	4299      	cmppl	r1, r3
   10922:	bf08      	it	eq
   10924:	4290      	cmpeq	r0, r2
   10926:	bf2c      	ite	cs
   10928:	17d8      	asrcs	r0, r3, #31
   1092a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   1092e:	f040 0001 	orr.w	r0, r0, #1
   10932:	4770      	bx	lr
   10934:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10938:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1093c:	d102      	bne.n	10944 <__cmpdf2+0x64>
   1093e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   10942:	d107      	bne.n	10954 <__cmpdf2+0x74>
   10944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   10948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   1094c:	d1d6      	bne.n	108fc <__cmpdf2+0x1c>
   1094e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   10952:	d0d3      	beq.n	108fc <__cmpdf2+0x1c>
   10954:	f85d 0b04 	ldr.w	r0, [sp], #4
   10958:	4770      	bx	lr
   1095a:	bf00      	nop

0001095c <__aeabi_cdrcmple>:
   1095c:	4684      	mov	ip, r0
   1095e:	4610      	mov	r0, r2
   10960:	4662      	mov	r2, ip
   10962:	468c      	mov	ip, r1
   10964:	4619      	mov	r1, r3
   10966:	4663      	mov	r3, ip
   10968:	e000      	b.n	1096c <__aeabi_cdcmpeq>
   1096a:	bf00      	nop

0001096c <__aeabi_cdcmpeq>:
   1096c:	b501      	push	{r0, lr}
   1096e:	f7ff ffb7 	bl	108e0 <__cmpdf2>
   10972:	2800      	cmp	r0, #0
   10974:	bf48      	it	mi
   10976:	f110 0f00 	cmnmi.w	r0, #0
   1097a:	bd01      	pop	{r0, pc}

0001097c <__aeabi_dcmpeq>:
   1097c:	f84d ed08 	str.w	lr, [sp, #-8]!
   10980:	f7ff fff4 	bl	1096c <__aeabi_cdcmpeq>
   10984:	bf0c      	ite	eq
   10986:	2001      	moveq	r0, #1
   10988:	2000      	movne	r0, #0
   1098a:	f85d fb08 	ldr.w	pc, [sp], #8
   1098e:	bf00      	nop

00010990 <__aeabi_dcmplt>:
   10990:	f84d ed08 	str.w	lr, [sp, #-8]!
   10994:	f7ff ffea 	bl	1096c <__aeabi_cdcmpeq>
   10998:	bf34      	ite	cc
   1099a:	2001      	movcc	r0, #1
   1099c:	2000      	movcs	r0, #0
   1099e:	f85d fb08 	ldr.w	pc, [sp], #8
   109a2:	bf00      	nop

000109a4 <__aeabi_dcmple>:
   109a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   109a8:	f7ff ffe0 	bl	1096c <__aeabi_cdcmpeq>
   109ac:	bf94      	ite	ls
   109ae:	2001      	movls	r0, #1
   109b0:	2000      	movhi	r0, #0
   109b2:	f85d fb08 	ldr.w	pc, [sp], #8
   109b6:	bf00      	nop

000109b8 <__aeabi_dcmpge>:
   109b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   109bc:	f7ff ffce 	bl	1095c <__aeabi_cdrcmple>
   109c0:	bf94      	ite	ls
   109c2:	2001      	movls	r0, #1
   109c4:	2000      	movhi	r0, #0
   109c6:	f85d fb08 	ldr.w	pc, [sp], #8
   109ca:	bf00      	nop

000109cc <__aeabi_dcmpgt>:
   109cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   109d0:	f7ff ffc4 	bl	1095c <__aeabi_cdrcmple>
   109d4:	bf34      	ite	cc
   109d6:	2001      	movcc	r0, #1
   109d8:	2000      	movcs	r0, #0
   109da:	f85d fb08 	ldr.w	pc, [sp], #8
   109de:	bf00      	nop

000109e0 <__aeabi_d2iz>:
   109e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   109e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   109e8:	d215      	bcs.n	10a16 <__aeabi_d2iz+0x36>
   109ea:	d511      	bpl.n	10a10 <__aeabi_d2iz+0x30>
   109ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   109f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   109f4:	d912      	bls.n	10a1c <__aeabi_d2iz+0x3c>
   109f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   109fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   109fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   10a02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   10a06:	fa23 f002 	lsr.w	r0, r3, r2
   10a0a:	bf18      	it	ne
   10a0c:	4240      	negne	r0, r0
   10a0e:	4770      	bx	lr
   10a10:	f04f 0000 	mov.w	r0, #0
   10a14:	4770      	bx	lr
   10a16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   10a1a:	d105      	bne.n	10a28 <__aeabi_d2iz+0x48>
   10a1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   10a20:	bf08      	it	eq
   10a22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   10a26:	4770      	bx	lr
   10a28:	f04f 0000 	mov.w	r0, #0
   10a2c:	4770      	bx	lr
   10a2e:	bf00      	nop

00010a30 <__aeabi_d2f>:
   10a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
   10a34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   10a38:	bf24      	itt	cs
   10a3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   10a3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   10a42:	d90d      	bls.n	10a60 <__aeabi_d2f+0x30>
   10a44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   10a48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   10a4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   10a50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10a54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   10a58:	bf08      	it	eq
   10a5a:	f020 0001 	biceq.w	r0, r0, #1
   10a5e:	4770      	bx	lr
   10a60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   10a64:	d121      	bne.n	10aaa <__aeabi_d2f+0x7a>
   10a66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   10a6a:	bfbc      	itt	lt
   10a6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   10a70:	4770      	bxlt	lr
   10a72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   10a76:	ea4f 5252 	mov.w	r2, r2, lsr #21
   10a7a:	f1c2 0218 	rsb	r2, r2, #24
   10a7e:	f1c2 0c20 	rsb	ip, r2, #32
   10a82:	fa10 f30c 	lsls.w	r3, r0, ip
   10a86:	fa20 f002 	lsr.w	r0, r0, r2
   10a8a:	bf18      	it	ne
   10a8c:	f040 0001 	orrne.w	r0, r0, #1
   10a90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   10a94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   10a98:	fa03 fc0c 	lsl.w	ip, r3, ip
   10a9c:	ea40 000c 	orr.w	r0, r0, ip
   10aa0:	fa23 f302 	lsr.w	r3, r3, r2
   10aa4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   10aa8:	e7cc      	b.n	10a44 <__aeabi_d2f+0x14>
   10aaa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   10aae:	d107      	bne.n	10ac0 <__aeabi_d2f+0x90>
   10ab0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   10ab4:	bf1e      	ittt	ne
   10ab6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   10aba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   10abe:	4770      	bxne	lr
   10ac0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   10ac4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   10ac8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   10acc:	4770      	bx	lr
   10ace:	bf00      	nop

00010ad0 <__aeabi_d2lz>:
   10ad0:	b538      	push	{r3, r4, r5, lr}
   10ad2:	2200      	movs	r2, #0
   10ad4:	2300      	movs	r3, #0
   10ad6:	4604      	mov	r4, r0
   10ad8:	460d      	mov	r5, r1
   10ada:	f7ff ff59 	bl	10990 <__aeabi_dcmplt>
   10ade:	b928      	cbnz	r0, 10aec <__aeabi_d2lz+0x1c>
   10ae0:	4620      	mov	r0, r4
   10ae2:	4629      	mov	r1, r5
   10ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10ae8:	f000 b80a 	b.w	10b00 <__aeabi_d2ulz>
   10aec:	4620      	mov	r0, r4
   10aee:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   10af2:	f000 f805 	bl	10b00 <__aeabi_d2ulz>
   10af6:	4240      	negs	r0, r0
   10af8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   10afc:	bd38      	pop	{r3, r4, r5, pc}
   10afe:	bf00      	nop

00010b00 <__aeabi_d2ulz>:
   10b00:	b5d0      	push	{r4, r6, r7, lr}
   10b02:	2200      	movs	r2, #0
   10b04:	4b0b      	ldr	r3, [pc, #44]	; (10b34 <__aeabi_d2ulz+0x34>)
   10b06:	4606      	mov	r6, r0
   10b08:	460f      	mov	r7, r1
   10b0a:	f7ff fccf 	bl	104ac <__aeabi_dmul>
   10b0e:	f000 ffd9 	bl	11ac4 <__aeabi_d2uiz>
   10b12:	4604      	mov	r4, r0
   10b14:	f7fb fcd6 	bl	c4c4 <__aeabi_ui2d>
   10b18:	2200      	movs	r2, #0
   10b1a:	4b07      	ldr	r3, [pc, #28]	; (10b38 <__aeabi_d2ulz+0x38>)
   10b1c:	f7ff fcc6 	bl	104ac <__aeabi_dmul>
   10b20:	4602      	mov	r2, r0
   10b22:	460b      	mov	r3, r1
   10b24:	4630      	mov	r0, r6
   10b26:	4639      	mov	r1, r7
   10b28:	f7fb fb8e 	bl	c248 <__aeabi_dsub>
   10b2c:	f000 ffca 	bl	11ac4 <__aeabi_d2uiz>
   10b30:	4621      	mov	r1, r4
   10b32:	bdd0      	pop	{r4, r6, r7, pc}
   10b34:	3df00000 	.word	0x3df00000
   10b38:	41f00000 	.word	0x41f00000

00010b3c <selfrel_offset31>:
   10b3c:	6803      	ldr	r3, [r0, #0]
   10b3e:	005a      	lsls	r2, r3, #1
   10b40:	bf4c      	ite	mi
   10b42:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   10b46:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   10b4a:	4418      	add	r0, r3
   10b4c:	4770      	bx	lr
   10b4e:	bf00      	nop

00010b50 <search_EIT_table>:
   10b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10b54:	b339      	cbz	r1, 10ba6 <search_EIT_table+0x56>
   10b56:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
   10b5a:	4606      	mov	r6, r0
   10b5c:	4617      	mov	r7, r2
   10b5e:	f04f 0900 	mov.w	r9, #0
   10b62:	4645      	mov	r5, r8
   10b64:	eb19 0105 	adds.w	r1, r9, r5
   10b68:	bf48      	it	mi
   10b6a:	3101      	addmi	r1, #1
   10b6c:	1049      	asrs	r1, r1, #1
   10b6e:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
   10b72:	00cc      	lsls	r4, r1, #3
   10b74:	4650      	mov	r0, sl
   10b76:	f7ff ffe1 	bl	10b3c <selfrel_offset31>
   10b7a:	3408      	adds	r4, #8
   10b7c:	4588      	cmp	r8, r1
   10b7e:	4603      	mov	r3, r0
   10b80:	eb06 0004 	add.w	r0, r6, r4
   10b84:	d009      	beq.n	10b9a <search_EIT_table+0x4a>
   10b86:	42bb      	cmp	r3, r7
   10b88:	d809      	bhi.n	10b9e <search_EIT_table+0x4e>
   10b8a:	f7ff ffd7 	bl	10b3c <selfrel_offset31>
   10b8e:	3801      	subs	r0, #1
   10b90:	f101 0901 	add.w	r9, r1, #1
   10b94:	42b8      	cmp	r0, r7
   10b96:	d3e5      	bcc.n	10b64 <search_EIT_table+0x14>
   10b98:	e007      	b.n	10baa <search_EIT_table+0x5a>
   10b9a:	42bb      	cmp	r3, r7
   10b9c:	d905      	bls.n	10baa <search_EIT_table+0x5a>
   10b9e:	4589      	cmp	r9, r1
   10ba0:	f101 35ff 	add.w	r5, r1, #4294967295	; 0xffffffff
   10ba4:	d1de      	bne.n	10b64 <search_EIT_table+0x14>
   10ba6:	f04f 0a00 	mov.w	sl, #0
   10baa:	4650      	mov	r0, sl
   10bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00010bb0 <__gnu_unwind_get_pr_addr>:
   10bb0:	2801      	cmp	r0, #1
   10bb2:	d006      	beq.n	10bc2 <__gnu_unwind_get_pr_addr+0x12>
   10bb4:	2802      	cmp	r0, #2
   10bb6:	d006      	beq.n	10bc6 <__gnu_unwind_get_pr_addr+0x16>
   10bb8:	2800      	cmp	r0, #0
   10bba:	4804      	ldr	r0, [pc, #16]	; (10bcc <__gnu_unwind_get_pr_addr+0x1c>)
   10bbc:	bf18      	it	ne
   10bbe:	2000      	movne	r0, #0
   10bc0:	4770      	bx	lr
   10bc2:	4803      	ldr	r0, [pc, #12]	; (10bd0 <__gnu_unwind_get_pr_addr+0x20>)
   10bc4:	4770      	bx	lr
   10bc6:	4803      	ldr	r0, [pc, #12]	; (10bd4 <__gnu_unwind_get_pr_addr+0x24>)
   10bc8:	4770      	bx	lr
   10bca:	bf00      	nop
   10bcc:	000112cd 	.word	0x000112cd
   10bd0:	000112d1 	.word	0x000112d1
   10bd4:	000112d5 	.word	0x000112d5

00010bd8 <get_eit_entry>:
   10bd8:	4b23      	ldr	r3, [pc, #140]	; (10c68 <get_eit_entry+0x90>)
   10bda:	b530      	push	{r4, r5, lr}
   10bdc:	4604      	mov	r4, r0
   10bde:	b083      	sub	sp, #12
   10be0:	1e8d      	subs	r5, r1, #2
   10be2:	b343      	cbz	r3, 10c36 <get_eit_entry+0x5e>
   10be4:	a901      	add	r1, sp, #4
   10be6:	4628      	mov	r0, r5
   10be8:	e000      	b.n	10bec <get_eit_entry+0x14>
   10bea:	bf00      	nop
   10bec:	b1f0      	cbz	r0, 10c2c <get_eit_entry+0x54>
   10bee:	9901      	ldr	r1, [sp, #4]
   10bf0:	462a      	mov	r2, r5
   10bf2:	f7ff ffad 	bl	10b50 <search_EIT_table>
   10bf6:	4601      	mov	r1, r0
   10bf8:	b1c0      	cbz	r0, 10c2c <get_eit_entry+0x54>
   10bfa:	f7ff ff9f 	bl	10b3c <selfrel_offset31>
   10bfe:	684b      	ldr	r3, [r1, #4]
   10c00:	64a0      	str	r0, [r4, #72]	; 0x48
   10c02:	2b01      	cmp	r3, #1
   10c04:	d02c      	beq.n	10c60 <get_eit_entry+0x88>
   10c06:	2b00      	cmp	r3, #0
   10c08:	f101 0004 	add.w	r0, r1, #4
   10c0c:	db24      	blt.n	10c58 <get_eit_entry+0x80>
   10c0e:	f7ff ff95 	bl	10b3c <selfrel_offset31>
   10c12:	2300      	movs	r3, #0
   10c14:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   10c18:	6803      	ldr	r3, [r0, #0]
   10c1a:	2b00      	cmp	r3, #0
   10c1c:	db11      	blt.n	10c42 <get_eit_entry+0x6a>
   10c1e:	f7ff ff8d 	bl	10b3c <selfrel_offset31>
   10c22:	4603      	mov	r3, r0
   10c24:	2000      	movs	r0, #0
   10c26:	6123      	str	r3, [r4, #16]
   10c28:	b003      	add	sp, #12
   10c2a:	bd30      	pop	{r4, r5, pc}
   10c2c:	2300      	movs	r3, #0
   10c2e:	2009      	movs	r0, #9
   10c30:	6123      	str	r3, [r4, #16]
   10c32:	b003      	add	sp, #12
   10c34:	bd30      	pop	{r4, r5, pc}
   10c36:	490d      	ldr	r1, [pc, #52]	; (10c6c <get_eit_entry+0x94>)
   10c38:	480d      	ldr	r0, [pc, #52]	; (10c70 <get_eit_entry+0x98>)
   10c3a:	1a09      	subs	r1, r1, r0
   10c3c:	10c9      	asrs	r1, r1, #3
   10c3e:	9101      	str	r1, [sp, #4]
   10c40:	e7d6      	b.n	10bf0 <get_eit_entry+0x18>
   10c42:	f3c3 6003 	ubfx	r0, r3, #24, #4
   10c46:	f7ff ffb3 	bl	10bb0 <__gnu_unwind_get_pr_addr>
   10c4a:	2800      	cmp	r0, #0
   10c4c:	6120      	str	r0, [r4, #16]
   10c4e:	bf14      	ite	ne
   10c50:	2000      	movne	r0, #0
   10c52:	2009      	moveq	r0, #9
   10c54:	b003      	add	sp, #12
   10c56:	bd30      	pop	{r4, r5, pc}
   10c58:	2301      	movs	r3, #1
   10c5a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
   10c5e:	e7db      	b.n	10c18 <get_eit_entry+0x40>
   10c60:	2300      	movs	r3, #0
   10c62:	2005      	movs	r0, #5
   10c64:	6123      	str	r3, [r4, #16]
   10c66:	e7df      	b.n	10c28 <get_eit_entry+0x50>
   10c68:	00000000 	.word	0x00000000
   10c6c:	000315ac 	.word	0x000315ac
   10c70:	000313fc 	.word	0x000313fc

00010c74 <restore_non_core_regs>:
   10c74:	6803      	ldr	r3, [r0, #0]
   10c76:	07da      	lsls	r2, r3, #31
   10c78:	b510      	push	{r4, lr}
   10c7a:	4604      	mov	r4, r0
   10c7c:	d406      	bmi.n	10c8c <restore_non_core_regs+0x18>
   10c7e:	079b      	lsls	r3, r3, #30
   10c80:	f100 0048 	add.w	r0, r0, #72	; 0x48
   10c84:	d509      	bpl.n	10c9a <restore_non_core_regs+0x26>
   10c86:	f000 fc93 	bl	115b0 <__gnu_Unwind_Restore_VFP_D>
   10c8a:	6823      	ldr	r3, [r4, #0]
   10c8c:	0759      	lsls	r1, r3, #29
   10c8e:	d509      	bpl.n	10ca4 <restore_non_core_regs+0x30>
   10c90:	071a      	lsls	r2, r3, #28
   10c92:	d50e      	bpl.n	10cb2 <restore_non_core_regs+0x3e>
   10c94:	06db      	lsls	r3, r3, #27
   10c96:	d513      	bpl.n	10cc0 <restore_non_core_regs+0x4c>
   10c98:	bd10      	pop	{r4, pc}
   10c9a:	f000 fc81 	bl	115a0 <__gnu_Unwind_Restore_VFP>
   10c9e:	6823      	ldr	r3, [r4, #0]
   10ca0:	0759      	lsls	r1, r3, #29
   10ca2:	d4f5      	bmi.n	10c90 <restore_non_core_regs+0x1c>
   10ca4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   10ca8:	f000 fc8a 	bl	115c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   10cac:	6823      	ldr	r3, [r4, #0]
   10cae:	071a      	lsls	r2, r3, #28
   10cb0:	d4f0      	bmi.n	10c94 <restore_non_core_regs+0x20>
   10cb2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   10cb6:	f000 fc8b 	bl	115d0 <__gnu_Unwind_Restore_WMMXD>
   10cba:	6823      	ldr	r3, [r4, #0]
   10cbc:	06db      	lsls	r3, r3, #27
   10cbe:	d4eb      	bmi.n	10c98 <restore_non_core_regs+0x24>
   10cc0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   10cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10cc8:	f000 bcc6 	b.w	11658 <__gnu_Unwind_Restore_WMMXC>

00010ccc <_Unwind_decode_typeinfo_ptr.isra.0>:
   10ccc:	4603      	mov	r3, r0
   10cce:	6800      	ldr	r0, [r0, #0]
   10cd0:	b100      	cbz	r0, 10cd4 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
   10cd2:	4418      	add	r0, r3
   10cd4:	4770      	bx	lr
   10cd6:	bf00      	nop

00010cd8 <__gnu_unwind_24bit.isra.0>:
   10cd8:	2009      	movs	r0, #9
   10cda:	4770      	bx	lr

00010cdc <_Unwind_DebugHook>:
   10cdc:	4770      	bx	lr
   10cde:	bf00      	nop

00010ce0 <unwind_phase2>:
   10ce0:	b570      	push	{r4, r5, r6, lr}
   10ce2:	4604      	mov	r4, r0
   10ce4:	460e      	mov	r6, r1
   10ce6:	6c31      	ldr	r1, [r6, #64]	; 0x40
   10ce8:	4620      	mov	r0, r4
   10cea:	f7ff ff75 	bl	10bd8 <get_eit_entry>
   10cee:	4605      	mov	r5, r0
   10cf0:	b988      	cbnz	r0, 10d16 <unwind_phase2+0x36>
   10cf2:	6c30      	ldr	r0, [r6, #64]	; 0x40
   10cf4:	4632      	mov	r2, r6
   10cf6:	6923      	ldr	r3, [r4, #16]
   10cf8:	4621      	mov	r1, r4
   10cfa:	6160      	str	r0, [r4, #20]
   10cfc:	2001      	movs	r0, #1
   10cfe:	4798      	blx	r3
   10d00:	2808      	cmp	r0, #8
   10d02:	d0f0      	beq.n	10ce6 <unwind_phase2+0x6>
   10d04:	2807      	cmp	r0, #7
   10d06:	d106      	bne.n	10d16 <unwind_phase2+0x36>
   10d08:	4628      	mov	r0, r5
   10d0a:	6c31      	ldr	r1, [r6, #64]	; 0x40
   10d0c:	f7ff ffe6 	bl	10cdc <_Unwind_DebugHook>
   10d10:	1d30      	adds	r0, r6, #4
   10d12:	f000 fc39 	bl	11588 <__restore_core_regs>
   10d16:	f020 f884 	bl	30e22 <abort>
   10d1a:	bf00      	nop

00010d1c <unwind_phase2_forced>:
   10d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10d20:	f101 0c04 	add.w	ip, r1, #4
   10d24:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   10d28:	4606      	mov	r6, r0
   10d2a:	68c7      	ldr	r7, [r0, #12]
   10d2c:	f10d 0e0c 	add.w	lr, sp, #12
   10d30:	4614      	mov	r4, r2
   10d32:	ad02      	add	r5, sp, #8
   10d34:	f8d6 8018 	ldr.w	r8, [r6, #24]
   10d38:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10d3c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   10d40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10d44:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   10d48:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10d4c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   10d50:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   10d54:	f04f 0c00 	mov.w	ip, #0
   10d58:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   10d5c:	f8c5 c000 	str.w	ip, [r5]
   10d60:	e022      	b.n	10da8 <unwind_phase2_forced+0x8c>
   10d62:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   10d64:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   10d68:	4629      	mov	r1, r5
   10d6a:	a87a      	add	r0, sp, #488	; 0x1e8
   10d6c:	6173      	str	r3, [r6, #20]
   10d6e:	f020 f87b 	bl	30e68 <memcpy>
   10d72:	6933      	ldr	r3, [r6, #16]
   10d74:	aa7a      	add	r2, sp, #488	; 0x1e8
   10d76:	4631      	mov	r1, r6
   10d78:	4650      	mov	r0, sl
   10d7a:	4798      	blx	r3
   10d7c:	4681      	mov	r9, r0
   10d7e:	9888      	ldr	r0, [sp, #544]	; 0x220
   10d80:	4621      	mov	r1, r4
   10d82:	f8cd 8004 	str.w	r8, [sp, #4]
   10d86:	4633      	mov	r3, r6
   10d88:	9500      	str	r5, [sp, #0]
   10d8a:	4632      	mov	r2, r6
   10d8c:	6468      	str	r0, [r5, #68]	; 0x44
   10d8e:	2001      	movs	r0, #1
   10d90:	47b8      	blx	r7
   10d92:	4604      	mov	r4, r0
   10d94:	b9f0      	cbnz	r0, 10dd4 <unwind_phase2_forced+0xb8>
   10d96:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   10d9a:	a97a      	add	r1, sp, #488	; 0x1e8
   10d9c:	4628      	mov	r0, r5
   10d9e:	f020 f863 	bl	30e68 <memcpy>
   10da2:	f1b9 0f08 	cmp.w	r9, #8
   10da6:	d11c      	bne.n	10de2 <unwind_phase2_forced+0xc6>
   10da8:	3409      	adds	r4, #9
   10daa:	6c29      	ldr	r1, [r5, #64]	; 0x40
   10dac:	4630      	mov	r0, r6
   10dae:	f7ff ff13 	bl	10bd8 <get_eit_entry>
   10db2:	4681      	mov	r9, r0
   10db4:	fa5f fa84 	uxtb.w	sl, r4
   10db8:	2800      	cmp	r0, #0
   10dba:	d0d2      	beq.n	10d62 <unwind_phase2_forced+0x46>
   10dbc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
   10dbe:	f04a 0110 	orr.w	r1, sl, #16
   10dc2:	f8cd 8004 	str.w	r8, [sp, #4]
   10dc6:	4633      	mov	r3, r6
   10dc8:	9500      	str	r5, [sp, #0]
   10dca:	4632      	mov	r2, r6
   10dcc:	6468      	str	r0, [r5, #68]	; 0x44
   10dce:	2001      	movs	r0, #1
   10dd0:	47b8      	blx	r7
   10dd2:	b108      	cbz	r0, 10dd8 <unwind_phase2_forced+0xbc>
   10dd4:	f04f 0909 	mov.w	r9, #9
   10dd8:	4648      	mov	r0, r9
   10dda:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   10dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10de2:	f1b9 0f07 	cmp.w	r9, #7
   10de6:	d1f5      	bne.n	10dd4 <unwind_phase2_forced+0xb8>
   10de8:	4620      	mov	r0, r4
   10dea:	6c29      	ldr	r1, [r5, #64]	; 0x40
   10dec:	f7ff ff76 	bl	10cdc <_Unwind_DebugHook>
   10df0:	a803      	add	r0, sp, #12
   10df2:	f000 fbc9 	bl	11588 <__restore_core_regs>
   10df6:	bf00      	nop

00010df8 <_Unwind_GetCFA>:
   10df8:	6c40      	ldr	r0, [r0, #68]	; 0x44
   10dfa:	4770      	bx	lr

00010dfc <__gnu_Unwind_RaiseException>:
   10dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   10dfe:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   10e00:	b0f9      	sub	sp, #484	; 0x1e4
   10e02:	1d0e      	adds	r6, r1, #4
   10e04:	460f      	mov	r7, r1
   10e06:	640b      	str	r3, [r1, #64]	; 0x40
   10e08:	ac01      	add	r4, sp, #4
   10e0a:	4605      	mov	r5, r0
   10e0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10e10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10e14:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   10e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10e18:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   10e1c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   10e20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   10e24:	9600      	str	r6, [sp, #0]
   10e26:	e006      	b.n	10e36 <__gnu_Unwind_RaiseException+0x3a>
   10e28:	692b      	ldr	r3, [r5, #16]
   10e2a:	466a      	mov	r2, sp
   10e2c:	4629      	mov	r1, r5
   10e2e:	4798      	blx	r3
   10e30:	2808      	cmp	r0, #8
   10e32:	4604      	mov	r4, r0
   10e34:	d108      	bne.n	10e48 <__gnu_Unwind_RaiseException+0x4c>
   10e36:	9910      	ldr	r1, [sp, #64]	; 0x40
   10e38:	4628      	mov	r0, r5
   10e3a:	f7ff fecd 	bl	10bd8 <get_eit_entry>
   10e3e:	2800      	cmp	r0, #0
   10e40:	d0f2      	beq.n	10e28 <__gnu_Unwind_RaiseException+0x2c>
   10e42:	2009      	movs	r0, #9
   10e44:	b079      	add	sp, #484	; 0x1e4
   10e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e48:	4668      	mov	r0, sp
   10e4a:	f7ff ff13 	bl	10c74 <restore_non_core_regs>
   10e4e:	2c06      	cmp	r4, #6
   10e50:	d1f7      	bne.n	10e42 <__gnu_Unwind_RaiseException+0x46>
   10e52:	4639      	mov	r1, r7
   10e54:	4628      	mov	r0, r5
   10e56:	f7ff ff43 	bl	10ce0 <unwind_phase2>
   10e5a:	bf00      	nop

00010e5c <__gnu_Unwind_ForcedUnwind>:
   10e5c:	b430      	push	{r4, r5}
   10e5e:	4615      	mov	r5, r2
   10e60:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   10e62:	60c1      	str	r1, [r0, #12]
   10e64:	2200      	movs	r2, #0
   10e66:	6185      	str	r5, [r0, #24]
   10e68:	4619      	mov	r1, r3
   10e6a:	641c      	str	r4, [r3, #64]	; 0x40
   10e6c:	bc30      	pop	{r4, r5}
   10e6e:	e755      	b.n	10d1c <unwind_phase2_forced>

00010e70 <__gnu_Unwind_Resume>:
   10e70:	b570      	push	{r4, r5, r6, lr}
   10e72:	6943      	ldr	r3, [r0, #20]
   10e74:	68c6      	ldr	r6, [r0, #12]
   10e76:	640b      	str	r3, [r1, #64]	; 0x40
   10e78:	b9ae      	cbnz	r6, 10ea6 <__gnu_Unwind_Resume+0x36>
   10e7a:	6903      	ldr	r3, [r0, #16]
   10e7c:	460a      	mov	r2, r1
   10e7e:	4604      	mov	r4, r0
   10e80:	460d      	mov	r5, r1
   10e82:	4601      	mov	r1, r0
   10e84:	2002      	movs	r0, #2
   10e86:	4798      	blx	r3
   10e88:	2807      	cmp	r0, #7
   10e8a:	d005      	beq.n	10e98 <__gnu_Unwind_Resume+0x28>
   10e8c:	2808      	cmp	r0, #8
   10e8e:	d10f      	bne.n	10eb0 <__gnu_Unwind_Resume+0x40>
   10e90:	4629      	mov	r1, r5
   10e92:	4620      	mov	r0, r4
   10e94:	f7ff ff24 	bl	10ce0 <unwind_phase2>
   10e98:	4630      	mov	r0, r6
   10e9a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   10e9c:	f7ff ff1e 	bl	10cdc <_Unwind_DebugHook>
   10ea0:	1d28      	adds	r0, r5, #4
   10ea2:	f000 fb71 	bl	11588 <__restore_core_regs>
   10ea6:	2201      	movs	r2, #1
   10ea8:	f7ff ff38 	bl	10d1c <unwind_phase2_forced>
   10eac:	f01f ffb9 	bl	30e22 <abort>
   10eb0:	f01f ffb7 	bl	30e22 <abort>

00010eb4 <__gnu_Unwind_Resume_or_Rethrow>:
   10eb4:	68c2      	ldr	r2, [r0, #12]
   10eb6:	b12a      	cbz	r2, 10ec4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
   10eb8:	2200      	movs	r2, #0
   10eba:	b410      	push	{r4}
   10ebc:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
   10ebe:	640c      	str	r4, [r1, #64]	; 0x40
   10ec0:	bc10      	pop	{r4}
   10ec2:	e72b      	b.n	10d1c <unwind_phase2_forced>
   10ec4:	e79a      	b.n	10dfc <__gnu_Unwind_RaiseException>
   10ec6:	bf00      	nop

00010ec8 <_Unwind_Complete>:
   10ec8:	4770      	bx	lr
   10eca:	bf00      	nop

00010ecc <_Unwind_DeleteException>:
   10ecc:	6883      	ldr	r3, [r0, #8]
   10ece:	4601      	mov	r1, r0
   10ed0:	b10b      	cbz	r3, 10ed6 <_Unwind_DeleteException+0xa>
   10ed2:	2001      	movs	r0, #1
   10ed4:	4718      	bx	r3
   10ed6:	4770      	bx	lr

00010ed8 <_Unwind_VRS_Get>:
   10ed8:	2901      	cmp	r1, #1
   10eda:	d015      	beq.n	10f08 <_Unwind_VRS_Get+0x30>
   10edc:	d80c      	bhi.n	10ef8 <_Unwind_VRS_Get+0x20>
   10ede:	b98b      	cbnz	r3, 10f04 <_Unwind_VRS_Get+0x2c>
   10ee0:	2a0f      	cmp	r2, #15
   10ee2:	bf94      	ite	ls
   10ee4:	2100      	movls	r1, #0
   10ee6:	2101      	movhi	r1, #1
   10ee8:	b961      	cbnz	r1, 10f04 <_Unwind_VRS_Get+0x2c>
   10eea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   10eee:	4608      	mov	r0, r1
   10ef0:	6853      	ldr	r3, [r2, #4]
   10ef2:	9a00      	ldr	r2, [sp, #0]
   10ef4:	6013      	str	r3, [r2, #0]
   10ef6:	4770      	bx	lr
   10ef8:	3903      	subs	r1, #3
   10efa:	2901      	cmp	r1, #1
   10efc:	bf94      	ite	ls
   10efe:	2001      	movls	r0, #1
   10f00:	2002      	movhi	r0, #2
   10f02:	4770      	bx	lr
   10f04:	2002      	movs	r0, #2
   10f06:	4770      	bx	lr
   10f08:	4608      	mov	r0, r1
   10f0a:	4770      	bx	lr

00010f0c <_Unwind_GetGR>:
   10f0c:	b510      	push	{r4, lr}
   10f0e:	b084      	sub	sp, #16
   10f10:	2300      	movs	r3, #0
   10f12:	460a      	mov	r2, r1
   10f14:	ac03      	add	r4, sp, #12
   10f16:	4619      	mov	r1, r3
   10f18:	9400      	str	r4, [sp, #0]
   10f1a:	f7ff ffdd 	bl	10ed8 <_Unwind_VRS_Get>
   10f1e:	9803      	ldr	r0, [sp, #12]
   10f20:	b004      	add	sp, #16
   10f22:	bd10      	pop	{r4, pc}

00010f24 <_Unwind_VRS_Set>:
   10f24:	2901      	cmp	r1, #1
   10f26:	d015      	beq.n	10f54 <_Unwind_VRS_Set+0x30>
   10f28:	d80c      	bhi.n	10f44 <_Unwind_VRS_Set+0x20>
   10f2a:	b98b      	cbnz	r3, 10f50 <_Unwind_VRS_Set+0x2c>
   10f2c:	2a0f      	cmp	r2, #15
   10f2e:	bf94      	ite	ls
   10f30:	2100      	movls	r1, #0
   10f32:	2101      	movhi	r1, #1
   10f34:	b961      	cbnz	r1, 10f50 <_Unwind_VRS_Set+0x2c>
   10f36:	9b00      	ldr	r3, [sp, #0]
   10f38:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   10f3c:	4608      	mov	r0, r1
   10f3e:	681b      	ldr	r3, [r3, #0]
   10f40:	6053      	str	r3, [r2, #4]
   10f42:	4770      	bx	lr
   10f44:	3903      	subs	r1, #3
   10f46:	2901      	cmp	r1, #1
   10f48:	bf94      	ite	ls
   10f4a:	2001      	movls	r0, #1
   10f4c:	2002      	movhi	r0, #2
   10f4e:	4770      	bx	lr
   10f50:	2002      	movs	r0, #2
   10f52:	4770      	bx	lr
   10f54:	4608      	mov	r0, r1
   10f56:	4770      	bx	lr

00010f58 <_Unwind_SetGR>:
   10f58:	b510      	push	{r4, lr}
   10f5a:	b084      	sub	sp, #16
   10f5c:	2300      	movs	r3, #0
   10f5e:	ac03      	add	r4, sp, #12
   10f60:	9203      	str	r2, [sp, #12]
   10f62:	460a      	mov	r2, r1
   10f64:	4619      	mov	r1, r3
   10f66:	9400      	str	r4, [sp, #0]
   10f68:	f7ff ffdc 	bl	10f24 <_Unwind_VRS_Set>
   10f6c:	b004      	add	sp, #16
   10f6e:	bd10      	pop	{r4, pc}

00010f70 <__gnu_Unwind_Backtrace>:
   10f70:	b5f0      	push	{r4, r5, r6, r7, lr}
   10f72:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   10f74:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
   10f78:	1d15      	adds	r5, r2, #4
   10f7a:	4607      	mov	r7, r0
   10f7c:	6413      	str	r3, [r2, #64]	; 0x40
   10f7e:	ac17      	add	r4, sp, #92	; 0x5c
   10f80:	460e      	mov	r6, r1
   10f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10f84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   10f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   10f8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   10f92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   10f96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   10f9a:	9516      	str	r5, [sp, #88]	; 0x58
   10f9c:	e010      	b.n	10fc0 <__gnu_Unwind_Backtrace+0x50>
   10f9e:	f7ff ffdb 	bl	10f58 <_Unwind_SetGR>
   10fa2:	4631      	mov	r1, r6
   10fa4:	a816      	add	r0, sp, #88	; 0x58
   10fa6:	47b8      	blx	r7
   10fa8:	4603      	mov	r3, r0
   10faa:	aa16      	add	r2, sp, #88	; 0x58
   10fac:	4669      	mov	r1, sp
   10fae:	2008      	movs	r0, #8
   10fb0:	b983      	cbnz	r3, 10fd4 <__gnu_Unwind_Backtrace+0x64>
   10fb2:	9b04      	ldr	r3, [sp, #16]
   10fb4:	4798      	blx	r3
   10fb6:	2805      	cmp	r0, #5
   10fb8:	4604      	mov	r4, r0
   10fba:	d00c      	beq.n	10fd6 <__gnu_Unwind_Backtrace+0x66>
   10fbc:	2809      	cmp	r0, #9
   10fbe:	d00a      	beq.n	10fd6 <__gnu_Unwind_Backtrace+0x66>
   10fc0:	9926      	ldr	r1, [sp, #152]	; 0x98
   10fc2:	4668      	mov	r0, sp
   10fc4:	f7ff fe08 	bl	10bd8 <get_eit_entry>
   10fc8:	4603      	mov	r3, r0
   10fca:	466a      	mov	r2, sp
   10fcc:	210c      	movs	r1, #12
   10fce:	a816      	add	r0, sp, #88	; 0x58
   10fd0:	2b00      	cmp	r3, #0
   10fd2:	d0e4      	beq.n	10f9e <__gnu_Unwind_Backtrace+0x2e>
   10fd4:	2409      	movs	r4, #9
   10fd6:	a816      	add	r0, sp, #88	; 0x58
   10fd8:	f7ff fe4c 	bl	10c74 <restore_non_core_regs>
   10fdc:	4620      	mov	r0, r4
   10fde:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
   10fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010fe4 <__gnu_unwind_pr_common>:
   10fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fe8:	461d      	mov	r5, r3
   10fea:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   10fec:	b089      	sub	sp, #36	; 0x24
   10fee:	4616      	mov	r6, r2
   10ff0:	f853 2b04 	ldr.w	r2, [r3], #4
   10ff4:	460c      	mov	r4, r1
   10ff6:	f000 0803 	and.w	r8, r0, #3
   10ffa:	9306      	str	r3, [sp, #24]
   10ffc:	2d00      	cmp	r5, #0
   10ffe:	d07a      	beq.n	110f6 <__gnu_unwind_pr_common+0x112>
   11000:	0c11      	lsrs	r1, r2, #16
   11002:	2702      	movs	r7, #2
   11004:	0412      	lsls	r2, r2, #16
   11006:	fa5f fc81 	uxtb.w	ip, r1
   1100a:	f88d 101d 	strb.w	r1, [sp, #29]
   1100e:	9205      	str	r2, [sp, #20]
   11010:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   11014:	f88d 701c 	strb.w	r7, [sp, #28]
   11018:	f1b8 0f02 	cmp.w	r8, #2
   1101c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1101e:	bf08      	it	eq
   11020:	6ba3      	ldreq	r3, [r4, #56]	; 0x38
   11022:	f012 0201 	ands.w	r2, r2, #1
   11026:	d008      	beq.n	1103a <__gnu_unwind_pr_common+0x56>
   11028:	4630      	mov	r0, r6
   1102a:	a905      	add	r1, sp, #20
   1102c:	f000 fbae 	bl	1178c <__gnu_unwind_execute>
   11030:	bb98      	cbnz	r0, 1109a <__gnu_unwind_pr_common+0xb6>
   11032:	2008      	movs	r0, #8
   11034:	b009      	add	sp, #36	; 0x24
   11036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1103a:	f8d3 a000 	ldr.w	sl, [r3]
   1103e:	f1ba 0f00 	cmp.w	sl, #0
   11042:	d0f1      	beq.n	11028 <__gnu_unwind_pr_common+0x44>
   11044:	f080 0008 	eor.w	r0, r0, #8
   11048:	9201      	str	r2, [sp, #4]
   1104a:	f3c0 02c0 	ubfx	r2, r0, #3, #1
   1104e:	9202      	str	r2, [sp, #8]
   11050:	2d02      	cmp	r5, #2
   11052:	d04c      	beq.n	110ee <__gnu_unwind_pr_common+0x10a>
   11054:	f8b3 a000 	ldrh.w	sl, [r3]
   11058:	f103 0b04 	add.w	fp, r3, #4
   1105c:	885f      	ldrh	r7, [r3, #2]
   1105e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   11060:	f027 0901 	bic.w	r9, r7, #1
   11064:	007f      	lsls	r7, r7, #1
   11066:	210f      	movs	r1, #15
   11068:	4499      	add	r9, r3
   1106a:	4630      	mov	r0, r6
   1106c:	f7ff ff4e 	bl	10f0c <_Unwind_GetGR>
   11070:	f007 0702 	and.w	r7, r7, #2
   11074:	f00a 0301 	and.w	r3, sl, #1
   11078:	4581      	cmp	r9, r0
   1107a:	ea43 0307 	orr.w	r3, r3, r7
   1107e:	d810      	bhi.n	110a2 <__gnu_unwind_pr_common+0xbe>
   11080:	f02a 0a01 	bic.w	sl, sl, #1
   11084:	44d1      	add	r9, sl
   11086:	4581      	cmp	r9, r0
   11088:	d90b      	bls.n	110a2 <__gnu_unwind_pr_common+0xbe>
   1108a:	2b01      	cmp	r3, #1
   1108c:	f000 80bb 	beq.w	11206 <__gnu_unwind_pr_common+0x222>
   11090:	2b02      	cmp	r3, #2
   11092:	f000 8085 	beq.w	111a0 <__gnu_unwind_pr_common+0x1bc>
   11096:	2b00      	cmp	r3, #0
   11098:	d048      	beq.n	1112c <__gnu_unwind_pr_common+0x148>
   1109a:	2009      	movs	r0, #9
   1109c:	b009      	add	sp, #36	; 0x24
   1109e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   110a2:	2b01      	cmp	r3, #1
   110a4:	d03c      	beq.n	11120 <__gnu_unwind_pr_common+0x13c>
   110a6:	2b02      	cmp	r3, #2
   110a8:	d02b      	beq.n	11102 <__gnu_unwind_pr_common+0x11e>
   110aa:	2b00      	cmp	r3, #0
   110ac:	d1f5      	bne.n	1109a <__gnu_unwind_pr_common+0xb6>
   110ae:	f10b 0304 	add.w	r3, fp, #4
   110b2:	f8d3 a000 	ldr.w	sl, [r3]
   110b6:	f1ba 0f00 	cmp.w	sl, #0
   110ba:	d1c9      	bne.n	11050 <__gnu_unwind_pr_common+0x6c>
   110bc:	a905      	add	r1, sp, #20
   110be:	4630      	mov	r0, r6
   110c0:	f000 fb64 	bl	1178c <__gnu_unwind_execute>
   110c4:	2800      	cmp	r0, #0
   110c6:	d1e8      	bne.n	1109a <__gnu_unwind_pr_common+0xb6>
   110c8:	9b01      	ldr	r3, [sp, #4]
   110ca:	2b00      	cmp	r3, #0
   110cc:	d0b1      	beq.n	11032 <__gnu_unwind_pr_common+0x4e>
   110ce:	210f      	movs	r1, #15
   110d0:	4630      	mov	r0, r6
   110d2:	f7ff ff1b 	bl	10f0c <_Unwind_GetGR>
   110d6:	210e      	movs	r1, #14
   110d8:	4602      	mov	r2, r0
   110da:	4630      	mov	r0, r6
   110dc:	f7ff ff3c 	bl	10f58 <_Unwind_SetGR>
   110e0:	4630      	mov	r0, r6
   110e2:	4a79      	ldr	r2, [pc, #484]	; (112c8 <__gnu_unwind_pr_common+0x2e4>)
   110e4:	210f      	movs	r1, #15
   110e6:	f7ff ff37 	bl	10f58 <_Unwind_SetGR>
   110ea:	2007      	movs	r0, #7
   110ec:	e7d6      	b.n	1109c <__gnu_unwind_pr_common+0xb8>
   110ee:	685f      	ldr	r7, [r3, #4]
   110f0:	f103 0b08 	add.w	fp, r3, #8
   110f4:	e7b3      	b.n	1105e <__gnu_unwind_pr_common+0x7a>
   110f6:	0212      	lsls	r2, r2, #8
   110f8:	2103      	movs	r1, #3
   110fa:	9205      	str	r2, [sp, #20]
   110fc:	f8ad 101c 	strh.w	r1, [sp, #28]
   11100:	e78a      	b.n	11018 <__gnu_unwind_pr_common+0x34>
   11102:	f8db 3000 	ldr.w	r3, [fp]
   11106:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   1110a:	f1b8 0f00 	cmp.w	r8, #0
   1110e:	d123      	bne.n	11158 <__gnu_unwind_pr_common+0x174>
   11110:	2b00      	cmp	r3, #0
   11112:	da01      	bge.n	11118 <__gnu_unwind_pr_common+0x134>
   11114:	f10b 0b04 	add.w	fp, fp, #4
   11118:	3701      	adds	r7, #1
   1111a:	eb0b 0387 	add.w	r3, fp, r7, lsl #2
   1111e:	e7c8      	b.n	110b2 <__gnu_unwind_pr_common+0xce>
   11120:	f1b8 0f00 	cmp.w	r8, #0
   11124:	d123      	bne.n	1116e <__gnu_unwind_pr_common+0x18a>
   11126:	f10b 0308 	add.w	r3, fp, #8
   1112a:	e7c2      	b.n	110b2 <__gnu_unwind_pr_common+0xce>
   1112c:	f1b8 0f00 	cmp.w	r8, #0
   11130:	d0bd      	beq.n	110ae <__gnu_unwind_pr_common+0xca>
   11132:	465f      	mov	r7, fp
   11134:	4658      	mov	r0, fp
   11136:	f7ff fd01 	bl	10b3c <selfrel_offset31>
   1113a:	4605      	mov	r5, r0
   1113c:	3704      	adds	r7, #4
   1113e:	4620      	mov	r0, r4
   11140:	63a7      	str	r7, [r4, #56]	; 0x38
   11142:	f01f fc31 	bl	309a8 <__cxa_begin_cleanup>
   11146:	2800      	cmp	r0, #0
   11148:	d0a7      	beq.n	1109a <__gnu_unwind_pr_common+0xb6>
   1114a:	4630      	mov	r0, r6
   1114c:	462a      	mov	r2, r5
   1114e:	210f      	movs	r1, #15
   11150:	f7ff ff02 	bl	10f58 <_Unwind_SetGR>
   11154:	2007      	movs	r0, #7
   11156:	e7a1      	b.n	1109c <__gnu_unwind_pr_common+0xb8>
   11158:	f8d4 9020 	ldr.w	r9, [r4, #32]
   1115c:	210d      	movs	r1, #13
   1115e:	4630      	mov	r0, r6
   11160:	f7ff fed4 	bl	10f0c <_Unwind_GetGR>
   11164:	4581      	cmp	r9, r0
   11166:	d07b      	beq.n	11260 <__gnu_unwind_pr_common+0x27c>
   11168:	f8db 3000 	ldr.w	r3, [fp]
   1116c:	e7d0      	b.n	11110 <__gnu_unwind_pr_common+0x12c>
   1116e:	6a27      	ldr	r7, [r4, #32]
   11170:	210d      	movs	r1, #13
   11172:	4630      	mov	r0, r6
   11174:	f7ff feca 	bl	10f0c <_Unwind_GetGR>
   11178:	4287      	cmp	r7, r0
   1117a:	d1d4      	bne.n	11126 <__gnu_unwind_pr_common+0x142>
   1117c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1117e:	459b      	cmp	fp, r3
   11180:	d1d1      	bne.n	11126 <__gnu_unwind_pr_common+0x142>
   11182:	4658      	mov	r0, fp
   11184:	f7ff fcda 	bl	10b3c <selfrel_offset31>
   11188:	210f      	movs	r1, #15
   1118a:	4602      	mov	r2, r0
   1118c:	4630      	mov	r0, r6
   1118e:	f7ff fee3 	bl	10f58 <_Unwind_SetGR>
   11192:	4630      	mov	r0, r6
   11194:	4622      	mov	r2, r4
   11196:	2100      	movs	r1, #0
   11198:	f7ff fede 	bl	10f58 <_Unwind_SetGR>
   1119c:	2007      	movs	r0, #7
   1119e:	e77d      	b.n	1109c <__gnu_unwind_pr_common+0xb8>
   111a0:	f8db 3000 	ldr.w	r3, [fp]
   111a4:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
   111a8:	f1b8 0f00 	cmp.w	r8, #0
   111ac:	d1d4      	bne.n	11158 <__gnu_unwind_pr_common+0x174>
   111ae:	9a02      	ldr	r2, [sp, #8]
   111b0:	b90a      	cbnz	r2, 111b6 <__gnu_unwind_pr_common+0x1d2>
   111b2:	2f00      	cmp	r7, #0
   111b4:	d1ac      	bne.n	11110 <__gnu_unwind_pr_common+0x12c>
   111b6:	f104 0358 	add.w	r3, r4, #88	; 0x58
   111ba:	f8cd 800c 	str.w	r8, [sp, #12]
   111be:	f10b 0a04 	add.w	sl, fp, #4
   111c2:	46a8      	mov	r8, r5
   111c4:	f04f 0900 	mov.w	r9, #0
   111c8:	461d      	mov	r5, r3
   111ca:	e00a      	b.n	111e2 <__gnu_unwind_pr_common+0x1fe>
   111cc:	9504      	str	r5, [sp, #16]
   111ce:	f7ff fd7d 	bl	10ccc <_Unwind_decode_typeinfo_ptr.isra.0>
   111d2:	ab04      	add	r3, sp, #16
   111d4:	4601      	mov	r1, r0
   111d6:	2200      	movs	r2, #0
   111d8:	4620      	mov	r0, r4
   111da:	f011 f949 	bl	22470 <__cxa_type_match>
   111de:	2800      	cmp	r0, #0
   111e0:	d150      	bne.n	11284 <__gnu_unwind_pr_common+0x2a0>
   111e2:	45b9      	cmp	r9, r7
   111e4:	4650      	mov	r0, sl
   111e6:	f109 0901 	add.w	r9, r9, #1
   111ea:	f10a 0a04 	add.w	sl, sl, #4
   111ee:	d1ed      	bne.n	111cc <__gnu_unwind_pr_common+0x1e8>
   111f0:	4630      	mov	r0, r6
   111f2:	210d      	movs	r1, #13
   111f4:	f7ff fe8a 	bl	10f0c <_Unwind_GetGR>
   111f8:	9b04      	ldr	r3, [sp, #16]
   111fa:	4602      	mov	r2, r0
   111fc:	2006      	movs	r0, #6
   111fe:	6222      	str	r2, [r4, #32]
   11200:	e9c4 3b09 	strd	r3, fp, [r4, #36]	; 0x24
   11204:	e74a      	b.n	1109c <__gnu_unwind_pr_common+0xb8>
   11206:	f1b8 0f00 	cmp.w	r8, #0
   1120a:	d1b0      	bne.n	1116e <__gnu_unwind_pr_common+0x18a>
   1120c:	e9db 2300 	ldrd	r2, r3, [fp]
   11210:	1c99      	adds	r1, r3, #2
   11212:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   11216:	f43f af40 	beq.w	1109a <__gnu_unwind_pr_common+0xb6>
   1121a:	f104 0158 	add.w	r1, r4, #88	; 0x58
   1121e:	3301      	adds	r3, #1
   11220:	9104      	str	r1, [sp, #16]
   11222:	d035      	beq.n	11290 <__gnu_unwind_pr_common+0x2ac>
   11224:	f10b 0004 	add.w	r0, fp, #4
   11228:	f7ff fd50 	bl	10ccc <_Unwind_decode_typeinfo_ptr.isra.0>
   1122c:	ab04      	add	r3, sp, #16
   1122e:	4601      	mov	r1, r0
   11230:	4620      	mov	r0, r4
   11232:	f011 f91d 	bl	22470 <__cxa_type_match>
   11236:	2800      	cmp	r0, #0
   11238:	f43f af75 	beq.w	11126 <__gnu_unwind_pr_common+0x142>
   1123c:	4681      	mov	r9, r0
   1123e:	210d      	movs	r1, #13
   11240:	4630      	mov	r0, r6
   11242:	465f      	mov	r7, fp
   11244:	f7ff fe62 	bl	10f0c <_Unwind_GetGR>
   11248:	f1b9 0f02 	cmp.w	r9, #2
   1124c:	6220      	str	r0, [r4, #32]
   1124e:	d125      	bne.n	1129c <__gnu_unwind_pr_common+0x2b8>
   11250:	4623      	mov	r3, r4
   11252:	9a04      	ldr	r2, [sp, #16]
   11254:	f843 2f2c 	str.w	r2, [r3, #44]!
   11258:	6263      	str	r3, [r4, #36]	; 0x24
   1125a:	2006      	movs	r0, #6
   1125c:	62a7      	str	r7, [r4, #40]	; 0x28
   1125e:	e71d      	b.n	1109c <__gnu_unwind_pr_common+0xb8>
   11260:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   11262:	459b      	cmp	fp, r3
   11264:	d180      	bne.n	11168 <__gnu_unwind_pr_common+0x184>
   11266:	2104      	movs	r1, #4
   11268:	2300      	movs	r3, #0
   1126a:	eb0b 0201 	add.w	r2, fp, r1
   1126e:	e9c4 730a 	strd	r7, r3, [r4, #40]	; 0x28
   11272:	e9c4 120c 	strd	r1, r2, [r4, #48]	; 0x30
   11276:	f8db 2000 	ldr.w	r2, [fp]
   1127a:	429a      	cmp	r2, r3
   1127c:	db11      	blt.n	112a2 <__gnu_unwind_pr_common+0x2be>
   1127e:	2301      	movs	r3, #1
   11280:	9301      	str	r3, [sp, #4]
   11282:	e749      	b.n	11118 <__gnu_unwind_pr_common+0x134>
   11284:	4645      	mov	r5, r8
   11286:	f8db 3000 	ldr.w	r3, [fp]
   1128a:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1128e:	e73f      	b.n	11110 <__gnu_unwind_pr_common+0x12c>
   11290:	465f      	mov	r7, fp
   11292:	4630      	mov	r0, r6
   11294:	210d      	movs	r1, #13
   11296:	f7ff fe39 	bl	10f0c <_Unwind_GetGR>
   1129a:	6220      	str	r0, [r4, #32]
   1129c:	9b04      	ldr	r3, [sp, #16]
   1129e:	6263      	str	r3, [r4, #36]	; 0x24
   112a0:	e7db      	b.n	1125a <__gnu_unwind_pr_common+0x276>
   112a2:	463b      	mov	r3, r7
   112a4:	1c58      	adds	r0, r3, #1
   112a6:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
   112aa:	f7ff fc47 	bl	10b3c <selfrel_offset31>
   112ae:	210f      	movs	r1, #15
   112b0:	4602      	mov	r2, r0
   112b2:	4630      	mov	r0, r6
   112b4:	f7ff fe50 	bl	10f58 <_Unwind_SetGR>
   112b8:	2300      	movs	r3, #0
   112ba:	4630      	mov	r0, r6
   112bc:	4622      	mov	r2, r4
   112be:	4619      	mov	r1, r3
   112c0:	f7ff fe4a 	bl	10f58 <_Unwind_SetGR>
   112c4:	2007      	movs	r0, #7
   112c6:	e6e9      	b.n	1109c <__gnu_unwind_pr_common+0xb8>
   112c8:	0002252d 	.word	0x0002252d

000112cc <__aeabi_unwind_cpp_pr0>:
   112cc:	2300      	movs	r3, #0
   112ce:	e689      	b.n	10fe4 <__gnu_unwind_pr_common>

000112d0 <__aeabi_unwind_cpp_pr1>:
   112d0:	2301      	movs	r3, #1
   112d2:	e687      	b.n	10fe4 <__gnu_unwind_pr_common>

000112d4 <__aeabi_unwind_cpp_pr2>:
   112d4:	2302      	movs	r3, #2
   112d6:	e685      	b.n	10fe4 <__gnu_unwind_pr_common>

000112d8 <_Unwind_VRS_Pop>:
   112d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   112dc:	4606      	mov	r6, r0
   112de:	b0c3      	sub	sp, #268	; 0x10c
   112e0:	4615      	mov	r5, r2
   112e2:	461c      	mov	r4, r3
   112e4:	2904      	cmp	r1, #4
   112e6:	f200 80bf 	bhi.w	11468 <_Unwind_VRS_Pop+0x190>
   112ea:	e8df f001 	tbb	[pc, r1]
   112ee:	56a1      	.short	0x56a1
   112f0:	29bd      	.short	0x29bd
   112f2:	03          	.byte	0x03
   112f3:	00          	.byte	0x00
   112f4:	2c00      	cmp	r4, #0
   112f6:	f040 80b7 	bne.w	11468 <_Unwind_VRS_Pop+0x190>
   112fa:	2a10      	cmp	r2, #16
   112fc:	f200 80b4 	bhi.w	11468 <_Unwind_VRS_Pop+0x190>
   11300:	6803      	ldr	r3, [r0, #0]
   11302:	06df      	lsls	r7, r3, #27
   11304:	f100 80b4 	bmi.w	11470 <_Unwind_VRS_Pop+0x198>
   11308:	af20      	add	r7, sp, #128	; 0x80
   1130a:	2401      	movs	r4, #1
   1130c:	4638      	mov	r0, r7
   1130e:	f000 f9ad 	bl	1166c <__gnu_Unwind_Save_WMMXC>
   11312:	6bb0      	ldr	r0, [r6, #56]	; 0x38
   11314:	2300      	movs	r3, #0
   11316:	fa04 f103 	lsl.w	r1, r4, r3
   1131a:	4602      	mov	r2, r0
   1131c:	4229      	tst	r1, r5
   1131e:	d004      	beq.n	1132a <_Unwind_VRS_Pop+0x52>
   11320:	f852 1b04 	ldr.w	r1, [r2], #4
   11324:	4610      	mov	r0, r2
   11326:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
   1132a:	3301      	adds	r3, #1
   1132c:	2b04      	cmp	r3, #4
   1132e:	d1f2      	bne.n	11316 <_Unwind_VRS_Pop+0x3e>
   11330:	63b0      	str	r0, [r6, #56]	; 0x38
   11332:	4638      	mov	r0, r7
   11334:	f000 f990 	bl	11658 <__gnu_Unwind_Restore_WMMXC>
   11338:	2000      	movs	r0, #0
   1133a:	b043      	add	sp, #268	; 0x10c
   1133c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11340:	2c03      	cmp	r4, #3
   11342:	f040 8091 	bne.w	11468 <_Unwind_VRS_Pop+0x190>
   11346:	fa1f f882 	uxth.w	r8, r2
   1134a:	0c14      	lsrs	r4, r2, #16
   1134c:	eb08 4512 	add.w	r5, r8, r2, lsr #16
   11350:	2d10      	cmp	r5, #16
   11352:	f200 8089 	bhi.w	11468 <_Unwind_VRS_Pop+0x190>
   11356:	6803      	ldr	r3, [r0, #0]
   11358:	071a      	lsls	r2, r3, #28
   1135a:	f100 80d7 	bmi.w	1150c <_Unwind_VRS_Pop+0x234>
   1135e:	af20      	add	r7, sp, #128	; 0x80
   11360:	4638      	mov	r0, r7
   11362:	f000 f957 	bl	11614 <__gnu_Unwind_Save_WMMXD>
   11366:	6bb5      	ldr	r5, [r6, #56]	; 0x38
   11368:	eb07 01c4 	add.w	r1, r7, r4, lsl #3
   1136c:	f1b8 0f00 	cmp.w	r8, #0
   11370:	d00b      	beq.n	1138a <_Unwind_VRS_Pop+0xb2>
   11372:	460b      	mov	r3, r1
   11374:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
   11378:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   1137c:	1ae8      	subs	r0, r5, r3
   1137e:	581a      	ldr	r2, [r3, r0]
   11380:	f843 2b04 	str.w	r2, [r3], #4
   11384:	428b      	cmp	r3, r1
   11386:	d1fa      	bne.n	1137e <_Unwind_VRS_Pop+0xa6>
   11388:	4445      	add	r5, r8
   1138a:	4638      	mov	r0, r7
   1138c:	63b5      	str	r5, [r6, #56]	; 0x38
   1138e:	f000 f91f 	bl	115d0 <__gnu_Unwind_Restore_WMMXD>
   11392:	2000      	movs	r0, #0
   11394:	b043      	add	sp, #268	; 0x10c
   11396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1139a:	f004 03fb 	and.w	r3, r4, #251	; 0xfb
   1139e:	ea4f 4812 	mov.w	r8, r2, lsr #16
   113a2:	b295      	uxth	r5, r2
   113a4:	2b01      	cmp	r3, #1
   113a6:	d15f      	bne.n	11468 <_Unwind_VRS_Pop+0x190>
   113a8:	2c01      	cmp	r4, #1
   113aa:	eb08 0905 	add.w	r9, r8, r5
   113ae:	d058      	beq.n	11462 <_Unwind_VRS_Pop+0x18a>
   113b0:	f1b9 0f20 	cmp.w	r9, #32
   113b4:	d858      	bhi.n	11468 <_Unwind_VRS_Pop+0x190>
   113b6:	f1b8 0f0f 	cmp.w	r8, #15
   113ba:	d97e      	bls.n	114ba <_Unwind_VRS_Pop+0x1e2>
   113bc:	2c05      	cmp	r4, #5
   113be:	46a9      	mov	r9, r5
   113c0:	f000 80b3 	beq.w	1152a <_Unwind_VRS_Pop+0x252>
   113c4:	2d00      	cmp	r5, #0
   113c6:	d14f      	bne.n	11468 <_Unwind_VRS_Pop+0x190>
   113c8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   113ca:	b36d      	cbz	r5, 11428 <_Unwind_VRS_Pop+0x150>
   113cc:	af20      	add	r7, sp, #128	; 0x80
   113ce:	f04f 0900 	mov.w	r9, #0
   113d2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   113d6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   113da:	3f04      	subs	r7, #4
   113dc:	f853 1b04 	ldr.w	r1, [r3], #4
   113e0:	429d      	cmp	r5, r3
   113e2:	f847 1f04 	str.w	r1, [r7, #4]!
   113e6:	d1f9      	bne.n	113dc <_Unwind_VRS_Pop+0x104>
   113e8:	f1b9 0f00 	cmp.w	r9, #0
   113ec:	d00f      	beq.n	1140e <_Unwind_VRS_Pop+0x136>
   113ee:	466f      	mov	r7, sp
   113f0:	4641      	mov	r1, r8
   113f2:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
   113f6:	2910      	cmp	r1, #16
   113f8:	bf38      	it	cc
   113fa:	2110      	movcc	r1, #16
   113fc:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   11400:	3984      	subs	r1, #132	; 0x84
   11402:	f853 0b04 	ldr.w	r0, [r3], #4
   11406:	429d      	cmp	r5, r3
   11408:	f841 0f04 	str.w	r0, [r1, #4]!
   1140c:	d1f9      	bne.n	11402 <_Unwind_VRS_Pop+0x12a>
   1140e:	2c01      	cmp	r4, #1
   11410:	f000 8084 	beq.w	1151c <_Unwind_VRS_Pop+0x244>
   11414:	f1b8 0f0f 	cmp.w	r8, #15
   11418:	63b5      	str	r5, [r6, #56]	; 0x38
   1141a:	d973      	bls.n	11504 <_Unwind_VRS_Pop+0x22c>
   1141c:	f1b9 0f00 	cmp.w	r9, #0
   11420:	d002      	beq.n	11428 <_Unwind_VRS_Pop+0x150>
   11422:	4668      	mov	r0, sp
   11424:	f000 f8cc 	bl	115c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   11428:	2000      	movs	r0, #0
   1142a:	b043      	add	sp, #268	; 0x10c
   1142c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11430:	b9d4      	cbnz	r4, 11468 <_Unwind_VRS_Pop+0x190>
   11432:	4623      	mov	r3, r4
   11434:	b297      	uxth	r7, r2
   11436:	6b84      	ldr	r4, [r0, #56]	; 0x38
   11438:	f106 0c04 	add.w	ip, r6, #4
   1143c:	2001      	movs	r0, #1
   1143e:	fa00 f103 	lsl.w	r1, r0, r3
   11442:	4622      	mov	r2, r4
   11444:	4239      	tst	r1, r7
   11446:	d004      	beq.n	11452 <_Unwind_VRS_Pop+0x17a>
   11448:	f852 1b04 	ldr.w	r1, [r2], #4
   1144c:	4614      	mov	r4, r2
   1144e:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
   11452:	3301      	adds	r3, #1
   11454:	2b10      	cmp	r3, #16
   11456:	d1f2      	bne.n	1143e <_Unwind_VRS_Pop+0x166>
   11458:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
   1145c:	d1e4      	bne.n	11428 <_Unwind_VRS_Pop+0x150>
   1145e:	63b4      	str	r4, [r6, #56]	; 0x38
   11460:	e003      	b.n	1146a <_Unwind_VRS_Pop+0x192>
   11462:	f1b9 0f10 	cmp.w	r9, #16
   11466:	d90b      	bls.n	11480 <_Unwind_VRS_Pop+0x1a8>
   11468:	2002      	movs	r0, #2
   1146a:	b043      	add	sp, #268	; 0x10c
   1146c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11470:	f023 0310 	bic.w	r3, r3, #16
   11474:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
   11478:	6033      	str	r3, [r6, #0]
   1147a:	f000 f8f7 	bl	1166c <__gnu_Unwind_Save_WMMXC>
   1147e:	e743      	b.n	11308 <_Unwind_VRS_Pop+0x30>
   11480:	f1b8 0f0f 	cmp.w	r8, #15
   11484:	d8f0      	bhi.n	11468 <_Unwind_VRS_Pop+0x190>
   11486:	6803      	ldr	r3, [r0, #0]
   11488:	07d8      	lsls	r0, r3, #31
   1148a:	d55f      	bpl.n	1154c <_Unwind_VRS_Pop+0x274>
   1148c:	f106 0048 	add.w	r0, r6, #72	; 0x48
   11490:	f023 0303 	bic.w	r3, r3, #3
   11494:	6033      	str	r3, [r6, #0]
   11496:	f000 f887 	bl	115a8 <__gnu_Unwind_Save_VFP>
   1149a:	2c01      	cmp	r4, #1
   1149c:	d056      	beq.n	1154c <_Unwind_VRS_Pop+0x274>
   1149e:	f1b8 0f0f 	cmp.w	r8, #15
   114a2:	d891      	bhi.n	113c8 <_Unwind_VRS_Pop+0xf0>
   114a4:	af20      	add	r7, sp, #128	; 0x80
   114a6:	4638      	mov	r0, r7
   114a8:	f000 f886 	bl	115b8 <__gnu_Unwind_Save_VFP_D>
   114ac:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   114ae:	2d00      	cmp	r5, #0
   114b0:	d18d      	bne.n	113ce <_Unwind_VRS_Pop+0xf6>
   114b2:	4638      	mov	r0, r7
   114b4:	f000 f87c 	bl	115b0 <__gnu_Unwind_Restore_VFP_D>
   114b8:	e7b6      	b.n	11428 <_Unwind_VRS_Pop+0x150>
   114ba:	f1b9 0f10 	cmp.w	r9, #16
   114be:	d94f      	bls.n	11560 <_Unwind_VRS_Pop+0x288>
   114c0:	2c05      	cmp	r4, #5
   114c2:	d1d1      	bne.n	11468 <_Unwind_VRS_Pop+0x190>
   114c4:	6833      	ldr	r3, [r6, #0]
   114c6:	f1a9 0910 	sub.w	r9, r9, #16
   114ca:	07dd      	lsls	r5, r3, #31
   114cc:	d509      	bpl.n	114e2 <_Unwind_VRS_Pop+0x20a>
   114ce:	f023 0301 	bic.w	r3, r3, #1
   114d2:	4630      	mov	r0, r6
   114d4:	f043 0302 	orr.w	r3, r3, #2
   114d8:	f840 3b48 	str.w	r3, [r0], #72
   114dc:	f000 f86c 	bl	115b8 <__gnu_Unwind_Save_VFP_D>
   114e0:	6833      	ldr	r3, [r6, #0]
   114e2:	0759      	lsls	r1, r3, #29
   114e4:	d427      	bmi.n	11536 <_Unwind_VRS_Pop+0x25e>
   114e6:	a820      	add	r0, sp, #128	; 0x80
   114e8:	f000 f866 	bl	115b8 <__gnu_Unwind_Save_VFP_D>
   114ec:	466f      	mov	r7, sp
   114ee:	f1c8 0510 	rsb	r5, r8, #16
   114f2:	4638      	mov	r0, r7
   114f4:	f000 f868 	bl	115c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
   114f8:	2d00      	cmp	r5, #0
   114fa:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   114fc:	f77f af78 	ble.w	113f0 <_Unwind_VRS_Pop+0x118>
   11500:	af20      	add	r7, sp, #128	; 0x80
   11502:	e766      	b.n	113d2 <_Unwind_VRS_Pop+0xfa>
   11504:	a820      	add	r0, sp, #128	; 0x80
   11506:	f000 f853 	bl	115b0 <__gnu_Unwind_Restore_VFP_D>
   1150a:	e787      	b.n	1141c <_Unwind_VRS_Pop+0x144>
   1150c:	f023 0308 	bic.w	r3, r3, #8
   11510:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   11514:	6033      	str	r3, [r6, #0]
   11516:	f000 f87d 	bl	11614 <__gnu_Unwind_Save_WMMXD>
   1151a:	e720      	b.n	1135e <_Unwind_VRS_Pop+0x86>
   1151c:	af20      	add	r7, sp, #128	; 0x80
   1151e:	3504      	adds	r5, #4
   11520:	4638      	mov	r0, r7
   11522:	63b5      	str	r5, [r6, #56]	; 0x38
   11524:	f000 f83c 	bl	115a0 <__gnu_Unwind_Restore_VFP>
   11528:	e77e      	b.n	11428 <_Unwind_VRS_Pop+0x150>
   1152a:	2d00      	cmp	r5, #0
   1152c:	f43f af4c 	beq.w	113c8 <_Unwind_VRS_Pop+0xf0>
   11530:	6833      	ldr	r3, [r6, #0]
   11532:	075a      	lsls	r2, r3, #29
   11534:	d5da      	bpl.n	114ec <_Unwind_VRS_Pop+0x214>
   11536:	f023 0304 	bic.w	r3, r3, #4
   1153a:	4630      	mov	r0, r6
   1153c:	f840 3bd0 	str.w	r3, [r0], #208
   11540:	f000 f842 	bl	115c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
   11544:	f1b8 0f0f 	cmp.w	r8, #15
   11548:	d8d0      	bhi.n	114ec <_Unwind_VRS_Pop+0x214>
   1154a:	e7cc      	b.n	114e6 <_Unwind_VRS_Pop+0x20e>
   1154c:	af20      	add	r7, sp, #128	; 0x80
   1154e:	4638      	mov	r0, r7
   11550:	f000 f82a 	bl	115a8 <__gnu_Unwind_Save_VFP>
   11554:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   11556:	2d00      	cmp	r5, #0
   11558:	f47f af39 	bne.w	113ce <_Unwind_VRS_Pop+0xf6>
   1155c:	461d      	mov	r5, r3
   1155e:	e7de      	b.n	1151e <_Unwind_VRS_Pop+0x246>
   11560:	6833      	ldr	r3, [r6, #0]
   11562:	07d9      	lsls	r1, r3, #31
   11564:	d599      	bpl.n	1149a <_Unwind_VRS_Pop+0x1c2>
   11566:	2c05      	cmp	r4, #5
   11568:	f106 0048 	add.w	r0, r6, #72	; 0x48
   1156c:	d190      	bne.n	11490 <_Unwind_VRS_Pop+0x1b8>
   1156e:	f023 0301 	bic.w	r3, r3, #1
   11572:	af20      	add	r7, sp, #128	; 0x80
   11574:	f043 0302 	orr.w	r3, r3, #2
   11578:	6033      	str	r3, [r6, #0]
   1157a:	f000 f81d 	bl	115b8 <__gnu_Unwind_Save_VFP_D>
   1157e:	4638      	mov	r0, r7
   11580:	f000 f81a 	bl	115b8 <__gnu_Unwind_Save_VFP_D>
   11584:	e792      	b.n	114ac <_Unwind_VRS_Pop+0x1d4>
   11586:	bf00      	nop

00011588 <__restore_core_regs>:
   11588:	f100 0134 	add.w	r1, r0, #52	; 0x34
   1158c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   11590:	469c      	mov	ip, r3
   11592:	46a6      	mov	lr, r4
   11594:	f84c 5d04 	str.w	r5, [ip, #-4]!
   11598:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   1159c:	46e5      	mov	sp, ip
   1159e:	bd00      	pop	{pc}

000115a0 <__gnu_Unwind_Restore_VFP>:
   115a0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   115a4:	4770      	bx	lr
   115a6:	bf00      	nop

000115a8 <__gnu_Unwind_Save_VFP>:
   115a8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   115ac:	4770      	bx	lr
   115ae:	bf00      	nop

000115b0 <__gnu_Unwind_Restore_VFP_D>:
   115b0:	ec90 0b20 	vldmia	r0, {d0-d15}
   115b4:	4770      	bx	lr
   115b6:	bf00      	nop

000115b8 <__gnu_Unwind_Save_VFP_D>:
   115b8:	ec80 0b20 	vstmia	r0, {d0-d15}
   115bc:	4770      	bx	lr
   115be:	bf00      	nop

000115c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   115c0:	ecd0 0b20 	vldmia	r0, {d16-d31}
   115c4:	4770      	bx	lr
   115c6:	bf00      	nop

000115c8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   115c8:	ecc0 0b20 	vstmia	r0, {d16-d31}
   115cc:	4770      	bx	lr
   115ce:	bf00      	nop

000115d0 <__gnu_Unwind_Restore_WMMXD>:
   115d0:	ecf0 0102 	ldfe	f0, [r0], #8
   115d4:	ecf0 1102 	ldfe	f1, [r0], #8
   115d8:	ecf0 2102 	ldfe	f2, [r0], #8
   115dc:	ecf0 3102 	ldfe	f3, [r0], #8
   115e0:	ecf0 4102 	ldfe	f4, [r0], #8
   115e4:	ecf0 5102 	ldfe	f5, [r0], #8
   115e8:	ecf0 6102 	ldfe	f6, [r0], #8
   115ec:	ecf0 7102 	ldfe	f7, [r0], #8
   115f0:	ecf0 8102 	ldfp	f0, [r0], #8
   115f4:	ecf0 9102 	ldfp	f1, [r0], #8
   115f8:	ecf0 a102 	ldfp	f2, [r0], #8
   115fc:	ecf0 b102 	ldfp	f3, [r0], #8
   11600:	ecf0 c102 	ldfp	f4, [r0], #8
   11604:	ecf0 d102 	ldfp	f5, [r0], #8
   11608:	ecf0 e102 	ldfp	f6, [r0], #8
   1160c:	ecf0 f102 	ldfp	f7, [r0], #8
   11610:	4770      	bx	lr
   11612:	bf00      	nop

00011614 <__gnu_Unwind_Save_WMMXD>:
   11614:	ece0 0102 	stfe	f0, [r0], #8
   11618:	ece0 1102 	stfe	f1, [r0], #8
   1161c:	ece0 2102 	stfe	f2, [r0], #8
   11620:	ece0 3102 	stfe	f3, [r0], #8
   11624:	ece0 4102 	stfe	f4, [r0], #8
   11628:	ece0 5102 	stfe	f5, [r0], #8
   1162c:	ece0 6102 	stfe	f6, [r0], #8
   11630:	ece0 7102 	stfe	f7, [r0], #8
   11634:	ece0 8102 	stfp	f0, [r0], #8
   11638:	ece0 9102 	stfp	f1, [r0], #8
   1163c:	ece0 a102 	stfp	f2, [r0], #8
   11640:	ece0 b102 	stfp	f3, [r0], #8
   11644:	ece0 c102 	stfp	f4, [r0], #8
   11648:	ece0 d102 	stfp	f5, [r0], #8
   1164c:	ece0 e102 	stfp	f6, [r0], #8
   11650:	ece0 f102 	stfp	f7, [r0], #8
   11654:	4770      	bx	lr
   11656:	bf00      	nop

00011658 <__gnu_Unwind_Restore_WMMXC>:
   11658:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   1165c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   11660:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   11664:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   11668:	4770      	bx	lr
   1166a:	bf00      	nop

0001166c <__gnu_Unwind_Save_WMMXC>:
   1166c:	fca0 8101 	stc2	1, cr8, [r0], #4
   11670:	fca0 9101 	stc2	1, cr9, [r0], #4
   11674:	fca0 a101 	stc2	1, cr10, [r0], #4
   11678:	fca0 b101 	stc2	1, cr11, [r0], #4
   1167c:	4770      	bx	lr
   1167e:	bf00      	nop

00011680 <_Unwind_RaiseException>:
   11680:	46ec      	mov	ip, sp
   11682:	b500      	push	{lr}
   11684:	e92d 5000 	stmdb	sp!, {ip, lr}
   11688:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1168c:	f04f 0300 	mov.w	r3, #0
   11690:	e92d 000c 	stmdb	sp!, {r2, r3}
   11694:	a901      	add	r1, sp, #4
   11696:	f7ff fbb1 	bl	10dfc <__gnu_Unwind_RaiseException>
   1169a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1169e:	b012      	add	sp, #72	; 0x48
   116a0:	4770      	bx	lr
   116a2:	bf00      	nop

000116a4 <_Unwind_Resume>:
   116a4:	46ec      	mov	ip, sp
   116a6:	b500      	push	{lr}
   116a8:	e92d 5000 	stmdb	sp!, {ip, lr}
   116ac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   116b0:	f04f 0300 	mov.w	r3, #0
   116b4:	e92d 000c 	stmdb	sp!, {r2, r3}
   116b8:	a901      	add	r1, sp, #4
   116ba:	f7ff fbd9 	bl	10e70 <__gnu_Unwind_Resume>
   116be:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   116c2:	b012      	add	sp, #72	; 0x48
   116c4:	4770      	bx	lr
   116c6:	bf00      	nop

000116c8 <_Unwind_Resume_or_Rethrow>:
   116c8:	46ec      	mov	ip, sp
   116ca:	b500      	push	{lr}
   116cc:	e92d 5000 	stmdb	sp!, {ip, lr}
   116d0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   116d4:	f04f 0300 	mov.w	r3, #0
   116d8:	e92d 000c 	stmdb	sp!, {r2, r3}
   116dc:	a901      	add	r1, sp, #4
   116de:	f7ff fbe9 	bl	10eb4 <__gnu_Unwind_Resume_or_Rethrow>
   116e2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   116e6:	b012      	add	sp, #72	; 0x48
   116e8:	4770      	bx	lr
   116ea:	bf00      	nop

000116ec <_Unwind_ForcedUnwind>:
   116ec:	46ec      	mov	ip, sp
   116ee:	b500      	push	{lr}
   116f0:	e92d 5000 	stmdb	sp!, {ip, lr}
   116f4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   116f8:	f04f 0300 	mov.w	r3, #0
   116fc:	e92d 000c 	stmdb	sp!, {r2, r3}
   11700:	ab01      	add	r3, sp, #4
   11702:	f7ff fbab 	bl	10e5c <__gnu_Unwind_ForcedUnwind>
   11706:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1170a:	b012      	add	sp, #72	; 0x48
   1170c:	4770      	bx	lr
   1170e:	bf00      	nop

00011710 <_Unwind_Backtrace>:
   11710:	46ec      	mov	ip, sp
   11712:	b500      	push	{lr}
   11714:	e92d 5000 	stmdb	sp!, {ip, lr}
   11718:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   1171c:	f04f 0300 	mov.w	r3, #0
   11720:	e92d 000c 	stmdb	sp!, {r2, r3}
   11724:	aa01      	add	r2, sp, #4
   11726:	f7ff fc23 	bl	10f70 <__gnu_Unwind_Backtrace>
   1172a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   1172e:	b012      	add	sp, #72	; 0x48
   11730:	4770      	bx	lr
   11732:	bf00      	nop

00011734 <next_unwind_byte>:
   11734:	7a02      	ldrb	r2, [r0, #8]
   11736:	4603      	mov	r3, r0
   11738:	b97a      	cbnz	r2, 1175a <next_unwind_byte+0x26>
   1173a:	7a42      	ldrb	r2, [r0, #9]
   1173c:	b1a2      	cbz	r2, 11768 <next_unwind_byte+0x34>
   1173e:	6841      	ldr	r1, [r0, #4]
   11740:	3a01      	subs	r2, #1
   11742:	b430      	push	{r4, r5}
   11744:	7242      	strb	r2, [r0, #9]
   11746:	2403      	movs	r4, #3
   11748:	6808      	ldr	r0, [r1, #0]
   1174a:	1d0d      	adds	r5, r1, #4
   1174c:	721c      	strb	r4, [r3, #8]
   1174e:	0202      	lsls	r2, r0, #8
   11750:	605d      	str	r5, [r3, #4]
   11752:	0e00      	lsrs	r0, r0, #24
   11754:	601a      	str	r2, [r3, #0]
   11756:	bc30      	pop	{r4, r5}
   11758:	4770      	bx	lr
   1175a:	6800      	ldr	r0, [r0, #0]
   1175c:	3a01      	subs	r2, #1
   1175e:	721a      	strb	r2, [r3, #8]
   11760:	0202      	lsls	r2, r0, #8
   11762:	0e00      	lsrs	r0, r0, #24
   11764:	601a      	str	r2, [r3, #0]
   11766:	4770      	bx	lr
   11768:	20b0      	movs	r0, #176	; 0xb0
   1176a:	4770      	bx	lr

0001176c <_Unwind_GetGR.constprop.0>:
   1176c:	b500      	push	{lr}
   1176e:	b085      	sub	sp, #20
   11770:	2300      	movs	r3, #0
   11772:	220c      	movs	r2, #12
   11774:	a903      	add	r1, sp, #12
   11776:	9100      	str	r1, [sp, #0]
   11778:	4619      	mov	r1, r3
   1177a:	f7ff fbad 	bl	10ed8 <_Unwind_VRS_Get>
   1177e:	9803      	ldr	r0, [sp, #12]
   11780:	b005      	add	sp, #20
   11782:	f85d fb04 	ldr.w	pc, [sp], #4
   11786:	bf00      	nop

00011788 <unwind_UCB_from_context>:
   11788:	e7f0      	b.n	1176c <_Unwind_GetGR.constprop.0>
   1178a:	bf00      	nop

0001178c <__gnu_unwind_execute>:
   1178c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11790:	f04f 0800 	mov.w	r8, #0
   11794:	b085      	sub	sp, #20
   11796:	4606      	mov	r6, r0
   11798:	460d      	mov	r5, r1
   1179a:	4628      	mov	r0, r5
   1179c:	f7ff ffca 	bl	11734 <next_unwind_byte>
   117a0:	28b0      	cmp	r0, #176	; 0xb0
   117a2:	4604      	mov	r4, r0
   117a4:	f000 80bd 	beq.w	11922 <__gnu_unwind_execute+0x196>
   117a8:	0607      	lsls	r7, r0, #24
   117aa:	d520      	bpl.n	117ee <__gnu_unwind_execute+0x62>
   117ac:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   117b0:	2b80      	cmp	r3, #128	; 0x80
   117b2:	d04e      	beq.n	11852 <__gnu_unwind_execute+0xc6>
   117b4:	2b90      	cmp	r3, #144	; 0x90
   117b6:	d037      	beq.n	11828 <__gnu_unwind_execute+0x9c>
   117b8:	2ba0      	cmp	r3, #160	; 0xa0
   117ba:	d061      	beq.n	11880 <__gnu_unwind_execute+0xf4>
   117bc:	2bb0      	cmp	r3, #176	; 0xb0
   117be:	d076      	beq.n	118ae <__gnu_unwind_execute+0x122>
   117c0:	2bc0      	cmp	r3, #192	; 0xc0
   117c2:	f000 808d 	beq.w	118e0 <__gnu_unwind_execute+0x154>
   117c6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   117ca:	2bd0      	cmp	r3, #208	; 0xd0
   117cc:	d10b      	bne.n	117e6 <__gnu_unwind_execute+0x5a>
   117ce:	f000 0207 	and.w	r2, r0, #7
   117d2:	2101      	movs	r1, #1
   117d4:	2305      	movs	r3, #5
   117d6:	4630      	mov	r0, r6
   117d8:	440a      	add	r2, r1
   117da:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   117de:	f7ff fd7b 	bl	112d8 <_Unwind_VRS_Pop>
   117e2:	2800      	cmp	r0, #0
   117e4:	d0d9      	beq.n	1179a <__gnu_unwind_execute+0xe>
   117e6:	2009      	movs	r0, #9
   117e8:	b005      	add	sp, #20
   117ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   117ee:	0087      	lsls	r7, r0, #2
   117f0:	f10d 090c 	add.w	r9, sp, #12
   117f4:	2300      	movs	r3, #0
   117f6:	220d      	movs	r2, #13
   117f8:	b2ff      	uxtb	r7, r7
   117fa:	4630      	mov	r0, r6
   117fc:	4619      	mov	r1, r3
   117fe:	f8cd 9000 	str.w	r9, [sp]
   11802:	f7ff fb69 	bl	10ed8 <_Unwind_VRS_Get>
   11806:	3704      	adds	r7, #4
   11808:	9b03      	ldr	r3, [sp, #12]
   1180a:	0660      	lsls	r0, r4, #25
   1180c:	f04f 020d 	mov.w	r2, #13
   11810:	4630      	mov	r0, r6
   11812:	bf4c      	ite	mi
   11814:	1bdf      	submi	r7, r3, r7
   11816:	18ff      	addpl	r7, r7, r3
   11818:	2300      	movs	r3, #0
   1181a:	f8cd 9000 	str.w	r9, [sp]
   1181e:	9703      	str	r7, [sp, #12]
   11820:	4619      	mov	r1, r3
   11822:	f7ff fb7f 	bl	10f24 <_Unwind_VRS_Set>
   11826:	e7b8      	b.n	1179a <__gnu_unwind_execute+0xe>
   11828:	f000 030d 	and.w	r3, r0, #13
   1182c:	2b0d      	cmp	r3, #13
   1182e:	d0da      	beq.n	117e6 <__gnu_unwind_execute+0x5a>
   11830:	af03      	add	r7, sp, #12
   11832:	2300      	movs	r3, #0
   11834:	f000 020f 	and.w	r2, r0, #15
   11838:	4630      	mov	r0, r6
   1183a:	4619      	mov	r1, r3
   1183c:	9700      	str	r7, [sp, #0]
   1183e:	f7ff fb4b 	bl	10ed8 <_Unwind_VRS_Get>
   11842:	2300      	movs	r3, #0
   11844:	220d      	movs	r2, #13
   11846:	4630      	mov	r0, r6
   11848:	4619      	mov	r1, r3
   1184a:	9700      	str	r7, [sp, #0]
   1184c:	f7ff fb6a 	bl	10f24 <_Unwind_VRS_Set>
   11850:	e7a3      	b.n	1179a <__gnu_unwind_execute+0xe>
   11852:	0224      	lsls	r4, r4, #8
   11854:	4628      	mov	r0, r5
   11856:	f7ff ff6d 	bl	11734 <next_unwind_byte>
   1185a:	4320      	orrs	r0, r4
   1185c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   11860:	d0c1      	beq.n	117e6 <__gnu_unwind_execute+0x5a>
   11862:	0104      	lsls	r4, r0, #4
   11864:	2300      	movs	r3, #0
   11866:	4630      	mov	r0, r6
   11868:	b2a2      	uxth	r2, r4
   1186a:	4619      	mov	r1, r3
   1186c:	f7ff fd34 	bl	112d8 <_Unwind_VRS_Pop>
   11870:	2800      	cmp	r0, #0
   11872:	d1b8      	bne.n	117e6 <__gnu_unwind_execute+0x5a>
   11874:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   11878:	bf18      	it	ne
   1187a:	f04f 0801 	movne.w	r8, #1
   1187e:	e78c      	b.n	1179a <__gnu_unwind_execute+0xe>
   11880:	43c3      	mvns	r3, r0
   11882:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   11886:	0701      	lsls	r1, r0, #28
   11888:	4630      	mov	r0, r6
   1188a:	f003 0307 	and.w	r3, r3, #7
   1188e:	fa42 f203 	asr.w	r2, r2, r3
   11892:	f04f 0300 	mov.w	r3, #0
   11896:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   1189a:	4619      	mov	r1, r3
   1189c:	bf48      	it	mi
   1189e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   118a2:	f7ff fd19 	bl	112d8 <_Unwind_VRS_Pop>
   118a6:	2800      	cmp	r0, #0
   118a8:	f43f af77 	beq.w	1179a <__gnu_unwind_execute+0xe>
   118ac:	e79b      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   118ae:	28b1      	cmp	r0, #177	; 0xb1
   118b0:	d03c      	beq.n	1192c <__gnu_unwind_execute+0x1a0>
   118b2:	28b2      	cmp	r0, #178	; 0xb2
   118b4:	f000 80b0 	beq.w	11a18 <__gnu_unwind_execute+0x28c>
   118b8:	28b3      	cmp	r0, #179	; 0xb3
   118ba:	d04a      	beq.n	11952 <__gnu_unwind_execute+0x1c6>
   118bc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   118c0:	2bb4      	cmp	r3, #180	; 0xb4
   118c2:	d090      	beq.n	117e6 <__gnu_unwind_execute+0x5a>
   118c4:	f000 0207 	and.w	r2, r0, #7
   118c8:	2301      	movs	r3, #1
   118ca:	4630      	mov	r0, r6
   118cc:	441a      	add	r2, r3
   118ce:	4619      	mov	r1, r3
   118d0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   118d4:	f7ff fd00 	bl	112d8 <_Unwind_VRS_Pop>
   118d8:	2800      	cmp	r0, #0
   118da:	f43f af5e 	beq.w	1179a <__gnu_unwind_execute+0xe>
   118de:	e782      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   118e0:	28c6      	cmp	r0, #198	; 0xc6
   118e2:	d04f      	beq.n	11984 <__gnu_unwind_execute+0x1f8>
   118e4:	28c7      	cmp	r0, #199	; 0xc7
   118e6:	d061      	beq.n	119ac <__gnu_unwind_execute+0x220>
   118e8:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   118ec:	2bc0      	cmp	r3, #192	; 0xc0
   118ee:	d070      	beq.n	119d2 <__gnu_unwind_execute+0x246>
   118f0:	28c8      	cmp	r0, #200	; 0xc8
   118f2:	d07c      	beq.n	119ee <__gnu_unwind_execute+0x262>
   118f4:	28c9      	cmp	r0, #201	; 0xc9
   118f6:	f47f af76 	bne.w	117e6 <__gnu_unwind_execute+0x5a>
   118fa:	4628      	mov	r0, r5
   118fc:	f7ff ff1a 	bl	11734 <next_unwind_byte>
   11900:	2305      	movs	r3, #5
   11902:	4602      	mov	r2, r0
   11904:	2101      	movs	r1, #1
   11906:	4630      	mov	r0, r6
   11908:	0314      	lsls	r4, r2, #12
   1190a:	f002 020f 	and.w	r2, r2, #15
   1190e:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
   11912:	440a      	add	r2, r1
   11914:	4322      	orrs	r2, r4
   11916:	f7ff fcdf 	bl	112d8 <_Unwind_VRS_Pop>
   1191a:	2800      	cmp	r0, #0
   1191c:	f43f af3d 	beq.w	1179a <__gnu_unwind_execute+0xe>
   11920:	e761      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   11922:	f1b8 0f00 	cmp.w	r8, #0
   11926:	d01c      	beq.n	11962 <__gnu_unwind_execute+0x1d6>
   11928:	2000      	movs	r0, #0
   1192a:	e75d      	b.n	117e8 <__gnu_unwind_execute+0x5c>
   1192c:	4628      	mov	r0, r5
   1192e:	f7ff ff01 	bl	11734 <next_unwind_byte>
   11932:	4602      	mov	r2, r0
   11934:	2800      	cmp	r0, #0
   11936:	f43f af56 	beq.w	117e6 <__gnu_unwind_execute+0x5a>
   1193a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   1193e:	f47f af52 	bne.w	117e6 <__gnu_unwind_execute+0x5a>
   11942:	4619      	mov	r1, r3
   11944:	4630      	mov	r0, r6
   11946:	f7ff fcc7 	bl	112d8 <_Unwind_VRS_Pop>
   1194a:	2800      	cmp	r0, #0
   1194c:	f43f af25 	beq.w	1179a <__gnu_unwind_execute+0xe>
   11950:	e749      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   11952:	4628      	mov	r0, r5
   11954:	f7ff feee 	bl	11734 <next_unwind_byte>
   11958:	2301      	movs	r3, #1
   1195a:	4602      	mov	r2, r0
   1195c:	4630      	mov	r0, r6
   1195e:	4619      	mov	r1, r3
   11960:	e7d2      	b.n	11908 <__gnu_unwind_execute+0x17c>
   11962:	ac03      	add	r4, sp, #12
   11964:	4643      	mov	r3, r8
   11966:	220e      	movs	r2, #14
   11968:	4641      	mov	r1, r8
   1196a:	4630      	mov	r0, r6
   1196c:	9400      	str	r4, [sp, #0]
   1196e:	f7ff fab3 	bl	10ed8 <_Unwind_VRS_Get>
   11972:	4630      	mov	r0, r6
   11974:	4643      	mov	r3, r8
   11976:	220f      	movs	r2, #15
   11978:	4641      	mov	r1, r8
   1197a:	9400      	str	r4, [sp, #0]
   1197c:	f7ff fad2 	bl	10f24 <_Unwind_VRS_Set>
   11980:	4640      	mov	r0, r8
   11982:	e731      	b.n	117e8 <__gnu_unwind_execute+0x5c>
   11984:	4628      	mov	r0, r5
   11986:	f7ff fed5 	bl	11734 <next_unwind_byte>
   1198a:	4602      	mov	r2, r0
   1198c:	2303      	movs	r3, #3
   1198e:	4630      	mov	r0, r6
   11990:	0314      	lsls	r4, r2, #12
   11992:	f002 020f 	and.w	r2, r2, #15
   11996:	4619      	mov	r1, r3
   11998:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
   1199c:	3201      	adds	r2, #1
   1199e:	4322      	orrs	r2, r4
   119a0:	f7ff fc9a 	bl	112d8 <_Unwind_VRS_Pop>
   119a4:	2800      	cmp	r0, #0
   119a6:	f43f aef8 	beq.w	1179a <__gnu_unwind_execute+0xe>
   119aa:	e71c      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   119ac:	4628      	mov	r0, r5
   119ae:	f7ff fec1 	bl	11734 <next_unwind_byte>
   119b2:	4602      	mov	r2, r0
   119b4:	2800      	cmp	r0, #0
   119b6:	f43f af16 	beq.w	117e6 <__gnu_unwind_execute+0x5a>
   119ba:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   119be:	f47f af12 	bne.w	117e6 <__gnu_unwind_execute+0x5a>
   119c2:	2104      	movs	r1, #4
   119c4:	4630      	mov	r0, r6
   119c6:	f7ff fc87 	bl	112d8 <_Unwind_VRS_Pop>
   119ca:	2800      	cmp	r0, #0
   119cc:	f43f aee5 	beq.w	1179a <__gnu_unwind_execute+0xe>
   119d0:	e709      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   119d2:	f000 020f 	and.w	r2, r0, #15
   119d6:	2303      	movs	r3, #3
   119d8:	4630      	mov	r0, r6
   119da:	3201      	adds	r2, #1
   119dc:	4619      	mov	r1, r3
   119de:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   119e2:	f7ff fc79 	bl	112d8 <_Unwind_VRS_Pop>
   119e6:	2800      	cmp	r0, #0
   119e8:	f43f aed7 	beq.w	1179a <__gnu_unwind_execute+0xe>
   119ec:	e6fb      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   119ee:	4628      	mov	r0, r5
   119f0:	f7ff fea0 	bl	11734 <next_unwind_byte>
   119f4:	4602      	mov	r2, r0
   119f6:	2101      	movs	r1, #1
   119f8:	2305      	movs	r3, #5
   119fa:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
   119fe:	f002 020f 	and.w	r2, r2, #15
   11a02:	4630      	mov	r0, r6
   11a04:	3410      	adds	r4, #16
   11a06:	440a      	add	r2, r1
   11a08:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
   11a0c:	f7ff fc64 	bl	112d8 <_Unwind_VRS_Pop>
   11a10:	2800      	cmp	r0, #0
   11a12:	f43f aec2 	beq.w	1179a <__gnu_unwind_execute+0xe>
   11a16:	e6e6      	b.n	117e6 <__gnu_unwind_execute+0x5a>
   11a18:	2300      	movs	r3, #0
   11a1a:	f10d 090c 	add.w	r9, sp, #12
   11a1e:	220d      	movs	r2, #13
   11a20:	4630      	mov	r0, r6
   11a22:	4619      	mov	r1, r3
   11a24:	f8cd 9000 	str.w	r9, [sp]
   11a28:	f7ff fa56 	bl	10ed8 <_Unwind_VRS_Get>
   11a2c:	4628      	mov	r0, r5
   11a2e:	f7ff fe81 	bl	11734 <next_unwind_byte>
   11a32:	0602      	lsls	r2, r0, #24
   11a34:	f04f 0402 	mov.w	r4, #2
   11a38:	d50b      	bpl.n	11a52 <__gnu_unwind_execute+0x2c6>
   11a3a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   11a3e:	9a03      	ldr	r2, [sp, #12]
   11a40:	4628      	mov	r0, r5
   11a42:	40a3      	lsls	r3, r4
   11a44:	3407      	adds	r4, #7
   11a46:	4413      	add	r3, r2
   11a48:	9303      	str	r3, [sp, #12]
   11a4a:	f7ff fe73 	bl	11734 <next_unwind_byte>
   11a4e:	0603      	lsls	r3, r0, #24
   11a50:	d4f3      	bmi.n	11a3a <__gnu_unwind_execute+0x2ae>
   11a52:	9a03      	ldr	r2, [sp, #12]
   11a54:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   11a58:	2300      	movs	r3, #0
   11a5a:	f8cd 9000 	str.w	r9, [sp]
   11a5e:	fa00 f404 	lsl.w	r4, r0, r4
   11a62:	f502 7001 	add.w	r0, r2, #516	; 0x204
   11a66:	4619      	mov	r1, r3
   11a68:	220d      	movs	r2, #13
   11a6a:	4404      	add	r4, r0
   11a6c:	4630      	mov	r0, r6
   11a6e:	9403      	str	r4, [sp, #12]
   11a70:	f7ff fa58 	bl	10f24 <_Unwind_VRS_Set>
   11a74:	e691      	b.n	1179a <__gnu_unwind_execute+0xe>
   11a76:	bf00      	nop

00011a78 <__gnu_unwind_frame>:
   11a78:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   11a7a:	460b      	mov	r3, r1
   11a7c:	b530      	push	{r4, r5, lr}
   11a7e:	4618      	mov	r0, r3
   11a80:	b085      	sub	sp, #20
   11a82:	6853      	ldr	r3, [r2, #4]
   11a84:	2503      	movs	r5, #3
   11a86:	f102 0408 	add.w	r4, r2, #8
   11a8a:	a901      	add	r1, sp, #4
   11a8c:	021b      	lsls	r3, r3, #8
   11a8e:	f88d 500c 	strb.w	r5, [sp, #12]
   11a92:	79d2      	ldrb	r2, [r2, #7]
   11a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
   11a98:	f88d 200d 	strb.w	r2, [sp, #13]
   11a9c:	f7ff fe76 	bl	1178c <__gnu_unwind_execute>
   11aa0:	b005      	add	sp, #20
   11aa2:	bd30      	pop	{r4, r5, pc}

00011aa4 <_Unwind_GetRegionStart>:
   11aa4:	b508      	push	{r3, lr}
   11aa6:	f7ff fe6f 	bl	11788 <unwind_UCB_from_context>
   11aaa:	6c80      	ldr	r0, [r0, #72]	; 0x48
   11aac:	bd08      	pop	{r3, pc}
   11aae:	bf00      	nop

00011ab0 <_Unwind_GetLanguageSpecificData>:
   11ab0:	b508      	push	{r3, lr}
   11ab2:	f7ff fe69 	bl	11788 <unwind_UCB_from_context>
   11ab6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   11ab8:	79c3      	ldrb	r3, [r0, #7]
   11aba:	3302      	adds	r3, #2
   11abc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   11ac0:	bd08      	pop	{r3, pc}
   11ac2:	bf00      	nop

00011ac4 <__aeabi_d2uiz>:
   11ac4:	004a      	lsls	r2, r1, #1
   11ac6:	d211      	bcs.n	11aec <__aeabi_d2uiz+0x28>
   11ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   11acc:	d211      	bcs.n	11af2 <__aeabi_d2uiz+0x2e>
   11ace:	d50d      	bpl.n	11aec <__aeabi_d2uiz+0x28>
   11ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   11ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   11ad8:	d40e      	bmi.n	11af8 <__aeabi_d2uiz+0x34>
   11ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   11ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   11ae6:	fa23 f002 	lsr.w	r0, r3, r2
   11aea:	4770      	bx	lr
   11aec:	f04f 0000 	mov.w	r0, #0
   11af0:	4770      	bx	lr
   11af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   11af6:	d102      	bne.n	11afe <__aeabi_d2uiz+0x3a>
   11af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11afc:	4770      	bx	lr
   11afe:	f04f 0000 	mov.w	r0, #0
   11b02:	4770      	bx	lr

00011b04 <strcmp>:
   11b04:	f810 2b01 	ldrb.w	r2, [r0], #1
   11b08:	f811 3b01 	ldrb.w	r3, [r1], #1
   11b0c:	2a01      	cmp	r2, #1
   11b0e:	bf28      	it	cs
   11b10:	429a      	cmpcs	r2, r3
   11b12:	d0f7      	beq.n	11b04 <strcmp>
   11b14:	1ad0      	subs	r0, r2, r3
   11b16:	4770      	bx	lr

00011b18 <strlen>:
   11b18:	4603      	mov	r3, r0
   11b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
   11b1e:	2a00      	cmp	r2, #0
   11b20:	d1fb      	bne.n	11b1a <strlen+0x2>
   11b22:	1a18      	subs	r0, r3, r0
   11b24:	3801      	subs	r0, #1
   11b26:	4770      	bx	lr

00011b28 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
   11b28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   11b2c:	4606      	mov	r6, r0
   11b2e:	e9dd 890b 	ldrd	r8, r9, [sp, #44]	; 0x2c
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   11b32:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
                              int32_t* quantized_multiplier, int* left_shift) {
   11b36:	460f      	mov	r7, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   11b38:	990a      	ldr	r1, [sp, #40]	; 0x28
                              int32_t* quantized_multiplier, int* left_shift) {
   11b3a:	e9cd 2300 	strd	r2, r3, [sp]
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
   11b3e:	40c8      	lsrs	r0, r1
   11b40:	f7fa fcd0 	bl	c4e4 <__aeabi_i2d>
   11b44:	e9dd 2300 	ldrd	r2, r3, [sp]
   11b48:	4604      	mov	r4, r0
   11b4a:	460d      	mov	r5, r1
   11b4c:	4630      	mov	r0, r6
   11b4e:	4639      	mov	r1, r7
   11b50:	f7fe fcac 	bl	104ac <__aeabi_dmul>
   11b54:	4602      	mov	r2, r0
   11b56:	460b      	mov	r3, r1
   11b58:	4620      	mov	r0, r4
   11b5a:	4629      	mov	r1, r5
   11b5c:	f7fe fca6 	bl	104ac <__aeabi_dmul>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
   11b60:	a309      	add	r3, pc, #36	; (adr r3, 11b88 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x60>)
   11b62:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b66:	4604      	mov	r4, r0
   11b68:	460d      	mov	r5, r1
   11b6a:	f7fe ff2f 	bl	109cc <__aeabi_dcmpgt>
   11b6e:	b110      	cbz	r0, 11b76 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x4e>
	return __b;
   11b70:	a505      	add	r5, pc, #20	; (adr r5, 11b88 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_+0x60>)
   11b72:	e9d5 4500 	ldrd	r4, r5, [r5]
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   11b76:	464b      	mov	r3, r9
   11b78:	4642      	mov	r2, r8
   11b7a:	4620      	mov	r0, r4
   11b7c:	4629      	mov	r1, r5
                                   quantized_multiplier, left_shift);
}
   11b7e:	b003      	add	sp, #12
   11b80:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
   11b84:	f00f ba34 	b.w	20ff0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>
   11b88:	ffc00000 	.word	0xffc00000
   11b8c:	41dfffff 	.word	0x41dfffff

00011b90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
   11b90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b94:	4604      	mov	r4, r0
   11b96:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
  const double input_product_scale = static_cast<double>(input->params.scale) *
   11b9a:	68c8      	ldr	r0, [r1, #12]
                                              double* multiplier) {
   11b9c:	4615      	mov	r5, r2
   11b9e:	461e      	mov	r6, r3
   11ba0:	468a      	mov	sl, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
   11ba2:	f7fa fcb1 	bl	c508 <__aeabi_f2d>
   11ba6:	4680      	mov	r8, r0
                                     static_cast<double>(filter->params.scale);
   11ba8:	68e8      	ldr	r0, [r5, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
   11baa:	4689      	mov	r9, r1
                                     static_cast<double>(filter->params.scale);
   11bac:	f7fa fcac 	bl	c508 <__aeabi_f2d>
   11bb0:	4602      	mov	r2, r0
   11bb2:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
   11bb4:	4640      	mov	r0, r8
   11bb6:	4649      	mov	r1, r9
   11bb8:	f7fe fc78 	bl	104ac <__aeabi_dmul>
   11bbc:	4680      	mov	r8, r0
   11bbe:	4689      	mov	r9, r1
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
   11bc0:	b1d6      	cbz	r6, 11bf8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x68>
    const double bias_scale = static_cast<double>(bias->params.scale);
   11bc2:	68f0      	ldr	r0, [r6, #12]
   11bc4:	f7fa fca0 	bl	c508 <__aeabi_f2d>
   11bc8:	4602      	mov	r2, r0
   11bca:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
   11bcc:	4640      	mov	r0, r8
   11bce:	4649      	mov	r1, r9
   11bd0:	f7fa fb3a 	bl	c248 <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
   11bd4:	4680      	mov	r8, r0
    const double output_scale = static_cast<double>(output->params.scale);
   11bd6:	68f8      	ldr	r0, [r7, #12]
   11bd8:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
   11bdc:	f7fa fc94 	bl	c508 <__aeabi_f2d>
   11be0:	4602      	mov	r2, r0
   11be2:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   11be4:	4640      	mov	r0, r8
   11be6:	4649      	mov	r1, r9
   11be8:	f7fe fd8a 	bl	10700 <__aeabi_ddiv>
   11bec:	a311      	add	r3, pc, #68	; (adr r3, 11c34 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa4>)
   11bee:	e9d3 2300 	ldrd	r2, r3, [r3]
   11bf2:	f7fe fed7 	bl	109a4 <__aeabi_dcmple>
   11bf6:	b150      	cbz	r0, 11c0e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x7e>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
   11bf8:	463b      	mov	r3, r7
   11bfa:	462a      	mov	r2, r5
   11bfc:	4651      	mov	r1, sl
   11bfe:	4620      	mov	r0, r4
   11c00:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
                                          multiplier);
}
   11c04:	b003      	add	sp, #12
   11c06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
   11c0a:	f00f ba2b 	b.w	21064 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
   11c0e:	4b06      	ldr	r3, [pc, #24]	; (11c28 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x98>)
   11c10:	4620      	mov	r0, r4
   11c12:	9300      	str	r3, [sp, #0]
   11c14:	6965      	ldr	r5, [r4, #20]
   11c16:	239a      	movs	r3, #154	; 0x9a
   11c18:	4a04      	ldr	r2, [pc, #16]	; (11c2c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x9c>)
   11c1a:	4905      	ldr	r1, [pc, #20]	; (11c30 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xa0>)
   11c1c:	47a8      	blx	r5
}
   11c1e:	2001      	movs	r0, #1
   11c20:	b003      	add	sp, #12
   11c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c26:	bf00      	nop
   11c28:	0003626b 	.word	0x0003626b
   11c2c:	0003622b 	.word	0x0003622b
   11c30:	00034c0c 	.word	0x00034c0c
   11c34:	47ae147b 	.word	0x47ae147b
   11c38:	3f947ae1 	.word	0x3f947ae1
   11c3c:	00000000 	.word	0x00000000

00011c40 <floor>:
   11c40:	b580      	push	{r7, lr}
   11c42:	b08c      	sub	sp, #48	; 0x30
   11c44:	af00      	add	r7, sp, #0
   11c46:	e9c7 0100 	strd	r0, r1, [r7]
   11c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
   11c4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
   11c52:	697b      	ldr	r3, [r7, #20]
   11c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   11c56:	693b      	ldr	r3, [r7, #16]
   11c58:	62bb      	str	r3, [r7, #40]	; 0x28
   11c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11c5c:	151b      	asrs	r3, r3, #20
   11c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
   11c62:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   11c66:	627b      	str	r3, [r7, #36]	; 0x24
   11c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11c6a:	2b13      	cmp	r3, #19
   11c6c:	dc62      	bgt.n	11d34 <floor+0xf4>
   11c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11c70:	2b00      	cmp	r3, #0
   11c72:	da29      	bge.n	11cc8 <floor+0x88>
   11c74:	a162      	add	r1, pc, #392	; (adr r1, 11e00 <floor+0x1c0>)
   11c76:	e9d1 0100 	ldrd	r0, r1, [r1]
   11c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
   11c7e:	f7fa fae5 	bl	c24c <__adddf3>
   11c82:	4602      	mov	r2, r0
   11c84:	460b      	mov	r3, r1
   11c86:	4610      	mov	r0, r2
   11c88:	4619      	mov	r1, r3
   11c8a:	f04f 0200 	mov.w	r2, #0
   11c8e:	f04f 0300 	mov.w	r3, #0
   11c92:	f7fe fe9b 	bl	109cc <__aeabi_dcmpgt>
   11c96:	4603      	mov	r3, r0
   11c98:	2b00      	cmp	r3, #0
   11c9a:	f000 80a1 	beq.w	11de0 <floor+0x1a0>
   11c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11ca0:	2b00      	cmp	r3, #0
   11ca2:	db04      	blt.n	11cae <floor+0x6e>
   11ca4:	2300      	movs	r3, #0
   11ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   11ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11caa:	62fb      	str	r3, [r7, #44]	; 0x2c
   11cac:	e098      	b.n	11de0 <floor+0x1a0>
   11cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11cb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   11cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11cb6:	4313      	orrs	r3, r2
   11cb8:	2b00      	cmp	r3, #0
   11cba:	f000 8091 	beq.w	11de0 <floor+0x1a0>
   11cbe:	4b52      	ldr	r3, [pc, #328]	; (11e08 <floor+0x1c8>)
   11cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   11cc2:	2300      	movs	r3, #0
   11cc4:	62bb      	str	r3, [r7, #40]	; 0x28
   11cc6:	e08b      	b.n	11de0 <floor+0x1a0>
   11cc8:	4a50      	ldr	r2, [pc, #320]	; (11e0c <floor+0x1cc>)
   11cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11ccc:	fa42 f303 	asr.w	r3, r2, r3
   11cd0:	623b      	str	r3, [r7, #32]
   11cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   11cd4:	6a3b      	ldr	r3, [r7, #32]
   11cd6:	401a      	ands	r2, r3
   11cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11cda:	4313      	orrs	r3, r2
   11cdc:	2b00      	cmp	r3, #0
   11cde:	d102      	bne.n	11ce6 <floor+0xa6>
   11ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
   11ce4:	e086      	b.n	11df4 <floor+0x1b4>
   11ce6:	a146      	add	r1, pc, #280	; (adr r1, 11e00 <floor+0x1c0>)
   11ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
   11cec:	e9d7 2300 	ldrd	r2, r3, [r7]
   11cf0:	f7fa faac 	bl	c24c <__adddf3>
   11cf4:	4602      	mov	r2, r0
   11cf6:	460b      	mov	r3, r1
   11cf8:	4610      	mov	r0, r2
   11cfa:	4619      	mov	r1, r3
   11cfc:	f04f 0200 	mov.w	r2, #0
   11d00:	f04f 0300 	mov.w	r3, #0
   11d04:	f7fe fe62 	bl	109cc <__aeabi_dcmpgt>
   11d08:	4603      	mov	r3, r0
   11d0a:	2b00      	cmp	r3, #0
   11d0c:	d068      	beq.n	11de0 <floor+0x1a0>
   11d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11d10:	2b00      	cmp	r3, #0
   11d12:	da07      	bge.n	11d24 <floor+0xe4>
   11d14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   11d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11d1a:	fa42 f303 	asr.w	r3, r2, r3
   11d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   11d20:	4413      	add	r3, r2
   11d22:	62fb      	str	r3, [r7, #44]	; 0x2c
   11d24:	6a3b      	ldr	r3, [r7, #32]
   11d26:	43da      	mvns	r2, r3
   11d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11d2a:	4013      	ands	r3, r2
   11d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   11d2e:	2300      	movs	r3, #0
   11d30:	62bb      	str	r3, [r7, #40]	; 0x28
   11d32:	e055      	b.n	11de0 <floor+0x1a0>
   11d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11d36:	2b33      	cmp	r3, #51	; 0x33
   11d38:	dd0f      	ble.n	11d5a <floor+0x11a>
   11d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   11d40:	d108      	bne.n	11d54 <floor+0x114>
   11d42:	e9d7 0100 	ldrd	r0, r1, [r7]
   11d46:	4602      	mov	r2, r0
   11d48:	460b      	mov	r3, r1
   11d4a:	f7fa fa7f 	bl	c24c <__adddf3>
   11d4e:	4602      	mov	r2, r0
   11d50:	460b      	mov	r3, r1
   11d52:	e04f      	b.n	11df4 <floor+0x1b4>
   11d54:	e9d7 2300 	ldrd	r2, r3, [r7]
   11d58:	e04c      	b.n	11df4 <floor+0x1b4>
   11d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11d5c:	3b14      	subs	r3, #20
   11d5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11d62:	fa22 f303 	lsr.w	r3, r2, r3
   11d66:	623b      	str	r3, [r7, #32]
   11d68:	6aba      	ldr	r2, [r7, #40]	; 0x28
   11d6a:	6a3b      	ldr	r3, [r7, #32]
   11d6c:	4013      	ands	r3, r2
   11d6e:	2b00      	cmp	r3, #0
   11d70:	d102      	bne.n	11d78 <floor+0x138>
   11d72:	e9d7 2300 	ldrd	r2, r3, [r7]
   11d76:	e03d      	b.n	11df4 <floor+0x1b4>
   11d78:	a121      	add	r1, pc, #132	; (adr r1, 11e00 <floor+0x1c0>)
   11d7a:	e9d1 0100 	ldrd	r0, r1, [r1]
   11d7e:	e9d7 2300 	ldrd	r2, r3, [r7]
   11d82:	f7fa fa63 	bl	c24c <__adddf3>
   11d86:	4602      	mov	r2, r0
   11d88:	460b      	mov	r3, r1
   11d8a:	4610      	mov	r0, r2
   11d8c:	4619      	mov	r1, r3
   11d8e:	f04f 0200 	mov.w	r2, #0
   11d92:	f04f 0300 	mov.w	r3, #0
   11d96:	f7fe fe19 	bl	109cc <__aeabi_dcmpgt>
   11d9a:	4603      	mov	r3, r0
   11d9c:	2b00      	cmp	r3, #0
   11d9e:	d01f      	beq.n	11de0 <floor+0x1a0>
   11da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11da2:	2b00      	cmp	r3, #0
   11da4:	da17      	bge.n	11dd6 <floor+0x196>
   11da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11da8:	2b14      	cmp	r3, #20
   11daa:	d103      	bne.n	11db4 <floor+0x174>
   11dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11dae:	3301      	adds	r3, #1
   11db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   11db2:	e010      	b.n	11dd6 <floor+0x196>
   11db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   11db6:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
   11dba:	2201      	movs	r2, #1
   11dbc:	409a      	lsls	r2, r3
   11dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11dc0:	4413      	add	r3, r2
   11dc2:	61fb      	str	r3, [r7, #28]
   11dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11dc6:	69fa      	ldr	r2, [r7, #28]
   11dc8:	429a      	cmp	r2, r3
   11dca:	d202      	bcs.n	11dd2 <floor+0x192>
   11dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11dce:	3301      	adds	r3, #1
   11dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   11dd2:	69fb      	ldr	r3, [r7, #28]
   11dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   11dd6:	6a3b      	ldr	r3, [r7, #32]
   11dd8:	43da      	mvns	r2, r3
   11dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11ddc:	4013      	ands	r3, r2
   11dde:	62bb      	str	r3, [r7, #40]	; 0x28
   11de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   11de2:	60fb      	str	r3, [r7, #12]
   11de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   11de6:	60bb      	str	r3, [r7, #8]
   11de8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   11dec:	e9c7 2300 	strd	r2, r3, [r7]
   11df0:	e9d7 2300 	ldrd	r2, r3, [r7]
   11df4:	4610      	mov	r0, r2
   11df6:	4619      	mov	r1, r3
   11df8:	3730      	adds	r7, #48	; 0x30
   11dfa:	46bd      	mov	sp, r7
   11dfc:	bd80      	pop	{r7, pc}
   11dfe:	bf00      	nop
   11e00:	8800759c 	.word	0x8800759c
   11e04:	7e37e43c 	.word	0x7e37e43c
   11e08:	bff00000 	.word	0xbff00000
   11e0c:	000fffff 	.word	0x000fffff

00011e10 <setup>:
static uint8_t tensor_arena[kTensorArenaSize];
} // namespace

// The name of this function is important for Arduino compatibility.
void setup()
{
   11e10:	b5f0      	push	{r4, r5, r6, r7, lr}

	// Set up logging. Google style is to avoid globals or statics because of
	// lifetime uncertainty, but since this has a trivial destructor it's okay.
	// NOLINTNEXTLINE(runtime-global-variables)

	static tflite::MicroErrorReporter micro_error_reporter;
   11e12:	4c3f      	ldr	r4, [pc, #252]	; (11f10 <setup+0x100>)
{
   11e14:	b085      	sub	sp, #20
	static tflite::MicroErrorReporter micro_error_reporter;
   11e16:	e8d4 3f8f 	ldab	r3, [r4]
   11e1a:	07da      	lsls	r2, r3, #31
   11e1c:	d40b      	bmi.n	11e36 <setup+0x26>
   11e1e:	4620      	mov	r0, r4
   11e20:	f010 f9fa 	bl	22218 <__cxa_guard_acquire>
   11e24:	b138      	cbz	r0, 11e36 <setup+0x26>
   11e26:	4620      	mov	r0, r4
   11e28:	f01e fbd6 	bl	305d8 <__cxa_guard_release>
   11e2c:	4a39      	ldr	r2, [pc, #228]	; (11f14 <setup+0x104>)
   11e2e:	493a      	ldr	r1, [pc, #232]	; (11f18 <setup+0x108>)
   11e30:	483a      	ldr	r0, [pc, #232]	; (11f1c <setup+0x10c>)
   11e32:	f014 ffe1 	bl	26df8 <__aeabi_atexit>
	error_reporter = &micro_error_reporter;
   11e36:	4b39      	ldr	r3, [pc, #228]	; (11f1c <setup+0x10c>)
   11e38:	4d39      	ldr	r5, [pc, #228]	; (11f20 <setup+0x110>)

	// Map the model into a usable data structure. This doesn't involve any
	// copying or parsing, it's a very lightweight operation.
	model = tflite::GetModel(g_modelurd);
   11e3a:	4c3a      	ldr	r4, [pc, #232]	; (11f24 <setup+0x114>)
	error_reporter = &micro_error_reporter;
   11e3c:	602b      	str	r3, [r5, #0]
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
   11e3e:	4b3a      	ldr	r3, [pc, #232]	; (11f28 <setup+0x118>)
   11e40:	681a      	ldr	r2, [r3, #0]
   11e42:	18d1      	adds	r1, r2, r3
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
   11e44:	58d3      	ldr	r3, [r2, r3]
	model = tflite::GetModel(g_modelurd);
   11e46:	6021      	str	r1, [r4, #0]
   11e48:	1acb      	subs	r3, r1, r3
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   11e4a:	881a      	ldrh	r2, [r3, #0]
   11e4c:	2a04      	cmp	r2, #4
   11e4e:	d90c      	bls.n	11e6a <setup+0x5a>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
   11e50:	889a      	ldrh	r2, [r3, #4]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   11e52:	b112      	cbz	r2, 11e5a <setup+0x4a>
   11e54:	588a      	ldr	r2, [r1, r2]

	if (model->version() != TFLITE_SCHEMA_VERSION) {
   11e56:	2a03      	cmp	r2, #3
   11e58:	d009      	beq.n	11e6e <setup+0x5e>
		TF_LITE_REPORT_ERROR(
   11e5a:	2303      	movs	r3, #3
   11e5c:	4933      	ldr	r1, [pc, #204]	; (11f2c <setup+0x11c>)
   11e5e:	482f      	ldr	r0, [pc, #188]	; (11f1c <setup+0x10c>)
	input = interpreter->input(0);
	output = interpreter->output(0);

	// Keep track of how many inferences we have performed.
	inference_count = 0;
}
   11e60:	b005      	add	sp, #20
   11e62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TF_LITE_REPORT_ERROR(
   11e66:	f01e b86b 	b.w	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   11e6a:	2200      	movs	r2, #0
   11e6c:	e7f5      	b.n	11e5a <setup+0x4a>
	static tflite::AllOpsResolver resolver;
   11e6e:	4e30      	ldr	r6, [pc, #192]	; (11f30 <setup+0x120>)
   11e70:	e8d6 3f8f 	ldab	r3, [r6]
   11e74:	07db      	lsls	r3, r3, #31
   11e76:	d40e      	bmi.n	11e96 <setup+0x86>
   11e78:	4630      	mov	r0, r6
   11e7a:	f010 f9cd 	bl	22218 <__cxa_guard_acquire>
   11e7e:	b150      	cbz	r0, 11e96 <setup+0x86>
   11e80:	482c      	ldr	r0, [pc, #176]	; (11f34 <setup+0x124>)
   11e82:	f004 f84f 	bl	15f24 <_ZN6tflite14AllOpsResolverC1Ev>
   11e86:	4630      	mov	r0, r6
   11e88:	f01e fba6 	bl	305d8 <__cxa_guard_release>
   11e8c:	4a21      	ldr	r2, [pc, #132]	; (11f14 <setup+0x104>)
   11e8e:	492a      	ldr	r1, [pc, #168]	; (11f38 <setup+0x128>)
   11e90:	4828      	ldr	r0, [pc, #160]	; (11f34 <setup+0x124>)
   11e92:	f014 ffb1 	bl	26df8 <__aeabi_atexit>
							   error_reporter);
   11e96:	4f29      	ldr	r7, [pc, #164]	; (11f3c <setup+0x12c>)
   11e98:	e8d7 3f8f 	ldab	r3, [r7]
   11e9c:	f013 0601 	ands.w	r6, r3, #1
   11ea0:	d117      	bne.n	11ed2 <setup+0xc2>
   11ea2:	4638      	mov	r0, r7
   11ea4:	f010 f9b8 	bl	22218 <__cxa_guard_acquire>
   11ea8:	b198      	cbz	r0, 11ed2 <setup+0xc2>
   11eaa:	682b      	ldr	r3, [r5, #0]
   11eac:	9602      	str	r6, [sp, #8]
   11eae:	9301      	str	r3, [sp, #4]
   11eb0:	f640 4374 	movw	r3, #3188	; 0xc74
   11eb4:	9300      	str	r3, [sp, #0]
   11eb6:	4a1f      	ldr	r2, [pc, #124]	; (11f34 <setup+0x124>)
   11eb8:	6821      	ldr	r1, [r4, #0]
   11eba:	4b21      	ldr	r3, [pc, #132]	; (11f40 <setup+0x130>)
   11ebc:	4821      	ldr	r0, [pc, #132]	; (11f44 <setup+0x134>)
   11ebe:	f015 fb1e 	bl	274fe <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
   11ec2:	4638      	mov	r0, r7
   11ec4:	f01e fb88 	bl	305d8 <__cxa_guard_release>
   11ec8:	4a12      	ldr	r2, [pc, #72]	; (11f14 <setup+0x104>)
   11eca:	491f      	ldr	r1, [pc, #124]	; (11f48 <setup+0x138>)
   11ecc:	481d      	ldr	r0, [pc, #116]	; (11f44 <setup+0x134>)
   11ece:	f014 ff93 	bl	26df8 <__aeabi_atexit>
	interpreter = &static_interpreter;
   11ed2:	481c      	ldr	r0, [pc, #112]	; (11f44 <setup+0x134>)
   11ed4:	4e1d      	ldr	r6, [pc, #116]	; (11f4c <setup+0x13c>)
   11ed6:	6030      	str	r0, [r6, #0]
	TfLiteStatus allocate_status = interpreter->AllocateTensors();
   11ed8:	f004 fb54 	bl	16584 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
	if (allocate_status != kTfLiteOk) {
   11edc:	4604      	mov	r4, r0
   11ede:	b130      	cbz	r0, 11eee <setup+0xde>
		TF_LITE_REPORT_ERROR(error_reporter,
   11ee0:	491b      	ldr	r1, [pc, #108]	; (11f50 <setup+0x140>)
   11ee2:	6828      	ldr	r0, [r5, #0]
}
   11ee4:	b005      	add	sp, #20
   11ee6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TF_LITE_REPORT_ERROR(error_reporter,
   11eea:	f01e b829 	b.w	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	input = interpreter->input(0);
   11eee:	4601      	mov	r1, r0
   11ef0:	6830      	ldr	r0, [r6, #0]
   11ef2:	f004 fb0f 	bl	16514 <_ZN6tflite16MicroInterpreter5inputEj>
   11ef6:	4b17      	ldr	r3, [pc, #92]	; (11f54 <setup+0x144>)
	output = interpreter->output(0);
   11ef8:	4621      	mov	r1, r4
	input = interpreter->input(0);
   11efa:	6018      	str	r0, [r3, #0]
	output = interpreter->output(0);
   11efc:	6830      	ldr	r0, [r6, #0]
   11efe:	f004 fb25 	bl	1654c <_ZN6tflite16MicroInterpreter6outputEj>
   11f02:	4b15      	ldr	r3, [pc, #84]	; (11f58 <setup+0x148>)
   11f04:	6018      	str	r0, [r3, #0]
	inference_count = 0;
   11f06:	4b15      	ldr	r3, [pc, #84]	; (11f5c <setup+0x14c>)
   11f08:	601c      	str	r4, [r3, #0]
}
   11f0a:	b005      	add	sp, #20
   11f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11f0e:	bf00      	nop
   11f10:	200201bc 	.word	0x200201bc
   11f14:	200215d0 	.word	0x200215d0
   11f18:	00026455 	.word	0x00026455
   11f1c:	20020000 	.word	0x20020000
   11f20:	200201c8 	.word	0x200201c8
   11f24:	200201d4 	.word	0x200201d4
   11f28:	00032490 	.word	0x00032490
   11f2c:	000337b0 	.word	0x000337b0
   11f30:	200201c0 	.word	0x200201c0
   11f34:	20020254 	.word	0x20020254
   11f38:	00026457 	.word	0x00026457
   11f3c:	200201b8 	.word	0x200201b8
   11f40:	2002608c 	.word	0x2002608c
   11f44:	200201dc 	.word	0x200201dc
   11f48:	0002756b 	.word	0x0002756b
   11f4c:	200201c4 	.word	0x200201c4
   11f50:	000337f7 	.word	0x000337f7
   11f54:	200201d0 	.word	0x200201d0
   11f58:	200201d8 	.word	0x200201d8
   11f5c:	200201cc 	.word	0x200201cc

00011f60 <loop>:
	// Calculate an x value to feed into the model. We compare the current
	// inference_count to the number of inferences per cycle to determine
	// our position within the range of possible x values the model was
	// trained on, and use this to calculate a value.
	float position = static_cast<float>(inference_count) /
			 static_cast<float>(kInferencesPerCycle);
   11f60:	4b1e      	ldr	r3, [pc, #120]	; (11fdc <loop+0x7c>)
{
   11f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
			 static_cast<float>(kInferencesPerCycle);
   11f64:	681b      	ldr	r3, [r3, #0]
	float position = static_cast<float>(inference_count) /
   11f66:	4d1e      	ldr	r5, [pc, #120]	; (11fe0 <loop+0x80>)
			 static_cast<float>(kInferencesPerCycle);
   11f68:	ee07 3a10 	vmov	s14, r3
	float position = static_cast<float>(inference_count) /
   11f6c:	edd5 7a00 	vldr	s15, [r5]
			 static_cast<float>(kInferencesPerCycle);
   11f70:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	float position = static_cast<float>(inference_count) /
   11f74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   11f78:	ee87 7aa6 	vdiv.f32	s14, s15, s13

	float x_val = position * kXrange;
   11f7c:	eddf 7a19 	vldr	s15, [pc, #100]	; 11fe4 <loop+0x84>
   11f80:	ee67 7a27 	vmul.f32	s15, s14, s15
			 static_cast<float>(kInferencesPerCycle);
   11f84:	9300      	str	r3, [sp, #0]

	// Place our calculated x value in the model's input tensor
	input->data.f[0] = x_val;
   11f86:	4b18      	ldr	r3, [pc, #96]	; (11fe8 <loop+0x88>)
   11f88:	edcd 7a01 	vstr	s15, [sp, #4]
   11f8c:	681b      	ldr	r3, [r3, #0]
   11f8e:	4e17      	ldr	r6, [pc, #92]	; (11fec <loop+0x8c>)
   11f90:	685b      	ldr	r3, [r3, #4]
   11f92:	edc3 7a00 	vstr	s15, [r3]
	// Run inference, and report any error
	TfLiteStatus invoke_status = interpreter->Invoke();
   11f96:	4b16      	ldr	r3, [pc, #88]	; (11ff0 <loop+0x90>)
   11f98:	6818      	ldr	r0, [r3, #0]
   11f9a:	f004 fb71 	bl	16680 <_ZN6tflite16MicroInterpreter6InvokeEv>
	if (invoke_status != kTfLiteOk) {
   11f9e:	9901      	ldr	r1, [sp, #4]
   11fa0:	4604      	mov	r4, r0
   11fa2:	b158      	cbz	r0, 11fbc <loop+0x5c>
		TF_LITE_REPORT_ERROR(error_reporter,
   11fa4:	4608      	mov	r0, r1
   11fa6:	f7fa faaf 	bl	c508 <__aeabi_f2d>
   11faa:	4602      	mov	r2, r0
   11fac:	460b      	mov	r3, r1
   11fae:	6830      	ldr	r0, [r6, #0]
   11fb0:	4910      	ldr	r1, [pc, #64]	; (11ff4 <loop+0x94>)
	// Increment the inference_counter, and reset it if we have reached
	// the total number per cycle
	inference_count += 1;
	if (inference_count >= kInferencesPerCycle)
		inference_count = 0;
}
   11fb2:	b002      	add	sp, #8
   11fb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		TF_LITE_REPORT_ERROR(error_reporter,
   11fb8:	f01d bfc2 	b.w	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	float y_val = output->data.f[0];
   11fbc:	4b0e      	ldr	r3, [pc, #56]	; (11ff8 <loop+0x98>)
	HandleOutput(error_reporter, x_val, y_val);
   11fbe:	6830      	ldr	r0, [r6, #0]
	float y_val = output->data.f[0];
   11fc0:	681b      	ldr	r3, [r3, #0]
   11fc2:	685b      	ldr	r3, [r3, #4]
	HandleOutput(error_reporter, x_val, y_val);
   11fc4:	681a      	ldr	r2, [r3, #0]
   11fc6:	f000 f819 	bl	11ffc <_Z12HandleOutputPN6tflite13ErrorReporterEff>
	inference_count += 1;
   11fca:	682b      	ldr	r3, [r5, #0]
   11fcc:	9a00      	ldr	r2, [sp, #0]
   11fce:	3301      	adds	r3, #1
   11fd0:	429a      	cmp	r2, r3
   11fd2:	bfd8      	it	le
   11fd4:	4623      	movle	r3, r4
   11fd6:	602b      	str	r3, [r5, #0]
}
   11fd8:	b002      	add	sp, #8
   11fda:	bd70      	pop	{r4, r5, r6, pc}
   11fdc:	00032e68 	.word	0x00032e68
   11fe0:	200201cc 	.word	0x200201cc
   11fe4:	40c90fdb 	.word	0x40c90fdb
   11fe8:	200201d0 	.word	0x200201d0
   11fec:	200201c8 	.word	0x200201c8
   11ff0:	200201c4 	.word	0x200201c4
   11ff4:	00033810 	.word	0x00033810
   11ff8:	200201d8 	.word	0x200201d8

00011ffc <_Z12HandleOutputPN6tflite13ErrorReporterEff>:
 	period = MIN_PERIOD_USEC;
}

void HandleOutput(tflite::ErrorReporter *error_reporter, float x_value,
		  float y_value)
{
   11ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
new_period = (u32_t)((period * (y_value + 1) )/2);
   12000:	4b39      	ldr	r3, [pc, #228]	; (120e8 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0xec>)
{
   12002:	ed2d 8b04 	vpush	{d8-d9}
new_period = (u32_t)((period * (y_value + 1) )/2);
   12006:	681f      	ldr	r7, [r3, #0]
{
   12008:	ee08 2a10 	vmov	s16, r2
new_period = (u32_t)((period * (y_value + 1) )/2);
   1200c:	ee07 7a90 	vmov	s15, r7
   12010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   12014:	eef8 7a67 	vcvt.f32.u32	s15, s15
   12018:	ee38 7a07 	vadd.f32	s14, s16, s14
   1201c:	ee67 7a87 	vmul.f32	s15, s15, s14
   12020:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   12024:	ee67 7a87 	vmul.f32	s15, s15, s14
   12028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
   1202c:	ee17 4a90 	vmov	r4, s15
   12030:	42bc      	cmp	r4, r7
   12032:	bf28      	it	cs
   12034:	463c      	movcs	r4, r7
   12036:	4b2d      	ldr	r3, [pc, #180]	; (120ec <_Z12HandleOutputPN6tflite13ErrorReporterEff+0xf0>)
{
   12038:	ee08 0a90 	vmov	s17, r0
new_period = (u32_t)((period * (y_value + 1) )/2);
   1203c:	601c      	str	r4, [r3, #0]
    } 
    
	
	// Log the current X and Y values

   pwm_pin_set_usec(pwm, PWM_CHANNEL, period, new_period , PWM_FLAGS); 
   1203e:	4b2c      	ldr	r3, [pc, #176]	; (120f0 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0xf4>)
{
   12040:	ee09 1a10 	vmov	s18, r1
   pwm_pin_set_usec(pwm, PWM_CHANNEL, period, new_period , PWM_FLAGS); 
   12044:	681d      	ldr	r5, [r3, #0]
{
   12046:	b087      	sub	sp, #28
					       u64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->driver_api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
   12048:	68ab      	ldr	r3, [r5, #8]
   1204a:	2102      	movs	r1, #2
   1204c:	4628      	mov	r0, r5
   1204e:	685b      	ldr	r3, [r3, #4]
   12050:	aa04      	add	r2, sp, #16
   12052:	4798      	blx	r3
				   u32_t period, u32_t pulse,
				   pwm_flags_t flags)
{
	u64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
   12054:	9002      	str	r0, [sp, #8]
   12056:	bb68      	cbnz	r0, 120b4 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0xb8>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
   12058:	e9dd 6b04 	ldrd	r6, fp, [sp, #16]
   1205c:	fba7 8906 	umull	r8, r9, r7, r6
   12060:	fb07 990b 	mla	r9, r7, fp, r9
   12064:	2300      	movs	r3, #0
   12066:	4a23      	ldr	r2, [pc, #140]	; (120f4 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0xf8>)
   12068:	4640      	mov	r0, r8
   1206a:	4649      	mov	r1, r9
   1206c:	f7fa faa4 	bl	c5b8 <__aeabi_uldivmod>
	if (period_cycles >= ((u64_t)1 << 32)) {
   12070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12074:	4b20      	ldr	r3, [pc, #128]	; (120f8 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0xfc>)
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
   12076:	4682      	mov	sl, r0
	if (period_cycles >= ((u64_t)1 << 32)) {
   12078:	454b      	cmp	r3, r9
   1207a:	bf08      	it	eq
   1207c:	4542      	cmpeq	r2, r8
   1207e:	d319      	bcc.n	120b4 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0xb8>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
   12080:	fba4 6706 	umull	r6, r7, r4, r6
   12084:	fb04 770b 	mla	r7, r4, fp, r7
   12088:	2300      	movs	r3, #0
   1208a:	4a1a      	ldr	r2, [pc, #104]	; (120f4 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0xf8>)
   1208c:	4630      	mov	r0, r6
   1208e:	4639      	mov	r1, r7
   12090:	f7fa fa92 	bl	c5b8 <__aeabi_uldivmod>
	if (pulse_cycles >= ((u64_t)1 << 32)) {
   12094:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12098:	4a17      	ldr	r2, [pc, #92]	; (120f8 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0xfc>)
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
   1209a:	4603      	mov	r3, r0
	if (pulse_cycles >= ((u64_t)1 << 32)) {
   1209c:	42ba      	cmp	r2, r7
   1209e:	bf08      	it	eq
   120a0:	42b1      	cmpeq	r1, r6
   120a2:	d307      	bcc.n	120b4 <_Z12HandleOutputPN6tflite13ErrorReporterEff+0xb8>
	return api->pin_set(dev, pwm, period, pulse, flags);
   120a4:	9902      	ldr	r1, [sp, #8]
   120a6:	68aa      	ldr	r2, [r5, #8]
   120a8:	9100      	str	r1, [sp, #0]
   120aa:	6814      	ldr	r4, [r2, #0]
   120ac:	2102      	movs	r1, #2
   120ae:	4652      	mov	r2, sl
   120b0:	4628      	mov	r0, r5
   120b2:	47a0      	blx	r4
 	TF_LITE_REPORT_ERROR(error_reporter, "x_value: %f, y_value: %f\n",
   120b4:	ee19 0a10 	vmov	r0, s18
   120b8:	f7fa fa26 	bl	c508 <__aeabi_f2d>
   120bc:	4602      	mov	r2, r0
   120be:	460b      	mov	r3, r1
   120c0:	ee18 0a10 	vmov	r0, s16
   120c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   120c8:	f7fa fa1e 	bl	c508 <__aeabi_f2d>
   120cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   120d0:	e9cd 0100 	strd	r0, r1, [sp]
   120d4:	ee18 0a90 	vmov	r0, s17
   120d8:	4908      	ldr	r1, [pc, #32]	; (120fc <_Z12HandleOutputPN6tflite13ErrorReporterEff+0x100>)
   120da:	f01d ff31 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
			     static_cast<double>(x_value),
			     static_cast<double>(y_value)); 
}
   120de:	b007      	add	sp, #28
   120e0:	ecbd 8b04 	vpop	{d8-d9}
   120e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120e8:	200214e8 	.word	0x200214e8
   120ec:	200214e4 	.word	0x200214e4
   120f0:	200214ec 	.word	0x200214ec
   120f4:	000f4240 	.word	0x000f4240
   120f8:	000f423f 	.word	0x000f423f
   120fc:	0003382c 	.word	0x0003382c

00012100 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
   12100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12104:	ed2d 8b02 	vpush	{d8}
   12108:	b083      	sub	sp, #12
   1210a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1210c:	469a      	mov	sl, r3
   1210e:	2c01      	cmp	r4, #1
   12110:	bfb8      	it	lt
   12112:	2401      	movlt	r4, #1
   12114:	2b01      	cmp	r3, #1
   12116:	bf0c      	ite	eq
   12118:	2330      	moveq	r3, #48	; 0x30
   1211a:	2320      	movne	r3, #32
   1211c:	4615      	mov	r5, r2
   1211e:	4606      	mov	r6, r0
   12120:	ee08 3a10 	vmov	s16, r3
   12124:	2701      	movs	r7, #1
   12126:	f04f 080a 	mov.w	r8, #10
   1212a:	2200      	movs	r2, #0
   1212c:	f8df b074 	ldr.w	fp, [pc, #116]	; 121a4 <_printk_dec_ulong+0xa4>
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
   12130:	fbb5 f9fb 	udiv	r9, r5, fp
   12134:	b90a      	cbnz	r2, 1213a <_printk_dec_ulong+0x3a>
   12136:	45ab      	cmp	fp, r5
   12138:	d820      	bhi.n	1217c <_printk_dec_ulong+0x7c>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
   1213a:	f109 0030 	add.w	r0, r9, #48	; 0x30
   1213e:	9100      	str	r1, [sp, #0]
   12140:	47b0      	blx	r6
			found_largest_digit = 1;
   12142:	2201      	movs	r2, #1
			digits++;
   12144:	3701      	adds	r7, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
   12146:	9900      	ldr	r1, [sp, #0]
		}
		remaining--;
		remainder %= pos;
		pos /= 10;
   12148:	230a      	movs	r3, #10
		remaining--;
   1214a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
   1214e:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
   12152:	fb0b 5519 	mls	r5, fp, r9, r5
		pos /= 10;
   12156:	fbbb fbf3 	udiv	fp, fp, r3
	while (pos >= 10) {
   1215a:	d1e9      	bne.n	12130 <_printk_dec_ulong+0x30>
	}
	out((int)(remainder + 48), ctx);
   1215c:	f105 0030 	add.w	r0, r5, #48	; 0x30
   12160:	9100      	str	r1, [sp, #0]
   12162:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
   12164:	f1ba 0f03 	cmp.w	sl, #3
   12168:	9900      	ldr	r1, [sp, #0]
   1216a:	d102      	bne.n	12172 <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
   1216c:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
   1216e:	2c00      	cmp	r4, #0
   12170:	dc11      	bgt.n	12196 <_printk_dec_ulong+0x96>
			out(' ', ctx);
		}
	}
}
   12172:	b003      	add	sp, #12
   12174:	ecbd 8b02 	vpop	{d8}
   12178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
   1217c:	4544      	cmp	r4, r8
   1217e:	dbe3      	blt.n	12148 <_printk_dec_ulong+0x48>
				&& padding < PAD_SPACE_AFTER) {
   12180:	f1ba 0f02 	cmp.w	sl, #2
   12184:	d8e0      	bhi.n	12148 <_printk_dec_ulong+0x48>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   12186:	ee18 0a10 	vmov	r0, s16
   1218a:	e9cd 1200 	strd	r1, r2, [sp]
			digits++;
   1218e:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
   12190:	47b0      	blx	r6
			digits++;
   12192:	9a01      	ldr	r2, [sp, #4]
   12194:	e7d7      	b.n	12146 <_printk_dec_ulong+0x46>
			out(' ', ctx);
   12196:	2020      	movs	r0, #32
   12198:	9100      	str	r1, [sp, #0]
   1219a:	3c01      	subs	r4, #1
   1219c:	47b0      	blx	r6
   1219e:	9900      	ldr	r1, [sp, #0]
   121a0:	e7e5      	b.n	1216e <_printk_dec_ulong+0x6e>
   121a2:	bf00      	nop
   121a4:	3b9aca00 	.word	0x3b9aca00

000121a8 <__printk_hook_install>:
	_char_out = fn;
   121a8:	4b01      	ldr	r3, [pc, #4]	; (121b0 <__printk_hook_install+0x8>)
   121aa:	6018      	str	r0, [r3, #0]
}
   121ac:	4770      	bx	lr
   121ae:	bf00      	nop
   121b0:	20020004 	.word	0x20020004

000121b4 <z_vprintk>:
{
   121b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
   121b8:	2700      	movs	r7, #0
{
   121ba:	4605      	mov	r5, r0
   121bc:	468b      	mov	fp, r1
	int min_width = -1;
   121be:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
   121c2:	46b8      	mov	r8, r7
{
   121c4:	461c      	mov	r4, r3
   121c6:	b08d      	sub	sp, #52	; 0x34
   121c8:	1e53      	subs	r3, r2, #1
   121ca:	9303      	str	r3, [sp, #12]
			might_format = 0;
   121cc:	2600      	movs	r6, #0
					break;
   121ce:	e005      	b.n	121dc <z_vprintk+0x28>
		if (!might_format) {
   121d0:	b96e      	cbnz	r6, 121ee <z_vprintk+0x3a>
			if (*fmt != '%') {
   121d2:	2825      	cmp	r0, #37	; 0x25
   121d4:	f000 8171 	beq.w	124ba <z_vprintk+0x306>
				out((int)*fmt, ctx);
   121d8:	4659      	mov	r1, fp
   121da:	47a8      	blx	r5
	while (*fmt) {
   121dc:	9b03      	ldr	r3, [sp, #12]
   121de:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   121e2:	9303      	str	r3, [sp, #12]
   121e4:	2800      	cmp	r0, #0
   121e6:	d1f3      	bne.n	121d0 <z_vprintk+0x1c>
}
   121e8:	b00d      	add	sp, #52	; 0x34
   121ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
   121ee:	287a      	cmp	r0, #122	; 0x7a
   121f0:	d80a      	bhi.n	12208 <z_vprintk+0x54>
   121f2:	2862      	cmp	r0, #98	; 0x62
   121f4:	d810      	bhi.n	12218 <z_vprintk+0x64>
   121f6:	2830      	cmp	r0, #48	; 0x30
   121f8:	d054      	beq.n	122a4 <z_vprintk+0xf0>
   121fa:	d845      	bhi.n	12288 <z_vprintk+0xd4>
   121fc:	2825      	cmp	r0, #37	; 0x25
   121fe:	f000 815a 	beq.w	124b6 <z_vprintk+0x302>
   12202:	282d      	cmp	r0, #45	; 0x2d
   12204:	f000 815f 	beq.w	124c6 <z_vprintk+0x312>
					out((int)'%', ctx);
   12208:	4659      	mov	r1, fp
   1220a:	2025      	movs	r0, #37	; 0x25
   1220c:	47a8      	blx	r5
					out((int)*fmt, ctx);
   1220e:	4659      	mov	r1, fp
   12210:	9b03      	ldr	r3, [sp, #12]
   12212:	7818      	ldrb	r0, [r3, #0]
   12214:	47a8      	blx	r5
   12216:	e7d9      	b.n	121cc <z_vprintk+0x18>
   12218:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
   1221c:	2b17      	cmp	r3, #23
   1221e:	d8f3      	bhi.n	12208 <z_vprintk+0x54>
   12220:	a201      	add	r2, pc, #4	; (adr r2, 12228 <z_vprintk+0x74>)
   12222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12226:	bf00      	nop
   12228:	000124af 	.word	0x000124af
   1222c:	000122f3 	.word	0x000122f3
   12230:	00012209 	.word	0x00012209
   12234:	00012209 	.word	0x00012209
   12238:	00012209 	.word	0x00012209
   1223c:	000122d5 	.word	0x000122d5
   12240:	000122f3 	.word	0x000122f3
   12244:	00012209 	.word	0x00012209
   12248:	00012209 	.word	0x00012209
   1224c:	000122d5 	.word	0x000122d5
   12250:	00012209 	.word	0x00012209
   12254:	00012209 	.word	0x00012209
   12258:	00012209 	.word	0x00012209
   1225c:	00012395 	.word	0x00012395
   12260:	00012209 	.word	0x00012209
   12264:	00012209 	.word	0x00012209
   12268:	0001247f 	.word	0x0001247f
   1226c:	00012209 	.word	0x00012209
   12270:	00012363 	.word	0x00012363
   12274:	00012209 	.word	0x00012209
   12278:	00012209 	.word	0x00012209
   1227c:	00012291 	.word	0x00012291
   12280:	00012209 	.word	0x00012209
   12284:	000122d5 	.word	0x000122d5
			switch (*fmt) {
   12288:	2839      	cmp	r0, #57	; 0x39
   1228a:	d91a      	bls.n	122c2 <z_vprintk+0x10e>
   1228c:	2858      	cmp	r0, #88	; 0x58
   1228e:	d1bb      	bne.n	12208 <z_vprintk+0x54>
				if (*fmt == 'p') {
   12290:	9b03      	ldr	r3, [sp, #12]
   12292:	781b      	ldrb	r3, [r3, #0]
   12294:	2b70      	cmp	r3, #112	; 0x70
   12296:	f040 8088 	bne.w	123aa <z_vprintk+0x1f6>
					x = va_arg(ap, unsigned int);
   1229a:	f854 3b04 	ldr.w	r3, [r4], #4
   1229e:	2200      	movs	r2, #0
   122a0:	9306      	str	r3, [sp, #24]
   122a2:	e090      	b.n	123c6 <z_vprintk+0x212>
				if (min_width < 0 && padding == PAD_NONE) {
   122a4:	f1b9 0f00 	cmp.w	r9, #0
   122a8:	da0e      	bge.n	122c8 <z_vprintk+0x114>
   122aa:	f1b8 0f00 	cmp.w	r8, #0
   122ae:	f000 810d 	beq.w	124cc <z_vprintk+0x318>
					min_width = *fmt - '0';
   122b2:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
   122b6:	f1b8 0f00 	cmp.w	r8, #0
   122ba:	bf08      	it	eq
   122bc:	f04f 0802 	moveq.w	r8, #2
   122c0:	e78c      	b.n	121dc <z_vprintk+0x28>
				if (min_width < 0) {
   122c2:	f1b9 0f00 	cmp.w	r9, #0
   122c6:	dbf4      	blt.n	122b2 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
   122c8:	230a      	movs	r3, #10
   122ca:	fb03 0909 	mla	r9, r3, r9, r0
   122ce:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
   122d2:	e7f0      	b.n	122b6 <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
   122d4:	2868      	cmp	r0, #104	; 0x68
   122d6:	d103      	bne.n	122e0 <z_vprintk+0x12c>
   122d8:	2f68      	cmp	r7, #104	; 0x68
   122da:	d106      	bne.n	122ea <z_vprintk+0x136>
					length_mod = 'H';
   122dc:	2748      	movs	r7, #72	; 0x48
   122de:	e77d      	b.n	121dc <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
   122e0:	286c      	cmp	r0, #108	; 0x6c
   122e2:	d102      	bne.n	122ea <z_vprintk+0x136>
   122e4:	2f6c      	cmp	r7, #108	; 0x6c
   122e6:	f000 80f4 	beq.w	124d2 <z_vprintk+0x31e>
				} else if (length_mod == 0) {
   122ea:	2f00      	cmp	r7, #0
   122ec:	d18c      	bne.n	12208 <z_vprintk+0x54>
   122ee:	4607      	mov	r7, r0
   122f0:	e774      	b.n	121dc <z_vprintk+0x28>
				if (length_mod == 'z') {
   122f2:	2f7a      	cmp	r7, #122	; 0x7a
   122f4:	d102      	bne.n	122fc <z_vprintk+0x148>
					d = va_arg(ap, int);
   122f6:	f854 6b04 	ldr.w	r6, [r4], #4
   122fa:	e021      	b.n	12340 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
   122fc:	2f6c      	cmp	r7, #108	; 0x6c
   122fe:	d0fa      	beq.n	122f6 <z_vprintk+0x142>
				} else if (length_mod == 'L') {
   12300:	2f4c      	cmp	r7, #76	; 0x4c
   12302:	d1f8      	bne.n	122f6 <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
   12304:	3407      	adds	r4, #7
   12306:	f024 0407 	bic.w	r4, r4, #7
   1230a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   1230e:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
   12312:	9b04      	ldr	r3, [sp, #16]
   12314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12318:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
   1231c:	9b05      	ldr	r3, [sp, #20]
   1231e:	9108      	str	r1, [sp, #32]
   12320:	f143 0100 	adc.w	r1, r3, #0
   12324:	9109      	str	r1, [sp, #36]	; 0x24
   12326:	2100      	movs	r1, #0
   12328:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1232c:	4299      	cmp	r1, r3
   1232e:	bf08      	it	eq
   12330:	4290      	cmpeq	r0, r2
   12332:	d204      	bcs.n	1233e <z_vprintk+0x18a>
						print_err(out, ctx);
   12334:	4659      	mov	r1, fp
   12336:	4628      	mov	r0, r5
   12338:	f014 f89d 	bl	26476 <print_err>
						break;
   1233c:	e746      	b.n	121cc <z_vprintk+0x18>
					d = lld;
   1233e:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
   12340:	2e00      	cmp	r6, #0
   12342:	da05      	bge.n	12350 <z_vprintk+0x19c>
					out((int)'-', ctx);
   12344:	4659      	mov	r1, fp
   12346:	202d      	movs	r0, #45	; 0x2d
   12348:	47a8      	blx	r5
					d = -d;
   1234a:	4276      	negs	r6, r6
					min_width--;
   1234c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
   12350:	4643      	mov	r3, r8
   12352:	4632      	mov	r2, r6
   12354:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
   12358:	4659      	mov	r1, fp
   1235a:	4628      	mov	r0, r5
   1235c:	f7ff fed0 	bl	12100 <_printk_dec_ulong>
				break;
   12360:	e734      	b.n	121cc <z_vprintk+0x18>
				if (length_mod == 'z') {
   12362:	2f7a      	cmp	r7, #122	; 0x7a
   12364:	d102      	bne.n	1236c <z_vprintk+0x1b8>
					u = va_arg(ap, unsigned int);
   12366:	f854 2b04 	ldr.w	r2, [r4], #4
   1236a:	e00f      	b.n	1238c <z_vprintk+0x1d8>
				} else if (length_mod == 'l') {
   1236c:	2f6c      	cmp	r7, #108	; 0x6c
   1236e:	d0fa      	beq.n	12366 <z_vprintk+0x1b2>
				} else if (length_mod == 'L') {
   12370:	2f4c      	cmp	r7, #76	; 0x4c
   12372:	d1f8      	bne.n	12366 <z_vprintk+0x1b2>
					if (llu > ~0UL) {
   12374:	2100      	movs	r1, #0
   12376:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
   1237a:	3407      	adds	r4, #7
   1237c:	f024 0407 	bic.w	r4, r4, #7
   12380:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
   12384:	4299      	cmp	r1, r3
   12386:	bf08      	it	eq
   12388:	4290      	cmpeq	r0, r2
   1238a:	d3d3      	bcc.n	12334 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
   1238c:	4643      	mov	r3, r8
   1238e:	f8cd 9000 	str.w	r9, [sp]
   12392:	e7e1      	b.n	12358 <z_vprintk+0x1a4>
				out('0', ctx);
   12394:	4659      	mov	r1, fp
   12396:	2030      	movs	r0, #48	; 0x30
   12398:	47a8      	blx	r5
				out('x', ctx);
   1239a:	4659      	mov	r1, fp
   1239c:	2078      	movs	r0, #120	; 0x78
   1239e:	47a8      	blx	r5
					min_width = 8;
   123a0:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
   123a4:	f04f 0801 	mov.w	r8, #1
   123a8:	e772      	b.n	12290 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
   123aa:	2f6c      	cmp	r7, #108	; 0x6c
   123ac:	f43f af75 	beq.w	1229a <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
   123b0:	2f4c      	cmp	r7, #76	; 0x4c
   123b2:	f47f af72 	bne.w	1229a <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
   123b6:	1de3      	adds	r3, r4, #7
   123b8:	f023 0307 	bic.w	r3, r3, #7
   123bc:	461c      	mov	r4, r3
   123be:	f854 2b08 	ldr.w	r2, [r4], #8
   123c2:	9206      	str	r2, [sp, #24]
   123c4:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
   123c6:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
   123c8:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
   123ca:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
   123ce:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
   123d0:	9107      	str	r1, [sp, #28]
		shift -= 4;
   123d2:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
   123d6:	9906      	ldr	r1, [sp, #24]
   123d8:	f1ca 0e20 	rsb	lr, sl, #32
   123dc:	f1aa 0c20 	sub.w	ip, sl, #32
   123e0:	fa21 f00a 	lsr.w	r0, r1, sl
   123e4:	fa02 fe0e 	lsl.w	lr, r2, lr
   123e8:	ea40 000e 	orr.w	r0, r0, lr
   123ec:	fa22 fc0c 	lsr.w	ip, r2, ip
   123f0:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
   123f4:	f010 000f 	ands.w	r0, r0, #15
   123f8:	d107      	bne.n	1240a <z_vprintk+0x256>
   123fa:	9907      	ldr	r1, [sp, #28]
   123fc:	b911      	cbnz	r1, 12404 <z_vprintk+0x250>
   123fe:	f1ba 0f00 	cmp.w	sl, #0
   12402:	d125      	bne.n	12450 <z_vprintk+0x29c>
			nibble += nibble > 9 ? 87 : 48;
   12404:	f04f 0c30 	mov.w	ip, #48	; 0x30
   12408:	e005      	b.n	12416 <z_vprintk+0x262>
   1240a:	2809      	cmp	r0, #9
   1240c:	bf8c      	ite	hi
   1240e:	f04f 0c57 	movhi.w	ip, #87	; 0x57
   12412:	f04f 0c30 	movls.w	ip, #48	; 0x30
   12416:	4460      	add	r0, ip
			out((int)nibble, ctx);
   12418:	4659      	mov	r1, fp
   1241a:	b240      	sxtb	r0, r0
   1241c:	920a      	str	r2, [sp, #40]	; 0x28
   1241e:	9307      	str	r3, [sp, #28]
   12420:	47a8      	blx	r5
			digits++;
   12422:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
   12424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
   12426:	3301      	adds	r3, #1
   12428:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
   1242a:	9b07      	ldr	r3, [sp, #28]
   1242c:	f1ba 0f00 	cmp.w	sl, #0
   12430:	d123      	bne.n	1247a <z_vprintk+0x2c6>
	if (padding == PAD_SPACE_AFTER) {
   12432:	f1b8 0f03 	cmp.w	r8, #3
   12436:	f47f aec9 	bne.w	121cc <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
   1243a:	9b04      	ldr	r3, [sp, #16]
   1243c:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
   12440:	2e00      	cmp	r6, #0
   12442:	f77f aec3 	ble.w	121cc <z_vprintk+0x18>
			out(' ', ctx);
   12446:	4659      	mov	r1, fp
   12448:	2020      	movs	r0, #32
   1244a:	47a8      	blx	r5
   1244c:	3e01      	subs	r6, #1
   1244e:	e7f7      	b.n	12440 <z_vprintk+0x28c>
		if (remaining-- <= min_width) {
   12450:	1e59      	subs	r1, r3, #1
   12452:	4599      	cmp	r9, r3
   12454:	910a      	str	r1, [sp, #40]	; 0x28
   12456:	db07      	blt.n	12468 <z_vprintk+0x2b4>
			if (padding == PAD_ZERO_BEFORE) {
   12458:	f1b8 0f01 	cmp.w	r8, #1
   1245c:	d106      	bne.n	1246c <z_vprintk+0x2b8>
				out('0', ctx);
   1245e:	4659      	mov	r1, fp
   12460:	2030      	movs	r0, #48	; 0x30
   12462:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
   12464:	47a8      	blx	r5
   12466:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
   12468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1246a:	e7b2      	b.n	123d2 <z_vprintk+0x21e>
			} else if (padding == PAD_SPACE_BEFORE) {
   1246c:	f1b8 0f02 	cmp.w	r8, #2
   12470:	d1fa      	bne.n	12468 <z_vprintk+0x2b4>
				out(' ', ctx);
   12472:	4659      	mov	r1, fp
   12474:	2020      	movs	r0, #32
   12476:	920b      	str	r2, [sp, #44]	; 0x2c
   12478:	e7f4      	b.n	12464 <z_vprintk+0x2b0>
			found_largest_digit = 1;
   1247a:	9607      	str	r6, [sp, #28]
   1247c:	e7a9      	b.n	123d2 <z_vprintk+0x21e>
				char *s = va_arg(ap, char *);
   1247e:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
   12482:	46b2      	mov	sl, r6
   12484:	4653      	mov	r3, sl
   12486:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1248a:	b968      	cbnz	r0, 124a8 <z_vprintk+0x2f4>
				if (padding == PAD_SPACE_AFTER) {
   1248c:	f1b8 0f03 	cmp.w	r8, #3
   12490:	d121      	bne.n	124d6 <z_vprintk+0x322>
					int remaining = min_width - (s - start);
   12492:	1b9e      	subs	r6, r3, r6
   12494:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
   12498:	2e00      	cmp	r6, #0
   1249a:	f77f ae97 	ble.w	121cc <z_vprintk+0x18>
						out(' ', ctx);
   1249e:	4659      	mov	r1, fp
   124a0:	2020      	movs	r0, #32
   124a2:	47a8      	blx	r5
   124a4:	3e01      	subs	r6, #1
   124a6:	e7f7      	b.n	12498 <z_vprintk+0x2e4>
					out((int)(*s++), ctx);
   124a8:	4659      	mov	r1, fp
   124aa:	47a8      	blx	r5
   124ac:	e7ea      	b.n	12484 <z_vprintk+0x2d0>
				out(c, ctx);
   124ae:	4659      	mov	r1, fp
   124b0:	f854 0b04 	ldr.w	r0, [r4], #4
   124b4:	e6ae      	b.n	12214 <z_vprintk+0x60>
				out((int)'%', ctx);
   124b6:	4659      	mov	r1, fp
   124b8:	e6ac      	b.n	12214 <z_vprintk+0x60>
				length_mod = 0;
   124ba:	4637      	mov	r7, r6
				padding = PAD_NONE;
   124bc:	46b0      	mov	r8, r6
				min_width = -1;
   124be:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
   124c2:	2601      	movs	r6, #1
   124c4:	e68a      	b.n	121dc <z_vprintk+0x28>
			switch (*fmt) {
   124c6:	f04f 0803 	mov.w	r8, #3
   124ca:	e687      	b.n	121dc <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
   124cc:	f04f 0801 	mov.w	r8, #1
   124d0:	e684      	b.n	121dc <z_vprintk+0x28>
					length_mod = 'L';
   124d2:	274c      	movs	r7, #76	; 0x4c
   124d4:	e682      	b.n	121dc <z_vprintk+0x28>
			might_format = 0;
   124d6:	4606      	mov	r6, r0
		++fmt;
   124d8:	e680      	b.n	121dc <z_vprintk+0x28>
   124da:	bf00      	nop

000124dc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   124dc:	b530      	push	{r4, r5, lr}
	struct str_context ctx = { str, size, 0 };
   124de:	2500      	movs	r5, #0
{
   124e0:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   124e2:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   124e6:	4604      	mov	r4, r0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   124e8:	a901      	add	r1, sp, #4
   124ea:	4805      	ldr	r0, [pc, #20]	; (12500 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   124ec:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
   124ee:	f7ff fe61 	bl	121b4 <z_vprintk>

	if (ctx.count < ctx.max) {
   124f2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   124f6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   124f8:	bfb8      	it	lt
   124fa:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   124fc:	b005      	add	sp, #20
   124fe:	bd30      	pop	{r4, r5, pc}
   12500:	00026493 	.word	0x00026493

00012504 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   12504:	f04f 0220 	mov.w	r2, #32
   12508:	f3ef 8311 	mrs	r3, BASEPRI
   1250c:	f382 8811 	msr	BASEPRI, r2
   12510:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   12514:	2101      	movs	r1, #1
   12516:	4a04      	ldr	r2, [pc, #16]	; (12528 <nordicsemi_nrf91_init+0x24>)
   12518:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1251c:	f383 8811 	msr	BASEPRI, r3
   12520:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   12524:	2000      	movs	r0, #0
   12526:	4770      	bx	lr
   12528:	40039000 	.word	0x40039000

0001252c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   1252c:	b120      	cbz	r0, 12538 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   1252e:	4b03      	ldr	r3, [pc, #12]	; (1253c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   12530:	0180      	lsls	r0, r0, #6
   12532:	f043 0301 	orr.w	r3, r3, #1
   12536:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   12538:	4770      	bx	lr
   1253a:	bf00      	nop
   1253c:	00032e60 	.word	0x00032e60

00012540 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
   12540:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   12542:	2200      	movs	r2, #0
{
   12544:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   12546:	490f      	ldr	r1, [pc, #60]	; (12584 <enable_logger+0x44>)
   12548:	480f      	ldr	r0, [pc, #60]	; (12588 <enable_logger+0x48>)
   1254a:	f014 ff19 	bl	27380 <k_timer_init>
		};
		return (k_tid_t) arch_syscall_invoke6(*(uintptr_t *)&new_thread, *(uintptr_t *)&stack, *(uintptr_t *)&stack_size, *(uintptr_t *)&entry, *(uintptr_t *)&p1, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1254e:	2200      	movs	r2, #0
   12550:	2300      	movs	r3, #0
   12552:	2400      	movs	r4, #0
   12554:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12558:	230e      	movs	r3, #14
   1255a:	4d0c      	ldr	r5, [pc, #48]	; (1258c <enable_logger+0x4c>)
   1255c:	e9cd 3403 	strd	r3, r4, [sp, #12]
   12560:	f44f 7240 	mov.w	r2, #768	; 0x300
   12564:	4628      	mov	r0, r5
   12566:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1256a:	4b09      	ldr	r3, [pc, #36]	; (12590 <enable_logger+0x50>)
   1256c:	4909      	ldr	r1, [pc, #36]	; (12594 <enable_logger+0x54>)
   1256e:	9400      	str	r4, [sp, #0]
   12570:	f003 fa48 	bl	15a04 <z_impl_k_thread_create>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread_id, *(uintptr_t *)&value, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread_id, value);
   12574:	4908      	ldr	r1, [pc, #32]	; (12598 <enable_logger+0x58>)
   12576:	4628      	mov	r0, r5
   12578:	f014 feb8 	bl	272ec <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   1257c:	4620      	mov	r0, r4
   1257e:	b009      	add	sp, #36	; 0x24
   12580:	bd30      	pop	{r4, r5, pc}
   12582:	bf00      	nop
   12584:	0001259d 	.word	0x0001259d
   12588:	20020180 	.word	0x20020180
   1258c:	20021520 	.word	0x20021520
   12590:	000129ed 	.word	0x000129ed
   12594:	20027138 	.word	0x20027138
   12598:	0003384a 	.word	0x0003384a

0001259c <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   1259c:	4801      	ldr	r0, [pc, #4]	; (125a4 <log_process_thread_timer_expiry_fn+0x8>)
   1259e:	f003 b9c1 	b.w	15924 <z_impl_k_sem_give>
   125a2:	bf00      	nop
   125a4:	20020138 	.word	0x20020138

000125a8 <z_log_get_s_mask>:
{
   125a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   125aa:	4605      	mov	r5, r0
	u32_t mask = 0;
   125ac:	2000      	movs	r0, #0
				mask |= BIT(arg);
   125ae:	2701      	movs	r7, #1
	u32_t arg = 0;
   125b0:	4603      	mov	r3, r0
	bool arm = false;
   125b2:	4602      	mov	r2, r0
		} else if (arm && isalpha((int)curr)) {
   125b4:	4e0d      	ldr	r6, [pc, #52]	; (125ec <z_log_get_s_mask+0x44>)
	while ((curr = *str++) && arg < nargs) {
   125b6:	f815 4b01 	ldrb.w	r4, [r5], #1
   125ba:	b10c      	cbz	r4, 125c0 <z_log_get_s_mask+0x18>
   125bc:	428b      	cmp	r3, r1
   125be:	d300      	bcc.n	125c2 <z_log_get_s_mask+0x1a>
}
   125c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   125c2:	2c25      	cmp	r4, #37	; 0x25
   125c4:	d102      	bne.n	125cc <z_log_get_s_mask+0x24>
			arm = !arm;
   125c6:	f082 0201 	eor.w	r2, r2, #1
   125ca:	e7f4      	b.n	125b6 <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
   125cc:	2a00      	cmp	r2, #0
   125ce:	d0f2      	beq.n	125b6 <z_log_get_s_mask+0xe>
   125d0:	f814 c006 	ldrb.w	ip, [r4, r6]
   125d4:	f01c 0f03 	tst.w	ip, #3
   125d8:	d0ed      	beq.n	125b6 <z_log_get_s_mask+0xe>
			if (curr == 's') {
   125da:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   125dc:	bf04      	itt	eq
   125de:	fa07 f203 	lsleq.w	r2, r7, r3
   125e2:	4310      	orreq	r0, r2
			arg++;
   125e4:	3301      	adds	r3, #1
			arm = false;
   125e6:	2200      	movs	r2, #0
   125e8:	e7e5      	b.n	125b6 <z_log_get_s_mask+0xe>
   125ea:	bf00      	nop
   125ec:	000375e5 	.word	0x000375e5

000125f0 <log_core_init>:
{
   125f0:	b508      	push	{r3, lr}
		log_msg_pool_init();
   125f2:	f000 fa59 	bl	12aa8 <log_msg_pool_init>
		log_list_init(&list);
   125f6:	4809      	ldr	r0, [pc, #36]	; (1261c <log_core_init+0x2c>)
   125f8:	f014 f843 	bl	26682 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   125fc:	2304      	movs	r3, #4
   125fe:	2228      	movs	r2, #40	; 0x28
   12600:	4907      	ldr	r1, [pc, #28]	; (12620 <log_core_init+0x30>)
   12602:	4808      	ldr	r0, [pc, #32]	; (12624 <log_core_init+0x34>)
   12604:	f014 fd58 	bl	270b8 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
   12608:	4b07      	ldr	r3, [pc, #28]	; (12628 <log_core_init+0x38>)
   1260a:	4a08      	ldr	r2, [pc, #32]	; (1262c <log_core_init+0x3c>)
	log_output_timestamp_freq_set(freq);
   1260c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		timestamp_func = k_cycle_get_32_wrapper;
   12610:	601a      	str	r2, [r3, #0]
}
   12612:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
   12616:	f000 bc8f 	b.w	12f38 <log_output_timestamp_freq_set>
   1261a:	bf00      	nop
   1261c:	200214fc 	.word	0x200214fc
   12620:	20029d78 	.word	0x20029d78
   12624:	20021504 	.word	0x20021504
   12628:	20020008 	.word	0x20020008
   1262c:	000266c1 	.word	0x000266c1

00012630 <dropped_notify>:
{
   12630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12632:	2500      	movs	r5, #0
   12634:	4b0c      	ldr	r3, [pc, #48]	; (12668 <dropped_notify+0x38>)
   12636:	e8d3 7fef 	ldaex	r7, [r3]
   1263a:	e8c3 5fe2 	stlex	r2, r5, [r3]
   1263e:	2a00      	cmp	r2, #0
   12640:	d1f9      	bne.n	12636 <dropped_notify+0x6>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   12642:	4c0a      	ldr	r4, [pc, #40]	; (1266c <dropped_notify+0x3c>)
   12644:	4e0a      	ldr	r6, [pc, #40]	; (12670 <dropped_notify+0x40>)
   12646:	1b36      	subs	r6, r6, r4
   12648:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1264a:	42b5      	cmp	r5, r6
   1264c:	db00      	blt.n	12650 <dropped_notify+0x20>
}
   1264e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   12650:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   12652:	795b      	ldrb	r3, [r3, #5]
   12654:	b12b      	cbz	r3, 12662 <dropped_notify+0x32>
	if (backend->api->dropped != NULL) {
   12656:	6823      	ldr	r3, [r4, #0]
   12658:	68db      	ldr	r3, [r3, #12]
   1265a:	b113      	cbz	r3, 12662 <dropped_notify+0x32>
		backend->api->dropped(backend, cnt);
   1265c:	4639      	mov	r1, r7
   1265e:	4620      	mov	r0, r4
   12660:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12662:	3501      	adds	r5, #1
   12664:	3410      	adds	r4, #16
   12666:	e7f0      	b.n	1264a <dropped_notify+0x1a>
   12668:	200214f4 	.word	0x200214f4
   1266c:	00031878 	.word	0x00031878
   12670:	00031888 	.word	0x00031888

00012674 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12674:	4b04      	ldr	r3, [pc, #16]	; (12688 <log_dropped+0x14>)
   12676:	e8d3 2fef 	ldaex	r2, [r3]
   1267a:	3201      	adds	r2, #1
   1267c:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12680:	2900      	cmp	r1, #0
   12682:	d1f8      	bne.n	12676 <log_dropped+0x2>
}
   12684:	4770      	bx	lr
   12686:	bf00      	nop
   12688:	200214f4 	.word	0x200214f4

0001268c <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   1268c:	4a04      	ldr	r2, [pc, #16]	; (126a0 <log_source_name_get+0x14>)
   1268e:	4b05      	ldr	r3, [pc, #20]	; (126a4 <log_source_name_get+0x18>)
   12690:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   12692:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   12696:	bf34      	ite	cc
   12698:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
   1269c:	2000      	movcs	r0, #0
}
   1269e:	4770      	bx	lr
   126a0:	00031830 	.word	0x00031830
   126a4:	00031878 	.word	0x00031878

000126a8 <log_backend_enable>:
	id += backend - log_backend_get(0);
   126a8:	4b09      	ldr	r3, [pc, #36]	; (126d0 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
   126aa:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
   126ac:	1ac3      	subs	r3, r0, r3
   126ae:	111b      	asrs	r3, r3, #4
   126b0:	3301      	adds	r3, #1
{
   126b2:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
   126b4:	7113      	strb	r3, [r2, #4]
	backend->cb->active = true;
   126b6:	2201      	movs	r2, #1
	log_backend_activate(backend, ctx);
   126b8:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
   126ba:	4c06      	ldr	r4, [pc, #24]	; (126d4 <log_backend_enable+0x2c>)
   126bc:	715a      	strb	r2, [r3, #5]
   126be:	7822      	ldrb	r2, [r4, #0]
	backend->cb->ctx = ctx;
   126c0:	6019      	str	r1, [r3, #0]
   126c2:	b912      	cbnz	r2, 126ca <log_backend_enable+0x22>
   126c4:	4804      	ldr	r0, [pc, #16]	; (126d8 <log_backend_enable+0x30>)
   126c6:	f003 f92d 	bl	15924 <z_impl_k_sem_give>
	backend_attached = true;
   126ca:	2301      	movs	r3, #1
   126cc:	7023      	strb	r3, [r4, #0]
}
   126ce:	bd10      	pop	{r4, pc}
   126d0:	00031878 	.word	0x00031878
   126d4:	20026d00 	.word	0x20026d00
   126d8:	20020138 	.word	0x20020138

000126dc <log_init>:
{
   126dc:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
   126de:	4b14      	ldr	r3, [pc, #80]	; (12730 <log_init+0x54>)
   126e0:	4c14      	ldr	r4, [pc, #80]	; (12734 <log_init+0x58>)
   126e2:	1b1b      	subs	r3, r3, r4
	assert(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   126e4:	2b9f      	cmp	r3, #159	; 0x9f
   126e6:	ea4f 1623 	mov.w	r6, r3, asr #4
   126ea:	d906      	bls.n	126fa <log_init+0x1e>
   126ec:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
   126f0:	4b11      	ldr	r3, [pc, #68]	; (12738 <log_init+0x5c>)
   126f2:	4a12      	ldr	r2, [pc, #72]	; (1273c <log_init+0x60>)
   126f4:	4812      	ldr	r0, [pc, #72]	; (12740 <log_init+0x64>)
   126f6:	f013 febb 	bl	26470 <__assert_func>
   126fa:	4b12      	ldr	r3, [pc, #72]	; (12744 <log_init+0x68>)
   126fc:	e8d3 5fef 	ldaex	r5, [r3]
   12700:	1c6a      	adds	r2, r5, #1
   12702:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12706:	2900      	cmp	r1, #0
   12708:	d1f8      	bne.n	126fc <log_init+0x20>
	if (atomic_inc(&initialized) != 0) {
   1270a:	b90d      	cbnz	r5, 12710 <log_init+0x34>
	for (i = 0; i < log_backend_count_get(); i++) {
   1270c:	42b5      	cmp	r5, r6
   1270e:	d100      	bne.n	12712 <log_init+0x36>
}
   12710:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   12712:	7b23      	ldrb	r3, [r4, #12]
   12714:	b143      	cbz	r3, 12728 <log_init+0x4c>
			if (backend->api->init != NULL) {
   12716:	6823      	ldr	r3, [r4, #0]
   12718:	695b      	ldr	r3, [r3, #20]
   1271a:	b103      	cbz	r3, 1271e <log_init+0x42>
				backend->api->init();
   1271c:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
   1271e:	2204      	movs	r2, #4
   12720:	2100      	movs	r1, #0
   12722:	4620      	mov	r0, r4
   12724:	f7ff ffc0 	bl	126a8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   12728:	3501      	adds	r5, #1
   1272a:	3410      	adds	r4, #16
   1272c:	e7ee      	b.n	1270c <log_init+0x30>
   1272e:	bf00      	nop
   12730:	00031888 	.word	0x00031888
   12734:	00031878 	.word	0x00031878
   12738:	0003387f 	.word	0x0003387f
   1273c:	0003390f 	.word	0x0003390f
   12740:	00033852 	.word	0x00033852
   12744:	200214f8 	.word	0x200214f8

00012748 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   12748:	4b14      	ldr	r3, [pc, #80]	; (1279c <log_strdup+0x54>)
{
   1274a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return (((const char *)addr >= (const char *)RO_START) &&
   1274c:	4298      	cmp	r0, r3
{
   1274e:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   12750:	d302      	bcc.n	12758 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   12752:	4b13      	ldr	r3, [pc, #76]	; (127a0 <log_strdup+0x58>)
   12754:	4298      	cmp	r0, r3
   12756:	d31c      	bcc.n	12792 <log_strdup+0x4a>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   12758:	2200      	movs	r2, #0
   1275a:	2300      	movs	r3, #0
   1275c:	4811      	ldr	r0, [pc, #68]	; (127a4 <log_strdup+0x5c>)
   1275e:	a901      	add	r1, sp, #4
   12760:	f002 fc76 	bl	15050 <k_mem_slab_alloc>
	if (err != 0) {
   12764:	4605      	mov	r5, r0
   12766:	b9b8      	cbnz	r0, 12798 <log_strdup+0x50>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12768:	2201      	movs	r2, #1
   1276a:	9b01      	ldr	r3, [sp, #4]
   1276c:	e8d3 1fef 	ldaex	r1, [r3]
   12770:	e8c3 2fe0 	stlex	r0, r2, [r3]
   12774:	2800      	cmp	r0, #0
   12776:	d1f9      	bne.n	1276c <log_strdup+0x24>
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   12778:	9e01      	ldr	r6, [sp, #4]
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1277a:	221f      	movs	r2, #31
   1277c:	1d33      	adds	r3, r6, #4
   1277e:	4621      	mov	r1, r4
   12780:	4618      	mov	r0, r3
   12782:	f01e fca3 	bl	310cc <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   12786:	227e      	movs	r2, #126	; 0x7e
	return dup->buf;
   12788:	4604      	mov	r4, r0
	dup->buf[sizeof(dup->buf) - 2] = '~';
   1278a:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   1278e:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
}
   12792:	4620      	mov	r0, r4
   12794:	b002      	add	sp, #8
   12796:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   12798:	4c03      	ldr	r4, [pc, #12]	; (127a8 <log_strdup+0x60>)
   1279a:	e7fa      	b.n	12792 <log_strdup+0x4a>
   1279c:	000315ac 	.word	0x000315ac
   127a0:	0003771c 	.word	0x0003771c
   127a4:	20021504 	.word	0x20021504
   127a8:	000338b2 	.word	0x000338b2

000127ac <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
   127ac:	b148      	cbz	r0, 127c2 <log_is_strdup+0x16>
   127ae:	4b05      	ldr	r3, [pc, #20]	; (127c4 <log_is_strdup+0x18>)
   127b0:	4298      	cmp	r0, r3
   127b2:	d305      	bcc.n	127c0 <log_is_strdup+0x14>
   127b4:	33a0      	adds	r3, #160	; 0xa0
   127b6:	4298      	cmp	r0, r3
   127b8:	bf2c      	ite	cs
   127ba:	2000      	movcs	r0, #0
   127bc:	2001      	movcc	r0, #1
   127be:	4770      	bx	lr
   127c0:	2000      	movs	r0, #0
}
   127c2:	4770      	bx	lr
   127c4:	20029d78 	.word	0x20029d78

000127c8 <z_impl_log_process>:
{
   127c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   127cc:	4b4a      	ldr	r3, [pc, #296]	; (128f8 <z_impl_log_process+0x130>)
{
   127ce:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   127d0:	781b      	ldrb	r3, [r3, #0]
{
   127d2:	b085      	sub	sp, #20
	if (!backend_attached && !bypass) {
   127d4:	b903      	cbnz	r3, 127d8 <z_impl_log_process+0x10>
   127d6:	b340      	cbz	r0, 1282a <z_impl_log_process+0x62>
	__asm__ volatile(
   127d8:	f04f 0320 	mov.w	r3, #32
   127dc:	f3ef 8611 	mrs	r6, BASEPRI
   127e0:	f383 8811 	msr	BASEPRI, r3
   127e4:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
   127e8:	4844      	ldr	r0, [pc, #272]	; (128fc <z_impl_log_process+0x134>)
   127ea:	f013 ff5a 	bl	266a2 <log_list_head_get>
   127ee:	4605      	mov	r5, r0
	__asm__ volatile(
   127f0:	f386 8811 	msr	BASEPRI, r6
   127f4:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
   127f8:	b158      	cbz	r0, 12812 <z_impl_log_process+0x4a>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   127fa:	4b41      	ldr	r3, [pc, #260]	; (12900 <z_impl_log_process+0x138>)
   127fc:	e8d3 2fef 	ldaex	r2, [r3]
   12800:	3a01      	subs	r2, #1
   12802:	e8c3 2fe1 	stlex	r1, r2, [r3]
   12806:	2900      	cmp	r1, #0
   12808:	d1f8      	bne.n	127fc <z_impl_log_process+0x34>
	if (!bypass) {
   1280a:	b194      	cbz	r4, 12832 <z_impl_log_process+0x6a>
	log_msg_put(msg);
   1280c:	4628      	mov	r0, r5
   1280e:	f014 f852 	bl	268b6 <log_msg_put>
	if (!bypass && dropped_cnt) {
   12812:	b924      	cbnz	r4, 1281e <z_impl_log_process+0x56>
   12814:	4b3b      	ldr	r3, [pc, #236]	; (12904 <z_impl_log_process+0x13c>)
   12816:	681b      	ldr	r3, [r3, #0]
   12818:	b10b      	cbz	r3, 1281e <z_impl_log_process+0x56>
		dropped_notify();
   1281a:	f7ff ff09 	bl	12630 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   1281e:	4837      	ldr	r0, [pc, #220]	; (128fc <z_impl_log_process+0x134>)
   12820:	f013 ff3d 	bl	2669e <log_list_head_peek>
   12824:	1e04      	subs	r4, r0, #0
   12826:	bf18      	it	ne
   12828:	2401      	movne	r4, #1
}
   1282a:	4620      	mov	r0, r4
   1282c:	b005      	add	sp, #20
   1282e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   12832:	4b35      	ldr	r3, [pc, #212]	; (12908 <z_impl_log_process+0x140>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
   12834:	781b      	ldrb	r3, [r3, #0]
   12836:	b9cb      	cbnz	r3, 1286c <z_impl_log_process+0xa4>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12838:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   1283a:	07db      	lsls	r3, r3, #31
   1283c:	d416      	bmi.n	1286c <z_impl_log_process+0xa4>
	msg_str = log_msg_str_get(msg);
   1283e:	f014 f849 	bl	268d4 <log_msg_str_get>
   12842:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   12844:	4628      	mov	r0, r5
   12846:	f014 f814 	bl	26872 <log_msg_nargs_get>
   1284a:	4601      	mov	r1, r0
   1284c:	4640      	mov	r0, r8
   1284e:	f7ff feab 	bl	125a8 <z_log_get_s_mask>
   12852:	4606      	mov	r6, r0
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   12854:	4f2d      	ldr	r7, [pc, #180]	; (1290c <z_impl_log_process+0x144>)
   12856:	4b2e      	ldr	r3, [pc, #184]	; (12910 <z_impl_log_process+0x148>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   12858:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 1292c <z_impl_log_process+0x164>
   1285c:	1bdb      	subs	r3, r3, r7
   1285e:	08db      	lsrs	r3, r3, #3
   12860:	9303      	str	r3, [sp, #12]
   12862:	4b2c      	ldr	r3, [pc, #176]	; (12914 <z_impl_log_process+0x14c>)
   12864:	1bdb      	subs	r3, r3, r7
   12866:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   1286a:	b936      	cbnz	r6, 1287a <z_impl_log_process+0xb2>
   1286c:	4e2a      	ldr	r6, [pc, #168]	; (12918 <z_impl_log_process+0x150>)
   1286e:	4f2b      	ldr	r7, [pc, #172]	; (1291c <z_impl_log_process+0x154>)
   12870:	f04f 0800 	mov.w	r8, #0
   12874:	1bbf      	subs	r7, r7, r6
   12876:	113f      	asrs	r7, r7, #4
   12878:	e03a      	b.n	128f0 <z_impl_log_process+0x128>
		idx = 31 - __builtin_clz(mask);
   1287a:	fab6 f186 	clz	r1, r6
   1287e:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   12882:	4649      	mov	r1, r9
   12884:	4628      	mov	r0, r5
   12886:	f013 fff7 	bl	26878 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   1288a:	4b25      	ldr	r3, [pc, #148]	; (12920 <z_impl_log_process+0x158>)
		str = (const char *)log_msg_arg_get(msg, idx);
   1288c:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   1288e:	4298      	cmp	r0, r3
   12890:	d302      	bcc.n	12898 <z_impl_log_process+0xd0>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   12892:	4a24      	ldr	r2, [pc, #144]	; (12924 <z_impl_log_process+0x15c>)
   12894:	4290      	cmp	r0, r2
   12896:	d31a      	bcc.n	128ce <z_impl_log_process+0x106>
   12898:	4608      	mov	r0, r1
   1289a:	f7ff ff87 	bl	127ac <log_is_strdup>
   1289e:	4602      	mov	r2, r0
   128a0:	b9a8      	cbnz	r0, 128ce <z_impl_log_process+0x106>
   128a2:	4b21      	ldr	r3, [pc, #132]	; (12928 <z_impl_log_process+0x160>)
   128a4:	4299      	cmp	r1, r3
   128a6:	d012      	beq.n	128ce <z_impl_log_process+0x106>
	return msg->hdr.ids.source_id;
   128a8:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   128aa:	9903      	ldr	r1, [sp, #12]
   128ac:	0998      	lsrs	r0, r3, #6
   128ae:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   128b2:	ea4f 138a 	mov.w	r3, sl, lsl #6
   128b6:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
   128ba:	bf88      	it	hi
   128bc:	f857 2030 	ldrhi.w	r2, [r7, r0, lsl #3]
   128c0:	4649      	mov	r1, r9
   128c2:	f8ad 3000 	strh.w	r3, [sp]
   128c6:	4658      	mov	r0, fp
   128c8:	4643      	mov	r3, r8
   128ca:	f013 ff3c 	bl	26746 <log_3>
		mask &= ~BIT(idx);
   128ce:	2301      	movs	r3, #1
   128d0:	fa03 f109 	lsl.w	r1, r3, r9
   128d4:	ea26 0601 	bic.w	r6, r6, r1
   128d8:	e7c7      	b.n	1286a <z_impl_log_process+0xa2>
	return backend->cb->active;
   128da:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   128dc:	795b      	ldrb	r3, [r3, #5]
   128de:	b123      	cbz	r3, 128ea <z_impl_log_process+0x122>
	backend->api->put(backend, msg);
   128e0:	6833      	ldr	r3, [r6, #0]
   128e2:	4629      	mov	r1, r5
   128e4:	4630      	mov	r0, r6
   128e6:	681b      	ldr	r3, [r3, #0]
   128e8:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   128ea:	f108 0801 	add.w	r8, r8, #1
   128ee:	3610      	adds	r6, #16
   128f0:	45b8      	cmp	r8, r7
   128f2:	dbf2      	blt.n	128da <z_impl_log_process+0x112>
   128f4:	e78a      	b.n	1280c <z_impl_log_process+0x44>
   128f6:	bf00      	nop
   128f8:	20026d00 	.word	0x20026d00
   128fc:	200214fc 	.word	0x200214fc
   12900:	200214f0 	.word	0x200214f0
   12904:	200214f4 	.word	0x200214f4
   12908:	20026d01 	.word	0x20026d01
   1290c:	00031830 	.word	0x00031830
   12910:	00031878 	.word	0x00031878
   12914:	00031840 	.word	0x00031840
   12918:	00031878 	.word	0x00031878
   1291c:	00031888 	.word	0x00031888
   12920:	000315ac 	.word	0x000315ac
   12924:	0003771c 	.word	0x0003771c
   12928:	000338b2 	.word	0x000338b2
   1292c:	000338cc 	.word	0x000338cc

00012930 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   12930:	4b27      	ldr	r3, [pc, #156]	; (129d0 <msg_finalize+0xa0>)
{
   12932:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   12934:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   12936:	8141      	strh	r1, [r0, #10]
{
   12938:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1293a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1293c:	4d25      	ldr	r5, [pc, #148]	; (129d4 <msg_finalize+0xa4>)
   1293e:	60e0      	str	r0, [r4, #12]
   12940:	e8d5 3fef 	ldaex	r3, [r5]
   12944:	3301      	adds	r3, #1
   12946:	e8c5 3fe2 	stlex	r2, r3, [r5]
   1294a:	2a00      	cmp	r2, #0
   1294c:	d1f8      	bne.n	12940 <msg_finalize+0x10>
	__asm__ volatile(
   1294e:	f04f 0320 	mov.w	r3, #32
   12952:	f3ef 8611 	mrs	r6, BASEPRI
   12956:	f383 8811 	msr	BASEPRI, r3
   1295a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1295e:	481e      	ldr	r0, [pc, #120]	; (129d8 <msg_finalize+0xa8>)
   12960:	4621      	mov	r1, r4
   12962:	f013 fe92 	bl	2668a <log_list_add_tail>
	__asm__ volatile(
   12966:	f386 8811 	msr	BASEPRI, r6
   1296a:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
   1296e:	4b1b      	ldr	r3, [pc, #108]	; (129dc <msg_finalize+0xac>)
   12970:	781b      	ldrb	r3, [r3, #0]
   12972:	b183      	cbz	r3, 12996 <msg_finalize+0x66>
	__asm__ volatile(
   12974:	f04f 0320 	mov.w	r3, #32
   12978:	f3ef 8411 	mrs	r4, BASEPRI
   1297c:	f383 8811 	msr	BASEPRI, r3
   12980:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   12984:	2000      	movs	r0, #0
   12986:	f7ff ff1f 	bl	127c8 <z_impl_log_process>
	__asm__ volatile(
   1298a:	f384 8811 	msr	BASEPRI, r4
   1298e:	f3bf 8f6f 	isb	sy
}
   12992:	b002      	add	sp, #8
   12994:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   12996:	4a12      	ldr	r2, [pc, #72]	; (129e0 <msg_finalize+0xb0>)
   12998:	682b      	ldr	r3, [r5, #0]
   1299a:	6812      	ldr	r2, [r2, #0]
   1299c:	2a00      	cmp	r2, #0
   1299e:	d0f8      	beq.n	12992 <msg_finalize+0x62>
   129a0:	2b01      	cmp	r3, #1
   129a2:	d10a      	bne.n	129ba <msg_finalize+0x8a>
	z_impl_k_timer_start(timer, duration, period);
   129a4:	2200      	movs	r2, #0
   129a6:	2300      	movs	r3, #0
   129a8:	480e      	ldr	r0, [pc, #56]	; (129e4 <msg_finalize+0xb4>)
   129aa:	e9cd 2300 	strd	r2, r3, [sp]
   129ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   129b2:	2300      	movs	r3, #0
   129b4:	f003 f9fc 	bl	15db0 <z_impl_k_timer_start>
   129b8:	e7eb      	b.n	12992 <msg_finalize+0x62>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   129ba:	2b0a      	cmp	r3, #10
   129bc:	d1e9      	bne.n	12992 <msg_finalize+0x62>
	z_impl_k_timer_stop(timer);
   129be:	4809      	ldr	r0, [pc, #36]	; (129e4 <msg_finalize+0xb4>)
   129c0:	f014 fcea 	bl	27398 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   129c4:	4808      	ldr	r0, [pc, #32]	; (129e8 <msg_finalize+0xb8>)
}
   129c6:	b002      	add	sp, #8
   129c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   129cc:	f002 bfaa 	b.w	15924 <z_impl_k_sem_give>
   129d0:	20020008 	.word	0x20020008
   129d4:	200214f0 	.word	0x200214f0
   129d8:	200214fc 	.word	0x200214fc
   129dc:	20026d01 	.word	0x20026d01
   129e0:	20021594 	.word	0x20021594
   129e4:	20020180 	.word	0x20020180
   129e8:	20020138 	.word	0x20020138

000129ec <log_process_thread_func>:
{
   129ec:	b510      	push	{r4, lr}
	log_init();
   129ee:	f7ff fe75 	bl	126dc <log_init>
	return z_impl_k_current_get();
   129f2:	f002 ff91 	bl	15918 <z_impl_k_current_get>
	proc_tid = process_tid;
   129f6:	4b0c      	ldr	r3, [pc, #48]	; (12a28 <log_process_thread_func+0x3c>)
   129f8:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   129fa:	b130      	cbz	r0, 12a0a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   129fc:	4b0b      	ldr	r3, [pc, #44]	; (12a2c <log_process_thread_func+0x40>)
	    process_tid &&
   129fe:	681b      	ldr	r3, [r3, #0]
   12a00:	2b09      	cmp	r3, #9
   12a02:	dd02      	ble.n	12a0a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   12a04:	480a      	ldr	r0, [pc, #40]	; (12a30 <log_process_thread_func+0x44>)
   12a06:	f002 ff8d 	bl	15924 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   12a0a:	4c09      	ldr	r4, [pc, #36]	; (12a30 <log_process_thread_func+0x44>)
   12a0c:	2000      	movs	r0, #0
   12a0e:	f7ff fedb 	bl	127c8 <z_impl_log_process>
		if (log_process(false) == false) {
   12a12:	2800      	cmp	r0, #0
   12a14:	d1fa      	bne.n	12a0c <log_process_thread_func+0x20>
   12a16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a1e:	4620      	mov	r0, r4
   12a20:	f002 ffa0 	bl	15964 <z_impl_k_sem_take>
   12a24:	e7f2      	b.n	12a0c <log_process_thread_func+0x20>
   12a26:	bf00      	nop
   12a28:	20021594 	.word	0x20021594
   12a2c:	200214f0 	.word	0x200214f0
   12a30:	20020138 	.word	0x20020138

00012a34 <z_impl_log_panic>:
{
   12a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   12a36:	4f0e      	ldr	r7, [pc, #56]	; (12a70 <z_impl_log_panic+0x3c>)
   12a38:	783d      	ldrb	r5, [r7, #0]
   12a3a:	b975      	cbnz	r5, 12a5a <z_impl_log_panic+0x26>
	log_init();
   12a3c:	f7ff fe4e 	bl	126dc <log_init>
	return __log_backends_end - __log_backends_start;
   12a40:	4c0c      	ldr	r4, [pc, #48]	; (12a74 <z_impl_log_panic+0x40>)
   12a42:	4e0d      	ldr	r6, [pc, #52]	; (12a78 <z_impl_log_panic+0x44>)
   12a44:	1b36      	subs	r6, r6, r4
   12a46:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12a48:	42b5      	cmp	r5, r6
   12a4a:	db07      	blt.n	12a5c <z_impl_log_panic+0x28>
   12a4c:	2000      	movs	r0, #0
   12a4e:	f7ff febb 	bl	127c8 <z_impl_log_process>
		while (log_process(false) == true) {
   12a52:	2800      	cmp	r0, #0
   12a54:	d1fa      	bne.n	12a4c <z_impl_log_panic+0x18>
	panic_mode = true;
   12a56:	2301      	movs	r3, #1
   12a58:	703b      	strb	r3, [r7, #0]
}
   12a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   12a5c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   12a5e:	795b      	ldrb	r3, [r3, #5]
   12a60:	b11b      	cbz	r3, 12a6a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   12a62:	6823      	ldr	r3, [r4, #0]
   12a64:	4620      	mov	r0, r4
   12a66:	691b      	ldr	r3, [r3, #16]
   12a68:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12a6a:	3501      	adds	r5, #1
   12a6c:	3410      	adds	r4, #16
   12a6e:	e7eb      	b.n	12a48 <z_impl_log_panic+0x14>
   12a70:	20026d01 	.word	0x20026d01
   12a74:	00031878 	.word	0x00031878
   12a78:	00031888 	.word	0x00031888

00012a7c <log_free>:
{
   12a7c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   12a7e:	3804      	subs	r0, #4
   12a80:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12a82:	e8d0 3fef 	ldaex	r3, [r0]
   12a86:	1e5a      	subs	r2, r3, #1
   12a88:	e8c0 2fe1 	stlex	r1, r2, [r0]
   12a8c:	2900      	cmp	r1, #0
   12a8e:	d1f8      	bne.n	12a82 <log_free+0x6>
	if (atomic_dec(&dup->refcount) == 1) {
   12a90:	2b01      	cmp	r3, #1
   12a92:	d103      	bne.n	12a9c <log_free+0x20>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   12a94:	4803      	ldr	r0, [pc, #12]	; (12aa4 <log_free+0x28>)
   12a96:	a901      	add	r1, sp, #4
   12a98:	f002 fb0c 	bl	150b4 <k_mem_slab_free>
}
   12a9c:	b003      	add	sp, #12
   12a9e:	f85d fb04 	ldr.w	pc, [sp], #4
   12aa2:	bf00      	nop
   12aa4:	20021504 	.word	0x20021504

00012aa8 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   12aa8:	2320      	movs	r3, #32
   12aaa:	4902      	ldr	r1, [pc, #8]	; (12ab4 <log_msg_pool_init+0xc>)
   12aac:	461a      	mov	r2, r3
   12aae:	4802      	ldr	r0, [pc, #8]	; (12ab8 <log_msg_pool_init+0x10>)
   12ab0:	f014 bb02 	b.w	270b8 <k_mem_slab_init>
   12ab4:	20029e18 	.word	0x20029e18
   12ab8:	20021598 	.word	0x20021598

00012abc <log_msg_no_space_handle>:
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
	union log_msg_chunk *msg = NULL;
   12abc:	2300      	movs	r3, #0
{
   12abe:	b537      	push	{r0, r1, r2, r4, r5, lr}

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   12ac0:	4d09      	ldr	r5, [pc, #36]	; (12ae8 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   12ac2:	9301      	str	r3, [sp, #4]
   12ac4:	2001      	movs	r0, #1
   12ac6:	f7ff fe7f 	bl	127c8 <z_impl_log_process>
   12aca:	4604      	mov	r4, r0
			log_dropped();
   12acc:	f7ff fdd2 	bl	12674 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   12ad0:	2200      	movs	r2, #0
   12ad2:	2300      	movs	r3, #0
   12ad4:	4628      	mov	r0, r5
   12ad6:	a901      	add	r1, sp, #4
   12ad8:	f002 faba 	bl	15050 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   12adc:	b108      	cbz	r0, 12ae2 <log_msg_no_space_handle+0x26>
   12ade:	2c00      	cmp	r4, #0
   12ae0:	d1f0      	bne.n	12ac4 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
   12ae2:	9801      	ldr	r0, [sp, #4]
   12ae4:	b003      	add	sp, #12
   12ae6:	bd30      	pop	{r4, r5, pc}
   12ae8:	20021598 	.word	0x20021598

00012aec <log_msg_chunk_alloc>:
	union log_msg_chunk *msg = NULL;
   12aec:	2300      	movs	r3, #0
{
   12aee:	b507      	push	{r0, r1, r2, lr}
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   12af0:	2200      	movs	r2, #0
	union log_msg_chunk *msg = NULL;
   12af2:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   12af4:	4806      	ldr	r0, [pc, #24]	; (12b10 <log_msg_chunk_alloc+0x24>)
   12af6:	2300      	movs	r3, #0
   12af8:	a901      	add	r1, sp, #4
   12afa:	f002 faa9 	bl	15050 <k_mem_slab_alloc>
	if (err != 0) {
   12afe:	b110      	cbz	r0, 12b06 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   12b00:	f7ff ffdc 	bl	12abc <log_msg_no_space_handle>
   12b04:	9001      	str	r0, [sp, #4]
}
   12b06:	9801      	ldr	r0, [sp, #4]
   12b08:	b003      	add	sp, #12
   12b0a:	f85d fb04 	ldr.w	pc, [sp], #4
   12b0e:	bf00      	nop
   12b10:	20021598 	.word	0x20021598

00012b14 <msg_free>:
{
   12b14:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12b16:	7a03      	ldrb	r3, [r0, #8]
	}
}

u32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   12b18:	7a45      	ldrb	r5, [r0, #9]
{
   12b1a:	b085      	sub	sp, #20
   12b1c:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   12b1e:	07d8      	lsls	r0, r3, #31
	return msg->hdr.params.std.nargs;
   12b20:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
   12b24:	d41c      	bmi.n	12b60 <msg_free+0x4c>
   12b26:	b1dd      	cbz	r5, 12b60 <msg_free+0x4c>
		u32_t smask = 0;
   12b28:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
   12b2a:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   12b2c:	4631      	mov	r1, r6
   12b2e:	9801      	ldr	r0, [sp, #4]
   12b30:	f013 fea2 	bl	26878 <log_msg_arg_get>
   12b34:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   12b36:	f7ff fe39 	bl	127ac <log_is_strdup>
   12b3a:	b170      	cbz	r0, 12b5a <msg_free+0x46>
				if (smask == 0) {
   12b3c:	b934      	cbnz	r4, 12b4c <msg_free+0x38>
					smask = z_log_get_s_mask(
   12b3e:	9b01      	ldr	r3, [sp, #4]
   12b40:	4629      	mov	r1, r5
   12b42:	6918      	ldr	r0, [r3, #16]
   12b44:	f7ff fd30 	bl	125a8 <z_log_get_s_mask>
					if (smask == 0) {
   12b48:	4604      	mov	r4, r0
   12b4a:	b148      	cbz	r0, 12b60 <msg_free+0x4c>
				if (smask & BIT(i)) {
   12b4c:	fa24 f306 	lsr.w	r3, r4, r6
   12b50:	07d9      	lsls	r1, r3, #31
   12b52:	d502      	bpl.n	12b5a <msg_free+0x46>
					log_free(buf);
   12b54:	4638      	mov	r0, r7
   12b56:	f7ff ff91 	bl	12a7c <log_free>
		for (i = 0; i < nargs; i++) {
   12b5a:	3601      	adds	r6, #1
   12b5c:	42ae      	cmp	r6, r5
   12b5e:	d3e5      	bcc.n	12b2c <msg_free+0x18>
	if (msg->hdr.params.generic.ext == 1) {
   12b60:	9b01      	ldr	r3, [sp, #4]
   12b62:	7a1a      	ldrb	r2, [r3, #8]
   12b64:	0792      	lsls	r2, r2, #30
   12b66:	d504      	bpl.n	12b72 <msg_free+0x5e>
		cont_free(msg->payload.ext.next);
   12b68:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12b6a:	4c08      	ldr	r4, [pc, #32]	; (12b8c <msg_free+0x78>)
   12b6c:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   12b6e:	9b03      	ldr	r3, [sp, #12]
   12b70:	b92b      	cbnz	r3, 12b7e <msg_free+0x6a>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   12b72:	4806      	ldr	r0, [pc, #24]	; (12b8c <msg_free+0x78>)
   12b74:	a901      	add	r1, sp, #4
   12b76:	f002 fa9d 	bl	150b4 <k_mem_slab_free>
}
   12b7a:	b005      	add	sp, #20
   12b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   12b7e:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12b80:	4620      	mov	r0, r4
   12b82:	a903      	add	r1, sp, #12
   12b84:	f002 fa96 	bl	150b4 <k_mem_slab_free>
		cont = next;
   12b88:	9503      	str	r5, [sp, #12]
   12b8a:	e7f0      	b.n	12b6e <msg_free+0x5a>
   12b8c:	20021598 	.word	0x20021598

00012b90 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
   12b90:	b40e      	push	{r1, r2, r3}
   12b92:	b503      	push	{r0, r1, lr}
   12b94:	ab03      	add	r3, sp, #12
   12b96:	f853 2b04 	ldr.w	r2, [r3], #4
   12b9a:	4601      	mov	r1, r0
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
   12b9c:	4804      	ldr	r0, [pc, #16]	; (12bb0 <print_formatted+0x20>)
	va_start(args, fmt);
   12b9e:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
   12ba0:	f7ff fb08 	bl	121b4 <z_vprintk>
#endif
	va_end(args);

	return length;
}
   12ba4:	2000      	movs	r0, #0
   12ba6:	b002      	add	sp, #8
   12ba8:	f85d eb04 	ldr.w	lr, [sp], #4
   12bac:	b003      	add	sp, #12
   12bae:	4770      	bx	lr
   12bb0:	00026c79 	.word	0x00026c79

00012bb4 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
   12bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
   12bb8:	f011 0402 	ands.w	r4, r1, #2
{
   12bbc:	b085      	sub	sp, #20
   12bbe:	4606      	mov	r6, r0
   12bc0:	4690      	mov	r8, r2
   12bc2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   12bc6:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   12bca:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
   12bce:	d007      	beq.n	12be0 <prefix_print+0x2c>
	if (!format) {
   12bd0:	f011 0f44 	tst.w	r1, #68	; 0x44
   12bd4:	d137      	bne.n	12c46 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
   12bd6:	461a      	mov	r2, r3
   12bd8:	4932      	ldr	r1, [pc, #200]	; (12ca4 <prefix_print+0xf0>)
   12bda:	f7ff ffd9 	bl	12b90 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
   12bde:	4604      	mov	r4, r0
	if (color) {
   12be0:	f1b9 0f00 	cmp.w	r9, #0
   12be4:	d00a      	beq.n	12bfc <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
   12be6:	4b30      	ldr	r3, [pc, #192]	; (12ca8 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
   12be8:	4630      	mov	r0, r6
		const char *color = start && (colors[level] != NULL) ?
   12bea:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
   12bee:	4b2f      	ldr	r3, [pc, #188]	; (12cac <prefix_print+0xf8>)
   12bf0:	492f      	ldr	r1, [pc, #188]	; (12cb0 <prefix_print+0xfc>)
   12bf2:	2a00      	cmp	r2, #0
   12bf4:	bf08      	it	eq
   12bf6:	461a      	moveq	r2, r3
   12bf8:	f7ff ffca 	bl	12b90 <print_formatted>
	if (level_on) {
   12bfc:	b13d      	cbz	r5, 12c0e <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
   12bfe:	4b2d      	ldr	r3, [pc, #180]	; (12cb4 <prefix_print+0x100>)
   12c00:	4630      	mov	r0, r6
   12c02:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
   12c06:	492c      	ldr	r1, [pc, #176]	; (12cb8 <prefix_print+0x104>)
   12c08:	f7ff ffc2 	bl	12b90 <print_formatted>
   12c0c:	4605      	mov	r5, r0
	total += print_formatted(log_output,
   12c0e:	f1b8 0f00 	cmp.w	r8, #0
   12c12:	d044      	beq.n	12c9e <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   12c14:	2301      	movs	r3, #1
   12c16:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
   12c1a:	4b28      	ldr	r3, [pc, #160]	; (12cbc <prefix_print+0x108>)
   12c1c:	f017 0f10 	tst.w	r7, #16
   12c20:	4f27      	ldr	r7, [pc, #156]	; (12cc0 <prefix_print+0x10c>)
   12c22:	bf18      	it	ne
   12c24:	461f      	movne	r7, r3
   12c26:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
   12c2a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   12c2e:	f7ff fd2d 	bl	1268c <log_source_name_get>
   12c32:	4639      	mov	r1, r7
   12c34:	4602      	mov	r2, r0
   12c36:	4630      	mov	r0, r6
   12c38:	f7ff ffaa 	bl	12b90 <print_formatted>
   12c3c:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
   12c3e:	4420      	add	r0, r4
   12c40:	b005      	add	sp, #20
   12c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
   12c46:	4a1f      	ldr	r2, [pc, #124]	; (12cc4 <prefix_print+0x110>)
   12c48:	6811      	ldr	r1, [r2, #0]
   12c4a:	b331      	cbz	r1, 12c9a <prefix_print+0xe6>
		timestamp /= timestamp_div;
   12c4c:	4a1e      	ldr	r2, [pc, #120]	; (12cc8 <prefix_print+0x114>)
   12c4e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
   12c52:	6814      	ldr	r4, [r2, #0]
		ms = (remainder * 1000U) / freq;
   12c54:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		timestamp /= timestamp_div;
   12c58:	fbb3 f3f4 	udiv	r3, r3, r4
		seconds = timestamp / freq;
   12c5c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
   12c60:	fbb4 f2fe 	udiv	r2, r4, lr
   12c64:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
   12c68:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
   12c6c:	fb0c f404 	mul.w	r4, ip, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12c70:	fbb4 fbf1 	udiv	fp, r4, r1
		mins = seconds / 60U;
   12c74:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12c78:	fb01 441b 	mls	r4, r1, fp, r4
   12c7c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
   12c80:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12c84:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
   12c88:	e9cd b101 	strd	fp, r1, [sp, #4]
   12c8c:	fb0a e113 	mls	r1, sl, r3, lr
   12c90:	9100      	str	r1, [sp, #0]
   12c92:	490e      	ldr	r1, [pc, #56]	; (12ccc <prefix_print+0x118>)
   12c94:	f7ff ff7c 	bl	12b90 <print_formatted>
   12c98:	e7a1      	b.n	12bde <prefix_print+0x2a>
		length = 0;
   12c9a:	4608      	mov	r0, r1
   12c9c:	e79f      	b.n	12bde <prefix_print+0x2a>
	total += print_formatted(log_output,
   12c9e:	4f08      	ldr	r7, [pc, #32]	; (12cc0 <prefix_print+0x10c>)
   12ca0:	e7c1      	b.n	12c26 <prefix_print+0x72>
   12ca2:	bf00      	nop
   12ca4:	00033922 	.word	0x00033922
   12ca8:	00032e6c 	.word	0x00032e6c
   12cac:	00033918 	.word	0x00033918
   12cb0:	00033e84 	.word	0x00033e84
   12cb4:	00032e80 	.word	0x00032e80
   12cb8:	00033947 	.word	0x00033947
   12cbc:	00034ac2 	.word	0x00034ac2
   12cc0:	0003391d 	.word	0x0003391d
   12cc4:	200215b4 	.word	0x200215b4
   12cc8:	200215b8 	.word	0x200215b8
   12ccc:	0003392b 	.word	0x0003392b

00012cd0 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
   12cd0:	b538      	push	{r3, r4, r5, lr}
   12cd2:	460c      	mov	r4, r1
	if (color) {
   12cd4:	07e1      	lsls	r1, r4, #31
{
   12cd6:	4605      	mov	r5, r0
	if (color) {
   12cd8:	d503      	bpl.n	12ce2 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
   12cda:	4a08      	ldr	r2, [pc, #32]	; (12cfc <postfix_print+0x2c>)
   12cdc:	4908      	ldr	r1, [pc, #32]	; (12d00 <postfix_print+0x30>)
   12cde:	f7ff ff57 	bl	12b90 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12ce2:	06e2      	lsls	r2, r4, #27
   12ce4:	d408      	bmi.n	12cf8 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12ce6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   12ce8:	4628      	mov	r0, r5
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
   12cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\n");
   12cee:	bf4c      	ite	mi
   12cf0:	4904      	ldrmi	r1, [pc, #16]	; (12d04 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   12cf2:	4905      	ldrpl	r1, [pc, #20]	; (12d08 <postfix_print+0x38>)
   12cf4:	f7ff bf4c 	b.w	12b90 <print_formatted>
}
   12cf8:	bd38      	pop	{r3, r4, r5, pc}
   12cfa:	bf00      	nop
   12cfc:	00033918 	.word	0x00033918
   12d00:	00033e84 	.word	0x00033e84
   12d04:	00033f9c 	.word	0x00033f9c
   12d08:	00033f9b 	.word	0x00033f9b

00012d0c <hexdump_line_print>:
{
   12d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12d10:	461d      	mov	r5, r3
   12d12:	9b08      	ldr	r3, [sp, #32]
   12d14:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12d16:	06da      	lsls	r2, r3, #27
{
   12d18:	4604      	mov	r4, r0
   12d1a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12d1c:	d405      	bmi.n	12d2a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   12d1e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   12d20:	bf4c      	ite	mi
   12d22:	492b      	ldrmi	r1, [pc, #172]	; (12dd0 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   12d24:	492b      	ldrpl	r1, [pc, #172]	; (12dd4 <hexdump_line_print+0xc8>)
   12d26:	f7ff ff33 	bl	12b90 <print_formatted>
{
   12d2a:	f04f 0800 	mov.w	r8, #0
		print_formatted(log_output, " ");
   12d2e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 12ddc <hexdump_line_print+0xd0>
	for (int i = 0; i < prefix_offset; i++) {
   12d32:	45a8      	cmp	r8, r5
   12d34:	db2d      	blt.n	12d92 <hexdump_line_print+0x86>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12d36:	2500      	movs	r5, #0
			print_formatted(log_output, "   ");
   12d38:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 12de0 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
   12d3c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 12de4 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
   12d40:	f8df a098 	ldr.w	sl, [pc, #152]	; 12ddc <hexdump_line_print+0xd0>
		if (i < length) {
   12d44:	42bd      	cmp	r5, r7
   12d46:	d232      	bcs.n	12dae <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
   12d48:	4649      	mov	r1, r9
   12d4a:	4620      	mov	r0, r4
   12d4c:	5d72      	ldrb	r2, [r6, r5]
   12d4e:	f7ff ff1f 	bl	12b90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12d52:	3501      	adds	r5, #1
   12d54:	2d10      	cmp	r5, #16
   12d56:	d123      	bne.n	12da0 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
   12d58:	4620      	mov	r0, r4
   12d5a:	491f      	ldr	r1, [pc, #124]	; (12dd8 <hexdump_line_print+0xcc>)
   12d5c:	f7ff ff18 	bl	12b90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12d60:	2500      	movs	r5, #0
			print_formatted(log_output, " ");
   12d62:	f8df 8078 	ldr.w	r8, [pc, #120]	; 12ddc <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   12d66:	f8df 9080 	ldr.w	r9, [pc, #128]	; 12de8 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
   12d6a:	f8df a080 	ldr.w	sl, [pc, #128]	; 12dec <hexdump_line_print+0xe0>
		if (i < length) {
   12d6e:	42af      	cmp	r7, r5
   12d70:	d929      	bls.n	12dc6 <hexdump_line_print+0xba>
			char c = (char)data[i];
   12d72:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
   12d74:	4651      	mov	r1, sl
   12d76:	f812 3009 	ldrb.w	r3, [r2, r9]
   12d7a:	4620      	mov	r0, r4
   12d7c:	f013 0f97 	tst.w	r3, #151	; 0x97
   12d80:	bf08      	it	eq
   12d82:	222e      	moveq	r2, #46	; 0x2e
   12d84:	f7ff ff04 	bl	12b90 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12d88:	3501      	adds	r5, #1
   12d8a:	2d10      	cmp	r5, #16
   12d8c:	d114      	bne.n	12db8 <hexdump_line_print+0xac>
}
   12d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
   12d92:	4649      	mov	r1, r9
   12d94:	4620      	mov	r0, r4
   12d96:	f7ff fefb 	bl	12b90 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   12d9a:	f108 0801 	add.w	r8, r8, #1
   12d9e:	e7c8      	b.n	12d32 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   12da0:	076a      	lsls	r2, r5, #29
   12da2:	d1cf      	bne.n	12d44 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
   12da4:	4651      	mov	r1, sl
   12da6:	4620      	mov	r0, r4
   12da8:	f7ff fef2 	bl	12b90 <print_formatted>
   12dac:	e7ca      	b.n	12d44 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
   12dae:	4641      	mov	r1, r8
   12db0:	4620      	mov	r0, r4
   12db2:	f7ff feed 	bl	12b90 <print_formatted>
   12db6:	e7cc      	b.n	12d52 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   12db8:	076b      	lsls	r3, r5, #29
   12dba:	d1d8      	bne.n	12d6e <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   12dbc:	4641      	mov	r1, r8
   12dbe:	4620      	mov	r0, r4
   12dc0:	f7ff fee6 	bl	12b90 <print_formatted>
   12dc4:	e7d3      	b.n	12d6e <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
   12dc6:	4641      	mov	r1, r8
   12dc8:	4620      	mov	r0, r4
   12dca:	f7ff fee1 	bl	12b90 <print_formatted>
   12dce:	e7db      	b.n	12d88 <hexdump_line_print+0x7c>
   12dd0:	00033f9c 	.word	0x00033f9c
   12dd4:	00033f9b 	.word	0x00033f9b
   12dd8:	00037480 	.word	0x00037480
   12ddc:	000369ea 	.word	0x000369ea
   12de0:	00033953 	.word	0x00033953
   12de4:	0003394d 	.word	0x0003394d
   12de8:	000375e5 	.word	0x000375e5
   12dec:	00033957 	.word	0x00033957

00012df0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
   12df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   12df4:	7a8b      	ldrb	r3, [r1, #10]
   12df6:	4617      	mov	r7, r2
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   12df8:	f013 0807 	ands.w	r8, r3, #7
{
   12dfc:	4605      	mov	r5, r0
   12dfe:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12e00:	7a0a      	ldrb	r2, [r1, #8]
   12e02:	b08a      	sub	sp, #40	; 0x28
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   12e04:	d020      	beq.n	12e48 <log_output_msg_process+0x58>
   12e06:	43d2      	mvns	r2, r2
	return msg->hdr.ids.source_id;
   12e08:	8949      	ldrh	r1, [r1, #10]
   12e0a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   12e0e:	0989      	lsrs	r1, r1, #6
   12e10:	e9cd 8300 	strd	r8, r3, [sp]
   12e14:	9102      	str	r1, [sp, #8]
   12e16:	68f3      	ldr	r3, [r6, #12]
   12e18:	4639      	mov	r1, r7
   12e1a:	f002 0201 	and.w	r2, r2, #1
   12e1e:	f7ff fec9 	bl	12bb4 <prefix_print>
   12e22:	4681      	mov	r9, r0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12e24:	7a34      	ldrb	r4, [r6, #8]
   12e26:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   12e28:	f014 0401 	ands.w	r4, r4, #1
   12e2c:	d00e      	beq.n	12e4c <log_output_msg_process+0x5c>
		std_print(msg, log_output);
   12e2e:	4629      	mov	r1, r5
   12e30:	4630      	mov	r0, r6
   12e32:	f013 fdb7 	bl	269a4 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
   12e36:	f1b8 0f00 	cmp.w	r8, #0
   12e3a:	d02b      	beq.n	12e94 <log_output_msg_process+0xa4>
		postfix_print(log_output, flags, level);
   12e3c:	4642      	mov	r2, r8
   12e3e:	4639      	mov	r1, r7
   12e40:	4628      	mov	r0, r5
   12e42:	f7ff ff45 	bl	12cd0 <postfix_print>
   12e46:	e025      	b.n	12e94 <log_output_msg_process+0xa4>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
   12e48:	46c1      	mov	r9, r8
   12e4a:	e7eb      	b.n	12e24 <log_output_msg_process+0x34>
	} else if (raw_string) {
   12e4c:	f1b8 0f00 	cmp.w	r8, #0
   12e50:	d126      	bne.n	12ea0 <log_output_msg_process+0xb0>
	size_t offset = 0;
   12e52:	4627      	mov	r7, r4
		length = log_output->size;
   12e54:	68eb      	ldr	r3, [r5, #12]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   12e56:	aa06      	add	r2, sp, #24
		length = log_output->size;
   12e58:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
   12e5a:	4630      	mov	r0, r6
   12e5c:	463b      	mov	r3, r7
   12e5e:	68a9      	ldr	r1, [r5, #8]
   12e60:	f013 fd8c 	bl	2697c <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
   12e64:	9a06      	ldr	r2, [sp, #24]
   12e66:	686b      	ldr	r3, [r5, #4]
   12e68:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   12e6a:	b13a      	cbz	r2, 12e7c <log_output_msg_process+0x8c>
			eol = (log_output->buf[length - 1] == '\n');
   12e6c:	68ab      	ldr	r3, [r5, #8]
   12e6e:	4413      	add	r3, r2
   12e70:	f813 4c01 	ldrb.w	r4, [r3, #-1]
   12e74:	f1a4 030a 	sub.w	r3, r4, #10
   12e78:	425c      	negs	r4, r3
   12e7a:	415c      	adcs	r4, r3
		log_output_flush(log_output);
   12e7c:	4628      	mov	r0, r5
   12e7e:	f013 feee 	bl	26c5e <log_output_flush>
		offset += length;
   12e82:	9b06      	ldr	r3, [sp, #24]
   12e84:	441f      	add	r7, r3
	} while (length > 0);
   12e86:	2b00      	cmp	r3, #0
   12e88:	d1e4      	bne.n	12e54 <log_output_msg_process+0x64>
	if (eol) {
   12e8a:	b11c      	cbz	r4, 12e94 <log_output_msg_process+0xa4>
		print_formatted(log_output, "\r");
   12e8c:	4628      	mov	r0, r5
   12e8e:	4913      	ldr	r1, [pc, #76]	; (12edc <log_output_msg_process+0xec>)
   12e90:	f7ff fe7e 	bl	12b90 <print_formatted>
	}

	log_output_flush(log_output);
   12e94:	4628      	mov	r0, r5
   12e96:	f013 fee2 	bl	26c5e <log_output_flush>
}
   12e9a:	b00a      	add	sp, #40	; 0x28
   12e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
   12ea0:	4630      	mov	r0, r6
   12ea2:	f013 fd17 	bl	268d4 <log_msg_str_get>
   12ea6:	490e      	ldr	r1, [pc, #56]	; (12ee0 <log_output_msg_process+0xf0>)
   12ea8:	4602      	mov	r2, r0
   12eaa:	4628      	mov	r0, r5
   12eac:	f7ff fe70 	bl	12b90 <print_formatted>
		length = sizeof(buf);
   12eb0:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   12eb4:	aa05      	add	r2, sp, #20
   12eb6:	4623      	mov	r3, r4
   12eb8:	4630      	mov	r0, r6
   12eba:	a906      	add	r1, sp, #24
		length = sizeof(buf);
   12ebc:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   12ec0:	f013 fd5c 	bl	2697c <log_msg_hexdump_data_get>
		if (length) {
   12ec4:	9a05      	ldr	r2, [sp, #20]
   12ec6:	2a00      	cmp	r2, #0
   12ec8:	d0b8      	beq.n	12e3c <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
   12eca:	464b      	mov	r3, r9
   12ecc:	4628      	mov	r0, r5
   12ece:	9700      	str	r7, [sp, #0]
   12ed0:	a906      	add	r1, sp, #24
   12ed2:	f7ff ff1b 	bl	12d0c <hexdump_line_print>
			offset += length;
   12ed6:	9b05      	ldr	r3, [sp, #20]
   12ed8:	441c      	add	r4, r3
		length = sizeof(buf);
   12eda:	e7eb      	b.n	12eb4 <log_output_msg_process+0xc4>
   12edc:	0003395a 	.word	0x0003395a
   12ee0:	00033e84 	.word	0x00033e84

00012ee4 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
   12ee4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
   12ee6:	e9d0 4300 	ldrd	r4, r3, [r0]
   12eea:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12eec:	f242 730f 	movw	r3, #9999	; 0x270f
   12ef0:	428b      	cmp	r3, r1
   12ef2:	bf28      	it	cs
   12ef4:	460b      	movcs	r3, r1
   12ef6:	4668      	mov	r0, sp
   12ef8:	2105      	movs	r1, #5
   12efa:	4a0c      	ldr	r2, [pc, #48]	; (12f2c <log_output_dropped_process+0x48>)
   12efc:	f013 fae9 	bl	264d2 <snprintk>
   12f00:	4606      	mov	r6, r0

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
   12f02:	462b      	mov	r3, r5
   12f04:	4620      	mov	r0, r4
   12f06:	220b      	movs	r2, #11
   12f08:	4909      	ldr	r1, [pc, #36]	; (12f30 <log_output_dropped_process+0x4c>)
   12f0a:	f013 fd3e 	bl	2698a <buffer_write>
	buffer_write(outf, buf, len, dev);
   12f0e:	462b      	mov	r3, r5
   12f10:	4632      	mov	r2, r6
   12f12:	4669      	mov	r1, sp
   12f14:	4620      	mov	r0, r4
   12f16:	f013 fd38 	bl	2698a <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
   12f1a:	462b      	mov	r3, r5
   12f1c:	221b      	movs	r2, #27
   12f1e:	4620      	mov	r0, r4
   12f20:	4904      	ldr	r1, [pc, #16]	; (12f34 <log_output_dropped_process+0x50>)
   12f22:	f013 fd32 	bl	2698a <buffer_write>
}
   12f26:	b002      	add	sp, #8
   12f28:	bd70      	pop	{r4, r5, r6, pc}
   12f2a:	bf00      	nop
   12f2c:	00036b92 	.word	0x00036b92
   12f30:	00033998 	.word	0x00033998
   12f34:	0003397c 	.word	0x0003397c

00012f38 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
   12f38:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   12f3a:	2100      	movs	r1, #0
	timestamp_div = 1U;
   12f3c:	4a07      	ldr	r2, [pc, #28]	; (12f5c <log_output_timestamp_freq_set+0x24>)
{
   12f3e:	b510      	push	{r4, lr}
	while (frequency > 1000000) {
   12f40:	4c07      	ldr	r4, [pc, #28]	; (12f60 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   12f42:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   12f44:	42a0      	cmp	r0, r4
   12f46:	d804      	bhi.n	12f52 <log_output_timestamp_freq_set+0x1a>
   12f48:	b101      	cbz	r1, 12f4c <log_output_timestamp_freq_set+0x14>
   12f4a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   12f4c:	4b05      	ldr	r3, [pc, #20]	; (12f64 <log_output_timestamp_freq_set+0x2c>)
   12f4e:	6018      	str	r0, [r3, #0]
}
   12f50:	bd10      	pop	{r4, pc}
		timestamp_div *= 2U;
   12f52:	2101      	movs	r1, #1
		frequency /= 2U;
   12f54:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   12f56:	005b      	lsls	r3, r3, #1
   12f58:	e7f4      	b.n	12f44 <log_output_timestamp_freq_set+0xc>
   12f5a:	bf00      	nop
   12f5c:	200215b8 	.word	0x200215b8
   12f60:	000f4240 	.word	0x000f4240
   12f64:	200215b4 	.word	0x200215b4

00012f68 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   12f68:	2201      	movs	r2, #1
   12f6a:	4b01      	ldr	r3, [pc, #4]	; (12f70 <log_backend_rtt_init+0x8>)
   12f6c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   12f6e:	4770      	bx	lr
   12f70:	20026d12 	.word	0x20026d12

00012f74 <panic>:

static void panic(struct log_backend const *const backend)
{
   12f74:	b508      	push	{r3, lr}
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
   12f76:	4803      	ldr	r0, [pc, #12]	; (12f84 <panic+0x10>)
   12f78:	f013 fe71 	bl	26c5e <log_output_flush>
	log_backend_std_panic(&log_output);
	panic_mode = true;
   12f7c:	2201      	movs	r2, #1
   12f7e:	4b02      	ldr	r3, [pc, #8]	; (12f88 <panic+0x14>)
   12f80:	701a      	strb	r2, [r3, #0]
}
   12f82:	bd08      	pop	{r3, pc}
   12f84:	00032eac 	.word	0x00032eac
   12f88:	20026d13 	.word	0x20026d13

00012f8c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
   12f8c:	4801      	ldr	r0, [pc, #4]	; (12f94 <dropped+0x8>)
   12f8e:	f7ff bfa9 	b.w	12ee4 <log_output_dropped_process>
   12f92:	bf00      	nop
   12f94:	00032eac 	.word	0x00032eac

00012f98 <put>:
{
   12f98:	b510      	push	{r4, lr}
   12f9a:	460c      	mov	r4, r1
	log_msg_get(msg);
   12f9c:	4608      	mov	r0, r1
   12f9e:	f013 fc5f 	bl	26860 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
   12fa2:	4621      	mov	r1, r4
   12fa4:	4804      	ldr	r0, [pc, #16]	; (12fb8 <put+0x20>)
   12fa6:	220f      	movs	r2, #15
   12fa8:	f7ff ff22 	bl	12df0 <log_output_msg_process>
	log_msg_put(msg);
   12fac:	4620      	mov	r0, r4
}
   12fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12fb2:	f013 bc80 	b.w	268b6 <log_msg_put>
   12fb6:	bf00      	nop
   12fb8:	00032eac 	.word	0x00032eac

00012fbc <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   12fbc:	4b05      	ldr	r3, [pc, #20]	; (12fd4 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   12fbe:	781b      	ldrb	r3, [r3, #0]
   12fc0:	b11b      	cbz	r3, 12fca <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   12fc2:	f241 3088 	movw	r0, #5000	; 0x1388
   12fc6:	f014 b98f 	b.w	272e8 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   12fca:	20a4      	movs	r0, #164	; 0xa4
   12fcc:	2100      	movs	r1, #0
   12fce:	f002 bc83 	b.w	158d8 <z_impl_k_sleep>
   12fd2:	bf00      	nop
   12fd4:	20026d13 	.word	0x20026d13

00012fd8 <data_out_block_mode>:
{
   12fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   12fdc:	f8df 9090 	ldr.w	r9, [pc, #144]	; 13070 <data_out_block_mode+0x98>
{
   12fe0:	4607      	mov	r7, r0
   12fe2:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
   12fe4:	2404      	movs	r4, #4
   12fe6:	46ca      	mov	sl, r9
	return z_impl_k_mutex_lock(mutex, timeout);
   12fe8:	f8df b088 	ldr.w	fp, [pc, #136]	; 13074 <data_out_block_mode+0x9c>
		if (!is_sync_mode()) {
   12fec:	f899 3000 	ldrb.w	r3, [r9]
   12ff0:	b933      	cbnz	r3, 13000 <data_out_block_mode+0x28>
   12ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12ffa:	4658      	mov	r0, fp
   12ffc:	f002 f884 	bl	15108 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   13000:	4632      	mov	r2, r6
   13002:	4639      	mov	r1, r7
   13004:	2000      	movs	r0, #0
   13006:	f000 fa8d 	bl	13524 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
   1300a:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1300e:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
   13010:	b913      	cbnz	r3, 13018 <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
   13012:	4658      	mov	r0, fp
   13014:	f002 f8f0 	bl	151f8 <z_impl_k_mutex_unlock>
		if (ret) {
   13018:	4d14      	ldr	r5, [pc, #80]	; (1306c <data_out_block_mode+0x94>)
   1301a:	f1b8 0f00 	cmp.w	r8, #0
   1301e:	d018      	beq.n	13052 <data_out_block_mode+0x7a>
	host_present = true;
   13020:	2301      	movs	r3, #1
   13022:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   13024:	f89a 3000 	ldrb.w	r3, [sl]
   13028:	b933      	cbnz	r3, 13038 <data_out_block_mode+0x60>
}
   1302a:	4630      	mov	r0, r6
   1302c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
   13030:	b95c      	cbnz	r4, 1304a <data_out_block_mode+0x72>
		host_present = false;
   13032:	702c      	strb	r4, [r5, #0]
   13034:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   13038:	2000      	movs	r0, #0
   1303a:	f000 faf3 	bl	13624 <SEGGER_RTT_HasDataUp>
   1303e:	2800      	cmp	r0, #0
   13040:	d0f3      	beq.n	1302a <data_out_block_mode+0x52>
   13042:	782b      	ldrb	r3, [r5, #0]
   13044:	2b00      	cmp	r3, #0
   13046:	d1f3      	bne.n	13030 <data_out_block_mode+0x58>
   13048:	e7ef      	b.n	1302a <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
   1304a:	3c01      	subs	r4, #1
   1304c:	f7ff ffb6 	bl	12fbc <on_failed_write.part.0>
   13050:	e7f2      	b.n	13038 <data_out_block_mode+0x60>
		} else if (host_present) {
   13052:	782b      	ldrb	r3, [r5, #0]
   13054:	b113      	cbz	r3, 1305c <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
   13056:	3c01      	subs	r4, #1
   13058:	d104      	bne.n	13064 <data_out_block_mode+0x8c>
		host_present = false;
   1305a:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   1305c:	782b      	ldrb	r3, [r5, #0]
   1305e:	2b00      	cmp	r3, #0
   13060:	d1c4      	bne.n	12fec <data_out_block_mode+0x14>
   13062:	e7e2      	b.n	1302a <data_out_block_mode+0x52>
   13064:	f7ff ffaa 	bl	12fbc <on_failed_write.part.0>
   13068:	e7f8      	b.n	1305c <data_out_block_mode+0x84>
   1306a:	bf00      	nop
   1306c:	20026d12 	.word	0x20026d12
   13070:	20026d13 	.word	0x20026d13
   13074:	2002016c 	.word	0x2002016c

00013078 <__do_init_array_aux>:
 * @brief Execute initialization routines referenced in .init_array section
 *
 * @return N/A
 */
void __do_init_array_aux(void)
{
   13078:	b538      	push	{r3, r4, r5, lr}
	for (func_ptr *func = __init_array_start;
   1307a:	4c04      	ldr	r4, [pc, #16]	; (1308c <__do_init_array_aux+0x14>)
   1307c:	4d04      	ldr	r5, [pc, #16]	; (13090 <__do_init_array_aux+0x18>)
   1307e:	42ac      	cmp	r4, r5
   13080:	d300      	bcc.n	13084 <__do_init_array_aux+0xc>
		func < __init_array_end;
		func++) {
		(*func)();
	}
}
   13082:	bd38      	pop	{r3, r4, r5, pc}
		(*func)();
   13084:	f854 3b04 	ldr.w	r3, [r4], #4
   13088:	4798      	blx	r3
		func++) {
   1308a:	e7f8      	b.n	1307e <__do_init_array_aux+0x6>
   1308c:	0003182c 	.word	0x0003182c
   13090:	00031830 	.word	0x00031830

00013094 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
   13094:	b538      	push	{r3, r4, r5, lr}
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
   13096:	4c05      	ldr	r4, [pc, #20]	; (130ac <__do_global_ctors_aux+0x18>)
   13098:	6825      	ldr	r5, [r4, #0]

	while (nCtors >= 1U) {
   1309a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
   1309e:	b905      	cbnz	r5, 130a2 <__do_global_ctors_aux+0xe>
		__CTOR_LIST__[nCtors--]();
	}
}
   130a0:	bd38      	pop	{r3, r4, r5, pc}
		__CTOR_LIST__[nCtors--]();
   130a2:	f854 3904 	ldr.w	r3, [r4], #-4
   130a6:	3d01      	subs	r5, #1
   130a8:	4798      	blx	r3
   130aa:	e7f8      	b.n	1309e <__do_global_ctors_aux+0xa>
   130ac:	00031824 	.word	0x00031824

000130b0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(struct device *d)
{
   130b0:	b508      	push	{r3, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   130b2:	4804      	ldr	r0, [pc, #16]	; (130c4 <rtt_console_init+0x14>)
   130b4:	f7ff f878 	bl	121a8 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   130b8:	4802      	ldr	r0, [pc, #8]	; (130c4 <rtt_console_init+0x14>)
   130ba:	f001 f84f 	bl	1415c <__stdout_hook_install>

	return 0;
}
   130be:	2000      	movs	r0, #0
   130c0:	bd08      	pop	{r3, pc}
   130c2:	bf00      	nop
   130c4:	000130c9 	.word	0x000130c9

000130c8 <rtt_console_out>:
{
   130c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   130cc:	4604      	mov	r4, r0
	char c = (char)character;
   130ce:	2503      	movs	r5, #3
	return z_impl_k_mutex_lock(mutex, timeout);
   130d0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 13130 <rtt_console_out+0x68>
   130d4:	4e15      	ldr	r6, [pc, #84]	; (1312c <rtt_console_out+0x64>)
   130d6:	f88d 0007 	strb.w	r0, [sp, #7]
   130da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   130de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   130e2:	4640      	mov	r0, r8
   130e4:	f002 f810 	bl	15108 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   130e8:	2201      	movs	r2, #1
   130ea:	f10d 0107 	add.w	r1, sp, #7
   130ee:	2000      	movs	r0, #0
   130f0:	f000 fa64 	bl	135bc <SEGGER_RTT_WriteNoLock>
   130f4:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   130f6:	4640      	mov	r0, r8
   130f8:	f002 f87e 	bl	151f8 <z_impl_k_mutex_unlock>
		if (cnt) {
   130fc:	b12f      	cbz	r7, 1310a <rtt_console_out+0x42>
			host_present = true;
   130fe:	2301      	movs	r3, #1
   13100:	7033      	strb	r3, [r6, #0]
}
   13102:	4620      	mov	r0, r4
   13104:	b002      	add	sp, #8
   13106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   1310a:	7833      	ldrb	r3, [r6, #0]
   1310c:	2b00      	cmp	r3, #0
   1310e:	d0f8      	beq.n	13102 <rtt_console_out+0x3a>
			if (max_cnt) {
   13110:	3d01      	subs	r5, #1
   13112:	d008      	beq.n	13126 <rtt_console_out+0x5e>
	if (k_is_in_isr()) {
   13114:	f014 f8e2 	bl	272dc <k_is_in_isr>
   13118:	2800      	cmp	r0, #0
   1311a:	d1de      	bne.n	130da <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   1311c:	2100      	movs	r1, #0
   1311e:	2042      	movs	r0, #66	; 0x42
   13120:	f002 fbda 	bl	158d8 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline s32_t k_msleep(s32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
   13124:	e7d9      	b.n	130da <rtt_console_out+0x12>
				host_present = false;
   13126:	7035      	strb	r5, [r6, #0]
   13128:	e7eb      	b.n	13102 <rtt_console_out+0x3a>
   1312a:	bf00      	nop
   1312c:	20026d14 	.word	0x20026d14
   13130:	2002016c 	.word	0x2002016c

00013134 <clock_async_start>:
}

static int clock_async_start(struct device *dev,
			     clock_control_subsys_t subsys,
			     struct clock_control_async_data *data)
{
   13134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct nrf_clock_control_sub_data *clk_data;
	int key;
	u8_t ref;

	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
	config = get_sub_config(dev, type);
   13138:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
   1313a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
   1313e:	b2cf      	uxtb	r7, r1
			((data != NULL) && (data->cb != NULL)));

	/* if node is in the list it means that it is scheduled for
	 * the second time.
	 */
	if ((data != NULL)
   13140:	b14a      	cbz	r2, 13156 <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
   13142:	230c      	movs	r3, #12
   13144:	437b      	muls	r3, r7
   13146:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
   1314a:	429a      	cmp	r2, r3
   1314c:	d053      	beq.n	131f6 <clock_async_start+0xc2>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
   1314e:	b113      	cbz	r3, 13156 <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   13150:	681b      	ldr	r3, [r3, #0]
	} while (item);
   13152:	2b00      	cmp	r3, #0
   13154:	d1f9      	bne.n	1314a <clock_async_start+0x16>
	__asm__ volatile(
   13156:	f04f 0320 	mov.w	r3, #32
   1315a:	f3ef 8c11 	mrs	ip, BASEPRI
   1315e:	f383 8811 	msr	BASEPRI, r3
   13162:	f3bf 8f6f 	isb	sy
	    && is_in_list(&clk_data->list, &data->node)) {
		return -EBUSY;
	}

	key = irq_lock();
	ref = ++clk_data->ref;
   13166:	250c      	movs	r5, #12
   13168:	437d      	muls	r5, r7
   1316a:	eb0e 0305 	add.w	r3, lr, r5
   1316e:	7a1c      	ldrb	r4, [r3, #8]
   13170:	3401      	adds	r4, #1
   13172:	b2e4      	uxtb	r4, r4
   13174:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
   13176:	f38c 8811 	msr	BASEPRI, ip
   1317a:	f3bf 8f6f 	isb	sy
	__ASSERT_NO_MSG(clk_data->ref > 0);
	irq_unlock(key);

	if (data) {
   1317e:	b352      	cbz	r2, 131d6 <clock_async_start+0xa2>
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_clock_int_disable(NRF_CLOCK_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   13180:	f04f 0803 	mov.w	r8, #3
   13184:	f8df c078 	ldr.w	ip, [pc, #120]	; 13200 <clock_async_start+0xcc>
   13188:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		bool already_started;

		clock_irqs_disable();
		already_started = clk_data->started;
   1318c:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
   13190:	f1bc 0f00 	cmp.w	ip, #0
   13194:	d115      	bne.n	131c2 <clock_async_start+0x8e>
	__asm__ volatile(
   13196:	f04f 0820 	mov.w	r8, #32
   1319a:	f3ef 8911 	mrs	r9, BASEPRI
   1319e:	f388 8811 	msr	BASEPRI, r8
   131a2:	f3bf 8f6f 	isb	sy
	parent->next = child;
   131a6:	f8c2 c000 	str.w	ip, [r2]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
   131aa:	f8d3 8004 	ldr.w	r8, [r3, #4]
   131ae:	f1b8 0f00 	cmp.w	r8, #0
   131b2:	d11c      	bne.n	131ee <clock_async_start+0xba>
	list->tail = node;
   131b4:	605a      	str	r2, [r3, #4]
	list->head = node;
   131b6:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
   131ba:	f389 8811 	msr	BASEPRI, r9
   131be:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
   131c2:	2503      	movs	r5, #3
   131c4:	4b0e      	ldr	r3, [pc, #56]	; (13200 <clock_async_start+0xcc>)
   131c6:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
			list_append(&clk_data->list, &data->node);
		}
		clock_irqs_enable();

		if (already_started) {
   131ca:	f1bc 0f00 	cmp.w	ip, #0
   131ce:	d002      	beq.n	131d6 <clock_async_start+0xa2>
			data->cb(dev, subsys, data->user_data);
   131d0:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
   131d4:	4798      	blx	r3
		}
	}

	if (ref == 1) {
   131d6:	2c01      	cmp	r4, #1
   131d8:	d107      	bne.n	131ea <clock_async_start+0xb6>
		if (IS_ENABLED(CONFIG_NRF52_ANOMALY_132_WORKAROUND) &&
			(subsys == CLOCK_CONTROL_NRF_SUBSYS_LF)) {
			anomaly_132_workaround();
		}

		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
   131da:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_clock_task_trigger(NRF_CLOCK_Type * p_reg, nrf_clock_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   131de:	78b3      	ldrb	r3, [r6, #2]
   131e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   131e4:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
   131e8:	601c      	str	r4, [r3, #0]
	}

	return 0;
   131ea:	2000      	movs	r0, #0
   131ec:	e005      	b.n	131fa <clock_async_start+0xc6>
	parent->next = child;
   131ee:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
   131f2:	605a      	str	r2, [r3, #4]
}
   131f4:	e7e1      	b.n	131ba <clock_async_start+0x86>
		return -EBUSY;
   131f6:	f06f 000f 	mvn.w	r0, #15
}
   131fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   131fe:	bf00      	nop
   13200:	40005000 	.word	0x40005000

00013204 <clk_init>:
 * symbol.
 */
void nrf_power_clock_isr(void *arg);

static int clk_init(struct device *dev)
{
   13204:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   13206:	2200      	movs	r2, #0
{
   13208:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1320a:	2101      	movs	r1, #1
   1320c:	2005      	movs	r0, #5
   1320e:	f000 fa71 	bl	136f4 <z_arm_irq_priority_set>
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_IRQN(0));
   13212:	2005      	movs	r0, #5
   13214:	f000 fa5e 	bl	136d4 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
   13218:	2202      	movs	r2, #2
   1321a:	4b07      	ldr	r3, [pc, #28]	; (13238 <clk_init+0x34>)
	list->head = NULL;
   1321c:	2000      	movs	r0, #0
   1321e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
   13222:	2203      	movs	r2, #3
   13224:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		sys_slist_init(&(get_sub_data(dev, i)->list));
   13228:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
   1322a:	e9c3 0000 	strd	r0, r0, [r3]
   1322e:	68e3      	ldr	r3, [r4, #12]
   13230:	e9c3 0003 	strd	r0, r0, [r3, #12]
	}

	return 0;
}
   13234:	bd10      	pop	{r4, pc}
   13236:	bf00      	nop
   13238:	40005000 	.word	0x40005000

0001323c <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
   1323c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
   1323e:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   13240:	4f11      	ldr	r7, [pc, #68]	; (13288 <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
   13242:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   13244:	68fb      	ldr	r3, [r7, #12]
	sub_data->started = true;
   13246:	fb04 3400 	mla	r4, r4, r0, r3
   1324a:	2301      	movs	r3, #1
   1324c:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   1324e:	f04f 0320 	mov.w	r3, #32
   13252:	f3ef 8111 	mrs	r1, BASEPRI
   13256:	f383 8811 	msr	BASEPRI, r3
   1325a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1325e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   13260:	b12b      	cbz	r3, 1326e <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13262:	6866      	ldr	r6, [r4, #4]
   13264:	681a      	ldr	r2, [r3, #0]
   13266:	42b3      	cmp	r3, r6
	list->head = node;
   13268:	6022      	str	r2, [r4, #0]
	list->tail = node;
   1326a:	bf08      	it	eq
   1326c:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
   1326e:	f381 8811 	msr	BASEPRI, r1
   13272:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
   13276:	b903      	cbnz	r3, 1327a <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
   13278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
   1327a:	4629      	mov	r1, r5
   1327c:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
   13280:	4638      	mov	r0, r7
   13282:	47b0      	blx	r6
   13284:	e7e3      	b.n	1324e <clkstarted_handle.constprop.0+0x12>
   13286:	bf00      	nop
   13288:	200200c0 	.word	0x200200c0

0001328c <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
   1328c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1328e:	4b10      	ldr	r3, [pc, #64]	; (132d0 <nrf_power_clock_isr+0x44>)
   13290:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   13292:	b162      	cbz	r2, 132ae <nrf_power_clock_isr+0x22>
    return p_reg->INTENSET & mask;
   13294:	4a0f      	ldr	r2, [pc, #60]	; (132d4 <nrf_power_clock_isr+0x48>)
   13296:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   1329a:	07d1      	lsls	r1, r2, #31
   1329c:	d507      	bpl.n	132ae <nrf_power_clock_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1329e:	2200      	movs	r2, #0
   132a0:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   132a2:	4b0d      	ldr	r3, [pc, #52]	; (132d8 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
   132a4:	68db      	ldr	r3, [r3, #12]
   132a6:	7a58      	ldrb	r0, [r3, #9]
   132a8:	b908      	cbnz	r0, 132ae <nrf_power_clock_isr+0x22>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
   132aa:	f7ff ffc7 	bl	1323c <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   132ae:	4b0b      	ldr	r3, [pc, #44]	; (132dc <nrf_power_clock_isr+0x50>)
   132b0:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
   132b2:	b15a      	cbz	r2, 132cc <nrf_power_clock_isr+0x40>
    return p_reg->INTENSET & mask;
   132b4:	4a07      	ldr	r2, [pc, #28]	; (132d4 <nrf_power_clock_isr+0x48>)
   132b6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
   132ba:	0792      	lsls	r2, r2, #30
   132bc:	d506      	bpl.n	132cc <nrf_power_clock_isr+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   132be:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   132c0:	2001      	movs	r0, #1
   132c2:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
   132c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   132c8:	f7ff bfb8 	b.w	1323c <clkstarted_handle.constprop.0>
}
   132cc:	bd08      	pop	{r3, pc}
   132ce:	bf00      	nop
   132d0:	40005100 	.word	0x40005100
   132d4:	40005000 	.word	0x40005000
   132d8:	200200c0 	.word	0x200200c0
   132dc:	40005104 	.word	0x40005104

000132e0 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
   132e0:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
   132e2:	4b08      	ldr	r3, [pc, #32]	; (13304 <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   132e4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   132e8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   132ec:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
   132f0:	4290      	cmp	r0, r2
   132f2:	d100      	bne.n	132f6 <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
   132f4:	4770      	bx	lr
   132f6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
   132fa:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   132fc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   13300:	e7f2      	b.n	132e8 <handle_next_tick_case+0x8>
   13302:	bf00      	nop
   13304:	40015000 	.word	0x40015000

00013308 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13308:	2200      	movs	r2, #0
   1330a:	4b06      	ldr	r3, [pc, #24]	; (13324 <rtc1_nrf_isr+0x1c>)
   1330c:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
   1330e:	4a06      	ldr	r2, [pc, #24]	; (13328 <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
   13310:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
   13314:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   13316:	1ac0      	subs	r0, r0, r3
   13318:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   1331c:	4403      	add	r3, r0
   1331e:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
   13320:	f002 bcb2 	b.w	15c88 <z_clock_announce>
   13324:	40015140 	.word	0x40015140
   13328:	200215ec 	.word	0x200215ec

0001332c <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
   1332c:	b538      	push	{r3, r4, r5, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   1332e:	4814      	ldr	r0, [pc, #80]	; (13380 <z_clock_driver_init+0x54>)
   13330:	f001 fcf6 	bl	14d20 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
   13334:	b300      	cbz	r0, 13378 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
   13336:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
   13338:	2400      	movs	r4, #0
   1333a:	2101      	movs	r1, #1
   1333c:	681b      	ldr	r3, [r3, #0]
   1333e:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   13340:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   13344:	4d0f      	ldr	r5, [pc, #60]	; (13384 <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13346:	4b10      	ldr	r3, [pc, #64]	; (13388 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
   13348:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   1334c:	601c      	str	r4, [r3, #0]
   1334e:	4b0f      	ldr	r3, [pc, #60]	; (1338c <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
   13350:	2101      	movs	r1, #1
   13352:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
   13356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1335a:	4622      	mov	r2, r4
   1335c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
   13360:	2015      	movs	r0, #21
   13362:	f000 f9c7 	bl	136f4 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
   13366:	2015      	movs	r0, #21
   13368:	f000 f9b4 	bl	136d4 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1336c:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
   1336e:	4620      	mov	r0, r4
   13370:	4a07      	ldr	r2, [pc, #28]	; (13390 <z_clock_driver_init+0x64>)
   13372:	6013      	str	r3, [r2, #0]
   13374:	602b      	str	r3, [r5, #0]
}
   13376:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
   13378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1337c:	e7fb      	b.n	13376 <z_clock_driver_init+0x4a>
   1337e:	bf00      	nop
   13380:	000339ba 	.word	0x000339ba
   13384:	40015000 	.word	0x40015000
   13388:	40015140 	.word	0x40015140
   1338c:	e000e100 	.word	0xe000e100
   13390:	40015008 	.word	0x40015008

00013394 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
   13394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
   13396:	4b2c      	ldr	r3, [pc, #176]	; (13448 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   13398:	4c2c      	ldr	r4, [pc, #176]	; (1344c <z_clock_set_timeout+0xb8>)
   1339a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
   1339e:	4b2c      	ldr	r3, [pc, #176]	; (13450 <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   133a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   133a4:	bf08      	it	eq
   133a6:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
   133a8:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
   133aa:	1a52      	subs	r2, r2, r1
   133ac:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
   133b0:	0212      	lsls	r2, r2, #8
   133b2:	d436      	bmi.n	13422 <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
   133b4:	3801      	subs	r0, #1
   133b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   133ba:	42a0      	cmp	r0, r4
   133bc:	bfa8      	it	ge
   133be:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   133c0:	3301      	adds	r3, #1
   133c2:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
   133c4:	42a0      	cmp	r0, r4
   133c6:	bf94      	ite	ls
   133c8:	180c      	addls	r4, r1, r0
   133ca:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
   133cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   133d0:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
   133d2:	4b1d      	ldr	r3, [pc, #116]	; (13448 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   133d4:	4e1f      	ldr	r6, [pc, #124]	; (13454 <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
   133d6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
   133da:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
   133de:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   133e2:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
   133e6:	1a52      	subs	r2, r2, r1
   133e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
   133ec:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   133ee:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
   133f0:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   133f4:	461d      	mov	r5, r3
   133f6:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
   133fa:	d103      	bne.n	13404 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
   133fc:	200f      	movs	r0, #15
   133fe:	f013 ff73 	bl	272e8 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13402:	6037      	str	r7, [r6, #0]
   13404:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   13408:	4b13      	ldr	r3, [pc, #76]	; (13458 <z_clock_set_timeout+0xc4>)
   1340a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
   1340e:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13412:	1a23      	subs	r3, r4, r0
   13414:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
   13418:	2b01      	cmp	r3, #1
   1341a:	d104      	bne.n	13426 <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
   1341c:	f7ff ff60 	bl	132e0 <handle_next_tick_case>
   13420:	e00b      	b.n	1343a <z_clock_set_timeout+0xa6>
		ticks = 0;
   13422:	2000      	movs	r0, #0
   13424:	e7cc      	b.n	133c0 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
   13426:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   1342a:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
   1342e:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   13432:	1a24      	subs	r4, r4, r0
   13434:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
   13436:	0223      	lsls	r3, r4, #8
   13438:	d4f0      	bmi.n	1341c <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
   1343a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1343e:	4b02      	ldr	r3, [pc, #8]	; (13448 <z_clock_set_timeout+0xb4>)
   13440:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
   13444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13446:	bf00      	nop
   13448:	40015000 	.word	0x40015000
   1344c:	007fffff 	.word	0x007fffff
   13450:	200215ec 	.word	0x200215ec
   13454:	40015140 	.word	0x40015140
   13458:	e000e100 	.word	0xe000e100

0001345c <z_clock_elapsed>:
	__asm__ volatile(
   1345c:	f04f 0220 	mov.w	r2, #32
   13460:	f3ef 8311 	mrs	r3, BASEPRI
   13464:	f382 8811 	msr	BASEPRI, r2
   13468:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
   1346c:	4a06      	ldr	r2, [pc, #24]	; (13488 <z_clock_elapsed+0x2c>)
   1346e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
   13472:	4a06      	ldr	r2, [pc, #24]	; (1348c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
   13474:	6812      	ldr	r2, [r2, #0]
   13476:	1a80      	subs	r0, r0, r2
   13478:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
   1347c:	f383 8811 	msr	BASEPRI, r3
   13480:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   13484:	4770      	bx	lr
   13486:	bf00      	nop
   13488:	40015000 	.word	0x40015000
   1348c:	200215ec 	.word	0x200215ec

00013490 <z_timer_cycle_get_32>:
	__asm__ volatile(
   13490:	f04f 0320 	mov.w	r3, #32
   13494:	f3ef 8211 	mrs	r2, BASEPRI
   13498:	f383 8811 	msr	BASEPRI, r3
   1349c:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
   134a0:	4906      	ldr	r1, [pc, #24]	; (134bc <z_timer_cycle_get_32+0x2c>)
   134a2:	4b07      	ldr	r3, [pc, #28]	; (134c0 <z_timer_cycle_get_32+0x30>)
   134a4:	6808      	ldr	r0, [r1, #0]
   134a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   134aa:	f382 8811 	msr	BASEPRI, r2
   134ae:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   134b2:	1a1b      	subs	r3, r3, r0
   134b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   134b8:	4418      	add	r0, r3
   134ba:	4770      	bx	lr
   134bc:	200215ec 	.word	0x200215ec
   134c0:	40015000 	.word	0x40015000

000134c4 <_DoInit>:
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   134c4:	2303      	movs	r3, #3
static void _DoInit(void) {
   134c6:	b510      	push	{r4, lr}
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   134c8:	4c10      	ldr	r4, [pc, #64]	; (1350c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   134ca:	4a11      	ldr	r2, [pc, #68]	; (13510 <_DoInit+0x4c>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   134cc:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
   134d0:	4b10      	ldr	r3, [pc, #64]	; (13514 <_DoInit+0x50>)
  p->aUp[0].sName         = "Terminal";
   134d2:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   134d4:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   134d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
   134da:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   134dc:	4a0e      	ldr	r2, [pc, #56]	; (13518 <_DoInit+0x54>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
   134de:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
   134e0:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
   134e2:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   134e4:	2210      	movs	r2, #16
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
   134e6:	490d      	ldr	r1, [pc, #52]	; (1351c <_DoInit+0x58>)
   134e8:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
   134ea:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   134ec:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   134ee:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
   134f0:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   134f2:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   134f4:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
   134f6:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
   134f8:	f01d fdce 	bl	31098 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
   134fc:	4620      	mov	r0, r4
   134fe:	4908      	ldr	r1, [pc, #32]	; (13520 <_DoInit+0x5c>)
   13500:	f01d fdca 	bl	31098 <strcpy>
  p->acID[6] = ' ';
   13504:	2320      	movs	r3, #32
   13506:	71a3      	strb	r3, [r4, #6]
}
   13508:	bd10      	pop	{r4, pc}
   1350a:	bf00      	nop
   1350c:	200215f0 	.word	0x200215f0
   13510:	000339e4 	.word	0x000339e4
   13514:	20026d25 	.word	0x20026d25
   13518:	20026d15 	.word	0x20026d15
   1351c:	000339ed 	.word	0x000339ed
   13520:	000339f1 	.word	0x000339f1

00013524 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13524:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
   13528:	f04f 0b18 	mov.w	fp, #24
   1352c:	4f22      	ldr	r7, [pc, #136]	; (135b8 <SEGGER_RTT_WriteSkipNoLock+0x94>)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1352e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   13530:	fb0b 7200 	mla	r2, fp, r0, r7
   13534:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   13536:	6a55      	ldr	r5, [r2, #36]	; 0x24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   13538:	4606      	mov	r6, r0
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1353a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1353c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1353e:	d834      	bhi.n	135aa <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   13540:	f8d2 a020 	ldr.w	sl, [r2, #32]
   13544:	ebaa 0905 	sub.w	r9, sl, r5
   13548:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   1354c:	4294      	cmp	r4, r2
   1354e:	d811      	bhi.n	13574 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
   13550:	f04f 0918 	mov.w	r9, #24
   13554:	fb06 9309 	mla	r3, r6, r9, r9
   13558:	443b      	add	r3, r7
   1355a:	6858      	ldr	r0, [r3, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1355c:	4622      	mov	r2, r4
   1355e:	4641      	mov	r1, r8
   13560:	4428      	add	r0, r5
   13562:	f01d fc81 	bl	30e68 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
   13566:	fb09 7606 	mla	r6, r9, r6, r7
   1356a:	442c      	add	r4, r5
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
      return 1;
   1356c:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1356e:	6274      	str	r4, [r6, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   13570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   13574:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   13576:	429c      	cmp	r4, r3
   13578:	d81b      	bhi.n	135b2 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
   1357a:	fb00 bb0b 	mla	fp, r0, fp, fp
   1357e:	44bb      	add	fp, r7
   13580:	f8db 0004 	ldr.w	r0, [fp, #4]
   13584:	464a      	mov	r2, r9
   13586:	4428      	add	r0, r5
   13588:	442c      	add	r4, r5
   1358a:	f01d fc6d 	bl	30e68 <memcpy>
      if (NumBytes) {
   1358e:	ebb4 040a 	subs.w	r4, r4, sl
   13592:	d006      	beq.n	135a2 <SEGGER_RTT_WriteSkipNoLock+0x7e>
   13594:	4622      	mov	r2, r4
   13596:	f8db 0004 	ldr.w	r0, [fp, #4]
   1359a:	eb08 0109 	add.w	r1, r8, r9
   1359e:	f01d fc63 	bl	30e68 <memcpy>
      pRing->WrOff = NumBytes;
   135a2:	2018      	movs	r0, #24
   135a4:	fb00 7606 	mla	r6, r0, r6, r7
   135a8:	e7e0      	b.n	1356c <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   135aa:	3b01      	subs	r3, #1
   135ac:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   135ae:	42a3      	cmp	r3, r4
   135b0:	d2ce      	bcs.n	13550 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   135b2:	2000      	movs	r0, #0
   135b4:	e7dc      	b.n	13570 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   135b6:	bf00      	nop
   135b8:	200215f0 	.word	0x200215f0

000135bc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   135bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pData = (const char *)pBuffer;
  //
  // Get "to-host" ring buffer.
  //
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
   135be:	2318      	movs	r3, #24
   135c0:	4c17      	ldr	r4, [pc, #92]	; (13620 <SEGGER_RTT_WriteNoLock+0x64>)
   135c2:	fb00 3503 	mla	r5, r0, r3, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   135c6:	fb03 4000 	mla	r0, r3, r0, r4
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
   135ca:	4425      	add	r5, r4
  switch (pRing->Flags) {
   135cc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   135ce:	460f      	mov	r7, r1
  switch (pRing->Flags) {
   135d0:	2c01      	cmp	r4, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   135d2:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   135d4:	d00f      	beq.n	135f6 <SEGGER_RTT_WriteNoLock+0x3a>
   135d6:	2c02      	cmp	r4, #2
   135d8:	d01a      	beq.n	13610 <SEGGER_RTT_WriteNoLock+0x54>
   135da:	b9f4      	cbnz	r4, 1361a <SEGGER_RTT_WriteNoLock+0x5e>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   135dc:	4628      	mov	r0, r5
   135de:	f013 fba2 	bl	26d26 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   135e2:	4286      	cmp	r6, r0
   135e4:	d805      	bhi.n	135f2 <SEGGER_RTT_WriteNoLock+0x36>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   135e6:	4632      	mov	r2, r6
   135e8:	4639      	mov	r1, r7
   135ea:	4628      	mov	r0, r5
   135ec:	f013 fba9 	bl	26d42 <_WriteNoCheck>
   135f0:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   135f2:	4620      	mov	r0, r4
   135f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   135f6:	4628      	mov	r0, r5
   135f8:	f013 fb95 	bl	26d26 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   135fc:	4286      	cmp	r6, r0
   135fe:	4634      	mov	r4, r6
   13600:	bf28      	it	cs
   13602:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   13604:	4639      	mov	r1, r7
   13606:	4622      	mov	r2, r4
   13608:	4628      	mov	r0, r5
   1360a:	f013 fb9a 	bl	26d42 <_WriteNoCheck>
    break;
   1360e:	e7f0      	b.n	135f2 <SEGGER_RTT_WriteNoLock+0x36>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   13610:	4628      	mov	r0, r5
}
   13612:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   13616:	f013 bbb0 	b.w	26d7a <_WriteBlocking>
  switch (pRing->Flags) {
   1361a:	2400      	movs	r4, #0
  return Status;
   1361c:	e7e9      	b.n	135f2 <SEGGER_RTT_WriteNoLock+0x36>
   1361e:	bf00      	nop
   13620:	200215f0 	.word	0x200215f0

00013624 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
   13624:	2218      	movs	r2, #24
   13626:	4b03      	ldr	r3, [pc, #12]	; (13634 <SEGGER_RTT_HasDataUp+0x10>)
   13628:	fb02 3000 	mla	r0, r2, r0, r3
   1362c:	6a83      	ldr	r3, [r0, #40]	; 0x28
  return pRing->WrOff - v;
   1362e:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
   13630:	1ac0      	subs	r0, r0, r3
   13632:	4770      	bx	lr
   13634:	200215f0 	.word	0x200215f0

00013638 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
   13638:	4a09      	ldr	r2, [pc, #36]	; (13660 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   1363a:	490a      	ldr	r1, [pc, #40]	; (13664 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   1363c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   1363e:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
   13640:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
   13642:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13644:	4908      	ldr	r1, [pc, #32]	; (13668 <arch_swap+0x30>)
   13646:	684b      	ldr	r3, [r1, #4]
   13648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   1364c:	604b      	str	r3, [r1, #4]
   1364e:	2300      	movs	r3, #0
   13650:	f383 8811 	msr	BASEPRI, r3
   13654:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   13658:	6893      	ldr	r3, [r2, #8]
}
   1365a:	6f18      	ldr	r0, [r3, #112]	; 0x70
   1365c:	4770      	bx	lr
   1365e:	bf00      	nop
   13660:	200217c4 	.word	0x200217c4
   13664:	00032fa8 	.word	0x00032fa8
   13668:	e000ed00 	.word	0xe000ed00

0001366c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   1366c:	490f      	ldr	r1, [pc, #60]	; (136ac <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
   1366e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   13670:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   13674:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   13676:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   1367a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1367e:	2020      	movs	r0, #32
    msr BASEPRI, r0
   13680:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   13684:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   13688:	4f09      	ldr	r7, [pc, #36]	; (136b0 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   1368a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1368e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   13690:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   13692:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   13694:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
   13696:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   13698:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1369a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1369e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   136a2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   136a6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
   136aa:	4770      	bx	lr
    ldr r1, =_kernel
   136ac:	200217c4 	.word	0x200217c4
    ldr v4, =_SCS_ICSR
   136b0:	e000ed04 	.word	0xe000ed04

000136b4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   136b4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   136b8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   136ba:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   136be:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   136c2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   136c4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   136c8:	2902      	cmp	r1, #2
    beq _oops
   136ca:	d0ff      	beq.n	136cc <_oops>

000136cc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   136cc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   136ce:	f013 fb88 	bl	26de2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   136d2:	bd01      	pop	{r0, pc}

000136d4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   136d4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   136d6:	2b00      	cmp	r3, #0
   136d8:	db08      	blt.n	136ec <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   136da:	2201      	movs	r2, #1
   136dc:	f000 001f 	and.w	r0, r0, #31
   136e0:	fa02 f000 	lsl.w	r0, r2, r0
   136e4:	4a02      	ldr	r2, [pc, #8]	; (136f0 <arch_irq_enable+0x1c>)
   136e6:	095b      	lsrs	r3, r3, #5
   136e8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   136ec:	4770      	bx	lr
   136ee:	bf00      	nop
   136f0:	e000e100 	.word	0xe000e100

000136f4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   136f4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   136f6:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
   136f8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   136fc:	bfac      	ite	ge
   136fe:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13702:	4b06      	ldrlt	r3, [pc, #24]	; (1371c <z_arm_irq_priority_set+0x28>)
   13704:	ea4f 1141 	mov.w	r1, r1, lsl #5
   13708:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1370a:	bfab      	itete	ge
   1370c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13710:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13714:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13718:	5419      	strblt	r1, [r3, r0]
}
   1371a:	4770      	bx	lr
   1371c:	e000ed14 	.word	0xe000ed14

00013720 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
   13720:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
   13724:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
   13726:	3a20      	subs	r2, #32
   13728:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
   1372c:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
   1372e:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
   13730:	4907      	ldr	r1, [pc, #28]	; (13750 <arch_new_thread+0x30>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
   13732:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
   13734:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
   13736:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
   1373a:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   1373c:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
   1373e:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
   13740:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
   13742:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   13746:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
   13748:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
   1374a:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   1374c:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   1374e:	4770      	bx	lr
   13750:	00026515 	.word	0x00026515

00013754 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
   13754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13756:	461d      	mov	r5, r3
   13758:	4606      	mov	r6, r0
   1375a:	460c      	mov	r4, r1
   1375c:	4617      	mov	r7, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1375e:	2300      	movs	r3, #0
   13760:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   13764:	f000 fb4c 	bl	13e00 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
   13768:	4b08      	ldr	r3, [pc, #32]	; (1378c <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
   1376a:	19e2      	adds	r2, r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
   1376c:	f022 0407 	bic.w	r4, r2, #7
	_current = main_thread;
   13770:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   13772:	4628      	mov	r0, r5
   13774:	f384 8809 	msr	PSP, r4
   13778:	2100      	movs	r1, #0
   1377a:	b663      	cpsie	if
   1377c:	f381 8811 	msr	BASEPRI, r1
   13780:	f3bf 8f6f 	isb	sy
   13784:	2200      	movs	r2, #0
   13786:	2300      	movs	r3, #0
   13788:	f012 fec4 	bl	26514 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1378c:	200217c4 	.word	0x200217c4

00013790 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   13790:	4901      	ldr	r1, [pc, #4]	; (13798 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   13792:	2210      	movs	r2, #16
	str	r2, [r1]
   13794:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   13796:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   13798:	e000ed10 	.word	0xe000ed10

0001379c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   1379c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   1379e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   137a0:	f380 8811 	msr	BASEPRI, r0
	isb
   137a4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   137a8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   137ac:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   137ae:	b662      	cpsie	i
	isb
   137b0:	f3bf 8f6f 	isb	sy

	bx	lr
   137b4:	4770      	bx	lr
   137b6:	bf00      	nop

000137b8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   137b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   137ba:	4606      	mov	r6, r0

	if (esf != NULL) {
   137bc:	460c      	mov	r4, r1
   137be:	b301      	cbz	r1, 13802 <z_arm_fatal_error+0x4a>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
   137c0:	4b13      	ldr	r3, [pc, #76]	; (13810 <z_arm_fatal_error+0x58>)
   137c2:	4d14      	ldr	r5, [pc, #80]	; (13814 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   137c4:	4814      	ldr	r0, [pc, #80]	; (13818 <z_arm_fatal_error+0x60>)
   137c6:	1aed      	subs	r5, r5, r3
   137c8:	08ed      	lsrs	r5, r5, #3
   137ca:	01ad      	lsls	r5, r5, #6
   137cc:	f045 0501 	orr.w	r5, r5, #1
   137d0:	f8ad 5000 	strh.w	r5, [sp]
   137d4:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   137d8:	6809      	ldr	r1, [r1, #0]
   137da:	f012 ffb4 	bl	26746 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   137de:	f8ad 5000 	strh.w	r5, [sp]
   137e2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   137e6:	68e1      	ldr	r1, [r4, #12]
   137e8:	480c      	ldr	r0, [pc, #48]	; (1381c <z_arm_fatal_error+0x64>)
   137ea:	f012 ffac 	bl	26746 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   137ee:	462a      	mov	r2, r5
   137f0:	69e1      	ldr	r1, [r4, #28]
   137f2:	480b      	ldr	r0, [pc, #44]	; (13820 <z_arm_fatal_error+0x68>)
   137f4:	f012 ff77 	bl	266e6 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   137f8:	462a      	mov	r2, r5
   137fa:	69a1      	ldr	r1, [r4, #24]
   137fc:	4809      	ldr	r0, [pc, #36]	; (13824 <z_arm_fatal_error+0x6c>)
   137fe:	f012 ff72 	bl	266e6 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   13802:	4621      	mov	r1, r4
   13804:	4630      	mov	r0, r6
}
   13806:	b002      	add	sp, #8
   13808:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   1380c:	f001 bab2 	b.w	14d74 <z_fatal_error>
   13810:	00031830 	.word	0x00031830
   13814:	00031850 	.word	0x00031850
   13818:	000339f8 	.word	0x000339f8
   1381c:	00033a27 	.word	0x00033a27
   13820:	00033a56 	.word	0x00033a56
   13824:	00033a65 	.word	0x00033a65

00013828 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   13828:	bf30      	wfi
    b z_SysNmiOnReset
   1382a:	f7ff bffd 	b.w	13828 <z_SysNmiOnReset>
   1382e:	bf00      	nop

00013830 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13830:	4a17      	ldr	r2, [pc, #92]	; (13890 <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   13832:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   13834:	4b17      	ldr	r3, [pc, #92]	; (13894 <z_arm_prep_c+0x64>)
   13836:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1383a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   1383c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13840:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   13844:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13848:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1384c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
   13850:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   13854:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
   13858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
   1385c:	4a0e      	ldr	r2, [pc, #56]	; (13898 <z_arm_prep_c+0x68>)
   1385e:	6853      	ldr	r3, [r2, #4]
   13860:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
   13864:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   13866:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1386a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
   1386e:	2300      	movs	r3, #0
   13870:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   13874:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   13878:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   1387c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   13880:	f001 faf6 	bl	14e70 <z_bss_zero>
	z_data_copy();
   13884:	f001 fafe 	bl	14e84 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   13888:	f000 fa88 	bl	13d9c <z_arm_interrupt_init>
	z_cstart();
   1388c:	f001 fb3c 	bl	14f08 <z_cstart>
   13890:	0000c000 	.word	0x0000c000
   13894:	e000ed00 	.word	0xe000ed00
   13898:	e000ef30 	.word	0xe000ef30

0001389c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   1389c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   1389e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   138a0:	4a0b      	ldr	r2, [pc, #44]	; (138d0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   138a2:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   138a4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   138a6:	bf1e      	ittt	ne
	movne	r1, #0
   138a8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   138aa:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
   138ac:	f013 fc02 	blne	270b4 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   138b0:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   138b2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   138b6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   138ba:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   138be:	4905      	ldr	r1, [pc, #20]	; (138d4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   138c0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   138c2:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
   138c4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   138c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   138ca:	4903      	ldr	r1, [pc, #12]	; (138d8 <_isr_wrapper+0x3c>)
	bx r1
   138cc:	4708      	bx	r1
   138ce:	0000      	.short	0x0000
	ldr r2, =_kernel
   138d0:	200217c4 	.word	0x200217c4
	ldr r1, =_sw_isr_table
   138d4:	0003161c 	.word	0x0003161c
	ldr r1, =z_arm_int_exit
   138d8:	00013d5d 	.word	0x00013d5d

000138dc <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   138dc:	f012 fecf 	bl	2667e <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   138e0:	2020      	movs	r0, #32
    msr BASEPRI, r0
   138e2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   138e6:	4808      	ldr	r0, [pc, #32]	; (13908 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   138e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   138ec:	1840      	adds	r0, r0, r1
    msr PSP, r0
   138ee:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   138f2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   138f6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   138f8:	4308      	orrs	r0, r1
    msr CONTROL, r0
   138fa:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   138fe:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   13902:	f7ff ff95 	bl	13830 <z_arm_prep_c>
   13906:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   13908:	20029578 	.word	0x20029578

0001390c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   1390c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   13910:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
   13914:	4672      	mov	r2, lr

	push {r0, lr}
   13916:	b501      	push	{r0, lr}

	bl z_arm_fault
   13918:	f000 f93c 	bl	13b94 <z_arm_fault>

	pop {r0, pc}
   1391c:	bd01      	pop	{r0, pc}
   1391e:	bf00      	nop

00013920 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
   13920:	b570      	push	{r4, r5, r6, lr}
   13922:	4b27      	ldr	r3, [pc, #156]	; (139c0 <usage_fault.isra.0+0xa0>)
   13924:	4c27      	ldr	r4, [pc, #156]	; (139c4 <usage_fault.isra.0+0xa4>)
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   13926:	4d28      	ldr	r5, [pc, #160]	; (139c8 <usage_fault.isra.0+0xa8>)
   13928:	1ae4      	subs	r4, r4, r3
   1392a:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** USAGE FAULT *****");
   1392c:	01a4      	lsls	r4, r4, #6
   1392e:	f044 0601 	orr.w	r6, r4, #1
   13932:	4631      	mov	r1, r6
   13934:	4825      	ldr	r0, [pc, #148]	; (139cc <usage_fault.isra.0+0xac>)
   13936:	f012 fec7 	bl	266c8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1393a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1393c:	0192      	lsls	r2, r2, #6
   1393e:	d503      	bpl.n	13948 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   13940:	4631      	mov	r1, r6
   13942:	4823      	ldr	r0, [pc, #140]	; (139d0 <usage_fault.isra.0+0xb0>)
   13944:	f012 fec0 	bl	266c8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   13948:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1394a:	01db      	lsls	r3, r3, #7
   1394c:	d504      	bpl.n	13958 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   1394e:	4821      	ldr	r0, [pc, #132]	; (139d4 <usage_fault.isra.0+0xb4>)
   13950:	f044 0101 	orr.w	r1, r4, #1
   13954:	f012 feb8 	bl	266c8 <log_0>
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
   13958:	4d1b      	ldr	r5, [pc, #108]	; (139c8 <usage_fault.isra.0+0xa8>)
   1395a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1395c:	02d6      	lsls	r6, r2, #11
   1395e:	d504      	bpl.n	1396a <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
   13960:	481d      	ldr	r0, [pc, #116]	; (139d8 <usage_fault.isra.0+0xb8>)
   13962:	f044 0101 	orr.w	r1, r4, #1
   13966:	f012 feaf 	bl	266c8 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1396a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1396c:	0318      	lsls	r0, r3, #12
   1396e:	d504      	bpl.n	1397a <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  No coprocessor instructions");
   13970:	481a      	ldr	r0, [pc, #104]	; (139dc <usage_fault.isra.0+0xbc>)
   13972:	f044 0101 	orr.w	r1, r4, #1
   13976:	f012 fea7 	bl	266c8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1397a:	4d13      	ldr	r5, [pc, #76]	; (139c8 <usage_fault.isra.0+0xa8>)
   1397c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1397e:	0351      	lsls	r1, r2, #13
   13980:	d504      	bpl.n	1398c <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   13982:	4817      	ldr	r0, [pc, #92]	; (139e0 <usage_fault.isra.0+0xc0>)
   13984:	f044 0101 	orr.w	r1, r4, #1
   13988:	f012 fe9e 	bl	266c8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1398c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1398e:	039a      	lsls	r2, r3, #14
   13990:	d504      	bpl.n	1399c <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13992:	4814      	ldr	r0, [pc, #80]	; (139e4 <usage_fault.isra.0+0xc4>)
   13994:	f044 0101 	orr.w	r1, r4, #1
   13998:	f012 fe96 	bl	266c8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1399c:	4d0a      	ldr	r5, [pc, #40]	; (139c8 <usage_fault.isra.0+0xa8>)
   1399e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   139a0:	03db      	lsls	r3, r3, #15
   139a2:	d504      	bpl.n	139ae <usage_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   139a4:	4810      	ldr	r0, [pc, #64]	; (139e8 <usage_fault.isra.0+0xc8>)
   139a6:	f044 0101 	orr.w	r1, r4, #1
   139aa:	f012 fe8d 	bl	266c8 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   139ae:	6aab      	ldr	r3, [r5, #40]	; 0x28

	return reason;
}
   139b0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   139b2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   139b6:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   139ba:	62ab      	str	r3, [r5, #40]	; 0x28
}
   139bc:	bd70      	pop	{r4, r5, r6, pc}
   139be:	bf00      	nop
   139c0:	00031830 	.word	0x00031830
   139c4:	00031850 	.word	0x00031850
   139c8:	e000ed00 	.word	0xe000ed00
   139cc:	00033a93 	.word	0x00033a93
   139d0:	00033aab 	.word	0x00033aab
   139d4:	00033abe 	.word	0x00033abe
   139d8:	00033ad8 	.word	0x00033ad8
   139dc:	00033b02 	.word	0x00033b02
   139e0:	00033b20 	.word	0x00033b20
   139e4:	00033b45 	.word	0x00033b45
   139e8:	00033b5f 	.word	0x00033b5f

000139ec <mem_manage_fault.isra.0>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   139ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   139f0:	4b27      	ldr	r3, [pc, #156]	; (13a90 <mem_manage_fault.isra.0+0xa4>)
   139f2:	4c28      	ldr	r4, [pc, #160]	; (13a94 <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   139f4:	4d28      	ldr	r5, [pc, #160]	; (13a98 <mem_manage_fault.isra.0+0xac>)
   139f6:	1ae4      	subs	r4, r4, r3
   139f8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   139fa:	01a4      	lsls	r4, r4, #6
   139fc:	f044 0801 	orr.w	r8, r4, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
   13a00:	4607      	mov	r7, r0
   13a02:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   13a04:	4825      	ldr	r0, [pc, #148]	; (13a9c <mem_manage_fault.isra.0+0xb0>)
   13a06:	4641      	mov	r1, r8
   13a08:	f012 fe5e 	bl	266c8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   13a0c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13a0e:	06d1      	lsls	r1, r2, #27
   13a10:	d503      	bpl.n	13a1a <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   13a12:	4641      	mov	r1, r8
   13a14:	4822      	ldr	r0, [pc, #136]	; (13aa0 <mem_manage_fault.isra.0+0xb4>)
   13a16:	f012 fe57 	bl	266c8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   13a1a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a1c:	071a      	lsls	r2, r3, #28
   13a1e:	d504      	bpl.n	13a2a <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   13a20:	4820      	ldr	r0, [pc, #128]	; (13aa4 <mem_manage_fault.isra.0+0xb8>)
   13a22:	f044 0101 	orr.w	r1, r4, #1
   13a26:	f012 fe4f 	bl	266c8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   13a2a:	4d1b      	ldr	r5, [pc, #108]	; (13a98 <mem_manage_fault.isra.0+0xac>)
   13a2c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a2e:	079b      	lsls	r3, r3, #30
   13a30:	d512      	bpl.n	13a58 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
   13a32:	f044 0801 	orr.w	r8, r4, #1
   13a36:	4641      	mov	r1, r8
   13a38:	481b      	ldr	r0, [pc, #108]	; (13aa8 <mem_manage_fault.isra.0+0xbc>)
   13a3a:	f012 fe45 	bl	266c8 <log_0>
		mmfar = SCB->MMFAR;
   13a3e:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   13a40:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a42:	0618      	lsls	r0, r3, #24
   13a44:	d508      	bpl.n	13a58 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   13a46:	4642      	mov	r2, r8
   13a48:	4818      	ldr	r0, [pc, #96]	; (13aac <mem_manage_fault.isra.0+0xc0>)
   13a4a:	f012 fe4c 	bl	266e6 <log_1>
			if (from_hard_fault) {
   13a4e:	b11f      	cbz	r7, 13a58 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13a50:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13a56:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   13a58:	4d0f      	ldr	r5, [pc, #60]	; (13a98 <mem_manage_fault.isra.0+0xac>)
   13a5a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13a5c:	07d2      	lsls	r2, r2, #31
   13a5e:	d504      	bpl.n	13a6a <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
   13a60:	4813      	ldr	r0, [pc, #76]	; (13ab0 <mem_manage_fault.isra.0+0xc4>)
   13a62:	f044 0101 	orr.w	r1, r4, #1
   13a66:	f012 fe2f 	bl	266c8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   13a6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13a6c:	069b      	lsls	r3, r3, #26
   13a6e:	d504      	bpl.n	13a7a <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
   13a70:	4810      	ldr	r0, [pc, #64]	; (13ab4 <mem_manage_fault.isra.0+0xc8>)
   13a72:	f044 0101 	orr.w	r1, r4, #1
   13a76:	f012 fe27 	bl	266c8 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   13a7a:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
   13a7c:	4b06      	ldr	r3, [pc, #24]	; (13a98 <mem_manage_fault.isra.0+0xac>)
   13a7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   13a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13a82:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
   13a86:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   13a88:	7030      	strb	r0, [r6, #0]
}
   13a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13a8e:	bf00      	nop
   13a90:	00031830 	.word	0x00031830
   13a94:	00031850 	.word	0x00031850
   13a98:	e000ed00 	.word	0xe000ed00
   13a9c:	00033b8a 	.word	0x00033b8a
   13aa0:	00033ba0 	.word	0x00033ba0
   13aa4:	00033bd3 	.word	0x00033bd3
   13aa8:	00033be6 	.word	0x00033be6
   13aac:	00033bfe 	.word	0x00033bfe
   13ab0:	00033c14 	.word	0x00033c14
   13ab4:	00033c33 	.word	0x00033c33

00013ab8 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13abc:	4b2a      	ldr	r3, [pc, #168]	; (13b68 <bus_fault.isra.0+0xb0>)
   13abe:	4c2b      	ldr	r4, [pc, #172]	; (13b6c <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13ac0:	4d2b      	ldr	r5, [pc, #172]	; (13b70 <bus_fault.isra.0+0xb8>)
   13ac2:	1ae4      	subs	r4, r4, r3
   13ac4:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   13ac6:	01a4      	lsls	r4, r4, #6
   13ac8:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13acc:	4607      	mov	r7, r0
   13ace:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   13ad0:	4828      	ldr	r0, [pc, #160]	; (13b74 <bus_fault.isra.0+0xbc>)
   13ad2:	4641      	mov	r1, r8
   13ad4:	f012 fdf8 	bl	266c8 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13ad8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   13ada:	04d1      	lsls	r1, r2, #19
   13adc:	d503      	bpl.n	13ae6 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   13ade:	4641      	mov	r1, r8
   13ae0:	4825      	ldr	r0, [pc, #148]	; (13b78 <bus_fault.isra.0+0xc0>)
   13ae2:	f012 fdf1 	bl	266c8 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13ae6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13ae8:	051a      	lsls	r2, r3, #20
   13aea:	d504      	bpl.n	13af6 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   13aec:	4823      	ldr	r0, [pc, #140]	; (13b7c <bus_fault.isra.0+0xc4>)
   13aee:	f044 0101 	orr.w	r1, r4, #1
   13af2:	f012 fde9 	bl	266c8 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   13af6:	4d1e      	ldr	r5, [pc, #120]	; (13b70 <bus_fault.isra.0+0xb8>)
   13af8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13afa:	059b      	lsls	r3, r3, #22
   13afc:	d512      	bpl.n	13b24 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   13afe:	f044 0801 	orr.w	r8, r4, #1
   13b02:	4641      	mov	r1, r8
   13b04:	481e      	ldr	r0, [pc, #120]	; (13b80 <bus_fault.isra.0+0xc8>)
   13b06:	f012 fddf 	bl	266c8 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   13b0a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   13b0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13b0e:	0418      	lsls	r0, r3, #16
   13b10:	d508      	bpl.n	13b24 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   13b12:	4642      	mov	r2, r8
   13b14:	481b      	ldr	r0, [pc, #108]	; (13b84 <bus_fault.isra.0+0xcc>)
   13b16:	f012 fde6 	bl	266e6 <log_1>
			if (from_hard_fault) {
   13b1a:	b11f      	cbz	r7, 13b24 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   13b1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13b1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   13b22:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   13b24:	4d12      	ldr	r5, [pc, #72]	; (13b70 <bus_fault.isra.0+0xb8>)
   13b26:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13b28:	0559      	lsls	r1, r3, #21
   13b2a:	d504      	bpl.n	13b36 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   13b2c:	4816      	ldr	r0, [pc, #88]	; (13b88 <bus_fault.isra.0+0xd0>)
   13b2e:	f044 0101 	orr.w	r1, r4, #1
   13b32:	f012 fdc9 	bl	266c8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   13b36:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13b38:	05da      	lsls	r2, r3, #23
   13b3a:	d50d      	bpl.n	13b58 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   13b3c:	4813      	ldr	r0, [pc, #76]	; (13b8c <bus_fault.isra.0+0xd4>)
   13b3e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13b42:	f012 fdc1 	bl	266c8 <log_0>
	*recoverable = memory_fault_recoverable(esf);
   13b46:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   13b48:	4a09      	ldr	r2, [pc, #36]	; (13b70 <bus_fault.isra.0+0xb8>)
   13b4a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13b4c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   13b50:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
   13b52:	7030      	strb	r0, [r6, #0]
}
   13b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13b58:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13b5a:	049b      	lsls	r3, r3, #18
   13b5c:	d5f3      	bpl.n	13b46 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   13b5e:	480c      	ldr	r0, [pc, #48]	; (13b90 <bus_fault.isra.0+0xd8>)
   13b60:	f044 0101 	orr.w	r1, r4, #1
   13b64:	e7ed      	b.n	13b42 <bus_fault.isra.0+0x8a>
   13b66:	bf00      	nop
   13b68:	00031830 	.word	0x00031830
   13b6c:	00031850 	.word	0x00031850
   13b70:	e000ed00 	.word	0xe000ed00
   13b74:	00033c62 	.word	0x00033c62
   13b78:	00033c78 	.word	0x00033c78
   13b7c:	00033bd3 	.word	0x00033bd3
   13b80:	00033c89 	.word	0x00033c89
   13b84:	00033ca2 	.word	0x00033ca2
   13b88:	00033cb7 	.word	0x00033cb7
   13b8c:	00033cd2 	.word	0x00033cd2
   13b90:	00033c33 	.word	0x00033c33

00013b94 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
   13b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13b98:	4b5e      	ldr	r3, [pc, #376]	; (13d14 <z_arm_fault+0x180>)
{
   13b9a:	4681      	mov	r9, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13b9c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
   13ba0:	460d      	mov	r5, r1
   13ba2:	4614      	mov	r4, r2
   13ba4:	2600      	movs	r6, #0
   13ba6:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13ba8:	f3c8 0708 	ubfx	r7, r8, #0, #9
   13bac:	f386 8811 	msr	BASEPRI, r6
   13bb0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   13bb4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13bb8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13bbc:	d123      	bne.n	13c06 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) {
   13bbe:	07d0      	lsls	r0, r2, #31
   13bc0:	d421      	bmi.n	13c06 <z_arm_fault+0x72>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
   13bc2:	0651      	lsls	r1, r2, #25
   13bc4:	d403      	bmi.n	13bce <z_arm_fault+0x3a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13bc6:	0722      	lsls	r2, r4, #28
   13bc8:	d40e      	bmi.n	13be8 <z_arm_fault+0x54>
			*nested_exc = true;
   13bca:	2601      	movs	r6, #1
   13bcc:	e00e      	b.n	13bec <z_arm_fault+0x58>
   13bce:	4952      	ldr	r1, [pc, #328]	; (13d18 <z_arm_fault+0x184>)
   13bd0:	4a52      	ldr	r2, [pc, #328]	; (13d1c <z_arm_fault+0x188>)
		PR_FAULT_INFO("Exception occurred in Secure State");
   13bd2:	4853      	ldr	r0, [pc, #332]	; (13d20 <z_arm_fault+0x18c>)
   13bd4:	1a52      	subs	r2, r2, r1
   13bd6:	08d2      	lsrs	r2, r2, #3
   13bd8:	0192      	lsls	r2, r2, #6
   13bda:	f042 0101 	orr.w	r1, r2, #1
   13bde:	f012 fd73 	bl	266c8 <log_0>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
   13be2:	f014 0604 	ands.w	r6, r4, #4
   13be6:	d001      	beq.n	13bec <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)psp;
   13be8:	46a9      	mov	r9, r5
	*nested_exc = false;
   13bea:	2600      	movs	r6, #0
	*recoverable = false;
   13bec:	2300      	movs	r3, #0
   13bee:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   13bf2:	1efb      	subs	r3, r7, #3
   13bf4:	2b09      	cmp	r3, #9
   13bf6:	d873      	bhi.n	13ce0 <z_arm_fault+0x14c>
   13bf8:	e8df f003 	tbb	[pc, r3]
   13bfc:	3e656107 	.word	0x3e656107
   13c00:	72727272 	.word	0x72727272
   13c04:	6972      	.short	0x6972
		return NULL;
   13c06:	46b1      	mov	r9, r6
   13c08:	e7f0      	b.n	13bec <z_arm_fault+0x58>
	*recoverable = false;
   13c0a:	f04f 0800 	mov.w	r8, #0
   13c0e:	4b42      	ldr	r3, [pc, #264]	; (13d18 <z_arm_fault+0x184>)
   13c10:	4f42      	ldr	r7, [pc, #264]	; (13d1c <z_arm_fault+0x188>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   13c12:	4844      	ldr	r0, [pc, #272]	; (13d24 <z_arm_fault+0x190>)
   13c14:	1aff      	subs	r7, r7, r3
   13c16:	08ff      	lsrs	r7, r7, #3
   13c18:	01bf      	lsls	r7, r7, #6
   13c1a:	f047 0701 	orr.w	r7, r7, #1
   13c1e:	4639      	mov	r1, r7
   13c20:	f012 fd52 	bl	266c8 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13c24:	4b3b      	ldr	r3, [pc, #236]	; (13d14 <z_arm_fault+0x180>)
	*recoverable = false;
   13c26:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   13c2a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   13c2c:	f014 0402 	ands.w	r4, r4, #2
   13c30:	d005      	beq.n	13c3e <z_arm_fault+0xaa>
		PR_EXC("  Bus fault on vector table read");
   13c32:	4639      	mov	r1, r7
   13c34:	483c      	ldr	r0, [pc, #240]	; (13d28 <z_arm_fault+0x194>)
	PR_FAULT_INFO(
   13c36:	f012 fd47 	bl	266c8 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
   13c3a:	2400      	movs	r4, #0
}
   13c3c:	e01f      	b.n	13c7e <z_arm_fault+0xea>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   13c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13c40:	005b      	lsls	r3, r3, #1
   13c42:	d51c      	bpl.n	13c7e <z_arm_fault+0xea>
		PR_EXC("  Fault escalation (see below)");
   13c44:	4639      	mov	r1, r7
   13c46:	4839      	ldr	r0, [pc, #228]	; (13d2c <z_arm_fault+0x198>)
   13c48:	f012 fd3e 	bl	266c8 <log_0>
		if (SCB_MMFSR != 0) {
   13c4c:	4b38      	ldr	r3, [pc, #224]	; (13d30 <z_arm_fault+0x19c>)
   13c4e:	781b      	ldrb	r3, [r3, #0]
   13c50:	b12b      	cbz	r3, 13c5e <z_arm_fault+0xca>
			reason = mem_manage_fault(esf, 1, recoverable);
   13c52:	2001      	movs	r0, #1
   13c54:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
   13c58:	f7ff fec8 	bl	139ec <mem_manage_fault.isra.0>
   13c5c:	e00e      	b.n	13c7c <z_arm_fault+0xe8>
		} else if (SCB_BFSR != 0) {
   13c5e:	4b35      	ldr	r3, [pc, #212]	; (13d34 <z_arm_fault+0x1a0>)
   13c60:	781b      	ldrb	r3, [r3, #0]
   13c62:	b12b      	cbz	r3, 13c70 <z_arm_fault+0xdc>
			reason = bus_fault(esf, 1, recoverable);
   13c64:	2001      	movs	r0, #1
   13c66:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
   13c6a:	f7ff ff25 	bl	13ab8 <bus_fault.isra.0>
   13c6e:	e005      	b.n	13c7c <z_arm_fault+0xe8>
		} else if (SCB_UFSR != 0) {
   13c70:	4b31      	ldr	r3, [pc, #196]	; (13d38 <z_arm_fault+0x1a4>)
   13c72:	881b      	ldrh	r3, [r3, #0]
   13c74:	b29b      	uxth	r3, r3
   13c76:	b113      	cbz	r3, 13c7e <z_arm_fault+0xea>
			reason = usage_fault(esf);
   13c78:	f7ff fe52 	bl	13920 <usage_fault.isra.0>
   13c7c:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   13c7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13c82:	b9cb      	cbnz	r3, 13cb8 <z_arm_fault+0x124>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   13c84:	464b      	mov	r3, r9
   13c86:	ad02      	add	r5, sp, #8
   13c88:	f109 0720 	add.w	r7, r9, #32
   13c8c:	462a      	mov	r2, r5
   13c8e:	6818      	ldr	r0, [r3, #0]
   13c90:	6859      	ldr	r1, [r3, #4]
   13c92:	3308      	adds	r3, #8
   13c94:	c203      	stmia	r2!, {r0, r1}
   13c96:	42bb      	cmp	r3, r7
   13c98:	4615      	mov	r5, r2
   13c9a:	d1f7      	bne.n	13c8c <z_arm_fault+0xf8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   13c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13c9e:	b39e      	cbz	r6, 13d08 <z_arm_fault+0x174>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   13ca0:	f3c3 0208 	ubfx	r2, r3, #0, #9
   13ca4:	b922      	cbnz	r2, 13cb0 <z_arm_fault+0x11c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13ca6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13caa:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13cae:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   13cb0:	4620      	mov	r0, r4
   13cb2:	a902      	add	r1, sp, #8
   13cb4:	f7ff fd80 	bl	137b8 <z_arm_fatal_error>
}
   13cb8:	b00b      	add	sp, #44	; 0x2c
   13cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   13cbe:	2000      	movs	r0, #0
   13cc0:	f10d 0107 	add.w	r1, sp, #7
   13cc4:	e7c8      	b.n	13c58 <z_arm_fault+0xc4>
		reason = bus_fault(esf, 0, recoverable);
   13cc6:	2000      	movs	r0, #0
   13cc8:	f10d 0107 	add.w	r1, sp, #7
   13ccc:	e7cd      	b.n	13c6a <z_arm_fault+0xd6>
   13cce:	4913      	ldr	r1, [pc, #76]	; (13d1c <z_arm_fault+0x188>)
   13cd0:	4b11      	ldr	r3, [pc, #68]	; (13d18 <z_arm_fault+0x184>)
	PR_FAULT_INFO(
   13cd2:	481a      	ldr	r0, [pc, #104]	; (13d3c <z_arm_fault+0x1a8>)
   13cd4:	1ac9      	subs	r1, r1, r3
   13cd6:	08c9      	lsrs	r1, r1, #3
   13cd8:	0189      	lsls	r1, r1, #6
   13cda:	f041 0101 	orr.w	r1, r1, #1
   13cde:	e7aa      	b.n	13c36 <z_arm_fault+0xa2>
   13ce0:	4a0d      	ldr	r2, [pc, #52]	; (13d18 <z_arm_fault+0x184>)
   13ce2:	4b0e      	ldr	r3, [pc, #56]	; (13d1c <z_arm_fault+0x188>)
	PR_FAULT_INFO("***** %s %d) *****",
   13ce4:	4816      	ldr	r0, [pc, #88]	; (13d40 <z_arm_fault+0x1ac>)
   13ce6:	1a9b      	subs	r3, r3, r2
   13ce8:	08db      	lsrs	r3, r3, #3
   13cea:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
   13cee:	ea4f 1383 	mov.w	r3, r3, lsl #6
   13cf2:	4914      	ldr	r1, [pc, #80]	; (13d44 <z_arm_fault+0x1b0>)
   13cf4:	f043 0301 	orr.w	r3, r3, #1
   13cf8:	bf18      	it	ne
   13cfa:	4601      	movne	r1, r0
   13cfc:	f1a7 0210 	sub.w	r2, r7, #16
   13d00:	4811      	ldr	r0, [pc, #68]	; (13d48 <z_arm_fault+0x1b4>)
   13d02:	f012 fd07 	bl	26714 <log_2>
   13d06:	e798      	b.n	13c3a <z_arm_fault+0xa6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13d08:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   13d0c:	f023 0301 	bic.w	r3, r3, #1
   13d10:	e7cd      	b.n	13cae <z_arm_fault+0x11a>
   13d12:	bf00      	nop
   13d14:	e000ed00 	.word	0xe000ed00
   13d18:	00031830 	.word	0x00031830
   13d1c:	00031850 	.word	0x00031850
   13d20:	00033cea 	.word	0x00033cea
   13d24:	00033d0d 	.word	0x00033d0d
   13d28:	00033d24 	.word	0x00033d24
   13d2c:	00033d45 	.word	0x00033d45
   13d30:	e000ed28 	.word	0xe000ed28
   13d34:	e000ed29 	.word	0xe000ed29
   13d38:	e000ed2a 	.word	0xe000ed2a
   13d3c:	00033d64 	.word	0x00033d64
   13d40:	00033daf 	.word	0x00033daf
   13d44:	00033d9a 	.word	0x00033d9a
   13d48:	00033dc8 	.word	0x00033dc8

00013d4c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   13d4c:	4a02      	ldr	r2, [pc, #8]	; (13d58 <z_arm_fault_init+0xc>)
   13d4e:	6953      	ldr	r3, [r2, #20]
   13d50:	f043 0310 	orr.w	r3, r3, #16
   13d54:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   13d56:	4770      	bx	lr
   13d58:	e000ed00 	.word	0xe000ed00

00013d5c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   13d5c:	4b04      	ldr	r3, [pc, #16]	; (13d70 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   13d5e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   13d60:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   13d62:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   13d64:	d003      	beq.n	13d6e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   13d66:	4903      	ldr	r1, [pc, #12]	; (13d74 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   13d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   13d6c:	600a      	str	r2, [r1, #0]

00013d6e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   13d6e:	4770      	bx	lr
	ldr r3, =_kernel
   13d70:	200217c4 	.word	0x200217c4
	ldr r1, =_SCS_ICSR
   13d74:	e000ed04 	.word	0xe000ed04

00013d78 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
   13d78:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   13d7c:	4905      	ldr	r1, [pc, #20]	; (13d94 <sys_arch_reboot+0x1c>)
   13d7e:	4b06      	ldr	r3, [pc, #24]	; (13d98 <sys_arch_reboot+0x20>)
   13d80:	68ca      	ldr	r2, [r1, #12]
   13d82:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   13d86:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   13d88:	60cb      	str	r3, [r1, #12]
   13d8a:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   13d8e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   13d90:	e7fd      	b.n	13d8e <sys_arch_reboot+0x16>
   13d92:	bf00      	nop
   13d94:	e000ed00 	.word	0xe000ed00
   13d98:	05fa0004 	.word	0x05fa0004

00013d9c <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13d9c:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   13d9e:	2120      	movs	r1, #32
   13da0:	4803      	ldr	r0, [pc, #12]	; (13db0 <z_arm_interrupt_init+0x14>)
   13da2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   13da4:	3301      	adds	r3, #1
   13da6:	2b41      	cmp	r3, #65	; 0x41
   13da8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13dac:	d1f9      	bne.n	13da2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   13dae:	4770      	bx	lr
   13db0:	e000e100 	.word	0xe000e100

00013db4 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
   13db4:	b538      	push	{r3, r4, r5, lr}
   13db6:	4604      	mov	r4, r0
	__asm__ volatile(
   13db8:	f04f 0320 	mov.w	r3, #32
   13dbc:	f3ef 8511 	mrs	r5, BASEPRI
   13dc0:	f383 8811 	msr	BASEPRI, r3
   13dc4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
   13dc8:	f001 fc0a 	bl	155e0 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
   13dcc:	4b0a      	ldr	r3, [pc, #40]	; (13df8 <z_impl_k_thread_abort+0x44>)
   13dce:	689b      	ldr	r3, [r3, #8]
   13dd0:	42a3      	cmp	r3, r4
   13dd2:	d10b      	bne.n	13dec <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   13dd4:	4b09      	ldr	r3, [pc, #36]	; (13dfc <z_impl_k_thread_abort+0x48>)
   13dd6:	685a      	ldr	r2, [r3, #4]
   13dd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
   13ddc:	b912      	cbnz	r2, 13de4 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
   13dde:	4628      	mov	r0, r5
   13de0:	f7ff fc2a 	bl	13638 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   13de4:	685a      	ldr	r2, [r3, #4]
   13de6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   13dea:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
   13dec:	4628      	mov	r0, r5
}
   13dee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
   13df2:	f013 b9b0 	b.w	27156 <z_reschedule_irqlock>
   13df6:	bf00      	nop
   13df8:	200217c4 	.word	0x200217c4
   13dfc:	e000ed00 	.word	0xe000ed00

00013e00 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
   13e00:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
   13e02:	4b0e      	ldr	r3, [pc, #56]	; (13e3c <z_arm_configure_static_mpu_regions+0x3c>)
{
   13e04:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
   13e06:	9302      	str	r3, [sp, #8]
   13e08:	4b0d      	ldr	r3, [pc, #52]	; (13e40 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13e0a:	4c0e      	ldr	r4, [pc, #56]	; (13e44 <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
   13e0c:	9303      	str	r3, [sp, #12]
   13e0e:	4b0e      	ldr	r3, [pc, #56]	; (13e48 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13e10:	4a0e      	ldr	r2, [pc, #56]	; (13e4c <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
   13e12:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
   13e14:	ab02      	add	r3, sp, #8
   13e16:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13e18:	a801      	add	r0, sp, #4
   13e1a:	4623      	mov	r3, r4
   13e1c:	2101      	movs	r1, #1
   13e1e:	f000 f93d 	bl	1409c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
   13e22:	2300      	movs	r3, #0
   13e24:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
   13e26:	4b0a      	ldr	r3, [pc, #40]	; (13e50 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   13e28:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
   13e2a:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   13e2c:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
   13e2e:	9305      	str	r3, [sp, #20]
   13e30:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
   13e32:	f000 f93d 	bl	140b0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
   13e36:	b008      	add	sp, #32
   13e38:	bd10      	pop	{r4, pc}
   13e3a:	bf00      	nop
   13e3c:	20020000 	.word	0x20020000
   13e40:	00000000 	.word	0x00000000
   13e44:	20040000 	.word	0x20040000
   13e48:	00010006 	.word	0x00010006
   13e4c:	20020000 	.word	0x20020000
   13e50:	20020180 	.word	0x20020180

00013e54 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
   13e54:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
   13e56:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
   13e58:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
   13e5a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
   13e5e:	f004 031f 	and.w	r3, r4, #31
   13e62:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   13e64:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   13e66:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
   13e68:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
   13e6c:	4904      	ldr	r1, [pc, #16]	; (13e80 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
   13e6e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
   13e72:	f043 0301 	orr.w	r3, r3, #1
   13e76:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
   13e78:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
   13e7a:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
   13e7c:	bd10      	pop	{r4, pc}
   13e7e:	bf00      	nop
   13e80:	e000ed90 	.word	0xe000ed90

00013e84 <region_allocate_and_init.part.0>:
#include <arm_mpu_v8_internal.h>
#else
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const u8_t index,
   13e84:	b508      	push	{r3, lr}
   13e86:	4a07      	ldr	r2, [pc, #28]	; (13ea4 <region_allocate_and_init.part.0+0x20>)
   13e88:	4b07      	ldr	r3, [pc, #28]	; (13ea8 <region_allocate_and_init.part.0+0x24>)
   13e8a:	4601      	mov	r1, r0
   13e8c:	1ad2      	subs	r2, r2, r3
   13e8e:	08d2      	lsrs	r2, r2, #3
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {

		/* No available MPU region index. */
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   13e90:	0192      	lsls	r2, r2, #6
   13e92:	4806      	ldr	r0, [pc, #24]	; (13eac <region_allocate_and_init.part.0+0x28>)
   13e94:	f042 0201 	orr.w	r2, r2, #1
   13e98:	f012 fc25 	bl	266e6 <log_1>

	/* Program region */
	region_init(index, region_conf);

	return index;
}
   13e9c:	f06f 0015 	mvn.w	r0, #21
   13ea0:	bd08      	pop	{r3, pc}
   13ea2:	bf00      	nop
   13ea4:	00031848 	.word	0x00031848
   13ea8:	00031830 	.word	0x00031830
   13eac:	00033ddf 	.word	0x00033ddf

00013eb0 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   13eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13eb4:	4607      	mov	r7, r0
   13eb6:	4688      	mov	r8, r1
   13eb8:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   13eba:	2600      	movs	r6, #0
	MPU->RNR = index;
   13ebc:	4d56      	ldr	r5, [pc, #344]	; (14018 <mpu_configure_regions_and_partition.constprop.0+0x168>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
   13ebe:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
   13ec0:	4546      	cmp	r6, r8
   13ec2:	da35      	bge.n	13f30 <mpu_configure_regions_and_partition.constprop.0+0x80>
		if (regions[i]->size == 0U) {
   13ec4:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   13ec8:	f8d3 9004 	ldr.w	r9, [r3, #4]
   13ecc:	f1b9 0f00 	cmp.w	r9, #0
   13ed0:	d051      	beq.n	13f76 <mpu_configure_regions_and_partition.constprop.0+0xc6>
		&&
   13ed2:	f1b9 0f1f 	cmp.w	r9, #31
   13ed6:	d91e      	bls.n	13f16 <mpu_configure_regions_and_partition.constprop.0+0x66>
		&&
   13ed8:	f019 0f1f 	tst.w	r9, #31
   13edc:	d11b      	bne.n	13f16 <mpu_configure_regions_and_partition.constprop.0+0x66>
		((part->start &
   13ede:	f8d3 a000 	ldr.w	sl, [r3]
		&&
   13ee2:	f01a 0f1f 	tst.w	sl, #31
   13ee6:	d116      	bne.n	13f16 <mpu_configure_regions_and_partition.constprop.0+0x66>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   13ee8:	4650      	mov	r0, sl
   13eea:	f012 ffab 	bl	26e44 <arm_cmse_mpu_region_get>
   13eee:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   13ef0:	eb09 000a 	add.w	r0, r9, sl
   13ef4:	3801      	subs	r0, #1
   13ef6:	f012 ffa5 	bl	26e44 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   13efa:	4583      	cmp	fp, r0
   13efc:	d01c      	beq.n	13f38 <mpu_configure_regions_and_partition.constprop.0+0x88>
	return -EINVAL;
   13efe:	f06f 0b15 	mvn.w	fp, #21
   13f02:	4a46      	ldr	r2, [pc, #280]	; (1401c <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   13f04:	4b46      	ldr	r3, [pc, #280]	; (14020 <mpu_configure_regions_and_partition.constprop.0+0x170>)
		int u_reg_index =
			get_region_index(regions[i]->start, regions[i]->size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
   13f06:	4659      	mov	r1, fp
   13f08:	1ad2      	subs	r2, r2, r3
   13f0a:	08d2      	lsrs	r2, r2, #3
   13f0c:	0192      	lsls	r2, r2, #6
   13f0e:	4845      	ldr	r0, [pc, #276]	; (14024 <mpu_configure_regions_and_partition.constprop.0+0x174>)
   13f10:	f042 0201 	orr.w	r2, r2, #1
   13f14:	e008      	b.n	13f28 <mpu_configure_regions_and_partition.constprop.0+0x78>
			LOG_ERR("Partition %u: sanity check failed.", i);
   13f16:	4631      	mov	r1, r6
   13f18:	4a40      	ldr	r2, [pc, #256]	; (1401c <mpu_configure_regions_and_partition.constprop.0+0x16c>)
   13f1a:	4b41      	ldr	r3, [pc, #260]	; (14020 <mpu_configure_regions_and_partition.constprop.0+0x170>)
   13f1c:	4842      	ldr	r0, [pc, #264]	; (14028 <mpu_configure_regions_and_partition.constprop.0+0x178>)
   13f1e:	1ad2      	subs	r2, r2, r3
   13f20:	08d2      	lsrs	r2, r2, #3
   13f22:	0192      	lsls	r2, r2, #6
   13f24:	f042 0201 	orr.w	r2, r2, #1
			LOG_ERR("Invalid underlying region index %u",
   13f28:	f012 fbdd 	bl	266e6 <log_1>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
   13f2c:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
   13f30:	4620      	mov	r0, r4
   13f32:	b005      	add	sp, #20
   13f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((u_reg_index == -EINVAL) ||
   13f38:	f11b 0f16 	cmn.w	fp, #22
   13f3c:	d0e1      	beq.n	13f02 <mpu_configure_regions_and_partition.constprop.0+0x52>
			(u_reg_index > (reg_index - 1))) {
   13f3e:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
   13f40:	455b      	cmp	r3, fp
   13f42:	dbde      	blt.n	13f02 <mpu_configure_regions_and_partition.constprop.0+0x52>
	MPU->RNR = index;
   13f44:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   13f48:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
   13f4a:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   13f4e:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   13f50:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
   13f54:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
   13f58:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   13f5c:	e9d1 3200 	ldrd	r3, r2, [r1]
   13f60:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
   13f62:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
   13f64:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
   13f68:	d118      	bne.n	13f9c <mpu_configure_regions_and_partition.constprop.0+0xec>
   13f6a:	45ca      	cmp	sl, r9
   13f6c:	d105      	bne.n	13f7a <mpu_configure_regions_and_partition.constprop.0+0xca>
			mpu_configure_region(u_reg_index, regions[i]);
   13f6e:	fa5f f08b 	uxtb.w	r0, fp
   13f72:	f012 ff46 	bl	26e02 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
   13f76:	3601      	adds	r6, #1
   13f78:	e7a2      	b.n	13ec0 <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
   13f7a:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   13f7e:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
   13f80:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   13f84:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
   13f88:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
   13f8a:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
   13f8c:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
   13f8e:	f012 ff38 	bl	26e02 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   13f92:	f110 0f16 	cmn.w	r0, #22
   13f96:	d0c9      	beq.n	13f2c <mpu_configure_regions_and_partition.constprop.0+0x7c>
			reg_index++;
   13f98:	1c44      	adds	r4, r0, #1
   13f9a:	e7ec      	b.n	13f76 <mpu_configure_regions_and_partition.constprop.0+0xc6>
	MPU->RNR = index;
   13f9c:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13fa0:	692a      	ldr	r2, [r5, #16]
   13fa2:	3b01      	subs	r3, #1
   13fa4:	f023 031f 	bic.w	r3, r3, #31
   13fa8:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
   13fac:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
   13fae:	45ca      	cmp	sl, r9
   13fb0:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
   13fb2:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
   13fb4:	d0eb      	beq.n	13f8e <mpu_configure_regions_and_partition.constprop.0+0xde>
				mpu_configure_region(reg_index, regions[i]);
   13fb6:	f012 ff24 	bl	26e02 <mpu_configure_region>
			if (reg_index == -EINVAL) {
   13fba:	f110 0f16 	cmn.w	r0, #22
   13fbe:	d0b5      	beq.n	13f2c <mpu_configure_regions_and_partition.constprop.0+0x7c>
	MPU->RNR = index;
   13fc0:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
   13fc4:	68ea      	ldr	r2, [r5, #12]
   13fc6:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
   13fca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
   13fce:	f362 0304 	bfi	r3, r2, #0, #5
   13fd2:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   13fd6:	692b      	ldr	r3, [r5, #16]
   13fd8:	f89d 2008 	ldrb.w	r2, [sp, #8]
   13fdc:	085b      	lsrs	r3, r3, #1
   13fde:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
   13fe2:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   13fe6:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
   13fea:	e9d3 1300 	ldrd	r1, r3, [r3]
   13fee:	440b      	add	r3, r1
   13ff0:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
   13ff2:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
   13ff6:	1c44      	adds	r4, r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
   13ff8:	4453      	add	r3, sl
   13ffa:	eba3 0309 	sub.w	r3, r3, r9
				region_allocate_and_init(reg_index,
   13ffe:	b2e0      	uxtb	r0, r4
			REGION_LIMIT_ADDR((regions[i]->start +
   14000:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   14004:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
   14006:	9303      	str	r3, [sp, #12]
   14008:	d902      	bls.n	14010 <mpu_configure_regions_and_partition.constprop.0+0x160>
   1400a:	f7ff ff3b 	bl	13e84 <region_allocate_and_init.part.0>
   1400e:	e7c0      	b.n	13f92 <mpu_configure_regions_and_partition.constprop.0+0xe2>
	region_init(index, region_conf);
   14010:	4669      	mov	r1, sp
   14012:	f7ff ff1f 	bl	13e54 <region_init>
			if (reg_index == -EINVAL) {
   14016:	e7bf      	b.n	13f98 <mpu_configure_regions_and_partition.constprop.0+0xe8>
   14018:	e000ed90 	.word	0xe000ed90
   1401c:	00031848 	.word	0x00031848
   14020:	00031830 	.word	0x00031830
   14024:	00033e28 	.word	0x00033e28
   14028:	00033e05 	.word	0x00033e05

0001402c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   1402c:	2205      	movs	r2, #5
   1402e:	4b03      	ldr	r3, [pc, #12]	; (1403c <arm_core_mpu_enable+0x10>)
   14030:	605a      	str	r2, [r3, #4]
   14032:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14036:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   1403a:	4770      	bx	lr
   1403c:	e000ed90 	.word	0xe000ed90

00014040 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   14040:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   14044:	2200      	movs	r2, #0
   14046:	4b01      	ldr	r3, [pc, #4]	; (1404c <arm_core_mpu_disable+0xc>)
   14048:	605a      	str	r2, [r3, #4]
}
   1404a:	4770      	bx	lr
   1404c:	e000ed90 	.word	0xe000ed90

00014050 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
   14050:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   14052:	4c0e      	ldr	r4, [pc, #56]	; (1408c <arm_mpu_init+0x3c>)
   14054:	6825      	ldr	r5, [r4, #0]
   14056:	2d10      	cmp	r5, #16
   14058:	d814      	bhi.n	14084 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   1405a:	f7ff fff1 	bl	14040 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1405e:	2000      	movs	r0, #0
	MPU->MAIR0 =
   14060:	4b0b      	ldr	r3, [pc, #44]	; (14090 <arm_mpu_init+0x40>)
   14062:	4a0c      	ldr	r2, [pc, #48]	; (14094 <arm_mpu_init+0x44>)
   14064:	631a      	str	r2, [r3, #48]	; 0x30
   14066:	4285      	cmp	r5, r0
   14068:	d105      	bne.n	14076 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   1406a:	4b0b      	ldr	r3, [pc, #44]	; (14098 <arm_mpu_init+0x48>)
   1406c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
   1406e:	f7ff ffdd 	bl	1402c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
   14072:	2000      	movs	r0, #0
}
   14074:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
   14076:	6861      	ldr	r1, [r4, #4]
   14078:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   1407c:	f7ff feea 	bl	13e54 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   14080:	3001      	adds	r0, #1
   14082:	e7f0      	b.n	14066 <arm_mpu_init+0x16>
		return -1;
   14084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   14088:	e7f4      	b.n	14074 <arm_mpu_init+0x24>
   1408a:	bf00      	nop
   1408c:	00032ee0 	.word	0x00032ee0
   14090:	e000ed90 	.word	0xe000ed90
   14094:	0044ffaa 	.word	0x0044ffaa
   14098:	20027125 	.word	0x20027125

0001409c <arm_core_mpu_configure_static_mpu_regions>:
{
   1409c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   1409e:	4c03      	ldr	r4, [pc, #12]	; (140ac <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
   140a0:	7822      	ldrb	r2, [r4, #0]
   140a2:	f7ff ff05 	bl	13eb0 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   140a6:	7020      	strb	r0, [r4, #0]
}
   140a8:	bd10      	pop	{r4, pc}
   140aa:	bf00      	nop
   140ac:	20027125 	.word	0x20027125

000140b0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
   140b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140b4:	4d26      	ldr	r5, [pc, #152]	; (14150 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
   140b6:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
   140b8:	4606      	mov	r6, r0
   140ba:	f04f 0800 	mov.w	r8, #0
   140be:	46ab      	mov	fp, r5
	MPU->RNR = index;
   140c0:	4f24      	ldr	r7, [pc, #144]	; (14154 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
   140c2:	45d0      	cmp	r8, sl
   140c4:	da1b      	bge.n	140fe <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
   140c6:	f8d6 9004 	ldr.w	r9, [r6, #4]
   140ca:	f1b9 0f00 	cmp.w	r9, #0
   140ce:	d039      	beq.n	14144 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
   140d0:	6831      	ldr	r1, [r6, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   140d2:	4608      	mov	r0, r1
   140d4:	9101      	str	r1, [sp, #4]
   140d6:	f012 feb5 	bl	26e44 <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   140da:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
   140dc:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
   140de:	eb09 0001 	add.w	r0, r9, r1
   140e2:	3801      	subs	r0, #1
   140e4:	f012 feae 	bl	26e44 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
   140e8:	4284      	cmp	r4, r0
   140ea:	f04f 0214 	mov.w	r2, #20
   140ee:	4b1a      	ldr	r3, [pc, #104]	; (14158 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
   140f0:	d008      	beq.n	14104 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
   140f2:	f06f 0315 	mvn.w	r3, #21
   140f6:	fb02 f808 	mul.w	r8, r2, r8
   140fa:	f84b 3008 	str.w	r3, [fp, r8]
}
   140fe:	b003      	add	sp, #12
   14100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
   14104:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
   14108:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
   1410a:	d0f8      	beq.n	140fe <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
   1410c:	7819      	ldrb	r1, [r3, #0]
   1410e:	42a1      	cmp	r1, r4
   14110:	ddf5      	ble.n	140fe <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
   14112:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
   14116:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
   14118:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
   1411a:	68fc      	ldr	r4, [r7, #12]
   1411c:	f100 0108 	add.w	r1, r0, #8
   14120:	7b00      	ldrb	r0, [r0, #12]
   14122:	f364 0004 	bfi	r0, r4, #0, #5
   14126:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
   14128:	6938      	ldr	r0, [r7, #16]
   1412a:	790c      	ldrb	r4, [r1, #4]
   1412c:	0840      	lsrs	r0, r0, #1
   1412e:	f360 1447 	bfi	r4, r0, #5, #3
   14132:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
   14134:	68f9      	ldr	r1, [r7, #12]
   14136:	f021 011f 	bic.w	r1, r1, #31
   1413a:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
   1413c:	6939      	ldr	r1, [r7, #16]
   1413e:	f021 011f 	bic.w	r1, r1, #31
   14142:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
   14144:	f108 0801 	add.w	r8, r8, #1
   14148:	3514      	adds	r5, #20
   1414a:	360c      	adds	r6, #12
   1414c:	e7b9      	b.n	140c2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
   1414e:	bf00      	nop
   14150:	20021698 	.word	0x20021698
   14154:	e000ed90 	.word	0xe000ed90
   14158:	20027125 	.word	0x20027125

0001415c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   1415c:	4b01      	ldr	r3, [pc, #4]	; (14164 <__stdout_hook_install+0x8>)
   1415e:	6018      	str	r0, [r3, #0]
}
   14160:	4770      	bx	lr
   14162:	bf00      	nop
   14164:	20020010 	.word	0x20020010

00014168 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
   14168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1416a:	4606      	mov	r6, r0
   1416c:	460d      	mov	r5, r1
	int i = 0;

	for (i = 0; i < nbytes; i++) {
   1416e:	2400      	movs	r4, #0
		*(buf + i) = _stdin_hook();
   14170:	4f06      	ldr	r7, [pc, #24]	; (1418c <z_impl_zephyr_read_stdin+0x24>)
	for (i = 0; i < nbytes; i++) {
   14172:	42ac      	cmp	r4, r5
   14174:	da08      	bge.n	14188 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
   14176:	683b      	ldr	r3, [r7, #0]
   14178:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1417a:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
   1417c:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
   1417e:	f104 0401 	add.w	r4, r4, #1
   14182:	d001      	beq.n	14188 <z_impl_zephyr_read_stdin+0x20>
   14184:	280d      	cmp	r0, #13
   14186:	d1f4      	bne.n	14172 <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
   14188:	4620      	mov	r0, r4
   1418a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1418c:	2002000c 	.word	0x2002000c

00014190 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
   14190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14192:	460d      	mov	r5, r1
   14194:	4f09      	ldr	r7, [pc, #36]	; (141bc <z_impl_zephyr_write_stdout+0x2c>)
   14196:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
   14198:	f1c0 0401 	rsb	r4, r0, #1
   1419c:	19a3      	adds	r3, r4, r6
   1419e:	429d      	cmp	r5, r3
   141a0:	dc01      	bgt.n	141a6 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
   141a2:	4628      	mov	r0, r5
   141a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
   141a6:	7873      	ldrb	r3, [r6, #1]
   141a8:	2b0a      	cmp	r3, #10
   141aa:	d102      	bne.n	141b2 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
   141ac:	200d      	movs	r0, #13
   141ae:	683b      	ldr	r3, [r7, #0]
   141b0:	4798      	blx	r3
		_stdout_hook(*(buf + i));
   141b2:	683b      	ldr	r3, [r7, #0]
   141b4:	f816 0f01 	ldrb.w	r0, [r6, #1]!
   141b8:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
   141ba:	e7ef      	b.n	1419c <z_impl_zephyr_write_stdout+0xc>
   141bc:	20020010 	.word	0x20020010

000141c0 <_exit>:

int _write(int fd, const void *buf, int nbytes)
{
	ARG_UNUSED(fd);

	return z_impl_zephyr_write_stdout(buf, nbytes);
   141c0:	2105      	movs	r1, #5
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
   141c2:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
   141c4:	4801      	ldr	r0, [pc, #4]	; (141cc <_exit+0xc>)
   141c6:	f7ff ffe3 	bl	14190 <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
   141ca:	e7fe      	b.n	141ca <_exit+0xa>
   141cc:	00033e4b 	.word	0x00033e4b

000141d0 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
   141d0:	b510      	push	{r4, lr}
   141d2:	4604      	mov	r4, r0
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
   141d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   141d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   141dc:	480a      	ldr	r0, [pc, #40]	; (14208 <_sbrk+0x38>)
   141de:	f012 f98a 	bl	264f6 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
   141e2:	490a      	ldr	r1, [pc, #40]	; (1420c <_sbrk+0x3c>)
   141e4:	680b      	ldr	r3, [r1, #0]
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   141e6:	18e0      	adds	r0, r4, r3
   141e8:	4c09      	ldr	r4, [pc, #36]	; (14210 <_sbrk+0x40>)
   141ea:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
   141ee:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
   141f2:	4290      	cmp	r0, r2
		heap_sz += count;
		ret = ptr;
	} else {
		ret = (void *)-1;
   141f4:	bf2e      	itee	cs
   141f6:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	ptr = ((char *)HEAP_BASE) + heap_sz;
   141fa:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
   141fc:	6008      	strcc	r0, [r1, #0]
	}

	sys_sem_give(&heap_sem);
   141fe:	4802      	ldr	r0, [pc, #8]	; (14208 <_sbrk+0x38>)
   14200:	f012 f974 	bl	264ec <sys_sem_give>

	return ret;
}
   14204:	4620      	mov	r0, r4
   14206:	bd10      	pop	{r4, pc}
   14208:	20020148 	.word	0x20020148
   1420c:	200216ac 	.word	0x200216ac
   14210:	2002a218 	.word	0x2002a218

00014214 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   14214:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   14216:	4b09      	ldr	r3, [pc, #36]	; (1423c <gpio_nrfx_init+0x28>)
   14218:	781a      	ldrb	r2, [r3, #0]
   1421a:	b96a      	cbnz	r2, 14238 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1421c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1421e:	2031      	movs	r0, #49	; 0x31
		gpio_initialized = true;
   14220:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   14222:	2105      	movs	r1, #5
   14224:	f7ff fa66 	bl	136f4 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   14228:	2031      	movs	r0, #49	; 0x31
   1422a:	f7ff fa53 	bl	136d4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1422e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14232:	4b03      	ldr	r3, [pc, #12]	; (14240 <gpio_nrfx_init+0x2c>)
   14234:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   14238:	2000      	movs	r0, #0
   1423a:	bd08      	pop	{r3, pc}
   1423c:	20027126 	.word	0x20027126
   14240:	40031000 	.word	0x40031000

00014244 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14244:	4b29      	ldr	r3, [pc, #164]	; (142ec <gpio_nrfx_config+0xa8>)
{
   14246:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   14248:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1424a:	4829      	ldr	r0, [pc, #164]	; (142f0 <gpio_nrfx_config+0xac>)
   1424c:	4013      	ands	r3, r2
   1424e:	4283      	cmp	r3, r0
   14250:	d03d      	beq.n	142ce <gpio_nrfx_config+0x8a>
   14252:	d80d      	bhi.n	14270 <gpio_nrfx_config+0x2c>
   14254:	2b06      	cmp	r3, #6
   14256:	d015      	beq.n	14284 <gpio_nrfx_config+0x40>
   14258:	d805      	bhi.n	14266 <gpio_nrfx_config+0x22>
   1425a:	b19b      	cbz	r3, 14284 <gpio_nrfx_config+0x40>
   1425c:	2b02      	cmp	r3, #2
   1425e:	d038      	beq.n	142d2 <gpio_nrfx_config+0x8e>
   14260:	f06f 0015 	mvn.w	r0, #21
   14264:	e032      	b.n	142cc <gpio_nrfx_config+0x88>
   14266:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1426a:	d1f9      	bne.n	14260 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1426c:	2301      	movs	r3, #1
   1426e:	e009      	b.n	14284 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   14270:	4820      	ldr	r0, [pc, #128]	; (142f4 <gpio_nrfx_config+0xb0>)
   14272:	4283      	cmp	r3, r0
   14274:	d02f      	beq.n	142d6 <gpio_nrfx_config+0x92>
   14276:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1427a:	d02e      	beq.n	142da <gpio_nrfx_config+0x96>
   1427c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   14280:	d1ee      	bne.n	14260 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   14282:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   14284:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
   14286:	bf4c      	ite	mi
   14288:	2503      	movmi	r5, #3
		pull = NRF_GPIO_PIN_NOPULL;
   1428a:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1428e:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   14292:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   14294:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   14298:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1429c:	d506      	bpl.n	142ac <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1429e:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   142a2:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   142a4:	d01b      	beq.n	142de <gpio_nrfx_config+0x9a>
			nrf_gpio_port_out_set(reg, BIT(pin));
   142a6:	2201      	movs	r2, #1
   142a8:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   142aa:	60ba      	str	r2, [r7, #8]
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   142ac:	7a32      	ldrb	r2, [r6, #8]
   142ae:	f001 011f 	and.w	r1, r1, #31
   142b2:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   142b6:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
	return 0;
   142ba:	2000      	movs	r0, #0
   142bc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   142c0:	4a0d      	ldr	r2, [pc, #52]	; (142f8 <gpio_nrfx_config+0xb4>)
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   142c2:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   142c6:	3180      	adds	r1, #128	; 0x80
   142c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   142cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   142ce:	2307      	movs	r3, #7
   142d0:	e7d8      	b.n	14284 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   142d2:	2304      	movs	r3, #4
   142d4:	e7d6      	b.n	14284 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   142d6:	2305      	movs	r3, #5
   142d8:	e7d4      	b.n	14284 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   142da:	2303      	movs	r3, #3
   142dc:	e7d2      	b.n	14284 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   142de:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   142e0:	bf42      	ittt	mi
   142e2:	2201      	movmi	r2, #1
   142e4:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   142e6:	60fa      	strmi	r2, [r7, #12]
}
   142e8:	e7e0      	b.n	142ac <gpio_nrfx_config+0x68>
   142ea:	bf00      	nop
   142ec:	00f00006 	.word	0x00f00006
   142f0:	00100006 	.word	0x00100006
   142f4:	00400002 	.word	0x00400002
   142f8:	40842500 	.word	0x40842500

000142fc <gpiote_pin_int_cfg>:
{
   142fc:	b570      	push	{r4, r5, r6, lr}
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   142fe:	6843      	ldr	r3, [r0, #4]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   14300:	4c4c      	ldr	r4, [pc, #304]	; (14434 <gpiote_pin_int_cfg+0x138>)
   14302:	7a1a      	ldrb	r2, [r3, #8]
   14304:	f001 031f 	and.w	r3, r1, #31
   14308:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1430c:	2200      	movs	r2, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   1430e:	68c6      	ldr	r6, [r0, #12]
   14310:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
   14314:	b2c0      	uxtb	r0, r0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14316:	f502 75a2 	add.w	r5, r2, #324	; 0x144
   1431a:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
   1431e:	f3c5 2504 	ubfx	r5, r5, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   14322:	42ab      	cmp	r3, r5
   14324:	d16c      	bne.n	14400 <gpiote_pin_int_cfg+0x104>
		    && (intenset & BIT(i))) {
   14326:	fa20 f502 	lsr.w	r5, r0, r2
   1432a:	07ed      	lsls	r5, r5, #31
   1432c:	d568      	bpl.n	14400 <gpiote_pin_int_cfg+0x104>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1432e:	0090      	lsls	r0, r2, #2
   14330:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   14334:	f500 3044 	add.w	r0, r0, #200704	; 0x31000
   14338:	f8d0 5510 	ldr.w	r5, [r0, #1296]	; 0x510
   1433c:	f025 0501 	bic.w	r5, r5, #1
   14340:	f8c0 5510 	str.w	r5, [r0, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   14344:	2001      	movs	r0, #1
   14346:	fa00 f202 	lsl.w	r2, r0, r2
    p_reg->INTENCLR = mask;
   1434a:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1434e:	4d3a      	ldr	r5, [pc, #232]	; (14438 <gpiote_pin_int_cfg+0x13c>)
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
   14350:	68f0      	ldr	r0, [r6, #12]
   14352:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14356:	f8d5 2200 	ldr.w	r2, [r5, #512]	; 0x200
   1435a:	40c8      	lsrs	r0, r1
   1435c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
   14360:	f010 0001 	ands.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   14364:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
   14368:	d049      	beq.n	143fe <gpiote_pin_int_cfg+0x102>
   1436a:	6930      	ldr	r0, [r6, #16]
   1436c:	40c8      	lsrs	r0, r1
   1436e:	f010 0001 	ands.w	r0, r0, #1
   14372:	d044      	beq.n	143fe <gpiote_pin_int_cfg+0x102>
		if (data->trig_edge & BIT(pin)) {
   14374:	69b0      	ldr	r0, [r6, #24]
   14376:	40c8      	lsrs	r0, r1
   14378:	f010 0001 	ands.w	r0, r0, #1
   1437c:	d04a      	beq.n	14414 <gpiote_pin_int_cfg+0x118>
			if (data->double_edge & BIT(pin)) {
   1437e:	69f2      	ldr	r2, [r6, #28]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   14380:	2500      	movs	r5, #0
			if (data->double_edge & BIT(pin)) {
   14382:	40ca      	lsrs	r2, r1
   14384:	07d2      	lsls	r2, r2, #31
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   14386:	bf4f      	iteee	mi
   14388:	2203      	movmi	r2, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1438a:	6972      	ldrpl	r2, [r6, #20]
   1438c:	40ca      	lsrpl	r2, r1
   1438e:	f002 0201 	andpl.w	r2, r2, #1
   14392:	bf5c      	itt	pl
   14394:	f1c2 0202 	rsbpl	r2, r2, #2
   14398:	b2d2      	uxtbpl	r2, r2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
   1439a:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   1439e:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
   143a2:	f010 0003 	ands.w	r0, r0, #3
   143a6:	d12f      	bne.n	14408 <gpiote_pin_int_cfg+0x10c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   143a8:	00a9      	lsls	r1, r5, #2
   143aa:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   143ae:	f501 3144 	add.w	r1, r1, #200704	; 0x31000
   143b2:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   143b6:	021b      	lsls	r3, r3, #8
   143b8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   143bc:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   143c0:	f426 7640 	bic.w	r6, r6, #768	; 0x300
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   143c4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
			nrf_gpiote_event_t evt =
   143c8:	f105 0340 	add.w	r3, r5, #64	; 0x40
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   143cc:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
   143d0:	009b      	lsls	r3, r3, #2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   143d2:	f8d1 6510 	ldr.w	r6, [r1, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   143d6:	b29b      	uxth	r3, r3
   143d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   143dc:	f503 3344 	add.w	r3, r3, #200704	; 0x31000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   143e0:	4332      	orrs	r2, r6
   143e2:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   143e6:	6018      	str	r0, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   143e8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
   143ec:	f043 0301 	orr.w	r3, r3, #1
   143f0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   143f4:	2301      	movs	r3, #1
   143f6:	fa03 f505 	lsl.w	r5, r3, r5
    p_reg->INTENSET = mask;
   143fa:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
}
   143fe:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   14400:	3201      	adds	r2, #1
   14402:	2a08      	cmp	r2, #8
   14404:	d187      	bne.n	14316 <gpiote_pin_int_cfg+0x1a>
   14406:	e7a2      	b.n	1434e <gpiote_pin_int_cfg+0x52>
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   14408:	3501      	adds	r5, #1
   1440a:	2d08      	cmp	r5, #8
   1440c:	d1c5      	bne.n	1439a <gpiote_pin_int_cfg+0x9e>
	return -ENODEV;
   1440e:	f06f 0012 	mvn.w	r0, #18
   14412:	e7f4      	b.n	143fe <gpiote_pin_int_cfg+0x102>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   14414:	6972      	ldr	r2, [r6, #20]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   14416:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
   1441a:	40ca      	lsrs	r2, r1
   1441c:	f002 0201 	and.w	r2, r2, #1
   14420:	f1c2 0203 	rsb	r2, r2, #3
   14424:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   14428:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
   1442c:	f8c5 2200 	str.w	r2, [r5, #512]	; 0x200
}
   14430:	e7e5      	b.n	143fe <gpiote_pin_int_cfg+0x102>
   14432:	bf00      	nop
   14434:	40031000 	.word	0x40031000
   14438:	40842500 	.word	0x40842500

0001443c <gpio_nrfx_pin_interrupt_configure>:
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1443c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
{
   14440:	b470      	push	{r4, r5, r6}
	struct gpio_nrfx_data *data = get_port_data(port);
   14442:	68c4      	ldr	r4, [r0, #12]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   14444:	d10f      	bne.n	14466 <gpio_nrfx_pin_interrupt_configure+0x2a>
	u32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   14446:	6845      	ldr	r5, [r0, #4]
   14448:	7a2e      	ldrb	r6, [r5, #8]
   1444a:	f001 051f 	and.w	r5, r1, #31
   1444e:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   14452:	4e1d      	ldr	r6, [pc, #116]	; (144c8 <gpio_nrfx_pin_interrupt_configure+0x8c>)
   14454:	3580      	adds	r5, #128	; 0x80
   14456:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1445a:	07ed      	lsls	r5, r5, #31
   1445c:	d507      	bpl.n	1446e <gpio_nrfx_pin_interrupt_configure+0x32>
}
   1445e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14462:	bc70      	pop	{r4, r5, r6}
   14464:	4770      	bx	lr
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14466:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1446a:	68e5      	ldr	r5, [r4, #12]
   1446c:	d026      	beq.n	144bc <gpio_nrfx_pin_interrupt_configure+0x80>
   1446e:	2501      	movs	r5, #1
   14470:	68e6      	ldr	r6, [r4, #12]
   14472:	408d      	lsls	r5, r1
   14474:	4335      	orrs	r5, r6
   14476:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   14478:	2501      	movs	r5, #1
   1447a:	6926      	ldr	r6, [r4, #16]
   1447c:	408d      	lsls	r5, r1
   1447e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   14482:	bf14      	ite	ne
   14484:	432e      	orrne	r6, r5
   14486:	43ae      	biceq	r6, r5
   14488:	6126      	str	r6, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1448a:	69a6      	ldr	r6, [r4, #24]
   1448c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   14490:	69e2      	ldr	r2, [r4, #28]
   14492:	bf0c      	ite	eq
   14494:	432e      	orreq	r6, r5
   14496:	43ae      	bicne	r6, r5
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   14498:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1449c:	bf0c      	ite	eq
   1449e:	432a      	orreq	r2, r5
   144a0:	43aa      	bicne	r2, r5
   144a2:	61e2      	str	r2, [r4, #28]
   144a4:	6962      	ldr	r2, [r4, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   144a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   144aa:	bf0c      	ite	eq
   144ac:	4315      	orreq	r5, r2
   144ae:	ea22 0505 	bicne.w	r5, r2, r5
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   144b2:	61a6      	str	r6, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   144b4:	6165      	str	r5, [r4, #20]
}
   144b6:	bc70      	pop	{r4, r5, r6}
	return gpiote_pin_int_cfg(port, pin);
   144b8:	f7ff bf20 	b.w	142fc <gpiote_pin_int_cfg>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   144bc:	2601      	movs	r6, #1
   144be:	408e      	lsls	r6, r1
   144c0:	ea25 0506 	bic.w	r5, r5, r6
   144c4:	e7d7      	b.n	14476 <gpio_nrfx_pin_interrupt_configure+0x3a>
   144c6:	bf00      	nop
   144c8:	40842500 	.word	0x40842500

000144cc <gpiote_event_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   144cc:	494e      	ldr	r1, [pc, #312]	; (14608 <gpiote_event_handler+0x13c>)
{
   144ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   144d2:	680e      	ldr	r6, [r1, #0]
	if (port_event) {
   144d4:	2e00      	cmp	r6, #0
   144d6:	d05e      	beq.n	14596 <gpiote_event_handler+0xca>
	struct gpio_nrfx_data *data = get_port_data(port);
   144d8:	4b4c      	ldr	r3, [pc, #304]	; (1460c <gpiote_event_handler+0x140>)
	u32_t pin = 0U;
   144da:	2500      	movs	r5, #0
	struct gpio_nrfx_data *data = get_port_data(port);
   144dc:	68da      	ldr	r2, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   144de:	f8d3 c004 	ldr.w	ip, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   144e2:	e9d2 0303 	ldrd	r0, r3, [r2, #12]
   144e6:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
   144e8:	e9d2 0406 	ldrd	r0, r4, [r2, #24]
   144ec:	4320      	orrs	r0, r4
   144ee:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
   144f2:	f8dc 0004 	ldr.w	r0, [ip, #4]
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   144f6:	6952      	ldr	r2, [r2, #20]
    return p_reg->IN;
   144f8:	6904      	ldr	r4, [r0, #16]
	u32_t bit = 1U << pin;
   144fa:	2001      	movs	r0, #1
	u32_t pin_states = ~(port_in ^ data->int_active_level);
   144fc:	4054      	eors	r4, r2
   144fe:	f8df e118 	ldr.w	lr, [pc, #280]	; 14618 <gpiote_event_handler+0x14c>
	u32_t out = pin_states & level_pins;
   14502:	ea23 0404 	bic.w	r4, r3, r4
	while (level_pins) {
   14506:	bb8b      	cbnz	r3, 1456c <gpiote_event_handler+0xa0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14508:	600b      	str	r3, [r1, #0]
	u32_t fired_triggers[GPIO_COUNT] = {0};
   1450a:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1450c:	2001      	movs	r0, #1
   1450e:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   14510:	493f      	ldr	r1, [pc, #252]	; (14610 <gpiote_event_handler+0x144>)
   14512:	4d40      	ldr	r5, [pc, #256]	; (14614 <gpiote_event_handler+0x148>)
   14514:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   14518:	fa00 fc03 	lsl.w	ip, r0, r3
   1451c:	ea1c 0f02 	tst.w	ip, r2
   14520:	d00d      	beq.n	1453e <gpiote_event_handler+0x72>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14522:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   14526:	b152      	cbz	r2, 1453e <gpiote_event_handler+0x72>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14528:	f503 72a2 	add.w	r2, r3, #324	; 0x144
   1452c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   14530:	f845 7023 	str.w	r7, [r5, r3, lsl #2]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   14534:	f3c2 2204 	ubfx	r2, r2, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   14538:	fa00 f202 	lsl.w	r2, r0, r2
   1453c:	4314      	orrs	r4, r2
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1453e:	3301      	adds	r3, #1
   14540:	2b08      	cmp	r3, #8
   14542:	d1e7      	bne.n	14514 <gpiote_event_handler+0x48>
	if (fired_triggers[0]) {
   14544:	bb4c      	cbnz	r4, 1459a <gpiote_event_handler+0xce>
	if (port_event) {
   14546:	b17e      	cbz	r6, 14568 <gpiote_event_handler+0x9c>
	u32_t bit = 1U << pin;
   14548:	2401      	movs	r4, #1
	u32_t pin = 0U;
   1454a:	2500      	movs	r5, #0
	const struct gpio_nrfx_data *data = get_port_data(port);
   1454c:	4b2f      	ldr	r3, [pc, #188]	; (1460c <gpiote_event_handler+0x140>)
   1454e:	4f32      	ldr	r7, [pc, #200]	; (14618 <gpiote_event_handler+0x14c>)
   14550:	68d8      	ldr	r0, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   14552:	685e      	ldr	r6, [r3, #4]
	u32_t out = data->int_en & data->pin_int_en;
   14554:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
   14558:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
   1455a:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
   1455e:	430a      	orrs	r2, r1
   14560:	ea23 0302 	bic.w	r3, r3, r2
	while (level_pins) {
   14564:	2b00      	cmp	r3, #0
   14566:	d133      	bne.n	145d0 <gpiote_event_handler+0x104>
}
   14568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1456c:	4203      	tst	r3, r0
   1456e:	d00f      	beq.n	14590 <gpiote_event_handler+0xc4>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   14570:	f89c 7008 	ldrb.w	r7, [ip, #8]
   14574:	f005 021f 	and.w	r2, r5, #31
   14578:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
   1457c:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   14580:	f8d2 7200 	ldr.w	r7, [r2, #512]	; 0x200
			level_pins &= ~bit;
   14584:	ea23 0300 	bic.w	r3, r3, r0
   14588:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1458c:	f8c2 7200 	str.w	r7, [r2, #512]	; 0x200
		++pin;
   14590:	3501      	adds	r5, #1
		bit <<= 1;
   14592:	0040      	lsls	r0, r0, #1
   14594:	e7b7      	b.n	14506 <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
   14596:	4634      	mov	r4, r6
   14598:	e7b7      	b.n	1450a <gpiote_event_handler+0x3e>
	struct gpio_nrfx_data *data = get_port_data(port);
   1459a:	481c      	ldr	r0, [pc, #112]	; (1460c <gpiote_event_handler+0x140>)
   1459c:	68c7      	ldr	r7, [r0, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1459e:	6879      	ldr	r1, [r7, #4]
   145a0:	2900      	cmp	r1, #0
   145a2:	d0d0      	beq.n	14546 <gpiote_event_handler+0x7a>
	return node->next;
   145a4:	680d      	ldr	r5, [r1, #0]
			cb->handler(port, cb, cb->pin_mask & pins);
   145a6:	4680      	mov	r8, r0
   145a8:	2d00      	cmp	r5, #0
   145aa:	bf38      	it	cc
   145ac:	2500      	movcc	r5, #0
		if ((cb->pin_mask & pins) & data->int_en) {
   145ae:	688a      	ldr	r2, [r1, #8]
   145b0:	693b      	ldr	r3, [r7, #16]
   145b2:	4022      	ands	r2, r4
   145b4:	421a      	tst	r2, r3
   145b6:	d002      	beq.n	145be <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
   145b8:	4640      	mov	r0, r8
   145ba:	684b      	ldr	r3, [r1, #4]
   145bc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   145be:	2d00      	cmp	r5, #0
   145c0:	d0c1      	beq.n	14546 <gpiote_event_handler+0x7a>
   145c2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   145c4:	4629      	mov	r1, r5
   145c6:	2b00      	cmp	r3, #0
   145c8:	bf38      	it	cc
   145ca:	2300      	movcc	r3, #0
   145cc:	461d      	mov	r5, r3
   145ce:	e7ee      	b.n	145ae <gpiote_event_handler+0xe2>
		if (level_pins & bit) {
   145d0:	421c      	tst	r4, r3
   145d2:	d016      	beq.n	14602 <gpiote_event_handler+0x136>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   145d4:	7a32      	ldrb	r2, [r6, #8]
   145d6:	f005 011f 	and.w	r1, r5, #31
   145da:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
   145de:	6942      	ldr	r2, [r0, #20]
   145e0:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   145e4:	f8d1 c200 	ldr.w	ip, [r1, #512]	; 0x200
   145e8:	40ea      	lsrs	r2, r5
   145ea:	f002 0201 	and.w	r2, r2, #1
   145ee:	f1c2 0203 	rsb	r2, r2, #3
   145f2:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   145f6:	ea4c 4202 	orr.w	r2, ip, r2, lsl #16
   145fa:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
			level_pins &= ~bit;
   145fe:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
   14602:	3501      	adds	r5, #1
		bit <<= 1;
   14604:	0064      	lsls	r4, r4, #1
   14606:	e7ad      	b.n	14564 <gpiote_event_handler+0x98>
   14608:	4003117c 	.word	0x4003117c
   1460c:	20020100 	.word	0x20020100
   14610:	40031000 	.word	0x40031000
   14614:	40031100 	.word	0x40031100
   14618:	40842500 	.word	0x40842500

0001461c <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   1461c:	2100      	movs	r1, #0
   1461e:	4802      	ldr	r0, [pc, #8]	; (14628 <pwm_nrfx_get_cycles_per_sec+0xc>)
   14620:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   14624:	2000      	movs	r0, #0
   14626:	4770      	bx	lr
   14628:	00f42400 	.word	0x00f42400

0001462c <pwm_nrfx_init>:

static int pwm_nrfx_init(struct device *dev)
{
	const struct pwm_nrfx_config *config = dev->config_info;

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   1462c:	2300      	movs	r3, #0
{
   1462e:	b510      	push	{r4, lr}
   14630:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config_info;
   14632:	6840      	ldr	r0, [r0, #4]
	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   14634:	461a      	mov	r2, r3
   14636:	f100 0108 	add.w	r1, r0, #8
   1463a:	f000 fa8d 	bl	14b58 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   1463e:	4b09      	ldr	r3, [pc, #36]	; (14664 <pwm_nrfx_init+0x38>)
   14640:	4298      	cmp	r0, r3
   14642:	d00d      	beq.n	14660 <pwm_nrfx_init+0x34>
   14644:	4b08      	ldr	r3, [pc, #32]	; (14668 <pwm_nrfx_init+0x3c>)
   14646:	4a09      	ldr	r2, [pc, #36]	; (1466c <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   14648:	4809      	ldr	r0, [pc, #36]	; (14670 <pwm_nrfx_init+0x44>)
   1464a:	1ad2      	subs	r2, r2, r3
   1464c:	08d2      	lsrs	r2, r2, #3
   1464e:	0192      	lsls	r2, r2, #6
   14650:	6821      	ldr	r1, [r4, #0]
   14652:	f042 0201 	orr.w	r2, r2, #1
   14656:	f012 f846 	bl	266e6 <log_1>
		return -EBUSY;
   1465a:	f06f 000f 	mvn.w	r0, #15
	}

	return 0;
}
   1465e:	bd10      	pop	{r4, pc}
	return 0;
   14660:	2000      	movs	r0, #0
   14662:	e7fc      	b.n	1465e <pwm_nrfx_init+0x32>
   14664:	0bad0000 	.word	0x0bad0000
   14668:	00031830 	.word	0x00031830
   1466c:	00031860 	.word	0x00031860
   14670:	00033e67 	.word	0x00033e67

00014674 <pwm_nrfx_pin_set>:
{
   14674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14678:	f89d 4020 	ldrb.w	r4, [sp, #32]
   1467c:	460f      	mov	r7, r1
   1467e:	4615      	mov	r5, r2
   14680:	4698      	mov	r8, r3
	const struct pwm_nrfx_config *config = dev->config_info;
   14682:	6846      	ldr	r6, [r0, #4]
	struct pwm_nrfx_data *data = dev->driver_data;
   14684:	68c1      	ldr	r1, [r0, #12]
	if (flags) {
   14686:	2c00      	cmp	r4, #0
   14688:	d17f      	bne.n	1478a <pwm_nrfx_pin_set+0x116>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   1468a:	1df2      	adds	r2, r6, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
   1468c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   14690:	2bff      	cmp	r3, #255	; 0xff
   14692:	d003      	beq.n	1469c <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
   14694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   14698:	429f      	cmp	r7, r3
   1469a:	d079      	beq.n	14790 <pwm_nrfx_pin_set+0x11c>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   1469c:	3401      	adds	r4, #1
   1469e:	b2e4      	uxtb	r4, r4
   146a0:	2c04      	cmp	r4, #4
   146a2:	d1f3      	bne.n	1468c <pwm_nrfx_pin_set+0x18>
   146a4:	4a59      	ldr	r2, [pc, #356]	; (1480c <pwm_nrfx_pin_set+0x198>)
   146a6:	4b5a      	ldr	r3, [pc, #360]	; (14810 <pwm_nrfx_pin_set+0x19c>)
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
   146a8:	4639      	mov	r1, r7
   146aa:	1ad2      	subs	r2, r2, r3
   146ac:	08d2      	lsrs	r2, r2, #3
   146ae:	0192      	lsls	r2, r2, #6
   146b0:	4858      	ldr	r0, [pc, #352]	; (14814 <pwm_nrfx_pin_set+0x1a0>)
   146b2:	f042 0201 	orr.w	r2, r2, #1
   146b6:	e045      	b.n	14744 <pwm_nrfx_pin_set+0xd0>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   146b8:	2000      	movs	r0, #0
   146ba:	e079      	b.n	147b0 <pwm_nrfx_pin_set+0x13c>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   146bc:	3301      	adds	r3, #1
   146be:	2b04      	cmp	r3, #4
   146c0:	f040 8084 	bne.w	147cc <pwm_nrfx_pin_set+0x158>
   146c4:	462a      	mov	r2, r5
   146c6:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   146c8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   146cc:	fa5f fe83 	uxtb.w	lr, r3
   146d0:	d22a      	bcs.n	14728 <pwm_nrfx_pin_set+0xb4>
			data->prescaler     = prescaler;
   146d2:	f881 e00e 	strb.w	lr, [r1, #14]
			nrf_pwm_configure(config->pwm.p_registers,
   146d6:	f8d6 e000 	ldr.w	lr, [r6]
			data->period_cycles = period_cycles;
   146da:	600d      	str	r5, [r1, #0]
			data->countertop    = (u16_t)countertop;
   146dc:	818a      	strh	r2, [r1, #12]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   146de:	f8ce 350c 	str.w	r3, [lr, #1292]	; 0x50c
    p_reg->MODE       = mode;
   146e2:	f8ce c504 	str.w	ip, [lr, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   146e6:	f8ce 2508 	str.w	r2, [lr, #1288]	; 0x508
	pulse_cycles = MIN(pulse_cycles, period_cycles);
   146ea:	4545      	cmp	r5, r8
   146ec:	462b      	mov	r3, r5
   146ee:	bf28      	it	cs
   146f0:	4643      	movcs	r3, r8
		| (pulse_cycles >> data->prescaler));
   146f2:	7b8a      	ldrb	r2, [r1, #14]
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   146f4:	f40a 4a00 	and.w	sl, sl, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
   146f8:	fa23 f202 	lsr.w	r2, r3, r2
   146fc:	ea42 020a 	orr.w	r2, r2, sl
   14700:	b292      	uxth	r2, r2
	data->current[channel] = (
   14702:	f8a9 2004 	strh.w	r2, [r9, #4]
	u16_t pulse_cycle =
   14706:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   1470a:	b11a      	cbz	r2, 14714 <pwm_nrfx_pin_set+0xa0>
   1470c:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
   14710:	4594      	cmp	ip, r2
   14712:	d81a      	bhi.n	1474a <pwm_nrfx_pin_set+0xd6>
			config->initial_config.output_pins[channel]
   14714:	1932      	adds	r2, r6, r4
   14716:	f992 0008 	ldrsb.w	r0, [r2, #8]
		bool pulse_0_and_not_inverted =
   1471a:	4a3f      	ldr	r2, [pc, #252]	; (14818 <pwm_nrfx_pin_set+0x1a4>)
			&& !channel_inverted_state;
   1471c:	b1c3      	cbz	r3, 14750 <pwm_nrfx_pin_set+0xdc>
			&& channel_inverted_state;
   1471e:	4545      	cmp	r5, r8
   14720:	d86f      	bhi.n	14802 <pwm_nrfx_pin_set+0x18e>
   14722:	2800      	cmp	r0, #0
   14724:	db16      	blt.n	14754 <pwm_nrfx_pin_set+0xe0>
   14726:	e06c      	b.n	14802 <pwm_nrfx_pin_set+0x18e>
		countertop >>= 1;
   14728:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   1472a:	2b08      	cmp	r3, #8
		countertop >>= 1;
   1472c:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   14730:	d1ca      	bne.n	146c8 <pwm_nrfx_pin_set+0x54>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   14732:	4629      	mov	r1, r5
   14734:	4a35      	ldr	r2, [pc, #212]	; (1480c <pwm_nrfx_pin_set+0x198>)
   14736:	4b36      	ldr	r3, [pc, #216]	; (14810 <pwm_nrfx_pin_set+0x19c>)
   14738:	4838      	ldr	r0, [pc, #224]	; (1481c <pwm_nrfx_pin_set+0x1a8>)
   1473a:	1ad2      	subs	r2, r2, r3
   1473c:	08d2      	lsrs	r2, r2, #3
   1473e:	0192      	lsls	r2, r2, #6
   14740:	f042 0201 	orr.w	r2, r2, #1
   14744:	f011 ffcf 	bl	266e6 <log_1>
   14748:	e055      	b.n	147f6 <pwm_nrfx_pin_set+0x182>
		if (was_stopped) {
   1474a:	b988      	cbnz	r0, 14770 <pwm_nrfx_pin_set+0xfc>
	return 0;
   1474c:	2000      	movs	r0, #0
   1474e:	e054      	b.n	147fa <pwm_nrfx_pin_set+0x186>
			&& channel_inverted_state;
   14750:	4545      	cmp	r5, r8
   14752:	d854      	bhi.n	147fe <pwm_nrfx_pin_set+0x18a>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   14754:	2301      	movs	r3, #1
   14756:	fa03 f707 	lsl.w	r7, r3, r7
    p_reg->OUTCLR = clr_mask;
   1475a:	60d7      	str	r7, [r2, #12]
		if (!any_other_channel_is_active(channel, data)) {
   1475c:	4620      	mov	r0, r4
   1475e:	f012 fbfc 	bl	26f5a <any_other_channel_is_active>
   14762:	2800      	cmp	r0, #0
   14764:	d1f2      	bne.n	1474c <pwm_nrfx_pin_set+0xd8>
			nrfx_pwm_stop(&config->pwm, false);
   14766:	4601      	mov	r1, r0
   14768:	4630      	mov	r0, r6
   1476a:	f012 fc8d 	bl	27088 <nrfx_pwm_stop>
   1476e:	e7ed      	b.n	1474c <pwm_nrfx_pin_set+0xd8>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   14770:	4630      	mov	r0, r6
   14772:	f000 faab 	bl	14ccc <nrfx_pwm_is_stopped>
   14776:	2800      	cmp	r0, #0
   14778:	d0fa      	beq.n	14770 <pwm_nrfx_pin_set+0xfc>
			nrfx_pwm_simple_playback(&config->pwm,
   1477a:	2302      	movs	r3, #2
   1477c:	2201      	movs	r2, #1
   1477e:	4630      	mov	r0, r6
   14780:	f106 0118 	add.w	r1, r6, #24
   14784:	f000 fa64 	bl	14c50 <nrfx_pwm_simple_playback>
   14788:	e7e0      	b.n	1474c <pwm_nrfx_pin_set+0xd8>
		return -ENOTSUP;
   1478a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1478e:	e034      	b.n	147fa <pwm_nrfx_pin_set+0x186>
	u16_t pulse_cycle =
   14790:	eb01 0944 	add.w	r9, r1, r4, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   14794:	f8b9 a004 	ldrh.w	sl, [r9, #4]
	u16_t pulse_cycle =
   14798:	f3ca 030e 	ubfx	r3, sl, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   1479c:	b113      	cbz	r3, 147a4 <pwm_nrfx_pin_set+0x130>
   1479e:	898a      	ldrh	r2, [r1, #12]
   147a0:	429a      	cmp	r2, r3
   147a2:	d889      	bhi.n	146b8 <pwm_nrfx_pin_set+0x44>
		      !any_other_channel_is_active(channel, data);
   147a4:	4620      	mov	r0, r4
   147a6:	f012 fbd8 	bl	26f5a <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   147aa:	f080 0001 	eor.w	r0, r0, #1
   147ae:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   147b0:	f896 c00e 	ldrb.w	ip, [r6, #14]
	if (period_cycles != data->period_cycles) {
   147b4:	680b      	ldr	r3, [r1, #0]
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   147b6:	f1bc 0f01 	cmp.w	ip, #1
		period_cycles /= 2;
   147ba:	bf04      	itt	eq
   147bc:	086d      	lsreq	r5, r5, #1
		pulse_cycles /= 2;
   147be:	ea4f 0858 	moveq.w	r8, r8, lsr #1
	if (period_cycles != data->period_cycles) {
   147c2:	42ab      	cmp	r3, r5
   147c4:	d091      	beq.n	146ea <pwm_nrfx_pin_set+0x76>
   147c6:	2300      	movs	r3, #0
				data->current[i]
   147c8:	f101 0e04 	add.w	lr, r1, #4
		if (i != channel) {
   147cc:	b2da      	uxtb	r2, r3
   147ce:	42a2      	cmp	r2, r4
   147d0:	f43f af74 	beq.w	146bc <pwm_nrfx_pin_set+0x48>
			u16_t channel_pulse_cycle =
   147d4:	f83e 2013 	ldrh.w	r2, [lr, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
   147d8:	f3c2 020e 	ubfx	r2, r2, #0, #15
   147dc:	2a00      	cmp	r2, #0
   147de:	f43f af6d 	beq.w	146bc <pwm_nrfx_pin_set+0x48>
   147e2:	490a      	ldr	r1, [pc, #40]	; (1480c <pwm_nrfx_pin_set+0x198>)
   147e4:	4b0a      	ldr	r3, [pc, #40]	; (14810 <pwm_nrfx_pin_set+0x19c>)
				LOG_ERR("Incompatible period.");
   147e6:	480e      	ldr	r0, [pc, #56]	; (14820 <pwm_nrfx_pin_set+0x1ac>)
   147e8:	1ac9      	subs	r1, r1, r3
   147ea:	08c9      	lsrs	r1, r1, #3
   147ec:	0189      	lsls	r1, r1, #6
   147ee:	f041 0101 	orr.w	r1, r1, #1
   147f2:	f011 ff69 	bl	266c8 <log_0>
	return -EINVAL;
   147f6:	f06f 0015 	mvn.w	r0, #21
}
   147fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
   147fe:	2800      	cmp	r0, #0
   14800:	daa8      	bge.n	14754 <pwm_nrfx_pin_set+0xe0>
    p_reg->OUTSET = set_mask;
   14802:	2301      	movs	r3, #1
   14804:	fa03 f707 	lsl.w	r7, r3, r7
   14808:	6097      	str	r7, [r2, #8]
}
   1480a:	e7a7      	b.n	1475c <pwm_nrfx_pin_set+0xe8>
   1480c:	00031860 	.word	0x00031860
   14810:	00031830 	.word	0x00031830
   14814:	00033ec6 	.word	0x00033ec6
   14818:	40842500 	.word	0x40842500
   1481c:	00033e9c 	.word	0x00033e9c
   14820:	00033e87 	.word	0x00033e87

00014824 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
   14824:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   14826:	794b      	ldrb	r3, [r1, #5]
   14828:	2b01      	cmp	r3, #1
   1482a:	d029      	beq.n	14880 <uarte_nrfx_configure+0x5c>
   1482c:	2b03      	cmp	r3, #3
   1482e:	d124      	bne.n	1487a <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   14830:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   14832:	798b      	ldrb	r3, [r1, #6]
   14834:	2b03      	cmp	r3, #3
   14836:	d120      	bne.n	1487a <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   14838:	79cc      	ldrb	r4, [r1, #7]
   1483a:	b124      	cbz	r4, 14846 <uarte_nrfx_configure+0x22>
   1483c:	2c01      	cmp	r4, #1
   1483e:	d11c      	bne.n	1487a <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   14840:	6843      	ldr	r3, [r0, #4]
   14842:	791b      	ldrb	r3, [r3, #4]
   14844:	b1cb      	cbz	r3, 1487a <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   14846:	790a      	ldrb	r2, [r1, #4]
   14848:	b112      	cbz	r2, 14850 <uarte_nrfx_configure+0x2c>
   1484a:	2a02      	cmp	r2, #2
   1484c:	d115      	bne.n	1487a <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1484e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   14850:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   14852:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   14854:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   14858:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1485a:	d064      	beq.n	14926 <uarte_nrfx_configure+0x102>
   1485c:	d82d      	bhi.n	148ba <uarte_nrfx_configure+0x96>
   1485e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   14862:	d063      	beq.n	1492c <uarte_nrfx_configure+0x108>
   14864:	d816      	bhi.n	14894 <uarte_nrfx_configure+0x70>
   14866:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1486a:	d061      	beq.n	14930 <uarte_nrfx_configure+0x10c>
   1486c:	d80a      	bhi.n	14884 <uarte_nrfx_configure+0x60>
   1486e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   14872:	d060      	beq.n	14936 <uarte_nrfx_configure+0x112>
   14874:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   14878:	d060      	beq.n	1493c <uarte_nrfx_configure+0x118>
   1487a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1487e:	e051      	b.n	14924 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
   14880:	2600      	movs	r6, #0
   14882:	e7d6      	b.n	14832 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   14884:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   14888:	d05b      	beq.n	14942 <uarte_nrfx_configure+0x11e>
   1488a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1488e:	d1f4      	bne.n	1487a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   14890:	4b36      	ldr	r3, [pc, #216]	; (1496c <uarte_nrfx_configure+0x148>)
   14892:	e03c      	b.n	1490e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14894:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   14898:	d056      	beq.n	14948 <uarte_nrfx_configure+0x124>
   1489a:	d807      	bhi.n	148ac <uarte_nrfx_configure+0x88>
   1489c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   148a0:	d054      	beq.n	1494c <uarte_nrfx_configure+0x128>
   148a2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   148a6:	d1e8      	bne.n	1487a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   148a8:	4b31      	ldr	r3, [pc, #196]	; (14970 <uarte_nrfx_configure+0x14c>)
   148aa:	e030      	b.n	1490e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   148ac:	f647 2712 	movw	r7, #31250	; 0x7a12
   148b0:	42bb      	cmp	r3, r7
   148b2:	d1e2      	bne.n	1487a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   148b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   148b8:	e029      	b.n	1490e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   148ba:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   148be:	d047      	beq.n	14950 <uarte_nrfx_configure+0x12c>
   148c0:	d813      	bhi.n	148ea <uarte_nrfx_configure+0xc6>
   148c2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   148c6:	d046      	beq.n	14956 <uarte_nrfx_configure+0x132>
   148c8:	d809      	bhi.n	148de <uarte_nrfx_configure+0xba>
   148ca:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   148ce:	42bb      	cmp	r3, r7
   148d0:	d043      	beq.n	1495a <uarte_nrfx_configure+0x136>
   148d2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   148d6:	d1d0      	bne.n	1487a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   148d8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   148dc:	e017      	b.n	1490e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   148de:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   148e2:	d1ca      	bne.n	1487a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   148e4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   148e8:	e011      	b.n	1490e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   148ea:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   148ee:	d037      	beq.n	14960 <uarte_nrfx_configure+0x13c>
   148f0:	d808      	bhi.n	14904 <uarte_nrfx_configure+0xe0>
   148f2:	4f20      	ldr	r7, [pc, #128]	; (14974 <uarte_nrfx_configure+0x150>)
   148f4:	42bb      	cmp	r3, r7
   148f6:	d036      	beq.n	14966 <uarte_nrfx_configure+0x142>
   148f8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   148fc:	d1bd      	bne.n	1487a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   148fe:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   14902:	e004      	b.n	1490e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   14904:	4f1c      	ldr	r7, [pc, #112]	; (14978 <uarte_nrfx_configure+0x154>)
   14906:	42bb      	cmp	r3, r7
   14908:	d1b7      	bne.n	1487a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1490a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1490e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
   14912:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   14914:	68c3      	ldr	r3, [r0, #12]
   14916:	4322      	orrs	r2, r4
   14918:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1491a:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1491e:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   14922:	2000      	movs	r0, #0
}
   14924:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   14926:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1492a:	e7f0      	b.n	1490e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1492c:	4b13      	ldr	r3, [pc, #76]	; (1497c <uarte_nrfx_configure+0x158>)
   1492e:	e7ee      	b.n	1490e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   14930:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   14934:	e7eb      	b.n	1490e <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   14936:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1493a:	e7e8      	b.n	1490e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1493c:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   14940:	e7e5      	b.n	1490e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   14942:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   14946:	e7e2      	b.n	1490e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   14948:	4b0d      	ldr	r3, [pc, #52]	; (14980 <uarte_nrfx_configure+0x15c>)
   1494a:	e7e0      	b.n	1490e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1494c:	4b0d      	ldr	r3, [pc, #52]	; (14984 <uarte_nrfx_configure+0x160>)
   1494e:	e7de      	b.n	1490e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   14950:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   14954:	e7db      	b.n	1490e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   14956:	4b0c      	ldr	r3, [pc, #48]	; (14988 <uarte_nrfx_configure+0x164>)
   14958:	e7d9      	b.n	1490e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1495a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1495e:	e7d6      	b.n	1490e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   14960:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   14964:	e7d3      	b.n	1490e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   14966:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1496a:	e7d0      	b.n	1490e <uarte_nrfx_configure+0xea>
   1496c:	0013b000 	.word	0x0013b000
   14970:	004ea000 	.word	0x004ea000
   14974:	0003d090 	.word	0x0003d090
   14978:	000f4240 	.word	0x000f4240
   1497c:	00275000 	.word	0x00275000
   14980:	0075c000 	.word	0x0075c000
   14984:	003af000 	.word	0x003af000
   14988:	013a9000 	.word	0x013a9000

0001498c <uarte_instance_init.isra.0>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1498c:	2201      	movs	r2, #1
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
   1498e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14990:	2703      	movs	r7, #3
   14992:	460d      	mov	r5, r1
	return config->uarte_regs;
   14994:	6843      	ldr	r3, [r0, #4]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
   14996:	6809      	ldr	r1, [r1, #0]
	return config->uarte_regs;
   14998:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
   1499a:	4b21      	ldr	r3, [pc, #132]	; (14a20 <uarte_instance_init.isra.0+0x94>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1499c:	408a      	lsls	r2, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
   1499e:	68c6      	ldr	r6, [r0, #12]
    p_reg->OUTSET = set_mask;
   149a0:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   149a2:	f101 0280 	add.w	r2, r1, #128	; 0x80
   149a6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   149aa:	686a      	ldr	r2, [r5, #4]
   149ac:	1c57      	adds	r7, r2, #1
   149ae:	bf1e      	ittt	ne
   149b0:	f04f 0c00 	movne.w	ip, #0
   149b4:	f102 0780 	addne.w	r7, r2, #128	; 0x80
   149b8:	f843 c027 	strne.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
   149bc:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   149c0:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
   149c2:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
   149c6:	1c4a      	adds	r2, r1, #1
   149c8:	d015      	beq.n	149f6 <uarte_instance_init.isra.0+0x6a>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   149ca:	68ea      	ldr	r2, [r5, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
   149cc:	1c57      	adds	r7, r2, #1
   149ce:	d012      	beq.n	149f6 <uarte_instance_init.isra.0+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   149d0:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   149d2:	f04f 0c03 	mov.w	ip, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   149d6:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
   149d8:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   149da:	f102 0780 	add.w	r7, r2, #128	; 0x80
   149de:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
   149e2:	f04f 0c00 	mov.w	ip, #0
   149e6:	f101 0780 	add.w	r7, r1, #128	; 0x80
   149ea:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.RTS = pselrts;
   149ee:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   149f2:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   149f6:	4631      	mov	r1, r6
   149f8:	f7ff ff14 	bl	14824 <uarte_nrfx_configure>
	if (err) {
   149fc:	b970      	cbnz	r0, 14a1c <uarte_instance_init.isra.0+0x90>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   149fe:	2308      	movs	r3, #8
   14a00:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   14a04:	686b      	ldr	r3, [r5, #4]
   14a06:	3301      	adds	r3, #1
   14a08:	d008      	beq.n	14a1c <uarte_instance_init.isra.0+0x90>
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
   14a0a:	2301      	movs	r3, #1
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   14a0c:	360c      	adds	r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14a0e:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   14a12:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   14a16:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14a1a:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
   14a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14a1e:	bf00      	nop
   14a20:	40842500 	.word	0x40842500

00014a24 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   14a24:	b530      	push	{r4, r5, lr}
   14a26:	b085      	sub	sp, #20
   14a28:	4605      	mov	r5, r0
   14a2a:	466c      	mov	r4, sp
   14a2c:	4b04      	ldr	r3, [pc, #16]	; (14a40 <uarte_0_init+0x1c>)
   14a2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14a30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   14a34:	4621      	mov	r1, r4
   14a36:	4628      	mov	r0, r5
   14a38:	f7ff ffa8 	bl	1498c <uarte_instance_init.isra.0>
   14a3c:	b005      	add	sp, #20
   14a3e:	bd30      	pop	{r4, r5, pc}
   14a40:	00031890 	.word	0x00031890

00014a44 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   14a44:	b530      	push	{r4, r5, lr}
   14a46:	b085      	sub	sp, #20
   14a48:	4605      	mov	r5, r0
   14a4a:	466c      	mov	r4, sp
   14a4c:	4b04      	ldr	r3, [pc, #16]	; (14a60 <uarte_1_init+0x1c>)
   14a4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   14a50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   14a54:	4621      	mov	r1, r4
   14a56:	4628      	mov	r0, r5
   14a58:	f7ff ff98 	bl	1498c <uarte_instance_init.isra.0>
   14a5c:	b005      	add	sp, #20
   14a5e:	bd30      	pop	{r4, r5, pc}
   14a60:	000318a0 	.word	0x000318a0

00014a64 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   14a64:	b508      	push	{r3, lr}
	z_impl_log_panic();
   14a66:	f7fd ffe5 	bl	12a34 <z_impl_log_panic>
   14a6a:	4b06      	ldr	r3, [pc, #24]	; (14a84 <k_sys_fatal_error_handler+0x20>)
   14a6c:	4906      	ldr	r1, [pc, #24]	; (14a88 <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
   14a6e:	4807      	ldr	r0, [pc, #28]	; (14a8c <k_sys_fatal_error_handler+0x28>)
   14a70:	1ac9      	subs	r1, r1, r3
   14a72:	08c9      	lsrs	r1, r1, #3
   14a74:	0189      	lsls	r1, r1, #6
   14a76:	f041 0101 	orr.w	r1, r1, #1
   14a7a:	f011 fe25 	bl	266c8 <log_0>
	sys_arch_reboot(0);
   14a7e:	2000      	movs	r0, #0
   14a80:	f7ff f97a 	bl	13d78 <sys_arch_reboot>

	CODE_UNREACHABLE;
   14a84:	00031830 	.word	0x00031830
   14a88:	00031838 	.word	0x00031838
   14a8c:	00033f25 	.word	0x00033f25

00014a90 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
   14a90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14a94:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
   14a96:	4c21      	ldr	r4, [pc, #132]	; (14b1c <check_ext_api_requests+0x8c>)
 */
static inline const struct fw_info_ext_api *fw_info_ext_api_check(
							u32_t ext_api_addr)
{
	const struct fw_info_ext_api *ext_api;
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
   14a98:	4e21      	ldr	r6, [pc, #132]	; (14b20 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14a9a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
   14a9e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 14b28 <check_ext_api_requests+0x98>
{
   14aa2:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14aa4:	45a8      	cmp	r8, r5
   14aa6:	d803      	bhi.n	14ab0 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
   14aa8:	2000      	movs	r0, #0
   14aaa:	b005      	add	sp, #20
   14aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
   14ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14ab2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   14ab6:	681f      	ldr	r7, [r3, #0]
   14ab8:	ab01      	add	r3, sp, #4
   14aba:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	ext_api = (const struct fw_info_ext_api *)(ext_api_addr);
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
   14abe:	220c      	movs	r2, #12
   14ac0:	4619      	mov	r1, r3
   14ac2:	4638      	mov	r0, r7
   14ac4:	f01c f9c2 	bl	30e4c <memcmp>
   14ac8:	b990      	cbnz	r0, 14af0 <check_ext_api_requests+0x60>
   14aca:	b18f      	cbz	r7, 14af0 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   14acc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
   14ace:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
   14ad0:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
   14ad2:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   14ad4:	4291      	cmp	r1, r2
   14ad6:	d10b      	bne.n	14af0 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
   14ad8:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
   14ada:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
   14adc:	4291      	cmp	r1, r2
   14ade:	d807      	bhi.n	14af0 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
   14ae0:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
   14ae2:	4291      	cmp	r1, r2
   14ae4:	d904      	bls.n	14af0 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
   14ae6:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
   14ae8:	695b      	ldr	r3, [r3, #20]
   14aea:	ea32 0303 	bics.w	r3, r2, r3
   14aee:	d00a      	beq.n	14b06 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
   14af0:	6a27      	ldr	r7, [r4, #32]
   14af2:	b167      	cbz	r7, 14b0e <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
   14af4:	480b      	ldr	r0, [pc, #44]	; (14b24 <check_ext_api_requests+0x94>)
   14af6:	f011 fcdf 	bl	264b8 <printk>
			k_panic();
   14afa:	4040      	eors	r0, r0
   14afc:	f380 8811 	msr	BASEPRI, r0
   14b00:	f04f 0004 	mov.w	r0, #4
   14b04:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
   14b06:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14b08:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
   14b0a:	441c      	add	r4, r3
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
   14b0c:	e7ca      	b.n	14aa4 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
   14b0e:	4648      	mov	r0, r9
   14b10:	f011 fcd2 	bl	264b8 <printk>
			*ext_api_req->ext_api = NULL;
   14b14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14b16:	601f      	str	r7, [r3, #0]
   14b18:	e7f5      	b.n	14b06 <check_ext_api_requests+0x76>
   14b1a:	bf00      	nop
   14b1c:	0000c23c 	.word	0x0000c23c
   14b20:	000318b0 	.word	0x000318b0
   14b24:	00033f42 	.word	0x00033f42
   14b28:	00033f6b 	.word	0x00033f6b

00014b2c <SystemInit>:
    
    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
    * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
    * operations are not used in your code. */
    #if (__FPU_USED == 1)
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
   14b2c:	4a07      	ldr	r2, [pc, #28]	; (14b4c <SystemInit+0x20>)
   14b2e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   14b32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
   14b36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
   14b3a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   14b3e:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
   14b42:	4b03      	ldr	r3, [pc, #12]	; (14b50 <SystemInit+0x24>)
   14b44:	4a03      	ldr	r2, [pc, #12]	; (14b54 <SystemInit+0x28>)
   14b46:	601a      	str	r2, [r3, #0]
      __DSB();
      __ISB();
    #endif
    
    SystemCoreClockUpdate();
}
   14b48:	4770      	bx	lr
   14b4a:	bf00      	nop
   14b4c:	e000ed00 	.word	0xe000ed00
   14b50:	20020044 	.word	0x20020044
   14b54:	03d09000 	.word	0x03d09000

00014b58 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   14b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   14b5c:	260c      	movs	r6, #12
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   14b5e:	7905      	ldrb	r5, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   14b60:	4c37      	ldr	r4, [pc, #220]	; (14c40 <nrfx_pwm_init+0xe8>)
   14b62:	436e      	muls	r6, r5
   14b64:	19a7      	adds	r7, r4, r6
   14b66:	f897 c008 	ldrb.w	ip, [r7, #8]
{
   14b6a:	b085      	sub	sp, #20
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   14b6c:	f1bc 0f00 	cmp.w	ip, #0
   14b70:	d164      	bne.n	14c3c <nrfx_pwm_init+0xe4>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
   14b72:	51a2      	str	r2, [r4, r6]
    p_cb->p_context = p_context;
   14b74:	f04f 0a01 	mov.w	sl, #1
   14b78:	466e      	mov	r6, sp
   14b7a:	f04f 0b03 	mov.w	fp, #3
   14b7e:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 14c4c <nrfx_pwm_init+0xf4>
   14b82:	607b      	str	r3, [r7, #4]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   14b84:	f101 0903 	add.w	r9, r1, #3
   14b88:	1e4f      	subs	r7, r1, #1
        uint8_t output_pin = p_config->output_pins[i];
   14b8a:	f817 ef01 	ldrb.w	lr, [r7, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   14b8e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   14b92:	d04f      	beq.n	14c34 <nrfx_pwm_init+0xdc>
            if (!p_config->skip_gpio_cfg)
   14b94:	f891 800c 	ldrb.w	r8, [r1, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   14b98:	f02e 0380 	bic.w	r3, lr, #128	; 0x80
   14b9c:	6033      	str	r3, [r6, #0]
            if (!p_config->skip_gpio_cfg)
   14b9e:	f1b8 0f00 	cmp.w	r8, #0
   14ba2:	d10c      	bne.n	14bbe <nrfx_pwm_init+0x66>
                if (inverted)
   14ba4:	fa0a f803 	lsl.w	r8, sl, r3
   14ba8:	f01e 0f80 	tst.w	lr, #128	; 0x80
   14bac:	f103 0380 	add.w	r3, r3, #128	; 0x80
    p_reg->OUTSET = set_mask;
   14bb0:	bf14      	ite	ne
   14bb2:	f8cc 8008 	strne.w	r8, [ip, #8]
    p_reg->OUTCLR = clr_mask;
   14bb6:	f8cc 800c 	streq.w	r8, [ip, #12]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   14bba:	f84c b023 	str.w	fp, [ip, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   14bbe:	454f      	cmp	r7, r9
   14bc0:	f106 0604 	add.w	r6, r6, #4
   14bc4:	d1e1      	bne.n	14b8a <nrfx_pwm_init+0x32>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   14bc6:	6800      	ldr	r0, [r0, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
   14bc8:	9b00      	ldr	r3, [sp, #0]
   14bca:	f8c0 3560 	str.w	r3, [r0, #1376]	; 0x560
   14bce:	9b01      	ldr	r3, [sp, #4]
   14bd0:	f8c0 3564 	str.w	r3, [r0, #1380]	; 0x564
   14bd4:	9b02      	ldr	r3, [sp, #8]
   14bd6:	f8c0 3568 	str.w	r3, [r0, #1384]	; 0x568
   14bda:	9b03      	ldr	r3, [sp, #12]
   14bdc:	f8c0 356c 	str.w	r3, [r0, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   14be0:	2301      	movs	r3, #1
   14be2:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
   14be6:	798e      	ldrb	r6, [r1, #6]
   14be8:	890b      	ldrh	r3, [r1, #8]
    p_reg->PRESCALER  = base_clock;
   14bea:	794f      	ldrb	r7, [r1, #5]
   14bec:	f8c0 750c 	str.w	r7, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
   14bf0:	f8c0 6504 	str.w	r6, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   14bf4:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   14bf8:	894b      	ldrh	r3, [r1, #10]
   14bfa:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
   14bfe:	2300      	movs	r3, #0
   14c00:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
   14c04:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14c08:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   14c0c:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   14c10:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   14c14:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   14c18:	b11a      	cbz	r2, 14c22 <nrfx_pwm_init+0xca>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   14c1a:	f340 3007 	sbfx	r0, r0, #12, #8
   14c1e:	f7fe fd59 	bl	136d4 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   14c22:	230c      	movs	r3, #12
   14c24:	fb03 4405 	mla	r4, r3, r5, r4
   14c28:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   14c2a:	4806      	ldr	r0, [pc, #24]	; (14c44 <nrfx_pwm_init+0xec>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   14c2c:	7223      	strb	r3, [r4, #8]
}
   14c2e:	b005      	add	sp, #20
   14c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   14c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14c38:	6033      	str	r3, [r6, #0]
   14c3a:	e7c0      	b.n	14bbe <nrfx_pwm_init+0x66>
        return err_code;
   14c3c:	4802      	ldr	r0, [pc, #8]	; (14c48 <nrfx_pwm_init+0xf0>)
   14c3e:	e7f6      	b.n	14c2e <nrfx_pwm_init+0xd6>
   14c40:	200216d0 	.word	0x200216d0
   14c44:	0bad0000 	.word	0x0bad0000
   14c48:	0bad0005 	.word	0x0bad0005
   14c4c:	40842500 	.word	0x40842500

00014c50 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   14c50:	b4f0      	push	{r4, r5, r6, r7}
   14c52:	460d      	mov	r5, r1
   14c54:	461c      	mov	r4, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   14c56:	7901      	ldrb	r1, [r0, #4]
   14c58:	4b1b      	ldr	r3, [pc, #108]	; (14cc8 <nrfx_pwm_simple_playback+0x78>)
   14c5a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   14c5e:	6800      	ldr	r0, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   14c60:	f8d5 c000 	ldr.w	ip, [r5]
    p_reg->SEQ[seq_id].CNT = length;
   14c64:	88af      	ldrh	r7, [r5, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   14c66:	68ae      	ldr	r6, [r5, #8]
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   14c68:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   14c6c:	68eb      	ldr	r3, [r5, #12]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   14c6e:	f8c0 c520 	str.w	ip, [r0, #1312]	; 0x520
    p_reg->SEQ[seq_id].CNT = length;
   14c72:	f8c0 7524 	str.w	r7, [r0, #1316]	; 0x524
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   14c76:	f8c0 6528 	str.w	r6, [r0, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   14c7a:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   14c7e:	f8c0 c540 	str.w	ip, [r0, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
   14c82:	f8c0 7544 	str.w	r7, [r0, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   14c86:	f8c0 6548 	str.w	r6, [r0, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   14c8a:	f8c0 354c 	str.w	r3, [r0, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
   14c8e:	f002 0301 	and.w	r3, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   14c92:	eb03 0252 	add.w	r2, r3, r2, lsr #1
   14c96:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   14c9a:	07e2      	lsls	r2, r4, #31
   14c9c:	d411      	bmi.n	14cc2 <nrfx_pwm_simple_playback+0x72>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
   14c9e:	f014 0202 	ands.w	r2, r4, #2
   14ca2:	d003      	beq.n	14cac <nrfx_pwm_simple_playback+0x5c>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   14ca4:	2b00      	cmp	r3, #0
   14ca6:	bf14      	ite	ne
   14ca8:	2208      	movne	r2, #8
   14caa:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   14cac:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
   14cae:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
   14cb2:	bf18      	it	ne
   14cb4:	230c      	movne	r3, #12
   14cb6:	b2e2      	uxtb	r2, r4
   14cb8:	bf08      	it	eq
   14cba:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   14cbc:	bcf0      	pop	{r4, r5, r6, r7}
    return start_playback(p_instance, p_cb, flags,
   14cbe:	f012 b9c2 	b.w	27046 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   14cc2:	2210      	movs	r2, #16
   14cc4:	e7f2      	b.n	14cac <nrfx_pwm_simple_playback+0x5c>
   14cc6:	bf00      	nop
   14cc8:	200216d0 	.word	0x200216d0

00014ccc <nrfx_pwm_is_stopped>:

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   14ccc:	210c      	movs	r1, #12
   14cce:	4b08      	ldr	r3, [pc, #32]	; (14cf0 <nrfx_pwm_is_stopped+0x24>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   14cd0:	7902      	ldrb	r2, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   14cd2:	fb01 3202 	mla	r2, r1, r2, r3
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   14cd6:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   14cd8:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14cda:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   14cde:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   14ce0:	b919      	cbnz	r1, 14cea <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   14ce2:	1e98      	subs	r0, r3, #2
   14ce4:	bf18      	it	ne
   14ce6:	2001      	movne	r0, #1
   14ce8:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   14cea:	2001      	movs	r0, #1
   14cec:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   14cee:	4770      	bx	lr
   14cf0:	200216d0 	.word	0x200216d0

00014cf4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
   14cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   14cf6:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   14cf8:	4b08      	ldr	r3, [pc, #32]	; (14d1c <z_sys_init_run_level+0x28>)
   14cfa:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   14cfe:	3001      	adds	r0, #1
   14d00:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   14d04:	42a6      	cmp	r6, r4
   14d06:	d800      	bhi.n	14d0a <z_sys_init_run_level+0x16>
			}
		}
	}
}
   14d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   14d0a:	e9d4 3500 	ldrd	r3, r5, [r4]
   14d0e:	4628      	mov	r0, r5
   14d10:	4798      	blx	r3
		if (retval != 0) {
   14d12:	b108      	cbz	r0, 14d18 <z_sys_init_run_level+0x24>
			if (dev) {
   14d14:	b105      	cbz	r5, 14d18 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   14d16:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   14d18:	3408      	adds	r4, #8
   14d1a:	e7f3      	b.n	14d04 <z_sys_init_run_level+0x10>
   14d1c:	00032f94 	.word	0x00032f94

00014d20 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   14d20:	4b0f      	ldr	r3, [pc, #60]	; (14d60 <z_impl_device_get_binding+0x40>)
{
   14d22:	b570      	push	{r4, r5, r6, lr}
   14d24:	4605      	mov	r5, r0
   14d26:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   14d28:	4c0e      	ldr	r4, [pc, #56]	; (14d64 <z_impl_device_get_binding+0x44>)
   14d2a:	429c      	cmp	r4, r3
   14d2c:	d104      	bne.n	14d38 <z_impl_device_get_binding+0x18>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   14d2e:	4c0d      	ldr	r4, [pc, #52]	; (14d64 <z_impl_device_get_binding+0x44>)
   14d30:	42b4      	cmp	r4, r6
   14d32:	d108      	bne.n	14d46 <z_impl_device_get_binding+0x26>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   14d34:	2400      	movs	r4, #0
   14d36:	e010      	b.n	14d5a <z_impl_device_get_binding+0x3a>
		if ((dev->driver_api != NULL) &&
   14d38:	68a2      	ldr	r2, [r4, #8]
   14d3a:	b112      	cbz	r2, 14d42 <z_impl_device_get_binding+0x22>
   14d3c:	6822      	ldr	r2, [r4, #0]
   14d3e:	42aa      	cmp	r2, r5
   14d40:	d00b      	beq.n	14d5a <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   14d42:	3410      	adds	r4, #16
   14d44:	e7f1      	b.n	14d2a <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
   14d46:	68a3      	ldr	r3, [r4, #8]
   14d48:	b90b      	cbnz	r3, 14d4e <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   14d4a:	3410      	adds	r4, #16
   14d4c:	e7f0      	b.n	14d30 <z_impl_device_get_binding+0x10>
		    (strcmp(name, dev->name) == 0)) {
   14d4e:	4628      	mov	r0, r5
   14d50:	6821      	ldr	r1, [r4, #0]
   14d52:	f7fc fed7 	bl	11b04 <strcmp>
		if ((dev->driver_api != NULL) &&
   14d56:	2800      	cmp	r0, #0
   14d58:	d1f7      	bne.n	14d4a <z_impl_device_get_binding+0x2a>
}
   14d5a:	4620      	mov	r0, r4
   14d5c:	bd70      	pop	{r4, r5, r6, pc}
   14d5e:	bf00      	nop
   14d60:	20020120 	.word	0x20020120
   14d64:	200200c0 	.word	0x200200c0

00014d68 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   14d68:	4b01      	ldr	r3, [pc, #4]	; (14d70 <z_impl_z_errno+0x8>)
   14d6a:	6898      	ldr	r0, [r3, #8]
}
   14d6c:	305c      	adds	r0, #92	; 0x5c
   14d6e:	4770      	bx	lr
   14d70:	200217c4 	.word	0x200217c4

00014d74 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   14d74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   14d78:	4605      	mov	r5, r0
   14d7a:	460f      	mov	r7, r1
   14d7c:	f04f 0320 	mov.w	r3, #32
   14d80:	f3ef 8811 	mrs	r8, BASEPRI
   14d84:	f383 8811 	msr	BASEPRI, r3
   14d88:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   14d8c:	f000 fdc4 	bl	15918 <z_impl_k_current_get>
   14d90:	4c22      	ldr	r4, [pc, #136]	; (14e1c <z_fatal_error+0xa8>)
   14d92:	4b23      	ldr	r3, [pc, #140]	; (14e20 <z_fatal_error+0xac>)
   14d94:	2d04      	cmp	r5, #4
   14d96:	eba4 0403 	sub.w	r4, r4, r3
   14d9a:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   14d9e:	bf98      	it	ls
   14da0:	4a20      	ldrls	r2, [pc, #128]	; (14e24 <z_fatal_error+0xb0>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   14da2:	ea4f 1484 	mov.w	r4, r4, lsl #6
   14da6:	f044 0301 	orr.w	r3, r4, #1
   14daa:	4606      	mov	r6, r0
	switch (reason) {
   14dac:	bf94      	ite	ls
   14dae:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   14db2:	4a1d      	ldrhi	r2, [pc, #116]	; (14e28 <z_fatal_error+0xb4>)
   14db4:	f8ad 3000 	strh.w	r3, [sp]
   14db8:	4629      	mov	r1, r5
   14dba:	2300      	movs	r3, #0
   14dbc:	481b      	ldr	r0, [pc, #108]	; (14e2c <z_fatal_error+0xb8>)
   14dbe:	f011 fcc2 	bl	26746 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   14dc2:	b147      	cbz	r7, 14dd6 <z_fatal_error+0x62>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   14dc4:	69fb      	ldr	r3, [r7, #28]
   14dc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   14dca:	b123      	cbz	r3, 14dd6 <z_fatal_error+0x62>
		LOG_ERR("Fault during interrupt handling\n");
   14dcc:	4818      	ldr	r0, [pc, #96]	; (14e30 <z_fatal_error+0xbc>)
   14dce:	f044 0101 	orr.w	r1, r4, #1
   14dd2:	f011 fc79 	bl	266c8 <log_0>
	const char *thread_name = k_thread_name_get(thread);
   14dd6:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   14dd8:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   14ddc:	f012 fa89 	bl	272f2 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   14de0:	b1d0      	cbz	r0, 14e18 <z_fatal_error+0xa4>
   14de2:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   14de4:	4b13      	ldr	r3, [pc, #76]	; (14e34 <z_fatal_error+0xc0>)
   14de6:	2a00      	cmp	r2, #0
   14de8:	bf08      	it	eq
   14dea:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   14dec:	f7fd fcac 	bl	12748 <log_strdup>
   14df0:	4623      	mov	r3, r4
   14df2:	4602      	mov	r2, r0
   14df4:	4631      	mov	r1, r6
   14df6:	4810      	ldr	r0, [pc, #64]	; (14e38 <z_fatal_error+0xc4>)
   14df8:	f011 fc8c 	bl	26714 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   14dfc:	4639      	mov	r1, r7
   14dfe:	4628      	mov	r0, r5
   14e00:	f7ff fe30 	bl	14a64 <k_sys_fatal_error_handler>
	__asm__ volatile(
   14e04:	f388 8811 	msr	BASEPRI, r8
   14e08:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   14e0c:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   14e0e:	b002      	add	sp, #8
   14e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   14e14:	f7fe bfce 	b.w	13db4 <z_impl_k_thread_abort>
		thread_name = "unknown";
   14e18:	4806      	ldr	r0, [pc, #24]	; (14e34 <z_fatal_error+0xc0>)
   14e1a:	e7e7      	b.n	14dec <z_fatal_error+0x78>
   14e1c:	00031850 	.word	0x00031850
   14e20:	00031830 	.word	0x00031830
   14e24:	00032fac 	.word	0x00032fac
   14e28:	00033f9e 	.word	0x00033f9e
   14e2c:	00033fb4 	.word	0x00033fb4
   14e30:	00033fdc 	.word	0x00033fdc
   14e34:	00033fac 	.word	0x00033fac
   14e38:	00033ffd 	.word	0x00033ffd

00014e3c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   14e3c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   14e3e:	4d0b      	ldr	r5, [pc, #44]	; (14e6c <idle+0x30>)
	__asm__ volatile(
   14e40:	f04f 0220 	mov.w	r2, #32
   14e44:	f3ef 8311 	mrs	r3, BASEPRI
   14e48:	f382 8811 	msr	BASEPRI, r2
   14e4c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
   14e50:	f012 fa67 	bl	27322 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   14e54:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
   14e56:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   14e58:	2802      	cmp	r0, #2
   14e5a:	bfd8      	it	le
   14e5c:	4608      	movle	r0, r1
   14e5e:	f012 fa70 	bl	27342 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   14e62:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   14e64:	f7fe fc9a 	bl	1379c <arch_cpu_idle>
}
   14e68:	e7ea      	b.n	14e40 <idle+0x4>
   14e6a:	bf00      	nop
   14e6c:	200217c4 	.word	0x200217c4

00014e70 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   14e70:	4802      	ldr	r0, [pc, #8]	; (14e7c <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   14e72:	4a03      	ldr	r2, [pc, #12]	; (14e80 <z_bss_zero+0x10>)
   14e74:	2100      	movs	r1, #0
   14e76:	1a12      	subs	r2, r2, r0
   14e78:	f01c b81d 	b.w	30eb6 <memset>
   14e7c:	20020180 	.word	0x20020180
   14e80:	20027134 	.word	0x20027134

00014e84 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   14e84:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14e86:	4806      	ldr	r0, [pc, #24]	; (14ea0 <z_data_copy+0x1c>)
   14e88:	4a06      	ldr	r2, [pc, #24]	; (14ea4 <z_data_copy+0x20>)
   14e8a:	4907      	ldr	r1, [pc, #28]	; (14ea8 <z_data_copy+0x24>)
   14e8c:	1a12      	subs	r2, r2, r0
   14e8e:	f01b ffeb 	bl	30e68 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   14e92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   14e96:	4a05      	ldr	r2, [pc, #20]	; (14eac <z_data_copy+0x28>)
   14e98:	4905      	ldr	r1, [pc, #20]	; (14eb0 <z_data_copy+0x2c>)
   14e9a:	4806      	ldr	r0, [pc, #24]	; (14eb4 <z_data_copy+0x30>)
   14e9c:	f01b bfe4 	b.w	30e68 <memcpy>
   14ea0:	20020000 	.word	0x20020000
   14ea4:	20020180 	.word	0x20020180
   14ea8:	0003771c 	.word	0x0003771c
   14eac:	00000000 	.word	0x00000000
   14eb0:	0003771c 	.word	0x0003771c
   14eb4:	20020000 	.word	0x20020000

00014eb8 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   14eb8:	2201      	movs	r2, #1
{
   14eba:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   14ebc:	4b0d      	ldr	r3, [pc, #52]	; (14ef4 <bg_thread_main+0x3c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   14ebe:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   14ec0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   14ec2:	f7ff ff17 	bl	14cf4 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   14ec6:	4a0c      	ldr	r2, [pc, #48]	; (14ef8 <bg_thread_main+0x40>)
   14ec8:	490c      	ldr	r1, [pc, #48]	; (14efc <bg_thread_main+0x44>)
   14eca:	480d      	ldr	r0, [pc, #52]	; (14f00 <bg_thread_main+0x48>)
   14ecc:	f011 faf4 	bl	264b8 <printk>

#ifdef CONFIG_CPLUSPLUS
	/* Process the .ctors and .init_array sections */
	extern void __do_global_ctors_aux(void);
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
   14ed0:	f7fe f8e0 	bl	13094 <__do_global_ctors_aux>
	__do_init_array_aux();
   14ed4:	f7fe f8d0 	bl	13078 <__do_init_array_aux>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   14ed8:	2003      	movs	r0, #3
   14eda:	f7ff ff0b 	bl	14cf4 <z_sys_init_run_level>

	z_init_static_threads();
   14ede:	f000 fdbd 	bl	15a5c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   14ee2:	f011 fab1 	bl	26448 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   14ee6:	4a07      	ldr	r2, [pc, #28]	; (14f04 <bg_thread_main+0x4c>)
   14ee8:	7b13      	ldrb	r3, [r2, #12]
   14eea:	f023 0301 	bic.w	r3, r3, #1
   14eee:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   14ef0:	bd08      	pop	{r3, pc}
   14ef2:	bf00      	nop
   14ef4:	20027127 	.word	0x20027127
   14ef8:	00033f9d 	.word	0x00033f9d
   14efc:	0003405f 	.word	0x0003405f
   14f00:	0003406f 	.word	0x0003406f
   14f04:	20021750 	.word	0x20021750

00014f08 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   14f08:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   14f0c:	b0a5      	sub	sp, #148	; 0x94
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   14f0e:	f7fd fb6f 	bl	125f0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
   14f12:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 15000 <z_cstart+0xf8>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   14f16:	f389 8808 	msr	MSP, r9
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   14f1a:	2400      	movs	r4, #0
   14f1c:	23e0      	movs	r3, #224	; 0xe0
   14f1e:	4d31      	ldr	r5, [pc, #196]	; (14fe4 <z_cstart+0xdc>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
   14f20:	f04f 0b01 	mov.w	fp, #1
   14f24:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   14f28:	77ec      	strb	r4, [r5, #31]
   14f2a:	762c      	strb	r4, [r5, #24]
   14f2c:	766c      	strb	r4, [r5, #25]
   14f2e:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   14f30:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
   14f32:	4e2d      	ldr	r6, [pc, #180]	; (14fe8 <z_cstart+0xe0>)
   14f34:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   14f38:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   14f3a:	f7fe ff07 	bl	13d4c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   14f3e:	f7fe fc27 	bl	13790 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   14f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14f46:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   14f48:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
   14f4a:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   14f4e:	4d27      	ldr	r5, [pc, #156]	; (14fec <z_cstart+0xe4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   14f50:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
   14f54:	ab07      	add	r3, sp, #28
   14f56:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   14f58:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   14f5a:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
   14f5e:	f7ff fec9 	bl	14cf4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   14f62:	2001      	movs	r0, #1
   14f64:	f7ff fec6 	bl	14cf4 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   14f68:	f8df a098 	ldr.w	sl, [pc, #152]	; 15004 <z_cstart+0xfc>
	z_sched_init();
   14f6c:	f000 fc5a 	bl	15824 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
   14f70:	f8df 8094 	ldr.w	r8, [pc, #148]	; 15008 <z_cstart+0x100>
   14f74:	4b1e      	ldr	r3, [pc, #120]	; (14ff0 <z_cstart+0xe8>)
	_kernel.ready_q.cache = &z_main_thread;
   14f76:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
   14f78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   14f7c:	4641      	mov	r1, r8
   14f7e:	4630      	mov	r0, r6
   14f80:	9305      	str	r3, [sp, #20]
   14f82:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   14f86:	4653      	mov	r3, sl
   14f88:	e9cd 4401 	strd	r4, r4, [sp, #4]
   14f8c:	9400      	str	r4, [sp, #0]
   14f8e:	f000 fd13 	bl	159b8 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   14f92:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
   14f94:	4630      	mov	r0, r6
   14f96:	f023 0304 	bic.w	r3, r3, #4
   14f9a:	7373      	strb	r3, [r6, #13]
   14f9c:	f012 f8fb 	bl	27196 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   14fa0:	230f      	movs	r3, #15
   14fa2:	4f14      	ldr	r7, [pc, #80]	; (14ff4 <z_cstart+0xec>)
   14fa4:	f44f 72a0 	mov.w	r2, #320	; 0x140
   14fa8:	4638      	mov	r0, r7
   14faa:	e9cd 4302 	strd	r4, r3, [sp, #8]
   14fae:	4912      	ldr	r1, [pc, #72]	; (14ff8 <z_cstart+0xf0>)
   14fb0:	4b12      	ldr	r3, [pc, #72]	; (14ffc <z_cstart+0xf4>)
   14fb2:	e9cd b404 	strd	fp, r4, [sp, #16]
   14fb6:	e9cd 4400 	strd	r4, r4, [sp]
   14fba:	f000 fcfd 	bl	159b8 <z_setup_new_thread>
   14fbe:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   14fc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   14fc4:	f023 0304 	bic.w	r3, r3, #4
   14fc8:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   14fca:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   14fce:	e9c5 3306 	strd	r3, r3, [r5, #24]
   14fd2:	4641      	mov	r1, r8
   14fd4:	4653      	mov	r3, sl
   14fd6:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   14fd8:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
   14fda:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   14fdc:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
   14fe0:	f7fe fbb8 	bl	13754 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   14fe4:	e000ed00 	.word	0xe000ed00
   14fe8:	20021750 	.word	0x20021750
   14fec:	200217c4 	.word	0x200217c4
   14ff0:	00034096 	.word	0x00034096
   14ff4:	200216dc 	.word	0x200216dc
   14ff8:	20029438 	.word	0x20029438
   14ffc:	00014e3d 	.word	0x00014e3d
   15000:	20029d78 	.word	0x20029d78
   15004:	00014eb9 	.word	0x00014eb9
   15008:	20027438 	.word	0x20027438

0001500c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1500c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1500e:	4b0e      	ldr	r3, [pc, #56]	; (15048 <init_mem_slab_module+0x3c>)
   15010:	4c0e      	ldr	r4, [pc, #56]	; (1504c <init_mem_slab_module+0x40>)
   15012:	42a3      	cmp	r3, r4
   15014:	d301      	bcc.n	1501a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   15016:	2000      	movs	r0, #0
	return rc;
}
   15018:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1501a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1501e:	ea41 0200 	orr.w	r2, r1, r0
   15022:	f012 0203 	ands.w	r2, r2, #3
   15026:	d10b      	bne.n	15040 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   15028:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1502a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1502c:	42aa      	cmp	r2, r5
   1502e:	d101      	bne.n	15034 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   15030:	331c      	adds	r3, #28
   15032:	e7ee      	b.n	15012 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   15034:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   15036:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
   15038:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
   1503a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1503c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1503e:	e7f5      	b.n	1502c <init_mem_slab_module+0x20>
		return -EINVAL;
   15040:	f06f 0015 	mvn.w	r0, #21
	return rc;
   15044:	e7e8      	b.n	15018 <init_mem_slab_module+0xc>
   15046:	bf00      	nop
   15048:	20020120 	.word	0x20020120
   1504c:	20020120 	.word	0x20020120

00015050 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   15050:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   15052:	460c      	mov	r4, r1
   15054:	4616      	mov	r6, r2
   15056:	461f      	mov	r7, r3
   15058:	f04f 0320 	mov.w	r3, #32
   1505c:	f3ef 8111 	mrs	r1, BASEPRI
   15060:	f383 8811 	msr	BASEPRI, r3
   15064:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   15068:	6943      	ldr	r3, [r0, #20]
   1506a:	b15b      	cbz	r3, 15084 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1506c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1506e:	681b      	ldr	r3, [r3, #0]
   15070:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   15072:	6983      	ldr	r3, [r0, #24]
   15074:	3301      	adds	r3, #1
   15076:	6183      	str	r3, [r0, #24]
		result = 0;
   15078:	2000      	movs	r0, #0
	__asm__ volatile(
   1507a:	f381 8811 	msr	BASEPRI, r1
   1507e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   15082:	e011      	b.n	150a8 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15084:	ea56 0207 	orrs.w	r2, r6, r7
   15088:	d103      	bne.n	15092 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
   1508a:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
   1508e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   15090:	e7f3      	b.n	1507a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   15092:	4602      	mov	r2, r0
   15094:	e9cd 6700 	strd	r6, r7, [sp]
   15098:	4804      	ldr	r0, [pc, #16]	; (150ac <k_mem_slab_alloc+0x5c>)
   1509a:	f000 fb6b 	bl	15774 <z_pend_curr>
		if (result == 0) {
   1509e:	b918      	cbnz	r0, 150a8 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   150a0:	4b03      	ldr	r3, [pc, #12]	; (150b0 <k_mem_slab_alloc+0x60>)
   150a2:	689b      	ldr	r3, [r3, #8]
   150a4:	695b      	ldr	r3, [r3, #20]
   150a6:	6023      	str	r3, [r4, #0]
}
   150a8:	b002      	add	sp, #8
   150aa:	bdd0      	pop	{r4, r6, r7, pc}
   150ac:	20027128 	.word	0x20027128
   150b0:	200217c4 	.word	0x200217c4

000150b4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   150b4:	b570      	push	{r4, r5, r6, lr}
   150b6:	4604      	mov	r4, r0
   150b8:	460d      	mov	r5, r1
	__asm__ volatile(
   150ba:	f04f 0320 	mov.w	r3, #32
   150be:	f3ef 8611 	mrs	r6, BASEPRI
   150c2:	f383 8811 	msr	BASEPRI, r3
   150c6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   150ca:	f012 f8da 	bl	27282 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   150ce:	b158      	cbz	r0, 150e8 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   150d0:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   150d2:	682a      	ldr	r2, [r5, #0]
   150d4:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   150d6:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
   150d8:	f012 f85d 	bl	27196 <z_ready_thread>
		z_reschedule(&lock, key);
   150dc:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   150de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   150e2:	4808      	ldr	r0, [pc, #32]	; (15104 <k_mem_slab_free+0x50>)
   150e4:	f012 b82c 	b.w	27140 <z_reschedule>
		**(char ***)mem = slab->free_list;
   150e8:	682b      	ldr	r3, [r5, #0]
   150ea:	6962      	ldr	r2, [r4, #20]
   150ec:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   150ee:	682b      	ldr	r3, [r5, #0]
   150f0:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   150f2:	69a3      	ldr	r3, [r4, #24]
   150f4:	3b01      	subs	r3, #1
   150f6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   150f8:	f386 8811 	msr	BASEPRI, r6
   150fc:	f3bf 8f6f 	isb	sy
}
   15100:	bd70      	pop	{r4, r5, r6, pc}
   15102:	bf00      	nop
   15104:	20027128 	.word	0x20027128

00015108 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   15108:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1510c:	4604      	mov	r4, r0
   1510e:	4616      	mov	r6, r2
   15110:	461f      	mov	r7, r3
	__asm__ volatile(
   15112:	f04f 0320 	mov.w	r3, #32
   15116:	f3ef 8811 	mrs	r8, BASEPRI
   1511a:	f383 8811 	msr	BASEPRI, r3
   1511e:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   15122:	68c3      	ldr	r3, [r0, #12]
   15124:	4a32      	ldr	r2, [pc, #200]	; (151f0 <z_impl_k_mutex_lock+0xe8>)
   15126:	b16b      	cbz	r3, 15144 <z_impl_k_mutex_lock+0x3c>
   15128:	6880      	ldr	r0, [r0, #8]
   1512a:	6891      	ldr	r1, [r2, #8]
   1512c:	4288      	cmp	r0, r1
   1512e:	d019      	beq.n	15164 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   15130:	ea56 0307 	orrs.w	r3, r6, r7
   15134:	d118      	bne.n	15168 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   15136:	f388 8811 	msr	BASEPRI, r8
   1513a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1513e:	f06f 000f 	mvn.w	r0, #15
   15142:	e00c      	b.n	1515e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   15144:	6891      	ldr	r1, [r2, #8]
   15146:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
   1514a:	3301      	adds	r3, #1
   1514c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1514e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   15150:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
   15152:	60a3      	str	r3, [r4, #8]
   15154:	f388 8811 	msr	BASEPRI, r8
   15158:	f3bf 8f6f 	isb	sy
		return 0;
   1515c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1515e:	b002      	add	sp, #8
   15160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   15164:	6921      	ldr	r1, [r4, #16]
   15166:	e7f0      	b.n	1514a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   15168:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1516c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   15170:	4299      	cmp	r1, r3
   15172:	bfa8      	it	ge
   15174:	4619      	movge	r1, r3
   15176:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1517a:	428b      	cmp	r3, r1
   1517c:	dd2c      	ble.n	151d8 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1517e:	f000 fb0d 	bl	1579c <z_set_prio>
   15182:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   15184:	4622      	mov	r2, r4
   15186:	4641      	mov	r1, r8
   15188:	e9cd 6700 	strd	r6, r7, [sp]
   1518c:	4819      	ldr	r0, [pc, #100]	; (151f4 <z_impl_k_mutex_lock+0xec>)
   1518e:	f000 faf1 	bl	15774 <z_pend_curr>
	if (got_mutex == 0) {
   15192:	2800      	cmp	r0, #0
   15194:	d0e3      	beq.n	1515e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   15196:	f04f 0320 	mov.w	r3, #32
   1519a:	f3ef 8611 	mrs	r6, BASEPRI
   1519e:	f383 8811 	msr	BASEPRI, r3
   151a2:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   151a6:	6823      	ldr	r3, [r4, #0]
   151a8:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   151aa:	429c      	cmp	r4, r3
   151ac:	d007      	beq.n	151be <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   151ae:	b133      	cbz	r3, 151be <z_impl_k_mutex_lock+0xb6>
   151b0:	f993 300e 	ldrsb.w	r3, [r3, #14]
   151b4:	4299      	cmp	r1, r3
   151b6:	bfa8      	it	ge
   151b8:	4619      	movge	r1, r3
   151ba:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   151be:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   151c0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   151c4:	4299      	cmp	r1, r3
   151c6:	d109      	bne.n	151dc <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   151c8:	b16d      	cbz	r5, 151e6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   151ca:	4631      	mov	r1, r6
   151cc:	4809      	ldr	r0, [pc, #36]	; (151f4 <z_impl_k_mutex_lock+0xec>)
   151ce:	f011 ffb7 	bl	27140 <z_reschedule>
	return -EAGAIN;
   151d2:	f06f 000a 	mvn.w	r0, #10
   151d6:	e7c2      	b.n	1515e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   151d8:	2500      	movs	r5, #0
   151da:	e7d3      	b.n	15184 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   151dc:	f000 fade 	bl	1579c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   151e0:	2800      	cmp	r0, #0
   151e2:	d1f2      	bne.n	151ca <z_impl_k_mutex_lock+0xc2>
   151e4:	e7f0      	b.n	151c8 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   151e6:	f386 8811 	msr	BASEPRI, r6
   151ea:	f3bf 8f6f 	isb	sy
   151ee:	e7f0      	b.n	151d2 <z_impl_k_mutex_lock+0xca>
   151f0:	200217c4 	.word	0x200217c4
   151f4:	20027129 	.word	0x20027129

000151f8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   151f8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
   151fa:	6883      	ldr	r3, [r0, #8]
{
   151fc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   151fe:	2b00      	cmp	r3, #0
   15200:	d036      	beq.n	15270 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   15202:	4a1e      	ldr	r2, [pc, #120]	; (1527c <z_impl_k_mutex_unlock+0x84>)
   15204:	6892      	ldr	r2, [r2, #8]
   15206:	4293      	cmp	r3, r2
   15208:	d135      	bne.n	15276 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1520a:	7bda      	ldrb	r2, [r3, #15]
   1520c:	3a01      	subs	r2, #1
   1520e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   15210:	68c3      	ldr	r3, [r0, #12]
   15212:	2b01      	cmp	r3, #1
   15214:	d005      	beq.n	15222 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   15216:	3b01      	subs	r3, #1
   15218:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1521a:	f000 f8c3 	bl	153a4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1521e:	2000      	movs	r0, #0
}
   15220:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   15222:	f04f 0320 	mov.w	r3, #32
   15226:	f3ef 8511 	mrs	r5, BASEPRI
   1522a:	f383 8811 	msr	BASEPRI, r3
   1522e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   15232:	6901      	ldr	r1, [r0, #16]
   15234:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   15236:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1523a:	4299      	cmp	r1, r3
   1523c:	d001      	beq.n	15242 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1523e:	f000 faad 	bl	1579c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   15242:	4620      	mov	r0, r4
   15244:	f012 f81d 	bl	27282 <z_unpend_first_thread>
	mutex->owner = new_owner;
   15248:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1524a:	b158      	cbz	r0, 15264 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1524c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   15250:	6122      	str	r2, [r4, #16]
   15252:	2200      	movs	r2, #0
   15254:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
   15256:	f011 ff9e 	bl	27196 <z_ready_thread>
		z_reschedule(&lock, key);
   1525a:	4629      	mov	r1, r5
   1525c:	4808      	ldr	r0, [pc, #32]	; (15280 <z_impl_k_mutex_unlock+0x88>)
   1525e:	f011 ff6f 	bl	27140 <z_reschedule>
   15262:	e7da      	b.n	1521a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   15264:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   15266:	f385 8811 	msr	BASEPRI, r5
   1526a:	f3bf 8f6f 	isb	sy
   1526e:	e7d4      	b.n	1521a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   15270:	f06f 0015 	mvn.w	r0, #21
   15274:	e7d4      	b.n	15220 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   15276:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1527a:	e7d1      	b.n	15220 <z_impl_k_mutex_unlock+0x28>
   1527c:	200217c4 	.word	0x200217c4
   15280:	20027129 	.word	0x20027129

00015284 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   15284:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   15286:	4c08      	ldr	r4, [pc, #32]	; (152a8 <z_reset_time_slice+0x24>)
   15288:	6823      	ldr	r3, [r4, #0]
   1528a:	b15b      	cbz	r3, 152a4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1528c:	f7fe f8e6 	bl	1345c <z_clock_elapsed>
   15290:	6822      	ldr	r2, [r4, #0]
   15292:	4906      	ldr	r1, [pc, #24]	; (152ac <z_reset_time_slice+0x28>)
   15294:	4410      	add	r0, r2
   15296:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
   15298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
   1529c:	2100      	movs	r1, #0
   1529e:	4610      	mov	r0, r2
   152a0:	f012 b84f 	b.w	27342 <z_set_timeout_expiry>
}
   152a4:	bd10      	pop	{r4, pc}
   152a6:	bf00      	nop
   152a8:	200217fc 	.word	0x200217fc
   152ac:	200217c4 	.word	0x200217c4

000152b0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
   152b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152b2:	460c      	mov	r4, r1
	__asm__ volatile(
   152b4:	f04f 0320 	mov.w	r3, #32
   152b8:	f3ef 8511 	mrs	r5, BASEPRI
   152bc:	f383 8811 	msr	BASEPRI, r3
   152c0:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
   152c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   152c8:	f240 36e7 	movw	r6, #999	; 0x3e7
   152cc:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   152ce:	2200      	movs	r2, #0
   152d0:	fbe1 6700 	umlal	r6, r7, r1, r0
   152d4:	4b09      	ldr	r3, [pc, #36]	; (152fc <k_sched_time_slice_set+0x4c>)
   152d6:	4630      	mov	r0, r6
   152d8:	611a      	str	r2, [r3, #16]
   152da:	4639      	mov	r1, r7
   152dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   152e0:	2300      	movs	r3, #0
   152e2:	f7f7 f969 	bl	c5b8 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   152e6:	4b06      	ldr	r3, [pc, #24]	; (15300 <k_sched_time_slice_set+0x50>)
   152e8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   152ea:	4b06      	ldr	r3, [pc, #24]	; (15304 <k_sched_time_slice_set+0x54>)
   152ec:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   152ee:	f7ff ffc9 	bl	15284 <z_reset_time_slice>
	__asm__ volatile(
   152f2:	f385 8811 	msr	BASEPRI, r5
   152f6:	f3bf 8f6f 	isb	sy
	}
}
   152fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   152fc:	200217c4 	.word	0x200217c4
   15300:	200217fc 	.word	0x200217fc
   15304:	200217f8 	.word	0x200217f8

00015308 <k_sched_lock>:
	__asm__ volatile(
   15308:	f04f 0320 	mov.w	r3, #32
   1530c:	f3ef 8111 	mrs	r1, BASEPRI
   15310:	f383 8811 	msr	BASEPRI, r3
   15314:	f3bf 8f6f 	isb	sy
   15318:	4b04      	ldr	r3, [pc, #16]	; (1532c <k_sched_lock+0x24>)
   1531a:	689a      	ldr	r2, [r3, #8]
   1531c:	7bd3      	ldrb	r3, [r2, #15]
   1531e:	3b01      	subs	r3, #1
   15320:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   15322:	f381 8811 	msr	BASEPRI, r1
   15326:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1532a:	4770      	bx	lr
   1532c:	200217c4 	.word	0x200217c4

00015330 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   15330:	4b09      	ldr	r3, [pc, #36]	; (15358 <z_priq_dumb_remove+0x28>)
   15332:	f103 0228 	add.w	r2, r3, #40	; 0x28
   15336:	4282      	cmp	r2, r0
   15338:	d105      	bne.n	15346 <z_priq_dumb_remove+0x16>
   1533a:	689b      	ldr	r3, [r3, #8]
   1533c:	428b      	cmp	r3, r1
   1533e:	d102      	bne.n	15346 <z_priq_dumb_remove+0x16>
   15340:	7b4b      	ldrb	r3, [r1, #13]
   15342:	06db      	lsls	r3, r3, #27
   15344:	d106      	bne.n	15354 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   15346:	e9d1 3200 	ldrd	r3, r2, [r1]
   1534a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1534c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1534e:	2300      	movs	r3, #0
	node->prev = NULL;
   15350:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   15354:	4770      	bx	lr
   15356:	bf00      	nop
   15358:	200217c4 	.word	0x200217c4

0001535c <update_cache>:
{
   1535c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1535e:	4c10      	ldr	r4, [pc, #64]	; (153a0 <update_cache+0x44>)
{
   15360:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   15362:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15366:	f011 ff0c 	bl	27182 <z_priq_dumb_best>
   1536a:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1536c:	68a3      	ldr	r3, [r4, #8]
   1536e:	7b59      	ldrb	r1, [r3, #13]
   15370:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   15372:	bf44      	itt	mi
   15374:	f041 0108 	orrmi.w	r1, r1, #8
   15378:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1537a:	b905      	cbnz	r5, 1537e <update_cache+0x22>
   1537c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1537e:	b94e      	cbnz	r6, 15394 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   15380:	7b5a      	ldrb	r2, [r3, #13]
   15382:	06d2      	lsls	r2, r2, #27
   15384:	d106      	bne.n	15394 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   15386:	69aa      	ldr	r2, [r5, #24]
   15388:	b922      	cbnz	r2, 15394 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   1538a:	89da      	ldrh	r2, [r3, #14]
   1538c:	2a7f      	cmp	r2, #127	; 0x7f
   1538e:	d901      	bls.n	15394 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   15390:	6263      	str	r3, [r4, #36]	; 0x24
}
   15392:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   15394:	42ab      	cmp	r3, r5
   15396:	d001      	beq.n	1539c <update_cache+0x40>
			z_reset_time_slice();
   15398:	f7ff ff74 	bl	15284 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1539c:	6265      	str	r5, [r4, #36]	; 0x24
}
   1539e:	e7f8      	b.n	15392 <update_cache+0x36>
   153a0:	200217c4 	.word	0x200217c4

000153a4 <k_sched_unlock>:
{
   153a4:	b510      	push	{r4, lr}
	__asm__ volatile(
   153a6:	f04f 0320 	mov.w	r3, #32
   153aa:	f3ef 8411 	mrs	r4, BASEPRI
   153ae:	f383 8811 	msr	BASEPRI, r3
   153b2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   153b6:	4b08      	ldr	r3, [pc, #32]	; (153d8 <k_sched_unlock+0x34>)
		update_cache(0);
   153b8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   153ba:	689a      	ldr	r2, [r3, #8]
   153bc:	7bd3      	ldrb	r3, [r2, #15]
   153be:	3301      	adds	r3, #1
   153c0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   153c2:	f7ff ffcb 	bl	1535c <update_cache>
	__asm__ volatile(
   153c6:	f384 8811 	msr	BASEPRI, r4
   153ca:	f3bf 8f6f 	isb	sy
}
   153ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   153d2:	f011 becc 	b.w	2716e <z_reschedule_unlocked>
   153d6:	bf00      	nop
   153d8:	200217c4 	.word	0x200217c4

000153dc <ready_thread>:
{
   153dc:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   153de:	7b43      	ldrb	r3, [r0, #13]
   153e0:	06db      	lsls	r3, r3, #27
   153e2:	d12a      	bne.n	1543a <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   153e4:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
   153e6:	bb43      	cbnz	r3, 1543a <ready_thread+0x5e>
	return list->head == list;
   153e8:	4a15      	ldr	r2, [pc, #84]	; (15440 <ready_thread+0x64>)
   153ea:	4611      	mov	r1, r2
   153ec:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   153f0:	428c      	cmp	r4, r1
   153f2:	bf18      	it	ne
   153f4:	4623      	movne	r3, r4
   153f6:	2b00      	cmp	r3, #0
   153f8:	bf38      	it	cc
   153fa:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   153fc:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   153fe:	b1b3      	cbz	r3, 1542e <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   15400:	f990 600e 	ldrsb.w	r6, [r0, #14]
   15404:	f993 500e 	ldrsb.w	r5, [r3, #14]
   15408:	42ae      	cmp	r6, r5
   1540a:	db03      	blt.n	15414 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
   1540c:	42a3      	cmp	r3, r4
   1540e:	d00e      	beq.n	1542e <ready_thread+0x52>
   15410:	681b      	ldr	r3, [r3, #0]
   15412:	e7f4      	b.n	153fe <ready_thread+0x22>
	node->prev = successor->prev;
   15414:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   15416:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1541a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1541c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1541e:	7b43      	ldrb	r3, [r0, #13]
   15420:	f063 037f 	orn	r3, r3, #127	; 0x7f
   15424:	7343      	strb	r3, [r0, #13]
}
   15426:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   15428:	2000      	movs	r0, #0
   1542a:	f7ff bf97 	b.w	1535c <update_cache>
	node->prev = list->tail;
   1542e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   15432:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   15434:	6018      	str	r0, [r3, #0]
	list->tail = node;
   15436:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   15438:	e7f1      	b.n	1541e <ready_thread+0x42>
}
   1543a:	bc70      	pop	{r4, r5, r6}
   1543c:	4770      	bx	lr
   1543e:	bf00      	nop
   15440:	200217c4 	.word	0x200217c4

00015444 <z_sched_start>:
{
   15444:	b510      	push	{r4, lr}
	__asm__ volatile(
   15446:	f04f 0220 	mov.w	r2, #32
   1544a:	f3ef 8411 	mrs	r4, BASEPRI
   1544e:	f382 8811 	msr	BASEPRI, r2
   15452:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   15456:	7b42      	ldrb	r2, [r0, #13]
   15458:	0751      	lsls	r1, r2, #29
   1545a:	d404      	bmi.n	15466 <z_sched_start+0x22>
	__asm__ volatile(
   1545c:	f384 8811 	msr	BASEPRI, r4
   15460:	f3bf 8f6f 	isb	sy
}
   15464:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15466:	f022 0204 	bic.w	r2, r2, #4
   1546a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1546c:	f7ff ffb6 	bl	153dc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   15470:	4621      	mov	r1, r4
}
   15472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   15476:	4801      	ldr	r0, [pc, #4]	; (1547c <z_sched_start+0x38>)
   15478:	f011 be62 	b.w	27140 <z_reschedule>
   1547c:	2002712a 	.word	0x2002712a

00015480 <z_move_thread_to_end_of_prio_q>:
{
   15480:	4601      	mov	r1, r0
   15482:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   15484:	f04f 0320 	mov.w	r3, #32
   15488:	f3ef 8411 	mrs	r4, BASEPRI
   1548c:	f383 8811 	msr	BASEPRI, r3
   15490:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   15494:	f990 300d 	ldrsb.w	r3, [r0, #13]
   15498:	2b00      	cmp	r3, #0
   1549a:	da02      	bge.n	154a2 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1549c:	4819      	ldr	r0, [pc, #100]	; (15504 <z_move_thread_to_end_of_prio_q+0x84>)
   1549e:	f7ff ff47 	bl	15330 <z_priq_dumb_remove>
	return list->head == list;
   154a2:	4a19      	ldr	r2, [pc, #100]	; (15508 <z_move_thread_to_end_of_prio_q+0x88>)
   154a4:	4610      	mov	r0, r2
   154a6:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   154aa:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   154ac:	4283      	cmp	r3, r0
   154ae:	bf08      	it	eq
   154b0:	2300      	moveq	r3, #0
   154b2:	2b00      	cmp	r3, #0
   154b4:	bf38      	it	cc
   154b6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   154b8:	b1eb      	cbz	r3, 154f6 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   154ba:	f991 700e 	ldrsb.w	r7, [r1, #14]
   154be:	f993 600e 	ldrsb.w	r6, [r3, #14]
   154c2:	42b7      	cmp	r7, r6
   154c4:	db03      	blt.n	154ce <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
   154c6:	429d      	cmp	r5, r3
   154c8:	d015      	beq.n	154f6 <z_move_thread_to_end_of_prio_q+0x76>
   154ca:	681b      	ldr	r3, [r3, #0]
   154cc:	e7f4      	b.n	154b8 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
   154ce:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   154d0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   154d4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   154d6:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   154d8:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   154da:	6890      	ldr	r0, [r2, #8]
   154dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   154e0:	734b      	strb	r3, [r1, #13]
   154e2:	1a43      	subs	r3, r0, r1
   154e4:	4258      	negs	r0, r3
   154e6:	4158      	adcs	r0, r3
   154e8:	f7ff ff38 	bl	1535c <update_cache>
	__asm__ volatile(
   154ec:	f384 8811 	msr	BASEPRI, r4
   154f0:	f3bf 8f6f 	isb	sy
}
   154f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   154f6:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
   154fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   154fc:	6019      	str	r1, [r3, #0]
	list->tail = node;
   154fe:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   15500:	e7ea      	b.n	154d8 <z_move_thread_to_end_of_prio_q+0x58>
   15502:	bf00      	nop
   15504:	200217ec 	.word	0x200217ec
   15508:	200217c4 	.word	0x200217c4

0001550c <z_time_slice>:
{
   1550c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1550e:	4a15      	ldr	r2, [pc, #84]	; (15564 <z_time_slice+0x58>)
   15510:	4b15      	ldr	r3, [pc, #84]	; (15568 <z_time_slice+0x5c>)
   15512:	6814      	ldr	r4, [r2, #0]
{
   15514:	4601      	mov	r1, r0
	if (pending_current == _current) {
   15516:	6898      	ldr	r0, [r3, #8]
   15518:	42a0      	cmp	r0, r4
   1551a:	461c      	mov	r4, r3
   1551c:	d103      	bne.n	15526 <z_time_slice+0x1a>
}
   1551e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   15522:	f7ff beaf 	b.w	15284 <z_reset_time_slice>
	pending_current = NULL;
   15526:	2500      	movs	r5, #0
   15528:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1552a:	4a10      	ldr	r2, [pc, #64]	; (1556c <z_time_slice+0x60>)
   1552c:	6812      	ldr	r2, [r2, #0]
   1552e:	b1b2      	cbz	r2, 1555e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   15530:	89c2      	ldrh	r2, [r0, #14]
   15532:	2a7f      	cmp	r2, #127	; 0x7f
   15534:	d813      	bhi.n	1555e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   15536:	4a0e      	ldr	r2, [pc, #56]	; (15570 <z_time_slice+0x64>)
   15538:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1553c:	6812      	ldr	r2, [r2, #0]
   1553e:	4295      	cmp	r5, r2
   15540:	db0d      	blt.n	1555e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   15542:	4a0c      	ldr	r2, [pc, #48]	; (15574 <z_time_slice+0x68>)
   15544:	4290      	cmp	r0, r2
   15546:	d00a      	beq.n	1555e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   15548:	6982      	ldr	r2, [r0, #24]
   1554a:	b942      	cbnz	r2, 1555e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1554c:	691a      	ldr	r2, [r3, #16]
   1554e:	428a      	cmp	r2, r1
   15550:	dc02      	bgt.n	15558 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   15552:	f7ff ff95 	bl	15480 <z_move_thread_to_end_of_prio_q>
   15556:	e7e2      	b.n	1551e <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   15558:	1a52      	subs	r2, r2, r1
   1555a:	611a      	str	r2, [r3, #16]
}
   1555c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1555e:	2300      	movs	r3, #0
   15560:	6123      	str	r3, [r4, #16]
   15562:	e7fb      	b.n	1555c <z_time_slice+0x50>
   15564:	200217f4 	.word	0x200217f4
   15568:	200217c4 	.word	0x200217c4
   1556c:	200217fc 	.word	0x200217fc
   15570:	200217f8 	.word	0x200217f8
   15574:	200216dc 	.word	0x200216dc

00015578 <z_impl_k_thread_suspend>:
{
   15578:	b570      	push	{r4, r5, r6, lr}
   1557a:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1557c:	3018      	adds	r0, #24
   1557e:	f011 feba 	bl	272f6 <z_abort_timeout>
	__asm__ volatile(
   15582:	f04f 0320 	mov.w	r3, #32
   15586:	f3ef 8611 	mrs	r6, BASEPRI
   1558a:	f383 8811 	msr	BASEPRI, r3
   1558e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   15592:	f994 300d 	ldrsb.w	r3, [r4, #13]
   15596:	2b00      	cmp	r3, #0
   15598:	da07      	bge.n	155aa <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1559a:	4621      	mov	r1, r4
   1559c:	480e      	ldr	r0, [pc, #56]	; (155d8 <z_impl_k_thread_suspend+0x60>)
   1559e:	f7ff fec7 	bl	15330 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   155a2:	7b63      	ldrb	r3, [r4, #13]
   155a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   155a8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   155aa:	4d0c      	ldr	r5, [pc, #48]	; (155dc <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   155ac:	7b63      	ldrb	r3, [r4, #13]
   155ae:	68a8      	ldr	r0, [r5, #8]
   155b0:	f043 0310 	orr.w	r3, r3, #16
   155b4:	7363      	strb	r3, [r4, #13]
   155b6:	1b03      	subs	r3, r0, r4
   155b8:	4258      	negs	r0, r3
   155ba:	4158      	adcs	r0, r3
   155bc:	f7ff fece 	bl	1535c <update_cache>
	__asm__ volatile(
   155c0:	f386 8811 	msr	BASEPRI, r6
   155c4:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   155c8:	68ab      	ldr	r3, [r5, #8]
   155ca:	42a3      	cmp	r3, r4
   155cc:	d103      	bne.n	155d6 <z_impl_k_thread_suspend+0x5e>
}
   155ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   155d2:	f011 bdcc 	b.w	2716e <z_reschedule_unlocked>
}
   155d6:	bd70      	pop	{r4, r5, r6, pc}
   155d8:	200217ec 	.word	0x200217ec
   155dc:	200217c4 	.word	0x200217c4

000155e0 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   155e0:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
   155e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   155e6:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   155e8:	b103      	cbz	r3, 155ec <z_thread_single_abort+0xc>
		thread->fn_abort();
   155ea:	4798      	blx	r3
   155ec:	f104 0018 	add.w	r0, r4, #24
   155f0:	f011 fe81 	bl	272f6 <z_abort_timeout>
	__asm__ volatile(
   155f4:	f04f 0320 	mov.w	r3, #32
   155f8:	f3ef 8611 	mrs	r6, BASEPRI
   155fc:	f383 8811 	msr	BASEPRI, r3
   15600:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   15604:	7b63      	ldrb	r3, [r4, #13]
   15606:	06d8      	lsls	r0, r3, #27
   15608:	d123      	bne.n	15652 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   1560a:	69a2      	ldr	r2, [r4, #24]
   1560c:	bb0a      	cbnz	r2, 15652 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   1560e:	0619      	lsls	r1, r3, #24
   15610:	d507      	bpl.n	15622 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   15612:	4621      	mov	r1, r4
   15614:	481e      	ldr	r0, [pc, #120]	; (15690 <z_thread_single_abort+0xb0>)
   15616:	f7ff fe8b 	bl	15330 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1561a:	7b63      	ldrb	r3, [r4, #13]
   1561c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   15620:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   15622:	4b1c      	ldr	r3, [pc, #112]	; (15694 <z_thread_single_abort+0xb4>)
   15624:	6898      	ldr	r0, [r3, #8]
   15626:	1b02      	subs	r2, r0, r4
   15628:	4250      	negs	r0, r2
   1562a:	4150      	adcs	r0, r2
   1562c:	f7ff fe96 	bl	1535c <update_cache>
			waiter->base.pended_on = NULL;
   15630:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
   15632:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   15634:	f104 0828 	add.w	r8, r4, #40	; 0x28
   15638:	f043 0308 	orr.w	r3, r3, #8
   1563c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1563e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15640:	4545      	cmp	r5, r8
   15642:	d000      	beq.n	15646 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   15644:	b995      	cbnz	r5, 1566c <z_thread_single_abort+0x8c>
	__asm__ volatile(
   15646:	f386 8811 	msr	BASEPRI, r6
   1564a:	f3bf 8f6f 	isb	sy
}
   1564e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   15652:	079b      	lsls	r3, r3, #30
   15654:	d5ec      	bpl.n	15630 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   15656:	4621      	mov	r1, r4
   15658:	68a0      	ldr	r0, [r4, #8]
   1565a:	f7ff fe69 	bl	15330 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1565e:	7b63      	ldrb	r3, [r4, #13]
   15660:	f023 0302 	bic.w	r3, r3, #2
   15664:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   15666:	2300      	movs	r3, #0
   15668:	60a3      	str	r3, [r4, #8]
   1566a:	e7e1      	b.n	15630 <z_thread_single_abort+0x50>
   1566c:	f105 0018 	add.w	r0, r5, #24
   15670:	f011 fe41 	bl	272f6 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   15674:	68a8      	ldr	r0, [r5, #8]
   15676:	4629      	mov	r1, r5
   15678:	f7ff fe5a 	bl	15330 <z_priq_dumb_remove>
   1567c:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
   1567e:	4628      	mov	r0, r5
   15680:	f023 0302 	bic.w	r3, r3, #2
   15684:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   15686:	60af      	str	r7, [r5, #8]
   15688:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
   1568a:	f7ff fea7 	bl	153dc <ready_thread>
   1568e:	e7d6      	b.n	1563e <z_thread_single_abort+0x5e>
   15690:	200217ec 	.word	0x200217ec
   15694:	200217c4 	.word	0x200217c4

00015698 <unready_thread>:
{
   15698:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1569a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
   1569e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   156a0:	2b00      	cmp	r3, #0
   156a2:	da06      	bge.n	156b2 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   156a4:	4807      	ldr	r0, [pc, #28]	; (156c4 <unready_thread+0x2c>)
   156a6:	f7ff fe43 	bl	15330 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   156aa:	7b4b      	ldrb	r3, [r1, #13]
   156ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   156b0:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   156b2:	4b05      	ldr	r3, [pc, #20]	; (156c8 <unready_thread+0x30>)
   156b4:	6898      	ldr	r0, [r3, #8]
   156b6:	1a43      	subs	r3, r0, r1
   156b8:	4258      	negs	r0, r3
   156ba:	4158      	adcs	r0, r3
}
   156bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   156c0:	f7ff be4c 	b.w	1535c <update_cache>
   156c4:	200217ec 	.word	0x200217ec
   156c8:	200217c4 	.word	0x200217c4

000156cc <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
   156cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   156ce:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   156d0:	f011 fe52 	bl	27378 <z_tick_get_32>
   156d4:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   156d6:	f04f 0320 	mov.w	r3, #32
   156da:	f3ef 8711 	mrs	r7, BASEPRI
   156de:	f383 8811 	msr	BASEPRI, r3
   156e2:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   156e6:	4e0d      	ldr	r6, [pc, #52]	; (1571c <z_tick_sleep.part.0+0x50>)
   156e8:	4b0d      	ldr	r3, [pc, #52]	; (15720 <z_tick_sleep.part.0+0x54>)
   156ea:	68b0      	ldr	r0, [r6, #8]
   156ec:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   156ee:	f011 fd8d 	bl	2720c <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   156f2:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   156f4:	490b      	ldr	r1, [pc, #44]	; (15724 <z_tick_sleep.part.0+0x58>)
   156f6:	462a      	mov	r2, r5
   156f8:	17eb      	asrs	r3, r5, #31
   156fa:	3018      	adds	r0, #24
   156fc:	f000 fa4a 	bl	15b94 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   15700:	68b2      	ldr	r2, [r6, #8]
	ret = arch_swap(key);
   15702:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
   15704:	7b53      	ldrb	r3, [r2, #13]
   15706:	f043 0310 	orr.w	r3, r3, #16
   1570a:	7353      	strb	r3, [r2, #13]
   1570c:	f7fd ff94 	bl	13638 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   15710:	f011 fe32 	bl	27378 <z_tick_get_32>
   15714:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   15716:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1571a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1571c:	200217c4 	.word	0x200217c4
   15720:	200217f4 	.word	0x200217f4
   15724:	000271b7 	.word	0x000271b7

00015728 <pend>:
{
   15728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1572c:	4606      	mov	r6, r0
   1572e:	4614      	mov	r4, r2
   15730:	461d      	mov	r5, r3
   15732:	f04f 0320 	mov.w	r3, #32
   15736:	f3ef 8711 	mrs	r7, BASEPRI
   1573a:	f383 8811 	msr	BASEPRI, r3
   1573e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   15742:	f011 fd73 	bl	2722c <add_to_waitq_locked>
	__asm__ volatile(
   15746:	f387 8811 	msr	BASEPRI, r7
   1574a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1574e:	1c6b      	adds	r3, r5, #1
   15750:	bf08      	it	eq
   15752:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   15756:	d008      	beq.n	1576a <pend+0x42>
   15758:	4622      	mov	r2, r4
   1575a:	462b      	mov	r3, r5
   1575c:	f106 0018 	add.w	r0, r6, #24
   15760:	4903      	ldr	r1, [pc, #12]	; (15770 <pend+0x48>)
}
   15762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   15766:	f000 ba15 	b.w	15b94 <z_add_timeout>
   1576a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1576e:	bf00      	nop
   15770:	000271b7 	.word	0x000271b7

00015774 <z_pend_curr>:
{
   15774:	b510      	push	{r4, lr}
   15776:	460c      	mov	r4, r1
	pending_current = _current;
   15778:	4b06      	ldr	r3, [pc, #24]	; (15794 <z_pend_curr+0x20>)
{
   1577a:	4611      	mov	r1, r2
	pending_current = _current;
   1577c:	6898      	ldr	r0, [r3, #8]
   1577e:	4b06      	ldr	r3, [pc, #24]	; (15798 <z_pend_curr+0x24>)
   15780:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   15782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   15786:	f7ff ffcf 	bl	15728 <pend>
   1578a:	4620      	mov	r0, r4
}
   1578c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15790:	f7fd bf52 	b.w	13638 <arch_swap>
   15794:	200217c4 	.word	0x200217c4
   15798:	200217f4 	.word	0x200217f4

0001579c <z_set_prio>:
{
   1579c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   157a0:	4604      	mov	r4, r0
	__asm__ volatile(
   157a2:	f04f 0320 	mov.w	r3, #32
   157a6:	f3ef 8811 	mrs	r8, BASEPRI
   157aa:	f383 8811 	msr	BASEPRI, r3
   157ae:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   157b2:	7b43      	ldrb	r3, [r0, #13]
   157b4:	b24e      	sxtb	r6, r1
   157b6:	06db      	lsls	r3, r3, #27
   157b8:	d12e      	bne.n	15818 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   157ba:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   157bc:	bb65      	cbnz	r5, 15818 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   157be:	4f18      	ldr	r7, [pc, #96]	; (15820 <z_set_prio+0x84>)
   157c0:	4621      	mov	r1, r4
   157c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
   157c6:	f7ff fdb3 	bl	15330 <z_priq_dumb_remove>
	return list->head == list;
   157ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   157cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   157ce:	4283      	cmp	r3, r0
   157d0:	bf18      	it	ne
   157d2:	461d      	movne	r5, r3
   157d4:	2d00      	cmp	r5, #0
   157d6:	bf38      	it	cc
   157d8:	2500      	movcc	r5, #0
				thread->base.prio = prio;
   157da:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   157dc:	b1b5      	cbz	r5, 1580c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   157de:	f995 100e 	ldrsb.w	r1, [r5, #14]
   157e2:	42b1      	cmp	r1, r6
   157e4:	dc03      	bgt.n	157ee <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   157e6:	42aa      	cmp	r2, r5
   157e8:	d010      	beq.n	1580c <z_set_prio+0x70>
   157ea:	682d      	ldr	r5, [r5, #0]
   157ec:	e7f6      	b.n	157dc <z_set_prio+0x40>
	node->prev = successor->prev;
   157ee:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   157f0:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   157f4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   157f6:	606c      	str	r4, [r5, #4]
			update_cache(1);
   157f8:	2001      	movs	r0, #1
   157fa:	f7ff fdaf 	bl	1535c <update_cache>
   157fe:	2001      	movs	r0, #1
	__asm__ volatile(
   15800:	f388 8811 	msr	BASEPRI, r8
   15804:	f3bf 8f6f 	isb	sy
}
   15808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1580c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   15810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   15812:	601c      	str	r4, [r3, #0]
	list->tail = node;
   15814:	62fc      	str	r4, [r7, #44]	; 0x2c
}
   15816:	e7ef      	b.n	157f8 <z_set_prio+0x5c>
			thread->base.prio = prio;
   15818:	2000      	movs	r0, #0
   1581a:	73a6      	strb	r6, [r4, #14]
   1581c:	e7f0      	b.n	15800 <z_set_prio+0x64>
   1581e:	bf00      	nop
   15820:	200217c4 	.word	0x200217c4

00015824 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   15824:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
   15826:	4b04      	ldr	r3, [pc, #16]	; (15838 <z_sched_init+0x14>)
   15828:	4608      	mov	r0, r1
   1582a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1582e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   15832:	f7ff bd3d 	b.w	152b0 <k_sched_time_slice_set>
   15836:	bf00      	nop
   15838:	200217c4 	.word	0x200217c4

0001583c <z_impl_k_yield>:
{
   1583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1583e:	4c24      	ldr	r4, [pc, #144]	; (158d0 <z_impl_k_yield+0x94>)
   15840:	4b24      	ldr	r3, [pc, #144]	; (158d4 <z_impl_k_yield+0x98>)
   15842:	68a2      	ldr	r2, [r4, #8]
   15844:	429a      	cmp	r2, r3
   15846:	d030      	beq.n	158aa <z_impl_k_yield+0x6e>
	__asm__ volatile(
   15848:	f04f 0320 	mov.w	r3, #32
   1584c:	f3ef 8511 	mrs	r5, BASEPRI
   15850:	f383 8811 	msr	BASEPRI, r3
   15854:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   15858:	68a1      	ldr	r1, [r4, #8]
   1585a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1585e:	f7ff fd67 	bl	15330 <z_priq_dumb_remove>
	return list->head == list;
   15862:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   15864:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15866:	4283      	cmp	r3, r0
   15868:	bf08      	it	eq
   1586a:	2300      	moveq	r3, #0
   1586c:	2b00      	cmp	r3, #0
   1586e:	bf38      	it	cc
   15870:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15872:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15874:	b32b      	cbz	r3, 158c2 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   15876:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1587a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1587e:	42b7      	cmp	r7, r6
   15880:	db03      	blt.n	1588a <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   15882:	428b      	cmp	r3, r1
   15884:	d01d      	beq.n	158c2 <z_impl_k_yield+0x86>
   15886:	681b      	ldr	r3, [r3, #0]
   15888:	e7f4      	b.n	15874 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1588a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1588c:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   15890:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   15892:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   15894:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
   15896:	2001      	movs	r0, #1
   15898:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1589c:	7353      	strb	r3, [r2, #13]
   1589e:	f7ff fd5d 	bl	1535c <update_cache>
	__asm__ volatile(
   158a2:	f385 8811 	msr	BASEPRI, r5
   158a6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   158aa:	f04f 0320 	mov.w	r3, #32
   158ae:	f3ef 8011 	mrs	r0, BASEPRI
   158b2:	f383 8811 	msr	BASEPRI, r3
   158b6:	f3bf 8f6f 	isb	sy
}
   158ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   158be:	f7fd bebb 	b.w	13638 <arch_swap>
	node->prev = list->tail;
   158c2:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   158c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   158c8:	601a      	str	r2, [r3, #0]
	list->tail = node;
   158ca:	62e2      	str	r2, [r4, #44]	; 0x2c
}
   158cc:	e7e2      	b.n	15894 <z_impl_k_yield+0x58>
   158ce:	bf00      	nop
   158d0:	200217c4 	.word	0x200217c4
   158d4:	200216dc 	.word	0x200216dc

000158d8 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
   158d8:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   158da:	3301      	adds	r3, #1
   158dc:	bf08      	it	eq
   158de:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   158e2:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   158e4:	d106      	bne.n	158f4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   158e6:	4b0b      	ldr	r3, [pc, #44]	; (15914 <z_impl_k_sleep+0x3c>)
   158e8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   158ea:	f7ff fe45 	bl	15578 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
   158ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   158f2:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   158f4:	4604      	mov	r4, r0
	if (ticks == 0) {
   158f6:	b948      	cbnz	r0, 1590c <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   158f8:	f7ff ffa0 	bl	1583c <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
   158fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   15900:	fb84 3400 	smull	r3, r4, r4, r0
   15904:	0bd8      	lsrs	r0, r3, #15
   15906:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1590a:	e7f2      	b.n	158f2 <z_impl_k_sleep+0x1a>
   1590c:	f7ff fede 	bl	156cc <z_tick_sleep.part.0>
   15910:	4604      	mov	r4, r0
   15912:	e7f3      	b.n	158fc <z_impl_k_sleep+0x24>
   15914:	200217c4 	.word	0x200217c4

00015918 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   15918:	4b01      	ldr	r3, [pc, #4]	; (15920 <z_impl_k_current_get+0x8>)
   1591a:	6898      	ldr	r0, [r3, #8]
   1591c:	4770      	bx	lr
   1591e:	bf00      	nop
   15920:	200217c4 	.word	0x200217c4

00015924 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   15924:	b538      	push	{r3, r4, r5, lr}
   15926:	4604      	mov	r4, r0
   15928:	f04f 0320 	mov.w	r3, #32
   1592c:	f3ef 8511 	mrs	r5, BASEPRI
   15930:	f383 8811 	msr	BASEPRI, r3
   15934:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   15938:	f011 fca3 	bl	27282 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   1593c:	b148      	cbz	r0, 15952 <z_impl_k_sem_give+0x2e>
   1593e:	2200      	movs	r2, #0
   15940:	6702      	str	r2, [r0, #112]	; 0x70
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   15942:	f011 fc28 	bl	27196 <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   15946:	4629      	mov	r1, r5
}
   15948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1594c:	4804      	ldr	r0, [pc, #16]	; (15960 <z_impl_k_sem_give+0x3c>)
   1594e:	f011 bbf7 	b.w	27140 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   15952:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   15956:	429a      	cmp	r2, r3
   15958:	bf18      	it	ne
   1595a:	3301      	addne	r3, #1
   1595c:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
   1595e:	e7f2      	b.n	15946 <z_impl_k_sem_give+0x22>
   15960:	2002712b 	.word	0x2002712b

00015964 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   15964:	b537      	push	{r0, r1, r2, r4, r5, lr}
   15966:	4614      	mov	r4, r2
   15968:	461d      	mov	r5, r3
   1596a:	f04f 0320 	mov.w	r3, #32
   1596e:	f3ef 8111 	mrs	r1, BASEPRI
   15972:	f383 8811 	msr	BASEPRI, r3
   15976:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1597a:	6883      	ldr	r3, [r0, #8]
   1597c:	b143      	cbz	r3, 15990 <z_impl_k_sem_take+0x2c>
		sem->count--;
   1597e:	3b01      	subs	r3, #1
   15980:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   15982:	f381 8811 	msr	BASEPRI, r1
   15986:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1598a:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1598c:	b003      	add	sp, #12
   1598e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15990:	ea54 0305 	orrs.w	r3, r4, r5
   15994:	d106      	bne.n	159a4 <z_impl_k_sem_take+0x40>
   15996:	f381 8811 	msr	BASEPRI, r1
   1599a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1599e:	f06f 000f 	mvn.w	r0, #15
   159a2:	e7f3      	b.n	1598c <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   159a4:	4602      	mov	r2, r0
   159a6:	e9cd 4500 	strd	r4, r5, [sp]
   159aa:	4802      	ldr	r0, [pc, #8]	; (159b4 <z_impl_k_sem_take+0x50>)
   159ac:	f7ff fee2 	bl	15774 <z_pend_curr>
	return ret;
   159b0:	e7ec      	b.n	1598c <z_impl_k_sem_take+0x28>
   159b2:	bf00      	nop
   159b4:	2002712b 	.word	0x2002712b

000159b8 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
   159b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
   159ba:	f100 0528 	add.w	r5, r0, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   159be:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
   159c2:	2504      	movs	r5, #4
   159c4:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
   159c6:	2500      	movs	r5, #0
{
   159c8:	4604      	mov	r4, r0
   159ca:	b087      	sub	sp, #28
   159cc:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   159d0:	e9cd 6703 	strd	r6, r7, [sp, #12]
	thread_base->prio = priority;
   159d4:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   159d6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	node->prev = NULL;
   159d8:	e9c0 5506 	strd	r5, r5, [r0, #24]
   159dc:	9602      	str	r6, [sp, #8]
   159de:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	thread_base->user_options = (u8_t)options;
   159e0:	7307      	strb	r7, [r0, #12]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   159e2:	9601      	str	r6, [sp, #4]
   159e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   159e6:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   159e8:	9600      	str	r6, [sp, #0]
   159ea:	f7fd fe99 	bl	13720 <arch_new_thread>
	if (!_current) {
   159ee:	4b04      	ldr	r3, [pc, #16]	; (15a00 <z_setup_new_thread+0x48>)
	new_thread->fn_abort = NULL;
   159f0:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
   159f4:	689b      	ldr	r3, [r3, #8]
   159f6:	b103      	cbz	r3, 159fa <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
   159f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   159fa:	66a3      	str	r3, [r4, #104]	; 0x68
}
   159fc:	b007      	add	sp, #28
   159fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15a00:	200217c4 	.word	0x200217c4

00015a04 <z_impl_k_thread_create>:
{
   15a04:	b5f0      	push	{r4, r5, r6, r7, lr}
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15a06:	2500      	movs	r5, #0
{
   15a08:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15a0a:	9505      	str	r5, [sp, #20]
   15a0c:	9d10      	ldr	r5, [sp, #64]	; 0x40
{
   15a0e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15a12:	9504      	str	r5, [sp, #16]
   15a14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
{
   15a16:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15a18:	9503      	str	r5, [sp, #12]
   15a1a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   15a1c:	9502      	str	r5, [sp, #8]
   15a1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   15a20:	9501      	str	r5, [sp, #4]
   15a22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   15a24:	9500      	str	r5, [sp, #0]
   15a26:	f7ff ffc7 	bl	159b8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   15a2a:	1c7b      	adds	r3, r7, #1
   15a2c:	bf08      	it	eq
   15a2e:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   15a32:	d005      	beq.n	15a40 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15a34:	ea56 0307 	orrs.w	r3, r6, r7
   15a38:	d105      	bne.n	15a46 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   15a3a:	4620      	mov	r0, r4
   15a3c:	f7ff fd02 	bl	15444 <z_sched_start>
}
   15a40:	4620      	mov	r0, r4
   15a42:	b007      	add	sp, #28
   15a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   15a46:	4632      	mov	r2, r6
   15a48:	463b      	mov	r3, r7
   15a4a:	4903      	ldr	r1, [pc, #12]	; (15a58 <z_impl_k_thread_create+0x54>)
   15a4c:	f104 0018 	add.w	r0, r4, #24
   15a50:	f000 f8a0 	bl	15b94 <z_add_timeout>
   15a54:	e7f4      	b.n	15a40 <z_impl_k_thread_create+0x3c>
   15a56:	bf00      	nop
   15a58:	000271b7 	.word	0x000271b7

00015a5c <z_init_static_threads>:
{
   15a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   15a60:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 15b18 <z_init_static_threads+0xbc>
   15a64:	4d2b      	ldr	r5, [pc, #172]	; (15b14 <z_init_static_threads+0xb8>)
   15a66:	46c8      	mov	r8, r9
{
   15a68:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
   15a6a:	454d      	cmp	r5, r9
   15a6c:	f105 0430 	add.w	r4, r5, #48	; 0x30
   15a70:	d30d      	bcc.n	15a8e <z_init_static_threads+0x32>
	k_sched_lock();
   15a72:	f7ff fc49 	bl	15308 <k_sched_lock>
			return (u32_t)((t * to_hz + off) / from_hz);
   15a76:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	_FOREACH_STATIC_THREAD(thread_data) {
   15a7a:	4c26      	ldr	r4, [pc, #152]	; (15b14 <z_init_static_threads+0xb8>)
   15a7c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 15b1c <z_init_static_threads+0xc0>
   15a80:	4544      	cmp	r4, r8
   15a82:	d321      	bcc.n	15ac8 <z_init_static_threads+0x6c>
}
   15a84:	b007      	add	sp, #28
   15a86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
   15a8a:	f7ff bc8b 	b.w	153a4 <k_sched_unlock>
		z_setup_new_thread(
   15a8e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   15a92:	9305      	str	r3, [sp, #20]
   15a94:	f854 3c10 	ldr.w	r3, [r4, #-16]
   15a98:	9304      	str	r3, [sp, #16]
   15a9a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   15a9e:	9303      	str	r3, [sp, #12]
   15aa0:	f854 3c18 	ldr.w	r3, [r4, #-24]
   15aa4:	9302      	str	r3, [sp, #8]
   15aa6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   15aaa:	9301      	str	r3, [sp, #4]
   15aac:	f854 3c20 	ldr.w	r3, [r4, #-32]
   15ab0:	9300      	str	r3, [sp, #0]
   15ab2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   15ab6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   15aba:	f7ff ff7d 	bl	159b8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   15abe:	f854 3c30 	ldr.w	r3, [r4, #-48]
   15ac2:	655d      	str	r5, [r3, #84]	; 0x54
   15ac4:	4625      	mov	r5, r4
   15ac6:	e7d0      	b.n	15a6a <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   15ac8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   15aca:	1c4b      	adds	r3, r1, #1
   15acc:	d017      	beq.n	15afe <z_init_static_threads+0xa2>
   15ace:	f240 3be7 	movw	fp, #999	; 0x3e7
   15ad2:	f04f 0c00 	mov.w	ip, #0
					    K_MSEC(thread_data->init_delay));
   15ad6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   15ada:	fbc9 bc01 	smlal	fp, ip, r9, r1
   15ade:	2300      	movs	r3, #0
   15ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15ae4:	4658      	mov	r0, fp
   15ae6:	4661      	mov	r1, ip
   15ae8:	f7f6 fd66 	bl	c5b8 <__aeabi_uldivmod>
   15aec:	2700      	movs	r7, #0
   15aee:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15af0:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
   15af4:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   15af6:	d104      	bne.n	15b02 <z_init_static_threads+0xa6>
	z_sched_start(thread);
   15af8:	4628      	mov	r0, r5
   15afa:	f7ff fca3 	bl	15444 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   15afe:	3430      	adds	r4, #48	; 0x30
   15b00:	e7be      	b.n	15a80 <z_init_static_threads+0x24>
   15b02:	4602      	mov	r2, r0
   15b04:	463b      	mov	r3, r7
   15b06:	4651      	mov	r1, sl
   15b08:	f105 0018 	add.w	r0, r5, #24
   15b0c:	f000 f842 	bl	15b94 <z_add_timeout>
   15b10:	e7f5      	b.n	15afe <z_init_static_threads+0xa2>
   15b12:	bf00      	nop
   15b14:	20020120 	.word	0x20020120
   15b18:	20020120 	.word	0x20020120
   15b1c:	000271b7 	.word	0x000271b7

00015b20 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   15b20:	4b03      	ldr	r3, [pc, #12]	; (15b30 <elapsed+0x10>)
   15b22:	681b      	ldr	r3, [r3, #0]
   15b24:	b90b      	cbnz	r3, 15b2a <elapsed+0xa>
   15b26:	f7fd bc99 	b.w	1345c <z_clock_elapsed>
}
   15b2a:	2000      	movs	r0, #0
   15b2c:	4770      	bx	lr
   15b2e:	bf00      	nop
   15b30:	20021800 	.word	0x20021800

00015b34 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15b34:	6803      	ldr	r3, [r0, #0]
   15b36:	b140      	cbz	r0, 15b4a <remove_timeout+0x16>
   15b38:	4a07      	ldr	r2, [pc, #28]	; (15b58 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
   15b3a:	6852      	ldr	r2, [r2, #4]
   15b3c:	4290      	cmp	r0, r2
   15b3e:	d004      	beq.n	15b4a <remove_timeout+0x16>
	if (next(t) != NULL) {
   15b40:	b11b      	cbz	r3, 15b4a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
   15b42:	689a      	ldr	r2, [r3, #8]
   15b44:	6881      	ldr	r1, [r0, #8]
   15b46:	440a      	add	r2, r1
   15b48:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
   15b4a:	6842      	ldr	r2, [r0, #4]
   15b4c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   15b4e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15b50:	2300      	movs	r3, #0
	node->prev = NULL;
   15b52:	e9c0 3300 	strd	r3, r3, [r0]
}
   15b56:	4770      	bx	lr
   15b58:	20020048 	.word	0x20020048

00015b5c <next_timeout>:
	return list->head == list;
   15b5c:	4b0b      	ldr	r3, [pc, #44]	; (15b8c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
   15b5e:	b510      	push	{r4, lr}
   15b60:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15b62:	429c      	cmp	r4, r3
   15b64:	bf08      	it	eq
   15b66:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
   15b68:	f7ff ffda 	bl	15b20 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   15b6c:	b154      	cbz	r4, 15b84 <next_timeout+0x28>
   15b6e:	68a3      	ldr	r3, [r4, #8]
   15b70:	1a18      	subs	r0, r3, r0
   15b72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   15b76:	4b06      	ldr	r3, [pc, #24]	; (15b90 <next_timeout+0x34>)
   15b78:	691b      	ldr	r3, [r3, #16]
   15b7a:	b113      	cbz	r3, 15b82 <next_timeout+0x26>
   15b7c:	4298      	cmp	r0, r3
   15b7e:	bfa8      	it	ge
   15b80:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   15b82:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   15b84:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   15b88:	e7f5      	b.n	15b76 <next_timeout+0x1a>
   15b8a:	bf00      	nop
   15b8c:	20020048 	.word	0x20020048
   15b90:	200217c4 	.word	0x200217c4

00015b94 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   15b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b98:	9101      	str	r1, [sp, #4]
   15b9a:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15b9c:	1c4b      	adds	r3, r1, #1
   15b9e:	bf08      	it	eq
   15ba0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   15ba4:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15ba6:	d061      	beq.n	15c6c <z_add_timeout+0xd8>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   15ba8:	f06f 0301 	mvn.w	r3, #1
   15bac:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
   15bb0:	1c54      	adds	r4, r2, #1
   15bb2:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   15bb6:	ebb3 0804 	subs.w	r8, r3, r4
   15bba:	eb6b 0905 	sbc.w	r9, fp, r5
   15bbe:	f1b8 0f00 	cmp.w	r8, #0
   15bc2:	f179 0300 	sbcs.w	r3, r9, #0
   15bc6:	db0f      	blt.n	15be8 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   15bc8:	f7ff ffaa 	bl	15b20 <elapsed>
   15bcc:	f06f 0301 	mvn.w	r3, #1
   15bd0:	4a2b      	ldr	r2, [pc, #172]	; (15c80 <z_add_timeout+0xec>)
   15bd2:	e9d2 1c00 	ldrd	r1, ip, [r2]
   15bd6:	1a5b      	subs	r3, r3, r1
   15bd8:	eb6b 020c 	sbc.w	r2, fp, ip
   15bdc:	1b1e      	subs	r6, r3, r4
   15bde:	eb62 0705 	sbc.w	r7, r2, r5
   15be2:	1a34      	subs	r4, r6, r0
   15be4:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   15be8:	9b01      	ldr	r3, [sp, #4]
   15bea:	f8ca 300c 	str.w	r3, [sl, #12]
	__asm__ volatile(
   15bee:	f04f 0320 	mov.w	r3, #32
   15bf2:	f3ef 8611 	mrs	r6, BASEPRI
   15bf6:	f383 8811 	msr	BASEPRI, r3
   15bfa:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   15bfe:	f7ff ff8f 	bl	15b20 <elapsed>
	ticks = MAX(1, ticks);
   15c02:	2c01      	cmp	r4, #1
   15c04:	f175 0300 	sbcs.w	r3, r5, #0
   15c08:	bfb8      	it	lt
   15c0a:	2401      	movlt	r4, #1
	return list->head == list;
   15c0c:	4b1d      	ldr	r3, [pc, #116]	; (15c84 <z_add_timeout+0xf0>)
		to->dticks = ticks + elapsed();
   15c0e:	4420      	add	r0, r4
   15c10:	681a      	ldr	r2, [r3, #0]
   15c12:	f8ca 0008 	str.w	r0, [sl, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15c16:	429a      	cmp	r2, r3
   15c18:	d001      	beq.n	15c1e <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15c1a:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   15c1c:	b952      	cbnz	r2, 15c34 <z_add_timeout+0xa0>
	node->prev = list->tail;
   15c1e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   15c20:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
   15c24:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   15c28:	685a      	ldr	r2, [r3, #4]
   15c2a:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   15c2e:	f8c3 a004 	str.w	sl, [r3, #4]
}
   15c32:	e00d      	b.n	15c50 <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   15c34:	6890      	ldr	r0, [r2, #8]
   15c36:	f8da 1008 	ldr.w	r1, [sl, #8]
   15c3a:	4288      	cmp	r0, r1
   15c3c:	dd19      	ble.n	15c72 <z_add_timeout+0xde>
				t->dticks -= to->dticks;
   15c3e:	1a41      	subs	r1, r0, r1
   15c40:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
   15c42:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   15c44:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   15c48:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   15c4c:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   15c50:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15c52:	429a      	cmp	r2, r3
   15c54:	d006      	beq.n	15c64 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   15c56:	4592      	cmp	sl, r2
   15c58:	d104      	bne.n	15c64 <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
   15c5a:	f7ff ff7f 	bl	15b5c <next_timeout>
   15c5e:	2100      	movs	r1, #0
   15c60:	f7fd fb98 	bl	13394 <z_clock_set_timeout>
	__asm__ volatile(
   15c64:	f386 8811 	msr	BASEPRI, r6
   15c68:	f3bf 8f6f 	isb	sy
		}
	}
}
   15c6c:	b003      	add	sp, #12
   15c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   15c72:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   15c74:	4294      	cmp	r4, r2
   15c76:	f8ca 1008 	str.w	r1, [sl, #8]
   15c7a:	d0d0      	beq.n	15c1e <z_add_timeout+0x8a>
   15c7c:	6812      	ldr	r2, [r2, #0]
   15c7e:	e7cd      	b.n	15c1c <z_add_timeout+0x88>
   15c80:	200201b0 	.word	0x200201b0
   15c84:	20020048 	.word	0x20020048

00015c88 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
   15c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15c8c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   15c8e:	f7ff fc3d 	bl	1550c <z_time_slice>
	__asm__ volatile(
   15c92:	f04f 0320 	mov.w	r3, #32
   15c96:	f3ef 8411 	mrs	r4, BASEPRI
   15c9a:	f383 8811 	msr	BASEPRI, r3
   15c9e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   15ca2:	f8df 8084 	ldr.w	r8, [pc, #132]	; 15d28 <z_clock_announce+0xa0>
   15ca6:	4d1f      	ldr	r5, [pc, #124]	; (15d24 <z_clock_announce+0x9c>)
   15ca8:	46c1      	mov	r9, r8
	return list->head == list;
   15caa:	f8df a080 	ldr.w	sl, [pc, #128]	; 15d2c <z_clock_announce+0xa4>
   15cae:	602e      	str	r6, [r5, #0]
   15cb0:	f8da 0000 	ldr.w	r0, [sl]
   15cb4:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15cb6:	4550      	cmp	r0, sl
   15cb8:	e9d8 6700 	ldrd	r6, r7, [r8]
   15cbc:	d005      	beq.n	15cca <z_clock_announce+0x42>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   15cbe:	b120      	cbz	r0, 15cca <z_clock_announce+0x42>
   15cc0:	6883      	ldr	r3, [r0, #8]
   15cc2:	4293      	cmp	r3, r2
   15cc4:	dd13      	ble.n	15cee <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   15cc6:	1a9b      	subs	r3, r3, r2
   15cc8:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
   15cca:	18b6      	adds	r6, r6, r2
   15ccc:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
   15cd0:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
   15cd4:	2600      	movs	r6, #0
   15cd6:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   15cd8:	f7ff ff40 	bl	15b5c <next_timeout>
   15cdc:	4631      	mov	r1, r6
   15cde:	f7fd fb59 	bl	13394 <z_clock_set_timeout>
	__asm__ volatile(
   15ce2:	f384 8811 	msr	BASEPRI, r4
   15ce6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   15cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
   15cee:	18f6      	adds	r6, r6, r3
   15cf0:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
   15cf4:	1ad3      	subs	r3, r2, r3
   15cf6:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
   15cf8:	2300      	movs	r3, #0
   15cfa:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
   15cfc:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
   15d00:	f7ff ff18 	bl	15b34 <remove_timeout>
   15d04:	f384 8811 	msr	BASEPRI, r4
   15d08:	f3bf 8f6f 	isb	sy
		t->fn(t);
   15d0c:	68c3      	ldr	r3, [r0, #12]
   15d0e:	4798      	blx	r3
	__asm__ volatile(
   15d10:	f04f 0320 	mov.w	r3, #32
   15d14:	f3ef 8411 	mrs	r4, BASEPRI
   15d18:	f383 8811 	msr	BASEPRI, r3
   15d1c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   15d20:	e7c6      	b.n	15cb0 <z_clock_announce+0x28>
   15d22:	bf00      	nop
   15d24:	20021800 	.word	0x20021800
   15d28:	200201b0 	.word	0x200201b0
   15d2c:	20020048 	.word	0x20020048

00015d30 <z_tick_get>:

s64_t z_tick_get(void)
{
   15d30:	b510      	push	{r4, lr}
   15d32:	f04f 0320 	mov.w	r3, #32
   15d36:	f3ef 8411 	mrs	r4, BASEPRI
   15d3a:	f383 8811 	msr	BASEPRI, r3
   15d3e:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   15d42:	f7fd fb8b 	bl	1345c <z_clock_elapsed>
   15d46:	4b06      	ldr	r3, [pc, #24]	; (15d60 <z_tick_get+0x30>)
   15d48:	e9d3 2300 	ldrd	r2, r3, [r3]
   15d4c:	1812      	adds	r2, r2, r0
   15d4e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   15d52:	f384 8811 	msr	BASEPRI, r4
   15d56:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   15d5a:	4610      	mov	r0, r2
   15d5c:	4619      	mov	r1, r3
   15d5e:	bd10      	pop	{r4, pc}
   15d60:	200201b0 	.word	0x200201b0

00015d64 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   15d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   15d66:	e9d0 2308 	ldrd	r2, r3, [r0, #32]
   15d6a:	1c56      	adds	r6, r2, #1
   15d6c:	f143 0700 	adc.w	r7, r3, #0
   15d70:	2f00      	cmp	r7, #0
   15d72:	bf08      	it	eq
   15d74:	2e02      	cmpeq	r6, #2
{
   15d76:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   15d78:	d302      	bcc.n	15d80 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15d7a:	490c      	ldr	r1, [pc, #48]	; (15dac <z_timer_expiration_handler+0x48>)
   15d7c:	f7ff ff0a 	bl	15b94 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   15d80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   15d82:	3301      	adds	r3, #1
   15d84:	62a3      	str	r3, [r4, #40]	; 0x28

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   15d86:	69a3      	ldr	r3, [r4, #24]
   15d88:	b10b      	cbz	r3, 15d8e <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   15d8a:	4620      	mov	r0, r4
   15d8c:	4798      	blx	r3
	return list->head == list;
   15d8e:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15d92:	42a5      	cmp	r5, r4
   15d94:	d008      	beq.n	15da8 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   15d96:	b13d      	cbz	r5, 15da8 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   15d98:	4628      	mov	r0, r5
   15d9a:	f011 f9b8 	bl	2710e <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   15d9e:	4628      	mov	r0, r5
   15da0:	f011 f9f9 	bl	27196 <z_ready_thread>
   15da4:	2300      	movs	r3, #0
   15da6:	672b      	str	r3, [r5, #112]	; 0x70

	arch_thread_return_value_set(thread, 0);
}
   15da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15daa:	bf00      	nop
   15dac:	00015d65 	.word	0x00015d65

00015db0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   15db0:	e92d 4df3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, sl, fp, lr}
   15db4:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   15db8:	ea54 0105 	orrs.w	r1, r4, r5
{
   15dbc:	4680      	mov	r8, r0
   15dbe:	4616      	mov	r6, r2
   15dc0:	461f      	mov	r7, r3
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   15dc2:	d016      	beq.n	15df2 <z_impl_k_timer_start+0x42>
   15dc4:	f06f 0101 	mvn.w	r1, #1
   15dc8:	ebb1 0a04 	subs.w	sl, r1, r4
   15dcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15dd0:	eb61 0b05 	sbc.w	fp, r1, r5
   15dd4:	f1ba 0f00 	cmp.w	sl, #0
   15dd8:	f17b 0100 	sbcs.w	r1, fp, #0
   15ddc:	da09      	bge.n	15df2 <z_impl_k_timer_start+0x42>
		period.ticks = MAX(period.ticks - 1, 1);
   15dde:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   15de2:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   15de6:	2c01      	cmp	r4, #1
   15de8:	f175 0100 	sbcs.w	r1, r5, #0
   15dec:	bfbc      	itt	lt
   15dee:	2401      	movlt	r4, #1
   15df0:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   15df2:	f06f 0101 	mvn.w	r1, #1
   15df6:	1a89      	subs	r1, r1, r2
   15df8:	9100      	str	r1, [sp, #0]
   15dfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15dfe:	eb61 0103 	sbc.w	r1, r1, r3
   15e02:	9101      	str	r1, [sp, #4]
   15e04:	e9dd 0100 	ldrd	r0, r1, [sp]
   15e08:	2800      	cmp	r0, #0
   15e0a:	f171 0100 	sbcs.w	r1, r1, #0
   15e0e:	da09      	bge.n	15e24 <z_impl_k_timer_start+0x74>
		duration.ticks = MAX(duration.ticks - 1, 0);
   15e10:	f112 36ff 	adds.w	r6, r2, #4294967295	; 0xffffffff
   15e14:	f143 37ff 	adc.w	r7, r3, #4294967295	; 0xffffffff
   15e18:	2e00      	cmp	r6, #0
   15e1a:	f177 0300 	sbcs.w	r3, r7, #0
   15e1e:	bfbc      	itt	lt
   15e20:	2600      	movlt	r6, #0
   15e22:	2700      	movlt	r7, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   15e24:	4640      	mov	r0, r8
   15e26:	f011 fa66 	bl	272f6 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   15e2a:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15e2c:	4632      	mov	r2, r6
	timer->status = 0U;
   15e2e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15e32:	4640      	mov	r0, r8
   15e34:	463b      	mov	r3, r7
   15e36:	4904      	ldr	r1, [pc, #16]	; (15e48 <z_impl_k_timer_start+0x98>)
	timer->period = period;
   15e38:	e9c8 4508 	strd	r4, r5, [r8, #32]
		     duration);
}
   15e3c:	b002      	add	sp, #8
   15e3e:	e8bd 4df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   15e42:	f7ff bea7 	b.w	15b94 <z_add_timeout>
   15e46:	bf00      	nop
   15e48:	00015d65 	.word	0x00015d65

00015e4c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   15e4c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   15e4e:	4c06      	ldr	r4, [pc, #24]	; (15e68 <statics_init+0x1c>)
   15e50:	4d06      	ldr	r5, [pc, #24]	; (15e6c <statics_init+0x20>)
   15e52:	42ac      	cmp	r4, r5
   15e54:	d301      	bcc.n	15e5a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   15e56:	2000      	movs	r0, #0
   15e58:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   15e5a:	4620      	mov	r0, r4
   15e5c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   15e60:	f011 fabc 	bl	273dc <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   15e64:	3418      	adds	r4, #24
   15e66:	e7f4      	b.n	15e52 <statics_init+0x6>
   15e68:	20020120 	.word	0x20020120
   15e6c:	20020138 	.word	0x20020138

00015e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
   15e70:	2920      	cmp	r1, #32
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
   15e72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15e76:	4605      	mov	r5, r0
   15e78:	4688      	mov	r8, r1
   15e7a:	4614      	mov	r4, r2
   15e7c:	4699      	mov	r9, r3
    if (op == BuiltinOperator_CUSTOM) {
   15e7e:	d10a      	bne.n	15e96 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x26>
      if (error_reporter_ != nullptr) {
   15e80:	f241 238c 	movw	r3, #4748	; 0x128c
   15e84:	58c0      	ldr	r0, [r0, r3]
   15e86:	b910      	cbnz	r0, 15e8e <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x1e>
        TF_LITE_REPORT_ERROR(error_reporter_,
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
   15e88:	2001      	movs	r0, #1
    builtin_codes_[num_buitin_ops_] = op;
    builtin_parsers_[num_buitin_ops_] = parser;
    num_buitin_ops_++;

    return kTfLiteOk;
  }
   15e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TF_LITE_REPORT_ERROR(error_reporter_,
   15e8e:	4922      	ldr	r1, [pc, #136]	; (15f18 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xa8>)
   15e90:	f01a f856 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   15e94:	e7f8      	b.n	15e88 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
    if (FindOp(op) != nullptr) {
   15e96:	6803      	ldr	r3, [r0, #0]
   15e98:	691b      	ldr	r3, [r3, #16]
   15e9a:	4798      	blx	r3
   15e9c:	4607      	mov	r7, r0
   15e9e:	b148      	cbz	r0, 15eb4 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x44>
      if (error_reporter_ != nullptr) {
   15ea0:	f241 238c 	movw	r3, #4748	; 0x128c
   15ea4:	58e8      	ldr	r0, [r5, r3]
   15ea6:	2800      	cmp	r0, #0
   15ea8:	d0ee      	beq.n	15e88 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
        TF_LITE_REPORT_ERROR(error_reporter_,
   15eaa:	4642      	mov	r2, r8
   15eac:	491b      	ldr	r1, [pc, #108]	; (15f1c <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xac>)
   15eae:	f01a f847 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   15eb2:	e7e9      	b.n	15e88 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
    if (registrations_len_ >= tOpCount) {
   15eb4:	f241 0e04 	movw	lr, #4100	; 0x1004
   15eb8:	f855 c00e 	ldr.w	ip, [r5, lr]
   15ebc:	f1bc 0f7f 	cmp.w	ip, #127	; 0x7f
   15ec0:	d90a      	bls.n	15ed8 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x68>
      if (error_reporter_) {
   15ec2:	f241 238c 	movw	r3, #4748	; 0x128c
   15ec6:	58e8      	ldr	r0, [r5, r3]
   15ec8:	2800      	cmp	r0, #0
   15eca:	d0dd      	beq.n	15e88 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
        TF_LITE_REPORT_ERROR(error_reporter_,
   15ecc:	2380      	movs	r3, #128	; 0x80
   15ece:	4642      	mov	r2, r8
   15ed0:	4913      	ldr	r1, [pc, #76]	; (15f20 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xb0>)
   15ed2:	f01a f835 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   15ed6:	e7d7      	b.n	15e88 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x18>
    registrations_[registrations_len_] = registration;
   15ed8:	eb05 1a4c 	add.w	sl, r5, ip, lsl #5
   15edc:	f10a 0604 	add.w	r6, sl, #4
   15ee0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15ee2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   15ee4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   15ee8:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    registrations_len_++;
   15eec:	f10c 0301 	add.w	r3, ip, #1
    registrations_[registrations_len_].builtin_code = op;
   15ef0:	f8ca 8018 	str.w	r8, [sl, #24]
    registrations_len_++;
   15ef4:	f845 300e 	str.w	r3, [r5, lr]
    builtin_codes_[num_buitin_ops_] = op;
   15ef8:	f241 2388 	movw	r3, #4744	; 0x1288
   15efc:	f241 0108 	movw	r1, #4104	; 0x1008
   15f00:	58ea      	ldr	r2, [r5, r3]
   15f02:	18a8      	adds	r0, r5, r2
   15f04:	f800 8001 	strb.w	r8, [r0, r1]
    builtin_parsers_[num_buitin_ops_] = parser;
   15f08:	f202 4122 	addw	r1, r2, #1058	; 0x422
    num_buitin_ops_++;
   15f0c:	3201      	adds	r2, #1
    builtin_parsers_[num_buitin_ops_] = parser;
   15f0e:	f845 9021 	str.w	r9, [r5, r1, lsl #2]
    return kTfLiteOk;
   15f12:	4638      	mov	r0, r7
    num_buitin_ops_++;
   15f14:	50ea      	str	r2, [r5, r3]
    return kTfLiteOk;
   15f16:	e7b8      	b.n	15e8a <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x1a>
   15f18:	0003409e 	.word	0x0003409e
   15f1c:	000340e3 	.word	0x000340e3
   15f20:	00034132 	.word	0x00034132

00015f24 <_ZN6tflite14AllOpsResolverC1Ev>:
const char* GetString_ETHOSU();
}  // namespace custom
}  // namespace micro
}  // namespace ops

AllOpsResolver::AllOpsResolver() {
   15f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : error_reporter_(error_reporter) {}
   15f28:	f241 2388 	movw	r3, #4744	; 0x1288
   15f2c:	2500      	movs	r5, #0
   15f2e:	f241 0604 	movw	r6, #4100	; 0x1004
   15f32:	f241 278c 	movw	r7, #4748	; 0x128c
   15f36:	4604      	mov	r4, r0
   15f38:	5185      	str	r5, [r0, r6]
   15f3a:	50c5      	str	r5, [r0, r3]
   15f3c:	4be3      	ldr	r3, [pc, #908]	; (162cc <_ZN6tflite14AllOpsResolverC1Ev+0x3a8>)
   15f3e:	b088      	sub	sp, #32
   15f40:	51c5      	str	r5, [r0, r7]
   15f42:	6003      	str	r3, [r0, #0]
    return AddBuiltin(BuiltinOperator_ABS, tflite::ops::micro::Register_ABS(),
   15f44:	4668      	mov	r0, sp
   15f46:	f004 fc7b 	bl	1a840 <_ZN6tflite3ops5micro12Register_ABSEv>
                      ParseAbs);
   15f4a:	466a      	mov	r2, sp
   15f4c:	2165      	movs	r1, #101	; 0x65
   15f4e:	4be0      	ldr	r3, [pc, #896]	; (162d0 <_ZN6tflite14AllOpsResolverC1Ev+0x3ac>)
   15f50:	4620      	mov	r0, r4
   15f52:	f7ff ff8d 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_ADD, tflite::ops::micro::Register_ADD(),
   15f56:	4668      	mov	r0, sp
   15f58:	f000 ff50 	bl	16dfc <_ZN6tflite3ops5micro12Register_ADDEv>
                      ParseAdd);
   15f5c:	4629      	mov	r1, r5
   15f5e:	466a      	mov	r2, sp
   15f60:	4bdc      	ldr	r3, [pc, #880]	; (162d4 <_ZN6tflite14AllOpsResolverC1Ev+0x3b0>)
   15f62:	4620      	mov	r0, r4
   15f64:	f7ff ff84 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_ARG_MAX(), ParseArgMax);
   15f68:	4668      	mov	r0, sp
   15f6a:	f001 f82b 	bl	16fc4 <_ZN6tflite3ops5micro16Register_ARG_MAXEv>
   15f6e:	466a      	mov	r2, sp
   15f70:	2138      	movs	r1, #56	; 0x38
   15f72:	4bd9      	ldr	r3, [pc, #868]	; (162d8 <_ZN6tflite14AllOpsResolverC1Ev+0x3b4>)
   15f74:	4620      	mov	r0, r4
   15f76:	f7ff ff7b 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_ARG_MIN(), ParseArgMin);
   15f7a:	4668      	mov	r0, sp
   15f7c:	f001 f82e 	bl	16fdc <_ZN6tflite3ops5micro16Register_ARG_MINEv>
   15f80:	466a      	mov	r2, sp
   15f82:	214f      	movs	r1, #79	; 0x4f
   15f84:	4bd5      	ldr	r3, [pc, #852]	; (162dc <_ZN6tflite14AllOpsResolverC1Ev+0x3b8>)
   15f86:	4620      	mov	r0, r4
   15f88:	f7ff ff72 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_AVERAGE_POOL_2D(),
   15f8c:	4668      	mov	r0, sp
   15f8e:	f006 ff2f 	bl	1cdf0 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>
                      ParsePool);
   15f92:	466a      	mov	r2, sp
   15f94:	2101      	movs	r1, #1
   15f96:	4bd2      	ldr	r3, [pc, #840]	; (162e0 <_ZN6tflite14AllOpsResolverC1Ev+0x3bc>)
   15f98:	4620      	mov	r0, r4
   15f9a:	f7ff ff69 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_CEIL, tflite::ops::micro::Register_CEIL(),
   15f9e:	4668      	mov	r0, sp
   15fa0:	f001 f976 	bl	17290 <_ZN6tflite3ops5micro13Register_CEILEv>
                      ParseCeil);
   15fa4:	466a      	mov	r2, sp
   15fa6:	2168      	movs	r1, #104	; 0x68
   15fa8:	4bce      	ldr	r3, [pc, #824]	; (162e4 <_ZN6tflite14AllOpsResolverC1Ev+0x3c0>)
   15faa:	4620      	mov	r0, r4
   15fac:	f7ff ff60 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_CONCATENATION(),
   15fb0:	4668      	mov	r0, sp
   15fb2:	f003 f9a1 	bl	192f8 <_ZN6tflite3ops5micro22Register_CONCATENATIONEv>
                      ParseConcatenation);
   15fb6:	466a      	mov	r2, sp
   15fb8:	2102      	movs	r1, #2
   15fba:	4bcb      	ldr	r3, [pc, #812]	; (162e8 <_ZN6tflite14AllOpsResolverC1Ev+0x3c4>)
   15fbc:	4620      	mov	r0, r4
   15fbe:	f7ff ff57 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_CONV_2D(), ParseConv2D);
   15fc2:	4668      	mov	r0, sp
   15fc4:	f003 fd94 	bl	19af0 <_ZN6tflite3ops5micro16Register_CONV_2DEv>
   15fc8:	466a      	mov	r2, sp
   15fca:	2103      	movs	r1, #3
   15fcc:	4bc7      	ldr	r3, [pc, #796]	; (162ec <_ZN6tflite14AllOpsResolverC1Ev+0x3c8>)
   15fce:	4620      	mov	r0, r4
   15fd0:	f7ff ff4e 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_COS, tflite::ops::micro::Register_COS(),
   15fd4:	4668      	mov	r0, sp
   15fd6:	f004 fc4f 	bl	1a878 <_ZN6tflite3ops5micro12Register_COSEv>
                      ParseCos);
   15fda:	466a      	mov	r2, sp
   15fdc:	216c      	movs	r1, #108	; 0x6c
   15fde:	4bc4      	ldr	r3, [pc, #784]	; (162f0 <_ZN6tflite14AllOpsResolverC1Ev+0x3cc>)
   15fe0:	4620      	mov	r0, r4
   15fe2:	f7ff ff45 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_DEPTHWISE_CONV_2D(),
   15fe6:	4668      	mov	r0, sp
   15fe8:	f003 ffdc 	bl	19fa4 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>
                      ParseDepthwiseConv2D);
   15fec:	466a      	mov	r2, sp
   15fee:	2104      	movs	r1, #4
   15ff0:	4bc0      	ldr	r3, [pc, #768]	; (162f4 <_ZN6tflite14AllOpsResolverC1Ev+0x3d0>)
   15ff2:	4620      	mov	r0, r4
   15ff4:	f7ff ff3c 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_DEQUANTIZE(),
   15ff8:	4668      	mov	r0, sp
   15ffa:	f004 facb 	bl	1a594 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>
                      ParseDequantize);
   15ffe:	466a      	mov	r2, sp
   16000:	2106      	movs	r1, #6
   16002:	4bbd      	ldr	r3, [pc, #756]	; (162f8 <_ZN6tflite14AllOpsResolverC1Ev+0x3d4>)
   16004:	4620      	mov	r0, r4
   16006:	f7ff ff33 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_EQUAL(), ParseEqual);
   1600a:	4668      	mov	r0, sp
   1600c:	f001 f94e 	bl	172ac <_ZN6tflite3ops5micro14Register_EQUALEv>
   16010:	466a      	mov	r2, sp
   16012:	2147      	movs	r1, #71	; 0x47
   16014:	4bb9      	ldr	r3, [pc, #740]	; (162fc <_ZN6tflite14AllOpsResolverC1Ev+0x3d8>)
   16016:	4620      	mov	r0, r4
   16018:	f7ff ff2a 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_FLOOR(), ParseFloor);
   1601c:	4668      	mov	r0, sp
   1601e:	f004 fcf5 	bl	1aa0c <_ZN6tflite3ops5micro14Register_FLOOREv>
   16022:	466a      	mov	r2, sp
   16024:	2108      	movs	r1, #8
   16026:	4bb6      	ldr	r3, [pc, #728]	; (16300 <_ZN6tflite14AllOpsResolverC1Ev+0x3dc>)
   16028:	4620      	mov	r0, r4
   1602a:	f7ff ff21 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_FULLY_CONNECTED(),
   1602e:	4668      	mov	r0, sp
   16030:	f004 ff94 	bl	1af5c <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
                      ParseFullyConnected);
   16034:	466a      	mov	r2, sp
   16036:	2109      	movs	r1, #9
   16038:	4bb2      	ldr	r3, [pc, #712]	; (16304 <_ZN6tflite14AllOpsResolverC1Ev+0x3e0>)
   1603a:	4620      	mov	r0, r4
   1603c:	f7ff ff18 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_GREATER(), ParseGreater);
   16040:	4668      	mov	r0, sp
   16042:	f001 f94b 	bl	172dc <_ZN6tflite3ops5micro16Register_GREATEREv>
   16046:	466a      	mov	r2, sp
   16048:	213d      	movs	r1, #61	; 0x3d
   1604a:	4baf      	ldr	r3, [pc, #700]	; (16308 <_ZN6tflite14AllOpsResolverC1Ev+0x3e4>)
   1604c:	4620      	mov	r0, r4
   1604e:	f7ff ff0f 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_GREATER_EQUAL(),
   16052:	4668      	mov	r0, sp
   16054:	f001 f94e 	bl	172f4 <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv>
                      ParseGreaterEqual);
   16058:	466a      	mov	r2, sp
   1605a:	213e      	movs	r1, #62	; 0x3e
   1605c:	4bab      	ldr	r3, [pc, #684]	; (1630c <_ZN6tflite14AllOpsResolverC1Ev+0x3e8>)
   1605e:	4620      	mov	r0, r4
   16060:	f7ff ff06 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_HARD_SWISH(),
   16064:	4668      	mov	r0, sp
   16066:	f005 f82f 	bl	1b0c8 <_ZN6tflite3ops5micro19Register_HARD_SWISHEv>
                      ParseHardSwish);
   1606a:	466a      	mov	r2, sp
   1606c:	2175      	movs	r1, #117	; 0x75
   1606e:	4ba8      	ldr	r3, [pc, #672]	; (16310 <_ZN6tflite14AllOpsResolverC1Ev+0x3ec>)
   16070:	4620      	mov	r0, r4
   16072:	f7ff fefd 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_L2_NORMALIZATION(),
   16076:	4668      	mov	r0, sp
   16078:	f015 fe81 	bl	2bd7e <_ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv>
                      ParseL2Normalization);
   1607c:	466a      	mov	r2, sp
   1607e:	210b      	movs	r1, #11
   16080:	4ba4      	ldr	r3, [pc, #656]	; (16314 <_ZN6tflite14AllOpsResolverC1Ev+0x3f0>)
   16082:	4620      	mov	r0, r4
   16084:	f7ff fef4 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_LESS, tflite::ops::micro::Register_LESS(),
   16088:	4668      	mov	r0, sp
   1608a:	f001 f93f 	bl	1730c <_ZN6tflite3ops5micro13Register_LESSEv>
                      ParseLess);
   1608e:	466a      	mov	r2, sp
   16090:	213a      	movs	r1, #58	; 0x3a
   16092:	4ba1      	ldr	r3, [pc, #644]	; (16318 <_ZN6tflite14AllOpsResolverC1Ev+0x3f4>)
   16094:	4620      	mov	r0, r4
   16096:	f7ff feeb 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_LESS_EQUAL(),
   1609a:	4668      	mov	r0, sp
   1609c:	f001 f942 	bl	17324 <_ZN6tflite3ops5micro19Register_LESS_EQUALEv>
                      ParseLessEqual);
   160a0:	466a      	mov	r2, sp
   160a2:	213f      	movs	r1, #63	; 0x3f
   160a4:	4b9d      	ldr	r3, [pc, #628]	; (1631c <_ZN6tflite14AllOpsResolverC1Ev+0x3f8>)
   160a6:	4620      	mov	r0, r4
   160a8:	f7ff fee2 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_LOG, tflite::ops::micro::Register_LOG(),
   160ac:	4668      	mov	r0, sp
   160ae:	f004 fbf1 	bl	1a894 <_ZN6tflite3ops5micro12Register_LOGEv>
                      ParseLog);
   160b2:	466a      	mov	r2, sp
   160b4:	2149      	movs	r1, #73	; 0x49
   160b6:	4b9a      	ldr	r3, [pc, #616]	; (16320 <_ZN6tflite14AllOpsResolverC1Ev+0x3fc>)
   160b8:	4620      	mov	r0, r4
   160ba:	f7ff fed9 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_LOGICAL_AND(),
   160be:	4668      	mov	r0, sp
   160c0:	f005 faa2 	bl	1b608 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv>
                      ParseLogicalAnd);
   160c4:	466a      	mov	r2, sp
   160c6:	2156      	movs	r1, #86	; 0x56
   160c8:	4b96      	ldr	r3, [pc, #600]	; (16324 <_ZN6tflite14AllOpsResolverC1Ev+0x400>)
   160ca:	4620      	mov	r0, r4
   160cc:	f7ff fed0 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_LOGICAL_NOT(),
   160d0:	4668      	mov	r0, sp
   160d2:	f004 fc17 	bl	1a904 <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv>
                      ParseLogicalNot);
   160d6:	466a      	mov	r2, sp
   160d8:	2157      	movs	r1, #87	; 0x57
   160da:	4b93      	ldr	r3, [pc, #588]	; (16328 <_ZN6tflite14AllOpsResolverC1Ev+0x404>)
   160dc:	4620      	mov	r0, r4
   160de:	f7ff fec7 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_LOGICAL_OR(),
   160e2:	4668      	mov	r0, sp
   160e4:	f005 fa84 	bl	1b5f0 <_ZN6tflite3ops5micro19Register_LOGICAL_OREv>
                      ParseLogicalOr);
   160e8:	466a      	mov	r2, sp
   160ea:	2154      	movs	r1, #84	; 0x54
   160ec:	4b8f      	ldr	r3, [pc, #572]	; (1632c <_ZN6tflite14AllOpsResolverC1Ev+0x408>)
   160ee:	4620      	mov	r0, r4
   160f0:	f7ff febe 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_LOGISTIC(), ParseLogistic);
   160f4:	4668      	mov	r0, sp
   160f6:	f005 fb05 	bl	1b704 <_ZN6tflite3ops5micro17Register_LOGISTICEv>
   160fa:	466a      	mov	r2, sp
   160fc:	210e      	movs	r1, #14
   160fe:	4b8c      	ldr	r3, [pc, #560]	; (16330 <_ZN6tflite14AllOpsResolverC1Ev+0x40c>)
   16100:	4620      	mov	r0, r4
   16102:	f7ff feb5 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_MAXIMUM(), ParseMaximum);
   16106:	4668      	mov	r0, sp
   16108:	f005 fd3a 	bl	1bb80 <_ZN6tflite3ops5micro16Register_MAXIMUMEv>
   1610c:	466a      	mov	r2, sp
   1610e:	2137      	movs	r1, #55	; 0x37
   16110:	4b88      	ldr	r3, [pc, #544]	; (16334 <_ZN6tflite14AllOpsResolverC1Ev+0x410>)
   16112:	4620      	mov	r0, r4
   16114:	f7ff feac 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_MAX_POOL_2D(), ParsePool);
   16118:	4668      	mov	r0, sp
   1611a:	f006 fe75 	bl	1ce08 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
   1611e:	466a      	mov	r2, sp
   16120:	2111      	movs	r1, #17
   16122:	4b6f      	ldr	r3, [pc, #444]	; (162e0 <_ZN6tflite14AllOpsResolverC1Ev+0x3bc>)
   16124:	4620      	mov	r0, r4
   16126:	f7ff fea3 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_MEAN, tflite::ops::micro::Register_MEAN(),
   1612a:	4668      	mov	r0, sp
   1612c:	f007 faea 	bl	1d704 <_ZN6tflite3ops5micro13Register_MEANEv>
                      ParseReducer);
   16130:	466a      	mov	r2, sp
   16132:	2128      	movs	r1, #40	; 0x28
   16134:	4b80      	ldr	r3, [pc, #512]	; (16338 <_ZN6tflite14AllOpsResolverC1Ev+0x414>)
   16136:	4620      	mov	r0, r4
   16138:	f7ff fe9a 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_MINIMUM(), ParseMinimum);
   1613c:	4668      	mov	r0, sp
   1613e:	f005 fd2b 	bl	1bb98 <_ZN6tflite3ops5micro16Register_MINIMUMEv>
   16142:	466a      	mov	r2, sp
   16144:	2139      	movs	r1, #57	; 0x39
   16146:	4b7d      	ldr	r3, [pc, #500]	; (1633c <_ZN6tflite14AllOpsResolverC1Ev+0x418>)
   16148:	4620      	mov	r0, r4
   1614a:	f7ff fe91 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_MUL, tflite::ops::micro::Register_MUL(),
   1614e:	4668      	mov	r0, sp
   16150:	f005 ff72 	bl	1c038 <_ZN6tflite3ops5micro12Register_MULEv>
                      ParseMul);
   16154:	466a      	mov	r2, sp
   16156:	2112      	movs	r1, #18
   16158:	4b79      	ldr	r3, [pc, #484]	; (16340 <_ZN6tflite14AllOpsResolverC1Ev+0x41c>)
   1615a:	4620      	mov	r0, r4
   1615c:	f7ff fe88 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_NEG, tflite::ops::micro::Register_NEG(),
   16160:	4668      	mov	r0, sp
   16162:	f006 f8bd 	bl	1c2e0 <_ZN6tflite3ops5micro12Register_NEGEv>
                      ParseNeg);
   16166:	466a      	mov	r2, sp
   16168:	213b      	movs	r1, #59	; 0x3b
   1616a:	4b76      	ldr	r3, [pc, #472]	; (16344 <_ZN6tflite14AllOpsResolverC1Ev+0x420>)
   1616c:	4620      	mov	r0, r4
   1616e:	f7ff fe7f 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_NOT_EQUAL(), ParseNotEqual);
   16172:	4668      	mov	r0, sp
   16174:	f001 f8a6 	bl	172c4 <_ZN6tflite3ops5micro18Register_NOT_EQUALEv>
   16178:	466a      	mov	r2, sp
   1617a:	2148      	movs	r1, #72	; 0x48
   1617c:	4b72      	ldr	r3, [pc, #456]	; (16348 <_ZN6tflite14AllOpsResolverC1Ev+0x424>)
   1617e:	4620      	mov	r0, r4
   16180:	f7ff fe76 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_PACK, tflite::ops::micro::Register_PACK(),
   16184:	4668      	mov	r0, sp
   16186:	f006 fae9 	bl	1c75c <_ZN6tflite3ops5micro13Register_PACKEv>
                      ParsePack);
   1618a:	466a      	mov	r2, sp
   1618c:	2153      	movs	r1, #83	; 0x53
   1618e:	4b6f      	ldr	r3, [pc, #444]	; (1634c <_ZN6tflite14AllOpsResolverC1Ev+0x428>)
   16190:	4620      	mov	r0, r4
   16192:	f7ff fe6d 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_PAD, tflite::ops::micro::Register_PAD(),
   16196:	4668      	mov	r0, sp
   16198:	f006 fbc6 	bl	1c928 <_ZN6tflite3ops5micro12Register_PADEv>
                      ParsePad);
   1619c:	466a      	mov	r2, sp
   1619e:	2122      	movs	r1, #34	; 0x22
   161a0:	4b6b      	ldr	r3, [pc, #428]	; (16350 <_ZN6tflite14AllOpsResolverC1Ev+0x42c>)
   161a2:	4620      	mov	r0, r4
   161a4:	f7ff fe64 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_PADV2(), ParsePadV2);
   161a8:	4668      	mov	r0, sp
   161aa:	f016 ff83 	bl	2d0b4 <_ZN6tflite3ops5micro14Register_PADV2Ev>
   161ae:	466a      	mov	r2, sp
   161b0:	213c      	movs	r1, #60	; 0x3c
   161b2:	4b68      	ldr	r3, [pc, #416]	; (16354 <_ZN6tflite14AllOpsResolverC1Ev+0x430>)
   161b4:	4620      	mov	r0, r4
   161b6:	f7ff fe5b 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_PRELU(), ParsePrelu);
   161ba:	4668      	mov	r0, sp
   161bc:	f006 ff9a 	bl	1d0f4 <_ZN6tflite3ops5micro14Register_PRELUEv>
   161c0:	466a      	mov	r2, sp
   161c2:	2136      	movs	r1, #54	; 0x36
   161c4:	4b64      	ldr	r3, [pc, #400]	; (16358 <_ZN6tflite14AllOpsResolverC1Ev+0x434>)
   161c6:	4620      	mov	r0, r4
   161c8:	f7ff fe52 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_QUANTIZE(), ParseQuantize);
   161cc:	4668      	mov	r0, sp
   161ce:	f007 fa37 	bl	1d640 <_ZN6tflite3ops5micro17Register_QUANTIZEEv>
   161d2:	466a      	mov	r2, sp
   161d4:	2172      	movs	r1, #114	; 0x72
   161d6:	4b61      	ldr	r3, [pc, #388]	; (1635c <_ZN6tflite14AllOpsResolverC1Ev+0x438>)
   161d8:	4620      	mov	r0, r4
   161da:	f7ff fe49 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_RELU, tflite::ops::micro::Register_RELU(),
   161de:	4668      	mov	r0, sp
   161e0:	f000 fd18 	bl	16c14 <_ZN6tflite3ops5micro13Register_RELUEv>
                      ParseRelu);
   161e4:	466a      	mov	r2, sp
   161e6:	2113      	movs	r1, #19
   161e8:	4b5d      	ldr	r3, [pc, #372]	; (16360 <_ZN6tflite14AllOpsResolverC1Ev+0x43c>)
   161ea:	4620      	mov	r0, r4
   161ec:	f7ff fe40 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_RELU6(), ParseRelu6);
   161f0:	4668      	mov	r0, sp
   161f2:	f000 fd1d 	bl	16c30 <_ZN6tflite3ops5micro14Register_RELU6Ev>
   161f6:	466a      	mov	r2, sp
   161f8:	2115      	movs	r1, #21
   161fa:	4b5a      	ldr	r3, [pc, #360]	; (16364 <_ZN6tflite14AllOpsResolverC1Ev+0x440>)
   161fc:	4620      	mov	r0, r4
   161fe:	f7ff fe37 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
   16202:	4668      	mov	r0, sp
   16204:	f007 fd96 	bl	1dd34 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
   16208:	466a      	mov	r2, sp
   1620a:	2116      	movs	r1, #22
   1620c:	4b56      	ldr	r3, [pc, #344]	; (16368 <_ZN6tflite14AllOpsResolverC1Ev+0x444>)
   1620e:	4620      	mov	r0, r4
   16210:	f7ff fe2e 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_RESIZE_NEAREST_NEIGHBOR(),
   16214:	4668      	mov	r0, sp
   16216:	f007 fded 	bl	1ddf4 <_ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv>
                      ParseResizeNearestNeighbor);
   1621a:	466a      	mov	r2, sp
   1621c:	2161      	movs	r1, #97	; 0x61
   1621e:	4b53      	ldr	r3, [pc, #332]	; (1636c <_ZN6tflite14AllOpsResolverC1Ev+0x448>)
   16220:	4620      	mov	r0, r4
   16222:	f7ff fe25 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_ROUND(), ParseRound);
   16226:	4668      	mov	r0, sp
   16228:	f007 ff32 	bl	1e090 <_ZN6tflite3ops5micro14Register_ROUNDEv>
   1622c:	466a      	mov	r2, sp
   1622e:	2174      	movs	r1, #116	; 0x74
   16230:	4b4f      	ldr	r3, [pc, #316]	; (16370 <_ZN6tflite14AllOpsResolverC1Ev+0x44c>)
   16232:	4620      	mov	r0, r4
   16234:	f7ff fe1c 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_RSQRT(), ParseRsqrt);
   16238:	4668      	mov	r0, sp
   1623a:	f004 fb47 	bl	1a8cc <_ZN6tflite3ops5micro14Register_RSQRTEv>
   1623e:	466a      	mov	r2, sp
   16240:	214c      	movs	r1, #76	; 0x4c
   16242:	4b4c      	ldr	r3, [pc, #304]	; (16374 <_ZN6tflite14AllOpsResolverC1Ev+0x450>)
   16244:	4620      	mov	r0, r4
   16246:	f7ff fe13 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_SIN, tflite::ops::micro::Register_SIN(),
   1624a:	4668      	mov	r0, sp
   1624c:	f004 fb06 	bl	1a85c <_ZN6tflite3ops5micro12Register_SINEv>
                      ParseSin);
   16250:	466a      	mov	r2, sp
   16252:	2142      	movs	r1, #66	; 0x42
   16254:	4b48      	ldr	r3, [pc, #288]	; (16378 <_ZN6tflite14AllOpsResolverC1Ev+0x454>)
   16256:	4620      	mov	r0, r4
   16258:	f7ff fe0a 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_SOFTMAX(), ParseSoftmax);
   1625c:	4668      	mov	r0, sp
   1625e:	f007 fff9 	bl	1e254 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
   16262:	466a      	mov	r2, sp
   16264:	2119      	movs	r1, #25
   16266:	4b45      	ldr	r3, [pc, #276]	; (1637c <_ZN6tflite14AllOpsResolverC1Ev+0x458>)
   16268:	4620      	mov	r0, r4
   1626a:	f7ff fe01 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_SPLIT(), ParseSplit);
   1626e:	4668      	mov	r0, sp
   16270:	f008 fa5a 	bl	1e728 <_ZN6tflite3ops5micro14Register_SPLITEv>
   16274:	466a      	mov	r2, sp
   16276:	2131      	movs	r1, #49	; 0x31
   16278:	4b41      	ldr	r3, [pc, #260]	; (16380 <_ZN6tflite14AllOpsResolverC1Ev+0x45c>)
   1627a:	4620      	mov	r0, r4
   1627c:	f7ff fdf8 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_SQRT, tflite::ops::micro::Register_SQRT(),
   16280:	4668      	mov	r0, sp
   16282:	f004 fb15 	bl	1a8b0 <_ZN6tflite3ops5micro13Register_SQRTEv>
                      ParseSqrt);
   16286:	466a      	mov	r2, sp
   16288:	214b      	movs	r1, #75	; 0x4b
   1628a:	4b3e      	ldr	r3, [pc, #248]	; (16384 <_ZN6tflite14AllOpsResolverC1Ev+0x460>)
   1628c:	4620      	mov	r0, r4
   1628e:	f7ff fdef 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_SQUARE(), ParseSquare);
   16292:	4668      	mov	r0, sp
   16294:	f004 fb28 	bl	1a8e8 <_ZN6tflite3ops5micro15Register_SQUAREEv>
   16298:	466a      	mov	r2, sp
   1629a:	215c      	movs	r1, #92	; 0x5c
   1629c:	4b3a      	ldr	r3, [pc, #232]	; (16388 <_ZN6tflite14AllOpsResolverC1Ev+0x464>)
   1629e:	4620      	mov	r0, r4
   162a0:	f7ff fde6 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_STRIDED_SLICE(),
   162a4:	4668      	mov	r0, sp
   162a6:	f008 fb75 	bl	1e994 <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv>
                      ParseStridedSlice);
   162aa:	466a      	mov	r2, sp
   162ac:	212d      	movs	r1, #45	; 0x2d
   162ae:	4b37      	ldr	r3, [pc, #220]	; (1638c <_ZN6tflite14AllOpsResolverC1Ev+0x468>)
   162b0:	4620      	mov	r0, r4
   162b2:	f7ff fddd 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_SUB, tflite::ops::micro::Register_SUB(),
   162b6:	4668      	mov	r0, sp
   162b8:	f008 fc60 	bl	1eb7c <_ZN6tflite3ops5micro12Register_SUBEv>
                      ParseSub);
   162bc:	466a      	mov	r2, sp
   162be:	2129      	movs	r1, #41	; 0x29
   162c0:	4b33      	ldr	r3, [pc, #204]	; (16390 <_ZN6tflite14AllOpsResolverC1Ev+0x46c>)
   162c2:	4620      	mov	r0, r4
   162c4:	f7ff fdd4 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
   162c8:	e064      	b.n	16394 <_ZN6tflite14AllOpsResolverC1Ev+0x470>
   162ca:	bf00      	nop
   162cc:	00032fc8 	.word	0x00032fc8
   162d0:	0002ffb9 	.word	0x0002ffb9
   162d4:	000207c5 	.word	0x000207c5
   162d8:	00020835 	.word	0x00020835
   162dc:	000208bd 	.word	0x000208bd
   162e0:	00020cf1 	.word	0x00020cf1
   162e4:	0002ffbd 	.word	0x0002ffbd
   162e8:	00020945 	.word	0x00020945
   162ec:	000209c5 	.word	0x000209c5
   162f0:	0002ffc1 	.word	0x0002ffc1
   162f4:	00020a7d 	.word	0x00020a7d
   162f8:	0002ffc5 	.word	0x0002ffc5
   162fc:	0002ffc9 	.word	0x0002ffc9
   16300:	0002ffcd 	.word	0x0002ffcd
   16304:	00020b41 	.word	0x00020b41
   16308:	0002ffd1 	.word	0x0002ffd1
   1630c:	0002ffd5 	.word	0x0002ffd5
   16310:	0002ffd9 	.word	0x0002ffd9
   16314:	00020c09 	.word	0x00020c09
   16318:	0002ffdd 	.word	0x0002ffdd
   1631c:	0002ffe1 	.word	0x0002ffe1
   16320:	0002ffe5 	.word	0x0002ffe5
   16324:	0002ffe9 	.word	0x0002ffe9
   16328:	0002ffed 	.word	0x0002ffed
   1632c:	0002fff1 	.word	0x0002fff1
   16330:	0002fff5 	.word	0x0002fff5
   16334:	0002fff9 	.word	0x0002fff9
   16338:	0002053d 	.word	0x0002053d
   1633c:	0002fffd 	.word	0x0002fffd
   16340:	00020c7d 	.word	0x00020c7d
   16344:	00030001 	.word	0x00030001
   16348:	00030005 	.word	0x00030005
   1634c:	00020639 	.word	0x00020639
   16350:	00030009 	.word	0x00030009
   16354:	0003000d 	.word	0x0003000d
   16358:	00030011 	.word	0x00030011
   1635c:	00030015 	.word	0x00030015
   16360:	00030019 	.word	0x00030019
   16364:	0003001d 	.word	0x0003001d
   16368:	0002049d 	.word	0x0002049d
   1636c:	000205ad 	.word	0x000205ad
   16370:	00030021 	.word	0x00030021
   16374:	00030025 	.word	0x00030025
   16378:	00030029 	.word	0x00030029
   1637c:	00020eb1 	.word	0x00020eb1
   16380:	00020f19 	.word	0x00020f19
   16384:	0003002d 	.word	0x0003002d
   16388:	00030031 	.word	0x00030031
   1638c:	000206b1 	.word	0x000206b1
   16390:	00020da9 	.word	0x00020da9
    return AddBuiltin(BuiltinOperator_SVDF, tflite::ops::micro::Register_SVDF(),
   16394:	4668      	mov	r0, sp
   16396:	f009 fadf 	bl	1f958 <_ZN6tflite3ops5micro13Register_SVDFEv>
                      ParseSvdf);
   1639a:	466a      	mov	r2, sp
   1639c:	211b      	movs	r1, #27
   1639e:	4b24      	ldr	r3, [pc, #144]	; (16430 <_ZN6tflite14AllOpsResolverC1Ev+0x50c>)
   163a0:	4620      	mov	r0, r4
   163a2:	f7ff fd65 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
    return AddBuiltin(BuiltinOperator_TANH, tflite::ops::micro::Register_TANH(),
   163a6:	4668      	mov	r0, sp
   163a8:	f009 fae4 	bl	1f974 <_ZN6tflite3ops5micro13Register_TANHEv>
                      ParseTanh);
   163ac:	466a      	mov	r2, sp
   163ae:	211c      	movs	r1, #28
   163b0:	4b20      	ldr	r3, [pc, #128]	; (16434 <_ZN6tflite14AllOpsResolverC1Ev+0x510>)
   163b2:	4620      	mov	r0, r4
   163b4:	f7ff fd5c 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
                      tflite::ops::micro::Register_UNPACK(), ParseUnpack);
   163b8:	4668      	mov	r0, sp
   163ba:	f00a f801 	bl	203c0 <_ZN6tflite3ops5micro15Register_UNPACKEv>
   163be:	466a      	mov	r2, sp
   163c0:	2158      	movs	r1, #88	; 0x58
   163c2:	4b1d      	ldr	r3, [pc, #116]	; (16438 <_ZN6tflite14AllOpsResolverC1Ev+0x514>)
   163c4:	4620      	mov	r0, r4
   163c6:	f7ff fd53 	bl	15e70 <_ZN6tflite22MicroMutableOpResolverILj128EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
  AddTanh();
  AddUnpack();

  // TODO(b/159644355): Figure out if custom Ops belong in AllOpsResolver.
  TfLiteRegistration* registration =
      tflite::ops::micro::custom::Register_ETHOSU();
   163ca:	f015 faa8 	bl	2b91e <_ZN6tflite3ops5micro6custom15Register_ETHOSUEv>
  if (registration) {
   163ce:	4605      	mov	r5, r0
   163d0:	b160      	cbz	r0, 163ec <_ZN6tflite14AllOpsResolverC1Ev+0x4c8>
    AddCustom(tflite::ops::micro::custom::GetString_ETHOSU(), registration);
   163d2:	f004 faa5 	bl	1a920 <_ZN6tflite3ops5micro6custom16GetString_ETHOSUEv>
    if (registrations_len_ >= tOpCount) {
   163d6:	59a3      	ldr	r3, [r4, r6]
   163d8:	4680      	mov	r8, r0
   163da:	2b7f      	cmp	r3, #127	; 0x7f
   163dc:	d90a      	bls.n	163f4 <_ZN6tflite14AllOpsResolverC1Ev+0x4d0>
      if (error_reporter_) {
   163de:	59e0      	ldr	r0, [r4, r7]
   163e0:	b120      	cbz	r0, 163ec <_ZN6tflite14AllOpsResolverC1Ev+0x4c8>
        TF_LITE_REPORT_ERROR(
   163e2:	2380      	movs	r3, #128	; 0x80
   163e4:	4642      	mov	r2, r8
   163e6:	4915      	ldr	r1, [pc, #84]	; (1643c <_ZN6tflite14AllOpsResolverC1Ev+0x518>)
   163e8:	f019 fdaa 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  }
}
   163ec:	4620      	mov	r0, r4
   163ee:	b008      	add	sp, #32
   163f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (FindOp(name) != nullptr) {
   163f4:	4601      	mov	r1, r0
   163f6:	4620      	mov	r0, r4
   163f8:	f011 f831 	bl	2745e <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc>
   163fc:	b138      	cbz	r0, 1640e <_ZN6tflite14AllOpsResolverC1Ev+0x4ea>
      if (error_reporter_ != nullptr) {
   163fe:	59e0      	ldr	r0, [r4, r7]
   16400:	2800      	cmp	r0, #0
   16402:	d0f3      	beq.n	163ec <_ZN6tflite14AllOpsResolverC1Ev+0x4c8>
        TF_LITE_REPORT_ERROR(error_reporter_,
   16404:	4642      	mov	r2, r8
   16406:	490e      	ldr	r1, [pc, #56]	; (16440 <_ZN6tflite14AllOpsResolverC1Ev+0x51c>)
   16408:	f019 fd9a 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   1640c:	e7ee      	b.n	163ec <_ZN6tflite14AllOpsResolverC1Ev+0x4c8>
    TfLiteRegistration* new_registration = &registrations_[registrations_len_];
   1640e:	59a7      	ldr	r7, [r4, r6]
    registrations_len_ += 1;
   16410:	1c7b      	adds	r3, r7, #1
    *new_registration = *registration;
   16412:	eb04 1747 	add.w	r7, r4, r7, lsl #5
    registrations_len_ += 1;
   16416:	51a3      	str	r3, [r4, r6]
    *new_registration = *registration;
   16418:	1d3e      	adds	r6, r7, #4
   1641a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1641c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1641e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   16422:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    new_registration->builtin_code = BuiltinOperator_CUSTOM;
   16426:	2320      	movs	r3, #32
    new_registration->custom_name = name;
   16428:	e9c7 3806 	strd	r3, r8, [r7, #24]
   1642c:	e7de      	b.n	163ec <_ZN6tflite14AllOpsResolverC1Ev+0x4c8>
   1642e:	bf00      	nop
   16430:	00020e1d 	.word	0x00020e1d
   16434:	00030035 	.word	0x00030035
   16438:	0002074d 	.word	0x0002074d
   1643c:	00034175 	.word	0x00034175
   16440:	000341b7 	.word	0x000341b7

00016444 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
   16444:	b500      	push	{lr}
   16446:	b0c1      	sub	sp, #260	; 0x104
   16448:	4613      	mov	r3, r2
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
   1644a:	4668      	mov	r0, sp
   1644c:	460a      	mov	r2, r1
   1644e:	f44f 7180 	mov.w	r1, #256	; 0x100
   16452:	f000 f983 	bl	1675c <MicroVsnprintf>
  DebugLog(log_buffer);
   16456:	4668      	mov	r0, sp
   16458:	f00a ffac 	bl	213b4 <DebugLog>
  DebugLog("\r\n");
   1645c:	4803      	ldr	r0, [pc, #12]	; (1646c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x28>)
   1645e:	f00a ffa9 	bl	213b4 <DebugLog>
#endif
  return 0;
}
   16462:	2000      	movs	r0, #0
   16464:	b041      	add	sp, #260	; 0x104
   16466:	f85d fb04 	ldr.w	pc, [sp], #4
   1646a:	bf00      	nop
   1646c:	00033f9b 	.word	0x00033f9b

00016470 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   16470:	6943      	ldr	r3, [r0, #20]
   16472:	2b20      	cmp	r3, #32
   16474:	d101      	bne.n	1647a <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0xa>
    return registration->custom_name;
   16476:	6980      	ldr	r0, [r0, #24]
   16478:	4770      	bx	lr
  return (v < low) || (high < v);
   1647a:	b2db      	uxtb	r3, r3
   1647c:	2b7e      	cmp	r3, #126	; 0x7e
}

inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBuiltinOperator()[index];
   1647e:	bf9a      	itte	ls
   16480:	4a02      	ldrls	r2, [pc, #8]	; (1648c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x1c>)
   16482:	f852 0023 	ldrls.w	r0, [r2, r3, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
   16486:	4802      	ldrhi	r0, [pc, #8]	; (16490 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x20>)
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
  }
}
   16488:	4770      	bx	lr
   1648a:	bf00      	nop
   1648c:	00032ff8 	.word	0x00032ff8
   16490:	00033f9d 	.word	0x00033f9d

00016494 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:
      }
    }
  }
}

void MicroInterpreter::Init(tflite::Profiler* profiler) {
   16494:	b570      	push	{r4, r5, r6, lr}
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
   16496:	6846      	ldr	r6, [r0, #4]
   16498:	4604      	mov	r4, r0
   1649a:	460d      	mov	r5, r1
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
   1649c:	4630      	mov	r0, r6
   1649e:	2108      	movs	r1, #8
   164a0:	f011 f81b 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   164a4:	b1d0      	cbz	r0, 164dc <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x48>
   164a6:	5833      	ldr	r3, [r6, r0]
    auto p = data_ + field_offset;
   164a8:	1832      	adds	r2, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   164aa:	18d1      	adds	r1, r2, r3
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
  if (subgraphs->size() != 1) {
   164ac:	58d2      	ldr	r2, [r2, r3]
   164ae:	2a01      	cmp	r2, #1
   164b0:	d007      	beq.n	164c2 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x2e>
    TF_LITE_REPORT_ERROR(error_reporter_,
   164b2:	490b      	ldr	r1, [pc, #44]	; (164e0 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x4c>)
   164b4:	68e0      	ldr	r0, [r4, #12]
   164b6:	f019 fd43 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
   164ba:	2301      	movs	r3, #1
  context_.impl_ = static_cast<void*>(&context_helper_);
  context_.ReportError = context_helper_.ReportOpError;
  context_.recommended_num_threads = 1;
  context_.profiler = profiler;

  initialization_status_ = kTfLiteOk;
   164bc:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
   164c0:	bd70      	pop	{r4, r5, r6, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   164c2:	1d0b      	adds	r3, r1, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   164c4:	6849      	ldr	r1, [r1, #4]
  context_.recommended_num_threads = 1;
   164c6:	6362      	str	r2, [r4, #52]	; 0x34
   164c8:	440b      	add	r3, r1
  subgraph_ = (*subgraphs)[0];
   164ca:	66a3      	str	r3, [r4, #104]	; 0x68
  context_.impl_ = static_cast<void*>(&context_helper_);
   164cc:	f104 036c 	add.w	r3, r4, #108	; 0x6c
   164d0:	61e3      	str	r3, [r4, #28]
  context_.ReportError = context_helper_.ReportOpError;
   164d2:	4b04      	ldr	r3, [pc, #16]	; (164e4 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x50>)
  context_.profiler = profiler;
   164d4:	6465      	str	r5, [r4, #68]	; 0x44
  context_.ReportError = context_helper_.ReportOpError;
   164d6:	6263      	str	r3, [r4, #36]	; 0x24
  initialization_status_ = kTfLiteOk;
   164d8:	2300      	movs	r3, #0
   164da:	e7ef      	b.n	164bc <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x28>
  if (subgraphs->size() != 1) {
   164dc:	6803      	ldr	r3, [r0, #0]
   164de:	deff      	udf	#255	; 0xff
   164e0:	00034203 	.word	0x00034203
   164e4:	000274bb 	.word	0x000274bb

000164e8 <_ZNK11flatbuffers6VectorIiE3GetEj>:
  return_type Get(uoffset_t i) const {
   164e8:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   164ea:	6803      	ldr	r3, [r0, #0]
   164ec:	4299      	cmp	r1, r3
   164ee:	d306      	bcc.n	164fe <_ZNK11flatbuffers6VectorIiE3GetEj+0x16>
   164f0:	f240 1101 	movw	r1, #257	; 0x101
   164f4:	4b04      	ldr	r3, [pc, #16]	; (16508 <_ZNK11flatbuffers6VectorIiE3GetEj+0x20>)
   164f6:	4a05      	ldr	r2, [pc, #20]	; (1650c <_ZNK11flatbuffers6VectorIiE3GetEj+0x24>)
   164f8:	4805      	ldr	r0, [pc, #20]	; (16510 <_ZNK11flatbuffers6VectorIiE3GetEj+0x28>)
   164fa:	f00f ffb9 	bl	26470 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   164fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  }
   16502:	6848      	ldr	r0, [r1, #4]
   16504:	bd08      	pop	{r3, pc}
   16506:	bf00      	nop
   16508:	0003422c 	.word	0x0003422c
   1650c:	00034237 	.word	0x00034237
   16510:	000342f6 	.word	0x000342f6

00016514 <_ZN6tflite16MicroInterpreter5inputEj>:
    }
  }
  return kTfLiteOk;
}

TfLiteTensor* MicroInterpreter::input(size_t index) {
   16514:	b513      	push	{r0, r1, r4, lr}
   16516:	4604      	mov	r4, r0
   16518:	9101      	str	r1, [sp, #4]
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
    return const_cast<Table *>(this)->GetPointer<P>(field);
   1651a:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1651c:	2106      	movs	r1, #6
   1651e:	f011 f812 	bl	27546 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  const size_t length = inputs_size();
  if ((index < 0) || (index >= length)) {
   16522:	9a01      	ldr	r2, [sp, #4]
  uoffset_t Length() const { return size(); }
   16524:	6803      	ldr	r3, [r0, #0]
   16526:	429a      	cmp	r2, r3
   16528:	d306      	bcc.n	16538 <_ZN6tflite16MicroInterpreter5inputEj+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1652a:	4907      	ldr	r1, [pc, #28]	; (16548 <_ZN6tflite16MicroInterpreter5inputEj+0x34>)
   1652c:	68e0      	ldr	r0, [r4, #12]
   1652e:	f019 fd07 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
   16532:	2000      	movs	r0, #0
  }
  return &(context_.tensors[inputs().Get(index)]);
}
   16534:	b002      	add	sp, #8
   16536:	bd10      	pop	{r4, pc}
  return &(context_.tensors[inputs().Get(index)]);
   16538:	4611      	mov	r1, r2
   1653a:	f7ff ffd5 	bl	164e8 <_ZNK11flatbuffers6VectorIiE3GetEj>
   1653e:	69a3      	ldr	r3, [r4, #24]
   16540:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   16544:	e7f6      	b.n	16534 <_ZN6tflite16MicroInterpreter5inputEj+0x20>
   16546:	bf00      	nop
   16548:	0003434f 	.word	0x0003434f

0001654c <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
   1654c:	b513      	push	{r0, r1, r4, lr}
   1654e:	4604      	mov	r4, r0
   16550:	9101      	str	r1, [sp, #4]
    return const_cast<Table *>(this)->GetPointer<P>(field);
   16552:	6e80      	ldr	r0, [r0, #104]	; 0x68
   16554:	2108      	movs	r1, #8
   16556:	f010 fff6 	bl	27546 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  const size_t length = outputs_size();
  if ((index < 0) || (index >= length)) {
   1655a:	9a01      	ldr	r2, [sp, #4]
  uoffset_t Length() const { return size(); }
   1655c:	6803      	ldr	r3, [r0, #0]
   1655e:	429a      	cmp	r2, r3
   16560:	d306      	bcc.n	16570 <_ZN6tflite16MicroInterpreter6outputEj+0x24>
    TF_LITE_REPORT_ERROR(error_reporter_,
   16562:	4907      	ldr	r1, [pc, #28]	; (16580 <_ZN6tflite16MicroInterpreter6outputEj+0x34>)
   16564:	68e0      	ldr	r0, [r4, #12]
   16566:	f019 fceb 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
   1656a:	2000      	movs	r0, #0
  }
  return &(context_.tensors[outputs().Get(index)]);
}
   1656c:	b002      	add	sp, #8
   1656e:	bd10      	pop	{r4, pc}
  return &(context_.tensors[outputs().Get(index)]);
   16570:	4611      	mov	r1, r2
   16572:	f7ff ffb9 	bl	164e8 <_ZNK11flatbuffers6VectorIiE3GetEj>
   16576:	69a3      	ldr	r3, [r4, #24]
   16578:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1657c:	e7f6      	b.n	1656c <_ZN6tflite16MicroInterpreter6outputEj+0x20>
   1657e:	bf00      	nop
   16580:	0003437a 	.word	0x0003437a

00016584 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
   16584:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
   16588:	f100 0710 	add.w	r7, r0, #16
   1658c:	9000      	str	r0, [sp, #0]
TfLiteStatus MicroInterpreter::AllocateTensors() {
   1658e:	4604      	mov	r4, r0
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
   16590:	6883      	ldr	r3, [r0, #8]
   16592:	6841      	ldr	r1, [r0, #4]
   16594:	463a      	mov	r2, r7
   16596:	6e00      	ldr	r0, [r0, #96]	; 0x60
   16598:	f00a ffc8 	bl	2152c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>
   1659c:	b148      	cbz	r0, 165b2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x2e>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1659e:	4933      	ldr	r1, [pc, #204]	; (1666c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xe8>)
   165a0:	68e0      	ldr	r0, [r4, #12]
   165a2:	f019 fccd 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
   165a6:	2001      	movs	r0, #1
   165a8:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
}
   165ac:	b002      	add	sp, #8
   165ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   165b2:	4605      	mov	r5, r0
    auto* node = &(node_and_registrations_[i].node);
   165b4:	f04f 0828 	mov.w	r8, #40	; 0x28
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
   165b8:	4b2d      	ldr	r3, [pc, #180]	; (16670 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xec>)
  context_.GetScratchBuffer = nullptr;
   165ba:	e9c4 0014 	strd	r0, r0, [r4, #80]	; 0x50
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
   165be:	64a3      	str	r3, [r4, #72]	; 0x48
    return const_cast<Table *>(this)->GetPointer<P>(field);
   165c0:	210a      	movs	r1, #10
   165c2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   165c4:	f010 ffc8 	bl	27558 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   165c8:	6803      	ldr	r3, [r0, #0]
   165ca:	429d      	cmp	r5, r3
   165cc:	d212      	bcs.n	165f4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x70>
    auto* node = &(node_and_registrations_[i].node);
   165ce:	6826      	ldr	r6, [r4, #0]
  static void* GetScratchBuffer(TfLiteContext* ctx, int buffer_idx);

  static void ReportOpError(struct TfLiteContext* context, const char* format,
                            ...);

  void SetNodeIndex(int idx) { current_node_idx_ = idx; }
   165d0:	6765      	str	r5, [r4, #116]	; 0x74
   165d2:	fb08 6605 	mla	r6, r8, r5, r6
    auto* registration = node_and_registrations_[i].registration;
   165d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
      init_data = reinterpret_cast<const char*>(node->builtin_data);
   165d8:	6971      	ldr	r1, [r6, #20]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   165da:	695a      	ldr	r2, [r3, #20]
    if (registration->init) {
   165dc:	681b      	ldr	r3, [r3, #0]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
   165de:	2a20      	cmp	r2, #32
      init_data_size = 0;
   165e0:	bf14      	ite	ne
   165e2:	2200      	movne	r2, #0
      init_data_size = node->custom_initial_data_size;
   165e4:	e9d6 1206 	ldrdeq	r1, r2, [r6, #24]
    if (registration->init) {
   165e8:	b113      	cbz	r3, 165f0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x6c>
          registration->init(&context_, init_data, init_data_size);
   165ea:	4638      	mov	r0, r7
   165ec:	4798      	blx	r3
      node->user_data =
   165ee:	6130      	str	r0, [r6, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   165f0:	3501      	adds	r5, #1
   165f2:	e7e5      	b.n	165c0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x3c>
   165f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   165f8:	2500      	movs	r5, #0
    auto* node = &(node_and_registrations_[i].node);
   165fa:	2628      	movs	r6, #40	; 0x28
   165fc:	6763      	str	r3, [r4, #116]	; 0x74
  context_.RequestScratchBufferInArena =
   165fe:	4b1d      	ldr	r3, [pc, #116]	; (16674 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf0>)
   16600:	6523      	str	r3, [r4, #80]	; 0x50
   16602:	210a      	movs	r1, #10
   16604:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   16606:	f010 ffa7 	bl	27558 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   1660a:	6803      	ldr	r3, [r0, #0]
   1660c:	429d      	cmp	r5, r3
   1660e:	d21a      	bcs.n	16646 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xc2>
    auto* node = &(node_and_registrations_[i].node);
   16610:	6821      	ldr	r1, [r4, #0]
   16612:	6765      	str	r5, [r4, #116]	; 0x74
   16614:	fb06 1105 	mla	r1, r6, r5, r1
    auto* registration = node_and_registrations_[i].registration;
   16618:	f8d1 8024 	ldr.w	r8, [r1, #36]	; 0x24
    if (registration->prepare) {
   1661c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   16620:	b17b      	cbz	r3, 16642 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbe>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
   16622:	4638      	mov	r0, r7
   16624:	4798      	blx	r3
      if (prepare_status != kTfLiteOk) {
   16626:	4601      	mov	r1, r0
   16628:	b158      	cbz	r0, 16642 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xbe>
        TF_LITE_REPORT_ERROR(
   1662a:	4640      	mov	r0, r8
   1662c:	f7ff ff20 	bl	16470 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
   16630:	462b      	mov	r3, r5
   16632:	4602      	mov	r2, r0
   16634:	9100      	str	r1, [sp, #0]
   16636:	68e0      	ldr	r0, [r4, #12]
   16638:	490f      	ldr	r1, [pc, #60]	; (16678 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf4>)
   1663a:	f019 fc81 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   1663e:	2001      	movs	r0, #1
   16640:	e7b4      	b.n	165ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   16642:	3501      	adds	r5, #1
   16644:	e7dd      	b.n	16602 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x7e>
   16646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1664a:	6763      	str	r3, [r4, #116]	; 0x74
  context_.AllocatePersistentBuffer = nullptr;
   1664c:	2300      	movs	r3, #0
   1664e:	64a3      	str	r3, [r4, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
   16650:	6523      	str	r3, [r4, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
   16652:	4b0a      	ldr	r3, [pc, #40]	; (1667c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf8>)
  TF_LITE_ENSURE_OK(&context_,
   16654:	463a      	mov	r2, r7
   16656:	6861      	ldr	r1, [r4, #4]
   16658:	6e20      	ldr	r0, [r4, #96]	; 0x60
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
   1665a:	6563      	str	r3, [r4, #84]	; 0x54
  TF_LITE_ENSURE_OK(&context_,
   1665c:	f00a ffae 	bl	215bc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>
   16660:	2800      	cmp	r0, #0
   16662:	d1a3      	bne.n	165ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
  tensors_allocated_ = true;
   16664:	2301      	movs	r3, #1
   16666:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
  return kTfLiteOk;
   1666a:	e79f      	b.n	165ac <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x28>
   1666c:	000343a6 	.word	0x000343a6
   16670:	0002749d 	.word	0x0002749d
   16674:	000274a5 	.word	0x000274a5
   16678:	000343c9 	.word	0x000343c9
   1667c:	000274b3 	.word	0x000274b3

00016680 <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
   16680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (initialization_status_ != kTfLiteOk) {
   16684:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
TfLiteStatus MicroInterpreter::Invoke() {
   16688:	4605      	mov	r5, r0
   1668a:	b087      	sub	sp, #28
  if (initialization_status_ != kTfLiteOk) {
   1668c:	b143      	cbz	r3, 166a0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x20>
    TF_LITE_REPORT_ERROR(error_reporter_,
   1668e:	4931      	ldr	r1, [pc, #196]	; (16754 <_ZN6tflite16MicroInterpreter6InvokeEv+0xd4>)
   16690:	68c0      	ldr	r0, [r0, #12]
   16692:	f019 fc55 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   16696:	2401      	movs	r4, #1
}
   16698:	4620      	mov	r0, r4
   1669a:	b007      	add	sp, #28
   1669c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!tensors_allocated_) {
   166a0:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   166a4:	2b00      	cmp	r3, #0
   166a6:	d044      	beq.n	16732 <_ZN6tflite16MicroInterpreter6InvokeEv+0xb2>
TfLiteStatus MicroInterpreter::Invoke() {
   166a8:	f04f 0800 	mov.w	r8, #0
    auto* node = &(node_and_registrations_[i].node);
   166ac:	f04f 0a28 	mov.w	sl, #40	; 0x28
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
   166b0:	2600      	movs	r6, #0
   166b2:	2700      	movs	r7, #0
   166b4:	210a      	movs	r1, #10
   166b6:	6ea8      	ldr	r0, [r5, #104]	; 0x68
   166b8:	f010 ff4e 	bl	27558 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   166bc:	6803      	ldr	r3, [r0, #0]
   166be:	4598      	cmp	r8, r3
   166c0:	d245      	bcs.n	1674e <_ZN6tflite16MicroInterpreter6InvokeEv+0xce>
    auto* node = &(node_and_registrations_[i].node);
   166c2:	682c      	ldr	r4, [r5, #0]
   166c4:	fb0a 4408 	mla	r4, sl, r8, r4
    auto* registration = node_and_registrations_[i].registration;
   166c8:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    if (registration->invoke) {
   166cc:	f8d9 300c 	ldr.w	r3, [r9, #12]
   166d0:	2b00      	cmp	r3, #0
   166d2:	d039      	beq.n	16748 <_ZN6tflite16MicroInterpreter6InvokeEv+0xc8>
          profiler, OpNameFromRegistration(registration), i);
   166d4:	4648      	mov	r0, r9
   166d6:	f7ff fecb 	bl	16470 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
   166da:	2300      	movs	r3, #0
      tflite::Profiler* profiler =
   166dc:	f8d5 b044 	ldr.w	fp, [r5, #68]	; 0x44
          profiler, OpNameFromRegistration(registration), i);
   166e0:	4601      	mov	r1, r0
   166e2:	f8cd b010 	str.w	fp, [sp, #16]
   166e6:	9305      	str	r3, [sp, #20]
    if (profiler) {
   166e8:	f1bb 0f00 	cmp.w	fp, #0
   166ec:	d00a      	beq.n	16704 <_ZN6tflite16MicroInterpreter6InvokeEv+0x84>
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
   166ee:	f8db 2000 	ldr.w	r2, [fp]
   166f2:	e9cd 6702 	strd	r6, r7, [sp, #8]

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
   166f6:	e9cd 8300 	strd	r8, r3, [sp]
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
   166fa:	4658      	mov	r0, fp
   166fc:	6893      	ldr	r3, [r2, #8]
   166fe:	2202      	movs	r2, #2
   16700:	4798      	blx	r3
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
   16702:	9005      	str	r0, [sp, #20]
      invoke_status = registration->invoke(&context_, node);
   16704:	4621      	mov	r1, r4
   16706:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1670a:	f105 0010 	add.w	r0, r5, #16
   1670e:	4798      	blx	r3
      if (invoke_status == kTfLiteError) {
   16710:	2801      	cmp	r0, #1
      invoke_status = registration->invoke(&context_, node);
   16712:	4604      	mov	r4, r0
      if (invoke_status == kTfLiteError) {
   16714:	d113      	bne.n	1673e <_ZN6tflite16MicroInterpreter6InvokeEv+0xbe>
        TF_LITE_REPORT_ERROR(
   16716:	4648      	mov	r0, r9
   16718:	f7ff feaa 	bl	16470 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
   1671c:	4643      	mov	r3, r8
   1671e:	4602      	mov	r2, r0
   16720:	490d      	ldr	r1, [pc, #52]	; (16758 <_ZN6tflite16MicroInterpreter6InvokeEv+0xd8>)
   16722:	68e8      	ldr	r0, [r5, #12]
   16724:	9400      	str	r4, [sp, #0]
   16726:	f019 fc0b 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
class ScopedOperatorProfile : public ScopedProfile {
   1672a:	a804      	add	r0, sp, #16
   1672c:	f010 fedd 	bl	274ea <_ZN6tflite13ScopedProfileD1Ev>
   16730:	e7b2      	b.n	16698 <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
   16732:	f7ff ff27 	bl	16584 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
   16736:	4604      	mov	r4, r0
   16738:	2800      	cmp	r0, #0
   1673a:	d0b5      	beq.n	166a8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x28>
   1673c:	e7ac      	b.n	16698 <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
      } else if (invoke_status != kTfLiteOk) {
   1673e:	2800      	cmp	r0, #0
   16740:	d1f3      	bne.n	1672a <_ZN6tflite16MicroInterpreter6InvokeEv+0xaa>
   16742:	a804      	add	r0, sp, #16
   16744:	f010 fed1 	bl	274ea <_ZN6tflite13ScopedProfileD1Ev>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   16748:	f108 0801 	add.w	r8, r8, #1
   1674c:	e7b2      	b.n	166b4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x34>
  return kTfLiteOk;
   1674e:	2400      	movs	r4, #0
   16750:	e7a2      	b.n	16698 <_ZN6tflite16MicroInterpreter6InvokeEv+0x18>
   16752:	bf00      	nop
   16754:	000343ff 	.word	0x000343ff
   16758:	0003442c 	.word	0x0003442c

0001675c <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
   1675c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16760:	4690      	mov	r8, r2
   16762:	461c      	mov	r4, r3
  int output_index = 0;
   16764:	2500      	movs	r5, #0
                              va_list args) {
   16766:	b095      	sub	sp, #84	; 0x54
   16768:	9002      	str	r0, [sp, #8]
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
   1676a:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
  while (*current != '\0' && output_index < usable_length) {
   1676e:	9a02      	ldr	r2, [sp, #8]
   16770:	f898 3000 	ldrb.w	r3, [r8]
   16774:	4629      	mov	r1, r5
   16776:	1956      	adds	r6, r2, r5
   16778:	b343      	cbz	r3, 167cc <MicroVsnprintf+0x70>
   1677a:	454d      	cmp	r5, r9
   1677c:	da26      	bge.n	167cc <MicroVsnprintf+0x70>
    if (*current == '%') {
   1677e:	2b25      	cmp	r3, #37	; 0x25
   16780:	f108 0201 	add.w	r2, r8, #1
   16784:	f040 8109 	bne.w	1699a <MicroVsnprintf+0x23e>
      current++;
      switch (*current) {
   16788:	f898 3001 	ldrb.w	r3, [r8, #1]
   1678c:	2b73      	cmp	r3, #115	; 0x73
   1678e:	f000 8107 	beq.w	169a0 <MicroVsnprintf+0x244>
   16792:	d808      	bhi.n	167a6 <MicroVsnprintf+0x4a>
   16794:	2b64      	cmp	r3, #100	; 0x64
   16796:	d015      	beq.n	167c4 <MicroVsnprintf+0x68>
   16798:	2b66      	cmp	r3, #102	; 0x66
   1679a:	d045      	beq.n	16828 <MicroVsnprintf+0xcc>
   1679c:	2b25      	cmp	r3, #37	; 0x25
   1679e:	f000 80fa 	beq.w	16996 <MicroVsnprintf+0x23a>
            return output_index;
          }
          output[output_index++] = '0';
          output[output_index++] = 'x';
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
   167a2:	4690      	mov	r8, r2
   167a4:	e7e3      	b.n	1676e <MicroVsnprintf+0x12>
      switch (*current) {
   167a6:	2b75      	cmp	r3, #117	; 0x75
   167a8:	d025      	beq.n	167f6 <MicroVsnprintf+0x9a>
   167aa:	2b78      	cmp	r3, #120	; 0x78
   167ac:	d1f9      	bne.n	167a2 <MicroVsnprintf+0x46>
          if (usable_length - output_index < kMaxHexCharsNeeded) {
   167ae:	eba9 0205 	sub.w	r2, r9, r5
   167b2:	2a09      	cmp	r2, #9
   167b4:	f105 0001 	add.w	r0, r5, #1
   167b8:	dc26      	bgt.n	16808 <MicroVsnprintf+0xac>
      }
    } else {
      output[output_index++] = *current++;
    }
  }
  output[output_index++] = '\0';
   167ba:	2300      	movs	r3, #0
   167bc:	7033      	strb	r3, [r6, #0]
  return output_index;
}
   167be:	b015      	add	sp, #84	; 0x54
   167c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (usable_length - output_index < kMaxIntCharsNeeded) {
   167c4:	eba9 0305 	sub.w	r3, r9, r5
   167c8:	2b0a      	cmp	r3, #10
   167ca:	dc01      	bgt.n	167d0 <MicroVsnprintf+0x74>
  output[output_index++] = '\0';
   167cc:	1c68      	adds	r0, r5, #1
   167ce:	e7f4      	b.n	167ba <MicroVsnprintf+0x5e>
              FormatInt32(&output[output_index], va_arg(args, int32_t));
   167d0:	f854 0b04 	ldr.w	r0, [r4], #4
    *buffer++ = '-';
   167d4:	4631      	mov	r1, r6
  if (i < 0) {
   167d6:	2800      	cmp	r0, #0
    *buffer++ = '-';
   167d8:	bfb8      	it	lt
   167da:	232d      	movlt	r3, #45	; 0x2d
  return FastUInt32ToBufferLeft(u, buffer, 10);
   167dc:	f04f 020a 	mov.w	r2, #10
    *buffer++ = '-';
   167e0:	bfbc      	itt	lt
   167e2:	f801 3b01 	strblt.w	r3, [r1], #1
    u = -u;
   167e6:	4240      	neglt	r0, r0
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
   167e8:	f010 fef2 	bl	275d0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
   167ec:	1b80      	subs	r0, r0, r6
          output_index +=
   167ee:	4405      	add	r5, r0
          current++;
   167f0:	f108 0202 	add.w	r2, r8, #2
   167f4:	e7d5      	b.n	167a2 <MicroVsnprintf+0x46>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
   167f6:	eba9 0305 	sub.w	r3, r9, r5
   167fa:	2b0a      	cmp	r3, #10
   167fc:	dde6      	ble.n	167cc <MicroVsnprintf+0x70>
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
   167fe:	220a      	movs	r2, #10
   16800:	4631      	mov	r1, r6
   16802:	f854 0b04 	ldr.w	r0, [r4], #4
   16806:	e7ef      	b.n	167e8 <MicroVsnprintf+0x8c>
          output[output_index++] = '0';
   16808:	f04f 0230 	mov.w	r2, #48	; 0x30
   1680c:	7032      	strb	r2, [r6, #0]
          output[output_index++] = 'x';
   1680e:	9a02      	ldr	r2, [sp, #8]
   16810:	1cae      	adds	r6, r5, #2
              FormatHex(&output[output_index], va_arg(args, uint32_t));
   16812:	1995      	adds	r5, r2, r6
          output[output_index++] = 'x';
   16814:	5413      	strb	r3, [r2, r0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
   16816:	4629      	mov	r1, r5
   16818:	2210      	movs	r2, #16
   1681a:	f854 0b04 	ldr.w	r0, [r4], #4
   1681e:	f010 fed7 	bl	275d0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
   16822:	1b40      	subs	r0, r0, r5
          output_index +=
   16824:	1985      	adds	r5, r0, r6
          current++;
   16826:	e7e3      	b.n	167f0 <MicroVsnprintf+0x94>
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
   16828:	eba9 0305 	sub.w	r3, r9, r5
   1682c:	ee07 3a90 	vmov	s15, r3
   16830:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
   16834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   16838:	eef4 7ac7 	vcmpe.f32	s15, s14
   1683c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16840:	d4c4      	bmi.n	167cc <MicroVsnprintf+0x70>
              FormatFloat(&output[output_index], va_arg(args, double));
   16842:	3407      	adds	r4, #7
   16844:	f024 0407 	bic.w	r4, r4, #7
  char* current_end = buffer + (kFastToBufferSize - 1);
   16848:	f106 032f 	add.w	r3, r6, #47	; 0x2f
              FormatFloat(&output[output_index], va_arg(args, double));
   1684c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
  char* current_end = buffer + (kFastToBufferSize - 1);
   16850:	9301      	str	r3, [sp, #4]
              FormatFloat(&output[output_index], va_arg(args, double));
   16852:	f7fa f8ed 	bl	10a30 <__aeabi_d2f>
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
   16856:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  if (u & sign_mask) {
   1685a:	2800      	cmp	r0, #0
    *current = '-';
   1685c:	bfb8      	it	lt
   1685e:	222d      	movlt	r2, #45	; 0x2d
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
   16860:	f1a3 0a7f 	sub.w	sl, r3, #127	; 0x7f
   16864:	9303      	str	r3, [sp, #12]
    *current = '-';
   16866:	4633      	mov	r3, r6
   16868:	bfb8      	it	lt
   1686a:	f803 2b01 	strblt.w	r2, [r3], #1
  *current = 0;
   1686e:	2200      	movs	r2, #0
  if (exponent == 128) {
   16870:	f1ba 0f80 	cmp.w	sl, #128	; 0x80
  const uint32_t fraction = (u & fraction_mask);
   16874:	f3c0 0e16 	ubfx	lr, r0, #0, #23
  *current = 0;
   16878:	701a      	strb	r2, [r3, #0]
  if (exponent == 128) {
   1687a:	d10e      	bne.n	1689a <MicroVsnprintf+0x13e>
    if (fraction == 0) {
   1687c:	9a01      	ldr	r2, [sp, #4]
   1687e:	1ad1      	subs	r1, r2, r3
   16880:	f1be 0f00 	cmp.w	lr, #0
   16884:	d107      	bne.n	16896 <MicroVsnprintf+0x13a>
      current = StrCatStr(current, (current_end - current), "Inf");
   16886:	4a4e      	ldr	r2, [pc, #312]	; (169c0 <MicroVsnprintf+0x264>)
      current = StrCatStr(current, (current_end - current), "NaN");
   16888:	4618      	mov	r0, r3
  return StrCatStr(main, main_max_length, number_string);
   1688a:	f010 fe8b 	bl	275a4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
   1688e:	4607      	mov	r7, r0
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
   16890:	1bbe      	subs	r6, r7, r6
          output_index +=
   16892:	4435      	add	r5, r6
          current++;
   16894:	e7ac      	b.n	167f0 <MicroVsnprintf+0x94>
      current = StrCatStr(current, (current_end - current), "NaN");
   16896:	4a4b      	ldr	r2, [pc, #300]	; (169c4 <MicroVsnprintf+0x268>)
   16898:	e7f6      	b.n	16888 <MicroVsnprintf+0x12c>
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
   1689a:	4a4b      	ldr	r2, [pc, #300]	; (169c8 <MicroVsnprintf+0x26c>)
   1689c:	af04      	add	r7, sp, #16
   1689e:	f102 0b08 	add.w	fp, r2, #8
   168a2:	46bc      	mov	ip, r7
   168a4:	6810      	ldr	r0, [r2, #0]
   168a6:	6851      	ldr	r1, [r2, #4]
   168a8:	3208      	adds	r2, #8
   168aa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   168ae:	455a      	cmp	r2, fp
   168b0:	4667      	mov	r7, ip
   168b2:	d1f6      	bne.n	168a2 <MicroVsnprintf+0x146>
   168b4:	6810      	ldr	r0, [r2, #0]
   168b6:	7912      	ldrb	r2, [r2, #4]
   168b8:	f8cc 0000 	str.w	r0, [ip]
   168bc:	f88c 2004 	strb.w	r2, [ip, #4]
  uint32_t scaled_fraction = fraction;
   168c0:	4670      	mov	r0, lr
  for (int i = 0; i < scale_shifts_size; ++i) {
   168c2:	2200      	movs	r2, #0
   168c4:	af04      	add	r7, sp, #16
    scaled_fraction += (fraction >> scale_shifts[i]);
   168c6:	f917 1b01 	ldrsb.w	r1, [r7], #1
  for (int i = 0; i < scale_shifts_size; ++i) {
   168ca:	3201      	adds	r2, #1
    scaled_fraction += (fraction >> scale_shifts[i]);
   168cc:	fa2e f101 	lsr.w	r1, lr, r1
  for (int i = 0; i < scale_shifts_size; ++i) {
   168d0:	2a0d      	cmp	r2, #13
    scaled_fraction += (fraction >> scale_shifts[i]);
   168d2:	4408      	add	r0, r1
  for (int i = 0; i < scale_shifts_size; ++i) {
   168d4:	d1f7      	bne.n	168c6 <MicroVsnprintf+0x16a>
  *current = '1';
   168d6:	2231      	movs	r2, #49	; 0x31
   168d8:	701a      	strb	r2, [r3, #0]
  *current = '.';
   168da:	222e      	movs	r2, #46	; 0x2e
   168dc:	705a      	strb	r2, [r3, #1]
  *current = 0;
   168de:	2200      	movs	r2, #0
   168e0:	709a      	strb	r2, [r3, #2]
  if (current_end - current <= kMaxFractionalDigits) {
   168e2:	9a01      	ldr	r2, [sp, #4]
  current += 1;
   168e4:	1c9f      	adds	r7, r3, #2
  if (current_end - current <= kMaxFractionalDigits) {
   168e6:	eba2 0b07 	sub.w	fp, r2, r7
   168ea:	f1bb 0f07 	cmp.w	fp, #7
   168ee:	ddcf      	ble.n	16890 <MicroVsnprintf+0x134>
   168f0:	463a      	mov	r2, r7
   168f2:	3308      	adds	r3, #8
    *(current + i) = '0';
   168f4:	f04f 0130 	mov.w	r1, #48	; 0x30
   168f8:	f802 1f01 	strb.w	r1, [r2, #1]!
  for (int i = 1; i < kMaxFractionalDigits; i++) {
   168fc:	4293      	cmp	r3, r2
   168fe:	d1f9      	bne.n	168f4 <MicroVsnprintf+0x198>
  FastUInt32ToBufferLeft(number, number_string, base);
   16900:	220a      	movs	r2, #10
   16902:	a908      	add	r1, sp, #32
   16904:	f010 fe64 	bl	275d0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
   16908:	4659      	mov	r1, fp
   1690a:	aa08      	add	r2, sp, #32
   1690c:	4638      	mov	r0, r7
   1690e:	f010 fe49 	bl	275a4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  *current = '0';
   16912:	f04f 0230 	mov.w	r2, #48	; 0x30
   16916:	7002      	strb	r2, [r0, #0]
   16918:	4602      	mov	r2, r0
  int fraction_digits = current - previous;
   1691a:	1bc3      	subs	r3, r0, r7
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
   1691c:	f1c3 0107 	rsb	r1, r3, #7
  for (int i = 0; i < fraction_digits; i++) {
   16920:	eba0 0c02 	sub.w	ip, r0, r2
   16924:	4563      	cmp	r3, ip
   16926:	dd08      	ble.n	1693a <MicroVsnprintf+0x1de>
    *(current + leading_zeros) = *current;
   16928:	f812 cd01 	ldrb.w	ip, [r2, #-1]!
   1692c:	f802 c001 	strb.w	ip, [r2, r1]
    *current = '0';
   16930:	f04f 0c30 	mov.w	ip, #48	; 0x30
   16934:	f882 c000 	strb.w	ip, [r2]
  for (int i = 0; i < fraction_digits; i++) {
   16938:	e7f2      	b.n	16920 <MicroVsnprintf+0x1c4>
  current += kMaxFractionalDigits;
   1693a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1693e:	f1c3 0307 	rsb	r3, r3, #7
   16942:	4403      	add	r3, r0
   16944:	4618      	mov	r0, r3
  while (*(current - 1) == '0' && (current - 1) > previous) {
   16946:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1694a:	2a30      	cmp	r2, #48	; 0x30
   1694c:	d101      	bne.n	16952 <MicroVsnprintf+0x1f6>
   1694e:	42bb      	cmp	r3, r7
   16950:	d8f8      	bhi.n	16944 <MicroVsnprintf+0x1e8>
  *current = 0;
   16952:	2300      	movs	r3, #0
   16954:	7003      	strb	r3, [r0, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
   16956:	9b01      	ldr	r3, [sp, #4]
   16958:	4a1c      	ldr	r2, [pc, #112]	; (169cc <MicroVsnprintf+0x270>)
   1695a:	1a19      	subs	r1, r3, r0
   1695c:	f010 fe22 	bl	275a4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
  current = StrCatInt32(current, (current_end - current), exponent);
   16960:	9b01      	ldr	r3, [sp, #4]
  if (i < 0) {
   16962:	f1ba 0f00 	cmp.w	sl, #0
  current = StrCatInt32(current, (current_end - current), exponent);
   16966:	eba3 0b00 	sub.w	fp, r3, r0
    *buffer++ = '-';
   1696a:	bfb8      	it	lt
   1696c:	232d      	movlt	r3, #45	; 0x2d
  current = StrCatStr(current, (current_end - current), "*2^");
   1696e:	4607      	mov	r7, r0
    *buffer++ = '-';
   16970:	bfbc      	itt	lt
   16972:	f88d 3020 	strblt.w	r3, [sp, #32]
    u = -u;
   16976:	9b03      	ldrlt	r3, [sp, #12]
  return FastUInt32ToBufferLeft(u, buffer, 10);
   16978:	f04f 020a 	mov.w	r2, #10
    u = -u;
   1697c:	bfba      	itte	lt
   1697e:	f1c3 0a7f 	rsblt	sl, r3, #127	; 0x7f
    *buffer++ = '-';
   16982:	f10d 0121 	addlt.w	r1, sp, #33	; 0x21
   16986:	a908      	addge	r1, sp, #32
  return FastUInt32ToBufferLeft(u, buffer, 10);
   16988:	4650      	mov	r0, sl
   1698a:	f010 fe21 	bl	275d0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>
  return StrCatStr(main, main_max_length, number_string);
   1698e:	4659      	mov	r1, fp
   16990:	4638      	mov	r0, r7
   16992:	aa08      	add	r2, sp, #32
   16994:	e779      	b.n	1688a <MicroVsnprintf+0x12e>
          output[output_index++] = *current++;
   16996:	f108 0202 	add.w	r2, r8, #2
      output[output_index++] = *current++;
   1699a:	3501      	adds	r5, #1
   1699c:	7033      	strb	r3, [r6, #0]
   1699e:	e700      	b.n	167a2 <MicroVsnprintf+0x46>
          while (string_idx + output_index < usable_length &&
   169a0:	f854 2b04 	ldr.w	r2, [r4], #4
   169a4:	3a01      	subs	r2, #1
                 string[string_idx] != '\0') {
   169a6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
          while (string_idx + output_index < usable_length &&
   169aa:	2b00      	cmp	r3, #0
   169ac:	f43f af20 	beq.w	167f0 <MicroVsnprintf+0x94>
            output[output_index++] = string[string_idx++];
   169b0:	3102      	adds	r1, #2
          while (string_idx + output_index < usable_length &&
   169b2:	4549      	cmp	r1, r9
            output[output_index++] = string[string_idx++];
   169b4:	f105 0501 	add.w	r5, r5, #1
   169b8:	f806 3b01 	strb.w	r3, [r6], #1
          while (string_idx + output_index < usable_length &&
   169bc:	dbf3      	blt.n	169a6 <MicroVsnprintf+0x24a>
   169be:	e717      	b.n	167f0 <MicroVsnprintf+0x94>
   169c0:	0003493c 	.word	0x0003493c
   169c4:	00034940 	.word	0x00034940
   169c8:	00034948 	.word	0x00034948
   169cc:	00034944 	.word	0x00034944

000169d0 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}
inline const TfLiteTensor* GetInput(const TfLiteContext* context,
                                    const TfLiteNode* node, int index) {
  return &context->tensors[node->inputs->data[index]];
   169d0:	680a      	ldr	r2, [r1, #0]

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
   169d2:	b570      	push	{r4, r5, r6, lr}
   169d4:	6855      	ldr	r5, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   169d6:	6883      	ldr	r3, [r0, #8]
   169d8:	01aa      	lsls	r2, r5, #6
  TfLiteTensor* tensor = &context->tensors[node->inputs->data[index]];
  return (tensor->is_variable) ? tensor : nullptr;
}
inline TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                               int index) {
  return &context->tensors[node->outputs->data[index]];
   169da:	6849      	ldr	r1, [r1, #4]
TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
   169dc:	4606      	mov	r6, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (input->type) {
   169de:	5c98      	ldrb	r0, [r3, r2]
   169e0:	684c      	ldr	r4, [r1, #4]
   169e2:	2803      	cmp	r0, #3
TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
   169e4:	b08c      	sub	sp, #48	; 0x30
  return &context->tensors[node->inputs->data[index]];
   169e6:	eb03 1585 	add.w	r5, r3, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   169ea:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  switch (input->type) {
   169ee:	d03f      	beq.n	16a70 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xa0>
   169f0:	2809      	cmp	r0, #9
   169f2:	d023      	beq.n	16a3c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x6c>
   169f4:	2801      	cmp	r0, #1
   169f6:	d15e      	bne.n	16ab6 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xe6>
    case kTfLiteFloat32: {
      ReluFloat(GetTensorShape(input), GetTensorData<float>(input),
   169f8:	4629      	mov	r1, r5
   169fa:	4668      	mov	r0, sp
   169fc:	f010 fe52 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                GetTensorShape(output), GetTensorData<float>(output));
   16a00:	4621      	mov	r1, r4
   16a02:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

template <typename T>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16a04:	686d      	ldr	r5, [r5, #4]
   16a06:	f010 fe4d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16a0a:	b104      	cbz	r4, 16a0e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x3e>
   16a0c:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   16a0e:	4668      	mov	r0, sp
   16a10:	a906      	add	r1, sp, #24
   16a12:	f010 fe1e 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
   16a16:	462b      	mov	r3, r5
   16a18:	2200      	movs	r2, #0
    const float clamped = val < lower ? lower : val;
   16a1a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 16ac8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xf8>
  for (int i = 0; i < flat_size; ++i) {
   16a1e:	4290      	cmp	r0, r2
   16a20:	dd40      	ble.n	16aa4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xd4>
    const float val = input_data[i];
   16a22:	ecf3 7a01 	vldmia	r3!, {s15}
    const float clamped = val < lower ? lower : val;
   16a26:	eef5 7a40 	vcmp.f32	s15, #0.0
   16a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16a2e:	bf48      	it	mi
   16a30:	eef0 7a47 	vmovmi.f32	s15, s14
  for (int i = 0; i < flat_size; ++i) {
   16a34:	3201      	adds	r2, #1
    output_data[i] = clamped;
   16a36:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   16a3a:	e7f0      	b.n	16a1e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x4e>

      return kTfLiteOk;
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(input->params.zero_point, GetTensorShape(input),
   16a3c:	4629      	mov	r1, r5
   16a3e:	4668      	mov	r0, sp
   16a40:	692e      	ldr	r6, [r5, #16]
   16a42:	f010 fe2f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                            GetTensorData<int8_t>(input),
                            GetTensorShape(output),
   16a46:	4621      	mov	r1, r4
   16a48:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16a4a:	686d      	ldr	r5, [r5, #4]
   16a4c:	f010 fe2a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16a50:	b104      	cbz	r4, 16a54 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x84>
   16a52:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   16a54:	4668      	mov	r0, sp
   16a56:	a906      	add	r1, sp, #24
   16a58:	f010 fdfb 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
   16a5c:	2300      	movs	r3, #0
   16a5e:	4298      	cmp	r0, r3
   16a60:	dd20      	ble.n	16aa4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xd4>
    const Q clamped = val < lower ? lower : val;
   16a62:	56ea      	ldrsb	r2, [r5, r3]
   16a64:	42b2      	cmp	r2, r6
   16a66:	bfb8      	it	lt
   16a68:	4632      	movlt	r2, r6
   16a6a:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
   16a6c:	3301      	adds	r3, #1
   16a6e:	e7f6      	b.n	16a5e <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x8e>
                            GetTensorData<int8_t>(output));
      return kTfLiteOk;
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(input->params.zero_point, GetTensorShape(input),
   16a70:	4629      	mov	r1, r5
   16a72:	4668      	mov	r0, sp
   16a74:	692e      	ldr	r6, [r5, #16]
   16a76:	f010 fe15 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                             GetTensorData<uint8_t>(input),
                             GetTensorShape(output),
   16a7a:	4621      	mov	r1, r4
   16a7c:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16a7e:	686d      	ldr	r5, [r5, #4]
   16a80:	f010 fe10 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16a84:	b104      	cbz	r4, 16a88 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xb8>
   16a86:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   16a88:	4668      	mov	r0, sp
   16a8a:	a906      	add	r1, sp, #24
   16a8c:	f010 fde1 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
   16a90:	2300      	movs	r3, #0
   16a92:	4298      	cmp	r0, r3
   16a94:	dd06      	ble.n	16aa4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xd4>
    const Q clamped = val < lower ? lower : val;
   16a96:	5cea      	ldrb	r2, [r5, r3]
   16a98:	42b2      	cmp	r2, r6
   16a9a:	bfb8      	it	lt
   16a9c:	4632      	movlt	r2, r6
   16a9e:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
   16aa0:	3301      	adds	r3, #1
   16aa2:	e7f6      	b.n	16a92 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xc2>
                             GetTensorShape(output),
   16aa4:	a806      	add	r0, sp, #24
   16aa6:	f010 fdb8 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(input->params.zero_point, GetTensorShape(input),
   16aaa:	4668      	mov	r0, sp
   16aac:	f010 fdb5 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
                             GetTensorData<uint8_t>(output));
      return kTfLiteOk;
   16ab0:	2000      	movs	r0, #0
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    }
  }
}
   16ab2:	b00c      	add	sp, #48	; 0x30
   16ab4:	bd70      	pop	{r4, r5, r6, pc}
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
   16ab6:	6974      	ldr	r4, [r6, #20]
   16ab8:	f7f6 f904 	bl	ccc4 <TfLiteTypeGetName>
   16abc:	4903      	ldr	r1, [pc, #12]	; (16acc <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xfc>)
   16abe:	4602      	mov	r2, r0
   16ac0:	4630      	mov	r0, r6
   16ac2:	47a0      	blx	r4
      return kTfLiteError;
   16ac4:	2001      	movs	r0, #1
   16ac6:	e7f4      	b.n	16ab2 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xe2>
   16ac8:	00000000 	.word	0x00000000
   16acc:	00034956 	.word	0x00034956

00016ad0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   16ad0:	680a      	ldr	r2, [r1, #0]

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
  return kTfLiteOk;
}

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
   16ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
   16ad4:	6855      	ldr	r5, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   16ad6:	6883      	ldr	r3, [r0, #8]
   16ad8:	01aa      	lsls	r2, r5, #6
  return &context->tensors[node->outputs->data[index]];
   16ada:	6849      	ldr	r1, [r1, #4]
TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
   16adc:	4606      	mov	r6, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  switch (input->type) {
   16ade:	5c98      	ldrb	r0, [r3, r2]
   16ae0:	684c      	ldr	r4, [r1, #4]
   16ae2:	2803      	cmp	r0, #3
TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
   16ae4:	b08d      	sub	sp, #52	; 0x34
  return &context->tensors[node->inputs->data[index]];
   16ae6:	eb03 1585 	add.w	r5, r3, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   16aea:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  switch (input->type) {
   16aee:	d054      	beq.n	16b9a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xca>
   16af0:	2809      	cmp	r0, #9
   16af2:	d02d      	beq.n	16b50 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x80>
   16af4:	2801      	cmp	r0, #1
   16af6:	d17d      	bne.n	16bf4 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x124>
    case kTfLiteFloat32: {
      Relu6Float(GetTensorShape(input), GetTensorData<float>(input),
   16af8:	4629      	mov	r1, r5
   16afa:	4668      	mov	r0, sp
   16afc:	f010 fdd2 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                 GetTensorShape(output), GetTensorData<float>(output));
   16b00:	4621      	mov	r1, r4
   16b02:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16b04:	686d      	ldr	r5, [r5, #4]
   16b06:	f010 fdcd 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16b0a:	b104      	cbz	r4, 16b0e <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x3e>
   16b0c:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   16b0e:	4668      	mov	r0, sp
   16b10:	a906      	add	r1, sp, #24
   16b12:	f010 fd9e 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
   16b16:	462b      	mov	r3, r5
   16b18:	2200      	movs	r2, #0
    const float clamped = val > upper ? upper : val < lower ? lower : val;
   16b1a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
   16b1e:	eddf 6a3a 	vldr	s13, [pc, #232]	; 16c08 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x138>
  for (int i = 0; i < flat_size; ++i) {
   16b22:	4290      	cmp	r0, r2
   16b24:	dd5d      	ble.n	16be2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x112>
    const float val = input_data[i];
   16b26:	ecf3 7a01 	vldmia	r3!, {s15}
    const float clamped = val > upper ? upper : val < lower ? lower : val;
   16b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
   16b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16b32:	dc0a      	bgt.n	16b4a <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x7a>
   16b34:	eef5 7a40 	vcmp.f32	s15, #0.0
   16b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16b3c:	bf48      	it	mi
   16b3e:	eef0 7a66 	vmovmi.f32	s15, s13
    output_data[i] = clamped;
   16b42:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   16b46:	3201      	adds	r2, #1
   16b48:	e7eb      	b.n	16b22 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x52>
    const float clamped = val > upper ? upper : val < lower ? lower : val;
   16b4a:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   16b4e:	e7f8      	b.n	16b42 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x72>

      return kTfLiteOk;
    }
    case kTfLiteInt8: {
      const int8_t six = FloatToAsymmetricQuantizedInt8(
   16b50:	692a      	ldr	r2, [r5, #16]
   16b52:	68e9      	ldr	r1, [r5, #12]
   16b54:	482d      	ldr	r0, [pc, #180]	; (16c0c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x13c>)
   16b56:	f019 fbdb 	bl	30310 <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi>
          6.0f, input->params.scale, input->params.zero_point);
      const int8_t zero = input->params.zero_point;
      Relu6Quantized<int8_t>(
          zero, six, GetTensorShape(input), GetTensorData<int8_t>(input),
   16b5a:	4629      	mov	r1, r5
      const int8_t six = FloatToAsymmetricQuantizedInt8(
   16b5c:	4606      	mov	r6, r0
          zero, six, GetTensorShape(input), GetTensorData<int8_t>(input),
   16b5e:	4668      	mov	r0, sp
      const int8_t zero = input->params.zero_point;
   16b60:	f995 7010 	ldrsb.w	r7, [r5, #16]
          zero, six, GetTensorShape(input), GetTensorData<int8_t>(input),
   16b64:	f010 fd9e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<int8_t>(output));
   16b68:	4621      	mov	r1, r4
   16b6a:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16b6c:	686d      	ldr	r5, [r5, #4]
   16b6e:	f010 fd99 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16b72:	b104      	cbz	r4, 16b76 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xa6>
   16b74:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   16b76:	4668      	mov	r0, sp
   16b78:	a906      	add	r1, sp, #24
   16b7a:	f010 fd6a 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
   16b7e:	2300      	movs	r3, #0
   16b80:	4298      	cmp	r0, r3
   16b82:	dd2e      	ble.n	16be2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x112>
    const Q val = input_data[i];
   16b84:	56ea      	ldrsb	r2, [r5, r3]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
   16b86:	4296      	cmp	r6, r2
   16b88:	db05      	blt.n	16b96 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xc6>
   16b8a:	42ba      	cmp	r2, r7
   16b8c:	bfb8      	it	lt
   16b8e:	463a      	movlt	r2, r7
    output_data[i] = clamped;
   16b90:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
   16b92:	3301      	adds	r3, #1
   16b94:	e7f4      	b.n	16b80 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xb0>
   16b96:	4632      	mov	r2, r6
   16b98:	e7fa      	b.n	16b90 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xc0>
      return kTfLiteOk;
    }
    case kTfLiteUInt8: {
      const uint8_t six = FloatToAsymmetricQuantizedUInt8(
   16b9a:	692a      	ldr	r2, [r5, #16]
   16b9c:	68e9      	ldr	r1, [r5, #12]
   16b9e:	481b      	ldr	r0, [pc, #108]	; (16c0c <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x13c>)
   16ba0:	f019 fba0 	bl	302e4 <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi>
          6.0f, input->params.scale, input->params.zero_point);
      const uint8_t zero = input->params.zero_point;
      Relu6Quantized<uint8_t>(
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
   16ba4:	4629      	mov	r1, r5
      const uint8_t six = FloatToAsymmetricQuantizedUInt8(
   16ba6:	4606      	mov	r6, r0
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
   16ba8:	4668      	mov	r0, sp
      const uint8_t zero = input->params.zero_point;
   16baa:	7c2f      	ldrb	r7, [r5, #16]
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
   16bac:	f010 fd7a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   16bb0:	4621      	mov	r1, r4
   16bb2:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16bb4:	686d      	ldr	r5, [r5, #4]
   16bb6:	f010 fd75 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16bba:	b104      	cbz	r4, 16bbe <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xee>
   16bbc:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   16bbe:	4668      	mov	r0, sp
   16bc0:	a906      	add	r1, sp, #24
   16bc2:	f010 fd46 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; ++i) {
   16bc6:	2300      	movs	r3, #0
   16bc8:	4298      	cmp	r0, r3
   16bca:	dd0a      	ble.n	16be2 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x112>
    const Q val = input_data[i];
   16bcc:	5cea      	ldrb	r2, [r5, r3]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
   16bce:	4296      	cmp	r6, r2
   16bd0:	d305      	bcc.n	16bde <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x10e>
   16bd2:	42ba      	cmp	r2, r7
   16bd4:	bf38      	it	cc
   16bd6:	463a      	movcc	r2, r7
    output_data[i] = clamped;
   16bd8:	54e2      	strb	r2, [r4, r3]
  for (int i = 0; i < flat_size; ++i) {
   16bda:	3301      	adds	r3, #1
   16bdc:	e7f4      	b.n	16bc8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xf8>
   16bde:	4632      	mov	r2, r6
   16be0:	e7fa      	b.n	16bd8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x108>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   16be2:	a806      	add	r0, sp, #24
   16be4:	f010 fd19 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
          zero, six, GetTensorShape(input), GetTensorData<uint8_t>(input),
   16be8:	4668      	mov	r0, sp
   16bea:	f010 fd16 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
   16bee:	2000      	movs	r0, #0
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
    }
  }
}
   16bf0:	b00d      	add	sp, #52	; 0x34
   16bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
   16bf4:	6974      	ldr	r4, [r6, #20]
   16bf6:	f7f6 f865 	bl	ccc4 <TfLiteTypeGetName>
   16bfa:	4905      	ldr	r1, [pc, #20]	; (16c10 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x140>)
   16bfc:	4602      	mov	r2, r0
   16bfe:	4630      	mov	r0, r6
   16c00:	47a0      	blx	r4
      return kTfLiteError;
   16c02:	2001      	movs	r0, #1
   16c04:	e7f4      	b.n	16bf0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x120>
   16c06:	bf00      	nop
   16c08:	00000000 	.word	0x00000000
   16c0c:	40c00000 	.word	0x40c00000
   16c10:	00034956 	.word	0x00034956

00016c14 <_ZN6tflite3ops5micro13Register_RELUEv>:

}  // namespace activations

TfLiteRegistration Register_RELU() {
   16c14:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/activations::ReluPrepare,
          /*invoke=*/activations::ReluEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   16c16:	4604      	mov	r4, r0
TfLiteRegistration Register_RELU() {
   16c18:	4606      	mov	r6, r0
          /*version=*/0};
   16c1a:	4d04      	ldr	r5, [pc, #16]	; (16c2c <_ZN6tflite3ops5micro13Register_RELUEv+0x18>)
   16c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16c20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   16c24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   16c28:	4630      	mov	r0, r6
   16c2a:	bd70      	pop	{r4, r5, r6, pc}
   16c2c:	000318c8 	.word	0x000318c8

00016c30 <_ZN6tflite3ops5micro14Register_RELU6Ev>:

TfLiteRegistration Register_RELU6() {
   16c30:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/activations::Relu6Prepare,
          /*invoke=*/activations::Relu6Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   16c32:	4604      	mov	r4, r0
TfLiteRegistration Register_RELU6() {
   16c34:	4606      	mov	r6, r0
          /*version=*/0};
   16c36:	4d04      	ldr	r5, [pc, #16]	; (16c48 <_ZN6tflite3ops5micro14Register_RELU6Ev+0x18>)
   16c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   16c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   16c3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   16c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   16c44:	4630      	mov	r0, r6
   16c46:	bd70      	pop	{r4, r5, r6, pc}
   16c48:	000318e8 	.word	0x000318e8

00016c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>:
// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   16c4c:	4288      	cmp	r0, r1
  }
#endif
}

inline int32 MultiplyByQuantizedMultiplierSmallerThanOneExp(
    int32 x, int32 quantized_multiplier, int left_shift) {
   16c4e:	b570      	push	{r4, r5, r6, lr}
   16c50:	d128      	bne.n	16ca4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x58>
   16c52:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   16c56:	425e      	negs	r6, r3
   16c58:	415e      	adcs	r6, r3
  std::int64_t a_64(a);
  std::int64_t b_64(b);
  std::int64_t ab_64 = a_64 * b_64;
   16c5a:	fb80 4501 	smull	r4, r5, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   16c5e:	2c00      	cmp	r4, #0
   16c60:	f175 0300 	sbcs.w	r3, r5, #0
   16c64:	4b1c      	ldr	r3, [pc, #112]	; (16cd8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x8c>)
   16c66:	bfa8      	it	ge
   16c68:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   16c6c:	b9e6      	cbnz	r6, 16ca8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x5c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   16c6e:	18e4      	adds	r4, r4, r3
   16c70:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
   16c74:	2c00      	cmp	r4, #0
   16c76:	f175 0300 	sbcs.w	r3, r5, #0
   16c7a:	da06      	bge.n	16c8a <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x3e>
   16c7c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   16c80:	18e4      	adds	r4, r4, r3
   16c82:	f04f 0300 	mov.w	r3, #0
   16c86:	eb43 0505 	adc.w	r5, r3, r5
   16c8a:	0fe0      	lsrs	r0, r4, #31
   16c8c:	ea40 0145 	orr.w	r1, r0, r5, lsl #1
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  return RoundingDivideByPOT(
   16c90:	4252      	negs	r2, r2

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
  assert(exponent >= 0);
   16c92:	2a00      	cmp	r2, #0
   16c94:	da0b      	bge.n	16cae <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x62>
   16c96:	f44f 71b3 	mov.w	r1, #358	; 0x166
   16c9a:	4b10      	ldr	r3, [pc, #64]	; (16cdc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x90>)
   16c9c:	4a10      	ldr	r2, [pc, #64]	; (16ce0 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x94>)
  assert(exponent <= 31);
   16c9e:	4811      	ldr	r0, [pc, #68]	; (16ce4 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x98>)
   16ca0:	f00f fbe6 	bl	26470 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   16ca4:	2600      	movs	r6, #0
   16ca6:	e7d8      	b.n	16c5a <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0xe>
   16ca8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   16cac:	e7f0      	b.n	16c90 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x44>
  assert(exponent <= 31);
   16cae:	2a1f      	cmp	r2, #31
   16cb0:	dd04      	ble.n	16cbc <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x70>
   16cb2:	f240 1167 	movw	r1, #359	; 0x167
   16cb6:	4b0c      	ldr	r3, [pc, #48]	; (16ce8 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x9c>)
   16cb8:	4a09      	ldr	r2, [pc, #36]	; (16ce0 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x94>)
   16cba:	e7f0      	b.n	16c9e <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii+0x52>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   16cbc:	2301      	movs	r3, #1
   16cbe:	4093      	lsls	r3, r2
   16cc0:	3b01      	subs	r3, #1
  return a & b;
   16cc2:	ea03 0001 	and.w	r0, r3, r1
  return a >> offset;
   16cc6:	105b      	asrs	r3, r3, #1
  return a + b;
   16cc8:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
  return a >> offset;
   16ccc:	4111      	asrs	r1, r2
      SaturatingRoundingDoublingHighMul(x, quantized_multiplier), -left_shift);
}
   16cce:	4298      	cmp	r0, r3
   16cd0:	bfd4      	ite	le
   16cd2:	4608      	movle	r0, r1
   16cd4:	1c48      	addgt	r0, r1, #1
   16cd6:	bd70      	pop	{r4, r5, r6, pc}
   16cd8:	c0000001 	.word	0xc0000001
   16cdc:	00034982 	.word	0x00034982
   16ce0:	00034990 	.word	0x00034990
   16ce4:	000349e5 	.word	0x000349e5
   16ce8:	00034a31 	.word	0x00034a31

00016cec <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteAddParams* params,
                             const TfLiteTensor* input1,
                             const TfLiteTensor* input2, TfLiteTensor* output,
                             OpData* data) {
   16cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cf0:	ed2d 8b06 	vpush	{d8-d10}
   16cf4:	4680      	mov	r8, r0
   16cf6:	b081      	sub	sp, #4
   16cf8:	4689      	mov	r9, r1
   16cfa:	e9dd 5410 	ldrd	r5, r4, [sp, #64]	; 0x40
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   16cfe:	4619      	mov	r1, r3
   16d00:	4610      	mov	r0, r2
                             OpData* data) {
   16d02:	461e      	mov	r6, r3
   16d04:	4617      	mov	r7, r2
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   16d06:	f019 fa30 	bl	3016a <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   16d0a:	782b      	ldrb	r3, [r5, #0]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   16d0c:	f080 0001 	eor.w	r0, r0, #1
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   16d10:	2b03      	cmp	r3, #3
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   16d12:	7020      	strb	r0, [r4, #0]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   16d14:	d001      	beq.n	16d1a <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x2e>
   16d16:	2b09      	cmp	r3, #9
   16d18:	d168      	bne.n	16dec <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x100>
    max(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
   16d1a:	ed97 8a03 	vldr	s16, [r7, #12]
   16d1e:	edd6 8a03 	vldr	s17, [r6, #12]
    data->input2_offset = -input2->params.zero_point;
    data->output_offset = output->params.zero_point;
    data->left_shift = 20;
    const double twice_max_input_scale =
        2 * static_cast<double>(
                std::max(input1->params.scale, input2->params.scale));
   16d22:	eeb4 8ae8 	vcmpe.f32	s16, s17
    data->input1_offset = -input1->params.zero_point;
   16d26:	693b      	ldr	r3, [r7, #16]
                std::max(input1->params.scale, input2->params.scale));
   16d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    data->input1_offset = -input1->params.zero_point;
   16d2c:	f1c3 0300 	rsb	r3, r3, #0
   16d30:	62a3      	str	r3, [r4, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
   16d32:	6933      	ldr	r3, [r6, #16]
        2 * static_cast<double>(
   16d34:	bf54      	ite	pl
   16d36:	ee18 0a10 	vmovpl	r0, s16
   16d3a:	ee18 0a90 	vmovmi	r0, s17
    data->input2_offset = -input2->params.zero_point;
   16d3e:	425b      	negs	r3, r3
   16d40:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
   16d42:	692b      	ldr	r3, [r5, #16]
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
    const double real_output_multiplier =
        twice_max_input_scale /
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));

    QuantizeMultiplierSmallerThanOneExp(
   16d44:	f104 0b04 	add.w	fp, r4, #4
    data->output_offset = output->params.zero_point;
   16d48:	6323      	str	r3, [r4, #48]	; 0x30
    data->left_shift = 20;
   16d4a:	2314      	movs	r3, #20
   16d4c:	6263      	str	r3, [r4, #36]	; 0x24
        2 * static_cast<double>(
   16d4e:	f7f5 fbdb 	bl	c508 <__aeabi_f2d>
   16d52:	4602      	mov	r2, r0
   16d54:	460b      	mov	r3, r1
                std::max(input1->params.scale, input2->params.scale));
   16d56:	f7f5 fa79 	bl	c24c <__adddf3>
   16d5a:	4606      	mov	r6, r0
   16d5c:	460f      	mov	r7, r1
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
   16d5e:	ee18 0a90 	vmov	r0, s17
   16d62:	f7f5 fbd1 	bl	c508 <__aeabi_f2d>
    const double real_input2_multiplier =
   16d66:	4632      	mov	r2, r6
   16d68:	463b      	mov	r3, r7
   16d6a:	f7f9 fcc9 	bl	10700 <__aeabi_ddiv>
   16d6e:	ec41 0b19 	vmov	d9, r0, r1
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
   16d72:	68e8      	ldr	r0, [r5, #12]
   16d74:	f7f5 fbc8 	bl	c508 <__aeabi_f2d>
   16d78:	2200      	movs	r2, #0
   16d7a:	4b1f      	ldr	r3, [pc, #124]	; (16df8 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x10c>)
   16d7c:	f7f9 fb96 	bl	104ac <__aeabi_dmul>
   16d80:	4602      	mov	r2, r0
   16d82:	460b      	mov	r3, r1
    const double real_output_multiplier =
   16d84:	4630      	mov	r0, r6
   16d86:	4639      	mov	r1, r7
   16d88:	f7f9 fcba 	bl	10700 <__aeabi_ddiv>
   16d8c:	ec41 0b1a 	vmov	d10, r0, r1
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
   16d90:	ee18 0a10 	vmov	r0, s16
   16d94:	f7f5 fbb8 	bl	c508 <__aeabi_f2d>
    QuantizeMultiplierSmallerThanOneExp(
   16d98:	f104 0a14 	add.w	sl, r4, #20
    const double real_input1_multiplier =
   16d9c:	4632      	mov	r2, r6
   16d9e:	463b      	mov	r3, r7
   16da0:	f7f9 fcae 	bl	10700 <__aeabi_ddiv>
    QuantizeMultiplierSmallerThanOneExp(
   16da4:	465b      	mov	r3, fp
   16da6:	4652      	mov	r2, sl
   16da8:	f00a f93a 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
   16dac:	ec51 0b19 	vmov	r0, r1, d9
   16db0:	f104 0308 	add.w	r3, r4, #8
   16db4:	f104 0218 	add.w	r2, r4, #24
   16db8:	f00a f932 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
   16dbc:	ec51 0b1a 	vmov	r0, r1, d10
   16dc0:	f104 0320 	add.w	r3, r4, #32
   16dc4:	f104 021c 	add.w	r2, r4, #28
   16dc8:	f00a f92a 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   16dcc:	462a      	mov	r2, r5
   16dce:	4640      	mov	r0, r8
   16dd0:	f104 0310 	add.w	r3, r4, #16
   16dd4:	f899 1000 	ldrb.w	r1, [r9]
   16dd8:	9310      	str	r3, [sp, #64]	; 0x40
   16dda:	f104 030c 	add.w	r3, r4, #12
        context, params->activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }

  return kTfLiteOk;
}
   16dde:	b001      	add	sp, #4
   16de0:	ecbd 8b06 	vpop	{d8-d10}
   16de4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   16de8:	f00a b96e 	b.w	210c8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
}
   16dec:	2000      	movs	r0, #0
   16dee:	b001      	add	sp, #4
   16df0:	ecbd 8b06 	vpop	{d8-d10}
   16df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16df8:	41300000 	.word	0x41300000

00016dfc <_ZN6tflite3ops5micro12Register_ADDEv>:
  return kTfLiteOk;
}

}  // namespace add

TfLiteRegistration Register_ADD() {
   16dfc:	b510      	push	{r4, lr}
   16dfe:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/add::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   16e00:	2220      	movs	r2, #32
   16e02:	2100      	movs	r1, #0
   16e04:	f01a f857 	bl	30eb6 <memset>
   16e08:	4b01      	ldr	r3, [pc, #4]	; (16e10 <_ZN6tflite3ops5micro12Register_ADDEv+0x14>)
}
   16e0a:	4620      	mov	r0, r4
          /*version=*/0};
   16e0c:	60e3      	str	r3, [r4, #12]
}
   16e0e:	bd10      	pop	{r4, pc}
   16e10:	00016f21 	.word	0x00016f21

00016e14 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
             const TfLiteTensor* input2, TfLiteTensor* output) {
   16e14:	b5f0      	push	{r4, r5, r6, r7, lr}
  CalculateActivationRange(params->activation, &output_activation_min,
   16e16:	7812      	ldrb	r2, [r2, #0]
             const TfLiteTensor* input2, TfLiteTensor* output) {
   16e18:	b0b1      	sub	sp, #196	; 0xc4
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
   16e1a:	2a01      	cmp	r2, #1
   16e1c:	9c38      	ldr	r4, [sp, #224]	; 0xe0
   16e1e:	e9dd 6536 	ldrd	r6, r5, [sp, #216]	; 0xd8
   16e22:	d03b      	beq.n	16e9c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x88>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
   16e24:	2a03      	cmp	r2, #3
   16e26:	d03e      	beq.n	16ea6 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x92>
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
   16e28:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 16f14 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x100>
   16e2c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   16e30:	2a02      	cmp	r2, #2
   16e32:	eddf 6a39 	vldr	s13, [pc, #228]	; 16f18 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x104>
   16e36:	fe47 7a87 	vseleq.f32	s15, s15, s14
   16e3a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   16e3e:	fe07 7a26 	vseleq.f32	s14, s14, s13
  if (data->requires_broadcast) {
   16e42:	781b      	ldrb	r3, [r3, #0]
  int32 output_shift_identity;
};

template <typename P>
inline void SetActivationParams(float min, float max, P* params) {
  params->float_activation_min = min;
   16e44:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
  params->float_activation_max = max;
   16e48:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
    TF_LITE_ADD(BroadcastAdd4DSlow);
   16e4c:	4631      	mov	r1, r6
   16e4e:	af10      	add	r7, sp, #64	; 0x40
   16e50:	a804      	add	r0, sp, #16
  if (data->requires_broadcast) {
   16e52:	b35b      	cbz	r3, 16eac <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x98>
    TF_LITE_ADD(BroadcastAdd4DSlow);
   16e54:	f010 fc26 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16e58:	b106      	cbz	r6, 16e5c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x48>
   16e5a:	6876      	ldr	r6, [r6, #4]
   16e5c:	4629      	mov	r1, r5
   16e5e:	a80a      	add	r0, sp, #40	; 0x28
   16e60:	f010 fc20 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   16e64:	b105      	cbz	r5, 16e68 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x54>
   16e66:	686d      	ldr	r5, [r5, #4]
   16e68:	4621      	mov	r1, r4
   16e6a:	4638      	mov	r0, r7
   16e6c:	f010 fc1a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16e70:	b104      	cbz	r4, 16e74 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x60>
   16e72:	6864      	ldr	r4, [r4, #4]
   16e74:	4632      	mov	r2, r6
   16e76:	e9cd 7401 	strd	r7, r4, [sp, #4]
   16e7a:	9500      	str	r5, [sp, #0]
   16e7c:	ab0a      	add	r3, sp, #40	; 0x28
   16e7e:	a904      	add	r1, sp, #16
   16e80:	a816      	add	r0, sp, #88	; 0x58
   16e82:	f010 feb7 	bl	27bf4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
    TF_LITE_ADD(Add);
   16e86:	4638      	mov	r0, r7
   16e88:	f010 fbc7 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   16e8c:	a80a      	add	r0, sp, #40	; 0x28
   16e8e:	f010 fbc4 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   16e92:	a804      	add	r0, sp, #16
   16e94:	f010 fbc1 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   16e98:	b031      	add	sp, #196	; 0xc4
   16e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *activation_max = std::numeric_limits<T>::max();
   16e9c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 16f14 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x100>
    *activation_min = 0;
   16ea0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 16f1c <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x108>
   16ea4:	e7cd      	b.n	16e42 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x2e>
    *activation_max = 6;
   16ea6:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   16eaa:	e7f9      	b.n	16ea0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x8c>
    TF_LITE_ADD(Add);
   16eac:	f010 fbfa 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   16eb0:	b106      	cbz	r6, 16eb4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xa0>
   16eb2:	6876      	ldr	r6, [r6, #4]
   16eb4:	4629      	mov	r1, r5
   16eb6:	a80a      	add	r0, sp, #40	; 0x28
   16eb8:	f010 fbf4 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   16ebc:	b105      	cbz	r5, 16ec0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xac>
   16ebe:	686d      	ldr	r5, [r5, #4]
   16ec0:	4621      	mov	r1, r4
   16ec2:	4638      	mov	r0, r7
   16ec4:	f010 fbee 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   16ec8:	b104      	cbz	r4, 16ecc <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xb8>
   16eca:	6864      	ldr	r4, [r4, #4]
inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const float* input1_data,
                const RuntimeShape& input2_shape, const float* input2_data,
                const RuntimeShape& output_shape, float* output_data) {
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   16ecc:	463a      	mov	r2, r7
   16ece:	a90a      	add	r1, sp, #40	; 0x28
   16ed0:	a804      	add	r0, sp, #16
   16ed2:	f010 fc91 	bl	277f8 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  for (int i = 0; i < flat_size; i++) {
   16ed6:	2300      	movs	r3, #0
   16ed8:	4298      	cmp	r0, r3
   16eda:	ddd4      	ble.n	16e86 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x72>
    auto x = input1_data[i] + input2_data[i];
   16edc:	ecf5 7a01 	vldmia	r5!, {s15}
   16ee0:	ecb6 7a01 	vldmia	r6!, {s14}
   16ee4:	ee37 7a27 	vadd.f32	s14, s14, s15
    output_data[i] = ActivationFunctionWithMinMax(
        x, params.float_activation_min, params.float_activation_max);
   16ee8:	eddd 7a23 	vldr	s15, [sp, #140]	; 0x8c
	return __b;
      return __a;
   16eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
   16ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16ef4:	eddd 6a24 	vldr	s13, [sp, #144]	; 0x90
   16ef8:	bf58      	it	pl
   16efa:	eef0 7a47 	vmovpl.f32	s15, s14
	return __b;
   16efe:	eef4 6a67 	vcmp.f32	s13, s15
   16f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16f06:	bf48      	it	mi
   16f08:	eef0 7a66 	vmovmi.f32	s15, s13
  for (int i = 0; i < flat_size; i++) {
   16f0c:	3301      	adds	r3, #1
    output_data[i] = ActivationFunctionWithMinMax(
   16f0e:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; i++) {
   16f12:	e7e1      	b.n	16ed8 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xc4>
   16f14:	7f7fffff 	.word	0x7f7fffff
   16f18:	ff7fffff 	.word	0xff7fffff
   16f1c:	00000000 	.word	0x00000000

00016f20 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   16f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f24:	460e      	mov	r6, r1
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   16f26:	6833      	ldr	r3, [r6, #0]
   16f28:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   16f2c:	685a      	ldr	r2, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   16f2e:	b095      	sub	sp, #84	; 0x54
   16f30:	eb08 1982 	add.w	r9, r8, r2, lsl #6
  return &context->tensors[node->outputs->data[index]];
   16f34:	6872      	ldr	r2, [r6, #4]
  return &context->tensors[node->inputs->data[index]];
   16f36:	689b      	ldr	r3, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   16f38:	6857      	ldr	r7, [r2, #4]
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
   16f3a:	6949      	ldr	r1, [r1, #20]
   16f3c:	ea4f 1b87 	mov.w	fp, r7, lsl #6
  TF_LITE_ENSURE_STATUS(
   16f40:	f10d 0a1c 	add.w	sl, sp, #28
   16f44:	eb08 1787 	add.w	r7, r8, r7, lsl #6
  return &context->tensors[node->inputs->data[index]];
   16f48:	eb08 1383 	add.w	r3, r8, r3, lsl #6
   16f4c:	464a      	mov	r2, r9
   16f4e:	e9cd 7a00 	strd	r7, sl, [sp]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   16f52:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(
   16f54:	9305      	str	r3, [sp, #20]
   16f56:	9104      	str	r1, [sp, #16]
   16f58:	f7ff fec8 	bl	16cec <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
   16f5c:	4604      	mov	r4, r0
   16f5e:	b978      	cbnz	r0, 16f80 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
  if (output->type == kTfLiteFloat32) {
   16f60:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
   16f64:	f818 000b 	ldrb.w	r0, [r8, fp]
   16f68:	2801      	cmp	r0, #1
   16f6a:	d10d      	bne.n	16f88 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    EvalAdd(context, node, params, &data, input1, input2, output);
   16f6c:	460a      	mov	r2, r1
   16f6e:	e9cd 3701 	strd	r3, r7, [sp, #4]
   16f72:	4631      	mov	r1, r6
   16f74:	4653      	mov	r3, sl
   16f76:	4628      	mov	r0, r5
   16f78:	f8cd 9000 	str.w	r9, [sp]
   16f7c:	f7ff ff4a 	bl	16e14 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
}
   16f80:	4620      	mov	r0, r4
   16f82:	b015      	add	sp, #84	; 0x54
   16f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   16f88:	2803      	cmp	r0, #3
   16f8a:	d001      	beq.n	16f90 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x70>
   16f8c:	2809      	cmp	r0, #9
   16f8e:	d10b      	bne.n	16fa8 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, &data,
   16f90:	460a      	mov	r2, r1
   16f92:	e9cd 3701 	strd	r3, r7, [sp, #4]
   16f96:	4631      	mov	r1, r6
   16f98:	4653      	mov	r3, sl
   16f9a:	4628      	mov	r0, r5
   16f9c:	f8cd 9000 	str.w	r9, [sp]
   16fa0:	f011 f85d 	bl	2805e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
   16fa4:	4604      	mov	r4, r0
   16fa6:	e7eb      	b.n	16f80 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   16fa8:	696c      	ldr	r4, [r5, #20]
   16faa:	f7f5 fe8b 	bl	ccc4 <TfLiteTypeGetName>
   16fae:	f818 300b 	ldrb.w	r3, [r8, fp]
   16fb2:	4602      	mov	r2, r0
   16fb4:	4902      	ldr	r1, [pc, #8]	; (16fc0 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xa0>)
   16fb6:	4628      	mov	r0, r5
   16fb8:	47a0      	blx	r4
    return kTfLiteError;
   16fba:	2401      	movs	r4, #1
   16fbc:	e7e0      	b.n	16f80 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x60>
   16fbe:	bf00      	nop
   16fc0:	00034a40 	.word	0x00034a40

00016fc4 <_ZN6tflite3ops5micro16Register_ARG_MAXEv>:
  return Eval(context, node, true);
}

}  // namespace arg_min_max

TfLiteRegistration Register_ARG_MAX() {
   16fc4:	b510      	push	{r4, lr}
   16fc6:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/arg_min_max::ArgMaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   16fc8:	2220      	movs	r2, #32
   16fca:	2100      	movs	r1, #0
   16fcc:	f019 ff73 	bl	30eb6 <memset>
   16fd0:	4b01      	ldr	r3, [pc, #4]	; (16fd8 <_ZN6tflite3ops5micro16Register_ARG_MAXEv+0x14>)
}
   16fd2:	4620      	mov	r0, r4
          /*version=*/0};
   16fd4:	60e3      	str	r3, [r4, #12]
}
   16fd6:	bd10      	pop	{r4, pc}
   16fd8:	00028621 	.word	0x00028621

00016fdc <_ZN6tflite3ops5micro16Register_ARG_MINEv>:

TfLiteRegistration Register_ARG_MIN() {
   16fdc:	b510      	push	{r4, lr}
   16fde:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/arg_min_max::ArgMinEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   16fe0:	2220      	movs	r2, #32
   16fe2:	2100      	movs	r1, #0
   16fe4:	f019 ff67 	bl	30eb6 <memset>
   16fe8:	4b01      	ldr	r3, [pc, #4]	; (16ff0 <_ZN6tflite3ops5micro16Register_ARG_MINEv+0x14>)
}
   16fea:	4620      	mov	r0, r4
          /*version=*/0};
   16fec:	60e3      	str	r3, [r4, #12]
}
   16fee:	bd10      	pop	{r4, pc}
   16ff0:	0002861b 	.word	0x0002861b

00016ff4 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {
   16ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ff8:	4690      	mov	r8, r2
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   16ffa:	680a      	ldr	r2, [r1, #0]
   16ffc:	6883      	ldr	r3, [r0, #8]
   16ffe:	6897      	ldr	r7, [r2, #8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {
   17000:	4604      	mov	r4, r0
   17002:	01b8      	lsls	r0, r7, #6
  if (axis->type == kTfLiteInt32) {
   17004:	5c18      	ldrb	r0, [r3, r0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node, bool is_arg_max) {
   17006:	b092      	sub	sp, #72	; 0x48
  if (axis->type == kTfLiteInt32) {
   17008:	2802      	cmp	r0, #2
   1700a:	eb03 1787 	add.w	r7, r3, r7, lsl #6
   1700e:	d178      	bne.n	17102 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x10e>
  return &context->tensors[node->outputs->data[index]];
   17010:	6849      	ldr	r1, [r1, #4]
   17012:	684d      	ldr	r5, [r1, #4]
   17014:	01a9      	lsls	r1, r5, #6
    if (output->type == kTfLiteInt32) {
   17016:	5c58      	ldrb	r0, [r3, r1]
   17018:	eb03 1585 	add.w	r5, r3, r5, lsl #6
   1701c:	2802      	cmp	r0, #2
   1701e:	d170      	bne.n	17102 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x10e>
  return &context->tensors[node->inputs->data[index]];
   17020:	6856      	ldr	r6, [r2, #4]
   17022:	01b2      	lsls	r2, r6, #6
      switch (input->type) {
   17024:	5c98      	ldrb	r0, [r3, r2]
   17026:	eb03 1686 	add.w	r6, r3, r6, lsl #6
   1702a:	2803      	cmp	r0, #3
   1702c:	d028      	beq.n	17080 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x8c>
   1702e:	2809      	cmp	r0, #9
   17030:	d042      	beq.n	170b8 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xc4>
   17032:	2801      	cmp	r0, #1
   17034:	d15c      	bne.n	170f0 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xfc>
          TF_LITE_ARG_MIN_MAX(float, int32_t, int32_t);
   17036:	4631      	mov	r1, r6
   17038:	a806      	add	r0, sp, #24
   1703a:	f010 fb33 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1703e:	687a      	ldr	r2, [r7, #4]
   17040:	4629      	mov	r1, r5
   17042:	a80c      	add	r0, sp, #48	; 0x30
   17044:	6874      	ldr	r4, [r6, #4]
   17046:	9203      	str	r2, [sp, #12]
   17048:	f010 fb2c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1704c:	686b      	ldr	r3, [r5, #4]
inline void ArgMinMaxHelper(const RuntimeShape& input1_shape,
   1704e:	a905      	add	r1, sp, #20
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   17050:	e9cd 3100 	strd	r3, r1, [sp]
  if (is_arg_max) {
   17054:	9a03      	ldr	r2, [sp, #12]
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   17056:	4621      	mov	r1, r4
   17058:	ab0c      	add	r3, sp, #48	; 0x30
   1705a:	a806      	add	r0, sp, #24
  if (is_arg_max) {
   1705c:	f1b8 0f00 	cmp.w	r8, #0
   17060:	d00b      	beq.n	1707a <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x86>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   17062:	f011 f80a 	bl	2807a <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
          TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);
   17066:	a80c      	add	r0, sp, #48	; 0x30
   17068:	f010 fad7 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1706c:	a806      	add	r0, sp, #24
   1706e:	f010 fad4 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   17072:	2000      	movs	r0, #0
}
   17074:	b012      	add	sp, #72	; 0x48
   17076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   1707a:	f011 f87e 	bl	2817a <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
   1707e:	e7f2      	b.n	17066 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
          TF_LITE_ARG_MIN_MAX(uint8_t, int32_t, int32_t);
   17080:	4631      	mov	r1, r6
   17082:	a806      	add	r0, sp, #24
   17084:	f010 fb0e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17088:	687a      	ldr	r2, [r7, #4]
   1708a:	4629      	mov	r1, r5
   1708c:	a80c      	add	r0, sp, #48	; 0x30
   1708e:	6874      	ldr	r4, [r6, #4]
   17090:	9203      	str	r2, [sp, #12]
   17092:	f010 fb07 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17096:	686b      	ldr	r3, [r5, #4]
inline void ArgMinMaxHelper(const RuntimeShape& input1_shape,
   17098:	a905      	add	r1, sp, #20
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   1709a:	e9cd 3100 	strd	r3, r1, [sp]
  if (is_arg_max) {
   1709e:	9a03      	ldr	r2, [sp, #12]
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   170a0:	4621      	mov	r1, r4
   170a2:	ab0c      	add	r3, sp, #48	; 0x30
   170a4:	a806      	add	r0, sp, #24
  if (is_arg_max) {
   170a6:	f1b8 0f00 	cmp.w	r8, #0
   170aa:	d002      	beq.n	170b2 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xbe>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   170ac:	f011 f8e5 	bl	2827a <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
   170b0:	e7d9      	b.n	17066 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   170b2:	f011 f956 	bl	28362 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
   170b6:	e7d6      	b.n	17066 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
          TF_LITE_ARG_MIN_MAX(int8_t, int32_t, int32_t);
   170b8:	4631      	mov	r1, r6
   170ba:	a806      	add	r0, sp, #24
   170bc:	f010 faf2 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   170c0:	687a      	ldr	r2, [r7, #4]
   170c2:	4629      	mov	r1, r5
   170c4:	a80c      	add	r0, sp, #48	; 0x30
   170c6:	6874      	ldr	r4, [r6, #4]
   170c8:	9203      	str	r2, [sp, #12]
   170ca:	f010 faeb 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   170ce:	686b      	ldr	r3, [r5, #4]
inline void ArgMinMaxHelper(const RuntimeShape& input1_shape,
   170d0:	a905      	add	r1, sp, #20
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   170d2:	e9cd 3100 	strd	r3, r1, [sp]
  if (is_arg_max) {
   170d6:	9a03      	ldr	r2, [sp, #12]
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   170d8:	4621      	mov	r1, r4
   170da:	ab0c      	add	r3, sp, #48	; 0x30
   170dc:	a806      	add	r0, sp, #24
  if (is_arg_max) {
   170de:	f1b8 0f00 	cmp.w	r8, #0
   170e2:	d002      	beq.n	170ea <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0xf6>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   170e4:	f011 f9b1 	bl	2844a <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
   170e8:	e7bd      	b.n	17066 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
    reference_ops::ArgMinMax(input1_shape, input1_data, input2_data,
   170ea:	f011 fa22 	bl	28532 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>
   170ee:	e7ba      	b.n	17066 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x72>
          TF_LITE_KERNEL_LOG(context,
   170f0:	6965      	ldr	r5, [r4, #20]
   170f2:	f7f5 fde7 	bl	ccc4 <TfLiteTypeGetName>
   170f6:	4602      	mov	r2, r0
   170f8:	4905      	ldr	r1, [pc, #20]	; (17110 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x11c>)
    TF_LITE_KERNEL_LOG(context, "Only int32 are supported currently, got %s.",
   170fa:	4620      	mov	r0, r4
   170fc:	47a8      	blx	r5
    return kTfLiteError;
   170fe:	2001      	movs	r0, #1
   17100:	e7b8      	b.n	17074 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x80>
    TF_LITE_KERNEL_LOG(context, "Only int32 are supported currently, got %s.",
   17102:	6965      	ldr	r5, [r4, #20]
   17104:	f7f5 fdde 	bl	ccc4 <TfLiteTypeGetName>
   17108:	4902      	ldr	r1, [pc, #8]	; (17114 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x120>)
   1710a:	4602      	mov	r2, r0
   1710c:	e7f5      	b.n	170fa <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb+0x106>
   1710e:	bf00      	nop
   17110:	00034a5c 	.word	0x00034a5c
   17114:	00034a9a 	.word	0x00034a9a

00017118 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace ceil {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   17118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1711c:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1711e:	4605      	mov	r5, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   17120:	681e      	ldr	r6, [r3, #0]
   17122:	b085      	sub	sp, #20
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   17124:	2e01      	cmp	r6, #1
   17126:	d00c      	beq.n	17142 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
   17128:	2401      	movs	r4, #1
   1712a:	4b4a      	ldr	r3, [pc, #296]	; (17254 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
   1712c:	e9cd 6402 	strd	r6, r4, [sp, #8]
   17130:	9301      	str	r3, [sp, #4]
   17132:	4b49      	ldr	r3, [pc, #292]	; (17258 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
   17134:	9300      	str	r3, [sp, #0]
   17136:	2321      	movs	r3, #33	; 0x21
   17138:	6945      	ldr	r5, [r0, #20]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   1713a:	4a48      	ldr	r2, [pc, #288]	; (1725c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1713c:	4948      	ldr	r1, [pc, #288]	; (17260 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   1713e:	47a8      	blx	r5
   17140:	e00f      	b.n	17162 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   17142:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   17144:	6814      	ldr	r4, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   17146:	2c01      	cmp	r4, #1
   17148:	d00f      	beq.n	1716a <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x52>
   1714a:	4b42      	ldr	r3, [pc, #264]	; (17254 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
   1714c:	e9cd 4602 	strd	r4, r6, [sp, #8]
   17150:	9301      	str	r3, [sp, #4]
   17152:	4b44      	ldr	r3, [pc, #272]	; (17264 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
   17154:	4a41      	ldr	r2, [pc, #260]	; (1725c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   17156:	9300      	str	r3, [sp, #0]
   17158:	6944      	ldr	r4, [r0, #20]
   1715a:	2322      	movs	r3, #34	; 0x22
   1715c:	4940      	ldr	r1, [pc, #256]	; (17260 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   1715e:	47a0      	blx	r4
   17160:	4634      	mov	r4, r6
  for (int i = 0; i < output->dims->size; ++i) {
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
  }
  return kTfLiteOk;
}
   17162:	4620      	mov	r0, r4
   17164:	b005      	add	sp, #20
   17166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return &context->tensors[node->inputs->data[index]];
   1716a:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1716c:	6886      	ldr	r6, [r0, #8]
   1716e:	ea4f 1883 	mov.w	r8, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
   17172:	f816 7008 	ldrb.w	r7, [r6, r8]
   17176:	eb06 1383 	add.w	r3, r6, r3, lsl #6
   1717a:	2f01      	cmp	r7, #1
   1717c:	d014      	beq.n	171a8 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
   1717e:	f8d0 8014 	ldr.w	r8, [r0, #20]
   17182:	4638      	mov	r0, r7
   17184:	f7f5 fd9e 	bl	ccc4 <TfLiteTypeGetName>
   17188:	4606      	mov	r6, r0
   1718a:	4620      	mov	r0, r4
   1718c:	f7f5 fd9a 	bl	ccc4 <TfLiteTypeGetName>
   17190:	4b35      	ldr	r3, [pc, #212]	; (17268 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
   17192:	e9cd 6002 	strd	r6, r0, [sp, #8]
   17196:	9301      	str	r3, [sp, #4]
   17198:	4b34      	ldr	r3, [pc, #208]	; (1726c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
   1719a:	4628      	mov	r0, r5
   1719c:	9300      	str	r3, [sp, #0]
   1719e:	4a2f      	ldr	r2, [pc, #188]	; (1725c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   171a0:	2323      	movs	r3, #35	; 0x23
   171a2:	4933      	ldr	r1, [pc, #204]	; (17270 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
   171a4:	47c0      	blx	r8
   171a6:	e7dc      	b.n	17162 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return &context->tensors[node->outputs->data[index]];
   171a8:	6852      	ldr	r2, [r2, #4]
   171aa:	0191      	lsls	r1, r2, #6
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
   171ac:	5c74      	ldrb	r4, [r6, r1]
   171ae:	eb06 1282 	add.w	r2, r6, r2, lsl #6
   171b2:	2c01      	cmp	r4, #1
   171b4:	d016      	beq.n	171e4 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
   171b6:	f8d0 9014 	ldr.w	r9, [r0, #20]
   171ba:	4620      	mov	r0, r4
   171bc:	f7f5 fd82 	bl	ccc4 <TfLiteTypeGetName>
   171c0:	4604      	mov	r4, r0
   171c2:	f816 0008 	ldrb.w	r0, [r6, r8]
   171c6:	f7f5 fd7d 	bl	ccc4 <TfLiteTypeGetName>
   171ca:	4b28      	ldr	r3, [pc, #160]	; (1726c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
   171cc:	e9cd 4002 	strd	r4, r0, [sp, #8]
   171d0:	9301      	str	r3, [sp, #4]
   171d2:	4b28      	ldr	r3, [pc, #160]	; (17274 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
   171d4:	4628      	mov	r0, r5
   171d6:	9300      	str	r3, [sp, #0]
   171d8:	4a20      	ldr	r2, [pc, #128]	; (1725c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   171da:	2324      	movs	r3, #36	; 0x24
   171dc:	4924      	ldr	r1, [pc, #144]	; (17270 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
   171de:	47c8      	blx	r9
   171e0:	463c      	mov	r4, r7
   171e2:	e7be      	b.n	17162 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
   171e4:	6991      	ldr	r1, [r2, #24]
   171e6:	699e      	ldr	r6, [r3, #24]
   171e8:	42b1      	cmp	r1, r6
   171ea:	d008      	beq.n	171fe <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0xe6>
   171ec:	4b22      	ldr	r3, [pc, #136]	; (17278 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
   171ee:	e9cd 1602 	strd	r1, r6, [sp, #8]
   171f2:	9301      	str	r3, [sp, #4]
   171f4:	4b21      	ldr	r3, [pc, #132]	; (1727c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
   171f6:	9300      	str	r3, [sp, #0]
   171f8:	6945      	ldr	r5, [r0, #20]
   171fa:	2325      	movs	r3, #37	; 0x25
   171fc:	e79d      	b.n	1713a <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   171fe:	6897      	ldr	r7, [r2, #8]
   17200:	689a      	ldr	r2, [r3, #8]
   17202:	6839      	ldr	r1, [r7, #0]
   17204:	6813      	ldr	r3, [r2, #0]
   17206:	4299      	cmp	r1, r3
   17208:	d008      	beq.n	1721c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
   1720a:	e9cd 1302 	strd	r1, r3, [sp, #8]
   1720e:	4b1c      	ldr	r3, [pc, #112]	; (17280 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
   17210:	9301      	str	r3, [sp, #4]
   17212:	4b1c      	ldr	r3, [pc, #112]	; (17284 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
   17214:	9300      	str	r3, [sp, #0]
   17216:	6945      	ldr	r5, [r0, #20]
   17218:	2326      	movs	r3, #38	; 0x26
   1721a:	e78e      	b.n	1713a <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   1721c:	4623      	mov	r3, r4
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   1721e:	3a04      	subs	r2, #4
  for (int i = 0; i < output->dims->size; ++i) {
   17220:	1e58      	subs	r0, r3, #1
   17222:	4281      	cmp	r1, r0
   17224:	dd13      	ble.n	1724e <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x136>
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   17226:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
   1722a:	3301      	adds	r3, #1
   1722c:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
   17230:	42b0      	cmp	r0, r6
   17232:	d0f5      	beq.n	17220 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x108>
   17234:	4b14      	ldr	r3, [pc, #80]	; (17288 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
   17236:	e9cd 0602 	strd	r0, r6, [sp, #8]
   1723a:	9301      	str	r3, [sp, #4]
   1723c:	4b13      	ldr	r3, [pc, #76]	; (1728c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
   1723e:	4628      	mov	r0, r5
   17240:	9300      	str	r3, [sp, #0]
   17242:	696e      	ldr	r6, [r5, #20]
   17244:	2328      	movs	r3, #40	; 0x28
   17246:	4a05      	ldr	r2, [pc, #20]	; (1725c <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   17248:	4905      	ldr	r1, [pc, #20]	; (17260 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   1724a:	47b0      	blx	r6
   1724c:	e789      	b.n	17162 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return kTfLiteOk;
   1724e:	2400      	movs	r4, #0
   17250:	e787      	b.n	17162 <_ZN6tflite3ops5micro4ceil7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
   17252:	bf00      	nop
   17254:	00035884 	.word	0x00035884
   17258:	00034b06 	.word	0x00034b06
   1725c:	00034ac6 	.word	0x00034ac6
   17260:	00034aec 	.word	0x00034aec
   17264:	00034b16 	.word	0x00034b16
   17268:	00034b41 	.word	0x00034b41
   1726c:	0003540f 	.word	0x0003540f
   17270:	00034b27 	.word	0x00034b27
   17274:	000353f7 	.word	0x000353f7
   17278:	00034b50 	.word	0x00034b50
   1727c:	00034b5d 	.word	0x00034b5d
   17280:	00034b6b 	.word	0x00034b6b
   17284:	00034b7d 	.word	0x00034b7d
   17288:	00034b90 	.word	0x00034b90
   1728c:	00034ba5 	.word	0x00034ba5

00017290 <_ZN6tflite3ops5micro13Register_CEILEv>:

  return kTfLiteOk;
}
}  // namespace ceil

TfLiteRegistration Register_CEIL() {
   17290:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/ceil::Prepare,
          /*invoke=*/ceil::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   17292:	4604      	mov	r4, r0
TfLiteRegistration Register_CEIL() {
   17294:	4606      	mov	r6, r0
          /*version=*/0};
   17296:	4d04      	ldr	r5, [pc, #16]	; (172a8 <_ZN6tflite3ops5micro13Register_CEILEv+0x18>)
   17298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1729a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1729c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   172a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   172a4:	4630      	mov	r0, r6
   172a6:	bd70      	pop	{r4, r5, r6, pc}
   172a8:	00031908 	.word	0x00031908

000172ac <_ZN6tflite3ops5micro14Register_EQUALEv>:
}

}  // namespace
}  // namespace comparisons

TfLiteRegistration Register_EQUAL() {
   172ac:	b510      	push	{r4, lr}
   172ae:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/comparisons::EqualEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   172b0:	2220      	movs	r2, #32
   172b2:	2100      	movs	r1, #0
   172b4:	f019 fdff 	bl	30eb6 <memset>
   172b8:	4b01      	ldr	r3, [pc, #4]	; (172c0 <_ZN6tflite3ops5micro14Register_EQUALEv+0x14>)
}
   172ba:	4620      	mov	r0, r4
          /*version=*/0};
   172bc:	60e3      	str	r3, [r4, #12]
}
   172be:	bd10      	pop	{r4, pc}
   172c0:	0001733d 	.word	0x0001733d

000172c4 <_ZN6tflite3ops5micro18Register_NOT_EQUALEv>:

TfLiteRegistration Register_NOT_EQUAL() {
   172c4:	b510      	push	{r4, lr}
   172c6:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/comparisons::NotEqualEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   172c8:	2220      	movs	r2, #32
   172ca:	2100      	movs	r1, #0
   172cc:	f019 fdf3 	bl	30eb6 <memset>
   172d0:	4b01      	ldr	r3, [pc, #4]	; (172d8 <_ZN6tflite3ops5micro18Register_NOT_EQUALEv+0x14>)
}
   172d2:	4620      	mov	r0, r4
          /*version=*/0};
   172d4:	60e3      	str	r3, [r4, #12]
}
   172d6:	bd10      	pop	{r4, pc}
   172d8:	000178c9 	.word	0x000178c9

000172dc <_ZN6tflite3ops5micro16Register_GREATEREv>:

TfLiteRegistration Register_GREATER() {
   172dc:	b510      	push	{r4, lr}
   172de:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/comparisons::GreaterEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   172e0:	2220      	movs	r2, #32
   172e2:	2100      	movs	r1, #0
   172e4:	f019 fde7 	bl	30eb6 <memset>
   172e8:	4b01      	ldr	r3, [pc, #4]	; (172f0 <_ZN6tflite3ops5micro16Register_GREATEREv+0x14>)
}
   172ea:	4620      	mov	r0, r4
          /*version=*/0};
   172ec:	60e3      	str	r3, [r4, #12]
}
   172ee:	bd10      	pop	{r4, pc}
   172f0:	00017e4d 	.word	0x00017e4d

000172f4 <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv>:

TfLiteRegistration Register_GREATER_EQUAL() {
   172f4:	b510      	push	{r4, lr}
   172f6:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/comparisons::GreaterEqualEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   172f8:	2220      	movs	r2, #32
   172fa:	2100      	movs	r1, #0
   172fc:	f019 fddb 	bl	30eb6 <memset>
   17300:	4b01      	ldr	r3, [pc, #4]	; (17308 <_ZN6tflite3ops5micro22Register_GREATER_EQUALEv+0x14>)
}
   17302:	4620      	mov	r0, r4
          /*version=*/0};
   17304:	60e3      	str	r3, [r4, #12]
}
   17306:	bd10      	pop	{r4, pc}
   17308:	00018341 	.word	0x00018341

0001730c <_ZN6tflite3ops5micro13Register_LESSEv>:

TfLiteRegistration Register_LESS() {
   1730c:	b510      	push	{r4, lr}
   1730e:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/comparisons::LessEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   17310:	2220      	movs	r2, #32
   17312:	2100      	movs	r1, #0
   17314:	f019 fdcf 	bl	30eb6 <memset>
   17318:	4b01      	ldr	r3, [pc, #4]	; (17320 <_ZN6tflite3ops5micro13Register_LESSEv+0x14>)
}
   1731a:	4620      	mov	r0, r4
          /*version=*/0};
   1731c:	60e3      	str	r3, [r4, #12]
}
   1731e:	bd10      	pop	{r4, pc}
   17320:	00018835 	.word	0x00018835

00017324 <_ZN6tflite3ops5micro19Register_LESS_EQUALEv>:

TfLiteRegistration Register_LESS_EQUAL() {
   17324:	b510      	push	{r4, lr}
   17326:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/comparisons::LessEqualEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   17328:	2220      	movs	r2, #32
   1732a:	2100      	movs	r1, #0
   1732c:	f019 fdc3 	bl	30eb6 <memset>
   17330:	4b01      	ldr	r3, [pc, #4]	; (17338 <_ZN6tflite3ops5micro19Register_LESS_EQUALEv+0x14>)
}
   17332:	4620      	mov	r0, r4
          /*version=*/0};
   17334:	60e3      	str	r3, [r4, #12]
}
   17336:	bd10      	pop	{r4, pc}
   17338:	00018d29 	.word	0x00018d29

0001733c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {
   1733c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17340:	ed2d 8b02 	vpush	{d8}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   17344:	680b      	ldr	r3, [r1, #0]
   17346:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1734a:	685e      	ldr	r6, [r3, #4]
   1734c:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   1734e:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   17350:	ea4f 1986 	mov.w	r9, r6, lsl #6
  return &context->tensors[node->outputs->data[index]];
   17354:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   17356:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   1735a:	eb08 1484 	add.w	r4, r8, r4, lsl #6
TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {
   1735e:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   17360:	4621      	mov	r1, r4
   17362:	4630      	mov	r0, r6
TfLiteStatus EqualEval(TfLiteContext* context, TfLiteNode* node) {
   17364:	b0ab      	sub	sp, #172	; 0xac
  return &context->tensors[node->outputs->data[index]];
   17366:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   1736a:	f018 fefe 	bl	3016a <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   1736e:	f080 0001 	eor.w	r0, r0, #1
   17372:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   17374:	f818 0009 	ldrb.w	r0, [r8, r9]
   17378:	1e43      	subs	r3, r0, #1
   1737a:	2b08      	cmp	r3, #8
   1737c:	f200 8297 	bhi.w	178ae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x572>
   17380:	e8df f013 	tbh	[pc, r3, lsl #1]
   17384:	00b80060 	.word	0x00b80060
   17388:	01060168 	.word	0x01060168
   1738c:	00090295 	.word	0x00090295
   17390:	02950295 	.word	0x02950295
   17394:	01fe      	.short	0x01fe
      TF_LITE_COMPARISON(bool, Equal, requires_broadcast);
   17396:	4631      	mov	r1, r6
   17398:	ad1c      	add	r5, sp, #112	; 0x70
   1739a:	b31f      	cbz	r7, 173e4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
   1739c:	a810      	add	r0, sp, #64	; 0x40
   1739e:	f010 f981 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   173a2:	4621      	mov	r1, r4
   173a4:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   173a6:	6876      	ldr	r6, [r6, #4]
   173a8:	f010 f97c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   173ac:	b104      	cbz	r4, 173b0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
   173ae:	6864      	ldr	r4, [r4, #4]
   173b0:	4651      	mov	r1, sl
   173b2:	4628      	mov	r0, r5
   173b4:	f010 f976 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   173b8:	f1ba 0f00 	cmp.w	sl, #0
   173bc:	d001      	beq.n	173c2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
   173be:	f8da a004 	ldr.w	sl, [sl, #4]
      bool* output_data) {                                                     \
    BroadcastComparison4DSlowWithScaling<T, name##Fn>(                         \
        op_params, input1_shape, input1_data, input2_shape, input2_data,       \
        output_shape, output_data);                                            \
  }
TFLITE_COMPARISON_OP(Equal);
   173c2:	4632      	mov	r2, r6
   173c4:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   173c8:	9400      	str	r4, [sp, #0]
   173ca:	ab16      	add	r3, sp, #88	; 0x58
   173cc:	a910      	add	r1, sp, #64	; 0x40
   173ce:	a822      	add	r0, sp, #136	; 0x88
   173d0:	f011 fc7c 	bl	28ccc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(Equal);
   173d4:	4628      	mov	r0, r5
   173d6:	f010 f920 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   173da:	a816      	add	r0, sp, #88	; 0x58
   173dc:	f010 f91d 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   173e0:	a810      	add	r0, sp, #64	; 0x40
   173e2:	e12f      	b.n	17644 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x308>
      TF_LITE_COMPARISON(bool, Equal, requires_broadcast);
   173e4:	a816      	add	r0, sp, #88	; 0x58
   173e6:	f010 f95d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   173ea:	4621      	mov	r1, r4
   173ec:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   173ee:	6876      	ldr	r6, [r6, #4]
   173f0:	f010 f958 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   173f4:	b104      	cbz	r4, 173f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xbc>
   173f6:	6864      	ldr	r4, [r4, #4]
   173f8:	4651      	mov	r1, sl
   173fa:	a822      	add	r0, sp, #136	; 0x88
   173fc:	f010 f952 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17400:	f1ba 0f00 	cmp.w	sl, #0
   17404:	d001      	beq.n	1740a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xce>
   17406:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1740a:	4629      	mov	r1, r5
   1740c:	aa22      	add	r2, sp, #136	; 0x88
   1740e:	a816      	add	r0, sp, #88	; 0x58
   17410:	f011 f98b 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   17414:	2200      	movs	r2, #0
   17416:	2300      	movs	r3, #0
  const int64_t flatsize =
   17418:	17c1      	asrs	r1, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   1741a:	4282      	cmp	r2, r0
   1741c:	eb73 0701 	sbcs.w	r7, r3, r1
   17420:	f280 8109 	bge.w	17636 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
  return lhs == rhs;
   17424:	f816 c002 	ldrb.w	ip, [r6, r2]
   17428:	f814 e002 	ldrb.w	lr, [r4, r2]
   1742c:	ebac 0e0e 	sub.w	lr, ip, lr
   17430:	f1de 0c00 	rsbs	ip, lr, #0
   17434:	eb4c 0c0e 	adc.w	ip, ip, lr
   17438:	f80a c002 	strb.w	ip, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   1743c:	3201      	adds	r2, #1
   1743e:	f143 0300 	adc.w	r3, r3, #0
   17442:	e7ea      	b.n	1741a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0xde>
      TF_LITE_COMPARISON(float, Equal, requires_broadcast);
   17444:	4631      	mov	r1, r6
   17446:	ad1c      	add	r5, sp, #112	; 0x70
   17448:	b1e7      	cbz	r7, 17484 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x148>
   1744a:	a810      	add	r0, sp, #64	; 0x40
   1744c:	f010 f92a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17450:	4621      	mov	r1, r4
   17452:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17454:	6876      	ldr	r6, [r6, #4]
   17456:	f010 f925 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1745a:	b104      	cbz	r4, 1745e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x122>
   1745c:	6864      	ldr	r4, [r4, #4]
   1745e:	4651      	mov	r1, sl
   17460:	4628      	mov	r0, r5
   17462:	f010 f91f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17466:	f1ba 0f00 	cmp.w	sl, #0
   1746a:	d001      	beq.n	17470 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x134>
   1746c:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
   17470:	4632      	mov	r2, r6
   17472:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17476:	9400      	str	r4, [sp, #0]
   17478:	ab16      	add	r3, sp, #88	; 0x58
   1747a:	a910      	add	r1, sp, #64	; 0x40
   1747c:	a822      	add	r0, sp, #136	; 0x88
   1747e:	f011 f9fd 	bl	2887c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17482:	e7a7      	b.n	173d4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17484:	a816      	add	r0, sp, #88	; 0x58
   17486:	f010 f90d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1748a:	4621      	mov	r1, r4
   1748c:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1748e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   17492:	f010 f907 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17496:	b104      	cbz	r4, 1749a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x15e>
   17498:	6864      	ldr	r4, [r4, #4]
   1749a:	4651      	mov	r1, sl
   1749c:	a822      	add	r0, sp, #136	; 0x88
   1749e:	f010 f901 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   174a2:	f1ba 0f00 	cmp.w	sl, #0
   174a6:	d001      	beq.n	174ac <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x170>
   174a8:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   174ac:	4629      	mov	r1, r5
   174ae:	aa22      	add	r2, sp, #136	; 0x88
   174b0:	a816      	add	r0, sp, #88	; 0x58
   174b2:	f011 f93a 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   174b6:	4641      	mov	r1, r8
  const int64_t flatsize =
   174b8:	4606      	mov	r6, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   174ba:	2200      	movs	r2, #0
   174bc:	2300      	movs	r3, #0
  const int64_t flatsize =
   174be:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   174c0:	42b2      	cmp	r2, r6
   174c2:	eb73 0007 	sbcs.w	r0, r3, r7
   174c6:	f280 80b6 	bge.w	17636 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
    output_data[i] = F(input1_data[i], input2_data[i]);
   174ca:	ecb1 7a01 	vldmia	r1!, {s14}
   174ce:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs == rhs;
   174d2:	eeb4 7a67 	vcmp.f32	s14, s15
   174d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   174da:	bf0c      	ite	eq
   174dc:	f04f 0c01 	moveq.w	ip, #1
   174e0:	f04f 0c00 	movne.w	ip, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   174e4:	eb0a 0002 	add.w	r0, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   174e8:	3201      	adds	r2, #1
  return lhs == rhs;
   174ea:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
   174ee:	f143 0300 	adc.w	r3, r3, #0
   174f2:	e7e5      	b.n	174c0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x184>
      TF_LITE_COMPARISON(int32_t, Equal, requires_broadcast);
   174f4:	4631      	mov	r1, r6
   174f6:	ad1c      	add	r5, sp, #112	; 0x70
   174f8:	b1e7      	cbz	r7, 17534 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1f8>
   174fa:	a810      	add	r0, sp, #64	; 0x40
   174fc:	f010 f8d2 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17500:	4621      	mov	r1, r4
   17502:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17504:	6876      	ldr	r6, [r6, #4]
   17506:	f010 f8cd 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1750a:	b104      	cbz	r4, 1750e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1d2>
   1750c:	6864      	ldr	r4, [r4, #4]
   1750e:	4651      	mov	r1, sl
   17510:	4628      	mov	r0, r5
   17512:	f010 f8c7 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17516:	f1ba 0f00 	cmp.w	sl, #0
   1751a:	d001      	beq.n	17520 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x1e4>
   1751c:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
   17520:	4632      	mov	r2, r6
   17522:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17526:	9400      	str	r4, [sp, #0]
   17528:	ab16      	add	r3, sp, #88	; 0x58
   1752a:	a910      	add	r1, sp, #64	; 0x40
   1752c:	a822      	add	r0, sp, #136	; 0x88
   1752e:	f011 fc21 	bl	28d74 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17532:	e74f      	b.n	173d4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17534:	a816      	add	r0, sp, #88	; 0x58
   17536:	f010 f8b5 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1753a:	4621      	mov	r1, r4
   1753c:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1753e:	6876      	ldr	r6, [r6, #4]
   17540:	f010 f8b0 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17544:	b104      	cbz	r4, 17548 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x20c>
   17546:	6864      	ldr	r4, [r4, #4]
   17548:	4651      	mov	r1, sl
   1754a:	a822      	add	r0, sp, #136	; 0x88
   1754c:	f010 f8aa 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17550:	f1ba 0f00 	cmp.w	sl, #0
   17554:	d001      	beq.n	1755a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x21e>
   17556:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1755a:	aa22      	add	r2, sp, #136	; 0x88
   1755c:	4629      	mov	r1, r5
   1755e:	a816      	add	r0, sp, #88	; 0x58
   17560:	f011 f8e3 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   17564:	2200      	movs	r2, #0
  const int64_t flatsize =
   17566:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17568:	2300      	movs	r3, #0
  const int64_t flatsize =
   1756a:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   1756e:	4542      	cmp	r2, r8
   17570:	eb73 0109 	sbcs.w	r1, r3, r9
   17574:	da5f      	bge.n	17636 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
  return lhs == rhs;
   17576:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
   1757a:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   1757e:	1a08      	subs	r0, r1, r0
   17580:	4241      	negs	r1, r0
   17582:	4141      	adcs	r1, r0
   17584:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   17588:	3201      	adds	r2, #1
   1758a:	f143 0300 	adc.w	r3, r3, #0
   1758e:	e7ee      	b.n	1756e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x232>
      TF_LITE_COMPARISON(int64_t, Equal, requires_broadcast);
   17590:	4631      	mov	r1, r6
   17592:	ad1c      	add	r5, sp, #112	; 0x70
   17594:	b1e7      	cbz	r7, 175d0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x294>
   17596:	a810      	add	r0, sp, #64	; 0x40
   17598:	f010 f884 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1759c:	4621      	mov	r1, r4
   1759e:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   175a0:	6876      	ldr	r6, [r6, #4]
   175a2:	f010 f87f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   175a6:	b104      	cbz	r4, 175aa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x26e>
   175a8:	6864      	ldr	r4, [r4, #4]
   175aa:	4651      	mov	r1, sl
   175ac:	4628      	mov	r0, r5
   175ae:	f010 f879 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   175b2:	f1ba 0f00 	cmp.w	sl, #0
   175b6:	d001      	beq.n	175bc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x280>
   175b8:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
   175bc:	4632      	mov	r2, r6
   175be:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   175c2:	9400      	str	r4, [sp, #0]
   175c4:	ab16      	add	r3, sp, #88	; 0x58
   175c6:	a910      	add	r1, sp, #64	; 0x40
   175c8:	a822      	add	r0, sp, #136	; 0x88
   175ca:	f011 fc27 	bl	28e1c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   175ce:	e701      	b.n	173d4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   175d0:	a816      	add	r0, sp, #88	; 0x58
   175d2:	f010 f867 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   175d6:	4621      	mov	r1, r4
   175d8:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   175da:	6876      	ldr	r6, [r6, #4]
   175dc:	f010 f862 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   175e0:	b104      	cbz	r4, 175e4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2a8>
   175e2:	6864      	ldr	r4, [r4, #4]
   175e4:	4651      	mov	r1, sl
   175e6:	a822      	add	r0, sp, #136	; 0x88
   175e8:	f010 f85c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   175ec:	f1ba 0f00 	cmp.w	sl, #0
   175f0:	d001      	beq.n	175f6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2ba>
   175f2:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   175f6:	4629      	mov	r1, r5
   175f8:	aa22      	add	r2, sp, #136	; 0x88
   175fa:	a816      	add	r0, sp, #88	; 0x58
   175fc:	f011 f895 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   17600:	2200      	movs	r2, #0
   17602:	2300      	movs	r3, #0
  const int64_t flatsize =
   17604:	17c1      	asrs	r1, r0, #31
   17606:	f1a6 0c08 	sub.w	ip, r6, #8
   1760a:	3c08      	subs	r4, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   1760c:	4282      	cmp	r2, r0
   1760e:	eb73 0601 	sbcs.w	r6, r3, r1
   17612:	da10      	bge.n	17636 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
  return lhs == rhs;
   17614:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
   17618:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
   1761c:	45b9      	cmp	r9, r7
   1761e:	bf06      	itte	eq
   17620:	45b0      	cmpeq	r8, r6
   17622:	2601      	moveq	r6, #1
   17624:	2600      	movne	r6, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   17626:	eb0a 0e02 	add.w	lr, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   1762a:	3201      	adds	r2, #1
  return lhs == rhs;
   1762c:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
   17630:	f143 0300 	adc.w	r3, r3, #0
   17634:	e7ea      	b.n	1760c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x2d0>
   17636:	a822      	add	r0, sp, #136	; 0x88
   17638:	f00f ffef 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1763c:	4628      	mov	r0, r5
   1763e:	f00f ffec 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   17642:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(Equal);
   17644:	f00f ffe9 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   17648:	2000      	movs	r0, #0
}
   1764a:	b02b      	add	sp, #172	; 0xac
   1764c:	ecbd 8b02 	vpop	{d8}
   17650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(Equal);
   17654:	6933      	ldr	r3, [r6, #16]
   17656:	68f0      	ldr	r0, [r6, #12]
   17658:	f1c3 0800 	rsb	r8, r3, #0
   1765c:	f7f4 ff54 	bl	c508 <__aeabi_f2d>
   17660:	ab0d      	add	r3, sp, #52	; 0x34
   17662:	aa0c      	add	r2, sp, #48	; 0x30
   17664:	6925      	ldr	r5, [r4, #16]
   17666:	f009 fcdb 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   1766a:	68e0      	ldr	r0, [r4, #12]
   1766c:	f7f4 ff4c 	bl	c508 <__aeabi_f2d>
   17670:	ab0f      	add	r3, sp, #60	; 0x3c
   17672:	aa0e      	add	r2, sp, #56	; 0x38
   17674:	f009 fcd4 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   17678:	2308      	movs	r3, #8
   1767a:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   1767e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17680:	426d      	negs	r5, r5
   17682:	9324      	str	r3, [sp, #144]	; 0x90
   17684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17686:	4631      	mov	r1, r6
   17688:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   1768c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1768e:	ad1c      	add	r5, sp, #112	; 0x70
   17690:	9327      	str	r3, [sp, #156]	; 0x9c
   17692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17694:	a810      	add	r0, sp, #64	; 0x40
   17696:	9328      	str	r3, [sp, #160]	; 0xa0
   17698:	b1df      	cbz	r7, 176d2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x396>
   1769a:	f010 f803 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1769e:	6872      	ldr	r2, [r6, #4]
   176a0:	4621      	mov	r1, r4
   176a2:	a816      	add	r0, sp, #88	; 0x58
   176a4:	9204      	str	r2, [sp, #16]
   176a6:	f00f fffd 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   176aa:	4651      	mov	r1, sl
   176ac:	4628      	mov	r0, r5
   176ae:	6864      	ldr	r4, [r4, #4]
   176b0:	f00f fff8 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   176b4:	9a04      	ldr	r2, [sp, #16]
   176b6:	f1ba 0f00 	cmp.w	sl, #0
   176ba:	d001      	beq.n	176c0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x384>
   176bc:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
   176c0:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   176c4:	9400      	str	r4, [sp, #0]
   176c6:	ab16      	add	r3, sp, #88	; 0x58
   176c8:	a910      	add	r1, sp, #64	; 0x40
   176ca:	a822      	add	r0, sp, #136	; 0x88
   176cc:	f011 ffcc 	bl	29668 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   176d0:	e680      	b.n	173d4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   176d2:	f00f ffe7 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   176d6:	6873      	ldr	r3, [r6, #4]
   176d8:	4621      	mov	r1, r4
   176da:	a816      	add	r0, sp, #88	; 0x58
   176dc:	9304      	str	r3, [sp, #16]
   176de:	f00f ffe1 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   176e2:	6863      	ldr	r3, [r4, #4]
   176e4:	4651      	mov	r1, sl
   176e6:	4628      	mov	r0, r5
   176e8:	9305      	str	r3, [sp, #20]
   176ea:	f00f ffdb 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   176ee:	f1ba 0f00 	cmp.w	sl, #0
   176f2:	d001      	beq.n	176f8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3bc>
   176f4:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   176f8:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   176fc:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   176fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17700:	aa1c      	add	r2, sp, #112	; 0x70
   17702:	a916      	add	r1, sp, #88	; 0x58
   17704:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   17706:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   1770a:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   1770e:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   17712:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17714:	f011 f809 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   17718:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   1771a:	f04f 0800 	mov.w	r8, #0
   1771e:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   17722:	17c3      	asrs	r3, r0, #31
   17724:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   17728:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1772c:	4590      	cmp	r8, r2
   1772e:	eb79 0303 	sbcs.w	r3, r9, r3
   17732:	f280 80ba 	bge.w	178aa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x56e>
    const int32 input2_val = input2_offset + input2_data[i];
   17736:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   17738:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   1773a:	f812 5008 	ldrb.w	r5, [r2, r8]
   1773e:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17740:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   17744:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   17746:	9a04      	ldr	r2, [sp, #16]
   17748:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   1774c:	f812 0008 	ldrb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17750:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   17752:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17754:	40b0      	lsls	r0, r6
   17756:	f7ff fa79 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   1775a:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1775c:	4622      	mov	r2, r4
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1775e:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17760:	4639      	mov	r1, r7
   17762:	4628      	mov	r0, r5
   17764:	f7ff fa72 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs == rhs;
   17768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1776a:	1a1a      	subs	r2, r3, r0
   1776c:	4250      	negs	r0, r2
   1776e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17770:	4150      	adcs	r0, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   17772:	f118 0801 	adds.w	r8, r8, #1
  return lhs == rhs;
   17776:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   1777a:	f149 0900 	adc.w	r9, r9, #0
   1777e:	e7d3      	b.n	17728 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x3ec>
   17780:	6933      	ldr	r3, [r6, #16]
   17782:	68f0      	ldr	r0, [r6, #12]
   17784:	f1c3 0800 	rsb	r8, r3, #0
   17788:	f7f4 febe 	bl	c508 <__aeabi_f2d>
   1778c:	ab0d      	add	r3, sp, #52	; 0x34
   1778e:	aa0c      	add	r2, sp, #48	; 0x30
   17790:	6925      	ldr	r5, [r4, #16]
   17792:	f009 fc45 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   17796:	68e0      	ldr	r0, [r4, #12]
   17798:	f7f4 feb6 	bl	c508 <__aeabi_f2d>
   1779c:	ab0f      	add	r3, sp, #60	; 0x3c
   1779e:	aa0e      	add	r2, sp, #56	; 0x38
   177a0:	f009 fc3e 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   177a4:	2308      	movs	r3, #8
   177a6:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   177aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   177ac:	426d      	negs	r5, r5
   177ae:	9324      	str	r3, [sp, #144]	; 0x90
   177b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   177b2:	4631      	mov	r1, r6
   177b4:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   177b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   177ba:	ad1c      	add	r5, sp, #112	; 0x70
   177bc:	9327      	str	r3, [sp, #156]	; 0x9c
   177be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   177c0:	a810      	add	r0, sp, #64	; 0x40
   177c2:	9328      	str	r3, [sp, #160]	; 0xa0
   177c4:	b1df      	cbz	r7, 177fe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4c2>
   177c6:	f00f ff6d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   177ca:	6872      	ldr	r2, [r6, #4]
   177cc:	4621      	mov	r1, r4
   177ce:	a816      	add	r0, sp, #88	; 0x58
   177d0:	9204      	str	r2, [sp, #16]
   177d2:	f00f ff67 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   177d6:	4651      	mov	r1, sl
   177d8:	4628      	mov	r0, r5
   177da:	6864      	ldr	r4, [r4, #4]
   177dc:	f00f ff62 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   177e0:	9a04      	ldr	r2, [sp, #16]
   177e2:	f1ba 0f00 	cmp.w	sl, #0
   177e6:	d001      	beq.n	177ec <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4b0>
   177e8:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Equal);
   177ec:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   177f0:	9400      	str	r4, [sp, #0]
   177f2:	ab16      	add	r3, sp, #88	; 0x58
   177f4:	a910      	add	r1, sp, #64	; 0x40
   177f6:	a822      	add	r0, sp, #136	; 0x88
   177f8:	f011 ffc2 	bl	29780 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   177fc:	e5ea      	b.n	173d4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   177fe:	f00f ff51 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17802:	6873      	ldr	r3, [r6, #4]
   17804:	4621      	mov	r1, r4
   17806:	a816      	add	r0, sp, #88	; 0x58
   17808:	9304      	str	r3, [sp, #16]
   1780a:	f00f ff4b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1780e:	6863      	ldr	r3, [r4, #4]
   17810:	4651      	mov	r1, sl
   17812:	4628      	mov	r0, r5
   17814:	9305      	str	r3, [sp, #20]
   17816:	f00f ff45 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1781a:	f1ba 0f00 	cmp.w	sl, #0
   1781e:	d001      	beq.n	17824 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x4e8>
   17820:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   17824:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   17828:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   1782a:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1782c:	aa1c      	add	r2, sp, #112	; 0x70
   1782e:	a916      	add	r1, sp, #88	; 0x58
   17830:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   17832:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   17836:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   1783a:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   1783e:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17840:	f010 ff73 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   17844:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17846:	f04f 0800 	mov.w	r8, #0
   1784a:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   1784e:	17c3      	asrs	r3, r0, #31
   17850:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   17854:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   17858:	4590      	cmp	r8, r2
   1785a:	eb79 0303 	sbcs.w	r3, r9, r3
   1785e:	da24      	bge.n	178aa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x56e>
    const int32 input2_val = input2_offset + input2_data[i];
   17860:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   17862:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   17864:	f912 5008 	ldrsb.w	r5, [r2, r8]
   17868:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1786a:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   1786e:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   17870:	9a04      	ldr	r2, [sp, #16]
   17872:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   17876:	f912 0008 	ldrsb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1787a:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   1787c:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   1787e:	40b0      	lsls	r0, r6
   17880:	f7ff f9e4 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17884:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17886:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17888:	4622      	mov	r2, r4
   1788a:	4639      	mov	r1, r7
   1788c:	4628      	mov	r0, r5
   1788e:	f7ff f9dd 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs == rhs;
   17892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17894:	1a1b      	subs	r3, r3, r0
   17896:	4258      	negs	r0, r3
   17898:	4158      	adcs	r0, r3
   1789a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   1789c:	f118 0801 	adds.w	r8, r8, #1
  return lhs == rhs;
   178a0:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   178a4:	f149 0900 	adc.w	r9, r9, #0
   178a8:	e7d4      	b.n	17854 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x518>
   178aa:	a81c      	add	r0, sp, #112	; 0x70
   178ac:	e593      	b.n	173d6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   178ae:	696c      	ldr	r4, [r5, #20]
   178b0:	f7f5 fa08 	bl	ccc4 <TfLiteTypeGetName>
   178b4:	f818 3009 	ldrb.w	r3, [r8, r9]
   178b8:	4602      	mov	r2, r0
   178ba:	4902      	ldr	r1, [pc, #8]	; (178c4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x588>)
   178bc:	4628      	mov	r0, r5
   178be:	47a0      	blx	r4
      return kTfLiteError;
   178c0:	2001      	movs	r0, #1
   178c2:	e6c2      	b.n	1764a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_19EqualEvalEP13TfLiteContextP10TfLiteNode+0x30e>
   178c4:	00034a40 	.word	0x00034a40

000178c8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {
   178c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178cc:	ed2d 8b02 	vpush	{d8}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   178d0:	680b      	ldr	r3, [r1, #0]
   178d2:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   178d6:	685e      	ldr	r6, [r3, #4]
   178d8:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   178da:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   178dc:	ea4f 1986 	mov.w	r9, r6, lsl #6
  return &context->tensors[node->outputs->data[index]];
   178e0:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   178e2:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   178e6:	eb08 1484 	add.w	r4, r8, r4, lsl #6
TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {
   178ea:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   178ec:	4621      	mov	r1, r4
   178ee:	4630      	mov	r0, r6
TfLiteStatus NotEqualEval(TfLiteContext* context, TfLiteNode* node) {
   178f0:	b0ab      	sub	sp, #172	; 0xac
  return &context->tensors[node->outputs->data[index]];
   178f2:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   178f6:	f018 fc38 	bl	3016a <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   178fa:	f080 0001 	eor.w	r0, r0, #1
   178fe:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   17900:	f818 0009 	ldrb.w	r0, [r8, r9]
   17904:	1e43      	subs	r3, r0, #1
   17906:	2b08      	cmp	r3, #8
   17908:	f200 8293 	bhi.w	17e32 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x56a>
   1790c:	e8df f013 	tbh	[pc, r3, lsl #1]
   17910:	00b4005c 	.word	0x00b4005c
   17914:	01020164 	.word	0x01020164
   17918:	00090291 	.word	0x00090291
   1791c:	02910291 	.word	0x02910291
   17920:	01fa      	.short	0x01fa
      TF_LITE_COMPARISON(bool, NotEqual, requires_broadcast);
   17922:	4631      	mov	r1, r6
   17924:	ad1c      	add	r5, sp, #112	; 0x70
   17926:	b31f      	cbz	r7, 17970 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
   17928:	a810      	add	r0, sp, #64	; 0x40
   1792a:	f00f febb 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1792e:	4621      	mov	r1, r4
   17930:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17932:	6876      	ldr	r6, [r6, #4]
   17934:	f00f feb6 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17938:	b104      	cbz	r4, 1793c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
   1793a:	6864      	ldr	r4, [r4, #4]
   1793c:	4651      	mov	r1, sl
   1793e:	4628      	mov	r0, r5
   17940:	f00f feb0 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17944:	f1ba 0f00 	cmp.w	sl, #0
   17948:	d001      	beq.n	1794e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
   1794a:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
   1794e:	4632      	mov	r2, r6
   17950:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17954:	9400      	str	r4, [sp, #0]
   17956:	ab16      	add	r3, sp, #88	; 0x58
   17958:	a910      	add	r1, sp, #64	; 0x40
   1795a:	a822      	add	r0, sp, #136	; 0x88
   1795c:	f011 faba 	bl	28ed4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
   17960:	4628      	mov	r0, r5
   17962:	f00f fe5a 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   17966:	a816      	add	r0, sp, #88	; 0x58
   17968:	f00f fe57 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1796c:	a810      	add	r0, sp, #64	; 0x40
   1796e:	e12b      	b.n	17bc8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x300>
      TF_LITE_COMPARISON(bool, NotEqual, requires_broadcast);
   17970:	a816      	add	r0, sp, #88	; 0x58
   17972:	f00f fe97 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17976:	4621      	mov	r1, r4
   17978:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1797a:	6876      	ldr	r6, [r6, #4]
   1797c:	f00f fe92 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17980:	b104      	cbz	r4, 17984 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xbc>
   17982:	6864      	ldr	r4, [r4, #4]
   17984:	4651      	mov	r1, sl
   17986:	a822      	add	r0, sp, #136	; 0x88
   17988:	f00f fe8c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1798c:	f1ba 0f00 	cmp.w	sl, #0
   17990:	d001      	beq.n	17996 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xce>
   17992:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17996:	4629      	mov	r1, r5
   17998:	aa22      	add	r2, sp, #136	; 0x88
   1799a:	a816      	add	r0, sp, #88	; 0x58
   1799c:	f010 fec5 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   179a0:	2200      	movs	r2, #0
   179a2:	2300      	movs	r3, #0
  const int64_t flatsize =
   179a4:	17c1      	asrs	r1, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   179a6:	4282      	cmp	r2, r0
   179a8:	eb73 0701 	sbcs.w	r7, r3, r1
   179ac:	f280 8105 	bge.w	17bba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
  return lhs != rhs;
   179b0:	f816 c002 	ldrb.w	ip, [r6, r2]
   179b4:	f814 e002 	ldrb.w	lr, [r4, r2]
   179b8:	ea8c 0c0e 	eor.w	ip, ip, lr
    output_data[i] = F(input1_data[i], input2_data[i]);
   179bc:	f80a c002 	strb.w	ip, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   179c0:	3201      	adds	r2, #1
   179c2:	f143 0300 	adc.w	r3, r3, #0
   179c6:	e7ee      	b.n	179a6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0xde>
      TF_LITE_COMPARISON(float, NotEqual, requires_broadcast);
   179c8:	4631      	mov	r1, r6
   179ca:	ad1c      	add	r5, sp, #112	; 0x70
   179cc:	b1e7      	cbz	r7, 17a08 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x140>
   179ce:	a810      	add	r0, sp, #64	; 0x40
   179d0:	f00f fe68 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   179d4:	4621      	mov	r1, r4
   179d6:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   179d8:	6876      	ldr	r6, [r6, #4]
   179da:	f00f fe63 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   179de:	b104      	cbz	r4, 179e2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x11a>
   179e0:	6864      	ldr	r4, [r4, #4]
   179e2:	4651      	mov	r1, sl
   179e4:	4628      	mov	r0, r5
   179e6:	f00f fe5d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   179ea:	f1ba 0f00 	cmp.w	sl, #0
   179ee:	d001      	beq.n	179f4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x12c>
   179f0:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
   179f4:	4632      	mov	r2, r6
   179f6:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   179fa:	9400      	str	r4, [sp, #0]
   179fc:	ab16      	add	r3, sp, #88	; 0x58
   179fe:	a910      	add	r1, sp, #64	; 0x40
   17a00:	a822      	add	r0, sp, #136	; 0x88
   17a02:	f010 ff97 	bl	28934 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17a06:	e7ab      	b.n	17960 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17a08:	a816      	add	r0, sp, #88	; 0x58
   17a0a:	f00f fe4b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17a0e:	4621      	mov	r1, r4
   17a10:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17a12:	f8d6 8004 	ldr.w	r8, [r6, #4]
   17a16:	f00f fe45 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17a1a:	b104      	cbz	r4, 17a1e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x156>
   17a1c:	6864      	ldr	r4, [r4, #4]
   17a1e:	4651      	mov	r1, sl
   17a20:	a822      	add	r0, sp, #136	; 0x88
   17a22:	f00f fe3f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17a26:	f1ba 0f00 	cmp.w	sl, #0
   17a2a:	d001      	beq.n	17a30 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x168>
   17a2c:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17a30:	4629      	mov	r1, r5
   17a32:	aa22      	add	r2, sp, #136	; 0x88
   17a34:	a816      	add	r0, sp, #88	; 0x58
   17a36:	f010 fe78 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   17a3a:	4641      	mov	r1, r8
  const int64_t flatsize =
   17a3c:	4606      	mov	r6, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17a3e:	2200      	movs	r2, #0
   17a40:	2300      	movs	r3, #0
  const int64_t flatsize =
   17a42:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   17a44:	42b2      	cmp	r2, r6
   17a46:	eb73 0007 	sbcs.w	r0, r3, r7
   17a4a:	f280 80b6 	bge.w	17bba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
    output_data[i] = F(input1_data[i], input2_data[i]);
   17a4e:	ecb1 7a01 	vldmia	r1!, {s14}
   17a52:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs != rhs;
   17a56:	eeb4 7a67 	vcmp.f32	s14, s15
   17a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17a5e:	bf14      	ite	ne
   17a60:	f04f 0c01 	movne.w	ip, #1
   17a64:	f04f 0c00 	moveq.w	ip, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   17a68:	eb0a 0002 	add.w	r0, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   17a6c:	3201      	adds	r2, #1
  return lhs != rhs;
   17a6e:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
   17a72:	f143 0300 	adc.w	r3, r3, #0
   17a76:	e7e5      	b.n	17a44 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x17c>
      TF_LITE_COMPARISON(int32_t, NotEqual, requires_broadcast);
   17a78:	4631      	mov	r1, r6
   17a7a:	ad1c      	add	r5, sp, #112	; 0x70
   17a7c:	b1e7      	cbz	r7, 17ab8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1f0>
   17a7e:	a810      	add	r0, sp, #64	; 0x40
   17a80:	f00f fe10 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17a84:	4621      	mov	r1, r4
   17a86:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17a88:	6876      	ldr	r6, [r6, #4]
   17a8a:	f00f fe0b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17a8e:	b104      	cbz	r4, 17a92 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1ca>
   17a90:	6864      	ldr	r4, [r4, #4]
   17a92:	4651      	mov	r1, sl
   17a94:	4628      	mov	r0, r5
   17a96:	f00f fe05 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17a9a:	f1ba 0f00 	cmp.w	sl, #0
   17a9e:	d001      	beq.n	17aa4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x1dc>
   17aa0:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
   17aa4:	4632      	mov	r2, r6
   17aa6:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17aaa:	9400      	str	r4, [sp, #0]
   17aac:	ab16      	add	r3, sp, #88	; 0x58
   17aae:	a910      	add	r1, sp, #64	; 0x40
   17ab0:	a822      	add	r0, sp, #136	; 0x88
   17ab2:	f011 fa61 	bl	28f78 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17ab6:	e753      	b.n	17960 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17ab8:	a816      	add	r0, sp, #88	; 0x58
   17aba:	f00f fdf3 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17abe:	4621      	mov	r1, r4
   17ac0:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17ac2:	6876      	ldr	r6, [r6, #4]
   17ac4:	f00f fdee 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17ac8:	b104      	cbz	r4, 17acc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x204>
   17aca:	6864      	ldr	r4, [r4, #4]
   17acc:	4651      	mov	r1, sl
   17ace:	a822      	add	r0, sp, #136	; 0x88
   17ad0:	f00f fde8 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17ad4:	f1ba 0f00 	cmp.w	sl, #0
   17ad8:	d001      	beq.n	17ade <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x216>
   17ada:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17ade:	aa22      	add	r2, sp, #136	; 0x88
   17ae0:	4629      	mov	r1, r5
   17ae2:	a816      	add	r0, sp, #88	; 0x58
   17ae4:	f010 fe21 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   17ae8:	2200      	movs	r2, #0
  const int64_t flatsize =
   17aea:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17aec:	2300      	movs	r3, #0
  const int64_t flatsize =
   17aee:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   17af2:	4542      	cmp	r2, r8
   17af4:	eb73 0109 	sbcs.w	r1, r3, r9
   17af8:	da5f      	bge.n	17bba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
  return lhs != rhs;
   17afa:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
   17afe:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   17b02:	1a09      	subs	r1, r1, r0
   17b04:	bf18      	it	ne
   17b06:	2101      	movne	r1, #1
   17b08:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   17b0c:	3201      	adds	r2, #1
   17b0e:	f143 0300 	adc.w	r3, r3, #0
   17b12:	e7ee      	b.n	17af2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x22a>
      TF_LITE_COMPARISON(int64_t, NotEqual, requires_broadcast);
   17b14:	4631      	mov	r1, r6
   17b16:	ad1c      	add	r5, sp, #112	; 0x70
   17b18:	b1e7      	cbz	r7, 17b54 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x28c>
   17b1a:	a810      	add	r0, sp, #64	; 0x40
   17b1c:	f00f fdc2 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17b20:	4621      	mov	r1, r4
   17b22:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17b24:	6876      	ldr	r6, [r6, #4]
   17b26:	f00f fdbd 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17b2a:	b104      	cbz	r4, 17b2e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x266>
   17b2c:	6864      	ldr	r4, [r4, #4]
   17b2e:	4651      	mov	r1, sl
   17b30:	4628      	mov	r0, r5
   17b32:	f00f fdb7 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17b36:	f1ba 0f00 	cmp.w	sl, #0
   17b3a:	d001      	beq.n	17b40 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x278>
   17b3c:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
   17b40:	4632      	mov	r2, r6
   17b42:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17b46:	9400      	str	r4, [sp, #0]
   17b48:	ab16      	add	r3, sp, #88	; 0x58
   17b4a:	a910      	add	r1, sp, #64	; 0x40
   17b4c:	a822      	add	r0, sp, #136	; 0x88
   17b4e:	f011 fa67 	bl	29020 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17b52:	e705      	b.n	17960 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17b54:	a816      	add	r0, sp, #88	; 0x58
   17b56:	f00f fda5 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17b5a:	4621      	mov	r1, r4
   17b5c:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17b5e:	6876      	ldr	r6, [r6, #4]
   17b60:	f00f fda0 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17b64:	b104      	cbz	r4, 17b68 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2a0>
   17b66:	6864      	ldr	r4, [r4, #4]
   17b68:	4651      	mov	r1, sl
   17b6a:	a822      	add	r0, sp, #136	; 0x88
   17b6c:	f00f fd9a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17b70:	f1ba 0f00 	cmp.w	sl, #0
   17b74:	d001      	beq.n	17b7a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2b2>
   17b76:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17b7a:	4629      	mov	r1, r5
   17b7c:	aa22      	add	r2, sp, #136	; 0x88
   17b7e:	a816      	add	r0, sp, #88	; 0x58
   17b80:	f010 fdd3 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   17b84:	2200      	movs	r2, #0
   17b86:	2300      	movs	r3, #0
  const int64_t flatsize =
   17b88:	17c1      	asrs	r1, r0, #31
   17b8a:	f1a6 0c08 	sub.w	ip, r6, #8
   17b8e:	3c08      	subs	r4, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   17b90:	4282      	cmp	r2, r0
   17b92:	eb73 0601 	sbcs.w	r6, r3, r1
   17b96:	da10      	bge.n	17bba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2f2>
  return lhs != rhs;
   17b98:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
   17b9c:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
   17ba0:	45b9      	cmp	r9, r7
   17ba2:	bf0a      	itet	eq
   17ba4:	45b0      	cmpeq	r8, r6
   17ba6:	2601      	movne	r6, #1
   17ba8:	2600      	moveq	r6, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   17baa:	eb0a 0e02 	add.w	lr, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   17bae:	3201      	adds	r2, #1
  return lhs != rhs;
   17bb0:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
   17bb4:	f143 0300 	adc.w	r3, r3, #0
   17bb8:	e7ea      	b.n	17b90 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x2c8>
   17bba:	a822      	add	r0, sp, #136	; 0x88
   17bbc:	f00f fd2d 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   17bc0:	4628      	mov	r0, r5
   17bc2:	f00f fd2a 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   17bc6:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
   17bc8:	f00f fd27 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   17bcc:	2000      	movs	r0, #0
}
   17bce:	b02b      	add	sp, #172	; 0xac
   17bd0:	ecbd 8b02 	vpop	{d8}
   17bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(NotEqual);
   17bd8:	6933      	ldr	r3, [r6, #16]
   17bda:	68f0      	ldr	r0, [r6, #12]
   17bdc:	f1c3 0800 	rsb	r8, r3, #0
   17be0:	f7f4 fc92 	bl	c508 <__aeabi_f2d>
   17be4:	ab0d      	add	r3, sp, #52	; 0x34
   17be6:	aa0c      	add	r2, sp, #48	; 0x30
   17be8:	6925      	ldr	r5, [r4, #16]
   17bea:	f009 fa19 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   17bee:	68e0      	ldr	r0, [r4, #12]
   17bf0:	f7f4 fc8a 	bl	c508 <__aeabi_f2d>
   17bf4:	ab0f      	add	r3, sp, #60	; 0x3c
   17bf6:	aa0e      	add	r2, sp, #56	; 0x38
   17bf8:	f009 fa12 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   17bfc:	2308      	movs	r3, #8
   17bfe:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   17c02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17c04:	426d      	negs	r5, r5
   17c06:	9324      	str	r3, [sp, #144]	; 0x90
   17c08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17c0a:	4631      	mov	r1, r6
   17c0c:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   17c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17c12:	ad1c      	add	r5, sp, #112	; 0x70
   17c14:	9327      	str	r3, [sp, #156]	; 0x9c
   17c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17c18:	a810      	add	r0, sp, #64	; 0x40
   17c1a:	9328      	str	r3, [sp, #160]	; 0xa0
   17c1c:	b1df      	cbz	r7, 17c56 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x38e>
   17c1e:	f00f fd41 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17c22:	6872      	ldr	r2, [r6, #4]
   17c24:	4621      	mov	r1, r4
   17c26:	a816      	add	r0, sp, #88	; 0x58
   17c28:	9204      	str	r2, [sp, #16]
   17c2a:	f00f fd3b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17c2e:	4651      	mov	r1, sl
   17c30:	4628      	mov	r0, r5
   17c32:	6864      	ldr	r4, [r4, #4]
   17c34:	f00f fd36 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17c38:	9a04      	ldr	r2, [sp, #16]
   17c3a:	f1ba 0f00 	cmp.w	sl, #0
   17c3e:	d001      	beq.n	17c44 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x37c>
   17c40:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
   17c44:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17c48:	9400      	str	r4, [sp, #0]
   17c4a:	ab16      	add	r3, sp, #88	; 0x58
   17c4c:	a910      	add	r1, sp, #64	; 0x40
   17c4e:	a822      	add	r0, sp, #136	; 0x88
   17c50:	f011 fe22 	bl	29898 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17c54:	e684      	b.n	17960 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17c56:	f00f fd25 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17c5a:	6873      	ldr	r3, [r6, #4]
   17c5c:	4621      	mov	r1, r4
   17c5e:	a816      	add	r0, sp, #88	; 0x58
   17c60:	9304      	str	r3, [sp, #16]
   17c62:	f00f fd1f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17c66:	6863      	ldr	r3, [r4, #4]
   17c68:	4651      	mov	r1, sl
   17c6a:	4628      	mov	r0, r5
   17c6c:	9305      	str	r3, [sp, #20]
   17c6e:	f00f fd19 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17c72:	f1ba 0f00 	cmp.w	sl, #0
   17c76:	d001      	beq.n	17c7c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x3b4>
   17c78:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   17c7c:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   17c80:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   17c82:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17c84:	aa1c      	add	r2, sp, #112	; 0x70
   17c86:	a916      	add	r1, sp, #88	; 0x58
   17c88:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   17c8a:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   17c8e:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   17c92:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   17c96:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17c98:	f010 fd47 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   17c9c:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17c9e:	f04f 0800 	mov.w	r8, #0
   17ca2:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   17ca6:	17c3      	asrs	r3, r0, #31
   17ca8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   17cac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   17cb0:	4590      	cmp	r8, r2
   17cb2:	eb79 0303 	sbcs.w	r3, r9, r3
   17cb6:	f280 80ba 	bge.w	17e2e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x566>
    const int32 input2_val = input2_offset + input2_data[i];
   17cba:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   17cbc:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   17cbe:	f812 5008 	ldrb.w	r5, [r2, r8]
   17cc2:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17cc4:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   17cc8:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   17cca:	9a04      	ldr	r2, [sp, #16]
   17ccc:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   17cd0:	f812 0008 	ldrb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17cd4:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   17cd6:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17cd8:	40b0      	lsls	r0, r6
   17cda:	f7fe ffb7 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17cde:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17ce0:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17ce2:	4622      	mov	r2, r4
   17ce4:	4639      	mov	r1, r7
   17ce6:	4628      	mov	r0, r5
   17ce8:	f7fe ffb0 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs != rhs;
   17cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17cee:	1a18      	subs	r0, r3, r0
   17cf0:	bf18      	it	ne
   17cf2:	2001      	movne	r0, #1
   17cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   17cf6:	f118 0801 	adds.w	r8, r8, #1
  return lhs != rhs;
   17cfa:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   17cfe:	f149 0900 	adc.w	r9, r9, #0
   17d02:	e7d3      	b.n	17cac <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x3e4>
   17d04:	6933      	ldr	r3, [r6, #16]
   17d06:	68f0      	ldr	r0, [r6, #12]
   17d08:	f1c3 0800 	rsb	r8, r3, #0
   17d0c:	f7f4 fbfc 	bl	c508 <__aeabi_f2d>
   17d10:	ab0d      	add	r3, sp, #52	; 0x34
   17d12:	aa0c      	add	r2, sp, #48	; 0x30
   17d14:	6925      	ldr	r5, [r4, #16]
   17d16:	f009 f983 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   17d1a:	68e0      	ldr	r0, [r4, #12]
   17d1c:	f7f4 fbf4 	bl	c508 <__aeabi_f2d>
   17d20:	ab0f      	add	r3, sp, #60	; 0x3c
   17d22:	aa0e      	add	r2, sp, #56	; 0x38
   17d24:	f009 f97c 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   17d28:	2308      	movs	r3, #8
   17d2a:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   17d2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17d30:	426d      	negs	r5, r5
   17d32:	9324      	str	r3, [sp, #144]	; 0x90
   17d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17d36:	4631      	mov	r1, r6
   17d38:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   17d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17d3e:	ad1c      	add	r5, sp, #112	; 0x70
   17d40:	9327      	str	r3, [sp, #156]	; 0x9c
   17d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17d44:	a810      	add	r0, sp, #64	; 0x40
   17d46:	9328      	str	r3, [sp, #160]	; 0xa0
   17d48:	b1df      	cbz	r7, 17d82 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x4ba>
   17d4a:	f00f fcab 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17d4e:	6872      	ldr	r2, [r6, #4]
   17d50:	4621      	mov	r1, r4
   17d52:	a816      	add	r0, sp, #88	; 0x58
   17d54:	9204      	str	r2, [sp, #16]
   17d56:	f00f fca5 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17d5a:	4651      	mov	r1, sl
   17d5c:	4628      	mov	r0, r5
   17d5e:	6864      	ldr	r4, [r4, #4]
   17d60:	f00f fca0 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17d64:	9a04      	ldr	r2, [sp, #16]
   17d66:	f1ba 0f00 	cmp.w	sl, #0
   17d6a:	d001      	beq.n	17d70 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x4a8>
   17d6c:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(NotEqual);
   17d70:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17d74:	9400      	str	r4, [sp, #0]
   17d76:	ab16      	add	r3, sp, #88	; 0x58
   17d78:	a910      	add	r1, sp, #64	; 0x40
   17d7a:	a822      	add	r0, sp, #136	; 0x88
   17d7c:	f011 fe17 	bl	299ae <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17d80:	e5ee      	b.n	17960 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17d82:	f00f fc8f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17d86:	6873      	ldr	r3, [r6, #4]
   17d88:	4621      	mov	r1, r4
   17d8a:	a816      	add	r0, sp, #88	; 0x58
   17d8c:	9304      	str	r3, [sp, #16]
   17d8e:	f00f fc89 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17d92:	6863      	ldr	r3, [r4, #4]
   17d94:	4651      	mov	r1, sl
   17d96:	4628      	mov	r0, r5
   17d98:	9305      	str	r3, [sp, #20]
   17d9a:	f00f fc83 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17d9e:	f1ba 0f00 	cmp.w	sl, #0
   17da2:	d001      	beq.n	17da8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x4e0>
   17da4:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   17da8:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   17dac:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   17dae:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17db0:	aa1c      	add	r2, sp, #112	; 0x70
   17db2:	a916      	add	r1, sp, #88	; 0x58
   17db4:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   17db6:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   17dba:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   17dbe:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   17dc2:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17dc4:	f010 fcb1 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   17dc8:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17dca:	f04f 0800 	mov.w	r8, #0
   17dce:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   17dd2:	17c3      	asrs	r3, r0, #31
   17dd4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   17dd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   17ddc:	4590      	cmp	r8, r2
   17dde:	eb79 0303 	sbcs.w	r3, r9, r3
   17de2:	da24      	bge.n	17e2e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x566>
    const int32 input2_val = input2_offset + input2_data[i];
   17de4:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   17de6:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   17de8:	f912 5008 	ldrsb.w	r5, [r2, r8]
   17dec:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17dee:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   17df2:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   17df4:	9a04      	ldr	r2, [sp, #16]
   17df6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   17dfa:	f912 0008 	ldrsb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17dfe:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   17e00:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17e02:	40b0      	lsls	r0, r6
   17e04:	f7fe ff22 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   17e08:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17e0a:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   17e0c:	4622      	mov	r2, r4
   17e0e:	4639      	mov	r1, r7
   17e10:	4628      	mov	r0, r5
   17e12:	f7fe ff1b 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs != rhs;
   17e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17e18:	1a18      	subs	r0, r3, r0
   17e1a:	bf18      	it	ne
   17e1c:	2001      	movne	r0, #1
   17e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   17e20:	f118 0801 	adds.w	r8, r8, #1
  return lhs != rhs;
   17e24:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   17e28:	f149 0900 	adc.w	r9, r9, #0
   17e2c:	e7d4      	b.n	17dd8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x510>
   17e2e:	a81c      	add	r0, sp, #112	; 0x70
   17e30:	e597      	b.n	17962 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   17e32:	696c      	ldr	r4, [r5, #20]
   17e34:	f7f4 ff46 	bl	ccc4 <TfLiteTypeGetName>
   17e38:	f818 3009 	ldrb.w	r3, [r8, r9]
   17e3c:	4602      	mov	r2, r0
   17e3e:	4902      	ldr	r1, [pc, #8]	; (17e48 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x580>)
   17e40:	4628      	mov	r0, r5
   17e42:	47a0      	blx	r4
      return kTfLiteError;
   17e44:	2001      	movs	r0, #1
   17e46:	e6c2      	b.n	17bce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_112NotEqualEvalEP13TfLiteContextP10TfLiteNode+0x306>
   17e48:	00034a40 	.word	0x00034a40

00017e4c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {
   17e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e50:	ed2d 8b02 	vpush	{d8}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   17e54:	680b      	ldr	r3, [r1, #0]
   17e56:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   17e5a:	685e      	ldr	r6, [r3, #4]
   17e5c:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   17e5e:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   17e60:	ea4f 1986 	mov.w	r9, r6, lsl #6
  return &context->tensors[node->outputs->data[index]];
   17e64:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   17e66:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   17e6a:	eb08 1484 	add.w	r4, r8, r4, lsl #6
TfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {
   17e6e:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   17e70:	4621      	mov	r1, r4
   17e72:	4630      	mov	r0, r6
TfLiteStatus GreaterEval(TfLiteContext* context, TfLiteNode* node) {
   17e74:	b0ab      	sub	sp, #172	; 0xac
  return &context->tensors[node->outputs->data[index]];
   17e76:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   17e7a:	f018 f976 	bl	3016a <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   17e7e:	f080 0001 	eor.w	r0, r0, #1
   17e82:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   17e84:	f818 0009 	ldrb.w	r0, [r8, r9]
   17e88:	1e43      	subs	r3, r0, #1
   17e8a:	2b08      	cmp	r3, #8
   17e8c:	f200 824b 	bhi.w	18326 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4da>
   17e90:	e8df f013 	tbh	[pc, r3, lsl #1]
   17e94:	00680009 	.word	0x00680009
   17e98:	00b7011a 	.word	0x00b7011a
   17e9c:	02490249 	.word	0x02490249
   17ea0:	02490249 	.word	0x02490249
   17ea4:	01b1      	.short	0x01b1
      TF_LITE_COMPARISON(float, Greater, requires_broadcast);
   17ea6:	4631      	mov	r1, r6
   17ea8:	ad1c      	add	r5, sp, #112	; 0x70
   17eaa:	b31f      	cbz	r7, 17ef4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xa8>
   17eac:	a810      	add	r0, sp, #64	; 0x40
   17eae:	f00f fbf9 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17eb2:	4621      	mov	r1, r4
   17eb4:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17eb6:	6876      	ldr	r6, [r6, #4]
   17eb8:	f00f fbf4 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17ebc:	b104      	cbz	r4, 17ec0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x74>
   17ebe:	6864      	ldr	r4, [r4, #4]
   17ec0:	4651      	mov	r1, sl
   17ec2:	4628      	mov	r0, r5
   17ec4:	f00f fbee 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17ec8:	f1ba 0f00 	cmp.w	sl, #0
   17ecc:	d001      	beq.n	17ed2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x86>
   17ece:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
   17ed2:	4632      	mov	r2, r6
   17ed4:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17ed8:	9400      	str	r4, [sp, #0]
   17eda:	ab16      	add	r3, sp, #88	; 0x58
   17edc:	a910      	add	r1, sp, #64	; 0x40
   17ede:	a822      	add	r0, sp, #136	; 0x88
   17ee0:	f010 fd84 	bl	289ec <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(Greater);
   17ee4:	4628      	mov	r0, r5
   17ee6:	f00f fb98 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   17eea:	a816      	add	r0, sp, #88	; 0x58
   17eec:	f00f fb95 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   17ef0:	a810      	add	r0, sp, #64	; 0x40
   17ef2:	e0e1      	b.n	180b8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, Greater, requires_broadcast);
   17ef4:	a816      	add	r0, sp, #88	; 0x58
   17ef6:	f00f fbd5 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17efa:	4621      	mov	r1, r4
   17efc:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17efe:	f8d6 8004 	ldr.w	r8, [r6, #4]
   17f02:	f00f fbcf 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17f06:	b104      	cbz	r4, 17f0a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xbe>
   17f08:	6864      	ldr	r4, [r4, #4]
   17f0a:	4651      	mov	r1, sl
   17f0c:	a822      	add	r0, sp, #136	; 0x88
   17f0e:	f00f fbc9 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17f12:	f1ba 0f00 	cmp.w	sl, #0
   17f16:	d001      	beq.n	17f1c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xd0>
   17f18:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17f1c:	4629      	mov	r1, r5
   17f1e:	aa22      	add	r2, sp, #136	; 0x88
   17f20:	a816      	add	r0, sp, #88	; 0x58
   17f22:	f010 fc02 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   17f26:	4641      	mov	r1, r8
  const int64_t flatsize =
   17f28:	4606      	mov	r6, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17f2a:	2200      	movs	r2, #0
   17f2c:	2300      	movs	r3, #0
  const int64_t flatsize =
   17f2e:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   17f30:	42b2      	cmp	r2, r6
   17f32:	eb73 0007 	sbcs.w	r0, r3, r7
   17f36:	f280 80b8 	bge.w	180aa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
   17f3a:	ecb1 7a01 	vldmia	r1!, {s14}
   17f3e:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs > rhs;
   17f42:	eeb4 7ae7 	vcmpe.f32	s14, s15
   17f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17f4a:	bfcc      	ite	gt
   17f4c:	f04f 0c01 	movgt.w	ip, #1
   17f50:	f04f 0c00 	movle.w	ip, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   17f54:	eb0a 0002 	add.w	r0, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   17f58:	3201      	adds	r2, #1
  return lhs > rhs;
   17f5a:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
   17f5e:	f143 0300 	adc.w	r3, r3, #0
   17f62:	e7e5      	b.n	17f30 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, Greater, requires_broadcast);
   17f64:	4631      	mov	r1, r6
   17f66:	ad1c      	add	r5, sp, #112	; 0x70
   17f68:	b1e7      	cbz	r7, 17fa4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x158>
   17f6a:	a810      	add	r0, sp, #64	; 0x40
   17f6c:	f00f fb9a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17f70:	4621      	mov	r1, r4
   17f72:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17f74:	6876      	ldr	r6, [r6, #4]
   17f76:	f00f fb95 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17f7a:	b104      	cbz	r4, 17f7e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x132>
   17f7c:	6864      	ldr	r4, [r4, #4]
   17f7e:	4651      	mov	r1, sl
   17f80:	4628      	mov	r0, r5
   17f82:	f00f fb8f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17f86:	f1ba 0f00 	cmp.w	sl, #0
   17f8a:	d001      	beq.n	17f90 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x144>
   17f8c:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
   17f90:	4632      	mov	r2, r6
   17f92:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   17f96:	9400      	str	r4, [sp, #0]
   17f98:	ab16      	add	r3, sp, #88	; 0x58
   17f9a:	a910      	add	r1, sp, #64	; 0x40
   17f9c:	a822      	add	r0, sp, #136	; 0x88
   17f9e:	f011 f89b 	bl	290d8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   17fa2:	e79f      	b.n	17ee4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
   17fa4:	a816      	add	r0, sp, #88	; 0x58
   17fa6:	f00f fb7d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17faa:	4621      	mov	r1, r4
   17fac:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   17fae:	6876      	ldr	r6, [r6, #4]
   17fb0:	f00f fb78 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   17fb4:	b104      	cbz	r4, 17fb8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x16c>
   17fb6:	6864      	ldr	r4, [r4, #4]
   17fb8:	4651      	mov	r1, sl
   17fba:	a822      	add	r0, sp, #136	; 0x88
   17fbc:	f00f fb72 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   17fc0:	f1ba 0f00 	cmp.w	sl, #0
   17fc4:	d001      	beq.n	17fca <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x17e>
   17fc6:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   17fca:	aa22      	add	r2, sp, #136	; 0x88
   17fcc:	4629      	mov	r1, r5
   17fce:	a816      	add	r0, sp, #88	; 0x58
   17fd0:	f010 fbab 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   17fd4:	2200      	movs	r2, #0
  const int64_t flatsize =
   17fd6:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   17fd8:	2300      	movs	r3, #0
  const int64_t flatsize =
   17fda:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   17fde:	4542      	cmp	r2, r8
   17fe0:	eb73 0109 	sbcs.w	r1, r3, r9
   17fe4:	da61      	bge.n	180aa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs > rhs;
   17fe6:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
   17fea:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   17fee:	4281      	cmp	r1, r0
   17ff0:	bfd4      	ite	le
   17ff2:	2100      	movle	r1, #0
   17ff4:	2101      	movgt	r1, #1
   17ff6:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   17ffa:	3201      	adds	r2, #1
   17ffc:	f143 0300 	adc.w	r3, r3, #0
   18000:	e7ed      	b.n	17fde <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, Greater, requires_broadcast);
   18002:	4631      	mov	r1, r6
   18004:	ad1c      	add	r5, sp, #112	; 0x70
   18006:	b1e7      	cbz	r7, 18042 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
   18008:	a810      	add	r0, sp, #64	; 0x40
   1800a:	f00f fb4b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1800e:	4621      	mov	r1, r4
   18010:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18012:	6876      	ldr	r6, [r6, #4]
   18014:	f00f fb46 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18018:	b104      	cbz	r4, 1801c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
   1801a:	6864      	ldr	r4, [r4, #4]
   1801c:	4651      	mov	r1, sl
   1801e:	4628      	mov	r0, r5
   18020:	f00f fb40 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18024:	f1ba 0f00 	cmp.w	sl, #0
   18028:	d001      	beq.n	1802e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
   1802a:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
   1802e:	4632      	mov	r2, r6
   18030:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18034:	9400      	str	r4, [sp, #0]
   18036:	ab16      	add	r3, sp, #88	; 0x58
   18038:	a910      	add	r1, sp, #64	; 0x40
   1803a:	a822      	add	r0, sp, #136	; 0x88
   1803c:	f011 f8a1 	bl	29182 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18040:	e750      	b.n	17ee4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18042:	a816      	add	r0, sp, #88	; 0x58
   18044:	f00f fb2e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18048:	4621      	mov	r1, r4
   1804a:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1804c:	6876      	ldr	r6, [r6, #4]
   1804e:	f00f fb29 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18052:	b104      	cbz	r4, 18056 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x20a>
   18054:	6864      	ldr	r4, [r4, #4]
   18056:	4651      	mov	r1, sl
   18058:	a822      	add	r0, sp, #136	; 0x88
   1805a:	f00f fb23 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1805e:	f1ba 0f00 	cmp.w	sl, #0
   18062:	d001      	beq.n	18068 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x21c>
   18064:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18068:	4629      	mov	r1, r5
   1806a:	aa22      	add	r2, sp, #136	; 0x88
   1806c:	a816      	add	r0, sp, #88	; 0x58
   1806e:	f010 fb5c 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   18072:	2200      	movs	r2, #0
   18074:	2300      	movs	r3, #0
  const int64_t flatsize =
   18076:	17c1      	asrs	r1, r0, #31
   18078:	f1a6 0c08 	sub.w	ip, r6, #8
   1807c:	3c08      	subs	r4, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   1807e:	4282      	cmp	r2, r0
   18080:	eb73 0601 	sbcs.w	r6, r3, r1
   18084:	da11      	bge.n	180aa <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs > rhs;
   18086:	e9fc 6702 	ldrd	r6, r7, [ip, #8]!
   1808a:	e9f4 8902 	ldrd	r8, r9, [r4, #8]!
   1808e:	45b0      	cmp	r8, r6
   18090:	eb79 0607 	sbcs.w	r6, r9, r7
   18094:	bfb4      	ite	lt
   18096:	2601      	movlt	r6, #1
   18098:	2600      	movge	r6, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   1809a:	eb0a 0e02 	add.w	lr, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   1809e:	3201      	adds	r2, #1
  return lhs > rhs;
   180a0:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
   180a4:	f143 0300 	adc.w	r3, r3, #0
   180a8:	e7e9      	b.n	1807e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x232>
   180aa:	a822      	add	r0, sp, #136	; 0x88
   180ac:	f00f fab5 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   180b0:	4628      	mov	r0, r5
   180b2:	f00f fab2 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   180b6:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(Greater);
   180b8:	f00f faaf 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   180bc:	2000      	movs	r0, #0
}
   180be:	b02b      	add	sp, #172	; 0xac
   180c0:	ecbd 8b02 	vpop	{d8}
   180c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(Greater);
   180c8:	6933      	ldr	r3, [r6, #16]
   180ca:	68f0      	ldr	r0, [r6, #12]
   180cc:	f1c3 0800 	rsb	r8, r3, #0
   180d0:	f7f4 fa1a 	bl	c508 <__aeabi_f2d>
   180d4:	ab0d      	add	r3, sp, #52	; 0x34
   180d6:	aa0c      	add	r2, sp, #48	; 0x30
   180d8:	6925      	ldr	r5, [r4, #16]
   180da:	f008 ffa1 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   180de:	68e0      	ldr	r0, [r4, #12]
   180e0:	f7f4 fa12 	bl	c508 <__aeabi_f2d>
   180e4:	ab0f      	add	r3, sp, #60	; 0x3c
   180e6:	aa0e      	add	r2, sp, #56	; 0x38
   180e8:	f008 ff9a 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   180ec:	2308      	movs	r3, #8
   180ee:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   180f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   180f4:	426d      	negs	r5, r5
   180f6:	9324      	str	r3, [sp, #144]	; 0x90
   180f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   180fa:	4631      	mov	r1, r6
   180fc:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   18100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18102:	ad1c      	add	r5, sp, #112	; 0x70
   18104:	9327      	str	r3, [sp, #156]	; 0x9c
   18106:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18108:	a810      	add	r0, sp, #64	; 0x40
   1810a:	9328      	str	r3, [sp, #160]	; 0xa0
   1810c:	b1df      	cbz	r7, 18146 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
   1810e:	f00f fac9 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18112:	6872      	ldr	r2, [r6, #4]
   18114:	4621      	mov	r1, r4
   18116:	a816      	add	r0, sp, #88	; 0x58
   18118:	9204      	str	r2, [sp, #16]
   1811a:	f00f fac3 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1811e:	4651      	mov	r1, sl
   18120:	4628      	mov	r0, r5
   18122:	6864      	ldr	r4, [r4, #4]
   18124:	f00f fabe 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18128:	9a04      	ldr	r2, [sp, #16]
   1812a:	f1ba 0f00 	cmp.w	sl, #0
   1812e:	d001      	beq.n	18134 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
   18130:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
   18134:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18138:	9400      	str	r4, [sp, #0]
   1813a:	ab16      	add	r3, sp, #88	; 0x58
   1813c:	a910      	add	r1, sp, #64	; 0x40
   1813e:	a822      	add	r0, sp, #136	; 0x88
   18140:	f011 fcc0 	bl	29ac4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18144:	e6ce      	b.n	17ee4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18146:	f00f faad 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1814a:	6873      	ldr	r3, [r6, #4]
   1814c:	4621      	mov	r1, r4
   1814e:	a816      	add	r0, sp, #88	; 0x58
   18150:	9304      	str	r3, [sp, #16]
   18152:	f00f faa7 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18156:	6863      	ldr	r3, [r4, #4]
   18158:	4651      	mov	r1, sl
   1815a:	4628      	mov	r0, r5
   1815c:	9305      	str	r3, [sp, #20]
   1815e:	f00f faa1 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18162:	f1ba 0f00 	cmp.w	sl, #0
   18166:	d001      	beq.n	1816c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x320>
   18168:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   1816c:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   18170:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   18172:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18174:	aa1c      	add	r2, sp, #112	; 0x70
   18176:	a916      	add	r1, sp, #88	; 0x58
   18178:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   1817a:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   1817e:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   18182:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   18186:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18188:	f010 facf 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   1818c:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   1818e:	f04f 0800 	mov.w	r8, #0
   18192:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   18196:	17c3      	asrs	r3, r0, #31
   18198:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   1819c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   181a0:	4590      	cmp	r8, r2
   181a2:	eb79 0303 	sbcs.w	r3, r9, r3
   181a6:	f280 80bc 	bge.w	18322 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   181aa:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   181ac:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   181ae:	f812 5008 	ldrb.w	r5, [r2, r8]
   181b2:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   181b4:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   181b8:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   181ba:	9a04      	ldr	r2, [sp, #16]
   181bc:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   181c0:	f812 0008 	ldrb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   181c4:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   181c6:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   181c8:	40b0      	lsls	r0, r6
   181ca:	f7fe fd3f 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   181ce:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   181d0:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   181d2:	4622      	mov	r2, r4
   181d4:	4639      	mov	r1, r7
   181d6:	4628      	mov	r0, r5
   181d8:	f7fe fd38 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs > rhs;
   181dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   181de:	4283      	cmp	r3, r0
   181e0:	bfd4      	ite	le
   181e2:	2000      	movle	r0, #0
   181e4:	2001      	movgt	r0, #1
   181e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   181e8:	f118 0801 	adds.w	r8, r8, #1
  return lhs > rhs;
   181ec:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   181f0:	f149 0900 	adc.w	r9, r9, #0
   181f4:	e7d2      	b.n	1819c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x350>
   181f6:	6933      	ldr	r3, [r6, #16]
   181f8:	68f0      	ldr	r0, [r6, #12]
   181fa:	f1c3 0800 	rsb	r8, r3, #0
   181fe:	f7f4 f983 	bl	c508 <__aeabi_f2d>
   18202:	ab0d      	add	r3, sp, #52	; 0x34
   18204:	aa0c      	add	r2, sp, #48	; 0x30
   18206:	6925      	ldr	r5, [r4, #16]
   18208:	f008 ff0a 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   1820c:	68e0      	ldr	r0, [r4, #12]
   1820e:	f7f4 f97b 	bl	c508 <__aeabi_f2d>
   18212:	ab0f      	add	r3, sp, #60	; 0x3c
   18214:	aa0e      	add	r2, sp, #56	; 0x38
   18216:	f008 ff03 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   1821a:	2308      	movs	r3, #8
   1821c:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   18220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18222:	426d      	negs	r5, r5
   18224:	9324      	str	r3, [sp, #144]	; 0x90
   18226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18228:	4631      	mov	r1, r6
   1822a:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   1822e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18230:	ad1c      	add	r5, sp, #112	; 0x70
   18232:	9327      	str	r3, [sp, #156]	; 0x9c
   18234:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18236:	a810      	add	r0, sp, #64	; 0x40
   18238:	9328      	str	r3, [sp, #160]	; 0xa0
   1823a:	b1df      	cbz	r7, 18274 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x428>
   1823c:	f00f fa32 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18240:	6872      	ldr	r2, [r6, #4]
   18242:	4621      	mov	r1, r4
   18244:	a816      	add	r0, sp, #88	; 0x58
   18246:	9204      	str	r2, [sp, #16]
   18248:	f00f fa2c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1824c:	4651      	mov	r1, sl
   1824e:	4628      	mov	r0, r5
   18250:	6864      	ldr	r4, [r4, #4]
   18252:	f00f fa27 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18256:	9a04      	ldr	r2, [sp, #16]
   18258:	f1ba 0f00 	cmp.w	sl, #0
   1825c:	d001      	beq.n	18262 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x416>
   1825e:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Greater);
   18262:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18266:	9400      	str	r4, [sp, #0]
   18268:	ab16      	add	r3, sp, #88	; 0x58
   1826a:	a910      	add	r1, sp, #64	; 0x40
   1826c:	a822      	add	r0, sp, #136	; 0x88
   1826e:	f011 fcb5 	bl	29bdc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18272:	e637      	b.n	17ee4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18274:	f00f fa16 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18278:	6873      	ldr	r3, [r6, #4]
   1827a:	4621      	mov	r1, r4
   1827c:	a816      	add	r0, sp, #88	; 0x58
   1827e:	9304      	str	r3, [sp, #16]
   18280:	f00f fa10 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18284:	6863      	ldr	r3, [r4, #4]
   18286:	4651      	mov	r1, sl
   18288:	4628      	mov	r0, r5
   1828a:	9305      	str	r3, [sp, #20]
   1828c:	f00f fa0a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18290:	f1ba 0f00 	cmp.w	sl, #0
   18294:	d001      	beq.n	1829a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x44e>
   18296:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   1829a:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   1829e:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   182a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   182a2:	aa1c      	add	r2, sp, #112	; 0x70
   182a4:	a916      	add	r1, sp, #88	; 0x58
   182a6:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   182a8:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   182ac:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   182b0:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   182b4:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   182b6:	f010 fa38 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   182ba:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   182bc:	f04f 0800 	mov.w	r8, #0
   182c0:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   182c4:	17c3      	asrs	r3, r0, #31
   182c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   182ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   182ce:	4590      	cmp	r8, r2
   182d0:	eb79 0303 	sbcs.w	r3, r9, r3
   182d4:	da25      	bge.n	18322 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   182d6:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   182d8:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   182da:	f912 5008 	ldrsb.w	r5, [r2, r8]
   182de:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   182e0:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   182e4:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   182e6:	9a04      	ldr	r2, [sp, #16]
   182e8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   182ec:	f912 0008 	ldrsb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   182f0:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   182f2:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   182f4:	40b0      	lsls	r0, r6
   182f6:	f7fe fca9 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   182fa:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   182fc:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   182fe:	4622      	mov	r2, r4
   18300:	4639      	mov	r1, r7
   18302:	4628      	mov	r0, r5
   18304:	f7fe fca2 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs > rhs;
   18308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1830a:	4283      	cmp	r3, r0
   1830c:	bfd4      	ite	le
   1830e:	2000      	movle	r0, #0
   18310:	2001      	movgt	r0, #1
   18312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   18314:	f118 0801 	adds.w	r8, r8, #1
  return lhs > rhs;
   18318:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   1831c:	f149 0900 	adc.w	r9, r9, #0
   18320:	e7d3      	b.n	182ca <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x47e>
   18322:	a81c      	add	r0, sp, #112	; 0x70
   18324:	e5df      	b.n	17ee6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   18326:	696c      	ldr	r4, [r5, #20]
   18328:	f7f4 fccc 	bl	ccc4 <TfLiteTypeGetName>
   1832c:	f818 3009 	ldrb.w	r3, [r8, r9]
   18330:	4602      	mov	r2, r0
   18332:	4902      	ldr	r1, [pc, #8]	; (1833c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x4f0>)
   18334:	4628      	mov	r0, r5
   18336:	47a0      	blx	r4
      return kTfLiteError;
   18338:	2001      	movs	r0, #1
   1833a:	e6c0      	b.n	180be <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_111GreaterEvalEP13TfLiteContextP10TfLiteNode+0x272>
   1833c:	00034a40 	.word	0x00034a40

00018340 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {
   18340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18344:	ed2d 8b02 	vpush	{d8}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   18348:	680b      	ldr	r3, [r1, #0]
   1834a:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1834e:	685e      	ldr	r6, [r3, #4]
   18350:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   18352:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   18354:	ea4f 1986 	mov.w	r9, r6, lsl #6
  return &context->tensors[node->outputs->data[index]];
   18358:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   1835a:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   1835e:	eb08 1484 	add.w	r4, r8, r4, lsl #6
TfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {
   18362:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   18364:	4621      	mov	r1, r4
   18366:	4630      	mov	r0, r6
TfLiteStatus GreaterEqualEval(TfLiteContext* context, TfLiteNode* node) {
   18368:	b0ab      	sub	sp, #172	; 0xac
  return &context->tensors[node->outputs->data[index]];
   1836a:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   1836e:	f017 fefc 	bl	3016a <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   18372:	f080 0001 	eor.w	r0, r0, #1
   18376:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   18378:	f818 0009 	ldrb.w	r0, [r8, r9]
   1837c:	1e43      	subs	r3, r0, #1
   1837e:	2b08      	cmp	r3, #8
   18380:	f200 824b 	bhi.w	1881a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4da>
   18384:	e8df f013 	tbh	[pc, r3, lsl #1]
   18388:	00680009 	.word	0x00680009
   1838c:	00b7011a 	.word	0x00b7011a
   18390:	02490249 	.word	0x02490249
   18394:	02490249 	.word	0x02490249
   18398:	01b1      	.short	0x01b1
      TF_LITE_COMPARISON(float, GreaterEqual, requires_broadcast);
   1839a:	4631      	mov	r1, r6
   1839c:	ad1c      	add	r5, sp, #112	; 0x70
   1839e:	b31f      	cbz	r7, 183e8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
   183a0:	a810      	add	r0, sp, #64	; 0x40
   183a2:	f00f f97f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   183a6:	4621      	mov	r1, r4
   183a8:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   183aa:	6876      	ldr	r6, [r6, #4]
   183ac:	f00f f97a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   183b0:	b104      	cbz	r4, 183b4 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
   183b2:	6864      	ldr	r4, [r4, #4]
   183b4:	4651      	mov	r1, sl
   183b6:	4628      	mov	r0, r5
   183b8:	f00f f974 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   183bc:	f1ba 0f00 	cmp.w	sl, #0
   183c0:	d001      	beq.n	183c6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
   183c2:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
   183c6:	4632      	mov	r2, r6
   183c8:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   183cc:	9400      	str	r4, [sp, #0]
   183ce:	ab16      	add	r3, sp, #88	; 0x58
   183d0:	a910      	add	r1, sp, #64	; 0x40
   183d2:	a822      	add	r0, sp, #136	; 0x88
   183d4:	f010 fb66 	bl	28aa4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
   183d8:	4628      	mov	r0, r5
   183da:	f00f f91e 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   183de:	a816      	add	r0, sp, #88	; 0x58
   183e0:	f00f f91b 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   183e4:	a810      	add	r0, sp, #64	; 0x40
   183e6:	e0e1      	b.n	185ac <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, GreaterEqual, requires_broadcast);
   183e8:	a816      	add	r0, sp, #88	; 0x58
   183ea:	f00f f95b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   183ee:	4621      	mov	r1, r4
   183f0:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   183f2:	f8d6 8004 	ldr.w	r8, [r6, #4]
   183f6:	f00f f955 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   183fa:	b104      	cbz	r4, 183fe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xbe>
   183fc:	6864      	ldr	r4, [r4, #4]
   183fe:	4651      	mov	r1, sl
   18400:	a822      	add	r0, sp, #136	; 0x88
   18402:	f00f f94f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18406:	f1ba 0f00 	cmp.w	sl, #0
   1840a:	d001      	beq.n	18410 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xd0>
   1840c:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18410:	4629      	mov	r1, r5
   18412:	aa22      	add	r2, sp, #136	; 0x88
   18414:	a816      	add	r0, sp, #88	; 0x58
   18416:	f010 f988 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   1841a:	4641      	mov	r1, r8
  const int64_t flatsize =
   1841c:	4606      	mov	r6, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   1841e:	2200      	movs	r2, #0
   18420:	2300      	movs	r3, #0
  const int64_t flatsize =
   18422:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   18424:	42b2      	cmp	r2, r6
   18426:	eb73 0007 	sbcs.w	r0, r3, r7
   1842a:	f280 80b8 	bge.w	1859e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
   1842e:	ecb1 7a01 	vldmia	r1!, {s14}
   18432:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs >= rhs;
   18436:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1843a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1843e:	bfac      	ite	ge
   18440:	f04f 0c01 	movge.w	ip, #1
   18444:	f04f 0c00 	movlt.w	ip, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   18448:	eb0a 0002 	add.w	r0, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   1844c:	3201      	adds	r2, #1
  return lhs >= rhs;
   1844e:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
   18452:	f143 0300 	adc.w	r3, r3, #0
   18456:	e7e5      	b.n	18424 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, GreaterEqual, requires_broadcast);
   18458:	4631      	mov	r1, r6
   1845a:	ad1c      	add	r5, sp, #112	; 0x70
   1845c:	b1e7      	cbz	r7, 18498 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x158>
   1845e:	a810      	add	r0, sp, #64	; 0x40
   18460:	f00f f920 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18464:	4621      	mov	r1, r4
   18466:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18468:	6876      	ldr	r6, [r6, #4]
   1846a:	f00f f91b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1846e:	b104      	cbz	r4, 18472 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x132>
   18470:	6864      	ldr	r4, [r4, #4]
   18472:	4651      	mov	r1, sl
   18474:	4628      	mov	r0, r5
   18476:	f00f f915 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1847a:	f1ba 0f00 	cmp.w	sl, #0
   1847e:	d001      	beq.n	18484 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x144>
   18480:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
   18484:	4632      	mov	r2, r6
   18486:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   1848a:	9400      	str	r4, [sp, #0]
   1848c:	ab16      	add	r3, sp, #88	; 0x58
   1848e:	a910      	add	r1, sp, #64	; 0x40
   18490:	a822      	add	r0, sp, #136	; 0x88
   18492:	f010 fed3 	bl	2923c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18496:	e79f      	b.n	183d8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18498:	a816      	add	r0, sp, #88	; 0x58
   1849a:	f00f f903 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1849e:	4621      	mov	r1, r4
   184a0:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   184a2:	6876      	ldr	r6, [r6, #4]
   184a4:	f00f f8fe 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   184a8:	b104      	cbz	r4, 184ac <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x16c>
   184aa:	6864      	ldr	r4, [r4, #4]
   184ac:	4651      	mov	r1, sl
   184ae:	a822      	add	r0, sp, #136	; 0x88
   184b0:	f00f f8f8 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   184b4:	f1ba 0f00 	cmp.w	sl, #0
   184b8:	d001      	beq.n	184be <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x17e>
   184ba:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   184be:	aa22      	add	r2, sp, #136	; 0x88
   184c0:	4629      	mov	r1, r5
   184c2:	a816      	add	r0, sp, #88	; 0x58
   184c4:	f010 f931 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   184c8:	2200      	movs	r2, #0
  const int64_t flatsize =
   184ca:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   184cc:	2300      	movs	r3, #0
  const int64_t flatsize =
   184ce:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   184d2:	4542      	cmp	r2, r8
   184d4:	eb73 0109 	sbcs.w	r1, r3, r9
   184d8:	da61      	bge.n	1859e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs >= rhs;
   184da:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
   184de:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   184e2:	4281      	cmp	r1, r0
   184e4:	bfb4      	ite	lt
   184e6:	2100      	movlt	r1, #0
   184e8:	2101      	movge	r1, #1
   184ea:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   184ee:	3201      	adds	r2, #1
   184f0:	f143 0300 	adc.w	r3, r3, #0
   184f4:	e7ed      	b.n	184d2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, GreaterEqual, requires_broadcast);
   184f6:	4631      	mov	r1, r6
   184f8:	ad1c      	add	r5, sp, #112	; 0x70
   184fa:	b1e7      	cbz	r7, 18536 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
   184fc:	a810      	add	r0, sp, #64	; 0x40
   184fe:	f00f f8d1 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18502:	4621      	mov	r1, r4
   18504:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18506:	6876      	ldr	r6, [r6, #4]
   18508:	f00f f8cc 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1850c:	b104      	cbz	r4, 18510 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
   1850e:	6864      	ldr	r4, [r4, #4]
   18510:	4651      	mov	r1, sl
   18512:	4628      	mov	r0, r5
   18514:	f00f f8c6 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18518:	f1ba 0f00 	cmp.w	sl, #0
   1851c:	d001      	beq.n	18522 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
   1851e:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
   18522:	4632      	mov	r2, r6
   18524:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18528:	9400      	str	r4, [sp, #0]
   1852a:	ab16      	add	r3, sp, #88	; 0x58
   1852c:	a910      	add	r1, sp, #64	; 0x40
   1852e:	a822      	add	r0, sp, #136	; 0x88
   18530:	f010 fed9 	bl	292e6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18534:	e750      	b.n	183d8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18536:	a816      	add	r0, sp, #88	; 0x58
   18538:	f00f f8b4 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1853c:	4621      	mov	r1, r4
   1853e:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18540:	6876      	ldr	r6, [r6, #4]
   18542:	f00f f8af 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18546:	b104      	cbz	r4, 1854a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x20a>
   18548:	6864      	ldr	r4, [r4, #4]
   1854a:	4651      	mov	r1, sl
   1854c:	a822      	add	r0, sp, #136	; 0x88
   1854e:	f00f f8a9 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18552:	f1ba 0f00 	cmp.w	sl, #0
   18556:	d001      	beq.n	1855c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x21c>
   18558:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1855c:	4629      	mov	r1, r5
   1855e:	aa22      	add	r2, sp, #136	; 0x88
   18560:	a816      	add	r0, sp, #88	; 0x58
   18562:	f010 f8e2 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   18566:	2200      	movs	r2, #0
   18568:	2300      	movs	r3, #0
  const int64_t flatsize =
   1856a:	17c1      	asrs	r1, r0, #31
   1856c:	f1a6 0c08 	sub.w	ip, r6, #8
   18570:	3c08      	subs	r4, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   18572:	4282      	cmp	r2, r0
   18574:	eb73 0601 	sbcs.w	r6, r3, r1
   18578:	da11      	bge.n	1859e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs >= rhs;
   1857a:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
   1857e:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
   18582:	45b0      	cmp	r8, r6
   18584:	eb79 0607 	sbcs.w	r6, r9, r7
   18588:	bfac      	ite	ge
   1858a:	2601      	movge	r6, #1
   1858c:	2600      	movlt	r6, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   1858e:	eb0a 0e02 	add.w	lr, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   18592:	3201      	adds	r2, #1
  return lhs >= rhs;
   18594:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
   18598:	f143 0300 	adc.w	r3, r3, #0
   1859c:	e7e9      	b.n	18572 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x232>
   1859e:	a822      	add	r0, sp, #136	; 0x88
   185a0:	f00f f83b 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   185a4:	4628      	mov	r0, r5
   185a6:	f00f f838 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   185aa:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
   185ac:	f00f f835 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   185b0:	2000      	movs	r0, #0
}
   185b2:	b02b      	add	sp, #172	; 0xac
   185b4:	ecbd 8b02 	vpop	{d8}
   185b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(GreaterEqual);
   185bc:	6933      	ldr	r3, [r6, #16]
   185be:	68f0      	ldr	r0, [r6, #12]
   185c0:	f1c3 0800 	rsb	r8, r3, #0
   185c4:	f7f3 ffa0 	bl	c508 <__aeabi_f2d>
   185c8:	ab0d      	add	r3, sp, #52	; 0x34
   185ca:	aa0c      	add	r2, sp, #48	; 0x30
   185cc:	6925      	ldr	r5, [r4, #16]
   185ce:	f008 fd27 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   185d2:	68e0      	ldr	r0, [r4, #12]
   185d4:	f7f3 ff98 	bl	c508 <__aeabi_f2d>
   185d8:	ab0f      	add	r3, sp, #60	; 0x3c
   185da:	aa0e      	add	r2, sp, #56	; 0x38
   185dc:	f008 fd20 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   185e0:	2308      	movs	r3, #8
   185e2:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   185e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   185e8:	426d      	negs	r5, r5
   185ea:	9324      	str	r3, [sp, #144]	; 0x90
   185ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   185ee:	4631      	mov	r1, r6
   185f0:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   185f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   185f6:	ad1c      	add	r5, sp, #112	; 0x70
   185f8:	9327      	str	r3, [sp, #156]	; 0x9c
   185fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   185fc:	a810      	add	r0, sp, #64	; 0x40
   185fe:	9328      	str	r3, [sp, #160]	; 0xa0
   18600:	b1df      	cbz	r7, 1863a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
   18602:	f00f f84f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18606:	6872      	ldr	r2, [r6, #4]
   18608:	4621      	mov	r1, r4
   1860a:	a816      	add	r0, sp, #88	; 0x58
   1860c:	9204      	str	r2, [sp, #16]
   1860e:	f00f f849 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18612:	4651      	mov	r1, sl
   18614:	4628      	mov	r0, r5
   18616:	6864      	ldr	r4, [r4, #4]
   18618:	f00f f844 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1861c:	9a04      	ldr	r2, [sp, #16]
   1861e:	f1ba 0f00 	cmp.w	sl, #0
   18622:	d001      	beq.n	18628 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
   18624:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
   18628:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   1862c:	9400      	str	r4, [sp, #0]
   1862e:	ab16      	add	r3, sp, #88	; 0x58
   18630:	a910      	add	r1, sp, #64	; 0x40
   18632:	a822      	add	r0, sp, #136	; 0x88
   18634:	f011 fb5e 	bl	29cf4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18638:	e6ce      	b.n	183d8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   1863a:	f00f f833 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1863e:	6873      	ldr	r3, [r6, #4]
   18640:	4621      	mov	r1, r4
   18642:	a816      	add	r0, sp, #88	; 0x58
   18644:	9304      	str	r3, [sp, #16]
   18646:	f00f f82d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1864a:	6863      	ldr	r3, [r4, #4]
   1864c:	4651      	mov	r1, sl
   1864e:	4628      	mov	r0, r5
   18650:	9305      	str	r3, [sp, #20]
   18652:	f00f f827 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18656:	f1ba 0f00 	cmp.w	sl, #0
   1865a:	d001      	beq.n	18660 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x320>
   1865c:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   18660:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   18664:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   18666:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18668:	aa1c      	add	r2, sp, #112	; 0x70
   1866a:	a916      	add	r1, sp, #88	; 0x58
   1866c:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   1866e:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   18672:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   18676:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   1867a:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1867c:	f010 f855 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   18680:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18682:	f04f 0800 	mov.w	r8, #0
   18686:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   1868a:	17c3      	asrs	r3, r0, #31
   1868c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   18690:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   18694:	4590      	cmp	r8, r2
   18696:	eb79 0303 	sbcs.w	r3, r9, r3
   1869a:	f280 80bc 	bge.w	18816 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   1869e:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   186a0:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   186a2:	f812 5008 	ldrb.w	r5, [r2, r8]
   186a6:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   186a8:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   186ac:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   186ae:	9a04      	ldr	r2, [sp, #16]
   186b0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   186b4:	f812 0008 	ldrb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   186b8:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   186ba:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   186bc:	40b0      	lsls	r0, r6
   186be:	f7fe fac5 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   186c2:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   186c4:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   186c6:	4622      	mov	r2, r4
   186c8:	4639      	mov	r1, r7
   186ca:	4628      	mov	r0, r5
   186cc:	f7fe fabe 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs >= rhs;
   186d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   186d2:	4283      	cmp	r3, r0
   186d4:	bfb4      	ite	lt
   186d6:	2000      	movlt	r0, #0
   186d8:	2001      	movge	r0, #1
   186da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   186dc:	f118 0801 	adds.w	r8, r8, #1
  return lhs >= rhs;
   186e0:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   186e4:	f149 0900 	adc.w	r9, r9, #0
   186e8:	e7d2      	b.n	18690 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x350>
   186ea:	6933      	ldr	r3, [r6, #16]
   186ec:	68f0      	ldr	r0, [r6, #12]
   186ee:	f1c3 0800 	rsb	r8, r3, #0
   186f2:	f7f3 ff09 	bl	c508 <__aeabi_f2d>
   186f6:	ab0d      	add	r3, sp, #52	; 0x34
   186f8:	aa0c      	add	r2, sp, #48	; 0x30
   186fa:	6925      	ldr	r5, [r4, #16]
   186fc:	f008 fc90 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18700:	68e0      	ldr	r0, [r4, #12]
   18702:	f7f3 ff01 	bl	c508 <__aeabi_f2d>
   18706:	ab0f      	add	r3, sp, #60	; 0x3c
   18708:	aa0e      	add	r2, sp, #56	; 0x38
   1870a:	f008 fc89 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   1870e:	2308      	movs	r3, #8
   18710:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   18714:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18716:	426d      	negs	r5, r5
   18718:	9324      	str	r3, [sp, #144]	; 0x90
   1871a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1871c:	4631      	mov	r1, r6
   1871e:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   18722:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18724:	ad1c      	add	r5, sp, #112	; 0x70
   18726:	9327      	str	r3, [sp, #156]	; 0x9c
   18728:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1872a:	a810      	add	r0, sp, #64	; 0x40
   1872c:	9328      	str	r3, [sp, #160]	; 0xa0
   1872e:	b1df      	cbz	r7, 18768 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x428>
   18730:	f00e ffb8 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18734:	6872      	ldr	r2, [r6, #4]
   18736:	4621      	mov	r1, r4
   18738:	a816      	add	r0, sp, #88	; 0x58
   1873a:	9204      	str	r2, [sp, #16]
   1873c:	f00e ffb2 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18740:	4651      	mov	r1, sl
   18742:	4628      	mov	r0, r5
   18744:	6864      	ldr	r4, [r4, #4]
   18746:	f00e ffad 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1874a:	9a04      	ldr	r2, [sp, #16]
   1874c:	f1ba 0f00 	cmp.w	sl, #0
   18750:	d001      	beq.n	18756 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x416>
   18752:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(GreaterEqual);
   18756:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   1875a:	9400      	str	r4, [sp, #0]
   1875c:	ab16      	add	r3, sp, #88	; 0x58
   1875e:	a910      	add	r1, sp, #64	; 0x40
   18760:	a822      	add	r0, sp, #136	; 0x88
   18762:	f011 fb53 	bl	29e0c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18766:	e637      	b.n	183d8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18768:	f00e ff9c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1876c:	6873      	ldr	r3, [r6, #4]
   1876e:	4621      	mov	r1, r4
   18770:	a816      	add	r0, sp, #88	; 0x58
   18772:	9304      	str	r3, [sp, #16]
   18774:	f00e ff96 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18778:	6863      	ldr	r3, [r4, #4]
   1877a:	4651      	mov	r1, sl
   1877c:	4628      	mov	r0, r5
   1877e:	9305      	str	r3, [sp, #20]
   18780:	f00e ff90 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18784:	f1ba 0f00 	cmp.w	sl, #0
   18788:	d001      	beq.n	1878e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x44e>
   1878a:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   1878e:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   18792:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   18794:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18796:	aa1c      	add	r2, sp, #112	; 0x70
   18798:	a916      	add	r1, sp, #88	; 0x58
   1879a:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   1879c:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   187a0:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   187a4:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   187a8:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   187aa:	f00f ffbe 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   187ae:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   187b0:	f04f 0800 	mov.w	r8, #0
   187b4:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   187b8:	17c3      	asrs	r3, r0, #31
   187ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   187be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   187c2:	4590      	cmp	r8, r2
   187c4:	eb79 0303 	sbcs.w	r3, r9, r3
   187c8:	da25      	bge.n	18816 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   187ca:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   187cc:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   187ce:	f912 5008 	ldrsb.w	r5, [r2, r8]
   187d2:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   187d4:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   187d8:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   187da:	9a04      	ldr	r2, [sp, #16]
   187dc:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   187e0:	f912 0008 	ldrsb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   187e4:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   187e6:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   187e8:	40b0      	lsls	r0, r6
   187ea:	f7fe fa2f 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   187ee:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   187f0:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   187f2:	4622      	mov	r2, r4
   187f4:	4639      	mov	r1, r7
   187f6:	4628      	mov	r0, r5
   187f8:	f7fe fa28 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs >= rhs;
   187fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   187fe:	4283      	cmp	r3, r0
   18800:	bfb4      	ite	lt
   18802:	2000      	movlt	r0, #0
   18804:	2001      	movge	r0, #1
   18806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   18808:	f118 0801 	adds.w	r8, r8, #1
  return lhs >= rhs;
   1880c:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   18810:	f149 0900 	adc.w	r9, r9, #0
   18814:	e7d3      	b.n	187be <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x47e>
   18816:	a81c      	add	r0, sp, #112	; 0x70
   18818:	e5df      	b.n	183da <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1881a:	696c      	ldr	r4, [r5, #20]
   1881c:	f7f4 fa52 	bl	ccc4 <TfLiteTypeGetName>
   18820:	f818 3009 	ldrb.w	r3, [r8, r9]
   18824:	4602      	mov	r2, r0
   18826:	4902      	ldr	r1, [pc, #8]	; (18830 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x4f0>)
   18828:	4628      	mov	r0, r5
   1882a:	47a0      	blx	r4
      return kTfLiteError;
   1882c:	2001      	movs	r0, #1
   1882e:	e6c0      	b.n	185b2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_116GreaterEqualEvalEP13TfLiteContextP10TfLiteNode+0x272>
   18830:	00034a40 	.word	0x00034a40

00018834 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {
   18834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18838:	ed2d 8b02 	vpush	{d8}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   1883c:	680b      	ldr	r3, [r1, #0]
   1883e:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   18842:	685e      	ldr	r6, [r3, #4]
   18844:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   18846:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   18848:	ea4f 1986 	mov.w	r9, r6, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1884c:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   1884e:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   18852:	eb08 1484 	add.w	r4, r8, r4, lsl #6
TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {
   18856:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   18858:	4621      	mov	r1, r4
   1885a:	4630      	mov	r0, r6
TfLiteStatus LessEval(TfLiteContext* context, TfLiteNode* node) {
   1885c:	b0ab      	sub	sp, #172	; 0xac
  return &context->tensors[node->outputs->data[index]];
   1885e:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   18862:	f017 fc82 	bl	3016a <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   18866:	f080 0001 	eor.w	r0, r0, #1
   1886a:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   1886c:	f818 0009 	ldrb.w	r0, [r8, r9]
   18870:	1e43      	subs	r3, r0, #1
   18872:	2b08      	cmp	r3, #8
   18874:	f200 824b 	bhi.w	18d0e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4da>
   18878:	e8df f013 	tbh	[pc, r3, lsl #1]
   1887c:	00680009 	.word	0x00680009
   18880:	00b7011a 	.word	0x00b7011a
   18884:	02490249 	.word	0x02490249
   18888:	02490249 	.word	0x02490249
   1888c:	01b1      	.short	0x01b1
      TF_LITE_COMPARISON(float, Less, requires_broadcast);
   1888e:	4631      	mov	r1, r6
   18890:	ad1c      	add	r5, sp, #112	; 0x70
   18892:	b31f      	cbz	r7, 188dc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xa8>
   18894:	a810      	add	r0, sp, #64	; 0x40
   18896:	f00e ff05 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1889a:	4621      	mov	r1, r4
   1889c:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1889e:	6876      	ldr	r6, [r6, #4]
   188a0:	f00e ff00 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   188a4:	b104      	cbz	r4, 188a8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x74>
   188a6:	6864      	ldr	r4, [r4, #4]
   188a8:	4651      	mov	r1, sl
   188aa:	4628      	mov	r0, r5
   188ac:	f00e fefa 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   188b0:	f1ba 0f00 	cmp.w	sl, #0
   188b4:	d001      	beq.n	188ba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x86>
   188b6:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
   188ba:	4632      	mov	r2, r6
   188bc:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   188c0:	9400      	str	r4, [sp, #0]
   188c2:	ab16      	add	r3, sp, #88	; 0x58
   188c4:	a910      	add	r1, sp, #64	; 0x40
   188c6:	a822      	add	r0, sp, #136	; 0x88
   188c8:	f010 f948 	bl	28b5c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(Less);
   188cc:	4628      	mov	r0, r5
   188ce:	f00e fea4 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   188d2:	a816      	add	r0, sp, #88	; 0x58
   188d4:	f00e fea1 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   188d8:	a810      	add	r0, sp, #64	; 0x40
   188da:	e0e1      	b.n	18aa0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, Less, requires_broadcast);
   188dc:	a816      	add	r0, sp, #88	; 0x58
   188de:	f00e fee1 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   188e2:	4621      	mov	r1, r4
   188e4:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   188e6:	f8d6 8004 	ldr.w	r8, [r6, #4]
   188ea:	f00e fedb 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   188ee:	b104      	cbz	r4, 188f2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xbe>
   188f0:	6864      	ldr	r4, [r4, #4]
   188f2:	4651      	mov	r1, sl
   188f4:	a822      	add	r0, sp, #136	; 0x88
   188f6:	f00e fed5 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   188fa:	f1ba 0f00 	cmp.w	sl, #0
   188fe:	d001      	beq.n	18904 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xd0>
   18900:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18904:	4629      	mov	r1, r5
   18906:	aa22      	add	r2, sp, #136	; 0x88
   18908:	a816      	add	r0, sp, #88	; 0x58
   1890a:	f00f ff0e 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   1890e:	4641      	mov	r1, r8
  const int64_t flatsize =
   18910:	4606      	mov	r6, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18912:	2200      	movs	r2, #0
   18914:	2300      	movs	r3, #0
  const int64_t flatsize =
   18916:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   18918:	42b2      	cmp	r2, r6
   1891a:	eb73 0007 	sbcs.w	r0, r3, r7
   1891e:	f280 80b8 	bge.w	18a92 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
   18922:	ecb1 7a01 	vldmia	r1!, {s14}
   18926:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs < rhs;
   1892a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1892e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18932:	bf4c      	ite	mi
   18934:	f04f 0c01 	movmi.w	ip, #1
   18938:	f04f 0c00 	movpl.w	ip, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   1893c:	eb0a 0002 	add.w	r0, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   18940:	3201      	adds	r2, #1
  return lhs < rhs;
   18942:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
   18946:	f143 0300 	adc.w	r3, r3, #0
   1894a:	e7e5      	b.n	18918 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, Less, requires_broadcast);
   1894c:	4631      	mov	r1, r6
   1894e:	ad1c      	add	r5, sp, #112	; 0x70
   18950:	b1e7      	cbz	r7, 1898c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x158>
   18952:	a810      	add	r0, sp, #64	; 0x40
   18954:	f00e fea6 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18958:	4621      	mov	r1, r4
   1895a:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1895c:	6876      	ldr	r6, [r6, #4]
   1895e:	f00e fea1 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18962:	b104      	cbz	r4, 18966 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x132>
   18964:	6864      	ldr	r4, [r4, #4]
   18966:	4651      	mov	r1, sl
   18968:	4628      	mov	r0, r5
   1896a:	f00e fe9b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1896e:	f1ba 0f00 	cmp.w	sl, #0
   18972:	d001      	beq.n	18978 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x144>
   18974:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
   18978:	4632      	mov	r2, r6
   1897a:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   1897e:	9400      	str	r4, [sp, #0]
   18980:	ab16      	add	r3, sp, #88	; 0x58
   18982:	a910      	add	r1, sp, #64	; 0x40
   18984:	a822      	add	r0, sp, #136	; 0x88
   18986:	f010 fd0b 	bl	293a0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   1898a:	e79f      	b.n	188cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
   1898c:	a816      	add	r0, sp, #88	; 0x58
   1898e:	f00e fe89 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18992:	4621      	mov	r1, r4
   18994:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18996:	6876      	ldr	r6, [r6, #4]
   18998:	f00e fe84 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1899c:	b104      	cbz	r4, 189a0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x16c>
   1899e:	6864      	ldr	r4, [r4, #4]
   189a0:	4651      	mov	r1, sl
   189a2:	a822      	add	r0, sp, #136	; 0x88
   189a4:	f00e fe7e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   189a8:	f1ba 0f00 	cmp.w	sl, #0
   189ac:	d001      	beq.n	189b2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x17e>
   189ae:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   189b2:	aa22      	add	r2, sp, #136	; 0x88
   189b4:	4629      	mov	r1, r5
   189b6:	a816      	add	r0, sp, #88	; 0x58
   189b8:	f00f feb7 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   189bc:	2200      	movs	r2, #0
  const int64_t flatsize =
   189be:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   189c0:	2300      	movs	r3, #0
  const int64_t flatsize =
   189c2:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   189c6:	4542      	cmp	r2, r8
   189c8:	eb73 0109 	sbcs.w	r1, r3, r9
   189cc:	da61      	bge.n	18a92 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs < rhs;
   189ce:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
   189d2:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   189d6:	4281      	cmp	r1, r0
   189d8:	bfac      	ite	ge
   189da:	2100      	movge	r1, #0
   189dc:	2101      	movlt	r1, #1
   189de:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   189e2:	3201      	adds	r2, #1
   189e4:	f143 0300 	adc.w	r3, r3, #0
   189e8:	e7ed      	b.n	189c6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, Less, requires_broadcast);
   189ea:	4631      	mov	r1, r6
   189ec:	ad1c      	add	r5, sp, #112	; 0x70
   189ee:	b1e7      	cbz	r7, 18a2a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
   189f0:	a810      	add	r0, sp, #64	; 0x40
   189f2:	f00e fe57 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   189f6:	4621      	mov	r1, r4
   189f8:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   189fa:	6876      	ldr	r6, [r6, #4]
   189fc:	f00e fe52 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18a00:	b104      	cbz	r4, 18a04 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
   18a02:	6864      	ldr	r4, [r4, #4]
   18a04:	4651      	mov	r1, sl
   18a06:	4628      	mov	r0, r5
   18a08:	f00e fe4c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18a0c:	f1ba 0f00 	cmp.w	sl, #0
   18a10:	d001      	beq.n	18a16 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
   18a12:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
   18a16:	4632      	mov	r2, r6
   18a18:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18a1c:	9400      	str	r4, [sp, #0]
   18a1e:	ab16      	add	r3, sp, #88	; 0x58
   18a20:	a910      	add	r1, sp, #64	; 0x40
   18a22:	a822      	add	r0, sp, #136	; 0x88
   18a24:	f010 fd11 	bl	2944a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18a28:	e750      	b.n	188cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18a2a:	a816      	add	r0, sp, #88	; 0x58
   18a2c:	f00e fe3a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18a30:	4621      	mov	r1, r4
   18a32:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18a34:	6876      	ldr	r6, [r6, #4]
   18a36:	f00e fe35 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18a3a:	b104      	cbz	r4, 18a3e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x20a>
   18a3c:	6864      	ldr	r4, [r4, #4]
   18a3e:	4651      	mov	r1, sl
   18a40:	a822      	add	r0, sp, #136	; 0x88
   18a42:	f00e fe2f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18a46:	f1ba 0f00 	cmp.w	sl, #0
   18a4a:	d001      	beq.n	18a50 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x21c>
   18a4c:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18a50:	4629      	mov	r1, r5
   18a52:	aa22      	add	r2, sp, #136	; 0x88
   18a54:	a816      	add	r0, sp, #88	; 0x58
   18a56:	f00f fe68 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   18a5a:	2200      	movs	r2, #0
   18a5c:	2300      	movs	r3, #0
  const int64_t flatsize =
   18a5e:	17c1      	asrs	r1, r0, #31
   18a60:	f1a6 0c08 	sub.w	ip, r6, #8
   18a64:	3c08      	subs	r4, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   18a66:	4282      	cmp	r2, r0
   18a68:	eb73 0601 	sbcs.w	r6, r3, r1
   18a6c:	da11      	bge.n	18a92 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs < rhs;
   18a6e:	e9fc 8902 	ldrd	r8, r9, [ip, #8]!
   18a72:	e9f4 6702 	ldrd	r6, r7, [r4, #8]!
   18a76:	45b0      	cmp	r8, r6
   18a78:	eb79 0607 	sbcs.w	r6, r9, r7
   18a7c:	bfb4      	ite	lt
   18a7e:	2601      	movlt	r6, #1
   18a80:	2600      	movge	r6, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   18a82:	eb0a 0e02 	add.w	lr, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   18a86:	3201      	adds	r2, #1
  return lhs < rhs;
   18a88:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
   18a8c:	f143 0300 	adc.w	r3, r3, #0
   18a90:	e7e9      	b.n	18a66 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x232>
   18a92:	a822      	add	r0, sp, #136	; 0x88
   18a94:	f00e fdc1 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   18a98:	4628      	mov	r0, r5
   18a9a:	f00e fdbe 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   18a9e:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(Less);
   18aa0:	f00e fdbb 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   18aa4:	2000      	movs	r0, #0
}
   18aa6:	b02b      	add	sp, #172	; 0xac
   18aa8:	ecbd 8b02 	vpop	{d8}
   18aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(Less);
   18ab0:	6933      	ldr	r3, [r6, #16]
   18ab2:	68f0      	ldr	r0, [r6, #12]
   18ab4:	f1c3 0800 	rsb	r8, r3, #0
   18ab8:	f7f3 fd26 	bl	c508 <__aeabi_f2d>
   18abc:	ab0d      	add	r3, sp, #52	; 0x34
   18abe:	aa0c      	add	r2, sp, #48	; 0x30
   18ac0:	6925      	ldr	r5, [r4, #16]
   18ac2:	f008 faad 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18ac6:	68e0      	ldr	r0, [r4, #12]
   18ac8:	f7f3 fd1e 	bl	c508 <__aeabi_f2d>
   18acc:	ab0f      	add	r3, sp, #60	; 0x3c
   18ace:	aa0e      	add	r2, sp, #56	; 0x38
   18ad0:	f008 faa6 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18ad4:	2308      	movs	r3, #8
   18ad6:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   18ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18adc:	426d      	negs	r5, r5
   18ade:	9324      	str	r3, [sp, #144]	; 0x90
   18ae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18ae2:	4631      	mov	r1, r6
   18ae4:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   18ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18aea:	ad1c      	add	r5, sp, #112	; 0x70
   18aec:	9327      	str	r3, [sp, #156]	; 0x9c
   18aee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18af0:	a810      	add	r0, sp, #64	; 0x40
   18af2:	9328      	str	r3, [sp, #160]	; 0xa0
   18af4:	b1df      	cbz	r7, 18b2e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
   18af6:	f00e fdd5 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18afa:	6872      	ldr	r2, [r6, #4]
   18afc:	4621      	mov	r1, r4
   18afe:	a816      	add	r0, sp, #88	; 0x58
   18b00:	9204      	str	r2, [sp, #16]
   18b02:	f00e fdcf 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18b06:	4651      	mov	r1, sl
   18b08:	4628      	mov	r0, r5
   18b0a:	6864      	ldr	r4, [r4, #4]
   18b0c:	f00e fdca 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18b10:	9a04      	ldr	r2, [sp, #16]
   18b12:	f1ba 0f00 	cmp.w	sl, #0
   18b16:	d001      	beq.n	18b1c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
   18b18:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
   18b1c:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18b20:	9400      	str	r4, [sp, #0]
   18b22:	ab16      	add	r3, sp, #88	; 0x58
   18b24:	a910      	add	r1, sp, #64	; 0x40
   18b26:	a822      	add	r0, sp, #136	; 0x88
   18b28:	f011 f9fc 	bl	29f24 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18b2c:	e6ce      	b.n	188cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18b2e:	f00e fdb9 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18b32:	6873      	ldr	r3, [r6, #4]
   18b34:	4621      	mov	r1, r4
   18b36:	a816      	add	r0, sp, #88	; 0x58
   18b38:	9304      	str	r3, [sp, #16]
   18b3a:	f00e fdb3 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18b3e:	6863      	ldr	r3, [r4, #4]
   18b40:	4651      	mov	r1, sl
   18b42:	4628      	mov	r0, r5
   18b44:	9305      	str	r3, [sp, #20]
   18b46:	f00e fdad 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18b4a:	f1ba 0f00 	cmp.w	sl, #0
   18b4e:	d001      	beq.n	18b54 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x320>
   18b50:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   18b54:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   18b58:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   18b5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18b5c:	aa1c      	add	r2, sp, #112	; 0x70
   18b5e:	a916      	add	r1, sp, #88	; 0x58
   18b60:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   18b62:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   18b66:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   18b6a:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   18b6e:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18b70:	f00f fddb 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   18b74:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18b76:	f04f 0800 	mov.w	r8, #0
   18b7a:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   18b7e:	17c3      	asrs	r3, r0, #31
   18b80:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   18b84:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   18b88:	4590      	cmp	r8, r2
   18b8a:	eb79 0303 	sbcs.w	r3, r9, r3
   18b8e:	f280 80bc 	bge.w	18d0a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   18b92:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   18b94:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   18b96:	f812 5008 	ldrb.w	r5, [r2, r8]
   18b9a:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18b9c:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   18ba0:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   18ba2:	9a04      	ldr	r2, [sp, #16]
   18ba4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   18ba8:	f812 0008 	ldrb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18bac:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   18bae:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18bb0:	40b0      	lsls	r0, r6
   18bb2:	f7fe f84b 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   18bb6:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18bb8:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18bba:	4622      	mov	r2, r4
   18bbc:	4639      	mov	r1, r7
   18bbe:	4628      	mov	r0, r5
   18bc0:	f7fe f844 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs < rhs;
   18bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18bc6:	4283      	cmp	r3, r0
   18bc8:	bfac      	ite	ge
   18bca:	2000      	movge	r0, #0
   18bcc:	2001      	movlt	r0, #1
   18bce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   18bd0:	f118 0801 	adds.w	r8, r8, #1
  return lhs < rhs;
   18bd4:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   18bd8:	f149 0900 	adc.w	r9, r9, #0
   18bdc:	e7d2      	b.n	18b84 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x350>
   18bde:	6933      	ldr	r3, [r6, #16]
   18be0:	68f0      	ldr	r0, [r6, #12]
   18be2:	f1c3 0800 	rsb	r8, r3, #0
   18be6:	f7f3 fc8f 	bl	c508 <__aeabi_f2d>
   18bea:	ab0d      	add	r3, sp, #52	; 0x34
   18bec:	aa0c      	add	r2, sp, #48	; 0x30
   18bee:	6925      	ldr	r5, [r4, #16]
   18bf0:	f008 fa16 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18bf4:	68e0      	ldr	r0, [r4, #12]
   18bf6:	f7f3 fc87 	bl	c508 <__aeabi_f2d>
   18bfa:	ab0f      	add	r3, sp, #60	; 0x3c
   18bfc:	aa0e      	add	r2, sp, #56	; 0x38
   18bfe:	f008 fa0f 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18c02:	2308      	movs	r3, #8
   18c04:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   18c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18c0a:	426d      	negs	r5, r5
   18c0c:	9324      	str	r3, [sp, #144]	; 0x90
   18c0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18c10:	4631      	mov	r1, r6
   18c12:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   18c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18c18:	ad1c      	add	r5, sp, #112	; 0x70
   18c1a:	9327      	str	r3, [sp, #156]	; 0x9c
   18c1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18c1e:	a810      	add	r0, sp, #64	; 0x40
   18c20:	9328      	str	r3, [sp, #160]	; 0xa0
   18c22:	b1df      	cbz	r7, 18c5c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x428>
   18c24:	f00e fd3e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18c28:	6872      	ldr	r2, [r6, #4]
   18c2a:	4621      	mov	r1, r4
   18c2c:	a816      	add	r0, sp, #88	; 0x58
   18c2e:	9204      	str	r2, [sp, #16]
   18c30:	f00e fd38 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18c34:	4651      	mov	r1, sl
   18c36:	4628      	mov	r0, r5
   18c38:	6864      	ldr	r4, [r4, #4]
   18c3a:	f00e fd33 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18c3e:	9a04      	ldr	r2, [sp, #16]
   18c40:	f1ba 0f00 	cmp.w	sl, #0
   18c44:	d001      	beq.n	18c4a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x416>
   18c46:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(Less);
   18c4a:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18c4e:	9400      	str	r4, [sp, #0]
   18c50:	ab16      	add	r3, sp, #88	; 0x58
   18c52:	a910      	add	r1, sp, #64	; 0x40
   18c54:	a822      	add	r0, sp, #136	; 0x88
   18c56:	f011 f9f1 	bl	2a03c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18c5a:	e637      	b.n	188cc <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18c5c:	f00e fd22 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18c60:	6873      	ldr	r3, [r6, #4]
   18c62:	4621      	mov	r1, r4
   18c64:	a816      	add	r0, sp, #88	; 0x58
   18c66:	9304      	str	r3, [sp, #16]
   18c68:	f00e fd1c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18c6c:	6863      	ldr	r3, [r4, #4]
   18c6e:	4651      	mov	r1, sl
   18c70:	4628      	mov	r0, r5
   18c72:	9305      	str	r3, [sp, #20]
   18c74:	f00e fd16 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18c78:	f1ba 0f00 	cmp.w	sl, #0
   18c7c:	d001      	beq.n	18c82 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x44e>
   18c7e:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   18c82:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   18c86:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   18c88:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18c8a:	aa1c      	add	r2, sp, #112	; 0x70
   18c8c:	a916      	add	r1, sp, #88	; 0x58
   18c8e:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   18c90:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   18c94:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   18c98:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   18c9c:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18c9e:	f00f fd44 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   18ca2:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18ca4:	f04f 0800 	mov.w	r8, #0
   18ca8:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   18cac:	17c3      	asrs	r3, r0, #31
   18cae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   18cb2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   18cb6:	4590      	cmp	r8, r2
   18cb8:	eb79 0303 	sbcs.w	r3, r9, r3
   18cbc:	da25      	bge.n	18d0a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   18cbe:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   18cc0:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   18cc2:	f912 5008 	ldrsb.w	r5, [r2, r8]
   18cc6:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18cc8:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   18ccc:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   18cce:	9a04      	ldr	r2, [sp, #16]
   18cd0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   18cd4:	f912 0008 	ldrsb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18cd8:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   18cda:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18cdc:	40b0      	lsls	r0, r6
   18cde:	f7fd ffb5 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   18ce2:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18ce4:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   18ce6:	4622      	mov	r2, r4
   18ce8:	4639      	mov	r1, r7
   18cea:	4628      	mov	r0, r5
   18cec:	f7fd ffae 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs < rhs;
   18cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18cf2:	4283      	cmp	r3, r0
   18cf4:	bfac      	ite	ge
   18cf6:	2000      	movge	r0, #0
   18cf8:	2001      	movlt	r0, #1
   18cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   18cfc:	f118 0801 	adds.w	r8, r8, #1
  return lhs < rhs;
   18d00:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   18d04:	f149 0900 	adc.w	r9, r9, #0
   18d08:	e7d3      	b.n	18cb2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x47e>
   18d0a:	a81c      	add	r0, sp, #112	; 0x70
   18d0c:	e5df      	b.n	188ce <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   18d0e:	696c      	ldr	r4, [r5, #20]
   18d10:	f7f3 ffd8 	bl	ccc4 <TfLiteTypeGetName>
   18d14:	f818 3009 	ldrb.w	r3, [r8, r9]
   18d18:	4602      	mov	r2, r0
   18d1a:	4902      	ldr	r1, [pc, #8]	; (18d24 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x4f0>)
   18d1c:	4628      	mov	r0, r5
   18d1e:	47a0      	blx	r4
      return kTfLiteError;
   18d20:	2001      	movs	r0, #1
   18d22:	e6c0      	b.n	18aa6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_18LessEvalEP13TfLiteContextP10TfLiteNode+0x272>
   18d24:	00034a40 	.word	0x00034a40

00018d28 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus LessEqualEval(TfLiteContext* context, TfLiteNode* node) {
   18d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d2c:	ed2d 8b02 	vpush	{d8}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   18d30:	680b      	ldr	r3, [r1, #0]
   18d32:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   18d36:	685e      	ldr	r6, [r3, #4]
   18d38:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   18d3a:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   18d3c:	ea4f 1986 	mov.w	r9, r6, lsl #6
  return &context->tensors[node->outputs->data[index]];
   18d40:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   18d42:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   18d46:	eb08 1484 	add.w	r4, r8, r4, lsl #6
TfLiteStatus LessEqualEval(TfLiteContext* context, TfLiteNode* node) {
   18d4a:	4605      	mov	r5, r0
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   18d4c:	4621      	mov	r1, r4
   18d4e:	4630      	mov	r0, r6
TfLiteStatus LessEqualEval(TfLiteContext* context, TfLiteNode* node) {
   18d50:	b0ab      	sub	sp, #172	; 0xac
  return &context->tensors[node->outputs->data[index]];
   18d52:	eb08 1a83 	add.w	sl, r8, r3, lsl #6
  bool requires_broadcast = !HaveSameShapes(input1, input2);
   18d56:	f017 fa08 	bl	3016a <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
   18d5a:	f080 0001 	eor.w	r0, r0, #1
   18d5e:	b2c7      	uxtb	r7, r0
  switch (input1->type) {
   18d60:	f818 0009 	ldrb.w	r0, [r8, r9]
   18d64:	1e43      	subs	r3, r0, #1
   18d66:	2b08      	cmp	r3, #8
   18d68:	f200 824b 	bhi.w	19202 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4da>
   18d6c:	e8df f013 	tbh	[pc, r3, lsl #1]
   18d70:	00680009 	.word	0x00680009
   18d74:	00b7011a 	.word	0x00b7011a
   18d78:	02490249 	.word	0x02490249
   18d7c:	02490249 	.word	0x02490249
   18d80:	01b1      	.short	0x01b1
      TF_LITE_COMPARISON(float, LessEqual, requires_broadcast);
   18d82:	4631      	mov	r1, r6
   18d84:	ad1c      	add	r5, sp, #112	; 0x70
   18d86:	b31f      	cbz	r7, 18dd0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xa8>
   18d88:	a810      	add	r0, sp, #64	; 0x40
   18d8a:	f00e fc8b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18d8e:	4621      	mov	r1, r4
   18d90:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18d92:	6876      	ldr	r6, [r6, #4]
   18d94:	f00e fc86 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18d98:	b104      	cbz	r4, 18d9c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x74>
   18d9a:	6864      	ldr	r4, [r4, #4]
   18d9c:	4651      	mov	r1, sl
   18d9e:	4628      	mov	r0, r5
   18da0:	f00e fc80 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18da4:	f1ba 0f00 	cmp.w	sl, #0
   18da8:	d001      	beq.n	18dae <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x86>
   18daa:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
   18dae:	4632      	mov	r2, r6
   18db0:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18db4:	9400      	str	r4, [sp, #0]
   18db6:	ab16      	add	r3, sp, #88	; 0x58
   18db8:	a910      	add	r1, sp, #64	; 0x40
   18dba:	a822      	add	r0, sp, #136	; 0x88
   18dbc:	f00f ff2a 	bl	28c14 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
   18dc0:	4628      	mov	r0, r5
   18dc2:	f00e fc2a 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   18dc6:	a816      	add	r0, sp, #88	; 0x58
   18dc8:	f00e fc27 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   18dcc:	a810      	add	r0, sp, #64	; 0x40
   18dce:	e0e1      	b.n	18f94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x26c>
      TF_LITE_COMPARISON(float, LessEqual, requires_broadcast);
   18dd0:	a816      	add	r0, sp, #88	; 0x58
   18dd2:	f00e fc67 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18dd6:	4621      	mov	r1, r4
   18dd8:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18dda:	f8d6 8004 	ldr.w	r8, [r6, #4]
   18dde:	f00e fc61 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18de2:	b104      	cbz	r4, 18de6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xbe>
   18de4:	6864      	ldr	r4, [r4, #4]
   18de6:	4651      	mov	r1, sl
   18de8:	a822      	add	r0, sp, #136	; 0x88
   18dea:	f00e fc5b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18dee:	f1ba 0f00 	cmp.w	sl, #0
   18df2:	d001      	beq.n	18df8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xd0>
   18df4:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18df8:	4629      	mov	r1, r5
   18dfa:	aa22      	add	r2, sp, #136	; 0x88
   18dfc:	a816      	add	r0, sp, #88	; 0x58
   18dfe:	f00f fc94 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   18e02:	4641      	mov	r1, r8
  const int64_t flatsize =
   18e04:	4606      	mov	r6, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18e06:	2200      	movs	r2, #0
   18e08:	2300      	movs	r3, #0
  const int64_t flatsize =
   18e0a:	17c7      	asrs	r7, r0, #31
  for (int64_t i = 0; i < flatsize; ++i) {
   18e0c:	42b2      	cmp	r2, r6
   18e0e:	eb73 0007 	sbcs.w	r0, r3, r7
   18e12:	f280 80b8 	bge.w	18f86 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
    output_data[i] = F(input1_data[i], input2_data[i]);
   18e16:	ecb1 7a01 	vldmia	r1!, {s14}
   18e1a:	ecf4 7a01 	vldmia	r4!, {s15}
  return lhs <= rhs;
   18e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   18e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18e26:	bf94      	ite	ls
   18e28:	f04f 0c01 	movls.w	ip, #1
   18e2c:	f04f 0c00 	movhi.w	ip, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   18e30:	eb0a 0002 	add.w	r0, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   18e34:	3201      	adds	r2, #1
  return lhs <= rhs;
   18e36:	f880 c000 	strb.w	ip, [r0]
  for (int64_t i = 0; i < flatsize; ++i) {
   18e3a:	f143 0300 	adc.w	r3, r3, #0
   18e3e:	e7e5      	b.n	18e0c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0xe4>
      TF_LITE_COMPARISON(int32_t, LessEqual, requires_broadcast);
   18e40:	4631      	mov	r1, r6
   18e42:	ad1c      	add	r5, sp, #112	; 0x70
   18e44:	b1e7      	cbz	r7, 18e80 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x158>
   18e46:	a810      	add	r0, sp, #64	; 0x40
   18e48:	f00e fc2c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18e4c:	4621      	mov	r1, r4
   18e4e:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18e50:	6876      	ldr	r6, [r6, #4]
   18e52:	f00e fc27 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18e56:	b104      	cbz	r4, 18e5a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x132>
   18e58:	6864      	ldr	r4, [r4, #4]
   18e5a:	4651      	mov	r1, sl
   18e5c:	4628      	mov	r0, r5
   18e5e:	f00e fc21 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18e62:	f1ba 0f00 	cmp.w	sl, #0
   18e66:	d001      	beq.n	18e6c <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x144>
   18e68:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
   18e6c:	4632      	mov	r2, r6
   18e6e:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18e72:	9400      	str	r4, [sp, #0]
   18e74:	ab16      	add	r3, sp, #88	; 0x58
   18e76:	a910      	add	r1, sp, #64	; 0x40
   18e78:	a822      	add	r0, sp, #136	; 0x88
   18e7a:	f010 fb43 	bl	29504 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18e7e:	e79f      	b.n	18dc0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18e80:	a816      	add	r0, sp, #88	; 0x58
   18e82:	f00e fc0f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18e86:	4621      	mov	r1, r4
   18e88:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18e8a:	6876      	ldr	r6, [r6, #4]
   18e8c:	f00e fc0a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18e90:	b104      	cbz	r4, 18e94 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x16c>
   18e92:	6864      	ldr	r4, [r4, #4]
   18e94:	4651      	mov	r1, sl
   18e96:	a822      	add	r0, sp, #136	; 0x88
   18e98:	f00e fc04 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18e9c:	f1ba 0f00 	cmp.w	sl, #0
   18ea0:	d001      	beq.n	18ea6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x17e>
   18ea2:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18ea6:	aa22      	add	r2, sp, #136	; 0x88
   18ea8:	4629      	mov	r1, r5
   18eaa:	a816      	add	r0, sp, #88	; 0x58
   18eac:	f00f fc3d 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   18eb0:	2200      	movs	r2, #0
  const int64_t flatsize =
   18eb2:	4680      	mov	r8, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   18eb4:	2300      	movs	r3, #0
  const int64_t flatsize =
   18eb6:	ea4f 79e0 	mov.w	r9, r0, asr #31
  for (int64_t i = 0; i < flatsize; ++i) {
   18eba:	4542      	cmp	r2, r8
   18ebc:	eb73 0109 	sbcs.w	r1, r3, r9
   18ec0:	da61      	bge.n	18f86 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs <= rhs;
   18ec2:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
   18ec6:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
   18eca:	4281      	cmp	r1, r0
   18ecc:	bfcc      	ite	gt
   18ece:	2100      	movgt	r1, #0
   18ed0:	2101      	movle	r1, #1
   18ed2:	f80a 1002 	strb.w	r1, [sl, r2]
  for (int64_t i = 0; i < flatsize; ++i) {
   18ed6:	3201      	adds	r2, #1
   18ed8:	f143 0300 	adc.w	r3, r3, #0
   18edc:	e7ed      	b.n	18eba <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x192>
      TF_LITE_COMPARISON(int64_t, LessEqual, requires_broadcast);
   18ede:	4631      	mov	r1, r6
   18ee0:	ad1c      	add	r5, sp, #112	; 0x70
   18ee2:	b1e7      	cbz	r7, 18f1e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1f6>
   18ee4:	a810      	add	r0, sp, #64	; 0x40
   18ee6:	f00e fbdd 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18eea:	4621      	mov	r1, r4
   18eec:	a816      	add	r0, sp, #88	; 0x58
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18eee:	6876      	ldr	r6, [r6, #4]
   18ef0:	f00e fbd8 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18ef4:	b104      	cbz	r4, 18ef8 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1d0>
   18ef6:	6864      	ldr	r4, [r4, #4]
   18ef8:	4651      	mov	r1, sl
   18efa:	4628      	mov	r0, r5
   18efc:	f00e fbd2 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18f00:	f1ba 0f00 	cmp.w	sl, #0
   18f04:	d001      	beq.n	18f0a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x1e2>
   18f06:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
   18f0a:	4632      	mov	r2, r6
   18f0c:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   18f10:	9400      	str	r4, [sp, #0]
   18f12:	ab16      	add	r3, sp, #88	; 0x58
   18f14:	a910      	add	r1, sp, #64	; 0x40
   18f16:	a822      	add	r0, sp, #136	; 0x88
   18f18:	f010 fb49 	bl	295ae <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   18f1c:	e750      	b.n	18dc0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   18f1e:	a816      	add	r0, sp, #88	; 0x58
   18f20:	f00e fbc0 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18f24:	4621      	mov	r1, r4
   18f26:	4628      	mov	r0, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18f28:	6876      	ldr	r6, [r6, #4]
   18f2a:	f00e fbbb 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18f2e:	b104      	cbz	r4, 18f32 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x20a>
   18f30:	6864      	ldr	r4, [r4, #4]
   18f32:	4651      	mov	r1, sl
   18f34:	a822      	add	r0, sp, #136	; 0x88
   18f36:	f00e fbb5 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   18f3a:	f1ba 0f00 	cmp.w	sl, #0
   18f3e:	d001      	beq.n	18f44 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x21c>
   18f40:	f8da a004 	ldr.w	sl, [sl, #4]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   18f44:	4629      	mov	r1, r5
   18f46:	aa22      	add	r2, sp, #136	; 0x88
   18f48:	a816      	add	r0, sp, #88	; 0x58
   18f4a:	f00f fbee 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  for (int64_t i = 0; i < flatsize; ++i) {
   18f4e:	2200      	movs	r2, #0
   18f50:	2300      	movs	r3, #0
  const int64_t flatsize =
   18f52:	17c1      	asrs	r1, r0, #31
   18f54:	f1a6 0c08 	sub.w	ip, r6, #8
   18f58:	3c08      	subs	r4, #8
  for (int64_t i = 0; i < flatsize; ++i) {
   18f5a:	4282      	cmp	r2, r0
   18f5c:	eb73 0601 	sbcs.w	r6, r3, r1
   18f60:	da11      	bge.n	18f86 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x25e>
  return lhs <= rhs;
   18f62:	e9fc 6702 	ldrd	r6, r7, [ip, #8]!
   18f66:	e9f4 8902 	ldrd	r8, r9, [r4, #8]!
   18f6a:	45b0      	cmp	r8, r6
   18f6c:	eb79 0607 	sbcs.w	r6, r9, r7
   18f70:	bfac      	ite	ge
   18f72:	2601      	movge	r6, #1
   18f74:	2600      	movlt	r6, #0
    output_data[i] = F(input1_data[i], input2_data[i]);
   18f76:	eb0a 0e02 	add.w	lr, sl, r2
  for (int64_t i = 0; i < flatsize; ++i) {
   18f7a:	3201      	adds	r2, #1
  return lhs <= rhs;
   18f7c:	f88e 6000 	strb.w	r6, [lr]
  for (int64_t i = 0; i < flatsize; ++i) {
   18f80:	f143 0300 	adc.w	r3, r3, #0
   18f84:	e7e9      	b.n	18f5a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x232>
   18f86:	a822      	add	r0, sp, #136	; 0x88
   18f88:	f00e fb47 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   18f8c:	4628      	mov	r0, r5
   18f8e:	f00e fb44 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   18f92:	a816      	add	r0, sp, #88	; 0x58
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
   18f94:	f00e fb41 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   18f98:	2000      	movs	r0, #0
}
   18f9a:	b02b      	add	sp, #172	; 0xac
   18f9c:	ecbd 8b02 	vpop	{d8}
   18fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
TF_LITE_QUANTIZE_COMPARISON(LessEqual);
   18fa4:	6933      	ldr	r3, [r6, #16]
   18fa6:	68f0      	ldr	r0, [r6, #12]
   18fa8:	f1c3 0800 	rsb	r8, r3, #0
   18fac:	f7f3 faac 	bl	c508 <__aeabi_f2d>
   18fb0:	ab0d      	add	r3, sp, #52	; 0x34
   18fb2:	aa0c      	add	r2, sp, #48	; 0x30
   18fb4:	6925      	ldr	r5, [r4, #16]
   18fb6:	f008 f833 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18fba:	68e0      	ldr	r0, [r4, #12]
   18fbc:	f7f3 faa4 	bl	c508 <__aeabi_f2d>
   18fc0:	ab0f      	add	r3, sp, #60	; 0x3c
   18fc2:	aa0e      	add	r2, sp, #56	; 0x38
   18fc4:	f008 f82c 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   18fc8:	2308      	movs	r3, #8
   18fca:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   18fce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18fd0:	426d      	negs	r5, r5
   18fd2:	9324      	str	r3, [sp, #144]	; 0x90
   18fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18fd6:	4631      	mov	r1, r6
   18fd8:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   18fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18fde:	ad1c      	add	r5, sp, #112	; 0x70
   18fe0:	9327      	str	r3, [sp, #156]	; 0x9c
   18fe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18fe4:	a810      	add	r0, sp, #64	; 0x40
   18fe6:	9328      	str	r3, [sp, #160]	; 0xa0
   18fe8:	b1df      	cbz	r7, 19022 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2fa>
   18fea:	f00e fb5b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   18fee:	6872      	ldr	r2, [r6, #4]
   18ff0:	4621      	mov	r1, r4
   18ff2:	a816      	add	r0, sp, #88	; 0x58
   18ff4:	9204      	str	r2, [sp, #16]
   18ff6:	f00e fb55 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   18ffa:	4651      	mov	r1, sl
   18ffc:	4628      	mov	r0, r5
   18ffe:	6864      	ldr	r4, [r4, #4]
   19000:	f00e fb50 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   19004:	9a04      	ldr	r2, [sp, #16]
   19006:	f1ba 0f00 	cmp.w	sl, #0
   1900a:	d001      	beq.n	19010 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
   1900c:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
   19010:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   19014:	9400      	str	r4, [sp, #0]
   19016:	ab16      	add	r3, sp, #88	; 0x58
   19018:	a910      	add	r1, sp, #64	; 0x40
   1901a:	a822      	add	r0, sp, #136	; 0x88
   1901c:	f011 f89a 	bl	2a154 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   19020:	e6ce      	b.n	18dc0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   19022:	f00e fb3f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   19026:	6873      	ldr	r3, [r6, #4]
   19028:	4621      	mov	r1, r4
   1902a:	a816      	add	r0, sp, #88	; 0x58
   1902c:	9304      	str	r3, [sp, #16]
   1902e:	f00e fb39 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   19032:	6863      	ldr	r3, [r4, #4]
   19034:	4651      	mov	r1, sl
   19036:	4628      	mov	r0, r5
   19038:	9305      	str	r3, [sp, #20]
   1903a:	f00e fb33 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1903e:	f1ba 0f00 	cmp.w	sl, #0
   19042:	d001      	beq.n	19048 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x320>
   19044:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   19048:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   1904c:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   1904e:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   19050:	aa1c      	add	r2, sp, #112	; 0x70
   19052:	a916      	add	r1, sp, #88	; 0x58
   19054:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   19056:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   1905a:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   1905e:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   19062:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   19064:	f00f fb61 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   19068:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   1906a:	f04f 0800 	mov.w	r8, #0
   1906e:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   19072:	17c3      	asrs	r3, r0, #31
   19074:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   19078:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   1907c:	4590      	cmp	r8, r2
   1907e:	eb79 0303 	sbcs.w	r3, r9, r3
   19082:	f280 80bc 	bge.w	191fe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   19086:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   19088:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   1908a:	f812 5008 	ldrb.w	r5, [r2, r8]
   1908e:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   19090:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   19094:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   19096:	9a04      	ldr	r2, [sp, #16]
   19098:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   1909c:	f812 0008 	ldrb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   190a0:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   190a2:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   190a4:	40b0      	lsls	r0, r6
   190a6:	f7fd fdd1 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   190aa:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   190ac:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   190ae:	4622      	mov	r2, r4
   190b0:	4639      	mov	r1, r7
   190b2:	4628      	mov	r0, r5
   190b4:	f7fd fdca 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs <= rhs;
   190b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   190ba:	4283      	cmp	r3, r0
   190bc:	bfcc      	ite	gt
   190be:	2000      	movgt	r0, #0
   190c0:	2001      	movle	r0, #1
   190c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   190c4:	f118 0801 	adds.w	r8, r8, #1
  return lhs <= rhs;
   190c8:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   190cc:	f149 0900 	adc.w	r9, r9, #0
   190d0:	e7d2      	b.n	19078 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x350>
   190d2:	6933      	ldr	r3, [r6, #16]
   190d4:	68f0      	ldr	r0, [r6, #12]
   190d6:	f1c3 0800 	rsb	r8, r3, #0
   190da:	f7f3 fa15 	bl	c508 <__aeabi_f2d>
   190de:	ab0d      	add	r3, sp, #52	; 0x34
   190e0:	aa0c      	add	r2, sp, #48	; 0x30
   190e2:	6925      	ldr	r5, [r4, #16]
   190e4:	f007 ff9c 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   190e8:	68e0      	ldr	r0, [r4, #12]
   190ea:	f7f3 fa0d 	bl	c508 <__aeabi_f2d>
   190ee:	ab0f      	add	r3, sp, #60	; 0x3c
   190f0:	aa0e      	add	r2, sp, #56	; 0x38
   190f2:	f007 ff95 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
   190f6:	2308      	movs	r3, #8
   190f8:	e9cd 3822 	strd	r3, r8, [sp, #136]	; 0x88
   190fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   190fe:	426d      	negs	r5, r5
   19100:	9324      	str	r3, [sp, #144]	; 0x90
   19102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19104:	4631      	mov	r1, r6
   19106:	e9cd 3525 	strd	r3, r5, [sp, #148]	; 0x94
   1910a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1910c:	ad1c      	add	r5, sp, #112	; 0x70
   1910e:	9327      	str	r3, [sp, #156]	; 0x9c
   19110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19112:	a810      	add	r0, sp, #64	; 0x40
   19114:	9328      	str	r3, [sp, #160]	; 0xa0
   19116:	b1df      	cbz	r7, 19150 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x428>
   19118:	f00e fac4 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1911c:	6872      	ldr	r2, [r6, #4]
   1911e:	4621      	mov	r1, r4
   19120:	a816      	add	r0, sp, #88	; 0x58
   19122:	9204      	str	r2, [sp, #16]
   19124:	f00e fabe 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   19128:	4651      	mov	r1, sl
   1912a:	4628      	mov	r0, r5
   1912c:	6864      	ldr	r4, [r4, #4]
   1912e:	f00e fab9 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   19132:	9a04      	ldr	r2, [sp, #16]
   19134:	f1ba 0f00 	cmp.w	sl, #0
   19138:	d001      	beq.n	1913e <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x416>
   1913a:	f8da a004 	ldr.w	sl, [sl, #4]
TFLITE_COMPARISON_OP(LessEqual);
   1913e:	e9cd 5a01 	strd	r5, sl, [sp, #4]
   19142:	9400      	str	r4, [sp, #0]
   19144:	ab16      	add	r3, sp, #88	; 0x58
   19146:	a910      	add	r1, sp, #64	; 0x40
   19148:	a822      	add	r0, sp, #136	; 0x88
   1914a:	f011 f88f 	bl	2a26c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>
   1914e:	e637      	b.n	18dc0 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x98>
   19150:	f00e faa8 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   19154:	6873      	ldr	r3, [r6, #4]
   19156:	4621      	mov	r1, r4
   19158:	a816      	add	r0, sp, #88	; 0x58
   1915a:	9304      	str	r3, [sp, #16]
   1915c:	f00e faa2 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   19160:	6863      	ldr	r3, [r4, #4]
   19162:	4651      	mov	r1, sl
   19164:	4628      	mov	r0, r5
   19166:	9305      	str	r3, [sp, #20]
   19168:	f00e fa9c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1916c:	f1ba 0f00 	cmp.w	sl, #0
   19170:	d001      	beq.n	19176 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x44e>
   19172:	f8da a004 	ldr.w	sl, [sl, #4]
  int32 input1_offset = op_params.input1_offset;
   19176:	e9dd 6322 	ldrd	r6, r3, [sp, #136]	; 0x88
   1917a:	9306      	str	r3, [sp, #24]
  int32 input1_multiplier = op_params.input1_multiplier;
   1917c:	9b24      	ldr	r3, [sp, #144]	; 0x90
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1917e:	aa1c      	add	r2, sp, #112	; 0x70
   19180:	a916      	add	r1, sp, #88	; 0x58
   19182:	a810      	add	r0, sp, #64	; 0x40
  int32 input1_multiplier = op_params.input1_multiplier;
   19184:	ee08 3a10 	vmov	s16, r3
  int32 input2_offset = op_params.input2_offset;
   19188:	e9dd b325 	ldrd	fp, r3, [sp, #148]	; 0x94
  int input2_shift = op_params.input2_shift;
   1918c:	e9dd 7427 	ldrd	r7, r4, [sp, #156]	; 0x9c
  int32 input2_offset = op_params.input2_offset;
   19190:	9307      	str	r3, [sp, #28]
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   19192:	f00f faca 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  const int64_t flatsize =
   19196:	4602      	mov	r2, r0
  for (int64_t i = 0; i < flatsize; ++i) {
   19198:	f04f 0800 	mov.w	r8, #0
   1919c:	f04f 0900 	mov.w	r9, #0
  const int64_t flatsize =
   191a0:	17c3      	asrs	r3, r0, #31
   191a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  for (int64_t i = 0; i < flatsize; ++i) {
   191a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   191aa:	4590      	cmp	r8, r2
   191ac:	eb79 0303 	sbcs.w	r3, r9, r3
   191b0:	da25      	bge.n	191fe <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4d6>
    const int32 input2_val = input2_offset + input2_data[i];
   191b2:	9a05      	ldr	r2, [sp, #20]
    const int32 input1_val = input1_offset + input1_data[i];
   191b4:	9b06      	ldr	r3, [sp, #24]
    const int32 input2_val = input2_offset + input2_data[i];
   191b6:	f912 5008 	ldrsb.w	r5, [r2, r8]
   191ba:	9a07      	ldr	r2, [sp, #28]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   191bc:	ee18 1a10 	vmov	r1, s16
    const int32 input2_val = input2_offset + input2_data[i];
   191c0:	4415      	add	r5, r2
    const int32 input1_val = input1_offset + input1_data[i];
   191c2:	9a04      	ldr	r2, [sp, #16]
   191c4:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   191c8:	f912 0008 	ldrsb.w	r0, [r2, r8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   191cc:	465a      	mov	r2, fp
    const int32 input1_val = input1_offset + input1_data[i];
   191ce:	4418      	add	r0, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   191d0:	40b0      	lsls	r0, r6
   191d2:	f7fd fd3b 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
    const int32 shifted_input2_val = input2_val * (1 << left_shift);
   191d6:	40b5      	lsls	r5, r6
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   191d8:	900a      	str	r0, [sp, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   191da:	4622      	mov	r2, r4
   191dc:	4639      	mov	r1, r7
   191de:	4628      	mov	r0, r5
   191e0:	f7fd fd34 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
  return lhs <= rhs;
   191e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   191e6:	4283      	cmp	r3, r0
   191e8:	bfcc      	ite	gt
   191ea:	2000      	movgt	r0, #0
   191ec:	2001      	movle	r0, #1
   191ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  for (int64_t i = 0; i < flatsize; ++i) {
   191f0:	f118 0801 	adds.w	r8, r8, #1
  return lhs <= rhs;
   191f4:	f80a 0003 	strb.w	r0, [sl, r3]
  for (int64_t i = 0; i < flatsize; ++i) {
   191f8:	f149 0900 	adc.w	r9, r9, #0
   191fc:	e7d3      	b.n	191a6 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x47e>
   191fe:	a81c      	add	r0, sp, #112	; 0x70
   19200:	e5df      	b.n	18dc2 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x9a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   19202:	696c      	ldr	r4, [r5, #20]
   19204:	f7f3 fd5e 	bl	ccc4 <TfLiteTypeGetName>
   19208:	f818 3009 	ldrb.w	r3, [r8, r9]
   1920c:	4602      	mov	r2, r0
   1920e:	4902      	ldr	r1, [pc, #8]	; (19218 <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x4f0>)
   19210:	4628      	mov	r0, r5
   19212:	47a0      	blx	r4
      return kTfLiteError;
   19214:	2001      	movs	r0, #1
   19216:	e6c0      	b.n	18f9a <_ZN6tflite3ops5micro11comparisons12_GLOBAL__N_113LessEqualEvalEP13TfLiteContextP10TfLiteNode+0x272>
   19218:	00034a40 	.word	0x00034a40

0001921c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace concatenation {

constexpr int kMaxInputNum = 10;  // Maximum number of input tensors
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1921c:	b5f0      	push	{r4, r5, r6, r7, lr}

  TfLiteType input_type = GetInput(context, node, 0)->type;
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;

  // Check activation and input type
  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);
   1921e:	694b      	ldr	r3, [r1, #20]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   19220:	4604      	mov	r4, r0
  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);
   19222:	791b      	ldrb	r3, [r3, #4]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   19224:	b085      	sub	sp, #20
  TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActNone);
   19226:	b17b      	cbz	r3, 19248 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x2c>
   19228:	2200      	movs	r2, #0
   1922a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1922e:	4b28      	ldr	r3, [pc, #160]	; (192d0 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb4>)
   19230:	4a28      	ldr	r2, [pc, #160]	; (192d4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
   19232:	9301      	str	r3, [sp, #4]
   19234:	4b28      	ldr	r3, [pc, #160]	; (192d8 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
   19236:	4929      	ldr	r1, [pc, #164]	; (192dc <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>)
   19238:	9300      	str	r3, [sp, #0]
   1923a:	6944      	ldr	r4, [r0, #20]
   1923c:	232c      	movs	r3, #44	; 0x2c
   1923e:	47a0      	blx	r4
  TF_LITE_ENSURE(context,
   19240:	2301      	movs	r3, #1
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
   19242:	4618      	mov	r0, r3
   19244:	b005      	add	sp, #20
   19246:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TfLiteType input_type = GetInput(context, node, 0)->type;
   19248:	680a      	ldr	r2, [r1, #0]
   1924a:	6886      	ldr	r6, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1924c:	6855      	ldr	r5, [r2, #4]
   1924e:	01ad      	lsls	r5, r5, #6
   19250:	5d75      	ldrb	r5, [r6, r5]
  TF_LITE_ENSURE(context,
   19252:	1e6f      	subs	r7, r5, #1
   19254:	2f03      	cmp	r7, #3
   19256:	d909      	bls.n	1926c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x50>
   19258:	2d09      	cmp	r5, #9
   1925a:	d007      	beq.n	1926c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x50>
   1925c:	4b20      	ldr	r3, [pc, #128]	; (192e0 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>)
   1925e:	4a1d      	ldr	r2, [pc, #116]	; (192d4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
   19260:	9300      	str	r3, [sp, #0]
   19262:	6944      	ldr	r4, [r0, #20]
   19264:	232d      	movs	r3, #45	; 0x2d
   19266:	491f      	ldr	r1, [pc, #124]	; (192e4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
   19268:	47a0      	blx	r4
   1926a:	e7e9      	b.n	19240 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return &context->tensors[node->outputs->data[index]];
   1926c:	6849      	ldr	r1, [r1, #4]
   1926e:	6849      	ldr	r1, [r1, #4]
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;
   19270:	0189      	lsls	r1, r1, #6
   19272:	5c71      	ldrb	r1, [r6, r1]
  TF_LITE_ENSURE_EQ(context, output_type, input_type);
   19274:	428d      	cmp	r5, r1
   19276:	d00c      	beq.n	19292 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x76>
   19278:	4b1b      	ldr	r3, [pc, #108]	; (192e8 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>)
   1927a:	e9cd 1502 	strd	r1, r5, [sp, #8]
   1927e:	9301      	str	r3, [sp, #4]
   19280:	4b1a      	ldr	r3, [pc, #104]	; (192ec <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
   19282:	4620      	mov	r0, r4
   19284:	9300      	str	r3, [sp, #0]
   19286:	6965      	ldr	r5, [r4, #20]
   19288:	2333      	movs	r3, #51	; 0x33
   1928a:	4a12      	ldr	r2, [pc, #72]	; (192d4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
   1928c:	4913      	ldr	r1, [pc, #76]	; (192dc <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc0>)
   1928e:	47a8      	blx	r5
   19290:	e7d6      	b.n	19240 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   19292:	6815      	ldr	r5, [r2, #0]
  TF_LITE_ENSURE(context, num_inputs <= kMaxInputNum);
   19294:	2d0a      	cmp	r5, #10
   19296:	dc10      	bgt.n	192ba <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x9e>
  for (int i = 0; i < num_inputs; ++i) {
   19298:	2000      	movs	r0, #0
   1929a:	1d11      	adds	r1, r2, #4
   1929c:	42a8      	cmp	r0, r5
   1929e:	dad0      	bge.n	19242 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
  return &context->tensors[node->inputs->data[index]];
   192a0:	f851 2b04 	ldr.w	r2, [r1], #4
    int num_dimensions = NumDimensions(input);
   192a4:	eb06 1282 	add.w	r2, r6, r2, lsl #6
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   192a8:	6892      	ldr	r2, [r2, #8]
   192aa:	6812      	ldr	r2, [r2, #0]
    if (num_dimensions > 4) {
   192ac:	2a04      	cmp	r2, #4
   192ae:	dd0d      	ble.n	192cc <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
      TF_LITE_KERNEL_LOG(
   192b0:	4620      	mov	r0, r4
   192b2:	6963      	ldr	r3, [r4, #20]
   192b4:	490e      	ldr	r1, [pc, #56]	; (192f0 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
   192b6:	4798      	blx	r3
      return kTfLiteError;
   192b8:	e7c2      	b.n	19240 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  TF_LITE_ENSURE(context, num_inputs <= kMaxInputNum);
   192ba:	4b0e      	ldr	r3, [pc, #56]	; (192f4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
   192bc:	4620      	mov	r0, r4
   192be:	9300      	str	r3, [sp, #0]
   192c0:	6965      	ldr	r5, [r4, #20]
   192c2:	2337      	movs	r3, #55	; 0x37
   192c4:	4a03      	ldr	r2, [pc, #12]	; (192d4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
   192c6:	4907      	ldr	r1, [pc, #28]	; (192e4 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
   192c8:	47a8      	blx	r5
   192ca:	e7b9      	b.n	19240 <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
  for (int i = 0; i < num_inputs; ++i) {
   192cc:	3001      	adds	r0, #1
   192ce:	e7e5      	b.n	1929c <_ZN6tflite3ops5micro13concatenation7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
   192d0:	00034bea 	.word	0x00034bea
   192d4:	00034bbb 	.word	0x00034bbb
   192d8:	00034bf9 	.word	0x00034bf9
   192dc:	00034aec 	.word	0x00034aec
   192e0:	00034c23 	.word	0x00034c23
   192e4:	00034c0c 	.word	0x00034c0c
   192e8:	00034cb7 	.word	0x00034cb7
   192ec:	00034cc2 	.word	0x00034cc2
   192f0:	00034ce9 	.word	0x00034ce9
   192f4:	00034cce 	.word	0x00034cce

000192f8 <_ZN6tflite3ops5micro22Register_CONCATENATIONEv>:
  return kTfLiteOk;
}

}  // namespace concatenation

TfLiteRegistration Register_CONCATENATION() {
   192f8:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/concatenation::Prepare,
          /*invoke=*/concatenation::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   192fa:	4604      	mov	r4, r0
TfLiteRegistration Register_CONCATENATION() {
   192fc:	4606      	mov	r6, r0
          /*version=*/0};
   192fe:	4d04      	ldr	r5, [pc, #16]	; (19310 <_ZN6tflite3ops5micro22Register_CONCATENATIONEv+0x18>)
   19300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   19302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19304:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   19308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1930c:	4630      	mov	r0, r6
   1930e:	bd70      	pop	{r4, r5, r6, pc}
   19310:	00031928 	.word	0x00031928

00019314 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   19314:	b538      	push	{r3, r4, r5, lr}
  return &context->tensors[node->outputs->data[index]];
   19316:	684b      	ldr	r3, [r1, #4]
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;
   19318:	6882      	ldr	r2, [r0, #8]
   1931a:	685b      	ldr	r3, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1931c:	4604      	mov	r4, r0
  TfLiteType output_type = GetOutput(context, node, kOutputTensor)->type;
   1931e:	019b      	lsls	r3, r3, #6
   19320:	5cd0      	ldrb	r0, [r2, r3]
  switch (output_type) {  // Already know in/outtypes are same.
   19322:	1e43      	subs	r3, r0, #1
   19324:	2b08      	cmp	r3, #8
   19326:	d81b      	bhi.n	19360 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
   19328:	e8df f003 	tbb	[pc, r3]
   1932c:	160e0a05 	.word	0x160e0a05
   19330:	1a1a1a1a 	.word	0x1a1a1a1a
   19334:	12          	.byte	0x12
   19335:	00          	.byte	0x00
      EvalUnquantized<float>(context, node);
   19336:	4620      	mov	r0, r4
   19338:	f011 fa54 	bl	2a7e4 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode>
  return kTfLiteOk;
   1933c:	2000      	movs	r0, #0
}
   1933e:	bd38      	pop	{r3, r4, r5, pc}
      EvalUnquantized<int32_t>(context, node);
   19340:	4620      	mov	r0, r4
   19342:	f011 fb33 	bl	2a9ac <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode>
   19346:	e7f9      	b.n	1933c <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      EvalQuantizedUInt8(context, node);
   19348:	4620      	mov	r0, r4
   1934a:	f011 f94c 	bl	2a5e6 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode>
      break;
   1934e:	e7f5      	b.n	1933c <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      EvalUnquantized<int8_t>(context, node);
   19350:	4620      	mov	r0, r4
   19352:	f011 fc0d 	bl	2ab70 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode>
      break;
   19356:	e7f1      	b.n	1933c <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      EvalUnquantized<int64_t>(context, node);
   19358:	4620      	mov	r0, r4
   1935a:	f011 fced 	bl	2ad38 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode>
      break;
   1935e:	e7ed      	b.n	1933c <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x28>
      TF_LITE_KERNEL_LOG(
   19360:	6965      	ldr	r5, [r4, #20]
   19362:	f7f3 fcaf 	bl	ccc4 <TfLiteTypeGetName>
   19366:	4903      	ldr	r1, [pc, #12]	; (19374 <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x60>)
   19368:	4602      	mov	r2, r0
   1936a:	4620      	mov	r0, r4
   1936c:	47a8      	blx	r5
      return kTfLiteError;
   1936e:	2001      	movs	r0, #1
   19370:	e7e5      	b.n	1933e <_ZN6tflite3ops5micro13concatenation4EvalEP13TfLiteContextP10TfLiteNode+0x2a>
   19372:	bf00      	nop
   19374:	00034d41 	.word	0x00034d41

00019378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>:
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
                                           quantized_multiplier);
}

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
   19378:	b570      	push	{r4, r5, r6, lr}
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
   1937a:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
  int right_shift = shift > 0 ? 0 : -shift;
   1937e:	2a00      	cmp	r2, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   19380:	fa00 f004 	lsl.w	r0, r0, r4
  int right_shift = shift > 0 ? 0 : -shift;
   19384:	bfcc      	ite	gt
   19386:	2200      	movgt	r2, #0
   19388:	4252      	negle	r2, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1938a:	4288      	cmp	r0, r1
   1938c:	d127      	bne.n	193de <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x66>
   1938e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   19392:	425e      	negs	r6, r3
   19394:	415e      	adcs	r6, r3
  std::int64_t ab_64 = a_64 * b_64;
   19396:	fb80 4501 	smull	r4, r5, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   1939a:	2c00      	cmp	r4, #0
   1939c:	f175 0300 	sbcs.w	r3, r5, #0
   193a0:	4b1c      	ldr	r3, [pc, #112]	; (19414 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x9c>)
   193a2:	bfa8      	it	ge
   193a4:	f04f 4380 	movge.w	r3, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   193a8:	b9de      	cbnz	r6, 193e2 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x6a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   193aa:	18e4      	adds	r4, r4, r3
   193ac:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
   193b0:	2c00      	cmp	r4, #0
   193b2:	f175 0300 	sbcs.w	r3, r5, #0
   193b6:	da06      	bge.n	193c6 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x4e>
   193b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   193bc:	18e4      	adds	r4, r4, r3
   193be:	f04f 0300 	mov.w	r3, #0
   193c2:	eb43 0505 	adc.w	r5, r3, r5
   193c6:	0fe1      	lsrs	r1, r4, #31
   193c8:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  assert(exponent >= 0);
   193cc:	2a00      	cmp	r2, #0
   193ce:	da0b      	bge.n	193e8 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x70>
   193d0:	f44f 71b3 	mov.w	r1, #358	; 0x166
   193d4:	4b10      	ldr	r3, [pc, #64]	; (19418 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa0>)
   193d6:	4a11      	ldr	r2, [pc, #68]	; (1941c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa4>)
  assert(exponent <= 31);
   193d8:	4811      	ldr	r0, [pc, #68]	; (19420 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa8>)
   193da:	f00d f849 	bl	26470 <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   193de:	2600      	movs	r6, #0
   193e0:	e7d9      	b.n	19396 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x1e>
   193e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   193e6:	e7f1      	b.n	193cc <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x54>
  assert(exponent <= 31);
   193e8:	2a1f      	cmp	r2, #31
   193ea:	dd04      	ble.n	193f6 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x7e>
   193ec:	f240 1167 	movw	r1, #359	; 0x167
   193f0:	4b0c      	ldr	r3, [pc, #48]	; (19424 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xac>)
   193f2:	4a0a      	ldr	r2, [pc, #40]	; (1941c <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0xa4>)
   193f4:	e7f0      	b.n	193d8 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii+0x60>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   193f6:	2301      	movs	r3, #1
   193f8:	4093      	lsls	r3, r2
   193fa:	3b01      	subs	r3, #1
  return a & b;
   193fc:	ea03 0001 	and.w	r0, r3, r1
  return a >> offset;
   19400:	105b      	asrs	r3, r3, #1
  return a + b;
   19402:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
  return a >> offset;
   19406:	fa41 f202 	asr.w	r2, r1, r2
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
}
   1940a:	4298      	cmp	r0, r3
   1940c:	bfd4      	ite	le
   1940e:	4610      	movle	r0, r2
   19410:	1c50      	addgt	r0, r2, #1
   19412:	bd70      	pop	{r4, r5, r6, pc}
   19414:	c0000001 	.word	0xc0000001
   19418:	00034982 	.word	0x00034982
   1941c:	00034990 	.word	0x00034990
   19420:	000349e5 	.word	0x000349e5
   19424:	00034a31 	.word	0x00034a31

00019428 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
   19428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1942c:	ed2d 8b04 	vpush	{d8-d9}
   19430:	461c      	mov	r4, r3
  const int stride_width = params.stride_width;
   19432:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
                 float* im2col_data) {
   19436:	b09b      	sub	sp, #108	; 0x6c
  const int stride_width = params.stride_width;
   19438:	930a      	str	r3, [sp, #40]	; 0x28
  const int stride_height = params.stride_height;
   1943a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
                 float* im2col_data) {
   1943e:	4688      	mov	r8, r1
  const int stride_height = params.stride_height;
   19440:	930b      	str	r3, [sp, #44]	; 0x2c
  const int dilation_width_factor = params.dilation_width_factor;
   19442:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  const int dilation_height_factor = params.dilation_height_factor;
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const float output_activation_min = params.float_activation_min;
   19446:	edd0 8a0c 	vldr	s17, [r0, #48]	; 0x30
  const int dilation_width_factor = params.dilation_width_factor;
   1944a:	930c      	str	r3, [sp, #48]	; 0x30
  const int dilation_height_factor = params.dilation_height_factor;
   1944c:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  const float output_activation_max = params.float_activation_max;
   19450:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
  const int dilation_height_factor = params.dilation_height_factor;
   19454:	930d      	str	r3, [sp, #52]	; 0x34
  const int pad_width = params.padding_values.width;
   19456:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
                 float* im2col_data) {
   1945a:	9e2b      	ldr	r6, [sp, #172]	; 0xac
  const int pad_width = params.padding_values.width;
   1945c:	930f      	str	r3, [sp, #60]	; 0x3c
  const int pad_height = params.padding_values.height;
   1945e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
                 float* im2col_data) {
   19462:	9219      	str	r2, [sp, #100]	; 0x64
  const int pad_height = params.padding_values.height;
   19464:	9310      	str	r3, [sp, #64]	; 0x40
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   19466:	680b      	ldr	r3, [r1, #0]
   19468:	2b04      	cmp	r3, #4
   1946a:	d001      	beq.n	19470 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x48>
   1946c:	f017 fcd9 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   19470:	6823      	ldr	r3, [r4, #0]
   19472:	2b04      	cmp	r3, #4
   19474:	d1fa      	bne.n	1946c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   19476:	6833      	ldr	r3, [r6, #0]
   19478:	2b04      	cmp	r3, #4
   1947a:	d1f7      	bne.n	1946c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1947c:	2300      	movs	r3, #0
   1947e:	4632      	mov	r2, r6
   19480:	4619      	mov	r1, r3
   19482:	4640      	mov	r0, r8
   19484:	f010 ff7e 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   19488:	2303      	movs	r3, #3
   1948a:	4622      	mov	r2, r4
   1948c:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1948e:	9011      	str	r0, [sp, #68]	; 0x44
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   19490:	4640      	mov	r0, r8
   19492:	f010 ff77 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   19496:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   19498:	9012      	str	r0, [sp, #72]	; 0x48
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   1949a:	4632      	mov	r2, r6
   1949c:	2100      	movs	r1, #0
   1949e:	4620      	mov	r0, r4
   194a0:	f010 ff70 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   194a4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   194a6:	9009      	str	r0, [sp, #36]	; 0x24
  if (bias_data) {
   194a8:	b12b      	cbz	r3, 194b6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x8e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   194aa:	9829      	ldr	r0, [sp, #164]	; 0xa4
   194ac:	f00e f945 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   194b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   194b2:	4298      	cmp	r0, r3
   194b4:	d1da      	bne.n	1946c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x44>
  }
  const int input_height = input_shape.Dims(1);
   194b6:	2101      	movs	r1, #1
   194b8:	4640      	mov	r0, r8
   194ba:	f00e f8b9 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   194be:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   194c0:	9013      	str	r0, [sp, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
   194c2:	4640      	mov	r0, r8
   194c4:	f00e f8b4 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   194c8:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   194ca:	9014      	str	r0, [sp, #80]	; 0x50
  const int filter_height = filter_shape.Dims(1);
   194cc:	4620      	mov	r0, r4
   194ce:	f00e f8af 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   194d2:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   194d4:	9015      	str	r0, [sp, #84]	; 0x54
  const int filter_width = filter_shape.Dims(2);
   194d6:	4620      	mov	r0, r4
   194d8:	f00e f8aa 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   194dc:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   194de:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_height = output_shape.Dims(1);
   194e0:	4630      	mov	r0, r6
   194e2:	f00e f8a5 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   194e6:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   194e8:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
   194ea:	4630      	mov	r0, r6
   194ec:	f00e f8a0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   194f0:	f04f 0900 	mov.w	r9, #0
                  total += (input_value * filter_value);
                }
              }
            }
          }
          float bias_value = 0.0f;
   194f4:	eddf 9a54 	vldr	s19, [pc, #336]	; 19648 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x220>
  const int output_width = output_shape.Dims(2);
   194f8:	9018      	str	r0, [sp, #96]	; 0x60
  for (int batch = 0; batch < batches; ++batch) {
   194fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   194fc:	4599      	cmp	r9, r3
   194fe:	f280 809e 	bge.w	1963e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x216>
   19502:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19504:	425b      	negs	r3, r3
   19506:	9308      	str	r3, [sp, #32]
    for (int out_y = 0; out_y < output_height; ++out_y) {
   19508:	2300      	movs	r3, #0
   1950a:	9304      	str	r3, [sp, #16]
   1950c:	9b04      	ldr	r3, [sp, #16]
   1950e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   19510:	4293      	cmp	r3, r2
   19512:	f280 8091 	bge.w	19638 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x210>
   19516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19518:	425b      	negs	r3, r3
   1951a:	9307      	str	r3, [sp, #28]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1951c:	2300      	movs	r3, #0
   1951e:	9305      	str	r3, [sp, #20]
   19520:	9b05      	ldr	r3, [sp, #20]
   19522:	9a18      	ldr	r2, [sp, #96]	; 0x60
   19524:	4293      	cmp	r3, r2
   19526:	da7f      	bge.n	19628 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x200>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   19528:	2500      	movs	r5, #0
   1952a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1952c:	429d      	cmp	r5, r3
   1952e:	da73      	bge.n	19618 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1f0>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19530:	2300      	movs	r3, #0
          float total = 0.f;
   19532:	ed9f 8a45 	vldr	s16, [pc, #276]	; 19648 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x220>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   19536:	f8dd a020 	ldr.w	sl, [sp, #32]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   1953a:	9306      	str	r3, [sp, #24]
   1953c:	9b06      	ldr	r3, [sp, #24]
   1953e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   19540:	4293      	cmp	r3, r2
   19542:	da42      	bge.n	195ca <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1a2>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19544:	f04f 0b00 	mov.w	fp, #0
                const int in_y =
   19548:	9f07      	ldr	r7, [sp, #28]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   1954a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1954c:	459b      	cmp	fp, r3
   1954e:	da36      	bge.n	195be <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x196>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   19550:	2300      	movs	r3, #0
   19552:	9303      	str	r3, [sp, #12]
   19554:	9b03      	ldr	r3, [sp, #12]
   19556:	9a12      	ldr	r2, [sp, #72]	; 0x48
   19558:	4293      	cmp	r3, r2
   1955a:	da2b      	bge.n	195b4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x18c>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   1955c:	2f00      	cmp	r7, #0
   1955e:	db26      	blt.n	195ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
   19560:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19562:	42bb      	cmp	r3, r7
   19564:	dd23      	ble.n	195ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
   19566:	f1ba 0f00 	cmp.w	sl, #0
   1956a:	db20      	blt.n	195ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
   1956c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1956e:	4553      	cmp	r3, sl
   19570:	dd1d      	ble.n	195ae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x186>
                  float input_value = input_data[Offset(
   19572:	9b03      	ldr	r3, [sp, #12]
   19574:	4652      	mov	r2, sl
   19576:	4649      	mov	r1, r9
   19578:	9300      	str	r3, [sp, #0]
   1957a:	4640      	mov	r0, r8
   1957c:	463b      	mov	r3, r7
   1957e:	f00e f919 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   19582:	9b03      	ldr	r3, [sp, #12]
   19584:	9a06      	ldr	r2, [sp, #24]
                  float input_value = input_data[Offset(
   19586:	900e      	str	r0, [sp, #56]	; 0x38
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   19588:	9300      	str	r3, [sp, #0]
   1958a:	4629      	mov	r1, r5
   1958c:	465b      	mov	r3, fp
   1958e:	4620      	mov	r0, r4
   19590:	f00e f910 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_shape, batch, in_y, in_x, in_channel)];
   19594:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19596:	9b19      	ldr	r3, [sp, #100]	; 0x64
   19598:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                                         filter_x, in_channel)];
   1959c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
                  total += (input_value * filter_value);
   1959e:	ed93 7a00 	vldr	s14, [r3]
                                         filter_x, in_channel)];
   195a2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                  total += (input_value * filter_value);
   195a6:	edd0 7a00 	vldr	s15, [r0]
   195aa:	eea7 8a27 	vfma.f32	s16, s14, s15
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   195ae:	9b03      	ldr	r3, [sp, #12]
   195b0:	3301      	adds	r3, #1
   195b2:	e7ce      	b.n	19552 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x12a>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   195b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   195b6:	f10b 0b01 	add.w	fp, fp, #1
   195ba:	441f      	add	r7, r3
   195bc:	e7c5      	b.n	1954a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   195be:	9b06      	ldr	r3, [sp, #24]
   195c0:	3301      	adds	r3, #1
   195c2:	9306      	str	r3, [sp, #24]
   195c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   195c6:	449a      	add	sl, r3
   195c8:	e7b8      	b.n	1953c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x114>
          if (bias_data) {
   195ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   195cc:	b30b      	cbz	r3, 19612 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1ea>
            bias_value = bias_data[out_channel];
   195ce:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   195d2:	edd3 7a00 	vldr	s15, [r3]
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   195d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
              ActivationFunctionWithMinMax(total + bias_value,
   195da:	ee38 8a27 	vadd.f32	s16, s16, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   195de:	9500      	str	r5, [sp, #0]
   195e0:	4649      	mov	r1, r9
   195e2:	4630      	mov	r0, r6
   195e4:	f00e f8e6 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
	return __b;
   195e8:	eeb4 8a68 	vcmp.f32	s16, s17
   195ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   195f0:	bf48      	it	mi
   195f2:	eeb0 8a68 	vmovmi.f32	s16, s17
	return __b;
   195f6:	eeb4 9a48 	vcmp.f32	s18, s16
   195fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   195fe:	bf48      	it	mi
   19600:	eeb0 8a49 	vmovmi.f32	s16, s18
   19604:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   19606:	3501      	adds	r5, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   19608:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1960c:	ed80 8a00 	vstr	s16, [r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   19610:	e78b      	b.n	1952a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x102>
          float bias_value = 0.0f;
   19612:	eef0 7a69 	vmov.f32	s15, s19
   19616:	e7de      	b.n	195d6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x1ae>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   19618:	9b05      	ldr	r3, [sp, #20]
   1961a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1961c:	3301      	adds	r3, #1
   1961e:	9305      	str	r3, [sp, #20]
   19620:	9b07      	ldr	r3, [sp, #28]
   19622:	4413      	add	r3, r2
   19624:	9307      	str	r3, [sp, #28]
   19626:	e77b      	b.n	19520 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xf8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   19628:	9b04      	ldr	r3, [sp, #16]
   1962a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1962c:	3301      	adds	r3, #1
   1962e:	9304      	str	r3, [sp, #16]
   19630:	9b08      	ldr	r3, [sp, #32]
   19632:	4413      	add	r3, r2
   19634:	9308      	str	r3, [sp, #32]
   19636:	e769      	b.n	1950c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xe4>
  for (int batch = 0; batch < batches; ++batch) {
   19638:	f109 0901 	add.w	r9, r9, #1
   1963c:	e75d      	b.n	194fa <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xd2>
                                           output_activation_max);
        }
      }
    }
  }
}
   1963e:	b01b      	add	sp, #108	; 0x6c
   19640:	ecbd 8b04 	vpop	{d8-d9}
   19644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19648:	00000000 	.word	0x00000000

0001964c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteConvParams* params, int width,
                             int height, int filter_width, int filter_height,
                             int out_width, int out_height,
                             const TfLiteType data_type, OpData* data) {
   1964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool has_bias = node->inputs->size == 3;
   19650:	f8d1 8000 	ldr.w	r8, [r1]
                             const TfLiteType data_type, OpData* data) {
   19654:	461f      	mov	r7, r3
  bool has_bias = node->inputs->size == 3;
   19656:	f8d8 3000 	ldr.w	r3, [r8]
                             const TfLiteType data_type, OpData* data) {
   1965a:	b091      	sub	sp, #68	; 0x44
  bool has_bias = node->inputs->size == 3;
   1965c:	930b      	str	r3, [sp, #44]	; 0x2c
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   1965e:	3b02      	subs	r3, #2
   19660:	2b01      	cmp	r3, #1
                             const TfLiteType data_type, OpData* data) {
   19662:	4606      	mov	r6, r0
   19664:	4615      	mov	r5, r2
   19666:	9c20      	ldr	r4, [sp, #128]	; 0x80
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   19668:	d90a      	bls.n	19680 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x34>
   1966a:	4b49      	ldr	r3, [pc, #292]	; (19790 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x144>)
   1966c:	4a49      	ldr	r2, [pc, #292]	; (19794 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x148>)
   1966e:	9300      	str	r3, [sp, #0]
   19670:	6944      	ldr	r4, [r0, #20]
   19672:	234f      	movs	r3, #79	; 0x4f
   19674:	4948      	ldr	r1, [pc, #288]	; (19798 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x14c>)
   19676:	47a0      	blx	r4
   19678:	2001      	movs	r0, #1
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }
  return kTfLiteOk;
}
   1967a:	b011      	add	sp, #68	; 0x44
   1967c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   19680:	684b      	ldr	r3, [r1, #4]
   19682:	930c      	str	r3, [sp, #48]	; 0x30
   19684:	681b      	ldr	r3, [r3, #0]
   19686:	2b01      	cmp	r3, #1
   19688:	d00c      	beq.n	196a4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x58>
   1968a:	2401      	movs	r4, #1
   1968c:	e9cd 3402 	strd	r3, r4, [sp, #8]
   19690:	4b42      	ldr	r3, [pc, #264]	; (1979c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x150>)
   19692:	4a40      	ldr	r2, [pc, #256]	; (19794 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x148>)
   19694:	9301      	str	r3, [sp, #4]
   19696:	4b42      	ldr	r3, [pc, #264]	; (197a0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x154>)
   19698:	4942      	ldr	r1, [pc, #264]	; (197a4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x158>)
   1969a:	9300      	str	r3, [sp, #0]
   1969c:	6945      	ldr	r5, [r0, #20]
   1969e:	2350      	movs	r3, #80	; 0x50
   196a0:	47a8      	blx	r5
   196a2:	e7e9      	b.n	19678 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2c>
      params->dilation_height_factor, params->dilation_width_factor, height,
   196a4:	6953      	ldr	r3, [r2, #20]
  auto padding = params->padding;
   196a6:	f892 b000 	ldrb.w	fp, [r2]
      params->dilation_height_factor, params->dilation_width_factor, height,
   196aa:	930d      	str	r3, [sp, #52]	; 0x34
   196ac:	6913      	ldr	r3, [r2, #16]
      params->stride_height, params->stride_width,
   196ae:	e9d2 9a01 	ldrd	r9, sl, [r2, #4]

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   196b2:	4639      	mov	r1, r7
   196b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
      params->dilation_height_factor, params->dilation_width_factor, height,
   196b6:	930e      	str	r3, [sp, #56]	; 0x38
   196b8:	9300      	str	r3, [sp, #0]
   196ba:	4658      	mov	r0, fp
   196bc:	464b      	mov	r3, r9
   196be:	f011 fdc3 	bl	2b248 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   196c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   196c4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   196c6:	991a      	ldr	r1, [sp, #104]	; 0x68
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   196c8:	900f      	str	r0, [sp, #60]	; 0x3c
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   196ca:	9300      	str	r3, [sp, #0]
   196cc:	4658      	mov	r0, fp
   196ce:	4653      	mov	r3, sl
   196d0:	f011 fdba 	bl	2b248 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   196d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
  int total_padding =
   196d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   196d8:	990d      	ldr	r1, [sp, #52]	; 0x34
   196da:	f1c2 0201 	rsb	r2, r2, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   196de:	3b01      	subs	r3, #1
  int total_padding =
   196e0:	fb01 2303 	mla	r3, r1, r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
   196e4:	3801      	subs	r0, #1
  int total_padding =
   196e6:	fb0a 3a00 	mla	sl, sl, r0, r3
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   196ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
  int total_padding =
   196ec:	f1c7 0701 	rsb	r7, r7, #1
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   196f0:	1e5a      	subs	r2, r3, #1
  int total_padding =
   196f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  total_padding = total_padding > 0 ? total_padding : 0;
   196f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  int total_padding =
   196f8:	fb03 7702 	mla	r7, r3, r2, r7
      ((out_size - 1) * stride + effective_filter_size - in_size);
   196fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   196fe:	1e58      	subs	r0, r3, #1
  int total_padding =
   19700:	fb09 7900 	mla	r9, r9, r0, r7
  total_padding = total_padding > 0 ? total_padding : 0;
   19704:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  return total_padding / 2;
   19708:	ea4f 0369 	mov.w	r3, r9, asr #1
      width, filter_height, filter_width, padding, &out_height, &out_width);
   1970c:	6023      	str	r3, [r4, #0]
   1970e:	ea4f 036a 	mov.w	r3, sl, asr #1
   19712:	6063      	str	r3, [r4, #4]
  if (data_type != kTfLiteFloat32) {
   19714:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
  *offset = total_padding % 2;
   19718:	f009 0701 	and.w	r7, r9, #1
   1971c:	f00a 0001 	and.w	r0, sl, #1
   19720:	2b01      	cmp	r3, #1
      width, filter_height, filter_width, padding, &out_height, &out_width);
   19722:	60a7      	str	r7, [r4, #8]
   19724:	60e0      	str	r0, [r4, #12]
  if (data_type != kTfLiteFloat32) {
   19726:	d030      	beq.n	1978a <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x13e>
  const bool use_tensor = index < node->inputs->size &&
   19728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1972a:	68b0      	ldr	r0, [r6, #8]
  return &context->tensors[node->inputs->data[index]];
   1972c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   19730:	f8d8 2008 	ldr.w	r2, [r8, #8]
  const bool use_tensor = index < node->inputs->size &&
   19734:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
   19736:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   1973a:	eb00 1282 	add.w	r2, r0, r2, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   1973e:	dd22      	ble.n	19786 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x13a>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   19740:	f8d8 300c 	ldr.w	r3, [r8, #12]
  const bool use_tensor = index < node->inputs->size &&
   19744:	1c5f      	adds	r7, r3, #1
   19746:	d01e      	beq.n	19786 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x13a>
    return &context->tensors[node->inputs->data[index]];
   19748:	eb00 1383 	add.w	r3, r0, r3, lsl #6
    int output_channels = filter->dims->data[kConvQuantizedDimension];
   1974c:	6897      	ldr	r7, [r2, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
   1974e:	350c      	adds	r5, #12
   19750:	687f      	ldr	r7, [r7, #4]
   19752:	9708      	str	r7, [sp, #32]
   19754:	69e7      	ldr	r7, [r4, #28]
   19756:	9707      	str	r7, [sp, #28]
   19758:	69a7      	ldr	r7, [r4, #24]
   1975a:	9501      	str	r5, [sp, #4]
   1975c:	9706      	str	r7, [sp, #24]
   1975e:	f104 0724 	add.w	r7, r4, #36	; 0x24
   19762:	9705      	str	r7, [sp, #20]
   19764:	f104 0720 	add.w	r7, r4, #32
   19768:	9704      	str	r7, [sp, #16]
   1976a:	f104 0714 	add.w	r7, r4, #20
   1976e:	3410      	adds	r4, #16
   19770:	9402      	str	r4, [sp, #8]
  return &context->tensors[node->outputs->data[index]];
   19772:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   19774:	9703      	str	r7, [sp, #12]
   19776:	6864      	ldr	r4, [r4, #4]
   19778:	eb00 1084 	add.w	r0, r0, r4, lsl #6
   1977c:	9000      	str	r0, [sp, #0]
   1977e:	4630      	mov	r0, r6
   19780:	f007 fd02 	bl	21188 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
   19784:	e779      	b.n	1967a <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2e>
  return nullptr;
   19786:	2300      	movs	r3, #0
   19788:	e7e0      	b.n	1974c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x100>
  return kTfLiteOk;
   1978a:	2000      	movs	r0, #0
   1978c:	e775      	b.n	1967a <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x2e>
   1978e:	bf00      	nop
   19790:	00034d9e 	.word	0x00034d9e
   19794:	00034d78 	.word	0x00034d78
   19798:	00034c0c 	.word	0x00034c0c
   1979c:	00035884 	.word	0x00035884
   197a0:	00034dc2 	.word	0x00034dc2
   197a4:	00034aec 	.word	0x00034aec

000197a8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   197a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   197ac:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   197ae:	4604      	mov	r4, r0
   197b0:	460d      	mov	r5, r1
   197b2:	b091      	sub	sp, #68	; 0x44
  TFLITE_DCHECK(node->user_data != nullptr);
   197b4:	b90f      	cbnz	r7, 197ba <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
   197b6:	f017 fb34 	bl	30e22 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   197ba:	f8d1 8014 	ldr.w	r8, [r1, #20]
   197be:	f1b8 0f00 	cmp.w	r8, #0
   197c2:	d0f8      	beq.n	197b6 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe>

  OpData* data = static_cast<OpData*>(node->user_data);
  const auto params = static_cast<const TfLiteConvParams*>(node->builtin_data);

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   197c4:	680a      	ldr	r2, [r1, #0]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   197c6:	f8d0 a008 	ldr.w	sl, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   197ca:	6853      	ldr	r3, [r2, #4]
   197cc:	6896      	ldr	r6, [r2, #8]
   197ce:	0199      	lsls	r1, r3, #6
   197d0:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);

  int input_width = input->dims->data[2];
   197d4:	689b      	ldr	r3, [r3, #8]
   197d6:	eb0a 1686 	add.w	r6, sl, r6, lsl #6
  int input_height = input->dims->data[1];
   197da:	e9d3 3902 	ldrd	r3, r9, [r3, #8]
   197de:	9309      	str	r3, [sp, #36]	; 0x24
  int filter_width = filter->dims->data[2];
   197e0:	68b3      	ldr	r3, [r6, #8]
   197e2:	910e      	str	r1, [sp, #56]	; 0x38
   197e4:	68da      	ldr	r2, [r3, #12]
   197e6:	920a      	str	r2, [sp, #40]	; 0x28
  int filter_height = filter->dims->data[1];
   197e8:	689a      	ldr	r2, [r3, #8]
   197ea:	920b      	str	r2, [sp, #44]	; 0x2c
  return &context->tensors[node->outputs->data[index]];
   197ec:	686a      	ldr	r2, [r5, #4]
   197ee:	6852      	ldr	r2, [r2, #4]
  int output_width = output->dims->data[2];
   197f0:	eb0a 1282 	add.w	r2, sl, r2, lsl #6
   197f4:	6892      	ldr	r2, [r2, #8]
   197f6:	68d1      	ldr	r1, [r2, #12]
  int output_height = output->dims->data[1];
   197f8:	6892      	ldr	r2, [r2, #8]
  int output_width = output->dims->data[2];
   197fa:	910c      	str	r1, [sp, #48]	; 0x30

  // Dynimically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
   197fc:	6859      	ldr	r1, [r3, #4]
  int output_height = output->dims->data[1];
   197fe:	920d      	str	r2, [sp, #52]	; 0x34
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
   19800:	0089      	lsls	r1, r1, #2
   19802:	6b83      	ldr	r3, [r0, #56]	; 0x38
   19804:	f107 0218 	add.w	r2, r7, #24
   19808:	910f      	str	r1, [sp, #60]	; 0x3c
   1980a:	4798      	blx	r3
   1980c:	4683      	mov	fp, r0
   1980e:	b9f8      	cbnz	r0, 19850 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_multiplier)));
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
   19810:	4620      	mov	r0, r4
   19812:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19814:	990f      	ldr	r1, [sp, #60]	; 0x3c
   19816:	f107 021c 	add.w	r2, r7, #28
   1981a:	4798      	blx	r3
   1981c:	4683      	mov	fp, r0
   1981e:	b9b8      	cbnz	r0, 19850 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_shift)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
   19820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19822:	f81a 2003 	ldrb.w	r2, [sl, r3]
   19826:	2a09      	cmp	r2, #9
   19828:	d14b      	bne.n	198c2 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   1982a:	f896 b030 	ldrb.w	fp, [r6, #48]	; 0x30
   1982e:	f1bb 0f01 	cmp.w	fp, #1
   19832:	d011      	beq.n	19858 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
   19834:	2501      	movs	r5, #1
   19836:	4b2d      	ldr	r3, [pc, #180]	; (198ec <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   19838:	e9cd b502 	strd	fp, r5, [sp, #8]
   1983c:	9301      	str	r3, [sp, #4]
   1983e:	4b2c      	ldr	r3, [pc, #176]	; (198f0 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   19840:	4620      	mov	r0, r4
   19842:	9300      	str	r3, [sp, #0]
   19844:	6966      	ldr	r6, [r4, #20]
   19846:	2395      	movs	r3, #149	; 0x95
   19848:	4a2a      	ldr	r2, [pc, #168]	; (198f4 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
   1984a:	492b      	ldr	r1, [pc, #172]	; (198f8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
   1984c:	47b0      	blx	r6
   1984e:	46ab      	mov	fp, r5
  }

  return CalculateOpData(context, node, params, input_width, input_height,
                         filter_width, filter_height, output_width,
                         output_height, input->type, data);
}  // namespace conv
   19850:	4658      	mov	r0, fp
   19852:	b011      	add	sp, #68	; 0x44
   19854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const auto* affine_quantization =
   19858:	6b73      	ldr	r3, [r6, #52]	; 0x34
    TF_LITE_ENSURE(context, affine_quantization);
   1985a:	b943      	cbnz	r3, 1986e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
   1985c:	4b27      	ldr	r3, [pc, #156]	; (198fc <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
   1985e:	6965      	ldr	r5, [r4, #20]
   19860:	9300      	str	r3, [sp, #0]
   19862:	239a      	movs	r3, #154	; 0x9a
    TF_LITE_ENSURE(context, affine_quantization->scale);
   19864:	4620      	mov	r0, r4
   19866:	4a23      	ldr	r2, [pc, #140]	; (198f4 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
   19868:	4925      	ldr	r1, [pc, #148]	; (19900 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
   1986a:	47a8      	blx	r5
   1986c:	e7f0      	b.n	19850 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
   1986e:	6818      	ldr	r0, [r3, #0]
   19870:	b920      	cbnz	r0, 1987c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>
   19872:	4b24      	ldr	r3, [pc, #144]	; (19904 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
   19874:	6965      	ldr	r5, [r4, #20]
   19876:	9300      	str	r3, [sp, #0]
   19878:	239b      	movs	r3, #155	; 0x9b
   1987a:	e7f3      	b.n	19864 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
   1987c:	6859      	ldr	r1, [r3, #4]
   1987e:	b921      	cbnz	r1, 1988a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe2>
   19880:	4b21      	ldr	r3, [pc, #132]	; (19908 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
   19882:	6965      	ldr	r5, [r4, #20]
   19884:	9300      	str	r3, [sp, #0]
   19886:	239c      	movs	r3, #156	; 0x9c
   19888:	e7ec      	b.n	19864 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
    TF_LITE_ENSURE(context,
   1988a:	6803      	ldr	r3, [r0, #0]
   1988c:	2b01      	cmp	r3, #1
   1988e:	d008      	beq.n	198a2 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xfa>
   19890:	68b0      	ldr	r0, [r6, #8]
   19892:	6840      	ldr	r0, [r0, #4]
   19894:	4283      	cmp	r3, r0
   19896:	d004      	beq.n	198a2 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xfa>
   19898:	4b1c      	ldr	r3, [pc, #112]	; (1990c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
   1989a:	6965      	ldr	r5, [r4, #20]
   1989c:	9300      	str	r3, [sp, #0]
   1989e:	239e      	movs	r3, #158	; 0x9e
   198a0:	e7e0      	b.n	19864 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
   198a2:	6809      	ldr	r1, [r1, #0]
   198a4:	428b      	cmp	r3, r1
   198a6:	d00c      	beq.n	198c2 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
   198a8:	e9cd 3102 	strd	r3, r1, [sp, #8]
   198ac:	4b18      	ldr	r3, [pc, #96]	; (19910 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
   198ae:	4620      	mov	r0, r4
   198b0:	9301      	str	r3, [sp, #4]
   198b2:	4b18      	ldr	r3, [pc, #96]	; (19914 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
   198b4:	6965      	ldr	r5, [r4, #20]
   198b6:	9300      	str	r3, [sp, #0]
   198b8:	4a0e      	ldr	r2, [pc, #56]	; (198f4 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
   198ba:	23a2      	movs	r3, #162	; 0xa2
   198bc:	490e      	ldr	r1, [pc, #56]	; (198f8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
   198be:	47a8      	blx	r5
   198c0:	e7c6      	b.n	19850 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
  return CalculateOpData(context, node, params, input_width, input_height,
   198c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   198c4:	e9cd 2705 	strd	r2, r7, [sp, #20]
   198c8:	9304      	str	r3, [sp, #16]
   198ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   198cc:	4642      	mov	r2, r8
   198ce:	9303      	str	r3, [sp, #12]
   198d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   198d2:	4629      	mov	r1, r5
   198d4:	9302      	str	r3, [sp, #8]
   198d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   198d8:	4620      	mov	r0, r4
   198da:	9301      	str	r3, [sp, #4]
   198dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   198de:	9300      	str	r3, [sp, #0]
   198e0:	464b      	mov	r3, r9
   198e2:	f7ff feb3 	bl	1964c <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>
   198e6:	4683      	mov	fp, r0
                         output_height, input->type, data);
   198e8:	e7b2      	b.n	19850 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
   198ea:	bf00      	nop
   198ec:	00034dd6 	.word	0x00034dd6
   198f0:	00034df0 	.word	0x00034df0
   198f4:	00034d78 	.word	0x00034d78
   198f8:	00034aec 	.word	0x00034aec
   198fc:	00034e0a 	.word	0x00034e0a
   19900:	00034c0c 	.word	0x00034c0c
   19904:	00034e1e 	.word	0x00034e1e
   19908:	00034e39 	.word	0x00034e39
   1990c:	00034e59 	.word	0x00034e59
   19910:	00034ed2 	.word	0x00034ed2
   19914:	00034ef8 	.word	0x00034ef8

00019918 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteConvParams* params, const OpData& data,
               const TfLiteTensor* input, const TfLiteTensor* filter,
               const TfLiteTensor* bias, TfLiteTensor* im2col,
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   19918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
   1991c:	7b11      	ldrb	r1, [r2, #12]
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   1991e:	b0b5      	sub	sp, #212	; 0xd4
  if (activation == kTfLiteActRelu) {
   19920:	2901      	cmp	r1, #1
   19922:	9f43      	ldr	r7, [sp, #268]	; 0x10c
   19924:	e9dd 453e 	ldrd	r4, r5, [sp, #248]	; 0xf8
   19928:	e9dd 6840 	ldrd	r6, r8, [sp, #256]	; 0x100
   1992c:	d072      	beq.n	19a14 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xfc>
  } else if (activation == kTfLiteActRelu6) {
   1992e:	2903      	cmp	r1, #3
   19930:	d075      	beq.n	19a1e <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x106>
    *activation_max = std::numeric_limits<T>::max();
   19932:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 19a24 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x10c>
   19936:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1993a:	2902      	cmp	r1, #2
   1993c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 19a28 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x110>
   19940:	fe47 7a87 	vseleq.f32	s15, s15, s14
   19944:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   19948:	fe07 7a26 	vseleq.f32	s14, s14, s13
                           &output_activation_max);
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
   1994c:	7811      	ldrb	r1, [r2, #0]
  switch (padding) {
   1994e:	2901      	cmp	r1, #1
   19950:	d002      	beq.n	19958 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x40>
      return PaddingType::kNone;
   19952:	2902      	cmp	r1, #2
   19954:	bf18      	it	ne
   19956:	2100      	movne	r1, #0
  op_params.padding_type = RuntimePaddingType(params->padding);
   19958:	f88d 1098 	strb.w	r1, [sp, #152]	; 0x98
  op_params.padding_values.width = data.padding.width;
   1995c:	6819      	ldr	r1, [r3, #0]
  op_params.padding_values.height = data.padding.height;
   1995e:	685b      	ldr	r3, [r3, #4]
  op_params.padding_values.width = data.padding.width;
   19960:	f8ad 109a 	strh.w	r1, [sp, #154]	; 0x9a
  op_params.padding_values.height = data.padding.height;
   19964:	f8ad 309c 	strh.w	r3, [sp, #156]	; 0x9c
  op_params.stride_width = params->stride_width;
   19968:	6853      	ldr	r3, [r2, #4]
  op_params.dilation_width_factor = params->dilation_width_factor;
  op_params.dilation_height_factor = params->dilation_height_factor;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;

  reference_ops::Conv(op_params, GetTensorShape(input),
   1996a:	4621      	mov	r1, r4
  op_params.stride_width = params->stride_width;
   1996c:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
  op_params.stride_height = params->stride_height;
   19970:	6893      	ldr	r3, [r2, #8]
  reference_ops::Conv(op_params, GetTensorShape(input),
   19972:	a808      	add	r0, sp, #32
  op_params.stride_height = params->stride_height;
   19974:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
  op_params.dilation_width_factor = params->dilation_width_factor;
   19978:	6913      	ldr	r3, [r2, #16]
  op_params.float_activation_min = output_activation_min;
   1997a:	ed8d 7a32 	vstr	s14, [sp, #200]	; 0xc8
  op_params.dilation_width_factor = params->dilation_width_factor;
   1997e:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
  op_params.dilation_height_factor = params->dilation_height_factor;
   19982:	6953      	ldr	r3, [r2, #20]
  op_params.float_activation_max = output_activation_max;
   19984:	edcd 7a33 	vstr	s15, [sp, #204]	; 0xcc
  op_params.dilation_height_factor = params->dilation_height_factor;
   19988:	f8ad 30a8 	strh.w	r3, [sp, #168]	; 0xa8
  reference_ops::Conv(op_params, GetTensorShape(input),
   1998c:	f00d fe8a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   19990:	b104      	cbz	r4, 19994 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x7c>
   19992:	6864      	ldr	r4, [r4, #4]
                      GetTensorData<float>(input), GetTensorShape(filter),
   19994:	4629      	mov	r1, r5
   19996:	a80e      	add	r0, sp, #56	; 0x38
   19998:	f00d fe84 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1999c:	b105      	cbz	r5, 199a0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x88>
   1999e:	686d      	ldr	r5, [r5, #4]
                      GetTensorData<float>(filter), GetTensorShape(bias),
   199a0:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   199a4:	4631      	mov	r1, r6
   199a6:	4648      	mov	r0, r9
   199a8:	f00d fe7c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   199ac:	b106      	cbz	r6, 199b0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x98>
   199ae:	6876      	ldr	r6, [r6, #4]
                      GetTensorData<float>(bias), GetTensorShape(output),
   199b0:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   199b4:	4639      	mov	r1, r7
   199b6:	4650      	mov	r0, sl
   199b8:	f00d fe74 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   199bc:	b107      	cbz	r7, 199c0 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xa8>
   199be:	687f      	ldr	r7, [r7, #4]
                      GetTensorData<float>(output), GetTensorShape(im2col),
   199c0:	f10d 0b80 	add.w	fp, sp, #128	; 0x80
   199c4:	4641      	mov	r1, r8
   199c6:	4658      	mov	r0, fp
   199c8:	f00d fe6c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   199cc:	f1b8 0f00 	cmp.w	r8, #0
   199d0:	d001      	beq.n	199d6 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xbe>
   199d2:	f8d8 8004 	ldr.w	r8, [r8, #4]
  reference_ops::Conv(op_params, GetTensorShape(input),
   199d6:	4622      	mov	r2, r4
   199d8:	ab0e      	add	r3, sp, #56	; 0x38
   199da:	a908      	add	r1, sp, #32
   199dc:	a826      	add	r0, sp, #152	; 0x98
   199de:	e9cd b805 	strd	fp, r8, [sp, #20]
   199e2:	e9cd a703 	strd	sl, r7, [sp, #12]
   199e6:	e9cd 9601 	strd	r9, r6, [sp, #4]
   199ea:	9500      	str	r5, [sp, #0]
   199ec:	f7ff fd1c 	bl	19428 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
                      GetTensorData<float>(output), GetTensorShape(im2col),
   199f0:	4658      	mov	r0, fp
   199f2:	f00d fe12 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(bias), GetTensorShape(output),
   199f6:	4650      	mov	r0, sl
   199f8:	f00d fe0f 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(filter), GetTensorShape(bias),
   199fc:	4648      	mov	r0, r9
   199fe:	f00d fe0c 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(input), GetTensorShape(filter),
   19a02:	a80e      	add	r0, sp, #56	; 0x38
   19a04:	f00d fe09 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
   19a08:	a808      	add	r0, sp, #32
   19a0a:	f00d fe06 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(im2col));
}
   19a0e:	b035      	add	sp, #212	; 0xd4
   19a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *activation_max = std::numeric_limits<T>::max();
   19a14:	eddf 7a03 	vldr	s15, [pc, #12]	; 19a24 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x10c>
    *activation_min = 0;
   19a18:	ed9f 7a04 	vldr	s14, [pc, #16]	; 19a2c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x114>
   19a1c:	e796      	b.n	1994c <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x34>
    *activation_max = 6;
   19a1e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   19a22:	e7f9      	b.n	19a18 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x100>
   19a24:	7f7fffff 	.word	0x7f7fffff
   19a28:	ff7fffff 	.word	0xff7fffff
   19a2c:	00000000 	.word	0x00000000

00019a30 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->outputs->data[index]];
   19a30:	684b      	ldr	r3, [r1, #4]

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   19a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a36:	685b      	ldr	r3, [r3, #4]
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   19a38:	6884      	ldr	r4, [r0, #8]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   19a3a:	680e      	ldr	r6, [r1, #0]
   19a3c:	eb04 1c83 	add.w	ip, r4, r3, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   19a40:	6833      	ldr	r3, [r6, #0]
  return &context->tensors[node->inputs->data[index]];
   19a42:	6877      	ldr	r7, [r6, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   19a44:	4605      	mov	r5, r0
   19a46:	68b0      	ldr	r0, [r6, #8]
  const bool use_tensor = index < node->inputs->size &&
   19a48:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
   19a4a:	ea4f 1887 	mov.w	r8, r7, lsl #6
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
   19a4e:	694a      	ldr	r2, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   19a50:	b086      	sub	sp, #24
   19a52:	eb04 1787 	add.w	r7, r4, r7, lsl #6
   19a56:	eb04 1080 	add.w	r0, r4, r0, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   19a5a:	dd08      	ble.n	19a6e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   19a5c:	68f6      	ldr	r6, [r6, #12]
  const bool use_tensor = index < node->inputs->size &&
   19a5e:	1c73      	adds	r3, r6, #1
   19a60:	d005      	beq.n	19a6e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
    return &context->tensors[node->inputs->data[index]];
   19a62:	eb04 1686 	add.w	r6, r4, r6, lsl #6
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
   19a66:	690b      	ldr	r3, [r1, #16]
   19a68:	b91b      	cbnz	r3, 19a72 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x42>
   19a6a:	f017 f9da 	bl	30e22 <abort>
  return nullptr;
   19a6e:	2600      	movs	r6, #0
   19a70:	e7f9      	b.n	19a66 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x36>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  switch (input->type) {  // Already know in/out types are same.
   19a72:	f814 e008 	ldrb.w	lr, [r4, r8]
   19a76:	f1be 0f03 	cmp.w	lr, #3
   19a7a:	d01e      	beq.n	19aba <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x8a>
   19a7c:	f1be 0f09 	cmp.w	lr, #9
   19a80:	d011      	beq.n	19aa6 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x76>
   19a82:	f1be 0f01 	cmp.w	lr, #1
   19a86:	d124      	bne.n	19ad2 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xa2>
    case kTfLiteFloat32:
      EvalFloat(context, node, params, data, input, filter, bias, nullptr,
   19a88:	2400      	movs	r4, #0
   19a8a:	e9cd 0601 	strd	r0, r6, [sp, #4]
   19a8e:	e9cd 4403 	strd	r4, r4, [sp, #12]
   19a92:	4628      	mov	r0, r5
   19a94:	f8cd c014 	str.w	ip, [sp, #20]
   19a98:	9700      	str	r7, [sp, #0]
   19a9a:	f7ff ff3d 	bl	19918 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   19a9e:	4620      	mov	r0, r4
   19aa0:	b006      	add	sp, #24
   19aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
   19aa6:	2400      	movs	r4, #0
   19aa8:	e9cd 0601 	strd	r0, r6, [sp, #4]
   19aac:	e9cd c403 	strd	ip, r4, [sp, #12]
   19ab0:	4628      	mov	r0, r5
   19ab2:	9700      	str	r7, [sp, #0]
   19ab4:	f011 fc55 	bl	2b362 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>
      break;
   19ab8:	e7f1      	b.n	19a9e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
      EvalQuantized(context, node, params, data, input, filter, bias, nullptr,
   19aba:	2400      	movs	r4, #0
   19abc:	e9cd 0601 	strd	r0, r6, [sp, #4]
   19ac0:	e9cd 4403 	strd	r4, r4, [sp, #12]
   19ac4:	4628      	mov	r0, r5
   19ac6:	f8cd c014 	str.w	ip, [sp, #20]
   19aca:	9700      	str	r7, [sp, #0]
   19acc:	f011 fbce 	bl	2b26c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
      break;
   19ad0:	e7e5      	b.n	19a9e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   19ad2:	4670      	mov	r0, lr
   19ad4:	696e      	ldr	r6, [r5, #20]
   19ad6:	f7f3 f8f5 	bl	ccc4 <TfLiteTypeGetName>
   19ada:	f814 3008 	ldrb.w	r3, [r4, r8]
   19ade:	4602      	mov	r2, r0
   19ae0:	4902      	ldr	r1, [pc, #8]	; (19aec <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
   19ae2:	4628      	mov	r0, r5
   19ae4:	47b0      	blx	r6
      return kTfLiteError;
   19ae6:	2401      	movs	r4, #1
   19ae8:	e7d9      	b.n	19a9e <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
   19aea:	bf00      	nop
   19aec:	00034a40 	.word	0x00034a40

00019af0 <_ZN6tflite3ops5micro16Register_CONV_2DEv>:

}  // namespace conv

TfLiteRegistration Register_CONV_2D() {
   19af0:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/conv::Prepare,
          /*invoke=*/conv::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   19af2:	4604      	mov	r4, r0
TfLiteRegistration Register_CONV_2D() {
   19af4:	4606      	mov	r6, r0
          /*version=*/0};
   19af6:	4d04      	ldr	r5, [pc, #16]	; (19b08 <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x18>)
   19af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   19afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19afc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   19b00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   19b04:	4630      	mov	r0, r6
   19b06:	bd70      	pop	{r4, r5, r6, pc}
   19b08:	00031948 	.word	0x00031948

00019b0c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void DepthwiseConv(
    const DepthwiseParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& filter_shape,
    const float* filter_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
   19b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b10:	ed2d 8b04 	vpush	{d8-d9}
   19b14:	469a      	mov	sl, r3
  const int stride_width = params.stride_width;
   19b16:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    float* output_data) {
   19b1a:	b09b      	sub	sp, #108	; 0x6c
  const int stride_width = params.stride_width;
   19b1c:	930b      	str	r3, [sp, #44]	; 0x2c
  const int stride_height = params.stride_height;
   19b1e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    float* output_data) {
   19b22:	460c      	mov	r4, r1
  const int stride_height = params.stride_height;
   19b24:	930c      	str	r3, [sp, #48]	; 0x30
  const int dilation_width_factor = params.dilation_width_factor;
   19b26:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  const int dilation_height_factor = params.dilation_height_factor;
  const int pad_width = params.padding_values.width;
  const int pad_height = params.padding_values.height;
  const int depth_multiplier = params.depth_multiplier;
  const float output_activation_min = params.float_activation_min;
   19b2a:	edd0 8a0c 	vldr	s17, [r0, #48]	; 0x30
  const int dilation_width_factor = params.dilation_width_factor;
   19b2e:	930d      	str	r3, [sp, #52]	; 0x34
  const int dilation_height_factor = params.dilation_height_factor;
   19b30:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  const float output_activation_max = params.float_activation_max;
   19b34:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
  const int dilation_height_factor = params.dilation_height_factor;
   19b38:	930e      	str	r3, [sp, #56]	; 0x38
  const int pad_width = params.padding_values.width;
   19b3a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
    float* output_data) {
   19b3e:	9f2b      	ldr	r7, [sp, #172]	; 0xac
  const int pad_width = params.padding_values.width;
   19b40:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_height = params.padding_values.height;
   19b42:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
    float* output_data) {
   19b46:	9219      	str	r2, [sp, #100]	; 0x64
  const int pad_height = params.padding_values.height;
   19b48:	9311      	str	r3, [sp, #68]	; 0x44
  const int depth_multiplier = params.depth_multiplier;
   19b4a:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   19b4e:	9307      	str	r3, [sp, #28]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   19b50:	680b      	ldr	r3, [r1, #0]
   19b52:	2b04      	cmp	r3, #4
   19b54:	d001      	beq.n	19b5a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4e>
   19b56:	f017 f964 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   19b5a:	f8da 3000 	ldr.w	r3, [sl]
   19b5e:	2b04      	cmp	r3, #4
   19b60:	d1f9      	bne.n	19b56 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   19b62:	683b      	ldr	r3, [r7, #0]
   19b64:	2b04      	cmp	r3, #4
   19b66:	d1f6      	bne.n	19b56 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>

  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19b68:	2300      	movs	r3, #0
   19b6a:	463a      	mov	r2, r7
   19b6c:	4619      	mov	r1, r3
   19b6e:	4620      	mov	r0, r4
   19b70:	f010 fc08 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   19b74:	2303      	movs	r3, #3
   19b76:	463a      	mov	r2, r7
   19b78:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   19b7a:	9012      	str	r0, [sp, #72]	; 0x48
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   19b7c:	4650      	mov	r0, sl
   19b7e:	f010 fc01 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   19b82:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   19b84:	4605      	mov	r5, r0
  const int input_height = input_shape.Dims(1);
   19b86:	4620      	mov	r0, r4
   19b88:	f00d fd52 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   19b8c:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   19b8e:	9013      	str	r0, [sp, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
   19b90:	4620      	mov	r0, r4
   19b92:	f00d fd4d 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   19b96:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   19b98:	9014      	str	r0, [sp, #80]	; 0x50
  const int input_depth = input_shape.Dims(3);
   19b9a:	4620      	mov	r0, r4
   19b9c:	f00d fd48 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   19ba0:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   19ba2:	900a      	str	r0, [sp, #40]	; 0x28
  const int filter_height = filter_shape.Dims(1);
   19ba4:	4650      	mov	r0, sl
   19ba6:	f00d fd43 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   19baa:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   19bac:	9015      	str	r0, [sp, #84]	; 0x54
  const int filter_width = filter_shape.Dims(2);
   19bae:	4650      	mov	r0, sl
   19bb0:	f00d fd3e 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   19bb4:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   19bb6:	9016      	str	r0, [sp, #88]	; 0x58
  const int output_height = output_shape.Dims(1);
   19bb8:	4638      	mov	r0, r7
   19bba:	f00d fd39 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   19bbe:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   19bc0:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
   19bc2:	4638      	mov	r0, r7
   19bc4:	f00d fd34 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   19bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19bca:	9a07      	ldr	r2, [sp, #28]
  const int output_width = output_shape.Dims(2);
   19bcc:	9018      	str	r0, [sp, #96]	; 0x60
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   19bce:	fb03 f602 	mul.w	r6, r3, r2
   19bd2:	42ae      	cmp	r6, r5
   19bd4:	d1bf      	bne.n	19b56 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   19bd6:	9829      	ldr	r0, [sp, #164]	; 0xa4
   19bd8:	f00d fdaf 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   19bdc:	42b0      	cmp	r0, r6
   19bde:	d1ba      	bne.n	19b56 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x4a>

  for (int b = 0; b < batches; ++b) {
   19be0:	f04f 0900 	mov.w	r9, #0
                      filter_shape, 0, filter_y, filter_x, oc)];
                  total += (input_value * filter_value);
                }
              }
            }
            float bias_value = 0.0f;
   19be4:	eddf 9a58 	vldr	s19, [pc, #352]	; 19d48 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23c>
  for (int b = 0; b < batches; ++b) {
   19be8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19bea:	4599      	cmp	r9, r3
   19bec:	f280 80a6 	bge.w	19d3c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x230>
   19bf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19bf2:	425b      	negs	r3, r3
   19bf4:	9309      	str	r3, [sp, #36]	; 0x24
    for (int out_y = 0; out_y < output_height; ++out_y) {
   19bf6:	2300      	movs	r3, #0
   19bf8:	9302      	str	r3, [sp, #8]
   19bfa:	9b02      	ldr	r3, [sp, #8]
   19bfc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   19bfe:	4293      	cmp	r3, r2
   19c00:	f280 8099 	bge.w	19d36 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x22a>
   19c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19c06:	425b      	negs	r3, r3
   19c08:	9308      	str	r3, [sp, #32]
      for (int out_x = 0; out_x < output_width; ++out_x) {
   19c0a:	2300      	movs	r3, #0
   19c0c:	9303      	str	r3, [sp, #12]
   19c0e:	9b03      	ldr	r3, [sp, #12]
   19c10:	9a18      	ldr	r2, [sp, #96]	; 0x60
   19c12:	4293      	cmp	r3, r2
   19c14:	f280 8087 	bge.w	19d26 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x21a>
   19c18:	2600      	movs	r6, #0
        for (int ic = 0; ic < input_depth; ++ic) {
   19c1a:	9604      	str	r6, [sp, #16]
   19c1c:	9b04      	ldr	r3, [sp, #16]
   19c1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19c20:	4293      	cmp	r3, r2
   19c22:	da78      	bge.n	19d16 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x20a>
   19c24:	4635      	mov	r5, r6
          for (int m = 0; m < depth_multiplier; m++) {
   19c26:	9a07      	ldr	r2, [sp, #28]
   19c28:	1bab      	subs	r3, r5, r6
   19c2a:	429a      	cmp	r2, r3
   19c2c:	dd6d      	ble.n	19d0a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1fe>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19c2e:	2300      	movs	r3, #0
            float total = 0.f;
   19c30:	ed9f 8a45 	vldr	s16, [pc, #276]	; 19d48 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x23c>
            const int oc = m + ic * depth_multiplier;
   19c34:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19c38:	9305      	str	r3, [sp, #20]
   19c3a:	9b05      	ldr	r3, [sp, #20]
   19c3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   19c3e:	4293      	cmp	r3, r2
   19c40:	da3c      	bge.n	19cbc <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1b0>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19c42:	2300      	movs	r3, #0
                const int in_y =
   19c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19c48:	9306      	str	r3, [sp, #24]
   19c4a:	9b06      	ldr	r3, [sp, #24]
   19c4c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   19c4e:	4293      	cmp	r3, r2
   19c50:	da2e      	bge.n	19cb0 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1a4>
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   19c52:	f1b8 0f00 	cmp.w	r8, #0
   19c56:	db25      	blt.n	19ca4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
   19c58:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19c5a:	4543      	cmp	r3, r8
   19c5c:	dd22      	ble.n	19ca4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
   19c5e:	f1bb 0f00 	cmp.w	fp, #0
   19c62:	db1f      	blt.n	19ca4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
   19c64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   19c66:	455b      	cmp	r3, fp
   19c68:	dd1c      	ble.n	19ca4 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x198>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   19c6a:	9b04      	ldr	r3, [sp, #16]
   19c6c:	465a      	mov	r2, fp
   19c6e:	4649      	mov	r1, r9
   19c70:	9300      	str	r3, [sp, #0]
   19c72:	4620      	mov	r0, r4
   19c74:	4643      	mov	r3, r8
   19c76:	f00d fd9d 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                  float filter_value = filter_data[Offset(
   19c7a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   19c7e:	900f      	str	r0, [sp, #60]	; 0x3c
                  float filter_value = filter_data[Offset(
   19c80:	2100      	movs	r1, #0
   19c82:	4650      	mov	r0, sl
   19c84:	9500      	str	r5, [sp, #0]
   19c86:	f00d fd95 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                      input_data[Offset(input_shape, b, in_y, in_x, ic)];
   19c8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   19c8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   19c8e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
                      filter_shape, 0, filter_y, filter_x, oc)];
   19c92:	9a28      	ldr	r2, [sp, #160]	; 0xa0
                  total += (input_value * filter_value);
   19c94:	ed93 7a00 	vldr	s14, [r3]
                      filter_shape, 0, filter_y, filter_x, oc)];
   19c98:	eb02 0080 	add.w	r0, r2, r0, lsl #2
                  total += (input_value * filter_value);
   19c9c:	edd0 7a00 	vldr	s15, [r0]
   19ca0:	eea7 8a27 	vfma.f32	s16, s14, s15
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   19ca4:	9b06      	ldr	r3, [sp, #24]
   19ca6:	3301      	adds	r3, #1
   19ca8:	9306      	str	r3, [sp, #24]
   19caa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19cac:	4498      	add	r8, r3
   19cae:	e7cc      	b.n	19c4a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x13e>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   19cb0:	9b05      	ldr	r3, [sp, #20]
   19cb2:	3301      	adds	r3, #1
   19cb4:	9305      	str	r3, [sp, #20]
   19cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19cb8:	449b      	add	fp, r3
   19cba:	e7be      	b.n	19c3a <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x12e>
            if (bias_data) {
   19cbc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   19cbe:	b30b      	cbz	r3, 19d04 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1f8>
              bias_value = bias_data[oc];
   19cc0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   19cc4:	edd3 7a00 	vldr	s15, [r3]
            }
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   19cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
                ActivationFunctionWithMinMax(total + bias_value,
   19ccc:	ee38 8a27 	vadd.f32	s16, s16, s15
            output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   19cd0:	9500      	str	r5, [sp, #0]
   19cd2:	4649      	mov	r1, r9
   19cd4:	4638      	mov	r0, r7
   19cd6:	f00d fd6d 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
	return __b;
   19cda:	eeb4 8a68 	vcmp.f32	s16, s17
   19cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19ce2:	bf48      	it	mi
   19ce4:	eeb0 8a68 	vmovmi.f32	s16, s17
	return __b;
   19ce8:	eeb4 9a48 	vcmp.f32	s18, s16
   19cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19cf0:	bf48      	it	mi
   19cf2:	eeb0 8a49 	vmovmi.f32	s16, s18
   19cf6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   19cf8:	3501      	adds	r5, #1
   19cfa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   19cfe:	ed80 8a00 	vstr	s16, [r0]
          for (int m = 0; m < depth_multiplier; m++) {
   19d02:	e790      	b.n	19c26 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11a>
            float bias_value = 0.0f;
   19d04:	eef0 7a69 	vmov.f32	s15, s19
   19d08:	e7de      	b.n	19cc8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x1bc>
        for (int ic = 0; ic < input_depth; ++ic) {
   19d0a:	9b04      	ldr	r3, [sp, #16]
   19d0c:	3301      	adds	r3, #1
   19d0e:	9304      	str	r3, [sp, #16]
   19d10:	9b07      	ldr	r3, [sp, #28]
   19d12:	441e      	add	r6, r3
   19d14:	e782      	b.n	19c1c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x110>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   19d16:	9b03      	ldr	r3, [sp, #12]
   19d18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19d1a:	3301      	adds	r3, #1
   19d1c:	9303      	str	r3, [sp, #12]
   19d1e:	9b08      	ldr	r3, [sp, #32]
   19d20:	4413      	add	r3, r2
   19d22:	9308      	str	r3, [sp, #32]
   19d24:	e773      	b.n	19c0e <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x102>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   19d26:	9b02      	ldr	r3, [sp, #8]
   19d28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   19d2a:	3301      	adds	r3, #1
   19d2c:	9302      	str	r3, [sp, #8]
   19d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   19d30:	4413      	add	r3, r2
   19d32:	9309      	str	r3, [sp, #36]	; 0x24
   19d34:	e761      	b.n	19bfa <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xee>
  for (int b = 0; b < batches; ++b) {
   19d36:	f109 0901 	add.w	r9, r9, #1
   19d3a:	e755      	b.n	19be8 <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xdc>
          }
        }
      }
    }
  }
}
   19d3c:	b01b      	add	sp, #108	; 0x6c
   19d3e:	ecbd 8b04 	vpop	{d8-d9}
   19d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d46:	bf00      	nop
   19d48:	00000000 	.word	0x00000000

00019d4c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   19d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   19d50:	690d      	ldr	r5, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   19d52:	4604      	mov	r4, r0
   19d54:	4688      	mov	r8, r1
   19d56:	b093      	sub	sp, #76	; 0x4c
  TFLITE_DCHECK(node->user_data != nullptr);
   19d58:	b90d      	cbnz	r5, 19d5e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
   19d5a:	f017 f862 	bl	30e22 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   19d5e:	694e      	ldr	r6, [r1, #20]
   19d60:	2e00      	cmp	r6, #0
   19d62:	d0fa      	beq.n	19d5a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xe>

  auto* params =
      reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   19d64:	680a      	ldr	r2, [r1, #0]
   19d66:	f8d0 a008 	ldr.w	sl, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   19d6a:	6853      	ldr	r3, [r2, #4]
   19d6c:	6897      	ldr	r7, [r2, #8]
   19d6e:	ea4f 1983 	mov.w	r9, r3, lsl #6
   19d72:	eb0a 1383 	add.w	r3, sl, r3, lsl #6
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);

  const TfLiteType data_type = input->type;
   19d76:	f81a 2009 	ldrb.w	r2, [sl, r9]
  int width = SizeOfDimension(input, 2);
   19d7a:	689b      	ldr	r3, [r3, #8]
  const TfLiteType data_type = input->type;
   19d7c:	9210      	str	r2, [sp, #64]	; 0x40
  return t->dims->data[dim];
   19d7e:	68da      	ldr	r2, [r3, #12]
   19d80:	689b      	ldr	r3, [r3, #8]
  return &context->tensors[node->inputs->data[index]];
   19d82:	eb0a 1787 	add.w	r7, sl, r7, lsl #6
  return t->dims->data[dim];
   19d86:	930a      	str	r3, [sp, #40]	; 0x28
  int height = SizeOfDimension(input, 1);
  int filter_width = SizeOfDimension(filter, 2);
   19d88:	68bb      	ldr	r3, [r7, #8]
   19d8a:	920d      	str	r2, [sp, #52]	; 0x34
   19d8c:	68da      	ldr	r2, [r3, #12]

  // Per channel quantization is only needed for int8 inference. For other
  // quantized types, only a single scale and zero point is needed.
  const int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
  // Dynimically allocate per-channel quantization parameters.
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
   19d8e:	6919      	ldr	r1, [r3, #16]
   19d90:	920b      	str	r2, [sp, #44]	; 0x2c
   19d92:	689a      	ldr	r2, [r3, #8]
   19d94:	0089      	lsls	r1, r1, #2
   19d96:	920c      	str	r2, [sp, #48]	; 0x30
   19d98:	6b83      	ldr	r3, [r0, #56]	; 0x38
   19d9a:	f105 0218 	add.w	r2, r5, #24
   19d9e:	910e      	str	r1, [sp, #56]	; 0x38
   19da0:	4798      	blx	r3
   19da2:	4683      	mov	fp, r0
   19da4:	bb48      	cbnz	r0, 19dfa <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_multiplier)));
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
   19da6:	4620      	mov	r0, r4
   19da8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19daa:	990e      	ldr	r1, [sp, #56]	; 0x38
   19dac:	f105 021c 	add.w	r2, r5, #28
   19db0:	4798      	blx	r3
   19db2:	2800      	cmp	r0, #0
   19db4:	f040 80d3 	bne.w	19f5e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x212>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_shift)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
   19db8:	f81a 3009 	ldrb.w	r3, [sl, r9]
   19dbc:	2b09      	cmp	r3, #9
   19dbe:	d14a      	bne.n	19e56 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x10a>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   19dc0:	f897 b030 	ldrb.w	fp, [r7, #48]	; 0x30
   19dc4:	f1bb 0f01 	cmp.w	fp, #1
   19dc8:	d00d      	beq.n	19de6 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x9a>
   19dca:	4b68      	ldr	r3, [pc, #416]	; (19f6c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
   19dcc:	2501      	movs	r5, #1
   19dce:	9301      	str	r3, [sp, #4]
   19dd0:	4b67      	ldr	r3, [pc, #412]	; (19f70 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
   19dd2:	e9cd b502 	strd	fp, r5, [sp, #8]
   19dd6:	9300      	str	r3, [sp, #0]
   19dd8:	2388      	movs	r3, #136	; 0x88
   19dda:	6966      	ldr	r6, [r4, #20]
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   19ddc:	4620      	mov	r0, r4
   19dde:	4a65      	ldr	r2, [pc, #404]	; (19f74 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
   19de0:	4965      	ldr	r1, [pc, #404]	; (19f78 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
   19de2:	47b0      	blx	r6
   19de4:	e046      	b.n	19e74 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
   19de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        reinterpret_cast<TfLiteAffineQuantization*>(
            filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
   19de8:	b95b      	cbnz	r3, 19e02 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xb6>
   19dea:	4b64      	ldr	r3, [pc, #400]	; (19f7c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x230>)
   19dec:	6965      	ldr	r5, [r4, #20]
   19dee:	9300      	str	r3, [sp, #0]
   19df0:	238e      	movs	r3, #142	; 0x8e
    TF_LITE_ENSURE(context, affine_quantization->scale);
   19df2:	4620      	mov	r0, r4
   19df4:	4a5f      	ldr	r2, [pc, #380]	; (19f74 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
   19df6:	4962      	ldr	r1, [pc, #392]	; (19f80 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
   19df8:	47a8      	blx	r5
                      affine_quantization->zero_point->size);
  }

  return CalculateOpData(context, node, params, width, height, filter_width,
                         filter_height, data_type, data);
}
   19dfa:	4658      	mov	r0, fp
   19dfc:	b013      	add	sp, #76	; 0x4c
   19dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE(context, affine_quantization->scale);
   19e02:	6819      	ldr	r1, [r3, #0]
   19e04:	b921      	cbnz	r1, 19e10 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
   19e06:	4b5f      	ldr	r3, [pc, #380]	; (19f84 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x238>)
   19e08:	6965      	ldr	r5, [r4, #20]
   19e0a:	9300      	str	r3, [sp, #0]
   19e0c:	238f      	movs	r3, #143	; 0x8f
   19e0e:	e7f0      	b.n	19df2 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
   19e10:	685a      	ldr	r2, [r3, #4]
   19e12:	b922      	cbnz	r2, 19e1e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xd2>
   19e14:	4b5c      	ldr	r3, [pc, #368]	; (19f88 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x23c>)
   19e16:	6965      	ldr	r5, [r4, #20]
   19e18:	9300      	str	r3, [sp, #0]
   19e1a:	2390      	movs	r3, #144	; 0x90
   19e1c:	e7e9      	b.n	19df2 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE(
   19e1e:	680b      	ldr	r3, [r1, #0]
   19e20:	2b01      	cmp	r3, #1
   19e22:	d008      	beq.n	19e36 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
   19e24:	68b9      	ldr	r1, [r7, #8]
   19e26:	6909      	ldr	r1, [r1, #16]
   19e28:	428b      	cmp	r3, r1
   19e2a:	d004      	beq.n	19e36 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
   19e2c:	4b57      	ldr	r3, [pc, #348]	; (19f8c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x240>)
   19e2e:	6965      	ldr	r5, [r4, #20]
   19e30:	9300      	str	r3, [sp, #0]
   19e32:	2391      	movs	r3, #145	; 0x91
   19e34:	e7dd      	b.n	19df2 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
   19e36:	6812      	ldr	r2, [r2, #0]
   19e38:	4293      	cmp	r3, r2
   19e3a:	d00c      	beq.n	19e56 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x10a>
   19e3c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   19e40:	4b53      	ldr	r3, [pc, #332]	; (19f90 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x244>)
   19e42:	4620      	mov	r0, r4
   19e44:	9301      	str	r3, [sp, #4]
   19e46:	4b53      	ldr	r3, [pc, #332]	; (19f94 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x248>)
   19e48:	6965      	ldr	r5, [r4, #20]
   19e4a:	9300      	str	r3, [sp, #0]
   19e4c:	4a49      	ldr	r2, [pc, #292]	; (19f74 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
   19e4e:	2395      	movs	r3, #149	; 0x95
   19e50:	4949      	ldr	r1, [pc, #292]	; (19f78 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
   19e52:	47a8      	blx	r5
   19e54:	e7d1      	b.n	19dfa <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  bool has_bias = node->inputs->size == 3;
   19e56:	f8d8 7000 	ldr.w	r7, [r8]
   19e5a:	683b      	ldr	r3, [r7, #0]
   19e5c:	930e      	str	r3, [sp, #56]	; 0x38
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
   19e5e:	3b02      	subs	r3, #2
   19e60:	2b01      	cmp	r3, #1
   19e62:	d90a      	bls.n	19e7a <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x12e>
   19e64:	4b4c      	ldr	r3, [pc, #304]	; (19f98 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x24c>)
   19e66:	4620      	mov	r0, r4
   19e68:	9300      	str	r3, [sp, #0]
   19e6a:	6965      	ldr	r5, [r4, #20]
   19e6c:	2341      	movs	r3, #65	; 0x41
   19e6e:	4a41      	ldr	r2, [pc, #260]	; (19f74 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
   19e70:	4943      	ldr	r1, [pc, #268]	; (19f80 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
   19e72:	47a8      	blx	r5
   19e74:	f04f 0b01 	mov.w	fp, #1
   19e78:	e7bf      	b.n	19dfa <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   19e7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19e7e:	f8d3 8000 	ldr.w	r8, [r3]
   19e82:	930f      	str	r3, [sp, #60]	; 0x3c
   19e84:	f1b8 0f01 	cmp.w	r8, #1
   19e88:	d009      	beq.n	19e9e <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x152>
   19e8a:	2501      	movs	r5, #1
   19e8c:	4b43      	ldr	r3, [pc, #268]	; (19f9c <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x250>)
   19e8e:	e9cd 8502 	strd	r8, r5, [sp, #8]
   19e92:	9301      	str	r3, [sp, #4]
   19e94:	4b42      	ldr	r3, [pc, #264]	; (19fa0 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x254>)
   19e96:	6966      	ldr	r6, [r4, #20]
   19e98:	9300      	str	r3, [sp, #0]
   19e9a:	2342      	movs	r3, #66	; 0x42
   19e9c:	e79e      	b.n	19ddc <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
      &unused_output_width);
   19e9e:	f896 b000 	ldrb.w	fp, [r6]
   19ea2:	e9d6 9a01 	ldrd	r9, sl, [r6, #4]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   19ea6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19ea8:	464b      	mov	r3, r9
   19eaa:	990d      	ldr	r1, [sp, #52]	; 0x34
   19eac:	4658      	mov	r0, fp
   19eae:	f8cd 8000 	str.w	r8, [sp]
   19eb2:	f011 f9c9 	bl	2b248 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   19eb6:	4653      	mov	r3, sl
   19eb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   19eba:	9011      	str	r0, [sp, #68]	; 0x44
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   19ebc:	990a      	ldr	r1, [sp, #40]	; 0x28
   19ebe:	4658      	mov	r0, fp
   19ec0:	f8cd 8000 	str.w	r8, [sp]
   19ec4:	f011 f9c0 	bl	2b248 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int total_padding =
   19ec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      ((out_size - 1) * stride + effective_filter_size - in_size);
   19ecc:	3801      	subs	r0, #1
  int total_padding =
   19ece:	1a9b      	subs	r3, r3, r2
   19ed0:	fb0a 3a00 	mla	sl, sl, r0, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
   19ed4:	9b11      	ldr	r3, [sp, #68]	; 0x44
  int total_padding =
   19ed6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      ((out_size - 1) * stride + effective_filter_size - in_size);
   19ed8:	1e58      	subs	r0, r3, #1
  int total_padding =
   19eda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  total_padding = total_padding > 0 ? total_padding : 0;
   19edc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
  int total_padding =
   19ee0:	1a9b      	subs	r3, r3, r2
   19ee2:	fb09 3900 	mla	r9, r9, r0, r3
  total_padding = total_padding > 0 ? total_padding : 0;
   19ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  return total_padding / 2;
   19eea:	ea4f 0369 	mov.w	r3, r9, asr #1
   19eee:	602b      	str	r3, [r5, #0]
   19ef0:	ea4f 036a 	mov.w	r3, sl, asr #1
   19ef4:	606b      	str	r3, [r5, #4]
  *offset = total_padding % 2;
   19ef6:	f009 0301 	and.w	r3, r9, #1
   19efa:	60ab      	str	r3, [r5, #8]
  if (data_type != kTfLiteFloat32) {
   19efc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19efe:	f00a 0001 	and.w	r0, sl, #1
   19f02:	2b01      	cmp	r3, #1
      &unused_output_width);
   19f04:	60e8      	str	r0, [r5, #12]
  if (data_type != kTfLiteFloat32) {
   19f06:	d02e      	beq.n	19f66 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x21a>
  const bool use_tensor = index < node->inputs->size &&
   19f08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   19f0a:	68a0      	ldr	r0, [r4, #8]
  return &context->tensors[node->inputs->data[index]];
   19f0c:	6879      	ldr	r1, [r7, #4]
   19f0e:	68ba      	ldr	r2, [r7, #8]
  const bool use_tensor = index < node->inputs->size &&
   19f10:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
   19f12:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   19f16:	eb00 1282 	add.w	r2, r0, r2, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   19f1a:	dd22      	ble.n	19f62 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x216>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   19f1c:	68fb      	ldr	r3, [r7, #12]
  const bool use_tensor = index < node->inputs->size &&
   19f1e:	1c5f      	adds	r7, r3, #1
   19f20:	d01f      	beq.n	19f62 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x216>
    return &context->tensors[node->inputs->data[index]];
   19f22:	eb00 1383 	add.w	r3, r0, r3, lsl #6
    int num_channels = filter->dims->data[kDepthwiseConvQuantizedDimension];
   19f26:	6897      	ldr	r7, [r2, #8]
        context, input, filter, bias, output, params->activation,
   19f28:	3610      	adds	r6, #16
    return tflite::PopulateConvolutionQuantizationParams(
   19f2a:	693f      	ldr	r7, [r7, #16]
   19f2c:	9708      	str	r7, [sp, #32]
   19f2e:	69ef      	ldr	r7, [r5, #28]
   19f30:	9707      	str	r7, [sp, #28]
   19f32:	69af      	ldr	r7, [r5, #24]
   19f34:	9601      	str	r6, [sp, #4]
   19f36:	9706      	str	r7, [sp, #24]
   19f38:	f105 0724 	add.w	r7, r5, #36	; 0x24
   19f3c:	9705      	str	r7, [sp, #20]
   19f3e:	f105 0720 	add.w	r7, r5, #32
   19f42:	9704      	str	r7, [sp, #16]
   19f44:	f105 0714 	add.w	r7, r5, #20
   19f48:	3510      	adds	r5, #16
   19f4a:	9502      	str	r5, [sp, #8]
  return &context->tensors[node->outputs->data[index]];
   19f4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   19f4e:	9703      	str	r7, [sp, #12]
   19f50:	686d      	ldr	r5, [r5, #4]
   19f52:	eb00 1085 	add.w	r0, r0, r5, lsl #6
   19f56:	9000      	str	r0, [sp, #0]
   19f58:	4620      	mov	r0, r4
   19f5a:	f007 f915 	bl	21188 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>
   19f5e:	4683      	mov	fp, r0
   19f60:	e74b      	b.n	19dfa <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
  return nullptr;
   19f62:	2300      	movs	r3, #0
   19f64:	e7df      	b.n	19f26 <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1da>
  return kTfLiteOk;
   19f66:	f04f 0b00 	mov.w	fp, #0
   19f6a:	e746      	b.n	19dfa <_ZN6tflite3ops5micro14depthwise_conv7PrepareEP13TfLiteContextP10TfLiteNode+0xae>
   19f6c:	00034dd6 	.word	0x00034dd6
   19f70:	00034df0 	.word	0x00034df0
   19f74:	00034f19 	.word	0x00034f19
   19f78:	00034aec 	.word	0x00034aec
   19f7c:	00034e0a 	.word	0x00034e0a
   19f80:	00034c0c 	.word	0x00034c0c
   19f84:	00034e1e 	.word	0x00034e1e
   19f88:	00034e39 	.word	0x00034e39
   19f8c:	00034f49 	.word	0x00034f49
   19f90:	00034ed2 	.word	0x00034ed2
   19f94:	00034ef8 	.word	0x00034ef8
   19f98:	00034d9e 	.word	0x00034d9e
   19f9c:	00035884 	.word	0x00035884
   19fa0:	00034dc2 	.word	0x00034dc2

00019fa4 <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv>:
  return kTfLiteOk;
}

}  // namespace depthwise_conv

TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
   19fa4:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/depthwise_conv::Prepare,
          /*invoke=*/depthwise_conv::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   19fa6:	4604      	mov	r4, r0
TfLiteRegistration Register_DEPTHWISE_CONV_2D() {
   19fa8:	4606      	mov	r6, r0
          /*version=*/0};
   19faa:	4d04      	ldr	r5, [pc, #16]	; (19fbc <_ZN6tflite3ops5micro26Register_DEPTHWISE_CONV_2DEv+0x18>)
   19fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   19fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   19fb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   19fb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   19fb8:	4630      	mov	r0, r6
   19fba:	bd70      	pop	{r4, r5, r6, pc}
   19fbc:	00031968 	.word	0x00031968

00019fc0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   19fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   19fc4:	690a      	ldr	r2, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   19fc6:	4680      	mov	r8, r0
   19fc8:	b0b3      	sub	sp, #204	; 0xcc
  TFLITE_DCHECK(node->user_data != nullptr);
   19fca:	b90a      	cbnz	r2, 19fd0 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10>
   19fcc:	f016 ff29 	bl	30e22 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   19fd0:	694b      	ldr	r3, [r1, #20]
   19fd2:	2b00      	cmp	r3, #0
   19fd4:	d0fa      	beq.n	19fcc <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xc>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   19fd6:	6887      	ldr	r7, [r0, #8]
  return &context->tensors[node->outputs->data[index]];
   19fd8:	6848      	ldr	r0, [r1, #4]
   19fda:	6840      	ldr	r0, [r0, #4]
   19fdc:	eb07 1b80 	add.w	fp, r7, r0, lsl #6
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   19fe0:	6808      	ldr	r0, [r1, #0]
  return &context->tensors[node->inputs->data[index]];
   19fe2:	6846      	ldr	r6, [r0, #4]
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
   19fe4:	6801      	ldr	r1, [r0, #0]
   19fe6:	ea4f 1986 	mov.w	r9, r6, lsl #6
   19fea:	2903      	cmp	r1, #3
   19fec:	bf08      	it	eq
   19fee:	68c4      	ldreq	r4, [r0, #12]
   19ff0:	6885      	ldr	r5, [r0, #8]
  switch (input->type) {  // Already know in/out types are same.
   19ff2:	f817 0009 	ldrb.w	r0, [r7, r9]
      (NumInputs(node) == 3) ? GetInput(context, node, kBiasTensor) : nullptr;
   19ff6:	bf14      	ite	ne
   19ff8:	2400      	movne	r4, #0
   19ffa:	eb07 1484 	addeq.w	r4, r7, r4, lsl #6
  switch (input->type) {  // Already know in/out types are same.
   19ffe:	2803      	cmp	r0, #3
   1a000:	eb07 1686 	add.w	r6, r7, r6, lsl #6
   1a004:	eb07 1585 	add.w	r5, r7, r5, lsl #6
   1a008:	f000 80cc 	beq.w	1a1a4 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1e4>
   1a00c:	2809      	cmp	r0, #9
   1a00e:	d068      	beq.n	1a0e2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x122>
   1a010:	2801      	cmp	r0, #1
   1a012:	f040 811c 	bne.w	1a24e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x28e>
  CalculateActivationRange(params->activation, &output_activation_min,
   1a016:	7c19      	ldrb	r1, [r3, #16]
  if (activation == kTfLiteActRelu) {
   1a018:	2901      	cmp	r1, #1
   1a01a:	d05a      	beq.n	1a0d2 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x112>
  } else if (activation == kTfLiteActRelu6) {
   1a01c:	2903      	cmp	r1, #3
   1a01e:	d05d      	beq.n	1a0dc <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x11c>
    *activation_max = std::numeric_limits<T>::max();
   1a020:	ed9f 7a91 	vldr	s14, [pc, #580]	; 1a268 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2a8>
   1a024:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1a028:	2902      	cmp	r1, #2
   1a02a:	eddf 6a90 	vldr	s13, [pc, #576]	; 1a26c <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>
   1a02e:	fe47 7a87 	vseleq.f32	s15, s15, s14
   1a032:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   1a036:	fe07 7a26 	vseleq.f32	s14, s14, s13
  op_params.padding_type = PaddingType::kSame;
   1a03a:	2101      	movs	r1, #1
   1a03c:	f88d 1088 	strb.w	r1, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
   1a040:	6811      	ldr	r1, [r2, #0]
  op_params.padding_values.height = data->padding.height;
   1a042:	6852      	ldr	r2, [r2, #4]
  op_params.padding_values.width = data->padding.width;
   1a044:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
  op_params.padding_values.height = data->padding.height;
   1a048:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
   1a04c:	685a      	ldr	r2, [r3, #4]
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1a04e:	4631      	mov	r1, r6
  op_params.stride_width = params->stride_width;
   1a050:	f8ad 2092 	strh.w	r2, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
   1a054:	689a      	ldr	r2, [r3, #8]
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1a056:	a80a      	add	r0, sp, #40	; 0x28
  op_params.stride_height = params->stride_height;
   1a058:	f8ad 2094 	strh.w	r2, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
   1a05c:	695a      	ldr	r2, [r3, #20]
   1a05e:	f8ad 2096 	strh.w	r2, [sp, #150]	; 0x96
  op_params.dilation_height_factor = params->dilation_height_factor;
   1a062:	699a      	ldr	r2, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
   1a064:	68db      	ldr	r3, [r3, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
   1a066:	f8ad 2098 	strh.w	r2, [sp, #152]	; 0x98
  op_params.float_activation_min = output_activation_min;
   1a06a:	ed8d 7a2e 	vstr	s14, [sp, #184]	; 0xb8
  op_params.float_activation_max = output_activation_max;
   1a06e:	edcd 7a2f 	vstr	s15, [sp, #188]	; 0xbc
  op_params.depth_multiplier = params->depth_multiplier;
   1a072:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1a076:	f00d fb15 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<float>(filter),
   1a07a:	4629      	mov	r1, r5
   1a07c:	a810      	add	r0, sp, #64	; 0x40
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1a07e:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1a082:	f00d fb0f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a086:	b105      	cbz	r5, 1a08a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xca>
   1a088:	686d      	ldr	r5, [r5, #4]
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   1a08a:	ae16      	add	r6, sp, #88	; 0x58
   1a08c:	4621      	mov	r1, r4
   1a08e:	4630      	mov	r0, r6
   1a090:	f00d fb08 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a094:	b104      	cbz	r4, 1a098 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xd8>
   1a096:	6864      	ldr	r4, [r4, #4]
   1a098:	af1c      	add	r7, sp, #112	; 0x70
   1a09a:	4659      	mov	r1, fp
   1a09c:	4638      	mov	r0, r7
   1a09e:	f00d fb01 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a0a2:	f1bb 0f00 	cmp.w	fp, #0
   1a0a6:	d001      	beq.n	1a0ac <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0xec>
   1a0a8:	f8db b004 	ldr.w	fp, [fp, #4]
  tflite::reference_ops::DepthwiseConv(
   1a0ac:	4642      	mov	r2, r8
   1a0ae:	ab10      	add	r3, sp, #64	; 0x40
   1a0b0:	a90a      	add	r1, sp, #40	; 0x28
   1a0b2:	a822      	add	r0, sp, #136	; 0x88
   1a0b4:	e9cd 7b03 	strd	r7, fp, [sp, #12]
   1a0b8:	e9cd 6401 	strd	r6, r4, [sp, #4]
   1a0bc:	9500      	str	r5, [sp, #0]
   1a0be:	f7ff fd25 	bl	19b0c <_ZN6tflite13reference_ops13DepthwiseConvERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   1a0c2:	4638      	mov	r0, r7
   1a0c4:	f00d faa9 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1a0c8:	4630      	mov	r0, r6
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1a0ca:	f00d faa6 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),
   1a0ce:	a810      	add	r0, sp, #64	; 0x40
   1a0d0:	e05f      	b.n	1a192 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
    *activation_max = std::numeric_limits<T>::max();
   1a0d2:	eddf 7a65 	vldr	s15, [pc, #404]	; 1a268 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2a8>
    *activation_min = 0;
   1a0d6:	ed9f 7a66 	vldr	s14, [pc, #408]	; 1a270 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2b0>
   1a0da:	e7ae      	b.n	1a03a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x7a>
    *activation_max = 6;
   1a0dc:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   1a0e0:	e7f9      	b.n	1a0d6 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x116>
  op_params.padding_type = PaddingType::kSame;
   1a0e2:	2101      	movs	r1, #1
      data->per_channel_output_shift, GetTensorShape(input),
   1a0e4:	e9d2 9a06 	ldrd	r9, sl, [r2, #24]
  op_params.padding_type = PaddingType::kSame;
   1a0e8:	f88d 1088 	strb.w	r1, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
   1a0ec:	6811      	ldr	r1, [r2, #0]
      data->per_channel_output_shift, GetTensorShape(input),
   1a0ee:	a80a      	add	r0, sp, #40	; 0x28
  op_params.padding_values.width = data->padding.width;
   1a0f0:	f8ad 108a 	strh.w	r1, [sp, #138]	; 0x8a
  op_params.padding_values.height = data->padding.height;
   1a0f4:	6851      	ldr	r1, [r2, #4]
   1a0f6:	f8ad 108c 	strh.w	r1, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
   1a0fa:	6859      	ldr	r1, [r3, #4]
   1a0fc:	f8ad 1092 	strh.w	r1, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
   1a100:	6899      	ldr	r1, [r3, #8]
   1a102:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
   1a106:	6959      	ldr	r1, [r3, #20]
   1a108:	f8ad 1096 	strh.w	r1, [sp, #150]	; 0x96
  op_params.dilation_height_factor = params->dilation_height_factor;
   1a10c:	6999      	ldr	r1, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
   1a10e:	68db      	ldr	r3, [r3, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
   1a110:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
  op_params.depth_multiplier = params->depth_multiplier;
   1a114:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  op_params.input_offset = -input->params.zero_point;
   1a118:	6933      	ldr	r3, [r6, #16]
  op_params.quantized_activation_max = std::numeric_limits<int8_t>::max();
   1a11a:	f06f 017f 	mvn.w	r1, #127	; 0x7f
  op_params.input_offset = -input->params.zero_point;
   1a11e:	425b      	negs	r3, r3
   1a120:	9327      	str	r3, [sp, #156]	; 0x9c
  op_params.weights_offset = 0;
   1a122:	2300      	movs	r3, #0
   1a124:	9328      	str	r3, [sp, #160]	; 0xa0
  op_params.output_offset = output->params.zero_point;
   1a126:	f8db 3010 	ldr.w	r3, [fp, #16]
   1a12a:	9329      	str	r3, [sp, #164]	; 0xa4
  op_params.quantized_activation_max = std::numeric_limits<int8_t>::max();
   1a12c:	237f      	movs	r3, #127	; 0x7f
   1a12e:	e9cd 132c 	strd	r1, r3, [sp, #176]	; 0xb0
      data->per_channel_output_shift, GetTensorShape(input),
   1a132:	4631      	mov	r1, r6
   1a134:	f00d fab6 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1a138:	6873      	ldr	r3, [r6, #4]
      GetTensorData<int8>(input), GetTensorShape(filter),
   1a13a:	ae10      	add	r6, sp, #64	; 0x40
   1a13c:	4629      	mov	r1, r5
   1a13e:	4630      	mov	r0, r6
   1a140:	9309      	str	r3, [sp, #36]	; 0x24
   1a142:	f00d faaf 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a146:	b105      	cbz	r5, 1a14a <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x18a>
   1a148:	686d      	ldr	r5, [r5, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
   1a14a:	af16      	add	r7, sp, #88	; 0x58
   1a14c:	4621      	mov	r1, r4
   1a14e:	4638      	mov	r0, r7
   1a150:	f00d faa8 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a154:	b104      	cbz	r4, 1a158 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x198>
   1a156:	6864      	ldr	r4, [r4, #4]
      GetTensorData<int32>(bias), GetTensorShape(output),
   1a158:	f10d 0870 	add.w	r8, sp, #112	; 0x70
   1a15c:	4659      	mov	r1, fp
   1a15e:	4640      	mov	r0, r8
   1a160:	f00d faa0 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::DepthwiseConvPerChannel(
   1a164:	f8db 3004 	ldr.w	r3, [fp, #4]
   1a168:	4652      	mov	r2, sl
   1a16a:	e9cd 8305 	strd	r8, r3, [sp, #20]
   1a16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a170:	4649      	mov	r1, r9
   1a172:	9300      	str	r3, [sp, #0]
   1a174:	a822      	add	r0, sp, #136	; 0x88
   1a176:	ab0a      	add	r3, sp, #40	; 0x28
   1a178:	e9cd 7403 	strd	r7, r4, [sp, #12]
   1a17c:	e9cd 6501 	strd	r6, r5, [sp, #4]
   1a180:	f011 f95d 	bl	2b43e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
   1a184:	4640      	mov	r0, r8
   1a186:	f00d fa48 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
   1a18a:	4638      	mov	r0, r7
   1a18c:	f00d fa45 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
   1a190:	4630      	mov	r0, r6
   1a192:	f00d fa42 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      data->per_channel_output_shift, GetTensorShape(input),
   1a196:	a80a      	add	r0, sp, #40	; 0x28
   1a198:	f00d fa3f 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1a19c:	2000      	movs	r0, #0
}
   1a19e:	b033      	add	sp, #204	; 0xcc
   1a1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  op_params.padding_type = PaddingType::kSame;
   1a1a4:	2001      	movs	r0, #1
  const int32_t filter_offset = -filter->params.zero_point;
   1a1a6:	6929      	ldr	r1, [r5, #16]
  const int32_t input_offset = -input->params.zero_point;
   1a1a8:	6937      	ldr	r7, [r6, #16]
  const int32_t output_offset = output->params.zero_point;
   1a1aa:	f8db c010 	ldr.w	ip, [fp, #16]
  op_params.padding_type = PaddingType::kSame;
   1a1ae:	f88d 0088 	strb.w	r0, [sp, #136]	; 0x88
  op_params.padding_values.width = data->padding.width;
   1a1b2:	6810      	ldr	r0, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
   1a1b4:	427f      	negs	r7, r7
  op_params.padding_values.width = data->padding.width;
   1a1b6:	f8ad 008a 	strh.w	r0, [sp, #138]	; 0x8a
  op_params.padding_values.height = data->padding.height;
   1a1ba:	6850      	ldr	r0, [r2, #4]
  const int32_t filter_offset = -filter->params.zero_point;
   1a1bc:	4249      	negs	r1, r1
  op_params.padding_values.height = data->padding.height;
   1a1be:	f8ad 008c 	strh.w	r0, [sp, #140]	; 0x8c
  op_params.stride_width = params->stride_width;
   1a1c2:	6858      	ldr	r0, [r3, #4]
   1a1c4:	f8ad 0092 	strh.w	r0, [sp, #146]	; 0x92
  op_params.stride_height = params->stride_height;
   1a1c8:	6898      	ldr	r0, [r3, #8]
   1a1ca:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
  op_params.dilation_width_factor = params->dilation_width_factor;
   1a1ce:	6958      	ldr	r0, [r3, #20]
   1a1d0:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
  op_params.dilation_height_factor = params->dilation_height_factor;
   1a1d4:	6998      	ldr	r0, [r3, #24]
  op_params.depth_multiplier = params->depth_multiplier;
   1a1d6:	68db      	ldr	r3, [r3, #12]
  op_params.dilation_height_factor = params->dilation_height_factor;
   1a1d8:	f8ad 0098 	strh.w	r0, [sp, #152]	; 0x98
  op_params.depth_multiplier = params->depth_multiplier;
   1a1dc:	f8ad 309a 	strh.w	r3, [sp, #154]	; 0x9a
  op_params.quantized_activation_min = data->output_activation_min;
   1a1e0:	6a13      	ldr	r3, [r2, #32]
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1a1e2:	a80a      	add	r0, sp, #40	; 0x28
  op_params.quantized_activation_min = data->output_activation_min;
   1a1e4:	932c      	str	r3, [sp, #176]	; 0xb0
  op_params.quantized_activation_max = data->output_activation_max;
   1a1e6:	6a53      	ldr	r3, [r2, #36]	; 0x24
  op_params.weights_offset = filter_offset;
   1a1e8:	e9cd 7127 	strd	r7, r1, [sp, #156]	; 0x9c
  op_params.quantized_activation_max = data->output_activation_max;
   1a1ec:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_multiplier = data->output_multiplier;
   1a1ee:	6913      	ldr	r3, [r2, #16]
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1a1f0:	4631      	mov	r1, r6
  op_params.output_multiplier = data->output_multiplier;
   1a1f2:	932a      	str	r3, [sp, #168]	; 0xa8
  op_params.output_shift = -data->output_shift;
   1a1f4:	6953      	ldr	r3, [r2, #20]
  op_params.output_offset = output_offset;
   1a1f6:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
  op_params.output_shift = -data->output_shift;
   1a1fa:	425b      	negs	r3, r3
   1a1fc:	932b      	str	r3, [sp, #172]	; 0xac
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1a1fe:	f00d fa51 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),
   1a202:	4629      	mov	r1, r5
   1a204:	a810      	add	r0, sp, #64	; 0x40
   1a206:	6877      	ldr	r7, [r6, #4]
   1a208:	f00d fa4c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a20c:	f8d5 8004 	ldr.w	r8, [r5, #4]
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1a210:	ad16      	add	r5, sp, #88	; 0x58
   1a212:	4621      	mov	r1, r4
   1a214:	4628      	mov	r0, r5
   1a216:	f00d fa45 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a21a:	b104      	cbz	r4, 1a21e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x25e>
   1a21c:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<uint8_t>(output));
   1a21e:	ae1c      	add	r6, sp, #112	; 0x70
   1a220:	4659      	mov	r1, fp
   1a222:	4630      	mov	r0, r6
   1a224:	f00d fa3e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
  return depthwise_conv::DepthwiseConvBasicKernel<
      DepthwiseConvOutputRounding::kAwayFromZero>::Run(params, input_shape,
   1a228:	f8db 3004 	ldr.w	r3, [fp, #4]
   1a22c:	463a      	mov	r2, r7
   1a22e:	e9cd 6303 	strd	r6, r3, [sp, #12]
   1a232:	a90a      	add	r1, sp, #40	; 0x28
   1a234:	ab10      	add	r3, sp, #64	; 0x40
   1a236:	a822      	add	r0, sp, #136	; 0x88
   1a238:	e9cd 5401 	strd	r5, r4, [sp, #4]
   1a23c:	f8cd 8000 	str.w	r8, [sp]
   1a240:	f011 fa17 	bl	2b672 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph>
   1a244:	4630      	mov	r0, r6
   1a246:	f00d f9e8 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1a24a:	4628      	mov	r0, r5
   1a24c:	e73d      	b.n	1a0ca <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x10a>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1a24e:	f8d8 4014 	ldr.w	r4, [r8, #20]
   1a252:	f7f2 fd37 	bl	ccc4 <TfLiteTypeGetName>
   1a256:	f817 3009 	ldrb.w	r3, [r7, r9]
   1a25a:	4602      	mov	r2, r0
   1a25c:	4905      	ldr	r1, [pc, #20]	; (1a274 <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x2b4>)
   1a25e:	4640      	mov	r0, r8
   1a260:	47a0      	blx	r4
      return kTfLiteError;
   1a262:	2001      	movs	r0, #1
   1a264:	e79b      	b.n	1a19e <_ZN6tflite3ops5micro14depthwise_conv4EvalEP13TfLiteContextP10TfLiteNode+0x1de>
   1a266:	bf00      	nop
   1a268:	7f7fffff 	.word	0x7f7fffff
   1a26c:	ff7fffff 	.word	0xff7fffff
   1a270:	00000000 	.word	0x00000000
   1a274:	00034a40 	.word	0x00034a40

0001a278 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1a278:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   1a27c:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1a27e:	4605      	mov	r5, r0
  TFLITE_DCHECK(node->user_data != nullptr);
   1a280:	b90f      	cbnz	r7, 1a286 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe>
   1a282:	f016 fdce 	bl	30e22 <abort>
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1a286:	f8d1 c000 	ldr.w	ip, [r1]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1a28a:	f8dc 6000 	ldr.w	r6, [ip]
   1a28e:	2e01      	cmp	r6, #1
   1a290:	d00f      	beq.n	1a2b2 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
   1a292:	2401      	movs	r4, #1
   1a294:	4b30      	ldr	r3, [pc, #192]	; (1a358 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
   1a296:	e9cd 6402 	strd	r6, r4, [sp, #8]
   1a29a:	9301      	str	r3, [sp, #4]
   1a29c:	4b2f      	ldr	r3, [pc, #188]	; (1a35c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
   1a29e:	4a30      	ldr	r2, [pc, #192]	; (1a360 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
   1a2a0:	9300      	str	r3, [sp, #0]
   1a2a2:	6945      	ldr	r5, [r0, #20]
   1a2a4:	2334      	movs	r3, #52	; 0x34
   1a2a6:	492f      	ldr	r1, [pc, #188]	; (1a364 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
   1a2a8:	47a8      	blx	r5
  TfLiteTensor* output = GetOutput(context, node, 0);

  TF_LITE_ENSURE(context, input->type == kTfLiteUInt8 ||
                              input->type == kTfLiteInt8 ||
                              input->type == kTfLiteInt16);
  TF_LITE_ENSURE(
   1a2aa:	2001      	movs	r0, #1
        static_cast<double>(output->params.scale);
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
                       &data->output_shift);
  }
  return kTfLiteOk;
}
   1a2ac:	b004      	add	sp, #16
   1a2ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1a2b2:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1a2b4:	6814      	ldr	r4, [r2, #0]
   1a2b6:	2c01      	cmp	r4, #1
   1a2b8:	d00b      	beq.n	1a2d2 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x5a>
   1a2ba:	4b27      	ldr	r3, [pc, #156]	; (1a358 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
   1a2bc:	e9cd 4602 	strd	r4, r6, [sp, #8]
   1a2c0:	9301      	str	r3, [sp, #4]
   1a2c2:	4b29      	ldr	r3, [pc, #164]	; (1a368 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
   1a2c4:	4a26      	ldr	r2, [pc, #152]	; (1a360 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
   1a2c6:	9300      	str	r3, [sp, #0]
   1a2c8:	6944      	ldr	r4, [r0, #20]
   1a2ca:	2335      	movs	r3, #53	; 0x35
   1a2cc:	4925      	ldr	r1, [pc, #148]	; (1a364 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
   1a2ce:	47a0      	blx	r4
   1a2d0:	e7eb      	b.n	1a2aa <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x32>
  return &context->tensors[node->inputs->data[index]];
   1a2d2:	f8dc 1004 	ldr.w	r1, [ip, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
   1a2d6:	6883      	ldr	r3, [r0, #8]
   1a2d8:	ea4f 1e81 	mov.w	lr, r1, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1a2dc:	6856      	ldr	r6, [r2, #4]
  TF_LITE_ENSURE(context, input->type == kTfLiteUInt8 ||
   1a2de:	f813 200e 	ldrb.w	r2, [r3, lr]
   1a2e2:	ea4f 1c86 	mov.w	ip, r6, lsl #6
   1a2e6:	f002 0efb 	and.w	lr, r2, #251	; 0xfb
   1a2ea:	f1be 0f03 	cmp.w	lr, #3
  return &context->tensors[node->inputs->data[index]];
   1a2ee:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1a2f2:	eb03 1686 	add.w	r6, r3, r6, lsl #6
   1a2f6:	d009      	beq.n	1a30c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>
   1a2f8:	2a09      	cmp	r2, #9
   1a2fa:	d007      	beq.n	1a30c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x94>
   1a2fc:	4b1b      	ldr	r3, [pc, #108]	; (1a36c <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
   1a2fe:	4a18      	ldr	r2, [pc, #96]	; (1a360 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
   1a300:	9300      	str	r3, [sp, #0]
   1a302:	6945      	ldr	r5, [r0, #20]
   1a304:	233b      	movs	r3, #59	; 0x3b
   1a306:	491a      	ldr	r1, [pc, #104]	; (1a370 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
   1a308:	47a8      	blx	r5
   1a30a:	e7ce      	b.n	1a2aa <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x32>
  TF_LITE_ENSURE(
   1a30c:	f813 300c 	ldrb.w	r3, [r3, ip]
   1a310:	1e5a      	subs	r2, r3, #1
   1a312:	2a01      	cmp	r2, #1
   1a314:	d908      	bls.n	1a328 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xb0>
   1a316:	4b17      	ldr	r3, [pc, #92]	; (1a374 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
   1a318:	4628      	mov	r0, r5
   1a31a:	9300      	str	r3, [sp, #0]
   1a31c:	696c      	ldr	r4, [r5, #20]
   1a31e:	233e      	movs	r3, #62	; 0x3e
   1a320:	4a0f      	ldr	r2, [pc, #60]	; (1a360 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
   1a322:	4913      	ldr	r1, [pc, #76]	; (1a370 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
   1a324:	47a0      	blx	r4
   1a326:	e7c0      	b.n	1a2aa <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x32>
  if (output->type == kTfLiteInt32) {
   1a328:	2b02      	cmp	r3, #2
   1a32a:	d113      	bne.n	1a354 <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>
        static_cast<double>(input->params.scale) /
   1a32c:	68c8      	ldr	r0, [r1, #12]
   1a32e:	f7f2 f8eb 	bl	c508 <__aeabi_f2d>
   1a332:	4604      	mov	r4, r0
        static_cast<double>(output->params.scale);
   1a334:	68f0      	ldr	r0, [r6, #12]
        static_cast<double>(input->params.scale) /
   1a336:	460d      	mov	r5, r1
        static_cast<double>(output->params.scale);
   1a338:	f7f2 f8e6 	bl	c508 <__aeabi_f2d>
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
   1a33c:	f107 0804 	add.w	r8, r7, #4
        static_cast<double>(output->params.scale);
   1a340:	4602      	mov	r2, r0
   1a342:	460b      	mov	r3, r1
    const double effective_output_scale =
   1a344:	4620      	mov	r0, r4
   1a346:	4629      	mov	r1, r5
   1a348:	f7f6 f9da 	bl	10700 <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &data->output_multiplier,
   1a34c:	4643      	mov	r3, r8
   1a34e:	463a      	mov	r2, r7
   1a350:	f006 fe14 	bl	20f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  return kTfLiteOk;
   1a354:	2000      	movs	r0, #0
   1a356:	e7a9      	b.n	1a2ac <_ZN6tflite3ops5micro10dequantize7PrepareEP13TfLiteContextP10TfLiteNode+0x34>
   1a358:	00035884 	.word	0x00035884
   1a35c:	00034b06 	.word	0x00034b06
   1a360:	00034fcb 	.word	0x00034fcb
   1a364:	00034aec 	.word	0x00034aec
   1a368:	00034b16 	.word	0x00034b16
   1a36c:	00034ff7 	.word	0x00034ff7
   1a370:	00034c0c 	.word	0x00034c0c
   1a374:	00035050 	.word	0x00035050

0001a378 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1a378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   1a37c:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1a380:	4606      	mov	r6, r0
   1a382:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
   1a384:	f1b8 0f00 	cmp.w	r8, #0
   1a388:	d101      	bne.n	1a38e <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x16>
   1a38a:	f016 fd4a 	bl	30e22 <abort>
  return &context->tensors[node->inputs->data[index]];
   1a38e:	680a      	ldr	r2, [r1, #0]
  return &context->tensors[node->outputs->data[index]];
   1a390:	6849      	ldr	r1, [r1, #4]
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, 0);
   1a392:	f8d0 b008 	ldr.w	fp, [r0, #8]
   1a396:	684d      	ldr	r5, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   1a398:	6854      	ldr	r4, [r2, #4]
  return &context->tensors[node->outputs->data[index]];
   1a39a:	ea4f 1a85 	mov.w	sl, r5, lsl #6
  TfLiteTensor* output = GetOutput(context, node, 0);

  if (output->type == kTfLiteFloat32) {
   1a39e:	f81b 700a 	ldrb.w	r7, [fp, sl]
  return &context->tensors[node->inputs->data[index]];
   1a3a2:	01a2      	lsls	r2, r4, #6
   1a3a4:	2f01      	cmp	r7, #1
   1a3a6:	eb0b 1484 	add.w	r4, fp, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1a3aa:	eb0b 1585 	add.w	r5, fp, r5, lsl #6
   1a3ae:	f040 808e 	bne.w	1a4ce <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x156>
    tflite::DequantizationParams op_params;
    op_params.zero_point = input->params.zero_point;
   1a3b2:	6923      	ldr	r3, [r4, #16]
    op_params.scale = static_cast<double>(input->params.scale);
   1a3b4:	68e0      	ldr	r0, [r4, #12]
   1a3b6:	9201      	str	r2, [sp, #4]
    op_params.zero_point = input->params.zero_point;
   1a3b8:	9300      	str	r3, [sp, #0]
    op_params.scale = static_cast<double>(input->params.scale);
   1a3ba:	f7f2 f8a5 	bl	c508 <__aeabi_f2d>
    switch (input->type) {
   1a3be:	9a01      	ldr	r2, [sp, #4]
    op_params.scale = static_cast<double>(input->params.scale);
   1a3c0:	4680      	mov	r8, r0
    switch (input->type) {
   1a3c2:	f81b 0002 	ldrb.w	r0, [fp, r2]
    op_params.scale = static_cast<double>(input->params.scale);
   1a3c6:	4689      	mov	r9, r1
    switch (input->type) {
   1a3c8:	2807      	cmp	r0, #7
   1a3ca:	d045      	beq.n	1a458 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xe0>
   1a3cc:	2809      	cmp	r0, #9
   1a3ce:	d022      	beq.n	1a416 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x9e>
   1a3d0:	2803      	cmp	r0, #3
   1a3d2:	d16b      	bne.n	1a4ac <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x134>
      case kTfLiteUInt8:
        reference_ops::Dequantize(
            op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1a3d4:	4621      	mov	r1, r4
   1a3d6:	a802      	add	r0, sp, #8
   1a3d8:	f00d f964 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<float>(output));
   1a3dc:	4629      	mov	r1, r5
   1a3de:	a808      	add	r0, sp, #32
   1a3e0:	6867      	ldr	r7, [r4, #4]
   1a3e2:	f00d f95f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                       const RuntimeShape& input_shape,
                       const InputT* input_data,
                       const RuntimeShape& output_shape, OutputT* output_data) {
  int32 zero_point = op_params.zero_point;
  const double scale = op_params.scale;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1a3e6:	a908      	add	r1, sp, #32
   1a3e8:	a802      	add	r0, sp, #8
   1a3ea:	f00d f932 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>

  for (int i = 0; i < flat_size; i++) {
   1a3ee:	2400      	movs	r4, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1a3f0:	4606      	mov	r6, r0
   1a3f2:	686d      	ldr	r5, [r5, #4]
  for (int i = 0; i < flat_size; i++) {
   1a3f4:	42a6      	cmp	r6, r4
   1a3f6:	dd51      	ble.n	1a49c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x124>
    const int32 val = input_data[i];
   1a3f8:	5d38      	ldrb	r0, [r7, r4]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
   1a3fa:	9b00      	ldr	r3, [sp, #0]
  for (int i = 0; i < flat_size; i++) {
   1a3fc:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
   1a3fe:	1ac0      	subs	r0, r0, r3
   1a400:	f7f2 f870 	bl	c4e4 <__aeabi_i2d>
   1a404:	4642      	mov	r2, r8
   1a406:	464b      	mov	r3, r9
   1a408:	f7f6 f850 	bl	104ac <__aeabi_dmul>
   1a40c:	f7f6 fb10 	bl	10a30 <__aeabi_d2f>
   1a410:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
   1a414:	e7ee      	b.n	1a3f4 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
        break;
      case kTfLiteInt8:
        reference_ops::Dequantize(
            op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1a416:	4621      	mov	r1, r4
   1a418:	a802      	add	r0, sp, #8
   1a41a:	f00d f943 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<float>(output));
   1a41e:	4629      	mov	r1, r5
   1a420:	a808      	add	r0, sp, #32
   1a422:	6867      	ldr	r7, [r4, #4]
   1a424:	f00d f93e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1a428:	a908      	add	r1, sp, #32
   1a42a:	a802      	add	r0, sp, #8
   1a42c:	f00d f911 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; i++) {
   1a430:	2400      	movs	r4, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1a432:	4606      	mov	r6, r0
   1a434:	686d      	ldr	r5, [r5, #4]
  for (int i = 0; i < flat_size; i++) {
   1a436:	42a6      	cmp	r6, r4
   1a438:	dd30      	ble.n	1a49c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x124>
    const int32 val = input_data[i];
   1a43a:	5738      	ldrsb	r0, [r7, r4]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
   1a43c:	9b00      	ldr	r3, [sp, #0]
  for (int i = 0; i < flat_size; i++) {
   1a43e:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
   1a440:	1ac0      	subs	r0, r0, r3
   1a442:	f7f2 f84f 	bl	c4e4 <__aeabi_i2d>
   1a446:	4642      	mov	r2, r8
   1a448:	464b      	mov	r3, r9
   1a44a:	f7f6 f82f 	bl	104ac <__aeabi_dmul>
   1a44e:	f7f6 faef 	bl	10a30 <__aeabi_d2f>
   1a452:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
   1a456:	e7ee      	b.n	1a436 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0xbe>
        break;
      case kTfLiteInt16:
        reference_ops::Dequantize(
            op_params, GetTensorShape(input), GetTensorData<int16_t>(input),
   1a458:	4621      	mov	r1, r4
   1a45a:	a802      	add	r0, sp, #8
   1a45c:	f00d f922 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<float>(output));
   1a460:	4629      	mov	r1, r5
   1a462:	a808      	add	r0, sp, #32
   1a464:	6867      	ldr	r7, [r4, #4]
   1a466:	f00d f91d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1a46a:	a908      	add	r1, sp, #32
   1a46c:	a802      	add	r0, sp, #8
   1a46e:	f00d f8f0 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; i++) {
   1a472:	2400      	movs	r4, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1a474:	4606      	mov	r6, r0
   1a476:	686d      	ldr	r5, [r5, #4]
  for (int i = 0; i < flat_size; i++) {
   1a478:	42a6      	cmp	r6, r4
   1a47a:	dd0f      	ble.n	1a49c <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x124>
    const int32 val = input_data[i];
   1a47c:	f937 0014 	ldrsh.w	r0, [r7, r4, lsl #1]
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
   1a480:	9b00      	ldr	r3, [sp, #0]
  for (int i = 0; i < flat_size; i++) {
   1a482:	3401      	adds	r4, #1
    const OutputT result = static_cast<OutputT>(scale * (val - zero_point));
   1a484:	1ac0      	subs	r0, r0, r3
   1a486:	f7f2 f82d 	bl	c4e4 <__aeabi_i2d>
   1a48a:	4642      	mov	r2, r8
   1a48c:	464b      	mov	r3, r9
   1a48e:	f7f6 f80d 	bl	104ac <__aeabi_dmul>
   1a492:	f7f6 facd 	bl	10a30 <__aeabi_d2f>
   1a496:	f845 0b04 	str.w	r0, [r5], #4
  for (int i = 0; i < flat_size; i++) {
   1a49a:	e7ed      	b.n	1a478 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x100>
   1a49c:	a808      	add	r0, sp, #32
   1a49e:	f00d f8bc 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
            op_params, GetTensorShape(input), GetTensorData<int16_t>(input),
   1a4a2:	a802      	add	r0, sp, #8
   1a4a4:	f00d f8b9 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
                       TfLiteTypeGetName(input->type),
                       TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
   1a4a8:	2700      	movs	r7, #0
   1a4aa:	e00c      	b.n	1a4c6 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x14e>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1a4ac:	6974      	ldr	r4, [r6, #20]
   1a4ae:	f7f2 fc09 	bl	ccc4 <TfLiteTypeGetName>
   1a4b2:	9000      	str	r0, [sp, #0]
   1a4b4:	f81b 000a 	ldrb.w	r0, [fp, sl]
   1a4b8:	f7f2 fc04 	bl	ccc4 <TfLiteTypeGetName>
   1a4bc:	9a00      	ldr	r2, [sp, #0]
   1a4be:	4603      	mov	r3, r0
   1a4c0:	4933      	ldr	r1, [pc, #204]	; (1a590 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x218>)
   1a4c2:	4630      	mov	r0, r6
   1a4c4:	47a0      	blx	r4
}
   1a4c6:	4638      	mov	r0, r7
   1a4c8:	b00f      	add	sp, #60	; 0x3c
   1a4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteInt32) {
   1a4ce:	2f02      	cmp	r7, #2
   1a4d0:	d159      	bne.n	1a586 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x20e>
        MatchingFlatSize(GetTensorShape(input), GetTensorShape(output));
   1a4d2:	4621      	mov	r1, r4
   1a4d4:	a802      	add	r0, sp, #8
   1a4d6:	9200      	str	r2, [sp, #0]
   1a4d8:	f00d f8e4 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a4dc:	4629      	mov	r1, r5
   1a4de:	a808      	add	r0, sp, #32
   1a4e0:	f00d f8e0 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1a4e4:	a908      	add	r1, sp, #32
   1a4e6:	a802      	add	r0, sp, #8
   1a4e8:	f00d f8b3 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
   1a4ec:	4607      	mov	r7, r0
   1a4ee:	a808      	add	r0, sp, #32
   1a4f0:	f00d f893 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1a4f4:	a802      	add	r0, sp, #8
   1a4f6:	f00d f890 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
    switch (input->type) {
   1a4fa:	9a00      	ldr	r2, [sp, #0]
   1a4fc:	f81b 0002 	ldrb.w	r0, [fp, r2]
   1a500:	2807      	cmp	r0, #7
   1a502:	d010      	beq.n	1a526 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1ae>
   1a504:	2809      	cmp	r0, #9
   1a506:	d026      	beq.n	1a556 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1de>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1a508:	6974      	ldr	r4, [r6, #20]
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1a50a:	f7f2 fbdb 	bl	ccc4 <TfLiteTypeGetName>
   1a50e:	9000      	str	r0, [sp, #0]
   1a510:	f81b 000a 	ldrb.w	r0, [fp, sl]
   1a514:	f7f2 fbd6 	bl	ccc4 <TfLiteTypeGetName>
   1a518:	9a00      	ldr	r2, [sp, #0]
   1a51a:	4603      	mov	r3, r0
   1a51c:	491c      	ldr	r1, [pc, #112]	; (1a590 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x218>)
   1a51e:	4630      	mov	r0, r6
   1a520:	47a0      	blx	r4
    return kTfLiteError;
   1a522:	2701      	movs	r7, #1
   1a524:	e7cf      	b.n	1a4c6 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x14e>
   1a526:	f8d4 9004 	ldr.w	r9, [r4, #4]
        reference_ops::Requantize(
   1a52a:	e9d8 ab00 	ldrd	sl, fp, [r8]
            data->output_shift, input->params.zero_point,
   1a52e:	f8d4 8010 	ldr.w	r8, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a532:	2400      	movs	r4, #0
        reference_ops::Requantize(
   1a534:	692e      	ldr	r6, [r5, #16]
   1a536:	686d      	ldr	r5, [r5, #4]
      }
    }
  }
  static constexpr int32_t kMinOutput = std::numeric_limits<output_type>::min();
  static constexpr int32_t kMaxOutput = std::numeric_limits<output_type>::max();
  for (int i = 0; i < size; ++i) {
   1a538:	42a7      	cmp	r7, r4
   1a53a:	ddb5      	ble.n	1a4a8 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x130>
    const int32_t input = input_data[i] - input_zeropoint;
   1a53c:	f939 0014 	ldrsh.w	r0, [r9, r4, lsl #1]
    const int32_t output =
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
   1a540:	465a      	mov	r2, fp
   1a542:	4651      	mov	r1, sl
   1a544:	eba0 0008 	sub.w	r0, r0, r8
   1a548:	f7fe ff16 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
   1a54c:	4430      	add	r0, r6
        output_zeropoint;
    const int32_t clamped_output =
        std::max(std::min(output, kMaxOutput), kMinOutput);
    output_data[i] = static_cast<output_type>(clamped_output);
   1a54e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < size; ++i) {
   1a552:	3401      	adds	r4, #1
   1a554:	e7f0      	b.n	1a538 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1c0>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1a556:	f8d4 9004 	ldr.w	r9, [r4, #4]
        reference_ops::Requantize(
   1a55a:	e9d8 ab00 	ldrd	sl, fp, [r8]
            data->output_shift, input->params.zero_point,
   1a55e:	f8d4 8010 	ldr.w	r8, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a562:	2400      	movs	r4, #0
        reference_ops::Requantize(
   1a564:	692e      	ldr	r6, [r5, #16]
   1a566:	686d      	ldr	r5, [r5, #4]
   1a568:	42a7      	cmp	r7, r4
   1a56a:	dd9d      	ble.n	1a4a8 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x130>
    const int32_t input = input_data[i] - input_zeropoint;
   1a56c:	f919 0004 	ldrsb.w	r0, [r9, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
   1a570:	465a      	mov	r2, fp
   1a572:	4651      	mov	r1, sl
   1a574:	eba0 0008 	sub.w	r0, r0, r8
   1a578:	f7fe fefe 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
   1a57c:	4430      	add	r0, r6
    output_data[i] = static_cast<output_type>(clamped_output);
   1a57e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < size; ++i) {
   1a582:	3401      	adds	r4, #1
   1a584:	e7f0      	b.n	1a568 <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x1f0>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1a586:	6944      	ldr	r4, [r0, #20]
   1a588:	f81b 0002 	ldrb.w	r0, [fp, r2]
   1a58c:	e7bd      	b.n	1a50a <_ZN6tflite3ops5micro10dequantize4EvalEP13TfLiteContextP10TfLiteNode+0x192>
   1a58e:	bf00      	nop
   1a590:	0003508f 	.word	0x0003508f

0001a594 <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv>:

}  // namespace dequantize

TfLiteRegistration Register_DEQUANTIZE() {
   1a594:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/dequantize::Prepare,
          /*invoke=*/dequantize::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a596:	4604      	mov	r4, r0
TfLiteRegistration Register_DEQUANTIZE() {
   1a598:	4606      	mov	r6, r0
          /*version=*/0};
   1a59a:	4d04      	ldr	r5, [pc, #16]	; (1a5ac <_ZN6tflite3ops5micro19Register_DEQUANTIZEEv+0x18>)
   1a59c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a59e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a5a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a5a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a5a8:	4630      	mov	r0, r6
   1a5aa:	bd70      	pop	{r4, r5, r6, pc}
   1a5ac:	00031988 	.word	0x00031988

0001a5b0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
  return type == kTfLiteBool;
}

typedef bool (*IsSupportedType)(TfLiteType);
template <IsSupportedType>
TfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {
   1a5b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1a5b4:	680a      	ldr	r2, [r1, #0]
TfLiteStatus GenericPrepare(TfLiteContext* context, TfLiteNode* node) {
   1a5b6:	4605      	mov	r5, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1a5b8:	6816      	ldr	r6, [r2, #0]
   1a5ba:	b085      	sub	sp, #20
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1a5bc:	2e01      	cmp	r6, #1
   1a5be:	d00f      	beq.n	1a5e0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x30>
   1a5c0:	2401      	movs	r4, #1
   1a5c2:	4b27      	ldr	r3, [pc, #156]	; (1a660 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb0>)
   1a5c4:	e9cd 6402 	strd	r6, r4, [sp, #8]
   1a5c8:	9301      	str	r3, [sp, #4]
   1a5ca:	4b26      	ldr	r3, [pc, #152]	; (1a664 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb4>)
   1a5cc:	4a26      	ldr	r2, [pc, #152]	; (1a668 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb8>)
   1a5ce:	9300      	str	r3, [sp, #0]
   1a5d0:	6945      	ldr	r5, [r0, #20]
   1a5d2:	2327      	movs	r3, #39	; 0x27
   1a5d4:	4925      	ldr	r1, [pc, #148]	; (1a66c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xbc>)
   1a5d6:	47a8      	blx	r5
    TF_LITE_KERNEL_LOG(context, "Input data type %s (%d) is not supported.",
                       TfLiteTypeGetName(input->type), input->type);
    return kTfLiteError;
  }
  return kTfLiteOk;
}
   1a5d8:	4620      	mov	r0, r4
   1a5da:	b005      	add	sp, #20
   1a5dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1a5e0:	684b      	ldr	r3, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1a5e2:	681c      	ldr	r4, [r3, #0]
   1a5e4:	2c01      	cmp	r4, #1
   1a5e6:	d00c      	beq.n	1a602 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x52>
   1a5e8:	4b1d      	ldr	r3, [pc, #116]	; (1a660 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb0>)
   1a5ea:	e9cd 4602 	strd	r4, r6, [sp, #8]
   1a5ee:	9301      	str	r3, [sp, #4]
   1a5f0:	4b1f      	ldr	r3, [pc, #124]	; (1a670 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xc0>)
   1a5f2:	4a1d      	ldr	r2, [pc, #116]	; (1a668 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb8>)
   1a5f4:	9300      	str	r3, [sp, #0]
   1a5f6:	6944      	ldr	r4, [r0, #20]
   1a5f8:	2328      	movs	r3, #40	; 0x28
   1a5fa:	491c      	ldr	r1, [pc, #112]	; (1a66c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xbc>)
   1a5fc:	47a0      	blx	r4
   1a5fe:	4634      	mov	r4, r6
   1a600:	e7ea      	b.n	1a5d8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
  return &context->tensors[node->outputs->data[index]];
   1a602:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   1a604:	6856      	ldr	r6, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
   1a606:	6887      	ldr	r7, [r0, #8]
   1a608:	01b6      	lsls	r6, r6, #6
  return &context->tensors[node->outputs->data[index]];
   1a60a:	ea4f 1883 	mov.w	r8, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1a60e:	5db8      	ldrb	r0, [r7, r6]
   1a610:	f817 3008 	ldrb.w	r3, [r7, r8]
   1a614:	4283      	cmp	r3, r0
   1a616:	d014      	beq.n	1a642 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x92>
   1a618:	f8d5 9014 	ldr.w	r9, [r5, #20]
   1a61c:	f7f2 fb52 	bl	ccc4 <TfLiteTypeGetName>
   1a620:	4606      	mov	r6, r0
   1a622:	f817 0008 	ldrb.w	r0, [r7, r8]
   1a626:	f7f2 fb4d 	bl	ccc4 <TfLiteTypeGetName>
   1a62a:	4b12      	ldr	r3, [pc, #72]	; (1a674 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xc4>)
   1a62c:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1a630:	9301      	str	r3, [sp, #4]
   1a632:	4b11      	ldr	r3, [pc, #68]	; (1a678 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xc8>)
   1a634:	4628      	mov	r0, r5
   1a636:	9300      	str	r3, [sp, #0]
   1a638:	4a0b      	ldr	r2, [pc, #44]	; (1a668 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb8>)
   1a63a:	232b      	movs	r3, #43	; 0x2b
   1a63c:	490f      	ldr	r1, [pc, #60]	; (1a67c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xcc>)
   1a63e:	47c8      	blx	r9
   1a640:	e7ca      	b.n	1a5d8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
  if (!IsSupportedType(input->type)) {
   1a642:	b953      	cbnz	r3, 1a65a <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xaa>
    TF_LITE_KERNEL_LOG(context, "Input data type %s (%d) is not supported.",
   1a644:	4618      	mov	r0, r3
   1a646:	f8d5 8014 	ldr.w	r8, [r5, #20]
   1a64a:	f7f2 fb3b 	bl	ccc4 <TfLiteTypeGetName>
   1a64e:	5dbb      	ldrb	r3, [r7, r6]
   1a650:	4602      	mov	r2, r0
   1a652:	490b      	ldr	r1, [pc, #44]	; (1a680 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xd0>)
   1a654:	4628      	mov	r0, r5
   1a656:	47c0      	blx	r8
    return kTfLiteError;
   1a658:	e7be      	b.n	1a5d8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
  return kTfLiteOk;
   1a65a:	2400      	movs	r4, #0
   1a65c:	e7bc      	b.n	1a5d8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x28>
   1a65e:	bf00      	nop
   1a660:	00035884 	.word	0x00035884
   1a664:	00034b06 	.word	0x00034b06
   1a668:	000350b2 	.word	0x000350b2
   1a66c:	00034aec 	.word	0x00034aec
   1a670:	00034b16 	.word	0x00034b16
   1a674:	000353f7 	.word	0x000353f7
   1a678:	0003540f 	.word	0x0003540f
   1a67c:	00034b27 	.word	0x00034b27
   1a680:	000350df 	.word	0x000350df

0001a684 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>:

template <typename T>
inline TfLiteStatus EvalImpl(TfLiteContext* context, TfLiteNode* node,
   1a684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1a688:	4692      	mov	sl, r2
  return &context->tensors[node->inputs->data[index]];
   1a68a:	680a      	ldr	r2, [r1, #0]
                             T func(T), TfLiteType expected_type) {
  const TfLiteTensor* input = GetInput(context, node, 0);
   1a68c:	6883      	ldr	r3, [r0, #8]
   1a68e:	6854      	ldr	r4, [r2, #4]
inline TfLiteStatus EvalImpl(TfLiteContext* context, TfLiteNode* node,
   1a690:	4605      	mov	r5, r0
   1a692:	01a2      	lsls	r2, r4, #6
  TfLiteTensor* output = GetOutput(context, node, 0);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, expected_type);
   1a694:	5c98      	ldrb	r0, [r3, r2]
   1a696:	eb03 1484 	add.w	r4, r3, r4, lsl #6
   1a69a:	2801      	cmp	r0, #1
   1a69c:	d015      	beq.n	1a6ca <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x46>
   1a69e:	696e      	ldr	r6, [r5, #20]
   1a6a0:	f7f2 fb10 	bl	ccc4 <TfLiteTypeGetName>
   1a6a4:	4604      	mov	r4, r0
   1a6a6:	2001      	movs	r0, #1
   1a6a8:	f7f2 fb0c 	bl	ccc4 <TfLiteTypeGetName>
   1a6ac:	4b1e      	ldr	r3, [pc, #120]	; (1a728 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xa4>)
   1a6ae:	e9cd 4002 	strd	r4, r0, [sp, #8]
   1a6b2:	9301      	str	r3, [sp, #4]
   1a6b4:	4b1d      	ldr	r3, [pc, #116]	; (1a72c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xa8>)
   1a6b6:	4628      	mov	r0, r5
   1a6b8:	9300      	str	r3, [sp, #0]
   1a6ba:	4a1d      	ldr	r2, [pc, #116]	; (1a730 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xac>)
   1a6bc:	2339      	movs	r3, #57	; 0x39
   1a6be:	491d      	ldr	r1, [pc, #116]	; (1a734 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xb0>)
   1a6c0:	47b0      	blx	r6
   1a6c2:	2001      	movs	r0, #1
  T* out_data = GetTensorData<T>(output);
  for (int64_t i = 0; i < num_elements; ++i) {
    out_data[i] = func(in_data[i]);
  }
  return kTfLiteOk;
}
   1a6c4:	b004      	add	sp, #16
   1a6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  for (int i = 0; i < dims->size; ++i) {
   1a6ca:	2000      	movs	r0, #0
  int64_t count = 1;
   1a6cc:	f04f 0801 	mov.w	r8, #1
   1a6d0:	f04f 0900 	mov.w	r9, #0
  for (int i = 0; i < dims->size; ++i) {
   1a6d4:	68a2      	ldr	r2, [r4, #8]
   1a6d6:	f852 eb04 	ldr.w	lr, [r2], #4
   1a6da:	4586      	cmp	lr, r0
   1a6dc:	dd0c      	ble.n	1a6f8 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x74>
    count *= dims->data[i];
   1a6de:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < dims->size; ++i) {
   1a6e2:	3001      	adds	r0, #1
    count *= dims->data[i];
   1a6e4:	4666      	mov	r6, ip
   1a6e6:	17f7      	asrs	r7, r6, #31
   1a6e8:	fb08 f507 	mul.w	r5, r8, r7
   1a6ec:	fb0c 5509 	mla	r5, ip, r9, r5
   1a6f0:	fba8 890c 	umull	r8, r9, r8, ip
   1a6f4:	44a9      	add	r9, r5
  for (int i = 0; i < dims->size; ++i) {
   1a6f6:	e7f0      	b.n	1a6da <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x56>
  for (int64_t i = 0; i < num_elements; ++i) {
   1a6f8:	2600      	movs	r6, #0
   1a6fa:	2700      	movs	r7, #0
  return &context->tensors[node->outputs->data[index]];
   1a6fc:	684a      	ldr	r2, [r1, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1a6fe:	6865      	ldr	r5, [r4, #4]
   1a700:	6852      	ldr	r2, [r2, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a702:	eb13 1482 	adds.w	r4, r3, r2, lsl #6
   1a706:	bf18      	it	ne
   1a708:	6864      	ldrne	r4, [r4, #4]
   1a70a:	4546      	cmp	r6, r8
   1a70c:	eb77 0309 	sbcs.w	r3, r7, r9
   1a710:	da08      	bge.n	1a724 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0xa0>
    out_data[i] = func(in_data[i]);
   1a712:	f855 0b04 	ldr.w	r0, [r5], #4
   1a716:	47d0      	blx	sl
  for (int64_t i = 0; i < num_elements; ++i) {
   1a718:	3601      	adds	r6, #1
    out_data[i] = func(in_data[i]);
   1a71a:	f844 0b04 	str.w	r0, [r4], #4
  for (int64_t i = 0; i < num_elements; ++i) {
   1a71e:	f147 0700 	adc.w	r7, r7, #0
   1a722:	e7f2      	b.n	1a70a <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x86>
  return kTfLiteOk;
   1a724:	2000      	movs	r0, #0
   1a726:	e7cd      	b.n	1a6c4 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0+0x40>
   1a728:	00035109 	.word	0x00035109
   1a72c:	0003540f 	.word	0x0003540f
   1a730:	000350b2 	.word	0x000350b2
   1a734:	00034b27 	.word	0x00034b27

0001a738 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNode>:

inline TfLiteStatus EvalNumeric(TfLiteContext* context, TfLiteNode* node,
                                float float_func(float)) {
  return EvalImpl<float>(context, node, float_func, kTfLiteFloat32);
   1a738:	4a01      	ldr	r2, [pc, #4]	; (1a740 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1a73a:	f7ff bfa3 	b.w	1a684 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
   1a73e:	bf00      	nop
   1a740:	0002b8e5 	.word	0x0002b8e5

0001a744 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17AbsEvalEP13TfLiteContextP10TfLiteNode>:
   1a744:	4a01      	ldr	r2, [pc, #4]	; (1a74c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17AbsEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1a746:	f7ff bf9d 	b.w	1a684 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
   1a74a:	bf00      	nop
   1a74c:	0002b8d7 	.word	0x0002b8d7

0001a750 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17SinEvalEP13TfLiteContextP10TfLiteNode>:
   1a750:	4a01      	ldr	r2, [pc, #4]	; (1a758 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17SinEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1a752:	f7ff bf97 	b.w	1a684 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
   1a756:	bf00      	nop
   1a758:	0002b8f7 	.word	0x0002b8f7

0001a75c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17CosEvalEP13TfLiteContextP10TfLiteNode>:
   1a75c:	4a01      	ldr	r2, [pc, #4]	; (1a764 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17CosEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1a75e:	f7ff bf91 	b.w	1a684 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
   1a762:	bf00      	nop
   1a764:	0002b8fb 	.word	0x0002b8fb

0001a768 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNode>:
   1a768:	4a01      	ldr	r2, [pc, #4]	; (1a770 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1a76a:	f7ff bf8b 	b.w	1a684 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
   1a76e:	bf00      	nop
   1a770:	0002b907 	.word	0x0002b907

0001a774 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17LogEvalEP13TfLiteContextP10TfLiteNode>:
   1a774:	4a01      	ldr	r2, [pc, #4]	; (1a77c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_17LogEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1a776:	f7ff bf85 	b.w	1a684 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
   1a77a:	bf00      	nop
   1a77c:	0002b8ff 	.word	0x0002b8ff

0001a780 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18SqrtEvalEP13TfLiteContextP10TfLiteNode>:
   1a780:	4a01      	ldr	r2, [pc, #4]	; (1a788 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18SqrtEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1a782:	f7ff bf7f 	b.w	1a684 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_18EvalImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePFT_SA_E10TfLiteType.constprop.0>
   1a786:	bf00      	nop
   1a788:	0002b903 	.word	0x0002b903

0001a78c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SquareEval(TfLiteContext* context, TfLiteNode* node) {
  return EvalNumeric(context, node, [](float f) { return f * f; });
}

TfLiteStatus LogicalNotEval(TfLiteContext* context, TfLiteNode* node) {
   1a78c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  return &context->tensors[node->inputs->data[index]];
   1a790:	680a      	ldr	r2, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, 0);
   1a792:	6883      	ldr	r3, [r0, #8]
   1a794:	6852      	ldr	r2, [r2, #4]
TfLiteStatus LogicalNotEval(TfLiteContext* context, TfLiteNode* node) {
   1a796:	4604      	mov	r4, r0
   1a798:	0190      	lsls	r0, r2, #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, expected_type);
   1a79a:	5c18      	ldrb	r0, [r3, r0]
   1a79c:	eb03 1282 	add.w	r2, r3, r2, lsl #6
   1a7a0:	2806      	cmp	r0, #6
   1a7a2:	d015      	beq.n	1a7d0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x44>
   1a7a4:	6966      	ldr	r6, [r4, #20]
   1a7a6:	f7f2 fa8d 	bl	ccc4 <TfLiteTypeGetName>
   1a7aa:	4605      	mov	r5, r0
   1a7ac:	2006      	movs	r0, #6
   1a7ae:	f7f2 fa89 	bl	ccc4 <TfLiteTypeGetName>
   1a7b2:	4b1f      	ldr	r3, [pc, #124]	; (1a830 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xa4>)
   1a7b4:	e9cd 5002 	strd	r5, r0, [sp, #8]
   1a7b8:	9301      	str	r3, [sp, #4]
   1a7ba:	4b1e      	ldr	r3, [pc, #120]	; (1a834 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xa8>)
   1a7bc:	4620      	mov	r0, r4
   1a7be:	9300      	str	r3, [sp, #0]
   1a7c0:	4a1d      	ldr	r2, [pc, #116]	; (1a838 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xac>)
   1a7c2:	2339      	movs	r3, #57	; 0x39
   1a7c4:	491d      	ldr	r1, [pc, #116]	; (1a83c <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0xb0>)
   1a7c6:	47b0      	blx	r6
   1a7c8:	2001      	movs	r0, #1
  return EvalLogical(context, node, [](bool v) { return !v; });
}
   1a7ca:	b004      	add	sp, #16
   1a7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = 0; i < dims->size; ++i) {
   1a7d0:	f04f 0c00 	mov.w	ip, #0
  int64_t count = 1;
   1a7d4:	2401      	movs	r4, #1
   1a7d6:	2500      	movs	r5, #0
  for (int i = 0; i < dims->size; ++i) {
   1a7d8:	6890      	ldr	r0, [r2, #8]
   1a7da:	f850 8b04 	ldr.w	r8, [r0], #4
   1a7de:	45e0      	cmp	r8, ip
   1a7e0:	dd0d      	ble.n	1a7fe <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x72>
    count *= dims->data[i];
   1a7e2:	f850 eb04 	ldr.w	lr, [r0], #4
  for (int i = 0; i < dims->size; ++i) {
   1a7e6:	f10c 0c01 	add.w	ip, ip, #1
    count *= dims->data[i];
   1a7ea:	4676      	mov	r6, lr
   1a7ec:	17f7      	asrs	r7, r6, #31
   1a7ee:	fb04 f607 	mul.w	r6, r4, r7
   1a7f2:	fb0e 6605 	mla	r6, lr, r5, r6
   1a7f6:	fba4 450e 	umull	r4, r5, r4, lr
   1a7fa:	4435      	add	r5, r6
  for (int i = 0; i < dims->size; ++i) {
   1a7fc:	e7ef      	b.n	1a7de <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x52>
  return &context->tensors[node->outputs->data[index]];
   1a7fe:	6849      	ldr	r1, [r1, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1a800:	6857      	ldr	r7, [r2, #4]
   1a802:	6849      	ldr	r1, [r1, #4]
  for (int64_t i = 0; i < num_elements; ++i) {
   1a804:	2200      	movs	r2, #0
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a806:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
   1a80a:	f04f 0300 	mov.w	r3, #0
   1a80e:	bf18      	it	ne
   1a810:	6849      	ldrne	r1, [r1, #4]
   1a812:	42a2      	cmp	r2, r4
   1a814:	eb73 0005 	sbcs.w	r0, r3, r5
   1a818:	da07      	bge.n	1a82a <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return EvalLogical(context, node, [](bool v) { return !v; });
   1a81a:	5cb8      	ldrb	r0, [r7, r2]
   1a81c:	f080 0001 	eor.w	r0, r0, #1
    out_data[i] = func(in_data[i]);
   1a820:	5488      	strb	r0, [r1, r2]
  for (int64_t i = 0; i < num_elements; ++i) {
   1a822:	3201      	adds	r2, #1
   1a824:	f143 0300 	adc.w	r3, r3, #0
   1a828:	e7f3      	b.n	1a812 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x86>
  return kTfLiteOk;
   1a82a:	2000      	movs	r0, #0
   1a82c:	e7cd      	b.n	1a7ca <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114LogicalNotEvalEP13TfLiteContextP10TfLiteNode+0x3e>
   1a82e:	bf00      	nop
   1a830:	00035109 	.word	0x00035109
   1a834:	0003540f 	.word	0x0003540f
   1a838:	000350b2 	.word	0x000350b2
   1a83c:	00034b27 	.word	0x00034b27

0001a840 <_ZN6tflite3ops5micro12Register_ABSEv>:


}  // namespace
}  // namespace elementwise

TfLiteRegistration Register_ABS() {
   1a840:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
          /*invoke=*/elementwise::AbsEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a842:	4604      	mov	r4, r0
TfLiteRegistration Register_ABS() {
   1a844:	4606      	mov	r6, r0
          /*version=*/0};
   1a846:	4d04      	ldr	r5, [pc, #16]	; (1a858 <_ZN6tflite3ops5micro12Register_ABSEv+0x18>)
   1a848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a84a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a84c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a850:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a854:	4630      	mov	r0, r6
   1a856:	bd70      	pop	{r4, r5, r6, pc}
   1a858:	000319a8 	.word	0x000319a8

0001a85c <_ZN6tflite3ops5micro12Register_SINEv>:

TfLiteRegistration Register_SIN() {
   1a85c:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
          /*invoke=*/elementwise::SinEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a85e:	4604      	mov	r4, r0
TfLiteRegistration Register_SIN() {
   1a860:	4606      	mov	r6, r0
          /*version=*/0};
   1a862:	4d04      	ldr	r5, [pc, #16]	; (1a874 <_ZN6tflite3ops5micro12Register_SINEv+0x18>)
   1a864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a868:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a86c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a870:	4630      	mov	r0, r6
   1a872:	bd70      	pop	{r4, r5, r6, pc}
   1a874:	000319c8 	.word	0x000319c8

0001a878 <_ZN6tflite3ops5micro12Register_COSEv>:

TfLiteRegistration Register_COS() {
   1a878:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
          /*invoke=*/elementwise::CosEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a87a:	4604      	mov	r4, r0
TfLiteRegistration Register_COS() {
   1a87c:	4606      	mov	r6, r0
          /*version=*/0};
   1a87e:	4d04      	ldr	r5, [pc, #16]	; (1a890 <_ZN6tflite3ops5micro12Register_COSEv+0x18>)
   1a880:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a882:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a884:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a88c:	4630      	mov	r0, r6
   1a88e:	bd70      	pop	{r4, r5, r6, pc}
   1a890:	000319e8 	.word	0x000319e8

0001a894 <_ZN6tflite3ops5micro12Register_LOGEv>:

TfLiteRegistration Register_LOG() {
   1a894:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
          /*invoke=*/elementwise::LogEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a896:	4604      	mov	r4, r0
TfLiteRegistration Register_LOG() {
   1a898:	4606      	mov	r6, r0
          /*version=*/0};
   1a89a:	4d04      	ldr	r5, [pc, #16]	; (1a8ac <_ZN6tflite3ops5micro12Register_LOGEv+0x18>)
   1a89c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a89e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a8a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a8a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a8a8:	4630      	mov	r0, r6
   1a8aa:	bd70      	pop	{r4, r5, r6, pc}
   1a8ac:	00031a08 	.word	0x00031a08

0001a8b0 <_ZN6tflite3ops5micro13Register_SQRTEv>:

TfLiteRegistration Register_SQRT() {
   1a8b0:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
          /*invoke=*/elementwise::SqrtEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a8b2:	4604      	mov	r4, r0
TfLiteRegistration Register_SQRT() {
   1a8b4:	4606      	mov	r6, r0
          /*version=*/0};
   1a8b6:	4d04      	ldr	r5, [pc, #16]	; (1a8c8 <_ZN6tflite3ops5micro13Register_SQRTEv+0x18>)
   1a8b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a8ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a8bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a8c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a8c4:	4630      	mov	r0, r6
   1a8c6:	bd70      	pop	{r4, r5, r6, pc}
   1a8c8:	00031a28 	.word	0x00031a28

0001a8cc <_ZN6tflite3ops5micro14Register_RSQRTEv>:

TfLiteRegistration Register_RSQRT() {
   1a8cc:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
          /*invoke=*/elementwise::RsqrtEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a8ce:	4604      	mov	r4, r0
TfLiteRegistration Register_RSQRT() {
   1a8d0:	4606      	mov	r6, r0
          /*version=*/0};
   1a8d2:	4d04      	ldr	r5, [pc, #16]	; (1a8e4 <_ZN6tflite3ops5micro14Register_RSQRTEv+0x18>)
   1a8d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a8d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a8d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a8dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a8e0:	4630      	mov	r0, r6
   1a8e2:	bd70      	pop	{r4, r5, r6, pc}
   1a8e4:	00031a48 	.word	0x00031a48

0001a8e8 <_ZN6tflite3ops5micro15Register_SQUAREEv>:

TfLiteRegistration Register_SQUARE() {
   1a8e8:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsNumericSupportedType>,
          /*invoke=*/elementwise::SquareEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a8ea:	4604      	mov	r4, r0
TfLiteRegistration Register_SQUARE() {
   1a8ec:	4606      	mov	r6, r0
          /*version=*/0};
   1a8ee:	4d04      	ldr	r5, [pc, #16]	; (1a900 <_ZN6tflite3ops5micro15Register_SQUAREEv+0x18>)
   1a8f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a8f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a8f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a8f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a8fc:	4630      	mov	r0, r6
   1a8fe:	bd70      	pop	{r4, r5, r6, pc}
   1a900:	00031a68 	.word	0x00031a68

0001a904 <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv>:

TfLiteRegistration Register_LOGICAL_NOT() {
   1a904:	b570      	push	{r4, r5, r6, lr}
          elementwise::GenericPrepare<elementwise::IsLogicalSupportedType>,
          /*invoke=*/elementwise::LogicalNotEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1a906:	4604      	mov	r4, r0
TfLiteRegistration Register_LOGICAL_NOT() {
   1a908:	4606      	mov	r6, r0
          /*version=*/0};
   1a90a:	4d04      	ldr	r5, [pc, #16]	; (1a91c <_ZN6tflite3ops5micro20Register_LOGICAL_NOTEv+0x18>)
   1a90c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a90e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a910:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1a918:	4630      	mov	r0, r6
   1a91a:	bd70      	pop	{r4, r5, r6, pc}
   1a91c:	00031a88 	.word	0x00031a88

0001a920 <_ZN6tflite3ops5micro6custom16GetString_ETHOSUEv>:
namespace ops {
namespace micro {
namespace custom {
TfLiteRegistration* Register_ETHOSU() { return nullptr; }

const char* GetString_ETHOSU() { return ""; }
   1a920:	4800      	ldr	r0, [pc, #0]	; (1a924 <_ZN6tflite3ops5micro6custom16GetString_ETHOSUEv+0x4>)
   1a922:	4770      	bx	lr
   1a924:	00033f9d 	.word	0x00033f9d

0001a928 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1a928:	680b      	ldr	r3, [r1, #0]
namespace floor {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1a92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a92e:	685d      	ldr	r5, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1a930:	6884      	ldr	r4, [r0, #8]
   1a932:	01ab      	lsls	r3, r5, #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1a934:	4606      	mov	r6, r0
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
   1a936:	5ce0      	ldrb	r0, [r4, r3]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1a938:	b090      	sub	sp, #64	; 0x40
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
   1a93a:	2801      	cmp	r0, #1
   1a93c:	eb04 1585 	add.w	r5, r4, r5, lsl #6
   1a940:	d015      	beq.n	1a96e <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x46>
   1a942:	6975      	ldr	r5, [r6, #20]
   1a944:	f7f2 f9be 	bl	ccc4 <TfLiteTypeGetName>
   1a948:	4604      	mov	r4, r0
   1a94a:	2001      	movs	r0, #1
   1a94c:	f7f2 f9ba 	bl	ccc4 <TfLiteTypeGetName>
   1a950:	4b2a      	ldr	r3, [pc, #168]	; (1a9fc <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xd4>)
   1a952:	e9cd 4002 	strd	r4, r0, [sp, #8]
   1a956:	9301      	str	r3, [sp, #4]
   1a958:	4b29      	ldr	r3, [pc, #164]	; (1aa00 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xd8>)
   1a95a:	4630      	mov	r0, r6
   1a95c:	9300      	str	r3, [sp, #0]
   1a95e:	4a29      	ldr	r2, [pc, #164]	; (1aa04 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xdc>)
   1a960:	2320      	movs	r3, #32
   1a962:	4929      	ldr	r1, [pc, #164]	; (1aa08 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xe0>)
   1a964:	47a8      	blx	r5
   1a966:	2001      	movs	r0, #1
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
                       GetTensorShape(output), GetTensorData<float>(output));
  return kTfLiteOk;
}
   1a968:	b010      	add	sp, #64	; 0x40
   1a96a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return &context->tensors[node->outputs->data[index]];
   1a96e:	684b      	ldr	r3, [r1, #4]
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
   1a970:	a804      	add	r0, sp, #16
   1a972:	685b      	ldr	r3, [r3, #4]
   1a974:	4629      	mov	r1, r5
   1a976:	eb04 1483 	add.w	r4, r4, r3, lsl #6
   1a97a:	f00c fe93 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                       GetTensorShape(output), GetTensorData<float>(output));
   1a97e:	4621      	mov	r1, r4
   1a980:	a80a      	add	r0, sp, #40	; 0x28
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1a982:	f8d5 8004 	ldr.w	r8, [r5, #4]
   1a986:	f00c fe8d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1a98a:	b104      	cbz	r4, 1a98e <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x66>
   1a98c:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   1a98e:	9e04      	ldr	r6, [sp, #16]
   1a990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a992:	429e      	cmp	r6, r3
   1a994:	d001      	beq.n	1a99a <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x72>
   1a996:	f016 fa44 	bl	30e22 <abort>
  for (int i = 0; i < dims_count; ++i) {
   1a99a:	2500      	movs	r5, #0
   1a99c:	42ae      	cmp	r6, r5
   1a99e:	dd0c      	ble.n	1a9ba <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x92>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1a9a0:	4629      	mov	r1, r5
   1a9a2:	a804      	add	r0, sp, #16
   1a9a4:	f00c fe44 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a9a8:	4629      	mov	r1, r5
   1a9aa:	4607      	mov	r7, r0
   1a9ac:	a80a      	add	r0, sp, #40	; 0x28
   1a9ae:	f00c fe3f 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   1a9b2:	4287      	cmp	r7, r0
   1a9b4:	d1ef      	bne.n	1a996 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  for (int i = 0; i < dims_count; ++i) {
   1a9b6:	3501      	adds	r5, #1
   1a9b8:	e7f0      	b.n	1a99c <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x74>
    for (int i = 0; i < size_; i++) {
   1a9ba:	2300      	movs	r3, #0
    int buffer_size = 1;
   1a9bc:	2101      	movs	r1, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1a9be:	2e05      	cmp	r6, #5
   1a9c0:	bfcc      	ite	gt
   1a9c2:	9a05      	ldrgt	r2, [sp, #20]
   1a9c4:	aa05      	addle	r2, sp, #20
    for (int i = 0; i < size_; i++) {
   1a9c6:	429e      	cmp	r6, r3
   1a9c8:	dc0b      	bgt.n	1a9e2 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xba>
   1a9ca:	4643      	mov	r3, r8

inline void Floor(const RuntimeShape& input_shape, const float* input_data,
                  const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; i++) {
   1a9cc:	2200      	movs	r2, #0
   1a9ce:	428a      	cmp	r2, r1
   1a9d0:	da0c      	bge.n	1a9ec <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xc4>
    int offset = i;
    output_data[offset] = std::floor(input_data[offset]);
   1a9d2:	ecf3 7a01 	vldmia	r3!, {s15}
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
   1a9d6:	fefb 7a67 	vrintm.f32	s15, s15
  for (int i = 0; i < flat_size; i++) {
   1a9da:	3201      	adds	r2, #1
    output_data[offset] = std::floor(input_data[offset]);
   1a9dc:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; i++) {
   1a9e0:	e7f5      	b.n	1a9ce <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0xa6>
      buffer_size *= dims_data[i];
   1a9e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   1a9e6:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   1a9e8:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
   1a9ea:	e7ec      	b.n	1a9c6 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x9e>
   1a9ec:	a80a      	add	r0, sp, #40	; 0x28
   1a9ee:	f00c fe14 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Floor(GetTensorShape(input), GetTensorData<float>(input),
   1a9f2:	a804      	add	r0, sp, #16
   1a9f4:	f00c fe11 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1a9f8:	2000      	movs	r0, #0
   1a9fa:	e7b5      	b.n	1a968 <_ZN6tflite3ops5micro5floor4EvalEP13TfLiteContextP10TfLiteNode+0x40>
   1a9fc:	00034b41 	.word	0x00034b41
   1aa00:	0003540f 	.word	0x0003540f
   1aa04:	00035117 	.word	0x00035117
   1aa08:	00034b27 	.word	0x00034b27

0001aa0c <_ZN6tflite3ops5micro14Register_FLOOREv>:
}  // namespace floor

TfLiteRegistration Register_FLOOR() {
   1aa0c:	b510      	push	{r4, lr}
   1aa0e:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/floor::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1aa10:	2220      	movs	r2, #32
   1aa12:	2100      	movs	r1, #0
   1aa14:	f016 fa4f 	bl	30eb6 <memset>
   1aa18:	4b01      	ldr	r3, [pc, #4]	; (1aa20 <_ZN6tflite3ops5micro14Register_FLOOREv+0x14>)
}
   1aa1a:	4620      	mov	r0, r4
          /*version=*/0};
   1aa1c:	60e3      	str	r3, [r4, #12]
}
   1aa1e:	bd10      	pop	{r4, pc}
   1aa20:	0001a929 	.word	0x0001a929

0001aa24 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1aa24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   1aa28:	690f      	ldr	r7, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1aa2a:	4604      	mov	r4, r0
   1aa2c:	460a      	mov	r2, r1
   1aa2e:	b089      	sub	sp, #36	; 0x24
  TFLITE_DCHECK(node->user_data != nullptr);
   1aa30:	b90f      	cbnz	r7, 1aa36 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
   1aa32:	f016 f9f6 	bl	30e22 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1aa36:	f8d1 9014 	ldr.w	r9, [r1, #20]
   1aa3a:	f1b9 0f00 	cmp.w	r9, #0
   1aa3e:	d0f8      	beq.n	1aa32 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe>

  OpData* data = static_cast<OpData*>(node->user_data);
  const auto params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1aa40:	f8d1 e000 	ldr.w	lr, [r1]
   1aa44:	6885      	ldr	r5, [r0, #8]
  const bool use_tensor = index < node->inputs->size &&
   1aa46:	f8de 3000 	ldr.w	r3, [lr]
  return &context->tensors[node->inputs->data[index]];
   1aa4a:	f8de 1004 	ldr.w	r1, [lr, #4]
  const bool use_tensor = index < node->inputs->size &&
   1aa4e:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
   1aa50:	ea4f 1081 	mov.w	r0, r1, lsl #6
   1aa54:	eb05 1181 	add.w	r1, r5, r1, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   1aa58:	dd27      	ble.n	1aaaa <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x86>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   1aa5a:	f8de 300c 	ldr.w	r3, [lr, #12]
  const bool use_tensor = index < node->inputs->size &&
   1aa5e:	1c5e      	adds	r6, r3, #1
   1aa60:	d023      	beq.n	1aaaa <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x86>
    return &context->tensors[node->inputs->data[index]];
   1aa62:	eb05 1383 	add.w	r3, r5, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1aa66:	6852      	ldr	r2, [r2, #4]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1aa68:	5c28      	ldrb	r0, [r5, r0]
   1aa6a:	6856      	ldr	r6, [r2, #4]
   1aa6c:	ea4f 1886 	mov.w	r8, r6, lsl #6
   1aa70:	f815 c008 	ldrb.w	ip, [r5, r8]
   1aa74:	eb05 1686 	add.w	r6, r5, r6, lsl #6
   1aa78:	4584      	cmp	ip, r0
   1aa7a:	d018      	beq.n	1aaae <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x8a>
   1aa7c:	6967      	ldr	r7, [r4, #20]
   1aa7e:	f7f2 f921 	bl	ccc4 <TfLiteTypeGetName>
   1aa82:	4606      	mov	r6, r0
   1aa84:	f815 0008 	ldrb.w	r0, [r5, r8]
   1aa88:	f7f2 f91c 	bl	ccc4 <TfLiteTypeGetName>
   1aa8c:	4b22      	ldr	r3, [pc, #136]	; (1ab18 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
   1aa8e:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1aa92:	9301      	str	r3, [sp, #4]
   1aa94:	4b21      	ldr	r3, [pc, #132]	; (1ab1c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
   1aa96:	4620      	mov	r0, r4
   1aa98:	9300      	str	r3, [sp, #0]
   1aa9a:	4a21      	ldr	r2, [pc, #132]	; (1ab20 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
   1aa9c:	2360      	movs	r3, #96	; 0x60
   1aa9e:	4921      	ldr	r1, [pc, #132]	; (1ab24 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   1aaa0:	47b8      	blx	r7
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
   1aaa2:	2001      	movs	r0, #1
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
                         filter, bias, output, data);
}
   1aaa4:	b009      	add	sp, #36	; 0x24
   1aaa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return nullptr;
   1aaaa:	2300      	movs	r3, #0
   1aaac:	e7db      	b.n	1aa66 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
  return &context->tensors[node->inputs->data[index]];
   1aaae:	f8de 2008 	ldr.w	r2, [lr, #8]
   1aab2:	0190      	lsls	r0, r2, #6
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
   1aab4:	5c28      	ldrb	r0, [r5, r0]
   1aab6:	eb05 1282 	add.w	r2, r5, r2, lsl #6
   1aaba:	4560      	cmp	r0, ip
   1aabc:	d004      	beq.n	1aac8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa4>
   1aabe:	4620      	mov	r0, r4
   1aac0:	6963      	ldr	r3, [r4, #20]
   1aac2:	4919      	ldr	r1, [pc, #100]	; (1ab28 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
   1aac4:	4798      	blx	r3
   1aac6:	e7ec      	b.n	1aaa2 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x7e>
  if (data_type != kTfLiteFloat32) {
   1aac8:	2801      	cmp	r0, #1
   1aaca:	d023      	beq.n	1ab14 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>
  return CalculateOpData(context, params->activation, input->type, input,
   1aacc:	f899 5000 	ldrb.w	r5, [r9]
    double real_multiplier = 0.0;
   1aad0:	f04f 0800 	mov.w	r8, #0
   1aad4:	f04f 0900 	mov.w	r9, #0
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   1aad8:	a806      	add	r0, sp, #24
   1aada:	e9cd 6000 	strd	r6, r0, [sp]
   1aade:	4620      	mov	r0, r4
    double real_multiplier = 0.0;
   1aae0:	e9cd 8906 	strd	r8, r9, [sp, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   1aae4:	f7f7 f854 	bl	11b90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   1aae8:	2800      	cmp	r0, #0
   1aaea:	d1db      	bne.n	1aaa4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
   1aaec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   1aaf0:	463a      	mov	r2, r7
   1aaf2:	ab05      	add	r3, sp, #20
   1aaf4:	f006 fa42 	bl	20f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    data->output_shift = -exponent;
   1aaf8:	9b05      	ldr	r3, [sp, #20]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1aafa:	4632      	mov	r2, r6
    data->output_shift = -exponent;
   1aafc:	425b      	negs	r3, r3
   1aafe:	607b      	str	r3, [r7, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1ab00:	f107 030c 	add.w	r3, r7, #12
   1ab04:	9300      	str	r3, [sp, #0]
   1ab06:	4629      	mov	r1, r5
   1ab08:	4620      	mov	r0, r4
   1ab0a:	f107 0308 	add.w	r3, r7, #8
   1ab0e:	f006 fadb 	bl	210c8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
   1ab12:	e7c7      	b.n	1aaa4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  return status;
   1ab14:	2000      	movs	r0, #0
   1ab16:	e7c5      	b.n	1aaa4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
   1ab18:	000353f7 	.word	0x000353f7
   1ab1c:	0003540f 	.word	0x0003540f
   1ab20:	0003513e 	.word	0x0003513e
   1ab24:	00034b27 	.word	0x00034b27
   1ab28:	0003516f 	.word	0x0003516f

0001ab2c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:
}

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
   1ab2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab30:	ed2d 8b02 	vpush	{d8}
  if (activation == kTfLiteActRelu) {
   1ab34:	2a01      	cmp	r2, #1
   1ab36:	b09d      	sub	sp, #116	; 0x74
   1ab38:	461c      	mov	r4, r3
   1ab3a:	e9dd 8528 	ldrd	r8, r5, [sp, #160]	; 0xa0
   1ab3e:	f8dd 90a8 	ldr.w	r9, [sp, #168]	; 0xa8
   1ab42:	d067      	beq.n	1ac14 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xe8>
  } else if (activation == kTfLiteActRelu6) {
   1ab44:	2a03      	cmp	r2, #3
   1ab46:	d06a      	beq.n	1ac1e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xf2>
    *activation_max = std::numeric_limits<T>::max();
   1ab48:	eddf 7a51 	vldr	s15, [pc, #324]	; 1ac90 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x164>
   1ab4c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
   1ab50:	2a02      	cmp	r2, #2
   1ab52:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
   1ab56:	fe48 8aa7 	vseleq.f32	s17, s17, s15
   1ab5a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 1ac94 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x168>
   1ab5e:	fe08 8a27 	vseleq.f32	s16, s16, s15
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
  op_params.float_activation_max = output_activation_max;
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1ab62:	4621      	mov	r1, r4
   1ab64:	a804      	add	r0, sp, #16
   1ab66:	f00c fd9d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ab6a:	b104      	cbz	r4, 1ab6e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x42>
   1ab6c:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(filter), GetTensorData<float>(filter),
   1ab6e:	4641      	mov	r1, r8
   1ab70:	a80a      	add	r0, sp, #40	; 0x28
   1ab72:	f00c fd97 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ab76:	f1b8 0f00 	cmp.w	r8, #0
   1ab7a:	d001      	beq.n	1ab80 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x54>
   1ab7c:	f8d8 8004 	ldr.w	r8, [r8, #4]
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
   1ab80:	4629      	mov	r1, r5
   1ab82:	a810      	add	r0, sp, #64	; 0x40
   1ab84:	f00c fd8e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ab88:	b105      	cbz	r5, 1ab8c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x60>
   1ab8a:	686d      	ldr	r5, [r5, #4]
   1ab8c:	4649      	mov	r1, r9
   1ab8e:	a816      	add	r0, sp, #88	; 0x58
   1ab90:	f00c fd88 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ab94:	f1b9 0f00 	cmp.w	r9, #0
   1ab98:	d001      	beq.n	1ab9e <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x72>
   1ab9a:	f8d9 9004 	ldr.w	r9, [r9, #4]
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
  const int weights_dims_count = weights_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
   1ab9e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1aba0:	a816      	add	r0, sp, #88	; 0x58
   1aba2:	3b01      	subs	r3, #1
   1aba4:	4619      	mov	r1, r3
   1aba6:	9300      	str	r3, [sp, #0]
   1aba8:	f010 fecb 	bl	2b942 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int weights_dims_count = weights_shape.DimensionsCount();
   1abac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   1abae:	9b00      	ldr	r3, [sp, #0]
   1abb0:	1eb1      	subs	r1, r6, #2
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
   1abb2:	9002      	str	r0, [sp, #8]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   1abb4:	aa16      	add	r2, sp, #88	; 0x58
   1abb6:	a80a      	add	r0, sp, #40	; 0x28
   1abb8:	f00f fbe4 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   1abbc:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
   1abbe:	4683      	mov	fp, r0
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   1abc0:	a80a      	add	r0, sp, #40	; 0x28
   1abc2:	f00c fd35 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   1abc6:	2300      	movs	r3, #0
      float total = 0.f;
      for (int d = 0; d < accum_depth; ++d) {
        total += input_data[b * accum_depth + d] *
                 weights_data[out_c * accum_depth + d];
      }
      float bias_value = 0.0f;
   1abc8:	eddf 6a33 	vldr	s13, [pc, #204]	; 1ac98 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x16c>
  for (int b = 0; b < batches; ++b) {
   1abcc:	461e      	mov	r6, r3
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
   1abce:	9300      	str	r3, [sp, #0]
  for (int b = 0; b < batches; ++b) {
   1abd0:	9a02      	ldr	r2, [sp, #8]
   1abd2:	42b2      	cmp	r2, r6
   1abd4:	dd4a      	ble.n	1ac6c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x140>
   1abd6:	9a00      	ldr	r2, [sp, #0]
   1abd8:	462f      	mov	r7, r5
   1abda:	eb09 0282 	add.w	r2, r9, r2, lsl #2
   1abde:	9201      	str	r2, [sp, #4]
   1abe0:	eb04 0283 	add.w	r2, r4, r3, lsl #2
   1abe4:	9203      	str	r2, [sp, #12]
   1abe6:	2200      	movs	r2, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1abe8:	4694      	mov	ip, r2
   1abea:	45e3      	cmp	fp, ip
   1abec:	dd38      	ble.n	1ac60 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x134>
      for (int d = 0; d < accum_depth; ++d) {
   1abee:	f04f 0e00 	mov.w	lr, #0
      float total = 0.f;
   1abf2:	eddf 7a29 	vldr	s15, [pc, #164]	; 1ac98 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x16c>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1abf6:	f8dd a00c 	ldr.w	sl, [sp, #12]
   1abfa:	eb08 0182 	add.w	r1, r8, r2, lsl #2
      for (int d = 0; d < accum_depth; ++d) {
   1abfe:	4570      	cmp	r0, lr
   1ac00:	dd10      	ble.n	1ac24 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xf8>
        total += input_data[b * accum_depth + d] *
   1ac02:	ecba 6a01 	vldmia	sl!, {s12}
                 weights_data[out_c * accum_depth + d];
   1ac06:	ecb1 7a01 	vldmia	r1!, {s14}
      for (int d = 0; d < accum_depth; ++d) {
   1ac0a:	f10e 0e01 	add.w	lr, lr, #1
        total += input_data[b * accum_depth + d] *
   1ac0e:	eee6 7a07 	vfma.f32	s15, s12, s14
      for (int d = 0; d < accum_depth; ++d) {
   1ac12:	e7f4      	b.n	1abfe <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xd2>
    *activation_max = std::numeric_limits<T>::max();
   1ac14:	eddf 8a1e 	vldr	s17, [pc, #120]	; 1ac90 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x164>
    *activation_min = 0;
   1ac18:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 1ac98 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x16c>
   1ac1c:	e7a1      	b.n	1ab62 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x36>
    *activation_max = 6;
   1ac1e:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
   1ac22:	e7f9      	b.n	1ac18 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xec>
      if (bias_data) {
   1ac24:	b1cd      	cbz	r5, 1ac5a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0x12e>
        bias_value = bias_data[out_c];
   1ac26:	ed97 7a00 	vldr	s14, [r7]
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
   1ac2a:	ee77 7a87 	vadd.f32	s15, s15, s14
	return __b;
   1ac2e:	eef4 7a48 	vcmp.f32	s15, s16
   1ac32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac36:	bf48      	it	mi
   1ac38:	eef0 7a48 	vmovmi.f32	s15, s16
	return __b;
   1ac3c:	eef4 7a68 	vcmp.f32	s15, s17
   1ac40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ac44:	9901      	ldr	r1, [sp, #4]
   1ac46:	fe78 7aa7 	vselgt.f32	s15, s17, s15
   1ac4a:	ece1 7a01 	vstmia	r1!, {s15}
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1ac4e:	f10c 0c01 	add.w	ip, ip, #1
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
   1ac52:	9101      	str	r1, [sp, #4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1ac54:	3704      	adds	r7, #4
   1ac56:	4402      	add	r2, r0
   1ac58:	e7c7      	b.n	1abea <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xbe>
      float bias_value = 0.0f;
   1ac5a:	eeb0 7a66 	vmov.f32	s14, s13
   1ac5e:	e7e4      	b.n	1ac2a <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xfe>
  for (int b = 0; b < batches; ++b) {
   1ac60:	9a00      	ldr	r2, [sp, #0]
   1ac62:	3601      	adds	r6, #1
   1ac64:	445a      	add	r2, fp
   1ac66:	9200      	str	r2, [sp, #0]
   1ac68:	4403      	add	r3, r0
   1ac6a:	e7b1      	b.n	1abd0 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_+0xa4>
   1ac6c:	a816      	add	r0, sp, #88	; 0x58
   1ac6e:	f00c fcd4 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1ac72:	a810      	add	r0, sp, #64	; 0x40
   1ac74:	f00c fcd1 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
   1ac78:	a80a      	add	r0, sp, #40	; 0x28
   1ac7a:	f00c fcce 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1ac7e:	a804      	add	r0, sp, #16
   1ac80:	f00c fccb 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
}
   1ac84:	2000      	movs	r0, #0
   1ac86:	b01d      	add	sp, #116	; 0x74
   1ac88:	ecbd 8b02 	vpop	{d8}
   1ac8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac90:	7f7fffff 	.word	0x7f7fffff
   1ac94:	ff7fffff 	.word	0xff7fffff
   1ac98:	00000000 	.word	0x00000000

0001ac9c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1ac9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aca0:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1aca4:	694a      	ldr	r2, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1aca6:	4680      	mov	r8, r0
   1aca8:	b0b5      	sub	sp, #212	; 0xd4
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1acaa:	b90a      	cbnz	r2, 1acb0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x14>
   1acac:	f016 f8b9 	bl	30e22 <abort>
  const auto* params =
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1acb0:	f8d0 9008 	ldr.w	r9, [r0, #8]
   1acb4:	6808      	ldr	r0, [r1, #0]
  const bool use_tensor = index < node->inputs->size &&
   1acb6:	6803      	ldr	r3, [r0, #0]
  return &context->tensors[node->inputs->data[index]];
   1acb8:	6846      	ldr	r6, [r0, #4]
   1acba:	6887      	ldr	r7, [r0, #8]
  const bool use_tensor = index < node->inputs->size &&
   1acbc:	2b02      	cmp	r3, #2
  return &context->tensors[node->inputs->data[index]];
   1acbe:	ea4f 1b86 	mov.w	fp, r6, lsl #6
   1acc2:	eb09 1787 	add.w	r7, r9, r7, lsl #6
   1acc6:	eb09 1686 	add.w	r6, r9, r6, lsl #6
  const bool use_tensor = index < node->inputs->size &&
   1acca:	dd23      	ble.n	1ad14 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x78>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   1accc:	68c4      	ldr	r4, [r0, #12]
  const bool use_tensor = index < node->inputs->size &&
   1acce:	1c63      	adds	r3, r4, #1
   1acd0:	d020      	beq.n	1ad14 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x78>
    return &context->tensors[node->inputs->data[index]];
   1acd2:	eb09 1484 	add.w	r4, r9, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1acd6:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
   1acd8:	6908      	ldr	r0, [r1, #16]
   1acda:	685d      	ldr	r5, [r3, #4]
   1acdc:	ea4f 1a85 	mov.w	sl, r5, lsl #6
   1ace0:	eb09 1585 	add.w	r5, r9, r5, lsl #6
   1ace4:	2800      	cmp	r0, #0
   1ace6:	d0e1      	beq.n	1acac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
   1ace8:	f819 300b 	ldrb.w	r3, [r9, fp]
   1acec:	2b03      	cmp	r3, #3
   1acee:	d057      	beq.n	1ada0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x104>
   1acf0:	2b09      	cmp	r3, #9
   1acf2:	d011      	beq.n	1ad18 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
   1acf4:	2b01      	cmp	r3, #1
   1acf6:	f040 8126 	bne.w	1af46 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2aa>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
   1acfa:	7812      	ldrb	r2, [r2, #0]
   1acfc:	4633      	mov	r3, r6
   1acfe:	4640      	mov	r0, r8
   1ad00:	e9cd 4501 	strd	r4, r5, [sp, #4]
   1ad04:	9700      	str	r7, [sp, #0]
   1ad06:	f7ff ff11 	bl	1ab2c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   1ad0a:	b035      	add	sp, #212	; 0xd4
   1ad0c:	ecbd 8b02 	vpop	{d8}
   1ad10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return nullptr;
   1ad14:	2400      	movs	r4, #0
   1ad16:	e7de      	b.n	1acd6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x3a>
  op_params.input_offset = -input->params.zero_point;
   1ad18:	6933      	ldr	r3, [r6, #16]
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1ad1a:	4631      	mov	r1, r6
  op_params.input_offset = -input->params.zero_point;
   1ad1c:	425b      	negs	r3, r3
   1ad1e:	932a      	str	r3, [sp, #168]	; 0xa8
  op_params.weights_offset = -filter->params.zero_point;
   1ad20:	693b      	ldr	r3, [r7, #16]
   1ad22:	425b      	negs	r3, r3
   1ad24:	932b      	str	r3, [sp, #172]	; 0xac
  op_params.output_offset = output->params.zero_point;
   1ad26:	692b      	ldr	r3, [r5, #16]
   1ad28:	932c      	str	r3, [sp, #176]	; 0xb0
  op_params.output_multiplier = data.output_multiplier;
   1ad2a:	6803      	ldr	r3, [r0, #0]
   1ad2c:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_shift = -data.output_shift;
   1ad2e:	6843      	ldr	r3, [r0, #4]
   1ad30:	425b      	negs	r3, r3
   1ad32:	932e      	str	r3, [sp, #184]	; 0xb8
  op_params.quantized_activation_min = data.output_activation_min;
   1ad34:	6883      	ldr	r3, [r0, #8]
   1ad36:	932f      	str	r3, [sp, #188]	; 0xbc
  op_params.quantized_activation_max = data.output_activation_max;
   1ad38:	68c3      	ldr	r3, [r0, #12]
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1ad3a:	a812      	add	r0, sp, #72	; 0x48
  op_params.quantized_activation_max = data.output_activation_max;
   1ad3c:	9330      	str	r3, [sp, #192]	; 0xc0
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1ad3e:	f00c fcb1 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
   1ad42:	4639      	mov	r1, r7
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ad44:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1ad48:	a818      	add	r0, sp, #96	; 0x60
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1ad4a:	ae1e      	add	r6, sp, #120	; 0x78
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
   1ad4c:	f00c fcaa 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
   1ad50:	4621      	mov	r1, r4
   1ad52:	4630      	mov	r0, r6
   1ad54:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1ad58:	f00c fca4 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ad5c:	b104      	cbz	r4, 1ad60 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xc4>
   1ad5e:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<int8_t>(output));
   1ad60:	af24      	add	r7, sp, #144	; 0x90
   1ad62:	4629      	mov	r1, r5
   1ad64:	4638      	mov	r0, r7
   1ad66:	f00c fc9d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
   1ad6a:	686b      	ldr	r3, [r5, #4]
   1ad6c:	4642      	mov	r2, r8
   1ad6e:	e9cd 7303 	strd	r7, r3, [sp, #12]
   1ad72:	e9cd 6401 	strd	r6, r4, [sp, #4]
   1ad76:	f8cd 9000 	str.w	r9, [sp]
   1ad7a:	ab18      	add	r3, sp, #96	; 0x60
   1ad7c:	a912      	add	r1, sp, #72	; 0x48
   1ad7e:	a82a      	add	r0, sp, #168	; 0xa8
   1ad80:	f010 fe7b 	bl	2ba7a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa>
      TF_LITE_FULLY_CONNECTED(uint8_t);
   1ad84:	4638      	mov	r0, r7
   1ad86:	f00c fc48 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1ad8a:	4630      	mov	r0, r6
      TF_LITE_FULLY_CONNECTED(int16_t);
   1ad8c:	f00c fc45 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1ad90:	a818      	add	r0, sp, #96	; 0x60
   1ad92:	f00c fc42 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1ad96:	a812      	add	r0, sp, #72	; 0x48
   1ad98:	f00c fc3f 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1ad9c:	2000      	movs	r0, #0
      break;
   1ad9e:	e7b4      	b.n	1ad0a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  const int32_t filter_offset = -filter->params.zero_point;
   1ada0:	693b      	ldr	r3, [r7, #16]
  const int32_t input_offset = -input->params.zero_point;
   1ada2:	6932      	ldr	r2, [r6, #16]
  const int32_t filter_offset = -filter->params.zero_point;
   1ada4:	425b      	negs	r3, r3
  const int32_t input_offset = -input->params.zero_point;
   1ada6:	4252      	negs	r2, r2
  const int32_t output_offset = output->params.zero_point;
   1ada8:	6929      	ldr	r1, [r5, #16]
  op_params.weights_offset = filter_offset;
   1adaa:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
  op_params.output_multiplier = data.output_multiplier;
   1adae:	6803      	ldr	r3, [r0, #0]
  op_params.output_offset = output_offset;
   1adb0:	912c      	str	r1, [sp, #176]	; 0xb0
  op_params.output_multiplier = data.output_multiplier;
   1adb2:	932d      	str	r3, [sp, #180]	; 0xb4
  op_params.output_shift = -data.output_shift;
   1adb4:	6843      	ldr	r3, [r0, #4]
   1adb6:	425b      	negs	r3, r3
   1adb8:	932e      	str	r3, [sp, #184]	; 0xb8
  op_params.quantized_activation_min = data.output_activation_min;
   1adba:	6883      	ldr	r3, [r0, #8]
   1adbc:	932f      	str	r3, [sp, #188]	; 0xbc
  op_params.quantized_activation_max = data.output_activation_max;
   1adbe:	68c3      	ldr	r3, [r0, #12]
  switch (output->type) {
   1adc0:	f819 000a 	ldrb.w	r0, [r9, sl]
  op_params.quantized_activation_max = data.output_activation_max;
   1adc4:	9330      	str	r3, [sp, #192]	; 0xc0
  switch (output->type) {
   1adc6:	2803      	cmp	r0, #3
   1adc8:	d00d      	beq.n	1ade6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x14a>
   1adca:	2807      	cmp	r0, #7
   1adcc:	d031      	beq.n	1ae32 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x196>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1adce:	f8d8 4014 	ldr.w	r4, [r8, #20]
   1add2:	f7f1 ff77 	bl	ccc4 <TfLiteTypeGetName>
   1add6:	4602      	mov	r2, r0
   1add8:	f819 300a 	ldrb.w	r3, [r9, sl]
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1addc:	4640      	mov	r0, r8
   1adde:	495e      	ldr	r1, [pc, #376]	; (1af58 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>)
   1ade0:	47a0      	blx	r4
      return kTfLiteError;
   1ade2:	2001      	movs	r0, #1
   1ade4:	e791      	b.n	1ad0a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x6e>
      TF_LITE_FULLY_CONNECTED(uint8_t);
   1ade6:	4631      	mov	r1, r6
   1ade8:	a812      	add	r0, sp, #72	; 0x48
   1adea:	f00c fc5b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1adee:	4639      	mov	r1, r7
   1adf0:	f8d6 8004 	ldr.w	r8, [r6, #4]
   1adf4:	a818      	add	r0, sp, #96	; 0x60
   1adf6:	ae1e      	add	r6, sp, #120	; 0x78
   1adf8:	f00c fc54 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1adfc:	4621      	mov	r1, r4
   1adfe:	4630      	mov	r0, r6
   1ae00:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1ae04:	f00c fc4e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ae08:	b104      	cbz	r4, 1ae0c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x170>
   1ae0a:	6864      	ldr	r4, [r4, #4]
   1ae0c:	af24      	add	r7, sp, #144	; 0x90
   1ae0e:	4629      	mov	r1, r5
   1ae10:	4638      	mov	r0, r7
   1ae12:	f00c fc47 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ae16:	686b      	ldr	r3, [r5, #4]
   1ae18:	4642      	mov	r2, r8
   1ae1a:	e9cd 7303 	strd	r7, r3, [sp, #12]
   1ae1e:	e9cd 6401 	strd	r6, r4, [sp, #4]
   1ae22:	f8cd 9000 	str.w	r9, [sp]
   1ae26:	ab18      	add	r3, sp, #96	; 0x60
   1ae28:	a912      	add	r1, sp, #72	; 0x48
   1ae2a:	a82a      	add	r0, sp, #168	; 0xa8
   1ae2c:	f010 fda2 	bl	2b974 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph>
   1ae30:	e7a8      	b.n	1ad84 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TF_LITE_FULLY_CONNECTED(int16_t);
   1ae32:	4631      	mov	r1, r6
   1ae34:	a812      	add	r0, sp, #72	; 0x48
   1ae36:	f00c fc35 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ae3a:	6873      	ldr	r3, [r6, #4]
   1ae3c:	4639      	mov	r1, r7
   1ae3e:	a818      	add	r0, sp, #96	; 0x60
   1ae40:	930a      	str	r3, [sp, #40]	; 0x28
   1ae42:	f00c fc2f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ae46:	687b      	ldr	r3, [r7, #4]
   1ae48:	4621      	mov	r1, r4
   1ae4a:	a81e      	add	r0, sp, #120	; 0x78
   1ae4c:	930b      	str	r3, [sp, #44]	; 0x2c
   1ae4e:	f00c fc29 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ae52:	b104      	cbz	r4, 1ae56 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x1ba>
   1ae54:	6864      	ldr	r4, [r4, #4]
   1ae56:	4629      	mov	r1, r5
   1ae58:	a824      	add	r0, sp, #144	; 0x90
   1ae5a:	f00c fc23 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ae5e:	686b      	ldr	r3, [r5, #4]
   1ae60:	930c      	str	r3, [sp, #48]	; 0x30
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
  const int32 input_offset = params.input_offset;
   1ae62:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1ae64:	930d      	str	r3, [sp, #52]	; 0x34
  const int32 filter_offset = params.weights_offset;
   1ae66:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   1ae68:	930e      	str	r3, [sp, #56]	; 0x38
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
   1ae6a:	e9dd 532c 	ldrd	r5, r3, [sp, #176]	; 0xb0
   1ae6e:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   1ae72:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   1ae74:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   1ae78:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1ae7a:	9307      	str	r3, [sp, #28]
  const int32 output_activation_max = params.quantized_activation_max;
   1ae7c:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   1ae7e:	9308      	str	r3, [sp, #32]

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   1ae80:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
   1ae84:	4293      	cmp	r3, r2
   1ae86:	f73f af11 	bgt.w	1acac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  TFLITE_DCHECK_EQ(output_offset, 0);
   1ae8a:	2d00      	cmp	r5, #0
   1ae8c:	f47f af0e 	bne.w	1acac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x10>
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   1ae90:	9b24      	ldr	r3, [sp, #144]	; 0x90
   1ae92:	a824      	add	r0, sp, #144	; 0x90
   1ae94:	3b01      	subs	r3, #1
   1ae96:	4619      	mov	r1, r3
   1ae98:	9309      	str	r3, [sp, #36]	; 0x24
   1ae9a:	f010 fd52 	bl	2b942 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int filter_dim_count = filter_shape.DimensionsCount();
   1ae9e:	9e18      	ldr	r6, [sp, #96]	; 0x60
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   1aea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aea2:	1eb1      	subs	r1, r6, #2
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   1aea4:	900f      	str	r0, [sp, #60]	; 0x3c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   1aea6:	aa24      	add	r2, sp, #144	; 0x90
   1aea8:	a818      	add	r0, sp, #96	; 0x60
   1aeaa:	f00f fa6b 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   1aeae:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   1aeb0:	9009      	str	r0, [sp, #36]	; 0x24
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   1aeb2:	a818      	add	r0, sp, #96	; 0x60
   1aeb4:	f00c fbbc 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   1aeb8:	46a8      	mov	r8, r5
   1aeba:	4606      	mov	r6, r0
   1aebc:	46a9      	mov	r9, r5
  for (int b = 0; b < batches; ++b) {
   1aebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1aec0:	42ab      	cmp	r3, r5
   1aec2:	dd3b      	ble.n	1af3c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x2a0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1aec4:	2700      	movs	r7, #0
  for (int b = 0; b < batches; ++b) {
   1aec6:	46ba      	mov	sl, r7
   1aec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1aeca:	eb03 0b49 	add.w	fp, r3, r9, lsl #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1aece:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1aed0:	42bb      	cmp	r3, r7
   1aed2:	dd2e      	ble.n	1af32 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x296>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
   1aed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1aed6:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
   1aeda:	eb03 0e08 	add.w	lr, r3, r8
   1aede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1aee0:	eb03 0c0a 	add.w	ip, r3, sl
   1aee4:	2300      	movs	r3, #0
   1aee6:	429e      	cmp	r6, r3
   1aee8:	dd10      	ble.n	1af0c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x270>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   1aeea:	f81e 2b01 	ldrb.w	r2, [lr], #1
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
   1aeee:	f81c 1b01 	ldrb.w	r1, [ip], #1
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   1aef2:	9210      	str	r2, [sp, #64]	; 0x40
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
   1aef4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      for (int d = 0; d < accum_depth; ++d) {
   1aef6:	3301      	adds	r3, #1
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
   1aef8:	188a      	adds	r2, r1, r2
   1aefa:	9211      	str	r2, [sp, #68]	; 0x44
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
   1aefc:	9910      	ldr	r1, [sp, #64]	; 0x40
   1aefe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1af00:	4411      	add	r1, r2
   1af02:	460a      	mov	r2, r1
        accum += filter_val * input_val;
   1af04:	9911      	ldr	r1, [sp, #68]	; 0x44
   1af06:	fb11 0002 	smlabb	r0, r1, r2, r0
      for (int d = 0; d < accum_depth; ++d) {
   1af0a:	e7ec      	b.n	1aee6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x24a>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
   1af0c:	ee18 2a90 	vmov	r2, s17
   1af10:	ee18 1a10 	vmov	r1, s16
   1af14:	f7fe fa30 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
      accum = std::min(accum, output_activation_max - output_offset);
      accum += output_offset;
      output_data[out_c + output_depth * b] = accum;
   1af18:	9b07      	ldr	r3, [sp, #28]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1af1a:	3701      	adds	r7, #1
      output_data[out_c + output_depth * b] = accum;
   1af1c:	4298      	cmp	r0, r3
   1af1e:	bfb8      	it	lt
   1af20:	4618      	movlt	r0, r3
   1af22:	9b08      	ldr	r3, [sp, #32]
   1af24:	44b2      	add	sl, r6
   1af26:	4298      	cmp	r0, r3
   1af28:	bfa8      	it	ge
   1af2a:	4618      	movge	r0, r3
   1af2c:	f82b 0b02 	strh.w	r0, [fp], #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   1af30:	e7cd      	b.n	1aece <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x232>
  for (int b = 0; b < batches; ++b) {
   1af32:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1af34:	3501      	adds	r5, #1
   1af36:	4499      	add	r9, r3
   1af38:	44b0      	add	r8, r6
   1af3a:	e7c0      	b.n	1aebe <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x222>
   1af3c:	a824      	add	r0, sp, #144	; 0x90
   1af3e:	f00c fb6c 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1af42:	a81e      	add	r0, sp, #120	; 0x78
   1af44:	e722      	b.n	1ad8c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf0>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1af46:	4618      	mov	r0, r3
   1af48:	f8d8 4014 	ldr.w	r4, [r8, #20]
   1af4c:	f7f1 feba 	bl	ccc4 <TfLiteTypeGetName>
   1af50:	f819 300b 	ldrb.w	r3, [r9, fp]
   1af54:	4602      	mov	r2, r0
   1af56:	e741      	b.n	1addc <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x140>
   1af58:	00034a40 	.word	0x00034a40

0001af5c <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration Register_FULLY_CONNECTED() {
   1af5c:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/fully_connected::Prepare,
          /*invoke=*/fully_connected::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1af5e:	4604      	mov	r4, r0
TfLiteRegistration Register_FULLY_CONNECTED() {
   1af60:	4606      	mov	r6, r0
          /*version=*/0};
   1af62:	4d04      	ldr	r5, [pc, #16]	; (1af74 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x18>)
   1af64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1af66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1af68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1af6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1af70:	4630      	mov	r0, r6
   1af72:	bd70      	pop	{r4, r5, r6, pc}
   1af74:	00031aa8 	.word	0x00031aa8

0001af78 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int16_t>::min();
   1af78:	4288      	cmp	r0, r1
   1af7a:	d112      	bne.n	1afa2 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0x2a>
   1af7c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
   1af80:	bf14      	ite	ne
   1af82:	2200      	movne	r2, #0
   1af84:	2201      	moveq	r2, #1
  std::int16_t nudge = ab_32 >= 0 ? (1 << 14) : (1 - (1 << 14));
   1af86:	4348      	muls	r0, r1
   1af88:	4b08      	ldr	r3, [pc, #32]	; (1afac <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0x34>)
   1af8a:	bf58      	it	pl
   1af8c:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
  return overflow ? std::numeric_limits<std::int16_t>::max() : ab_x2_high16;
   1af90:	b94a      	cbnz	r2, 1afa6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0x2e>
      static_cast<std::int16_t>((ab_32 + nudge) / (1 << 15));
   1af92:	1818      	adds	r0, r3, r0
   1af94:	bf44      	itt	mi
   1af96:	f500 40ff 	addmi.w	r0, r0, #32640	; 0x7f80
   1af9a:	307f      	addmi	r0, #127	; 0x7f
   1af9c:	13c0      	asrs	r0, r0, #15
}
   1af9e:	b200      	sxth	r0, r0
   1afa0:	4770      	bx	lr
  bool overflow = a == b && a == std::numeric_limits<std::int16_t>::min();
   1afa2:	2200      	movs	r2, #0
   1afa4:	e7ef      	b.n	1af86 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0xe>
   1afa6:	f647 70ff 	movw	r0, #32767	; 0x7fff
   1afaa:	e7f8      	b.n	1af9e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_+0x26>
   1afac:	ffffc001 	.word	0xffffc001

0001afb0 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus HardSwishPrepare(TfLiteContext* context, TfLiteNode* node) {
   1afb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1afb2:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->user_data != nullptr);
   1afb6:	690d      	ldr	r5, [r1, #16]
TfLiteStatus HardSwishPrepare(TfLiteContext* context, TfLiteNode* node) {
   1afb8:	4606      	mov	r6, r0
   1afba:	b089      	sub	sp, #36	; 0x24
  TFLITE_DCHECK(node->user_data != nullptr);
   1afbc:	b90d      	cbnz	r5, 1afc2 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x12>
   1afbe:	f015 ff30 	bl	30e22 <abort>
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1afc2:	680f      	ldr	r7, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1afc4:	683c      	ldr	r4, [r7, #0]
   1afc6:	2c01      	cmp	r4, #1
   1afc8:	d010      	beq.n	1afec <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x3c>
   1afca:	2501      	movs	r5, #1
   1afcc:	4b35      	ldr	r3, [pc, #212]	; (1b0a4 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
   1afce:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1afd2:	9301      	str	r3, [sp, #4]
   1afd4:	4b34      	ldr	r3, [pc, #208]	; (1b0a8 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
   1afd6:	4a35      	ldr	r2, [pc, #212]	; (1b0ac <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
   1afd8:	9300      	str	r3, [sp, #0]
   1afda:	6944      	ldr	r4, [r0, #20]
   1afdc:	232f      	movs	r3, #47	; 0x2f
   1afde:	4934      	ldr	r1, [pc, #208]	; (1b0b0 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   1afe0:	47a0      	blx	r4
                       &params->output_multiplier_exponent);
    DownScaleInt32ToInt16Multiplier(
        output_multiplier_fixedpoint_int32,
        &params->output_multiplier_fixedpoint_int16);

    TF_LITE_ENSURE(context, params->output_multiplier_exponent <= 0);
   1afe2:	2001      	movs	r0, #1
        reluish_multiplier_fixedpoint_int32,
        &params->reluish_multiplier_fixedpoint_int16);
  }

  return kTfLiteOk;
}
   1afe4:	b009      	add	sp, #36	; 0x24
   1afe6:	ecbd 8b02 	vpop	{d8}
   1afea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1afec:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1afee:	6813      	ldr	r3, [r2, #0]
   1aff0:	2b01      	cmp	r3, #1
   1aff2:	d00b      	beq.n	1b00c <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x5c>
   1aff4:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1aff8:	4b2a      	ldr	r3, [pc, #168]	; (1b0a4 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
   1affa:	4a2c      	ldr	r2, [pc, #176]	; (1b0ac <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
   1affc:	9301      	str	r3, [sp, #4]
   1affe:	4b2d      	ldr	r3, [pc, #180]	; (1b0b4 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x104>)
   1b000:	492b      	ldr	r1, [pc, #172]	; (1b0b0 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x100>)
   1b002:	9300      	str	r3, [sp, #0]
   1b004:	6945      	ldr	r5, [r0, #20]
   1b006:	2330      	movs	r3, #48	; 0x30
   1b008:	47a8      	blx	r5
   1b00a:	e7ea      	b.n	1afe2 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x32>
  return &context->tensors[node->inputs->data[index]];
   1b00c:	6879      	ldr	r1, [r7, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1b00e:	6883      	ldr	r3, [r0, #8]
   1b010:	0188      	lsls	r0, r1, #6
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
   1b012:	5c18      	ldrb	r0, [r3, r0]
   1b014:	eb03 1181 	add.w	r1, r3, r1, lsl #6
   1b018:	2803      	cmp	r0, #3
   1b01a:	d001      	beq.n	1b020 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x70>
   1b01c:	2809      	cmp	r0, #9
   1b01e:	d13e      	bne.n	1b09e <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xee>
    const float hires_input_scale = (1.0f / 128.0f) * input_scale;
   1b020:	ed91 8a03 	vldr	s16, [r1, #12]
   1b024:	eddf 7a24 	vldr	s15, [pc, #144]	; 1b0b8 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x108>
  return &context->tensors[node->outputs->data[index]];
   1b028:	6852      	ldr	r2, [r2, #4]
   1b02a:	ee28 8a27 	vmul.f32	s16, s16, s15
   1b02e:	eb03 1282 	add.w	r2, r3, r2, lsl #6
        static_cast<double>(hires_input_scale / output_scale);
   1b032:	edd2 7a03 	vldr	s15, [r2, #12]
    const double output_multiplier =
   1b036:	eec8 7a27 	vdiv.f32	s15, s16, s15
    params->input_zero_point = input->params.zero_point;
   1b03a:	690b      	ldr	r3, [r1, #16]
    const double output_multiplier =
   1b03c:	ee17 0a90 	vmov	r0, s15
    params->input_zero_point = input->params.zero_point;
   1b040:	802b      	strh	r3, [r5, #0]
    params->output_zero_point = output->params.zero_point;
   1b042:	6913      	ldr	r3, [r2, #16]
    QuantizeMultiplier(output_multiplier, &output_multiplier_fixedpoint_int32,
   1b044:	f105 0410 	add.w	r4, r5, #16
    params->output_zero_point = output->params.zero_point;
   1b048:	806b      	strh	r3, [r5, #2]
    const double output_multiplier =
   1b04a:	f7f1 fa5d 	bl	c508 <__aeabi_f2d>
    QuantizeMultiplier(output_multiplier, &output_multiplier_fixedpoint_int32,
   1b04e:	4623      	mov	r3, r4
   1b050:	aa06      	add	r2, sp, #24
   1b052:	f005 ff93 	bl	20f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    DownScaleInt32ToInt16Multiplier(
   1b056:	9806      	ldr	r0, [sp, #24]
   1b058:	f105 010c 	add.w	r1, r5, #12
   1b05c:	f010 fd9f 	bl	2bb9e <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs>
    TF_LITE_ENSURE(context, params->output_multiplier_exponent <= 0);
   1b060:	692b      	ldr	r3, [r5, #16]
   1b062:	2b00      	cmp	r3, #0
   1b064:	dd08      	ble.n	1b078 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xc8>
   1b066:	4b15      	ldr	r3, [pc, #84]	; (1b0bc <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x10c>)
   1b068:	4630      	mov	r0, r6
   1b06a:	9300      	str	r3, [sp, #0]
   1b06c:	6974      	ldr	r4, [r6, #20]
   1b06e:	2349      	movs	r3, #73	; 0x49
   1b070:	4a0e      	ldr	r2, [pc, #56]	; (1b0ac <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
   1b072:	4913      	ldr	r1, [pc, #76]	; (1b0c0 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x110>)
   1b074:	47a0      	blx	r4
   1b076:	e7b4      	b.n	1afe2 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x32>
    const double reluish_multiplier =
   1b078:	eddf 7a12 	vldr	s15, [pc, #72]	; 1b0c4 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x114>
   1b07c:	eec8 7a27 	vdiv.f32	s15, s16, s15
    QuantizeMultiplier(reluish_multiplier, &reluish_multiplier_fixedpoint_int32,
   1b080:	f105 0308 	add.w	r3, r5, #8
    const double reluish_multiplier =
   1b084:	ee17 0a90 	vmov	r0, s15
    QuantizeMultiplier(reluish_multiplier, &reluish_multiplier_fixedpoint_int32,
   1b088:	9305      	str	r3, [sp, #20]
    const double reluish_multiplier =
   1b08a:	f7f1 fa3d 	bl	c508 <__aeabi_f2d>
    QuantizeMultiplier(reluish_multiplier, &reluish_multiplier_fixedpoint_int32,
   1b08e:	9b05      	ldr	r3, [sp, #20]
   1b090:	aa07      	add	r2, sp, #28
   1b092:	f005 ff73 	bl	20f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    DownScaleInt32ToInt16Multiplier(
   1b096:	9807      	ldr	r0, [sp, #28]
   1b098:	1d29      	adds	r1, r5, #4
   1b09a:	f010 fd80 	bl	2bb9e <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs>
  return kTfLiteOk;
   1b09e:	2000      	movs	r0, #0
   1b0a0:	e7a0      	b.n	1afe4 <_ZN6tflite3ops5micro10hard_swish16HardSwishPrepareEP13TfLiteContextP10TfLiteNode+0x34>
   1b0a2:	bf00      	nop
   1b0a4:	00035884 	.word	0x00035884
   1b0a8:	00034b06 	.word	0x00034b06
   1b0ac:	000351d1 	.word	0x000351d1
   1b0b0:	00034aec 	.word	0x00034aec
   1b0b4:	00034b16 	.word	0x00034b16
   1b0b8:	3c000000 	.word	0x3c000000
   1b0bc:	000351fd 	.word	0x000351fd
   1b0c0:	00034c0c 	.word	0x00034c0c
   1b0c4:	38c00000 	.word	0x38c00000

0001b0c8 <_ZN6tflite3ops5micro19Register_HARD_SWISHEv>:
  return kTfLiteOk;
}

}  // namespace hard_swish

TfLiteRegistration Register_HARD_SWISH() {
   1b0c8:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/hard_swish::HardSwishPrepare,
          /*invoke=*/hard_swish::HardSwishEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1b0ca:	4604      	mov	r4, r0
TfLiteRegistration Register_HARD_SWISH() {
   1b0cc:	4606      	mov	r6, r0
          /*version=*/0};
   1b0ce:	4d04      	ldr	r5, [pc, #16]	; (1b0e0 <_ZN6tflite3ops5micro19Register_HARD_SWISHEv+0x18>)
   1b0d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b0d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b0d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1b0d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1b0dc:	4630      	mov	r0, r6
   1b0de:	bd70      	pop	{r4, r5, r6, pc}
   1b0e0:	00031ac8 	.word	0x00031ac8

0001b0e4 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i>:
  assert(exponent >= 0);
   1b0e4:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
   1b0e6:	b508      	push	{r3, lr}
  assert(exponent >= 0);
   1b0e8:	da06      	bge.n	1b0f8 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x14>
   1b0ea:	f44f 71b3 	mov.w	r1, #358	; 0x166
   1b0ee:	4b0d      	ldr	r3, [pc, #52]	; (1b124 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x40>)
   1b0f0:	4a0d      	ldr	r2, [pc, #52]	; (1b128 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x44>)
  assert(exponent <= 31);
   1b0f2:	480e      	ldr	r0, [pc, #56]	; (1b12c <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x48>)
   1b0f4:	f00b f9bc 	bl	26470 <__assert_func>
   1b0f8:	291f      	cmp	r1, #31
   1b0fa:	dd04      	ble.n	1b106 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x22>
   1b0fc:	f240 1167 	movw	r1, #359	; 0x167
   1b100:	4b0b      	ldr	r3, [pc, #44]	; (1b130 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x4c>)
   1b102:	4a09      	ldr	r2, [pc, #36]	; (1b128 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0x44>)
   1b104:	e7f5      	b.n	1b0f2 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   1b106:	2301      	movs	r3, #1
   1b108:	408b      	lsls	r3, r1
   1b10a:	3b01      	subs	r3, #1
   1b10c:	b21a      	sxth	r2, r3
  return a + b;
   1b10e:	f343 034e 	sbfx	r3, r3, #1, #15
  return a ? BitNot(zero) : zero;
   1b112:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
   1b116:	4002      	ands	r2, r0
  return a >> offset;
   1b118:	4108      	asrs	r0, r1
  return a + b;
   1b11a:	4293      	cmp	r3, r2
   1b11c:	bfb8      	it	lt
   1b11e:	3001      	addlt	r0, #1
  const IntegerType remainder = BitAnd(x, mask);
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
  return Add(ShiftRight(x, exponent),
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
   1b120:	b200      	sxth	r0, r0
   1b122:	bd08      	pop	{r3, pc}
   1b124:	00034982 	.word	0x00034982
   1b128:	00035225 	.word	0x00035225
   1b12c:	000349e5 	.word	0x000349e5
   1b130:	00034a31 	.word	0x00034a31

0001b134 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1b134:	680a      	ldr	r2, [r1, #0]
TfLiteStatus HardSwishEval(TfLiteContext* context, TfLiteNode* node) {
   1b136:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b138:	6855      	ldr	r5, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1b13a:	6883      	ldr	r3, [r0, #8]
TfLiteStatus HardSwishEval(TfLiteContext* context, TfLiteNode* node) {
   1b13c:	4606      	mov	r6, r0
  return &context->tensors[node->outputs->data[index]];
   1b13e:	6848      	ldr	r0, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   1b140:	01aa      	lsls	r2, r5, #6
  return &context->tensors[node->outputs->data[index]];
   1b142:	6844      	ldr	r4, [r0, #4]
  switch (input->type) {
   1b144:	5c98      	ldrb	r0, [r3, r2]
  HardSwishParams* params = static_cast<HardSwishParams*>(node->user_data);
   1b146:	690f      	ldr	r7, [r1, #16]
  switch (input->type) {
   1b148:	2803      	cmp	r0, #3
TfLiteStatus HardSwishEval(TfLiteContext* context, TfLiteNode* node) {
   1b14a:	b091      	sub	sp, #68	; 0x44
  return &context->tensors[node->inputs->data[index]];
   1b14c:	eb03 1585 	add.w	r5, r3, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1b150:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  switch (input->type) {
   1b154:	d035      	beq.n	1b1c2 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x8e>
   1b156:	2809      	cmp	r0, #9
   1b158:	d04f      	beq.n	1b1fa <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xc6>
   1b15a:	2801      	cmp	r0, #1
   1b15c:	d161      	bne.n	1b222 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xee>
          GetTensorShape(input), GetTensorData<float>(input),
   1b15e:	4629      	mov	r1, r5
   1b160:	a804      	add	r0, sp, #16
   1b162:	f00c fa9f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(output), GetTensorData<float>(output));
   1b166:	4621      	mov	r1, r4
   1b168:	a80a      	add	r0, sp, #40	; 0x28
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b16a:	686d      	ldr	r5, [r5, #4]
   1b16c:	f00c fa9a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1b170:	b104      	cbz	r4, 1b174 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x40>
   1b172:	6864      	ldr	r4, [r4, #4]

template <typename T>
inline void HardSwish(const RuntimeShape& input_shape, const T* input_data,
                      const RuntimeShape& output_shape, T* output_data) {
  ruy::profiler::ScopeLabel label("ReferenceHardSwish/Float");
  auto matching_size = MatchingFlatSize(input_shape, output_shape);
   1b174:	a90a      	add	r1, sp, #40	; 0x28
   1b176:	a804      	add	r0, sp, #16
   1b178:	f00c fa6b 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
   1b17c:	462b      	mov	r3, r5
  const T* in_end = input_data + matching_size;
  for (; input_data < in_end; input_data++, output_data++) {
    const float in = *input_data;
    *output_data =
        in * std::min(static_cast<T>(6), std::max(static_cast<T>(0), in + 3)) /
   1b17e:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
   1b182:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
  const T* in_end = input_data + matching_size;
   1b186:	eb05 0080 	add.w	r0, r5, r0, lsl #2
  for (; input_data < in_end; input_data++, output_data++) {
   1b18a:	4298      	cmp	r0, r3
   1b18c:	d92c      	bls.n	1b1e8 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xb4>
    const float in = *input_data;
   1b18e:	ecb3 7a01 	vldmia	r3!, {s14}
        in * std::min(static_cast<T>(6), std::max(static_cast<T>(0), in + 3)) /
   1b192:	ee77 7a06 	vadd.f32	s15, s14, s12
      if (__a < __b)
   1b196:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1b19a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b19e:	dd0d      	ble.n	1b1bc <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x88>
      return __a;
   1b1a0:	eef4 7ae6 	vcmpe.f32	s15, s13
   1b1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b1a8:	bf58      	it	pl
   1b1aa:	eef0 7a66 	vmovpl.f32	s15, s13
   1b1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
   1b1b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    *output_data =
   1b1b6:	eca4 7a01 	vstmia	r4!, {s14}
  for (; input_data < in_end; input_data++, output_data++) {
   1b1ba:	e7e6      	b.n	1b18a <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x56>
      return __a;
   1b1bc:	eddf 7a1d 	vldr	s15, [pc, #116]	; 1b234 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x100>
   1b1c0:	e7f5      	b.n	1b1ae <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x7a>
          *params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1b1c2:	4629      	mov	r1, r5
   1b1c4:	a804      	add	r0, sp, #16
   1b1c6:	f00c fa6d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b1ca:	686a      	ldr	r2, [r5, #4]
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   1b1cc:	4621      	mov	r1, r4
   1b1ce:	a80a      	add	r0, sp, #40	; 0x28
   1b1d0:	9203      	str	r2, [sp, #12]
   1b1d2:	f00c fa67 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1b1d6:	9a03      	ldr	r2, [sp, #12]
   1b1d8:	b104      	cbz	r4, 1b1dc <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xa8>
   1b1da:	6864      	ldr	r4, [r4, #4]
      tflite::reference_ops::HardSwish<uint8_t>(
   1b1dc:	4638      	mov	r0, r7
   1b1de:	9400      	str	r4, [sp, #0]
   1b1e0:	ab0a      	add	r3, sp, #40	; 0x28
   1b1e2:	a904      	add	r1, sp, #16
   1b1e4:	f010 fcfb 	bl	2bbde <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   1b1e8:	a80a      	add	r0, sp, #40	; 0x28
   1b1ea:	f00c fa16 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
          *params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1b1ee:	a804      	add	r0, sp, #16
   1b1f0:	f00c fa13 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1b1f4:	2000      	movs	r0, #0
}
   1b1f6:	b011      	add	sp, #68	; 0x44
   1b1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1b1fa:	4629      	mov	r1, r5
   1b1fc:	a804      	add	r0, sp, #16
   1b1fe:	f00c fa51 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b202:	686a      	ldr	r2, [r5, #4]
          GetTensorShape(output), GetTensorData<int8_t>(output));
   1b204:	4621      	mov	r1, r4
   1b206:	a80a      	add	r0, sp, #40	; 0x28
   1b208:	9203      	str	r2, [sp, #12]
   1b20a:	f00c fa4b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1b20e:	9a03      	ldr	r2, [sp, #12]
   1b210:	b104      	cbz	r4, 1b214 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xe0>
   1b212:	6864      	ldr	r4, [r4, #4]
      tflite::reference_ops::HardSwish<int8_t>(
   1b214:	4638      	mov	r0, r7
   1b216:	9400      	str	r4, [sp, #0]
   1b218:	ab0a      	add	r3, sp, #40	; 0x28
   1b21a:	a904      	add	r1, sp, #16
   1b21c:	f010 fd2a 	bl	2bc74 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
   1b220:	e7e2      	b.n	1b1e8 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xb4>
      TF_LITE_KERNEL_LOG(
   1b222:	6974      	ldr	r4, [r6, #20]
   1b224:	f7f1 fd4e 	bl	ccc4 <TfLiteTypeGetName>
   1b228:	4903      	ldr	r1, [pc, #12]	; (1b238 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0x104>)
   1b22a:	4602      	mov	r2, r0
   1b22c:	4630      	mov	r0, r6
   1b22e:	47a0      	blx	r4
      return kTfLiteError;
   1b230:	2001      	movs	r0, #1
   1b232:	e7e0      	b.n	1b1f6 <_ZN6tflite3ops5micro10hard_swish13HardSwishEvalEP13TfLiteContextP10TfLiteNode+0xc2>
   1b234:	00000000 	.word	0x00000000
   1b238:	00035280 	.word	0x00035280

0001b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>:
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1b23c:	4288      	cmp	r0, r1
                                                      std::int32_t b) {
   1b23e:	b510      	push	{r4, lr}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1b240:	d11f      	bne.n	1b282 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x46>
   1b242:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
   1b246:	425c      	negs	r4, r3
   1b248:	415c      	adcs	r4, r3
  std::int64_t ab_64 = a_64 * b_64;
   1b24a:	fb80 2301 	smull	r2, r3, r0, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
   1b24e:	2a00      	cmp	r2, #0
   1b250:	f173 0100 	sbcs.w	r1, r3, #0
   1b254:	490d      	ldr	r1, [pc, #52]	; (1b28c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x50>)
   1b256:	bfa8      	it	ge
   1b258:	f04f 4180 	movge.w	r1, #1073741824	; 0x40000000
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
   1b25c:	b99c      	cbnz	r4, 1b286 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x4a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
   1b25e:	1852      	adds	r2, r2, r1
   1b260:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   1b264:	2a00      	cmp	r2, #0
   1b266:	f173 0100 	sbcs.w	r1, r3, #0
   1b26a:	da06      	bge.n	1b27a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x3e>
   1b26c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b270:	1852      	adds	r2, r2, r1
   1b272:	f04f 0100 	mov.w	r1, #0
   1b276:	eb41 0303 	adc.w	r3, r1, r3
   1b27a:	0fd0      	lsrs	r0, r2, #31
   1b27c:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
}
   1b280:	bd10      	pop	{r4, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
   1b282:	2400      	movs	r4, #0
   1b284:	e7e1      	b.n	1b24a <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0xe>
   1b286:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1b28a:	e7f9      	b.n	1b280 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_+0x44>
   1b28c:	c0000001 	.word	0xc0000001

0001b290 <_ZN6tflite3ops5micro19Register_L2NORM_REFEv>:
  return kTfLiteOk;
}

}  // namespace l2norm

TfLiteRegistration Register_L2NORM_REF() {
   1b290:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/l2norm::Prepare,
          /*invoke=*/l2norm::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1b292:	4604      	mov	r4, r0
TfLiteRegistration Register_L2NORM_REF() {
   1b294:	4606      	mov	r6, r0
          /*version=*/0};
   1b296:	4d04      	ldr	r5, [pc, #16]	; (1b2a8 <_ZN6tflite3ops5micro19Register_L2NORM_REFEv+0x18>)
   1b298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b29a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b29c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1b2a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1b2a4:	4630      	mov	r0, r6
   1b2a6:	bd70      	pop	{r4, r5, r6, pc}
   1b2a8:	00031ae8 	.word	0x00031ae8

0001b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>:
  assert(exponent >= 0);
   1b2ac:	2900      	cmp	r1, #0
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
   1b2ae:	b508      	push	{r3, lr}
  assert(exponent >= 0);
   1b2b0:	da06      	bge.n	1b2c0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x14>
   1b2b2:	f44f 71b3 	mov.w	r1, #358	; 0x166
   1b2b6:	4b0c      	ldr	r3, [pc, #48]	; (1b2e8 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x3c>)
   1b2b8:	4a0c      	ldr	r2, [pc, #48]	; (1b2ec <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
  assert(exponent <= 31);
   1b2ba:	480d      	ldr	r0, [pc, #52]	; (1b2f0 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x44>)
   1b2bc:	f00b f8d8 	bl	26470 <__assert_func>
   1b2c0:	291f      	cmp	r1, #31
   1b2c2:	dd04      	ble.n	1b2ce <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x22>
   1b2c4:	f240 1167 	movw	r1, #359	; 0x167
   1b2c8:	4b0a      	ldr	r3, [pc, #40]	; (1b2f4 <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x48>)
   1b2ca:	4a08      	ldr	r2, [pc, #32]	; (1b2ec <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0x40>)
   1b2cc:	e7f5      	b.n	1b2ba <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i+0xe>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
   1b2ce:	2301      	movs	r3, #1
   1b2d0:	408b      	lsls	r3, r1
   1b2d2:	3b01      	subs	r3, #1
  return a & b;
   1b2d4:	ea03 0200 	and.w	r2, r3, r0
  return a >> offset;
   1b2d8:	105b      	asrs	r3, r3, #1
  return a + b;
   1b2da:	eb03 73d0 	add.w	r3, r3, r0, lsr #31
  return a >> offset;
   1b2de:	4108      	asrs	r0, r1
}
   1b2e0:	429a      	cmp	r2, r3
   1b2e2:	bfc8      	it	gt
   1b2e4:	3001      	addgt	r0, #1
   1b2e6:	bd08      	pop	{r3, pc}
   1b2e8:	00034982 	.word	0x00034982
   1b2ec:	00034990 	.word	0x00034990
   1b2f0:	000349e5 	.word	0x000349e5
   1b2f4:	00034a31 	.word	0x00034a31

0001b2f8 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_>:
  return shifted_scale.raw();
}

inline void GetInvSqrtQuantizedMultiplierExp(int32 input, int reverse_shift,
                                             int32* output_inv_sqrt,
                                             int* output_shift) {
   1b2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GE(input, 0);
   1b2fc:	2800      	cmp	r0, #0
                                             int* output_shift) {
   1b2fe:	4616      	mov	r6, r2
   1b300:	461d      	mov	r5, r3
   1b302:	9101      	str	r1, [sp, #4]
  TFLITE_DCHECK_GE(input, 0);
   1b304:	da01      	bge.n	1b30a <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x12>
   1b306:	f015 fd8c 	bl	30e22 <abort>
  if (input <= 1) {
   1b30a:	2801      	cmp	r0, #1
   1b30c:	dc07      	bgt.n	1b31e <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x26>
    // Handle the input value 1 separately to avoid overflow in that case
    // in the general computation below (b/143972021). Also handle 0 as if it
    // were a 1. 0 is an invalid input here (divide by zero) and 1 is a valid
    // but rare/unrealistic input value. We can expect both to occur in some
    // incompletely trained models, but probably not in fully trained models.
    *output_inv_sqrt = std::numeric_limits<std::int32_t>::max();
   1b30e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1b312:	6013      	str	r3, [r2, #0]
    *output_shift = 0;
   1b314:	2300      	movs	r3, #0
   1b316:	602b      	str	r3, [r5, #0]
    *output_inv_sqrt <<= -*output_shift;
    *output_shift = 0;
  }
  // Convert right shift (right is positive) to left shift.
  *output_shift *= reverse_shift;
}
   1b318:	b003      	add	sp, #12
   1b31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  *output_shift = 11;
   1b31e:	230b      	movs	r3, #11
   1b320:	602b      	str	r3, [r5, #0]
  while (input >= (1 << 29)) {
   1b322:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1b326:	682a      	ldr	r2, [r5, #0]
   1b328:	db03      	blt.n	1b332 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x3a>
    ++*output_shift;
   1b32a:	3201      	adds	r2, #1
    input /= 4;
   1b32c:	1080      	asrs	r0, r0, #2
    ++*output_shift;
   1b32e:	602a      	str	r2, [r5, #0]
  while (input >= (1 << 29)) {
   1b330:	e7f7      	b.n	1b322 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x2a>
  return integer_input ? __builtin_clz(integer_input)
   1b332:	fab0 f380 	clz	r3, r0
      CountLeadingZeros(static_cast<uint32>(input)) - 1;
   1b336:	3b01      	subs	r3, #1
  const unsigned max_left_shift_bit_pairs = max_left_shift_bits / 2;
   1b338:	085b      	lsrs	r3, r3, #1
  const unsigned left_shift_bit_pairs = max_left_shift_bit_pairs - 1;
   1b33a:	3b01      	subs	r3, #1
  *output_shift -= left_shift_bit_pairs;
   1b33c:	1ad2      	subs	r2, r2, r3
  input <<= 2 * left_shift_bit_pairs;
   1b33e:	005b      	lsls	r3, r3, #1
   1b340:	4098      	lsls	r0, r3
  TFLITE_DCHECK_GE(input, (1 << 27));
   1b342:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
   1b346:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  *output_shift -= left_shift_bit_pairs;
   1b34a:	602a      	str	r2, [r5, #0]
  TFLITE_DCHECK_GE(input, (1 << 27));
   1b34c:	d2db      	bcs.n	1b306 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0xe>
};

template <int Exponent, typename IntegerType>
struct ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType, -1> {
  static IntegerType eval(IntegerType x) {
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1b34e:	2101      	movs	r1, #1
   1b350:	4108      	asrs	r0, r1
   1b352:	f7ff ffab 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
   1b356:	2705      	movs	r7, #5
   1b358:	4682      	mov	sl, r0
  F3 x = F3::One();
   1b35a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
             : wide_shifted > max ? max
   1b35e:	f06f 4800 	mvn.w	r8, #2147483648	; 0x80000000
   1b362:	f04f 0900 	mov.w	r9, #0
template <typename tRawType, int tIntegerBits_a, int tIntegerBits_b>
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
    FixedPoint<tRawType, tIntegerBits_a> a,
    FixedPoint<tRawType, tIntegerBits_b> b) {
  FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> c;
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1b366:	4621      	mov	r1, r4
   1b368:	4620      	mov	r0, r4
   1b36a:	f7ff ff67 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1b36e:	4621      	mov	r1, r4
   1b370:	f7ff ff64 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
   1b374:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
   1b378:	da72      	bge.n	1b460 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x168>
   1b37a:	f1b0 4f7e 	cmp.w	r0, #4261412864	; 0xfe000000
   1b37e:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   1b382:	f04f 0100 	mov.w	r1, #0
   1b386:	bfc8      	it	gt
   1b388:	f04f 0e00 	movgt.w	lr, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1b38c:	ea4f 7ce0 	mov.w	ip, r0, asr #31
   1b390:	0182      	lsls	r2, r0, #6
   1b392:	ea4f 138c 	mov.w	r3, ip, lsl #6
   1b396:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
             ? min
   1b39a:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1b39e:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
   1b3a2:	db62      	blt.n	1b46a <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x172>
             : wide_shifted > max ? max
   1b3a4:	4590      	cmp	r8, r2
   1b3a6:	eb79 0003 	sbcs.w	r0, r9, r3
   1b3aa:	bfb8      	it	lt
   1b3ac:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
   1b3b0:	ea6f 0b01 	mvn.w	fp, r1
  return a & b;
   1b3b4:	ea0b 0202 	and.w	r2, fp, r2
   1b3b8:	f021 4b00 	bic.w	fp, r1, #2147483648	; 0x80000000
  return a ^ b;
   1b3bc:	ea82 0b0b 	eor.w	fp, r2, fp
  return ~a;
   1b3c0:	ea6f 020e 	mvn.w	r2, lr
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1b3c4:	4621      	mov	r1, r4
  return a & b;
   1b3c6:	ea0b 0b02 	and.w	fp, fp, r2
   1b3ca:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1b3ce:	f04f 50c0 	mov.w	r0, #402653184	; 0x18000000
  return a ^ b;
   1b3d2:	ea8b 0b0e 	eor.w	fp, fp, lr
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1b3d6:	f7ff ff31 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1b3da:	4659      	mov	r1, fp
   1b3dc:	4604      	mov	r4, r0
   1b3de:	4650      	mov	r0, sl
   1b3e0:	f7ff ff2c 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a - b;
   1b3e4:	1a24      	subs	r4, r4, r0
  return a ? BitNot(zero) : zero;
   1b3e6:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   1b3ea:	da41      	bge.n	1b470 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x178>
   1b3ec:	f1b4 4f70 	cmp.w	r4, #4026531840	; 0xf0000000
   1b3f0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1b3f4:	f04f 0e00 	mov.w	lr, #0
   1b3f8:	bfc8      	it	gt
   1b3fa:	f04f 0c00 	movgt.w	ip, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1b3fe:	17e1      	asrs	r1, r4, #31
   1b400:	00cb      	lsls	r3, r1, #3
   1b402:	00e2      	lsls	r2, r4, #3
   1b404:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
             ? min
   1b408:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1b40c:	f173 31ff 	sbcs.w	r1, r3, #4294967295	; 0xffffffff
   1b410:	db33      	blt.n	1b47a <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x182>
             : wide_shifted > max ? max
   1b412:	4590      	cmp	r8, r2
   1b414:	eb79 0103 	sbcs.w	r1, r9, r3
   1b418:	bfb8      	it	lt
   1b41a:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
   1b41e:	ea6f 040e 	mvn.w	r4, lr
  return a & b;
   1b422:	4022      	ands	r2, r4
   1b424:	f02e 4400 	bic.w	r4, lr, #2147483648	; 0x80000000
  return a ^ b;
   1b428:	4054      	eors	r4, r2
  return ~a;
   1b42a:	ea6f 020c 	mvn.w	r2, ip
  for (int i = 0; i < 5; i++) {
   1b42e:	3f01      	subs	r7, #1
  return a & b;
   1b430:	ea04 0402 	and.w	r4, r4, r2
   1b434:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
  return a ^ b;
   1b438:	ea84 040c 	eor.w	r4, r4, ip
   1b43c:	d193      	bne.n	1b366 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x6e>
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1b43e:	4910      	ldr	r1, [pc, #64]	; (1b480 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x188>)
   1b440:	4620      	mov	r0, r4
   1b442:	f7ff fefb 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  *output_inv_sqrt = x.raw();
   1b446:	6030      	str	r0, [r6, #0]
  if (*output_shift < 0) {
   1b448:	682b      	ldr	r3, [r5, #0]
   1b44a:	2b00      	cmp	r3, #0
    *output_inv_sqrt <<= -*output_shift;
   1b44c:	bfbf      	itttt	lt
   1b44e:	425b      	neglt	r3, r3
   1b450:	4098      	lsllt	r0, r3
   1b452:	6030      	strlt	r0, [r6, #0]
    *output_shift = 0;
   1b454:	602f      	strlt	r7, [r5, #0]
  *output_shift *= reverse_shift;
   1b456:	6829      	ldr	r1, [r5, #0]
   1b458:	9b01      	ldr	r3, [sp, #4]
   1b45a:	434b      	muls	r3, r1
   1b45c:	602b      	str	r3, [r5, #0]
   1b45e:	e75b      	b.n	1b318 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x20>
  return a ? BitNot(zero) : zero;
   1b460:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b464:	f04f 0e00 	mov.w	lr, #0
   1b468:	e790      	b.n	1b38c <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x94>
             ? min
   1b46a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b46e:	e79f      	b.n	1b3b0 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0xb8>
  return a ? BitNot(zero) : zero;
   1b470:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   1b474:	f04f 0c00 	mov.w	ip, #0
   1b478:	e7c1      	b.n	1b3fe <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x106>
             ? min
   1b47a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b47e:	e7ce      	b.n	1b41e <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_+0x126>
   1b480:	5a82799a 	.word	0x5a82799a

0001b484 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1b484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b488:	ed2d 8b02 	vpush	{d8}
  return &context->tensors[node->inputs->data[index]];
   1b48c:	680a      	ldr	r2, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1b48e:	6883      	ldr	r3, [r0, #8]
   1b490:	6854      	ldr	r4, [r2, #4]
  return &context->tensors[node->outputs->data[index]];
   1b492:	684a      	ldr	r2, [r1, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1b494:	4606      	mov	r6, r0
   1b496:	6855      	ldr	r5, [r2, #4]
   1b498:	b093      	sub	sp, #76	; 0x4c
   1b49a:	01aa      	lsls	r2, r5, #6
  if (output->type == kTfLiteFloat32) {
   1b49c:	5c98      	ldrb	r0, [r3, r2]
  return &context->tensors[node->inputs->data[index]];
   1b49e:	eb03 1484 	add.w	r4, r3, r4, lsl #6
   1b4a2:	2801      	cmp	r0, #1
  return &context->tensors[node->outputs->data[index]];
   1b4a4:	eb03 1585 	add.w	r5, r3, r5, lsl #6
   1b4a8:	d14f      	bne.n	1b54a <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xc6>
    TF_LITE_L2NORM(reference_ops);
   1b4aa:	4621      	mov	r1, r4
   1b4ac:	a806      	add	r0, sp, #24
   1b4ae:	f00c f8f9 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b4b2:	b104      	cbz	r4, 1b4b6 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x32>
   1b4b4:	6864      	ldr	r4, [r4, #4]
   1b4b6:	4629      	mov	r1, r5
   1b4b8:	a80c      	add	r0, sp, #48	; 0x30
   1b4ba:	f00c f8f3 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
inline void L2Normalization(const tflite::L2NormalizationParams& op_params,
                            const RuntimeShape& input_shape,
                            const float* input_data,
                            const RuntimeShape& output_shape,
                            float* output_data, float epsilon = 1e-6) {
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1b4be:	9b06      	ldr	r3, [sp, #24]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1b4c0:	aa0c      	add	r2, sp, #48	; 0x30
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1b4c2:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1b4c4:	4619      	mov	r1, r3
   1b4c6:	a806      	add	r0, sp, #24
   1b4c8:	9303      	str	r3, [sp, #12]
   1b4ca:	f010 fc28 	bl	2bd1e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1b4ce:	9b03      	ldr	r3, [sp, #12]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1b4d0:	4680      	mov	r8, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1b4d2:	4619      	mov	r1, r3
   1b4d4:	aa0c      	add	r2, sp, #48	; 0x30
   1b4d6:	a806      	add	r0, sp, #24
   1b4d8:	f00e ff54 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1b4dc:	f8d5 9004 	ldr.w	r9, [r5, #4]
   1b4e0:	2500      	movs	r5, #0
   1b4e2:	4606      	mov	r6, r0
  for (int i = 0; i < outer_size; ++i) {
   1b4e4:	46aa      	mov	sl, r5
      if (__a < __b)
   1b4e6:	ed9f 8a3f 	vldr	s16, [pc, #252]	; 1b5e4 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x160>
   1b4ea:	45d0      	cmp	r8, sl
   1b4ec:	dd43      	ble.n	1b576 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xf2>
   1b4ee:	eb04 0b85 	add.w	fp, r4, r5, lsl #2
   1b4f2:	465a      	mov	r2, fp
    float squared_l2_norm = 0;
    for (int c = 0; c < depth; ++c) {
   1b4f4:	2300      	movs	r3, #0
    float squared_l2_norm = 0;
   1b4f6:	eddf 7a3c 	vldr	s15, [pc, #240]	; 1b5e8 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x164>
   1b4fa:	00af      	lsls	r7, r5, #2
    for (int c = 0; c < depth; ++c) {
   1b4fc:	429e      	cmp	r6, r3
   1b4fe:	dd05      	ble.n	1b50c <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      const float val = input_data[depth * i + c];
   1b500:	ecb2 7a01 	vldmia	r2!, {s14}
    for (int c = 0; c < depth; ++c) {
   1b504:	3301      	adds	r3, #1
      squared_l2_norm += val * val;
   1b506:	eee7 7a07 	vfma.f32	s15, s14, s14
    for (int c = 0; c < depth; ++c) {
   1b50a:	e7f7      	b.n	1b4fc <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x78>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
   1b50c:	ee17 0a90 	vmov	r0, s15
   1b510:	f007 fe68 	bl	231e4 <sqrtf>
   1b514:	ee07 0a90 	vmov	s15, r0
	return __b;
   1b518:	eef4 7a48 	vcmp.f32	s15, s16
   1b51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    }
    float l2_norm = std::sqrt(squared_l2_norm);
    l2_norm = std::max(l2_norm, epsilon);
    for (int c = 0; c < depth; ++c) {
   1b520:	f04f 0200 	mov.w	r2, #0
   1b524:	bf48      	it	mi
   1b526:	eef0 7a48 	vmovmi.f32	s15, s16
   1b52a:	eb09 0307 	add.w	r3, r9, r7
   1b52e:	4296      	cmp	r6, r2
   1b530:	dd07      	ble.n	1b542 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xbe>
      output_data[depth * i + c] = input_data[depth * i + c] / l2_norm;
   1b532:	ecfb 6a01 	vldmia	fp!, {s13}
   1b536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    for (int c = 0; c < depth; ++c) {
   1b53a:	3201      	adds	r2, #1
      output_data[depth * i + c] = input_data[depth * i + c] / l2_norm;
   1b53c:	eca3 7a01 	vstmia	r3!, {s14}
    for (int c = 0; c < depth; ++c) {
   1b540:	e7f5      	b.n	1b52e <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
  for (int i = 0; i < outer_size; ++i) {
   1b542:	f10a 0a01 	add.w	sl, sl, #1
   1b546:	4435      	add	r5, r6
   1b548:	e7cf      	b.n	1b4ea <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x66>
  } else if (output->type == kTfLiteUInt8) {
   1b54a:	2803      	cmp	r0, #3
   1b54c:	d11f      	bne.n	1b58e <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x10a>
    TF_LITE_L2NORM(reference_ops);
   1b54e:	6923      	ldr	r3, [r4, #16]
   1b550:	4621      	mov	r1, r4
   1b552:	a806      	add	r0, sp, #24
   1b554:	9305      	str	r3, [sp, #20]
   1b556:	f00c f8a5 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1b55a:	6862      	ldr	r2, [r4, #4]
   1b55c:	4629      	mov	r1, r5
   1b55e:	a80c      	add	r0, sp, #48	; 0x30
   1b560:	9203      	str	r2, [sp, #12]
   1b562:	f00c f89f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1b566:	686b      	ldr	r3, [r5, #4]
   1b568:	9a03      	ldr	r2, [sp, #12]
   1b56a:	9300      	str	r3, [sp, #0]
   1b56c:	a906      	add	r1, sp, #24
   1b56e:	ab0c      	add	r3, sp, #48	; 0x30
   1b570:	a805      	add	r0, sp, #20
   1b572:	f010 fc0a 	bl	2bd8a <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph>
   1b576:	a80c      	add	r0, sp, #48	; 0x30
   1b578:	f00c f84f 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1b57c:	a806      	add	r0, sp, #24
   1b57e:	f00c f84c 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1b582:	2000      	movs	r0, #0
}
   1b584:	b013      	add	sp, #76	; 0x4c
   1b586:	ecbd 8b02 	vpop	{d8}
   1b58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteInt8) {
   1b58e:	2809      	cmp	r0, #9
   1b590:	d11e      	bne.n	1b5d0 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x14c>
    const auto input_shape = GetTensorShape(input);
   1b592:	4621      	mov	r1, r4
   1b594:	a806      	add	r0, sp, #24
   1b596:	f00c f885 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const auto output_shape = GetTensorShape(output);
   1b59a:	4629      	mov	r1, r5
   1b59c:	a80c      	add	r0, sp, #48	; 0x30
   1b59e:	f00c f881 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    const int trailing_dim = input_shape.DimensionsCount() - 1;
   1b5a2:	9906      	ldr	r1, [sp, #24]
        MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1b5a4:	aa0c      	add	r2, sp, #48	; 0x30
    const int trailing_dim = input_shape.DimensionsCount() - 1;
   1b5a6:	3901      	subs	r1, #1
        MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1b5a8:	460b      	mov	r3, r1
   1b5aa:	a806      	add	r0, sp, #24
   1b5ac:	9103      	str	r1, [sp, #12]
   1b5ae:	f00e fee9 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1b5b2:	9903      	ldr	r1, [sp, #12]
        MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1b5b4:	4606      	mov	r6, r0
        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1b5b6:	aa0c      	add	r2, sp, #48	; 0x30
   1b5b8:	a806      	add	r0, sp, #24
   1b5ba:	f010 fbb0 	bl	2bd1e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
    reference_integer_ops::L2Normalization(input->params.zero_point, outer_size,
   1b5be:	686b      	ldr	r3, [r5, #4]
        MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1b5c0:	4601      	mov	r1, r0
    reference_integer_ops::L2Normalization(input->params.zero_point, outer_size,
   1b5c2:	9300      	str	r3, [sp, #0]
   1b5c4:	4632      	mov	r2, r6
   1b5c6:	6863      	ldr	r3, [r4, #4]
   1b5c8:	6920      	ldr	r0, [r4, #16]
   1b5ca:	f010 fc3c 	bl	2be46 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa>
   1b5ce:	e7d2      	b.n	1b576 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0xf2>
    TF_LITE_KERNEL_LOG(context, "Output type is %s, requires float.",
   1b5d0:	6974      	ldr	r4, [r6, #20]
   1b5d2:	f7f1 fb77 	bl	ccc4 <TfLiteTypeGetName>
   1b5d6:	4905      	ldr	r1, [pc, #20]	; (1b5ec <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x168>)
   1b5d8:	4602      	mov	r2, r0
   1b5da:	4630      	mov	r0, r6
   1b5dc:	47a0      	blx	r4
    return kTfLiteError;
   1b5de:	2001      	movs	r0, #1
   1b5e0:	e7d0      	b.n	1b584 <_ZN6tflite3ops5micro6l2norm4EvalEP13TfLiteContextP10TfLiteNode+0x100>
   1b5e2:	bf00      	nop
   1b5e4:	358637bd 	.word	0x358637bd
   1b5e8:	00000000 	.word	0x00000000
   1b5ec:	000352b8 	.word	0x000352b8

0001b5f0 <_ZN6tflite3ops5micro19Register_LOGICAL_OREv>:
}

}  // namespace
}  // namespace logical

TfLiteRegistration Register_LOGICAL_OR() {
   1b5f0:	b510      	push	{r4, lr}
   1b5f2:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/logical::LogicalOrEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1b5f4:	2220      	movs	r2, #32
   1b5f6:	2100      	movs	r1, #0
   1b5f8:	f015 fc5d 	bl	30eb6 <memset>
   1b5fc:	4b01      	ldr	r3, [pc, #4]	; (1b604 <_ZN6tflite3ops5micro19Register_LOGICAL_OREv+0x14>)
}
   1b5fe:	4620      	mov	r0, r4
          /*version=*/0};
   1b600:	60e3      	str	r3, [r4, #12]
}
   1b602:	bd10      	pop	{r4, pc}
   1b604:	0001b621 	.word	0x0001b621

0001b608 <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv>:

TfLiteRegistration Register_LOGICAL_AND() {
   1b608:	b510      	push	{r4, lr}
   1b60a:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/logical::LogicalAndEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1b60c:	2220      	movs	r2, #32
   1b60e:	2100      	movs	r1, #0
   1b610:	f015 fc51 	bl	30eb6 <memset>
   1b614:	4b01      	ldr	r3, [pc, #4]	; (1b61c <_ZN6tflite3ops5micro20Register_LOGICAL_ANDEv+0x14>)
}
   1b616:	4620      	mov	r0, r4
          /*version=*/0};
   1b618:	60e3      	str	r3, [r4, #12]
}
   1b61a:	bd10      	pop	{r4, pc}
   1b61c:	0001b62d 	.word	0x0001b62d

0001b620 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode>:
  return LogicalImpl(context, node, LogicalOr);
   1b620:	4a01      	ldr	r2, [pc, #4]	; (1b628 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_113LogicalOrEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1b622:	f010 bd82 	b.w	2c12a <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE>
   1b626:	bf00      	nop
   1b628:	0002befd 	.word	0x0002befd

0001b62c <_ZN6tflite3ops5micro7logical12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode>:
  return LogicalImpl(context, node, LogicalAnd);
   1b62c:	4a01      	ldr	r2, [pc, #4]	; (1b634 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_114LogicalAndEvalEP13TfLiteContextP10TfLiteNode+0x8>)
   1b62e:	f010 bd7c 	b.w	2c12a <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE>
   1b632:	bf00      	nop
   1b634:	0002bf05 	.word	0x0002bf05

0001b638 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf>:

namespace tflite {
namespace reference_ops {

inline void Logistic(const RuntimeShape& input_shape, const float* input_data,
                     const RuntimeShape& output_shape, float* output_data) {
   1b638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b63c:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   1b63e:	f8d0 8000 	ldr.w	r8, [r0]
   1b642:	6813      	ldr	r3, [r2, #0]
   1b644:	ed2d 8b04 	vpush	{d8-d9}
   1b648:	4598      	cmp	r8, r3
   1b64a:	4604      	mov	r4, r0
   1b64c:	460f      	mov	r7, r1
   1b64e:	4691      	mov	r9, r2
   1b650:	d001      	beq.n	1b656 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x1e>
   1b652:	f015 fbe6 	bl	30e22 <abort>
  for (int i = 0; i < dims_count; ++i) {
   1b656:	2500      	movs	r5, #0
   1b658:	45a8      	cmp	r8, r5
   1b65a:	dd0c      	ble.n	1b676 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1b65c:	4629      	mov	r1, r5
   1b65e:	4620      	mov	r0, r4
   1b660:	f00b ffe6 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   1b664:	4629      	mov	r1, r5
   1b666:	4682      	mov	sl, r0
   1b668:	4648      	mov	r0, r9
   1b66a:	f00b ffe1 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   1b66e:	4582      	cmp	sl, r0
   1b670:	d1ef      	bne.n	1b652 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x1a>
  for (int i = 0; i < dims_count; ++i) {
   1b672:	3501      	adds	r5, #1
   1b674:	e7f0      	b.n	1b658 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x20>
    for (int i = 0; i < size_; i++) {
   1b676:	2300      	movs	r3, #0
    int buffer_size = 1;
   1b678:	f04f 0901 	mov.w	r9, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1b67c:	f1b8 0f05 	cmp.w	r8, #5
   1b680:	bfcc      	ite	gt
   1b682:	6864      	ldrgt	r4, [r4, #4]
   1b684:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   1b686:	4598      	cmp	r8, r3
   1b688:	dc1f      	bgt.n	1b6ca <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x92>
   1b68a:	4634      	mov	r4, r6
  // optimized kernels. (check the definition of scalar_logistic_op<float>)

  for (int i = 0; i < flat_size; i++) {
    float val = input_data[i];
    float result;
    if (val > cutoff_upper) {
   1b68c:	eddf 8a1c 	vldr	s17, [pc, #112]	; 1b700 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0xc8>
  for (int i = 0; i < flat_size; i++) {
   1b690:	2600      	movs	r6, #0
      result = 1.0f;
   1b692:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    } else if (val < cutoff_lower) {
   1b696:	eeba 9a02 	vmov.f32	s18, #162	; 0xc1100000 -9.0
  for (int i = 0; i < flat_size; i++) {
   1b69a:	454e      	cmp	r6, r9
   1b69c:	da2b      	bge.n	1b6f6 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0xbe>
    float val = input_data[i];
   1b69e:	ecf7 7a01 	vldmia	r7!, {s15}
    if (val > cutoff_upper) {
   1b6a2:	eef4 7ae8 	vcmpe.f32	s15, s17
   1b6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b6aa:	dc21      	bgt.n	1b6f0 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0xb8>
    } else if (val < cutoff_lower) {
   1b6ac:	eef4 7ac9 	vcmpe.f32	s15, s18
   1b6b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1b6b4:	d50f      	bpl.n	1b6d6 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x9e>
  { return __builtin_expf(__x); }
   1b6b6:	ee17 0a90 	vmov	r0, s15
   1b6ba:	f007 fc31 	bl	22f20 <expf>
   1b6be:	ee07 0a90 	vmov	s15, r0
      result = std::exp(val);
    } else {
      result = 1.f / (1.f + std::exp(-val));
    }
    output_data[i] = result;
   1b6c2:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; i++) {
   1b6c6:	3601      	adds	r6, #1
   1b6c8:	e7e7      	b.n	1b69a <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x62>
      buffer_size *= dims_data[i];
   1b6ca:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   1b6ce:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   1b6d0:	fb02 f909 	mul.w	r9, r2, r9
    for (int i = 0; i < size_; i++) {
   1b6d4:	e7d7      	b.n	1b686 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x4e>
   1b6d6:	eef1 7a67 	vneg.f32	s15, s15
   1b6da:	ee17 0a90 	vmov	r0, s15
   1b6de:	f007 fc1f 	bl	22f20 <expf>
      result = 1.f / (1.f + std::exp(-val));
   1b6e2:	ee07 0a90 	vmov	s15, r0
   1b6e6:	ee37 7a88 	vadd.f32	s14, s15, s16
   1b6ea:	eec8 7a07 	vdiv.f32	s15, s16, s14
   1b6ee:	e7e8      	b.n	1b6c2 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x8a>
      result = 1.0f;
   1b6f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1b6f4:	e7e5      	b.n	1b6c2 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf+0x8a>
  }
}
   1b6f6:	ecbd 8b04 	vpop	{d8-d9}
   1b6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b6fe:	bf00      	nop
   1b700:	4184f3cf 	.word	0x4184f3cf

0001b704 <_ZN6tflite3ops5micro17Register_LOGISTICEv>:
  return kTfLiteOk;
}

}  // namespace activations

TfLiteRegistration Register_LOGISTIC() {
   1b704:	b510      	push	{r4, lr}
   1b706:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/activations::LogisticEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1b708:	2220      	movs	r2, #32
   1b70a:	2100      	movs	r1, #0
   1b70c:	f015 fbd3 	bl	30eb6 <memset>
   1b710:	4b01      	ldr	r3, [pc, #4]	; (1b718 <_ZN6tflite3ops5micro17Register_LOGISTICEv+0x14>)
}
   1b712:	4620      	mov	r0, r4
          /*version=*/0};
   1b714:	60e3      	str	r3, [r4, #12]
}
   1b716:	bd10      	pop	{r4, pc}
   1b718:	0001b9b5 	.word	0x0001b9b5

0001b71c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:
  std::int64_t sum = a64 + b64;
   1b71c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1b720:	2300      	movs	r3, #0
   1b722:	1812      	adds	r2, r2, r0
   1b724:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
   1b728:	1c59      	adds	r1, r3, #1
   1b72a:	bf05      	ittet	eq
   1b72c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1b730:	4611      	moveq	r1, r2
   1b732:	2101      	movne	r1, #1
   1b734:	4618      	moveq	r0, r3
   1b736:	bf18      	it	ne
   1b738:	2000      	movne	r0, #0

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
   1b73a:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
  return static_cast<std::int32_t>((sum + sign) / 2);
   1b73e:	1854      	adds	r4, r2, r1
   1b740:	eb43 0500 	adc.w	r5, r3, r0
   1b744:	0feb      	lsrs	r3, r5, #31
   1b746:	18e4      	adds	r4, r4, r3
   1b748:	f145 0500 	adc.w	r5, r5, #0
   1b74c:	ea4f 0854 	mov.w	r8, r4, lsr #1
   1b750:	ea48 78c5 	orr.w	r8, r8, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1b754:	4640      	mov	r0, r8
   1b756:	493b      	ldr	r1, [pc, #236]	; (1b844 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x128>)
   1b758:	f7ff fd70 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
   1b75c:	2503      	movs	r5, #3
   1b75e:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1b762:	4621      	mov	r1, r4
   1b764:	4640      	mov	r0, r8
   1b766:	f7ff fd69 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1b76a:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1b76e:	4620      	mov	r0, r4
   1b770:	f7ff fd64 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a ? BitNot(zero) : zero;
   1b774:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   1b778:	da56      	bge.n	1b828 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x10c>
   1b77a:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   1b77e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b782:	f04f 0c00 	mov.w	ip, #0
   1b786:	bfc8      	it	gt
   1b788:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1b78a:	ea4f 7be0 	mov.w	fp, r0, asr #31
   1b78e:	0082      	lsls	r2, r0, #2
   1b790:	ea4f 038b 	mov.w	r3, fp, lsl #2
   1b794:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
             ? min
   1b798:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   1b79c:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
   1b7a0:	db46      	blt.n	1b830 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x114>
             : wide_shifted > max ? max
   1b7a2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   1b7a6:	f04f 0b00 	mov.w	fp, #0
   1b7aa:	4592      	cmp	sl, r2
   1b7ac:	eb7b 0003 	sbcs.w	r0, fp, r3
   1b7b0:	bfb8      	it	lt
   1b7b2:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
   1b7b6:	ea6f 030c 	mvn.w	r3, ip
  return a & b;
   1b7ba:	401a      	ands	r2, r3
  return ~a;
   1b7bc:	43cb      	mvns	r3, r1
  return a & b;
   1b7be:	f02c 4c00 	bic.w	ip, ip, #2147483648	; 0x80000000
  return a ^ b;
   1b7c2:	ea82 020c 	eor.w	r2, r2, ip
  return a & b;
   1b7c6:	401a      	ands	r2, r3
   1b7c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  return a ^ b;
   1b7cc:	404a      	eors	r2, r1
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
  for (int i = 0; i < 3; i++) {
   1b7ce:	3d01      	subs	r5, #1
  return a + b;
   1b7d0:	4414      	add	r4, r2
  for (int i = 0; i < 3; i++) {
   1b7d2:	d1c6      	bne.n	1b762 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x46>
  return a ? BitNot(zero) : zero;
   1b7d4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   1b7d8:	da2d      	bge.n	1b836 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x11a>
   1b7da:	f1b4 4f40 	cmp.w	r4, #3221225472	; 0xc0000000
   1b7de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b7e2:	462a      	mov	r2, r5
   1b7e4:	bfc8      	it	gt
   1b7e6:	2000      	movgt	r0, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1b7e8:	1926      	adds	r6, r4, r4
   1b7ea:	ea4f 75e4 	mov.w	r5, r4, asr #31
   1b7ee:	eb45 0705 	adc.w	r7, r5, r5
             ? min
   1b7f2:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
   1b7f6:	f177 33ff 	sbcs.w	r3, r7, #4294967295	; 0xffffffff
   1b7fa:	db20      	blt.n	1b83e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x122>
             : wide_shifted > max ? max
   1b7fc:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1b800:	2500      	movs	r5, #0
   1b802:	42b4      	cmp	r4, r6
   1b804:	eb75 0307 	sbcs.w	r3, r5, r7
   1b808:	bfac      	ite	ge
   1b80a:	4633      	movge	r3, r6
   1b80c:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
  return ~a;
   1b810:	43d6      	mvns	r6, r2
  return a & b;
   1b812:	401e      	ands	r6, r3
  return ~a;
   1b814:	43c3      	mvns	r3, r0
  return a & b;
   1b816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  return a ^ b;
   1b81a:	4056      	eors	r6, r2
  return a & b;
   1b81c:	401e      	ands	r6, r3
   1b81e:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
   1b822:	4070      	eors	r0, r6
   1b824:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
  return a ? BitNot(zero) : zero;
   1b828:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1b82c:	2100      	movs	r1, #0
   1b82e:	e7ac      	b.n	1b78a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x6e>
             ? min
   1b830:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b834:	e7bf      	b.n	1b7b6 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x9a>
  return a ? BitNot(zero) : zero;
   1b836:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b83a:	4628      	mov	r0, r5
   1b83c:	e7d4      	b.n	1b7e8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xcc>
             ? min
   1b83e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1b842:	e7e5      	b.n	1b810 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0xf4>
   1b844:	c3c3c3c4 	.word	0xc3c3c3c4

0001b848 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
   1b848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b84c:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
   1b84e:	4814      	ldr	r0, [pc, #80]	; (1b8a0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x58>)
   1b850:	f010 fcc3 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1b854:	4606      	mov	r6, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   1b856:	4813      	ldr	r0, [pc, #76]	; (1b8a4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_+0x5c>)
   1b858:	f010 fcbf 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a + b;
   1b85c:	f104 5480 	add.w	r4, r4, #268435456	; 0x10000000
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   1b860:	4680      	mov	r8, r0
  F x2 = x * x;
   1b862:	4621      	mov	r1, r4
   1b864:	4620      	mov	r0, r4
   1b866:	f010 fcbd 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
   1b86a:	4621      	mov	r1, r4
  F x2 = x * x;
   1b86c:	4605      	mov	r5, r0
  F x3 = x2 * x;
   1b86e:	f010 fcb9 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
   1b872:	4629      	mov	r1, r5
  F x3 = x2 * x;
   1b874:	4607      	mov	r7, r0
  F x4 = x2 * x2;
   1b876:	4628      	mov	r0, r5
   1b878:	f010 fcb4 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1b87c:	2102      	movs	r1, #2
   1b87e:	f7ff fd15 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      SaturatingRoundingMultiplyByPOT<-1>(
   1b882:	4641      	mov	r1, r8
   1b884:	4438      	add	r0, r7
   1b886:	f010 fcad 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1b88a:	2101      	movs	r1, #1
   1b88c:	4428      	add	r0, r5
   1b88e:	f7ff fd0d 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return AddSaturatingIf16Bit(
   1b892:	1821      	adds	r1, r4, r0
   1b894:	4630      	mov	r0, r6
   1b896:	f010 fca5 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
}
   1b89a:	4430      	add	r0, r6
   1b89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b8a0:	70f5a894 	.word	0x70f5a894
   1b8a4:	2aaaaaab 	.word	0x2aaaaaab

0001b8a8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
   1b8a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
   1b8ac:	f040 447e 	orr.w	r4, r0, #4261412864	; 0xfe000000
FixedPoint<tRawType, 0> exp_on_negative_values(
   1b8b0:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
   1b8b2:	0120      	lsls	r0, r4, #4
   1b8b4:	f7ff ffc8 	bl	1b848 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
   1b8b8:	4682      	mov	sl, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
   1b8ba:	4838      	ldr	r0, [pc, #224]	; (1b99c <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xf4>)
   1b8bc:	f010 fc8d 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1b8c0:	4601      	mov	r1, r0
   1b8c2:	4650      	mov	r0, sl
   1b8c4:	f010 fc8e 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a - b;
   1b8c8:	1b64      	subs	r4, r4, r5
  return a ? BitNot(zero) : zero;
   1b8ca:	f3c4 6940 	ubfx	r9, r4, #25, #1
   1b8ce:	f1c9 0700 	rsb	r7, r9, #0
  return a & b;
   1b8d2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1b8d6:	4007      	ands	r7, r0
   1b8d8:	ea09 000a 	and.w	r0, r9, sl
  return a ^ b;
   1b8dc:	ea87 0800 	eor.w	r8, r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
   1b8e0:	482f      	ldr	r0, [pc, #188]	; (1b9a0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xf8>)
   1b8e2:	f010 fc7a 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1b8e6:	4601      	mov	r1, r0
   1b8e8:	4640      	mov	r0, r8
   1b8ea:	f010 fc7b 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1b8ee:	f3c4 6780 	ubfx	r7, r4, #26, #1
   1b8f2:	427e      	negs	r6, r7
  return a & b;
   1b8f4:	3f01      	subs	r7, #1
   1b8f6:	4030      	ands	r0, r6
   1b8f8:	ea07 0708 	and.w	r7, r7, r8
  return a ^ b;
   1b8fc:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
   1b8fe:	4829      	ldr	r0, [pc, #164]	; (1b9a4 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xfc>)
   1b900:	f010 fc6b 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1b904:	4601      	mov	r1, r0
   1b906:	4638      	mov	r0, r7
   1b908:	f010 fc6c 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1b90c:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
   1b910:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
   1b914:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1b918:	ea00 000a 	and.w	r0, r0, sl
   1b91c:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
   1b920:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
   1b924:	4820      	ldr	r0, [pc, #128]	; (1b9a8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x100>)
   1b926:	f010 fc58 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1b92a:	4601      	mov	r1, r0
   1b92c:	4658      	mov	r0, fp
   1b92e:	f010 fc59 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1b932:	f3c4 7900 	ubfx	r9, r4, #28, #1
   1b936:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
   1b93a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1b93e:	ea00 0008 	and.w	r0, r0, r8
   1b942:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
   1b946:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
   1b94a:	4818      	ldr	r0, [pc, #96]	; (1b9ac <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x104>)
   1b94c:	f010 fc45 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1b950:	4601      	mov	r1, r0
   1b952:	4648      	mov	r0, r9
   1b954:	f010 fc46 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1b958:	f3c4 7740 	ubfx	r7, r4, #29, #1
   1b95c:	427e      	negs	r6, r7
  return a & b;
   1b95e:	3f01      	subs	r7, #1
   1b960:	4030      	ands	r0, r6
   1b962:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
   1b966:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
   1b968:	4811      	ldr	r0, [pc, #68]	; (1b9b0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x108>)
   1b96a:	f010 fc36 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1b96e:	4601      	mov	r1, r0
   1b970:	4638      	mov	r0, r7
   1b972:	f010 fc37 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1b976:	f3c4 7480 	ubfx	r4, r4, #30, #1
   1b97a:	4263      	negs	r3, r4
  return a & b;
   1b97c:	4018      	ands	r0, r3
  return a ? BitNot(zero) : zero;
   1b97e:	fab5 f385 	clz	r3, r5
  return a & b;
   1b982:	3c01      	subs	r4, #1
   1b984:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
   1b986:	095b      	lsrs	r3, r3, #5
  return a ^ b;
   1b988:	4044      	eors	r4, r0
  return a & b;
   1b98a:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
   1b98c:	425b      	negs	r3, r3
  return a & b;
   1b98e:	4020      	ands	r0, r4
   1b990:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
   1b994:	4058      	eors	r0, r3
   1b996:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b99a:	bf00      	nop
   1b99c:	63afbe7b 	.word	0x63afbe7b
   1b9a0:	4da2cbf2 	.word	0x4da2cbf2
   1b9a4:	2f16ac6c 	.word	0x2f16ac6c
   1b9a8:	1152aaa4 	.word	0x1152aaa4
   1b9ac:	02582ab7 	.word	0x02582ab7
   1b9b0:	000afe11 	.word	0x000afe11

0001b9b4 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1b9b4:	680b      	ldr	r3, [r1, #0]
TfLiteStatus LogisticEval(TfLiteContext* context, TfLiteNode* node) {
   1b9b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9ba:	685f      	ldr	r7, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   1b9bc:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1b9be:	6885      	ldr	r5, [r0, #8]
   1b9c0:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   1b9c2:	ea4f 1a87 	mov.w	sl, r7, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1b9c6:	ea4f 1883 	mov.w	r8, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1b9ca:	f815 200a 	ldrb.w	r2, [r5, sl]
   1b9ce:	eb05 1983 	add.w	r9, r5, r3, lsl #6
   1b9d2:	f815 3008 	ldrb.w	r3, [r5, r8]
TfLiteStatus LogisticEval(TfLiteContext* context, TfLiteNode* node) {
   1b9d6:	4604      	mov	r4, r0
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1b9d8:	4293      	cmp	r3, r2
TfLiteStatus LogisticEval(TfLiteContext* context, TfLiteNode* node) {
   1b9da:	b097      	sub	sp, #92	; 0x5c
  return &context->tensors[node->inputs->data[index]];
   1b9dc:	eb05 1787 	add.w	r7, r5, r7, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1b9e0:	d034      	beq.n	1ba4c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x98>
   1b9e2:	f8d0 b014 	ldr.w	fp, [r0, #20]
   1b9e6:	4610      	mov	r0, r2
   1b9e8:	f7f1 f96c 	bl	ccc4 <TfLiteTypeGetName>
   1b9ec:	4606      	mov	r6, r0
   1b9ee:	f815 0008 	ldrb.w	r0, [r5, r8]
   1b9f2:	f7f1 f967 	bl	ccc4 <TfLiteTypeGetName>
   1b9f6:	4b58      	ldr	r3, [pc, #352]	; (1bb58 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1a4>)
   1b9f8:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1b9fc:	9301      	str	r3, [sp, #4]
   1b9fe:	4b57      	ldr	r3, [pc, #348]	; (1bb5c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
   1ba00:	4620      	mov	r0, r4
   1ba02:	9300      	str	r3, [sp, #0]
   1ba04:	4a56      	ldr	r2, [pc, #344]	; (1bb60 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1ac>)
   1ba06:	232f      	movs	r3, #47	; 0x2f
   1ba08:	4956      	ldr	r1, [pc, #344]	; (1bb64 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1b0>)
   1ba0a:	47d8      	blx	fp
  if (input->type == kTfLiteFloat32) {
   1ba0c:	f815 600a 	ldrb.w	r6, [r5, sl]
   1ba10:	2e01      	cmp	r6, #1
   1ba12:	d15c      	bne.n	1bace <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x11a>
    switch (output->type) {
   1ba14:	f815 3008 	ldrb.w	r3, [r5, r8]
   1ba18:	2b01      	cmp	r3, #1
   1ba1a:	d146      	bne.n	1baaa <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0xf6>
            GetTensorShape(input), GetTensorData<float>(input),
   1ba1c:	4639      	mov	r1, r7
   1ba1e:	a80a      	add	r0, sp, #40	; 0x28
   1ba20:	f00b fe40 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ba24:	687c      	ldr	r4, [r7, #4]
            GetTensorShape(output), GetTensorData<float>(output));
   1ba26:	4649      	mov	r1, r9
   1ba28:	a810      	add	r0, sp, #64	; 0x40
   1ba2a:	f00b fe3b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
        reference_ops::Logistic(
   1ba2e:	4621      	mov	r1, r4
   1ba30:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1ba34:	aa10      	add	r2, sp, #64	; 0x40
   1ba36:	a80a      	add	r0, sp, #40	; 0x28
   1ba38:	f7ff fdfe 	bl	1b638 <_ZN6tflite13reference_ops8LogisticERKNS_12RuntimeShapeEPKfS3_Pf>
            GetTensorShape(output), GetTensorData<float>(output));
   1ba3c:	a810      	add	r0, sp, #64	; 0x40
   1ba3e:	f00b fdec 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
            GetTensorShape(input), GetTensorData<float>(input),
   1ba42:	a80a      	add	r0, sp, #40	; 0x28
   1ba44:	f00b fde9 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
        return kTfLiteOk;
   1ba48:	2600      	movs	r6, #0
   1ba4a:	e03c      	b.n	1bac6 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x112>
  if (input->type == kTfLiteInt8) {
   1ba4c:	2b09      	cmp	r3, #9
   1ba4e:	d1dd      	bne.n	1ba0c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x58>
    TF_LITE_ENSURE_EQ(context, output->params.zero_point,
   1ba50:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1ba54:	f113 0f80 	cmn.w	r3, #128	; 0x80
   1ba58:	d00d      	beq.n	1ba76 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0xc2>
   1ba5a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   1ba5e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1ba62:	4b41      	ldr	r3, [pc, #260]	; (1bb68 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1b4>)
   1ba64:	4a3e      	ldr	r2, [pc, #248]	; (1bb60 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1ac>)
   1ba66:	9301      	str	r3, [sp, #4]
   1ba68:	4b40      	ldr	r3, [pc, #256]	; (1bb6c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1b8>)
   1ba6a:	4941      	ldr	r1, [pc, #260]	; (1bb70 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1bc>)
   1ba6c:	9300      	str	r3, [sp, #0]
   1ba6e:	6946      	ldr	r6, [r0, #20]
   1ba70:	2331      	movs	r3, #49	; 0x31
   1ba72:	47b0      	blx	r6
   1ba74:	e7ca      	b.n	1ba0c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x58>
        static_cast<double>(input->params.scale) *
   1ba76:	68f8      	ldr	r0, [r7, #12]
   1ba78:	f7f0 fd46 	bl	c508 <__aeabi_f2d>
    const double input_real_multiplier =
   1ba7c:	4b3d      	ldr	r3, [pc, #244]	; (1bb74 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1c0>)
   1ba7e:	2200      	movs	r2, #0
   1ba80:	f7f4 fd14 	bl	104ac <__aeabi_dmul>
    const double q = std::frexp(input_real_multiplier, &data->input_left_shift);
   1ba84:	aa09      	add	r2, sp, #36	; 0x24
   1ba86:	f006 ffef 	bl	22a68 <frexp>
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
   1ba8a:	2200      	movs	r2, #0
   1ba8c:	4b3a      	ldr	r3, [pc, #232]	; (1bb78 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
   1ba8e:	f7f4 fd0d 	bl	104ac <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
   1ba92:	f007 f84f 	bl	22b34 <round>
   1ba96:	f7f4 ffa3 	bl	109e0 <__aeabi_d2iz>
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
   1ba9a:	221f      	movs	r2, #31
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
   1ba9c:	9008      	str	r0, [sp, #32]
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
   1ba9e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1baa0:	2004      	movs	r0, #4
   1baa2:	f014 fb0e 	bl	300c2 <_ZN6tflite20CalculateInputRadiusEiii>
    data->input_range_radius =
   1baa6:	9007      	str	r0, [sp, #28]
   1baa8:	e7b0      	b.n	1ba0c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x58>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1baaa:	4630      	mov	r0, r6
   1baac:	6967      	ldr	r7, [r4, #20]
   1baae:	f7f1 f909 	bl	ccc4 <TfLiteTypeGetName>
   1bab2:	9004      	str	r0, [sp, #16]
   1bab4:	f815 0008 	ldrb.w	r0, [r5, r8]
   1bab8:	f7f1 f904 	bl	ccc4 <TfLiteTypeGetName>
   1babc:	9a04      	ldr	r2, [sp, #16]
   1babe:	4603      	mov	r3, r0
   1bac0:	492e      	ldr	r1, [pc, #184]	; (1bb7c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1c8>)
   1bac2:	4620      	mov	r0, r4
   1bac4:	47b8      	blx	r7
}
   1bac6:	4630      	mov	r0, r6
   1bac8:	b017      	add	sp, #92	; 0x5c
   1baca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (input->type == kTfLiteInt8) {
   1bace:	2e09      	cmp	r6, #9
   1bad0:	d131      	bne.n	1bb36 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x182>
    switch (output->type) {
   1bad2:	f815 3008 	ldrb.w	r3, [r5, r8]
   1bad6:	2b09      	cmp	r3, #9
   1bad8:	d12d      	bne.n	1bb36 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x182>
        reference_integer_ops::Logistic(
   1bada:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
  int64_t count = 1;
   1bade:	2401      	movs	r4, #1
   1bae0:	2500      	movs	r5, #0
  for (int i = 0; i < dims->size; ++i) {
   1bae2:	f04f 0c00 	mov.w	ip, #0
   1bae6:	68be      	ldr	r6, [r7, #8]
  int64_t count = 1;
   1bae8:	e9cd 4504 	strd	r4, r5, [sp, #16]
            input->params.zero_point, data.input_range_radius,
   1baec:	6938      	ldr	r0, [r7, #16]
        reference_integer_ops::Logistic(
   1baee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  for (int i = 0; i < dims->size; ++i) {
   1baf0:	f856 8b04 	ldr.w	r8, [r6], #4
   1baf4:	45e0      	cmp	r8, ip
   1baf6:	dd14      	ble.n	1bb22 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x16e>
    count *= dims->data[i];
   1baf8:	f856 eb04 	ldr.w	lr, [r6], #4
   1bafc:	9c04      	ldr	r4, [sp, #16]
   1bafe:	ea4f 7bee 	mov.w	fp, lr, asr #31
   1bb02:	fb04 fa0b 	mul.w	sl, r4, fp
   1bb06:	9c05      	ldr	r4, [sp, #20]
  for (int i = 0; i < dims->size; ++i) {
   1bb08:	f10c 0c01 	add.w	ip, ip, #1
    count *= dims->data[i];
   1bb0c:	fb0e aa04 	mla	sl, lr, r4, sl
   1bb10:	9c04      	ldr	r4, [sp, #16]
   1bb12:	fba4 450e 	umull	r4, r5, r4, lr
   1bb16:	e9cd 4504 	strd	r4, r5, [sp, #16]
   1bb1a:	9c05      	ldr	r4, [sp, #20]
   1bb1c:	4454      	add	r4, sl
   1bb1e:	9405      	str	r4, [sp, #20]
  for (int i = 0; i < dims->size; ++i) {
   1bb20:	e7e8      	b.n	1baf4 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x140>
   1bb22:	f8d9 5004 	ldr.w	r5, [r9, #4]
   1bb26:	9c04      	ldr	r4, [sp, #16]
   1bb28:	9502      	str	r5, [sp, #8]
   1bb2a:	687d      	ldr	r5, [r7, #4]
   1bb2c:	9400      	str	r4, [sp, #0]
   1bb2e:	9501      	str	r5, [sp, #4]
   1bb30:	f010 fb5c 	bl	2c1ec <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa>
   1bb34:	e788      	b.n	1ba48 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x94>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1bb36:	4630      	mov	r0, r6
   1bb38:	6967      	ldr	r7, [r4, #20]
   1bb3a:	f7f1 f8c3 	bl	ccc4 <TfLiteTypeGetName>
   1bb3e:	9004      	str	r0, [sp, #16]
   1bb40:	f815 0008 	ldrb.w	r0, [r5, r8]
   1bb44:	f7f1 f8be 	bl	ccc4 <TfLiteTypeGetName>
   1bb48:	9a04      	ldr	r2, [sp, #16]
   1bb4a:	4603      	mov	r3, r0
   1bb4c:	490b      	ldr	r1, [pc, #44]	; (1bb7c <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x1c8>)
   1bb4e:	4620      	mov	r0, r4
   1bb50:	47b8      	blx	r7
    return kTfLiteError;
   1bb52:	2601      	movs	r6, #1
   1bb54:	e7b7      	b.n	1bac6 <_ZN6tflite3ops5micro11activations12LogisticEvalEP13TfLiteContextP10TfLiteNode+0x112>
   1bb56:	bf00      	nop
   1bb58:	000353f7 	.word	0x000353f7
   1bb5c:	0003540f 	.word	0x0003540f
   1bb60:	000352db 	.word	0x000352db
   1bb64:	00034b27 	.word	0x00034b27
   1bb68:	000356b8 	.word	0x000356b8
   1bb6c:	00035603 	.word	0x00035603
   1bb70:	00034aec 	.word	0x00034aec
   1bb74:	41a00000 	.word	0x41a00000
   1bb78:	41e00000 	.word	0x41e00000
   1bb7c:	0003508f 	.word	0x0003508f

0001bb80 <_ZN6tflite3ops5micro16Register_MAXIMUMEv>:
  return kTfLiteOk;
}

}  // namespace maximum_minimum

TfLiteRegistration Register_MAXIMUM() {
   1bb80:	b510      	push	{r4, lr}
   1bb82:	4604      	mov	r4, r0
          maximum_minimum::Eval<maximum_minimum::kReference,
                                maximum_minimum::MaximumOp>,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1bb84:	2220      	movs	r2, #32
   1bb86:	2100      	movs	r1, #0
   1bb88:	f015 f995 	bl	30eb6 <memset>
   1bb8c:	4b01      	ldr	r3, [pc, #4]	; (1bb94 <_ZN6tflite3ops5micro16Register_MAXIMUMEv+0x14>)
}
   1bb8e:	4620      	mov	r0, r4
          /*version=*/0};
   1bb90:	60e3      	str	r3, [r4, #12]
}
   1bb92:	bd10      	pop	{r4, pc}
   1bb94:	0001bbb1 	.word	0x0001bbb1

0001bb98 <_ZN6tflite3ops5micro16Register_MINIMUMEv>:

TfLiteRegistration Register_MINIMUM() {
   1bb98:	b510      	push	{r4, lr}
   1bb9a:	4604      	mov	r4, r0
          maximum_minimum::Eval<maximum_minimum::kReference,
                                maximum_minimum::MinimumOp>,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1bb9c:	2220      	movs	r2, #32
   1bb9e:	2100      	movs	r1, #0
   1bba0:	f015 f989 	bl	30eb6 <memset>
   1bba4:	4b01      	ldr	r3, [pc, #4]	; (1bbac <_ZN6tflite3ops5micro16Register_MINIMUMEv+0x14>)
}
   1bba6:	4620      	mov	r0, r4
          /*version=*/0};
   1bba8:	60e3      	str	r3, [r4, #12]
}
   1bbaa:	bd10      	pop	{r4, pc}
   1bbac:	0001bd59 	.word	0x0001bd59

0001bbb0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
    input1 = GetInput(context, node, kInputTensor1);
   1bbb0:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1bbb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return &context->tensors[node->inputs->data[index]];
   1bbb6:	685c      	ldr	r4, [r3, #4]
   1bbb8:	689d      	ldr	r5, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   1bbba:	684b      	ldr	r3, [r1, #4]
    input1 = GetInput(context, node, kInputTensor1);
   1bbbc:	f8d0 8008 	ldr.w	r8, [r0, #8]
   1bbc0:	685e      	ldr	r6, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1bbc2:	4607      	mov	r7, r0
   1bbc4:	ea4f 1986 	mov.w	r9, r6, lsl #6
    switch (op_context.output->type) {
   1bbc8:	f818 0009 	ldrb.w	r0, [r8, r9]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1bbcc:	b097      	sub	sp, #92	; 0x5c
   1bbce:	1e43      	subs	r3, r0, #1
  return &context->tensors[node->inputs->data[index]];
   1bbd0:	eb08 1484 	add.w	r4, r8, r4, lsl #6
   1bbd4:	eb08 1585 	add.w	r5, r8, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1bbd8:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   1bbdc:	2b08      	cmp	r3, #8
   1bbde:	f200 80a4 	bhi.w	1bd2a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x17a>
   1bbe2:	e8df f003 	tbb	[pc, r3]
   1bbe6:	6805      	.short	0x6805
   1bbe8:	a2a2852e 	.word	0xa2a2852e
   1bbec:	a2a2      	.short	0xa2a2
   1bbee:	4b          	.byte	0x4b
   1bbef:	00          	.byte	0x00
  reference_ops::MaximumMinimumBroadcastSlow(
   1bbf0:	4621      	mov	r1, r4
   1bbf2:	a804      	add	r0, sp, #16
   1bbf4:	f00b fd56 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bbf8:	b104      	cbz	r4, 1bbfc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x4c>
   1bbfa:	6864      	ldr	r4, [r4, #4]
   1bbfc:	4629      	mov	r1, r5
   1bbfe:	a80a      	add	r0, sp, #40	; 0x28
   1bc00:	f00b fd50 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc04:	b105      	cbz	r5, 1bc08 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x58>
   1bc06:	686d      	ldr	r5, [r5, #4]
   1bc08:	af10      	add	r7, sp, #64	; 0x40
   1bc0a:	4631      	mov	r1, r6
   1bc0c:	4638      	mov	r0, r7
   1bc0e:	f00b fd49 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc12:	4b4b      	ldr	r3, [pc, #300]	; (1bd40 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x190>)
   1bc14:	4621      	mov	r1, r4
   1bc16:	9302      	str	r3, [sp, #8]
   1bc18:	6873      	ldr	r3, [r6, #4]
   1bc1a:	aa0a      	add	r2, sp, #40	; 0x28
   1bc1c:	e9cd 7300 	strd	r7, r3, [sp]
   1bc20:	a804      	add	r0, sp, #16
   1bc22:	462b      	mov	r3, r5
   1bc24:	f010 fc63 	bl	2c4ee <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
      GetTensorShape(op_context.output),
   1bc28:	4638      	mov	r0, r7
   1bc2a:	f00b fcf6 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input2),
   1bc2e:	a80a      	add	r0, sp, #40	; 0x28
   1bc30:	f00b fcf3 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input1),
   1bc34:	a804      	add	r0, sp, #16
   1bc36:	f00b fcf0 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1bc3a:	2000      	movs	r0, #0
}
   1bc3c:	b017      	add	sp, #92	; 0x5c
   1bc3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  reference_ops::MaximumMinimumBroadcastSlow(
   1bc42:	4621      	mov	r1, r4
   1bc44:	a804      	add	r0, sp, #16
   1bc46:	f00b fd2d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc4a:	b104      	cbz	r4, 1bc4e <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x9e>
   1bc4c:	6864      	ldr	r4, [r4, #4]
   1bc4e:	4629      	mov	r1, r5
   1bc50:	a80a      	add	r0, sp, #40	; 0x28
   1bc52:	f00b fd27 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc56:	b105      	cbz	r5, 1bc5a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xaa>
   1bc58:	686d      	ldr	r5, [r5, #4]
   1bc5a:	af10      	add	r7, sp, #64	; 0x40
   1bc5c:	4631      	mov	r1, r6
   1bc5e:	4638      	mov	r0, r7
   1bc60:	f00b fd20 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc64:	4b37      	ldr	r3, [pc, #220]	; (1bd44 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x194>)
   1bc66:	4621      	mov	r1, r4
   1bc68:	9302      	str	r3, [sp, #8]
   1bc6a:	6873      	ldr	r3, [r6, #4]
   1bc6c:	aa0a      	add	r2, sp, #40	; 0x28
   1bc6e:	e9cd 7300 	strd	r7, r3, [sp]
   1bc72:	a804      	add	r0, sp, #16
   1bc74:	462b      	mov	r3, r5
   1bc76:	f010 fcec 	bl	2c652 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1bc7a:	e7d5      	b.n	1bc28 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
   1bc7c:	4621      	mov	r1, r4
   1bc7e:	a804      	add	r0, sp, #16
   1bc80:	f00b fd10 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc84:	b104      	cbz	r4, 1bc88 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xd8>
   1bc86:	6864      	ldr	r4, [r4, #4]
   1bc88:	4629      	mov	r1, r5
   1bc8a:	a80a      	add	r0, sp, #40	; 0x28
   1bc8c:	f00b fd0a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc90:	b105      	cbz	r5, 1bc94 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xe4>
   1bc92:	686d      	ldr	r5, [r5, #4]
   1bc94:	af10      	add	r7, sp, #64	; 0x40
   1bc96:	4631      	mov	r1, r6
   1bc98:	4638      	mov	r0, r7
   1bc9a:	f00b fd03 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bc9e:	4b2a      	ldr	r3, [pc, #168]	; (1bd48 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x198>)
   1bca0:	4621      	mov	r1, r4
   1bca2:	9302      	str	r3, [sp, #8]
   1bca4:	6873      	ldr	r3, [r6, #4]
   1bca6:	aa0a      	add	r2, sp, #40	; 0x28
   1bca8:	e9cd 7300 	strd	r7, r3, [sp]
   1bcac:	a804      	add	r0, sp, #16
   1bcae:	462b      	mov	r3, r5
   1bcb0:	f010 fd7b 	bl	2c7aa <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1bcb4:	e7b8      	b.n	1bc28 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
   1bcb6:	4621      	mov	r1, r4
   1bcb8:	a804      	add	r0, sp, #16
   1bcba:	f00b fcf3 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bcbe:	b104      	cbz	r4, 1bcc2 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x112>
   1bcc0:	6864      	ldr	r4, [r4, #4]
   1bcc2:	4629      	mov	r1, r5
   1bcc4:	a80a      	add	r0, sp, #40	; 0x28
   1bcc6:	f00b fced 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bcca:	b105      	cbz	r5, 1bcce <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x11e>
   1bccc:	686d      	ldr	r5, [r5, #4]
   1bcce:	af10      	add	r7, sp, #64	; 0x40
   1bcd0:	4631      	mov	r1, r6
   1bcd2:	4638      	mov	r0, r7
   1bcd4:	f00b fce6 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bcd8:	4b1c      	ldr	r3, [pc, #112]	; (1bd4c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x19c>)
   1bcda:	4621      	mov	r1, r4
   1bcdc:	9302      	str	r3, [sp, #8]
   1bcde:	6873      	ldr	r3, [r6, #4]
   1bce0:	aa0a      	add	r2, sp, #40	; 0x28
   1bce2:	e9cd 7300 	strd	r7, r3, [sp]
   1bce6:	a804      	add	r0, sp, #16
   1bce8:	462b      	mov	r3, r5
   1bcea:	f010 fe0a 	bl	2c902 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1bcee:	e79b      	b.n	1bc28 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
   1bcf0:	4621      	mov	r1, r4
   1bcf2:	a804      	add	r0, sp, #16
   1bcf4:	f00b fcd6 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bcf8:	b104      	cbz	r4, 1bcfc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x14c>
   1bcfa:	6864      	ldr	r4, [r4, #4]
   1bcfc:	4629      	mov	r1, r5
   1bcfe:	a80a      	add	r0, sp, #40	; 0x28
   1bd00:	f00b fcd0 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bd04:	b105      	cbz	r5, 1bd08 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x158>
   1bd06:	686d      	ldr	r5, [r5, #4]
   1bd08:	af10      	add	r7, sp, #64	; 0x40
   1bd0a:	4631      	mov	r1, r6
   1bd0c:	4638      	mov	r0, r7
   1bd0e:	f00b fcc9 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bd12:	4b0f      	ldr	r3, [pc, #60]	; (1bd50 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a0>)
   1bd14:	4621      	mov	r1, r4
   1bd16:	9302      	str	r3, [sp, #8]
   1bd18:	6873      	ldr	r3, [r6, #4]
   1bd1a:	aa0a      	add	r2, sp, #40	; 0x28
   1bd1c:	e9cd 7300 	strd	r7, r3, [sp]
   1bd20:	a804      	add	r0, sp, #16
   1bd22:	462b      	mov	r3, r5
   1bd24:	f010 fea1 	bl	2ca6a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1bd28:	e77e      	b.n	1bc28 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
        TF_LITE_KERNEL_LOG(context,
   1bd2a:	697c      	ldr	r4, [r7, #20]
   1bd2c:	f7f0 ffca 	bl	ccc4 <TfLiteTypeGetName>
   1bd30:	f818 3009 	ldrb.w	r3, [r8, r9]
   1bd34:	4602      	mov	r2, r0
   1bd36:	4907      	ldr	r1, [pc, #28]	; (1bd54 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a4>)
   1bd38:	4638      	mov	r0, r7
   1bd3a:	47a0      	blx	r4
        return kTfLiteError;
   1bd3c:	2001      	movs	r0, #1
   1bd3e:	e77d      	b.n	1bc3c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MaximumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x8c>
   1bd40:	0002c2c7 	.word	0x0002c2c7
   1bd44:	0002c2e1 	.word	0x0002c2e1
   1bd48:	0002c2e9 	.word	0x0002c2e9
   1bd4c:	0002c2f1 	.word	0x0002c2f1
   1bd50:	0002c2f9 	.word	0x0002c2f9
   1bd54:	00035305 	.word	0x00035305

0001bd58 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
    input1 = GetInput(context, node, kInputTensor1);
   1bd58:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1bd5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  return &context->tensors[node->inputs->data[index]];
   1bd5e:	685c      	ldr	r4, [r3, #4]
   1bd60:	689d      	ldr	r5, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   1bd62:	684b      	ldr	r3, [r1, #4]
    input1 = GetInput(context, node, kInputTensor1);
   1bd64:	f8d0 8008 	ldr.w	r8, [r0, #8]
   1bd68:	685e      	ldr	r6, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1bd6a:	4607      	mov	r7, r0
   1bd6c:	ea4f 1986 	mov.w	r9, r6, lsl #6
    switch (op_context.output->type) {
   1bd70:	f818 0009 	ldrb.w	r0, [r8, r9]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1bd74:	b097      	sub	sp, #92	; 0x5c
   1bd76:	1e43      	subs	r3, r0, #1
  return &context->tensors[node->inputs->data[index]];
   1bd78:	eb08 1484 	add.w	r4, r8, r4, lsl #6
   1bd7c:	eb08 1585 	add.w	r5, r8, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1bd80:	eb08 1686 	add.w	r6, r8, r6, lsl #6
   1bd84:	2b08      	cmp	r3, #8
   1bd86:	f200 80a4 	bhi.w	1bed2 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x17a>
   1bd8a:	e8df f003 	tbb	[pc, r3]
   1bd8e:	6805      	.short	0x6805
   1bd90:	a2a2852e 	.word	0xa2a2852e
   1bd94:	a2a2      	.short	0xa2a2
   1bd96:	4b          	.byte	0x4b
   1bd97:	00          	.byte	0x00
  reference_ops::MaximumMinimumBroadcastSlow(
   1bd98:	4621      	mov	r1, r4
   1bd9a:	a804      	add	r0, sp, #16
   1bd9c:	f00b fc82 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bda0:	b104      	cbz	r4, 1bda4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x4c>
   1bda2:	6864      	ldr	r4, [r4, #4]
   1bda4:	4629      	mov	r1, r5
   1bda6:	a80a      	add	r0, sp, #40	; 0x28
   1bda8:	f00b fc7c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bdac:	b105      	cbz	r5, 1bdb0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x58>
   1bdae:	686d      	ldr	r5, [r5, #4]
   1bdb0:	af10      	add	r7, sp, #64	; 0x40
   1bdb2:	4631      	mov	r1, r6
   1bdb4:	4638      	mov	r0, r7
   1bdb6:	f00b fc75 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bdba:	4b4b      	ldr	r3, [pc, #300]	; (1bee8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x190>)
   1bdbc:	4621      	mov	r1, r4
   1bdbe:	9302      	str	r3, [sp, #8]
   1bdc0:	6873      	ldr	r3, [r6, #4]
   1bdc2:	aa0a      	add	r2, sp, #40	; 0x28
   1bdc4:	e9cd 7300 	strd	r7, r3, [sp]
   1bdc8:	a804      	add	r0, sp, #16
   1bdca:	462b      	mov	r3, r5
   1bdcc:	f010 fb8f 	bl	2c4ee <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
      GetTensorShape(op_context.output),
   1bdd0:	4638      	mov	r0, r7
   1bdd2:	f00b fc22 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input2),
   1bdd6:	a80a      	add	r0, sp, #40	; 0x28
   1bdd8:	f00b fc1f 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(op_context.input1),
   1bddc:	a804      	add	r0, sp, #16
   1bdde:	f00b fc1c 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1bde2:	2000      	movs	r0, #0
}
   1bde4:	b017      	add	sp, #92	; 0x5c
   1bde6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  reference_ops::MaximumMinimumBroadcastSlow(
   1bdea:	4621      	mov	r1, r4
   1bdec:	a804      	add	r0, sp, #16
   1bdee:	f00b fc59 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bdf2:	b104      	cbz	r4, 1bdf6 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x9e>
   1bdf4:	6864      	ldr	r4, [r4, #4]
   1bdf6:	4629      	mov	r1, r5
   1bdf8:	a80a      	add	r0, sp, #40	; 0x28
   1bdfa:	f00b fc53 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bdfe:	b105      	cbz	r5, 1be02 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xaa>
   1be00:	686d      	ldr	r5, [r5, #4]
   1be02:	af10      	add	r7, sp, #64	; 0x40
   1be04:	4631      	mov	r1, r6
   1be06:	4638      	mov	r0, r7
   1be08:	f00b fc4c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1be0c:	4b37      	ldr	r3, [pc, #220]	; (1beec <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x194>)
   1be0e:	4621      	mov	r1, r4
   1be10:	9302      	str	r3, [sp, #8]
   1be12:	6873      	ldr	r3, [r6, #4]
   1be14:	aa0a      	add	r2, sp, #40	; 0x28
   1be16:	e9cd 7300 	strd	r7, r3, [sp]
   1be1a:	a804      	add	r0, sp, #16
   1be1c:	462b      	mov	r3, r5
   1be1e:	f010 fc18 	bl	2c652 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1be22:	e7d5      	b.n	1bdd0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
   1be24:	4621      	mov	r1, r4
   1be26:	a804      	add	r0, sp, #16
   1be28:	f00b fc3c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1be2c:	b104      	cbz	r4, 1be30 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xd8>
   1be2e:	6864      	ldr	r4, [r4, #4]
   1be30:	4629      	mov	r1, r5
   1be32:	a80a      	add	r0, sp, #40	; 0x28
   1be34:	f00b fc36 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1be38:	b105      	cbz	r5, 1be3c <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xe4>
   1be3a:	686d      	ldr	r5, [r5, #4]
   1be3c:	af10      	add	r7, sp, #64	; 0x40
   1be3e:	4631      	mov	r1, r6
   1be40:	4638      	mov	r0, r7
   1be42:	f00b fc2f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1be46:	4b2a      	ldr	r3, [pc, #168]	; (1bef0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x198>)
   1be48:	4621      	mov	r1, r4
   1be4a:	9302      	str	r3, [sp, #8]
   1be4c:	6873      	ldr	r3, [r6, #4]
   1be4e:	aa0a      	add	r2, sp, #40	; 0x28
   1be50:	e9cd 7300 	strd	r7, r3, [sp]
   1be54:	a804      	add	r0, sp, #16
   1be56:	462b      	mov	r3, r5
   1be58:	f010 fca7 	bl	2c7aa <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1be5c:	e7b8      	b.n	1bdd0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
   1be5e:	4621      	mov	r1, r4
   1be60:	a804      	add	r0, sp, #16
   1be62:	f00b fc1f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1be66:	b104      	cbz	r4, 1be6a <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x112>
   1be68:	6864      	ldr	r4, [r4, #4]
   1be6a:	4629      	mov	r1, r5
   1be6c:	a80a      	add	r0, sp, #40	; 0x28
   1be6e:	f00b fc19 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1be72:	b105      	cbz	r5, 1be76 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x11e>
   1be74:	686d      	ldr	r5, [r5, #4]
   1be76:	af10      	add	r7, sp, #64	; 0x40
   1be78:	4631      	mov	r1, r6
   1be7a:	4638      	mov	r0, r7
   1be7c:	f00b fc12 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1be80:	4b1c      	ldr	r3, [pc, #112]	; (1bef4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x19c>)
   1be82:	4621      	mov	r1, r4
   1be84:	9302      	str	r3, [sp, #8]
   1be86:	6873      	ldr	r3, [r6, #4]
   1be88:	aa0a      	add	r2, sp, #40	; 0x28
   1be8a:	e9cd 7300 	strd	r7, r3, [sp]
   1be8e:	a804      	add	r0, sp, #16
   1be90:	462b      	mov	r3, r5
   1be92:	f010 fd36 	bl	2c902 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1be96:	e79b      	b.n	1bdd0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
   1be98:	4621      	mov	r1, r4
   1be9a:	a804      	add	r0, sp, #16
   1be9c:	f00b fc02 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1bea0:	b104      	cbz	r4, 1bea4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x14c>
   1bea2:	6864      	ldr	r4, [r4, #4]
   1bea4:	4629      	mov	r1, r5
   1bea6:	a80a      	add	r0, sp, #40	; 0x28
   1bea8:	f00b fbfc 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1beac:	b105      	cbz	r5, 1beb0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x158>
   1beae:	686d      	ldr	r5, [r5, #4]
   1beb0:	af10      	add	r7, sp, #64	; 0x40
   1beb2:	4631      	mov	r1, r6
   1beb4:	4638      	mov	r0, r7
   1beb6:	f00b fbf5 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1beba:	4b0f      	ldr	r3, [pc, #60]	; (1bef8 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a0>)
   1bebc:	4621      	mov	r1, r4
   1bebe:	9302      	str	r3, [sp, #8]
   1bec0:	6873      	ldr	r3, [r6, #4]
   1bec2:	aa0a      	add	r2, sp, #40	; 0x28
   1bec4:	e9cd 7300 	strd	r7, r3, [sp]
   1bec8:	a804      	add	r0, sp, #16
   1beca:	462b      	mov	r3, r5
   1becc:	f010 fdcd 	bl	2ca6a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>
   1bed0:	e77e      	b.n	1bdd0 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x78>
        TF_LITE_KERNEL_LOG(context,
   1bed2:	697c      	ldr	r4, [r7, #20]
   1bed4:	f7f0 fef6 	bl	ccc4 <TfLiteTypeGetName>
   1bed8:	f818 3009 	ldrb.w	r3, [r8, r9]
   1bedc:	4602      	mov	r2, r0
   1bede:	4907      	ldr	r1, [pc, #28]	; (1befc <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x1a4>)
   1bee0:	4638      	mov	r0, r7
   1bee2:	47a0      	blx	r4
        return kTfLiteError;
   1bee4:	2001      	movs	r0, #1
   1bee6:	e77d      	b.n	1bde4 <_ZN6tflite3ops5micro15maximum_minimum4EvalILNS2_12_GLOBAL__N_110KernelTypeE0ENS4_9MinimumOpEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x8c>
   1bee8:	0002c315 	.word	0x0002c315
   1beec:	0002c331 	.word	0x0002c331
   1bef0:	0002c339 	.word	0x0002c339
   1bef4:	0002c341 	.word	0x0002c341
   1bef8:	0002c349 	.word	0x0002c349
   1befc:	00035305 	.word	0x00035305

0001bf00 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE>:
  int32_t output_multiplier;
  int output_shift;
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             TfLiteMulParams* params, OpData* data) {
   1bf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bf04:	4699      	mov	r9, r3
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
   1bf06:	680b      	ldr	r3, [r1, #0]
                             TfLiteMulParams* params, OpData* data) {
   1bf08:	4694      	mov	ip, r2
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1bf0a:	681a      	ldr	r2, [r3, #0]
   1bf0c:	4606      	mov	r6, r0
  const TfLiteTensor* input2 = GetInput(context, node, kInput2Tensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);
   1bf0e:	2a02      	cmp	r2, #2
                             TfLiteMulParams* params, OpData* data) {
   1bf10:	b085      	sub	sp, #20
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 2);
   1bf12:	d010      	beq.n	1bf36 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x36>
   1bf14:	2302      	movs	r3, #2
   1bf16:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1bf1a:	4b3e      	ldr	r3, [pc, #248]	; (1c014 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x114>)
   1bf1c:	9301      	str	r3, [sp, #4]
   1bf1e:	4b3e      	ldr	r3, [pc, #248]	; (1c018 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x118>)
   1bf20:	9300      	str	r3, [sp, #0]
   1bf22:	2331      	movs	r3, #49	; 0x31
   1bf24:	6944      	ldr	r4, [r0, #20]
   1bf26:	4a3d      	ldr	r2, [pc, #244]	; (1c01c <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x11c>)
   1bf28:	493d      	ldr	r1, [pc, #244]	; (1c020 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x120>)
   1bf2a:	47a0      	blx	r4
   1bf2c:	2401      	movs	r4, #1
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
                       &data->output_shift);
  }

  return kTfLiteOk;
}
   1bf2e:	4620      	mov	r0, r4
   1bf30:	b005      	add	sp, #20
   1bf32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   1bf36:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1bf38:	6814      	ldr	r4, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1bf3a:	2c01      	cmp	r4, #1
   1bf3c:	d009      	beq.n	1bf52 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x52>
   1bf3e:	2501      	movs	r5, #1
   1bf40:	4b38      	ldr	r3, [pc, #224]	; (1c024 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x124>)
   1bf42:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1bf46:	9301      	str	r3, [sp, #4]
   1bf48:	4b37      	ldr	r3, [pc, #220]	; (1c028 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x128>)
   1bf4a:	9300      	str	r3, [sp, #0]
   1bf4c:	6944      	ldr	r4, [r0, #20]
   1bf4e:	2332      	movs	r3, #50	; 0x32
   1bf50:	e7e9      	b.n	1bf26 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x26>
  return &context->tensors[node->inputs->data[index]];
   1bf52:	6859      	ldr	r1, [r3, #4]
   1bf54:	689b      	ldr	r3, [r3, #8]
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
   1bf56:	6885      	ldr	r5, [r0, #8]
   1bf58:	ea4f 1b83 	mov.w	fp, r3, lsl #6
   1bf5c:	0188      	lsls	r0, r1, #6
  TF_LITE_ENSURE_TYPES_EQ(context, input1->type, input2->type);
   1bf5e:	5c28      	ldrb	r0, [r5, r0]
   1bf60:	eb05 1a83 	add.w	sl, r5, r3, lsl #6
   1bf64:	f815 300b 	ldrb.w	r3, [r5, fp]
   1bf68:	eb05 1881 	add.w	r8, r5, r1, lsl #6
   1bf6c:	4283      	cmp	r3, r0
   1bf6e:	d014      	beq.n	1bf9a <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x9a>
   1bf70:	f8d6 8014 	ldr.w	r8, [r6, #20]
   1bf74:	f7f0 fea6 	bl	ccc4 <TfLiteTypeGetName>
   1bf78:	4607      	mov	r7, r0
   1bf7a:	f815 000b 	ldrb.w	r0, [r5, fp]
   1bf7e:	f7f0 fea1 	bl	ccc4 <TfLiteTypeGetName>
   1bf82:	4b2a      	ldr	r3, [pc, #168]	; (1c02c <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x12c>)
   1bf84:	e9cd 7002 	strd	r7, r0, [sp, #8]
   1bf88:	9301      	str	r3, [sp, #4]
   1bf8a:	4b29      	ldr	r3, [pc, #164]	; (1c030 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x130>)
   1bf8c:	4630      	mov	r0, r6
   1bf8e:	9300      	str	r3, [sp, #0]
   1bf90:	4a22      	ldr	r2, [pc, #136]	; (1c01c <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x11c>)
   1bf92:	2334      	movs	r3, #52	; 0x34
   1bf94:	4927      	ldr	r1, [pc, #156]	; (1c034 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x134>)
   1bf96:	47c0      	blx	r8
   1bf98:	e7c9      	b.n	1bf2e <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
  return &context->tensors[node->outputs->data[index]];
   1bf9a:	6857      	ldr	r7, [r2, #4]
   1bf9c:	01bb      	lsls	r3, r7, #6
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   1bf9e:	5ceb      	ldrb	r3, [r5, r3]
   1bfa0:	eb05 1787 	add.w	r7, r5, r7, lsl #6
   1bfa4:	2b03      	cmp	r3, #3
   1bfa6:	d001      	beq.n	1bfac <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0xac>
   1bfa8:	2b09      	cmp	r3, #9
   1bfaa:	d130      	bne.n	1c00e <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x10e>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1bfac:	f109 0304 	add.w	r3, r9, #4
   1bfb0:	9300      	str	r3, [sp, #0]
   1bfb2:	463a      	mov	r2, r7
   1bfb4:	464b      	mov	r3, r9
   1bfb6:	4630      	mov	r0, r6
   1bfb8:	f89c 1000 	ldrb.w	r1, [ip]
   1bfbc:	f005 f884 	bl	210c8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
   1bfc0:	4604      	mov	r4, r0
   1bfc2:	2800      	cmp	r0, #0
   1bfc4:	d1b3      	bne.n	1bf2e <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
    double real_multiplier = static_cast<double>(input1->params.scale) *
   1bfc6:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1bfca:	f7f0 fa9d 	bl	c508 <__aeabi_f2d>
   1bfce:	4680      	mov	r8, r0
                             static_cast<double>(input2->params.scale) /
   1bfd0:	f8da 000c 	ldr.w	r0, [sl, #12]
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   1bfd4:	f109 060c 	add.w	r6, r9, #12
   1bfd8:	f109 0508 	add.w	r5, r9, #8
    double real_multiplier = static_cast<double>(input1->params.scale) *
   1bfdc:	4689      	mov	r9, r1
                             static_cast<double>(input2->params.scale) /
   1bfde:	f7f0 fa93 	bl	c508 <__aeabi_f2d>
   1bfe2:	4602      	mov	r2, r0
   1bfe4:	460b      	mov	r3, r1
    double real_multiplier = static_cast<double>(input1->params.scale) *
   1bfe6:	4640      	mov	r0, r8
   1bfe8:	4649      	mov	r1, r9
   1bfea:	f7f4 fa5f 	bl	104ac <__aeabi_dmul>
   1bfee:	4680      	mov	r8, r0
                             static_cast<double>(output->params.scale);
   1bff0:	68f8      	ldr	r0, [r7, #12]
    double real_multiplier = static_cast<double>(input1->params.scale) *
   1bff2:	4689      	mov	r9, r1
                             static_cast<double>(output->params.scale);
   1bff4:	f7f0 fa88 	bl	c508 <__aeabi_f2d>
   1bff8:	4602      	mov	r2, r0
   1bffa:	460b      	mov	r3, r1
    double real_multiplier = static_cast<double>(input1->params.scale) *
   1bffc:	4640      	mov	r0, r8
   1bffe:	4649      	mov	r1, r9
   1c000:	f7f4 fb7e 	bl	10700 <__aeabi_ddiv>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier,
   1c004:	4633      	mov	r3, r6
   1c006:	462a      	mov	r2, r5
   1c008:	f004 ffb8 	bl	20f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
   1c00c:	e78f      	b.n	1bf2e <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
  return kTfLiteOk;
   1c00e:	2400      	movs	r4, #0
   1c010:	e78d      	b.n	1bf2e <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE+0x2e>
   1c012:	bf00      	nop
   1c014:	0003545c 	.word	0x0003545c
   1c018:	00034b06 	.word	0x00034b06
   1c01c:	00035337 	.word	0x00035337
   1c020:	00034aec 	.word	0x00034aec
   1c024:	00035884 	.word	0x00035884
   1c028:	00034b16 	.word	0x00034b16
   1c02c:	0003535c 	.word	0x0003535c
   1c030:	00035369 	.word	0x00035369
   1c034:	00034b27 	.word	0x00034b27

0001c038 <_ZN6tflite3ops5micro12Register_MULEv>:

  return kTfLiteOk;
}
}  // namespace mul

TfLiteRegistration Register_MUL() {
   1c038:	b510      	push	{r4, lr}
   1c03a:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/mul::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1c03c:	2220      	movs	r2, #32
   1c03e:	2100      	movs	r1, #0
   1c040:	f014 ff39 	bl	30eb6 <memset>
   1c044:	4b01      	ldr	r3, [pc, #4]	; (1c04c <_ZN6tflite3ops5micro12Register_MULEv+0x14>)
}
   1c046:	4620      	mov	r0, r4
          /*version=*/0};
   1c048:	60e3      	str	r3, [r4, #12]
}
   1c04a:	bd10      	pop	{r4, pc}
   1c04c:	0001c191 	.word	0x0001c191

0001c050 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>:
               TfLiteTensor* output) {
   1c050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c054:	ed2d 8b02 	vpush	{d8}
  CalculateActivationRange(params->activation, &output_activation_min,
   1c058:	7813      	ldrb	r3, [r2, #0]
               TfLiteTensor* output) {
   1c05a:	b0b0      	sub	sp, #192	; 0xc0
  if (activation == kTfLiteActRelu) {
   1c05c:	2b01      	cmp	r3, #1
   1c05e:	9e3a      	ldr	r6, [sp, #232]	; 0xe8
   1c060:	e9dd 5438 	ldrd	r5, r4, [sp, #224]	; 0xe0
   1c064:	d053      	beq.n	1c10e <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xbe>
  } else if (activation == kTfLiteActRelu6) {
   1c066:	2b03      	cmp	r3, #3
   1c068:	d056      	beq.n	1c118 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xc8>
    *activation_max = std::numeric_limits<T>::max();
   1c06a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 1c184 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x134>
   1c06e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1c072:	2b02      	cmp	r3, #2
   1c074:	eddf 6a44 	vldr	s13, [pc, #272]	; 1c188 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x138>
   1c078:	fe47 7a87 	vseleq.f32	s15, s15, s14
   1c07c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   1c080:	fe07 7a26 	vseleq.f32	s14, s14, s13
      GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1c084:	af10      	add	r7, sp, #64	; 0x40
   1c086:	4629      	mov	r1, r5
   1c088:	a80a      	add	r0, sp, #40	; 0x28
  params->float_activation_min = min;
   1c08a:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
  params->float_activation_max = max;
   1c08e:	edcd 7a24 	vstr	s15, [sp, #144]	; 0x90
   1c092:	f00b fb07 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1c096:	4621      	mov	r1, r4
   1c098:	4638      	mov	r0, r7
   1c09a:	f00b fb03 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   1c09e:	4639      	mov	r1, r7
   1c0a0:	aa16      	add	r2, sp, #88	; 0x58
   1c0a2:	a80a      	add	r0, sp, #40	; 0x28
   1c0a4:	f00b fc75 	bl	27992 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   1c0a8:	4680      	mov	r8, r0
      GetTensorShape(input1), GetTensorShape(input2), &op_params);
   1c0aa:	4638      	mov	r0, r7
   1c0ac:	f00b fab5 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1c0b0:	a80a      	add	r0, sp, #40	; 0x28
   1c0b2:	f00b fab2 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
    TF_LITE_MUL(BroadcastMul4DSlow);
   1c0b6:	4629      	mov	r1, r5
   1c0b8:	a804      	add	r0, sp, #16
  if (need_broadcast) {
   1c0ba:	f1b8 0f00 	cmp.w	r8, #0
   1c0be:	d02e      	beq.n	1c11e <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xce>
    TF_LITE_MUL(BroadcastMul4DSlow);
   1c0c0:	f00b faf0 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1c0c4:	b105      	cbz	r5, 1c0c8 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x78>
   1c0c6:	686d      	ldr	r5, [r5, #4]
   1c0c8:	4621      	mov	r1, r4
   1c0ca:	a80a      	add	r0, sp, #40	; 0x28
   1c0cc:	f00b faea 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1c0d0:	b104      	cbz	r4, 1c0d4 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x84>
   1c0d2:	6864      	ldr	r4, [r4, #4]
   1c0d4:	4631      	mov	r1, r6
   1c0d6:	4638      	mov	r0, r7
   1c0d8:	f00b fae4 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c0dc:	b106      	cbz	r6, 1c0e0 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x90>
   1c0de:	6876      	ldr	r6, [r6, #4]
   1c0e0:	462a      	mov	r2, r5
   1c0e2:	e9cd 7601 	strd	r7, r6, [sp, #4]
   1c0e6:	9400      	str	r4, [sp, #0]
   1c0e8:	ab0a      	add	r3, sp, #40	; 0x28
   1c0ea:	a904      	add	r1, sp, #16
   1c0ec:	a816      	add	r0, sp, #88	; 0x58
   1c0ee:	f010 fd38 	bl	2cb62 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
    TF_LITE_MUL(Mul);
   1c0f2:	4638      	mov	r0, r7
   1c0f4:	f00b fa91 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1c0f8:	a80a      	add	r0, sp, #40	; 0x28
   1c0fa:	f00b fa8e 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1c0fe:	a804      	add	r0, sp, #16
   1c100:	f00b fa8b 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   1c104:	b030      	add	sp, #192	; 0xc0
   1c106:	ecbd 8b02 	vpop	{d8}
   1c10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *activation_max = std::numeric_limits<T>::max();
   1c10e:	eddf 7a1d 	vldr	s15, [pc, #116]	; 1c184 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x134>
    *activation_min = 0;
   1c112:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 1c18c <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x13c>
   1c116:	e7b5      	b.n	1c084 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x34>
    *activation_max = 6;
   1c118:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   1c11c:	e7f9      	b.n	1c112 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xc2>
    TF_LITE_MUL(Mul);
   1c11e:	f00b fac1 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c122:	b105      	cbz	r5, 1c126 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xd6>
   1c124:	686d      	ldr	r5, [r5, #4]
   1c126:	4621      	mov	r1, r4
   1c128:	a80a      	add	r0, sp, #40	; 0x28
   1c12a:	f00b fabb 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1c12e:	b104      	cbz	r4, 1c132 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xe2>
   1c130:	6864      	ldr	r4, [r4, #4]
   1c132:	4631      	mov	r1, r6
   1c134:	4638      	mov	r0, r7
   1c136:	f00b fab5 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c13a:	b106      	cbz	r6, 1c13e <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xee>
   1c13c:	6876      	ldr	r6, [r6, #4]
  T output_activation_min;
  T output_activation_max;
  GetActivationParams(params, &output_activation_min, &output_activation_max);

  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   1c13e:	463a      	mov	r2, r7
   1c140:	a90a      	add	r1, sp, #40	; 0x28
   1c142:	a804      	add	r0, sp, #16
   1c144:	f00c faf1 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
  *max = params.quantized_activation_max;
}

template <typename P>
inline void GetActivationParams(const P& params, float* min, float* max) {
  *min = params.float_activation_min;
   1c148:	eddd 8a23 	vldr	s17, [sp, #140]	; 0x8c
  *max = params.float_activation_max;
   1c14c:	ed9d 8a24 	vldr	s16, [sp, #144]	; 0x90
  for (int i = 0; i < flat_size; ++i) {
   1c150:	2300      	movs	r3, #0
   1c152:	4298      	cmp	r0, r3
   1c154:	ddcd      	ble.n	1c0f2 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0xa2>
    output_data[i] = ActivationFunctionWithMinMax(
        input1_data[i] * input2_data[i], output_activation_min,
   1c156:	ecf5 7a01 	vldmia	r5!, {s15}
   1c15a:	ecb4 7a01 	vldmia	r4!, {s14}
    output_data[i] = ActivationFunctionWithMinMax(
   1c15e:	ee67 7a87 	vmul.f32	s15, s15, s14
   1c162:	eef4 8a67 	vcmp.f32	s17, s15
   1c166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c16a:	fe78 7aa7 	vselgt.f32	s15, s17, s15
	return __b;
   1c16e:	eeb4 8a67 	vcmp.f32	s16, s15
   1c172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1c176:	bf48      	it	mi
   1c178:	eef0 7a48 	vmovmi.f32	s15, s16
  for (int i = 0; i < flat_size; ++i) {
   1c17c:	3301      	adds	r3, #1
    output_data[i] = ActivationFunctionWithMinMax(
   1c17e:	ece6 7a01 	vstmia	r6!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   1c182:	e7e6      	b.n	1c152 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x102>
   1c184:	7f7fffff 	.word	0x7f7fffff
   1c188:	ff7fffff 	.word	0xff7fffff
   1c18c:	00000000 	.word	0x00000000

0001c190 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
   1c194:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c196:	b08b      	sub	sp, #44	; 0x2c
  return &context->tensors[node->inputs->data[index]];
   1c198:	e9d3 8901 	ldrd	r8, r9, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   1c19c:	684b      	ldr	r3, [r1, #4]
  auto* params = reinterpret_cast<TfLiteMulParams*>(node->builtin_data);
   1c19e:	694a      	ldr	r2, [r1, #20]
   1c1a0:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, node, params, &data));
   1c1a4:	ab06      	add	r3, sp, #24
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c1a6:	4604      	mov	r4, r0
   1c1a8:	460d      	mov	r5, r1
  const TfLiteTensor* input1 = GetInput(context, node, kInput1Tensor);
   1c1aa:	6887      	ldr	r7, [r0, #8]
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, node, params, &data));
   1c1ac:	9205      	str	r2, [sp, #20]
   1c1ae:	f7ff fea7 	bl	1bf00 <_ZN6tflite3ops5micro3mul15CalculateOpDataEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataE>
   1c1b2:	4606      	mov	r6, r0
   1c1b4:	bb08      	cbnz	r0, 1c1fa <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
  return &context->tensors[node->inputs->data[index]];
   1c1b6:	ea4f 1b88 	mov.w	fp, r8, lsl #6
  switch (input1->type) {
   1c1ba:	f817 000b 	ldrb.w	r0, [r7, fp]
   1c1be:	9a05      	ldr	r2, [sp, #20]
   1c1c0:	2803      	cmp	r0, #3
   1c1c2:	eb07 1388 	add.w	r3, r7, r8, lsl #6
   1c1c6:	eb07 1189 	add.w	r1, r7, r9, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1c1ca:	eb07 1a8a 	add.w	sl, r7, sl, lsl #6
   1c1ce:	d00c      	beq.n	1c1ea <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
   1c1d0:	2809      	cmp	r0, #9
   1c1d2:	d00a      	beq.n	1c1ea <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
   1c1d4:	2801      	cmp	r0, #1
   1c1d6:	d114      	bne.n	1c202 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x72>
      EvalFloat(context, node, params, &data, input1, input2, output);
   1c1d8:	e9cd 1a01 	strd	r1, sl, [sp, #4]
   1c1dc:	9300      	str	r3, [sp, #0]
   1c1de:	4629      	mov	r1, r5
   1c1e0:	4620      	mov	r0, r4
   1c1e2:	ab06      	add	r3, sp, #24
   1c1e4:	f7ff ff34 	bl	1c050 <_ZN6tflite3ops5micro3mul9EvalFloatEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>
      break;
   1c1e8:	e007      	b.n	1c1fa <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
      EvalQuantized(context, node, params, &data, input1, input2, output);
   1c1ea:	e9cd 1a01 	strd	r1, sl, [sp, #4]
   1c1ee:	9300      	str	r3, [sp, #0]
   1c1f0:	4629      	mov	r1, r5
   1c1f2:	4620      	mov	r0, r4
   1c1f4:	ab06      	add	r3, sp, #24
   1c1f6:	f010 ff0a 	bl	2d00e <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>
}
   1c1fa:	4630      	mov	r0, r6
   1c1fc:	b00b      	add	sp, #44	; 0x2c
   1c1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1c202:	6965      	ldr	r5, [r4, #20]
   1c204:	f7f0 fd5e 	bl	ccc4 <TfLiteTypeGetName>
   1c208:	f817 300b 	ldrb.w	r3, [r7, fp]
   1c20c:	4602      	mov	r2, r0
   1c20e:	4902      	ldr	r1, [pc, #8]	; (1c218 <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x88>)
   1c210:	4620      	mov	r0, r4
   1c212:	47a8      	blx	r5
      return kTfLiteError;
   1c214:	2601      	movs	r6, #1
   1c216:	e7f0      	b.n	1c1fa <_ZN6tflite3ops5micro3mul4EvalEP13TfLiteContextP10TfLiteNode+0x6a>
   1c218:	00034a40 	.word	0x00034a40

0001c21c <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1c21c:	680b      	ldr	r3, [r1, #0]
namespace neg {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c222:	685e      	ldr	r6, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1c224:	6884      	ldr	r4, [r0, #8]
   1c226:	01b7      	lsls	r7, r6, #6
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c228:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  switch (input->type) {
   1c22a:	5de0      	ldrb	r0, [r4, r7]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c22c:	b08c      	sub	sp, #48	; 0x30
  switch (input->type) {
   1c22e:	2801      	cmp	r0, #1
   1c230:	eb04 1686 	add.w	r6, r4, r6, lsl #6
   1c234:	d147      	bne.n	1c2c6 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xaa>
  return &context->tensors[node->outputs->data[index]];
   1c236:	684b      	ldr	r3, [r1, #4]
    // TODO(wangtz): handle for kTfLiteInt8
    case kTfLiteFloat32:
      reference_ops::Negate(GetTensorShape(input), GetTensorData<float>(input),
   1c238:	4668      	mov	r0, sp
   1c23a:	685b      	ldr	r3, [r3, #4]
   1c23c:	4631      	mov	r1, r6
   1c23e:	eb04 1483 	add.w	r4, r4, r3, lsl #6
   1c242:	f00b fa2f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                            GetTensorShape(output),
   1c246:	4621      	mov	r1, r4
   1c248:	a806      	add	r0, sp, #24
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c24a:	6876      	ldr	r6, [r6, #4]
   1c24c:	f00b fa2a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c250:	b104      	cbz	r4, 1c254 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x38>
   1c252:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   1c254:	9f00      	ldr	r7, [sp, #0]
   1c256:	9b06      	ldr	r3, [sp, #24]
   1c258:	429f      	cmp	r7, r3
   1c25a:	d001      	beq.n	1c260 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x44>
   1c25c:	f014 fde1 	bl	30e22 <abort>
  for (int i = 0; i < dims_count; ++i) {
   1c260:	2500      	movs	r5, #0
   1c262:	42af      	cmp	r7, r5
   1c264:	dd0c      	ble.n	1c280 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x64>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   1c266:	4629      	mov	r1, r5
   1c268:	4668      	mov	r0, sp
   1c26a:	f00b f9e1 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c26e:	4629      	mov	r1, r5
   1c270:	4680      	mov	r8, r0
   1c272:	a806      	add	r0, sp, #24
   1c274:	f00b f9dc 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   1c278:	4580      	cmp	r8, r0
   1c27a:	d1ef      	bne.n	1c25c <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x40>
  for (int i = 0; i < dims_count; ++i) {
   1c27c:	3501      	adds	r5, #1
   1c27e:	e7f0      	b.n	1c262 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x46>
    for (int i = 0; i < size_; i++) {
   1c280:	2300      	movs	r3, #0
    int buffer_size = 1;
   1c282:	2101      	movs	r1, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   1c284:	2f05      	cmp	r7, #5
   1c286:	bfcc      	ite	gt
   1c288:	9a01      	ldrgt	r2, [sp, #4]
   1c28a:	aa01      	addle	r2, sp, #4
    for (int i = 0; i < size_; i++) {
   1c28c:	429f      	cmp	r7, r3
   1c28e:	dc0b      	bgt.n	1c2a8 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x8c>
   1c290:	4633      	mov	r3, r6
template <typename T>
inline void Negate(const RuntimeShape& input_shape, const T* input_data,
                   const RuntimeShape& output_shape, T* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; ++i) {
   1c292:	2200      	movs	r2, #0
   1c294:	428a      	cmp	r2, r1
   1c296:	da0c      	bge.n	1c2b2 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x96>
    output_data[i] = -input_data[i];
   1c298:	ecf3 7a01 	vldmia	r3!, {s15}
   1c29c:	eef1 7a67 	vneg.f32	s15, s15
  for (int i = 0; i < flat_size; ++i) {
   1c2a0:	3201      	adds	r2, #1
    output_data[i] = -input_data[i];
   1c2a2:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   1c2a6:	e7f5      	b.n	1c294 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x78>
      buffer_size *= dims_data[i];
   1c2a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   1c2ac:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   1c2ae:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
   1c2b0:	e7ec      	b.n	1c28c <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0x70>
   1c2b2:	a806      	add	r0, sp, #24
   1c2b4:	f00b f9b1 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      reference_ops::Negate(GetTensorShape(input), GetTensorData<float>(input),
   1c2b8:	4668      	mov	r0, sp
   1c2ba:	f00b f9ae 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
   1c2be:	2000      	movs	r0, #0
}
   1c2c0:	b00c      	add	sp, #48	; 0x30
   1c2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1c2c6:	696e      	ldr	r6, [r5, #20]
   1c2c8:	f7f0 fcfc 	bl	ccc4 <TfLiteTypeGetName>
   1c2cc:	5de3      	ldrb	r3, [r4, r7]
   1c2ce:	4602      	mov	r2, r0
   1c2d0:	4902      	ldr	r1, [pc, #8]	; (1c2dc <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
   1c2d2:	4628      	mov	r0, r5
   1c2d4:	47b0      	blx	r6
      return kTfLiteError;
   1c2d6:	2001      	movs	r0, #1
   1c2d8:	e7f2      	b.n	1c2c0 <_ZN6tflite3ops5micro3neg4EvalEP13TfLiteContextP10TfLiteNode+0xa4>
   1c2da:	bf00      	nop
   1c2dc:	00034a40 	.word	0x00034a40

0001c2e0 <_ZN6tflite3ops5micro12Register_NEGEv>:

}  // namespace neg

TfLiteRegistration Register_NEG() {
   1c2e0:	b510      	push	{r4, lr}
   1c2e2:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/neg::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1c2e4:	2220      	movs	r2, #32
   1c2e6:	2100      	movs	r1, #0
   1c2e8:	f014 fde5 	bl	30eb6 <memset>
   1c2ec:	4b01      	ldr	r3, [pc, #4]	; (1c2f4 <_ZN6tflite3ops5micro12Register_NEGEv+0x14>)
}
   1c2ee:	4620      	mov	r0, r4
          /*version=*/0};
   1c2f0:	60e3      	str	r3, [r4, #12]
}
   1c2f2:	bd10      	pop	{r4, pc}
   1c2f4:	0001c21d 	.word	0x0001c21d

0001c2f8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
  }

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2fc:	b085      	sub	sp, #20
  const TfLitePackParams* data =
      reinterpret_cast<TfLitePackParams*>(node->builtin_data);

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   1c2fe:	6883      	ldr	r3, [r0, #8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c300:	9000      	str	r0, [sp, #0]
   1c302:	6848      	ldr	r0, [r1, #4]
  const TfLitePackParams* data =
   1c304:	694a      	ldr	r2, [r1, #20]
   1c306:	6847      	ldr	r7, [r0, #4]
   1c308:	01b8      	lsls	r0, r7, #6

  switch (output->type) {
   1c30a:	5c18      	ldrb	r0, [r3, r0]
   1c30c:	eb03 1787 	add.w	r7, r3, r7, lsl #6
   1c310:	1e45      	subs	r5, r0, #1
   1c312:	2d08      	cmp	r5, #8
   1c314:	f200 8216 	bhi.w	1c744 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44c>
   1c318:	e8df f015 	tbh	[pc, r5, lsl #1]
   1c31c:	01420009 	.word	0x01420009
   1c320:	01a90074 	.word	0x01a90074
   1c324:	02140214 	.word	0x02140214
   1c328:	02140214 	.word	0x02140214
   1c32c:	00da      	.short	0x00da
  const TfLiteTensor* input0 = GetInput(context, node, 0);
   1c32e:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   1c330:	68bd      	ldr	r5, [r7, #8]
  return &context->tensors[node->inputs->data[index]];
   1c332:	6841      	ldr	r1, [r0, #4]
   1c334:	f105 0c04 	add.w	ip, r5, #4
  const TfLiteIntArray* input_dims = input0->dims;
   1c338:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  const int dimensions = output->dims->size;
   1c33c:	f8d5 e000 	ldr.w	lr, [r5]
  const TfLiteIntArray* input_dims = input0->dims;
   1c340:	688c      	ldr	r4, [r1, #8]
   1c342:	4666      	mov	r6, ip
    case kTfLiteFloat32: {
      return PackImpl<float>(context, node, output, data->values_count,
                             data->axis);
   1c344:	e9d2 9200 	ldrd	r9, r2, [r2]
  for (int i = 0; i < axis; ++i) {
   1c348:	2100      	movs	r1, #0
  int outer_size = 1;
   1c34a:	2501      	movs	r5, #1
  if (axis < 0) {
   1c34c:	2a00      	cmp	r2, #0
    axis += dimensions;
   1c34e:	bfb8      	it	lt
   1c350:	4472      	addlt	r2, lr
  for (int i = 0; i < axis; ++i) {
   1c352:	428a      	cmp	r2, r1
   1c354:	dd05      	ble.n	1c362 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a>
    outer_size *= output_dims->data[i];
   1c356:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
   1c35a:	3101      	adds	r1, #1
    outer_size *= output_dims->data[i];
   1c35c:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
   1c360:	e7f7      	b.n	1c352 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5a>
  for (int i = axis + 1; i < dimensions; ++i) {
   1c362:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
   1c364:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   1c366:	458e      	cmp	lr, r1
   1c368:	dc0c      	bgt.n	1c384 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8c>
  for (int i = 0; i < input_dims->size; ++i) {
   1c36a:	4621      	mov	r1, r4
   1c36c:	2600      	movs	r6, #0
  int input_size = 1;
   1c36e:	2401      	movs	r4, #1
  for (int i = 0; i < input_dims->size; ++i) {
   1c370:	f851 eb04 	ldr.w	lr, [r1], #4
   1c374:	45b6      	cmp	lr, r6
   1c376:	dd0a      	ble.n	1c38e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x96>
    input_size *= input_dims->data[i];
   1c378:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < input_dims->size; ++i) {
   1c37c:	3601      	adds	r6, #1
    input_size *= input_dims->data[i];
   1c37e:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < input_dims->size; ++i) {
   1c382:	e7f7      	b.n	1c374 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c>
    copy_size *= output_dims->data[i];
   1c384:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   1c388:	3101      	adds	r1, #1
    copy_size *= output_dims->data[i];
   1c38a:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
   1c38c:	e7eb      	b.n	1c366 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6e>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   1c38e:	fb02 f105 	mul.w	r1, r2, r5
   1c392:	428c      	cmp	r4, r1
   1c394:	d001      	beq.n	1c39a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa2>
   1c396:	f014 fd44 	bl	30e22 <abort>
   1c39a:	2400      	movs	r4, #0
   1c39c:	6879      	ldr	r1, [r7, #4]
  for (int i = 0; i < values_count; ++i) {
   1c39e:	4627      	mov	r7, r4
   1c3a0:	9101      	str	r1, [sp, #4]
   1c3a2:	1d01      	adds	r1, r0, #4
   1c3a4:	9100      	str	r1, [sp, #0]
   1c3a6:	fb02 f109 	mul.w	r1, r2, r9
   1c3aa:	9102      	str	r1, [sp, #8]
   1c3ac:	45b9      	cmp	r9, r7
   1c3ae:	dc03      	bgt.n	1c3b8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
      return PackImpl<float>(context, node, output, data->values_count,
   1c3b0:	2000      	movs	r0, #0
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
   1c3b2:	b005      	add	sp, #20
   1c3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int i = 0; i < values_count; ++i) {
   1c3b8:	2600      	movs	r6, #0
   1c3ba:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
   1c3bc:	46b6      	mov	lr, r6
   1c3be:	9800      	ldr	r0, [sp, #0]
   1c3c0:	f850 1b04 	ldr.w	r1, [r0], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c3c4:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
   1c3c8:	bf18      	it	ne
   1c3ca:	6849      	ldrne	r1, [r1, #4]
   1c3cc:	9000      	str	r0, [sp, #0]
   1c3ce:	4575      	cmp	r5, lr
   1c3d0:	dd15      	ble.n	1c3fe <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x106>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1c3d2:	f04f 0800 	mov.w	r8, #0
   1c3d6:	9801      	ldr	r0, [sp, #4]
   1c3d8:	eb01 0b86 	add.w	fp, r1, r6, lsl #2
   1c3dc:	eb00 0a8c 	add.w	sl, r0, ip, lsl #2
   1c3e0:	4542      	cmp	r2, r8
   1c3e2:	dd06      	ble.n	1c3f2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfa>
   1c3e4:	ecfb 7a01 	vldmia	fp!, {s15}
   1c3e8:	f108 0801 	add.w	r8, r8, #1
   1c3ec:	ecea 7a01 	vstmia	sl!, {s15}
   1c3f0:	e7f6      	b.n	1c3e0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xe8>
    for (int k = 0; k < outer_size; ++k) {
   1c3f2:	9802      	ldr	r0, [sp, #8]
   1c3f4:	f10e 0e01 	add.w	lr, lr, #1
   1c3f8:	4416      	add	r6, r2
   1c3fa:	4484      	add	ip, r0
   1c3fc:	e7e7      	b.n	1c3ce <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd6>
  for (int i = 0; i < values_count; ++i) {
   1c3fe:	3701      	adds	r7, #1
   1c400:	4414      	add	r4, r2
   1c402:	e7d3      	b.n	1c3ac <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb4>
   1c404:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   1c406:	68be      	ldr	r6, [r7, #8]
   1c408:	6840      	ldr	r0, [r0, #4]
   1c40a:	f106 0c04 	add.w	ip, r6, #4
  const TfLiteIntArray* input_dims = input0->dims;
   1c40e:	eb03 1380 	add.w	r3, r3, r0, lsl #6
  const int dimensions = output->dims->size;
   1c412:	f8d6 e000 	ldr.w	lr, [r6]
  const TfLiteIntArray* input_dims = input0->dims;
   1c416:	689d      	ldr	r5, [r3, #8]
   1c418:	4660      	mov	r0, ip
                               data->axis);
   1c41a:	e9d2 b200 	ldrd	fp, r2, [r2]
  for (int i = 0; i < axis; ++i) {
   1c41e:	2300      	movs	r3, #0
  int outer_size = 1;
   1c420:	2601      	movs	r6, #1
  if (axis < 0) {
   1c422:	2a00      	cmp	r2, #0
    axis += dimensions;
   1c424:	bfb8      	it	lt
   1c426:	4472      	addlt	r2, lr
  for (int i = 0; i < axis; ++i) {
   1c428:	429a      	cmp	r2, r3
   1c42a:	dd05      	ble.n	1c438 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x140>
    outer_size *= output_dims->data[i];
   1c42c:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
   1c430:	3301      	adds	r3, #1
    outer_size *= output_dims->data[i];
   1c432:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   1c436:	e7f7      	b.n	1c428 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
  int copy_size = 1;
   1c438:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   1c43a:	3201      	adds	r2, #1
   1c43c:	4596      	cmp	lr, r2
   1c43e:	dc0c      	bgt.n	1c45a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x162>
  for (int i = 0; i < input_dims->size; ++i) {
   1c440:	462a      	mov	r2, r5
  int input_size = 1;
   1c442:	2001      	movs	r0, #1
  for (int i = 0; i < input_dims->size; ++i) {
   1c444:	2500      	movs	r5, #0
   1c446:	f852 eb04 	ldr.w	lr, [r2], #4
   1c44a:	45ae      	cmp	lr, r5
   1c44c:	dd0a      	ble.n	1c464 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16c>
    input_size *= input_dims->data[i];
   1c44e:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < input_dims->size; ++i) {
   1c452:	3501      	adds	r5, #1
    input_size *= input_dims->data[i];
   1c454:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < input_dims->size; ++i) {
   1c458:	e7f7      	b.n	1c44a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x152>
    copy_size *= output_dims->data[i];
   1c45a:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   1c45e:	3201      	adds	r2, #1
    copy_size *= output_dims->data[i];
   1c460:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
   1c462:	e7eb      	b.n	1c43c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x144>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   1c464:	fb03 f206 	mul.w	r2, r3, r6
   1c468:	4290      	cmp	r0, r2
   1c46a:	d194      	bne.n	1c396 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c46c:	2000      	movs	r0, #0
  for (int i = 0; i < values_count; ++i) {
   1c46e:	4605      	mov	r5, r0
   1c470:	687a      	ldr	r2, [r7, #4]
   1c472:	9201      	str	r2, [sp, #4]
   1c474:	fb03 f20b 	mul.w	r2, r3, fp
   1c478:	9202      	str	r2, [sp, #8]
   1c47a:	45ab      	cmp	fp, r5
   1c47c:	dd98      	ble.n	1c3b0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
   1c47e:	680a      	ldr	r2, [r1, #0]
   1c480:	4684      	mov	ip, r0
   1c482:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   1c486:	6857      	ldr	r7, [r2, #4]
   1c488:	9a00      	ldr	r2, [sp, #0]
   1c48a:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c48c:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
   1c490:	f04f 0700 	mov.w	r7, #0
    for (int k = 0; k < outer_size; ++k) {
   1c494:	46be      	mov	lr, r7
   1c496:	bf18      	it	ne
   1c498:	6852      	ldrne	r2, [r2, #4]
   1c49a:	4576      	cmp	r6, lr
   1c49c:	dd15      	ble.n	1c4ca <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1c49e:	f04f 0800 	mov.w	r8, #0
   1c4a2:	9c01      	ldr	r4, [sp, #4]
   1c4a4:	eb02 0a07 	add.w	sl, r2, r7
   1c4a8:	eb04 090c 	add.w	r9, r4, ip
   1c4ac:	4543      	cmp	r3, r8
   1c4ae:	dd06      	ble.n	1c4be <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c6>
   1c4b0:	f81a 4b01 	ldrb.w	r4, [sl], #1
   1c4b4:	f108 0801 	add.w	r8, r8, #1
   1c4b8:	f809 4b01 	strb.w	r4, [r9], #1
   1c4bc:	e7f6      	b.n	1c4ac <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1b4>
    for (int k = 0; k < outer_size; ++k) {
   1c4be:	9c02      	ldr	r4, [sp, #8]
   1c4c0:	f10e 0e01 	add.w	lr, lr, #1
   1c4c4:	441f      	add	r7, r3
   1c4c6:	44a4      	add	ip, r4
   1c4c8:	e7e7      	b.n	1c49a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a2>
  for (int i = 0; i < values_count; ++i) {
   1c4ca:	3501      	adds	r5, #1
   1c4cc:	4418      	add	r0, r3
   1c4ce:	e7d4      	b.n	1c47a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x182>
   1c4d0:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   1c4d2:	68be      	ldr	r6, [r7, #8]
   1c4d4:	6840      	ldr	r0, [r0, #4]
   1c4d6:	f106 0c04 	add.w	ip, r6, #4
  const TfLiteIntArray* input_dims = input0->dims;
   1c4da:	eb03 1380 	add.w	r3, r3, r0, lsl #6
  const int dimensions = output->dims->size;
   1c4de:	f8d6 e000 	ldr.w	lr, [r6]
  const TfLiteIntArray* input_dims = input0->dims;
   1c4e2:	689d      	ldr	r5, [r3, #8]
   1c4e4:	4660      	mov	r0, ip
                              data->axis);
   1c4e6:	e9d2 b200 	ldrd	fp, r2, [r2]
  for (int i = 0; i < axis; ++i) {
   1c4ea:	2300      	movs	r3, #0
  int outer_size = 1;
   1c4ec:	2601      	movs	r6, #1
  if (axis < 0) {
   1c4ee:	2a00      	cmp	r2, #0
    axis += dimensions;
   1c4f0:	bfb8      	it	lt
   1c4f2:	4472      	addlt	r2, lr
  for (int i = 0; i < axis; ++i) {
   1c4f4:	429a      	cmp	r2, r3
   1c4f6:	dd05      	ble.n	1c504 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20c>
    outer_size *= output_dims->data[i];
   1c4f8:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
   1c4fc:	3301      	adds	r3, #1
    outer_size *= output_dims->data[i];
   1c4fe:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   1c502:	e7f7      	b.n	1c4f4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1fc>
  int copy_size = 1;
   1c504:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   1c506:	3201      	adds	r2, #1
   1c508:	4596      	cmp	lr, r2
   1c50a:	dc0c      	bgt.n	1c526 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22e>
  for (int i = 0; i < input_dims->size; ++i) {
   1c50c:	462a      	mov	r2, r5
  int input_size = 1;
   1c50e:	2001      	movs	r0, #1
  for (int i = 0; i < input_dims->size; ++i) {
   1c510:	2500      	movs	r5, #0
   1c512:	f852 eb04 	ldr.w	lr, [r2], #4
   1c516:	45ae      	cmp	lr, r5
   1c518:	dd0a      	ble.n	1c530 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x238>
    input_size *= input_dims->data[i];
   1c51a:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < input_dims->size; ++i) {
   1c51e:	3501      	adds	r5, #1
    input_size *= input_dims->data[i];
   1c520:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < input_dims->size; ++i) {
   1c524:	e7f7      	b.n	1c516 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21e>
    copy_size *= output_dims->data[i];
   1c526:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   1c52a:	3201      	adds	r2, #1
    copy_size *= output_dims->data[i];
   1c52c:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
   1c52e:	e7eb      	b.n	1c508 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x210>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   1c530:	fb03 f206 	mul.w	r2, r3, r6
   1c534:	4290      	cmp	r0, r2
   1c536:	f47f af2e 	bne.w	1c396 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c53a:	2000      	movs	r0, #0
  for (int i = 0; i < values_count; ++i) {
   1c53c:	4605      	mov	r5, r0
   1c53e:	687a      	ldr	r2, [r7, #4]
   1c540:	9201      	str	r2, [sp, #4]
   1c542:	fb03 f20b 	mul.w	r2, r3, fp
   1c546:	9202      	str	r2, [sp, #8]
   1c548:	45ab      	cmp	fp, r5
   1c54a:	f77f af31 	ble.w	1c3b0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
   1c54e:	680a      	ldr	r2, [r1, #0]
   1c550:	4684      	mov	ip, r0
   1c552:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   1c556:	6857      	ldr	r7, [r2, #4]
   1c558:	9a00      	ldr	r2, [sp, #0]
   1c55a:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c55c:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
   1c560:	f04f 0700 	mov.w	r7, #0
    for (int k = 0; k < outer_size; ++k) {
   1c564:	46be      	mov	lr, r7
   1c566:	bf18      	it	ne
   1c568:	6852      	ldrne	r2, [r2, #4]
   1c56a:	4576      	cmp	r6, lr
   1c56c:	dd15      	ble.n	1c59a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a2>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1c56e:	f04f 0800 	mov.w	r8, #0
   1c572:	9c01      	ldr	r4, [sp, #4]
   1c574:	eb02 0a07 	add.w	sl, r2, r7
   1c578:	eb04 090c 	add.w	r9, r4, ip
   1c57c:	4543      	cmp	r3, r8
   1c57e:	dd06      	ble.n	1c58e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x296>
   1c580:	f91a 4b01 	ldrsb.w	r4, [sl], #1
   1c584:	f108 0801 	add.w	r8, r8, #1
   1c588:	f809 4b01 	strb.w	r4, [r9], #1
   1c58c:	e7f6      	b.n	1c57c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x284>
    for (int k = 0; k < outer_size; ++k) {
   1c58e:	9c02      	ldr	r4, [sp, #8]
   1c590:	f10e 0e01 	add.w	lr, lr, #1
   1c594:	441f      	add	r7, r3
   1c596:	44a4      	add	ip, r4
   1c598:	e7e7      	b.n	1c56a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x272>
  for (int i = 0; i < values_count; ++i) {
   1c59a:	3501      	adds	r5, #1
   1c59c:	4418      	add	r0, r3
   1c59e:	e7d3      	b.n	1c548 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x250>
  const TfLiteTensor* input0 = GetInput(context, node, 0);
   1c5a0:	6808      	ldr	r0, [r1, #0]
  const int dimensions = output->dims->size;
   1c5a2:	68bd      	ldr	r5, [r7, #8]
   1c5a4:	6841      	ldr	r1, [r0, #4]
   1c5a6:	f105 0c04 	add.w	ip, r5, #4
  const TfLiteIntArray* input_dims = input0->dims;
   1c5aa:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  const int dimensions = output->dims->size;
   1c5ae:	f8d5 e000 	ldr.w	lr, [r5]
  const TfLiteIntArray* input_dims = input0->dims;
   1c5b2:	688c      	ldr	r4, [r1, #8]
   1c5b4:	4666      	mov	r6, ip
                               data->axis);
   1c5b6:	e9d2 b200 	ldrd	fp, r2, [r2]
  for (int i = 0; i < axis; ++i) {
   1c5ba:	2100      	movs	r1, #0
  int outer_size = 1;
   1c5bc:	2501      	movs	r5, #1
  if (axis < 0) {
   1c5be:	2a00      	cmp	r2, #0
    axis += dimensions;
   1c5c0:	bfb8      	it	lt
   1c5c2:	4472      	addlt	r2, lr
  for (int i = 0; i < axis; ++i) {
   1c5c4:	428a      	cmp	r2, r1
   1c5c6:	dd05      	ble.n	1c5d4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2dc>
    outer_size *= output_dims->data[i];
   1c5c8:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
   1c5cc:	3101      	adds	r1, #1
    outer_size *= output_dims->data[i];
   1c5ce:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
   1c5d2:	e7f7      	b.n	1c5c4 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2cc>
  for (int i = axis + 1; i < dimensions; ++i) {
   1c5d4:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
   1c5d6:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   1c5d8:	458e      	cmp	lr, r1
   1c5da:	dc0c      	bgt.n	1c5f6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fe>
  for (int i = 0; i < input_dims->size; ++i) {
   1c5dc:	4621      	mov	r1, r4
   1c5de:	2600      	movs	r6, #0
  int input_size = 1;
   1c5e0:	2401      	movs	r4, #1
  for (int i = 0; i < input_dims->size; ++i) {
   1c5e2:	f851 eb04 	ldr.w	lr, [r1], #4
   1c5e6:	45b6      	cmp	lr, r6
   1c5e8:	dd0a      	ble.n	1c600 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x308>
    input_size *= input_dims->data[i];
   1c5ea:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < input_dims->size; ++i) {
   1c5ee:	3601      	adds	r6, #1
    input_size *= input_dims->data[i];
   1c5f0:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < input_dims->size; ++i) {
   1c5f4:	e7f7      	b.n	1c5e6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
    copy_size *= output_dims->data[i];
   1c5f6:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   1c5fa:	3101      	adds	r1, #1
    copy_size *= output_dims->data[i];
   1c5fc:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
   1c5fe:	e7eb      	b.n	1c5d8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e0>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   1c600:	fb02 f105 	mul.w	r1, r2, r5
   1c604:	428c      	cmp	r4, r1
   1c606:	f47f aec6 	bne.w	1c396 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c60a:	2400      	movs	r4, #0
   1c60c:	6879      	ldr	r1, [r7, #4]
  for (int i = 0; i < values_count; ++i) {
   1c60e:	4627      	mov	r7, r4
   1c610:	9101      	str	r1, [sp, #4]
   1c612:	1d01      	adds	r1, r0, #4
   1c614:	9100      	str	r1, [sp, #0]
   1c616:	fb02 f10b 	mul.w	r1, r2, fp
   1c61a:	9102      	str	r1, [sp, #8]
   1c61c:	45bb      	cmp	fp, r7
   1c61e:	f77f aec7 	ble.w	1c3b0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
   1c622:	2600      	movs	r6, #0
   1c624:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
   1c626:	46b6      	mov	lr, r6
   1c628:	9800      	ldr	r0, [sp, #0]
   1c62a:	f850 1b04 	ldr.w	r1, [r0], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c62e:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
   1c632:	bf18      	it	ne
   1c634:	6849      	ldrne	r1, [r1, #4]
   1c636:	9000      	str	r0, [sp, #0]
   1c638:	4575      	cmp	r5, lr
   1c63a:	dd15      	ble.n	1c668 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x370>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1c63c:	f04f 0800 	mov.w	r8, #0
   1c640:	9801      	ldr	r0, [sp, #4]
   1c642:	eb01 0a86 	add.w	sl, r1, r6, lsl #2
   1c646:	eb00 098c 	add.w	r9, r0, ip, lsl #2
   1c64a:	4542      	cmp	r2, r8
   1c64c:	dd06      	ble.n	1c65c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x364>
   1c64e:	f85a 0b04 	ldr.w	r0, [sl], #4
   1c652:	f108 0801 	add.w	r8, r8, #1
   1c656:	f849 0b04 	str.w	r0, [r9], #4
   1c65a:	e7f6      	b.n	1c64a <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x352>
    for (int k = 0; k < outer_size; ++k) {
   1c65c:	9802      	ldr	r0, [sp, #8]
   1c65e:	f10e 0e01 	add.w	lr, lr, #1
   1c662:	4416      	add	r6, r2
   1c664:	4484      	add	ip, r0
   1c666:	e7e7      	b.n	1c638 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x340>
  for (int i = 0; i < values_count; ++i) {
   1c668:	3701      	adds	r7, #1
   1c66a:	4414      	add	r4, r2
   1c66c:	e7d6      	b.n	1c61c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x324>
  const TfLiteTensor* input0 = GetInput(context, node, 0);
   1c66e:	f8d1 c000 	ldr.w	ip, [r1]
  const int dimensions = output->dims->size;
   1c672:	68be      	ldr	r6, [r7, #8]
   1c674:	f8dc 1004 	ldr.w	r1, [ip, #4]
      return PackImpl<int64_t>(context, node, output, data->values_count,
   1c678:	6810      	ldr	r0, [r2, #0]
  const int dimensions = output->dims->size;
   1c67a:	f8d6 e000 	ldr.w	lr, [r6]
  const TfLiteIntArray* input_dims = input0->dims;
   1c67e:	eb03 1181 	add.w	r1, r3, r1, lsl #6
   1c682:	3604      	adds	r6, #4
      return PackImpl<int64_t>(context, node, output, data->values_count,
   1c684:	9000      	str	r0, [sp, #0]
   1c686:	4635      	mov	r5, r6
  const TfLiteIntArray* input_dims = input0->dims;
   1c688:	6888      	ldr	r0, [r1, #8]
  int outer_size = 1;
   1c68a:	2401      	movs	r4, #1
  for (int i = 0; i < axis; ++i) {
   1c68c:	2100      	movs	r1, #0
                               data->axis);
   1c68e:	6852      	ldr	r2, [r2, #4]
  if (axis < 0) {
   1c690:	2a00      	cmp	r2, #0
    axis += dimensions;
   1c692:	bfb8      	it	lt
   1c694:	4472      	addlt	r2, lr
  for (int i = 0; i < axis; ++i) {
   1c696:	428a      	cmp	r2, r1
   1c698:	dd05      	ble.n	1c6a6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ae>
    outer_size *= output_dims->data[i];
   1c69a:	f855 8b04 	ldr.w	r8, [r5], #4
  for (int i = 0; i < axis; ++i) {
   1c69e:	3101      	adds	r1, #1
    outer_size *= output_dims->data[i];
   1c6a0:	fb08 f404 	mul.w	r4, r8, r4
  for (int i = 0; i < axis; ++i) {
   1c6a4:	e7f7      	b.n	1c696 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x39e>
  for (int i = axis + 1; i < dimensions; ++i) {
   1c6a6:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
   1c6a8:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   1c6aa:	458e      	cmp	lr, r1
   1c6ac:	dc0b      	bgt.n	1c6c6 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3ce>
  for (int i = 0; i < input_dims->size; ++i) {
   1c6ae:	4601      	mov	r1, r0
   1c6b0:	2500      	movs	r5, #0
  int input_size = 1;
   1c6b2:	2001      	movs	r0, #1
  for (int i = 0; i < input_dims->size; ++i) {
   1c6b4:	f851 eb04 	ldr.w	lr, [r1], #4
   1c6b8:	45ae      	cmp	lr, r5
   1c6ba:	dd09      	ble.n	1c6d0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3d8>
    input_size *= input_dims->data[i];
   1c6bc:	f851 6b04 	ldr.w	r6, [r1], #4
  for (int i = 0; i < input_dims->size; ++i) {
   1c6c0:	3501      	adds	r5, #1
    input_size *= input_dims->data[i];
   1c6c2:	4370      	muls	r0, r6
  for (int i = 0; i < input_dims->size; ++i) {
   1c6c4:	e7f8      	b.n	1c6b8 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c0>
    copy_size *= output_dims->data[i];
   1c6c6:	f856 5021 	ldr.w	r5, [r6, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   1c6ca:	3101      	adds	r1, #1
    copy_size *= output_dims->data[i];
   1c6cc:	436a      	muls	r2, r5
  for (int i = axis + 1; i < dimensions; ++i) {
   1c6ce:	e7ec      	b.n	1c6aa <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b2>
  TFLITE_DCHECK_EQ(input_size, copy_size * outer_size);
   1c6d0:	fb02 f104 	mul.w	r1, r2, r4
   1c6d4:	4288      	cmp	r0, r1
   1c6d6:	f47f ae5e 	bne.w	1c396 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x9e>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1c6da:	2000      	movs	r0, #0
   1c6dc:	6879      	ldr	r1, [r7, #4]
   1c6de:	9102      	str	r1, [sp, #8]
   1c6e0:	f10c 0104 	add.w	r1, ip, #4
  for (int i = 0; i < values_count; ++i) {
   1c6e4:	4684      	mov	ip, r0
   1c6e6:	9101      	str	r1, [sp, #4]
   1c6e8:	9900      	ldr	r1, [sp, #0]
   1c6ea:	4351      	muls	r1, r2
   1c6ec:	9103      	str	r1, [sp, #12]
   1c6ee:	9900      	ldr	r1, [sp, #0]
   1c6f0:	4561      	cmp	r1, ip
   1c6f2:	f77f ae5d 	ble.w	1c3b0 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb8>
   1c6f6:	9d01      	ldr	r5, [sp, #4]
   1c6f8:	4686      	mov	lr, r0
   1c6fa:	f855 1b04 	ldr.w	r1, [r5], #4
   1c6fe:	9501      	str	r5, [sp, #4]
   1c700:	2500      	movs	r5, #0
    for (int k = 0; k < outer_size; ++k) {
   1c702:	46a8      	mov	r8, r5
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1c704:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
   1c708:	bf18      	it	ne
   1c70a:	6849      	ldrne	r1, [r1, #4]
   1c70c:	4544      	cmp	r4, r8
   1c70e:	dd15      	ble.n	1c73c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x444>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   1c710:	f04f 0900 	mov.w	r9, #0
   1c714:	9f02      	ldr	r7, [sp, #8]
   1c716:	eb01 0bc5 	add.w	fp, r1, r5, lsl #3
   1c71a:	eb07 0ace 	add.w	sl, r7, lr, lsl #3
   1c71e:	454a      	cmp	r2, r9
   1c720:	dd06      	ble.n	1c730 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x438>
   1c722:	e8fb 6702 	ldrd	r6, r7, [fp], #8
   1c726:	f109 0901 	add.w	r9, r9, #1
   1c72a:	e8ea 6702 	strd	r6, r7, [sl], #8
   1c72e:	e7f6      	b.n	1c71e <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x426>
    for (int k = 0; k < outer_size; ++k) {
   1c730:	9f03      	ldr	r7, [sp, #12]
   1c732:	f108 0801 	add.w	r8, r8, #1
   1c736:	4415      	add	r5, r2
   1c738:	44be      	add	lr, r7
   1c73a:	e7e7      	b.n	1c70c <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x414>
  for (int i = 0; i < values_count; ++i) {
   1c73c:	f10c 0c01 	add.w	ip, ip, #1
   1c740:	4410      	add	r0, r2
   1c742:	e7d4      	b.n	1c6ee <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f6>
      TF_LITE_KERNEL_LOG(context, "Type '%s' is not supported by pack.",
   1c744:	9b00      	ldr	r3, [sp, #0]
   1c746:	695d      	ldr	r5, [r3, #20]
   1c748:	f7f0 fabc 	bl	ccc4 <TfLiteTypeGetName>
   1c74c:	4902      	ldr	r1, [pc, #8]	; (1c758 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x460>)
   1c74e:	4602      	mov	r2, r0
   1c750:	9800      	ldr	r0, [sp, #0]
   1c752:	47a8      	blx	r5
      return kTfLiteError;
   1c754:	2001      	movs	r0, #1
   1c756:	e62c      	b.n	1c3b2 <_ZN6tflite3ops5micro4pack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
   1c758:	00035376 	.word	0x00035376

0001c75c <_ZN6tflite3ops5micro13Register_PACKEv>:

}  // namespace
}  // namespace pack

TfLiteRegistration Register_PACK() {
   1c75c:	b510      	push	{r4, lr}
   1c75e:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/pack::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1c760:	2220      	movs	r2, #32
   1c762:	2100      	movs	r1, #0
   1c764:	f014 fba7 	bl	30eb6 <memset>
   1c768:	4b01      	ldr	r3, [pc, #4]	; (1c770 <_ZN6tflite3ops5micro13Register_PACKEv+0x14>)
}
   1c76a:	4620      	mov	r0, r4
          /*version=*/0};
   1c76c:	60e3      	str	r3, [r4, #12]
}
   1c76e:	bd10      	pop	{r4, pc}
   1c770:	0001c2f9 	.word	0x0001c2f9

0001c774 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1c774:	680b      	ldr	r3, [r1, #0]
  TfLiteTensor* output;
  int dims;
  ResizingCategory resizing_category;
};

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1c776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
   1c77a:	681b      	ldr	r3, [r3, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1c77c:	4604      	mov	r4, r0
  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
   1c77e:	3b02      	subs	r3, #2
   1c780:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1c782:	460a      	mov	r2, r1
   1c784:	b090      	sub	sp, #64	; 0x40
  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);
   1c786:	d90a      	bls.n	1c79e <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
   1c788:	4b58      	ldr	r3, [pc, #352]	; (1c8ec <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x178>)
   1c78a:	4a59      	ldr	r2, [pc, #356]	; (1c8f0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   1c78c:	9300      	str	r3, [sp, #0]
   1c78e:	6944      	ldr	r4, [r0, #20]
   1c790:	2347      	movs	r3, #71	; 0x47
   1c792:	4958      	ldr	r1, [pc, #352]	; (1c8f4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
   1c794:	47a0      	blx	r4
  }

  // Current implementations rely on the inputs being <= 4D.
  TF_LITE_ENSURE(
      context, op_context.dims <= reference_ops::PadKernelMaxDimensionCount());
  TF_LITE_ENSURE(context, IsConstantTensor(op_context.paddings));
   1c796:	2001      	movs	r0, #1
  return kTfLiteOk;
}
   1c798:	b010      	add	sp, #64	; 0x40
   1c79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1c79e:	684b      	ldr	r3, [r1, #4]
   1c7a0:	681d      	ldr	r5, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1c7a2:	2d01      	cmp	r5, #1
   1c7a4:	d00c      	beq.n	1c7c0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x4c>
   1c7a6:	2601      	movs	r6, #1
   1c7a8:	4b53      	ldr	r3, [pc, #332]	; (1c8f8 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x184>)
   1c7aa:	e9cd 5602 	strd	r5, r6, [sp, #8]
   1c7ae:	9301      	str	r3, [sp, #4]
   1c7b0:	4b52      	ldr	r3, [pc, #328]	; (1c8fc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x188>)
   1c7b2:	4a4f      	ldr	r2, [pc, #316]	; (1c8f0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   1c7b4:	9300      	str	r3, [sp, #0]
   1c7b6:	6944      	ldr	r4, [r0, #20]
   1c7b8:	2348      	movs	r3, #72	; 0x48
   1c7ba:	4951      	ldr	r1, [pc, #324]	; (1c900 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
   1c7bc:	47a0      	blx	r4
   1c7be:	e7ea      	b.n	1c796 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  PadContext op_context(context, node);
   1c7c0:	4601      	mov	r1, r0
   1c7c2:	a804      	add	r0, sp, #16
   1c7c4:	f010 fc34 	bl	2d030 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode>
  TF_LITE_ENSURE_EQ(context, op_context.input->type, op_context.output->type);
   1c7c8:	9b05      	ldr	r3, [sp, #20]
   1c7ca:	9a07      	ldr	r2, [sp, #28]
   1c7cc:	781b      	ldrb	r3, [r3, #0]
   1c7ce:	7812      	ldrb	r2, [r2, #0]
   1c7d0:	4293      	cmp	r3, r2
   1c7d2:	d00c      	beq.n	1c7ee <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x7a>
   1c7d4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1c7d8:	4b4a      	ldr	r3, [pc, #296]	; (1c904 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x190>)
   1c7da:	9301      	str	r3, [sp, #4]
   1c7dc:	4b4a      	ldr	r3, [pc, #296]	; (1c908 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
   1c7de:	9300      	str	r3, [sp, #0]
   1c7e0:	234b      	movs	r3, #75	; 0x4b
   1c7e2:	6966      	ldr	r6, [r4, #20]
    TF_LITE_ENSURE_EQ(context, op_context.input->type,
   1c7e4:	4620      	mov	r0, r4
   1c7e6:	4a42      	ldr	r2, [pc, #264]	; (1c8f0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   1c7e8:	4945      	ldr	r1, [pc, #276]	; (1c900 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
   1c7ea:	47b0      	blx	r6
   1c7ec:	e7d3      	b.n	1c796 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  if (op_context.constant_values != nullptr) {
   1c7ee:	9a04      	ldr	r2, [sp, #16]
   1c7f0:	b15a      	cbz	r2, 1c80a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x96>
    TF_LITE_ENSURE_EQ(context, op_context.input->type,
   1c7f2:	7812      	ldrb	r2, [r2, #0]
   1c7f4:	4293      	cmp	r3, r2
   1c7f6:	d008      	beq.n	1c80a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x96>
   1c7f8:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1c7fc:	4b43      	ldr	r3, [pc, #268]	; (1c90c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x198>)
   1c7fe:	9301      	str	r3, [sp, #4]
   1c800:	4b41      	ldr	r3, [pc, #260]	; (1c908 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x194>)
   1c802:	9300      	str	r3, [sp, #0]
   1c804:	6966      	ldr	r6, [r4, #20]
   1c806:	234d      	movs	r3, #77	; 0x4d
   1c808:	e7ec      	b.n	1c7e4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x70>
  TF_LITE_ENSURE_EQ(context, GetTensorShape(op_context.paddings).FlatSize(),
   1c80a:	9906      	ldr	r1, [sp, #24]
   1c80c:	a80a      	add	r0, sp, #40	; 0x28
   1c80e:	f00a ff49 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1c812:	a80a      	add	r0, sp, #40	; 0x28
   1c814:	f00a ff91 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1c818:	4606      	mov	r6, r0
   1c81a:	9b07      	ldr	r3, [sp, #28]
   1c81c:	a80a      	add	r0, sp, #40	; 0x28
   1c81e:	689b      	ldr	r3, [r3, #8]
   1c820:	681d      	ldr	r5, [r3, #0]
   1c822:	f00a fefa 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1c826:	006d      	lsls	r5, r5, #1
   1c828:	42ae      	cmp	r6, r5
   1c82a:	d01a      	beq.n	1c862 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xee>
   1c82c:	9906      	ldr	r1, [sp, #24]
   1c82e:	a80a      	add	r0, sp, #40	; 0x28
   1c830:	6965      	ldr	r5, [r4, #20]
   1c832:	f00a ff37 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1c836:	a80a      	add	r0, sp, #40	; 0x28
   1c838:	f00a ff7f 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   1c83c:	9b07      	ldr	r3, [sp, #28]
   1c83e:	4a2c      	ldr	r2, [pc, #176]	; (1c8f0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   1c840:	689b      	ldr	r3, [r3, #8]
   1c842:	492f      	ldr	r1, [pc, #188]	; (1c900 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
   1c844:	681b      	ldr	r3, [r3, #0]
   1c846:	005b      	lsls	r3, r3, #1
   1c848:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1c84c:	4b30      	ldr	r3, [pc, #192]	; (1c910 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x19c>)
   1c84e:	4620      	mov	r0, r4
   1c850:	9301      	str	r3, [sp, #4]
   1c852:	4b30      	ldr	r3, [pc, #192]	; (1c914 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>)
   1c854:	9300      	str	r3, [sp, #0]
   1c856:	2352      	movs	r3, #82	; 0x52
   1c858:	47a8      	blx	r5
   1c85a:	a80a      	add	r0, sp, #40	; 0x28
   1c85c:	f00a fedd 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1c860:	e799      	b.n	1c796 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  const int32* paddings_data = GetTensorData<int32>(op_context.paddings);
   1c862:	9906      	ldr	r1, [sp, #24]
   1c864:	b339      	cbz	r1, 1c8b6 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x142>
   1c866:	684d      	ldr	r5, [r1, #4]
  for (int i = 0; i < op_context.output->dims->size; i++) {
   1c868:	9b07      	ldr	r3, [sp, #28]
    int expected_dim = op_context.input->dims->data[i] + paddings_data[i * 2] +
   1c86a:	f8dd e014 	ldr.w	lr, [sp, #20]
  for (int i = 0; i < op_context.output->dims->size; i++) {
   1c86e:	6898      	ldr	r0, [r3, #8]
   1c870:	2300      	movs	r3, #0
   1c872:	f850 cb04 	ldr.w	ip, [r0], #4
                       paddings_data[i * 2 + 1];
   1c876:	f105 0804 	add.w	r8, r5, #4
  for (int i = 0; i < op_context.output->dims->size; i++) {
   1c87a:	459c      	cmp	ip, r3
   1c87c:	dd1f      	ble.n	1c8be <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x14a>
    int expected_dim = op_context.input->dims->data[i] + paddings_data[i * 2] +
   1c87e:	f855 6033 	ldr.w	r6, [r5, r3, lsl #3]
   1c882:	f858 2033 	ldr.w	r2, [r8, r3, lsl #3]
    int output_dim = op_context.output->dims->data[i];
   1c886:	f850 7b04 	ldr.w	r7, [r0], #4
    int expected_dim = op_context.input->dims->data[i] + paddings_data[i * 2] +
   1c88a:	4432      	add	r2, r6
   1c88c:	f8de 6008 	ldr.w	r6, [lr, #8]
   1c890:	eb06 0683 	add.w	r6, r6, r3, lsl #2
   1c894:	6876      	ldr	r6, [r6, #4]
   1c896:	4432      	add	r2, r6
    TF_LITE_ENSURE_EQ(context, output_dim, expected_dim);
   1c898:	4297      	cmp	r7, r2
   1c89a:	d00e      	beq.n	1c8ba <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x146>
   1c89c:	4b1e      	ldr	r3, [pc, #120]	; (1c918 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1a4>)
   1c89e:	e9cd 7202 	strd	r7, r2, [sp, #8]
   1c8a2:	9301      	str	r3, [sp, #4]
   1c8a4:	4b1d      	ldr	r3, [pc, #116]	; (1c91c <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>)
   1c8a6:	4620      	mov	r0, r4
   1c8a8:	9300      	str	r3, [sp, #0]
   1c8aa:	6965      	ldr	r5, [r4, #20]
   1c8ac:	235b      	movs	r3, #91	; 0x5b
   1c8ae:	4a10      	ldr	r2, [pc, #64]	; (1c8f0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   1c8b0:	4913      	ldr	r1, [pc, #76]	; (1c900 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x18c>)
   1c8b2:	47a8      	blx	r5
   1c8b4:	e76f      	b.n	1c796 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   1c8b6:	460d      	mov	r5, r1
   1c8b8:	e7d6      	b.n	1c868 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>
  for (int i = 0; i < op_context.output->dims->size; i++) {
   1c8ba:	3301      	adds	r3, #1
   1c8bc:	e7dd      	b.n	1c87a <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x106>
  TF_LITE_ENSURE(
   1c8be:	9b08      	ldr	r3, [sp, #32]
   1c8c0:	2b04      	cmp	r3, #4
   1c8c2:	dd08      	ble.n	1c8d6 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x162>
   1c8c4:	4b16      	ldr	r3, [pc, #88]	; (1c920 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1ac>)
   1c8c6:	9300      	str	r3, [sp, #0]
   1c8c8:	235f      	movs	r3, #95	; 0x5f
   1c8ca:	6965      	ldr	r5, [r4, #20]
  TF_LITE_ENSURE(context, IsConstantTensor(op_context.paddings));
   1c8cc:	4620      	mov	r0, r4
   1c8ce:	4a08      	ldr	r2, [pc, #32]	; (1c8f0 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x17c>)
   1c8d0:	4908      	ldr	r1, [pc, #32]	; (1c8f4 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x180>)
   1c8d2:	47a8      	blx	r5
   1c8d4:	e75f      	b.n	1c796 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   1c8d6:	7d0b      	ldrb	r3, [r1, #20]
   1c8d8:	2b01      	cmp	r3, #1
   1c8da:	d004      	beq.n	1c8e6 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x172>
   1c8dc:	4b11      	ldr	r3, [pc, #68]	; (1c924 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x1b0>)
   1c8de:	9300      	str	r3, [sp, #0]
   1c8e0:	6965      	ldr	r5, [r4, #20]
   1c8e2:	2361      	movs	r3, #97	; 0x61
   1c8e4:	e7f2      	b.n	1c8cc <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x158>
  return kTfLiteOk;
   1c8e6:	2000      	movs	r0, #0
   1c8e8:	e756      	b.n	1c798 <_ZN6tflite3ops5micro3pad7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
   1c8ea:	bf00      	nop
   1c8ec:	000353bf 	.word	0x000353bf
   1c8f0:	0003539a 	.word	0x0003539a
   1c8f4:	00034c0c 	.word	0x00034c0c
   1c8f8:	00035884 	.word	0x00035884
   1c8fc:	00034b16 	.word	0x00034b16
   1c900:	00034aec 	.word	0x00034aec
   1c904:	000353ec 	.word	0x000353ec
   1c908:	00035404 	.word	0x00035404
   1c90c:	0003541b 	.word	0x0003541b
   1c910:	0003543c 	.word	0x0003543c
   1c914:	0003545e 	.word	0x0003545e
   1c918:	0003548d 	.word	0x0003548d
   1c91c:	0003549a 	.word	0x0003549a
   1c920:	000354a5 	.word	0x000354a5
   1c924:	000354e4 	.word	0x000354e4

0001c928 <_ZN6tflite3ops5micro12Register_PADEv>:
  return kTfLiteOk;
}

}  // namespace pad

TfLiteRegistration Register_PAD() {
   1c928:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/pad::Prepare,
          /*invoke=*/pad::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1c92a:	4604      	mov	r4, r0
TfLiteRegistration Register_PAD() {
   1c92c:	4606      	mov	r6, r0
          /*version=*/0};
   1c92e:	4d04      	ldr	r5, [pc, #16]	; (1c940 <_ZN6tflite3ops5micro12Register_PADEv+0x18>)
   1c930:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1c932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c934:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1c938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1c93c:	4630      	mov	r0, r6
   1c93e:	bd70      	pop	{r4, r5, r6, pc}
   1c940:	00031b08 	.word	0x00031b08

0001c944 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1c944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c948:	ed2d 8b02 	vpush	{d8}
   1c94c:	b0a5      	sub	sp, #148	; 0x94
   1c94e:	460a      	mov	r2, r1
   1c950:	4604      	mov	r4, r0
  PadContext op_context(context, node);
   1c952:	4601      	mov	r1, r0
   1c954:	a807      	add	r0, sp, #28
   1c956:	f010 fb6b 	bl	2d030 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode>
  if (op_context.constant_values != nullptr) {
   1c95a:	9b07      	ldr	r3, [sp, #28]
   1c95c:	b343      	cbz	r3, 1c9b0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
  for (int i = 0; i < dims->size; ++i) {
   1c95e:	6899      	ldr	r1, [r3, #8]
   1c960:	2000      	movs	r0, #0
  int64_t count = 1;
   1c962:	2201      	movs	r2, #1
   1c964:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
   1c966:	f851 7b04 	ldr.w	r7, [r1], #4
   1c96a:	4287      	cmp	r7, r0
   1c96c:	dd0c      	ble.n	1c988 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x44>
    count *= dims->data[i];
   1c96e:	f851 6b04 	ldr.w	r6, [r1], #4
  for (int i = 0; i < dims->size; ++i) {
   1c972:	3001      	adds	r0, #1
    count *= dims->data[i];
   1c974:	ea4f 79e6 	mov.w	r9, r6, asr #31
   1c978:	fb02 f509 	mul.w	r5, r2, r9
   1c97c:	fb06 5503 	mla	r5, r6, r3, r5
   1c980:	fba2 2306 	umull	r2, r3, r2, r6
   1c984:	442b      	add	r3, r5
  for (int i = 0; i < dims->size; ++i) {
   1c986:	e7f0      	b.n	1c96a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x26>
    TF_LITE_ENSURE_EQ(context, NumElements(op_context.constant_values), 1);
   1c988:	2b00      	cmp	r3, #0
   1c98a:	bf08      	it	eq
   1c98c:	2a01      	cmpeq	r2, #1
   1c98e:	d00f      	beq.n	1c9b0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x6c>
   1c990:	2501      	movs	r5, #1
   1c992:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1c996:	4b8a      	ldr	r3, [pc, #552]	; (1cbc0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x27c>)
   1c998:	9504      	str	r5, [sp, #16]
   1c99a:	9301      	str	r3, [sp, #4]
   1c99c:	4b89      	ldr	r3, [pc, #548]	; (1cbc4 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x280>)
   1c99e:	4620      	mov	r0, r4
   1c9a0:	9300      	str	r3, [sp, #0]
   1c9a2:	6966      	ldr	r6, [r4, #20]
   1c9a4:	236a      	movs	r3, #106	; 0x6a
   1c9a6:	4a88      	ldr	r2, [pc, #544]	; (1cbc8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
   1c9a8:	4988      	ldr	r1, [pc, #544]	; (1cbcc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x288>)
   1c9aa:	47b0      	blx	r6
      return kTfLiteError;
   1c9ac:	2001      	movs	r0, #1
   1c9ae:	e050      	b.n	1ca52 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x10e>
  const int32* paddings_data = GetTensorData<int32>(op_context.paddings);
   1c9b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   1c9b2:	b105      	cbz	r5, 1c9b6 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x72>
   1c9b4:	686d      	ldr	r5, [r5, #4]
  memset(&op_params, 0, sizeof(PadParams));
   1c9b6:	222c      	movs	r2, #44	; 0x2c
   1c9b8:	2100      	movs	r1, #0
   1c9ba:	a819      	add	r0, sp, #100	; 0x64
   1c9bc:	f014 fa7b 	bl	30eb6 <memset>
  op_params.left_padding_count = op_context.dims;
   1c9c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c9c2:	a919      	add	r1, sp, #100	; 0x64
   1c9c4:	b25a      	sxtb	r2, r3
   1c9c6:	f88d 2064 	strb.w	r2, [sp, #100]	; 0x64
  op_params.right_padding_count = op_context.dims;
   1c9ca:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    op_params.right_padding[idx] = paddings_data[idx * 2 + 1];
   1c9ce:	1d28      	adds	r0, r5, #4
  for (int idx = op_context.dims - 1; idx >= 0; --idx) {
   1c9d0:	1e5a      	subs	r2, r3, #1
   1c9d2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1c9d6:	2a00      	cmp	r2, #0
   1c9d8:	db08      	blt.n	1c9ec <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xa8>
    op_params.left_padding[idx] = paddings_data[idx * 2];
   1c9da:	f855 1032 	ldr.w	r1, [r5, r2, lsl #3]
   1c9de:	f843 1904 	str.w	r1, [r3], #-4
    op_params.right_padding[idx] = paddings_data[idx * 2 + 1];
   1c9e2:	f850 1032 	ldr.w	r1, [r0, r2, lsl #3]
  for (int idx = op_context.dims - 1; idx >= 0; --idx) {
   1c9e6:	3a01      	subs	r2, #1
    op_params.right_padding[idx] = paddings_data[idx * 2 + 1];
   1c9e8:	6199      	str	r1, [r3, #24]
  for (int idx = op_context.dims - 1; idx >= 0; --idx) {
   1c9ea:	e7f4      	b.n	1c9d6 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x92>
  switch (op_context.input->type) {
   1c9ec:	9908      	ldr	r1, [sp, #32]
   1c9ee:	7808      	ldrb	r0, [r1, #0]
   1c9f0:	1e43      	subs	r3, r0, #1
   1c9f2:	2b08      	cmp	r3, #8
   1c9f4:	f200 811d 	bhi.w	1cc32 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2ee>
   1c9f8:	e8df f013 	tbh	[pc, r3, lsl #1]
   1c9fc:	00fe0009 	.word	0x00fe0009
   1ca00:	011b0032 	.word	0x011b0032
   1ca04:	011b011b 	.word	0x011b011b
   1ca08:	011b011b 	.word	0x011b011b
   1ca0c:	0096      	.short	0x0096
      float pad_value = op_context.constant_values == nullptr
   1ca0e:	9b07      	ldr	r3, [sp, #28]
                            ? 0.f
   1ca10:	b323      	cbz	r3, 1ca5c <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x118>
   1ca12:	685b      	ldr	r3, [r3, #4]
   1ca14:	681b      	ldr	r3, [r3, #0]
        TF_LITE_PAD(reference_ops, PadImageStyle, float, pad_value);
   1ca16:	a80d      	add	r0, sp, #52	; 0x34
   1ca18:	9306      	str	r3, [sp, #24]
        TF_LITE_PAD(reference_ops, Pad, float, pad_value);
   1ca1a:	f00a fe43 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ca1e:	9c08      	ldr	r4, [sp, #32]
   1ca20:	b104      	cbz	r4, 1ca24 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xe0>
   1ca22:	6864      	ldr	r4, [r4, #4]
   1ca24:	990a      	ldr	r1, [sp, #40]	; 0x28
   1ca26:	a813      	add	r0, sp, #76	; 0x4c
   1ca28:	f00a fe3c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ca2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ca2e:	b103      	cbz	r3, 1ca32 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xee>
   1ca30:	685b      	ldr	r3, [r3, #4]
template <typename T, typename P>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const T* input_data,
                const P* pad_value_ptr, const RuntimeShape& output_shape,
                T* output_data) {
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
   1ca32:	9301      	str	r3, [sp, #4]
   1ca34:	ab13      	add	r3, sp, #76	; 0x4c
   1ca36:	9300      	str	r3, [sp, #0]
   1ca38:	4622      	mov	r2, r4
   1ca3a:	ab06      	add	r3, sp, #24
   1ca3c:	a90d      	add	r1, sp, #52	; 0x34
   1ca3e:	a819      	add	r0, sp, #100	; 0x64
   1ca40:	f010 fbf5 	bl	2d22e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
        TF_LITE_PAD(reference_ops, Pad, int8_t, pad_value);
   1ca44:	a813      	add	r0, sp, #76	; 0x4c
      TF_LITE_PAD(reference_ops, Pad, int32_t, pad_value);
   1ca46:	f00a fde8 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1ca4a:	a80d      	add	r0, sp, #52	; 0x34
   1ca4c:	f00a fde5 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1ca50:	2000      	movs	r0, #0
}
   1ca52:	b025      	add	sp, #148	; 0x94
   1ca54:	ecbd 8b02 	vpop	{d8}
   1ca58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                            ? 0.f
   1ca5c:	2300      	movs	r3, #0
   1ca5e:	e7da      	b.n	1ca16 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0xd2>
      if (op_context.constant_values == nullptr) {
   1ca60:	980a      	ldr	r0, [sp, #40]	; 0x28
   1ca62:	9a07      	ldr	r2, [sp, #28]
   1ca64:	6903      	ldr	r3, [r0, #16]
   1ca66:	2a00      	cmp	r2, #0
   1ca68:	d12b      	bne.n	1cac2 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x17e>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point >=
   1ca6a:	2b00      	cmp	r3, #0
   1ca6c:	da08      	bge.n	1ca80 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x13c>
   1ca6e:	4b58      	ldr	r3, [pc, #352]	; (1cbd0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x28c>)
   1ca70:	9300      	str	r3, [sp, #0]
   1ca72:	2391      	movs	r3, #145	; 0x91
   1ca74:	6965      	ldr	r5, [r4, #20]
        TF_LITE_ENSURE(context, op_context.output->params.scale ==
   1ca76:	4620      	mov	r0, r4
   1ca78:	4a53      	ldr	r2, [pc, #332]	; (1cbc8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
   1ca7a:	4956      	ldr	r1, [pc, #344]	; (1cbd4 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x290>)
   1ca7c:	47a8      	blx	r5
   1ca7e:	e795      	b.n	1c9ac <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point <=
   1ca80:	2bff      	cmp	r3, #255	; 0xff
   1ca82:	dd04      	ble.n	1ca8e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x14a>
   1ca84:	4b54      	ldr	r3, [pc, #336]	; (1cbd8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x294>)
   1ca86:	9300      	str	r3, [sp, #0]
   1ca88:	6965      	ldr	r5, [r4, #20]
   1ca8a:	2393      	movs	r3, #147	; 0x93
   1ca8c:	e7f3      	b.n	1ca76 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        pad_value = static_cast<uint8_t>(op_context.output->params.zero_point);
   1ca8e:	b2db      	uxtb	r3, r3
        TF_LITE_PAD(reference_ops, PadImageStyle, uint8_t, pad_value);
   1ca90:	a80d      	add	r0, sp, #52	; 0x34
   1ca92:	f88d 3018 	strb.w	r3, [sp, #24]
        TF_LITE_PAD(reference_ops, Pad, uint8_t, pad_value);
   1ca96:	f00a fe05 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ca9a:	9c08      	ldr	r4, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ca9c:	b104      	cbz	r4, 1caa0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x15c>
   1ca9e:	6864      	ldr	r4, [r4, #4]
   1caa0:	990a      	ldr	r1, [sp, #40]	; 0x28
   1caa2:	a813      	add	r0, sp, #76	; 0x4c
   1caa4:	f00a fdfe 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1caa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1caaa:	b103      	cbz	r3, 1caae <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x16a>
   1caac:	685b      	ldr	r3, [r3, #4]
   1caae:	9301      	str	r3, [sp, #4]
   1cab0:	ab13      	add	r3, sp, #76	; 0x4c
   1cab2:	9300      	str	r3, [sp, #0]
   1cab4:	4622      	mov	r2, r4
   1cab6:	ab06      	add	r3, sp, #24
   1cab8:	a90d      	add	r1, sp, #52	; 0x34
   1caba:	a819      	add	r0, sp, #100	; 0x64
   1cabc:	f010 fc6d 	bl	2d39a <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
   1cac0:	e7c0      	b.n	1ca44 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x100>
        TF_LITE_ENSURE_EQ(context, op_context.output->params.zero_point,
   1cac2:	6915      	ldr	r5, [r2, #16]
   1cac4:	429d      	cmp	r5, r3
   1cac6:	d00c      	beq.n	1cae2 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x19e>
   1cac8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   1cacc:	4b43      	ldr	r3, [pc, #268]	; (1cbdc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x298>)
   1cace:	9301      	str	r3, [sp, #4]
   1cad0:	4b43      	ldr	r3, [pc, #268]	; (1cbe0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x29c>)
   1cad2:	9300      	str	r3, [sp, #0]
   1cad4:	2399      	movs	r3, #153	; 0x99
   1cad6:	6965      	ldr	r5, [r4, #20]
        TF_LITE_ENSURE_EQ(context, op_context.output->params.zero_point,
   1cad8:	4620      	mov	r0, r4
   1cada:	4a3b      	ldr	r2, [pc, #236]	; (1cbc8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
   1cadc:	493b      	ldr	r1, [pc, #236]	; (1cbcc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x288>)
   1cade:	47a8      	blx	r5
   1cae0:	e764      	b.n	1c9ac <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
        TF_LITE_ENSURE_EQ(
   1cae2:	ed90 8a03 	vldr	s16, [r0, #12]
   1cae6:	edd2 7a03 	vldr	s15, [r2, #12]
   1caea:	eeb4 8a67 	vcmp.f32	s16, s15
   1caee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1caf2:	d016      	beq.n	1cb22 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x1de>
   1caf4:	ee17 0a90 	vmov	r0, s15
   1caf8:	f7ef fd06 	bl	c508 <__aeabi_f2d>
   1cafc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1cb00:	ee18 0a10 	vmov	r0, s16
   1cb04:	f7ef fd00 	bl	c508 <__aeabi_f2d>
   1cb08:	4b36      	ldr	r3, [pc, #216]	; (1cbe4 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2a0>)
   1cb0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1cb0e:	9301      	str	r3, [sp, #4]
   1cb10:	4b35      	ldr	r3, [pc, #212]	; (1cbe8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2a4>)
   1cb12:	4620      	mov	r0, r4
   1cb14:	9300      	str	r3, [sp, #0]
   1cb16:	6965      	ldr	r5, [r4, #20]
   1cb18:	239b      	movs	r3, #155	; 0x9b
   1cb1a:	4a2b      	ldr	r2, [pc, #172]	; (1cbc8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x284>)
   1cb1c:	492b      	ldr	r1, [pc, #172]	; (1cbcc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x288>)
   1cb1e:	47a8      	blx	r5
   1cb20:	e744      	b.n	1c9ac <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
        pad_value = *GetTensorData<uint8_t>(op_context.constant_values);
   1cb22:	6853      	ldr	r3, [r2, #4]
   1cb24:	781b      	ldrb	r3, [r3, #0]
   1cb26:	e7b3      	b.n	1ca90 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x14c>
      if (op_context.constant_values == nullptr) {
   1cb28:	980a      	ldr	r0, [sp, #40]	; 0x28
   1cb2a:	9a07      	ldr	r2, [sp, #28]
   1cb2c:	6903      	ldr	r3, [r0, #16]
   1cb2e:	bb42      	cbnz	r2, 1cb82 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x23e>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point >=
   1cb30:	f113 0f80 	cmn.w	r3, #128	; 0x80
   1cb34:	da04      	bge.n	1cb40 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x1fc>
   1cb36:	4b2d      	ldr	r3, [pc, #180]	; (1cbec <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2a8>)
   1cb38:	9300      	str	r3, [sp, #0]
   1cb3a:	6965      	ldr	r5, [r4, #20]
   1cb3c:	23ab      	movs	r3, #171	; 0xab
   1cb3e:	e79a      	b.n	1ca76 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        TF_LITE_ENSURE(context, op_context.output->params.zero_point <=
   1cb40:	2b7f      	cmp	r3, #127	; 0x7f
   1cb42:	dd04      	ble.n	1cb4e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x20a>
   1cb44:	4b2a      	ldr	r3, [pc, #168]	; (1cbf0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2ac>)
   1cb46:	9300      	str	r3, [sp, #0]
   1cb48:	6965      	ldr	r5, [r4, #20]
   1cb4a:	23ad      	movs	r3, #173	; 0xad
   1cb4c:	e793      	b.n	1ca76 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        pad_value = static_cast<int8_t>(op_context.output->params.zero_point);
   1cb4e:	b25b      	sxtb	r3, r3
        TF_LITE_PAD(reference_ops, PadImageStyle, int8_t, pad_value);
   1cb50:	a80d      	add	r0, sp, #52	; 0x34
   1cb52:	f88d 3018 	strb.w	r3, [sp, #24]
        TF_LITE_PAD(reference_ops, Pad, int8_t, pad_value);
   1cb56:	f00a fda5 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1cb5a:	9c08      	ldr	r4, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cb5c:	b104      	cbz	r4, 1cb60 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x21c>
   1cb5e:	6864      	ldr	r4, [r4, #4]
   1cb60:	990a      	ldr	r1, [sp, #40]	; 0x28
   1cb62:	a813      	add	r0, sp, #76	; 0x4c
   1cb64:	f00a fd9e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1cb68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cb6a:	b103      	cbz	r3, 1cb6e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x22a>
   1cb6c:	685b      	ldr	r3, [r3, #4]
   1cb6e:	9301      	str	r3, [sp, #4]
   1cb70:	ab13      	add	r3, sp, #76	; 0x4c
   1cb72:	9300      	str	r3, [sp, #0]
   1cb74:	4622      	mov	r2, r4
   1cb76:	ab06      	add	r3, sp, #24
   1cb78:	a90d      	add	r1, sp, #52	; 0x34
   1cb7a:	a819      	add	r0, sp, #100	; 0x64
   1cb7c:	f010 fcc4 	bl	2d508 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
   1cb80:	e760      	b.n	1ca44 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x100>
        TF_LITE_ENSURE_EQ(context, op_context.output->params.zero_point,
   1cb82:	6915      	ldr	r5, [r2, #16]
   1cb84:	429d      	cmp	r5, r3
   1cb86:	d008      	beq.n	1cb9a <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x256>
   1cb88:	e9cd 3502 	strd	r3, r5, [sp, #8]
   1cb8c:	4b13      	ldr	r3, [pc, #76]	; (1cbdc <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x298>)
   1cb8e:	9301      	str	r3, [sp, #4]
   1cb90:	4b13      	ldr	r3, [pc, #76]	; (1cbe0 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x29c>)
   1cb92:	9300      	str	r3, [sp, #0]
   1cb94:	6965      	ldr	r5, [r4, #20]
   1cb96:	23b3      	movs	r3, #179	; 0xb3
   1cb98:	e79e      	b.n	1cad8 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x194>
        TF_LITE_ENSURE(context, op_context.output->params.scale ==
   1cb9a:	ed90 7a03 	vldr	s14, [r0, #12]
   1cb9e:	edd2 7a03 	vldr	s15, [r2, #12]
   1cba2:	eeb4 7a67 	vcmp.f32	s14, s15
   1cba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1cbaa:	d004      	beq.n	1cbb6 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x272>
   1cbac:	4b11      	ldr	r3, [pc, #68]	; (1cbf4 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
   1cbae:	9300      	str	r3, [sp, #0]
   1cbb0:	6965      	ldr	r5, [r4, #20]
   1cbb2:	23b5      	movs	r3, #181	; 0xb5
   1cbb4:	e75f      	b.n	1ca76 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x132>
        pad_value = *GetTensorData<int8_t>(op_context.constant_values);
   1cbb6:	6853      	ldr	r3, [r2, #4]
   1cbb8:	f993 3000 	ldrsb.w	r3, [r3]
   1cbbc:	e7c8      	b.n	1cb50 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x20c>
   1cbbe:	bf00      	nop
   1cbc0:	00035884 	.word	0x00035884
   1cbc4:	0003550a 	.word	0x0003550a
   1cbc8:	0003539a 	.word	0x0003539a
   1cbcc:	00034aec 	.word	0x00034aec
   1cbd0:	00035532 	.word	0x00035532
   1cbd4:	00034c0c 	.word	0x00034c0c
   1cbd8:	0003557e 	.word	0x0003557e
   1cbdc:	000355ca 	.word	0x000355ca
   1cbe0:	000355f8 	.word	0x000355f8
   1cbe4:	0003561d 	.word	0x0003561d
   1cbe8:	0003565b 	.word	0x0003565b
   1cbec:	00035690 	.word	0x00035690
   1cbf0:	000356db 	.word	0x000356db
   1cbf4:	00035726 	.word	0x00035726
          op_context.constant_values == nullptr
   1cbf8:	9b07      	ldr	r3, [sp, #28]
              ? 0
   1cbfa:	b10b      	cbz	r3, 1cc00 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>
   1cbfc:	685b      	ldr	r3, [r3, #4]
   1cbfe:	681b      	ldr	r3, [r3, #0]
      TF_LITE_PAD(reference_ops, Pad, int32_t, pad_value);
   1cc00:	a80d      	add	r0, sp, #52	; 0x34
   1cc02:	9306      	str	r3, [sp, #24]
   1cc04:	f00a fd4e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1cc08:	9c08      	ldr	r4, [sp, #32]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cc0a:	b104      	cbz	r4, 1cc0e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2ca>
   1cc0c:	6864      	ldr	r4, [r4, #4]
   1cc0e:	ad13      	add	r5, sp, #76	; 0x4c
   1cc10:	4628      	mov	r0, r5
   1cc12:	990a      	ldr	r1, [sp, #40]	; 0x28
   1cc14:	f00a fd46 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1cc18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cc1a:	b103      	cbz	r3, 1cc1e <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x2da>
   1cc1c:	685b      	ldr	r3, [r3, #4]
template <>
inline void Pad(const tflite::PadParams& op_params,
                const RuntimeShape& input_shape, const int32* input_data,
                const int32* pad_value_ptr, const RuntimeShape& output_shape,
                int32* output_data) {
  PadImpl(op_params, input_shape, input_data, pad_value_ptr, output_shape,
   1cc1e:	e9cd 5300 	strd	r5, r3, [sp]
   1cc22:	a819      	add	r0, sp, #100	; 0x64
   1cc24:	4622      	mov	r2, r4
   1cc26:	ab06      	add	r3, sp, #24
   1cc28:	a90d      	add	r1, sp, #52	; 0x34
   1cc2a:	f010 fa49 	bl	2d0c0 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>
   1cc2e:	4628      	mov	r0, r5
   1cc30:	e709      	b.n	1ca46 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x102>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported by Pad.",
   1cc32:	6965      	ldr	r5, [r4, #20]
   1cc34:	f7f0 f846 	bl	ccc4 <TfLiteTypeGetName>
   1cc38:	4902      	ldr	r1, [pc, #8]	; (1cc44 <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x300>)
   1cc3a:	4602      	mov	r2, r0
   1cc3c:	4620      	mov	r0, r4
   1cc3e:	47a8      	blx	r5
   1cc40:	e6b4      	b.n	1c9ac <_ZN6tflite3ops5micro3pad4EvalEP13TfLiteContextP10TfLiteNode+0x68>
   1cc42:	bf00      	nop
   1cc44:	00035772 	.word	0x00035772

0001cc48 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace reference_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const float* input_data,
                        const RuntimeShape& output_shape, float* output_data) {
   1cc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc4c:	ed2d 8b04 	vpush	{d8-d9}
   1cc50:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1cc52:	680b      	ldr	r3, [r1, #0]
                        const RuntimeShape& output_shape, float* output_data) {
   1cc54:	b095      	sub	sp, #84	; 0x54
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1cc56:	2b04      	cmp	r3, #4
                        const RuntimeShape& output_shape, float* output_data) {
   1cc58:	4604      	mov	r4, r0
   1cc5a:	460d      	mov	r5, r1
   1cc5c:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   1cc5e:	d001      	beq.n	1cc64 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
   1cc60:	f014 f8df 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   1cc64:	6833      	ldr	r3, [r6, #0]
   1cc66:	2b04      	cmp	r3, #4
   1cc68:	d1fa      	bne.n	1cc60 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1cc6a:	2300      	movs	r3, #0
   1cc6c:	4632      	mov	r2, r6
   1cc6e:	4619      	mov	r1, r3
   1cc70:	4628      	mov	r0, r5
   1cc72:	f00d fb87 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1cc76:	2303      	movs	r3, #3
   1cc78:	4632      	mov	r2, r6
   1cc7a:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   1cc7c:	9007      	str	r0, [sp, #28]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1cc7e:	4628      	mov	r0, r5
   1cc80:	f00d fb80 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   1cc84:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   1cc86:	9008      	str	r0, [sp, #32]
  const int input_height = input_shape.Dims(1);
   1cc88:	4628      	mov	r0, r5
   1cc8a:	f00a fcd1 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1cc8e:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1cc90:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_width = input_shape.Dims(2);
   1cc92:	4628      	mov	r0, r5
   1cc94:	f00a fccc 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1cc98:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   1cc9a:	900a      	str	r0, [sp, #40]	; 0x28
  const int output_height = output_shape.Dims(1);
   1cc9c:	4630      	mov	r0, r6
   1cc9e:	f00a fcc7 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1cca2:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1cca4:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_width = output_shape.Dims(2);
   1cca6:	4630      	mov	r0, r6
   1cca8:	f00a fcc2 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
   1ccac:	f04f 0b00 	mov.w	fp, #0
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              total +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
              filter_count++;
   1ccb0:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
  const int stride_height = params.stride_height;
   1ccb4:	68e3      	ldr	r3, [r4, #12]
  const int output_width = output_shape.Dims(2);
   1ccb6:	900c      	str	r0, [sp, #48]	; 0x30
  const int stride_height = params.stride_height;
   1ccb8:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_width = params.stride_width;
   1ccba:	6923      	ldr	r3, [r4, #16]
   1ccbc:	930e      	str	r3, [sp, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
   1ccbe:	9b07      	ldr	r3, [sp, #28]
   1ccc0:	459b      	cmp	fp, r3
   1ccc2:	f280 808d 	bge.w	1cde0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x198>
   1ccc6:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1ccca:	46d0      	mov	r8, sl
   1cccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ccce:	4598      	cmp	r8, r3
   1ccd0:	f280 8083 	bge.w	1cdda <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x192>
              (out_y * stride_height) - params.padding_values.height;
   1ccd4:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1ccd6:	46b9      	mov	r9, r7
   1ccd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ccda:	4599      	cmp	r9, r3
   1ccdc:	da78      	bge.n	1cdd0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x188>
        for (int channel = 0; channel < depth; ++channel) {
   1ccde:	2300      	movs	r3, #0
   1cce0:	9303      	str	r3, [sp, #12]
   1cce2:	9b03      	ldr	r3, [sp, #12]
   1cce4:	9a08      	ldr	r2, [sp, #32]
   1cce6:	4293      	cmp	r3, r2
   1cce8:	da6d      	bge.n	1cdc6 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17e>
              (out_x * stride_width) - params.padding_values.width;
   1ccea:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1ccee:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
   1ccf0:	1afa      	subs	r2, r7, r3
   1ccf2:	920f      	str	r2, [sp, #60]	; 0x3c
              (out_y * stride_height) - params.padding_values.height;
   1ccf4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          const int filter_x_start = std::max(0, -in_x_origin);
   1ccf8:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   1ccfa:	ebaa 0102 	sub.w	r1, sl, r2
   1ccfe:	9105      	str	r1, [sp, #20]
          const int filter_x_start = std::max(0, -in_x_origin);
   1cd00:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1cd04:	9111      	str	r1, [sp, #68]	; 0x44
              std::min(params.filter_width, input_width - in_x_origin);
   1cd06:	990a      	ldr	r1, [sp, #40]	; 0x28
          const int filter_y_start = std::max(0, -in_y_origin);
   1cd08:	eba2 020a 	sub.w	r2, r2, sl
              std::min(params.filter_width, input_width - in_x_origin);
   1cd0c:	440b      	add	r3, r1
   1cd0e:	4283      	cmp	r3, r0
   1cd10:	bfa8      	it	ge
   1cd12:	4603      	movge	r3, r0
   1cd14:	9310      	str	r3, [sp, #64]	; 0x40
              std::min(params.filter_height, input_height - in_y_origin);
   1cd16:	9b09      	ldr	r3, [sp, #36]	; 0x24
          float filter_count = 0;
   1cd18:	ed9f 8a34 	vldr	s16, [pc, #208]	; 1cdec <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a4>
              std::min(params.filter_height, input_height - in_y_origin);
   1cd1c:	18d0      	adds	r0, r2, r3
   1cd1e:	6963      	ldr	r3, [r4, #20]
          float total = 0.f;
   1cd20:	eef0 8a48 	vmov.f32	s17, s16
   1cd24:	4298      	cmp	r0, r3
   1cd26:	bfa8      	it	ge
   1cd28:	4618      	movge	r0, r3
   1cd2a:	9b05      	ldr	r3, [sp, #20]
   1cd2c:	9006      	str	r0, [sp, #24]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1cd2e:	2a00      	cmp	r2, #0
   1cd30:	bfa8      	it	ge
   1cd32:	189b      	addge	r3, r3, r2
   1cd34:	461a      	mov	r2, r3
   1cd36:	9b05      	ldr	r3, [sp, #20]
   1cd38:	9906      	ldr	r1, [sp, #24]
   1cd3a:	1ad3      	subs	r3, r2, r3
   1cd3c:	4299      	cmp	r1, r3
   1cd3e:	dd1f      	ble.n	1cd80 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x138>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1cd40:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1cd42:	9304      	str	r3, [sp, #16]
   1cd44:	9b04      	ldr	r3, [sp, #16]
   1cd46:	9910      	ldr	r1, [sp, #64]	; 0x40
   1cd48:	428b      	cmp	r3, r1
   1cd4a:	da17      	bge.n	1cd7c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x134>
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   1cd4c:	9b03      	ldr	r3, [sp, #12]
   1cd4e:	9904      	ldr	r1, [sp, #16]
   1cd50:	9300      	str	r3, [sp, #0]
   1cd52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1cd54:	4628      	mov	r0, r5
   1cd56:	440b      	add	r3, r1
   1cd58:	4659      	mov	r1, fp
   1cd5a:	9213      	str	r2, [sp, #76]	; 0x4c
   1cd5c:	f00a fd2a 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1cd60:	9b12      	ldr	r3, [sp, #72]	; 0x48
              filter_count++;
   1cd62:	ee38 8a29 	vadd.f32	s16, s16, s19
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   1cd66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              total +=
   1cd6a:	edd0 7a00 	vldr	s15, [r0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1cd6e:	9b04      	ldr	r3, [sp, #16]
              total +=
   1cd70:	ee78 8aa7 	vadd.f32	s17, s17, s15
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   1cd74:	3301      	adds	r3, #1
   1cd76:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1cd78:	9304      	str	r3, [sp, #16]
   1cd7a:	e7e3      	b.n	1cd44 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xfc>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   1cd7c:	3201      	adds	r2, #1
   1cd7e:	e7da      	b.n	1cd36 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
            }
          }
          const float average = total / filter_count;
   1cd80:	ee88 9a88 	vdiv.f32	s18, s17, s16
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(average, params.float_activation_min,
   1cd84:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1cd88:	9b03      	ldr	r3, [sp, #12]
   1cd8a:	4642      	mov	r2, r8
   1cd8c:	9300      	str	r3, [sp, #0]
   1cd8e:	4659      	mov	r1, fp
   1cd90:	464b      	mov	r3, r9
   1cd92:	4630      	mov	r0, r6
   1cd94:	f00a fd0e 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      return __a;
   1cd98:	eeb4 8ac9 	vcmpe.f32	s16, s18
   1cd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                           params.float_activation_max);
   1cda0:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
   1cda4:	fe38 8a09 	vselgt.f32	s16, s16, s18
	return __b;
   1cda8:	eef4 8a48 	vcmp.f32	s17, s16
   1cdac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1cdb0:	bf48      	it	mi
   1cdb2:	eeb0 8a68 	vmovmi.f32	s16, s17
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1cdb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1cdb8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        for (int channel = 0; channel < depth; ++channel) {
   1cdbc:	9b03      	ldr	r3, [sp, #12]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   1cdbe:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
   1cdc2:	3301      	adds	r3, #1
   1cdc4:	e78c      	b.n	1cce0 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x98>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   1cdc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cdc8:	f109 0901 	add.w	r9, r9, #1
   1cdcc:	441f      	add	r7, r3
   1cdce:	e783      	b.n	1ccd8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x90>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   1cdd0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1cdd2:	f108 0801 	add.w	r8, r8, #1
   1cdd6:	449a      	add	sl, r3
   1cdd8:	e778      	b.n	1cccc <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
  for (int batch = 0; batch < batches; ++batch) {
   1cdda:	f10b 0b01 	add.w	fp, fp, #1
   1cdde:	e76e      	b.n	1ccbe <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x76>
        }
      }
    }
  }
}
   1cde0:	b015      	add	sp, #84	; 0x54
   1cde2:	ecbd 8b04 	vpop	{d8-d9}
   1cde6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cdea:	bf00      	nop
   1cdec:	00000000 	.word	0x00000000

0001cdf0 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv>:
  return kTfLiteOk;
}

}  // namespace pooling

TfLiteRegistration Register_AVERAGE_POOL_2D() {
   1cdf0:	b510      	push	{r4, lr}
   1cdf2:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/pooling::AverageEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1cdf4:	2220      	movs	r2, #32
   1cdf6:	2100      	movs	r1, #0
   1cdf8:	f014 f85d 	bl	30eb6 <memset>
   1cdfc:	4b01      	ldr	r3, [pc, #4]	; (1ce04 <_ZN6tflite3ops5micro24Register_AVERAGE_POOL_2DEv+0x14>)
}
   1cdfe:	4620      	mov	r0, r4
          /*version=*/0};
   1ce00:	60e3      	str	r3, [r4, #12]
}
   1ce02:	bd10      	pop	{r4, pc}
   1ce04:	0001ce5d 	.word	0x0001ce5d

0001ce08 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:

TfLiteRegistration Register_MAX_POOL_2D() {
   1ce08:	b510      	push	{r4, lr}
   1ce0a:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1ce0c:	2220      	movs	r2, #32
   1ce0e:	2100      	movs	r1, #0
   1ce10:	f014 f851 	bl	30eb6 <memset>
   1ce14:	4b01      	ldr	r3, [pc, #4]	; (1ce1c <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x14>)
}
   1ce16:	4620      	mov	r0, r4
          /*version=*/0};
   1ce18:	60e3      	str	r3, [r4, #12]
}
   1ce1a:	bd10      	pop	{r4, pc}
   1ce1c:	0001cfa9 	.word	0x0001cfa9

0001ce20 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
  if (activation == kTfLiteActRelu) {
   1ce20:	2801      	cmp	r0, #1
   1ce22:	d103      	bne.n	1ce2c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0xc>
    *activation_min = 0;
   1ce24:	2300      	movs	r3, #0
    *activation_min = std::numeric_limits<T>::lowest();
   1ce26:	600b      	str	r3, [r1, #0]
    *activation_max = std::numeric_limits<T>::max();
   1ce28:	4b09      	ldr	r3, [pc, #36]	; (1ce50 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x30>)
   1ce2a:	e004      	b.n	1ce36 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x16>
  } else if (activation == kTfLiteActRelu6) {
   1ce2c:	2803      	cmp	r0, #3
   1ce2e:	d104      	bne.n	1ce3a <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x1a>
    *activation_min = 0;
   1ce30:	2300      	movs	r3, #0
   1ce32:	600b      	str	r3, [r1, #0]
    *activation_max = 6;
   1ce34:	4b07      	ldr	r3, [pc, #28]	; (1ce54 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x34>)
    *activation_max = std::numeric_limits<T>::max();
   1ce36:	6013      	str	r3, [r2, #0]
  }
}
   1ce38:	4770      	bx	lr
  } else if (activation == kTfLiteActReluN1To1) {
   1ce3a:	2802      	cmp	r0, #2
   1ce3c:	d104      	bne.n	1ce48 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x28>
    *activation_min = -1;
   1ce3e:	4b06      	ldr	r3, [pc, #24]	; (1ce58 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x38>)
   1ce40:	600b      	str	r3, [r1, #0]
    *activation_max = 1;
   1ce42:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   1ce46:	e7f6      	b.n	1ce36 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x16>
    *activation_min = std::numeric_limits<T>::lowest();
   1ce48:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   1ce4c:	e7eb      	b.n	1ce26 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x6>
   1ce4e:	bf00      	nop
   1ce50:	7f7fffff 	.word	0x7f7fffff
   1ce54:	40c00000 	.word	0x40c00000
   1ce58:	bf800000 	.word	0xbf800000

0001ce5c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
   1ce5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return &context->tensors[node->inputs->data[index]];
   1ce60:	680b      	ldr	r3, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1ce62:	f8d0 9008 	ldr.w	r9, [r0, #8]
   1ce66:	685e      	ldr	r6, [r3, #4]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
   1ce68:	694d      	ldr	r5, [r1, #20]
  return &context->tensors[node->outputs->data[index]];
   1ce6a:	684b      	ldr	r3, [r1, #4]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
   1ce6c:	b0a2      	sub	sp, #136	; 0x88
  return &context->tensors[node->inputs->data[index]];
   1ce6e:	ea4f 1a86 	mov.w	sl, r6, lsl #6
   1ce72:	eb09 1686 	add.w	r6, r9, r6, lsl #6
   1ce76:	4607      	mov	r7, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   1ce78:	4631      	mov	r1, r6
   1ce7a:	4628      	mov	r0, r5
   1ce7c:	aa07      	add	r2, sp, #28
  return &context->tensors[node->outputs->data[index]];
   1ce7e:	685c      	ldr	r4, [r3, #4]
   1ce80:	f011 f812 	bl	2dea8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.isra.0>
   1ce84:	4680      	mov	r8, r0
   1ce86:	2800      	cmp	r0, #0
   1ce88:	d139      	bne.n	1cefe <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa2>
  switch (input->type) {
   1ce8a:	f819 000a 	ldrb.w	r0, [r9, sl]
   1ce8e:	eb09 1484 	add.w	r4, r9, r4, lsl #6
   1ce92:	2803      	cmp	r0, #3
   1ce94:	d037      	beq.n	1cf06 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xaa>
   1ce96:	2809      	cmp	r0, #9
   1ce98:	d035      	beq.n	1cf06 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xaa>
   1ce9a:	2801      	cmp	r0, #1
   1ce9c:	d177      	bne.n	1cf8e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x132>
  CalculateActivationRange(params->activation, &activation_min,
   1ce9e:	aa06      	add	r2, sp, #24
   1cea0:	7d28      	ldrb	r0, [r5, #20]
   1cea2:	a905      	add	r1, sp, #20
   1cea4:	f7ff ffbc 	bl	1ce20 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.stride_height = params->stride_height;
   1cea8:	68ab      	ldr	r3, [r5, #8]
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1ceaa:	4631      	mov	r1, r6
  op_params.stride_height = params->stride_height;
   1ceac:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
   1ceae:	686b      	ldr	r3, [r5, #4]
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1ceb0:	a80b      	add	r0, sp, #44	; 0x2c
  op_params.stride_width = params->stride_width;
   1ceb2:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
   1ceb4:	692b      	ldr	r3, [r5, #16]
   1ceb6:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
   1ceb8:	68eb      	ldr	r3, [r5, #12]
   1ceba:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
   1cebc:	9b08      	ldr	r3, [sp, #32]
   1cebe:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
   1cec2:	9b07      	ldr	r3, [sp, #28]
   1cec4:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.float_activation_min = activation_min;
   1cec8:	9b05      	ldr	r3, [sp, #20]
   1ceca:	9320      	str	r3, [sp, #128]	; 0x80
  op_params.float_activation_max = activation_max;
   1cecc:	9b06      	ldr	r3, [sp, #24]
   1cece:	9321      	str	r3, [sp, #132]	; 0x84
      op_params, GetTensorShape(input), GetTensorData<float>(input),
   1ced0:	f00a fbe8 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ced4:	6872      	ldr	r2, [r6, #4]
      GetTensorShape(output), GetTensorData<float>(output));
   1ced6:	4621      	mov	r1, r4
   1ced8:	a811      	add	r0, sp, #68	; 0x44
   1ceda:	9203      	str	r2, [sp, #12]
   1cedc:	f00a fbe2 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cee0:	9a03      	ldr	r2, [sp, #12]
   1cee2:	b104      	cbz	r4, 1cee6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   1cee4:	6864      	ldr	r4, [r4, #4]
  reference_ops::AveragePool(
   1cee6:	9400      	str	r4, [sp, #0]
   1cee8:	ab11      	add	r3, sp, #68	; 0x44
   1ceea:	a90b      	add	r1, sp, #44	; 0x2c
   1ceec:	a817      	add	r0, sp, #92	; 0x5c
   1ceee:	f7ff feab 	bl	1cc48 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   1cef2:	a811      	add	r0, sp, #68	; 0x44
   1cef4:	f00a fb91 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1cef8:	a80b      	add	r0, sp, #44	; 0x2c
   1cefa:	f00a fb8e 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   1cefe:	4640      	mov	r0, r8
   1cf00:	b022      	add	sp, #136	; 0x88
   1cf02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  (void)CalculateActivationRangeQuantized(context, params->activation, output,
   1cf06:	ab06      	add	r3, sp, #24
   1cf08:	7d29      	ldrb	r1, [r5, #20]
   1cf0a:	4622      	mov	r2, r4
   1cf0c:	9300      	str	r3, [sp, #0]
   1cf0e:	4638      	mov	r0, r7
   1cf10:	ab05      	add	r3, sp, #20
   1cf12:	f004 f8d9 	bl	210c8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
  op_params.stride_height = params->stride_height;
   1cf16:	68ab      	ldr	r3, [r5, #8]
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1cf18:	4631      	mov	r1, r6
  op_params.stride_height = params->stride_height;
   1cf1a:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
   1cf1c:	686b      	ldr	r3, [r5, #4]
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1cf1e:	a80b      	add	r0, sp, #44	; 0x2c
  op_params.stride_width = params->stride_width;
   1cf20:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
   1cf22:	692b      	ldr	r3, [r5, #16]
   1cf24:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
   1cf26:	68eb      	ldr	r3, [r5, #12]
   1cf28:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
   1cf2a:	9b08      	ldr	r3, [sp, #32]
   1cf2c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
   1cf30:	9b07      	ldr	r3, [sp, #28]
   1cf32:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.quantized_activation_min = activation_min;
   1cf36:	9b05      	ldr	r3, [sp, #20]
   1cf38:	931e      	str	r3, [sp, #120]	; 0x78
  op_params.quantized_activation_max = activation_max;
   1cf3a:	9b06      	ldr	r3, [sp, #24]
   1cf3c:	931f      	str	r3, [sp, #124]	; 0x7c
  if (input->type == kTfLiteUInt8) {
   1cf3e:	f819 300a 	ldrb.w	r3, [r9, sl]
   1cf42:	2b03      	cmp	r3, #3
   1cf44:	d111      	bne.n	1cf6a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x10e>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1cf46:	f00a fbad 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cf4a:	6872      	ldr	r2, [r6, #4]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   1cf4c:	4621      	mov	r1, r4
   1cf4e:	a811      	add	r0, sp, #68	; 0x44
   1cf50:	9203      	str	r2, [sp, #12]
   1cf52:	f00a fba7 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cf56:	9a03      	ldr	r2, [sp, #12]
   1cf58:	b104      	cbz	r4, 1cf5c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x100>
   1cf5a:	6864      	ldr	r4, [r4, #4]
    reference_ops::AveragePool(
   1cf5c:	9400      	str	r4, [sp, #0]
   1cf5e:	ab11      	add	r3, sp, #68	; 0x44
   1cf60:	a90b      	add	r1, sp, #44	; 0x2c
   1cf62:	a817      	add	r0, sp, #92	; 0x5c
   1cf64:	f010 fb88 	bl	2d678 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
   1cf68:	e7c3      	b.n	1cef2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x96>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1cf6a:	f00a fb9b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1cf6e:	6872      	ldr	r2, [r6, #4]
        GetTensorShape(output), GetTensorData<int8_t>(output));
   1cf70:	4621      	mov	r1, r4
   1cf72:	a811      	add	r0, sp, #68	; 0x44
   1cf74:	9203      	str	r2, [sp, #12]
   1cf76:	f00a fb95 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1cf7a:	9a03      	ldr	r2, [sp, #12]
   1cf7c:	b104      	cbz	r4, 1cf80 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x124>
   1cf7e:	6864      	ldr	r4, [r4, #4]
    reference_integer_ops::AveragePool(
   1cf80:	9400      	str	r4, [sp, #0]
   1cf82:	ab11      	add	r3, sp, #68	; 0x44
   1cf84:	a90b      	add	r1, sp, #44	; 0x2c
   1cf86:	a817      	add	r0, sp, #92	; 0x5c
   1cf88:	f010 fdea 	bl	2db60 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
   1cf8c:	e7b1      	b.n	1cef2 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x96>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
   1cf8e:	697c      	ldr	r4, [r7, #20]
   1cf90:	f7ef fe98 	bl	ccc4 <TfLiteTypeGetName>
   1cf94:	4903      	ldr	r1, [pc, #12]	; (1cfa4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x148>)
   1cf96:	4602      	mov	r2, r0
   1cf98:	4638      	mov	r0, r7
   1cf9a:	47a0      	blx	r4
      return kTfLiteError;
   1cf9c:	f04f 0801 	mov.w	r8, #1
   1cfa0:	e7ad      	b.n	1cefe <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xa2>
   1cfa2:	bf00      	nop
   1cfa4:	0003579a 	.word	0x0003579a

0001cfa8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
   1cfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return &context->tensors[node->inputs->data[index]];
   1cfac:	680b      	ldr	r3, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1cfae:	f8d0 9008 	ldr.w	r9, [r0, #8]
   1cfb2:	685e      	ldr	r6, [r3, #4]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
   1cfb4:	694d      	ldr	r5, [r1, #20]
  return &context->tensors[node->outputs->data[index]];
   1cfb6:	684b      	ldr	r3, [r1, #4]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
   1cfb8:	b0a2      	sub	sp, #136	; 0x88
  return &context->tensors[node->inputs->data[index]];
   1cfba:	ea4f 1a86 	mov.w	sl, r6, lsl #6
   1cfbe:	eb09 1686 	add.w	r6, r9, r6, lsl #6
   1cfc2:	4607      	mov	r7, r0
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
   1cfc4:	4631      	mov	r1, r6
   1cfc6:	4628      	mov	r0, r5
   1cfc8:	aa07      	add	r2, sp, #28
  return &context->tensors[node->outputs->data[index]];
   1cfca:	685c      	ldr	r4, [r3, #4]
   1cfcc:	f010 ff6c 	bl	2dea8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.isra.0>
   1cfd0:	4680      	mov	r8, r0
   1cfd2:	2800      	cmp	r0, #0
   1cfd4:	d139      	bne.n	1d04a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa2>
  switch (input->type) {
   1cfd6:	f819 000a 	ldrb.w	r0, [r9, sl]
   1cfda:	eb09 1484 	add.w	r4, r9, r4, lsl #6
   1cfde:	2803      	cmp	r0, #3
   1cfe0:	d037      	beq.n	1d052 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa>
   1cfe2:	2809      	cmp	r0, #9
   1cfe4:	d035      	beq.n	1d052 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xaa>
   1cfe6:	2801      	cmp	r0, #1
   1cfe8:	d177      	bne.n	1d0da <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x132>
  CalculateActivationRange(params->activation, &activation_min,
   1cfea:	aa06      	add	r2, sp, #24
   1cfec:	7d28      	ldrb	r0, [r5, #20]
   1cfee:	a905      	add	r1, sp, #20
   1cff0:	f7ff ff16 	bl	1ce20 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
  op_params.stride_height = params->stride_height;
   1cff4:	68ab      	ldr	r3, [r5, #8]
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   1cff6:	4631      	mov	r1, r6
  op_params.stride_height = params->stride_height;
   1cff8:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
   1cffa:	686b      	ldr	r3, [r5, #4]
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   1cffc:	a80b      	add	r0, sp, #44	; 0x2c
  op_params.stride_width = params->stride_width;
   1cffe:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
   1d000:	692b      	ldr	r3, [r5, #16]
   1d002:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
   1d004:	68eb      	ldr	r3, [r5, #12]
   1d006:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
   1d008:	9b08      	ldr	r3, [sp, #32]
   1d00a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
   1d00e:	9b07      	ldr	r3, [sp, #28]
   1d010:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.float_activation_min = activation_min;
   1d014:	9b05      	ldr	r3, [sp, #20]
   1d016:	9320      	str	r3, [sp, #128]	; 0x80
  op_params.float_activation_max = activation_max;
   1d018:	9b06      	ldr	r3, [sp, #24]
   1d01a:	9321      	str	r3, [sp, #132]	; 0x84
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   1d01c:	f00a fb42 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d020:	6872      	ldr	r2, [r6, #4]
                         GetTensorData<float>(input), GetTensorShape(output),
   1d022:	4621      	mov	r1, r4
   1d024:	a811      	add	r0, sp, #68	; 0x44
   1d026:	9203      	str	r2, [sp, #12]
   1d028:	f00a fb3c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d02c:	9a03      	ldr	r2, [sp, #12]
   1d02e:	b104      	cbz	r4, 1d032 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x8a>
   1d030:	6864      	ldr	r4, [r4, #4]
  reference_ops::MaxPool(op_params, GetTensorShape(input),
   1d032:	9400      	str	r4, [sp, #0]
   1d034:	ab11      	add	r3, sp, #68	; 0x44
   1d036:	a90b      	add	r1, sp, #44	; 0x2c
   1d038:	a817      	add	r0, sp, #92	; 0x5c
   1d03a:	f010 fbec 	bl	2d816 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   1d03e:	a811      	add	r0, sp, #68	; 0x44
   1d040:	f00a faeb 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d044:	a80b      	add	r0, sp, #44	; 0x2c
   1d046:	f00a fae8 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   1d04a:	4640      	mov	r0, r8
   1d04c:	b022      	add	sp, #136	; 0x88
   1d04e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  (void)CalculateActivationRangeQuantized(context, params->activation, output,
   1d052:	ab06      	add	r3, sp, #24
   1d054:	7d29      	ldrb	r1, [r5, #20]
   1d056:	4622      	mov	r2, r4
   1d058:	9300      	str	r3, [sp, #0]
   1d05a:	4638      	mov	r0, r7
   1d05c:	ab05      	add	r3, sp, #20
   1d05e:	f004 f833 	bl	210c8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
  op_params.stride_height = params->stride_height;
   1d062:	68ab      	ldr	r3, [r5, #8]
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d064:	4631      	mov	r1, r6
  op_params.stride_height = params->stride_height;
   1d066:	931a      	str	r3, [sp, #104]	; 0x68
  op_params.stride_width = params->stride_width;
   1d068:	686b      	ldr	r3, [r5, #4]
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d06a:	a80b      	add	r0, sp, #44	; 0x2c
  op_params.stride_width = params->stride_width;
   1d06c:	931b      	str	r3, [sp, #108]	; 0x6c
  op_params.filter_height = params->filter_height;
   1d06e:	692b      	ldr	r3, [r5, #16]
   1d070:	931c      	str	r3, [sp, #112]	; 0x70
  op_params.filter_width = params->filter_width;
   1d072:	68eb      	ldr	r3, [r5, #12]
   1d074:	931d      	str	r3, [sp, #116]	; 0x74
  op_params.padding_values.height = data->padding.height;
   1d076:	9b08      	ldr	r3, [sp, #32]
   1d078:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
  op_params.padding_values.width = data->padding.width;
   1d07c:	9b07      	ldr	r3, [sp, #28]
   1d07e:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
  op_params.quantized_activation_min = activation_min;
   1d082:	9b05      	ldr	r3, [sp, #20]
   1d084:	931e      	str	r3, [sp, #120]	; 0x78
  op_params.quantized_activation_max = activation_max;
   1d086:	9b06      	ldr	r3, [sp, #24]
   1d088:	931f      	str	r3, [sp, #124]	; 0x7c
  if (input->type == kTfLiteUInt8) {
   1d08a:	f819 300a 	ldrb.w	r3, [r9, sl]
   1d08e:	2b03      	cmp	r3, #3
   1d090:	d111      	bne.n	1d0b6 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x10e>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d092:	f00a fb07 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d096:	6872      	ldr	r2, [r6, #4]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   1d098:	4621      	mov	r1, r4
   1d09a:	a811      	add	r0, sp, #68	; 0x44
   1d09c:	9203      	str	r2, [sp, #12]
   1d09e:	f00a fb01 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d0a2:	9a03      	ldr	r2, [sp, #12]
   1d0a4:	b104      	cbz	r4, 1d0a8 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x100>
   1d0a6:	6864      	ldr	r4, [r4, #4]
    reference_ops::MaxPool(
   1d0a8:	9400      	str	r4, [sp, #0]
   1d0aa:	ab11      	add	r3, sp, #68	; 0x44
   1d0ac:	a90b      	add	r1, sp, #44	; 0x2c
   1d0ae:	a817      	add	r0, sp, #92	; 0x5c
   1d0b0:	f010 fc87 	bl	2d9c2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
   1d0b4:	e7c3      	b.n	1d03e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x96>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1d0b6:	f00a faf5 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d0ba:	6872      	ldr	r2, [r6, #4]
        GetTensorShape(output), GetTensorData<int8_t>(output));
   1d0bc:	4621      	mov	r1, r4
   1d0be:	a811      	add	r0, sp, #68	; 0x44
   1d0c0:	9203      	str	r2, [sp, #12]
   1d0c2:	f00a faef 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d0c6:	9a03      	ldr	r2, [sp, #12]
   1d0c8:	b104      	cbz	r4, 1d0cc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x124>
   1d0ca:	6864      	ldr	r4, [r4, #4]
    reference_integer_ops::MaxPool(
   1d0cc:	9400      	str	r4, [sp, #0]
   1d0ce:	ab11      	add	r3, sp, #68	; 0x44
   1d0d0:	a90b      	add	r1, sp, #44	; 0x2c
   1d0d2:	a817      	add	r0, sp, #92	; 0x5c
   1d0d4:	f010 fe18 	bl	2dd08 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
   1d0d8:	e7b1      	b.n	1d03e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x96>
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
   1d0da:	697c      	ldr	r4, [r7, #20]
   1d0dc:	f7ef fdf2 	bl	ccc4 <TfLiteTypeGetName>
   1d0e0:	4903      	ldr	r1, [pc, #12]	; (1d0f0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x148>)
   1d0e2:	4602      	mov	r2, r0
   1d0e4:	4638      	mov	r0, r7
   1d0e6:	47a0      	blx	r4
      return kTfLiteError;
   1d0e8:	f04f 0801 	mov.w	r8, #1
   1d0ec:	e7ad      	b.n	1d04a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xa2>
   1d0ee:	bf00      	nop
   1d0f0:	000357c3 	.word	0x000357c3

0001d0f4 <_ZN6tflite3ops5micro14Register_PRELUEv>:
  }
}

}  // namespace activations

TfLiteRegistration Register_PRELU() {
   1d0f4:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/activations::PreluPrepare,
          /*invoke=*/activations::PreluEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1d0f6:	4604      	mov	r4, r0
TfLiteRegistration Register_PRELU() {
   1d0f8:	4606      	mov	r6, r0
          /*version=*/0};
   1d0fa:	4d04      	ldr	r5, [pc, #16]	; (1d10c <_ZN6tflite3ops5micro14Register_PRELUEv+0x18>)
   1d0fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d0fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d100:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1d108:	4630      	mov	r0, r6
   1d10a:	bd70      	pop	{r4, r5, r6, pc}
   1d10c:	00031b28 	.word	0x00031b28

0001d110 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
   1d110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, 0);
   1d114:	680b      	ldr	r3, [r1, #0]
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
   1d116:	ed2d 8b04 	vpush	{d8-d9}
  return &context->tensors[node->inputs->data[index]];
   1d11a:	685e      	ldr	r6, [r3, #4]
   1d11c:	689c      	ldr	r4, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   1d11e:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
   1d120:	f8d0 a008 	ldr.w	sl, [r0, #8]
   1d124:	685d      	ldr	r5, [r3, #4]
  int32_t output_multiplier_1 = 0;
   1d126:	2300      	movs	r3, #0
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
   1d128:	b0a5      	sub	sp, #148	; 0x94
   1d12a:	01aa      	lsls	r2, r5, #6
  int output_shift_1 = 0;
   1d12c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  int output_shift_2 = 0;
   1d130:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8 ||
   1d134:	f81a 3002 	ldrb.w	r3, [sl, r2]
  return &context->tensors[node->inputs->data[index]];
   1d138:	ea4f 1b86 	mov.w	fp, r6, lsl #6
   1d13c:	2b09      	cmp	r3, #9
TfLiteStatus PreluEval(TfLiteContext* context, TfLiteNode* node) {
   1d13e:	4607      	mov	r7, r0
   1d140:	eb0a 1686 	add.w	r6, sl, r6, lsl #6
   1d144:	eb0a 1484 	add.w	r4, sl, r4, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1d148:	eb0a 1585 	add.w	r5, sl, r5, lsl #6
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8 ||
   1d14c:	d003      	beq.n	1d156 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x46>
   1d14e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1d152:	2b03      	cmp	r3, #3
   1d154:	d126      	bne.n	1d1a4 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x94>
    double real_multiplier_1 = static_cast<double>(input->params.scale) /
   1d156:	68f0      	ldr	r0, [r6, #12]
   1d158:	f7ef f9d6 	bl	c508 <__aeabi_f2d>
   1d15c:	4680      	mov	r8, r0
                               static_cast<double>(output->params.scale);
   1d15e:	68e8      	ldr	r0, [r5, #12]
    double real_multiplier_1 = static_cast<double>(input->params.scale) /
   1d160:	4689      	mov	r9, r1
                               static_cast<double>(output->params.scale);
   1d162:	f7ef f9d1 	bl	c508 <__aeabi_f2d>
   1d166:	ec41 0b18 	vmov	d8, r0, r1
                               static_cast<double>(alpha->params.scale) /
   1d16a:	68e0      	ldr	r0, [r4, #12]
   1d16c:	f7ef f9cc 	bl	c508 <__aeabi_f2d>
    double real_multiplier_2 = static_cast<double>(input->params.scale) *
   1d170:	4642      	mov	r2, r8
   1d172:	464b      	mov	r3, r9
   1d174:	f7f3 f99a 	bl	104ac <__aeabi_dmul>
   1d178:	ec53 2b18 	vmov	r2, r3, d8
   1d17c:	f7f3 fac0 	bl	10700 <__aeabi_ddiv>
   1d180:	ec41 0b19 	vmov	d9, r0, r1
    double real_multiplier_1 = static_cast<double>(input->params.scale) /
   1d184:	ec53 2b18 	vmov	r2, r3, d8
   1d188:	4640      	mov	r0, r8
   1d18a:	4649      	mov	r1, r9
   1d18c:	f7f3 fab8 	bl	10700 <__aeabi_ddiv>
    QuantizeMultiplier(real_multiplier_1, &output_multiplier_1,
   1d190:	ab08      	add	r3, sp, #32
   1d192:	aa07      	add	r2, sp, #28
   1d194:	f003 fef2 	bl	20f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    QuantizeMultiplier(real_multiplier_2, &output_multiplier_2,
   1d198:	ec51 0b19 	vmov	r0, r1, d9
   1d19c:	ab0a      	add	r3, sp, #40	; 0x28
   1d19e:	aa09      	add	r2, sp, #36	; 0x24
   1d1a0:	f003 feec 	bl	20f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  switch (input->type) {
   1d1a4:	f81a 000b 	ldrb.w	r0, [sl, fp]
   1d1a8:	2803      	cmp	r0, #3
   1d1aa:	d02c      	beq.n	1d206 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xf6>
   1d1ac:	2809      	cmp	r0, #9
   1d1ae:	d05c      	beq.n	1d26a <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x15a>
   1d1b0:	2801      	cmp	r0, #1
   1d1b2:	f040 8085 	bne.w	1d2c0 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x1b0>
          GetTensorShape(input), GetTensorData<float>(input),
   1d1b6:	4631      	mov	r1, r6
   1d1b8:	a811      	add	r0, sp, #68	; 0x44
   1d1ba:	f00a fa73 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
          GetTensorShape(alpha), GetTensorData<float>(alpha),
   1d1be:	4621      	mov	r1, r4
   1d1c0:	a817      	add	r0, sp, #92	; 0x5c
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d1c2:	6877      	ldr	r7, [r6, #4]
   1d1c4:	f00a fa6e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1d1c8:	b104      	cbz	r4, 1d1cc <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xbc>
   1d1ca:	6864      	ldr	r4, [r4, #4]
          GetTensorShape(output), GetTensorData<float>(output));
   1d1cc:	ae1d      	add	r6, sp, #116	; 0x74
   1d1ce:	4629      	mov	r1, r5
   1d1d0:	4630      	mov	r0, r6
   1d1d2:	f00a fa67 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      BroadcastPrelu4DSlowFloat(
   1d1d6:	686b      	ldr	r3, [r5, #4]
   1d1d8:	4639      	mov	r1, r7
   1d1da:	aa17      	add	r2, sp, #92	; 0x5c
   1d1dc:	e9cd 6300 	strd	r6, r3, [sp]
   1d1e0:	a811      	add	r0, sp, #68	; 0x44
   1d1e2:	4623      	mov	r3, r4
   1d1e4:	f010 fe9e 	bl	2df24 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf>
          GetTensorShape(output), GetTensorData<float>(output));
   1d1e8:	4630      	mov	r0, r6
   1d1ea:	f00a fa16 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(alpha), GetTensorData<float>(alpha),
   1d1ee:	a817      	add	r0, sp, #92	; 0x5c
   1d1f0:	f00a fa13 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(input), GetTensorData<float>(input),
   1d1f4:	a811      	add	r0, sp, #68	; 0x44
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d1f6:	f00a fa10 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
   1d1fa:	2000      	movs	r0, #0
}
   1d1fc:	b025      	add	sp, #148	; 0x94
   1d1fe:	ecbd 8b04 	vpop	{d8-d9}
   1d202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      op_params.input_offset = -input->params.zero_point;
   1d206:	6933      	ldr	r3, [r6, #16]
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d208:	4631      	mov	r1, r6
      op_params.input_offset = -input->params.zero_point;
   1d20a:	425b      	negs	r3, r3
   1d20c:	931d      	str	r3, [sp, #116]	; 0x74
      op_params.alpha_offset = -alpha->params.zero_point;
   1d20e:	6923      	ldr	r3, [r4, #16]
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d210:	a80b      	add	r0, sp, #44	; 0x2c
      op_params.alpha_offset = -alpha->params.zero_point;
   1d212:	425b      	negs	r3, r3
   1d214:	931e      	str	r3, [sp, #120]	; 0x78
      op_params.output_offset = output->params.zero_point;
   1d216:	692b      	ldr	r3, [r5, #16]
   1d218:	931f      	str	r3, [sp, #124]	; 0x7c
      op_params.output_multiplier_1 = output_multiplier_1;
   1d21a:	9b07      	ldr	r3, [sp, #28]
   1d21c:	9320      	str	r3, [sp, #128]	; 0x80
      op_params.output_shift_1 = output_shift_1;
   1d21e:	9b08      	ldr	r3, [sp, #32]
   1d220:	9321      	str	r3, [sp, #132]	; 0x84
      op_params.output_multiplier_2 = output_multiplier_2;
   1d222:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d224:	9322      	str	r3, [sp, #136]	; 0x88
      op_params.output_shift_2 = output_shift_2;
   1d226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d228:	9323      	str	r3, [sp, #140]	; 0x8c
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d22a:	f00a fa3b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1d22e:	6872      	ldr	r2, [r6, #4]
          GetTensorShape(alpha), GetTensorData<uint8_t>(alpha),
   1d230:	4621      	mov	r1, r4
   1d232:	a811      	add	r0, sp, #68	; 0x44
   1d234:	9205      	str	r2, [sp, #20]
   1d236:	f00a fa35 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1d23a:	6866      	ldr	r6, [r4, #4]
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   1d23c:	ac17      	add	r4, sp, #92	; 0x5c
   1d23e:	4629      	mov	r1, r5
   1d240:	4620      	mov	r0, r4
   1d242:	f00a fa2f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      reference_ops::BroadcastPrelu4DSlow(
   1d246:	686b      	ldr	r3, [r5, #4]
   1d248:	9a05      	ldr	r2, [sp, #20]
   1d24a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1d24e:	9600      	str	r6, [sp, #0]
   1d250:	ab11      	add	r3, sp, #68	; 0x44
   1d252:	a90b      	add	r1, sp, #44	; 0x2c
   1d254:	a81d      	add	r0, sp, #116	; 0x74
   1d256:	f010 fedd 	bl	2e014 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
          GetTensorShape(output), GetTensorData<uint8_t>(output));
   1d25a:	4620      	mov	r0, r4
   1d25c:	f00a f9dd 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
          GetTensorShape(alpha), GetTensorData<uint8_t>(alpha),
   1d260:	a811      	add	r0, sp, #68	; 0x44
   1d262:	f00a f9da 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
          op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1d266:	a80b      	add	r0, sp, #44	; 0x2c
   1d268:	e7c5      	b.n	1d1f6 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xe6>
      op_params.input_offset = -input->params.zero_point;
   1d26a:	6933      	ldr	r3, [r6, #16]
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1d26c:	4631      	mov	r1, r6
      op_params.input_offset = -input->params.zero_point;
   1d26e:	425b      	negs	r3, r3
   1d270:	931d      	str	r3, [sp, #116]	; 0x74
      op_params.alpha_offset = -alpha->params.zero_point;
   1d272:	6923      	ldr	r3, [r4, #16]
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1d274:	a80b      	add	r0, sp, #44	; 0x2c
      op_params.alpha_offset = -alpha->params.zero_point;
   1d276:	425b      	negs	r3, r3
   1d278:	931e      	str	r3, [sp, #120]	; 0x78
      op_params.output_offset = output->params.zero_point;
   1d27a:	692b      	ldr	r3, [r5, #16]
   1d27c:	931f      	str	r3, [sp, #124]	; 0x7c
      op_params.output_multiplier_1 = output_multiplier_1;
   1d27e:	9b07      	ldr	r3, [sp, #28]
   1d280:	9320      	str	r3, [sp, #128]	; 0x80
      op_params.output_shift_1 = output_shift_1;
   1d282:	9b08      	ldr	r3, [sp, #32]
   1d284:	9321      	str	r3, [sp, #132]	; 0x84
      op_params.output_multiplier_2 = output_multiplier_2;
   1d286:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1d288:	9322      	str	r3, [sp, #136]	; 0x88
      op_params.output_shift_2 = output_shift_2;
   1d28a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d28c:	9323      	str	r3, [sp, #140]	; 0x8c
          op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1d28e:	f00a fa09 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1d292:	6872      	ldr	r2, [r6, #4]
          GetTensorShape(alpha), GetTensorData<int8_t>(alpha),
   1d294:	4621      	mov	r1, r4
   1d296:	a811      	add	r0, sp, #68	; 0x44
   1d298:	9205      	str	r2, [sp, #20]
   1d29a:	f00a fa03 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1d29e:	6866      	ldr	r6, [r4, #4]
          GetTensorShape(output), GetTensorData<int8_t>(output));
   1d2a0:	ac17      	add	r4, sp, #92	; 0x5c
   1d2a2:	4629      	mov	r1, r5
   1d2a4:	4620      	mov	r0, r4
   1d2a6:	f00a f9fd 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      reference_ops::BroadcastPrelu4DSlow(
   1d2aa:	686b      	ldr	r3, [r5, #4]
   1d2ac:	9a05      	ldr	r2, [sp, #20]
   1d2ae:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1d2b2:	9600      	str	r6, [sp, #0]
   1d2b4:	ab11      	add	r3, sp, #68	; 0x44
   1d2b6:	a90b      	add	r1, sp, #44	; 0x2c
   1d2b8:	a81d      	add	r0, sp, #116	; 0x74
   1d2ba:	f010 ff33 	bl	2e124 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
   1d2be:	e7cc      	b.n	1d25a <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x14a>
      TF_LITE_KERNEL_LOG(
   1d2c0:	697c      	ldr	r4, [r7, #20]
   1d2c2:	f7ef fcff 	bl	ccc4 <TfLiteTypeGetName>
   1d2c6:	4903      	ldr	r1, [pc, #12]	; (1d2d4 <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0x1c4>)
   1d2c8:	4602      	mov	r2, r0
   1d2ca:	4638      	mov	r0, r7
   1d2cc:	47a0      	blx	r4
      return kTfLiteError;
   1d2ce:	2001      	movs	r0, #1
   1d2d0:	e794      	b.n	1d1fc <_ZN6tflite3ops5micro11activations9PreluEvalEP13TfLiteContextP10TfLiteNode+0xec>
   1d2d2:	bf00      	nop
   1d2d4:	000357e4 	.word	0x000357e4

0001d2d8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1d2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
   1d2dc:	f8d1 8010 	ldr.w	r8, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1d2e0:	4605      	mov	r5, r0
   1d2e2:	b086      	sub	sp, #24
  TFLITE_DCHECK(node->user_data != nullptr);
   1d2e4:	f1b8 0f00 	cmp.w	r8, #0
   1d2e8:	d101      	bne.n	1d2ee <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
   1d2ea:	f013 fd9a 	bl	30e22 <abort>
  OpData* data = static_cast<OpData*>(node->user_data);

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1d2ee:	680b      	ldr	r3, [r1, #0]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1d2f0:	681c      	ldr	r4, [r3, #0]
   1d2f2:	2c01      	cmp	r4, #1
   1d2f4:	d00d      	beq.n	1d312 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
   1d2f6:	2601      	movs	r6, #1
   1d2f8:	4b40      	ldr	r3, [pc, #256]	; (1d3fc <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
   1d2fa:	e9cd 4602 	strd	r4, r6, [sp, #8]
   1d2fe:	9301      	str	r3, [sp, #4]
   1d300:	4b3f      	ldr	r3, [pc, #252]	; (1d400 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x128>)
   1d302:	9300      	str	r3, [sp, #0]
   1d304:	2332      	movs	r3, #50	; 0x32
   1d306:	6944      	ldr	r4, [r0, #20]
  const TfLiteTensor* input = GetInput(context, node, 0);
  TfLiteTensor* output = GetOutput(context, node, 0);

  // TODO(b/128934713): Add support for fixed-point per-channel quantization.
  // Currently this only support affine per-layer quantization.
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
   1d308:	4a3e      	ldr	r2, [pc, #248]	; (1d404 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
   1d30a:	493f      	ldr	r1, [pc, #252]	; (1d408 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
   1d30c:	47a0      	blx	r4
   1d30e:	4634      	mov	r4, r6
   1d310:	e00e      	b.n	1d330 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x58>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1d312:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1d314:	6816      	ldr	r6, [r2, #0]
   1d316:	2e01      	cmp	r6, #1
   1d318:	d00e      	beq.n	1d338 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x60>
   1d31a:	4b38      	ldr	r3, [pc, #224]	; (1d3fc <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x124>)
   1d31c:	e9cd 6402 	strd	r6, r4, [sp, #8]
   1d320:	9301      	str	r3, [sp, #4]
   1d322:	4b3a      	ldr	r3, [pc, #232]	; (1d40c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x134>)
   1d324:	4a37      	ldr	r2, [pc, #220]	; (1d404 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
   1d326:	9300      	str	r3, [sp, #0]
   1d328:	6945      	ldr	r5, [r0, #20]
   1d32a:	2333      	movs	r3, #51	; 0x33
   1d32c:	4936      	ldr	r1, [pc, #216]	; (1d408 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x130>)
   1d32e:	47a8      	blx	r5

    QuantizeMultiplier(effective_scale, &data->output_multiplier,
                       &data->output_shift);
  }
  return kTfLiteOk;
}
   1d330:	4620      	mov	r0, r4
   1d332:	b006      	add	sp, #24
   1d334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return &context->tensors[node->outputs->data[index]];
   1d338:	6851      	ldr	r1, [r2, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
   1d33a:	6887      	ldr	r7, [r0, #8]
   1d33c:	ea4f 1c81 	mov.w	ip, r1, lsl #6
   1d340:	eb07 1181 	add.w	r1, r7, r1, lsl #6
  TF_LITE_ENSURE_EQ(context, output->quantization.type,
   1d344:	f891 4030 	ldrb.w	r4, [r1, #48]	; 0x30
   1d348:	2c01      	cmp	r4, #1
   1d34a:	d008      	beq.n	1d35e <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x86>
   1d34c:	4b30      	ldr	r3, [pc, #192]	; (1d410 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x138>)
   1d34e:	e9cd 4602 	strd	r4, r6, [sp, #8]
   1d352:	9301      	str	r3, [sp, #4]
   1d354:	4b2f      	ldr	r3, [pc, #188]	; (1d414 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
   1d356:	9300      	str	r3, [sp, #0]
   1d358:	6944      	ldr	r4, [r0, #20]
   1d35a:	233a      	movs	r3, #58	; 0x3a
   1d35c:	e7d4      	b.n	1d308 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x30>
  const auto* affine_quantization =
   1d35e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
   1d360:	b93a      	cbnz	r2, 1d372 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x9a>
   1d362:	4b2d      	ldr	r3, [pc, #180]	; (1d418 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
   1d364:	9300      	str	r3, [sp, #0]
   1d366:	233e      	movs	r3, #62	; 0x3e
   1d368:	6945      	ldr	r5, [r0, #20]
  TF_LITE_ENSURE(context, input->type == kTfLiteFloat32 ||
   1d36a:	4a26      	ldr	r2, [pc, #152]	; (1d404 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
   1d36c:	492b      	ldr	r1, [pc, #172]	; (1d41c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1d36e:	47a8      	blx	r5
   1d370:	e7de      	b.n	1d330 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x58>
  TF_LITE_ENSURE(context, affine_quantization->scale);
   1d372:	6812      	ldr	r2, [r2, #0]
   1d374:	b922      	cbnz	r2, 1d380 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
   1d376:	4b2a      	ldr	r3, [pc, #168]	; (1d420 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   1d378:	9300      	str	r3, [sp, #0]
   1d37a:	6945      	ldr	r5, [r0, #20]
   1d37c:	233f      	movs	r3, #63	; 0x3f
   1d37e:	e7f4      	b.n	1d36a <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x92>
  TF_LITE_ENSURE(context, affine_quantization->scale->size == 1);
   1d380:	6812      	ldr	r2, [r2, #0]
   1d382:	2a01      	cmp	r2, #1
   1d384:	d004      	beq.n	1d390 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xb8>
   1d386:	4b27      	ldr	r3, [pc, #156]	; (1d424 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
   1d388:	9300      	str	r3, [sp, #0]
   1d38a:	6945      	ldr	r5, [r0, #20]
   1d38c:	2340      	movs	r3, #64	; 0x40
   1d38e:	e7ec      	b.n	1d36a <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x92>
  return &context->tensors[node->inputs->data[index]];
   1d390:	685e      	ldr	r6, [r3, #4]
   1d392:	01b2      	lsls	r2, r6, #6
  TF_LITE_ENSURE(context, input->type == kTfLiteFloat32 ||
   1d394:	5cbb      	ldrb	r3, [r7, r2]
   1d396:	eb07 1686 	add.w	r6, r7, r6, lsl #6
   1d39a:	f003 02f7 	and.w	r2, r3, #247	; 0xf7
   1d39e:	2a01      	cmp	r2, #1
   1d3a0:	d006      	beq.n	1d3b0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>
   1d3a2:	2b07      	cmp	r3, #7
   1d3a4:	d004      	beq.n	1d3b0 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>
   1d3a6:	4b20      	ldr	r3, [pc, #128]	; (1d428 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
   1d3a8:	9300      	str	r3, [sp, #0]
   1d3aa:	6945      	ldr	r5, [r0, #20]
   1d3ac:	2342      	movs	r3, #66	; 0x42
   1d3ae:	e7dc      	b.n	1d36a <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x92>
  TF_LITE_ENSURE(context,
   1d3b0:	f817 200c 	ldrb.w	r2, [r7, ip]
   1d3b4:	2a03      	cmp	r2, #3
   1d3b6:	d01f      	beq.n	1d3f8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x120>
   1d3b8:	2a09      	cmp	r2, #9
   1d3ba:	d008      	beq.n	1d3ce <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xf6>
   1d3bc:	4b1b      	ldr	r3, [pc, #108]	; (1d42c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
   1d3be:	4628      	mov	r0, r5
   1d3c0:	9300      	str	r3, [sp, #0]
   1d3c2:	696e      	ldr	r6, [r5, #20]
   1d3c4:	2345      	movs	r3, #69	; 0x45
   1d3c6:	4a0f      	ldr	r2, [pc, #60]	; (1d404 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x12c>)
   1d3c8:	4914      	ldr	r1, [pc, #80]	; (1d41c <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1d3ca:	47b0      	blx	r6
   1d3cc:	e7b0      	b.n	1d330 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x58>
  if ((input->type == kTfLiteInt16 || input->type == kTfLiteInt8) &&
   1d3ce:	2b07      	cmp	r3, #7
   1d3d0:	d001      	beq.n	1d3d6 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
   1d3d2:	2b09      	cmp	r3, #9
   1d3d4:	d110      	bne.n	1d3f8 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x120>
        static_cast<double>(input->params.scale / output->params.scale);
   1d3d6:	ed96 7a03 	vldr	s14, [r6, #12]
   1d3da:	edd1 7a03 	vldr	s15, [r1, #12]
    double effective_scale =
   1d3de:	eec7 7a27 	vdiv.f32	s15, s14, s15
    QuantizeMultiplier(effective_scale, &data->output_multiplier,
   1d3e2:	f108 0304 	add.w	r3, r8, #4
    double effective_scale =
   1d3e6:	ee17 0a90 	vmov	r0, s15
    QuantizeMultiplier(effective_scale, &data->output_multiplier,
   1d3ea:	9305      	str	r3, [sp, #20]
    double effective_scale =
   1d3ec:	f7ef f88c 	bl	c508 <__aeabi_f2d>
    QuantizeMultiplier(effective_scale, &data->output_multiplier,
   1d3f0:	4642      	mov	r2, r8
   1d3f2:	9b05      	ldr	r3, [sp, #20]
   1d3f4:	f003 fdc2 	bl	20f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  return kTfLiteOk;
   1d3f8:	2400      	movs	r4, #0
   1d3fa:	e799      	b.n	1d330 <_ZN6tflite3ops5micro8quantize7PrepareEP13TfLiteContextP10TfLiteNode+0x58>
   1d3fc:	00035884 	.word	0x00035884
   1d400:	00034b06 	.word	0x00034b06
   1d404:	0003581c 	.word	0x0003581c
   1d408:	00034aec 	.word	0x00034aec
   1d40c:	00034b16 	.word	0x00034b16
   1d410:	00034dd6 	.word	0x00034dd6
   1d414:	00035846 	.word	0x00035846
   1d418:	00034e0a 	.word	0x00034e0a
   1d41c:	00034c0c 	.word	0x00034c0c
   1d420:	00034e1e 	.word	0x00034e1e
   1d424:	00035860 	.word	0x00035860
   1d428:	00035886 	.word	0x00035886
   1d42c:	000358e1 	.word	0x000358e1

0001d430 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1d430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d434:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->user_data != nullptr);
   1d438:	f8d1 b010 	ldr.w	fp, [r1, #16]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1d43c:	4680      	mov	r8, r0
   1d43e:	b08f      	sub	sp, #60	; 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
   1d440:	f1bb 0f00 	cmp.w	fp, #0
   1d444:	d101      	bne.n	1d44a <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1a>
   1d446:	f013 fcec 	bl	30e22 <abort>
   1d44a:	680b      	ldr	r3, [r1, #0]
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, 0);
   1d44c:	6887      	ldr	r7, [r0, #8]
   1d44e:	685d      	ldr	r5, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   1d450:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   1d452:	ea4f 1985 	mov.w	r9, r5, lsl #6

  tflite::QuantizationParams op_params;
  op_params.zero_point = output->params.zero_point;
  op_params.scale = static_cast<double>(output->params.scale);

  if (input->type == kTfLiteFloat32) {
   1d456:	f817 6009 	ldrb.w	r6, [r7, r9]
  return &context->tensors[node->outputs->data[index]];
   1d45a:	685c      	ldr	r4, [r3, #4]
   1d45c:	2e01      	cmp	r6, #1
   1d45e:	ea4f 1a84 	mov.w	sl, r4, lsl #6
  return &context->tensors[node->inputs->data[index]];
   1d462:	eb07 1585 	add.w	r5, r7, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1d466:	eb07 1484 	add.w	r4, r7, r4, lsl #6
   1d46a:	d17f      	bne.n	1d56c <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x13c>
    switch (output->type) {
   1d46c:	f817 300a 	ldrb.w	r3, [r7, sl]
  op_params.scale = static_cast<double>(output->params.scale);
   1d470:	ed94 8a03 	vldr	s16, [r4, #12]
    switch (output->type) {
   1d474:	2b03      	cmp	r3, #3
  op_params.zero_point = output->params.zero_point;
   1d476:	f8d4 9010 	ldr.w	r9, [r4, #16]
    switch (output->type) {
   1d47a:	d031      	beq.n	1d4e0 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
   1d47c:	2b09      	cmp	r3, #9
   1d47e:	d161      	bne.n	1d544 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x114>
      case kTfLiteInt8:
        reference_ops::AffineQuantize(
            op_params, GetTensorShape(input), GetTensorData<float>(input),
   1d480:	4629      	mov	r1, r5
   1d482:	a802      	add	r0, sp, #8
   1d484:	f00a f90e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<int8_t>(output));
   1d488:	4621      	mov	r1, r4
   1d48a:	a808      	add	r0, sp, #32
   1d48c:	686d      	ldr	r5, [r5, #4]
   1d48e:	f00a f909 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                           const InputT* input_data,
                           const RuntimeShape& output_shape,
                           OutputT* output_data) {
  const int32 zero_point = op_params.zero_point;
  const double scale = op_params.scale;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1d492:	a908      	add	r1, sp, #32
   1d494:	a802      	add	r0, sp, #8
   1d496:	f00a f8dc 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d49a:	6867      	ldr	r7, [r4, #4]
   1d49c:	4606      	mov	r6, r0
  static constexpr int32 min_val = std::numeric_limits<OutputT>::min();
  static constexpr int32 max_val = std::numeric_limits<OutputT>::max();

  for (int i = 0; i < flat_size; i++) {
   1d49e:	2400      	movs	r4, #0
    const InputT val = input_data[i];
    int32 unclamped =
        static_cast<int32>(TfLiteRound(val / static_cast<float>(scale))) +
        zero_point;
    int32 clamped = std::min(std::max(unclamped, min_val), max_val);
    output_data[i] = clamped;
   1d4a0:	f06f 087f 	mvn.w	r8, #127	; 0x7f
  for (int i = 0; i < flat_size; i++) {
   1d4a4:	42a6      	cmp	r6, r4
   1d4a6:	dd45      	ble.n	1d534 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x104>
    const InputT val = input_data[i];
   1d4a8:	ecf5 7a01 	vldmia	r5!, {s15}
   1d4ac:	eec7 7a88 	vdiv.f32	s15, s15, s16
   1d4b0:	ee17 0a90 	vmov	r0, s15
   1d4b4:	f7ef f828 	bl	c508 <__aeabi_f2d>
   1d4b8:	f005 fb3c 	bl	22b34 <round>
   1d4bc:	f7f3 fab8 	bl	10a30 <__aeabi_d2f>
        static_cast<int32>(TfLiteRound(val / static_cast<float>(scale))) +
   1d4c0:	ee07 0a90 	vmov	s15, r0
   1d4c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1d4c8:	ee17 3a90 	vmov	r3, s15
   1d4cc:	444b      	add	r3, r9
    output_data[i] = clamped;
   1d4ce:	2b7f      	cmp	r3, #127	; 0x7f
   1d4d0:	bfa8      	it	ge
   1d4d2:	237f      	movge	r3, #127	; 0x7f
   1d4d4:	4543      	cmp	r3, r8
   1d4d6:	bfb8      	it	lt
   1d4d8:	4643      	movlt	r3, r8
   1d4da:	553b      	strb	r3, [r7, r4]
  for (int i = 0; i < flat_size; i++) {
   1d4dc:	3401      	adds	r4, #1
   1d4de:	e7e1      	b.n	1d4a4 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x74>
        break;
      case kTfLiteUInt8:
        reference_ops::AffineQuantize(
            op_params, GetTensorShape(input), GetTensorData<float>(input),
   1d4e0:	4629      	mov	r1, r5
   1d4e2:	a802      	add	r0, sp, #8
   1d4e4:	f00a f8de 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
            GetTensorShape(output), GetTensorData<uint8_t>(output));
   1d4e8:	4621      	mov	r1, r4
   1d4ea:	a808      	add	r0, sp, #32
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d4ec:	686d      	ldr	r5, [r5, #4]
   1d4ee:	f00a f8d9 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1d4f2:	a908      	add	r1, sp, #32
   1d4f4:	a802      	add	r0, sp, #8
   1d4f6:	f00a f8ac 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d4fa:	6867      	ldr	r7, [r4, #4]
   1d4fc:	4606      	mov	r6, r0
  for (int i = 0; i < flat_size; i++) {
   1d4fe:	2400      	movs	r4, #0
   1d500:	42a6      	cmp	r6, r4
   1d502:	dd17      	ble.n	1d534 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x104>
    const InputT val = input_data[i];
   1d504:	ecf5 7a01 	vldmia	r5!, {s15}
   1d508:	eec7 7a88 	vdiv.f32	s15, s15, s16
   1d50c:	ee17 0a90 	vmov	r0, s15
   1d510:	f7ee fffa 	bl	c508 <__aeabi_f2d>
   1d514:	f005 fb0e 	bl	22b34 <round>
   1d518:	f7f3 fa8a 	bl	10a30 <__aeabi_d2f>
        static_cast<int32>(TfLiteRound(val / static_cast<float>(scale))) +
   1d51c:	ee07 0a90 	vmov	s15, r0
   1d520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1d524:	ee17 3a90 	vmov	r3, s15
   1d528:	444b      	add	r3, r9
    output_data[i] = clamped;
   1d52a:	f383 0308 	usat	r3, #8, r3
   1d52e:	553b      	strb	r3, [r7, r4]
  for (int i = 0; i < flat_size; i++) {
   1d530:	3401      	adds	r4, #1
   1d532:	e7e5      	b.n	1d500 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0xd0>
   1d534:	a808      	add	r0, sp, #32
   1d536:	f00a f870 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
            op_params, GetTensorShape(input), GetTensorData<float>(input),
   1d53a:	a802      	add	r0, sp, #8
   1d53c:	f00a f86d 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
                       TfLiteTypeGetName(input->type),
                       TfLiteTypeGetName(output->type));
    return kTfLiteError;
  }

  return kTfLiteOk;
   1d540:	2600      	movs	r6, #0
   1d542:	e00d      	b.n	1d560 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x130>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1d544:	6944      	ldr	r4, [r0, #20]
   1d546:	4630      	mov	r0, r6
   1d548:	f7ef fbbc 	bl	ccc4 <TfLiteTypeGetName>
   1d54c:	9001      	str	r0, [sp, #4]
   1d54e:	f817 000a 	ldrb.w	r0, [r7, sl]
   1d552:	f7ef fbb7 	bl	ccc4 <TfLiteTypeGetName>
   1d556:	9a01      	ldr	r2, [sp, #4]
   1d558:	4603      	mov	r3, r0
   1d55a:	4938      	ldr	r1, [pc, #224]	; (1d63c <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x20c>)
   1d55c:	4640      	mov	r0, r8
   1d55e:	47a0      	blx	r4
}
   1d560:	4630      	mov	r0, r6
   1d562:	b00f      	add	sp, #60	; 0x3c
   1d564:	ecbd 8b02 	vpop	{d8}
   1d568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (input->type == kTfLiteInt16) {
   1d56c:	2e07      	cmp	r6, #7
   1d56e:	d126      	bne.n	1d5be <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x18e>
    size_t size = ElementCount(*input->dims);
   1d570:	68a8      	ldr	r0, [r5, #8]
   1d572:	f012 fea9 	bl	302c8 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
   1d576:	f817 300a 	ldrb.w	r3, [r7, sl]
    size_t size = ElementCount(*input->dims);
   1d57a:	4606      	mov	r6, r0
    switch (output->type) {
   1d57c:	2b09      	cmp	r3, #9
   1d57e:	d147      	bne.n	1d610 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1e0>
        reference_ops::Requantize(
   1d580:	e9db ab00 	ldrd	sl, fp, [fp]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d584:	f8d5 9004 	ldr.w	r9, [r5, #4]
            data->output_shift, input->params.zero_point,
   1d588:	692b      	ldr	r3, [r5, #16]
        reference_ops::Requantize(
   1d58a:	6927      	ldr	r7, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d58c:	6865      	ldr	r5, [r4, #4]
    output_data[i] = static_cast<output_type>(clamped_output);
   1d58e:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   1d592:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
   1d594:	42a6      	cmp	r6, r4
   1d596:	ddd3      	ble.n	1d540 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x110>
    const int32_t input = input_data[i] - input_zeropoint;
   1d598:	f939 0014 	ldrsh.w	r0, [r9, r4, lsl #1]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
   1d59c:	465a      	mov	r2, fp
   1d59e:	1ac0      	subs	r0, r0, r3
   1d5a0:	4651      	mov	r1, sl
   1d5a2:	9301      	str	r3, [sp, #4]
   1d5a4:	f7fb fee8 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
   1d5a8:	4438      	add	r0, r7
    output_data[i] = static_cast<output_type>(clamped_output);
   1d5aa:	4540      	cmp	r0, r8
   1d5ac:	bfb8      	it	lt
   1d5ae:	4640      	movlt	r0, r8
   1d5b0:	287f      	cmp	r0, #127	; 0x7f
   1d5b2:	bfa8      	it	ge
   1d5b4:	207f      	movge	r0, #127	; 0x7f
  for (int i = 0; i < size; ++i) {
   1d5b6:	9b01      	ldr	r3, [sp, #4]
    output_data[i] = static_cast<output_type>(clamped_output);
   1d5b8:	5528      	strb	r0, [r5, r4]
  for (int i = 0; i < size; ++i) {
   1d5ba:	3401      	adds	r4, #1
   1d5bc:	e7ea      	b.n	1d594 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x164>
  } else if (input->type == kTfLiteInt8) {
   1d5be:	2e09      	cmp	r6, #9
   1d5c0:	d138      	bne.n	1d634 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x204>
    size_t size = ElementCount(*input->dims);
   1d5c2:	68a8      	ldr	r0, [r5, #8]
   1d5c4:	f012 fe80 	bl	302c8 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
    switch (output->type) {
   1d5c8:	f817 300a 	ldrb.w	r3, [r7, sl]
    size_t size = ElementCount(*input->dims);
   1d5cc:	4606      	mov	r6, r0
    switch (output->type) {
   1d5ce:	2b09      	cmp	r3, #9
   1d5d0:	d11e      	bne.n	1d610 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1e0>
        reference_ops::Requantize(
   1d5d2:	e9db 9b00 	ldrd	r9, fp, [fp]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1d5d6:	f8d5 a004 	ldr.w	sl, [r5, #4]
            data->output_shift, input->params.zero_point,
   1d5da:	692b      	ldr	r3, [r5, #16]
        reference_ops::Requantize(
   1d5dc:	6927      	ldr	r7, [r4, #16]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1d5de:	6865      	ldr	r5, [r4, #4]
    output_data[i] = static_cast<output_type>(clamped_output);
   1d5e0:	f06f 087f 	mvn.w	r8, #127	; 0x7f
   1d5e4:	2400      	movs	r4, #0
  for (int i = 0; i < size; ++i) {
   1d5e6:	42a6      	cmp	r6, r4
   1d5e8:	ddaa      	ble.n	1d540 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x110>
    const int32_t input = input_data[i] - input_zeropoint;
   1d5ea:	f91a 0004 	ldrsb.w	r0, [sl, r4]
        MultiplyByQuantizedMultiplier(input, effective_scale_multiplier,
   1d5ee:	465a      	mov	r2, fp
   1d5f0:	1ac0      	subs	r0, r0, r3
   1d5f2:	4649      	mov	r1, r9
   1d5f4:	9301      	str	r3, [sp, #4]
   1d5f6:	f7fb febf 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                      effective_scale_shift) +
   1d5fa:	4438      	add	r0, r7
    output_data[i] = static_cast<output_type>(clamped_output);
   1d5fc:	4540      	cmp	r0, r8
   1d5fe:	bfb8      	it	lt
   1d600:	4640      	movlt	r0, r8
   1d602:	287f      	cmp	r0, #127	; 0x7f
   1d604:	bfa8      	it	ge
   1d606:	207f      	movge	r0, #127	; 0x7f
  for (int i = 0; i < size; ++i) {
   1d608:	9b01      	ldr	r3, [sp, #4]
    output_data[i] = static_cast<output_type>(clamped_output);
   1d60a:	5528      	strb	r0, [r5, r4]
  for (int i = 0; i < size; ++i) {
   1d60c:	3401      	adds	r4, #1
   1d60e:	e7ea      	b.n	1d5e6 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1b6>
        TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1d610:	f8d8 4014 	ldr.w	r4, [r8, #20]
   1d614:	f817 0009 	ldrb.w	r0, [r7, r9]
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1d618:	f7ef fb54 	bl	ccc4 <TfLiteTypeGetName>
   1d61c:	9001      	str	r0, [sp, #4]
   1d61e:	f817 000a 	ldrb.w	r0, [r7, sl]
   1d622:	f7ef fb4f 	bl	ccc4 <TfLiteTypeGetName>
   1d626:	9a01      	ldr	r2, [sp, #4]
   1d628:	4603      	mov	r3, r0
   1d62a:	4904      	ldr	r1, [pc, #16]	; (1d63c <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x20c>)
   1d62c:	4640      	mov	r0, r8
   1d62e:	47a0      	blx	r4
    return kTfLiteError;
   1d630:	2601      	movs	r6, #1
   1d632:	e795      	b.n	1d560 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x130>
    TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1d634:	6944      	ldr	r4, [r0, #20]
   1d636:	4630      	mov	r0, r6
   1d638:	e7ee      	b.n	1d618 <_ZN6tflite3ops5micro8quantize4EvalEP13TfLiteContextP10TfLiteNode+0x1e8>
   1d63a:	bf00      	nop
   1d63c:	0003508f 	.word	0x0003508f

0001d640 <_ZN6tflite3ops5micro17Register_QUANTIZEEv>:
}  // namespace quantize

// This Op (QUANTIZE) quantizes the input and produces quantized output.
// AffineQuantize takes scale and zero point and quantizes the float value to
// quantized output, in int8 or uint8 format.
TfLiteRegistration Register_QUANTIZE() {
   1d640:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/quantize::Prepare,
          /*invoke=*/quantize::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1d642:	4604      	mov	r4, r0
TfLiteRegistration Register_QUANTIZE() {
   1d644:	4606      	mov	r6, r0
          /*version=*/0};
   1d646:	4d04      	ldr	r5, [pc, #16]	; (1d658 <_ZN6tflite3ops5micro17Register_QUANTIZEEv+0x18>)
   1d648:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d64a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d64c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1d654:	4630      	mov	r0, r6
   1d656:	bd70      	pop	{r4, r5, r6, pc}
   1d658:	00031b48 	.word	0x00031b48

0001d65c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>:
namespace reduce {

constexpr int kMaxNumberOfAxis = 4;
constexpr int kMaxNumberOfReducedAxis = 2;

TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {
   1d65c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}

  // Outputs Tensor (dtype depends on quantization):
  // [0] = Output

  // Validate number of inputs and outputs
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 2);
   1d660:	680b      	ldr	r3, [r1, #0]
TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {
   1d662:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 2);
   1d664:	681f      	ldr	r7, [r3, #0]
   1d666:	2f02      	cmp	r7, #2
   1d668:	d00f      	beq.n	1d68a <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x2e>
   1d66a:	2302      	movs	r3, #2
   1d66c:	e9cd 7302 	strd	r7, r3, [sp, #8]
   1d670:	4b1b      	ldr	r3, [pc, #108]	; (1d6e0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x84>)
   1d672:	9301      	str	r3, [sp, #4]
   1d674:	4b1b      	ldr	r3, [pc, #108]	; (1d6e4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x88>)
   1d676:	9300      	str	r3, [sp, #0]
   1d678:	232a      	movs	r3, #42	; 0x2a
   1d67a:	6944      	ldr	r4, [r0, #20]
   1d67c:	4a1a      	ldr	r2, [pc, #104]	; (1d6e8 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x8c>)
   1d67e:	491b      	ldr	r1, [pc, #108]	; (1d6ec <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x90>)
   1d680:	47a0      	blx	r4
   1d682:	2001      	movs	r0, #1

  // Validate axis type
  const TfLiteTensor* axis = GetInput(context, node, 1);
  TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);
  return kTfLiteOk;
}
   1d684:	b004      	add	sp, #16
   1d686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   1d68a:	684a      	ldr	r2, [r1, #4]
   1d68c:	6814      	ldr	r4, [r2, #0]
   1d68e:	2c01      	cmp	r4, #1
   1d690:	d009      	beq.n	1d6a6 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x4a>
   1d692:	2601      	movs	r6, #1
   1d694:	4b16      	ldr	r3, [pc, #88]	; (1d6f0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x94>)
   1d696:	e9cd 4602 	strd	r4, r6, [sp, #8]
   1d69a:	9301      	str	r3, [sp, #4]
   1d69c:	4b15      	ldr	r3, [pc, #84]	; (1d6f4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x98>)
   1d69e:	9300      	str	r3, [sp, #0]
   1d6a0:	6944      	ldr	r4, [r0, #20]
   1d6a2:	232b      	movs	r3, #43	; 0x2b
   1d6a4:	e7ea      	b.n	1d67c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x20>
  return &context->tensors[node->inputs->data[index]];
   1d6a6:	689b      	ldr	r3, [r3, #8]
  TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);
   1d6a8:	6882      	ldr	r2, [r0, #8]
   1d6aa:	019b      	lsls	r3, r3, #6
   1d6ac:	5cd0      	ldrb	r0, [r2, r3]
   1d6ae:	2802      	cmp	r0, #2
   1d6b0:	d013      	beq.n	1d6da <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x7e>
   1d6b2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   1d6b6:	f7ef fb05 	bl	ccc4 <TfLiteTypeGetName>
   1d6ba:	4606      	mov	r6, r0
   1d6bc:	4638      	mov	r0, r7
   1d6be:	f7ef fb01 	bl	ccc4 <TfLiteTypeGetName>
   1d6c2:	4b0d      	ldr	r3, [pc, #52]	; (1d6f8 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x9c>)
   1d6c4:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1d6c8:	9301      	str	r3, [sp, #4]
   1d6ca:	4b0c      	ldr	r3, [pc, #48]	; (1d6fc <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xa0>)
   1d6cc:	4628      	mov	r0, r5
   1d6ce:	9300      	str	r3, [sp, #0]
   1d6d0:	4a05      	ldr	r2, [pc, #20]	; (1d6e8 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x8c>)
   1d6d2:	232f      	movs	r3, #47	; 0x2f
   1d6d4:	490a      	ldr	r1, [pc, #40]	; (1d700 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xa4>)
   1d6d6:	47c0      	blx	r8
   1d6d8:	e7d3      	b.n	1d682 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x26>
  return kTfLiteOk;
   1d6da:	2000      	movs	r0, #0
   1d6dc:	e7d2      	b.n	1d684 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x28>
   1d6de:	bf00      	nop
   1d6e0:	0003545c 	.word	0x0003545c
   1d6e4:	00035945 	.word	0x00035945
   1d6e8:	0003591d 	.word	0x0003591d
   1d6ec:	00034aec 	.word	0x00034aec
   1d6f0:	00035884 	.word	0x00035884
   1d6f4:	00034dc2 	.word	0x00034dc2
   1d6f8:	00035082 	.word	0x00035082
   1d6fc:	00035958 	.word	0x00035958
   1d700:	00034b27 	.word	0x00034b27

0001d704 <_ZN6tflite3ops5micro13Register_MEANEv>:
  }
  return kTfLiteOk;
}
}  // namespace reduce

TfLiteRegistration Register_MEAN() {
   1d704:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/reduce::PrepareMeanOrSum,
          /*invoke=*/reduce::EvalMean,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1d706:	4604      	mov	r4, r0
TfLiteRegistration Register_MEAN() {
   1d708:	4606      	mov	r6, r0
          /*version=*/0};
   1d70a:	4d04      	ldr	r5, [pc, #16]	; (1d71c <_ZN6tflite3ops5micro13Register_MEANEv+0x18>)
   1d70c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1d70e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1d710:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d714:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1d718:	4630      	mov	r0, r6
   1d71a:	bd70      	pop	{r4, r5, r6, pc}
   1d71c:	00031b68 	.word	0x00031b68

0001d720 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
  }
  return true;
}

template <typename T>
inline void Mean(const tflite::MeanParams& op_params,
   1d720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d724:	ed2d 8b02 	vpush	{d8}
   1d728:	4604      	mov	r4, r0
   1d72a:	4608      	mov	r0, r1
                 const RuntimeShape& unextended_output_shape, T* output_data) {
  ruy::profiler::ScopeLabel label("Mean4D");

  // Current implementation only supports dimension equals 4 and simultaneous
  // reduction over width and height.
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
   1d72c:	6809      	ldr	r1, [r1, #0]
inline void Mean(const tflite::MeanParams& op_params,
   1d72e:	4692      	mov	sl, r2
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
   1d730:	2904      	cmp	r1, #4
inline void Mean(const tflite::MeanParams& op_params,
   1d732:	461d      	mov	r5, r3
   1d734:	b091      	sub	sp, #68	; 0x44
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
   1d736:	d001      	beq.n	1d73c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
   1d738:	f013 fb73 	bl	30e22 <abort>
  TFLITE_CHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   1d73c:	681b      	ldr	r3, [r3, #0]
   1d73e:	2b04      	cmp	r3, #4
   1d740:	dcfa      	bgt.n	1d738 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
    return RuntimeShape(new_shape_size, shape, 1);
   1d742:	4602      	mov	r2, r0
   1d744:	2301      	movs	r3, #1
   1d746:	a804      	add	r0, sp, #16
   1d748:	9103      	str	r1, [sp, #12]
   1d74a:	f00a f806 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   1d74e:	462a      	mov	r2, r5
   1d750:	2301      	movs	r3, #1
   1d752:	9903      	ldr	r1, [sp, #12]
   1d754:	a80a      	add	r0, sp, #40	; 0x28
   1d756:	f00a f800 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape input_shape =
      RuntimeShape::ExtendedShape(4, unextended_input_shape);
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  const int output_batch = output_shape.Dims(0);
   1d75a:	2100      	movs	r1, #0
   1d75c:	a80a      	add	r0, sp, #40	; 0x28
   1d75e:	f009 ff67 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   1d762:	2101      	movs	r1, #1
  const int output_batch = output_shape.Dims(0);
   1d764:	4680      	mov	r8, r0
  const int output_height = output_shape.Dims(1);
   1d766:	a80a      	add	r0, sp, #40	; 0x28
   1d768:	f009 ff62 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   1d76c:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   1d76e:	4606      	mov	r6, r0
  const int output_width = output_shape.Dims(2);
   1d770:	a80a      	add	r0, sp, #40	; 0x28
   1d772:	f009 ff5d 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(3);
   1d776:	2103      	movs	r1, #3
  const int output_width = output_shape.Dims(2);
   1d778:	4683      	mov	fp, r0
  const int output_depth = output_shape.Dims(3);
   1d77a:	a80a      	add	r0, sp, #40	; 0x28
   1d77c:	f009 ff58 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>

  const int input_height = input_shape.Dims(1);
   1d780:	2101      	movs	r1, #1
  const int output_depth = output_shape.Dims(3);
   1d782:	4681      	mov	r9, r0
  const int input_height = input_shape.Dims(1);
   1d784:	a804      	add	r0, sp, #16
   1d786:	f009 ff53 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   1d78a:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   1d78c:	4605      	mov	r5, r0
  const int input_width = input_shape.Dims(2);
   1d78e:	a804      	add	r0, sp, #16
   1d790:	f009 ff4e 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>

  TFLITE_CHECK_EQ(op_params.axis_count, 2);
   1d794:	f994 2000 	ldrsb.w	r2, [r4]
  const int input_width = input_shape.Dims(2);
   1d798:	4607      	mov	r7, r0
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
   1d79a:	2a02      	cmp	r2, #2
   1d79c:	d1cc      	bne.n	1d738 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
   1d79e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1d7a2:	2a01      	cmp	r2, #1
   1d7a4:	d12b      	bne.n	1d7fe <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xde>
   1d7a6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   1d7aa:	2a02      	cmp	r2, #2
   1d7ac:	d1c4      	bne.n	1d738 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
               (op_params.axis[0] == 2 && op_params.axis[1] == 1));
  TFLITE_CHECK_EQ(output_height, 1);
   1d7ae:	2e01      	cmp	r6, #1
   1d7b0:	d1c2      	bne.n	1d738 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
  TFLITE_CHECK_EQ(output_width, 1);
   1d7b2:	f1bb 0f01 	cmp.w	fp, #1
   1d7b6:	d1bf      	bne.n	1d738 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
        for (int in_w = 0; in_w < input_width; ++in_w) {
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
        }
      }
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
          value / (input_width * input_height);
   1d7b8:	fb07 f305 	mul.w	r3, r7, r5
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1d7bc:	2400      	movs	r4, #0
          value / (input_width * input_height);
   1d7be:	ee08 3a90 	vmov	s17, r3
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1d7c2:	4544      	cmp	r4, r8
   1d7c4:	da38      	bge.n	1d838 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x118>
    for (int out_d = 0; out_d < output_depth; ++out_d) {
   1d7c6:	2600      	movs	r6, #0
   1d7c8:	454e      	cmp	r6, r9
   1d7ca:	da33      	bge.n	1d834 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x114>
      for (int in_h = 0; in_h < input_height; ++in_h) {
   1d7cc:	f04f 0b00 	mov.w	fp, #0
      float value = 0;
   1d7d0:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 1d850 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x130>
      for (int in_h = 0; in_h < input_height; ++in_h) {
   1d7d4:	45ab      	cmp	fp, r5
   1d7d6:	da1b      	bge.n	1d810 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf0>
        for (int in_w = 0; in_w < input_width; ++in_w) {
   1d7d8:	2300      	movs	r3, #0
   1d7da:	42bb      	cmp	r3, r7
   1d7dc:	da15      	bge.n	1d80a <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xea>
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
   1d7de:	465a      	mov	r2, fp
   1d7e0:	4621      	mov	r1, r4
   1d7e2:	9600      	str	r6, [sp, #0]
   1d7e4:	a804      	add	r0, sp, #16
   1d7e6:	9303      	str	r3, [sp, #12]
   1d7e8:	f009 ffe4 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   1d7ec:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
   1d7f0:	edd0 7a00 	vldr	s15, [r0]
        for (int in_w = 0; in_w < input_width; ++in_w) {
   1d7f4:	9b03      	ldr	r3, [sp, #12]
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
   1d7f6:	ee38 8a27 	vadd.f32	s16, s16, s15
        for (int in_w = 0; in_w < input_width; ++in_w) {
   1d7fa:	3301      	adds	r3, #1
   1d7fc:	e7ed      	b.n	1d7da <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xba>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
   1d7fe:	2a02      	cmp	r2, #2
   1d800:	d19a      	bne.n	1d738 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
   1d802:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   1d806:	2a01      	cmp	r2, #1
   1d808:	e7d0      	b.n	1d7ac <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x8c>
      for (int in_h = 0; in_h < input_height; ++in_h) {
   1d80a:	f10b 0b01 	add.w	fp, fp, #1
   1d80e:	e7e1      	b.n	1d7d4 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xb4>
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
   1d810:	2300      	movs	r3, #0
   1d812:	9600      	str	r6, [sp, #0]
   1d814:	461a      	mov	r2, r3
   1d816:	4621      	mov	r1, r4
   1d818:	a80a      	add	r0, sp, #40	; 0x28
   1d81a:	f009 ffcb 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          value / (input_width * input_height);
   1d81e:	eeb8 7ae8 	vcvt.f32.s32	s14, s17
   1d822:	eec8 7a07 	vdiv.f32	s15, s16, s14
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
   1d826:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    for (int out_d = 0; out_d < output_depth; ++out_d) {
   1d828:	3601      	adds	r6, #1
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
   1d82a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1d82e:	edc0 7a00 	vstr	s15, [r0]
    for (int out_d = 0; out_d < output_depth; ++out_d) {
   1d832:	e7c9      	b.n	1d7c8 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xa8>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   1d834:	3401      	adds	r4, #1
   1d836:	e7c4      	b.n	1d7c2 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xa2>
  const RuntimeShape output_shape =
   1d838:	a80a      	add	r0, sp, #40	; 0x28
   1d83a:	f009 feee 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   1d83e:	a804      	add	r0, sp, #16
   1d840:	f009 feeb 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
    }
  }
}
   1d844:	b011      	add	sp, #68	; 0x44
   1d846:	ecbd 8b02 	vpop	{d8}
   1d84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d84e:	bf00      	nop
   1d850:	00000000 	.word	0x00000000

0001d854 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_>:
inline bool Mean(const T* input_data, const int* input_dims,
   1d854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (int idx = 0; idx < output_num_dims; ++idx) {
   1d858:	f04f 0c00 	mov.w	ip, #0
  size_t num_outputs = 1;
   1d85c:	2701      	movs	r7, #1
inline bool Mean(const T* input_data, const int* input_dims,
   1d85e:	b089      	sub	sp, #36	; 0x24
   1d860:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   1d862:	4614      	mov	r4, r2
   1d864:	9005      	str	r0, [sp, #20]
   1d866:	e9dd 2017 	ldrd	r2, r0, [sp, #92]	; 0x5c
   1d86a:	9003      	str	r0, [sp, #12]
  for (int idx = 0; idx < output_num_dims; ++idx) {
   1d86c:	45b4      	cmp	ip, r6
   1d86e:	db10      	blt.n	1d892 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x3e>
   1d870:	461d      	mov	r5, r3
   1d872:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
   1d876:	00bb      	lsls	r3, r7, #2
   1d878:	9304      	str	r3, [sp, #16]
   1d87a:	4648      	mov	r0, r9
   1d87c:	462b      	mov	r3, r5
    output_data[idx] = T();
   1d87e:	2600      	movs	r6, #0
   1d880:	eb05 0787 	add.w	r7, r5, r7, lsl #2
  for (size_t idx = 0; idx < num_outputs; ++idx) {
   1d884:	429f      	cmp	r7, r3
   1d886:	d010      	beq.n	1d8aa <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x56>
    output_data[idx] = T();
   1d888:	f843 6b04 	str.w	r6, [r3], #4
    temp_sum[idx] = U();
   1d88c:	f840 6b04 	str.w	r6, [r0], #4
  for (size_t idx = 0; idx < num_outputs; ++idx) {
   1d890:	e7f8      	b.n	1d884 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x30>
    size_t current = static_cast<size_t>(output_dims[idx]);
   1d892:	9812      	ldr	r0, [sp, #72]	; 0x48
   1d894:	f850 502c 	ldr.w	r5, [r0, ip, lsl #2]
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
   1d898:	fba5 e007 	umull	lr, r0, r5, r7
   1d89c:	2800      	cmp	r0, #0
   1d89e:	f040 80a6 	bne.w	1d9ee <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x19a>
    num_outputs *= current;
   1d8a2:	436f      	muls	r7, r5
  for (int idx = 0; idx < output_num_dims; ++idx) {
   1d8a4:	f10c 0c01 	add.w	ip, ip, #1
   1d8a8:	e7e0      	b.n	1d86c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x18>
  if (num_dims == 0) {
   1d8aa:	b37c      	cbz	r4, 1d90c <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xb8>
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
   1d8ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
  *out_num_axis = 0;  // Just in case.
   1d8ae:	2600      	movs	r6, #0
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
   1d8b0:	461f      	mov	r7, r3
  for (int64_t idx = 0; idx < num_axis; ++idx) {
   1d8b2:	f04f 0a00 	mov.w	sl, #0
   1d8b6:	f04f 0b00 	mov.w	fp, #0
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
   1d8ba:	ea4f 78e3 	mov.w	r8, r3, asr #31
   1d8be:	e9cd 7806 	strd	r7, r8, [sp, #24]
  for (int64_t idx = 0; idx < num_axis; ++idx) {
   1d8c2:	e9dd 7806 	ldrd	r7, r8, [sp, #24]
   1d8c6:	45ba      	cmp	sl, r7
   1d8c8:	eb7b 0308 	sbcs.w	r3, fp, r8
   1d8cc:	da16      	bge.n	1d8fc <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xa8>
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
   1d8ce:	9814      	ldr	r0, [sp, #80]	; 0x50
   1d8d0:	ea4f 038a 	mov.w	r3, sl, lsl #2
   1d8d4:	58c0      	ldr	r0, [r0, r3]
   1d8d6:	2800      	cmp	r0, #0
   1d8d8:	da01      	bge.n	1d8de <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8a>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
   1d8da:	1900      	adds	r0, r0, r4
   1d8dc:	d401      	bmi.n	1d8e2 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8e>
   1d8de:	4284      	cmp	r4, r0
   1d8e0:	dc01      	bgt.n	1d8e6 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x92>
   1d8e2:	f013 fa9e 	bl	30e22 <abort>
    for (int j = 0; j < *out_num_axis; ++j) {
   1d8e6:	2700      	movs	r7, #0
   1d8e8:	42b7      	cmp	r7, r6
      out_axis[*out_num_axis] = current;
   1d8ea:	9b03      	ldr	r3, [sp, #12]
    for (int j = 0; j < *out_num_axis; ++j) {
   1d8ec:	f280 8081 	bge.w	1d9f2 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x19e>
      if (out_axis[j] == current) {
   1d8f0:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
   1d8f4:	4283      	cmp	r3, r0
   1d8f6:	d07f      	beq.n	1d9f8 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1a4>
    for (int j = 0; j < *out_num_axis; ++j) {
   1d8f8:	3701      	adds	r7, #1
   1d8fa:	e7f5      	b.n	1d8e8 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x94>
  for (int idx = 0; idx < input_num_dims; ++idx) {
   1d8fc:	2300      	movs	r3, #0
    input_iter[idx] = 0;
   1d8fe:	4618      	mov	r0, r3
  for (int idx = 0; idx < input_num_dims; ++idx) {
   1d900:	429c      	cmp	r4, r3
   1d902:	dd04      	ble.n	1d90e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xba>
    input_iter[idx] = 0;
   1d904:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int idx = 0; idx < input_num_dims; ++idx) {
   1d908:	3301      	adds	r3, #1
   1d90a:	e7f9      	b.n	1d900 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xac>
  *out_num_axis = 0;  // Just in case.
   1d90c:	4626      	mov	r6, r4
        ReducedOutputOffset(input_num_dims, input_dims, input_iter, 0, nullptr);
   1d90e:	f04f 0a00 	mov.w	sl, #0
   1d912:	eb02 0b84 	add.w	fp, r2, r4, lsl #2
   1d916:	2300      	movs	r3, #0
   1d918:	4620      	mov	r0, r4
   1d91a:	f8cd a000 	str.w	sl, [sp]
   1d91e:	9217      	str	r2, [sp, #92]	; 0x5c
   1d920:	9106      	str	r1, [sp, #24]
   1d922:	f010 fc99 	bl	2e258 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
   1d926:	9b03      	ldr	r3, [sp, #12]
        ReducedOutputOffset(input_num_dims, input_dims, input_iter, 0, nullptr);
   1d928:	4607      	mov	r7, r0
    size_t output_offset = ReducedOutputOffset(input_num_dims, input_dims,
   1d92a:	9906      	ldr	r1, [sp, #24]
   1d92c:	9300      	str	r3, [sp, #0]
   1d92e:	4620      	mov	r0, r4
   1d930:	4633      	mov	r3, r6
   1d932:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1d934:	f010 fc90 	bl	2e258 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>
        reducer(output_data[output_offset], input_data[input_offset]);
   1d938:	9b19      	ldr	r3, [sp, #100]	; 0x64
  if (num_dims == 0) {
   1d93a:	9906      	ldr	r1, [sp, #24]
   1d93c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1d940:	9b05      	ldr	r3, [sp, #20]
    return current + actual_in;
   1d942:	edd0 7a00 	vldr	s15, [r0]
        reducer(output_data[output_offset], input_data[input_offset]);
   1d946:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return current + actual_in;
   1d94a:	ed97 7a00 	vldr	s14, [r7]
   1d94e:	ee77 7a87 	vadd.f32	s15, s15, s14
    output_data[output_offset] =
   1d952:	edc0 7a00 	vstr	s15, [r0]
   1d956:	b1d4      	cbz	r4, 1d98e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x13a>
  TFLITE_DCHECK(dims != nullptr);
   1d958:	2900      	cmp	r1, #0
   1d95a:	d0c2      	beq.n	1d8e2 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8e>
  TFLITE_DCHECK(current != nullptr);
   1d95c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1d95e:	2a00      	cmp	r2, #0
   1d960:	d0bf      	beq.n	1d8e2 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8e>
  for (int idx = num_dims - 1; idx >= 0; --idx) {
   1d962:	465b      	mov	r3, fp
   1d964:	1e67      	subs	r7, r4, #1
   1d966:	2f00      	cmp	r7, #0
   1d968:	db11      	blt.n	1d98e <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x13a>
    int current_val = current[idx] + carry;
   1d96a:	f1a3 0c04 	sub.w	ip, r3, #4
   1d96e:	f853 3c04 	ldr.w	r3, [r3, #-4]
    TFLITE_DCHECK_GE(dims[idx], current_val);
   1d972:	f851 0027 	ldr.w	r0, [r1, r7, lsl #2]
    int current_val = current[idx] + carry;
   1d976:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
   1d978:	4283      	cmp	r3, r0
   1d97a:	dcb2      	bgt.n	1d8e2 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x8e>
    if (dims[idx] == current_val) {
   1d97c:	d104      	bne.n	1d988 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x134>
      current[idx] = 0;
   1d97e:	4663      	mov	r3, ip
   1d980:	f8cc a000 	str.w	sl, [ip]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
   1d984:	3f01      	subs	r7, #1
   1d986:	e7ee      	b.n	1d966 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x112>
      current[idx] = current_val;
   1d988:	f8cc 3000 	str.w	r3, [ip]
  return (carry == 0);
   1d98c:	e7c3      	b.n	1d916 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0xc2>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
   1d98e:	2300      	movs	r3, #0
  U num_elements_in_axis = 1;
   1d990:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (current > (std::numeric_limits<U>::max() / num_elements_in_axis)) {
   1d994:	eddf 6a1b 	vldr	s13, [pc, #108]	; 1da04 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x1b0>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
   1d998:	42b3      	cmp	r3, r6
   1d99a:	da13      	bge.n	1d9c4 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x170>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
   1d99c:	9a03      	ldr	r2, [sp, #12]
    if (current > (std::numeric_limits<U>::max() / num_elements_in_axis)) {
   1d99e:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
   1d9a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (current > (std::numeric_limits<U>::max() / num_elements_in_axis)) {
   1d9a6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   1d9aa:	ed92 7a00 	vldr	s14, [r2]
   1d9ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   1d9b2:	eeb4 7ac6 	vcmpe.f32	s14, s12
   1d9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1d9ba:	dc18      	bgt.n	1d9ee <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x19a>
    num_elements_in_axis *= current;
   1d9bc:	ee67 7a87 	vmul.f32	s15, s15, s14
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
   1d9c0:	3301      	adds	r3, #1
   1d9c2:	e7e9      	b.n	1d998 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x144>
  if (num_elements_in_axis > 0) {
   1d9c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1d9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1d9cc:	dd0b      	ble.n	1d9e6 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x192>
   1d9ce:	9b04      	ldr	r3, [sp, #16]
   1d9d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
   1d9d2:	4413      	add	r3, r2
    for (size_t idx = 0; idx < num_outputs; ++idx) {
   1d9d4:	4599      	cmp	r9, r3
   1d9d6:	d006      	beq.n	1d9e6 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x192>
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
   1d9d8:	ecf9 6a01 	vldmia	r9!, {s13}
   1d9dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
      output_data[idx] =
   1d9e0:	eca5 7a01 	vstmia	r5!, {s14}
    for (size_t idx = 0; idx < num_outputs; ++idx) {
   1d9e4:	e7f6      	b.n	1d9d4 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x180>
  return true;
   1d9e6:	2001      	movs	r0, #1
}
   1d9e8:	b009      	add	sp, #36	; 0x24
   1d9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return false;
   1d9ee:	2000      	movs	r0, #0
  template <typename... Args>
  explicit ScopeLabel(Args...) {}

  // This destructor is needed to consistently silence clang's -Wunused-variable
  // which seems to trigger semi-randomly.
  ~ScopeLabel() {}
   1d9f0:	e7fa      	b.n	1d9e8 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x194>
      out_axis[*out_num_axis] = current;
   1d9f2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
      *out_num_axis += 1;
   1d9f6:	3601      	adds	r6, #1
  for (int64_t idx = 0; idx < num_axis; ++idx) {
   1d9f8:	f11a 0a01 	adds.w	sl, sl, #1
   1d9fc:	f14b 0b00 	adc.w	fp, fp, #0
   1da00:	e75f      	b.n	1d8c2 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_+0x6e>
   1da02:	bf00      	nop
   1da04:	7f7fffff 	.word	0x7f7fffff

0001da08 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus EvalMean(TfLiteContext* context, TfLiteNode* node) {
   1da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, 0);
   1da0c:	680b      	ldr	r3, [r1, #0]
   1da0e:	f8d0 9008 	ldr.w	r9, [r0, #8]
TfLiteStatus EvalMean(TfLiteContext* context, TfLiteNode* node) {
   1da12:	4605      	mov	r5, r0
   1da14:	468c      	mov	ip, r1
  for (int i = 0; i < dims->size; ++i) {
   1da16:	f04f 0e00 	mov.w	lr, #0
  int64_t count = 1;
   1da1a:	2001      	movs	r0, #1
   1da1c:	2100      	movs	r1, #0
  return &context->tensors[node->inputs->data[index]];
   1da1e:	689f      	ldr	r7, [r3, #8]
   1da20:	685e      	ldr	r6, [r3, #4]
   1da22:	eb09 1787 	add.w	r7, r9, r7, lsl #6
  for (int i = 0; i < dims->size; ++i) {
   1da26:	68bc      	ldr	r4, [r7, #8]
  return &context->tensors[node->inputs->data[index]];
   1da28:	ea4f 1a86 	mov.w	sl, r6, lsl #6
  for (int i = 0; i < dims->size; ++i) {
   1da2c:	f854 bb04 	ldr.w	fp, [r4], #4
   1da30:	b09b      	sub	sp, #108	; 0x6c
  return &context->tensors[node->inputs->data[index]];
   1da32:	eb09 1686 	add.w	r6, r9, r6, lsl #6
  for (int i = 0; i < dims->size; ++i) {
   1da36:	45f3      	cmp	fp, lr
   1da38:	dd0c      	ble.n	1da54 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4c>
    count *= dims->data[i];
   1da3a:	f854 8b04 	ldr.w	r8, [r4], #4
  for (int i = 0; i < dims->size; ++i) {
   1da3e:	f10e 0e01 	add.w	lr, lr, #1
    count *= dims->data[i];
   1da42:	4642      	mov	r2, r8
   1da44:	17d3      	asrs	r3, r2, #31
   1da46:	4343      	muls	r3, r0
   1da48:	fb08 3301 	mla	r3, r8, r1, r3
   1da4c:	fba0 0108 	umull	r0, r1, r0, r8
   1da50:	4419      	add	r1, r3
  for (int i = 0; i < dims->size; ++i) {
   1da52:	e7f0      	b.n	1da36 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x2e>
  switch (input->type) {
   1da54:	f819 800a 	ldrb.w	r8, [r9, sl]
   1da58:	f1b8 0f01 	cmp.w	r8, #1
   1da5c:	d16f      	bne.n	1db3e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x136>
  return &context->tensors[node->outputs->data[index]];
   1da5e:	f8dc 3004 	ldr.w	r3, [ip, #4]
      ResolveAxis(GetTensorData<int>(axis), num_axis, &op_params);
   1da62:	4601      	mov	r1, r0
  int num_axis = static_cast<int>(NumElements(axis));
   1da64:	4682      	mov	sl, r0
      ResolveAxis(GetTensorData<int>(axis), num_axis, &op_params);
   1da66:	aa0b      	add	r2, sp, #44	; 0x2c
   1da68:	6878      	ldr	r0, [r7, #4]
   1da6a:	685c      	ldr	r4, [r3, #4]
  TfLiteReducerParams* params =
   1da6c:	f8dc b014 	ldr.w	fp, [ip, #20]
      ResolveAxis(GetTensorData<int>(axis), num_axis, &op_params);
   1da70:	f010 fc16 	bl	2e2a0 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE>
          (NumDimensions(input) == 4 && op_params.axis_count == 2 &&
   1da74:	68b1      	ldr	r1, [r6, #8]
   1da76:	680b      	ldr	r3, [r1, #0]
   1da78:	2b04      	cmp	r3, #4
   1da7a:	d10b      	bne.n	1da94 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8c>
   1da7c:	f99d 302c 	ldrsb.w	r3, [sp, #44]	; 0x2c
   1da80:	2b02      	cmp	r3, #2
   1da82:	d107      	bne.n	1da94 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8c>
           ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
   1da84:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
          (NumDimensions(input) == 4 && op_params.axis_count == 2 &&
   1da88:	2b01      	cmp	r3, #1
   1da8a:	d10b      	bne.n	1daa4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9c>
           ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
   1da8c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   1da90:	2b02      	cmp	r3, #2
            (op_params.axis[0] == 2 && op_params.axis[1] == 1)));
   1da92:	d00d      	beq.n	1dab0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa8>
      TF_LITE_ENSURE_MSG(
   1da94:	4628      	mov	r0, r5
   1da96:	696b      	ldr	r3, [r5, #20]
   1da98:	492c      	ldr	r1, [pc, #176]	; (1db4c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x144>)
   1da9a:	4798      	blx	r3
}
   1da9c:	4640      	mov	r0, r8
   1da9e:	b01b      	add	sp, #108	; 0x6c
   1daa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
           ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
   1daa4:	2b02      	cmp	r3, #2
   1daa6:	d1f5      	bne.n	1da94 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8c>
            (op_params.axis[0] == 2 && op_params.axis[1] == 1)));
   1daa8:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   1daac:	2b01      	cmp	r3, #1
   1daae:	e7f0      	b.n	1da92 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8a>
      if (params->keep_dims) {
   1dab0:	f89b 3000 	ldrb.w	r3, [fp]
   1dab4:	eb09 1484 	add.w	r4, r9, r4, lsl #6
   1dab8:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
   1dabc:	f10d 0938 	add.w	r9, sp, #56	; 0x38
   1dac0:	b1db      	cbz	r3, 1dafa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf2>
        reference_ops::Mean(op_params, GetTensorShape(input),
   1dac2:	4631      	mov	r1, r6
   1dac4:	4648      	mov	r0, r9
   1dac6:	f009 fded 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1daca:	6872      	ldr	r2, [r6, #4]
                            GetTensorData<float>(input), GetTensorShape(output),
   1dacc:	4621      	mov	r1, r4
   1dace:	4658      	mov	r0, fp
   1dad0:	9209      	str	r2, [sp, #36]	; 0x24
   1dad2:	f009 fde7 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1dad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dad8:	b104      	cbz	r4, 1dadc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd4>
   1dada:	6864      	ldr	r4, [r4, #4]
        reference_ops::Mean(op_params, GetTensorShape(input),
   1dadc:	465b      	mov	r3, fp
   1dade:	4649      	mov	r1, r9
   1dae0:	a80b      	add	r0, sp, #44	; 0x2c
   1dae2:	9400      	str	r4, [sp, #0]
   1dae4:	f7ff fe1c 	bl	1d720 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
                            GetTensorData<float>(input), GetTensorShape(output),
   1dae8:	4658      	mov	r0, fp
   1daea:	f009 fd96 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
        reference_ops::Mean(op_params, GetTensorShape(input),
   1daee:	4648      	mov	r0, r9
   1daf0:	f009 fd93 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1daf4:	f04f 0800 	mov.w	r8, #0
   1daf8:	e7d0      	b.n	1da9c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x94>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1dafa:	6870      	ldr	r0, [r6, #4]
        TF_LITE_ENSURE(
   1dafc:	3104      	adds	r1, #4
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1dafe:	b1e4      	cbz	r4, 1db3a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x132>
   1db00:	6863      	ldr	r3, [r4, #4]
   1db02:	68a2      	ldr	r2, [r4, #8]
   1db04:	2400      	movs	r4, #0
   1db06:	e9cd 9306 	strd	r9, r3, [sp, #24]
   1db0a:	e9cd a403 	strd	sl, r4, [sp, #12]
   1db0e:	f8cd b014 	str.w	fp, [sp, #20]
   1db12:	687c      	ldr	r4, [r7, #4]
   1db14:	9402      	str	r4, [sp, #8]
   1db16:	f852 4b04 	ldr.w	r4, [r2], #4
   1db1a:	e9cd 2400 	strd	r2, r4, [sp]
   1db1e:	2204      	movs	r2, #4
   1db20:	f7ff fe98 	bl	1d854 <_ZN6tflite13reference_ops4MeanIffEEbPKT_PKiiPS2_S6_iS6_ibPiS8_PT0_>
   1db24:	2800      	cmp	r0, #0
   1db26:	d1e5      	bne.n	1daf4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xec>
   1db28:	4b09      	ldr	r3, [pc, #36]	; (1db50 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x148>)
   1db2a:	4628      	mov	r0, r5
   1db2c:	9300      	str	r3, [sp, #0]
   1db2e:	696c      	ldr	r4, [r5, #20]
   1db30:	2366      	movs	r3, #102	; 0x66
   1db32:	4a08      	ldr	r2, [pc, #32]	; (1db54 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x14c>)
   1db34:	4908      	ldr	r1, [pc, #32]	; (1db58 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x150>)
   1db36:	47a0      	blx	r4
   1db38:	e7b0      	b.n	1da9c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x94>
   1db3a:	4623      	mov	r3, r4
   1db3c:	e7e1      	b.n	1db02 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfa>
      TF_LITE_ENSURE_MSG(context, false,
   1db3e:	4628      	mov	r0, r5
   1db40:	696b      	ldr	r3, [r5, #20]
   1db42:	4906      	ldr	r1, [pc, #24]	; (1db5c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x154>)
   1db44:	4798      	blx	r3
   1db46:	f04f 0801 	mov.w	r8, #1
   1db4a:	e7a7      	b.n	1da9c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x94>
   1db4c:	00035963 	.word	0x00035963
   1db50:	000359d6 	.word	0x000359d6
   1db54:	0003591d 	.word	0x0003591d
   1db58:	00034c0c 	.word	0x00034c0c
   1db5c:	00035ae3 	.word	0x00035ae3

0001db60 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
   1db60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1db64:	f8d1 e000 	ldr.w	lr, [r1]
   1db68:	6885      	ldr	r5, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1db6a:	f8de 3004 	ldr.w	r3, [lr, #4]
  return &context->tensors[node->outputs->data[index]];
   1db6e:	684a      	ldr	r2, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   1db70:	ea4f 1c83 	mov.w	ip, r3, lsl #6
   1db74:	eb05 1383 	add.w	r3, r5, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1db78:	6856      	ldr	r6, [r2, #4]
  for (int i = 0; i < dims->size; ++i) {
   1db7a:	689f      	ldr	r7, [r3, #8]
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
   1db7c:	4604      	mov	r4, r0
   1db7e:	f04f 0900 	mov.w	r9, #0
  int64_t count = 1;
   1db82:	2201      	movs	r2, #1
   1db84:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
   1db86:	f857 bb04 	ldr.w	fp, [r7], #4
  return &context->tensors[node->outputs->data[index]];
   1db8a:	ea4f 1886 	mov.w	r8, r6, lsl #6
   1db8e:	b085      	sub	sp, #20
   1db90:	eb05 1686 	add.w	r6, r5, r6, lsl #6
  for (int i = 0; i < dims->size; ++i) {
   1db94:	45cb      	cmp	fp, r9
   1db96:	dd0c      	ble.n	1dbb2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x52>
    count *= dims->data[i];
   1db98:	f857 ab04 	ldr.w	sl, [r7], #4
  for (int i = 0; i < dims->size; ++i) {
   1db9c:	f109 0901 	add.w	r9, r9, #1
    count *= dims->data[i];
   1dba0:	4650      	mov	r0, sl
   1dba2:	17c1      	asrs	r1, r0, #31
   1dba4:	4351      	muls	r1, r2
   1dba6:	fb0a 1103 	mla	r1, sl, r3, r1
   1dbaa:	fba2 230a 	umull	r2, r3, r2, sl
   1dbae:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
   1dbb0:	e7f0      	b.n	1db94 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x34>
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
  TfLiteIntArray* output_shape = output->dims;

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
      output_shape->size == 1 && output_shape->data[0] == 0) {
   1dbb2:	f8de 3000 	ldr.w	r3, [lr]
  TfLiteIntArray* output_shape = output->dims;
   1dbb6:	68b1      	ldr	r1, [r6, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
   1dbb8:	2b01      	cmp	r3, #1
   1dbba:	d105      	bne.n	1dbc8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
   1dbbc:	680b      	ldr	r3, [r1, #0]
   1dbbe:	2b01      	cmp	r3, #1
   1dbc0:	d102      	bne.n	1dbc8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
      output_shape->size == 1 && output_shape->data[0] == 0) {
   1dbc2:	684b      	ldr	r3, [r1, #4]
   1dbc4:	b903      	cbnz	r3, 1dbc8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x68>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
   1dbc6:	600b      	str	r3, [r1, #0]
  }

  int num_output_elements = 1;
  int stretch_dim = -1;
  for (int i = 0; i < output_shape->size; ++i) {
   1dbc8:	460f      	mov	r7, r1
   1dbca:	2600      	movs	r6, #0
  int stretch_dim = -1;
   1dbcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  int num_output_elements = 1;
   1dbd0:	2301      	movs	r3, #1
  for (int i = 0; i < output_shape->size; ++i) {
   1dbd2:	f857 9b04 	ldr.w	r9, [r7], #4
   1dbd6:	45b1      	cmp	r9, r6
   1dbd8:	dd1a      	ble.n	1dc10 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xb0>
    int value = output_shape->data[i];
   1dbda:	f857 eb04 	ldr.w	lr, [r7], #4
    if (value == -1) {
   1dbde:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
   1dbe2:	d10f      	bne.n	1dc04 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa4>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
   1dbe4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1dbe8:	d010      	beq.n	1dc0c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xac>
   1dbea:	4b23      	ldr	r3, [pc, #140]	; (1dc78 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x118>)
   1dbec:	e9cd 0e02 	strd	r0, lr, [sp, #8]
   1dbf0:	9301      	str	r3, [sp, #4]
   1dbf2:	4b22      	ldr	r3, [pc, #136]	; (1dc7c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x11c>)
   1dbf4:	6965      	ldr	r5, [r4, #20]
   1dbf6:	9300      	str	r3, [sp, #0]
   1dbf8:	2335      	movs	r3, #53	; 0x35
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
    num_output_elements *= output_shape->data[stretch_dim];
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   1dbfa:	4620      	mov	r0, r4
   1dbfc:	4a20      	ldr	r2, [pc, #128]	; (1dc80 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
   1dbfe:	4921      	ldr	r1, [pc, #132]	; (1dc84 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x124>)
   1dc00:	47a8      	blx	r5
   1dc02:	e027      	b.n	1dc54 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf4>
      num_output_elements *= value;
   1dc04:	fb0e f303 	mul.w	r3, lr, r3
  for (int i = 0; i < output_shape->size; ++i) {
   1dc08:	3601      	adds	r6, #1
   1dc0a:	e7e4      	b.n	1dbd6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x76>
   1dc0c:	4630      	mov	r0, r6
   1dc0e:	e7fb      	b.n	1dc08 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xa8>
  if (stretch_dim != -1) {
   1dc10:	1c46      	adds	r6, r0, #1
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
   1dc12:	bf1e      	ittt	ne
   1dc14:	fb92 f6f3 	sdivne	r6, r2, r3
   1dc18:	eb01 0180 	addne.w	r1, r1, r0, lsl #2
   1dc1c:	604e      	strne	r6, [r1, #4]
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1dc1e:	f815 000c 	ldrb.w	r0, [r5, ip]
   1dc22:	f815 1008 	ldrb.w	r1, [r5, r8]
    num_output_elements *= output_shape->data[stretch_dim];
   1dc26:	bf18      	it	ne
   1dc28:	4373      	mulne	r3, r6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1dc2a:	4281      	cmp	r1, r0
   1dc2c:	d016      	beq.n	1dc5c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfc>
   1dc2e:	6967      	ldr	r7, [r4, #20]
   1dc30:	f7ef f848 	bl	ccc4 <TfLiteTypeGetName>
   1dc34:	4606      	mov	r6, r0
   1dc36:	f815 0008 	ldrb.w	r0, [r5, r8]
   1dc3a:	f7ef f843 	bl	ccc4 <TfLiteTypeGetName>
   1dc3e:	4b12      	ldr	r3, [pc, #72]	; (1dc88 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x128>)
   1dc40:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1dc44:	9301      	str	r3, [sp, #4]
   1dc46:	4b11      	ldr	r3, [pc, #68]	; (1dc8c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x12c>)
   1dc48:	4620      	mov	r0, r4
   1dc4a:	9300      	str	r3, [sp, #0]
   1dc4c:	4a0c      	ldr	r2, [pc, #48]	; (1dc80 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x120>)
   1dc4e:	2340      	movs	r3, #64	; 0x40
   1dc50:	490f      	ldr	r1, [pc, #60]	; (1dc90 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x130>)
   1dc52:	47b8      	blx	r7
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   1dc54:	2001      	movs	r0, #1
  return kTfLiteOk;
}
   1dc56:	b005      	add	sp, #20
   1dc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
   1dc5c:	4293      	cmp	r3, r2
   1dc5e:	d008      	beq.n	1dc72 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x112>
   1dc60:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1dc64:	4b0b      	ldr	r3, [pc, #44]	; (1dc94 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x134>)
   1dc66:	6965      	ldr	r5, [r4, #20]
   1dc68:	9301      	str	r3, [sp, #4]
   1dc6a:	4b0b      	ldr	r3, [pc, #44]	; (1dc98 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x138>)
   1dc6c:	9300      	str	r3, [sp, #0]
   1dc6e:	2341      	movs	r3, #65	; 0x41
   1dc70:	e7c3      	b.n	1dbfa <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9a>
  return kTfLiteOk;
   1dc72:	2000      	movs	r0, #0
   1dc74:	e7ef      	b.n	1dc56 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf6>
   1dc76:	bf00      	nop
   1dc78:	00035b65 	.word	0x00035b65
   1dc7c:	00035b68 	.word	0x00035b68
   1dc80:	00035b3c 	.word	0x00035b3c
   1dc84:	00034aec 	.word	0x00034aec
   1dc88:	000353f7 	.word	0x000353f7
   1dc8c:	0003540f 	.word	0x0003540f
   1dc90:	00034b27 	.word	0x00034b27
   1dc94:	00035b74 	.word	0x00035b74
   1dc98:	00035b88 	.word	0x00035b88

0001dc9c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1dc9c:	680b      	ldr	r3, [r1, #0]

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1dc9e:	b5f0      	push	{r4, r5, r6, r7, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   1dca0:	681b      	ldr	r3, [r3, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1dca2:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   1dca4:	3b01      	subs	r3, #1
   1dca6:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1dca8:	460c      	mov	r4, r1
   1dcaa:	b085      	sub	sp, #20
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
   1dcac:	d909      	bls.n	1dcc2 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
   1dcae:	4b19      	ldr	r3, [pc, #100]	; (1dd14 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   1dcb0:	4a19      	ldr	r2, [pc, #100]	; (1dd18 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1dcb2:	9300      	str	r3, [sp, #0]
   1dcb4:	6944      	ldr	r4, [r0, #20]
   1dcb6:	2346      	movs	r3, #70	; 0x46
   1dcb8:	4918      	ldr	r1, [pc, #96]	; (1dd1c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
   1dcba:	47a0      	blx	r4
   1dcbc:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}
   1dcbe:	b005      	add	sp, #20
   1dcc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1dcc2:	684b      	ldr	r3, [r1, #4]
   1dcc4:	681e      	ldr	r6, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1dcc6:	2e01      	cmp	r6, #1
   1dcc8:	d00c      	beq.n	1dce4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
   1dcca:	2401      	movs	r4, #1
   1dccc:	4b14      	ldr	r3, [pc, #80]	; (1dd20 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
   1dcce:	e9cd 6402 	strd	r6, r4, [sp, #8]
   1dcd2:	9301      	str	r3, [sp, #4]
   1dcd4:	4b13      	ldr	r3, [pc, #76]	; (1dd24 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
   1dcd6:	4a10      	ldr	r2, [pc, #64]	; (1dd18 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1dcd8:	9300      	str	r3, [sp, #0]
   1dcda:	6945      	ldr	r5, [r0, #20]
   1dcdc:	2347      	movs	r3, #71	; 0x47
   1dcde:	4912      	ldr	r1, [pc, #72]	; (1dd28 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
   1dce0:	47a8      	blx	r5
   1dce2:	e7eb      	b.n	1dcbc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
   1dce4:	f7ff ff3c 	bl	1db60 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
   1dce8:	2800      	cmp	r0, #0
   1dcea:	d0e8      	beq.n	1dcbe <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   1dcec:	4621      	mov	r1, r4
   1dcee:	4628      	mov	r0, r5
   1dcf0:	696f      	ldr	r7, [r5, #20]
   1dcf2:	f7ff ff35 	bl	1db60 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
   1dcf6:	2300      	movs	r3, #0
   1dcf8:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1dcfc:	4b0b      	ldr	r3, [pc, #44]	; (1dd2c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
   1dcfe:	4628      	mov	r0, r5
   1dd00:	9301      	str	r3, [sp, #4]
   1dd02:	4b0b      	ldr	r3, [pc, #44]	; (1dd30 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x94>)
   1dd04:	4a04      	ldr	r2, [pc, #16]	; (1dd18 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1dd06:	9300      	str	r3, [sp, #0]
   1dd08:	4907      	ldr	r1, [pc, #28]	; (1dd28 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
   1dd0a:	2348      	movs	r3, #72	; 0x48
   1dd0c:	47b8      	blx	r7
   1dd0e:	4630      	mov	r0, r6
   1dd10:	e7d5      	b.n	1dcbe <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   1dd12:	bf00      	nop
   1dd14:	00035b9b 	.word	0x00035b9b
   1dd18:	00035b3c 	.word	0x00035b3c
   1dd1c:	00034c0c 	.word	0x00034c0c
   1dd20:	00035884 	.word	0x00035884
   1dd24:	00034b16 	.word	0x00034b16
   1dd28:	00034aec 	.word	0x00034aec
   1dd2c:	00035bc8 	.word	0x00035bc8
   1dd30:	00035bd2 	.word	0x00035bd2

0001dd34 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:
  return kTfLiteOk;
}

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
   1dd34:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1dd36:	4604      	mov	r4, r0
TfLiteRegistration Register_RESHAPE() {
   1dd38:	4606      	mov	r6, r0
          /*version=*/0};
   1dd3a:	4d04      	ldr	r5, [pc, #16]	; (1dd4c <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x18>)
   1dd3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1dd3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1dd40:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1dd44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1dd48:	4630      	mov	r0, r6
   1dd4a:	bd70      	pop	{r4, r5, r6, pc}
   1dd4c:	00031b88 	.word	0x00031b88

0001dd50 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>:

inline int32 GetNearestNeighbor(const int input_value, const int32 input_size,
                                const int32 output_size,
                                const bool align_corners,
                                const bool half_pixel_centers) {
  const float scale =
   1dd50:	ee07 0a90 	vmov	s15, r0
                                const bool half_pixel_centers) {
   1dd54:	b538      	push	{r3, r4, r5, lr}
   1dd56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   1dd5a:	f89d 4010 	ldrb.w	r4, [sp, #16]
   1dd5e:	1e4d      	subs	r5, r1, #1
      (align_corners && output_size > 1)
          ? (input_size - 1) / static_cast<float>(output_size - 1)
   1dd60:	b36b      	cbz	r3, 1ddbe <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x6e>
      (align_corners && output_size > 1)
   1dd62:	2a01      	cmp	r2, #1
   1dd64:	dd2b      	ble.n	1ddbe <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x6e>
          ? (input_size - 1) / static_cast<float>(output_size - 1)
   1dd66:	3a01      	subs	r2, #1
   1dd68:	ee07 2a90 	vmov	s15, r2
   1dd6c:	ee06 5a90 	vmov	s13, r5
   1dd70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   1dd74:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   1dd78:	ee86 6aa7 	vdiv.f32	s12, s13, s15
          : input_size / static_cast<float>(output_size);
  const float offset = half_pixel_centers ? 0.5f : 0.0f;
   1dd7c:	bb8c      	cbnz	r4, 1dde2 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x92>
   1dd7e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 1ddf0 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0xa0>
  int32 output_value = std::min(
   1dd82:	ee77 7a26 	vadd.f32	s15, s14, s13
   1dd86:	ee67 7a86 	vmul.f32	s15, s15, s12
      align_corners
          ? static_cast<int32>(TfLiteRound((input_value + offset) * scale))
   1dd8a:	b36b      	cbz	r3, 1dde8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x98>
   1dd8c:	ee37 7a26 	vadd.f32	s14, s14, s13
   1dd90:	ee67 7a06 	vmul.f32	s15, s14, s12
   1dd94:	ee17 0a90 	vmov	r0, s15
   1dd98:	f7ee fbb6 	bl	c508 <__aeabi_f2d>
   1dd9c:	f004 feca 	bl	22b34 <round>
   1dda0:	f7f2 fe46 	bl	10a30 <__aeabi_d2f>
   1dda4:	ee07 0a90 	vmov	s15, r0
   1dda8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1ddac:	ee17 0a90 	vmov	r0, s15
   1ddb0:	42a8      	cmp	r0, r5
   1ddb2:	bfa8      	it	ge
   1ddb4:	4628      	movge	r0, r5
          : static_cast<int32>(std::floor((input_value + offset) * scale)),
      input_size - 1);
  if (half_pixel_centers) {
   1ddb6:	b10c      	cbz	r4, 1ddbc <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x6c>
    output_value = std::max(static_cast<int32>(0), output_value);
   1ddb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return output_value;
}
   1ddbc:	bd38      	pop	{r3, r4, r5, pc}
          : input_size / static_cast<float>(output_size);
   1ddbe:	ee07 1a90 	vmov	s15, r1
   1ddc2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   1ddc6:	ee07 2a90 	vmov	s15, r2
   1ddca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          ? (input_size - 1) / static_cast<float>(output_size - 1)
   1ddce:	ee86 6aa7 	vdiv.f32	s12, s13, s15
  const float offset = half_pixel_centers ? 0.5f : 0.0f;
   1ddd2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   1ddd6:	eddf 7a06 	vldr	s15, [pc, #24]	; 1ddf0 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0xa0>
   1ddda:	2c00      	cmp	r4, #0
   1dddc:	fe47 6aa6 	vseleq.f32	s13, s15, s13
   1dde0:	e7cf      	b.n	1dd82 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x32>
   1dde2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   1dde6:	e7d1      	b.n	1dd8c <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x3c>
  { return __builtin_floorf(__x); }
   1dde8:	fefb 7a67 	vrintm.f32	s15, s15
   1ddec:	e7dc      	b.n	1dda8 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb+0x58>
   1ddee:	bf00      	nop
   1ddf0:	00000000 	.word	0x00000000

0001ddf4 <_ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv>:

  return kTfLiteOk;
}
}  // namespace resize_nearest_neighbor

TfLiteRegistration Register_RESIZE_NEAREST_NEIGHBOR() {
   1ddf4:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/resize_nearest_neighbor::Prepare,
          /*invoke=*/resize_nearest_neighbor::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1ddf6:	4604      	mov	r4, r0
TfLiteRegistration Register_RESIZE_NEAREST_NEIGHBOR() {
   1ddf8:	4606      	mov	r6, r0
          /*version=*/0};
   1ddfa:	4d04      	ldr	r5, [pc, #16]	; (1de0c <_ZN6tflite3ops5micro32Register_RESIZE_NEAREST_NEIGHBOREv+0x18>)
   1ddfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ddfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1de00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1de04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1de08:	4630      	mov	r0, r6
   1de0a:	bd70      	pop	{r4, r5, r6, pc}
   1de0c:	00031ba8 	.word	0x00031ba8

0001de10 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1de10:	b5f0      	push	{r4, r5, r6, r7, lr}
  return &context->tensors[node->outputs->data[index]];
   1de12:	684a      	ldr	r2, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1de14:	680d      	ldr	r5, [r1, #0]
  op_params.align_corners = params->align_corners;
   1de16:	6949      	ldr	r1, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1de18:	b099      	sub	sp, #100	; 0x64
  op_params.align_corners = params->align_corners;
   1de1a:	7809      	ldrb	r1, [r1, #0]
   1de1c:	6856      	ldr	r6, [r2, #4]
   1de1e:	f88d 1014 	strb.w	r1, [sp, #20]
  op_params.half_pixel_centers = false;
   1de22:	2100      	movs	r1, #0
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1de24:	6887      	ldr	r7, [r0, #8]
   1de26:	01b2      	lsls	r2, r6, #6
  if (output->type == kTfLiteFloat32) {
   1de28:	5cba      	ldrb	r2, [r7, r2]
  return &context->tensors[node->inputs->data[index]];
   1de2a:	686c      	ldr	r4, [r5, #4]
   1de2c:	68ad      	ldr	r5, [r5, #8]
   1de2e:	2a01      	cmp	r2, #1
   1de30:	eb07 1484 	add.w	r4, r7, r4, lsl #6
   1de34:	eb07 1585 	add.w	r5, r7, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1de38:	eb07 1686 	add.w	r6, r7, r6, lsl #6
  op_params.half_pixel_centers = false;
   1de3c:	f88d 1015 	strb.w	r1, [sp, #21]
  if (output->type == kTfLiteFloat32) {
   1de40:	d126      	bne.n	1de90 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x80>
        op_params, GetTensorShape(input), GetTensorData<int32>(input),
   1de42:	4621      	mov	r1, r4
   1de44:	a806      	add	r0, sp, #24
   1de46:	f009 fc2d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1de4a:	b104      	cbz	r4, 1de4e <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x3e>
   1de4c:	6864      	ldr	r4, [r4, #4]
        GetTensorShape(size), GetTensorData<int32>(size),
   1de4e:	4629      	mov	r1, r5
   1de50:	a80c      	add	r0, sp, #48	; 0x30
   1de52:	f009 fc27 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1de56:	b105      	cbz	r5, 1de5a <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x4a>
   1de58:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(output), GetTensorData<int32>(output));
   1de5a:	af12      	add	r7, sp, #72	; 0x48
   1de5c:	4631      	mov	r1, r6
   1de5e:	4638      	mov	r0, r7
   1de60:	f009 fc20 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::ResizeNearestNeighbor(
   1de64:	6873      	ldr	r3, [r6, #4]
   1de66:	4622      	mov	r2, r4
   1de68:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1de6c:	9500      	str	r5, [sp, #0]
   1de6e:	ab0c      	add	r3, sp, #48	; 0x30
   1de70:	a906      	add	r1, sp, #24
   1de72:	a805      	add	r0, sp, #20
   1de74:	f010 fa47 	bl	2e306 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   1de78:	4638      	mov	r0, r7
   1de7a:	f009 fbce 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(size), GetTensorData<int32>(size),
   1de7e:	a80c      	add	r0, sp, #48	; 0x30
   1de80:	f009 fbcb 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1de84:	a806      	add	r0, sp, #24
   1de86:	f009 fbc8 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1de8a:	2000      	movs	r0, #0
}
   1de8c:	b019      	add	sp, #100	; 0x64
   1de8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (output->type == kTfLiteUInt8) {
   1de90:	2a03      	cmp	r2, #3
   1de92:	d11b      	bne.n	1decc <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xbc>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
   1de94:	4621      	mov	r1, r4
   1de96:	a806      	add	r0, sp, #24
   1de98:	f009 fc04 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1de9c:	b104      	cbz	r4, 1dea0 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x90>
   1de9e:	6864      	ldr	r4, [r4, #4]
        GetTensorShape(size), GetTensorData<int32>(size),
   1dea0:	4629      	mov	r1, r5
   1dea2:	a80c      	add	r0, sp, #48	; 0x30
   1dea4:	f009 fbfe 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1dea8:	b105      	cbz	r5, 1deac <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x9c>
   1deaa:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   1deac:	af12      	add	r7, sp, #72	; 0x48
   1deae:	4631      	mov	r1, r6
   1deb0:	4638      	mov	r0, r7
   1deb2:	f009 fbf7 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::ResizeNearestNeighbor(
   1deb6:	6873      	ldr	r3, [r6, #4]
   1deb8:	4622      	mov	r2, r4
   1deba:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1debe:	9500      	str	r5, [sp, #0]
   1dec0:	ab0c      	add	r3, sp, #48	; 0x30
   1dec2:	a906      	add	r1, sp, #24
   1dec4:	a805      	add	r0, sp, #20
   1dec6:	f010 fab1 	bl	2e42c <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>
   1deca:	e7d5      	b.n	1de78 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x68>
  } else if (output->type == kTfLiteInt8) {
   1decc:	2a09      	cmp	r2, #9
   1dece:	d11b      	bne.n	1df08 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xf8>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
   1ded0:	4621      	mov	r1, r4
   1ded2:	a806      	add	r0, sp, #24
   1ded4:	f009 fbe6 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ded8:	b104      	cbz	r4, 1dedc <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xcc>
   1deda:	6864      	ldr	r4, [r4, #4]
        GetTensorShape(size), GetTensorData<int32>(size),
   1dedc:	4629      	mov	r1, r5
   1dede:	a80c      	add	r0, sp, #48	; 0x30
   1dee0:	f009 fbe0 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1dee4:	b105      	cbz	r5, 1dee8 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0xd8>
   1dee6:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(output), GetTensorData<int8_t>(output));
   1dee8:	af12      	add	r7, sp, #72	; 0x48
   1deea:	4631      	mov	r1, r6
   1deec:	4638      	mov	r0, r7
   1deee:	f009 fbd9 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::ResizeNearestNeighbor(
   1def2:	6873      	ldr	r3, [r6, #4]
   1def4:	4622      	mov	r2, r4
   1def6:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1defa:	9500      	str	r5, [sp, #0]
   1defc:	ab0c      	add	r3, sp, #48	; 0x30
   1defe:	a906      	add	r1, sp, #24
   1df00:	a805      	add	r0, sp, #20
   1df02:	f010 fb23 	bl	2e54c <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>
   1df06:	e7b7      	b.n	1de78 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    TF_LITE_KERNEL_LOG(context,
   1df08:	6943      	ldr	r3, [r0, #20]
   1df0a:	4902      	ldr	r1, [pc, #8]	; (1df14 <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x104>)
   1df0c:	4798      	blx	r3
    return kTfLiteError;
   1df0e:	2001      	movs	r0, #1
   1df10:	e7bc      	b.n	1de8c <_ZN6tflite3ops5micro23resize_nearest_neighbor4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
   1df12:	bf00      	nop
   1df14:	00035bef 	.word	0x00035bef

0001df18 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode>:
namespace round {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1df18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1df1c:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1df1e:	4605      	mov	r5, r0
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1df20:	681e      	ldr	r6, [r3, #0]
   1df22:	b085      	sub	sp, #20
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1df24:	2e01      	cmp	r6, #1
   1df26:	d00c      	beq.n	1df42 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
   1df28:	2401      	movs	r4, #1
   1df2a:	4b4a      	ldr	r3, [pc, #296]	; (1e054 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
   1df2c:	e9cd 6402 	strd	r6, r4, [sp, #8]
   1df30:	9301      	str	r3, [sp, #4]
   1df32:	4b49      	ldr	r3, [pc, #292]	; (1e058 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x140>)
   1df34:	9300      	str	r3, [sp, #0]
   1df36:	2321      	movs	r3, #33	; 0x21
   1df38:	6945      	ldr	r5, [r0, #20]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   1df3a:	4a48      	ldr	r2, [pc, #288]	; (1e05c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1df3c:	4948      	ldr	r1, [pc, #288]	; (1e060 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   1df3e:	47a8      	blx	r5
   1df40:	e00f      	b.n	1df62 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   1df42:	684a      	ldr	r2, [r1, #4]
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1df44:	6814      	ldr	r4, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1df46:	2c01      	cmp	r4, #1
   1df48:	d00f      	beq.n	1df6a <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x52>
   1df4a:	4b42      	ldr	r3, [pc, #264]	; (1e054 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x13c>)
   1df4c:	e9cd 4602 	strd	r4, r6, [sp, #8]
   1df50:	9301      	str	r3, [sp, #4]
   1df52:	4b44      	ldr	r3, [pc, #272]	; (1e064 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
   1df54:	4a41      	ldr	r2, [pc, #260]	; (1e05c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1df56:	9300      	str	r3, [sp, #0]
   1df58:	6944      	ldr	r4, [r0, #20]
   1df5a:	2322      	movs	r3, #34	; 0x22
   1df5c:	4940      	ldr	r1, [pc, #256]	; (1e060 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   1df5e:	47a0      	blx	r4
   1df60:	4634      	mov	r4, r6
  for (int i = 0; i < output->dims->size; ++i) {
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
  }
  return kTfLiteOk;
}
   1df62:	4620      	mov	r0, r4
   1df64:	b005      	add	sp, #20
   1df66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return &context->tensors[node->inputs->data[index]];
   1df6a:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1df6c:	6886      	ldr	r6, [r0, #8]
   1df6e:	ea4f 1883 	mov.w	r8, r3, lsl #6
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
   1df72:	f816 7008 	ldrb.w	r7, [r6, r8]
   1df76:	eb06 1383 	add.w	r3, r6, r3, lsl #6
   1df7a:	2f01      	cmp	r7, #1
   1df7c:	d014      	beq.n	1dfa8 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x90>
   1df7e:	f8d0 8014 	ldr.w	r8, [r0, #20]
   1df82:	4638      	mov	r0, r7
   1df84:	f7ee fe9e 	bl	ccc4 <TfLiteTypeGetName>
   1df88:	4606      	mov	r6, r0
   1df8a:	4620      	mov	r0, r4
   1df8c:	f7ee fe9a 	bl	ccc4 <TfLiteTypeGetName>
   1df90:	4b35      	ldr	r3, [pc, #212]	; (1e068 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
   1df92:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1df96:	9301      	str	r3, [sp, #4]
   1df98:	4b34      	ldr	r3, [pc, #208]	; (1e06c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
   1df9a:	4628      	mov	r0, r5
   1df9c:	9300      	str	r3, [sp, #0]
   1df9e:	4a2f      	ldr	r2, [pc, #188]	; (1e05c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1dfa0:	2323      	movs	r3, #35	; 0x23
   1dfa2:	4933      	ldr	r1, [pc, #204]	; (1e070 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
   1dfa4:	47c0      	blx	r8
   1dfa6:	e7dc      	b.n	1df62 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return &context->tensors[node->outputs->data[index]];
   1dfa8:	6852      	ldr	r2, [r2, #4]
   1dfaa:	0191      	lsls	r1, r2, #6
  TF_LITE_ENSURE_TYPES_EQ(context, output->type, input->type);
   1dfac:	5c74      	ldrb	r4, [r6, r1]
   1dfae:	eb06 1282 	add.w	r2, r6, r2, lsl #6
   1dfb2:	2c01      	cmp	r4, #1
   1dfb4:	d016      	beq.n	1dfe4 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xcc>
   1dfb6:	f8d0 9014 	ldr.w	r9, [r0, #20]
   1dfba:	4620      	mov	r0, r4
   1dfbc:	f7ee fe82 	bl	ccc4 <TfLiteTypeGetName>
   1dfc0:	4604      	mov	r4, r0
   1dfc2:	f816 0008 	ldrb.w	r0, [r6, r8]
   1dfc6:	f7ee fe7d 	bl	ccc4 <TfLiteTypeGetName>
   1dfca:	4b28      	ldr	r3, [pc, #160]	; (1e06c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
   1dfcc:	e9cd 4002 	strd	r4, r0, [sp, #8]
   1dfd0:	9301      	str	r3, [sp, #4]
   1dfd2:	4b28      	ldr	r3, [pc, #160]	; (1e074 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
   1dfd4:	4628      	mov	r0, r5
   1dfd6:	9300      	str	r3, [sp, #0]
   1dfd8:	4a20      	ldr	r2, [pc, #128]	; (1e05c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1dfda:	2324      	movs	r3, #36	; 0x24
   1dfdc:	4924      	ldr	r1, [pc, #144]	; (1e070 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
   1dfde:	47c8      	blx	r9
   1dfe0:	463c      	mov	r4, r7
   1dfe2:	e7be      	b.n	1df62 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  TF_LITE_ENSURE_EQ(context, output->bytes, input->bytes);
   1dfe4:	6991      	ldr	r1, [r2, #24]
   1dfe6:	699e      	ldr	r6, [r3, #24]
   1dfe8:	42b1      	cmp	r1, r6
   1dfea:	d008      	beq.n	1dffe <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0xe6>
   1dfec:	4b22      	ldr	r3, [pc, #136]	; (1e078 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
   1dfee:	e9cd 1602 	strd	r1, r6, [sp, #8]
   1dff2:	9301      	str	r3, [sp, #4]
   1dff4:	4b21      	ldr	r3, [pc, #132]	; (1e07c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
   1dff6:	9300      	str	r3, [sp, #0]
   1dff8:	6945      	ldr	r5, [r0, #20]
   1dffa:	2325      	movs	r3, #37	; 0x25
   1dffc:	e79d      	b.n	1df3a <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  TF_LITE_ENSURE_EQ(context, output->dims->size, input->dims->size);
   1dffe:	6897      	ldr	r7, [r2, #8]
   1e000:	689a      	ldr	r2, [r3, #8]
   1e002:	6839      	ldr	r1, [r7, #0]
   1e004:	6813      	ldr	r3, [r2, #0]
   1e006:	4299      	cmp	r1, r3
   1e008:	d008      	beq.n	1e01c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
   1e00a:	e9cd 1302 	strd	r1, r3, [sp, #8]
   1e00e:	4b1c      	ldr	r3, [pc, #112]	; (1e080 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x168>)
   1e010:	9301      	str	r3, [sp, #4]
   1e012:	4b1c      	ldr	r3, [pc, #112]	; (1e084 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x16c>)
   1e014:	9300      	str	r3, [sp, #0]
   1e016:	6945      	ldr	r5, [r0, #20]
   1e018:	2326      	movs	r3, #38	; 0x26
   1e01a:	e78e      	b.n	1df3a <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
   1e01c:	4623      	mov	r3, r4
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   1e01e:	3a04      	subs	r2, #4
  for (int i = 0; i < output->dims->size; ++i) {
   1e020:	1e58      	subs	r0, r3, #1
   1e022:	4281      	cmp	r1, r0
   1e024:	dd13      	ble.n	1e04e <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x136>
    TF_LITE_ENSURE_EQ(context, output->dims->data[i], input->dims->data[i]);
   1e026:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
   1e02a:	3301      	adds	r3, #1
   1e02c:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
   1e030:	42b0      	cmp	r0, r6
   1e032:	d0f5      	beq.n	1e020 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x108>
   1e034:	4b14      	ldr	r3, [pc, #80]	; (1e088 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x170>)
   1e036:	e9cd 0602 	strd	r0, r6, [sp, #8]
   1e03a:	9301      	str	r3, [sp, #4]
   1e03c:	4b13      	ldr	r3, [pc, #76]	; (1e08c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x174>)
   1e03e:	4628      	mov	r0, r5
   1e040:	9300      	str	r3, [sp, #0]
   1e042:	696e      	ldr	r6, [r5, #20]
   1e044:	2328      	movs	r3, #40	; 0x28
   1e046:	4a05      	ldr	r2, [pc, #20]	; (1e05c <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
   1e048:	4905      	ldr	r1, [pc, #20]	; (1e060 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
   1e04a:	47b0      	blx	r6
   1e04c:	e789      	b.n	1df62 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
  return kTfLiteOk;
   1e04e:	2400      	movs	r4, #0
   1e050:	e787      	b.n	1df62 <_ZN6tflite3ops5micro5round7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
   1e052:	bf00      	nop
   1e054:	00035884 	.word	0x00035884
   1e058:	00034b06 	.word	0x00034b06
   1e05c:	00035c21 	.word	0x00035c21
   1e060:	00034aec 	.word	0x00034aec
   1e064:	00034b16 	.word	0x00034b16
   1e068:	00034b41 	.word	0x00034b41
   1e06c:	0003540f 	.word	0x0003540f
   1e070:	00034b27 	.word	0x00034b27
   1e074:	000353f7 	.word	0x000353f7
   1e078:	00034b50 	.word	0x00034b50
   1e07c:	00034b5d 	.word	0x00034b5d
   1e080:	00034b6b 	.word	0x00034b6b
   1e084:	00034b7d 	.word	0x00034b7d
   1e088:	00034b90 	.word	0x00034b90
   1e08c:	00034ba5 	.word	0x00034ba5

0001e090 <_ZN6tflite3ops5micro14Register_ROUNDEv>:

  return kTfLiteOk;
}
}  // namespace round

TfLiteRegistration Register_ROUND() {
   1e090:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/round::Prepare,
          /*invoke=*/round::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1e092:	4604      	mov	r4, r0
TfLiteRegistration Register_ROUND() {
   1e094:	4606      	mov	r6, r0
          /*version=*/0};
   1e096:	4d04      	ldr	r5, [pc, #16]	; (1e0a8 <_ZN6tflite3ops5micro14Register_ROUNDEv+0x18>)
   1e098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e09a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e09c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1e0a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1e0a4:	4630      	mov	r0, r6
   1e0a6:	bd70      	pop	{r4, r5, r6, pc}
   1e0a8:	00031bc8 	.word	0x00031bc8

0001e0ac <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
  return kTfLiteOk;
}

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   1e0ac:	b530      	push	{r4, r5, lr}
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1e0ae:	680a      	ldr	r2, [r1, #0]
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
   1e0b0:	b085      	sub	sp, #20
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1e0b2:	6815      	ldr	r5, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1e0b4:	2d01      	cmp	r5, #1
   1e0b6:	d00d      	beq.n	1e0d4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28>
   1e0b8:	2401      	movs	r4, #1
   1e0ba:	4a18      	ldr	r2, [pc, #96]	; (1e11c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
   1e0bc:	e9cd 5402 	strd	r5, r4, [sp, #8]
   1e0c0:	9201      	str	r2, [sp, #4]
   1e0c2:	4a17      	ldr	r2, [pc, #92]	; (1e120 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x74>)
   1e0c4:	234c      	movs	r3, #76	; 0x4c
   1e0c6:	9200      	str	r2, [sp, #0]
   1e0c8:	6945      	ldr	r5, [r0, #20]
   1e0ca:	4a16      	ldr	r2, [pc, #88]	; (1e124 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   1e0cc:	4916      	ldr	r1, [pc, #88]	; (1e128 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1e0ce:	47a8      	blx	r5
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  const TfLiteTensor* input = GetInput(context, node, 0);
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   1e0d0:	4620      	mov	r0, r4
   1e0d2:	e00f      	b.n	1e0f4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1e0d4:	6849      	ldr	r1, [r1, #4]
   1e0d6:	680c      	ldr	r4, [r1, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1e0d8:	2c01      	cmp	r4, #1
   1e0da:	d00d      	beq.n	1e0f8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4c>
   1e0dc:	4a0f      	ldr	r2, [pc, #60]	; (1e11c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x70>)
   1e0de:	e9cd 4502 	strd	r4, r5, [sp, #8]
   1e0e2:	9201      	str	r2, [sp, #4]
   1e0e4:	4a11      	ldr	r2, [pc, #68]	; (1e12c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x80>)
   1e0e6:	234d      	movs	r3, #77	; 0x4d
   1e0e8:	9200      	str	r2, [sp, #0]
   1e0ea:	6944      	ldr	r4, [r0, #20]
   1e0ec:	4a0d      	ldr	r2, [pc, #52]	; (1e124 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   1e0ee:	490e      	ldr	r1, [pc, #56]	; (1e128 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1e0f0:	47a0      	blx	r4
   1e0f2:	4628      	mov	r0, r5

  return kTfLiteOk;
}
   1e0f4:	b005      	add	sp, #20
   1e0f6:	bd30      	pop	{r4, r5, pc}
  return &context->tensors[node->inputs->data[index]];
   1e0f8:	6851      	ldr	r1, [r2, #4]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
   1e0fa:	6882      	ldr	r2, [r0, #8]
   1e0fc:	eb02 1281 	add.w	r2, r2, r1, lsl #6
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1e100:	6892      	ldr	r2, [r2, #8]
   1e102:	6812      	ldr	r2, [r2, #0]
   1e104:	2a00      	cmp	r2, #0
   1e106:	dc07      	bgt.n	1e118 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x6c>
   1e108:	4a09      	ldr	r2, [pc, #36]	; (1e130 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x84>)
   1e10a:	234f      	movs	r3, #79	; 0x4f
   1e10c:	9200      	str	r2, [sp, #0]
   1e10e:	6945      	ldr	r5, [r0, #20]
   1e110:	4a04      	ldr	r2, [pc, #16]	; (1e124 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   1e112:	4908      	ldr	r1, [pc, #32]	; (1e134 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x88>)
   1e114:	47a8      	blx	r5
   1e116:	e7db      	b.n	1e0d0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24>
  return kTfLiteOk;
   1e118:	2000      	movs	r0, #0
   1e11a:	e7eb      	b.n	1e0f4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
   1e11c:	00035884 	.word	0x00035884
   1e120:	00034b06 	.word	0x00034b06
   1e124:	00035c48 	.word	0x00035c48
   1e128:	00034aec 	.word	0x00034aec
   1e12c:	00034b16 	.word	0x00034b16
   1e130:	00035c71 	.word	0x00035c71
   1e134:	00034c0c 	.word	0x00034c0c

0001e138 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
   1e138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e13c:	ed2d 8b04 	vpush	{d8-d9}
   1e140:	460c      	mov	r4, r1
   1e142:	b087      	sub	sp, #28
   1e144:	9200      	str	r2, [sp, #0]
   1e146:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1e148:	680b      	ldr	r3, [r1, #0]
                    const RuntimeShape& output_shape, float* output_data) {
   1e14a:	4606      	mov	r6, r0
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1e14c:	3b01      	subs	r3, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1e14e:	4619      	mov	r1, r3
   1e150:	4620      	mov	r0, r4
   1e152:	9202      	str	r2, [sp, #8]
   1e154:	9301      	str	r3, [sp, #4]
   1e156:	f00d fde2 	bl	2bd1e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1e15a:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1e15e:	4607      	mov	r7, r0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1e160:	4619      	mov	r1, r3
   1e162:	4620      	mov	r0, r4
   1e164:	f00c f90e 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   1e168:	2500      	movs	r5, #0
   1e16a:	4604      	mov	r4, r0

  for (int i = 0; i < outer_size; ++i) {
   1e16c:	46aa      	mov	sl, r5
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
   1e16e:	ed9f 9a37 	vldr	s18, [pc, #220]	; 1e24c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x114>
      return __a;
   1e172:	f10d 0b14 	add.w	fp, sp, #20
  for (int i = 0; i < outer_size; ++i) {
   1e176:	45ba      	cmp	sl, r7
   1e178:	da62      	bge.n	1e240 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x108>
    float max = std::numeric_limits<float>::lowest();
   1e17a:	9b00      	ldr	r3, [sp, #0]
   1e17c:	ed8d 9a05 	vstr	s18, [sp, #20]
    for (int c = 0; c < depth; ++c) {
   1e180:	eb03 0985 	add.w	r9, r3, r5, lsl #2
    float max = std::numeric_limits<float>::lowest();
   1e184:	4649      	mov	r1, r9
    for (int c = 0; c < depth; ++c) {
   1e186:	2200      	movs	r2, #0
   1e188:	ea4f 0885 	mov.w	r8, r5, lsl #2
   1e18c:	42a2      	cmp	r2, r4
   1e18e:	da0f      	bge.n	1e1b0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x78>
      max = std::max(max, input_data[i * depth + c]);
   1e190:	460b      	mov	r3, r1
      if (__a < __b)
   1e192:	eddd 7a05 	vldr	s15, [sp, #20]
   1e196:	ed93 7a00 	vldr	s14, [r3]
   1e19a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   1e19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   1e1a2:	bfd8      	it	le
   1e1a4:	465b      	movle	r3, fp
   1e1a6:	681b      	ldr	r3, [r3, #0]
   1e1a8:	3104      	adds	r1, #4
   1e1aa:	9305      	str	r3, [sp, #20]
    for (int c = 0; c < depth; ++c) {
   1e1ac:	3201      	adds	r2, #1
   1e1ae:	e7ed      	b.n	1e18c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x54>
   1e1b0:	464a      	mov	r2, r9
    }

    // Compute sum.
    float sum = 0.f;
    for (int c = 0; c < depth; ++c) {
   1e1b2:	2300      	movs	r3, #0
    float sum = 0.f;
   1e1b4:	ed9f 8a26 	vldr	s16, [pc, #152]	; 1e250 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x118>
    for (int c = 0; c < depth; ++c) {
   1e1b8:	42a3      	cmp	r3, r4
   1e1ba:	db20      	blt.n	1e1fe <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xc6>
   1e1bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1e1be:	4498      	add	r8, r3
      sum += std::exp((input_data[i * depth + c] - max) *
                      static_cast<float>(params.beta));
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
   1e1c0:	2300      	movs	r3, #0
   1e1c2:	42a3      	cmp	r3, r4
   1e1c4:	9301      	str	r3, [sp, #4]
   1e1c6:	da37      	bge.n	1e238 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x100>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
                                            static_cast<float>(params.beta)) /
   1e1c8:	e9d6 0100 	ldrd	r0, r1, [r6]
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
   1e1cc:	eddd 7a05 	vldr	s15, [sp, #20]
   1e1d0:	ecf9 8a01 	vldmia	r9!, {s17}
   1e1d4:	ee78 8ae7 	vsub.f32	s17, s17, s15
                                            static_cast<float>(params.beta)) /
   1e1d8:	f7f2 fc2a 	bl	10a30 <__aeabi_d2f>
  { return __builtin_expf(__x); }
   1e1dc:	ee07 0a90 	vmov	s15, r0
   1e1e0:	ee68 7aa7 	vmul.f32	s15, s17, s15
   1e1e4:	ee17 0a90 	vmov	r0, s15
   1e1e8:	f004 fe9a 	bl	22f20 <expf>
   1e1ec:	ee07 0a90 	vmov	s15, r0
   1e1f0:	eec7 7a88 	vdiv.f32	s15, s15, s16
    for (int c = 0; c < depth; ++c) {
   1e1f4:	9b01      	ldr	r3, [sp, #4]
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
   1e1f6:	ece8 7a01 	vstmia	r8!, {s15}
    for (int c = 0; c < depth; ++c) {
   1e1fa:	3301      	adds	r3, #1
   1e1fc:	e7e1      	b.n	1e1c2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8a>
      sum += std::exp((input_data[i * depth + c] - max) *
   1e1fe:	ecf2 8a01 	vldmia	r2!, {s17}
                      static_cast<float>(params.beta));
   1e202:	e9d6 0100 	ldrd	r0, r1, [r6]
      sum += std::exp((input_data[i * depth + c] - max) *
   1e206:	eddd 7a05 	vldr	s15, [sp, #20]
   1e20a:	9302      	str	r3, [sp, #8]
   1e20c:	ee78 8ae7 	vsub.f32	s17, s17, s15
   1e210:	9201      	str	r2, [sp, #4]
   1e212:	9203      	str	r2, [sp, #12]
                      static_cast<float>(params.beta));
   1e214:	f7f2 fc0c 	bl	10a30 <__aeabi_d2f>
   1e218:	ee07 0a90 	vmov	s15, r0
   1e21c:	ee68 7aa7 	vmul.f32	s15, s17, s15
   1e220:	ee17 0a90 	vmov	r0, s15
   1e224:	f004 fe7c 	bl	22f20 <expf>
      sum += std::exp((input_data[i * depth + c] - max) *
   1e228:	ee07 0a90 	vmov	s15, r0
    for (int c = 0; c < depth; ++c) {
   1e22c:	9b02      	ldr	r3, [sp, #8]
      sum += std::exp((input_data[i * depth + c] - max) *
   1e22e:	ee38 8a27 	vadd.f32	s16, s16, s15
    for (int c = 0; c < depth; ++c) {
   1e232:	9a01      	ldr	r2, [sp, #4]
   1e234:	3301      	adds	r3, #1
   1e236:	e7bf      	b.n	1e1b8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x80>
  for (int i = 0; i < outer_size; ++i) {
   1e238:	f10a 0a01 	add.w	sl, sl, #1
   1e23c:	4425      	add	r5, r4
   1e23e:	e79a      	b.n	1e176 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3e>
                                   sum;
    }
  }
}
   1e240:	b007      	add	sp, #28
   1e242:	ecbd 8b04 	vpop	{d8-d9}
   1e246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e24a:	bf00      	nop
   1e24c:	ff7fffff 	.word	0xff7fffff
   1e250:	00000000 	.word	0x00000000

0001e254 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
      return kTfLiteError;
  }
}
}  // namespace activations

TfLiteRegistration Register_SOFTMAX() {
   1e254:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/activations::SoftmaxPrepare,
          /*invoke=*/activations::SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1e256:	4604      	mov	r4, r0
TfLiteRegistration Register_SOFTMAX() {
   1e258:	4606      	mov	r6, r0
          /*version=*/0};
   1e25a:	4d04      	ldr	r5, [pc, #16]	; (1e26c <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x18>)
   1e25c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e25e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e260:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1e264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1e268:	4630      	mov	r0, r6
   1e26a:	bd70      	pop	{r4, r5, r6, pc}
   1e26c:	00031be8 	.word	0x00031be8

0001e270 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
   1e270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return a - b;
   1e274:	f040 447f 	orr.w	r4, r0, #4278190080	; 0xff000000
FixedPoint<tRawType, 0> exp_on_negative_values(
   1e278:	4605      	mov	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
   1e27a:	0160      	lsls	r0, r4, #5
   1e27c:	f7fd fae4 	bl	1b848 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIiEENS_10FixedPointIT_Li0EEES3_>
   1e280:	4606      	mov	r6, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
   1e282:	4842      	ldr	r0, [pc, #264]	; (1e38c <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x11c>)
   1e284:	f00d ffa9 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1e288:	4601      	mov	r1, r0
   1e28a:	4630      	mov	r0, r6
   1e28c:	f00d ffaa 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a - b;
   1e290:	1b64      	subs	r4, r4, r5
  return a ? BitNot(zero) : zero;
   1e292:	f3c4 6b00 	ubfx	fp, r4, #24, #1
   1e296:	f1cb 0900 	rsb	r9, fp, #0
  return a & b;
   1e29a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1e29e:	ea00 0909 	and.w	r9, r0, r9
   1e2a2:	ea0b 0006 	and.w	r0, fp, r6
  return a ^ b;
   1e2a6:	ea89 0a00 	eor.w	sl, r9, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
   1e2aa:	4839      	ldr	r0, [pc, #228]	; (1e390 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x120>)
   1e2ac:	f00d ff95 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1e2b0:	4601      	mov	r1, r0
   1e2b2:	4650      	mov	r0, sl
   1e2b4:	f00d ff96 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1e2b8:	f3c4 6940 	ubfx	r9, r4, #25, #1
   1e2bc:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
   1e2c0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1e2c4:	ea00 0008 	and.w	r0, r0, r8
   1e2c8:	ea09 090a 	and.w	r9, r9, sl
  return a ^ b;
   1e2cc:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
   1e2d0:	4830      	ldr	r0, [pc, #192]	; (1e394 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x124>)
   1e2d2:	f00d ff82 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1e2d6:	4601      	mov	r1, r0
   1e2d8:	4648      	mov	r0, r9
   1e2da:	f00d ff83 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1e2de:	f3c4 6780 	ubfx	r7, r4, #26, #1
   1e2e2:	427e      	negs	r6, r7
  return a & b;
   1e2e4:	3f01      	subs	r7, #1
   1e2e6:	4030      	ands	r0, r6
   1e2e8:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
   1e2ec:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
   1e2ee:	482a      	ldr	r0, [pc, #168]	; (1e398 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x128>)
   1e2f0:	f00d ff73 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1e2f4:	4601      	mov	r1, r0
   1e2f6:	4638      	mov	r0, r7
   1e2f8:	f00d ff74 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1e2fc:	f3c4 6bc0 	ubfx	fp, r4, #27, #1
   1e300:	f1cb 0a00 	rsb	sl, fp, #0
  return a & b;
   1e304:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   1e308:	ea00 000a 	and.w	r0, r0, sl
   1e30c:	ea0b 0b07 	and.w	fp, fp, r7
  return a ^ b;
   1e310:	ea80 0b0b 	eor.w	fp, r0, fp
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
   1e314:	4821      	ldr	r0, [pc, #132]	; (1e39c <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12c>)
   1e316:	f00d ff60 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1e31a:	4601      	mov	r1, r0
   1e31c:	4658      	mov	r0, fp
   1e31e:	f00d ff61 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1e322:	f3c4 7900 	ubfx	r9, r4, #28, #1
   1e326:	f1c9 0800 	rsb	r8, r9, #0
  return a & b;
   1e32a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1e32e:	ea00 0008 	and.w	r0, r0, r8
   1e332:	ea09 090b 	and.w	r9, r9, fp
  return a ^ b;
   1e336:	ea80 0909 	eor.w	r9, r0, r9
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
   1e33a:	4819      	ldr	r0, [pc, #100]	; (1e3a0 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x130>)
   1e33c:	f00d ff4d 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1e340:	4601      	mov	r1, r0
   1e342:	4648      	mov	r0, r9
   1e344:	f00d ff4e 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1e348:	f3c4 7740 	ubfx	r7, r4, #29, #1
   1e34c:	427e      	negs	r6, r7
  return a & b;
   1e34e:	3f01      	subs	r7, #1
   1e350:	4030      	ands	r0, r6
   1e352:	ea07 0709 	and.w	r7, r7, r9
  return a ^ b;
   1e356:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
   1e358:	20f2      	movs	r0, #242	; 0xf2
   1e35a:	f00d ff3e 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
   1e35e:	4601      	mov	r1, r0
   1e360:	4638      	mov	r0, r7
   1e362:	f00d ff3f 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1e366:	f3c4 7480 	ubfx	r4, r4, #30, #1
   1e36a:	4263      	negs	r3, r4
  return a & b;
   1e36c:	4018      	ands	r0, r3
  return a ? BitNot(zero) : zero;
   1e36e:	fab5 f385 	clz	r3, r5
  return a & b;
   1e372:	3c01      	subs	r4, #1
   1e374:	403c      	ands	r4, r7
  return a ? BitNot(zero) : zero;
   1e376:	095b      	lsrs	r3, r3, #5
  return a ^ b;
   1e378:	4044      	eors	r4, r0
  return a & b;
   1e37a:	1e58      	subs	r0, r3, #1
  return a ? BitNot(zero) : zero;
   1e37c:	425b      	negs	r3, r3
  return a & b;
   1e37e:	4020      	ands	r0, r4
   1e380:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
}
   1e384:	4058      	eors	r0, r3
   1e386:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e38a:	bf00      	nop
   1e38c:	63afbe7b 	.word	0x63afbe7b
   1e390:	4da2cbf2 	.word	0x4da2cbf2
   1e394:	2f16ac6c 	.word	0x2f16ac6c
   1e398:	1152aaa4 	.word	0x1152aaa4
   1e39c:	02582ab7 	.word	0x02582ab7
   1e3a0:	000afe11 	.word	0x000afe11

0001e3a4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
   1e3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
  const int32 input_beta_left_shift = params.input_left_shift;
   1e3a8:	e9d0 9a02 	ldrd	r9, sl, [r0, #8]
inline void Softmax(const SoftmaxParams& params,
   1e3ac:	460d      	mov	r5, r1
   1e3ae:	4614      	mov	r4, r2
   1e3b0:	461a      	mov	r2, r3
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1e3b2:	680b      	ldr	r3, [r1, #0]
inline void Softmax(const SoftmaxParams& params,
   1e3b4:	b08b      	sub	sp, #44	; 0x2c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   1e3b6:	3b01      	subs	r3, #1
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1e3b8:	4619      	mov	r1, r3
  const int diff_min = params.diff_min;
   1e3ba:	f8d0 b018 	ldr.w	fp, [r0, #24]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1e3be:	4628      	mov	r0, r5
   1e3c0:	9202      	str	r2, [sp, #8]
   1e3c2:	9301      	str	r3, [sp, #4]
   1e3c4:	f00d fcab 	bl	2bd1e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1e3c8:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   1e3cc:	9000      	str	r0, [sp, #0]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1e3ce:	4619      	mov	r1, r3
   1e3d0:	4628      	mov	r0, r5
   1e3d2:	f00b ffd7 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>

  for (int i = 0; i < outer_size; ++i) {
   1e3d6:	2700      	movs	r7, #0
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   1e3d8:	4605      	mov	r5, r0
   1e3da:	0043      	lsls	r3, r0, #1
   1e3dc:	9e14      	ldr	r6, [sp, #80]	; 0x50
   1e3de:	9301      	str	r3, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
   1e3e0:	9b00      	ldr	r3, [sp, #0]
   1e3e2:	429f      	cmp	r7, r3
   1e3e4:	da7a      	bge.n	1e4dc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x138>
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1e3e6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1e3ea:	4621      	mov	r1, r4
    for (int c = 0; c < depth; ++c) {
   1e3ec:	2200      	movs	r2, #0
    InputT max_in_row = std::numeric_limits<InputT>::min();
   1e3ee:	f88d 3017 	strb.w	r3, [sp, #23]
   1e3f2:	f10d 0e17 	add.w	lr, sp, #23
    for (int c = 0; c < depth; ++c) {
   1e3f6:	42aa      	cmp	r2, r5
   1e3f8:	da0e      	bge.n	1e418 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x74>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   1e3fa:	460b      	mov	r3, r1
      if (__a < __b)
   1e3fc:	f99d 0017 	ldrsb.w	r0, [sp, #23]
   1e400:	f993 c000 	ldrsb.w	ip, [r3]
   1e404:	3101      	adds	r1, #1
   1e406:	4584      	cmp	ip, r0
      return __a;
   1e408:	bfd8      	it	le
   1e40a:	4673      	movle	r3, lr
   1e40c:	f993 3000 	ldrsb.w	r3, [r3]
    for (int c = 0; c < depth; ++c) {
   1e410:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   1e412:	f88d 3017 	strb.w	r3, [sp, #23]
    for (int c = 0; c < depth; ++c) {
   1e416:	e7ee      	b.n	1e3f6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x52>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   1e418:	f04f 0800 	mov.w	r8, #0
   1e41c:	4622      	mov	r2, r4
    for (int c = 0; c < depth; ++c) {
   1e41e:	4643      	mov	r3, r8
   1e420:	42ab      	cmp	r3, r5
   1e422:	da17      	bge.n	1e454 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xb0>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   1e424:	f912 0b01 	ldrsb.w	r0, [r2], #1
   1e428:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32 input_diff =
   1e42c:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   1e42e:	4583      	cmp	fp, r0
   1e430:	dc0e      	bgt.n	1e450 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   1e432:	4649      	mov	r1, r9
   1e434:	fa00 f00a 	lsl.w	r0, r0, sl
   1e438:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1e43c:	f7fc fefe 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   1e440:	f7ff ff16 	bl	1e270 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   1e444:	210c      	movs	r1, #12
   1e446:	f7fc ff31 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   1e44a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
   1e44e:	4480      	add	r8, r0
    for (int c = 0; c < depth; ++c) {
   1e450:	3301      	adds	r3, #1
   1e452:	e7e5      	b.n	1e420 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
                                        exp_on_negative_values(scaled_diff_f8));
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   1e454:	4640      	mov	r0, r8
   1e456:	aa06      	add	r2, sp, #24
   1e458:	210c      	movs	r1, #12
   1e45a:	f010 f9ab 	bl	2e7b4 <_ZN6tflite13GetReciprocalEiiPi>
   1e45e:	4622      	mov	r2, r4
   1e460:	4680      	mov	r8, r0
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));

    for (int c = 0; c < depth; ++c) {
   1e462:	2300      	movs	r3, #0
   1e464:	42ab      	cmp	r3, r5
   1e466:	da34      	bge.n	1e4d2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12e>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   1e468:	f912 0b01 	ldrsb.w	r0, [r2], #1
   1e46c:	f99d 1017 	ldrsb.w	r1, [sp, #23]
      int32 input_diff =
   1e470:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   1e472:	4583      	cmp	fp, r0
   1e474:	dc2a      	bgt.n	1e4cc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x128>
   1e476:	4649      	mov	r1, r9
   1e478:	fa00 f00a 	lsl.w	r0, r0, sl
   1e47c:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e480:	f7fc fedc 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   1e484:	f7ff fef4 	bl	1e270 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   1e488:	4601      	mov	r1, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
   1e48a:	4640      	mov	r0, r8
   1e48c:	f00d feaa 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   1e490:	9906      	ldr	r1, [sp, #24]
   1e492:	310f      	adds	r1, #15
   1e494:	f7fc ff0a 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
            unsat_output +
            static_cast<int32>(std::numeric_limits<OutputT>::min());

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   1e498:	f647 73ff 	movw	r3, #32767	; 0x7fff
            unsat_output +
   1e49c:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
      if (__b < __a)
   1e4a0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        const int32 shifted_output =
   1e4a4:	9007      	str	r0, [sp, #28]
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   1e4a6:	480f      	ldr	r0, [pc, #60]	; (1e4e4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x140>)
      return __a;
   1e4a8:	bfb8      	it	lt
   1e4aa:	a907      	addlt	r1, sp, #28
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   1e4ac:	9308      	str	r3, [sp, #32]
	return __b;
   1e4ae:	bfa8      	it	ge
   1e4b0:	a908      	addge	r1, sp, #32
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   1e4b2:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
   1e4b4:	6808      	ldr	r0, [r1, #0]
      if (__b < __a)
   1e4b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if (__a < __b)
   1e4ba:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
	return __b;
   1e4be:	bfb8      	it	lt
   1e4c0:	a909      	addlt	r1, sp, #36	; 0x24
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   1e4c2:	6809      	ldr	r1, [r1, #0]
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   1e4c4:	f826 1013 	strh.w	r1, [r6, r3, lsl #1]
    for (int c = 0; c < depth; ++c) {
   1e4c8:	3301      	adds	r3, #1
   1e4ca:	e7cb      	b.n	1e464 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   1e4cc:	f248 0100 	movw	r1, #32768	; 0x8000
   1e4d0:	e7f8      	b.n	1e4c4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x120>
  for (int i = 0; i < outer_size; ++i) {
   1e4d2:	9b01      	ldr	r3, [sp, #4]
   1e4d4:	3701      	adds	r7, #1
   1e4d6:	442c      	add	r4, r5
   1e4d8:	441e      	add	r6, r3
   1e4da:	e781      	b.n	1e3e0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
      }
    }
  }
}
   1e4dc:	b00b      	add	sp, #44	; 0x2c
   1e4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4e2:	bf00      	nop
   1e4e4:	ffff8000 	.word	0xffff8000

0001e4e8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   1e4e8:	680b      	ldr	r3, [r1, #0]
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   1e4ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e4ee:	685b      	ldr	r3, [r3, #4]
  const TfLiteTensor* input = GetInput(context, node, 0);
   1e4f0:	6887      	ldr	r7, [r0, #8]
   1e4f2:	ea4f 1983 	mov.w	r9, r3, lsl #6
   1e4f6:	eb07 1883 	add.w	r8, r7, r3, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1e4fa:	684b      	ldr	r3, [r1, #4]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
   1e4fc:	f817 5009 	ldrb.w	r5, [r7, r9]
   1e500:	685e      	ldr	r6, [r3, #4]
   1e502:	2d03      	cmp	r5, #3
   1e504:	ea4f 1386 	mov.w	r3, r6, lsl #6
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   1e508:	4604      	mov	r4, r0
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
   1e50a:	f8d1 a014 	ldr.w	sl, [r1, #20]
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
   1e50e:	b096      	sub	sp, #88	; 0x58
   1e510:	eb07 1686 	add.w	r6, r7, r6, lsl #6
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
   1e514:	d013      	beq.n	1e53e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x56>
   1e516:	2d09      	cmp	r5, #9
   1e518:	f040 809e 	bne.w	1e658 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x170>
      if (output->type == kTfLiteInt16) {
   1e51c:	5cfb      	ldrb	r3, [r7, r3]
   1e51e:	2b07      	cmp	r3, #7
   1e520:	d135      	bne.n	1e58e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa6>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
   1e522:	6933      	ldr	r3, [r6, #16]
   1e524:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
   1e528:	d063      	beq.n	1e5f2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
   1e52a:	4a6e      	ldr	r2, [pc, #440]	; (1e6e4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1fc>)
   1e52c:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1e530:	4b6d      	ldr	r3, [pc, #436]	; (1e6e8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x200>)
   1e532:	9301      	str	r3, [sp, #4]
   1e534:	4b6d      	ldr	r3, [pc, #436]	; (1e6ec <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x204>)
   1e536:	9300      	str	r3, [sp, #0]
   1e538:	6944      	ldr	r4, [r0, #20]
   1e53a:	232c      	movs	r3, #44	; 0x2c
   1e53c:	e023      	b.n	1e586 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
   1e53e:	5cfb      	ldrb	r3, [r7, r3]
   1e540:	2b03      	cmp	r3, #3
   1e542:	d014      	beq.n	1e56e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x86>
   1e544:	6947      	ldr	r7, [r0, #20]
   1e546:	4618      	mov	r0, r3
   1e548:	f7ee fbbc 	bl	ccc4 <TfLiteTypeGetName>
   1e54c:	4606      	mov	r6, r0
   1e54e:	4628      	mov	r0, r5
   1e550:	f7ee fbb8 	bl	ccc4 <TfLiteTypeGetName>
   1e554:	4b66      	ldr	r3, [pc, #408]	; (1e6f0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x208>)
   1e556:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1e55a:	9301      	str	r3, [sp, #4]
   1e55c:	4b65      	ldr	r3, [pc, #404]	; (1e6f4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20c>)
   1e55e:	9300      	str	r3, [sp, #0]
   1e560:	2327      	movs	r3, #39	; 0x27
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
   1e562:	4620      	mov	r0, r4
   1e564:	4a64      	ldr	r2, [pc, #400]	; (1e6f8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1e566:	4965      	ldr	r1, [pc, #404]	; (1e6fc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
   1e568:	47b8      	blx	r7
      return kTfLiteError;
   1e56a:	2501      	movs	r5, #1
   1e56c:	e09f      	b.n	1e6ae <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c6>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
   1e56e:	6933      	ldr	r3, [r6, #16]
   1e570:	2b00      	cmp	r3, #0
   1e572:	d03e      	beq.n	1e5f2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
   1e574:	2200      	movs	r2, #0
   1e576:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1e57a:	4b61      	ldr	r3, [pc, #388]	; (1e700 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x218>)
   1e57c:	9301      	str	r3, [sp, #4]
   1e57e:	4b5b      	ldr	r3, [pc, #364]	; (1e6ec <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x204>)
   1e580:	9300      	str	r3, [sp, #0]
   1e582:	2328      	movs	r3, #40	; 0x28
   1e584:	6944      	ldr	r4, [r0, #20]
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
   1e586:	4a5c      	ldr	r2, [pc, #368]	; (1e6f8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1e588:	495e      	ldr	r1, [pc, #376]	; (1e704 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x21c>)
   1e58a:	47a0      	blx	r4
   1e58c:	e7ed      	b.n	1e56a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x82>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
   1e58e:	2b09      	cmp	r3, #9
   1e590:	d00f      	beq.n	1e5b2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xca>
   1e592:	6947      	ldr	r7, [r0, #20]
   1e594:	4618      	mov	r0, r3
   1e596:	f7ee fb95 	bl	ccc4 <TfLiteTypeGetName>
   1e59a:	4606      	mov	r6, r0
   1e59c:	4628      	mov	r0, r5
   1e59e:	f7ee fb91 	bl	ccc4 <TfLiteTypeGetName>
   1e5a2:	4b59      	ldr	r3, [pc, #356]	; (1e708 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x220>)
   1e5a4:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1e5a8:	9301      	str	r3, [sp, #4]
   1e5aa:	4b52      	ldr	r3, [pc, #328]	; (1e6f4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20c>)
   1e5ac:	9300      	str	r3, [sp, #0]
   1e5ae:	2330      	movs	r3, #48	; 0x30
   1e5b0:	e7d7      	b.n	1e562 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x7a>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
   1e5b2:	6933      	ldr	r3, [r6, #16]
   1e5b4:	f113 0f80 	cmn.w	r3, #128	; 0x80
   1e5b8:	d00a      	beq.n	1e5d0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
   1e5ba:	f06f 027f 	mvn.w	r2, #127	; 0x7f
   1e5be:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1e5c2:	4b52      	ldr	r3, [pc, #328]	; (1e70c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x224>)
   1e5c4:	9301      	str	r3, [sp, #4]
   1e5c6:	4b49      	ldr	r3, [pc, #292]	; (1e6ec <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x204>)
   1e5c8:	9300      	str	r3, [sp, #0]
   1e5ca:	6944      	ldr	r4, [r0, #20]
   1e5cc:	2331      	movs	r3, #49	; 0x31
   1e5ce:	e7da      	b.n	1e586 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x9e>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
   1e5d0:	ed96 7a03 	vldr	s14, [r6, #12]
   1e5d4:	eddf 7a4e 	vldr	s15, [pc, #312]	; 1e710 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x228>
   1e5d8:	eeb4 7a67 	vcmp.f32	s14, s15
   1e5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1e5e0:	d007      	beq.n	1e5f2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x10a>
   1e5e2:	4b4c      	ldr	r3, [pc, #304]	; (1e714 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x22c>)
   1e5e4:	4a44      	ldr	r2, [pc, #272]	; (1e6f8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1e5e6:	9300      	str	r3, [sp, #0]
   1e5e8:	6944      	ldr	r4, [r0, #20]
   1e5ea:	2332      	movs	r3, #50	; 0x32
   1e5ec:	494a      	ldr	r1, [pc, #296]	; (1e718 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x230>)
   1e5ee:	47a0      	blx	r4
   1e5f0:	e7bb      	b.n	1e56a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x82>
    tflite::PreprocessSoftmaxScaling(
   1e5f2:	f8d8 000c 	ldr.w	r0, [r8, #12]
   1e5f6:	f7ed ff87 	bl	c508 <__aeabi_f2d>
   1e5fa:	4602      	mov	r2, r0
   1e5fc:	460b      	mov	r3, r1
   1e5fe:	f8da 0000 	ldr.w	r0, [sl]
   1e602:	ad07      	add	r5, sp, #28
   1e604:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1e608:	f7ed ff7e 	bl	c508 <__aeabi_f2d>
   1e60c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1e610:	9502      	str	r5, [sp, #8]
   1e612:	ad0a      	add	r5, sp, #40	; 0x28
   1e614:	9501      	str	r5, [sp, #4]
   1e616:	2505      	movs	r5, #5
   1e618:	9500      	str	r5, [sp, #0]
   1e61a:	f7f3 fa85 	bl	11b28 <_ZN6tflite24PreprocessSoftmaxScalingEddiPiS0_>
    op_data->input_left_shift = input_left_shift;
   1e61e:	9907      	ldr	r1, [sp, #28]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
   1e620:	221f      	movs	r2, #31
   1e622:	4628      	mov	r0, r5
    op_data->input_left_shift = input_left_shift;
   1e624:	910b      	str	r1, [sp, #44]	; 0x2c
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
   1e626:	f011 fd4c 	bl	300c2 <_ZN6tflite20CalculateInputRadiusEiii>
   1e62a:	f7ed ff5b 	bl	c4e4 <__aeabi_i2d>
   1e62e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
    op_data->diff_min =
   1e632:	4619      	mov	r1, r3
   1e634:	f7f2 f9d4 	bl	109e0 <__aeabi_d2iz>
   1e638:	900e      	str	r0, [sp, #56]	; 0x38
  switch (input->type) {
   1e63a:	f817 0009 	ldrb.w	r0, [r7, r9]
   1e63e:	2803      	cmp	r0, #3
   1e640:	d040      	beq.n	1e6c4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1dc>
   1e642:	2809      	cmp	r0, #9
   1e644:	d03e      	beq.n	1e6c4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1dc>
   1e646:	2801      	cmp	r0, #1
   1e648:	d142      	bne.n	1e6d0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1e8>
      SoftmaxFloat(input, output, op_data);
   1e64a:	4631      	mov	r1, r6
   1e64c:	4640      	mov	r0, r8
   1e64e:	aa08      	add	r2, sp, #32
   1e650:	f010 f890 	bl	2e774 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
   1e654:	2500      	movs	r5, #0
   1e656:	e02a      	b.n	1e6ae <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c6>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
   1e658:	2d01      	cmp	r5, #1
   1e65a:	d013      	beq.n	1e684 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x19c>
   1e65c:	6946      	ldr	r6, [r0, #20]
   1e65e:	4628      	mov	r0, r5
   1e660:	f7ee fb30 	bl	ccc4 <TfLiteTypeGetName>
   1e664:	4605      	mov	r5, r0
   1e666:	2001      	movs	r0, #1
   1e668:	f7ee fb2c 	bl	ccc4 <TfLiteTypeGetName>
   1e66c:	4b2b      	ldr	r3, [pc, #172]	; (1e71c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x234>)
   1e66e:	e9cd 5002 	strd	r5, r0, [sp, #8]
   1e672:	9301      	str	r3, [sp, #4]
   1e674:	4b2a      	ldr	r3, [pc, #168]	; (1e720 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x238>)
   1e676:	4620      	mov	r0, r4
   1e678:	9300      	str	r3, [sp, #0]
   1e67a:	4a1f      	ldr	r2, [pc, #124]	; (1e6f8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1e67c:	2342      	movs	r3, #66	; 0x42
   1e67e:	491f      	ldr	r1, [pc, #124]	; (1e6fc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
   1e680:	47b0      	blx	r6
  TF_LITE_ENSURE_STATUS(
   1e682:	e772      	b.n	1e56a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x82>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
   1e684:	5cf8      	ldrb	r0, [r7, r3]
   1e686:	2801      	cmp	r0, #1
   1e688:	d015      	beq.n	1e6b6 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ce>
   1e68a:	6967      	ldr	r7, [r4, #20]
   1e68c:	f7ee fb1a 	bl	ccc4 <TfLiteTypeGetName>
   1e690:	4606      	mov	r6, r0
   1e692:	4628      	mov	r0, r5
   1e694:	f7ee fb16 	bl	ccc4 <TfLiteTypeGetName>
   1e698:	4b20      	ldr	r3, [pc, #128]	; (1e71c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x234>)
   1e69a:	e9cd 6002 	strd	r6, r0, [sp, #8]
   1e69e:	9301      	str	r3, [sp, #4]
   1e6a0:	4b14      	ldr	r3, [pc, #80]	; (1e6f4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x20c>)
   1e6a2:	4620      	mov	r0, r4
   1e6a4:	9300      	str	r3, [sp, #0]
   1e6a6:	4a14      	ldr	r2, [pc, #80]	; (1e6f8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>)
   1e6a8:	2343      	movs	r3, #67	; 0x43
   1e6aa:	4914      	ldr	r1, [pc, #80]	; (1e6fc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x214>)
   1e6ac:	47b8      	blx	r7
}
   1e6ae:	4628      	mov	r0, r5
   1e6b0:	b016      	add	sp, #88	; 0x58
   1e6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    op_data->beta = static_cast<double>(params->beta);
   1e6b6:	f8da 0000 	ldr.w	r0, [sl]
   1e6ba:	f7ed ff25 	bl	c508 <__aeabi_f2d>
   1e6be:	e9cd 0108 	strd	r0, r1, [sp, #32]
  TF_LITE_ENSURE_STATUS(
   1e6c2:	e7ba      	b.n	1e63a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x152>
      SoftmaxQuantized(input, output, op_data);
   1e6c4:	4631      	mov	r1, r6
   1e6c6:	4640      	mov	r0, r8
   1e6c8:	aa08      	add	r2, sp, #32
   1e6ca:	f010 f9ac 	bl	2ea26 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
   1e6ce:	e7c1      	b.n	1e654 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x16c>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1e6d0:	6965      	ldr	r5, [r4, #20]
   1e6d2:	f7ee faf7 	bl	ccc4 <TfLiteTypeGetName>
   1e6d6:	f817 3009 	ldrb.w	r3, [r7, r9]
   1e6da:	4602      	mov	r2, r0
   1e6dc:	4911      	ldr	r1, [pc, #68]	; (1e724 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x23c>)
   1e6de:	4620      	mov	r0, r4
   1e6e0:	47a8      	blx	r5
   1e6e2:	e742      	b.n	1e56a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x82>
   1e6e4:	ffff8000 	.word	0xffff8000
   1e6e8:	00035c98 	.word	0x00035c98
   1e6ec:	00035603 	.word	0x00035603
   1e6f0:	00035c8b 	.word	0x00035c8b
   1e6f4:	000353f7 	.word	0x000353f7
   1e6f8:	00035c48 	.word	0x00035c48
   1e6fc:	00034b27 	.word	0x00034b27
   1e700:	00035223 	.word	0x00035223
   1e704:	00034aec 	.word	0x00034aec
   1e708:	00035f09 	.word	0x00035f09
   1e70c:	00035c9f 	.word	0x00035c9f
   1e710:	3b800000 	.word	0x3b800000
   1e714:	00035ca4 	.word	0x00035ca4
   1e718:	00034c0c 	.word	0x00034c0c
   1e71c:	00034b41 	.word	0x00034b41
   1e720:	0003540f 	.word	0x0003540f
   1e724:	00034a40 	.word	0x00034a40

0001e728 <_ZN6tflite3ops5micro14Register_SPLITEv>:
  return kTfLiteOk;
}

}  // namespace split

TfLiteRegistration Register_SPLIT() {
   1e728:	b510      	push	{r4, lr}
   1e72a:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/split::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1e72c:	2220      	movs	r2, #32
   1e72e:	2100      	movs	r1, #0
   1e730:	f012 fbc1 	bl	30eb6 <memset>
   1e734:	4b01      	ldr	r3, [pc, #4]	; (1e73c <_ZN6tflite3ops5micro14Register_SPLITEv+0x14>)
}
   1e736:	4620      	mov	r0, r4
          /*version=*/0};
   1e738:	60e3      	str	r3, [r4, #12]
}
   1e73a:	bd10      	pop	{r4, pc}
   1e73c:	0001e741 	.word	0x0001e741

0001e740 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1e740:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  const TfLiteTensor* axis = GetInput(context, node, 0);
   1e742:	680a      	ldr	r2, [r1, #0]
   1e744:	6887      	ldr	r7, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1e746:	6853      	ldr	r3, [r2, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1e748:	4605      	mov	r5, r0
   1e74a:	eb07 1383 	add.w	r3, r7, r3, lsl #6
  TF_LITE_ENSURE_MSG(context, IsConstantTensor(axis),
   1e74e:	7d1c      	ldrb	r4, [r3, #20]
   1e750:	2c01      	cmp	r4, #1
   1e752:	d006      	beq.n	1e762 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x22>
   1e754:	6943      	ldr	r3, [r0, #20]
   1e756:	4927      	ldr	r1, [pc, #156]	; (1e7f4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xb4>)
   1e758:	4798      	blx	r3
   1e75a:	2401      	movs	r4, #1
}
   1e75c:	4620      	mov	r0, r4
   1e75e:	b003      	add	sp, #12
   1e760:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1e762:	6892      	ldr	r2, [r2, #8]
  int axis_value = GetTensorData<int32_t>(axis)[0];
   1e764:	685b      	ldr	r3, [r3, #4]
   1e766:	ea4f 1c82 	mov.w	ip, r2, lsl #6
   1e76a:	681b      	ldr	r3, [r3, #0]
   1e76c:	eb07 1282 	add.w	r2, r7, r2, lsl #6
  if (axis_value < 0) {
   1e770:	6896      	ldr	r6, [r2, #8]
   1e772:	2b00      	cmp	r3, #0
   1e774:	6836      	ldr	r6, [r6, #0]
   1e776:	da09      	bge.n	1e78c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
  TF_LITE_ENSURE(context, axis_value >= 0);
   1e778:	199b      	adds	r3, r3, r6
   1e77a:	d507      	bpl.n	1e78c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
   1e77c:	4b1e      	ldr	r3, [pc, #120]	; (1e7f8 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xb8>)
   1e77e:	4a1f      	ldr	r2, [pc, #124]	; (1e7fc <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
   1e780:	9300      	str	r3, [sp, #0]
   1e782:	6945      	ldr	r5, [r0, #20]
   1e784:	2353      	movs	r3, #83	; 0x53
   1e786:	491e      	ldr	r1, [pc, #120]	; (1e800 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
   1e788:	47a8      	blx	r5
   1e78a:	e7e7      	b.n	1e75c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
  TF_LITE_ENSURE(context, axis_value < NumDimensions(input));
   1e78c:	429e      	cmp	r6, r3
   1e78e:	dc08      	bgt.n	1e7a2 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x62>
   1e790:	4b1c      	ldr	r3, [pc, #112]	; (1e804 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc4>)
   1e792:	4628      	mov	r0, r5
   1e794:	9300      	str	r3, [sp, #0]
   1e796:	696e      	ldr	r6, [r5, #20]
   1e798:	2354      	movs	r3, #84	; 0x54
   1e79a:	4a18      	ldr	r2, [pc, #96]	; (1e7fc <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xbc>)
   1e79c:	4918      	ldr	r1, [pc, #96]	; (1e800 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc0>)
   1e79e:	47b0      	blx	r6
   1e7a0:	e7dc      	b.n	1e75c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
  switch (input->type) {
   1e7a2:	f817 000c 	ldrb.w	r0, [r7, ip]
   1e7a6:	1e46      	subs	r6, r0, #1
   1e7a8:	2e08      	cmp	r6, #8
   1e7aa:	d81b      	bhi.n	1e7e4 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xa4>
   1e7ac:	e8df f006 	tbb	[pc, r6]
   1e7b0:	1a0a1605 	.word	0x1a0a1605
   1e7b4:	1a121a1a 	.word	0x1a121a1a
   1e7b8:	0e          	.byte	0x0e
   1e7b9:	00          	.byte	0x00
      return SplitImpl<float>(context, node, input, axis_value);
   1e7ba:	4628      	mov	r0, r5
   1e7bc:	f010 f97d 	bl	2eaba <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
      return SplitImpl<uint8_t>(context, node, input, axis_value);
   1e7c0:	4604      	mov	r4, r0
   1e7c2:	e7cb      	b.n	1e75c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
   1e7c4:	4628      	mov	r0, r5
   1e7c6:	f010 fa08 	bl	2ebda <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   1e7ca:	e7f9      	b.n	1e7c0 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      return SplitImpl<int8_t>(context, node, input, axis_value);
   1e7cc:	4628      	mov	r0, r5
   1e7ce:	f010 fa7f 	bl	2ecd0 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   1e7d2:	e7f5      	b.n	1e7c0 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      return SplitImpl<int16_t>(context, node, input, axis_value);
   1e7d4:	4628      	mov	r0, r5
   1e7d6:	f010 faf6 	bl	2edc6 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   1e7da:	e7f1      	b.n	1e7c0 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      return SplitImpl<int32_t>(context, node, input, axis_value);
   1e7dc:	4628      	mov	r0, r5
   1e7de:	f010 fb7d 	bl	2eedc <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>
   1e7e2:	e7ed      	b.n	1e7c0 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x80>
      TF_LITE_KERNEL_LOG(context, "Type %s currently not supported.",
   1e7e4:	696e      	ldr	r6, [r5, #20]
   1e7e6:	f7ee fa6d 	bl	ccc4 <TfLiteTypeGetName>
   1e7ea:	4907      	ldr	r1, [pc, #28]	; (1e808 <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0xc8>)
   1e7ec:	4602      	mov	r2, r0
   1e7ee:	4628      	mov	r0, r5
   1e7f0:	47b0      	blx	r6
      return kTfLiteError;
   1e7f2:	e7b3      	b.n	1e75c <_ZN6tflite3ops5micro5split4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
   1e7f4:	00035cc6 	.word	0x00035cc6
   1e7f8:	00035d3b 	.word	0x00035d3b
   1e7fc:	00035d14 	.word	0x00035d14
   1e800:	00034c0c 	.word	0x00034c0c
   1e804:	00035d4b 	.word	0x00035d4b
   1e808:	00035d6d 	.word	0x00035d6d

0001e80c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE>:

// Processes the indexing tensors (begin, end and strides) to resize the
// output tensor. This function is callable from both Prepare() and Eval() as
// long as the caller ensures the indexing tensors are present.
TfLiteStatus CheckOutputSize(TfLiteContext* context,
                             StridedSliceContext* op_context) {
   1e80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  using ::tflite::strided_slice::StopForAxis;
  TfLiteIntArray* output_shape = op_context->output->dims;
  int shape_size = 0;
  auto op_params = BuildStridedSliceParams(op_context);
  auto input_shape = GetTensorShape(op_context->input);
  for (int idx = 0; idx < op_context->dims; ++idx) {
   1e810:	2500      	movs	r5, #0
                             StridedSliceContext* op_context) {
   1e812:	460e      	mov	r6, r1
  int shape_size = 0;
   1e814:	462f      	mov	r7, r5
  TfLiteIntArray* output_shape = op_context->output->dims;
   1e816:	694b      	ldr	r3, [r1, #20]
                             StridedSliceContext* op_context) {
   1e818:	b0a1      	sub	sp, #132	; 0x84
   1e81a:	4604      	mov	r4, r0
  auto op_params = BuildStridedSliceParams(op_context);
   1e81c:	a80b      	add	r0, sp, #44	; 0x2c
  TfLiteIntArray* output_shape = op_context->output->dims;
   1e81e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  auto op_params = BuildStridedSliceParams(op_context);
   1e822:	f010 fca7 	bl	2f174 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>
  auto input_shape = GetTensorShape(op_context->input);
   1e826:	6871      	ldr	r1, [r6, #4]
   1e828:	a805      	add	r0, sp, #20
   1e82a:	f008 ff3b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  for (int idx = 0; idx < op_context->dims; ++idx) {
   1e82e:	f8d6 9018 	ldr.w	r9, [r6, #24]
   1e832:	45a9      	cmp	r9, r5
   1e834:	dd4d      	ble.n	1e8d2 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc6>
    int32_t stride = GetTensorData<int32_t>(op_context->strides)[idx];
   1e836:	6933      	ldr	r3, [r6, #16]
   1e838:	b103      	cbz	r3, 1e83c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x30>
   1e83a:	685b      	ldr	r3, [r3, #4]
   1e83c:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
    TF_LITE_ENSURE_MSG(context, stride != 0, "stride value has to be non-zero");
   1e840:	f1bb 0f00 	cmp.w	fp, #0
   1e844:	d10b      	bne.n	1e85e <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x52>
   1e846:	4620      	mov	r0, r4
   1e848:	6963      	ldr	r3, [r4, #20]
   1e84a:	4929      	ldr	r1, [pc, #164]	; (1e8f0 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe4>)
   1e84c:	4798      	blx	r3
    if (!shrink_axis) {
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
      shape_size++;
    }
  }
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
   1e84e:	2401      	movs	r4, #1
  auto input_shape = GetTensorShape(op_context->input);
   1e850:	a805      	add	r0, sp, #20
   1e852:	f008 fee2 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
}
   1e856:	4620      	mov	r0, r4
   1e858:	b021      	add	sp, #132	; 0x84
   1e85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    int32_t begin = StartForAxis(op_params, input_shape, idx);
   1e85e:	462a      	mov	r2, r5
   1e860:	a905      	add	r1, sp, #20
   1e862:	a80b      	add	r0, sp, #44	; 0x2c
   1e864:	f010 fc0d 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
    int32_t end = StopForAxis(op_params, input_shape, idx, begin);
   1e868:	462a      	mov	r2, r5
   1e86a:	4603      	mov	r3, r0
    int32_t begin = StartForAxis(op_params, input_shape, idx);
   1e86c:	4682      	mov	sl, r0
    int32_t end = StopForAxis(op_params, input_shape, idx, begin);
   1e86e:	a905      	add	r1, sp, #20
   1e870:	a80b      	add	r0, sp, #44	; 0x2c
   1e872:	f010 fc2b 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
    const bool shrink_axis = op_context->params->shrink_axis_mask & (1 << idx);
   1e876:	6833      	ldr	r3, [r6, #0]
   1e878:	691b      	ldr	r3, [r3, #16]
   1e87a:	412b      	asrs	r3, r5
    if (shrink_axis) {
   1e87c:	07db      	lsls	r3, r3, #31
   1e87e:	d426      	bmi.n	1e8ce <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc2>
    int32_t dim_shape = std::ceil((end - begin) / static_cast<float>(stride));
   1e880:	eba0 000a 	sub.w	r0, r0, sl
   1e884:	ee07 0a90 	vmov	s15, r0
   1e888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   1e88c:	ee07 ba90 	vmov	s15, fp
   1e890:	eef8 6ae7 	vcvt.f32.s32	s13, s15
   1e894:	eec7 7a26 	vdiv.f32	s15, s14, s13
  { return __builtin_ceilf(__x); }
   1e898:	fefa 7a67 	vrintp.f32	s15, s15
   1e89c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   1e8a0:	ee17 3a90 	vmov	r3, s15
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
   1e8a4:	eb08 0287 	add.w	r2, r8, r7, lsl #2
   1e8a8:	6852      	ldr	r2, [r2, #4]
    dim_shape = dim_shape < 0 ? 0 : dim_shape;
   1e8aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
      TF_LITE_ENSURE_EQ(context, output_shape->data[shape_size], dim_shape);
   1e8ae:	429a      	cmp	r2, r3
   1e8b0:	d00c      	beq.n	1e8cc <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xc0>
   1e8b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1e8b6:	4b0f      	ldr	r3, [pc, #60]	; (1e8f4 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe8>)
   1e8b8:	9301      	str	r3, [sp, #4]
   1e8ba:	4b0f      	ldr	r3, [pc, #60]	; (1e8f8 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xec>)
   1e8bc:	9300      	str	r3, [sp, #0]
   1e8be:	2373      	movs	r3, #115	; 0x73
   1e8c0:	6965      	ldr	r5, [r4, #20]
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
   1e8c2:	4620      	mov	r0, r4
   1e8c4:	4a0d      	ldr	r2, [pc, #52]	; (1e8fc <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf0>)
   1e8c6:	490e      	ldr	r1, [pc, #56]	; (1e900 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf4>)
   1e8c8:	47a8      	blx	r5
   1e8ca:	e7c0      	b.n	1e84e <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x42>
      shape_size++;
   1e8cc:	3701      	adds	r7, #1
  for (int idx = 0; idx < op_context->dims; ++idx) {
   1e8ce:	3501      	adds	r5, #1
   1e8d0:	e7af      	b.n	1e832 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x26>
  TF_LITE_ENSURE_EQ(context, output_shape->size, shape_size);
   1e8d2:	f8d8 3000 	ldr.w	r3, [r8]
   1e8d6:	42bb      	cmp	r3, r7
   1e8d8:	d008      	beq.n	1e8ec <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xe0>
   1e8da:	e9cd 3702 	strd	r3, r7, [sp, #8]
   1e8de:	4b09      	ldr	r3, [pc, #36]	; (1e904 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xf8>)
   1e8e0:	9301      	str	r3, [sp, #4]
   1e8e2:	4b09      	ldr	r3, [pc, #36]	; (1e908 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xfc>)
   1e8e4:	9300      	str	r3, [sp, #0]
   1e8e6:	6965      	ldr	r5, [r4, #20]
   1e8e8:	2377      	movs	r3, #119	; 0x77
   1e8ea:	e7ea      	b.n	1e8c2 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0xb6>
  return kTfLiteOk;
   1e8ec:	2400      	movs	r4, #0
   1e8ee:	e7af      	b.n	1e850 <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE+0x44>
   1e8f0:	00035d8e 	.word	0x00035d8e
   1e8f4:	00035e0c 	.word	0x00035e0c
   1e8f8:	00035e16 	.word	0x00035e16
   1e8fc:	00035ddd 	.word	0x00035ddd
   1e900:	00034aec 	.word	0x00034aec
   1e904:	00035e35 	.word	0x00035e35
   1e908:	00035e40 	.word	0x00035e40

0001e90c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1e90c:	b570      	push	{r4, r5, r6, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1e90e:	680b      	ldr	r3, [r1, #0]
   1e910:	4605      	mov	r5, r0
   1e912:	681b      	ldr	r3, [r3, #0]
   1e914:	460a      	mov	r2, r1
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);
   1e916:	2b04      	cmp	r3, #4
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1e918:	b08c      	sub	sp, #48	; 0x30
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 4);
   1e91a:	d00e      	beq.n	1e93a <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x2e>
   1e91c:	2204      	movs	r2, #4
   1e91e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1e922:	4b15      	ldr	r3, [pc, #84]	; (1e978 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>)
   1e924:	9301      	str	r3, [sp, #4]
   1e926:	4b15      	ldr	r3, [pc, #84]	; (1e97c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x70>)
   1e928:	9300      	str	r3, [sp, #0]
   1e92a:	237c      	movs	r3, #124	; 0x7c
   1e92c:	6944      	ldr	r4, [r0, #20]
   1e92e:	4a14      	ldr	r2, [pc, #80]	; (1e980 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x74>)
   1e930:	4914      	ldr	r1, [pc, #80]	; (1e984 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
   1e932:	47a0      	blx	r4
   1e934:	2001      	movs	r0, #1
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  StridedSliceContext op_context(context, node);
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
                     "input dim should not exceed 4");
  return CheckOutputSize(context, &op_context);
}
   1e936:	b00c      	add	sp, #48	; 0x30
   1e938:	bd70      	pop	{r4, r5, r6, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1e93a:	684b      	ldr	r3, [r1, #4]
   1e93c:	681c      	ldr	r4, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1e93e:	2c01      	cmp	r4, #1
   1e940:	d009      	beq.n	1e956 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x4a>
   1e942:	2601      	movs	r6, #1
   1e944:	4b10      	ldr	r3, [pc, #64]	; (1e988 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
   1e946:	e9cd 4602 	strd	r4, r6, [sp, #8]
   1e94a:	9301      	str	r3, [sp, #4]
   1e94c:	4b0f      	ldr	r3, [pc, #60]	; (1e98c <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
   1e94e:	9300      	str	r3, [sp, #0]
   1e950:	6944      	ldr	r4, [r0, #20]
   1e952:	237d      	movs	r3, #125	; 0x7d
   1e954:	e7eb      	b.n	1e92e <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
  StridedSliceContext op_context(context, node);
   1e956:	4601      	mov	r1, r0
   1e958:	a805      	add	r0, sp, #20
   1e95a:	f010 fbed 	bl	2f138 <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>
  TF_LITE_ENSURE_MSG(context, op_context.dims <= kMaxDim,
   1e95e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e960:	2b04      	cmp	r3, #4
   1e962:	dd04      	ble.n	1e96e <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x62>
   1e964:	4628      	mov	r0, r5
   1e966:	696b      	ldr	r3, [r5, #20]
   1e968:	4909      	ldr	r1, [pc, #36]	; (1e990 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
   1e96a:	4798      	blx	r3
   1e96c:	e7e2      	b.n	1e934 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
  return CheckOutputSize(context, &op_context);
   1e96e:	4628      	mov	r0, r5
   1e970:	a905      	add	r1, sp, #20
   1e972:	f7ff ff4b 	bl	1e80c <_ZN6tflite3ops5micro13strided_slice15CheckOutputSizeEP13TfLiteContextPNS2_19StridedSliceContextE>
   1e976:	e7de      	b.n	1e936 <_ZN6tflite3ops5micro13strided_slice7PrepareEP13TfLiteContextP10TfLiteNode+0x2a>
   1e978:	00035e9e 	.word	0x00035e9e
   1e97c:	00034b06 	.word	0x00034b06
   1e980:	00035ddd 	.word	0x00035ddd
   1e984:	00034aec 	.word	0x00034aec
   1e988:	00035884 	.word	0x00035884
   1e98c:	00034b16 	.word	0x00034b16
   1e990:	00035e53 	.word	0x00035e53

0001e994 <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv>:
#undef TF_LITE_STRIDED_SLICE
  return kTfLiteOk;
}
}  // namespace strided_slice

TfLiteRegistration Register_STRIDED_SLICE() {
   1e994:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/strided_slice::Prepare,
          /*invoke=*/strided_slice::Eval<strided_slice::kReference>,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1e996:	4604      	mov	r4, r0
TfLiteRegistration Register_STRIDED_SLICE() {
   1e998:	4606      	mov	r6, r0
          /*version=*/0};
   1e99a:	4d04      	ldr	r5, [pc, #16]	; (1e9ac <_ZN6tflite3ops5micro22Register_STRIDED_SLICEEv+0x18>)
   1e99c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e99e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1e9a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1e9a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1e9a8:	4630      	mov	r0, r6
   1e9aa:	bd70      	pop	{r4, r5, r6, pc}
   1e9ac:	00031c08 	.word	0x00031c08

0001e9b0 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1e9b0:	b530      	push	{r4, r5, lr}
   1e9b2:	b0ab      	sub	sp, #172	; 0xac
   1e9b4:	460a      	mov	r2, r1
   1e9b6:	4604      	mov	r4, r0
  StridedSliceContext op_context(context, node);
   1e9b8:	4601      	mov	r1, r0
   1e9ba:	a80e      	add	r0, sp, #56	; 0x38
   1e9bc:	f010 fbbc 	bl	2f138 <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>
  auto op_params = BuildStridedSliceParams(&op_context);
   1e9c0:	a90e      	add	r1, sp, #56	; 0x38
   1e9c2:	a815      	add	r0, sp, #84	; 0x54
   1e9c4:	f010 fbd6 	bl	2f174 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>
  switch (op_context.input->type) {
   1e9c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1e9ca:	7808      	ldrb	r0, [r1, #0]
   1e9cc:	2803      	cmp	r0, #3
   1e9ce:	d020      	beq.n	1ea12 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x62>
   1e9d0:	2809      	cmp	r0, #9
   1e9d2:	d033      	beq.n	1ea3c <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x8c>
   1e9d4:	2801      	cmp	r0, #1
   1e9d6:	d146      	bne.n	1ea66 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xb6>
        TF_LITE_STRIDED_SLICE(reference_ops, float);
   1e9d8:	a802      	add	r0, sp, #8
   1e9da:	f008 fe63 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1e9de:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   1e9e0:	b104      	cbz	r4, 1e9e4 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x34>
   1e9e2:	6864      	ldr	r4, [r4, #4]
   1e9e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1e9e6:	a808      	add	r0, sp, #32
   1e9e8:	f008 fe5c 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1e9ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1e9ee:	b103      	cbz	r3, 1e9f2 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x42>
   1e9f0:	685b      	ldr	r3, [r3, #4]
   1e9f2:	9300      	str	r3, [sp, #0]
   1e9f4:	4622      	mov	r2, r4
   1e9f6:	ab08      	add	r3, sp, #32
   1e9f8:	a902      	add	r1, sp, #8
   1e9fa:	a815      	add	r0, sp, #84	; 0x54
   1e9fc:	f010 fbe9 	bl	2f1d2 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
        TF_LITE_STRIDED_SLICE(reference_ops, uint8_t);
   1ea00:	a808      	add	r0, sp, #32
   1ea02:	f008 fe0a 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1ea06:	a802      	add	r0, sp, #8
   1ea08:	f008 fe07 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
   1ea0c:	2000      	movs	r0, #0
}
   1ea0e:	b02b      	add	sp, #172	; 0xac
   1ea10:	bd30      	pop	{r4, r5, pc}
        TF_LITE_STRIDED_SLICE(reference_ops, uint8_t);
   1ea12:	a802      	add	r0, sp, #8
   1ea14:	f008 fe46 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ea18:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ea1a:	b104      	cbz	r4, 1ea1e <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x6e>
   1ea1c:	6864      	ldr	r4, [r4, #4]
   1ea1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1ea20:	a808      	add	r0, sp, #32
   1ea22:	f008 fe3f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ea26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ea28:	b103      	cbz	r3, 1ea2c <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x7c>
   1ea2a:	685b      	ldr	r3, [r3, #4]
   1ea2c:	9300      	str	r3, [sp, #0]
   1ea2e:	4622      	mov	r2, r4
   1ea30:	ab08      	add	r3, sp, #32
   1ea32:	a902      	add	r1, sp, #8
   1ea34:	a815      	add	r0, sp, #84	; 0x54
   1ea36:	f010 fce7 	bl	2f408 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
   1ea3a:	e7e1      	b.n	1ea00 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
        TF_LITE_STRIDED_SLICE(reference_ops, int8_t);
   1ea3c:	a802      	add	r0, sp, #8
   1ea3e:	f008 fe31 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ea42:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ea44:	b104      	cbz	r4, 1ea48 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x98>
   1ea46:	6864      	ldr	r4, [r4, #4]
   1ea48:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1ea4a:	a808      	add	r0, sp, #32
   1ea4c:	f008 fe2a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ea50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ea52:	b103      	cbz	r3, 1ea56 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xa6>
   1ea54:	685b      	ldr	r3, [r3, #4]
   1ea56:	9300      	str	r3, [sp, #0]
   1ea58:	4622      	mov	r2, r4
   1ea5a:	ab08      	add	r3, sp, #32
   1ea5c:	a902      	add	r1, sp, #8
   1ea5e:	a815      	add	r0, sp, #84	; 0x54
   1ea60:	f010 fdeb 	bl	2f63a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
   1ea64:	e7cc      	b.n	1ea00 <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x50>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1ea66:	6965      	ldr	r5, [r4, #20]
   1ea68:	f7ee f92c 	bl	ccc4 <TfLiteTypeGetName>
   1ea6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ea6e:	4602      	mov	r2, r0
   1ea70:	781b      	ldrb	r3, [r3, #0]
   1ea72:	4620      	mov	r0, r4
   1ea74:	4901      	ldr	r1, [pc, #4]	; (1ea7c <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0xcc>)
   1ea76:	47a8      	blx	r5
      return kTfLiteError;
   1ea78:	2001      	movs	r0, #1
   1ea7a:	e7c8      	b.n	1ea0e <_ZN6tflite3ops5micro13strided_slice4EvalILNS2_10KernelTypeE0EEE12TfLiteStatusP13TfLiteContextP10TfLiteNode+0x5e>
   1ea7c:	00034a40 	.word	0x00034a40

0001ea80 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteSubParams* params,
                             const TfLiteTensor* input1,
                             const TfLiteTensor* input2, TfLiteTensor* output,
                             OpData* data) {
   1ea80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea84:	ed2d 8b04 	vpush	{d8-d9}
   1ea88:	4680      	mov	r8, r0
   1ea8a:	b083      	sub	sp, #12
   1ea8c:	4689      	mov	r9, r1
   1ea8e:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   1ea92:	4619      	mov	r1, r3
   1ea94:	4610      	mov	r0, r2
                             OpData* data) {
   1ea96:	461d      	mov	r5, r3
   1ea98:	4616      	mov	r6, r2
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   1ea9a:	f011 fb66 	bl	3016a <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   1ea9e:	783b      	ldrb	r3, [r7, #0]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   1eaa0:	f080 0001 	eor.w	r0, r0, #1
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   1eaa4:	2b03      	cmp	r3, #3
  data->requires_broadcast = !HaveSameShapes(input1, input2);
   1eaa6:	7020      	strb	r0, [r4, #0]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   1eaa8:	d001      	beq.n	1eaae <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x2e>
   1eaaa:	2b09      	cmp	r3, #9
   1eaac:	d15d      	bne.n	1eb6a <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0xea>
      if (__a < __b)
   1eaae:	ed96 9a03 	vldr	s18, [r6, #12]
   1eab2:	edd5 8a03 	vldr	s17, [r5, #12]
    data->input1_offset = -input1->params.zero_point;
    data->input2_offset = -input2->params.zero_point;
    data->output_offset = output->params.zero_point;
    data->left_shift = 20;
    const float twice_max_input_scale =
        2 * std::max(input1->params.scale, input2->params.scale);
   1eab6:	eeb4 9ae8 	vcmpe.f32	s18, s17
   1eaba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        static_cast<double>(input1->params.scale / twice_max_input_scale);
    const double real_input2_multiplier =
        static_cast<double>(input2->params.scale / twice_max_input_scale);
    const double real_output_multiplier =
        static_cast<double>(twice_max_input_scale /
                            ((1 << data->left_shift) * output->params.scale));
   1eabe:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 1eb78 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0xf8>
        2 * std::max(input1->params.scale, input2->params.scale);
   1eac2:	bf54      	ite	pl
   1eac4:	eeb0 8a49 	vmovpl.f32	s16, s18
   1eac8:	eeb0 8a68 	vmovmi.f32	s16, s17
                            ((1 << data->left_shift) * output->params.scale));
   1eacc:	edd7 7a03 	vldr	s15, [r7, #12]
        2 * std::max(input1->params.scale, input2->params.scale);
   1ead0:	ee38 8a08 	vadd.f32	s16, s16, s16
                            ((1 << data->left_shift) * output->params.scale));
   1ead4:	ee67 7a87 	vmul.f32	s15, s15, s14
    data->input1_offset = -input1->params.zero_point;
   1ead8:	6933      	ldr	r3, [r6, #16]
    const double real_output_multiplier =
   1eada:	eec8 7a27 	vdiv.f32	s15, s16, s15
    data->input1_offset = -input1->params.zero_point;
   1eade:	425b      	negs	r3, r3
   1eae0:	62a3      	str	r3, [r4, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
   1eae2:	692b      	ldr	r3, [r5, #16]
    const double real_output_multiplier =
   1eae4:	ee17 0a90 	vmov	r0, s15
    data->input2_offset = -input2->params.zero_point;
   1eae8:	425b      	negs	r3, r3
   1eaea:	62e3      	str	r3, [r4, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
   1eaec:	693b      	ldr	r3, [r7, #16]
   1eaee:	6323      	str	r3, [r4, #48]	; 0x30
    data->left_shift = 20;
   1eaf0:	2314      	movs	r3, #20
   1eaf2:	6263      	str	r3, [r4, #36]	; 0x24
    const double real_output_multiplier =
   1eaf4:	f7ed fd08 	bl	c508 <__aeabi_f2d>
    const double real_input1_multiplier =
   1eaf8:	eec9 7a08 	vdiv.f32	s15, s18, s16

    QuantizeMultiplierSmallerThanOneExp(
   1eafc:	1d23      	adds	r3, r4, #4
   1eafe:	f104 0214 	add.w	r2, r4, #20
    const double real_output_multiplier =
   1eb02:	4682      	mov	sl, r0
    const double real_input1_multiplier =
   1eb04:	ee17 0a90 	vmov	r0, s15
    const double real_output_multiplier =
   1eb08:	468b      	mov	fp, r1
    QuantizeMultiplierSmallerThanOneExp(
   1eb0a:	9301      	str	r3, [sp, #4]
   1eb0c:	9200      	str	r2, [sp, #0]
    const double real_input1_multiplier =
   1eb0e:	f7ed fcfb 	bl	c508 <__aeabi_f2d>
    QuantizeMultiplierSmallerThanOneExp(
   1eb12:	e9dd 2300 	ldrd	r2, r3, [sp]
   1eb16:	f002 fa83 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
    const double real_input2_multiplier =
   1eb1a:	eec8 7a88 	vdiv.f32	s15, s17, s16
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
   1eb1e:	f104 0308 	add.w	r3, r4, #8
    const double real_input2_multiplier =
   1eb22:	ee17 0a90 	vmov	r0, s15
    QuantizeMultiplierSmallerThanOneExp(
   1eb26:	f104 0218 	add.w	r2, r4, #24
   1eb2a:	9301      	str	r3, [sp, #4]
   1eb2c:	9200      	str	r2, [sp, #0]
    const double real_input2_multiplier =
   1eb2e:	f7ed fceb 	bl	c508 <__aeabi_f2d>
    QuantizeMultiplierSmallerThanOneExp(
   1eb32:	e9dd 2300 	ldrd	r2, r3, [sp]
   1eb36:	f002 fa73 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
   1eb3a:	4650      	mov	r0, sl
   1eb3c:	4659      	mov	r1, fp
   1eb3e:	f104 0320 	add.w	r3, r4, #32
   1eb42:	f104 021c 	add.w	r2, r4, #28
   1eb46:	f002 fa6b 	bl	21020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1eb4a:	463a      	mov	r2, r7
   1eb4c:	4640      	mov	r0, r8
   1eb4e:	f104 0310 	add.w	r3, r4, #16
   1eb52:	f899 1000 	ldrb.w	r1, [r9]
   1eb56:	9310      	str	r3, [sp, #64]	; 0x40
   1eb58:	f104 030c 	add.w	r3, r4, #12
        context, params->activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }

  return kTfLiteOk;
}
   1eb5c:	b003      	add	sp, #12
   1eb5e:	ecbd 8b04 	vpop	{d8-d9}
   1eb62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   1eb66:	f002 baaf 	b.w	210c8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
}
   1eb6a:	2000      	movs	r0, #0
   1eb6c:	b003      	add	sp, #12
   1eb6e:	ecbd 8b04 	vpop	{d8-d9}
   1eb72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb76:	bf00      	nop
   1eb78:	49800000 	.word	0x49800000

0001eb7c <_ZN6tflite3ops5micro12Register_SUBEv>:
  return kTfLiteOk;
}

}  // namespace sub

TfLiteRegistration Register_SUB() {
   1eb7c:	b510      	push	{r4, lr}
   1eb7e:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/sub::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1eb80:	2220      	movs	r2, #32
   1eb82:	2100      	movs	r1, #0
   1eb84:	f012 f997 	bl	30eb6 <memset>
   1eb88:	4b01      	ldr	r3, [pc, #4]	; (1eb90 <_ZN6tflite3ops5micro12Register_SUBEv+0x14>)
}
   1eb8a:	4620      	mov	r0, r4
          /*version=*/0};
   1eb8c:	60e3      	str	r3, [r4, #12]
}
   1eb8e:	bd10      	pop	{r4, pc}
   1eb90:	0001ed51 	.word	0x0001ed51

0001eb94 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
             const TfLiteTensor* input2, TfLiteTensor* output) {
   1eb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  CalculateActivationRange(params->activation, &output_activation_min,
   1eb98:	7812      	ldrb	r2, [r2, #0]
             const TfLiteTensor* input2, TfLiteTensor* output) {
   1eb9a:	b0da      	sub	sp, #360	; 0x168
  if (activation == kTfLiteActRelu) {
   1eb9c:	2a01      	cmp	r2, #1
   1eb9e:	9c64      	ldr	r4, [sp, #400]	; 0x190
   1eba0:	e9dd 6562 	ldrd	r6, r5, [sp, #392]	; 0x188
   1eba4:	d038      	beq.n	1ec18 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x84>
  } else if (activation == kTfLiteActRelu6) {
   1eba6:	2a03      	cmp	r2, #3
   1eba8:	d03b      	beq.n	1ec22 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x8e>
    *activation_max = std::numeric_limits<T>::max();
   1ebaa:	ed9f 7a66 	vldr	s14, [pc, #408]	; 1ed44 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1b0>
   1ebae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1ebb2:	2a02      	cmp	r2, #2
   1ebb4:	eddf 6a64 	vldr	s13, [pc, #400]	; 1ed48 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1b4>
   1ebb8:	fe47 7a87 	vseleq.f32	s15, s15, s14
   1ebbc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   1ebc0:	fe07 7a26 	vseleq.f32	s14, s14, s13
  if (data->requires_broadcast) {
   1ebc4:	781b      	ldrb	r3, [r3, #0]
  params->float_activation_min = min;
   1ebc6:	ed8d 7a4d 	vstr	s14, [sp, #308]	; 0x134
  params->float_activation_max = max;
   1ebca:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
    TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow);
   1ebce:	4631      	mov	r1, r6
   1ebd0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
   1ebd4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
   1ebd8:	af36      	add	r7, sp, #216	; 0xd8
  if (data->requires_broadcast) {
   1ebda:	2b00      	cmp	r3, #0
   1ebdc:	d076      	beq.n	1eccc <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x138>
    TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow);
   1ebde:	a809      	add	r0, sp, #36	; 0x24
   1ebe0:	f008 fd60 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ebe4:	b106      	cbz	r6, 1ebe8 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x54>
   1ebe6:	6876      	ldr	r6, [r6, #4]
   1ebe8:	4629      	mov	r1, r5
   1ebea:	a80f      	add	r0, sp, #60	; 0x3c
   1ebec:	f008 fd5a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ebf0:	b105      	cbz	r5, 1ebf4 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x60>
   1ebf2:	686d      	ldr	r5, [r5, #4]
   1ebf4:	4621      	mov	r1, r4
   1ebf6:	a815      	add	r0, sp, #84	; 0x54
   1ebf8:	f008 fd54 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ebfc:	b104      	cbz	r4, 1ec00 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x6c>
   1ebfe:	6864      	ldr	r4, [r4, #4]
                             const RuntimeShape& input2_shape,
                             const float* input2_data,
                             const RuntimeShape& output_shape,
                             float* output_data) {
  ruy::profiler::ScopeLabel label("BroadcastSubSlow/float");
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
   1ec00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ec02:	9601      	str	r6, [sp, #4]
   1ec04:	9502      	str	r5, [sp, #8]
   1ec06:	2b05      	cmp	r3, #5
   1ec08:	f10d 0a04 	add.w	sl, sp, #4
   1ec0c:	ae02      	add	r6, sp, #8
   1ec0e:	ad03      	add	r5, sp, #12
   1ec10:	602c      	str	r4, [r5, #0]
   1ec12:	dd09      	ble.n	1ec28 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x94>
   1ec14:	f012 f905 	bl	30e22 <abort>
    *activation_max = std::numeric_limits<T>::max();
   1ec18:	eddf 7a4a 	vldr	s15, [pc, #296]	; 1ed44 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1b0>
    *activation_min = 0;
   1ec1c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 1ed4c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1b8>
   1ec20:	e7d0      	b.n	1ebc4 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x30>
    *activation_max = 6;
   1ec22:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   1ec26:	e7f9      	b.n	1ec1c <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x88>
  TFLITE_DCHECK_LE(input2_shape.DimensionsCount(), N);
   1ec28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ec2a:	2b05      	cmp	r3, #5
   1ec2c:	dcf2      	bgt.n	1ec14 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x80>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), N);
   1ec2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1ec30:	2b05      	cmp	r3, #5
   1ec32:	dcef      	bgt.n	1ec14 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x80>
  NdArrayDesc<N> desc1;
  NdArrayDesc<N> desc2;
  NdArrayDesc<N> output_desc;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   1ec34:	464b      	mov	r3, r9
   1ec36:	4642      	mov	r2, r8
   1ec38:	a90f      	add	r1, sp, #60	; 0x3c
   1ec3a:	a809      	add	r0, sp, #36	; 0x24
   1ec3c:	f00d fbd3 	bl	2c3e6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    return RuntimeShape(new_shape_size, shape, 1);
   1ec40:	2301      	movs	r3, #1
   1ec42:	aa15      	add	r2, sp, #84	; 0x54
   1ec44:	2105      	movs	r1, #5
   1ec46:	a81b      	add	r0, sp, #108	; 0x6c
   1ec48:	f008 fd87 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
                                      &desc2);
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, output_shape), &output_desc);
   1ec4c:	4639      	mov	r1, r7
   1ec4e:	a81b      	add	r0, sp, #108	; 0x6c
   1ec50:	f00d fbb3 	bl	2c3ba <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   1ec54:	a81b      	add	r0, sp, #108	; 0x6c
   1ec56:	f008 fce0 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  auto sub_func = [&](int indexes[N]) {
   1ec5a:	ab40      	add	r3, sp, #256	; 0x100

// Execute the calc function in the innermost iteration based on the shape of
// the output. The calc function should take a single argument of type int[N].
template <int N, typename Calc>
inline void NDOpsHelper(const NdArrayDesc<N>& output, const Calc& calc) {
  int indexes[N] = {0};
   1ec5c:	2214      	movs	r2, #20
   1ec5e:	2100      	movs	r1, #0
   1ec60:	a804      	add	r0, sp, #16
   1ec62:	e9cd 571b 	strd	r5, r7, [sp, #108]	; 0x6c
   1ec66:	e9cd a81d 	strd	sl, r8, [sp, #116]	; 0x74
   1ec6a:	e9cd 691f 	strd	r6, r9, [sp, #124]	; 0x7c
   1ec6e:	9321      	str	r3, [sp, #132]	; 0x84
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1ec70:	2400      	movs	r4, #0
  int indexes[N] = {0};
   1ec72:	f012 f920 	bl	30eb6 <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1ec76:	9a04      	ldr	r2, [sp, #16]
   1ec78:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   1ec7a:	429a      	cmp	r2, r3
   1ec7c:	da1a      	bge.n	1ecb4 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x120>
   1ec7e:	9405      	str	r4, [sp, #20]
   1ec80:	9a05      	ldr	r2, [sp, #20]
   1ec82:	9b37      	ldr	r3, [sp, #220]	; 0xdc
   1ec84:	429a      	cmp	r2, r3
   1ec86:	da11      	bge.n	1ecac <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x118>
   1ec88:	9406      	str	r4, [sp, #24]
   1ec8a:	9a06      	ldr	r2, [sp, #24]
   1ec8c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   1ec8e:	429a      	cmp	r2, r3
   1ec90:	da08      	bge.n	1eca4 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x110>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   1ec92:	4638      	mov	r0, r7
   1ec94:	aa04      	add	r2, sp, #16
   1ec96:	a91b      	add	r1, sp, #108	; 0x6c
   1ec98:	f011 f876 	bl	2fd88 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   1ec9c:	9b06      	ldr	r3, [sp, #24]
   1ec9e:	3301      	adds	r3, #1
   1eca0:	9306      	str	r3, [sp, #24]
   1eca2:	e7f2      	b.n	1ec8a <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xf6>
   1eca4:	9b05      	ldr	r3, [sp, #20]
   1eca6:	3301      	adds	r3, #1
   1eca8:	9305      	str	r3, [sp, #20]
   1ecaa:	e7e9      	b.n	1ec80 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xec>
   1ecac:	9b04      	ldr	r3, [sp, #16]
   1ecae:	3301      	adds	r3, #1
   1ecb0:	9304      	str	r3, [sp, #16]
   1ecb2:	e7e0      	b.n	1ec76 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xe2>
   1ecb4:	a815      	add	r0, sp, #84	; 0x54
   1ecb6:	f008 fcb0 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1ecba:	a80f      	add	r0, sp, #60	; 0x3c
   1ecbc:	f008 fcad 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1ecc0:	a809      	add	r0, sp, #36	; 0x24
    TF_LITE_SUB(tflite::reference_ops::SubWithActivation);
   1ecc2:	f008 fcaa 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   1ecc6:	b05a      	add	sp, #360	; 0x168
   1ecc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_SUB(tflite::reference_ops::SubWithActivation);
   1eccc:	4640      	mov	r0, r8
   1ecce:	f008 fce9 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ecd2:	b106      	cbz	r6, 1ecd6 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x142>
   1ecd4:	6876      	ldr	r6, [r6, #4]
   1ecd6:	4629      	mov	r1, r5
   1ecd8:	4648      	mov	r0, r9
   1ecda:	f008 fce3 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   1ecde:	b105      	cbz	r5, 1ece2 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x14e>
   1ece0:	686d      	ldr	r5, [r5, #4]
   1ece2:	4621      	mov	r1, r4
   1ece4:	4638      	mov	r0, r7
   1ece6:	f008 fcdd 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ecea:	b104      	cbz	r4, 1ecee <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x15a>
   1ecec:	6864      	ldr	r4, [r4, #4]
    const ArithmeticParams& params, const RuntimeShape& input1_shape,
    const T* input1_data, const RuntimeShape& input2_shape,
    const T* input2_data, const RuntimeShape& output_shape, T* output_data) {
  ruy::profiler::ScopeLabel label("SubWithActivation");
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   1ecee:	463a      	mov	r2, r7
   1ecf0:	4649      	mov	r1, r9
   1ecf2:	4640      	mov	r0, r8
   1ecf4:	f008 fd80 	bl	277f8 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  *activation_min = params.float_activation_min;
   1ecf8:	eddd 6a4d 	vldr	s13, [sp, #308]	; 0x134
  *activation_max = params.float_activation_max;
   1ecfc:	ed9d 7a4e 	vldr	s14, [sp, #312]	; 0x138
  T activation_min, activation_max;
  SetActivationMinMax(params, &activation_min, &activation_max);

  for (int i = 0; i < flat_size; ++i) {
   1ed00:	2300      	movs	r3, #0
   1ed02:	4298      	cmp	r0, r3
   1ed04:	dd16      	ble.n	1ed34 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1a0>
    output_data[i] = ActivationFunctionWithMinMax(
        input1_data[i] - input2_data[i], activation_min, activation_max);
   1ed06:	ecf6 7a01 	vldmia	r6!, {s15}
   1ed0a:	ecb5 6a01 	vldmia	r5!, {s12}
    output_data[i] = ActivationFunctionWithMinMax(
   1ed0e:	ee77 7ac6 	vsub.f32	s15, s15, s12
	return __b;
   1ed12:	eef4 6a67 	vcmp.f32	s13, s15
   1ed16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ed1a:	fe76 7aa7 	vselgt.f32	s15, s13, s15
	return __b;
   1ed1e:	eeb4 7a67 	vcmp.f32	s14, s15
   1ed22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1ed26:	bf48      	it	mi
   1ed28:	eef0 7a47 	vmovmi.f32	s15, s14
  for (int i = 0; i < flat_size; ++i) {
   1ed2c:	3301      	adds	r3, #1
    output_data[i] = ActivationFunctionWithMinMax(
   1ed2e:	ece4 7a01 	vstmia	r4!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   1ed32:	e7e6      	b.n	1ed02 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x16e>
   1ed34:	4638      	mov	r0, r7
   1ed36:	f008 fc70 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1ed3a:	4648      	mov	r0, r9
   1ed3c:	f008 fc6d 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   1ed40:	4640      	mov	r0, r8
   1ed42:	e7be      	b.n	1ecc2 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x12e>
   1ed44:	7f7fffff 	.word	0x7f7fffff
   1ed48:	ff7fffff 	.word	0xff7fffff
   1ed4c:	00000000 	.word	0x00000000

0001ed50 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1ed50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed54:	460e      	mov	r6, r1
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   1ed56:	6833      	ldr	r3, [r6, #0]
   1ed58:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1ed5c:	685a      	ldr	r2, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1ed5e:	b095      	sub	sp, #84	; 0x54
   1ed60:	eb08 1982 	add.w	r9, r8, r2, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1ed64:	6872      	ldr	r2, [r6, #4]
  return &context->tensors[node->inputs->data[index]];
   1ed66:	689b      	ldr	r3, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   1ed68:	6857      	ldr	r7, [r2, #4]
  auto* params = reinterpret_cast<TfLiteSubParams*>(node->builtin_data);
   1ed6a:	6949      	ldr	r1, [r1, #20]
   1ed6c:	ea4f 1b87 	mov.w	fp, r7, lsl #6
  TF_LITE_ENSURE_STATUS(
   1ed70:	f10d 0a1c 	add.w	sl, sp, #28
   1ed74:	eb08 1787 	add.w	r7, r8, r7, lsl #6
  return &context->tensors[node->inputs->data[index]];
   1ed78:	eb08 1383 	add.w	r3, r8, r3, lsl #6
   1ed7c:	464a      	mov	r2, r9
   1ed7e:	e9cd 7a00 	strd	r7, sl, [sp]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1ed82:	4605      	mov	r5, r0
  TF_LITE_ENSURE_STATUS(
   1ed84:	9305      	str	r3, [sp, #20]
   1ed86:	9104      	str	r1, [sp, #16]
   1ed88:	f7ff fe7a 	bl	1ea80 <_ZN6tflite3ops5micro3sub15CalculateOpDataEP13TfLiteContextP15TfLiteSubParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
   1ed8c:	4604      	mov	r4, r0
   1ed8e:	b978      	cbnz	r0, 1edb0 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x60>
  if (output->type == kTfLiteFloat32) {
   1ed90:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
   1ed94:	f818 000b 	ldrb.w	r0, [r8, fp]
   1ed98:	2801      	cmp	r0, #1
   1ed9a:	d10d      	bne.n	1edb8 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x68>
    EvalSub(context, node, params, &data, input1, input2, output);
   1ed9c:	460a      	mov	r2, r1
   1ed9e:	e9cd 3701 	strd	r3, r7, [sp, #4]
   1eda2:	4631      	mov	r1, r6
   1eda4:	4653      	mov	r3, sl
   1eda6:	4628      	mov	r0, r5
   1eda8:	f8cd 9000 	str.w	r9, [sp]
   1edac:	f7ff fef2 	bl	1eb94 <_ZN6tflite3ops5micro3sub7EvalSubEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
}
   1edb0:	4620      	mov	r0, r4
   1edb2:	b015      	add	sp, #84	; 0x54
   1edb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   1edb8:	2803      	cmp	r0, #3
   1edba:	d001      	beq.n	1edc0 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x70>
   1edbc:	2809      	cmp	r0, #9
   1edbe:	d10b      	bne.n	1edd8 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x88>
    TF_LITE_ENSURE_OK(context, EvalSubQuantized(context, node, params, &data,
   1edc0:	460a      	mov	r2, r1
   1edc2:	e9cd 3701 	strd	r3, r7, [sp, #4]
   1edc6:	4631      	mov	r1, r6
   1edc8:	4653      	mov	r3, sl
   1edca:	4628      	mov	r0, r5
   1edcc:	f8cd 9000 	str.w	r9, [sp]
   1edd0:	f010 ffcc 	bl	2fd6c <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
   1edd4:	4604      	mov	r4, r0
   1edd6:	e7eb      	b.n	1edb0 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x60>
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
   1edd8:	696c      	ldr	r4, [r5, #20]
   1edda:	f7ed ff73 	bl	ccc4 <TfLiteTypeGetName>
   1edde:	f818 300b 	ldrb.w	r3, [r8, fp]
   1ede2:	4602      	mov	r2, r0
   1ede4:	4902      	ldr	r1, [pc, #8]	; (1edf0 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0xa0>)
   1ede6:	4628      	mov	r0, r5
   1ede8:	47a0      	blx	r4
    return kTfLiteError;
   1edea:	2401      	movs	r4, #1
   1edec:	e7e0      	b.n	1edb0 <_ZN6tflite3ops5micro3sub4EvalEP13TfLiteContextP10TfLiteNode+0x60>
   1edee:	bf00      	nop
   1edf0:	00034a40 	.word	0x00034a40

0001edf4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode>:
    return nullptr;
  }
  return data;
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1edf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1edf8:	ed2d 8b04 	vpush	{d8-d9}
   1edfc:	468b      	mov	fp, r1
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1edfe:	6949      	ldr	r1, [r1, #20]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
   1ee00:	4604      	mov	r4, r0
   1ee02:	b08d      	sub	sp, #52	; 0x34
  TFLITE_DCHECK(node->builtin_data != nullptr);
   1ee04:	b909      	cbnz	r1, 1ee0a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
   1ee06:	f012 f80c 	bl	30e22 <abort>
  // [1] = Weights Feature, {2, num_filters, input_size}
  // [2] = Weights Time, {2, num_filters, memory_size}
  // [3] = Bias (optional), {1, num_units}
  // [4] = Activation State (variable),
  //         {2, batch_size, memory_size * num_filters}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1ee0a:	f8db 7000 	ldr.w	r7, [fp]
   1ee0e:	6883      	ldr	r3, [r0, #8]
   1ee10:	68ba      	ldr	r2, [r7, #8]
   1ee12:	0190      	lsls	r0, r2, #6
   1ee14:	eb03 1282 	add.w	r2, r3, r2, lsl #6
   1ee18:	9207      	str	r2, [sp, #28]
  const bool use_tensor = index < node->inputs->size &&
   1ee1a:	683a      	ldr	r2, [r7, #0]
  return &context->tensors[node->inputs->data[index]];
   1ee1c:	900b      	str	r0, [sp, #44]	; 0x2c
  const bool use_tensor = index < node->inputs->size &&
   1ee1e:	2a03      	cmp	r2, #3
   1ee20:	9206      	str	r2, [sp, #24]
   1ee22:	dd23      	ble.n	1ee6c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   1ee24:	693a      	ldr	r2, [r7, #16]
  const bool use_tensor = index < node->inputs->size &&
   1ee26:	1c50      	adds	r0, r2, #1
   1ee28:	d020      	beq.n	1ee6c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x78>
    return &context->tensors[node->inputs->data[index]];
   1ee2a:	eb03 1282 	add.w	r2, r3, r2, lsl #6
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  const TfLiteTensor* activation_state =
      GetInput(context, node, kInputActivationStateTensor);

  // Define input constants based on input tensor definition above:
  const int rank = params->rank;
   1ee2e:	6808      	ldr	r0, [r1, #0]
  const int input_size = input->dims->data[1];
  const int batch_size = input->dims->data[0];
  const int num_filters = weights_feature->dims->data[0];
   1ee30:	9907      	ldr	r1, [sp, #28]
   1ee32:	6889      	ldr	r1, [r1, #8]
   1ee34:	684d      	ldr	r5, [r1, #4]
   1ee36:	9104      	str	r1, [sp, #16]
  TF_LITE_ENSURE_EQ(context, num_filters % rank, 0);
   1ee38:	fb95 f9f0 	sdiv	r9, r5, r0
   1ee3c:	fb00 5019 	mls	r0, r0, r9, r5
   1ee40:	b1b0      	cbz	r0, 1ee70 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>
   1ee42:	2300      	movs	r3, #0
   1ee44:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1ee48:	4ba3      	ldr	r3, [pc, #652]	; (1f0d8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e4>)
   1ee4a:	6965      	ldr	r5, [r4, #20]
   1ee4c:	9301      	str	r3, [sp, #4]
   1ee4e:	4ba3      	ldr	r3, [pc, #652]	; (1f0dc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2e8>)
   1ee50:	9300      	str	r3, [sp, #0]
   1ee52:	f240 1377 	movw	r3, #375	; 0x177
   1ee56:	4620      	mov	r0, r4
   1ee58:	4aa1      	ldr	r2, [pc, #644]	; (1f0e0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   1ee5a:	49a2      	ldr	r1, [pc, #648]	; (1f0e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
   1ee5c:	47a8      	blx	r5
   1ee5e:	2601      	movs	r6, #1
        &(data->scratch_tensor_index));
    TF_LITE_ENSURE_OK(context, scratch_status);
  }

  return kTfLiteOk;
}
   1ee60:	4630      	mov	r0, r6
   1ee62:	b00d      	add	sp, #52	; 0x34
   1ee64:	ecbd 8b04 	vpop	{d8-d9}
   1ee68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return nullptr;
   1ee6c:	2200      	movs	r2, #0
   1ee6e:	e7de      	b.n	1ee2e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x3a>
  return &context->tensors[node->inputs->data[index]];
   1ee70:	6878      	ldr	r0, [r7, #4]
   1ee72:	0186      	lsls	r6, r0, #6
   1ee74:	eb03 1080 	add.w	r0, r3, r0, lsl #6
   1ee78:	9008      	str	r0, [sp, #32]
  TF_LITE_ENSURE(context,
   1ee7a:	5d98      	ldrb	r0, [r3, r6]
   1ee7c:	f000 06f7 	and.w	r6, r0, #247	; 0xf7
   1ee80:	2e01      	cmp	r6, #1
   1ee82:	9005      	str	r0, [sp, #20]
   1ee84:	d009      	beq.n	1ee9a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xa6>
   1ee86:	4b98      	ldr	r3, [pc, #608]	; (1f0e8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f4>)
   1ee88:	4620      	mov	r0, r4
   1ee8a:	9300      	str	r3, [sp, #0]
   1ee8c:	6965      	ldr	r5, [r4, #20]
   1ee8e:	f44f 73be 	mov.w	r3, #380	; 0x17c
   1ee92:	4a93      	ldr	r2, [pc, #588]	; (1f0e0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   1ee94:	4995      	ldr	r1, [pc, #596]	; (1f0ec <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f8>)
   1ee96:	47a8      	blx	r5
   1ee98:	e7e1      	b.n	1ee5e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x6a>
  const int input_size = input->dims->data[1];
   1ee9a:	9808      	ldr	r0, [sp, #32]
   1ee9c:	6880      	ldr	r0, [r0, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1ee9e:	f8d0 8000 	ldr.w	r8, [r0]
  TF_LITE_ENSURE_EQ(context, NumDimensions(input), 2);
   1eea2:	f1b8 0f02 	cmp.w	r8, #2
   1eea6:	d00e      	beq.n	1eec6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xd2>
   1eea8:	2302      	movs	r3, #2
   1eeaa:	e9cd 8302 	strd	r8, r3, [sp, #8]
   1eeae:	4b90      	ldr	r3, [pc, #576]	; (1f0f0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   1eeb0:	6965      	ldr	r5, [r4, #20]
   1eeb2:	9301      	str	r3, [sp, #4]
   1eeb4:	4b8f      	ldr	r3, [pc, #572]	; (1f0f4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x300>)
   1eeb6:	9300      	str	r3, [sp, #0]
   1eeb8:	f44f 73bf 	mov.w	r3, #382	; 0x17e
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
   1eebc:	4620      	mov	r0, r4
   1eebe:	4a88      	ldr	r2, [pc, #544]	; (1f0e0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2ec>)
   1eec0:	4988      	ldr	r1, [pc, #544]	; (1f0e4 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2f0>)
   1eec2:	47a8      	blx	r5
   1eec4:	e7cc      	b.n	1ee60 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>
   1eec6:	f8db c004 	ldr.w	ip, [fp, #4]
   1eeca:	f8dc e000 	ldr.w	lr, [ip]
   1eece:	f1be 0f01 	cmp.w	lr, #1
   1eed2:	d009      	beq.n	1eee8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>
   1eed4:	4b88      	ldr	r3, [pc, #544]	; (1f0f8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x304>)
   1eed6:	e9cd e602 	strd	lr, r6, [sp, #8]
   1eeda:	9301      	str	r3, [sp, #4]
   1eedc:	4b87      	ldr	r3, [pc, #540]	; (1f0fc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x308>)
   1eede:	6965      	ldr	r5, [r4, #20]
   1eee0:	9300      	str	r3, [sp, #0]
   1eee2:	f44f 73c1 	mov.w	r3, #386	; 0x182
   1eee6:	e7e9      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  return &context->tensors[node->outputs->data[index]];
   1eee8:	f8dc c004 	ldr.w	ip, [ip, #4]
   1eeec:	ea4f 118c 	mov.w	r1, ip, lsl #6
   1eef0:	910a      	str	r1, [sp, #40]	; 0x28
   1eef2:	eb03 118c 	add.w	r1, r3, ip, lsl #6
  TF_LITE_ENSURE_EQ(context, NumDimensions(output), 2);
   1eef6:	f8d1 e008 	ldr.w	lr, [r1, #8]
   1eefa:	9109      	str	r1, [sp, #36]	; 0x24
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1eefc:	f8de c000 	ldr.w	ip, [lr]
   1ef00:	f1bc 0f02 	cmp.w	ip, #2
   1ef04:	d009      	beq.n	1ef1a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x126>
   1ef06:	4b7a      	ldr	r3, [pc, #488]	; (1f0f0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   1ef08:	e9cd c802 	strd	ip, r8, [sp, #8]
   1ef0c:	9301      	str	r3, [sp, #4]
   1ef0e:	4b7c      	ldr	r3, [pc, #496]	; (1f100 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x30c>)
   1ef10:	6965      	ldr	r5, [r4, #20]
   1ef12:	9300      	str	r3, [sp, #0]
   1ef14:	f44f 73c2 	mov.w	r3, #388	; 0x184
   1ef18:	e7d0      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  const int batch_size = input->dims->data[0];
   1ef1a:	f8d0 a004 	ldr.w	sl, [r0, #4]
  TF_LITE_ENSURE_EQ(context, output->dims->data[0], batch_size);
   1ef1e:	f8de 8004 	ldr.w	r8, [lr, #4]
   1ef22:	45d0      	cmp	r8, sl
   1ef24:	d009      	beq.n	1ef3a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x146>
   1ef26:	4b77      	ldr	r3, [pc, #476]	; (1f104 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
   1ef28:	e9cd 8a02 	strd	r8, sl, [sp, #8]
   1ef2c:	9301      	str	r3, [sp, #4]
   1ef2e:	4b76      	ldr	r3, [pc, #472]	; (1f108 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x314>)
   1ef30:	6965      	ldr	r5, [r4, #20]
   1ef32:	9300      	str	r3, [sp, #0]
   1ef34:	f240 1385 	movw	r3, #389	; 0x185
   1ef38:	e7c0      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  TF_LITE_ENSURE_EQ(context, output->dims->data[1], num_units);
   1ef3a:	f8de e008 	ldr.w	lr, [lr, #8]
   1ef3e:	45ce      	cmp	lr, r9
   1ef40:	d009      	beq.n	1ef56 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x162>
   1ef42:	4b72      	ldr	r3, [pc, #456]	; (1f10c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
   1ef44:	e9cd e902 	strd	lr, r9, [sp, #8]
   1ef48:	9301      	str	r3, [sp, #4]
   1ef4a:	4b71      	ldr	r3, [pc, #452]	; (1f110 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x31c>)
   1ef4c:	6965      	ldr	r5, [r4, #20]
   1ef4e:	9300      	str	r3, [sp, #0]
   1ef50:	f44f 73c3 	mov.w	r3, #390	; 0x186
   1ef54:	e7b2      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
   1ef56:	9904      	ldr	r1, [sp, #16]
   1ef58:	f8d1 e000 	ldr.w	lr, [r1]
  TF_LITE_ENSURE_EQ(context, NumDimensions(weights_feature), 2);
   1ef5c:	f1be 0f02 	cmp.w	lr, #2
   1ef60:	d009      	beq.n	1ef76 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x182>
   1ef62:	4b63      	ldr	r3, [pc, #396]	; (1f0f0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   1ef64:	e9cd ec02 	strd	lr, ip, [sp, #8]
   1ef68:	9301      	str	r3, [sp, #4]
   1ef6a:	4b6a      	ldr	r3, [pc, #424]	; (1f114 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x320>)
   1ef6c:	6965      	ldr	r5, [r4, #20]
   1ef6e:	9300      	str	r3, [sp, #0]
   1ef70:	f240 1389 	movw	r3, #393	; 0x189
   1ef74:	e7a2      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  TF_LITE_ENSURE_EQ(context, weights_feature->dims->data[1], input_size);
   1ef76:	9904      	ldr	r1, [sp, #16]
  const int input_size = input->dims->data[1];
   1ef78:	6880      	ldr	r0, [r0, #8]
  TF_LITE_ENSURE_EQ(context, weights_feature->dims->data[1], input_size);
   1ef7a:	6889      	ldr	r1, [r1, #8]
   1ef7c:	4281      	cmp	r1, r0
   1ef7e:	d009      	beq.n	1ef94 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1a0>
   1ef80:	4b65      	ldr	r3, [pc, #404]	; (1f118 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x324>)
   1ef82:	e9cd 1002 	strd	r1, r0, [sp, #8]
   1ef86:	9301      	str	r3, [sp, #4]
   1ef88:	4b64      	ldr	r3, [pc, #400]	; (1f11c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x328>)
   1ef8a:	6965      	ldr	r5, [r4, #20]
   1ef8c:	9300      	str	r3, [sp, #0]
   1ef8e:	f44f 73c5 	mov.w	r3, #394	; 0x18a
   1ef92:	e793      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  return &context->tensors[node->inputs->data[index]];
   1ef94:	68f9      	ldr	r1, [r7, #12]
   1ef96:	ea4f 1e81 	mov.w	lr, r1, lsl #6
   1ef9a:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  const int memory_size = weights_time->dims->data[1];
   1ef9e:	6888      	ldr	r0, [r1, #8]
   1efa0:	9104      	str	r1, [sp, #16]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1efa2:	6801      	ldr	r1, [r0, #0]
  TF_LITE_ENSURE_EQ(context, NumDimensions(weights_time), 2);
   1efa4:	2902      	cmp	r1, #2
   1efa6:	d00a      	beq.n	1efbe <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1ca>
   1efa8:	2302      	movs	r3, #2
   1efaa:	e9cd 1302 	strd	r1, r3, [sp, #8]
   1efae:	4b50      	ldr	r3, [pc, #320]	; (1f0f0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   1efb0:	6965      	ldr	r5, [r4, #20]
   1efb2:	9301      	str	r3, [sp, #4]
   1efb4:	4b5a      	ldr	r3, [pc, #360]	; (1f120 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x32c>)
   1efb6:	9300      	str	r3, [sp, #0]
   1efb8:	f240 138d 	movw	r3, #397	; 0x18d
   1efbc:	e77e      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  TF_LITE_ENSURE_EQ(context, weights_time->dims->data[0], num_filters);
   1efbe:	6841      	ldr	r1, [r0, #4]
   1efc0:	42a9      	cmp	r1, r5
   1efc2:	d009      	beq.n	1efd8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x1e4>
   1efc4:	4b57      	ldr	r3, [pc, #348]	; (1f124 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x330>)
   1efc6:	e9cd 1502 	strd	r1, r5, [sp, #8]
   1efca:	9301      	str	r3, [sp, #4]
   1efcc:	4b56      	ldr	r3, [pc, #344]	; (1f128 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x334>)
   1efce:	6965      	ldr	r5, [r4, #20]
   1efd0:	9300      	str	r3, [sp, #0]
   1efd2:	f44f 73c7 	mov.w	r3, #398	; 0x18e
   1efd6:	e771      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  if (bias != nullptr) {
   1efd8:	b16a      	cbz	r2, 1eff6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x202>
    TF_LITE_ENSURE_EQ(context, bias->dims->data[0], num_units);
   1efda:	6891      	ldr	r1, [r2, #8]
   1efdc:	6849      	ldr	r1, [r1, #4]
   1efde:	4549      	cmp	r1, r9
   1efe0:	d009      	beq.n	1eff6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x202>
   1efe2:	4b4a      	ldr	r3, [pc, #296]	; (1f10c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x318>)
   1efe4:	e9cd 1902 	strd	r1, r9, [sp, #8]
   1efe8:	9301      	str	r3, [sp, #4]
   1efea:	4b50      	ldr	r3, [pc, #320]	; (1f12c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x338>)
   1efec:	6965      	ldr	r5, [r4, #20]
   1efee:	9300      	str	r3, [sp, #0]
   1eff0:	f240 1393 	movw	r3, #403	; 0x193
   1eff4:	e762      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  return &context->tensors[node->inputs->data[index]];
   1eff6:	6979      	ldr	r1, [r7, #20]
   1eff8:	ea4f 1c81 	mov.w	ip, r1, lsl #6
   1effc:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  TF_LITE_ENSURE_EQ(context, NumDimensions(activation_state), 2);
   1f000:	688f      	ldr	r7, [r1, #8]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   1f002:	f8d7 8000 	ldr.w	r8, [r7]
   1f006:	f1b8 0f02 	cmp.w	r8, #2
   1f00a:	d00a      	beq.n	1f022 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x22e>
   1f00c:	2302      	movs	r3, #2
   1f00e:	e9cd 8302 	strd	r8, r3, [sp, #8]
   1f012:	4b37      	ldr	r3, [pc, #220]	; (1f0f0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2fc>)
   1f014:	6965      	ldr	r5, [r4, #20]
   1f016:	9301      	str	r3, [sp, #4]
   1f018:	4b45      	ldr	r3, [pc, #276]	; (1f130 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x33c>)
   1f01a:	9300      	str	r3, [sp, #0]
   1f01c:	f240 1397 	movw	r3, #407	; 0x197
   1f020:	e74c      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  TF_LITE_ENSURE_EQ(context, activation_state->dims->data[0], batch_size);
   1f022:	f8d7 8004 	ldr.w	r8, [r7, #4]
   1f026:	45d0      	cmp	r8, sl
   1f028:	d009      	beq.n	1f03e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x24a>
   1f02a:	4b36      	ldr	r3, [pc, #216]	; (1f104 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x310>)
   1f02c:	e9cd 8a02 	strd	r8, sl, [sp, #8]
   1f030:	9301      	str	r3, [sp, #4]
   1f032:	4b40      	ldr	r3, [pc, #256]	; (1f134 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x340>)
   1f034:	6965      	ldr	r5, [r4, #20]
   1f036:	9300      	str	r3, [sp, #0]
   1f038:	f44f 73cc 	mov.w	r3, #408	; 0x198
   1f03c:	e73e      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  TF_LITE_ENSURE_EQ(context, activation_state->dims->data[1],
   1f03e:	6880      	ldr	r0, [r0, #8]
   1f040:	68bf      	ldr	r7, [r7, #8]
   1f042:	4368      	muls	r0, r5
   1f044:	4287      	cmp	r7, r0
   1f046:	d009      	beq.n	1f05c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x268>
   1f048:	4b3b      	ldr	r3, [pc, #236]	; (1f138 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x344>)
   1f04a:	e9cd 7002 	strd	r7, r0, [sp, #8]
   1f04e:	9301      	str	r3, [sp, #4]
   1f050:	4b3a      	ldr	r3, [pc, #232]	; (1f13c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x348>)
   1f052:	6965      	ldr	r5, [r4, #20]
   1f054:	9300      	str	r3, [sp, #0]
   1f056:	f240 1399 	movw	r3, #409	; 0x199
   1f05a:	e72f      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 5);
   1f05c:	9806      	ldr	r0, [sp, #24]
   1f05e:	2805      	cmp	r0, #5
   1f060:	d00a      	beq.n	1f078 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x284>
   1f062:	2305      	movs	r3, #5
   1f064:	9303      	str	r3, [sp, #12]
   1f066:	4b36      	ldr	r3, [pc, #216]	; (1f140 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x34c>)
   1f068:	6965      	ldr	r5, [r4, #20]
   1f06a:	9301      	str	r3, [sp, #4]
   1f06c:	4b35      	ldr	r3, [pc, #212]	; (1f144 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x350>)
   1f06e:	9002      	str	r0, [sp, #8]
   1f070:	9300      	str	r3, [sp, #0]
   1f072:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   1f076:	e721      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
  if (input->type == kTfLiteInt8) {
   1f078:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1f07a:	5c1f      	ldrb	r7, [r3, r0]
   1f07c:	9805      	ldr	r0, [sp, #20]
   1f07e:	2809      	cmp	r0, #9
   1f080:	f040 80f0 	bne.w	1f264 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x470>
    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteInt8);
   1f084:	2f09      	cmp	r7, #9
   1f086:	d009      	beq.n	1f09c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2a8>
   1f088:	4b2f      	ldr	r3, [pc, #188]	; (1f148 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x354>)
   1f08a:	e9cd 7002 	strd	r7, r0, [sp, #8]
   1f08e:	9301      	str	r3, [sp, #4]
   1f090:	4b2e      	ldr	r3, [pc, #184]	; (1f14c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x358>)
   1f092:	6965      	ldr	r5, [r4, #20]
   1f094:	9300      	str	r3, [sp, #0]
   1f096:	f240 139f 	movw	r3, #415	; 0x19f
   1f09a:	e70f      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
    TF_LITE_ENSURE_EQ(context, weights_time->type, kTfLiteInt16);
   1f09c:	f813 000e 	ldrb.w	r0, [r3, lr]
   1f0a0:	2807      	cmp	r0, #7
   1f0a2:	d00a      	beq.n	1f0ba <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x2c6>
   1f0a4:	2307      	movs	r3, #7
   1f0a6:	e9cd 0302 	strd	r0, r3, [sp, #8]
   1f0aa:	4b29      	ldr	r3, [pc, #164]	; (1f150 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x35c>)
   1f0ac:	6965      	ldr	r5, [r4, #20]
   1f0ae:	9301      	str	r3, [sp, #4]
   1f0b0:	4b28      	ldr	r3, [pc, #160]	; (1f154 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x360>)
   1f0b2:	9300      	str	r3, [sp, #0]
   1f0b4:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
   1f0b8:	e700      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
    TF_LITE_ENSURE_EQ(context, activation_state->type, kTfLiteInt16);
   1f0ba:	f813 700c 	ldrb.w	r7, [r3, ip]
   1f0be:	2f07      	cmp	r7, #7
   1f0c0:	d04c      	beq.n	1f15c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x368>
   1f0c2:	4b23      	ldr	r3, [pc, #140]	; (1f150 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x35c>)
   1f0c4:	e9cd 7002 	strd	r7, r0, [sp, #8]
   1f0c8:	9301      	str	r3, [sp, #4]
   1f0ca:	4b23      	ldr	r3, [pc, #140]	; (1f158 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x364>)
   1f0cc:	6965      	ldr	r5, [r4, #20]
   1f0ce:	9300      	str	r3, [sp, #0]
   1f0d0:	f240 13a1 	movw	r3, #417	; 0x1a1
   1f0d4:	e6f2      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
   1f0d6:	bf00      	nop
   1f0d8:	00035223 	.word	0x00035223
   1f0dc:	00035ec6 	.word	0x00035ec6
   1f0e0:	00035ea0 	.word	0x00035ea0
   1f0e4:	00034aec 	.word	0x00034aec
   1f0e8:	00035ed9 	.word	0x00035ed9
   1f0ec:	00034c0c 	.word	0x00034c0c
   1f0f0:	0003545c 	.word	0x0003545c
   1f0f4:	00035d58 	.word	0x00035d58
   1f0f8:	00035884 	.word	0x00035884
   1f0fc:	00034dc2 	.word	0x00034dc2
   1f100:	00035f15 	.word	0x00035f15
   1f104:	00035f2b 	.word	0x00035f2b
   1f108:	00035f36 	.word	0x00035f36
   1f10c:	00035f4c 	.word	0x00035f4c
   1f110:	00035f56 	.word	0x00035f56
   1f114:	00035f6c 	.word	0x00035f6c
   1f118:	00035f8b 	.word	0x00035f8b
   1f11c:	00035f96 	.word	0x00035f96
   1f120:	00035fb5 	.word	0x00035fb5
   1f124:	0003604f 	.word	0x0003604f
   1f128:	00035fd1 	.word	0x00035fd1
   1f12c:	00035fed 	.word	0x00035fed
   1f130:	00036001 	.word	0x00036001
   1f134:	00036021 	.word	0x00036021
   1f138:	00036041 	.word	0x00036041
   1f13c:	0003605b 	.word	0x0003605b
   1f140:	000348f1 	.word	0x000348f1
   1f144:	00035945 	.word	0x00035945
   1f148:	00035f09 	.word	0x00035f09
   1f14c:	0003607b 	.word	0x0003607b
   1f150:	00035043 	.word	0x00035043
   1f154:	00036091 	.word	0x00036091
   1f158:	000360a4 	.word	0x000360a4
    if (bias != nullptr) {
   1f15c:	b16a      	cbz	r2, 1f17a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x386>
      TF_LITE_ENSURE_EQ(context, bias->type, kTfLiteInt32);
   1f15e:	7812      	ldrb	r2, [r2, #0]
   1f160:	2a02      	cmp	r2, #2
   1f162:	d00a      	beq.n	1f17a <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x386>
   1f164:	2302      	movs	r3, #2
   1f166:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1f16a:	4b6b      	ldr	r3, [pc, #428]	; (1f318 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x524>)
   1f16c:	6965      	ldr	r5, [r4, #20]
   1f16e:	9301      	str	r3, [sp, #4]
   1f170:	4b6a      	ldr	r3, [pc, #424]	; (1f31c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x528>)
   1f172:	9300      	str	r3, [sp, #0]
   1f174:	f240 13a3 	movw	r3, #419	; 0x1a3
   1f178:	e6a0      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
   1f17a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f17c:	5c98      	ldrb	r0, [r3, r2]
   1f17e:	2809      	cmp	r0, #9
   1f180:	d013      	beq.n	1f1aa <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x3b6>
   1f182:	6967      	ldr	r7, [r4, #20]
   1f184:	f7ed fd9e 	bl	ccc4 <TfLiteTypeGetName>
   1f188:	4605      	mov	r5, r0
   1f18a:	2009      	movs	r0, #9
   1f18c:	f7ed fd9a 	bl	ccc4 <TfLiteTypeGetName>
   1f190:	4b63      	ldr	r3, [pc, #396]	; (1f320 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x52c>)
   1f192:	e9cd 5002 	strd	r5, r0, [sp, #8]
   1f196:	9301      	str	r3, [sp, #4]
   1f198:	4b62      	ldr	r3, [pc, #392]	; (1f324 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x530>)
   1f19a:	9300      	str	r3, [sp, #0]
   1f19c:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
   1f1a0:	4620      	mov	r0, r4
   1f1a2:	4a61      	ldr	r2, [pc, #388]	; (1f328 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x534>)
   1f1a4:	4961      	ldr	r1, [pc, #388]	; (1f32c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x538>)
   1f1a6:	47b8      	blx	r7
   1f1a8:	e65a      	b.n	1ee60 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>
        state_params->scale->data[0]);
   1f1aa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   1f1ac:	681b      	ldr	r3, [r3, #0]
   1f1ae:	ed93 8a01 	vldr	s16, [r3, #4]
        input_params->scale->data[0] * weights_feature_params->scale->data[0] /
   1f1b2:	9b08      	ldr	r3, [sp, #32]
   1f1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f1b6:	681a      	ldr	r2, [r3, #0]
   1f1b8:	9b07      	ldr	r3, [sp, #28]
   1f1ba:	edd2 7a01 	vldr	s15, [r2, #4]
   1f1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f1c0:	681b      	ldr	r3, [r3, #0]
   1f1c2:	ed93 7a01 	vldr	s14, [r3, #4]
   1f1c6:	ee67 7a87 	vmul.f32	s15, s15, s14
    const double effective_scale_1 = static_cast<double>(
   1f1ca:	eec7 7a88 	vdiv.f32	s15, s15, s16
   1f1ce:	ee17 0a90 	vmov	r0, s15
   1f1d2:	f7ed f999 	bl	c508 <__aeabi_f2d>
        state_params->scale->data[0] * weight_time_params->scale->data[0] /
   1f1d6:	9b04      	ldr	r3, [sp, #16]
    const double effective_scale_1 = static_cast<double>(
   1f1d8:	ec41 0b19 	vmov	d9, r0, r1
        state_params->scale->data[0] * weight_time_params->scale->data[0] /
   1f1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f1de:	681b      	ldr	r3, [r3, #0]
   1f1e0:	edd3 7a01 	vldr	s15, [r3, #4]
        output_params->scale->data[0]);
   1f1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
        state_params->scale->data[0] * weight_time_params->scale->data[0] /
   1f1e6:	ee28 8a27 	vmul.f32	s16, s16, s15
        output_params->scale->data[0]);
   1f1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1f1ec:	681b      	ldr	r3, [r3, #0]
        state_params->scale->data[0] * weight_time_params->scale->data[0] /
   1f1ee:	edd3 7a01 	vldr	s15, [r3, #4]
    const double effective_scale_2 = static_cast<double>(
   1f1f2:	eec8 7a27 	vdiv.f32	s15, s16, s15
   1f1f6:	ee17 0a90 	vmov	r0, s15
   1f1fa:	f7ed f985 	bl	c508 <__aeabi_f2d>
    TFLITE_DCHECK(node->user_data != nullptr);
   1f1fe:	f8db b010 	ldr.w	fp, [fp, #16]
    const double effective_scale_2 = static_cast<double>(
   1f202:	4606      	mov	r6, r0
   1f204:	460f      	mov	r7, r1
    TFLITE_DCHECK(node->user_data != nullptr);
   1f206:	f1bb 0f00 	cmp.w	fp, #0
   1f20a:	f43f adfc 	beq.w	1ee06 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    QuantizeMultiplier(effective_scale_1, &(data->effective_scale_1_a),
   1f20e:	ec51 0b19 	vmov	r0, r1, d9
   1f212:	465a      	mov	r2, fp
   1f214:	f10b 0308 	add.w	r3, fp, #8
   1f218:	f001 feb0 	bl	20f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    QuantizeMultiplier(effective_scale_2, &(data->effective_scale_2_a),
   1f21c:	f10b 030c 	add.w	r3, fp, #12
   1f220:	4630      	mov	r0, r6
   1f222:	4639      	mov	r1, r7
   1f224:	f10b 0204 	add.w	r2, fp, #4
   1f228:	f001 fea8 	bl	20f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    TFLITE_DCHECK(context->RequestScratchBufferInArena != nullptr);
   1f22c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1f22e:	2b00      	cmp	r3, #0
   1f230:	f43f ade9 	beq.w	1ee06 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
        context, batch_size * num_filters * sizeof(int32_t),
   1f234:	fb05 f10a 	mul.w	r1, r5, sl
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
   1f238:	4620      	mov	r0, r4
   1f23a:	f10b 0210 	add.w	r2, fp, #16
   1f23e:	0089      	lsls	r1, r1, #2
   1f240:	4798      	blx	r3
    TF_LITE_ENSURE_OK(context, scratch_status);
   1f242:	4606      	mov	r6, r0
   1f244:	2800      	cmp	r0, #0
   1f246:	f47f ae0b 	bne.w	1ee60 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x6c>
            context, batch_size * num_units * sizeof(int32_t),
   1f24a:	fb09 f10a 	mul.w	r1, r9, sl
        context->RequestScratchBufferInArena(
   1f24e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1f250:	f10b 0214 	add.w	r2, fp, #20
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
   1f254:	4620      	mov	r0, r4
   1f256:	0089      	lsls	r1, r1, #2
}
   1f258:	b00d      	add	sp, #52	; 0x34
   1f25a:	ecbd 8b04 	vpop	{d8-d9}
   1f25e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
   1f262:	4718      	bx	r3
    TF_LITE_ENSURE_EQ(context, weights_feature->type, kTfLiteFloat32);
   1f264:	2f01      	cmp	r7, #1
   1f266:	d00a      	beq.n	1f27e <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x48a>
   1f268:	2301      	movs	r3, #1
   1f26a:	e9cd 7302 	strd	r7, r3, [sp, #8]
   1f26e:	4b30      	ldr	r3, [pc, #192]	; (1f330 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x53c>)
   1f270:	6965      	ldr	r5, [r4, #20]
   1f272:	9301      	str	r3, [sp, #4]
   1f274:	4b2f      	ldr	r3, [pc, #188]	; (1f334 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x540>)
   1f276:	9300      	str	r3, [sp, #0]
   1f278:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   1f27c:	e61e      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
    TF_LITE_ENSURE_EQ(context, weights_time->type, kTfLiteFloat32);
   1f27e:	f813 800e 	ldrb.w	r8, [r3, lr]
   1f282:	f1b8 0f01 	cmp.w	r8, #1
   1f286:	d009      	beq.n	1f29c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4a8>
   1f288:	4b29      	ldr	r3, [pc, #164]	; (1f330 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x53c>)
   1f28a:	e9cd 8702 	strd	r8, r7, [sp, #8]
   1f28e:	9301      	str	r3, [sp, #4]
   1f290:	4b29      	ldr	r3, [pc, #164]	; (1f338 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x544>)
   1f292:	6965      	ldr	r5, [r4, #20]
   1f294:	9300      	str	r3, [sp, #0]
   1f296:	f240 13d1 	movw	r3, #465	; 0x1d1
   1f29a:	e5dc      	b.n	1ee56 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x62>
    TF_LITE_ENSURE_EQ(context, activation_state->type, kTfLiteFloat32);
   1f29c:	f813 600c 	ldrb.w	r6, [r3, ip]
   1f2a0:	2e01      	cmp	r6, #1
   1f2a2:	d009      	beq.n	1f2b8 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4c4>
   1f2a4:	4b22      	ldr	r3, [pc, #136]	; (1f330 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x53c>)
   1f2a6:	e9cd 6802 	strd	r6, r8, [sp, #8]
   1f2aa:	9301      	str	r3, [sp, #4]
   1f2ac:	4b23      	ldr	r3, [pc, #140]	; (1f33c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x548>)
   1f2ae:	6965      	ldr	r5, [r4, #20]
   1f2b0:	9300      	str	r3, [sp, #0]
   1f2b2:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1f2b6:	e5ce      	b.n	1ee56 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x62>
    if (bias != nullptr) {
   1f2b8:	b16a      	cbz	r2, 1f2d6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4e2>
      TF_LITE_ENSURE_EQ(context, bias->type, kTfLiteFloat32);
   1f2ba:	7812      	ldrb	r2, [r2, #0]
   1f2bc:	2a01      	cmp	r2, #1
   1f2be:	d00a      	beq.n	1f2d6 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x4e2>
   1f2c0:	2301      	movs	r3, #1
   1f2c2:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1f2c6:	4b1a      	ldr	r3, [pc, #104]	; (1f330 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x53c>)
   1f2c8:	6965      	ldr	r5, [r4, #20]
   1f2ca:	9301      	str	r3, [sp, #4]
   1f2cc:	4b13      	ldr	r3, [pc, #76]	; (1f31c <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x528>)
   1f2ce:	9300      	str	r3, [sp, #0]
   1f2d0:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
   1f2d4:	e5f2      	b.n	1eebc <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
   1f2d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f2d8:	5c98      	ldrb	r0, [r3, r2]
   1f2da:	2801      	cmp	r0, #1
   1f2dc:	d00f      	beq.n	1f2fe <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x50a>
   1f2de:	6967      	ldr	r7, [r4, #20]
   1f2e0:	f7ed fcf0 	bl	ccc4 <TfLiteTypeGetName>
   1f2e4:	4605      	mov	r5, r0
   1f2e6:	2001      	movs	r0, #1
   1f2e8:	f7ed fcec 	bl	ccc4 <TfLiteTypeGetName>
   1f2ec:	4b10      	ldr	r3, [pc, #64]	; (1f330 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x53c>)
   1f2ee:	e9cd 5002 	strd	r5, r0, [sp, #8]
   1f2f2:	9301      	str	r3, [sp, #4]
   1f2f4:	4b0b      	ldr	r3, [pc, #44]	; (1f324 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x530>)
   1f2f6:	9300      	str	r3, [sp, #0]
   1f2f8:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
   1f2fc:	e750      	b.n	1f1a0 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x3ac>
    TFLITE_DCHECK(node->user_data != nullptr);
   1f2fe:	f8db 2010 	ldr.w	r2, [fp, #16]
   1f302:	2a00      	cmp	r2, #0
   1f304:	f43f ad7f 	beq.w	1ee06 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
    TFLITE_DCHECK(context->RequestScratchBufferInArena != nullptr);
   1f308:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1f30a:	2b00      	cmp	r3, #0
   1f30c:	f43f ad7b 	beq.w	1ee06 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x12>
        context, batch_size * num_filters * sizeof(float),
   1f310:	fb05 f10a 	mul.w	r1, r5, sl
    const TfLiteStatus scratch_status = context->RequestScratchBufferInArena(
   1f314:	3210      	adds	r2, #16
   1f316:	e79d      	b.n	1f254 <_ZN6tflite3ops5micro4svdf7PrepareEP13TfLiteContextP10TfLiteNode+0x460>
   1f318:	00035082 	.word	0x00035082
   1f31c:	000360bb 	.word	0x000360bb
   1f320:	00035f09 	.word	0x00035f09
   1f324:	000353f7 	.word	0x000353f7
   1f328:	00035ea0 	.word	0x00035ea0
   1f32c:	00034b27 	.word	0x00034b27
   1f330:	00034b41 	.word	0x00034b41
   1f334:	0003607b 	.word	0x0003607b
   1f338:	00036091 	.word	0x00036091
   1f33c:	000360a4 	.word	0x000360a4

0001f340 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1f340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f344:	ed2d 8b04 	vpush	{d8-d9}
  auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1f348:	680c      	ldr	r4, [r1, #0]
   1f34a:	6883      	ldr	r3, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   1f34c:	6862      	ldr	r2, [r4, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   1f34e:	4607      	mov	r7, r0
   1f350:	eb03 1882 	add.w	r8, r3, r2, lsl #6
   1f354:	68a2      	ldr	r2, [r4, #8]
   1f356:	b097      	sub	sp, #92	; 0x5c
   1f358:	0190      	lsls	r0, r2, #6
   1f35a:	eb03 1982 	add.w	r9, r3, r2, lsl #6
   1f35e:	68e2      	ldr	r2, [r4, #12]
  auto* params = reinterpret_cast<TfLiteSVDFParams*>(node->builtin_data);
   1f360:	694e      	ldr	r6, [r1, #20]
   1f362:	eb03 1282 	add.w	r2, r3, r2, lsl #6
   1f366:	9208      	str	r2, [sp, #32]
  const bool use_tensor = index < node->inputs->size &&
   1f368:	6822      	ldr	r2, [r4, #0]
   1f36a:	2a03      	cmp	r2, #3
   1f36c:	dd15      	ble.n	1f39a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   1f36e:	6922      	ldr	r2, [r4, #16]
  const bool use_tensor = index < node->inputs->size &&
   1f370:	1c55      	adds	r5, r2, #1
   1f372:	d012      	beq.n	1f39a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5a>
    return &context->tensors[node->inputs->data[index]];
   1f374:	eb03 1b82 	add.w	fp, r3, r2, lsl #6
  TfLiteTensor* tensor = &context->tensors[node->inputs->data[index]];
   1f378:	6964      	ldr	r4, [r4, #20]
   1f37a:	eb03 1484 	add.w	r4, r3, r4, lsl #6
  return (tensor->is_variable) ? tensor : nullptr;
   1f37e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
   1f382:	2a00      	cmp	r2, #0
  return &context->tensors[node->outputs->data[index]];
   1f384:	684a      	ldr	r2, [r1, #4]
  return (tensor->is_variable) ? tensor : nullptr;
   1f386:	bf08      	it	eq
   1f388:	2400      	moveq	r4, #0
  return &context->tensors[node->outputs->data[index]];
   1f38a:	6852      	ldr	r2, [r2, #4]
   1f38c:	eb03 1a82 	add.w	sl, r3, r2, lsl #6
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
  TfLiteTensor* activation_state =
      GetVariableInput(context, node, kInputActivationStateTensor);
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
   1f390:	690a      	ldr	r2, [r1, #16]
   1f392:	9204      	str	r2, [sp, #16]
   1f394:	b922      	cbnz	r2, 1f3a0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x60>
   1f396:	f011 fd44 	bl	30e22 <abort>
  return nullptr;
   1f39a:	f04f 0b00 	mov.w	fp, #0
   1f39e:	e7eb      	b.n	1f378 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x38>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  switch (weights_feature->type) {
   1f3a0:	5c18      	ldrb	r0, [r3, r0]
   1f3a2:	2801      	cmp	r0, #1
   1f3a4:	d00a      	beq.n	1f3bc <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x7c>
   1f3a6:	2809      	cmp	r0, #9
   1f3a8:	f000 8186 	beq.w	1f6b8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x378>
      return kTfLiteOk;
      break;
    }

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
   1f3ac:	697c      	ldr	r4, [r7, #20]
   1f3ae:	f7ed fc89 	bl	ccc4 <TfLiteTypeGetName>
   1f3b2:	49b7      	ldr	r1, [pc, #732]	; (1f690 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x350>)
   1f3b4:	4602      	mov	r2, r0
   1f3b6:	4638      	mov	r0, r7
   1f3b8:	47a0      	blx	r4
   1f3ba:	e18e      	b.n	1f6da <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x39a>
                    params, data.scratch_tensor_index, activation_state,
   1f3bc:	9b04      	ldr	r3, [sp, #16]
   1f3be:	6919      	ldr	r1, [r3, #16]
  const int rank = params->rank;
   1f3c0:	6833      	ldr	r3, [r6, #0]
   1f3c2:	9309      	str	r3, [sp, #36]	; 0x24
  const int batch_size = input->dims->data[0];
   1f3c4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1f3c8:	685a      	ldr	r2, [r3, #4]
  const int input_size = input->dims->data[1];
   1f3ca:	689b      	ldr	r3, [r3, #8]
  const int batch_size = input->dims->data[0];
   1f3cc:	9204      	str	r2, [sp, #16]
  const int input_size = input->dims->data[1];
   1f3ce:	930a      	str	r3, [sp, #40]	; 0x28
  const int num_filters = weights_feature->dims->data[0];
   1f3d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1f3d4:	685b      	ldr	r3, [r3, #4]
   1f3d6:	9305      	str	r3, [sp, #20]
  const int num_units = num_filters / rank;
   1f3d8:	9a05      	ldr	r2, [sp, #20]
   1f3da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f3dc:	fb92 f3f3 	sdiv	r3, r2, r3
   1f3e0:	9306      	str	r3, [sp, #24]
  const int memory_size = weights_time->dims->data[1];
   1f3e2:	9b08      	ldr	r3, [sp, #32]
   1f3e4:	689b      	ldr	r3, [r3, #8]
   1f3e6:	689b      	ldr	r3, [r3, #8]
   1f3e8:	9307      	str	r3, [sp, #28]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1f3ea:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f3ee:	930b      	str	r3, [sp, #44]	; 0x2c
   1f3f0:	9b08      	ldr	r3, [sp, #32]
   1f3f2:	685b      	ldr	r3, [r3, #4]
   1f3f4:	930c      	str	r3, [sp, #48]	; 0x30
   1f3f6:	f1bb 0f00 	cmp.w	fp, #0
   1f3fa:	d001      	beq.n	1f400 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xc0>
   1f3fc:	f8db b004 	ldr.w	fp, [fp, #4]
   1f400:	f8d8 8004 	ldr.w	r8, [r8, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1f404:	b104      	cbz	r4, 1f408 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xc8>
   1f406:	6864      	ldr	r4, [r4, #4]
  TFLITE_DCHECK(context->GetScratchBuffer != nullptr);
   1f408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1f40a:	2b00      	cmp	r3, #0
   1f40c:	d0c3      	beq.n	1f396 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x56>
      context->GetScratchBuffer(context, scratch_tensor_index));
   1f40e:	4638      	mov	r0, r7
   1f410:	4798      	blx	r3
   1f412:	900d      	str	r0, [sp, #52]	; 0x34
   1f414:	f1ba 0f00 	cmp.w	sl, #0
   1f418:	d001      	beq.n	1f41e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xde>
   1f41a:	f8da a004 	ldr.w	sl, [sl, #4]
        state_ptr + batch_size * num_filters * memory_size;
   1f41e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
   1f422:	434b      	muls	r3, r1
   1f424:	9907      	ldr	r1, [sp, #28]
    const float* old_state_start = state_ptr + 1;
   1f426:	1d22      	adds	r2, r4, #4
        state_ptr + batch_size * num_filters * memory_size;
   1f428:	434b      	muls	r3, r1
    const float* old_state_end =
   1f42a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    while (old_state_start != old_state_end) {
   1f42e:	4293      	cmp	r3, r2
   1f430:	d004      	beq.n	1f43c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xfc>
      *new_state_start++ = *old_state_start++;
   1f432:	f852 1b04 	ldr.w	r1, [r2], #4
   1f436:	f842 1c08 	str.w	r1, [r2, #-8]
    while (old_state_start != old_state_end) {
   1f43a:	e7f8      	b.n	1f42e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0xee>
    float* result = &state_ptr[memory_size - 1];
   1f43c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1f43e:	9b07      	ldr	r3, [sp, #28]
   1f440:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1f444:	0080      	lsls	r0, r0, #2
   1f446:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f44a:	3b01      	subs	r3, #1
   1f44c:	900f      	str	r0, [sp, #60]	; 0x3c
   1f44e:	9805      	ldr	r0, [sp, #20]
   1f450:	0099      	lsls	r1, r3, #2
        result_in_batch += memory_size;
   1f452:	3104      	adds	r1, #4
   1f454:	ea20 77e0 	bic.w	r7, r0, r0, asr #31
   1f458:	fb01 f007 	mul.w	r0, r1, r7
   1f45c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f45e:	900e      	str	r0, [sp, #56]	; 0x38
   1f460:	0092      	lsls	r2, r2, #2
   1f462:	9210      	str	r2, [sp, #64]	; 0x40
    for (int i = 0; i < batch_size; ++i) {
   1f464:	2000      	movs	r0, #0
   1f466:	4642      	mov	r2, r8
    float* result = &state_ptr[memory_size - 1];
   1f468:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    for (int i = 0; i < batch_size; ++i) {
   1f46c:	9f04      	ldr	r7, [sp, #16]
   1f46e:	4287      	cmp	r7, r0
   1f470:	dd2a      	ble.n	1f4c8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x188>
        const float* vector_in_batch = vector + i * input_size;
   1f472:	469e      	mov	lr, r3
      for (int j = 0; j < num_filters; ++j) {
   1f474:	f04f 0c00 	mov.w	ip, #0
      const float* matrix_ptr = matrix;
   1f478:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
      for (int j = 0; j < num_filters; ++j) {
   1f47c:	9d05      	ldr	r5, [sp, #20]
   1f47e:	4565      	cmp	r5, ip
   1f480:	dd1c      	ble.n	1f4bc <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x17c>
        const float* vector_in_batch = vector + i * input_size;
   1f482:	4617      	mov	r7, r2
        for (int k = 0; k < input_size; ++k) {
   1f484:	f04f 0900 	mov.w	r9, #0
        float dot_prod = 0.0f;
   1f488:	eddf 7a82 	vldr	s15, [pc, #520]	; 1f694 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x354>
   1f48c:	f8cd 8020 	str.w	r8, [sp, #32]
        for (int k = 0; k < input_size; ++k) {
   1f490:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1f492:	454d      	cmp	r5, r9
   1f494:	dd0a      	ble.n	1f4ac <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x16c>
          dot_prod += *matrix_ptr++ * *vector_in_batch++;
   1f496:	9d08      	ldr	r5, [sp, #32]
   1f498:	ecb7 7a01 	vldmia	r7!, {s14}
   1f49c:	ecf5 6a01 	vldmia	r5!, {s13}
        for (int k = 0; k < input_size; ++k) {
   1f4a0:	f109 0901 	add.w	r9, r9, #1
          dot_prod += *matrix_ptr++ * *vector_in_batch++;
   1f4a4:	eee6 7a87 	vfma.f32	s15, s13, s14
   1f4a8:	9508      	str	r5, [sp, #32]
        for (int k = 0; k < input_size; ++k) {
   1f4aa:	e7f1      	b.n	1f490 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x150>
   1f4ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
        *result_in_batch = dot_prod;
   1f4ae:	edce 7a00 	vstr	s15, [lr]
   1f4b2:	44a8      	add	r8, r5
        result_in_batch += memory_size;
   1f4b4:	448e      	add	lr, r1
      for (int j = 0; j < num_filters; ++j) {
   1f4b6:	f10c 0c01 	add.w	ip, ip, #1
   1f4ba:	e7df      	b.n	1f47c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x13c>
   1f4bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    for (int i = 0; i < batch_size; ++i) {
   1f4be:	3001      	adds	r0, #1
   1f4c0:	442b      	add	r3, r5
   1f4c2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1f4c4:	442a      	add	r2, r5
   1f4c6:	e7d1      	b.n	1f46c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x12c>
  ApplyTimeWeightsBiasAndActivation(
   1f4c8:	980d      	ldr	r0, [sp, #52]	; 0x34
      bias_ptr, params->activation, state_ptr, scratch_ptr, output_ptr);
   1f4ca:	7933      	ldrb	r3, [r6, #4]
   1f4cc:	4601      	mov	r1, r0
  for (int b = 0; b < batch_size; ++b) {
   1f4ce:	2600      	movs	r6, #0
      *scratch_ptr_batch = 0.f;
   1f4d0:	ed9f 7a70 	vldr	s14, [pc, #448]	; 1f694 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x354>
      bias_ptr, params->activation, state_ptr, scratch_ptr, output_ptr);
   1f4d4:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batch_size; ++b) {
   1f4d6:	9b05      	ldr	r3, [sp, #20]
   1f4d8:	9a05      	ldr	r2, [sp, #20]
   1f4da:	009b      	lsls	r3, r3, #2
   1f4dc:	930a      	str	r3, [sp, #40]	; 0x28
   1f4de:	9b07      	ldr	r3, [sp, #28]
   1f4e0:	4353      	muls	r3, r2
   1f4e2:	009b      	lsls	r3, r3, #2
   1f4e4:	930d      	str	r3, [sp, #52]	; 0x34
   1f4e6:	9b07      	ldr	r3, [sp, #28]
   1f4e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f4ec:	009b      	lsls	r3, r3, #2
   1f4ee:	9a04      	ldr	r2, [sp, #16]
   1f4f0:	42b2      	cmp	r2, r6
   1f4f2:	dd2a      	ble.n	1f54a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x20a>
    const float* vector2_ptr = state_ptr + b * memory_size * num_filters;
   1f4f4:	46a4      	mov	ip, r4
   1f4f6:	460a      	mov	r2, r1
    for (int i = 0; i < num_filters; ++i) {
   1f4f8:	2700      	movs	r7, #0
    const float* vector1_ptr = weights_time_ptr;
   1f4fa:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    for (int i = 0; i < num_filters; ++i) {
   1f4fe:	9d05      	ldr	r5, [sp, #20]
   1f500:	42bd      	cmp	r5, r7
   1f502:	dd1c      	ble.n	1f53e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1fe>
      *scratch_ptr_batch = 0.f;
   1f504:	eca2 7a01 	vstmia	r2!, {s14}
   1f508:	46e1      	mov	r9, ip
      for (int j = 0; j < memory_size; ++j) {
   1f50a:	f04f 0800 	mov.w	r8, #0
      *scratch_ptr_batch = 0.f;
   1f50e:	f8cd e020 	str.w	lr, [sp, #32]
      for (int j = 0; j < memory_size; ++j) {
   1f512:	9d07      	ldr	r5, [sp, #28]
   1f514:	4545      	cmp	r5, r8
   1f516:	dd0e      	ble.n	1f536 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1f6>
        *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
   1f518:	9d08      	ldr	r5, [sp, #32]
   1f51a:	ecf9 6a01 	vldmia	r9!, {s13}
   1f51e:	ecb5 6a01 	vldmia	r5!, {s12}
   1f522:	ed52 7a01 	vldr	s15, [r2, #-4]
   1f526:	eee6 7a26 	vfma.f32	s15, s12, s13
   1f52a:	9508      	str	r5, [sp, #32]
   1f52c:	ed42 7a01 	vstr	s15, [r2, #-4]
      for (int j = 0; j < memory_size; ++j) {
   1f530:	f108 0801 	add.w	r8, r8, #1
   1f534:	e7ed      	b.n	1f512 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
   1f536:	449e      	add	lr, r3
   1f538:	449c      	add	ip, r3
    for (int i = 0; i < num_filters; ++i) {
   1f53a:	3701      	adds	r7, #1
   1f53c:	e7df      	b.n	1f4fe <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1be>
  for (int b = 0; b < batch_size; ++b) {
   1f53e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f540:	3601      	adds	r6, #1
   1f542:	4411      	add	r1, r2
   1f544:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f546:	4414      	add	r4, r2
   1f548:	e7d1      	b.n	1f4ee <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x1ae>
  if (bias_ptr) {
   1f54a:	9b06      	ldr	r3, [sp, #24]
   1f54c:	f1bb 0f00 	cmp.w	fp, #0
   1f550:	d011      	beq.n	1f576 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x236>
   1f552:	009e      	lsls	r6, r3, #2
    for (int i = 0; i < batch_size; ++i) {
   1f554:	2200      	movs	r2, #0
   1f556:	4653      	mov	r3, sl
   1f558:	9904      	ldr	r1, [sp, #16]
   1f55a:	4291      	cmp	r1, r2
   1f55c:	dd1a      	ble.n	1f594 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x254>
   1f55e:	461c      	mov	r4, r3
   1f560:	465d      	mov	r5, fp
      for (int j = 0; j < num_units; ++j) {
   1f562:	2100      	movs	r1, #0
   1f564:	9f06      	ldr	r7, [sp, #24]
   1f566:	428f      	cmp	r7, r1
   1f568:	dd11      	ble.n	1f58e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x24e>
        *output_data++ = *bias_data++;
   1f56a:	f855 7b04 	ldr.w	r7, [r5], #4
      for (int j = 0; j < num_units; ++j) {
   1f56e:	3101      	adds	r1, #1
        *output_data++ = *bias_data++;
   1f570:	f844 7b04 	str.w	r7, [r4], #4
      for (int j = 0; j < num_units; ++j) {
   1f574:	e7f6      	b.n	1f564 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x224>
    for (int i = 0; i < batch_size * num_units; ++i) {
   1f576:	9a04      	ldr	r2, [sp, #16]
      *output_data++ = 0.0f;
   1f578:	2100      	movs	r1, #0
    for (int i = 0; i < batch_size * num_units; ++i) {
   1f57a:	fb03 f402 	mul.w	r4, r3, r2
    float* output_data = output_ptr;
   1f57e:	4652      	mov	r2, sl
    for (int i = 0; i < batch_size * num_units; ++i) {
   1f580:	465b      	mov	r3, fp
   1f582:	429c      	cmp	r4, r3
   1f584:	dd06      	ble.n	1f594 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x254>
      *output_data++ = 0.0f;
   1f586:	f842 1b04 	str.w	r1, [r2], #4
    for (int i = 0; i < batch_size * num_units; ++i) {
   1f58a:	3301      	adds	r3, #1
   1f58c:	e7f9      	b.n	1f582 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x242>
    for (int i = 0; i < batch_size; ++i) {
   1f58e:	3201      	adds	r2, #1
   1f590:	4433      	add	r3, r6
   1f592:	e7e1      	b.n	1f558 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x218>
   1f594:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f596:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
    for (int i = 0; i < batch_size * num_units; ++i) {
   1f59a:	2300      	movs	r3, #0
   1f59c:	4619      	mov	r1, r3
   1f59e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
  for (int b = 0; b < batch_size; ++b) {
   1f5a2:	9a04      	ldr	r2, [sp, #16]
   1f5a4:	428a      	cmp	r2, r1
   1f5a6:	dc0f      	bgt.n	1f5c8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x288>
  for (int b = 0; b < batch_size; ++b) {
   1f5a8:	2600      	movs	r6, #0
    case kTfLiteActTanh:
      return std::tanh(a);
    case kTfLiteActSignBit:
      return std::signbit(a);
    case kTfLiteActSigmoid:
      return 1.0f / (1.0f + std::exp(-a));
   1f5aa:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
      if (__b < __a)
   1f5ae:	eeb1 9a08 	vmov.f32	s18, #24	; 0x40c00000  6.0
   1f5b2:	9b06      	ldr	r3, [sp, #24]
   1f5b4:	009c      	lsls	r4, r3, #2
   1f5b6:	9b04      	ldr	r3, [sp, #16]
   1f5b8:	42b3      	cmp	r3, r6
   1f5ba:	dc25      	bgt.n	1f608 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2c8>
      return kTfLiteOk;
   1f5bc:	2000      	movs	r0, #0
                         TfLiteTypeGetName(weights_feature->type));
      return kTfLiteError;
  }
  return kTfLiteOk;
}
   1f5be:	b017      	add	sp, #92	; 0x5c
   1f5c0:	ecbd 8b04 	vpop	{d8-d9}
   1f5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    float* scratch_ptr_batch = scratch_ptr + b * num_filters;
   1f5c8:	4606      	mov	r6, r0
    for (int i = 0; i < num_units; ++i) {
   1f5ca:	2500      	movs	r5, #0
   1f5cc:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
   1f5d0:	9f06      	ldr	r7, [sp, #24]
   1f5d2:	42af      	cmp	r7, r5
   1f5d4:	dd12      	ble.n	1f5fc <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2bc>
   1f5d6:	46b4      	mov	ip, r6
      for (int j = 0; j < rank; j++) {
   1f5d8:	2700      	movs	r7, #0
   1f5da:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1f5dc:	42bc      	cmp	r4, r7
   1f5de:	dd09      	ble.n	1f5f4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2b4>
        output_ptr_batch[i] += *scratch_ptr_batch++;
   1f5e0:	edd2 7a00 	vldr	s15, [r2]
   1f5e4:	ecbc 7a01 	vldmia	ip!, {s14}
   1f5e8:	ee77 7a87 	vadd.f32	s15, s15, s14
      for (int j = 0; j < rank; j++) {
   1f5ec:	3701      	adds	r7, #1
        output_ptr_batch[i] += *scratch_ptr_batch++;
   1f5ee:	edc2 7a00 	vstr	s15, [r2]
      for (int j = 0; j < rank; j++) {
   1f5f2:	e7f2      	b.n	1f5da <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x29a>
   1f5f4:	4476      	add	r6, lr
    for (int i = 0; i < num_units; ++i) {
   1f5f6:	3501      	adds	r5, #1
   1f5f8:	3204      	adds	r2, #4
   1f5fa:	e7e9      	b.n	1f5d0 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x290>
  for (int b = 0; b < batch_size; ++b) {
   1f5fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f5fe:	3101      	adds	r1, #1
   1f600:	4410      	add	r0, r2
   1f602:	9a06      	ldr	r2, [sp, #24]
   1f604:	4413      	add	r3, r2
   1f606:	e7cc      	b.n	1f5a2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x262>
    float* output_ptr_batch = output_ptr + b * num_units;
   1f608:	46d0      	mov	r8, sl
    for (int i = 0; i < num_units; ++i) {
   1f60a:	2700      	movs	r7, #0
      if (__a < __b)
   1f60c:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
   1f610:	9b06      	ldr	r3, [sp, #24]
   1f612:	42bb      	cmp	r3, r7
   1f614:	dd4d      	ble.n	1f6b2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x372>
      *output_ptr_batch = ActivationValFloat(activation, *output_ptr_batch);
   1f616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f618:	edd8 7a00 	vldr	s15, [r8]
  switch (act) {
   1f61c:	2b06      	cmp	r3, #6
   1f61e:	d821      	bhi.n	1f664 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x324>
   1f620:	e8df f003 	tbb	[pc, r3]
   1f624:	16041b0f 	.word	0x16041b0f
   1f628:	2d26      	.short	0x2d26
   1f62a:	3a          	.byte	0x3a
   1f62b:	00          	.byte	0x00
      if (__b < __a)
   1f62c:	eef4 7ac8 	vcmpe.f32	s15, s16
   1f630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f634:	dc09      	bgt.n	1f64a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x30a>
      return __a;
   1f636:	eef4 7ae8 	vcmpe.f32	s15, s17
   1f63a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f63e:	fe77 7aa8 	vselgt.f32	s15, s15, s17
   1f642:	ece8 7a01 	vstmia	r8!, {s15}
    for (int i = 0; i < num_units; ++i) {
   1f646:	3701      	adds	r7, #1
   1f648:	e7e2      	b.n	1f610 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x2d0>
	return __b;
   1f64a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1f64e:	e7f8      	b.n	1f642 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x302>
      if (__b < __a)
   1f650:	eef4 7ac9 	vcmpe.f32	s15, s18
   1f654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f658:	dc07      	bgt.n	1f66a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x32a>
      if (__a < __b)
   1f65a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   1f65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1f662:	dcee      	bgt.n	1f642 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x302>
  }
  return 0.0f;  // To indicate an unsupported activation (i.e. when a new fused
   1f664:	eddf 7a0b 	vldr	s15, [pc, #44]	; 1f694 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x354>
   1f668:	e7eb      	b.n	1f642 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x302>
	return __b;
   1f66a:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
   1f66e:	e7e8      	b.n	1f642 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x302>
  using ::tanh;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  tanh(float __x)
  { return __builtin_tanhf(__x); }
   1f670:	ee17 0a90 	vmov	r0, s15
   1f674:	f003 fbb6 	bl	22de4 <tanhf>
   1f678:	ee07 0a90 	vmov	s15, r0
      return std::tanh(a);
   1f67c:	e7e1      	b.n	1f642 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x302>

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  // Note: middle-end/36757 is fixed, __builtin_signbit is type-generic.
  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }
   1f67e:	ee17 3a90 	vmov	r3, s15
      return std::signbit(a);
   1f682:	0fdb      	lsrs	r3, r3, #31
   1f684:	ee07 3a90 	vmov	s15, r3
   1f688:	eef8 7a67 	vcvt.f32.u32	s15, s15
   1f68c:	e7d9      	b.n	1f642 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x302>
   1f68e:	bf00      	nop
   1f690:	000357c3 	.word	0x000357c3
   1f694:	00000000 	.word	0x00000000
  { return __builtin_expf(__x); }
   1f698:	eef1 7a67 	vneg.f32	s15, s15
   1f69c:	ee17 0a90 	vmov	r0, s15
   1f6a0:	f003 fc3e 	bl	22f20 <expf>
      return 1.0f / (1.0f + std::exp(-a));
   1f6a4:	ee07 0a90 	vmov	s15, r0
   1f6a8:	ee37 7a88 	vadd.f32	s14, s15, s16
   1f6ac:	eec8 7a07 	vdiv.f32	s15, s16, s14
   1f6b0:	e7c7      	b.n	1f642 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x302>
  for (int b = 0; b < batch_size; ++b) {
   1f6b2:	3601      	adds	r6, #1
   1f6b4:	44a2      	add	sl, r4
   1f6b6:	e77e      	b.n	1f5b6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x276>
      TF_LITE_ENSURE_EQ(context, params->activation, kTfLiteActRelu);
   1f6b8:	7933      	ldrb	r3, [r6, #4]
   1f6ba:	2b01      	cmp	r3, #1
   1f6bc:	d00f      	beq.n	1f6de <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x39e>
   1f6be:	2401      	movs	r4, #1
   1f6c0:	e9cd 3402 	strd	r3, r4, [sp, #8]
   1f6c4:	4b9f      	ldr	r3, [pc, #636]	; (1f944 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x604>)
   1f6c6:	4638      	mov	r0, r7
   1f6c8:	9301      	str	r3, [sp, #4]
   1f6ca:	4b9f      	ldr	r3, [pc, #636]	; (1f948 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x608>)
   1f6cc:	4a9f      	ldr	r2, [pc, #636]	; (1f94c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x60c>)
   1f6ce:	9300      	str	r3, [sp, #0]
   1f6d0:	697d      	ldr	r5, [r7, #20]
   1f6d2:	f240 13ff 	movw	r3, #511	; 0x1ff
   1f6d6:	499e      	ldr	r1, [pc, #632]	; (1f950 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x610>)
   1f6d8:	47a8      	blx	r5
      return kTfLiteError;
   1f6da:	2001      	movs	r0, #1
   1f6dc:	e76f      	b.n	1f5be <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x27e>
                      input->params.zero_point, output->params.zero_point);
   1f6de:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1f6e2:	930f      	str	r3, [sp, #60]	; 0x3c
      EvalIntegerSVDF(context, node, input, weights_feature, weights_time, bias,
   1f6e4:	f8da 3010 	ldr.w	r3, [sl, #16]
   1f6e8:	9310      	str	r3, [sp, #64]	; 0x40
   1f6ea:	6833      	ldr	r3, [r6, #0]
   1f6ec:	930a      	str	r3, [sp, #40]	; 0x28
  const int n_batch = input_tensor->dims->data[0];
   1f6ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1f6f2:	685a      	ldr	r2, [r3, #4]
  const int n_input = input_tensor->dims->data[1];
   1f6f4:	689b      	ldr	r3, [r3, #8]
  const int n_batch = input_tensor->dims->data[0];
   1f6f6:	9205      	str	r2, [sp, #20]
  const int n_input = input_tensor->dims->data[1];
   1f6f8:	930b      	str	r3, [sp, #44]	; 0x2c
  const int n_filter = weights_feature_tensor->dims->data[0];
   1f6fa:	f8d9 3008 	ldr.w	r3, [r9, #8]
   1f6fe:	685e      	ldr	r6, [r3, #4]
  const int n_unit = n_filter / n_rank;
   1f700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f702:	fb96 f3f3 	sdiv	r3, r6, r3
   1f706:	9306      	str	r3, [sp, #24]
  const int n_memory = weights_time_tensor->dims->data[1];
   1f708:	9b08      	ldr	r3, [sp, #32]
   1f70a:	689b      	ldr	r3, [r3, #8]
   1f70c:	689b      	ldr	r3, [r3, #8]
   1f70e:	9307      	str	r3, [sp, #28]
  TFLITE_DCHECK(context->GetScratchBuffer != nullptr);
   1f710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1f712:	2b00      	cmp	r3, #0
   1f714:	f43f ae3f 	beq.w	1f396 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x56>
      context->GetScratchBuffer(context, data.scratch_tensor_index));
   1f718:	9a04      	ldr	r2, [sp, #16]
   1f71a:	4638      	mov	r0, r7
   1f71c:	6911      	ldr	r1, [r2, #16]
   1f71e:	4798      	blx	r3
      context->GetScratchBuffer(context, data.scratch_output_tensor_index));
   1f720:	9a04      	ldr	r2, [sp, #16]
      context->GetScratchBuffer(context, data.scratch_tensor_index));
   1f722:	9011      	str	r0, [sp, #68]	; 0x44
      context->GetScratchBuffer(context, data.scratch_output_tensor_index));
   1f724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1f726:	4638      	mov	r0, r7
   1f728:	6951      	ldr	r1, [r2, #20]
   1f72a:	4798      	blx	r3
   1f72c:	9009      	str	r0, [sp, #36]	; 0x24
   1f72e:	b104      	cbz	r4, 1f732 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x3f2>
   1f730:	6864      	ldr	r4, [r4, #4]
    const int16_t* old_state_end = state_ptr + n_batch * n_filter * n_memory;
   1f732:	9b05      	ldr	r3, [sp, #20]
   1f734:	9907      	ldr	r1, [sp, #28]
   1f736:	4373      	muls	r3, r6
   1f738:	434b      	muls	r3, r1
    const int16_t* old_state_start = state_ptr + 1;
   1f73a:	1ca2      	adds	r2, r4, #2
    const int16_t* old_state_end = state_ptr + n_batch * n_filter * n_memory;
   1f73c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    while (old_state_start != old_state_end) {
   1f740:	4293      	cmp	r3, r2
   1f742:	d004      	beq.n	1f74e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x40e>
      *new_state_start++ = *old_state_start++;
   1f744:	f832 1b02 	ldrh.w	r1, [r2], #2
   1f748:	f822 1c04 	strh.w	r1, [r2, #-4]
    while (old_state_start != old_state_end) {
   1f74c:	e7f8      	b.n	1f740 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x400>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
   1f74e:	f8d8 7004 	ldr.w	r7, [r8, #4]
    for (int b = 0; b < n_batch; b++) {
   1f752:	f04f 0800 	mov.w	r8, #0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1f756:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1f75a:	9312      	str	r3, [sp, #72]	; 0x48
    int16_t* result_in_batch = state + (n_memory - 1);
   1f75c:	9b07      	ldr	r3, [sp, #28]
   1f75e:	f103 4500 	add.w	r5, r3, #2147483648	; 0x80000000
   1f762:	3d01      	subs	r5, #1
   1f764:	006b      	lsls	r3, r5, #1
        result_in_batch += n_memory;
   1f766:	3302      	adds	r3, #2
    int16_t* result_in_batch = state + (n_memory - 1);
   1f768:	eb04 0245 	add.w	r2, r4, r5, lsl #1
        result_in_batch += n_memory;
   1f76c:	930e      	str	r3, [sp, #56]	; 0x38
    int16_t* result_in_batch = state + (n_memory - 1);
   1f76e:	920c      	str	r2, [sp, #48]	; 0x30
    for (int b = 0; b < n_batch; b++) {
   1f770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1f772:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
   1f776:	4353      	muls	r3, r2
   1f778:	9313      	str	r3, [sp, #76]	; 0x4c
   1f77a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f77c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1f780:	9314      	str	r3, [sp, #80]	; 0x50
   1f782:	9b05      	ldr	r3, [sp, #20]
   1f784:	4543      	cmp	r3, r8
   1f786:	dd15      	ble.n	1f7b4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x474>
      for (int r = 0; r < n_filter; r++) {
   1f788:	f04f 0900 	mov.w	r9, #0
      const int8_t* matrix_ptr = weight_feature;
   1f78c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1f78e:	930d      	str	r3, [sp, #52]	; 0x34
        const int8_t* vector_in_batch = input + b * n_input;
   1f790:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (int r = 0; r < n_filter; r++) {
   1f792:	454e      	cmp	r6, r9
   1f794:	dd55      	ble.n	1f842 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x502>
        int32_t dot_prod = 0;
   1f796:	2000      	movs	r0, #0
        for (int c = 0; c < n_input; c++) {
   1f798:	4602      	mov	r2, r0
   1f79a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1f79c:	4291      	cmp	r1, r2
   1f79e:	dd36      	ble.n	1f80e <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x4ce>
          dot_prod += *matrix_ptr++ * (*vector_in_batch++ - input_zp);
   1f7a0:	56b9      	ldrsb	r1, [r7, r2]
   1f7a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1f7a4:	1b49      	subs	r1, r1, r5
   1f7a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1f7a8:	f915 c002 	ldrsb.w	ip, [r5, r2]
        for (int c = 0; c < n_input; c++) {
   1f7ac:	3201      	adds	r2, #1
          dot_prod += *matrix_ptr++ * (*vector_in_batch++ - input_zp);
   1f7ae:	fb0c 0001 	mla	r0, ip, r1, r0
        for (int c = 0; c < n_input; c++) {
   1f7b2:	e7f2      	b.n	1f79a <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x45a>
   1f7b4:	00b3      	lsls	r3, r6, #2
   1f7b6:	930d      	str	r3, [sp, #52]	; 0x34
   1f7b8:	9b07      	ldr	r3, [sp, #28]
   1f7ba:	9811      	ldr	r0, [sp, #68]	; 0x44
   1f7bc:	4373      	muls	r3, r6
   1f7be:	005b      	lsls	r3, r3, #1
   1f7c0:	930e      	str	r3, [sp, #56]	; 0x38
   1f7c2:	9b07      	ldr	r3, [sp, #28]
    for (int b = 0; b < n_batch; b++) {
   1f7c4:	4684      	mov	ip, r0
   1f7c6:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   1f7ca:	004b      	lsls	r3, r1, #1
   1f7cc:	930c      	str	r3, [sp, #48]	; 0x30
    for (int b = 0; b < n_batch; ++b) {
   1f7ce:	2300      	movs	r3, #0
   1f7d0:	930b      	str	r3, [sp, #44]	; 0x2c
   1f7d2:	9b05      	ldr	r3, [sp, #20]
   1f7d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1f7d6:	4293      	cmp	r3, r2
   1f7d8:	dd4a      	ble.n	1f870 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x530>
          b * n_memory * n_filter;
   1f7da:	46a0      	mov	r8, r4
      for (int i = 0; i < n_filter; i++) {
   1f7dc:	f04f 0e00 	mov.w	lr, #0
   1f7e0:	9b08      	ldr	r3, [sp, #32]
   1f7e2:	f1ac 0504 	sub.w	r5, ip, #4
   1f7e6:	f8d3 9004 	ldr.w	r9, [r3, #4]
   1f7ea:	4576      	cmp	r6, lr
   1f7ec:	dd38      	ble.n	1f860 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x520>
        *scratch_ptr_batch = 0;
   1f7ee:	2300      	movs	r3, #0
   1f7f0:	f845 3f04 	str.w	r3, [r5, #4]!
        for (int j = 0; j < n_memory; j++) {
   1f7f4:	9f07      	ldr	r7, [sp, #28]
   1f7f6:	429f      	cmp	r7, r3
   1f7f8:	dd2c      	ble.n	1f854 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x514>
          *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
   1f7fa:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
   1f7fe:	f838 1013 	ldrh.w	r1, [r8, r3, lsl #1]
   1f802:	682f      	ldr	r7, [r5, #0]
        for (int j = 0; j < n_memory; j++) {
   1f804:	3301      	adds	r3, #1
          *scratch_ptr_batch += *vector1_ptr++ * *vector2_ptr++;
   1f806:	fb12 7701 	smlabb	r7, r2, r1, r7
   1f80a:	602f      	str	r7, [r5, #0]
        for (int j = 0; j < n_memory; j++) {
   1f80c:	e7f2      	b.n	1f7f4 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x4b4>
   1f80e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1f810:	9315      	str	r3, [sp, #84]	; 0x54
   1f812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      for (int r = 0; r < n_filter; r++) {
   1f814:	f109 0901 	add.w	r9, r9, #1
   1f818:	4413      	add	r3, r2
   1f81a:	930d      	str	r3, [sp, #52]	; 0x34
        dot_prod = MultiplyByQuantizedMultiplier(
   1f81c:	9b04      	ldr	r3, [sp, #16]
   1f81e:	689a      	ldr	r2, [r3, #8]
   1f820:	6819      	ldr	r1, [r3, #0]
   1f822:	f7f9 fda9 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
        *result_in_batch = dot_prod;
   1f826:	f647 73ff 	movw	r3, #32767	; 0x7fff
   1f82a:	4298      	cmp	r0, r3
   1f82c:	bfa8      	it	ge
   1f82e:	4618      	movge	r0, r3
   1f830:	4b48      	ldr	r3, [pc, #288]	; (1f954 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x614>)
        result_in_batch += n_memory;
   1f832:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        *result_in_batch = dot_prod;
   1f834:	4298      	cmp	r0, r3
   1f836:	bfb8      	it	lt
   1f838:	4618      	movlt	r0, r3
   1f83a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1f83c:	8018      	strh	r0, [r3, #0]
        result_in_batch += n_memory;
   1f83e:	4413      	add	r3, r2
      for (int r = 0; r < n_filter; r++) {
   1f840:	e7a7      	b.n	1f792 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x452>
   1f842:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1f844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    for (int b = 0; b < n_batch; b++) {
   1f846:	f108 0801 	add.w	r8, r8, #1
   1f84a:	441a      	add	r2, r3
   1f84c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f84e:	920c      	str	r2, [sp, #48]	; 0x30
   1f850:	441f      	add	r7, r3
   1f852:	e796      	b.n	1f782 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x442>
   1f854:	9b0c      	ldr	r3, [sp, #48]	; 0x30
      for (int i = 0; i < n_filter; i++) {
   1f856:	f10e 0e01 	add.w	lr, lr, #1
   1f85a:	4499      	add	r9, r3
   1f85c:	4498      	add	r8, r3
   1f85e:	e7c4      	b.n	1f7ea <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x4aa>
    for (int b = 0; b < n_batch; ++b) {
   1f860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1f862:	3301      	adds	r3, #1
   1f864:	930b      	str	r3, [sp, #44]	; 0x2c
   1f866:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1f868:	449c      	add	ip, r3
   1f86a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f86c:	441c      	add	r4, r3
   1f86e:	e7b0      	b.n	1f7d2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x492>
    if (bias_tensor) {
   1f870:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   1f874:	fb03 f402 	mul.w	r4, r3, r2
   1f878:	f1bb 0f00 	cmp.w	fp, #0
   1f87c:	d014      	beq.n	1f8a8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x568>
      for (int i = 0; i < n_batch; ++i) {
   1f87e:	2100      	movs	r1, #0
   1f880:	f8db 6004 	ldr.w	r6, [fp, #4]
   1f884:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f886:	009d      	lsls	r5, r3, #2
   1f888:	9b05      	ldr	r3, [sp, #20]
   1f88a:	428b      	cmp	r3, r1
   1f88c:	dd15      	ble.n	1f8ba <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x57a>
        for (int j = 0; j < n_unit; ++j) {
   1f88e:	2300      	movs	r3, #0
   1f890:	9f06      	ldr	r7, [sp, #24]
   1f892:	429f      	cmp	r7, r3
   1f894:	dd05      	ble.n	1f8a2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x562>
          *output_ptr++ = *bias_ptr++;
   1f896:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
   1f89a:	f842 7023 	str.w	r7, [r2, r3, lsl #2]
        for (int j = 0; j < n_unit; ++j) {
   1f89e:	3301      	adds	r3, #1
   1f8a0:	e7f6      	b.n	1f890 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x550>
      for (int i = 0; i < n_batch; ++i) {
   1f8a2:	3101      	adds	r1, #1
   1f8a4:	442a      	add	r2, r5
   1f8a6:	e7ef      	b.n	1f888 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x548>
      for (int i = 0; i < n_batch * n_unit; ++i) {
   1f8a8:	465b      	mov	r3, fp
        *output_ptr++ = 0;
   1f8aa:	465a      	mov	r2, fp
      for (int i = 0; i < n_batch * n_unit; ++i) {
   1f8ac:	429c      	cmp	r4, r3
   1f8ae:	dd04      	ble.n	1f8ba <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x57a>
        *output_ptr++ = 0;
   1f8b0:	9909      	ldr	r1, [sp, #36]	; 0x24
   1f8b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for (int i = 0; i < n_batch * n_unit; ++i) {
   1f8b6:	3301      	adds	r3, #1
   1f8b8:	e7f8      	b.n	1f8ac <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x56c>
   1f8ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f8bc:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
   1f8c0:	2300      	movs	r3, #0
   1f8c2:	461f      	mov	r7, r3
   1f8c4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    for (int b = 0; b < n_batch; ++b) {
   1f8c8:	9a05      	ldr	r2, [sp, #20]
   1f8ca:	42ba      	cmp	r2, r7
   1f8cc:	dd1e      	ble.n	1f90c <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5cc>
      int32_t* scratch_ptr_batch = scratch_tensor + b * n_filter;
   1f8ce:	4680      	mov	r8, r0
      for (int i = 0; i < n_unit; ++i) {
   1f8d0:	f04f 0e00 	mov.w	lr, #0
   1f8d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1f8d6:	eb02 0583 	add.w	r5, r2, r3, lsl #2
   1f8da:	9a06      	ldr	r2, [sp, #24]
   1f8dc:	4572      	cmp	r2, lr
   1f8de:	dd0f      	ble.n	1f900 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5c0>
        for (int j = 0; j < n_rank; ++j) {
   1f8e0:	2600      	movs	r6, #0
   1f8e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f8e4:	42b2      	cmp	r2, r6
   1f8e6:	dd06      	ble.n	1f8f6 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5b6>
          output_temp_ptr[i] += *scratch_ptr_batch++;
   1f8e8:	f858 1026 	ldr.w	r1, [r8, r6, lsl #2]
   1f8ec:	682a      	ldr	r2, [r5, #0]
        for (int j = 0; j < n_rank; ++j) {
   1f8ee:	3601      	adds	r6, #1
          output_temp_ptr[i] += *scratch_ptr_batch++;
   1f8f0:	440a      	add	r2, r1
   1f8f2:	602a      	str	r2, [r5, #0]
        for (int j = 0; j < n_rank; ++j) {
   1f8f4:	e7f5      	b.n	1f8e2 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5a2>
   1f8f6:	44e0      	add	r8, ip
      for (int i = 0; i < n_unit; ++i) {
   1f8f8:	f10e 0e01 	add.w	lr, lr, #1
   1f8fc:	3504      	adds	r5, #4
   1f8fe:	e7ec      	b.n	1f8da <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x59a>
    for (int b = 0; b < n_batch; ++b) {
   1f900:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1f902:	3701      	adds	r7, #1
   1f904:	4410      	add	r0, r2
   1f906:	9a06      	ldr	r2, [sp, #24]
   1f908:	4413      	add	r3, r2
   1f90a:	e7dd      	b.n	1f8c8 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x588>
    for (int i = 0; i < n_batch * n_unit; ++i) {
   1f90c:	2500      	movs	r5, #0
      GetTensorData<int8_t>(output_tensor)[i] = static_cast<int8_t>(x4);
   1f90e:	f06f 067f 	mvn.w	r6, #127	; 0x7f
    for (int i = 0; i < n_batch * n_unit; ++i) {
   1f912:	42ac      	cmp	r4, r5
   1f914:	f77f ae52 	ble.w	1f5bc <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x27c>
      int32_t x2 = MultiplyByQuantizedMultiplier(x1, data.effective_scale_2_a,
   1f918:	9b04      	ldr	r3, [sp, #16]
   1f91a:	68da      	ldr	r2, [r3, #12]
   1f91c:	6859      	ldr	r1, [r3, #4]
   1f91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1f920:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   1f924:	f7f9 fd28 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      int32_t x3 = x2 + output_zp;
   1f928:	9a10      	ldr	r2, [sp, #64]	; 0x40
      GetTensorData<int8_t>(output_tensor)[i] = static_cast<int8_t>(x4);
   1f92a:	f8da 3004 	ldr.w	r3, [sl, #4]
      int32_t x3 = x2 + output_zp;
   1f92e:	4410      	add	r0, r2
      GetTensorData<int8_t>(output_tensor)[i] = static_cast<int8_t>(x4);
   1f930:	287f      	cmp	r0, #127	; 0x7f
   1f932:	bfa8      	it	ge
   1f934:	207f      	movge	r0, #127	; 0x7f
   1f936:	42b0      	cmp	r0, r6
   1f938:	bfb8      	it	lt
   1f93a:	4630      	movlt	r0, r6
   1f93c:	5558      	strb	r0, [r3, r5]
    for (int i = 0; i < n_batch * n_unit; ++i) {
   1f93e:	3501      	adds	r5, #1
   1f940:	e7e7      	b.n	1f912 <_ZN6tflite3ops5micro4svdf4EvalEP13TfLiteContextP10TfLiteNode+0x5d2>
   1f942:	bf00      	nop
   1f944:	000360c6 	.word	0x000360c6
   1f948:	00034bf9 	.word	0x00034bf9
   1f94c:	00035ea0 	.word	0x00035ea0
   1f950:	00034aec 	.word	0x00034aec
   1f954:	ffff8000 	.word	0xffff8000

0001f958 <_ZN6tflite3ops5micro13Register_SVDFEv>:

}  // namespace svdf

TfLiteRegistration Register_SVDF() {
   1f958:	b570      	push	{r4, r5, r6, lr}
          /*prepare=*/svdf::Prepare,
          /*invoke=*/svdf::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1f95a:	4604      	mov	r4, r0
TfLiteRegistration Register_SVDF() {
   1f95c:	4606      	mov	r6, r0
          /*version=*/0};
   1f95e:	4d04      	ldr	r5, [pc, #16]	; (1f970 <_ZN6tflite3ops5micro13Register_SVDFEv+0x18>)
   1f960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f964:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1f968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
   1f96c:	4630      	mov	r0, r6
   1f96e:	bd70      	pop	{r4, r5, r6, pc}
   1f970:	00031c28 	.word	0x00031c28

0001f974 <_ZN6tflite3ops5micro13Register_TANHEv>:
  }
}

}  // namespace activations

TfLiteRegistration Register_TANH() {
   1f974:	b510      	push	{r4, lr}
   1f976:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/activations::TanhEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   1f978:	2220      	movs	r2, #32
   1f97a:	2100      	movs	r1, #0
   1f97c:	f011 fa9b 	bl	30eb6 <memset>
   1f980:	4b01      	ldr	r3, [pc, #4]	; (1f988 <_ZN6tflite3ops5micro13Register_TANHEv+0x14>)
}
   1f982:	4620      	mov	r0, r4
          /*version=*/0};
   1f984:	60e3      	str	r3, [r4, #12]
}
   1f986:	bd10      	pop	{r4, pc}
   1f988:	0001fd55 	.word	0x0001fd55

0001f98c <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>:
  std::int64_t sum = a64 + b64;
   1f98c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1f990:	2300      	movs	r3, #0
   1f992:	1812      	adds	r2, r2, r0
   1f994:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
  std::int64_t sign = sum >= 0 ? 1 : -1;
   1f998:	1c59      	adds	r1, r3, #1
   1f99a:	bf05      	ittet	eq
   1f99c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1f9a0:	4611      	moveq	r1, r2
   1f9a2:	2101      	movne	r1, #1
   1f9a4:	4618      	moveq	r0, r3
   1f9a6:	bf18      	it	ne
   1f9a8:	2000      	movne	r0, #0
FixedPoint<tRawType, 0> one_minus_x_over_one_plus_x_for_x_in_0_1(
   1f9aa:	b570      	push	{r4, r5, r6, lr}
  return static_cast<std::int32_t>((sum + sign) / 2);
   1f9ac:	1854      	adds	r4, r2, r1
   1f9ae:	eb43 0500 	adc.w	r5, r3, r0
   1f9b2:	0feb      	lsrs	r3, r5, #31
   1f9b4:	18e4      	adds	r4, r4, r3
   1f9b6:	ea4f 0354 	mov.w	r3, r4, lsr #1
   1f9ba:	f145 0500 	adc.w	r5, r5, #0
   1f9be:	ea43 75c5 	orr.w	r5, r3, r5, lsl #31
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1f9c2:	4628      	mov	r0, r5
   1f9c4:	490c      	ldr	r1, [pc, #48]	; (1f9f8 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x6c>)
   1f9c6:	f7fb fc39 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return a + b;
   1f9ca:	2603      	movs	r6, #3
   1f9cc:	f100 345a 	add.w	r4, r0, #1515870810	; 0x5a5a5a5a
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1f9d0:	4621      	mov	r1, r4
   1f9d2:	4628      	mov	r0, r5
   1f9d4:	f7fb fc32 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1f9d8:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   1f9dc:	4620      	mov	r0, r4
   1f9de:	f7fb fc2d 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
   1f9e2:	f010 fa35 	bl	2fe50 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi>
  for (int i = 0; i < 3; i++) {
   1f9e6:	3e01      	subs	r6, #1
  return a + b;
   1f9e8:	4404      	add	r4, r0
  for (int i = 0; i < 3; i++) {
   1f9ea:	d1f1      	bne.n	1f9d0 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_+0x44>
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
   1f9ec:	f104 4060 	add.w	r0, r4, #3758096384	; 0xe0000000
   1f9f0:	f010 fa2e 	bl	2fe50 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi>
}
   1f9f4:	bd70      	pop	{r4, r5, r6, pc}
   1f9f6:	bf00      	nop
   1f9f8:	c3c3c3c4 	.word	0xc3c3c3c4

0001f9fc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIsEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
   1f9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fa00:	4604      	mov	r4, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
   1fa02:	4825      	ldr	r0, [pc, #148]	; (1fa98 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIsEENS_10FixedPointIT_Li0EEES3_+0x9c>)
   1fa04:	f010 fa71 	bl	2feea <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
   1fa08:	4605      	mov	r5, r0
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   1fa0a:	4824      	ldr	r0, [pc, #144]	; (1fa9c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIsEENS_10FixedPointIT_Li0EEES3_+0xa0>)
   1fa0c:	f010 fa6d 	bl	2feea <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
  return a + b;
   1fa10:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
   1fa14:	b224      	sxth	r4, r4
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
   1fa16:	4607      	mov	r7, r0
  F x2 = x * x;
   1fa18:	4621      	mov	r1, r4
   1fa1a:	4620      	mov	r0, r4
   1fa1c:	f010 fa6b 	bl	2fef6 <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x3 = x2 * x;
   1fa20:	4621      	mov	r1, r4
  F x2 = x * x;
   1fa22:	4606      	mov	r6, r0
  F x3 = x2 * x;
   1fa24:	f010 fa67 	bl	2fef6 <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  F x4 = x2 * x2;
   1fa28:	4631      	mov	r1, r6
  F x3 = x2 * x;
   1fa2a:	4680      	mov	r8, r0
  F x4 = x2 * x2;
   1fa2c:	4630      	mov	r0, r6
   1fa2e:	f010 fa62 	bl	2fef6 <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
   1fa32:	4603      	mov	r3, r0
  return a + b;
   1fa34:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  return a ? BitNot(zero) : zero;
   1fa38:	bf14      	ite	ne
   1fa3a:	2002      	movne	r0, #2
   1fa3c:	2001      	moveq	r0, #1
  return a >> offset;
   1fa3e:	f343 028d 	sbfx	r2, r3, #2, #14
  return a ? BitNot(zero) : zero;
   1fa42:	f003 0c03 	and.w	ip, r3, #3
  return a + b;
   1fa46:	4442      	add	r2, r8
      SaturatingRoundingMultiplyByPOT<-1>(
   1fa48:	4584      	cmp	ip, r0
   1fa4a:	bfd4      	ite	le
   1fa4c:	4610      	movle	r0, r2
   1fa4e:	1c50      	addgt	r0, r2, #1
   1fa50:	4639      	mov	r1, r7
   1fa52:	f010 fa50 	bl	2fef6 <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a + b;
   1fa56:	1983      	adds	r3, r0, r6
  return a ? BitNot(zero) : zero;
   1fa58:	f003 0101 	and.w	r1, r3, #1
   1fa5c:	f3c3 32c0 	ubfx	r2, r3, #15, #1
   1fa60:	4291      	cmp	r1, r2
   1fa62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fa66:	bfd8      	it	le
   1fa68:	2100      	movle	r1, #0
  return a >> offset;
   1fa6a:	f343 034e 	sbfx	r3, r3, #1, #15
  return a + b;
   1fa6e:	4423      	add	r3, r4
  return a & b;
   1fa70:	f001 0101 	and.w	r1, r1, #1
  return AddSaturatingIf16Bit(
   1fa74:	4628      	mov	r0, r5
   1fa76:	4419      	add	r1, r3
   1fa78:	f010 fa3d 	bl	2fef6 <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  std::int32_t sum = a32 + b32;
   1fa7c:	fa05 f080 	sxtah	r0, r5, r0
      if (__a < __b)
   1fa80:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
   1fa84:	dd06      	ble.n	1fa94 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIsEENS_10FixedPointIT_Li0EEES3_+0x98>
      return __a;
   1fa86:	f647 73ff 	movw	r3, #32767	; 0x7fff
   1fa8a:	4298      	cmp	r0, r3
   1fa8c:	bfa8      	it	ge
   1fa8e:	4618      	movge	r0, r3
}
   1fa90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return __a;
   1fa94:	4802      	ldr	r0, [pc, #8]	; (1faa0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIsEENS_10FixedPointIT_Li0EEES3_+0xa4>)
   1fa96:	e7fb      	b.n	1fa90 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIsEENS_10FixedPointIT_Li0EEES3_+0x94>
   1fa98:	70f5a894 	.word	0x70f5a894
   1fa9c:	2aaaaaab 	.word	0x2aaaaaab
   1faa0:	ffff8000 	.word	0xffff8000

0001faa4 <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
   1faa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1faa8:	b204      	sxth	r4, r0
  return a - b;
   1faaa:	ea6f 50c0 	mvn.w	r0, r0, lsl #23
   1faae:	ea6f 50d0 	mvn.w	r0, r0, lsr #23
   1fab2:	b205      	sxth	r5, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
   1fab4:	0100      	lsls	r0, r0, #4
   1fab6:	f7ff ffa1 	bl	1f9fc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIsEENS_10FixedPointIT_Li0EEES3_>
   1faba:	4607      	mov	r7, r0
   1fabc:	fa0f f880 	sxth.w	r8, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
   1fac0:	4837      	ldr	r0, [pc, #220]	; (1fba0 <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xfc>)
   1fac2:	f010 fa12 	bl	2feea <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
   1fac6:	4601      	mov	r1, r0
   1fac8:	4638      	mov	r0, r7
   1faca:	f010 fa14 	bl	2fef6 <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a - b;
   1face:	1b2d      	subs	r5, r5, r4
   1fad0:	b22d      	sxth	r5, r5
  return a ? BitNot(zero) : zero;
   1fad2:	b2ae      	uxth	r6, r5
   1fad4:	f3c5 2540 	ubfx	r5, r5, #9, #1
   1fad8:	426b      	negs	r3, r5
  return a & b;
   1fada:	3d01      	subs	r5, #1
   1fadc:	4018      	ands	r0, r3
   1fade:	ea08 0505 	and.w	r5, r8, r5
  return a ^ b;
   1fae2:	ea80 0705 	eor.w	r7, r0, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
   1fae6:	482f      	ldr	r0, [pc, #188]	; (1fba4 <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x100>)
   1fae8:	f010 f9ff 	bl	2feea <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
   1faec:	b23f      	sxth	r7, r7
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
   1faee:	4601      	mov	r1, r0
   1faf0:	4638      	mov	r0, r7
   1faf2:	f010 fa00 	bl	2fef6 <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1faf6:	f3c6 2580 	ubfx	r5, r6, #10, #1
   1fafa:	426b      	negs	r3, r5
  return a & b;
   1fafc:	3d01      	subs	r5, #1
   1fafe:	4018      	ands	r0, r3
   1fb00:	403d      	ands	r5, r7
  return a ^ b;
   1fb02:	4045      	eors	r5, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
   1fb04:	4828      	ldr	r0, [pc, #160]	; (1fba8 <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x104>)
   1fb06:	f010 f9f0 	bl	2feea <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
   1fb0a:	b22d      	sxth	r5, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
   1fb0c:	4601      	mov	r1, r0
   1fb0e:	4628      	mov	r0, r5
   1fb10:	f010 f9f1 	bl	2fef6 <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1fb14:	f3c6 28c0 	ubfx	r8, r6, #11, #1
   1fb18:	f1c8 0300 	rsb	r3, r8, #0
  return a & b;
   1fb1c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1fb20:	4018      	ands	r0, r3
   1fb22:	ea05 0808 	and.w	r8, r5, r8
  return a ^ b;
   1fb26:	ea80 0808 	eor.w	r8, r0, r8
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
   1fb2a:	4820      	ldr	r0, [pc, #128]	; (1fbac <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x108>)
   1fb2c:	f010 f9dd 	bl	2feea <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
   1fb30:	fa0f f888 	sxth.w	r8, r8
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
   1fb34:	4601      	mov	r1, r0
   1fb36:	4640      	mov	r0, r8
   1fb38:	f010 f9dd 	bl	2fef6 <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1fb3c:	f3c6 3700 	ubfx	r7, r6, #12, #1
   1fb40:	427b      	negs	r3, r7
  return a & b;
   1fb42:	3f01      	subs	r7, #1
   1fb44:	4018      	ands	r0, r3
   1fb46:	ea08 0707 	and.w	r7, r8, r7
  return a ^ b;
   1fb4a:	4047      	eors	r7, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
   1fb4c:	4818      	ldr	r0, [pc, #96]	; (1fbb0 <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x10c>)
   1fb4e:	f010 f9cc 	bl	2feea <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
   1fb52:	b23f      	sxth	r7, r7
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
   1fb54:	4601      	mov	r1, r0
   1fb56:	4638      	mov	r0, r7
   1fb58:	f010 f9cd 	bl	2fef6 <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1fb5c:	f3c6 3540 	ubfx	r5, r6, #13, #1
   1fb60:	426b      	negs	r3, r5
  return a & b;
   1fb62:	3d01      	subs	r5, #1
   1fb64:	4018      	ands	r0, r3
   1fb66:	403d      	ands	r5, r7
  return a ^ b;
   1fb68:	4045      	eors	r5, r0
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
   1fb6a:	4812      	ldr	r0, [pc, #72]	; (1fbb4 <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x110>)
   1fb6c:	f010 f9bd 	bl	2feea <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>
  return a ^ b;
   1fb70:	b22d      	sxth	r5, r5
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
   1fb72:	4601      	mov	r1, r0
   1fb74:	4628      	mov	r0, r5
   1fb76:	f010 f9be 	bl	2fef6 <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
  return a ? BitNot(zero) : zero;
   1fb7a:	f3c6 3680 	ubfx	r6, r6, #14, #1
   1fb7e:	4273      	negs	r3, r6
  return a & b;
   1fb80:	4018      	ands	r0, r3
  return a ? BitNot(zero) : zero;
   1fb82:	fab4 f384 	clz	r3, r4
  return a & b;
   1fb86:	3e01      	subs	r6, #1
   1fb88:	402e      	ands	r6, r5
  return a ^ b;
   1fb8a:	4070      	eors	r0, r6
  return a ? BitNot(zero) : zero;
   1fb8c:	095b      	lsrs	r3, r3, #5
  return a & b;
   1fb8e:	1e5d      	subs	r5, r3, #1
  return a ^ b;
   1fb90:	b200      	sxth	r0, r0
  return a ? BitNot(zero) : zero;
   1fb92:	425b      	negs	r3, r3
  return a & b;
   1fb94:	4028      	ands	r0, r5
   1fb96:	f3c3 030e 	ubfx	r3, r3, #0, #15
}
   1fb9a:	4058      	eors	r0, r3
   1fb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fba0:	63afbe7b 	.word	0x63afbe7b
   1fba4:	4da2cbf2 	.word	0x4da2cbf2
   1fba8:	2f16ac6c 	.word	0x2f16ac6c
   1fbac:	1152aaa4 	.word	0x1152aaa4
   1fbb0:	02582ab7 	.word	0x02582ab7
   1fbb4:	000afe11 	.word	0x000afe11

0001fbb8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs>:
  return a ? BitNot(zero) : zero;
   1fbb8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  static IntegerType eval(IntegerType x) {
   1fbbc:	b5d0      	push	{r4, r6, r7, lr}
  return a ? BitNot(zero) : zero;
   1fbbe:	da26      	bge.n	1fc0e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs+0x56>
   1fbc0:	f510 5f00 	cmn.w	r0, #8192	; 0x2000
   1fbc4:	bfcc      	ite	gt
   1fbc6:	2100      	movgt	r1, #0
   1fbc8:	2101      	movle	r1, #1
   1fbca:	2400      	movs	r4, #0
   1fbcc:	4249      	negs	r1, r1
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1fbce:	17c7      	asrs	r7, r0, #31
             ? min
   1fbd0:	f46f 4600 	mvn.w	r6, #32768	; 0x8000
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1fbd4:	00bb      	lsls	r3, r7, #2
             ? min
   1fbd6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1fbda:	0082      	lsls	r2, r0, #2
   1fbdc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
             ? min
   1fbe0:	4296      	cmp	r6, r2
   1fbe2:	eb77 0003 	sbcs.w	r0, r7, r3
   1fbe6:	da16      	bge.n	1fc16 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs+0x5e>
             : wide_shifted > max ? max
   1fbe8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1fbec:	f173 0000 	sbcs.w	r0, r3, #0
   1fbf0:	da13      	bge.n	1fc1a <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs+0x62>
   1fbf2:	b212      	sxth	r2, r2
  return ~a;
   1fbf4:	43e0      	mvns	r0, r4
  return a & b;
   1fbf6:	4002      	ands	r2, r0
  return ~a;
   1fbf8:	43c8      	mvns	r0, r1
  return a & b;
   1fbfa:	f3c4 040e 	ubfx	r4, r4, #0, #15
  return a ^ b;
   1fbfe:	4062      	eors	r2, r4
  return a & b;
   1fc00:	4002      	ands	r2, r0
   1fc02:	f421 40ff 	bic.w	r0, r1, #32640	; 0x7f80
   1fc06:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
  }
   1fc0a:	4050      	eors	r0, r2
   1fc0c:	bdd0      	pop	{r4, r6, r7, pc}
  return a ? BitNot(zero) : zero;
   1fc0e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1fc12:	2100      	movs	r1, #0
   1fc14:	e7db      	b.n	1fbce <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs+0x16>
             ? min
   1fc16:	4a02      	ldr	r2, [pc, #8]	; (1fc20 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs+0x68>)
   1fc18:	e7ec      	b.n	1fbf4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs+0x3c>
             : wide_shifted > max ? max
   1fc1a:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1fc1e:	e7e9      	b.n	1fbf4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs+0x3c>
   1fc20:	ffff8000 	.word	0xffff8000

0001fc24 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> one_minus_x_over_one_plus_x_for_x_in_0_1(
   1fc24:	b570      	push	{r4, r5, r6, lr}
  std::int32_t sum = a32 + b32;
   1fc26:	f647 75ff 	movw	r5, #32767	; 0x7fff
   1fc2a:	fa05 f080 	sxtah	r0, r5, r0
  std::int32_t sign = sum >= 0 ? 1 : -1;
   1fc2e:	1c43      	adds	r3, r0, #1
   1fc30:	bf14      	ite	ne
   1fc32:	2501      	movne	r5, #1
   1fc34:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
  return static_cast<std::int16_t>((sum + sign) / 2);
   1fc38:	4405      	add	r5, r0
   1fc3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   1fc3e:	f345 054f 	sbfx	r5, r5, #1, #16
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1fc42:	4628      	mov	r0, r5
   1fc44:	490e      	ldr	r1, [pc, #56]	; (1fc80 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_+0x5c>)
   1fc46:	f7fb f997 	bl	1af78 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
  return a + b;
   1fc4a:	2603      	movs	r6, #3
   1fc4c:	f500 40b4 	add.w	r0, r0, #23040	; 0x5a00
   1fc50:	305a      	adds	r0, #90	; 0x5a
   1fc52:	b204      	sxth	r4, r0
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1fc54:	4621      	mov	r1, r4
   1fc56:	4628      	mov	r0, r5
   1fc58:	f7fb f98e 	bl	1af78 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
  return a - b;
   1fc5c:	f5c0 5000 	rsb	r0, r0, #8192	; 0x2000
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   1fc60:	b201      	sxth	r1, r0
   1fc62:	4620      	mov	r0, r4
   1fc64:	f7fb f988 	bl	1af78 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
   1fc68:	f7ff ffa6 	bl	1fbb8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs>
  for (int i = 0; i < 3; i++) {
   1fc6c:	3e01      	subs	r6, #1
  return a + b;
   1fc6e:	4420      	add	r0, r4
   1fc70:	b204      	sxth	r4, r0
  for (int i = 0; i < 3; i++) {
   1fc72:	d1ef      	bne.n	1fc54 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_+0x30>
  return a - b;
   1fc74:	f5a4 5000 	sub.w	r0, r4, #8192	; 0x2000
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
   1fc78:	b200      	sxth	r0, r0
   1fc7a:	f7ff ff9d 	bl	1fbb8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EsLi1EE4evalEs>
}
   1fc7e:	bd70      	pop	{r4, r5, r6, pc}
   1fc80:	ffffc3c4 	.word	0xffffc3c4

0001fc84 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps>:
  Tanh(input_shape, input_data, output_shape, output_data);
}

inline void Tanh(const TanhParams& params, const RuntimeShape& input_shape,
                 const int16* input_data, const RuntimeShape& output_shape,
                 int16* output_data) {
   1fc84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc88:	4604      	mov	r4, r0
  const int input_left_shift = params.input_left_shift;
   1fc8a:	68e4      	ldr	r4, [r4, #12]
                 int16* output_data) {
   1fc8c:	4608      	mov	r0, r1
  // Support for shifts is limited until we have a parameterized version of
  // SaturatingRoundingMultiplyByPOT().
  TFLITE_DCHECK_GE(input_left_shift, 0);
  TFLITE_DCHECK_LE(input_left_shift, 1);
   1fc8e:	2c01      	cmp	r4, #1
                 int16* output_data) {
   1fc90:	4693      	mov	fp, r2
   1fc92:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(input_left_shift, 1);
   1fc94:	d901      	bls.n	1fc9a <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x16>
  TFLITE_DCHECK_GE(input_left_shift, 0);
   1fc96:	f011 f8c4 	bl	30e22 <abort>

  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1fc9a:	f007 fcda 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
   1fc9e:	4682      	mov	sl, r0
  // whose range is in [-1, 1].
  using F0 = gemmlowp::FixedPoint<std::int16_t, 0>;
  // F3 uses 3 integer bits, range [-8, 8], the input range expected here.
  using F3 = gemmlowp::FixedPoint<std::int16_t, 3>;

  if (input_left_shift == 0) {
   1fca0:	b954      	cbnz	r4, 1fcb8 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x34>
    for (int i = 0; i < flat_size; i++) {
   1fca2:	4554      	cmp	r4, sl
   1fca4:	da4e      	bge.n	1fd44 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xc0>
      F3 input = F3::FromRaw(input_data[i]);
      F0 output = gemmlowp::tanh(input);
   1fca6:	f83b 0014 	ldrh.w	r0, [fp, r4, lsl #1]
   1fcaa:	f010 f92a 	bl	2ff02 <_ZN8gemmlowp4tanhIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
      output_data[i] = output.raw();
   1fcae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1fcb0:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
    for (int i = 0; i < flat_size; i++) {
   1fcb4:	3401      	adds	r4, #1
   1fcb6:	e7f4      	b.n	1fca2 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x1e>
    }
  } else {
    for (int i = 0; i < flat_size; i++) {
   1fcb8:	2300      	movs	r3, #0
             ? min
   1fcba:	f46f 4800 	mvn.w	r8, #32768	; 0x8000
   1fcbe:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
  return a ? BitNot(zero) : zero;
   1fcc2:	4922      	ldr	r1, [pc, #136]	; (1fd4c <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xc8>)
             ? min
   1fcc4:	4a22      	ldr	r2, [pc, #136]	; (1fd50 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>)
   1fcc6:	4553      	cmp	r3, sl
   1fcc8:	da3c      	bge.n	1fd44 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xc0>
      F3 input = F3::FromRaw(
          gemmlowp::SaturatingRoundingMultiplyByPOT<1>(input_data[i]));
   1fcca:	f93b 4013 	ldrsh.w	r4, [fp, r3, lsl #1]
  return a ? BitNot(zero) : zero;
   1fcce:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
   1fcd2:	da2d      	bge.n	1fd30 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xac>
   1fcd4:	428c      	cmp	r4, r1
   1fcd6:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1fcda:	f04f 0000 	mov.w	r0, #0
   1fcde:	bfa8      	it	ge
   1fce0:	f04f 0c00 	movge.w	ip, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   1fce4:	1926      	adds	r6, r4, r4
   1fce6:	ea4f 75e4 	mov.w	r5, r4, asr #31
   1fcea:	eb45 0705 	adc.w	r7, r5, r5
             ? min
   1fcee:	45b0      	cmp	r8, r6
   1fcf0:	eb79 0407 	sbcs.w	r4, r9, r7
   1fcf4:	da21      	bge.n	1fd3a <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xb6>
             : wide_shifted > max ? max
   1fcf6:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1fcfa:	f177 0400 	sbcs.w	r4, r7, #0
   1fcfe:	da1e      	bge.n	1fd3e <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xba>
   1fd00:	b234      	sxth	r4, r6
  return ~a;
   1fd02:	43c5      	mvns	r5, r0
  return a & b;
   1fd04:	f3c0 000e 	ubfx	r0, r0, #0, #15
   1fd08:	402c      	ands	r4, r5
  return a ^ b;
   1fd0a:	4044      	eors	r4, r0
  return ~a;
   1fd0c:	ea6f 000c 	mvn.w	r0, ip
  return a & b;
   1fd10:	4004      	ands	r4, r0
   1fd12:	ea0c 0002 	and.w	r0, ip, r2
      F0 output = gemmlowp::tanh(input);
   1fd16:	4060      	eors	r0, r4
   1fd18:	9301      	str	r3, [sp, #4]
   1fd1a:	f010 f8f2 	bl	2ff02 <_ZN8gemmlowp4tanhIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
      output_data[i] = output.raw();
   1fd1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    for (int i = 0; i < flat_size; i++) {
   1fd20:	490a      	ldr	r1, [pc, #40]	; (1fd4c <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xc8>)
      output_data[i] = output.raw();
   1fd22:	461a      	mov	r2, r3
   1fd24:	9b01      	ldr	r3, [sp, #4]
   1fd26:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
    for (int i = 0; i < flat_size; i++) {
   1fd2a:	4a09      	ldr	r2, [pc, #36]	; (1fd50 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0xcc>)
   1fd2c:	3301      	adds	r3, #1
   1fd2e:	e7ca      	b.n	1fcc6 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x42>
  return a ? BitNot(zero) : zero;
   1fd30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fd34:	f04f 0c00 	mov.w	ip, #0
   1fd38:	e7d4      	b.n	1fce4 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x60>
             ? min
   1fd3a:	4614      	mov	r4, r2
   1fd3c:	e7e1      	b.n	1fd02 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x7e>
             : wide_shifted > max ? max
   1fd3e:	f647 74ff 	movw	r4, #32767	; 0x7fff
   1fd42:	e7de      	b.n	1fd02 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps+0x7e>
    }
  }
}
   1fd44:	b003      	add	sp, #12
   1fd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd4a:	bf00      	nop
   1fd4c:	ffffc001 	.word	0xffffc001
   1fd50:	ffff8000 	.word	0xffff8000

0001fd54 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus TanhEval(TfLiteContext* context, TfLiteNode* node) {
   1fd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1fd58:	680b      	ldr	r3, [r1, #0]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
   1fd5a:	684a      	ldr	r2, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   1fd5c:	685d      	ldr	r5, [r3, #4]
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
   1fd5e:	681b      	ldr	r3, [r3, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   1fd60:	f8d0 8008 	ldr.w	r8, [r0, #8]
  return &context->tensors[node->outputs->data[index]];
   1fd64:	6854      	ldr	r4, [r2, #4]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1fd66:	2b01      	cmp	r3, #1
  return &context->tensors[node->inputs->data[index]];
   1fd68:	ea4f 1985 	mov.w	r9, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1fd6c:	ea4f 1a84 	mov.w	sl, r4, lsl #6
TfLiteStatus TanhEval(TfLiteContext* context, TfLiteNode* node) {
   1fd70:	4606      	mov	r6, r0
   1fd72:	b09b      	sub	sp, #108	; 0x6c
  return &context->tensors[node->inputs->data[index]];
   1fd74:	eb08 1585 	add.w	r5, r8, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   1fd78:	eb08 1484 	add.w	r4, r8, r4, lsl #6
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
   1fd7c:	d01c      	beq.n	1fdb8 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x64>
   1fd7e:	2201      	movs	r2, #1
   1fd80:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1fd84:	4b99      	ldr	r3, [pc, #612]	; (1ffec <__kernel_ram_size+0x16c>)
   1fd86:	9301      	str	r3, [sp, #4]
   1fd88:	4b99      	ldr	r3, [pc, #612]	; (1fff0 <__kernel_ram_size+0x170>)
   1fd8a:	9300      	str	r3, [sp, #0]
   1fd8c:	232d      	movs	r3, #45	; 0x2d
   1fd8e:	6947      	ldr	r7, [r0, #20]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1fd90:	4a98      	ldr	r2, [pc, #608]	; (1fff4 <__kernel_ram_size+0x174>)
   1fd92:	4999      	ldr	r1, [pc, #612]	; (1fff8 <__kernel_ram_size+0x178>)
   1fd94:	47b8      	blx	r7
  switch (input->type) {
   1fd96:	f818 0009 	ldrb.w	r0, [r8, r9]
   1fd9a:	1e43      	subs	r3, r0, #1
   1fd9c:	2b08      	cmp	r3, #8
   1fd9e:	f200 8114 	bhi.w	1ffca <__kernel_ram_size+0x14a>
   1fda2:	e8df f013 	tbh	[pc, r3, lsl #1]
   1fda6:	004e      	.short	0x004e
   1fda8:	00860112 	.word	0x00860112
   1fdac:	01120112 	.word	0x01120112
   1fdb0:	00690112 	.word	0x00690112
   1fdb4:	00c30112 	.word	0x00c30112
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   1fdb8:	6812      	ldr	r2, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
   1fdba:	2a01      	cmp	r2, #1
   1fdbc:	d008      	beq.n	1fdd0 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x7c>
   1fdbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1fdc2:	4b8a      	ldr	r3, [pc, #552]	; (1ffec <__kernel_ram_size+0x16c>)
   1fdc4:	9301      	str	r3, [sp, #4]
   1fdc6:	4b8d      	ldr	r3, [pc, #564]	; (1fffc <__kernel_ram_size+0x17c>)
   1fdc8:	9300      	str	r3, [sp, #0]
   1fdca:	6947      	ldr	r7, [r0, #20]
   1fdcc:	232e      	movs	r3, #46	; 0x2e
   1fdce:	e7df      	b.n	1fd90 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x3c>
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
   1fdd0:	f818 0009 	ldrb.w	r0, [r8, r9]
   1fdd4:	f818 300a 	ldrb.w	r3, [r8, sl]
   1fdd8:	4283      	cmp	r3, r0
   1fdda:	d014      	beq.n	1fe06 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0xb2>
   1fddc:	f8d6 b014 	ldr.w	fp, [r6, #20]
   1fde0:	f7ec ff70 	bl	ccc4 <TfLiteTypeGetName>
   1fde4:	4607      	mov	r7, r0
   1fde6:	f818 000a 	ldrb.w	r0, [r8, sl]
   1fdea:	f7ec ff6b 	bl	ccc4 <TfLiteTypeGetName>
   1fdee:	4b84      	ldr	r3, [pc, #528]	; (20000 <__kernel_ram_size+0x180>)
   1fdf0:	e9cd 7002 	strd	r7, r0, [sp, #8]
   1fdf4:	9301      	str	r3, [sp, #4]
   1fdf6:	4b83      	ldr	r3, [pc, #524]	; (20004 <__kernel_ram_size+0x184>)
   1fdf8:	4630      	mov	r0, r6
   1fdfa:	9300      	str	r3, [sp, #0]
   1fdfc:	4a7d      	ldr	r2, [pc, #500]	; (1fff4 <__kernel_ram_size+0x174>)
   1fdfe:	2332      	movs	r3, #50	; 0x32
   1fe00:	4981      	ldr	r1, [pc, #516]	; (20008 <__kernel_ram_size+0x188>)
   1fe02:	47d8      	blx	fp
   1fe04:	e7c7      	b.n	1fd96 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x42>
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
   1fe06:	2b03      	cmp	r3, #3
   1fe08:	d001      	beq.n	1fe0e <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0xba>
   1fe0a:	2b09      	cmp	r3, #9
   1fe0c:	d1c3      	bne.n	1fd96 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x42>
        static_cast<double>(input->params.scale) *
   1fe0e:	68e8      	ldr	r0, [r5, #12]
   1fe10:	f7ec fb7a 	bl	c508 <__aeabi_f2d>
    const double input_real_multiplier =
   1fe14:	4b7d      	ldr	r3, [pc, #500]	; (2000c <__kernel_ram_size+0x18c>)
   1fe16:	2200      	movs	r2, #0
   1fe18:	f7f0 fb48 	bl	104ac <__aeabi_dmul>
    const double q = std::frexp(input_real_multiplier, &data->input_left_shift);
   1fe1c:	aa09      	add	r2, sp, #36	; 0x24
   1fe1e:	f002 fe23 	bl	22a68 <frexp>
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
   1fe22:	2200      	movs	r2, #0
   1fe24:	4b7a      	ldr	r3, [pc, #488]	; (20010 <__kernel_ram_size+0x190>)
   1fe26:	f7f0 fb41 	bl	104ac <__aeabi_dmul>
   1fe2a:	f002 fe83 	bl	22b34 <round>
   1fe2e:	f7f0 fdd7 	bl	109e0 <__aeabi_d2iz>
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
   1fe32:	221f      	movs	r2, #31
    data->input_multiplier = static_cast<int32_t>(TfLiteRound(q * (1ll << 31)));
   1fe34:	9008      	str	r0, [sp, #32]
        CalculateInputRadius(kInputIntegerBits, data->input_left_shift, 31);
   1fe36:	9909      	ldr	r1, [sp, #36]	; 0x24
   1fe38:	2004      	movs	r0, #4
   1fe3a:	f010 f942 	bl	300c2 <_ZN6tflite20CalculateInputRadiusEiii>
    data->input_range_radius =
   1fe3e:	9007      	str	r0, [sp, #28]
   1fe40:	e7a9      	b.n	1fd96 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x42>
      reference_ops::Tanh(GetTensorShape(input), GetTensorData<float>(input),
   1fe42:	4629      	mov	r1, r5
   1fe44:	a80e      	add	r0, sp, #56	; 0x38
   1fe46:	f007 fc2d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                          GetTensorShape(output), GetTensorData<float>(output));
   1fe4a:	4621      	mov	r1, r4
   1fe4c:	a814      	add	r0, sp, #80	; 0x50
   1fe4e:	686d      	ldr	r5, [r5, #4]
   1fe50:	f007 fc28 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1fe54:	b104      	cbz	r4, 1fe58 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x104>
   1fe56:	6864      	ldr	r4, [r4, #4]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1fe58:	a914      	add	r1, sp, #80	; 0x50
   1fe5a:	a80e      	add	r0, sp, #56	; 0x38
   1fe5c:	f007 fbf9 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; i++) {
   1fe60:	2600      	movs	r6, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1fe62:	4607      	mov	r7, r0
  for (int i = 0; i < flat_size; i++) {
   1fe64:	42b7      	cmp	r7, r6
   1fe66:	dd1c      	ble.n	1fea2 <__kernel_ram_size+0x22>
  { return __builtin_tanhf(__x); }
   1fe68:	f855 0b04 	ldr.w	r0, [r5], #4
   1fe6c:	f002 ffba 	bl	22de4 <tanhf>
   1fe70:	3601      	adds	r6, #1
    output_data[i] = result;
   1fe72:	f844 0b04 	str.w	r0, [r4], #4
  for (int i = 0; i < flat_size; i++) {
   1fe76:	e7f5      	b.n	1fe64 <_ZN6tflite3ops5micro11activations8TanhEvalEP13TfLiteContextP10TfLiteNode+0x110>
      params.input_left_shift = data.input_left_shift;
   1fe78:	9b09      	ldr	r3, [sp, #36]	; 0x24
      reference_ops::Tanh(params, GetTensorShape(input),
   1fe7a:	4629      	mov	r1, r5
   1fe7c:	a80e      	add	r0, sp, #56	; 0x38
      params.input_left_shift = data.input_left_shift;
   1fe7e:	930d      	str	r3, [sp, #52]	; 0x34
      reference_ops::Tanh(params, GetTensorShape(input),
   1fe80:	f007 fc10 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1fe84:	686a      	ldr	r2, [r5, #4]
                          GetTensorData<int16_t>(input), GetTensorShape(output),
   1fe86:	4621      	mov	r1, r4
   1fe88:	a814      	add	r0, sp, #80	; 0x50
   1fe8a:	9204      	str	r2, [sp, #16]
   1fe8c:	f007 fc0a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1fe90:	9a04      	ldr	r2, [sp, #16]
   1fe92:	b104      	cbz	r4, 1fe96 <__kernel_ram_size+0x16>
   1fe94:	6864      	ldr	r4, [r4, #4]
      reference_ops::Tanh(params, GetTensorShape(input),
   1fe96:	9400      	str	r4, [sp, #0]
   1fe98:	ab14      	add	r3, sp, #80	; 0x50
   1fe9a:	a90e      	add	r1, sp, #56	; 0x38
   1fe9c:	a80a      	add	r0, sp, #40	; 0x28
   1fe9e:	f7ff fef1 	bl	1fc84 <_ZN6tflite13reference_ops4TanhERKNS_10TanhParamsERKNS_12RuntimeShapeEPKsS6_Ps>
                          GetTensorData<uint8_t>(input), GetTensorShape(output),
   1fea2:	a814      	add	r0, sp, #80	; 0x50
   1fea4:	f007 fbb9 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      reference_ops::Tanh(params, GetTensorShape(input),
   1fea8:	a80e      	add	r0, sp, #56	; 0x38
   1feaa:	f007 fbb6 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      return kTfLiteOk;
   1feae:	2000      	movs	r0, #0
   1feb0:	e099      	b.n	1ffe6 <__kernel_ram_size+0x166>
      params.input_left_shift = data.input_left_shift;
   1feb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
      reference_ops::Tanh(params, GetTensorShape(input),
   1feb4:	4629      	mov	r1, r5
      params.input_multiplier = data.input_multiplier;
   1feb6:	e9dd 6807 	ldrd	r6, r8, [sp, #28]
      reference_ops::Tanh(params, GetTensorShape(input),
   1feba:	a80e      	add	r0, sp, #56	; 0x38
      params.input_zero_point = input->params.zero_point;
   1febc:	692f      	ldr	r7, [r5, #16]
      params.input_left_shift = data.input_left_shift;
   1febe:	9304      	str	r3, [sp, #16]
      reference_ops::Tanh(params, GetTensorShape(input),
   1fec0:	f007 fbf0 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                          GetTensorData<uint8_t>(input), GetTensorShape(output),
   1fec4:	4621      	mov	r1, r4
   1fec6:	a814      	add	r0, sp, #80	; 0x50
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1fec8:	f8d5 a004 	ldr.w	sl, [r5, #4]
   1fecc:	f007 fbea 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1fed0:	b104      	cbz	r4, 1fed4 <__kernel_ram_size+0x54>
   1fed2:	6864      	ldr	r4, [r4, #4]
  const int32 input_zero_point = params.input_zero_point;
  const int32 input_range_radius = params.input_range_radius;
  const int32 input_multiplier = params.input_multiplier;
  const int input_left_shift = params.input_left_shift;
  const int32 output_zero_point = 128;
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1fed4:	a914      	add	r1, sp, #80	; 0x50
   1fed6:	a80e      	add	r0, sp, #56	; 0x38
   1fed8:	f007 fbbb 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>

  for (int i = 0; i < flat_size; i++) {
   1fedc:	2500      	movs	r5, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   1fede:	4683      	mov	fp, r0
    const uint8 input_val_u8 = input_data[i];
    const int32 input_val_centered =
        static_cast<int32>(input_val_u8) - input_zero_point;
    uint8 output_val;
    if (input_val_centered <= -input_range_radius) {
   1fee0:	f1c6 0900 	rsb	r9, r6, #0
  for (int i = 0; i < flat_size; i++) {
   1fee4:	45ab      	cmp	fp, r5
   1fee6:	dddc      	ble.n	1fea2 <__kernel_ram_size+0x22>
        static_cast<int32>(input_val_u8) - input_zero_point;
   1fee8:	f81a 0005 	ldrb.w	r0, [sl, r5]
    const int32 input_val_centered =
   1feec:	1bc0      	subs	r0, r0, r7
    if (input_val_centered <= -input_range_radius) {
   1feee:	4548      	cmp	r0, r9
   1fef0:	dd18      	ble.n	1ff24 <__kernel_ram_size+0xa4>
      output_val = 0;
    } else if (input_val_centered >= input_range_radius) {
   1fef2:	4286      	cmp	r6, r0
   1fef4:	dd18      	ble.n	1ff28 <__kernel_ram_size+0xa8>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   1fef6:	9b04      	ldr	r3, [sp, #16]
   1fef8:	4641      	mov	r1, r8
   1fefa:	4098      	lsls	r0, r3
   1fefc:	f7fb f99e 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
          MultiplyByQuantizedMultiplierGreaterThanOne(
              input_val_centered, input_multiplier, input_left_shift);
      using FixedPoint4 = gemmlowp::FixedPoint<int32, 4>;
      using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;
      const FixedPoint4 input_val_f4 = FixedPoint4::FromRaw(input_val_rescaled);
      const FixedPoint0 output_val_f0 = gemmlowp::tanh(input_val_f4);
   1ff00:	f00f ffd7 	bl	2feb2 <_ZN8gemmlowp4tanhIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
      // Convert from Q0.31 to Q24.7.
      using gemmlowp::RoundingDivideByPOT;
      int32 output_val_s32 = RoundingDivideByPOT(output_val_f0.raw(), 24);
   1ff04:	2118      	movs	r1, #24
   1ff06:	f7fb f9d1 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      output_val_s32 += output_zero_point;
      if (output_val_s32 == 256) {
   1ff0a:	2880      	cmp	r0, #128	; 0x80
      output_val_s32 += output_zero_point;
   1ff0c:	f100 0380 	add.w	r3, r0, #128	; 0x80
      if (output_val_s32 == 256) {
   1ff10:	d104      	bne.n	1ff1c <__kernel_ram_size+0x9c>
        output_val_s32 = 255;
   1ff12:	23ff      	movs	r3, #255	; 0xff
      }
      // Reinterpret as Q0.7, encoded in uint8.
      TFLITE_DCHECK_GE(output_val_s32, 0);
      TFLITE_DCHECK_LE(output_val_s32, 255);
      output_val = static_cast<uint8>(output_val_s32);
   1ff14:	b2db      	uxtb	r3, r3
    }
    output_data[i] = output_val;
   1ff16:	5563      	strb	r3, [r4, r5]
  for (int i = 0; i < flat_size; i++) {
   1ff18:	3501      	adds	r5, #1
   1ff1a:	e7e3      	b.n	1fee4 <__kernel_ram_size+0x64>
      TFLITE_DCHECK_LE(output_val_s32, 255);
   1ff1c:	2bff      	cmp	r3, #255	; 0xff
   1ff1e:	d9f9      	bls.n	1ff14 <__kernel_ram_size+0x94>
      TFLITE_DCHECK_GE(output_val_s32, 0);
   1ff20:	f010 ff7f 	bl	30e22 <abort>
      output_val = 0;
   1ff24:	2300      	movs	r3, #0
   1ff26:	e7f6      	b.n	1ff16 <__kernel_ram_size+0x96>
      output_val = 255;
   1ff28:	23ff      	movs	r3, #255	; 0xff
   1ff2a:	e7f4      	b.n	1ff16 <__kernel_ram_size+0x96>
  for (int i = 0; i < dims->size; ++i) {
   1ff2c:	f04f 0900 	mov.w	r9, #0
      reference_integer_ops::Tanh(
   1ff30:	e9dd 6807 	ldrd	r6, r8, [sp, #28]
  int64_t count = 1;
   1ff34:	2201      	movs	r2, #1
   1ff36:	2300      	movs	r3, #0
  for (int i = 0; i < dims->size; ++i) {
   1ff38:	f8d5 e008 	ldr.w	lr, [r5, #8]
          input->params.zero_point, data.input_range_radius,
   1ff3c:	692f      	ldr	r7, [r5, #16]
      reference_integer_ops::Tanh(
   1ff3e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   1ff42:	f85e bb04 	ldr.w	fp, [lr], #4
   1ff46:	45cb      	cmp	fp, r9
   1ff48:	dd0c      	ble.n	1ff64 <__kernel_ram_size+0xe4>
    count *= dims->data[i];
   1ff4a:	f85e ab04 	ldr.w	sl, [lr], #4
  for (int i = 0; i < dims->size; ++i) {
   1ff4e:	f109 0901 	add.w	r9, r9, #1
    count *= dims->data[i];
   1ff52:	4650      	mov	r0, sl
   1ff54:	17c1      	asrs	r1, r0, #31
   1ff56:	4351      	muls	r1, r2
   1ff58:	fb0a 1103 	mla	r1, sl, r3, r1
   1ff5c:	fba2 230a 	umull	r2, r3, r2, sl
   1ff60:	440b      	add	r3, r1
  for (int i = 0; i < dims->size; ++i) {
   1ff62:	e7f0      	b.n	1ff46 <__kernel_ram_size+0xc6>
   1ff64:	4692      	mov	sl, r2
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   1ff66:	686b      	ldr	r3, [r5, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   1ff68:	b104      	cbz	r4, 1ff6c <__kernel_ram_size+0xec>
   1ff6a:	6864      	ldr	r4, [r4, #4]
  static constexpr int32_t kOutputScale = 7;
  static constexpr int32_t kMinInt8 = std::numeric_limits<int8_t>::min();
  static constexpr int32_t kMaxInt8 = std::numeric_limits<int8_t>::max();
  using F4 = gemmlowp::FixedPoint<int32_t, kInputIntegerBits>;

  for (int i = 0; i < input_size; ++i) {
   1ff6c:	f1bc 0f00 	cmp.w	ip, #0
  int right_shift = shift > 0 ? 0 : -shift;
   1ff70:	f1cc 0900 	rsb	r9, ip, #0
   1ff74:	f04f 0500 	mov.w	r5, #0
   1ff78:	bfc8      	it	gt
   1ff7a:	f04f 0900 	movgt.w	r9, #0
    const int32_t input =
        static_cast<int32_t>(input_data[i]) - input_zero_point;
    if (input <= -input_range_radius) {
   1ff7e:	f1c6 0b00 	rsb	fp, r6, #0
  int left_shift = shift > 0 ? shift : 0;
   1ff82:	ea2c 72ec 	bic.w	r2, ip, ip, asr #31
  for (int i = 0; i < input_size; ++i) {
   1ff86:	45aa      	cmp	sl, r5
   1ff88:	dd91      	ble.n	1feae <__kernel_ram_size+0x2e>
        static_cast<int32_t>(input_data[i]) - input_zero_point;
   1ff8a:	5758      	ldrsb	r0, [r3, r5]
    const int32_t input =
   1ff8c:	1bc0      	subs	r0, r0, r7
    if (input <= -input_range_radius) {
   1ff8e:	4558      	cmp	r0, fp
   1ff90:	dc03      	bgt.n	1ff9a <__kernel_ram_size+0x11a>
      output_data[i] = kMinInt8;
   1ff92:	2180      	movs	r1, #128	; 0x80
    } else if (input >= input_range_radius) {
      output_data[i] = kMaxInt8;
   1ff94:	5561      	strb	r1, [r4, r5]
  for (int i = 0; i < input_size; ++i) {
   1ff96:	3501      	adds	r5, #1
   1ff98:	e7f5      	b.n	1ff86 <__kernel_ram_size+0x106>
    } else if (input >= input_range_radius) {
   1ff9a:	4286      	cmp	r6, r0
   1ff9c:	dc01      	bgt.n	1ffa2 <__kernel_ram_size+0x122>
      output_data[i] = kMaxInt8;
   1ff9e:	217f      	movs	r1, #127	; 0x7f
   1ffa0:	e7f8      	b.n	1ff94 <__kernel_ram_size+0x114>
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   1ffa2:	4090      	lsls	r0, r2
   1ffa4:	4641      	mov	r1, r8
   1ffa6:	9305      	str	r3, [sp, #20]
   1ffa8:	9204      	str	r2, [sp, #16]
   1ffaa:	f7fb f947 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   1ffae:	4649      	mov	r1, r9
   1ffb0:	f7fb f97c 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
    } else {
      const int32_t input_in_q4 =
          MultiplyByQuantizedMultiplier(input, input_multiplier, input_shift);
      const int32_t output_in_q0 =
          gemmlowp::tanh(F4::FromRaw(input_in_q4)).raw();
   1ffb4:	f00f ff7d 	bl	2feb2 <_ZN8gemmlowp4tanhIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>

      // Rescale and downcast.
      using gemmlowp::RoundingDivideByPOT;
      int32_t output_in_q24 =
          RoundingDivideByPOT(output_in_q0, 31 - kOutputScale);
   1ffb8:	2118      	movs	r1, #24
   1ffba:	f7fb f977 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      output_in_q24 = std::min(std::max(output_in_q24, kMinInt8), kMaxInt8);
      output_data[i] = static_cast<int8_t>(output_in_q24);
   1ffbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ffc2:	f300 0007 	ssat	r0, #8, r0
   1ffc6:	5560      	strb	r0, [r4, r5]
   1ffc8:	e7e5      	b.n	1ff96 <__kernel_ram_size+0x116>
      TF_LITE_KERNEL_LOG(context, "Input %s, output %s not supported.",
   1ffca:	6974      	ldr	r4, [r6, #20]
   1ffcc:	f7ec fe7a 	bl	ccc4 <TfLiteTypeGetName>
   1ffd0:	9004      	str	r0, [sp, #16]
   1ffd2:	f818 000a 	ldrb.w	r0, [r8, sl]
   1ffd6:	f7ec fe75 	bl	ccc4 <TfLiteTypeGetName>
   1ffda:	9a04      	ldr	r2, [sp, #16]
   1ffdc:	4603      	mov	r3, r0
   1ffde:	490d      	ldr	r1, [pc, #52]	; (20014 <__kernel_ram_size+0x194>)
   1ffe0:	4630      	mov	r0, r6
   1ffe2:	47a0      	blx	r4
      return kTfLiteError;
   1ffe4:	2001      	movs	r0, #1
}
   1ffe6:	b01b      	add	sp, #108	; 0x6c
   1ffe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffec:	00035884 	.word	0x00035884
   1fff0:	00034b06 	.word	0x00034b06
   1fff4:	000360d5 	.word	0x000360d5
   1fff8:	00034aec 	.word	0x00034aec
   1fffc:	00034b16 	.word	0x00034b16
   20000:	000353f7 	.word	0x000353f7
   20004:	0003540f 	.word	0x0003540f
   20008:	00034b27 	.word	0x00034b27
   2000c:	41a00000 	.word	0x41a00000
   20010:	41e00000 	.word	0x41e00000
   20014:	0003508f 	.word	0x0003508f

00020018 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
  }

  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   20018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2001c:	b085      	sub	sp, #20
  TfLiteUnpackParams* data =
      reinterpret_cast<TfLiteUnpackParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   2001e:	6883      	ldr	r3, [r0, #8]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   20020:	9002      	str	r0, [sp, #8]
  return &context->tensors[node->inputs->data[index]];
   20022:	6808      	ldr	r0, [r1, #0]
  TfLiteUnpackParams* data =
   20024:	694a      	ldr	r2, [r1, #20]
   20026:	6847      	ldr	r7, [r0, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   20028:	9301      	str	r3, [sp, #4]
   2002a:	01b8      	lsls	r0, r7, #6

  switch (input->type) {
   2002c:	5c18      	ldrb	r0, [r3, r0]
   2002e:	eb03 1787 	add.w	r7, r3, r7, lsl #6
   20032:	1e45      	subs	r5, r0, #1
   20034:	2d08      	cmp	r5, #8
   20036:	f200 81b6 	bhi.w	203a6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x38e>
   2003a:	e8df f015 	tbh	[pc, r5, lsl #1]
   2003e:	0009      	.short	0x0009
   20040:	00dc0075 	.word	0x00dc0075
   20044:	01b401b4 	.word	0x01b401b4
   20048:	01b401b4 	.word	0x01b401b4
   2004c:	014801b4 	.word	0x014801b4
  const TfLiteIntArray* input_dims = input->dims;
   20050:	68bd      	ldr	r5, [r7, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   20052:	6848      	ldr	r0, [r1, #4]
  const int dimensions = input_dims->size;
   20054:	f8d5 e000 	ldr.w	lr, [r5]
    case kTfLiteFloat32: {
      return UnpackImpl<float>(context, node, input, data->num, data->axis);
   20058:	e9d2 9200 	ldrd	r9, r2, [r2]
  return &context->tensors[node->outputs->data[index]];
   2005c:	6841      	ldr	r1, [r0, #4]
  if (axis < 0) {
   2005e:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
   20060:	9b01      	ldr	r3, [sp, #4]
    axis += NumDimensions(input);
   20062:	bfb8      	it	lt
   20064:	4472      	addlt	r2, lr
  const TfLiteIntArray* output_dims = output0->dims;
   20066:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  TFLITE_DCHECK_LT(axis, dimensions);
   2006a:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
   2006c:	688c      	ldr	r4, [r1, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   2006e:	dd0c      	ble.n	2008a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
   20070:	f105 0c04 	add.w	ip, r5, #4
   20074:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
   20076:	2100      	movs	r1, #0
  int outer_size = 1;
   20078:	2501      	movs	r5, #1
  for (int i = 0; i < axis; ++i) {
   2007a:	428a      	cmp	r2, r1
   2007c:	dd07      	ble.n	2008e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76>
    outer_size *= input_dims->data[i];
   2007e:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
   20082:	3101      	adds	r1, #1
    outer_size *= input_dims->data[i];
   20084:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
   20088:	e7f7      	b.n	2007a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x62>
  TFLITE_DCHECK_LT(axis, dimensions);
   2008a:	f010 feca 	bl	30e22 <abort>
  for (int i = axis + 1; i < dimensions; ++i) {
   2008e:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
   20090:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   20092:	458e      	cmp	lr, r1
   20094:	d10c      	bne.n	200b0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x98>
  for (int i = 0; i < output_dims->size; ++i) {
   20096:	4621      	mov	r1, r4
   20098:	2600      	movs	r6, #0
  int output_size = 1;
   2009a:	2401      	movs	r4, #1
  for (int i = 0; i < output_dims->size; ++i) {
   2009c:	f851 eb04 	ldr.w	lr, [r1], #4
   200a0:	45b6      	cmp	lr, r6
   200a2:	dd0a      	ble.n	200ba <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xa2>
    output_size *= output_dims->data[i];
   200a4:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < output_dims->size; ++i) {
   200a8:	3601      	adds	r6, #1
    output_size *= output_dims->data[i];
   200aa:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < output_dims->size; ++i) {
   200ae:	e7f7      	b.n	200a0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x88>
    copy_size *= input_dims->data[i];
   200b0:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   200b4:	3101      	adds	r1, #1
    copy_size *= input_dims->data[i];
   200b6:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
   200b8:	e7eb      	b.n	20092 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   200ba:	fb02 f105 	mul.w	r1, r2, r5
   200be:	428c      	cmp	r4, r1
   200c0:	d1e3      	bne.n	2008a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   200c2:	2400      	movs	r4, #0
   200c4:	6879      	ldr	r1, [r7, #4]
  for (int i = 0; i < output_count; ++i) {
   200c6:	4627      	mov	r7, r4
   200c8:	9102      	str	r1, [sp, #8]
   200ca:	fb02 f109 	mul.w	r1, r2, r9
   200ce:	3004      	adds	r0, #4
   200d0:	9103      	str	r1, [sp, #12]
   200d2:	45b9      	cmp	r9, r7
   200d4:	dc03      	bgt.n	200de <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc6>
      return UnpackImpl<float>(context, node, input, data->num, data->axis);
   200d6:	2000      	movs	r0, #0
      return kTfLiteError;
    }
  }

  return kTfLiteOk;
}
   200d8:	b005      	add	sp, #20
   200da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int i = 0; i < output_count; ++i) {
   200de:	2600      	movs	r6, #0
   200e0:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
   200e2:	46b6      	mov	lr, r6
   200e4:	f850 1b04 	ldr.w	r1, [r0], #4
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   200e8:	9b01      	ldr	r3, [sp, #4]
   200ea:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
   200ee:	bf18      	it	ne
   200f0:	6849      	ldrne	r1, [r1, #4]
   200f2:	4575      	cmp	r5, lr
   200f4:	dd15      	ble.n	20122 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x10a>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   200f6:	f04f 0800 	mov.w	r8, #0
   200fa:	9b02      	ldr	r3, [sp, #8]
   200fc:	eb01 0a86 	add.w	sl, r1, r6, lsl #2
   20100:	eb03 0b8c 	add.w	fp, r3, ip, lsl #2
   20104:	4542      	cmp	r2, r8
   20106:	dd06      	ble.n	20116 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xfe>
   20108:	ecfb 7a01 	vldmia	fp!, {s15}
   2010c:	f108 0801 	add.w	r8, r8, #1
   20110:	ecea 7a01 	vstmia	sl!, {s15}
   20114:	e7f6      	b.n	20104 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xec>
    for (int k = 0; k < outer_size; ++k) {
   20116:	9b03      	ldr	r3, [sp, #12]
   20118:	f10e 0e01 	add.w	lr, lr, #1
   2011c:	449c      	add	ip, r3
   2011e:	4416      	add	r6, r2
   20120:	e7e7      	b.n	200f2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xda>
  for (int i = 0; i < output_count; ++i) {
   20122:	3701      	adds	r7, #1
   20124:	4414      	add	r4, r2
   20126:	e7d4      	b.n	200d2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
  const TfLiteIntArray* input_dims = input->dims;
   20128:	68bd      	ldr	r5, [r7, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   2012a:	6848      	ldr	r0, [r1, #4]
  const int dimensions = input_dims->size;
   2012c:	f8d5 e000 	ldr.w	lr, [r5]
      return UnpackImpl<int32_t>(context, node, input, data->num, data->axis);
   20130:	e9d2 b200 	ldrd	fp, r2, [r2]
   20134:	6841      	ldr	r1, [r0, #4]
  if (axis < 0) {
   20136:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
   20138:	9b01      	ldr	r3, [sp, #4]
    axis += NumDimensions(input);
   2013a:	bfb8      	it	lt
   2013c:	4472      	addlt	r2, lr
  const TfLiteIntArray* output_dims = output0->dims;
   2013e:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  TFLITE_DCHECK_LT(axis, dimensions);
   20142:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
   20144:	688c      	ldr	r4, [r1, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   20146:	dda0      	ble.n	2008a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
   20148:	f105 0c04 	add.w	ip, r5, #4
   2014c:	4666      	mov	r6, ip
  for (int i = 0; i < axis; ++i) {
   2014e:	2100      	movs	r1, #0
  int outer_size = 1;
   20150:	2501      	movs	r5, #1
  for (int i = 0; i < axis; ++i) {
   20152:	428a      	cmp	r2, r1
   20154:	dd05      	ble.n	20162 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14a>
    outer_size *= input_dims->data[i];
   20156:	f856 8b04 	ldr.w	r8, [r6], #4
  for (int i = 0; i < axis; ++i) {
   2015a:	3101      	adds	r1, #1
    outer_size *= input_dims->data[i];
   2015c:	fb08 f505 	mul.w	r5, r8, r5
  for (int i = 0; i < axis; ++i) {
   20160:	e7f7      	b.n	20152 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x13a>
  for (int i = axis + 1; i < dimensions; ++i) {
   20162:	1c51      	adds	r1, r2, #1
  int copy_size = 1;
   20164:	2201      	movs	r2, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   20166:	458e      	cmp	lr, r1
   20168:	d10c      	bne.n	20184 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16c>
  for (int i = 0; i < output_dims->size; ++i) {
   2016a:	4621      	mov	r1, r4
   2016c:	2600      	movs	r6, #0
  int output_size = 1;
   2016e:	2401      	movs	r4, #1
  for (int i = 0; i < output_dims->size; ++i) {
   20170:	f851 eb04 	ldr.w	lr, [r1], #4
   20174:	45b6      	cmp	lr, r6
   20176:	dd0a      	ble.n	2018e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x176>
    output_size *= output_dims->data[i];
   20178:	f851 cb04 	ldr.w	ip, [r1], #4
  for (int i = 0; i < output_dims->size; ++i) {
   2017c:	3601      	adds	r6, #1
    output_size *= output_dims->data[i];
   2017e:	fb0c f404 	mul.w	r4, ip, r4
  for (int i = 0; i < output_dims->size; ++i) {
   20182:	e7f7      	b.n	20174 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15c>
    copy_size *= input_dims->data[i];
   20184:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   20188:	3101      	adds	r1, #1
    copy_size *= input_dims->data[i];
   2018a:	4372      	muls	r2, r6
  for (int i = axis + 1; i < dimensions; ++i) {
   2018c:	e7eb      	b.n	20166 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14e>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   2018e:	fb02 f105 	mul.w	r1, r2, r5
   20192:	428c      	cmp	r4, r1
   20194:	f47f af79 	bne.w	2008a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   20198:	2400      	movs	r4, #0
   2019a:	687b      	ldr	r3, [r7, #4]
  for (int i = 0; i < output_count; ++i) {
   2019c:	4627      	mov	r7, r4
   2019e:	9302      	str	r3, [sp, #8]
   201a0:	fb02 f30b 	mul.w	r3, r2, fp
   201a4:	3004      	adds	r0, #4
   201a6:	9303      	str	r3, [sp, #12]
   201a8:	45bb      	cmp	fp, r7
   201aa:	dd94      	ble.n	200d6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
   201ac:	2600      	movs	r6, #0
   201ae:	46a4      	mov	ip, r4
    for (int k = 0; k < outer_size; ++k) {
   201b0:	46b6      	mov	lr, r6
   201b2:	f850 1b04 	ldr.w	r1, [r0], #4
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   201b6:	9b01      	ldr	r3, [sp, #4]
   201b8:	eb13 1181 	adds.w	r1, r3, r1, lsl #6
   201bc:	bf18      	it	ne
   201be:	6849      	ldrne	r1, [r1, #4]
   201c0:	4575      	cmp	r5, lr
   201c2:	dd15      	ble.n	201f0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d8>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   201c4:	f04f 0800 	mov.w	r8, #0
   201c8:	9b02      	ldr	r3, [sp, #8]
   201ca:	eb01 0986 	add.w	r9, r1, r6, lsl #2
   201ce:	eb03 0a8c 	add.w	sl, r3, ip, lsl #2
   201d2:	4542      	cmp	r2, r8
   201d4:	dd06      	ble.n	201e4 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1cc>
   201d6:	f85a 3b04 	ldr.w	r3, [sl], #4
   201da:	f108 0801 	add.w	r8, r8, #1
   201de:	f849 3b04 	str.w	r3, [r9], #4
   201e2:	e7f6      	b.n	201d2 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ba>
    for (int k = 0; k < outer_size; ++k) {
   201e4:	9b03      	ldr	r3, [sp, #12]
   201e6:	f10e 0e01 	add.w	lr, lr, #1
   201ea:	449c      	add	ip, r3
   201ec:	4416      	add	r6, r2
   201ee:	e7e7      	b.n	201c0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1a8>
  for (int i = 0; i < output_count; ++i) {
   201f0:	3701      	adds	r7, #1
   201f2:	4414      	add	r4, r2
   201f4:	e7d8      	b.n	201a8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x190>
  const TfLiteIntArray* input_dims = input->dims;
   201f6:	68be      	ldr	r6, [r7, #8]
   201f8:	6848      	ldr	r0, [r1, #4]
  const int dimensions = input_dims->size;
   201fa:	f8d6 e000 	ldr.w	lr, [r6]
      return UnpackImpl<uint8_t>(context, node, input, data->num, data->axis);
   201fe:	e9d2 b200 	ldrd	fp, r2, [r2]
   20202:	6840      	ldr	r0, [r0, #4]
  if (axis < 0) {
   20204:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
   20206:	9b01      	ldr	r3, [sp, #4]
    axis += NumDimensions(input);
   20208:	bfb8      	it	lt
   2020a:	4472      	addlt	r2, lr
  const TfLiteIntArray* output_dims = output0->dims;
   2020c:	eb03 1380 	add.w	r3, r3, r0, lsl #6
  TFLITE_DCHECK_LT(axis, dimensions);
   20210:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
   20212:	689d      	ldr	r5, [r3, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   20214:	f77f af39 	ble.w	2008a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
   20218:	f106 0c04 	add.w	ip, r6, #4
   2021c:	4660      	mov	r0, ip
  for (int i = 0; i < axis; ++i) {
   2021e:	2300      	movs	r3, #0
  int outer_size = 1;
   20220:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   20222:	429a      	cmp	r2, r3
   20224:	dd05      	ble.n	20232 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21a>
    outer_size *= input_dims->data[i];
   20226:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
   2022a:	3301      	adds	r3, #1
    outer_size *= input_dims->data[i];
   2022c:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   20230:	e7f7      	b.n	20222 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20a>
  int copy_size = 1;
   20232:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   20234:	3201      	adds	r2, #1
   20236:	4596      	cmp	lr, r2
   20238:	d10c      	bne.n	20254 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23c>
  for (int i = 0; i < output_dims->size; ++i) {
   2023a:	462a      	mov	r2, r5
  int output_size = 1;
   2023c:	2001      	movs	r0, #1
  for (int i = 0; i < output_dims->size; ++i) {
   2023e:	2500      	movs	r5, #0
   20240:	f852 eb04 	ldr.w	lr, [r2], #4
   20244:	45ae      	cmp	lr, r5
   20246:	dd0a      	ble.n	2025e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x246>
    output_size *= output_dims->data[i];
   20248:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < output_dims->size; ++i) {
   2024c:	3501      	adds	r5, #1
    output_size *= output_dims->data[i];
   2024e:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < output_dims->size; ++i) {
   20252:	e7f7      	b.n	20244 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x22c>
    copy_size *= input_dims->data[i];
   20254:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   20258:	3201      	adds	r2, #1
    copy_size *= input_dims->data[i];
   2025a:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
   2025c:	e7eb      	b.n	20236 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x21e>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   2025e:	fb03 f206 	mul.w	r2, r3, r6
   20262:	4290      	cmp	r0, r2
   20264:	f47f af11 	bne.w	2008a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   20268:	2000      	movs	r0, #0
  for (int i = 0; i < output_count; ++i) {
   2026a:	4605      	mov	r5, r0
   2026c:	687a      	ldr	r2, [r7, #4]
   2026e:	9201      	str	r2, [sp, #4]
   20270:	fb03 f20b 	mul.w	r2, r3, fp
   20274:	9203      	str	r2, [sp, #12]
   20276:	45ab      	cmp	fp, r5
   20278:	f77f af2d 	ble.w	200d6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
   2027c:	684a      	ldr	r2, [r1, #4]
   2027e:	4684      	mov	ip, r0
   20280:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   20284:	6857      	ldr	r7, [r2, #4]
   20286:	9a02      	ldr	r2, [sp, #8]
   20288:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2028a:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
   2028e:	f04f 0700 	mov.w	r7, #0
    for (int k = 0; k < outer_size; ++k) {
   20292:	46be      	mov	lr, r7
   20294:	bf18      	it	ne
   20296:	6852      	ldrne	r2, [r2, #4]
   20298:	4576      	cmp	r6, lr
   2029a:	dd15      	ble.n	202c8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2029c:	f04f 0800 	mov.w	r8, #0
   202a0:	9c01      	ldr	r4, [sp, #4]
   202a2:	eb02 0907 	add.w	r9, r2, r7
   202a6:	eb04 0a0c 	add.w	sl, r4, ip
   202aa:	4543      	cmp	r3, r8
   202ac:	dd06      	ble.n	202bc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2a4>
   202ae:	f81a 4b01 	ldrb.w	r4, [sl], #1
   202b2:	f108 0801 	add.w	r8, r8, #1
   202b6:	f809 4b01 	strb.w	r4, [r9], #1
   202ba:	e7f6      	b.n	202aa <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x292>
    for (int k = 0; k < outer_size; ++k) {
   202bc:	9c03      	ldr	r4, [sp, #12]
   202be:	f10e 0e01 	add.w	lr, lr, #1
   202c2:	44a4      	add	ip, r4
   202c4:	441f      	add	r7, r3
   202c6:	e7e7      	b.n	20298 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x280>
  for (int i = 0; i < output_count; ++i) {
   202c8:	3501      	adds	r5, #1
   202ca:	4418      	add	r0, r3
   202cc:	e7d3      	b.n	20276 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25e>
  const TfLiteIntArray* input_dims = input->dims;
   202ce:	68b8      	ldr	r0, [r7, #8]
   202d0:	684d      	ldr	r5, [r1, #4]
  const int dimensions = input_dims->size;
   202d2:	f8d0 e000 	ldr.w	lr, [r0]
      return UnpackImpl<int8_t>(context, node, input, data->num, data->axis);
   202d6:	e9d2 b200 	ldrd	fp, r2, [r2]
   202da:	686d      	ldr	r5, [r5, #4]
  if (axis < 0) {
   202dc:	2a00      	cmp	r2, #0
  const TfLiteIntArray* output_dims = output0->dims;
   202de:	9b01      	ldr	r3, [sp, #4]
    axis += NumDimensions(input);
   202e0:	bfb8      	it	lt
   202e2:	4472      	addlt	r2, lr
  const TfLiteIntArray* output_dims = output0->dims;
   202e4:	eb03 1385 	add.w	r3, r3, r5, lsl #6
  TFLITE_DCHECK_LT(axis, dimensions);
   202e8:	4596      	cmp	lr, r2
  const TfLiteIntArray* output_dims = output0->dims;
   202ea:	689d      	ldr	r5, [r3, #8]
  TFLITE_DCHECK_LT(axis, dimensions);
   202ec:	f77f aecd 	ble.w	2008a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
   202f0:	f100 0c04 	add.w	ip, r0, #4
   202f4:	4660      	mov	r0, ip
  for (int i = 0; i < axis; ++i) {
   202f6:	2300      	movs	r3, #0
  int outer_size = 1;
   202f8:	2601      	movs	r6, #1
  for (int i = 0; i < axis; ++i) {
   202fa:	429a      	cmp	r2, r3
   202fc:	dd05      	ble.n	2030a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f2>
    outer_size *= input_dims->data[i];
   202fe:	f850 8b04 	ldr.w	r8, [r0], #4
  for (int i = 0; i < axis; ++i) {
   20302:	3301      	adds	r3, #1
    outer_size *= input_dims->data[i];
   20304:	fb08 f606 	mul.w	r6, r8, r6
  for (int i = 0; i < axis; ++i) {
   20308:	e7f7      	b.n	202fa <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2e2>
  int copy_size = 1;
   2030a:	2301      	movs	r3, #1
  for (int i = axis + 1; i < dimensions; ++i) {
   2030c:	3201      	adds	r2, #1
   2030e:	4596      	cmp	lr, r2
   20310:	d10c      	bne.n	2032c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x314>
  for (int i = 0; i < output_dims->size; ++i) {
   20312:	462a      	mov	r2, r5
  int output_size = 1;
   20314:	2001      	movs	r0, #1
  for (int i = 0; i < output_dims->size; ++i) {
   20316:	2500      	movs	r5, #0
   20318:	f852 eb04 	ldr.w	lr, [r2], #4
   2031c:	45ae      	cmp	lr, r5
   2031e:	dd0a      	ble.n	20336 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x31e>
    output_size *= output_dims->data[i];
   20320:	f852 cb04 	ldr.w	ip, [r2], #4
  for (int i = 0; i < output_dims->size; ++i) {
   20324:	3501      	adds	r5, #1
    output_size *= output_dims->data[i];
   20326:	fb0c f000 	mul.w	r0, ip, r0
  for (int i = 0; i < output_dims->size; ++i) {
   2032a:	e7f7      	b.n	2031c <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x304>
    copy_size *= input_dims->data[i];
   2032c:	f85c 0022 	ldr.w	r0, [ip, r2, lsl #2]
  for (int i = axis + 1; i < dimensions; ++i) {
   20330:	3201      	adds	r2, #1
    copy_size *= input_dims->data[i];
   20332:	4343      	muls	r3, r0
  for (int i = axis + 1; i < dimensions; ++i) {
   20334:	e7eb      	b.n	2030e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f6>
  TFLITE_DCHECK_EQ(output_size, copy_size * outer_size);
   20336:	fb03 f206 	mul.w	r2, r3, r6
   2033a:	4290      	cmp	r0, r2
   2033c:	f47f aea5 	bne.w	2008a <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x72>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   20340:	2000      	movs	r0, #0
  for (int i = 0; i < output_count; ++i) {
   20342:	4605      	mov	r5, r0
   20344:	687a      	ldr	r2, [r7, #4]
   20346:	9201      	str	r2, [sp, #4]
   20348:	fb03 f20b 	mul.w	r2, r3, fp
   2034c:	9203      	str	r2, [sp, #12]
   2034e:	45ab      	cmp	fp, r5
   20350:	f77f aec1 	ble.w	200d6 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xbe>
   20354:	684a      	ldr	r2, [r1, #4]
   20356:	4684      	mov	ip, r0
   20358:	eb02 0285 	add.w	r2, r2, r5, lsl #2
   2035c:	6857      	ldr	r7, [r2, #4]
   2035e:	9a02      	ldr	r2, [sp, #8]
   20360:	6892      	ldr	r2, [r2, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   20362:	eb12 1287 	adds.w	r2, r2, r7, lsl #6
   20366:	f04f 0700 	mov.w	r7, #0
    for (int k = 0; k < outer_size; ++k) {
   2036a:	46be      	mov	lr, r7
   2036c:	bf18      	it	ne
   2036e:	6852      	ldrne	r2, [r2, #4]
   20370:	4576      	cmp	r6, lr
   20372:	dd15      	ble.n	203a0 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x388>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   20374:	f04f 0800 	mov.w	r8, #0
   20378:	9c01      	ldr	r4, [sp, #4]
   2037a:	eb02 0907 	add.w	r9, r2, r7
   2037e:	eb04 0a0c 	add.w	sl, r4, ip
   20382:	4543      	cmp	r3, r8
   20384:	dd06      	ble.n	20394 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x37c>
   20386:	f91a 4b01 	ldrsb.w	r4, [sl], #1
   2038a:	f108 0801 	add.w	r8, r8, #1
   2038e:	f809 4b01 	strb.w	r4, [r9], #1
   20392:	e7f6      	b.n	20382 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x36a>
    for (int k = 0; k < outer_size; ++k) {
   20394:	9c03      	ldr	r4, [sp, #12]
   20396:	f10e 0e01 	add.w	lr, lr, #1
   2039a:	44a4      	add	ip, r4
   2039c:	441f      	add	r7, r3
   2039e:	e7e7      	b.n	20370 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x358>
  for (int i = 0; i < output_count; ++i) {
   203a0:	3501      	adds	r5, #1
   203a2:	4418      	add	r0, r3
   203a4:	e7d3      	b.n	2034e <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x336>
      TF_LITE_KERNEL_LOG(context, "Type '%s' is not supported by unpack.",
   203a6:	9b02      	ldr	r3, [sp, #8]
   203a8:	695d      	ldr	r5, [r3, #20]
   203aa:	f7ec fc8b 	bl	ccc4 <TfLiteTypeGetName>
   203ae:	4903      	ldr	r1, [pc, #12]	; (203bc <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3a4>)
   203b0:	4602      	mov	r2, r0
   203b2:	9802      	ldr	r0, [sp, #8]
   203b4:	47a8      	blx	r5
      return kTfLiteError;
   203b6:	2001      	movs	r0, #1
   203b8:	e68e      	b.n	200d8 <_ZN6tflite3ops5micro6unpack12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xc0>
   203ba:	bf00      	nop
   203bc:	000360fb 	.word	0x000360fb

000203c0 <_ZN6tflite3ops5micro15Register_UNPACKEv>:
}  // namespace
}  // namespace unpack

TfLiteRegistration Register_UNPACK() {
   203c0:	b510      	push	{r4, lr}
   203c2:	4604      	mov	r4, r0
          /*prepare=*/nullptr,
          /*invoke=*/unpack::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
   203c4:	2220      	movs	r2, #32
   203c6:	2100      	movs	r1, #0
   203c8:	f010 fd75 	bl	30eb6 <memset>
   203cc:	4b01      	ldr	r3, [pc, #4]	; (203d4 <_ZN6tflite3ops5micro15Register_UNPACKEv+0x14>)
}
   203ce:	4620      	mov	r0, r4
          /*version=*/0};
   203d0:	60e3      	str	r3, [r4, #12]
}
   203d2:	bd10      	pop	{r4, pc}
   203d4:	00020019 	.word	0x00020019

000203d8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>:
}

// Copies the contents from the flatbuffer int vector `flatbuffer` into the
// int array `buffer`. `flat_vector` and `buffer` represent the same
// configuration operation for a given operation.
TfLiteStatus FlatBufferIntVectorToArray(
   203d8:	b538      	push	{r3, r4, r5, lr}
   203da:	4604      	mov	r4, r0
   203dc:	4610      	mov	r0, r2
   203de:	461a      	mov	r2, r3
    int max_size_of_buffer, const flatbuffers::Vector<int32_t>* flat_vector,
    int* buffer, ErrorReporter* error_reporter, const char* op_name) {
  if (!flat_vector) {
   203e0:	b924      	cbnz	r4, 203ec <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x14>
    TF_LITE_REPORT_ERROR(error_reporter,
   203e2:	4910      	ldr	r1, [pc, #64]	; (20424 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x4c>)
                         op_name);
    return kTfLiteError;
  } else {
    size_t num_dimensions = flat_vector->size();
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
      TF_LITE_REPORT_ERROR(
   203e4:	f00f fdac 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Found too many dimensions in the input array of operation '%s'.\n",
          op_name);
      return kTfLiteError;
   203e8:	2001      	movs	r0, #1
        buffer[i] = flat_vector->Get(i);
      }
    }
  }
  return kTfLiteOk;
}
   203ea:	bd38      	pop	{r3, r4, r5, pc}
    size_t num_dimensions = flat_vector->size();
   203ec:	6825      	ldr	r5, [r4, #0]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
   203ee:	2d08      	cmp	r5, #8
   203f0:	d80d      	bhi.n	2040e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x36>
   203f2:	4622      	mov	r2, r4
      for (size_t i = 0; i < num_dimensions; ++i) {
   203f4:	2300      	movs	r3, #0
   203f6:	429d      	cmp	r5, r3
   203f8:	d011      	beq.n	2041e <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x46>
    FLATBUFFERS_ASSERT(i < size());
   203fa:	6820      	ldr	r0, [r4, #0]
   203fc:	4283      	cmp	r3, r0
   203fe:	d308      	bcc.n	20412 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x3a>
   20400:	f240 1101 	movw	r1, #257	; 0x101
   20404:	4b08      	ldr	r3, [pc, #32]	; (20428 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x50>)
   20406:	4a09      	ldr	r2, [pc, #36]	; (2042c <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x54>)
   20408:	4809      	ldr	r0, [pc, #36]	; (20430 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x58>)
   2040a:	f006 f831 	bl	26470 <__assert_func>
      TF_LITE_REPORT_ERROR(
   2040e:	4909      	ldr	r1, [pc, #36]	; (20434 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x5c>)
   20410:	e7e8      	b.n	203e4 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0xc>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   20412:	f852 0f04 	ldr.w	r0, [r2, #4]!
        buffer[i] = flat_vector->Get(i);
   20416:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      for (size_t i = 0; i < num_dimensions; ++i) {
   2041a:	3301      	adds	r3, #1
   2041c:	e7eb      	b.n	203f6 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x1e>
  return kTfLiteOk;
   2041e:	2000      	movs	r0, #0
   20420:	e7e3      	b.n	203ea <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0+0x12>
   20422:	bf00      	nop
   20424:	00036121 	.word	0x00036121
   20428:	0003422c 	.word	0x0003422c
   2042c:	00034237 	.word	0x00034237
   20430:	000342f6 	.word	0x000342f6
   20434:	0003614f 	.word	0x0003614f

00020438 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}

}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
   20438:	b508      	push	{r3, lr}
   2043a:	4603      	mov	r3, r0
   2043c:	4610      	mov	r0, r2
   2043e:	2b0a      	cmp	r3, #10
   20440:	d821      	bhi.n	20486 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x4e>
   20442:	e8df f003 	tbb	[pc, r3]
   20446:	060a      	.short	0x060a
   20448:	1a181412 	.word	0x1a181412
   2044c:	161e101c 	.word	0x161e101c
   20450:	0e          	.byte	0x0e
   20451:	00          	.byte	0x00
  switch (tensor_type) {
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
   20452:	230a      	movs	r3, #10
      return kTfLiteOk;
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
      return kTfLiteOk;
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
   20454:	700b      	strb	r3, [r1, #0]
      return kTfLiteOk;
   20456:	2300      	movs	r3, #0
   20458:	e001      	b.n	2045e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x26>
      *type = kTfLiteFloat32;
   2045a:	2201      	movs	r2, #1
   2045c:	700a      	strb	r2, [r1, #0]
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
   2045e:	4618      	mov	r0, r3
   20460:	bd08      	pop	{r3, pc}
      *type = kTfLiteFloat64;
   20462:	230b      	movs	r3, #11
   20464:	e7f6      	b.n	20454 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt16;
   20466:	2307      	movs	r3, #7
   20468:	e7f4      	b.n	20454 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt32;
   2046a:	2302      	movs	r3, #2
   2046c:	e7f2      	b.n	20454 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteUInt8;
   2046e:	2303      	movs	r3, #3
   20470:	e7f0      	b.n	20454 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt8;
   20472:	2309      	movs	r3, #9
   20474:	e7ee      	b.n	20454 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteInt64;
   20476:	2304      	movs	r3, #4
   20478:	e7ec      	b.n	20454 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteString;
   2047a:	2305      	movs	r3, #5
   2047c:	e7ea      	b.n	20454 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteBool;
   2047e:	2306      	movs	r3, #6
   20480:	e7e8      	b.n	20454 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteComplex64;
   20482:	2308      	movs	r3, #8
   20484:	e7e6      	b.n	20454 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteNoType;
   20486:	2200      	movs	r2, #0
   20488:	700a      	strb	r2, [r1, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
   2048a:	461a      	mov	r2, r3
   2048c:	4902      	ldr	r1, [pc, #8]	; (20498 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x60>)
   2048e:	f00f fd57 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   20492:	2301      	movs	r3, #1
   20494:	e7e3      	b.n	2045e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x26>
   20496:	bf00      	nop
   20498:	00036190 	.word	0x00036190

0002049c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
   2049c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   204a0:	4616      	mov	r6, r2
   204a2:	4605      	mov	r5, r0
   204a4:	4689      	mov	r9, r1
   204a6:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   204a8:	f00f fd6e 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
   204ac:	6833      	ldr	r3, [r6, #0]
   204ae:	2204      	movs	r2, #4
   204b0:	2124      	movs	r1, #36	; 0x24
   204b2:	4630      	mov	r0, r6
   204b4:	681b      	ldr	r3, [r3, #0]
   204b6:	4798      	blx	r3
  SafeBuiltinDataAllocator safe_allocator(allocator);

  std::unique_ptr<TfLiteReshapeParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteReshapeParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   204b8:	4604      	mov	r4, r0
   204ba:	b978      	cbnz	r0, 204dc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
   204bc:	4b1b      	ldr	r3, [pc, #108]	; (2052c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
   204be:	4649      	mov	r1, r9
   204c0:	9301      	str	r3, [sp, #4]
   204c2:	f240 23ea 	movw	r3, #746	; 0x2ea
   204c6:	4648      	mov	r0, r9
   204c8:	9300      	str	r3, [sp, #0]
   204ca:	4a19      	ldr	r2, [pc, #100]	; (20530 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
   204cc:	4b19      	ldr	r3, [pc, #100]	; (20534 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>)
   204ce:	f00f fd45 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   204d2:	2501      	movs	r5, #1
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
   204d4:	4628      	mov	r0, r5
   204d6:	b002      	add	sp, #8
   204d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
   204dc:	4628      	mov	r0, r5
   204de:	f00f fdb4 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   204e2:	2811      	cmp	r0, #17
   204e4:	d119      	bne.n	2051a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
   204e6:	4628      	mov	r0, r5
   204e8:	f00f fd5c 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   204ec:	4605      	mov	r5, r0
   204ee:	b1a0      	cbz	r0, 2051a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
    auto field_offset = GetOptionalFieldOffset(field);
   204f0:	2104      	movs	r1, #4
   204f2:	f006 fff2 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   204f6:	b180      	cbz	r0, 2051a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
   204f8:	f855 a000 	ldr.w	sl, [r5, r0]
    auto p = data_ + field_offset;
   204fc:	eb05 0800 	add.w	r8, r5, r0
    if (new_shape != nullptr) {
   20500:	eb18 000a 	adds.w	r0, r8, sl
   20504:	d009      	beq.n	2051a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7e>
      TF_LITE_ENSURE_STATUS(
   20506:	464a      	mov	r2, r9
   20508:	4621      	mov	r1, r4
   2050a:	4b0b      	ldr	r3, [pc, #44]	; (20538 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9c>)
   2050c:	f7ff ff64 	bl	203d8 <_ZN6tflite12_GLOBAL__N_126FlatBufferIntVectorToArrayEiPKN11flatbuffers6VectorIiEEPiPNS_13ErrorReporterEPKc.constprop.0>
   20510:	4605      	mov	r5, r0
   20512:	b928      	cbnz	r0, 20520 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
      params->num_dimensions = new_shape->size();
   20514:	f858 300a 	ldr.w	r3, [r8, sl]
   20518:	6223      	str	r3, [r4, #32]
  return kTfLiteOk;
   2051a:	2500      	movs	r5, #0
  *builtin_data = params.release();
   2051c:	603c      	str	r4, [r7, #0]

      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
   2051e:	e7d9      	b.n	204d4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x38>
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
	  get_deleter()(std::move(__ptr));
   20520:	4621      	mov	r1, r4
   20522:	4630      	mov	r0, r6
   20524:	f00f fd3b 	bl	2ff9e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   20528:	e7d4      	b.n	204d4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x38>
   2052a:	bf00      	nop
   2052c:	000361e7 	.word	0x000361e7
   20530:	00034c0c 	.word	0x00034c0c
   20534:	000361b4 	.word	0x000361b4
   20538:	000361f9 	.word	0x000361f9

0002053c <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                          void** builtin_data) {
   2053c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2053e:	4614      	mov	r4, r2
   20540:	4605      	mov	r5, r0
   20542:	460f      	mov	r7, r1
   20544:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20546:	f00f fd1f 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   2054a:	2201      	movs	r2, #1
   2054c:	6823      	ldr	r3, [r4, #0]
   2054e:	4620      	mov	r0, r4
   20550:	4611      	mov	r1, r2
   20552:	681b      	ldr	r3, [r3, #0]
   20554:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20556:	4604      	mov	r4, r0
   20558:	b968      	cbnz	r0, 20576 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   2055a:	4b11      	ldr	r3, [pc, #68]	; (205a0 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>)
   2055c:	4639      	mov	r1, r7
   2055e:	9301      	str	r3, [sp, #4]
   20560:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   20564:	4638      	mov	r0, r7
   20566:	9300      	str	r3, [sp, #0]
   20568:	4a0e      	ldr	r2, [pc, #56]	; (205a4 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>)
   2056a:	4b0f      	ldr	r3, [pc, #60]	; (205a8 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   2056c:	f00f fcf6 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20570:	2001      	movs	r0, #1
}
   20572:	b003      	add	sp, #12
   20574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ReducerOptions ? static_cast<const tflite::ReducerOptions *>(builtin_options()) : nullptr;
   20576:	4628      	mov	r0, r5
   20578:	f00f fd67 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   2057c:	281b      	cmp	r0, #27
   2057e:	d10b      	bne.n	20598 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
   20580:	4628      	mov	r0, r5
   20582:	f00f fd0f 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20586:	b138      	cbz	r0, 20598 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
    return GetField<uint8_t>(VT_KEEP_DIMS, 0) != 0;
   20588:	2200      	movs	r2, #0
   2058a:	2104      	movs	r1, #4
   2058c:	f00f fd54 	bl	30038 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   20590:	3800      	subs	r0, #0
   20592:	bf18      	it	ne
   20594:	2001      	movne	r0, #1
   20596:	7020      	strb	r0, [r4, #0]
  return kTfLiteOk;
   20598:	2000      	movs	r0, #0
  *builtin_data = params.release();
   2059a:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   2059c:	e7e9      	b.n	20572 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   2059e:	bf00      	nop
   205a0:	000361e7 	.word	0x000361e7
   205a4:	00034c0c 	.word	0x00034c0c
   205a8:	000361b4 	.word	0x000361b4

000205ac <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

TfLiteStatus ParseResizeNearestNeighbor(const Operator* op,
                                        ErrorReporter* error_reporter,
                                        BuiltinDataAllocator* allocator,
                                        void** builtin_data) {
   205ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   205ae:	4614      	mov	r4, r2
   205b0:	4605      	mov	r5, r0
   205b2:	460f      	mov	r7, r1
   205b4:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   205b6:	f00f fce7 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   205ba:	6823      	ldr	r3, [r4, #0]
   205bc:	4620      	mov	r0, r4
   205be:	2201      	movs	r2, #1
   205c0:	2102      	movs	r1, #2
   205c2:	681b      	ldr	r3, [r3, #0]
   205c4:	4798      	blx	r3

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteResizeNearestNeighborParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteResizeNearestNeighborParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   205c6:	4604      	mov	r4, r0
   205c8:	b968      	cbnz	r0, 205e6 <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   205ca:	4b18      	ldr	r3, [pc, #96]	; (2062c <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>)
   205cc:	4639      	mov	r1, r7
   205ce:	9301      	str	r3, [sp, #4]
   205d0:	f240 3312 	movw	r3, #786	; 0x312
   205d4:	4638      	mov	r0, r7
   205d6:	9300      	str	r3, [sp, #0]
   205d8:	4a15      	ldr	r2, [pc, #84]	; (20630 <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>)
   205da:	4b16      	ldr	r3, [pc, #88]	; (20634 <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>)
   205dc:	f00f fcbe 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   205e0:	2001      	movs	r0, #1
    params->half_pixel_centers = false;
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
   205e2:	b003      	add	sp, #12
   205e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ResizeNearestNeighborOptions ? static_cast<const tflite::ResizeNearestNeighborOptions *>(builtin_options()) : nullptr;
   205e6:	4628      	mov	r0, r5
   205e8:	f00f fd2f 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   205ec:	284a      	cmp	r0, #74	; 0x4a
   205ee:	d118      	bne.n	20622 <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x76>
   205f0:	4628      	mov	r0, r5
   205f2:	f00f fcd7 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   205f6:	4605      	mov	r5, r0
   205f8:	b198      	cbz	r0, 20622 <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x76>
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
   205fa:	2200      	movs	r2, #0
   205fc:	2104      	movs	r1, #4
   205fe:	f00f fd1b 	bl	30038 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   20602:	3800      	subs	r0, #0
   20604:	bf18      	it	ne
   20606:	2001      	movne	r0, #1
    return GetField<uint8_t>(VT_HALF_PIXEL_CENTERS, 0) != 0;
   20608:	2200      	movs	r2, #0
    return GetField<uint8_t>(VT_ALIGN_CORNERS, 0) != 0;
   2060a:	7020      	strb	r0, [r4, #0]
    return GetField<uint8_t>(VT_HALF_PIXEL_CENTERS, 0) != 0;
   2060c:	2106      	movs	r1, #6
   2060e:	4628      	mov	r0, r5
   20610:	f00f fd12 	bl	30038 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   20614:	3800      	subs	r0, #0
   20616:	bf18      	it	ne
   20618:	2001      	movne	r0, #1
   2061a:	7060      	strb	r0, [r4, #1]
  return kTfLiteOk;
   2061c:	2000      	movs	r0, #0
  *builtin_data = params.release();
   2061e:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20620:	e7df      	b.n	205e2 <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
    params->align_corners = false;
   20622:	2300      	movs	r3, #0
   20624:	7023      	strb	r3, [r4, #0]
    params->half_pixel_centers = false;
   20626:	7063      	strb	r3, [r4, #1]
   20628:	e7f8      	b.n	2061c <_ZN6tflite26ParseResizeNearestNeighborEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>
   2062a:	bf00      	nop
   2062c:	000361e7 	.word	0x000361e7
   20630:	00034c0c 	.word	0x00034c0c
   20634:	000361b4 	.word	0x000361b4

00020638 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
   20638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2063a:	4614      	mov	r4, r2
   2063c:	4605      	mov	r5, r0
   2063e:	460f      	mov	r7, r1
   20640:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20642:	f00f fca1 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20646:	6823      	ldr	r3, [r4, #0]
   20648:	4620      	mov	r0, r4
   2064a:	2204      	movs	r2, #4
   2064c:	2108      	movs	r1, #8
   2064e:	681b      	ldr	r3, [r3, #0]
   20650:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20652:	4604      	mov	r4, r0
   20654:	b968      	cbnz	r0, 20672 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20656:	4b13      	ldr	r3, [pc, #76]	; (206a4 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   20658:	4639      	mov	r1, r7
   2065a:	9301      	str	r3, [sp, #4]
   2065c:	f240 2367 	movw	r3, #615	; 0x267
   20660:	4638      	mov	r0, r7
   20662:	9300      	str	r3, [sp, #0]
   20664:	4a10      	ldr	r2, [pc, #64]	; (206a8 <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>)
   20666:	4b11      	ldr	r3, [pc, #68]	; (206ac <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>)
   20668:	f00f fc78 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   2066c:	2001      	movs	r0, #1
}
   2066e:	b003      	add	sp, #12
   20670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_PackOptions ? static_cast<const tflite::PackOptions *>(builtin_options()) : nullptr;
   20672:	4628      	mov	r0, r5
   20674:	f00f fce9 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20678:	283b      	cmp	r0, #59	; 0x3b
   2067a:	d10f      	bne.n	2069c <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>
   2067c:	4628      	mov	r0, r5
   2067e:	f00f fc91 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20682:	4605      	mov	r5, r0
   20684:	b150      	cbz	r0, 2069c <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>
    return GetField<int32_t>(VT_VALUES_COUNT, 0);
   20686:	2200      	movs	r2, #0
   20688:	2104      	movs	r1, #4
   2068a:	f00f fce4 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_AXIS, 0);
   2068e:	2200      	movs	r2, #0
    params->values_count = schema_params->values_count();
   20690:	6020      	str	r0, [r4, #0]
   20692:	2106      	movs	r1, #6
   20694:	4628      	mov	r0, r5
   20696:	f00f fcde 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->axis = schema_params->axis();
   2069a:	6060      	str	r0, [r4, #4]
  return kTfLiteOk;
   2069c:	2000      	movs	r0, #0
  *builtin_data = params.release();
   2069e:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   206a0:	e7e5      	b.n	2066e <_ZN6tflite9ParsePackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   206a2:	bf00      	nop
   206a4:	000361e7 	.word	0x000361e7
   206a8:	00034c0c 	.word	0x00034c0c
   206ac:	000361b4 	.word	0x000361b4

000206b0 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseStridedSlice(const Operator* op,
                               ErrorReporter* error_reporter,
                               BuiltinDataAllocator* allocator,
                               void** builtin_data) {
   206b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   206b2:	4614      	mov	r4, r2
   206b4:	4605      	mov	r5, r0
   206b6:	460f      	mov	r7, r1
   206b8:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   206ba:	f00f fc65 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   206be:	6823      	ldr	r3, [r4, #0]
   206c0:	4620      	mov	r0, r4
   206c2:	2204      	movs	r2, #4
   206c4:	2114      	movs	r1, #20
   206c6:	681b      	ldr	r3, [r3, #0]
   206c8:	4798      	blx	r3

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteStridedSliceParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteStridedSliceParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   206ca:	4604      	mov	r4, r0
   206cc:	b968      	cbnz	r0, 206ea <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   206ce:	4b1c      	ldr	r3, [pc, #112]	; (20740 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
   206d0:	4639      	mov	r1, r7
   206d2:	9301      	str	r3, [sp, #4]
   206d4:	f240 3386 	movw	r3, #902	; 0x386
   206d8:	4638      	mov	r0, r7
   206da:	9300      	str	r3, [sp, #0]
   206dc:	4a19      	ldr	r2, [pc, #100]	; (20744 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x94>)
   206de:	4b1a      	ldr	r3, [pc, #104]	; (20748 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>)
   206e0:	f00f fc3c 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   206e4:	2001      	movs	r0, #1
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
   206e6:	b003      	add	sp, #12
   206e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_StridedSliceOptions ? static_cast<const tflite::StridedSliceOptions *>(builtin_options()) : nullptr;
   206ea:	4628      	mov	r0, r5
   206ec:	f00f fcad 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   206f0:	2820      	cmp	r0, #32
   206f2:	d121      	bne.n	20738 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
   206f4:	4628      	mov	r0, r5
   206f6:	f00f fc55 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   206fa:	4605      	mov	r5, r0
   206fc:	b1e0      	cbz	r0, 20738 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>
    return GetField<int32_t>(VT_BEGIN_MASK, 0);
   206fe:	2200      	movs	r2, #0
   20700:	2104      	movs	r1, #4
   20702:	f00f fca8 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_END_MASK, 0);
   20706:	2200      	movs	r2, #0
   20708:	2106      	movs	r1, #6
    params->begin_mask = schema_params->begin_mask();
   2070a:	6020      	str	r0, [r4, #0]
   2070c:	4628      	mov	r0, r5
   2070e:	f00f fca2 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_ELLIPSIS_MASK, 0);
   20712:	2200      	movs	r2, #0
   20714:	2108      	movs	r1, #8
    params->end_mask = schema_params->end_mask();
   20716:	6060      	str	r0, [r4, #4]
   20718:	4628      	mov	r0, r5
   2071a:	f00f fc9c 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_NEW_AXIS_MASK, 0);
   2071e:	2200      	movs	r2, #0
   20720:	210a      	movs	r1, #10
    params->ellipsis_mask = schema_params->ellipsis_mask();
   20722:	60a0      	str	r0, [r4, #8]
   20724:	4628      	mov	r0, r5
   20726:	f00f fc96 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_SHRINK_AXIS_MASK, 0);
   2072a:	2200      	movs	r2, #0
    params->new_axis_mask = schema_params->new_axis_mask();
   2072c:	60e0      	str	r0, [r4, #12]
   2072e:	210c      	movs	r1, #12
   20730:	4628      	mov	r0, r5
   20732:	f00f fc90 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->shrink_axis_mask = schema_params->shrink_axis_mask();
   20736:	6120      	str	r0, [r4, #16]
  return kTfLiteOk;
   20738:	2000      	movs	r0, #0
  *builtin_data = params.release();
   2073a:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   2073c:	e7d3      	b.n	206e6 <_ZN6tflite17ParseStridedSliceEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   2073e:	bf00      	nop
   20740:	000361e7 	.word	0x000361e7
   20744:	00034c0c 	.word	0x00034c0c
   20748:	000361b4 	.word	0x000361b4

0002074c <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       void**) {
  return kTfLiteOk;
}

TfLiteStatus ParseUnpack(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   2074c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2074e:	4614      	mov	r4, r2
   20750:	4605      	mov	r5, r0
   20752:	460f      	mov	r7, r1
   20754:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20756:	f00f fc17 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   2075a:	6823      	ldr	r3, [r4, #0]
   2075c:	4620      	mov	r0, r4
   2075e:	2204      	movs	r2, #4
   20760:	2108      	movs	r1, #8
   20762:	681b      	ldr	r3, [r3, #0]
   20764:	4798      	blx	r3

  SafeBuiltinDataAllocator safe_allocator(allocator);
  std::unique_ptr<TfLiteUnpackParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteUnpackParams>();
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20766:	4604      	mov	r4, r0
   20768:	b968      	cbnz	r0, 20786 <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   2076a:	4b13      	ldr	r3, [pc, #76]	; (207b8 <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   2076c:	4639      	mov	r1, r7
   2076e:	9301      	str	r3, [sp, #4]
   20770:	f240 33de 	movw	r3, #990	; 0x3de
   20774:	4638      	mov	r0, r7
   20776:	9300      	str	r3, [sp, #0]
   20778:	4a10      	ldr	r2, [pc, #64]	; (207bc <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>)
   2077a:	4b11      	ldr	r3, [pc, #68]	; (207c0 <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>)
   2077c:	f00f fbee 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20780:	2001      	movs	r0, #1
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
  return kTfLiteOk;
}
   20782:	b003      	add	sp, #12
   20784:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_UnpackOptions ? static_cast<const tflite::UnpackOptions *>(builtin_options()) : nullptr;
   20786:	4628      	mov	r0, r5
   20788:	f00f fc5f 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   2078c:	2840      	cmp	r0, #64	; 0x40
   2078e:	d10f      	bne.n	207b0 <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>
   20790:	4628      	mov	r0, r5
   20792:	f00f fc07 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20796:	4605      	mov	r5, r0
   20798:	b150      	cbz	r0, 207b0 <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>
    return GetField<int32_t>(VT_NUM, 0);
   2079a:	2200      	movs	r2, #0
   2079c:	2104      	movs	r1, #4
   2079e:	f00f fc5a 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_AXIS, 0);
   207a2:	2200      	movs	r2, #0
    params->num = schema_params->num();
   207a4:	6020      	str	r0, [r4, #0]
   207a6:	2106      	movs	r1, #6
   207a8:	4628      	mov	r0, r5
   207aa:	f00f fc54 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->axis = schema_params->axis();
   207ae:	6060      	str	r0, [r4, #4]
  return kTfLiteOk;
   207b0:	2000      	movs	r0, #0
  *builtin_data = params.release();
   207b2:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   207b4:	e7e5      	b.n	20782 <_ZN6tflite11ParseUnpackEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   207b6:	bf00      	nop
   207b8:	000361e7 	.word	0x000361e7
   207bc:	00034c0c 	.word	0x00034c0c
   207c0:	000361b4 	.word	0x000361b4

000207c4 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                      BuiltinDataAllocator* allocator, void** builtin_data) {
   207c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   207c6:	4614      	mov	r4, r2
   207c8:	4605      	mov	r5, r0
   207ca:	460f      	mov	r7, r1
   207cc:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   207ce:	f00f fbdb 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   207d2:	2201      	movs	r2, #1
   207d4:	6823      	ldr	r3, [r4, #0]
   207d6:	4620      	mov	r0, r4
   207d8:	4611      	mov	r1, r2
   207da:	681b      	ldr	r3, [r3, #0]
   207dc:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   207de:	4604      	mov	r4, r0
   207e0:	b960      	cbnz	r0, 207fc <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x38>
   207e2:	4b11      	ldr	r3, [pc, #68]	; (20828 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>)
   207e4:	4639      	mov	r1, r7
   207e6:	9301      	str	r3, [sp, #4]
   207e8:	23c3      	movs	r3, #195	; 0xc3
   207ea:	4638      	mov	r0, r7
   207ec:	9300      	str	r3, [sp, #0]
   207ee:	4a0f      	ldr	r2, [pc, #60]	; (2082c <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>)
   207f0:	4b0f      	ldr	r3, [pc, #60]	; (20830 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   207f2:	f00f fbb3 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   207f6:	2001      	movs	r0, #1
}
   207f8:	b003      	add	sp, #12
   207fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_AddOptions ? static_cast<const tflite::AddOptions *>(builtin_options()) : nullptr;
   207fc:	4628      	mov	r0, r5
   207fe:	f00f fc24 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20802:	280b      	cmp	r0, #11
   20804:	d10d      	bne.n	20822 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
   20806:	4628      	mov	r0, r5
   20808:	f00f fbcc 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   2080c:	b148      	cbz	r0, 20822 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   2080e:	2200      	movs	r2, #0
   20810:	2104      	movs	r1, #4
   20812:	f00f fc29 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20816:	b2c2      	uxtb	r2, r0
  switch (activation) {
   20818:	1e53      	subs	r3, r2, #1
   2081a:	2b04      	cmp	r3, #4
   2081c:	bf88      	it	hi
   2081e:	2200      	movhi	r2, #0
    params->activation =
   20820:	7022      	strb	r2, [r4, #0]
  return kTfLiteOk;
   20822:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20824:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20826:	e7e7      	b.n	207f8 <_ZN6tflite8ParseAddEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x34>
   20828:	000361e7 	.word	0x000361e7
   2082c:	00034c0c 	.word	0x00034c0c
   20830:	000361b4 	.word	0x000361b4

00020834 <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   20834:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20838:	4616      	mov	r6, r2
   2083a:	4607      	mov	r7, r0
   2083c:	460c      	mov	r4, r1
   2083e:	4698      	mov	r8, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20840:	f00f fba2 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20844:	2201      	movs	r2, #1
   20846:	6833      	ldr	r3, [r6, #0]
   20848:	4611      	mov	r1, r2
   2084a:	4630      	mov	r0, r6
   2084c:	681b      	ldr	r3, [r3, #0]
   2084e:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20850:	4605      	mov	r5, r0
   20852:	b970      	cbnz	r0, 20872 <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
   20854:	4b16      	ldr	r3, [pc, #88]	; (208b0 <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>)
   20856:	4621      	mov	r1, r4
   20858:	9301      	str	r3, [sp, #4]
   2085a:	23dc      	movs	r3, #220	; 0xdc
   2085c:	4620      	mov	r0, r4
   2085e:	9300      	str	r3, [sp, #0]
   20860:	4a14      	ldr	r2, [pc, #80]	; (208b4 <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>)
   20862:	4b15      	ldr	r3, [pc, #84]	; (208b8 <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>)
   20864:	f00f fb7a 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20868:	2401      	movs	r4, #1
}
   2086a:	4620      	mov	r0, r4
   2086c:	b002      	add	sp, #8
   2086e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ArgMaxOptions ? static_cast<const tflite::ArgMaxOptions *>(builtin_options()) : nullptr;
   20872:	4638      	mov	r0, r7
   20874:	f00f fbe9 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20878:	2828      	cmp	r0, #40	; 0x28
   2087a:	d003      	beq.n	20884 <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
  return kTfLiteOk;
   2087c:	2400      	movs	r4, #0
  *builtin_data = params.release();
   2087e:	f8c8 5000 	str.w	r5, [r8]
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
   20882:	e7f2      	b.n	2086a <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20884:	4638      	mov	r0, r7
   20886:	f00f fb8d 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   2088a:	2800      	cmp	r0, #0
   2088c:	d0f6      	beq.n	2087c <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_OUTPUT_TYPE, 0));
   2088e:	2200      	movs	r2, #0
   20890:	2104      	movs	r1, #4
   20892:	f00f fbe9 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    TF_LITE_ENSURE_STATUS(ConvertTensorType(
   20896:	4622      	mov	r2, r4
   20898:	4629      	mov	r1, r5
   2089a:	b2c0      	uxtb	r0, r0
   2089c:	f7ff fdcc 	bl	20438 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   208a0:	4604      	mov	r4, r0
   208a2:	2800      	cmp	r0, #0
   208a4:	d0ea      	beq.n	2087c <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
	  get_deleter()(std::move(__ptr));
   208a6:	4629      	mov	r1, r5
   208a8:	4630      	mov	r0, r6
   208aa:	f00f fb78 	bl	2ff9e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   208ae:	e7dc      	b.n	2086a <_ZN6tflite11ParseArgMaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   208b0:	000361e7 	.word	0x000361e7
   208b4:	00034c0c 	.word	0x00034c0c
   208b8:	000361b4 	.word	0x000361b4

000208bc <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   208bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   208c0:	4616      	mov	r6, r2
   208c2:	4607      	mov	r7, r0
   208c4:	460c      	mov	r4, r1
   208c6:	4698      	mov	r8, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   208c8:	f00f fb5e 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   208cc:	2201      	movs	r2, #1
   208ce:	6833      	ldr	r3, [r6, #0]
   208d0:	4611      	mov	r1, r2
   208d2:	4630      	mov	r0, r6
   208d4:	681b      	ldr	r3, [r3, #0]
   208d6:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   208d8:	4605      	mov	r5, r0
   208da:	b970      	cbnz	r0, 208fa <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
   208dc:	4b16      	ldr	r3, [pc, #88]	; (20938 <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>)
   208de:	4621      	mov	r1, r4
   208e0:	9301      	str	r3, [sp, #4]
   208e2:	23f5      	movs	r3, #245	; 0xf5
   208e4:	4620      	mov	r0, r4
   208e6:	9300      	str	r3, [sp, #0]
   208e8:	4a14      	ldr	r2, [pc, #80]	; (2093c <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x80>)
   208ea:	4b15      	ldr	r3, [pc, #84]	; (20940 <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>)
   208ec:	f00f fb36 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   208f0:	2401      	movs	r4, #1
}
   208f2:	4620      	mov	r0, r4
   208f4:	b002      	add	sp, #8
   208f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ArgMinOptions ? static_cast<const tflite::ArgMinOptions *>(builtin_options()) : nullptr;
   208fa:	4638      	mov	r0, r7
   208fc:	f00f fba5 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20900:	2839      	cmp	r0, #57	; 0x39
   20902:	d003      	beq.n	2090c <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
  return kTfLiteOk;
   20904:	2400      	movs	r4, #0
  *builtin_data = params.release();
   20906:	f8c8 5000 	str.w	r5, [r8]
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
   2090a:	e7f2      	b.n	208f2 <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   2090c:	4638      	mov	r0, r7
   2090e:	f00f fb49 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20912:	2800      	cmp	r0, #0
   20914:	d0f6      	beq.n	20904 <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_OUTPUT_TYPE, 0));
   20916:	2200      	movs	r2, #0
   20918:	2104      	movs	r1, #4
   2091a:	f00f fba5 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    TF_LITE_ENSURE_STATUS(ConvertTensorType(
   2091e:	4622      	mov	r2, r4
   20920:	4629      	mov	r1, r5
   20922:	b2c0      	uxtb	r0, r0
   20924:	f7ff fd88 	bl	20438 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   20928:	4604      	mov	r4, r0
   2092a:	2800      	cmp	r0, #0
   2092c:	d0ea      	beq.n	20904 <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
	  get_deleter()(std::move(__ptr));
   2092e:	4629      	mov	r1, r5
   20930:	4630      	mov	r0, r6
   20932:	f00f fb34 	bl	2ff9e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   20936:	e7dc      	b.n	208f2 <_ZN6tflite11ParseArgMinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20938:	000361e7 	.word	0x000361e7
   2093c:	00034c0c 	.word	0x00034c0c
   20940:	000361b4 	.word	0x000361b4

00020944 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                void** builtin_data) {
   20944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20946:	4614      	mov	r4, r2
   20948:	4605      	mov	r5, r0
   2094a:	460f      	mov	r7, r1
   2094c:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   2094e:	f00f fb1b 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20952:	6823      	ldr	r3, [r4, #0]
   20954:	4620      	mov	r0, r4
   20956:	2204      	movs	r2, #4
   20958:	2108      	movs	r1, #8
   2095a:	681b      	ldr	r3, [r3, #0]
   2095c:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   2095e:	4604      	mov	r4, r0
   20960:	b968      	cbnz	r0, 2097e <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20962:	4b15      	ldr	r3, [pc, #84]	; (209b8 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>)
   20964:	4639      	mov	r1, r7
   20966:	9301      	str	r3, [sp, #4]
   20968:	f44f 738c 	mov.w	r3, #280	; 0x118
   2096c:	4638      	mov	r0, r7
   2096e:	9300      	str	r3, [sp, #0]
   20970:	4a12      	ldr	r2, [pc, #72]	; (209bc <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x78>)
   20972:	4b13      	ldr	r3, [pc, #76]	; (209c0 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7c>)
   20974:	f00f faf2 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20978:	2001      	movs	r0, #1
}
   2097a:	b003      	add	sp, #12
   2097c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ConcatenationOptions ? static_cast<const tflite::ConcatenationOptions *>(builtin_options()) : nullptr;
   2097e:	4628      	mov	r0, r5
   20980:	f00f fb63 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20984:	280a      	cmp	r0, #10
   20986:	d114      	bne.n	209b2 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
   20988:	4628      	mov	r0, r5
   2098a:	f00f fb0b 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   2098e:	4605      	mov	r5, r0
   20990:	b178      	cbz	r0, 209b2 <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20992:	2200      	movs	r2, #0
   20994:	2106      	movs	r1, #6
   20996:	f00f fb67 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   2099a:	b2c2      	uxtb	r2, r0
  switch (activation) {
   2099c:	1e53      	subs	r3, r2, #1
   2099e:	2b04      	cmp	r3, #4
   209a0:	bf88      	it	hi
   209a2:	2200      	movhi	r2, #0
    return GetField<int32_t>(VT_AXIS, 0);
   209a4:	2104      	movs	r1, #4
    params->activation =
   209a6:	7122      	strb	r2, [r4, #4]
   209a8:	4628      	mov	r0, r5
   209aa:	2200      	movs	r2, #0
   209ac:	f00f fb53 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->axis = schema_params->axis();
   209b0:	6020      	str	r0, [r4, #0]
  return kTfLiteOk;
   209b2:	2000      	movs	r0, #0
  *builtin_data = params.release();
   209b4:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   209b6:	e7e0      	b.n	2097a <_ZN6tflite18ParseConcatenationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   209b8:	000361e7 	.word	0x000361e7
   209bc:	00034c0c 	.word	0x00034c0c
   209c0:	000361b4 	.word	0x000361b4

000209c4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                         BuiltinDataAllocator* allocator, void** builtin_data) {
   209c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   209c6:	4614      	mov	r4, r2
   209c8:	4605      	mov	r5, r0
   209ca:	460e      	mov	r6, r1
   209cc:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   209ce:	f00f fadb 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   209d2:	6823      	ldr	r3, [r4, #0]
   209d4:	4620      	mov	r0, r4
   209d6:	2204      	movs	r2, #4
   209d8:	2118      	movs	r1, #24
   209da:	681b      	ldr	r3, [r3, #0]
   209dc:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   209de:	4604      	mov	r4, r0
   209e0:	b968      	cbnz	r0, 209fe <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   209e2:	4b23      	ldr	r3, [pc, #140]	; (20a70 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>)
   209e4:	4631      	mov	r1, r6
   209e6:	9301      	str	r3, [sp, #4]
   209e8:	f240 1333 	movw	r3, #307	; 0x133
   209ec:	4630      	mov	r0, r6
   209ee:	9300      	str	r3, [sp, #0]
   209f0:	4a20      	ldr	r2, [pc, #128]	; (20a74 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>)
   209f2:	4b21      	ldr	r3, [pc, #132]	; (20a78 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>)
   209f4:	f00f fab2 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   209f8:	2001      	movs	r0, #1
}
   209fa:	b003      	add	sp, #12
   209fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
   209fe:	4628      	mov	r0, r5
   20a00:	f00f fb23 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20a04:	2801      	cmp	r0, #1
   20a06:	4606      	mov	r6, r0
   20a08:	d12f      	bne.n	20a6a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
   20a0a:	4628      	mov	r0, r5
   20a0c:	f00f faca 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20a10:	4605      	mov	r5, r0
   20a12:	b350      	cbz	r0, 20a6a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa6>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   20a14:	2200      	movs	r2, #0
   20a16:	2104      	movs	r1, #4
   20a18:	f00f fb26 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
   20a1c:	b2c0      	uxtb	r0, r0
   20a1e:	f00f faab 	bl	2ff78 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   20a22:	2200      	movs	r2, #0
   20a24:	2106      	movs	r1, #6
   20a26:	7020      	strb	r0, [r4, #0]
   20a28:	4628      	mov	r0, r5
   20a2a:	f00f fb14 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   20a2e:	2200      	movs	r2, #0
   20a30:	2108      	movs	r1, #8
    params->stride_width = schema_params->stride_w();
   20a32:	6060      	str	r0, [r4, #4]
   20a34:	4628      	mov	r0, r5
   20a36:	f00f fb0e 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20a3a:	2200      	movs	r2, #0
   20a3c:	210a      	movs	r1, #10
    params->stride_height = schema_params->stride_h();
   20a3e:	60a0      	str	r0, [r4, #8]
   20a40:	4628      	mov	r0, r5
   20a42:	f00f fb11 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20a46:	b2c2      	uxtb	r2, r0
  switch (activation) {
   20a48:	1e53      	subs	r3, r2, #1
   20a4a:	2b04      	cmp	r3, #4
   20a4c:	bf88      	it	hi
   20a4e:	2200      	movhi	r2, #0
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
   20a50:	210c      	movs	r1, #12
    params->activation =
   20a52:	7322      	strb	r2, [r4, #12]
   20a54:	4628      	mov	r0, r5
   20a56:	4632      	mov	r2, r6
   20a58:	f00f fafd 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
   20a5c:	4632      	mov	r2, r6
    params->dilation_width_factor = schema_params->dilation_w_factor();
   20a5e:	6120      	str	r0, [r4, #16]
   20a60:	210e      	movs	r1, #14
   20a62:	4628      	mov	r0, r5
   20a64:	f00f faf7 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
   20a68:	6160      	str	r0, [r4, #20]
  return kTfLiteOk;
   20a6a:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20a6c:	603c      	str	r4, [r7, #0]
  return kTfLiteOk;
   20a6e:	e7c4      	b.n	209fa <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20a70:	000361e7 	.word	0x000361e7
   20a74:	00034c0c 	.word	0x00034c0c
   20a78:	000361b4 	.word	0x000361b4

00020a7c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
   20a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20a7e:	4614      	mov	r4, r2
   20a80:	4605      	mov	r5, r0
   20a82:	460f      	mov	r7, r1
   20a84:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20a86:	f00f fa7f 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20a8a:	6823      	ldr	r3, [r4, #0]
   20a8c:	4620      	mov	r0, r4
   20a8e:	2204      	movs	r2, #4
   20a90:	211c      	movs	r1, #28
   20a92:	681b      	ldr	r3, [r3, #0]
   20a94:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20a96:	4604      	mov	r4, r0
   20a98:	b968      	cbnz	r0, 20ab6 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20a9a:	4b26      	ldr	r3, [pc, #152]	; (20b34 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
   20a9c:	4639      	mov	r1, r7
   20a9e:	9301      	str	r3, [sp, #4]
   20aa0:	f240 135d 	movw	r3, #349	; 0x15d
   20aa4:	4638      	mov	r0, r7
   20aa6:	9300      	str	r3, [sp, #0]
   20aa8:	4a23      	ldr	r2, [pc, #140]	; (20b38 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
   20aaa:	4b24      	ldr	r3, [pc, #144]	; (20b3c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
   20aac:	f00f fa56 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20ab0:	2001      	movs	r0, #1
}
   20ab2:	b003      	add	sp, #12
   20ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_DepthwiseConv2DOptions ? static_cast<const tflite::DepthwiseConv2DOptions *>(builtin_options()) : nullptr;
   20ab6:	4628      	mov	r0, r5
   20ab8:	f00f fac7 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20abc:	2802      	cmp	r0, #2
   20abe:	d135      	bne.n	20b2c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
   20ac0:	4628      	mov	r0, r5
   20ac2:	f00f fa6f 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20ac6:	4605      	mov	r5, r0
   20ac8:	b380      	cbz	r0, 20b2c <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   20aca:	2200      	movs	r2, #0
   20acc:	2104      	movs	r1, #4
   20ace:	f00f facb 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
   20ad2:	b2c0      	uxtb	r0, r0
   20ad4:	f00f fa50 	bl	2ff78 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   20ad8:	2200      	movs	r2, #0
   20ada:	2106      	movs	r1, #6
   20adc:	7020      	strb	r0, [r4, #0]
   20ade:	4628      	mov	r0, r5
   20ae0:	f00f fab9 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   20ae4:	2200      	movs	r2, #0
   20ae6:	2108      	movs	r1, #8
    params->stride_width = schema_params->stride_w();
   20ae8:	6060      	str	r0, [r4, #4]
   20aea:	4628      	mov	r0, r5
   20aec:	f00f fab3 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DEPTH_MULTIPLIER, 0);
   20af0:	2200      	movs	r2, #0
   20af2:	210a      	movs	r1, #10
    params->stride_height = schema_params->stride_h();
   20af4:	60a0      	str	r0, [r4, #8]
   20af6:	4628      	mov	r0, r5
   20af8:	f00f faad 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20afc:	2200      	movs	r2, #0
   20afe:	210c      	movs	r1, #12
    params->depth_multiplier = schema_params->depth_multiplier();
   20b00:	60e0      	str	r0, [r4, #12]
   20b02:	4628      	mov	r0, r5
   20b04:	f00f fab0 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20b08:	b2c0      	uxtb	r0, r0
  switch (activation) {
   20b0a:	1e43      	subs	r3, r0, #1
   20b0c:	2b04      	cmp	r3, #4
   20b0e:	bf88      	it	hi
   20b10:	2000      	movhi	r0, #0
    return GetField<int32_t>(VT_DILATION_W_FACTOR, 1);
   20b12:	2201      	movs	r2, #1
   20b14:	210e      	movs	r1, #14
    params->activation =
   20b16:	7420      	strb	r0, [r4, #16]
   20b18:	4628      	mov	r0, r5
   20b1a:	f00f fa9c 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_DILATION_H_FACTOR, 1);
   20b1e:	2201      	movs	r2, #1
    params->dilation_width_factor = schema_params->dilation_w_factor();
   20b20:	6160      	str	r0, [r4, #20]
   20b22:	2110      	movs	r1, #16
   20b24:	4628      	mov	r0, r5
   20b26:	f00f fa96 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->dilation_height_factor = schema_params->dilation_h_factor();
   20b2a:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
   20b2c:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20b2e:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20b30:	e7bf      	b.n	20ab2 <_ZN6tflite20ParseDepthwiseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20b32:	bf00      	nop
   20b34:	000361e7 	.word	0x000361e7
   20b38:	00034c0c 	.word	0x00034c0c
   20b3c:	000361b4 	.word	0x000361b4

00020b40 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                 void** builtin_data) {
   20b40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   20b44:	4617      	mov	r7, r2
   20b46:	4605      	mov	r5, r0
   20b48:	4688      	mov	r8, r1
   20b4a:	4699      	mov	r9, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20b4c:	f00f fa1c 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20b50:	683b      	ldr	r3, [r7, #0]
   20b52:	2201      	movs	r2, #1
   20b54:	2104      	movs	r1, #4
   20b56:	4638      	mov	r0, r7
   20b58:	681b      	ldr	r3, [r3, #0]
   20b5a:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20b5c:	4604      	mov	r4, r0
   20b5e:	b970      	cbnz	r0, 20b7e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3e>
   20b60:	4b25      	ldr	r3, [pc, #148]	; (20bf8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
   20b62:	4641      	mov	r1, r8
   20b64:	9301      	str	r3, [sp, #4]
   20b66:	f240 1399 	movw	r3, #409	; 0x199
   20b6a:	4640      	mov	r0, r8
   20b6c:	9300      	str	r3, [sp, #0]
   20b6e:	4a23      	ldr	r2, [pc, #140]	; (20bfc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
   20b70:	4b23      	ldr	r3, [pc, #140]	; (20c00 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
   20b72:	f00f f9f3 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
        return kTfLiteError;
   20b76:	2001      	movs	r0, #1
}
   20b78:	b002      	add	sp, #8
   20b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
   20b7e:	4628      	mov	r0, r5
   20b80:	f00f fa63 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20b84:	2808      	cmp	r0, #8
   20b86:	4682      	mov	sl, r0
   20b88:	d132      	bne.n	20bf0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
   20b8a:	4628      	mov	r0, r5
   20b8c:	f00f fa0a 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20b90:	4605      	mov	r5, r0
   20b92:	b368      	cbz	r0, 20bf0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20b94:	2200      	movs	r2, #0
   20b96:	2104      	movs	r1, #4
   20b98:	f00f fa66 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20b9c:	b2c6      	uxtb	r6, r0
  switch (activation) {
   20b9e:	1e73      	subs	r3, r6, #1
   20ba0:	2b04      	cmp	r3, #4
   20ba2:	bf88      	it	hi
   20ba4:	2600      	movhi	r6, #0
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
   20ba6:	2200      	movs	r2, #0
   20ba8:	4651      	mov	r1, sl
   20baa:	4628      	mov	r0, r5
    params->activation =
   20bac:	7026      	strb	r6, [r4, #0]
   20bae:	f00f fa43 	bl	30038 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   20bb2:	3800      	subs	r0, #0
   20bb4:	bf18      	it	ne
   20bb6:	2001      	movne	r0, #1
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   20bb8:	2200      	movs	r2, #0
   20bba:	210a      	movs	r1, #10
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
   20bbc:	70a0      	strb	r0, [r4, #2]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   20bbe:	4628      	mov	r0, r5
   20bc0:	f00f fa3a 	bl	30038 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   20bc4:	3800      	subs	r0, #0
   20bc6:	bf18      	it	ne
   20bc8:	2001      	movne	r0, #1
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
   20bca:	2200      	movs	r2, #0
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   20bcc:	70e0      	strb	r0, [r4, #3]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
   20bce:	2106      	movs	r1, #6
   20bd0:	4628      	mov	r0, r5
   20bd2:	f00f fa49 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    switch (schema_params->weights_format()) {
   20bd6:	b150      	cbz	r0, 20bee <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
   20bd8:	2801      	cmp	r0, #1
   20bda:	d008      	beq.n	20bee <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xae>
        TF_LITE_REPORT_ERROR(error_reporter,
   20bdc:	4640      	mov	r0, r8
   20bde:	4909      	ldr	r1, [pc, #36]	; (20c04 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>)
   20be0:	f00f f9ae 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   20be4:	4621      	mov	r1, r4
   20be6:	4638      	mov	r0, r7
   20be8:	f00f f9d9 	bl	2ff9e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>
   20bec:	e7c3      	b.n	20b76 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
        params->weights_format =
   20bee:	7060      	strb	r0, [r4, #1]
  return kTfLiteOk;
   20bf0:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20bf2:	f8c9 4000 	str.w	r4, [r9]
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
   20bf6:	e7bf      	b.n	20b78 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x38>
   20bf8:	000361e7 	.word	0x000361e7
   20bfc:	00034c0c 	.word	0x00034c0c
   20c00:	000361b4 	.word	0x000361b4
   20c04:	00036201 	.word	0x00036201

00020c08 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                                  void** builtin_data) {
   20c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20c0a:	4614      	mov	r4, r2
   20c0c:	4605      	mov	r5, r0
   20c0e:	460f      	mov	r7, r1
   20c10:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20c12:	f00f f9b9 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20c16:	2201      	movs	r2, #1
   20c18:	6823      	ldr	r3, [r4, #0]
   20c1a:	4620      	mov	r0, r4
   20c1c:	4611      	mov	r1, r2
   20c1e:	681b      	ldr	r3, [r3, #0]
   20c20:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20c22:	4604      	mov	r4, r0
   20c24:	b968      	cbnz	r0, 20c42 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20c26:	4b12      	ldr	r3, [pc, #72]	; (20c70 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>)
   20c28:	4639      	mov	r1, r7
   20c2a:	9301      	str	r3, [sp, #4]
   20c2c:	f44f 73ef 	mov.w	r3, #478	; 0x1de
   20c30:	4638      	mov	r0, r7
   20c32:	9300      	str	r3, [sp, #0]
   20c34:	4a0f      	ldr	r2, [pc, #60]	; (20c74 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   20c36:	4b10      	ldr	r3, [pc, #64]	; (20c78 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>)
   20c38:	f00f f990 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20c3c:	2001      	movs	r0, #1
}
   20c3e:	b003      	add	sp, #12
   20c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_L2NormOptions ? static_cast<const tflite::L2NormOptions *>(builtin_options()) : nullptr;
   20c42:	4628      	mov	r0, r5
   20c44:	f00f fa01 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20c48:	280c      	cmp	r0, #12
   20c4a:	d10d      	bne.n	20c68 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
   20c4c:	4628      	mov	r0, r5
   20c4e:	f00f f9a9 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20c52:	b148      	cbz	r0, 20c68 <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20c54:	2200      	movs	r2, #0
   20c56:	2104      	movs	r1, #4
   20c58:	f00f fa06 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20c5c:	b2c2      	uxtb	r2, r0
  switch (activation) {
   20c5e:	1e53      	subs	r3, r2, #1
   20c60:	2b04      	cmp	r3, #4
   20c62:	bf88      	it	hi
   20c64:	2200      	movhi	r2, #0
    params->activation =
   20c66:	7022      	strb	r2, [r4, #0]
  return kTfLiteOk;
   20c68:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20c6a:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20c6c:	e7e7      	b.n	20c3e <_ZN6tflite20ParseL2NormalizationEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20c6e:	bf00      	nop
   20c70:	000361e7 	.word	0x000361e7
   20c74:	00034c0c 	.word	0x00034c0c
   20c78:	000361b4 	.word	0x000361b4

00020c7c <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                      BuiltinDataAllocator* allocator, void** builtin_data) {
   20c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20c7e:	4614      	mov	r4, r2
   20c80:	4605      	mov	r5, r0
   20c82:	460f      	mov	r7, r1
   20c84:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20c86:	f00f f97f 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20c8a:	2201      	movs	r2, #1
   20c8c:	6823      	ldr	r3, [r4, #0]
   20c8e:	4620      	mov	r0, r4
   20c90:	4611      	mov	r1, r2
   20c92:	681b      	ldr	r3, [r3, #0]
   20c94:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20c96:	4604      	mov	r4, r0
   20c98:	b968      	cbnz	r0, 20cb6 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20c9a:	4b12      	ldr	r3, [pc, #72]	; (20ce4 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>)
   20c9c:	4639      	mov	r1, r7
   20c9e:	9301      	str	r3, [sp, #4]
   20ca0:	f240 233e 	movw	r3, #574	; 0x23e
   20ca4:	4638      	mov	r0, r7
   20ca6:	9300      	str	r3, [sp, #0]
   20ca8:	4a0f      	ldr	r2, [pc, #60]	; (20ce8 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   20caa:	4b10      	ldr	r3, [pc, #64]	; (20cec <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>)
   20cac:	f00f f956 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20cb0:	2001      	movs	r0, #1
}
   20cb2:	b003      	add	sp, #12
   20cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_MulOptions ? static_cast<const tflite::MulOptions *>(builtin_options()) : nullptr;
   20cb6:	4628      	mov	r0, r5
   20cb8:	f00f f9c7 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20cbc:	2815      	cmp	r0, #21
   20cbe:	d10d      	bne.n	20cdc <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
   20cc0:	4628      	mov	r0, r5
   20cc2:	f00f f96f 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20cc6:	b148      	cbz	r0, 20cdc <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20cc8:	2200      	movs	r2, #0
   20cca:	2104      	movs	r1, #4
   20ccc:	f00f f9cc 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20cd0:	b2c2      	uxtb	r2, r0
  switch (activation) {
   20cd2:	1e53      	subs	r3, r2, #1
   20cd4:	2b04      	cmp	r3, #4
   20cd6:	bf88      	it	hi
   20cd8:	2200      	movhi	r2, #0
    params->activation =
   20cda:	7022      	strb	r2, [r4, #0]
  return kTfLiteOk;
   20cdc:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20cde:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20ce0:	e7e7      	b.n	20cb2 <_ZN6tflite8ParseMulEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20ce2:	bf00      	nop
   20ce4:	000361e7 	.word	0x000361e7
   20ce8:	00034c0c 	.word	0x00034c0c
   20cec:	000361b4 	.word	0x000361b4

00020cf0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
   20cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20cf2:	4614      	mov	r4, r2
   20cf4:	4605      	mov	r5, r0
   20cf6:	460f      	mov	r7, r1
   20cf8:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20cfa:	f00f f945 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20cfe:	6823      	ldr	r3, [r4, #0]
   20d00:	4620      	mov	r0, r4
   20d02:	2204      	movs	r2, #4
   20d04:	2128      	movs	r1, #40	; 0x28
   20d06:	681b      	ldr	r3, [r3, #0]
   20d08:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20d0a:	4604      	mov	r4, r0
   20d0c:	b968      	cbnz	r0, 20d2a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20d0e:	4b23      	ldr	r3, [pc, #140]	; (20d9c <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>)
   20d10:	4639      	mov	r1, r7
   20d12:	9301      	str	r3, [sp, #4]
   20d14:	f44f 7324 	mov.w	r3, #656	; 0x290
   20d18:	4638      	mov	r0, r7
   20d1a:	9300      	str	r3, [sp, #0]
   20d1c:	4a20      	ldr	r2, [pc, #128]	; (20da0 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb0>)
   20d1e:	4b21      	ldr	r3, [pc, #132]	; (20da4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb4>)
   20d20:	f00f f91c 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20d24:	2001      	movs	r0, #1
}
   20d26:	b003      	add	sp, #12
   20d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
   20d2a:	4628      	mov	r0, r5
   20d2c:	f00f f98d 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20d30:	2805      	cmp	r0, #5
   20d32:	d12f      	bne.n	20d94 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
   20d34:	4628      	mov	r0, r5
   20d36:	f00f f935 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20d3a:	4605      	mov	r5, r0
   20d3c:	b350      	cbz	r0, 20d94 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
    return static_cast<tflite::Padding>(GetField<int8_t>(VT_PADDING, 0));
   20d3e:	2200      	movs	r2, #0
   20d40:	2104      	movs	r1, #4
   20d42:	f00f f991 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
    params->padding = ConvertPadding(schema_params->padding());
   20d46:	b2c0      	uxtb	r0, r0
   20d48:	f00f f916 	bl	2ff78 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>
    return GetField<int32_t>(VT_STRIDE_W, 0);
   20d4c:	2200      	movs	r2, #0
   20d4e:	2106      	movs	r1, #6
   20d50:	7020      	strb	r0, [r4, #0]
   20d52:	4628      	mov	r0, r5
   20d54:	f00f f97f 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_STRIDE_H, 0);
   20d58:	2200      	movs	r2, #0
   20d5a:	2108      	movs	r1, #8
    params->stride_width = schema_params->stride_w();
   20d5c:	6060      	str	r0, [r4, #4]
   20d5e:	4628      	mov	r0, r5
   20d60:	f00f f979 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_FILTER_WIDTH, 0);
   20d64:	2200      	movs	r2, #0
   20d66:	210a      	movs	r1, #10
    params->stride_height = schema_params->stride_h();
   20d68:	60a0      	str	r0, [r4, #8]
   20d6a:	4628      	mov	r0, r5
   20d6c:	f00f f973 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return GetField<int32_t>(VT_FILTER_HEIGHT, 0);
   20d70:	2200      	movs	r2, #0
   20d72:	210c      	movs	r1, #12
    params->filter_width = schema_params->filter_width();
   20d74:	60e0      	str	r0, [r4, #12]
   20d76:	4628      	mov	r0, r5
   20d78:	f00f f96d 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20d7c:	2200      	movs	r2, #0
    params->filter_height = schema_params->filter_height();
   20d7e:	6120      	str	r0, [r4, #16]
   20d80:	210e      	movs	r1, #14
   20d82:	4628      	mov	r0, r5
   20d84:	f00f f970 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20d88:	b2c0      	uxtb	r0, r0
  switch (activation) {
   20d8a:	1e43      	subs	r3, r0, #1
   20d8c:	2b04      	cmp	r3, #4
   20d8e:	bf88      	it	hi
   20d90:	2000      	movhi	r0, #0
    params->activation =
   20d92:	7520      	strb	r0, [r4, #20]
  return kTfLiteOk;
   20d94:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20d96:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20d98:	e7c5      	b.n	20d26 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20d9a:	bf00      	nop
   20d9c:	000361e7 	.word	0x000361e7
   20da0:	00034c0c 	.word	0x00034c0c
   20da4:	000361b4 	.word	0x000361b4

00020da8 <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                      BuiltinDataAllocator* allocator, void** builtin_data) {
   20da8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20daa:	4614      	mov	r4, r2
   20dac:	4605      	mov	r5, r0
   20dae:	460f      	mov	r7, r1
   20db0:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20db2:	f00f f8e9 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20db6:	2201      	movs	r2, #1
   20db8:	6823      	ldr	r3, [r4, #0]
   20dba:	4620      	mov	r0, r4
   20dbc:	4611      	mov	r1, r2
   20dbe:	681b      	ldr	r3, [r3, #0]
   20dc0:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20dc2:	4604      	mov	r4, r0
   20dc4:	b968      	cbnz	r0, 20de2 <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20dc6:	4b12      	ldr	r3, [pc, #72]	; (20e10 <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>)
   20dc8:	4639      	mov	r1, r7
   20dca:	9301      	str	r3, [sp, #4]
   20dcc:	f240 33a2 	movw	r3, #930	; 0x3a2
   20dd0:	4638      	mov	r0, r7
   20dd2:	9300      	str	r3, [sp, #0]
   20dd4:	4a0f      	ldr	r2, [pc, #60]	; (20e14 <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>)
   20dd6:	4b10      	ldr	r3, [pc, #64]	; (20e18 <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x70>)
   20dd8:	f00f f8c0 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20ddc:	2001      	movs	r0, #1
}
   20dde:	b003      	add	sp, #12
   20de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_SubOptions ? static_cast<const tflite::SubOptions *>(builtin_options()) : nullptr;
   20de2:	4628      	mov	r0, r5
   20de4:	f00f f931 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20de8:	281c      	cmp	r0, #28
   20dea:	d10d      	bne.n	20e08 <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
   20dec:	4628      	mov	r0, r5
   20dee:	f00f f8d9 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20df2:	b148      	cbz	r0, 20e08 <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20df4:	2200      	movs	r2, #0
   20df6:	2104      	movs	r1, #4
   20df8:	f00f f936 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20dfc:	b2c2      	uxtb	r2, r0
  switch (activation) {
   20dfe:	1e53      	subs	r3, r2, #1
   20e00:	2b04      	cmp	r3, #4
   20e02:	bf88      	it	hi
   20e04:	2200      	movhi	r2, #0
    params->activation =
   20e06:	7022      	strb	r2, [r4, #0]
  return kTfLiteOk;
   20e08:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20e0a:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20e0c:	e7e7      	b.n	20dde <_ZN6tflite8ParseSubEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20e0e:	bf00      	nop
   20e10:	000361e7 	.word	0x000361e7
   20e14:	00034c0c 	.word	0x00034c0c
   20e18:	000361b4 	.word	0x000361b4

00020e1c <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                       BuiltinDataAllocator* allocator, void** builtin_data) {
   20e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20e1e:	4614      	mov	r4, r2
   20e20:	4605      	mov	r5, r0
   20e22:	460e      	mov	r6, r1
   20e24:	461f      	mov	r7, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20e26:	f00f f8af 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20e2a:	6823      	ldr	r3, [r4, #0]
   20e2c:	4620      	mov	r0, r4
   20e2e:	2204      	movs	r2, #4
   20e30:	2108      	movs	r1, #8
   20e32:	681b      	ldr	r3, [r3, #0]
   20e34:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20e36:	4604      	mov	r4, r0
   20e38:	b968      	cbnz	r0, 20e56 <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20e3a:	4b1a      	ldr	r3, [pc, #104]	; (20ea4 <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x88>)
   20e3c:	4631      	mov	r1, r6
   20e3e:	9301      	str	r3, [sp, #4]
   20e40:	f240 33bb 	movw	r3, #955	; 0x3bb
   20e44:	4630      	mov	r0, r6
   20e46:	9300      	str	r3, [sp, #0]
   20e48:	4a17      	ldr	r2, [pc, #92]	; (20ea8 <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8c>)
   20e4a:	4b18      	ldr	r3, [pc, #96]	; (20eac <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x90>)
   20e4c:	f00f f886 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20e50:	2001      	movs	r0, #1
}
   20e52:	b003      	add	sp, #12
   20e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_SVDFOptions ? static_cast<const tflite::SVDFOptions *>(builtin_options()) : nullptr;
   20e56:	4628      	mov	r0, r5
   20e58:	f00f f8f7 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20e5c:	2806      	cmp	r0, #6
   20e5e:	4606      	mov	r6, r0
   20e60:	d11d      	bne.n	20e9e <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x82>
   20e62:	4628      	mov	r0, r5
   20e64:	f00f f89e 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20e68:	4605      	mov	r5, r0
   20e6a:	b1c0      	cbz	r0, 20e9e <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x82>
    return GetField<int32_t>(VT_RANK, 0);
   20e6c:	2200      	movs	r2, #0
   20e6e:	2104      	movs	r1, #4
   20e70:	f00f f8f1 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
   20e74:	2200      	movs	r2, #0
   20e76:	4631      	mov	r1, r6
    params->rank = schema_params->rank();
   20e78:	6020      	str	r0, [r4, #0]
   20e7a:	4628      	mov	r0, r5
   20e7c:	f00f f8f4 	bl	30068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
   20e80:	b2c2      	uxtb	r2, r0
  switch (activation) {
   20e82:	1e53      	subs	r3, r2, #1
   20e84:	2b04      	cmp	r3, #4
   20e86:	bf88      	it	hi
   20e88:	2200      	movhi	r2, #0
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
   20e8a:	2108      	movs	r1, #8
    params->activation =
   20e8c:	7122      	strb	r2, [r4, #4]
   20e8e:	4628      	mov	r0, r5
   20e90:	2200      	movs	r2, #0
   20e92:	f00f f8d1 	bl	30038 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
   20e96:	3800      	subs	r0, #0
   20e98:	bf18      	it	ne
   20e9a:	2001      	movne	r0, #1
   20e9c:	7160      	strb	r0, [r4, #5]
  return kTfLiteOk;
   20e9e:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20ea0:	603c      	str	r4, [r7, #0]
  return kTfLiteOk;
   20ea2:	e7d6      	b.n	20e52 <_ZN6tflite9ParseSvdfEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20ea4:	000361e7 	.word	0x000361e7
   20ea8:	00034c0c 	.word	0x00034c0c
   20eac:	000361b4 	.word	0x000361b4

00020eb0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                          void** builtin_data) {
   20eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20eb2:	4614      	mov	r4, r2
   20eb4:	4605      	mov	r5, r0
   20eb6:	460f      	mov	r7, r1
   20eb8:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20eba:	f00f f865 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
   20ebe:	2204      	movs	r2, #4
   20ec0:	6823      	ldr	r3, [r4, #0]
   20ec2:	4620      	mov	r0, r4
   20ec4:	4611      	mov	r1, r2
   20ec6:	681b      	ldr	r3, [r3, #0]
   20ec8:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20eca:	4604      	mov	r4, r0
   20ecc:	b968      	cbnz	r0, 20eea <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3a>
   20ece:	4b0f      	ldr	r3, [pc, #60]	; (20f0c <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>)
   20ed0:	4639      	mov	r1, r7
   20ed2:	9301      	str	r3, [sp, #4]
   20ed4:	f44f 7351 	mov.w	r3, #836	; 0x344
   20ed8:	4638      	mov	r0, r7
   20eda:	9300      	str	r3, [sp, #0]
   20edc:	4a0c      	ldr	r2, [pc, #48]	; (20f10 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>)
   20ede:	4b0d      	ldr	r3, [pc, #52]	; (20f14 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>)
   20ee0:	f00f f83c 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20ee4:	2001      	movs	r0, #1
}
   20ee6:	b003      	add	sp, #12
   20ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
   20eea:	4628      	mov	r0, r5
   20eec:	f00f f8ad 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20ef0:	2809      	cmp	r0, #9
   20ef2:	d108      	bne.n	20f06 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
   20ef4:	4628      	mov	r0, r5
   20ef6:	f00f f855 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20efa:	b120      	cbz	r0, 20f06 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
    return GetField<float>(VT_BETA, 0.0f);
   20efc:	2200      	movs	r2, #0
   20efe:	2104      	movs	r1, #4
   20f00:	f00f f8bb 	bl	3007a <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
    params->beta = schema_params->beta();
   20f04:	6020      	str	r0, [r4, #0]
  return kTfLiteOk;
   20f06:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20f08:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20f0a:	e7ec      	b.n	20ee6 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
   20f0c:	000361e7 	.word	0x000361e7
   20f10:	00034c0c 	.word	0x00034c0c
   20f14:	000361b4 	.word	0x000361b4

00020f18 <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                        BuiltinDataAllocator* allocator, void** builtin_data) {
   20f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20f1a:	4614      	mov	r4, r2
   20f1c:	4605      	mov	r5, r0
   20f1e:	460f      	mov	r7, r1
   20f20:	461e      	mov	r6, r3
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
   20f22:	f00f f831 	bl	2ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>
                             BuiltinDataDeleter(allocator_));
   20f26:	4620      	mov	r0, r4
   20f28:	f00f f8b1 	bl	3008e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI17TfLiteSplitParamsEEPT_v>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
   20f2c:	4604      	mov	r4, r0
   20f2e:	b968      	cbnz	r0, 20f4c <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x34>
   20f30:	4b0f      	ldr	r3, [pc, #60]	; (20f70 <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>)
   20f32:	4639      	mov	r1, r7
   20f34:	9301      	str	r3, [sp, #4]
   20f36:	f44f 7357 	mov.w	r3, #860	; 0x35c
   20f3a:	4638      	mov	r0, r7
   20f3c:	9300      	str	r3, [sp, #0]
   20f3e:	4a0d      	ldr	r2, [pc, #52]	; (20f74 <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>)
   20f40:	4b0d      	ldr	r3, [pc, #52]	; (20f78 <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>)
   20f42:	f00f f80b 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   20f46:	2001      	movs	r0, #1
}
   20f48:	b003      	add	sp, #12
   20f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return builtin_options_type() == tflite::BuiltinOptions_SplitOptions ? static_cast<const tflite::SplitOptions *>(builtin_options()) : nullptr;
   20f4c:	4628      	mov	r0, r5
   20f4e:	f00f f87c 	bl	3004a <_ZNK6tflite8Operator20builtin_options_typeEv>
   20f52:	2823      	cmp	r0, #35	; 0x23
   20f54:	d108      	bne.n	20f68 <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
   20f56:	4628      	mov	r0, r5
   20f58:	f00f f824 	bl	2ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>
  if (schema_params != nullptr) {
   20f5c:	b120      	cbz	r0, 20f68 <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x50>
    return GetField<int32_t>(VT_NUM_SPLITS, 0);
   20f5e:	2200      	movs	r2, #0
   20f60:	2104      	movs	r1, #4
   20f62:	f00f f878 	bl	30056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>
    params->num_splits = schema_params->num_splits();
   20f66:	6020      	str	r0, [r4, #0]
  return kTfLiteOk;
   20f68:	2000      	movs	r0, #0
  *builtin_data = params.release();
   20f6a:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
   20f6c:	e7ec      	b.n	20f48 <_ZN6tflite10ParseSplitEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x30>
   20f6e:	bf00      	nop
   20f70:	000361e7 	.word	0x000361e7
   20f74:	00034c0c 	.word	0x00034c0c
   20f78:	000361b4 	.word	0x000361b4

00020f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>:
                        int* shift) {
   20f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20f7e:	4615      	mov	r5, r2
   20f80:	461c      	mov	r4, r3
  if (double_multiplier == 0.) {
   20f82:	2200      	movs	r2, #0
   20f84:	2300      	movs	r3, #0
                        int* shift) {
   20f86:	4606      	mov	r6, r0
   20f88:	460f      	mov	r7, r1
  if (double_multiplier == 0.) {
   20f8a:	f7ef fcf7 	bl	1097c <__aeabi_dcmpeq>
   20f8e:	b118      	cbz	r0, 20f98 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1c>
    *quantized_multiplier = 0;
   20f90:	2300      	movs	r3, #0
   20f92:	602b      	str	r3, [r5, #0]
    *shift = 0;
   20f94:	6023      	str	r3, [r4, #0]
}
   20f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const double q = std::frexp(double_multiplier, shift);
   20f98:	4622      	mov	r2, r4
   20f9a:	4630      	mov	r0, r6
   20f9c:	4639      	mov	r1, r7
   20f9e:	f001 fd63 	bl	22a68 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   20fa2:	2200      	movs	r2, #0
   20fa4:	4b11      	ldr	r3, [pc, #68]	; (20fec <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x70>)
   20fa6:	f7ef fa81 	bl	104ac <__aeabi_dmul>
   20faa:	f001 fdc3 	bl	22b34 <round>
   20fae:	f7ef fd8f 	bl	10ad0 <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   20fb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   20fb6:	460f      	mov	r7, r1
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   20fb8:	2300      	movs	r3, #0
   20fba:	4282      	cmp	r2, r0
   20fbc:	eb73 0107 	sbcs.w	r1, r3, r7
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
   20fc0:	4606      	mov	r6, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
   20fc2:	da01      	bge.n	20fc8 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x4c>
   20fc4:	f00f ff2d 	bl	30e22 <abort>
  if (q_fixed == (1ll << 31)) {
   20fc8:	429f      	cmp	r7, r3
   20fca:	bf01      	itttt	eq
   20fcc:	4296      	cmpeq	r6, r2
    ++*shift;
   20fce:	6823      	ldreq	r3, [r4, #0]
    q_fixed /= 2;
   20fd0:	f04f 4680 	moveq.w	r6, #1073741824	; 0x40000000
    ++*shift;
   20fd4:	3301      	addeq	r3, #1
   20fd6:	bf08      	it	eq
   20fd8:	6023      	streq	r3, [r4, #0]
  if (*shift < -31) {
   20fda:	6823      	ldr	r3, [r4, #0]
   20fdc:	331f      	adds	r3, #31
    *shift = 0;
   20fde:	bfbe      	ittt	lt
   20fe0:	2300      	movlt	r3, #0
    q_fixed = 0;
   20fe2:	2600      	movlt	r6, #0
    *shift = 0;
   20fe4:	6023      	strlt	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
   20fe6:	602e      	str	r6, [r5, #0]
   20fe8:	e7d5      	b.n	20f96 <_ZN6tflite18QuantizeMultiplierEdPiS0_+0x1a>
   20fea:	bf00      	nop
   20fec:	41e00000 	.word	0x41e00000

00020ff0 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_>:
                                      int* left_shift) {
   20ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20ff2:	4615      	mov	r5, r2
   20ff4:	461c      	mov	r4, r3
  TFLITE_CHECK_GT(double_multiplier, 1.);
   20ff6:	2200      	movs	r2, #0
   20ff8:	4b08      	ldr	r3, [pc, #32]	; (2101c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x2c>)
                                      int* left_shift) {
   20ffa:	4606      	mov	r6, r0
   20ffc:	460f      	mov	r7, r1
  TFLITE_CHECK_GT(double_multiplier, 1.);
   20ffe:	f7ef fce5 	bl	109cc <__aeabi_dcmpgt>
   21002:	b908      	cbnz	r0, 21008 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x18>
   21004:	f00f ff0d 	bl	30e22 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
   21008:	4623      	mov	r3, r4
   2100a:	462a      	mov	r2, r5
   2100c:	4630      	mov	r0, r6
   2100e:	4639      	mov	r1, r7
   21010:	f7ff ffb4 	bl	20f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_GE(*left_shift, 0);
   21014:	6823      	ldr	r3, [r4, #0]
   21016:	2b00      	cmp	r3, #0
   21018:	dbf4      	blt.n	21004 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPiS0_+0x14>
}
   2101a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2101c:	3ff00000 	.word	0x3ff00000

00021020 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_>:
                                         int* left_shift) {
   21020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21022:	4617      	mov	r7, r2
   21024:	461e      	mov	r6, r3
  TFLITE_CHECK_LT(double_multiplier, 1.);
   21026:	2200      	movs	r2, #0
   21028:	4b0d      	ldr	r3, [pc, #52]	; (21060 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x40>)
                                         int* left_shift) {
   2102a:	4604      	mov	r4, r0
   2102c:	460d      	mov	r5, r1
  TFLITE_CHECK_LT(double_multiplier, 1.);
   2102e:	f7ef fcaf 	bl	10990 <__aeabi_dcmplt>
   21032:	b908      	cbnz	r0, 21038 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x18>
   21034:	f00f fef5 	bl	30e22 <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
   21038:	2200      	movs	r2, #0
   2103a:	2300      	movs	r3, #0
   2103c:	4620      	mov	r0, r4
   2103e:	4629      	mov	r1, r5
   21040:	f7ef fcc4 	bl	109cc <__aeabi_dcmpgt>
   21044:	2800      	cmp	r0, #0
   21046:	d0f5      	beq.n	21034 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x14>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
   21048:	ab01      	add	r3, sp, #4
   2104a:	463a      	mov	r2, r7
   2104c:	4620      	mov	r0, r4
   2104e:	4629      	mov	r1, r5
   21050:	f7ff ff94 	bl	20f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
  TFLITE_CHECK_LE(shift, 0);
   21054:	9b01      	ldr	r3, [sp, #4]
   21056:	2b00      	cmp	r3, #0
   21058:	dcec      	bgt.n	21034 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPiS0_+0x14>
  *left_shift = shift;
   2105a:	6033      	str	r3, [r6, #0]
}
   2105c:	b003      	add	sp, #12
   2105e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21060:	3ff00000 	.word	0x3ff00000

00021064 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
   21064:	edd1 7a03 	vldr	s15, [r1, #12]
   21068:	ed92 7a03 	vldr	s14, [r2, #12]
   2106c:	ee67 7a87 	vmul.f32	s15, s15, s14
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   21070:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   21074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                              double* multiplier) {
   21078:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2107a:	461e      	mov	r6, r3
  TF_LITE_ENSURE(context, input_product_scale >= 0);
   2107c:	da09      	bge.n	21092 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2e>
   2107e:	4b0f      	ldr	r3, [pc, #60]	; (210bc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x58>)
   21080:	4a0f      	ldr	r2, [pc, #60]	; (210c0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x5c>)
   21082:	9300      	str	r3, [sp, #0]
   21084:	6944      	ldr	r4, [r0, #20]
   21086:	23a7      	movs	r3, #167	; 0xa7
   21088:	490e      	ldr	r1, [pc, #56]	; (210c4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x60>)
   2108a:	47a0      	blx	r4
   2108c:	2001      	movs	r0, #1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);

  return kTfLiteOk;
}
   2108e:	b002      	add	sp, #8
   21090:	bd70      	pop	{r4, r5, r6, pc}
  const double input_product_scale =
   21092:	ee17 0a90 	vmov	r0, s15
   21096:	f7eb fa37 	bl	c508 <__aeabi_f2d>
   2109a:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   2109c:	68f0      	ldr	r0, [r6, #12]
  const double input_product_scale =
   2109e:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
   210a0:	f7eb fa32 	bl	c508 <__aeabi_f2d>
   210a4:	460b      	mov	r3, r1
   210a6:	4602      	mov	r2, r0
   210a8:	4629      	mov	r1, r5
   210aa:	4620      	mov	r0, r4
   210ac:	f7ef fb28 	bl	10700 <__aeabi_ddiv>
   210b0:	9b06      	ldr	r3, [sp, #24]
   210b2:	e9c3 0100 	strd	r0, r1, [r3]
  return kTfLiteOk;
   210b6:	2000      	movs	r0, #0
   210b8:	e7e9      	b.n	2108e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x2a>
   210ba:	bf00      	nop
   210bc:	00036252 	.word	0x00036252
   210c0:	0003622b 	.word	0x0003622b
   210c4:	00034c0c 	.word	0x00034c0c

000210c8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
   210c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   210ca:	461d      	mov	r5, r3
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
   210cc:	7813      	ldrb	r3, [r2, #0]
                                               int32_t* act_max) {
   210ce:	b085      	sub	sp, #20
  if (output->type == kTfLiteUInt8) {
   210d0:	2b03      	cmp	r3, #3
                                               int32_t* act_max) {
   210d2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (output->type == kTfLiteUInt8) {
   210d4:	d00d      	beq.n	210f2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2a>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
   210d6:	2b09      	cmp	r3, #9
   210d8:	d01e      	beq.n	21118 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x50>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
   210da:	2b07      	cmp	r3, #7
   210dc:	d020      	beq.n	21120 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x58>
    qmin = std::numeric_limits<int16_t>::min();
    qmax = std::numeric_limits<int16_t>::max();
  } else {
    TF_LITE_ENSURE(context, false);
   210de:	4b25      	ldr	r3, [pc, #148]	; (21174 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xac>)
   210e0:	4a25      	ldr	r2, [pc, #148]	; (21178 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb0>)
   210e2:	9300      	str	r3, [sp, #0]
   210e4:	6944      	ldr	r4, [r0, #20]
   210e6:	23da      	movs	r3, #218	; 0xda
   210e8:	4924      	ldr	r1, [pc, #144]	; (2117c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb4>)
   210ea:	47a0      	blx	r4
   210ec:	2001      	movs	r0, #1
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
}
   210ee:	b005      	add	sp, #20
   210f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    qmax = std::numeric_limits<uint8_t>::max();
   210f2:	24ff      	movs	r4, #255	; 0xff
    qmin = std::numeric_limits<uint8_t>::min();
   210f4:	2600      	movs	r6, #0
  const auto zero_point = output->params.zero_point;
   210f6:	6913      	ldr	r3, [r2, #16]
  };
   210f8:	68d2      	ldr	r2, [r2, #12]
  if (activation == kTfLiteActRelu) {
   210fa:	2901      	cmp	r1, #1
  };
   210fc:	9202      	str	r2, [sp, #8]
   210fe:	9303      	str	r3, [sp, #12]
  if (activation == kTfLiteActRelu) {
   21100:	d112      	bne.n	21128 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x60>
    *act_min = std::max(qmin, quantize(0.0));
   21102:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 21180 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb8>
   21106:	a802      	add	r0, sp, #8
   21108:	f00f f818 	bl	3013c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
   2110c:	4286      	cmp	r6, r0
   2110e:	bfac      	ite	ge
   21110:	602e      	strge	r6, [r5, #0]
   21112:	6028      	strlt	r0, [r5, #0]
    *act_max = qmax;
   21114:	603c      	str	r4, [r7, #0]
   21116:	e01b      	b.n	21150 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x88>
    qmax = std::numeric_limits<int8_t>::max();
   21118:	247f      	movs	r4, #127	; 0x7f
    qmin = std::numeric_limits<int8_t>::min();
   2111a:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   2111e:	e7ea      	b.n	210f6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
    qmax = std::numeric_limits<int16_t>::max();
   21120:	f647 74ff 	movw	r4, #32767	; 0x7fff
    qmin = std::numeric_limits<int16_t>::min();
   21124:	4e17      	ldr	r6, [pc, #92]	; (21184 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xbc>)
   21126:	e7e6      	b.n	210f6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x2e>
  } else if (activation == kTfLiteActRelu6) {
   21128:	2903      	cmp	r1, #3
   2112a:	d113      	bne.n	21154 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x8c>
    *act_min = std::max(qmin, quantize(0.0));
   2112c:	ed9f 0a14 	vldr	s0, [pc, #80]	; 21180 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xb8>
   21130:	a802      	add	r0, sp, #8
   21132:	f00f f803 	bl	3013c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(6.0));
   21136:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
    *act_min = std::max(qmin, quantize(0.0));
   2113a:	4286      	cmp	r6, r0
   2113c:	bfac      	ite	ge
   2113e:	602e      	strge	r6, [r5, #0]
   21140:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
   21142:	a802      	add	r0, sp, #8
   21144:	f00e fffa 	bl	3013c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
   21148:	4284      	cmp	r4, r0
   2114a:	bfd4      	ite	le
   2114c:	603c      	strle	r4, [r7, #0]
   2114e:	6038      	strgt	r0, [r7, #0]
  return kTfLiteOk;
   21150:	2000      	movs	r0, #0
   21152:	e7cc      	b.n	210ee <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x26>
  } else if (activation == kTfLiteActReluN1To1) {
   21154:	2902      	cmp	r1, #2
   21156:	d10b      	bne.n	21170 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0xa8>
    *act_min = std::max(qmin, quantize(-1.0));
   21158:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   2115c:	a802      	add	r0, sp, #8
   2115e:	f00e ffed 	bl	3013c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>
    *act_max = std::min(qmax, quantize(1.0));
   21162:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    *act_min = std::max(qmin, quantize(-1.0));
   21166:	4286      	cmp	r6, r0
   21168:	bfac      	ite	ge
   2116a:	602e      	strge	r6, [r5, #0]
   2116c:	6028      	strlt	r0, [r5, #0]
    *act_max = std::min(qmax, quantize(1.0));
   2116e:	e7e8      	b.n	21142 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x7a>
    *act_min = qmin;
   21170:	602e      	str	r6, [r5, #0]
   21172:	e7cf      	b.n	21114 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_+0x4c>
   21174:	0003628d 	.word	0x0003628d
   21178:	0003622b 	.word	0x0003622b
   2117c:	00034c0c 	.word	0x00034c0c
   21180:	00000000 	.word	0x00000000
   21184:	ffff8000 	.word	0xffff8000

00021188 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   21188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2118c:	ed2d 8b04 	vpush	{d8-d9}
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   21190:	f891 8030 	ldrb.w	r8, [r1, #48]	; 0x30
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   21194:	4604      	mov	r4, r0
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   21196:	f1b8 0f01 	cmp.w	r8, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
   2119a:	460d      	mov	r5, r1
   2119c:	4616      	mov	r6, r2
   2119e:	ee09 3a10 	vmov	s18, r3
   211a2:	b08b      	sub	sp, #44	; 0x2c
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
   211a4:	d011      	beq.n	211ca <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x42>
   211a6:	2701      	movs	r7, #1
   211a8:	4b74      	ldr	r3, [pc, #464]	; (2137c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f4>)
   211aa:	e9cd 8702 	strd	r8, r7, [sp, #8]
   211ae:	9301      	str	r3, [sp, #4]
   211b0:	4b73      	ldr	r3, [pc, #460]	; (21380 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f8>)
   211b2:	4a74      	ldr	r2, [pc, #464]	; (21384 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   211b4:	9300      	str	r3, [sp, #0]
   211b6:	6944      	ldr	r4, [r0, #20]
   211b8:	2335      	movs	r3, #53	; 0x35
   211ba:	4973      	ldr	r1, [pc, #460]	; (21388 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   211bc:	47a0      	blx	r4
}
   211be:	4638      	mov	r0, r7
   211c0:	b00b      	add	sp, #44	; 0x2c
   211c2:	ecbd 8b04 	vpop	{d8-d9}
   211c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
   211ca:	f892 7030 	ldrb.w	r7, [r2, #48]	; 0x30
   211ce:	2f01      	cmp	r7, #1
   211d0:	d00c      	beq.n	211ec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x64>
   211d2:	4b6a      	ldr	r3, [pc, #424]	; (2137c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1f4>)
   211d4:	e9cd 7802 	strd	r7, r8, [sp, #8]
   211d8:	9301      	str	r3, [sp, #4]
   211da:	4b6c      	ldr	r3, [pc, #432]	; (2138c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x204>)
   211dc:	4a69      	ldr	r2, [pc, #420]	; (21384 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   211de:	9300      	str	r3, [sp, #0]
   211e0:	6944      	ldr	r4, [r0, #20]
   211e2:	2337      	movs	r3, #55	; 0x37
   211e4:	4968      	ldr	r1, [pc, #416]	; (21388 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   211e6:	47a0      	blx	r4
   211e8:	4647      	mov	r7, r8
   211ea:	e7e8      	b.n	211be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  const auto* affine_quantization =
   211ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
  TF_LITE_ENSURE(context, affine_quantization);
   211ee:	b93a      	cbnz	r2, 21200 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x78>
   211f0:	4b67      	ldr	r3, [pc, #412]	; (21390 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x208>)
   211f2:	9300      	str	r3, [sp, #0]
   211f4:	2342      	movs	r3, #66	; 0x42
   211f6:	6944      	ldr	r4, [r0, #20]
    TF_LITE_ENSURE(context,
   211f8:	4a62      	ldr	r2, [pc, #392]	; (21384 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   211fa:	4966      	ldr	r1, [pc, #408]	; (21394 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x20c>)
   211fc:	47a0      	blx	r4
   211fe:	e7de      	b.n	211be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  TF_LITE_ENSURE(context, affine_quantization->scale);
   21200:	f8d2 b000 	ldr.w	fp, [r2]
   21204:	f1bb 0f00 	cmp.w	fp, #0
   21208:	d104      	bne.n	21214 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x8c>
   2120a:	4b63      	ldr	r3, [pc, #396]	; (21398 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x210>)
   2120c:	9300      	str	r3, [sp, #0]
   2120e:	6944      	ldr	r4, [r0, #20]
   21210:	2343      	movs	r3, #67	; 0x43
   21212:	e7f1      	b.n	211f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x70>
  const bool is_per_channel = affine_quantization->scale->size > 1;
   21214:	f8db a000 	ldr.w	sl, [fp]
  if (is_per_channel) {
   21218:	f1ba 0f01 	cmp.w	sl, #1
   2121c:	dd37      	ble.n	2128e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x106>
    TF_LITE_ENSURE(context,
   2121e:	780b      	ldrb	r3, [r1, #0]
   21220:	2b09      	cmp	r3, #9
   21222:	d006      	beq.n	21232 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xaa>
   21224:	2b07      	cmp	r3, #7
   21226:	d004      	beq.n	21232 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xaa>
   21228:	4b5c      	ldr	r3, [pc, #368]	; (2139c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x214>)
   2122a:	9300      	str	r3, [sp, #0]
   2122c:	6944      	ldr	r4, [r0, #20]
   2122e:	2347      	movs	r3, #71	; 0x47
   21230:	e7e2      	b.n	211f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x70>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
   21232:	7833      	ldrb	r3, [r6, #0]
   21234:	2b09      	cmp	r3, #9
   21236:	d00d      	beq.n	21254 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xcc>
   21238:	2209      	movs	r2, #9
   2123a:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2123e:	4b58      	ldr	r3, [pc, #352]	; (213a0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x218>)
   21240:	9301      	str	r3, [sp, #4]
   21242:	4b58      	ldr	r3, [pc, #352]	; (213a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x21c>)
   21244:	9300      	str	r3, [sp, #0]
   21246:	2349      	movs	r3, #73	; 0x49
   21248:	6965      	ldr	r5, [r4, #20]
    TF_LITE_ENSURE_EQ(
   2124a:	4620      	mov	r0, r4
   2124c:	4a4d      	ldr	r2, [pc, #308]	; (21384 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1fc>)
   2124e:	494e      	ldr	r1, [pc, #312]	; (21388 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x200>)
   21250:	47a8      	blx	r5
   21252:	e7b4      	b.n	211be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
   21254:	9b20      	ldr	r3, [sp, #128]	; 0x80
   21256:	4553      	cmp	r3, sl
   21258:	d008      	beq.n	2126c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xe4>
   2125a:	e9cd a302 	strd	sl, r3, [sp, #8]
   2125e:	4b52      	ldr	r3, [pc, #328]	; (213a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
   21260:	9301      	str	r3, [sp, #4]
   21262:	4b52      	ldr	r3, [pc, #328]	; (213ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x224>)
   21264:	9300      	str	r3, [sp, #0]
   21266:	6965      	ldr	r5, [r4, #20]
   21268:	234a      	movs	r3, #74	; 0x4a
   2126a:	e7ee      	b.n	2124a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc2>
    TF_LITE_ENSURE_EQ(
   2126c:	6892      	ldr	r2, [r2, #8]
   2126e:	68b3      	ldr	r3, [r6, #8]
   21270:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   21274:	685b      	ldr	r3, [r3, #4]
   21276:	9a20      	ldr	r2, [sp, #128]	; 0x80
   21278:	429a      	cmp	r2, r3
   2127a:	d008      	beq.n	2128e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x106>
   2127c:	9303      	str	r3, [sp, #12]
   2127e:	4b4c      	ldr	r3, [pc, #304]	; (213b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x228>)
   21280:	9202      	str	r2, [sp, #8]
   21282:	9301      	str	r3, [sp, #4]
   21284:	4b48      	ldr	r3, [pc, #288]	; (213a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x220>)
   21286:	9300      	str	r3, [sp, #0]
   21288:	6965      	ldr	r5, [r4, #20]
   2128a:	234b      	movs	r3, #75	; 0x4b
   2128c:	e7dd      	b.n	2124a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0xc2>
  const float input_scale = input->params.scale;
   2128e:	edd5 7a03 	vldr	s15, [r5, #12]
  const float output_scale = output->params.scale;
   21292:	9b18      	ldr	r3, [sp, #96]	; 0x60
  const float input_scale = input->params.scale;
   21294:	eeb0 8a67 	vmov.f32	s16, s15
  const float output_scale = output->params.scale;
   21298:	edd3 7a03 	vldr	s15, [r3, #12]
  for (int i = 0; i < num_channels; ++i) {
   2129c:	2700      	movs	r7, #0
  const float output_scale = output->params.scale;
   2129e:	eef0 8a67 	vmov.f32	s17, s15
  for (int i = 0; i < num_channels; ++i) {
   212a2:	f10b 0304 	add.w	r3, fp, #4
   212a6:	9305      	str	r3, [sp, #20]
   212a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
   212aa:	42bb      	cmp	r3, r7
   212ac:	dd31      	ble.n	21312 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x18a>
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
   212ae:	f1ba 0f01 	cmp.w	sl, #1
   212b2:	bfca      	itet	gt
   212b4:	9b05      	ldrgt	r3, [sp, #20]
   212b6:	f8db 0004 	ldrle.w	r0, [fp, #4]
   212ba:	6818      	ldrgt	r0, [r3, #0]
    const double filter_scale = static_cast<double>(scale);
   212bc:	f7eb f924 	bl	c508 <__aeabi_f2d>
   212c0:	4680      	mov	r8, r0
    const double effective_output_scale = static_cast<double>(input_scale) *
   212c2:	ee18 0a10 	vmov	r0, s16
    const double filter_scale = static_cast<double>(scale);
   212c6:	4689      	mov	r9, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   212c8:	f7eb f91e 	bl	c508 <__aeabi_f2d>
   212cc:	4602      	mov	r2, r0
   212ce:	460b      	mov	r3, r1
   212d0:	4640      	mov	r0, r8
   212d2:	4649      	mov	r1, r9
   212d4:	f7ef f8ea 	bl	104ac <__aeabi_dmul>
   212d8:	4680      	mov	r8, r0
                                          static_cast<double>(output_scale);
   212da:	ee18 0a90 	vmov	r0, s17
    const double effective_output_scale = static_cast<double>(input_scale) *
   212de:	4689      	mov	r9, r1
                                          static_cast<double>(output_scale);
   212e0:	f7eb f912 	bl	c508 <__aeabi_f2d>
   212e4:	4602      	mov	r2, r0
   212e6:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
   212e8:	4640      	mov	r0, r8
   212ea:	4649      	mov	r1, r9
   212ec:	f7ef fa08 	bl	10700 <__aeabi_ddiv>
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
   212f0:	ab08      	add	r3, sp, #32
   212f2:	aa07      	add	r2, sp, #28
   212f4:	f7ff fe42 	bl	20f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    per_channel_multiplier[i] = significand;
   212f8:	9b07      	ldr	r3, [sp, #28]
   212fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   212fc:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
    per_channel_shift[i] = channel_shift;
   21300:	9b08      	ldr	r3, [sp, #32]
   21302:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   21304:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
  for (int i = 0; i < num_channels; ++i) {
   21308:	9b05      	ldr	r3, [sp, #20]
   2130a:	3701      	adds	r7, #1
   2130c:	3304      	adds	r3, #4
   2130e:	9305      	str	r3, [sp, #20]
   21310:	e7ca      	b.n	212a8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x120>
  if (input->type == kTfLiteUInt8) {
   21312:	782b      	ldrb	r3, [r5, #0]
   21314:	2b03      	cmp	r3, #3
   21316:	d11c      	bne.n	21352 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ca>
    double real_multiplier = 0.0;
   21318:	2200      	movs	r2, #0
   2131a:	2300      	movs	r3, #0
   2131c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
   21320:	ab08      	add	r3, sp, #32
   21322:	9301      	str	r3, [sp, #4]
   21324:	9b18      	ldr	r3, [sp, #96]	; 0x60
   21326:	4632      	mov	r2, r6
   21328:	9300      	str	r3, [sp, #0]
   2132a:	4629      	mov	r1, r5
   2132c:	ee19 3a10 	vmov	r3, s18
   21330:	4620      	mov	r0, r4
   21332:	f7f0 fc2d 	bl	11b90 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
   21336:	4607      	mov	r7, r0
   21338:	2800      	cmp	r0, #0
   2133a:	f47f af40 	bne.w	211be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
   2133e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   21342:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   21344:	ab07      	add	r3, sp, #28
   21346:	f7ff fe19 	bl	20f7c <_ZN6tflite18QuantizeMultiplierEdPiS0_>
    *shift = -exponent;
   2134a:	9b07      	ldr	r3, [sp, #28]
   2134c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2134e:	425b      	negs	r3, r3
   21350:	6013      	str	r3, [r2, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
   21352:	782b      	ldrb	r3, [r5, #0]
   21354:	2b09      	cmp	r3, #9
   21356:	d003      	beq.n	21360 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1d8>
   21358:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2135c:	2b03      	cmp	r3, #3
   2135e:	d10a      	bne.n	21376 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x1ee>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
   21360:	e9dd 2118 	ldrd	r2, r1, [sp, #96]	; 0x60
   21364:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   21366:	4620      	mov	r0, r4
   21368:	9300      	str	r3, [sp, #0]
   2136a:	7809      	ldrb	r1, [r1, #0]
   2136c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   2136e:	f7ff feab 	bl	210c8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPiS5_>
   21372:	4607      	mov	r7, r0
   21374:	e723      	b.n	211be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
  return kTfLiteOk;
   21376:	2700      	movs	r7, #0
   21378:	e721      	b.n	211be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPiS9_S9_S9_S9_S9_i+0x36>
   2137a:	bf00      	nop
   2137c:	00034dd6 	.word	0x00034dd6
   21380:	00036293 	.word	0x00036293
   21384:	0003622b 	.word	0x0003622b
   21388:	00034aec 	.word	0x00034aec
   2138c:	00034df0 	.word	0x00034df0
   21390:	00034e0a 	.word	0x00034e0a
   21394:	00034c0c 	.word	0x00034c0c
   21398:	00034e1e 	.word	0x00034e1e
   2139c:	00035016 	.word	0x00035016
   213a0:	00035f09 	.word	0x00035f09
   213a4:	000362ac 	.word	0x000362ac
   213a8:	000362b9 	.word	0x000362b9
   213ac:	00034ef8 	.word	0x00034ef8
   213b0:	000362c6 	.word	0x000362c6

000213b4 <DebugLog>:

#include "tensorflow/lite/micro/debug_log.h"

#include <cstdio>

extern "C" void DebugLog(const char* s) { fprintf(stderr, "%s", s); }
   213b4:	4b03      	ldr	r3, [pc, #12]	; (213c4 <DebugLog+0x10>)
   213b6:	4602      	mov	r2, r0
   213b8:	681b      	ldr	r3, [r3, #0]
   213ba:	4903      	ldr	r1, [pc, #12]	; (213c8 <DebugLog+0x14>)
   213bc:	68d8      	ldr	r0, [r3, #12]
   213be:	f003 bf4d 	b.w	2525c <fiprintf>
   213c2:	bf00      	nop
   213c4:	20020058 	.word	0x20020058
   213c8:	00033e84 	.word	0x00033e84

000213cc <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:
                                              aligned_arena_size),
                error_reporter);
}

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
   213cc:	b538      	push	{r3, r4, r5, lr}
   213ce:	460d      	mov	r5, r1
  TFLITE_DCHECK(memory_allocator != nullptr);
   213d0:	4604      	mov	r4, r0
   213d2:	b908      	cbnz	r0, 213d8 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0xc>
   213d4:	f00f fd25 	bl	30e22 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   213d8:	2900      	cmp	r1, #0
   213da:	d0fb      	beq.n	213d4 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x8>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
   213dc:	6803      	ldr	r3, [r0, #0]
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
   213de:	2204      	movs	r2, #4
   213e0:	2118      	movs	r1, #24
   213e2:	68db      	ldr	r3, [r3, #12]
   213e4:	4798      	blx	r3
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
   213e6:	b138      	cbz	r0, 213f8 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x2c>
      model_is_allocating_(false) {}
   213e8:	4b04      	ldr	r3, [pc, #16]	; (213fc <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x30>)
   213ea:	6085      	str	r5, [r0, #8]
   213ec:	e9c0 3400 	strd	r3, r4, [r0]
   213f0:	2300      	movs	r3, #0
   213f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   213f6:	7303      	strb	r3, [r0, #12]
  return allocator;
}
   213f8:	bd38      	pop	{r3, r4, r5, pc}
   213fa:	bf00      	nop
   213fc:	0003321c 	.word	0x0003321c

00021400 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
   21400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21402:	460f      	mov	r7, r1
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   21404:	2110      	movs	r1, #16
                                       ErrorReporter* error_reporter) {
   21406:	4604      	mov	r4, r0
   21408:	4616      	mov	r6, r2
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   2140a:	f00e feb7 	bl	3017c <_ZN6tflite14AlignPointerUpEPhj>
  if (aligned_arena != tensor_arena) {
   2140e:	4284      	cmp	r4, r0
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
   21410:	4605      	mov	r5, r0
  if (aligned_arena != tensor_arena) {
   21412:	d004      	beq.n	2141e <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x1e>
    TF_LITE_REPORT_ERROR(
   21414:	1b02      	subs	r2, r0, r4
   21416:	4907      	ldr	r1, [pc, #28]	; (21434 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x34>)
   21418:	4630      	mov	r0, r6
   2141a:	f00e fd91 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
   2141e:	19e2      	adds	r2, r4, r7
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
   21420:	4629      	mov	r1, r5
   21422:	4630      	mov	r0, r6
   21424:	1b52      	subs	r2, r2, r5
   21426:	f000 fe1d 	bl	22064 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
   2142a:	4631      	mov	r1, r6
}
   2142c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
   21430:	f7ff bfcc 	b.w	213cc <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
   21434:	00036303 	.word	0x00036303

00021438 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>:
  model_is_allocating_ = false;
  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocatePersistentBuffer(size_t bytes,
                                                      void** ptr) {
   21438:	b570      	push	{r4, r5, r6, lr}
   2143a:	4604      	mov	r4, r0
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   2143c:	6840      	ldr	r0, [r0, #4]
                                                      void** ptr) {
   2143e:	4615      	mov	r5, r2
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   21440:	6803      	ldr	r3, [r0, #0]
   21442:	2210      	movs	r2, #16
   21444:	68db      	ldr	r3, [r3, #12]
                                                      void** ptr) {
   21446:	460e      	mov	r6, r1
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
   21448:	4798      	blx	r3
  if (data == nullptr) {
   2144a:	b930      	cbnz	r0, 2145a <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
   2144c:	4632      	mov	r2, r6
   2144e:	4904      	ldr	r1, [pc, #16]	; (21460 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x28>)
   21450:	68a0      	ldr	r0, [r4, #8]
   21452:	f00e fd75 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate persistent buffer of size %d",
                         bytes);
    return kTfLiteError;
   21456:	2001      	movs	r0, #1
  }
  (*ptr) = data;
  return kTfLiteOk;
}
   21458:	bd70      	pop	{r4, r5, r6, pc}
  (*ptr) = data;
   2145a:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
   2145c:	2000      	movs	r0, #0
   2145e:	e7fb      	b.n	21458 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x20>
   21460:	0003636e 	.word	0x0003636e

00021464 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(int node_id,
                                                         size_t bytes,
                                                         int* buffer_idx) {
   21464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // A sanity check to make sure scratch_buffer_handles_ is contiguous i.e.
  // scratch_buffer_handles_ is pointing to the last allocation from memory
  // allocator.
  if (scratch_buffer_handles_ != nullptr &&
   21468:	6905      	ldr	r5, [r0, #16]
                                                         int* buffer_idx) {
   2146a:	4604      	mov	r4, r0
   2146c:	460e      	mov	r6, r1
   2146e:	4690      	mov	r8, r2
   21470:	461f      	mov	r7, r3
  if (scratch_buffer_handles_ != nullptr &&
   21472:	b15d      	cbz	r5, 2148c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
      reinterpret_cast<uint8_t*>(scratch_buffer_handles_) !=
          memory_allocator_->GetTail()) {
   21474:	6840      	ldr	r0, [r0, #4]
   21476:	f00e ff6a 	bl	3034e <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
  if (scratch_buffer_handles_ != nullptr &&
   2147a:	4285      	cmp	r5, r0
   2147c:	d006      	beq.n	2148c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
   2147e:	4910      	ldr	r1, [pc, #64]	; (214c0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x5c>)
   21480:	68a0      	ldr	r0, [r4, #8]
   21482:	f00e fd5d 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
              alignof(internal::ScratchBufferHandle)));
  if (handle == nullptr) {
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Failed to register scratch buffer handle for node %s",
                         node_id);
    return kTfLiteError;
   21486:	2001      	movs	r0, #1
  scratch_buffer_count_ += 1;
  // scratch_buffer_handles_ is in reverse order. The following code ensures
  // that scratch_buffers[0] is pointing to the newly allocated handle.
  scratch_buffer_handles_ = handle;
  return kTfLiteOk;
}
   21488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          memory_allocator_->AllocateFromTail(
   2148c:	6860      	ldr	r0, [r4, #4]
   2148e:	2204      	movs	r2, #4
              alignof(internal::ScratchBufferHandle)));
   21490:	6803      	ldr	r3, [r0, #0]
          memory_allocator_->AllocateFromTail(
   21492:	210c      	movs	r1, #12
   21494:	68db      	ldr	r3, [r3, #12]
   21496:	4798      	blx	r3
  if (handle == nullptr) {
   21498:	b928      	cbnz	r0, 214a6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
   2149a:	4632      	mov	r2, r6
   2149c:	4909      	ldr	r1, [pc, #36]	; (214c4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x60>)
   2149e:	68a0      	ldr	r0, [r4, #8]
   214a0:	f00e fd4e 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   214a4:	e7ef      	b.n	21486 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x22>
  *handle = {};
   214a6:	2500      	movs	r5, #0
  *buffer_idx = scratch_buffer_count_;
   214a8:	6963      	ldr	r3, [r4, #20]
  handle->bytes = bytes;
   214aa:	e9c0 5800 	strd	r5, r8, [r0]
  handle->node_idx = node_id;
   214ae:	6086      	str	r6, [r0, #8]
  *buffer_idx = scratch_buffer_count_;
   214b0:	603b      	str	r3, [r7, #0]
  scratch_buffer_count_ += 1;
   214b2:	6963      	ldr	r3, [r4, #20]
   214b4:	3301      	adds	r3, #1
  scratch_buffer_handles_ = handle;
   214b6:	e9c4 0304 	strd	r0, r3, [r4, #16]
  return kTfLiteOk;
   214ba:	4628      	mov	r0, r5
   214bc:	e7e4      	b.n	21488 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x24>
   214be:	bf00      	nop
   214c0:	0003639e 	.word	0x0003639e
   214c4:	00036400 	.word	0x00036400

000214c8 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:

void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
   214c8:	b508      	push	{r3, lr}
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
   214ca:	6943      	ldr	r3, [r0, #20]
void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
   214cc:	460a      	mov	r2, r1
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
   214ce:	428b      	cmp	r3, r1
   214d0:	d805      	bhi.n	214de <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x16>
    TF_LITE_REPORT_ERROR(error_reporter_,
   214d2:	4907      	ldr	r1, [pc, #28]	; (214f0 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>)
   214d4:	6880      	ldr	r0, [r0, #8]
   214d6:	f00e fd33 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Buffer %d not found. %d buffers available.",
                         buffer_idx, scratch_buffer_count_);
    return nullptr;
   214da:	2000      	movs	r0, #0
  }
  // scratch_buffer_handles_ is in reverse order.
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
}
   214dc:	bd08      	pop	{r3, pc}
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
   214de:	220c      	movs	r2, #12
   214e0:	1a59      	subs	r1, r3, r1
   214e2:	6903      	ldr	r3, [r0, #16]
   214e4:	fb02 3101 	mla	r1, r2, r1, r3
   214e8:	f851 0c0c 	ldr.w	r0, [r1, #-12]
   214ec:	e7f6      	b.n	214dc <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x14>
   214ee:	bf00      	nop
   214f0:	00036435 	.word	0x00036435

000214f4 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
   214f4:	b538      	push	{r3, r4, r5, lr}
   214f6:	460c      	mov	r4, r1
   214f8:	4605      	mov	r5, r0
    auto field_offset = GetOptionalFieldOffset(field);
   214fa:	2108      	movs	r1, #8
   214fc:	4620      	mov	r0, r4
   214fe:	f005 ffec 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21502:	b178      	cbz	r0, 21524 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x30>
   21504:	5822      	ldr	r2, [r4, r0]
    auto p = data_ + field_offset;
   21506:	1821      	adds	r1, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21508:	188b      	adds	r3, r1, r2
  auto* subgraphs = model->subgraphs();
  if (subgraphs->size() != 1) {
   2150a:	588a      	ldr	r2, [r1, r2]
   2150c:	2a01      	cmp	r2, #1
   2150e:	d005      	beq.n	2151c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
   21510:	4905      	ldr	r1, [pc, #20]	; (21528 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x34>)
   21512:	68a8      	ldr	r0, [r5, #8]
   21514:	f00e fd14 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   21518:	2000      	movs	r0, #0
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
  }
  return (*subgraphs)[0];
}
   2151a:	bd38      	pop	{r3, r4, r5, pc}
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   2151c:	1d18      	adds	r0, r3, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   2151e:	685b      	ldr	r3, [r3, #4]
   21520:	4418      	add	r0, r3
  return (*subgraphs)[0];
   21522:	e7fa      	b.n	2151a <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x26>
  if (subgraphs->size() != 1) {
   21524:	6803      	ldr	r3, [r0, #0]
   21526:	deff      	udf	#255	; 0xff
   21528:	00034203 	.word	0x00034203

0002152c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>:
    NodeAndRegistration** node_and_registrations) {
   2152c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21530:	f8dd 8020 	ldr.w	r8, [sp, #32]
   21534:	4604      	mov	r4, r0
   21536:	4691      	mov	r9, r2
   21538:	461f      	mov	r7, r3
  TFLITE_DCHECK(model != nullptr);
   2153a:	460e      	mov	r6, r1
   2153c:	b909      	cbnz	r1, 21542 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x16>
   2153e:	f00f fc70 	bl	30e22 <abort>
  TFLITE_DCHECK(context != nullptr);
   21542:	2a00      	cmp	r2, #0
   21544:	d0fb      	beq.n	2153e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x12>
  if (model_is_allocating_) {
   21546:	7b03      	ldrb	r3, [r0, #12]
   21548:	b133      	cbz	r3, 21558 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
   2154a:	491b      	ldr	r1, [pc, #108]	; (215b8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x8c>)
   2154c:	6880      	ldr	r0, [r0, #8]
   2154e:	f00e fcf7 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   21552:	2001      	movs	r0, #1
}
   21554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  const SubGraph* subgraph = GetSubGraphFromModel(model);
   21558:	f7ff ffcc 	bl	214f4 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
  TFLITE_DCHECK(subgraph != nullptr);
   2155c:	4605      	mov	r5, r0
   2155e:	2800      	cmp	r0, #0
   21560:	d0ed      	beq.n	2153e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x12>
  model_is_allocating_ = true;
   21562:	2301      	movs	r3, #1
   21564:	7323      	strb	r3, [r4, #12]
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
   21566:	6823      	ldr	r3, [r4, #0]
   21568:	4602      	mov	r2, r0
   2156a:	4649      	mov	r1, r9
   2156c:	4620      	mov	r0, r4
   2156e:	689b      	ldr	r3, [r3, #8]
   21570:	4798      	blx	r3
   21572:	2800      	cmp	r0, #0
   21574:	d1ee      	bne.n	21554 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x28>
  TF_LITE_ENSURE_STATUS(
   21576:	6823      	ldr	r3, [r4, #0]
   21578:	464a      	mov	r2, r9
   2157a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
   2157e:	4631      	mov	r1, r6
   21580:	462b      	mov	r3, r5
   21582:	4620      	mov	r0, r4
   21584:	47d0      	blx	sl
   21586:	2800      	cmp	r0, #0
   21588:	d1e4      	bne.n	21554 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x28>
  TF_LITE_ENSURE_STATUS(
   2158a:	6823      	ldr	r3, [r4, #0]
   2158c:	4642      	mov	r2, r8
   2158e:	4629      	mov	r1, r5
   21590:	4620      	mov	r0, r4
   21592:	691b      	ldr	r3, [r3, #16]
   21594:	4798      	blx	r3
   21596:	2800      	cmp	r0, #0
   21598:	d1dc      	bne.n	21554 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x28>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
   2159a:	f8d8 2000 	ldr.w	r2, [r8]
   2159e:	6823      	ldr	r3, [r4, #0]
   215a0:	9208      	str	r2, [sp, #32]
   215a2:	f8d3 e014 	ldr.w	lr, [r3, #20]
   215a6:	462a      	mov	r2, r5
   215a8:	463b      	mov	r3, r7
   215aa:	4631      	mov	r1, r6
   215ac:	4620      	mov	r0, r4
   215ae:	46f4      	mov	ip, lr
}
   215b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
   215b4:	4760      	bx	ip
   215b6:	bf00      	nop
   215b8:	00036460 	.word	0x00036460

000215bc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>:
  if (!model_is_allocating_) {
   215bc:	7b03      	ldrb	r3, [r0, #12]
                                                   TfLiteContext* context) {
   215be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   215c2:	4604      	mov	r4, r0
   215c4:	460f      	mov	r7, r1
   215c6:	4616      	mov	r6, r2
  if (!model_is_allocating_) {
   215c8:	b933      	cbnz	r3, 215d8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x1c>
    TF_LITE_REPORT_ERROR(error_reporter_,
   215ca:	4910      	ldr	r1, [pc, #64]	; (2160c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x50>)
   215cc:	6880      	ldr	r0, [r0, #8]
   215ce:	f00e fcb7 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
   215d2:	2001      	movs	r0, #1
}
   215d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  const SubGraph* subgraph = GetSubGraphFromModel(model);
   215d8:	f7ff ff8c 	bl	214f4 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
  TFLITE_DCHECK(subgraph != nullptr);
   215dc:	4605      	mov	r5, r0
   215de:	b908      	cbnz	r0, 215e4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x28>
   215e0:	f00f fc1f 	bl	30e22 <abort>
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, context, subgraph));
   215e4:	6823      	ldr	r3, [r4, #0]
   215e6:	4632      	mov	r2, r6
   215e8:	f8d3 801c 	ldr.w	r8, [r3, #28]
   215ec:	4639      	mov	r1, r7
   215ee:	4603      	mov	r3, r0
   215f0:	4620      	mov	r0, r4
   215f2:	47c0      	blx	r8
   215f4:	2800      	cmp	r0, #0
   215f6:	d1ed      	bne.n	215d4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
  TF_LITE_ENSURE_STATUS(AllocateVariables(context, subgraph));
   215f8:	6823      	ldr	r3, [r4, #0]
   215fa:	462a      	mov	r2, r5
   215fc:	4631      	mov	r1, r6
   215fe:	4620      	mov	r0, r4
   21600:	699b      	ldr	r3, [r3, #24]
   21602:	4798      	blx	r3
   21604:	2800      	cmp	r0, #0
   21606:	d1e5      	bne.n	215d4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
  model_is_allocating_ = false;
   21608:	7320      	strb	r0, [r4, #12]
  return kTfLiteOk;
   2160a:	e7e3      	b.n	215d4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x18>
   2160c:	000364b5 	.word	0x000364b5

00021610 <_ZNK11flatbuffers6VectorIxE3GetEj>:
  return_type Get(uoffset_t i) const {
   21610:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   21612:	6803      	ldr	r3, [r0, #0]
   21614:	4299      	cmp	r1, r3
   21616:	d306      	bcc.n	21626 <_ZNK11flatbuffers6VectorIxE3GetEj+0x16>
   21618:	f240 1101 	movw	r1, #257	; 0x101
   2161c:	4b04      	ldr	r3, [pc, #16]	; (21630 <_ZNK11flatbuffers6VectorIxE3GetEj+0x20>)
   2161e:	4a05      	ldr	r2, [pc, #20]	; (21634 <_ZNK11flatbuffers6VectorIxE3GetEj+0x24>)
   21620:	4805      	ldr	r0, [pc, #20]	; (21638 <_ZNK11flatbuffers6VectorIxE3GetEj+0x28>)
   21622:	f004 ff25 	bl	26470 <__assert_func>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   21626:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
  }
   2162a:	e9d1 0101 	ldrd	r0, r1, [r1, #4]
   2162e:	bd08      	pop	{r3, pc}
   21630:	0003422c 	.word	0x0003422c
   21634:	00036500 	.word	0x00036500
   21638:	000342f6 	.word	0x000342f6

0002163c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
   2163c:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   2163e:	6803      	ldr	r3, [r0, #0]
   21640:	4299      	cmp	r1, r3
   21642:	d306      	bcc.n	21652 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x16>
   21644:	f240 1101 	movw	r1, #257	; 0x101
   21648:	4b05      	ldr	r3, [pc, #20]	; (21660 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x24>)
   2164a:	4a06      	ldr	r2, [pc, #24]	; (21664 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x28>)
   2164c:	4806      	ldr	r0, [pc, #24]	; (21668 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj+0x2c>)
   2164e:	f004 ff0f 	bl	26470 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   21652:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
   21654:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   21658:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
   2165c:	4410      	add	r0, r2
   2165e:	bd08      	pop	{r3, pc}
   21660:	0003422c 	.word	0x0003422c
   21664:	000365d3 	.word	0x000365d3
   21668:	000342f6 	.word	0x000342f6

0002166c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
   2166c:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   2166e:	6803      	ldr	r3, [r0, #0]
   21670:	4299      	cmp	r1, r3
   21672:	d306      	bcc.n	21682 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x16>
   21674:	f240 1101 	movw	r1, #257	; 0x101
   21678:	4b05      	ldr	r3, [pc, #20]	; (21690 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x24>)
   2167a:	4a06      	ldr	r2, [pc, #24]	; (21694 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x28>)
   2167c:	4806      	ldr	r0, [pc, #24]	; (21698 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj+0x2c>)
   2167e:	f004 fef7 	bl	26470 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   21682:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
   21684:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   21688:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
   2168c:	4410      	add	r0, r2
   2168e:	bd08      	pop	{r3, pc}
   21690:	0003422c 	.word	0x0003422c
   21694:	000366c4 	.word	0x000366c4
   21698:	000342f6 	.word	0x000342f6

0002169c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>:
  return_type Get(uoffset_t i) const {
   2169c:	b508      	push	{r3, lr}
    FLATBUFFERS_ASSERT(i < size());
   2169e:	6803      	ldr	r3, [r0, #0]
   216a0:	4299      	cmp	r1, r3
   216a2:	d306      	bcc.n	216b2 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x16>
   216a4:	f240 1101 	movw	r1, #257	; 0x101
   216a8:	4b05      	ldr	r3, [pc, #20]	; (216c0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x24>)
   216aa:	4a06      	ldr	r2, [pc, #24]	; (216c4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x28>)
   216ac:	4806      	ldr	r0, [pc, #24]	; (216c8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj+0x2c>)
   216ae:	f004 fedf 	bl	26470 <__assert_func>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   216b2:	3004      	adds	r0, #4
    p += i * sizeof(uoffset_t);
   216b4:	eb00 0281 	add.w	r2, r0, r1, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   216b8:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
  }
   216bc:	4410      	add	r0, r2
   216be:	bd08      	pop	{r3, pc}
   216c0:	0003422c 	.word	0x0003422c
   216c4:	000367b9 	.word	0x000367b9
   216c8:	000342f6 	.word	0x000342f6

000216cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
   216cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   216d0:	460d      	mov	r5, r1
   216d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  *result = {};
   216d4:	2100      	movs	r1, #0
    ErrorReporter* error_reporter, TfLiteTensor* result) {
   216d6:	4607      	mov	r7, r0
   216d8:	4691      	mov	r9, r2
  *result = {};
   216da:	4620      	mov	r0, r4
   216dc:	2240      	movs	r2, #64	; 0x40
    ErrorReporter* error_reporter, TfLiteTensor* result) {
   216de:	4698      	mov	r8, r3
  *result = {};
   216e0:	f00f fbe9 	bl	30eb6 <memset>
    auto field_offset = GetOptionalFieldOffset(field);
   216e4:	2106      	movs	r1, #6
   216e6:	4628      	mov	r0, r5
   216e8:	f005 fef7 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   216ec:	b100      	cbz	r0, 216f0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24>
   216ee:	5628      	ldrsb	r0, [r5, r0]
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
   216f0:	4642      	mov	r2, r8
   216f2:	4621      	mov	r1, r4
   216f4:	b2c0      	uxtb	r0, r0
   216f6:	f7fe fe9f 	bl	20438 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   216fa:	4606      	mov	r6, r0
   216fc:	2800      	cmp	r0, #0
   216fe:	d161      	bne.n	217c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
  result->is_variable = flatbuffer_tensor.is_variable();
   21700:	4628      	mov	r0, r5
   21702:	f00e fdc4 	bl	3028e <_ZNK6tflite6Tensor11is_variableEv>
    auto field_offset = GetOptionalFieldOffset(field);
   21706:	2108      	movs	r1, #8
   21708:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
   2170c:	4628      	mov	r0, r5
   2170e:	f005 fee4 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   21712:	2800      	cmp	r0, #0
   21714:	d05a      	beq.n	217cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x100>
   21716:	5829      	ldr	r1, [r5, r0]
  return_type operator[](uoffset_t i) const { return Get(i); }
   21718:	4648      	mov	r0, r9
   2171a:	f7ff ffbf 	bl	2169c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
   2171e:	b148      	cbz	r0, 21734 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21720:	2104      	movs	r1, #4
   21722:	f00e fdbf 	bl	302a4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
    if (auto* array = buffer->data()) {
   21726:	b128      	cbz	r0, 21734 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
      if (array->size()) {
   21728:	6803      	ldr	r3, [r0, #0]
   2172a:	b11b      	cbz	r3, 21734 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x68>
        result->allocation_type = kTfLiteMmapRo;
   2172c:	2301      	movs	r3, #1
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   2172e:	3004      	adds	r0, #4
        result->data.data =
   21730:	6060      	str	r0, [r4, #4]
        result->allocation_type = kTfLiteMmapRo;
   21732:	7523      	strb	r3, [r4, #20]
  if (result->data.data == nullptr) {
   21734:	6863      	ldr	r3, [r4, #4]
   21736:	b90b      	cbnz	r3, 2173c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x70>
    result->allocation_type = kTfLiteArenaRw;
   21738:	2302      	movs	r3, #2
   2173a:	7523      	strb	r3, [r4, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
   2173c:	4643      	mov	r3, r8
   2173e:	4628      	mov	r0, r5
   21740:	aa01      	add	r2, sp, #4
   21742:	f104 0118 	add.w	r1, r4, #24
   21746:	f00e fd41 	bl	301cc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
   2174a:	4606      	mov	r6, r0
   2174c:	2800      	cmp	r0, #0
   2174e:	d139      	bne.n	217c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21750:	2104      	movs	r1, #4
   21752:	4628      	mov	r0, r5
   21754:	f005 fef7 	bl	27546 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  if (flatbuffer_tensor.shape() == nullptr) {
   21758:	2800      	cmp	r0, #0
   2175a:	d139      	bne.n	217d0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x104>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
   2175c:	4b3c      	ldr	r3, [pc, #240]	; (21850 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x184>)
   2175e:	60a3      	str	r3, [r4, #8]
    auto field_offset = GetOptionalFieldOffset(field);
   21760:	210c      	movs	r1, #12
   21762:	4628      	mov	r0, r5
   21764:	f005 feb9 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21768:	b360      	cbz	r0, 217c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    auto p = data_ + field_offset;
   2176a:	182a      	adds	r2, r5, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   2176c:	582d      	ldr	r5, [r5, r0]
      src_quantization->zero_point() &&
   2176e:	1955      	adds	r5, r2, r5
   21770:	d028      	beq.n	217c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
  if (src_quantization && src_quantization->scale() &&
   21772:	4628      	mov	r0, r5
   21774:	f00e fd77 	bl	30266 <_ZNK6tflite22QuantizationParameters5scaleEv>
   21778:	4681      	mov	r9, r0
   2177a:	b318      	cbz	r0, 217c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
   2177c:	6803      	ldr	r3, [r0, #0]
   2177e:	b30b      	cbz	r3, 217c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
      src_quantization->zero_point() &&
   21780:	4628      	mov	r0, r5
   21782:	f00e fd7a 	bl	3027a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
      (src_quantization->scale()->size() > 0) &&
   21786:	b1e8      	cbz	r0, 217c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
      src_quantization->zero_point() &&
   21788:	6803      	ldr	r3, [r0, #0]
   2178a:	b1db      	cbz	r3, 217c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
   2178c:	f8d9 3004 	ldr.w	r3, [r9, #4]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
   21790:	4628      	mov	r0, r5
    result->params.scale = src_quantization->scale()->Get(0);
   21792:	60e3      	str	r3, [r4, #12]
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
   21794:	f00e fd71 	bl	3027a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
   21798:	2100      	movs	r1, #0
   2179a:	f7ff ff39 	bl	21610 <_ZNK11flatbuffers6VectorIxE3GetEj>
    result->params.zero_point =
   2179e:	6120      	str	r0, [r4, #16]
    int channels = src_quantization->scale()->size();
   217a0:	4628      	mov	r0, r5
   217a2:	f00e fd60 	bl	30266 <_ZNK6tflite22QuantizationParameters5scaleEv>
                                        alignof(TfLiteAffineQuantization)));
   217a6:	683b      	ldr	r3, [r7, #0]
    int channels = src_quantization->scale()->size();
   217a8:	f8d0 a000 	ldr.w	sl, [r0]
            allocator->AllocateFromTail(sizeof(TfLiteAffineQuantization),
   217ac:	2204      	movs	r2, #4
   217ae:	210c      	movs	r1, #12
   217b0:	4638      	mov	r0, r7
   217b2:	68db      	ldr	r3, [r3, #12]
   217b4:	4798      	blx	r3
    if (quantization == nullptr) {
   217b6:	4681      	mov	r9, r0
   217b8:	b988      	cbnz	r0, 217de <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x112>
      TF_LITE_REPORT_ERROR(error_reporter,
   217ba:	4926      	ldr	r1, [pc, #152]	; (21854 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x188>)
      TF_LITE_REPORT_ERROR(error_reporter,
   217bc:	4640      	mov	r0, r8
   217be:	f00e fbbf 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   217c2:	2601      	movs	r6, #1
}
   217c4:	4630      	mov	r0, r6
   217c6:	b003      	add	sp, #12
   217c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   217cc:	4601      	mov	r1, r0
   217ce:	e7a3      	b.n	21718 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x4c>
  TFLITE_DCHECK(error_reporter != nullptr);
   217d0:	f1b8 0f00 	cmp.w	r8, #0
   217d4:	d101      	bne.n	217da <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10e>
   217d6:	f00f fb24 	bl	30e22 <abort>
    *result = const_cast<kTfLiteArrayType*>(
   217da:	60a0      	str	r0, [r4, #8]
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
   217dc:	e7c0      	b.n	21760 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x94>
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
   217de:	683b      	ldr	r3, [r7, #0]
   217e0:	4650      	mov	r0, sl
   217e2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
   217e6:	f7eb f863 	bl	c8b0 <TfLiteIntArrayGetSizeInBytes>
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
   217ea:	2204      	movs	r2, #4
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
   217ec:	4601      	mov	r1, r0
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
   217ee:	4638      	mov	r0, r7
   217f0:	47d8      	blx	fp
   217f2:	4607      	mov	r7, r0
    quantization->zero_point =
   217f4:	f8c9 0004 	str.w	r0, [r9, #4]
    if (quantization->zero_point == nullptr) {
   217f8:	b908      	cbnz	r0, 217fe <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x132>
      TF_LITE_REPORT_ERROR(error_reporter,
   217fa:	4917      	ldr	r1, [pc, #92]	; (21858 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x18c>)
   217fc:	e7de      	b.n	217bc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
   217fe:	4628      	mov	r0, r5
   21800:	f00e fd31 	bl	30266 <_ZNK6tflite22QuantizationParameters5scaleEv>
  TFLITE_DCHECK(error_reporter != nullptr);
   21804:	f1b8 0f00 	cmp.w	r8, #0
   21808:	d0e5      	beq.n	217d6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10a>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   2180a:	2800      	cmp	r0, #0
   2180c:	d0e3      	beq.n	217d6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x10a>
    for (int i = 0; i < channels; i++) {
   2180e:	f04f 0800 	mov.w	r8, #0
    *result = const_cast<kTfLiteArrayType*>(
   21812:	f8c9 0000 	str.w	r0, [r9]
    quantization->zero_point->size = channels;
   21816:	f8c7 a000 	str.w	sl, [r7]
    for (int i = 0; i < channels; i++) {
   2181a:	45c2      	cmp	sl, r8
   2181c:	dd0a      	ble.n	21834 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x168>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
   2181e:	4628      	mov	r0, r5
   21820:	f00e fd2b 	bl	3027a <_ZNK6tflite22QuantizationParameters10zero_pointEv>
   21824:	4641      	mov	r1, r8
   21826:	f7ff fef3 	bl	21610 <_ZNK11flatbuffers6VectorIxE3GetEj>
    for (int i = 0; i < channels; i++) {
   2182a:	f108 0801 	add.w	r8, r8, #1
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
   2182e:	f847 0f04 	str.w	r0, [r7, #4]!
    for (int i = 0; i < channels; i++) {
   21832:	e7f2      	b.n	2181a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x14e>
    auto field_offset = GetOptionalFieldOffset(field);
   21834:	2110      	movs	r1, #16
   21836:	4628      	mov	r0, r5
   21838:	f005 fe4f 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   2183c:	b100      	cbz	r0, 21840 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x174>
   2183e:	5828      	ldr	r0, [r5, r0]
    result->quantization = {kTfLiteAffineQuantization, quantization};
   21840:	2301      	movs	r3, #1
    quantization->quantized_dimension = src_quantization->quantized_dimension();
   21842:	f8c9 0008 	str.w	r0, [r9, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
   21846:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
   2184a:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
   2184e:	e7b9      	b.n	217c4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf8>
   21850:	000331f8 	.word	0x000331f8
   21854:	000368aa 	.word	0x000368aa
   21858:	000368d8 	.word	0x000368d8

0002185c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
   2185c:	e92d 4fe3 	stmdb	sp!, {r0, r1, r5, r6, r7, r8, r9, sl, fp, lr}
   21860:	4606      	mov	r6, r0
   21862:	460f      	mov	r7, r1
   21864:	4690      	mov	r8, r2
   21866:	4699      	mov	r9, r3
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
   21868:	2500      	movs	r5, #0
    return const_cast<Table *>(this)->GetPointer<P>(field);
   2186a:	2104      	movs	r1, #4
   2186c:	4648      	mov	r0, r9
   2186e:	f00e fd22 	bl	302b6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
   21872:	6803      	ldr	r3, [r0, #0]
   21874:	429d      	cmp	r5, r3
   21876:	d224      	bcs.n	218c2 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x66>
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
   21878:	4629      	mov	r1, r5
   2187a:	f7ff fedf 	bl	2163c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
    auto field_offset = GetOptionalFieldOffset(field);
   2187e:	210c      	movs	r1, #12
   21880:	4682      	mov	sl, r0
   21882:	4638      	mov	r0, r7
   21884:	f005 fe29 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
   21888:	f8d6 b004 	ldr.w	fp, [r6, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   2188c:	4602      	mov	r2, r0
   2188e:	b110      	cbz	r0, 21896 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3a>
   21890:	58ba      	ldr	r2, [r7, r2]
    auto p = data_ + field_offset;
   21892:	1838      	adds	r0, r7, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21894:	4402      	add	r2, r0
   21896:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2189a:	4651      	mov	r1, sl
   2189c:	eb03 1385 	add.w	r3, r3, r5, lsl #6
   218a0:	9300      	str	r3, [sp, #0]
   218a2:	4658      	mov	r0, fp
   218a4:	68b3      	ldr	r3, [r6, #8]
   218a6:	f7ff ff11 	bl	216cc <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
    if (status != kTfLiteOk) {
   218aa:	b140      	cbz	r0, 218be <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x62>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
   218ac:	462a      	mov	r2, r5
   218ae:	4906      	ldr	r1, [pc, #24]	; (218c8 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x6c>)
   218b0:	68b0      	ldr	r0, [r6, #8]
   218b2:	f00e fb45 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
   218b6:	2001      	movs	r0, #1
}
   218b8:	b002      	add	sp, #8
   218ba:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
   218be:	3501      	adds	r5, #1
   218c0:	e7d3      	b.n	2186a <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xe>
  return kTfLiteOk;
   218c2:	2000      	movs	r0, #0
   218c4:	e7f8      	b.n	218b8 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x5c>
   218c6:	bf00      	nop
   218c8:	00036906 	.word	0x00036906

000218cc <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE>:
                                               const SubGraph* subgraph) {
   218cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   218d0:	4606      	mov	r6, r0
   218d2:	460c      	mov	r4, r1
   218d4:	4691      	mov	r9, r2
  for (size_t i = 0; i < context->tensors_size; ++i) {
   218d6:	2500      	movs	r5, #0
   218d8:	6823      	ldr	r3, [r4, #0]
   218da:	42ab      	cmp	r3, r5
   218dc:	d926      	bls.n	2192c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x60>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   218de:	2104      	movs	r1, #4
   218e0:	4648      	mov	r0, r9
   218e2:	f00e fce8 	bl	302b6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
    if (subgraph->tensors()->Get(i)->is_variable()) {
   218e6:	4629      	mov	r1, r5
   218e8:	f7ff fea8 	bl	2163c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
   218ec:	f00e fccf 	bl	3028e <_ZNK6tflite6Tensor11is_variableEv>
   218f0:	ea4f 1885 	mov.w	r8, r5, lsl #6
   218f4:	b1a0      	cbz	r0, 21920 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x54>
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
   218f6:	6870      	ldr	r0, [r6, #4]
   218f8:	68a7      	ldr	r7, [r4, #8]
          context->tensors[i].bytes, kBufferAlignment);
   218fa:	6803      	ldr	r3, [r0, #0]
   218fc:	4447      	add	r7, r8
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
   218fe:	2210      	movs	r2, #16
   21900:	68db      	ldr	r3, [r3, #12]
   21902:	69b9      	ldr	r1, [r7, #24]
   21904:	4798      	blx	r3
      if (context->tensors[i].data.data == nullptr) {
   21906:	68a3      	ldr	r3, [r4, #8]
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
   21908:	6078      	str	r0, [r7, #4]
      if (context->tensors[i].data.data == nullptr) {
   2190a:	4443      	add	r3, r8
   2190c:	685a      	ldr	r2, [r3, #4]
   2190e:	b93a      	cbnz	r2, 21920 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x54>
        TF_LITE_REPORT_ERROR(error_reporter_,
   21910:	699a      	ldr	r2, [r3, #24]
   21912:	4907      	ldr	r1, [pc, #28]	; (21930 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x64>)
   21914:	68b0      	ldr	r0, [r6, #8]
   21916:	f00e fb13 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   2191a:	2001      	movs	r0, #1
}
   2191c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    tflite::ResetVariableTensor(&(context->tensors[i]));
   21920:	68a0      	ldr	r0, [r4, #8]
  for (size_t i = 0; i < context->tensors_size; ++i) {
   21922:	3501      	adds	r5, #1
    tflite::ResetVariableTensor(&(context->tensors[i]));
   21924:	4440      	add	r0, r8
   21926:	f00e fbb7 	bl	30098 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>
  for (size_t i = 0; i < context->tensors_size; ++i) {
   2192a:	e7d5      	b.n	218d8 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xc>
  return kTfLiteOk;
   2192c:	2000      	movs	r0, #0
   2192e:	e7f5      	b.n	2191c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x50>
   21930:	00036925 	.word	0x00036925

00021934 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE>:
    TfLiteContext* context, const SubGraph* subgraph) {
   21934:	b538      	push	{r3, r4, r5, lr}
   21936:	460c      	mov	r4, r1
   21938:	4605      	mov	r5, r0
   2193a:	2104      	movs	r1, #4
   2193c:	4610      	mov	r0, r2
   2193e:	f00e fcba 	bl	302b6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
  context->tensors_size = subgraph->tensors()->size();
   21942:	6801      	ldr	r1, [r0, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   21944:	6868      	ldr	r0, [r5, #4]
  context->tensors_size = subgraph->tensors()->size();
   21946:	6021      	str	r1, [r4, #0]
          sizeof(TfLiteTensor) * context->tensors_size, alignof(TfLiteTensor)));
   21948:	6803      	ldr	r3, [r0, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
   2194a:	2204      	movs	r2, #4
   2194c:	68db      	ldr	r3, [r3, #12]
   2194e:	0189      	lsls	r1, r1, #6
   21950:	4798      	blx	r3
  context->tensors =
   21952:	60a0      	str	r0, [r4, #8]
  if (context->tensors == nullptr) {
   21954:	b938      	cbnz	r0, 21966 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x32>
    TF_LITE_REPORT_ERROR(
   21956:	6822      	ldr	r2, [r4, #0]
   21958:	4904      	ldr	r1, [pc, #16]	; (2196c <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x38>)
   2195a:	68a8      	ldr	r0, [r5, #8]
   2195c:	0192      	lsls	r2, r2, #6
   2195e:	f00e faef 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   21962:	2001      	movs	r0, #1
}
   21964:	bd38      	pop	{r3, r4, r5, pc}
  return kTfLiteOk;
   21966:	2000      	movs	r0, #0
   21968:	e7fc      	b.n	21964 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x30>
   2196a:	bf00      	nop
   2196c:	00036953 	.word	0x00036953

00021970 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:
    NodeAndRegistration* node_and_registrations) {
   21970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21974:	460c      	mov	r4, r1
   21976:	ed2d 8b02 	vpush	{d8}
   2197a:	4605      	mov	r5, r0
   2197c:	b087      	sub	sp, #28
    auto field_offset = GetOptionalFieldOffset(field);
   2197e:	2106      	movs	r1, #6
   21980:	4620      	mov	r0, r4
   21982:	ee08 2a90 	vmov	s17, r2
   21986:	4698      	mov	r8, r3
   21988:	f005 fda7 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   2198c:	b340      	cbz	r0, 219e0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x70>
    auto p = data_ + field_offset;
   2198e:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21990:	5820      	ldr	r0, [r4, r0]
   21992:	4403      	add	r3, r0
   21994:	9301      	str	r3, [sp, #4]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
   21996:	f04f 0b00 	mov.w	fp, #0
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
   2199a:	686b      	ldr	r3, [r5, #4]
      : memory_allocator_(memory_allocator) {}
   2199c:	4a5d      	ldr	r2, [pc, #372]	; (21b14 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1a4>)
   2199e:	9c12      	ldr	r4, [sp, #72]	; 0x48
   219a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    return const_cast<Table *>(this)->GetPointer<P>(field);
   219a4:	210a      	movs	r1, #10
   219a6:	ee18 0a90 	vmov	r0, s17
   219aa:	f005 fdd5 	bl	27558 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
   219ae:	6803      	ldr	r3, [r0, #0]
   219b0:	459b      	cmp	fp, r3
   219b2:	f080 80ab 	bcs.w	21b0c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x19c>
    const auto* op = subgraph->operators()->Get(i);
   219b6:	4659      	mov	r1, fp
   219b8:	f7ff fe58 	bl	2166c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>
    auto field_offset = GetOptionalFieldOffset(field);
   219bc:	2104      	movs	r1, #4
   219be:	4607      	mov	r7, r0
   219c0:	f005 fd8b 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   219c4:	b170      	cbz	r0, 219e4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x74>
   219c6:	583e      	ldr	r6, [r7, r0]
    if (index >= opcodes->size()) {
   219c8:	9b01      	ldr	r3, [sp, #4]
   219ca:	68a8      	ldr	r0, [r5, #8]
   219cc:	681b      	ldr	r3, [r3, #0]
   219ce:	42b3      	cmp	r3, r6
   219d0:	d80a      	bhi.n	219e8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x78>
      TF_LITE_REPORT_ERROR(error_reporter_,
   219d2:	4632      	mov	r2, r6
   219d4:	4950      	ldr	r1, [pc, #320]	; (21b18 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1a8>)
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
   219d6:	f00e fab3 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
   219da:	f04f 0a01 	mov.w	sl, #1
   219de:	e028      	b.n	21a32 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   219e0:	9001      	str	r0, [sp, #4]
   219e2:	e7d8      	b.n	21996 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   219e4:	4606      	mov	r6, r0
   219e6:	e7ef      	b.n	219c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x58>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   219e8:	9b01      	ldr	r3, [sp, #4]
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
   219ea:	4602      	mov	r2, r0
   219ec:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
   219ee:	eb03 0986 	add.w	r9, r3, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   219f2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   219f6:	4641      	mov	r1, r8
   219f8:	4499      	add	r9, r3
   219fa:	4648      	mov	r0, r9
   219fc:	f104 0324 	add.w	r3, r4, #36	; 0x24
   21a00:	f000 fbb0 	bl	22164 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
                                  &(node_and_registrations[i].registration));
   21a04:	ee08 4a10 	vmov	s16, r4
    if (status != kTfLiteOk) {
   21a08:	4682      	mov	sl, r0
   21a0a:	b1c0      	cbz	r0, 21a3e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xce>
    auto field_offset = GetOptionalFieldOffset(field);
   21a0c:	2104      	movs	r1, #4
   21a0e:	4648      	mov	r0, r9
      TF_LITE_REPORT_ERROR(error_reporter_,
   21a10:	68ac      	ldr	r4, [r5, #8]
   21a12:	f005 fd62 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   21a16:	b108      	cbz	r0, 21a1c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xac>
   21a18:	f919 0000 	ldrsb.w	r0, [r9, r0]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
   21a1c:	b2c0      	uxtb	r0, r0
  return (v < low) || (high < v);
   21a1e:	287e      	cmp	r0, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
   21a20:	bf96      	itet	ls
   21a22:	4b3e      	ldrls	r3, [pc, #248]	; (21b1c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
   21a24:	4a3e      	ldrhi	r2, [pc, #248]	; (21b20 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
  return EnumNamesBuiltinOperator()[index];
   21a26:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
   21a2a:	493e      	ldr	r1, [pc, #248]	; (21b24 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b4>)
   21a2c:	4620      	mov	r0, r4
   21a2e:	f00e fa87 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
}
   21a32:	4650      	mov	r0, sl
   21a34:	b007      	add	sp, #28
   21a36:	ecbd 8b02 	vpop	{d8}
   21a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    const auto* registration = node_and_registrations[i].registration;
   21a3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (registration == nullptr) {
   21a40:	b91b      	cbnz	r3, 21a4a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xda>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
   21a42:	4632      	mov	r2, r6
   21a44:	4938      	ldr	r1, [pc, #224]	; (21b28 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b8>)
   21a46:	68a8      	ldr	r0, [r5, #8]
   21a48:	e7c5      	b.n	219d6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
    BuiltinOperator op_type =
   21a4a:	f893 9014 	ldrb.w	r9, [r3, #20]
    unsigned char* builtin_data = nullptr;
   21a4e:	9003      	str	r0, [sp, #12]
    if (op_type == BuiltinOperator_CUSTOM) {
   21a50:	f1b9 0f20 	cmp.w	r9, #32
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21a54:	f04f 010e 	mov.w	r1, #14
   21a58:	4638      	mov	r0, r7
   21a5a:	d113      	bne.n	21a84 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x114>
   21a5c:	f00e fc22 	bl	302a4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
      if (op->custom_options() != nullptr) {
   21a60:	b960      	cbnz	r0, 21a7c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x10c>
    size_t custom_data_size = 0;
   21a62:	f04f 0a00 	mov.w	sl, #0
    const char* custom_data = nullptr;
   21a66:	4656      	mov	r6, sl
   21a68:	2106      	movs	r1, #6
   21a6a:	4638      	mov	r0, r7
   21a6c:	f005 fd6b 	bl	27546 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  TFLITE_DCHECK(error_reporter != nullptr);
   21a70:	68ab      	ldr	r3, [r5, #8]
   21a72:	4681      	mov	r9, r0
   21a74:	2b00      	cmp	r3, #0
   21a76:	d12f      	bne.n	21ad8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x168>
   21a78:	f00f f9d3 	bl	30e22 <abort>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   21a7c:	4606      	mov	r6, r0
        custom_data_size = op->custom_options()->size();
   21a7e:	f856 ab04 	ldr.w	sl, [r6], #4
   21a82:	e7f1      	b.n	21a68 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xf8>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21a84:	f00e fc0e 	bl	302a4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
      if (op->custom_options() != nullptr) {
   21a88:	b150      	cbz	r0, 21aa0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x130>
  return (v < low) || (high < v);
   21a8a:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
   21a8e:	bf98      	it	ls
   21a90:	4b22      	ldrls	r3, [pc, #136]	; (21b1c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
        TF_LITE_REPORT_ERROR(
   21a92:	68a8      	ldr	r0, [r5, #8]
   21a94:	bf94      	ite	ls
   21a96:	f853 2029 	ldrls.w	r2, [r3, r9, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
   21a9a:	4a21      	ldrhi	r2, [pc, #132]	; (21b20 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
   21a9c:	4923      	ldr	r1, [pc, #140]	; (21b2c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1bc>)
   21a9e:	e79a      	b.n	219d6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
          op_resolver.GetOpDataParser(op_type);
   21aa0:	f8d8 3000 	ldr.w	r3, [r8]
   21aa4:	4649      	mov	r1, r9
   21aa6:	4640      	mov	r0, r8
   21aa8:	699b      	ldr	r3, [r3, #24]
   21aaa:	4798      	blx	r3
      if (parser == nullptr) {
   21aac:	4606      	mov	r6, r0
   21aae:	b950      	cbnz	r0, 21ac6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x156>
   21ab0:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
  return EnumNamesBuiltinOperator()[index];
   21ab4:	bf98      	it	ls
   21ab6:	4b19      	ldrls	r3, [pc, #100]	; (21b1c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ac>)
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
   21ab8:	68a8      	ldr	r0, [r5, #8]
   21aba:	bf94      	ite	ls
   21abc:	f853 2029 	ldrls.w	r2, [r3, r9, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
   21ac0:	4a17      	ldrhi	r2, [pc, #92]	; (21b20 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1b0>)
   21ac2:	491b      	ldr	r1, [pc, #108]	; (21b30 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1c0>)
   21ac4:	e787      	b.n	219d6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x66>
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
   21ac6:	4638      	mov	r0, r7
   21ac8:	68a9      	ldr	r1, [r5, #8]
   21aca:	ab03      	add	r3, sp, #12
   21acc:	aa04      	add	r2, sp, #16
   21ace:	47b0      	blx	r6
   21ad0:	4682      	mov	sl, r0
   21ad2:	2800      	cmp	r0, #0
   21ad4:	d0c5      	beq.n	21a62 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xf2>
   21ad6:	e7ac      	b.n	21a32 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   21ad8:	2800      	cmp	r0, #0
   21ada:	d0cd      	beq.n	21a78 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x108>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21adc:	4638      	mov	r0, r7
   21ade:	2108      	movs	r1, #8
   21ae0:	f005 fd31 	bl	27546 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
   21ae4:	3428      	adds	r4, #40	; 0x28
  TFLITE_DCHECK(flatbuffer_array != nullptr);
   21ae6:	4607      	mov	r7, r0
   21ae8:	2800      	cmp	r0, #0
   21aea:	d0c5      	beq.n	21a78 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x108>
    *node = {};
   21aec:	2224      	movs	r2, #36	; 0x24
   21aee:	2100      	movs	r1, #0
   21af0:	ee18 0a10 	vmov	r0, s16
   21af4:	f00f f9df 	bl	30eb6 <memset>
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
   21af8:	9b03      	ldr	r3, [sp, #12]
    node->outputs = outputs_array;
   21afa:	e944 970a 	strd	r9, r7, [r4, #-40]	; 0x28
    node->custom_initial_data = custom_data;
   21afe:	e944 3605 	strd	r3, r6, [r4, #-20]
    node->custom_initial_data_size = custom_data_size;
   21b02:	f844 ac0c 	str.w	sl, [r4, #-12]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
   21b06:	f10b 0b01 	add.w	fp, fp, #1
   21b0a:	e74b      	b.n	219a4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x34>
  return kTfLiteOk;
   21b0c:	f04f 0a00 	mov.w	sl, #0
   21b10:	e78f      	b.n	21a32 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xc2>
   21b12:	bf00      	nop
   21b14:	00033204 	.word	0x00033204
   21b18:	00036995 	.word	0x00036995
   21b1c:	00032ff8 	.word	0x00032ff8
   21b20:	00033f9d 	.word	0x00033f9d
   21b24:	000369bf 	.word	0x000369bf
   21b28:	000369ec 	.word	0x000369ec
   21b2c:	00036a0d 	.word	0x00036a0d
   21b30:	00036a53 	.word	0x00036a53

00021b34 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE>:
    const SubGraph* subgraph, NodeAndRegistration** node_and_registrations) {
   21b34:	b570      	push	{r4, r5, r6, lr}
   21b36:	4604      	mov	r4, r0
   21b38:	4608      	mov	r0, r1
   21b3a:	210a      	movs	r1, #10
   21b3c:	4615      	mov	r5, r2
   21b3e:	f005 fd0b 	bl	27558 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
      memory_allocator_->AllocateFromTail(
   21b42:	6801      	ldr	r1, [r0, #0]
   21b44:	2028      	movs	r0, #40	; 0x28
   21b46:	6866      	ldr	r6, [r4, #4]
   21b48:	4341      	muls	r1, r0
          alignof(NodeAndRegistration)));
   21b4a:	6833      	ldr	r3, [r6, #0]
      memory_allocator_->AllocateFromTail(
   21b4c:	2204      	movs	r2, #4
   21b4e:	4630      	mov	r0, r6
   21b50:	68db      	ldr	r3, [r3, #12]
   21b52:	4798      	blx	r3
  if (output == nullptr) {
   21b54:	b928      	cbnz	r0, 21b62 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x2e>
    TF_LITE_REPORT_ERROR(
   21b56:	4904      	ldr	r1, [pc, #16]	; (21b68 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x34>)
   21b58:	68a0      	ldr	r0, [r4, #8]
   21b5a:	f00e f9f1 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   21b5e:	2001      	movs	r0, #1
}
   21b60:	bd70      	pop	{r4, r5, r6, pc}
  *node_and_registrations = output;
   21b62:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
   21b64:	2000      	movs	r0, #0
   21b66:	e7fb      	b.n	21b60 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x2c>
   21b68:	00036a70 	.word	0x00036a70

00021b6c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(const Model* model,
                                                    TfLiteContext* context,
                                                    const SubGraph* subgraph) {
   21b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b70:	ed2d 8b02 	vpush	{d8}
   21b74:	460e      	mov	r6, r1
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
   21b76:	6881      	ldr	r1, [r0, #8]
                                                    const SubGraph* subgraph) {
   21b78:	b099      	sub	sp, #100	; 0x64
   21b7a:	4605      	mov	r5, r0
                                        memory_allocator_->GetTail());
   21b7c:	6840      	ldr	r0, [r0, #4]
                                                    const SubGraph* subgraph) {
   21b7e:	469a      	mov	sl, r3
   21b80:	9204      	str	r2, [sp, #16]
                                        memory_allocator_->GetTail());
   21b82:	9103      	str	r1, [sp, #12]
   21b84:	f00e fbe1 	bl	3034a <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
   21b88:	9002      	str	r0, [sp, #8]
   21b8a:	6868      	ldr	r0, [r5, #4]
   21b8c:	f00e fbdf 	bl	3034e <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
   21b90:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   21b94:	4603      	mov	r3, r0
   21b96:	a807      	add	r0, sp, #28
   21b98:	f000 fa58 	bl	2204c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
   21b9c:	68ab      	ldr	r3, [r5, #8]
   21b9e:	2104      	movs	r1, #4
   21ba0:	4650      	mov	r0, sl
   21ba2:	ee08 3a10 	vmov	s16, r3
   21ba6:	f00e fb86 	bl	302b6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
    TF_LITE_ENSURE_STATUS(
   21baa:	6803      	ldr	r3, [r0, #0]
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
   21bac:	a807      	add	r0, sp, #28
    TF_LITE_ENSURE_STATUS(
   21bae:	9302      	str	r3, [sp, #8]
  size_t Size() const { return tensor_count_ + buffer_count_; }
   21bb0:	9a02      	ldr	r2, [sp, #8]
   21bb2:	696b      	ldr	r3, [r5, #20]
   21bb4:	18d3      	adds	r3, r2, r3
   21bb6:	9303      	str	r3, [sp, #12]
  size_t bytes = sizeof(AllocationInfo) * Size();
   21bb8:	2318      	movs	r3, #24
   21bba:	9a03      	ldr	r2, [sp, #12]
   21bbc:	4353      	muls	r3, r2
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
   21bbe:	2204      	movs	r2, #4
   21bc0:	4619      	mov	r1, r3
  size_t bytes = sizeof(AllocationInfo) * Size();
   21bc2:	ee08 3a90 	vmov	s17, r3
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
   21bc6:	f000 fa27 	bl	22018 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  if (info_ == nullptr) {
   21bca:	4604      	mov	r4, r0
   21bcc:	2800      	cmp	r0, #0
   21bce:	d03c      	beq.n	21c4a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xde>
    auto field_offset = GetOptionalFieldOffset(field);
   21bd0:	2110      	movs	r1, #16
   21bd2:	4630      	mov	r0, r6
   21bd4:	f005 fc81 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21bd8:	2800      	cmp	r0, #0
   21bda:	d142      	bne.n	21c62 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf6>
   21bdc:	4607      	mov	r7, r0
  for (size_t i = 0; i < tensor_count_; ++i) {
   21bde:	9b04      	ldr	r3, [sp, #16]
   21be0:	46a0      	mov	r8, r4
   21be2:	689b      	ldr	r3, [r3, #8]
        builder.Init(subgraph->tensors()->size(), scratch_buffer_count_));

    const int32_t* offline_planner_offsets = nullptr;
    TF_LITE_ENSURE_STATUS(
        builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
   21be4:	46a1      	mov	r9, r4
   21be6:	f103 0b04 	add.w	fp, r3, #4
  for (size_t i = 0; i < tensor_count_; ++i) {
   21bea:	2600      	movs	r6, #0
    current->first_created = -1;
   21bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  for (size_t i = 0; i < tensor_count_; ++i) {
   21bf0:	9a02      	ldr	r2, [sp, #8]
   21bf2:	42b2      	cmp	r2, r6
   21bf4:	f000 8094 	beq.w	21d20 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1b4>
    current->bytes = runtime_tensors[i].bytes;
   21bf8:	f8db 2014 	ldr.w	r2, [fp, #20]
    current->output_ptr = &(runtime_tensors[i].data.data);
   21bfc:	f8c9 b004 	str.w	fp, [r9, #4]
    current->bytes = runtime_tensors[i].bytes;
   21c00:	f8c9 2000 	str.w	r2, [r9]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
   21c04:	f8db 2000 	ldr.w	r2, [fp]
    current->last_used = -1;
   21c08:	e9c9 3302 	strd	r3, r3, [r9, #8]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
   21c0c:	2a00      	cmp	r2, #0
   21c0e:	f040 8082 	bne.w	21d16 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1aa>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21c12:	2104      	movs	r1, #4
   21c14:	4650      	mov	r0, sl
   21c16:	f00e fb4e 	bl	302b6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
                                (!subgraph->tensors()->Get(i)->is_variable());
   21c1a:	4631      	mov	r1, r6
   21c1c:	f7ff fd0e 	bl	2163c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEj>
   21c20:	f00e fb35 	bl	3028e <_ZNK6tflite6Tensor11is_variableEv>
   21c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
   21c28:	f080 0001 	eor.w	r0, r0, #1
   21c2c:	b2c0      	uxtb	r0, r0
   21c2e:	f889 0014 	strb.w	r0, [r9, #20]
    if (offline_offsets) {
   21c32:	2f00      	cmp	r7, #0
   21c34:	d071      	beq.n	21d1a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1ae>
      current->offline_offset = offline_offsets[i];
   21c36:	f857 2026 	ldr.w	r2, [r7, r6, lsl #2]
   21c3a:	f8c9 2010 	str.w	r2, [r9, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
   21c3e:	3601      	adds	r6, #1
   21c40:	f109 0918 	add.w	r9, r9, #24
   21c44:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
   21c48:	e7d2      	b.n	21bf0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x84>
    TF_LITE_REPORT_ERROR(
   21c4a:	ee18 2a90 	vmov	r2, s17
   21c4e:	ee18 0a10 	vmov	r0, s16
   21c52:	49ba      	ldr	r1, [pc, #744]	; (21f3c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d0>)
   21c54:	f00e f974 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>

    // Remaining arena size that memory planner can use for calculating offsets.
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
    uint8_t* planner_arena =
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
   21c58:	2601      	movs	r6, #1
                                        memory_allocator_->GetTail());
   21c5a:	a807      	add	r0, sp, #28
   21c5c:	f00e fb6e 	bl	3033c <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
   21c60:	e181      	b.n	21f66 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3fa>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21c62:	5837      	ldr	r7, [r6, r0]
    auto p = data_ + field_offset;
   21c64:	1833      	adds	r3, r6, r0
  if (model->metadata()) {
   21c66:	19df      	adds	r7, r3, r7
   21c68:	d0b9      	beq.n	21bde <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x72>
    const int32_t* offline_planner_offsets = nullptr;
   21c6a:	2700      	movs	r7, #0
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
   21c6c:	46b9      	mov	r9, r7
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
   21c6e:	f8df b2e4 	ldr.w	fp, [pc, #740]	; 21f54 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3e8>
    auto field_offset = GetOptionalFieldOffset(field);
   21c72:	2110      	movs	r1, #16
   21c74:	4630      	mov	r0, r6
   21c76:	f005 fc30 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21c7a:	2800      	cmp	r0, #0
   21c7c:	f000 81a7 	beq.w	21fce <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x462>
   21c80:	5832      	ldr	r2, [r6, r0]
    auto p = data_ + field_offset;
   21c82:	1831      	adds	r1, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21c84:	188b      	adds	r3, r1, r2
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
   21c86:	588a      	ldr	r2, [r1, r2]
   21c88:	454a      	cmp	r2, r9
   21c8a:	d9a8      	bls.n	21bde <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x72>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
   21c8c:	3304      	adds	r3, #4
    p += i * sizeof(uoffset_t);
   21c8e:	eb03 0889 	add.w	r8, r3, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   21c92:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
    auto field_offset = GetOptionalFieldOffset(field);
   21c96:	2104      	movs	r1, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
   21c98:	4498      	add	r8, r3
    auto field_offset = GetOptionalFieldOffset(field);
   21c9a:	4640      	mov	r0, r8
   21c9c:	f005 fc1d 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21ca0:	b380      	cbz	r0, 21d04 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x198>
    auto p = data_ + field_offset;
   21ca2:	eb08 0300 	add.w	r3, r8, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21ca6:	f858 0000 	ldr.w	r0, [r8, r0]
   21caa:	4403      	add	r3, r0
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
   21cac:	4658      	mov	r0, fp
   21cae:	9305      	str	r3, [sp, #20]
   21cb0:	f7ef ff32 	bl	11b18 <strlen>
   21cb4:	9b05      	ldr	r3, [sp, #20]
   21cb6:	4602      	mov	r2, r0
   21cb8:	4659      	mov	r1, fp
   21cba:	1d18      	adds	r0, r3, #4
   21cbc:	f00f f9f4 	bl	310a8 <strncmp>
   21cc0:	bb30      	cbnz	r0, 21d10 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a4>
    auto field_offset = GetOptionalFieldOffset(field);
   21cc2:	210c      	movs	r1, #12
   21cc4:	4630      	mov	r0, r6
   21cc6:	f005 fc08 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21cca:	b1e8      	cbz	r0, 21d08 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x19c>
   21ccc:	5837      	ldr	r7, [r6, r0]
    auto p = data_ + field_offset;
   21cce:	1833      	adds	r3, r6, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21cd0:	441f      	add	r7, r3
    auto field_offset = GetOptionalFieldOffset(field);
   21cd2:	2106      	movs	r1, #6
   21cd4:	4640      	mov	r0, r8
   21cd6:	f005 fc00 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   21cda:	b1b8      	cbz	r0, 21d0c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a0>
   21cdc:	f858 1000 	ldr.w	r1, [r8, r0]
  return_type operator[](uoffset_t i) const { return Get(i); }
   21ce0:	4638      	mov	r0, r7
   21ce2:	f7ff fcdb 	bl	2169c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEj>
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21ce6:	2104      	movs	r1, #4
   21ce8:	f00e fadc 	bl	302a4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
        if (tensor_count_ != nbr_tensors) {
   21cec:	9b02      	ldr	r3, [sp, #8]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
   21cee:	68c2      	ldr	r2, [r0, #12]
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
   21cf0:	f100 0710 	add.w	r7, r0, #16
        if (tensor_count_ != nbr_tensors) {
   21cf4:	4293      	cmp	r3, r2
   21cf6:	d00b      	beq.n	21d10 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1a4>
          TF_LITE_REPORT_ERROR(reporter_,
   21cf8:	ee18 0a10 	vmov	r0, s16
   21cfc:	4990      	ldr	r1, [pc, #576]	; (21f40 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d4>)
   21cfe:	f00e f91f 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE_STATUS(
   21d02:	e7a9      	b.n	21c58 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   21d04:	4603      	mov	r3, r0
   21d06:	e7d1      	b.n	21cac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x140>
   21d08:	4607      	mov	r7, r0
   21d0a:	e7e2      	b.n	21cd2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x166>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   21d0c:	4601      	mov	r1, r0
   21d0e:	e7e7      	b.n	21ce0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x174>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
   21d10:	f109 0901 	add.w	r9, r9, #1
   21d14:	e7ad      	b.n	21c72 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x106>
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
   21d16:	2000      	movs	r0, #0
   21d18:	e789      	b.n	21c2e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xc2>
      current->offline_offset = kOnlinePlannedBuffer;
   21d1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21d1e:	e78c      	b.n	21c3a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xce>
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
   21d20:	f04f 0b00 	mov.w	fp, #0
    current->first_created = 0;
   21d24:	f04f 0918 	mov.w	r9, #24
   21d28:	465f      	mov	r7, fp
    return const_cast<Table *>(this)->GetPointer<P>(field);
   21d2a:	2106      	movs	r1, #6
   21d2c:	4650      	mov	r0, sl
   21d2e:	f005 fc0a 	bl	27546 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
   21d32:	6803      	ldr	r3, [r0, #0]
   21d34:	455b      	cmp	r3, fp
   21d36:	d908      	bls.n	21d4a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1de>
    const int tensor_index = subgraph->inputs()->Get(i);
   21d38:	4659      	mov	r1, fp
   21d3a:	f7f4 fbd5 	bl	164e8 <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->first_created = 0;
   21d3e:	fb09 4000 	mla	r0, r9, r0, r4
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
   21d42:	f10b 0b01 	add.w	fp, fp, #1
    current->first_created = 0;
   21d46:	6087      	str	r7, [r0, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
   21d48:	e7ef      	b.n	21d2a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1be>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
   21d4a:	f04f 0b00 	mov.w	fp, #0
    current->last_used = subgraph->operators()->size() - 1;
   21d4e:	f04f 0918 	mov.w	r9, #24
   21d52:	2108      	movs	r1, #8
   21d54:	4650      	mov	r0, sl
   21d56:	f005 fbf6 	bl	27546 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
   21d5a:	210a      	movs	r1, #10
   21d5c:	9002      	str	r0, [sp, #8]
   21d5e:	4650      	mov	r0, sl
   21d60:	f005 fbfa 	bl	27558 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
   21d64:	9b02      	ldr	r3, [sp, #8]
   21d66:	4607      	mov	r7, r0
   21d68:	681a      	ldr	r2, [r3, #0]
   21d6a:	455a      	cmp	r2, fp
   21d6c:	d90b      	bls.n	21d86 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21a>
    const int tensor_index = subgraph->outputs()->Get(i);
   21d6e:	4659      	mov	r1, fp
   21d70:	4618      	mov	r0, r3
   21d72:	f7f4 fbb9 	bl	164e8 <_ZNK11flatbuffers6VectorIiE3GetEj>
    current->last_used = subgraph->operators()->size() - 1;
   21d76:	fb09 4000 	mla	r0, r9, r0, r4
   21d7a:	683b      	ldr	r3, [r7, #0]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
   21d7c:	f10b 0b01 	add.w	fp, fp, #1
    current->last_used = subgraph->operators()->size() - 1;
   21d80:	3b01      	subs	r3, #1
   21d82:	60c3      	str	r3, [r0, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
   21d84:	e7e5      	b.n	21d52 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1e6>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
   21d86:	6807      	ldr	r7, [r0, #0]
   21d88:	3f01      	subs	r7, #1
   21d8a:	2f00      	cmp	r7, #0
   21d8c:	db37      	blt.n	21dfe <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x292>
   21d8e:	210a      	movs	r1, #10
   21d90:	4650      	mov	r0, sl
   21d92:	f005 fbe1 	bl	27558 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
    const auto* op = subgraph->operators()->Get(i);
   21d96:	4639      	mov	r1, r7
   21d98:	f7ff fc68 	bl	2166c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEj>
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
   21d9c:	f04f 0b00 	mov.w	fp, #0
    const auto* op = subgraph->operators()->Get(i);
   21da0:	4681      	mov	r9, r0
   21da2:	2106      	movs	r1, #6
   21da4:	4648      	mov	r0, r9
   21da6:	f005 fbce 	bl	27546 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
   21daa:	6802      	ldr	r2, [r0, #0]
   21dac:	455a      	cmp	r2, fp
   21dae:	d90e      	bls.n	21dce <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x262>
      const int tensor_index = op->inputs()->Get(n);
   21db0:	4659      	mov	r1, fp
   21db2:	f7f4 fb99 	bl	164e8 <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
   21db6:	2318      	movs	r3, #24
   21db8:	fb03 4000 	mla	r0, r3, r0, r4
      if (((current->last_used == -1) || (current->last_used < i))) {
   21dbc:	68c2      	ldr	r2, [r0, #12]
   21dbe:	1c51      	adds	r1, r2, #1
   21dc0:	d001      	beq.n	21dc6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x25a>
   21dc2:	4297      	cmp	r7, r2
   21dc4:	dd00      	ble.n	21dc8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x25c>
        current->last_used = i;
   21dc6:	60c7      	str	r7, [r0, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
   21dc8:	f10b 0b01 	add.w	fp, fp, #1
   21dcc:	e7e9      	b.n	21da2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x236>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
   21dce:	f04f 0b00 	mov.w	fp, #0
   21dd2:	2108      	movs	r1, #8
   21dd4:	4648      	mov	r0, r9
   21dd6:	f005 fbb6 	bl	27546 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>
   21dda:	6802      	ldr	r2, [r0, #0]
   21ddc:	455a      	cmp	r2, fp
   21dde:	d9d3      	bls.n	21d88 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21c>
      const int tensor_index = op->outputs()->Get(n);
   21de0:	4659      	mov	r1, fp
   21de2:	f7f4 fb81 	bl	164e8 <_ZNK11flatbuffers6VectorIiE3GetEj>
      AllocationInfo* current = &info_[tensor_index];
   21de6:	2318      	movs	r3, #24
   21de8:	fb03 4000 	mla	r0, r3, r0, r4
      if ((current->first_created == -1) || (current->first_created > i)) {
   21dec:	6882      	ldr	r2, [r0, #8]
   21dee:	1c53      	adds	r3, r2, #1
   21df0:	d001      	beq.n	21df6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x28a>
   21df2:	4297      	cmp	r7, r2
   21df4:	da00      	bge.n	21df8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x28c>
        current->first_created = i;
   21df6:	6087      	str	r7, [r0, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
   21df8:	f10b 0b01 	add.w	fp, fp, #1
   21dfc:	e7e9      	b.n	21dd2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x266>
  for (size_t i = 0; i < tensor_count_; ++i) {
   21dfe:	2200      	movs	r2, #0
   21e00:	4621      	mov	r1, r4
      current->needs_allocating = false;
   21e02:	4617      	mov	r7, r2
  for (size_t i = 0; i < tensor_count_; ++i) {
   21e04:	4296      	cmp	r6, r2
   21e06:	d018      	beq.n	21e3a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ce>
    const bool is_read_only =
   21e08:	e9d1 3002 	ldrd	r3, r0, [r1, #8]
        (current->first_created == -1) && (current->last_used != -1);
   21e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   21e10:	d105      	bne.n	21e1e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b2>
   21e12:	3001      	adds	r0, #1
   21e14:	d005      	beq.n	21e22 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2b6>
      current->needs_allocating = false;
   21e16:	750f      	strb	r7, [r1, #20]
  for (size_t i = 0; i < tensor_count_; ++i) {
   21e18:	3201      	adds	r2, #1
   21e1a:	3118      	adds	r1, #24
   21e1c:	e7f2      	b.n	21e04 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x298>
        ((current->first_created == -1) || (current->last_used == -1));
   21e1e:	3001      	adds	r0, #1
   21e20:	d1fa      	bne.n	21e18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>
    if (has_partial_lifetime && current->needs_allocating) {
   21e22:	7d08      	ldrb	r0, [r1, #20]
   21e24:	2800      	cmp	r0, #0
   21e26:	d0f7      	beq.n	21e18 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>
      TF_LITE_REPORT_ERROR(
   21e28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21e2c:	ee18 0a10 	vmov	r0, s16
   21e30:	9100      	str	r1, [sp, #0]
   21e32:	4944      	ldr	r1, [pc, #272]	; (21f44 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3d8>)
   21e34:	f00e f884 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
   21e38:	e70e      	b.n	21c58 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   21e3a:	2318      	movs	r3, #24
    current->needs_allocating = true;
   21e3c:	2701      	movs	r7, #1
    current->offline_offset = kOnlinePlannedBuffer;
   21e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21e42:	fb03 4306 	mla	r3, r3, r6, r4
   21e46:	692a      	ldr	r2, [r5, #16]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   21e48:	9903      	ldr	r1, [sp, #12]
   21e4a:	3318      	adds	r3, #24
   21e4c:	42b1      	cmp	r1, r6
   21e4e:	d90e      	bls.n	21e6e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x302>
    current->bytes = handle->bytes;
   21e50:	6851      	ldr	r1, [r2, #4]
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
   21e52:	f843 2c14 	str.w	r2, [r3, #-20]
    current->bytes = handle->bytes;
   21e56:	f843 1c18 	str.w	r1, [r3, #-24]
    current->first_created = handle->node_idx;
   21e5a:	6891      	ldr	r1, [r2, #8]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   21e5c:	3601      	adds	r6, #1
    current->last_used = handle->node_idx;
   21e5e:	e943 1104 	strd	r1, r1, [r3, #-16]
    current->needs_allocating = true;
   21e62:	f803 7c04 	strb.w	r7, [r3, #-4]
    current->offline_offset = kOnlinePlannedBuffer;
   21e66:	f843 0c08 	str.w	r0, [r3, #-8]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
   21e6a:	320c      	adds	r2, #12
   21e6c:	e7ec      	b.n	21e48 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2dc>
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
   21e6e:	a807      	add	r0, sp, #28
   21e70:	f00e fa6f 	bl	30352 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
   21e74:	2201      	movs	r2, #1
   21e76:	4601      	mov	r1, r0
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
   21e78:	4606      	mov	r6, r0
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
   21e7a:	a807      	add	r0, sp, #28
   21e7c:	f000 f8b2 	bl	21fe4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
   21e80:	4601      	mov	r1, r0
   21e82:	b958      	cbnz	r0, 21e9c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x330>
   21e84:	4b30      	ldr	r3, [pc, #192]	; (21f48 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3dc>)
   21e86:	68a9      	ldr	r1, [r5, #8]
   21e88:	9301      	str	r3, [sp, #4]
   21e8a:	f240 338f 	movw	r3, #911	; 0x38f
   21e8e:	4608      	mov	r0, r1
   21e90:	9300      	str	r3, [sp, #0]
   21e92:	4a2e      	ldr	r2, [pc, #184]	; (21f4c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3e0>)
   21e94:	4b2e      	ldr	r3, [pc, #184]	; (21f50 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3e4>)
   21e96:	f00e f861 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   21e9a:	e6dd      	b.n	21c58 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xec>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
   21e9c:	4632      	mov	r2, r6
   21e9e:	a80d      	add	r0, sp, #52	; 0x34
   21ea0:	f000 f926 	bl	220f0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
    TF_LITE_ENSURE_STATUS(
   21ea4:	ee18 3a90 	vmov	r3, s17
   21ea8:	4423      	add	r3, r4
   21eaa:	4699      	mov	r9, r3
   21eac:	68af      	ldr	r7, [r5, #8]
  for (size_t i = 0; i < allocation_info_size; ++i) {
   21eae:	454c      	cmp	r4, r9
   21eb0:	d077      	beq.n	21fa2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x436>
    if (current->needs_allocating) {
   21eb2:	7d23      	ldrb	r3, [r4, #20]
   21eb4:	b90b      	cbnz	r3, 21eba <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x34e>
  for (size_t i = 0; i < allocation_info_size; ++i) {
   21eb6:	3418      	adds	r4, #24
   21eb8:	e7f9      	b.n	21eae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x342>
          AlignSizeUp(current->bytes, kBufferAlignment);
   21eba:	2110      	movs	r1, #16
   21ebc:	6820      	ldr	r0, [r4, #0]
   21ebe:	f00e f968 	bl	30192 <_ZN6tflite11AlignSizeUpEjj>
      if (current->offline_offset == kOnlinePlannedBuffer) {
   21ec2:	6923      	ldr	r3, [r4, #16]
          AlignSizeUp(current->bytes, kBufferAlignment);
   21ec4:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
   21ec6:	1c59      	adds	r1, r3, #1
   21ec8:	d10d      	bne.n	21ee6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x37a>
        TF_LITE_ENSURE_STATUS(
   21eca:	68e3      	ldr	r3, [r4, #12]
   21ecc:	4639      	mov	r1, r7
   21ece:	9300      	str	r3, [sp, #0]
   21ed0:	68a3      	ldr	r3, [r4, #8]
   21ed2:	a80d      	add	r0, sp, #52	; 0x34
   21ed4:	f000 f8ea 	bl	220ac <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
   21ed8:	4606      	mov	r6, r0
   21eda:	2800      	cmp	r0, #0
   21edc:	d0eb      	beq.n	21eb6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x34a>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
   21ede:	a80d      	add	r0, sp, #52	; 0x34
   21ee0:	f00e fa3b 	bl	3035a <_ZN6tflite19GreedyMemoryPlannerD1Ev>
   21ee4:	e6b9      	b.n	21c5a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xee>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
   21ee6:	9301      	str	r3, [sp, #4]
   21ee8:	68e3      	ldr	r3, [r4, #12]
   21eea:	4639      	mov	r1, r7
   21eec:	9300      	str	r3, [sp, #0]
   21eee:	68a3      	ldr	r3, [r4, #8]
   21ef0:	a80d      	add	r0, sp, #52	; 0x34
   21ef2:	f00e fa58 	bl	303a6 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
   21ef6:	e7ef      	b.n	21ed8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x36c>
          planner.GetMaximumMemorySize(), actual_available_arena_size);
      return kTfLiteError;
    }

    // Commit the plan.
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
   21ef8:	6868      	ldr	r0, [r5, #4]
   21efa:	f00e fa26 	bl	3034a <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
  int planner_index = 0;
   21efe:	f04f 0b00 	mov.w	fp, #0
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
   21f02:	4607      	mov	r7, r0
      int offset = -1;
   21f04:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
  for (size_t i = 0; i < allocation_info_size; ++i) {
   21f08:	4544      	cmp	r4, r8
   21f0a:	d032      	beq.n	21f72 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x406>
    if (current->needs_allocating) {
   21f0c:	f898 3014 	ldrb.w	r3, [r8, #20]
   21f10:	b18b      	cbz	r3, 21f36 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ca>
      TF_LITE_ENSURE_STATUS(
   21f12:	465a      	mov	r2, fp
   21f14:	4649      	mov	r1, r9
   21f16:	ab06      	add	r3, sp, #24
   21f18:	a80d      	add	r0, sp, #52	; 0x34
      int offset = -1;
   21f1a:	f8cd a018 	str.w	sl, [sp, #24]
      TF_LITE_ENSURE_STATUS(
   21f1e:	f000 f905 	bl	2212c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>
   21f22:	4606      	mov	r6, r0
   21f24:	2800      	cmp	r0, #0
   21f26:	d1da      	bne.n	21ede <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x372>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
   21f28:	9b06      	ldr	r3, [sp, #24]
   21f2a:	f8d8 2004 	ldr.w	r2, [r8, #4]
   21f2e:	443b      	add	r3, r7
   21f30:	6013      	str	r3, [r2, #0]
      ++planner_index;
   21f32:	f10b 0b01 	add.w	fp, fp, #1
  for (size_t i = 0; i < allocation_info_size; ++i) {
   21f36:	f108 0818 	add.w	r8, r8, #24
   21f3a:	e7e5      	b.n	21f08 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x39c>
   21f3c:	00036aa6 	.word	0x00036aa6
   21f40:	00036ae7 	.word	0x00036ae7
   21f44:	00036b32 	.word	0x00036b32
   21f48:	00036bbe 	.word	0x00036bbe
   21f4c:	00034c0c 	.word	0x00034c0c
   21f50:	00036b95 	.word	0x00036b95
   21f54:	00036c4f 	.word	0x00036c4f
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
   21f58:	a80d      	add	r0, sp, #52	; 0x34
   21f5a:	f00e f9fe 	bl	3035a <_ZN6tflite19GreedyMemoryPlannerD1Ev>
                                        memory_allocator_->GetTail());
   21f5e:	a807      	add	r0, sp, #28
   21f60:	f00e f9ec 	bl	3033c <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
    uint8_t* allocated_tensor_memory =
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
                                            /*alignment=*/1);
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
  }
  return kTfLiteOk;
   21f64:	2600      	movs	r6, #0
}
   21f66:	4630      	mov	r0, r6
   21f68:	b019      	add	sp, #100	; 0x64
   21f6a:	ecbd 8b02 	vpop	{d8}
   21f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
   21f72:	686c      	ldr	r4, [r5, #4]
   21f74:	a80d      	add	r0, sp, #52	; 0x34
                                            /*alignment=*/1);
   21f76:	6823      	ldr	r3, [r4, #0]
   21f78:	689e      	ldr	r6, [r3, #8]
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
   21f7a:	f00e fb0c 	bl	30596 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
   21f7e:	2201      	movs	r2, #1
   21f80:	4601      	mov	r1, r0
   21f82:	4620      	mov	r0, r4
   21f84:	47b0      	blx	r6
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
   21f86:	2800      	cmp	r0, #0
   21f88:	d1e6      	bne.n	21f58 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x3ec>
   21f8a:	4b12      	ldr	r3, [pc, #72]	; (21fd4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x468>)
   21f8c:	68a9      	ldr	r1, [r5, #8]
   21f8e:	9301      	str	r3, [sp, #4]
   21f90:	f44f 736a 	mov.w	r3, #936	; 0x3a8
   21f94:	4608      	mov	r0, r1
   21f96:	9300      	str	r3, [sp, #0]
   21f98:	4a0f      	ldr	r2, [pc, #60]	; (21fd8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x46c>)
   21f9a:	4b10      	ldr	r3, [pc, #64]	; (21fdc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x470>)
   21f9c:	f00d ffde 	bl	2ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
   21fa0:	e013      	b.n	21fca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x45e>
        memory_allocator_->GetAvailableMemory();
   21fa2:	6868      	ldr	r0, [r5, #4]
   21fa4:	f00e f9d5 	bl	30352 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
   21fa8:	4606      	mov	r6, r0
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
   21faa:	a80d      	add	r0, sp, #52	; 0x34
   21fac:	f00e faf3 	bl	30596 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
   21fb0:	42b0      	cmp	r0, r6
   21fb2:	f8d5 9008 	ldr.w	r9, [r5, #8]
   21fb6:	d99f      	bls.n	21ef8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x38c>
      TF_LITE_REPORT_ERROR(
   21fb8:	a80d      	add	r0, sp, #52	; 0x34
   21fba:	f00e faec 	bl	30596 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
   21fbe:	4633      	mov	r3, r6
   21fc0:	4602      	mov	r2, r0
   21fc2:	4907      	ldr	r1, [pc, #28]	; (21fe0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x474>)
   21fc4:	4648      	mov	r0, r9
   21fc6:	f00d ffbb 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
   21fca:	2601      	movs	r6, #1
   21fcc:	e787      	b.n	21ede <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x372>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
   21fce:	6803      	ldr	r3, [r0, #0]
   21fd0:	deff      	udf	#255	; 0xff
   21fd2:	bf00      	nop
   21fd4:	00036c2c 	.word	0x00036c2c
   21fd8:	00034c0c 	.word	0x00034c0c
   21fdc:	00036b95 	.word	0x00036b95
   21fe0:	00036bd7 	.word	0x00036bd7

00021fe4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}

uint8_t* SimpleMemoryAllocator::AllocateFromHead(size_t size,
                                                 size_t alignment) {
   21fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21fe6:	4605      	mov	r5, r0
   21fe8:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(head_, alignment);
   21fea:	6900      	ldr	r0, [r0, #16]
   21fec:	4611      	mov	r1, r2
   21fee:	f00e f8c5 	bl	3017c <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
   21ff2:	696b      	ldr	r3, [r5, #20]
   21ff4:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
   21ff6:	42a3      	cmp	r3, r4
   21ff8:	d209      	bcs.n	2200e <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x2a>
    TF_LITE_REPORT_ERROR(
   21ffa:	1ae2      	subs	r2, r4, r3
   21ffc:	9200      	str	r2, [sp, #0]
   21ffe:	4905      	ldr	r1, [pc, #20]	; (22014 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x30>)
   22000:	4622      	mov	r2, r4
   22002:	6868      	ldr	r0, [r5, #4]
   22004:	f00d ff9c 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
   22008:	2000      	movs	r0, #0
  }
  head_ = aligned_result + size;
  return aligned_result;
}
   2200a:	b003      	add	sp, #12
   2200c:	bd30      	pop	{r4, r5, pc}
  head_ = aligned_result + size;
   2200e:	4404      	add	r4, r0
   22010:	612c      	str	r4, [r5, #16]
  return aligned_result;
   22012:	e7fa      	b.n	2200a <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x26>
   22014:	00036c67 	.word	0x00036c67

00022018 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
   22018:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2201a:	460d      	mov	r5, r1
   2201c:	4604      	mov	r4, r0
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
   2201e:	6940      	ldr	r0, [r0, #20]
   22020:	4611      	mov	r1, r2
   22022:	1b40      	subs	r0, r0, r5
   22024:	f00e f8b1 	bl	3018a <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
   22028:	6923      	ldr	r3, [r4, #16]
   2202a:	4283      	cmp	r3, r0
   2202c:	d90a      	bls.n	22044 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x2c>
    const size_t missing_memory = head_ - aligned_result;
   2202e:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(
   22030:	9300      	str	r3, [sp, #0]
   22032:	462a      	mov	r2, r5
   22034:	4904      	ldr	r1, [pc, #16]	; (22048 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x30>)
   22036:	6860      	ldr	r0, [r4, #4]
   22038:	1aeb      	subs	r3, r5, r3
   2203a:	f00d ff81 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, size - missing_memory, missing_memory);
    return nullptr;
   2203e:	2000      	movs	r0, #0
  }
  tail_ = aligned_result;
  return aligned_result;
}
   22040:	b003      	add	sp, #12
   22042:	bd30      	pop	{r4, r5, pc}
  tail_ = aligned_result;
   22044:	6160      	str	r0, [r4, #20]
  return aligned_result;
   22046:	e7fb      	b.n	22040 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x28>
   22048:	00036c67 	.word	0x00036c67

0002204c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
   2204c:	b530      	push	{r4, r5, lr}
      tail_(buffer_tail) {}
   2204e:	4d04      	ldr	r5, [pc, #16]	; (22060 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x14>)
   22050:	e9c0 2302 	strd	r2, r3, [r0, #8]
   22054:	e9c0 5100 	strd	r5, r1, [r0]
   22058:	e9c0 2304 	strd	r2, r3, [r0, #16]
   2205c:	bd30      	pop	{r4, r5, pc}
   2205e:	bf00      	nop
   22060:	00033244 	.word	0x00033244

00022064 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
   22064:	b510      	push	{r4, lr}
   22066:	b086      	sub	sp, #24
  TFLITE_DCHECK(error_reporter != nullptr);
   22068:	b908      	cbnz	r0, 2206e <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0xa>
   2206a:	f00e feda 	bl	30e22 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
   2206e:	2900      	cmp	r1, #0
   22070:	d0fb      	beq.n	2206a <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x6>
      tail_(buffer_tail) {}
   22072:	4c0d      	ldr	r4, [pc, #52]	; (220a8 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x44>)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
   22074:	440a      	add	r2, r1
      tail_(buffer_tail) {}
   22076:	e9cd 1202 	strd	r1, r2, [sp, #8]
   2207a:	e9cd 1204 	strd	r1, r2, [sp, #16]
   2207e:	e9cd 4000 	strd	r4, r0, [sp]
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
   22082:	2204      	movs	r2, #4
   22084:	2118      	movs	r1, #24
   22086:	4668      	mov	r0, sp
   22088:	f7ff ffc6 	bl	22018 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
   2208c:	b150      	cbz	r0, 220a4 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x40>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
   2208e:	9b01      	ldr	r3, [sp, #4]
   22090:	6004      	str	r4, [r0, #0]
   22092:	6043      	str	r3, [r0, #4]
   22094:	9b02      	ldr	r3, [sp, #8]
   22096:	6083      	str	r3, [r0, #8]
   22098:	9b03      	ldr	r3, [sp, #12]
   2209a:	60c3      	str	r3, [r0, #12]
   2209c:	9b04      	ldr	r3, [sp, #16]
   2209e:	6103      	str	r3, [r0, #16]
   220a0:	9b05      	ldr	r3, [sp, #20]
   220a2:	6143      	str	r3, [r0, #20]
}
   220a4:	b006      	add	sp, #24
   220a6:	bd10      	pop	{r4, pc}
   220a8:	00033244 	.word	0x00033244

000220ac <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
  // We don't own the scratch buffer, so don't deallocate anything.
}

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
   220ac:	b570      	push	{r4, r5, r6, lr}
   220ae:	4604      	mov	r4, r0
   220b0:	4608      	mov	r0, r1
  if (buffer_count_ >= max_buffer_count_) {
   220b2:	e9d4 1501 	ldrd	r1, r5, [r4, #4]
   220b6:	428d      	cmp	r5, r1
   220b8:	db05      	blt.n	220c6 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x1a>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
   220ba:	460a      	mov	r2, r1
   220bc:	490b      	ldr	r1, [pc, #44]	; (220ec <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x40>)
   220be:	f00d ff3f 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
   220c2:	2001      	movs	r0, #1
  current->last_time_used = last_time_used;
  current->offline_offset = kOnlinePlannedBuffer;
  ++buffer_count_;
  need_to_calculate_offsets_ = true;
  return kTfLiteOk;
}
   220c4:	bd70      	pop	{r4, r5, r6, pc}
  BufferRequirements* current = &requirements_[buffer_count_];
   220c6:	68e0      	ldr	r0, [r4, #12]
   220c8:	012e      	lsls	r6, r5, #4
   220ca:	eb00 1105 	add.w	r1, r0, r5, lsl #4
  current->size = size;
   220ce:	5182      	str	r2, [r0, r6]
  current->first_time_used = first_time_used;
   220d0:	608b      	str	r3, [r1, #8]
  current->last_time_used = last_time_used;
   220d2:	9b04      	ldr	r3, [sp, #16]
  ++buffer_count_;
   220d4:	3501      	adds	r5, #1
  current->last_time_used = last_time_used;
   220d6:	60cb      	str	r3, [r1, #12]
  current->offline_offset = kOnlinePlannedBuffer;
   220d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   220dc:	604b      	str	r3, [r1, #4]
  need_to_calculate_offsets_ = true;
   220de:	2301      	movs	r3, #1
  return kTfLiteOk;
   220e0:	2000      	movs	r0, #0
  ++buffer_count_;
   220e2:	60a5      	str	r5, [r4, #8]
  need_to_calculate_offsets_ = true;
   220e4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  return kTfLiteOk;
   220e8:	e7ec      	b.n	220c4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x18>
   220ea:	bf00      	nop
   220ec:	00036cab 	.word	0x00036cab

000220f0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
   220f0:	b510      	push	{r4, lr}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
   220f2:	4c0d      	ldr	r4, [pc, #52]	; (22128 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x38>)
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
   220f4:	60c1      	str	r1, [r0, #12]
    : buffer_count_(0), need_to_calculate_offsets_(true) {
   220f6:	6004      	str	r4, [r0, #0]
   220f8:	2400      	movs	r4, #0
   220fa:	6084      	str	r4, [r0, #8]
   220fc:	2401      	movs	r4, #1
   220fe:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
   22102:	2428      	movs	r4, #40	; 0x28
   22104:	fbb2 f2f4 	udiv	r2, r2, r4
  next_free += sizeof(ListEntry) * max_buffer_count_;
   22108:	240c      	movs	r4, #12
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
   2210a:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
   2210e:	6101      	str	r1, [r0, #16]
  next_free += sizeof(int) * max_buffer_count_;
   22110:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
   22114:	6141      	str	r1, [r0, #20]
  next_free += sizeof(int) * max_buffer_count_;
   22116:	eb01 0182 	add.w	r1, r1, r2, lsl #2
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
   2211a:	6042      	str	r2, [r0, #4]
  next_free += sizeof(ListEntry) * max_buffer_count_;
   2211c:	fb04 1202 	mla	r2, r4, r2, r1
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
   22120:	6181      	str	r1, [r0, #24]
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
   22122:	6242      	str	r2, [r0, #36]	; 0x24
}
   22124:	bd10      	pop	{r4, pc}
   22126:	bf00      	nop
   22128:	0003325c 	.word	0x0003325c

0002212c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
   2212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2212e:	4614      	mov	r4, r2
   22130:	4605      	mov	r5, r0
   22132:	460f      	mov	r7, r1
   22134:	461e      	mov	r6, r3
  CalculateOffsetsIfNeeded();
   22136:	f00e f974 	bl	30422 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
   2213a:	2c00      	cmp	r4, #0
   2213c:	db02      	blt.n	22144 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x18>
   2213e:	68ab      	ldr	r3, [r5, #8]
   22140:	42a3      	cmp	r3, r4
   22142:	dc07      	bgt.n	22154 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter,
   22144:	4622      	mov	r2, r4
   22146:	4638      	mov	r0, r7
   22148:	68ab      	ldr	r3, [r5, #8]
   2214a:	4905      	ldr	r1, [pc, #20]	; (22160 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
   2214c:	f00d fef8 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   22150:	2001      	movs	r0, #1
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
  return kTfLiteOk;
}
   22152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  *offset = buffer_offsets_[buffer_index];
   22154:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  return kTfLiteOk;
   22156:	2000      	movs	r0, #0
  *offset = buffer_offsets_[buffer_index];
   22158:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2215c:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
   2215e:	e7f8      	b.n	22152 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x26>
   22160:	00036cc8 	.word	0x00036cc8

00022164 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   22164:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22168:	461e      	mov	r6, r3
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
   2216a:	2300      	movs	r3, #0
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   2216c:	460f      	mov	r7, r1
  *registration = nullptr;
   2216e:	6033      	str	r3, [r6, #0]
    auto field_offset = GetOptionalFieldOffset(field);
   22170:	2104      	movs	r1, #4
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
   22172:	4605      	mov	r5, r0
   22174:	4690      	mov	r8, r2
   22176:	f005 f9b0 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   2217a:	b100      	cbz	r0, 2217e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x1a>
   2217c:	5628      	ldrsb	r0, [r5, r0]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
   2217e:	b2c4      	uxtb	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   22180:	2108      	movs	r1, #8
   22182:	4628      	mov	r0, r5
   22184:	f005 f9a9 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   22188:	b158      	cbz	r0, 221a2 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x3e>
   2218a:	582a      	ldr	r2, [r5, r0]
  auto builtin_code = opcode->builtin_code();
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX ||
   2218c:	2c7e      	cmp	r4, #126	; 0x7e
   2218e:	d90a      	bls.n	221a6 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
   22190:	4622      	mov	r2, r4
   22192:	4640      	mov	r0, r8
   22194:	491c      	ldr	r1, [pc, #112]	; (22208 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa4>)
   22196:	f00d fed3 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    }
  } else if (!opcode->custom_code()) {
    TF_LITE_REPORT_ERROR(
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
   2219a:	2001      	movs	r0, #1
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
   2219c:	b002      	add	sp, #8
   2219e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   221a2:	2201      	movs	r2, #1
   221a4:	e7f2      	b.n	2218c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x28>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
   221a6:	2c20      	cmp	r4, #32
   221a8:	d011      	beq.n	221ce <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x6a>
    *registration = op_resolver.FindOp(builtin_code, version);
   221aa:	683b      	ldr	r3, [r7, #0]
   221ac:	9201      	str	r2, [sp, #4]
   221ae:	4621      	mov	r1, r4
   221b0:	4638      	mov	r0, r7
   221b2:	681b      	ldr	r3, [r3, #0]
   221b4:	4798      	blx	r3
    if (*registration == nullptr) {
   221b6:	9a01      	ldr	r2, [sp, #4]
    *registration = op_resolver.FindOp(builtin_code, version);
   221b8:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
   221ba:	bb10      	cbnz	r0, 22202 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9e>
      TF_LITE_REPORT_ERROR(
   221bc:	4613      	mov	r3, r2
   221be:	4a13      	ldr	r2, [pc, #76]	; (2220c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>)
   221c0:	4640      	mov	r0, r8
   221c2:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
   221c6:	4912      	ldr	r1, [pc, #72]	; (22210 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xac>)
   221c8:	f00d feba 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
   221cc:	e7e5      	b.n	2219a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    auto field_offset = GetOptionalFieldOffset(field);
   221ce:	2106      	movs	r1, #6
   221d0:	4628      	mov	r0, r5
   221d2:	9201      	str	r2, [sp, #4]
   221d4:	f005 f981 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   221d8:	b120      	cbz	r0, 221e4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x80>
   221da:	582b      	ldr	r3, [r5, r0]
    auto p = data_ + field_offset;
   221dc:	1829      	adds	r1, r5, r0
  } else if (!opcode->custom_code()) {
   221de:	18c9      	adds	r1, r1, r3
   221e0:	9a01      	ldr	r2, [sp, #4]
   221e2:	d104      	bne.n	221ee <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x8a>
    TF_LITE_REPORT_ERROR(
   221e4:	4640      	mov	r0, r8
   221e6:	490b      	ldr	r1, [pc, #44]	; (22214 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xb0>)
   221e8:	f00d feaa 	bl	2ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>
   221ec:	e7d5      	b.n	2219a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    *registration = op_resolver.FindOp(name, version);
   221ee:	683b      	ldr	r3, [r7, #0]
   221f0:	4638      	mov	r0, r7
   221f2:	685b      	ldr	r3, [r3, #4]
   221f4:	3104      	adds	r1, #4
   221f6:	4798      	blx	r3
   221f8:	6030      	str	r0, [r6, #0]
    status = kTfLiteError;
   221fa:	fab0 f080 	clz	r0, r0
   221fe:	0940      	lsrs	r0, r0, #5
   22200:	e7cc      	b.n	2219c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
  TfLiteStatus status = kTfLiteOk;
   22202:	2000      	movs	r0, #0
   22204:	e7ca      	b.n	2219c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x38>
   22206:	bf00      	nop
   22208:	00036cf1 	.word	0x00036cf1
   2220c:	00032ff8 	.word	0x00032ff8
   22210:	00036d45 	.word	0x00036d45
   22214:	00036d7a 	.word	0x00036d7a

00022218 <__cxa_guard_acquire>:
   22218:	6803      	ldr	r3, [r0, #0]
   2221a:	07db      	lsls	r3, r3, #31
   2221c:	b510      	push	{r4, lr}
   2221e:	d410      	bmi.n	22242 <__cxa_guard_acquire+0x2a>
   22220:	7843      	ldrb	r3, [r0, #1]
   22222:	b153      	cbz	r3, 2223a <__cxa_guard_acquire+0x22>
   22224:	2004      	movs	r0, #4
   22226:	f00e fae0 	bl	307ea <__cxa_allocate_exception>
   2222a:	4604      	mov	r4, r0
   2222c:	f000 f81a 	bl	22264 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>
   22230:	4a05      	ldr	r2, [pc, #20]	; (22248 <__cxa_guard_acquire+0x30>)
   22232:	4906      	ldr	r1, [pc, #24]	; (2224c <__cxa_guard_acquire+0x34>)
   22234:	4620      	mov	r0, r4
   22236:	f00e fb39 	bl	308ac <__cxa_throw>
   2223a:	2301      	movs	r3, #1
   2223c:	7043      	strb	r3, [r0, #1]
   2223e:	4618      	mov	r0, r3
   22240:	bd10      	pop	{r4, pc}
   22242:	2000      	movs	r0, #0
   22244:	e7fc      	b.n	22240 <__cxa_guard_acquire+0x28>
   22246:	bf00      	nop
   22248:	00022251 	.word	0x00022251
   2224c:	00033274 	.word	0x00033274

00022250 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>:
   22250:	4b03      	ldr	r3, [pc, #12]	; (22260 <_ZN9__gnu_cxx20recursive_init_errorD1Ev+0x10>)
   22252:	b510      	push	{r4, lr}
   22254:	4604      	mov	r4, r0
   22256:	6003      	str	r3, [r0, #0]
   22258:	f00e fadd 	bl	30816 <_ZNSt9exceptionD1Ev>
   2225c:	4620      	mov	r0, r4
   2225e:	bd10      	pop	{r4, pc}
   22260:	00033288 	.word	0x00033288

00022264 <_ZN9__gnu_cxx20recursive_init_errorC1Ev>:
   22264:	4b01      	ldr	r3, [pc, #4]	; (2226c <_ZN9__gnu_cxx20recursive_init_errorC1Ev+0x8>)
   22266:	6003      	str	r3, [r0, #0]
   22268:	4770      	bx	lr
   2226a:	bf00      	nop
   2226c:	00033288 	.word	0x00033288

00022270 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   22270:	4b03      	ldr	r3, [pc, #12]	; (22280 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   22272:	b510      	push	{r4, lr}
   22274:	4604      	mov	r4, r0
   22276:	6003      	str	r3, [r0, #0]
   22278:	f000 f804 	bl	22284 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   2227c:	4620      	mov	r0, r4
   2227e:	bd10      	pop	{r4, pc}
   22280:	000332a8 	.word	0x000332a8

00022284 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   22284:	4b03      	ldr	r3, [pc, #12]	; (22294 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   22286:	b510      	push	{r4, lr}
   22288:	4604      	mov	r4, r0
   2228a:	6003      	str	r3, [r0, #0]
   2228c:	f00e fa28 	bl	306e0 <_ZNSt9type_infoD1Ev>
   22290:	4620      	mov	r0, r4
   22292:	bd10      	pop	{r4, pc}
   22294:	000332e8 	.word	0x000332e8

00022298 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
   22298:	4a1a      	ldr	r2, [pc, #104]	; (22304 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x6c>)
   2229a:	6853      	ldr	r3, [r2, #4]
   2229c:	b570      	push	{r4, r5, r6, lr}
   2229e:	f1a0 0408 	sub.w	r4, r0, #8
   222a2:	4616      	mov	r6, r2
   222a4:	b123      	cbz	r3, 222b0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x18>
   222a6:	f850 1c08 	ldr.w	r1, [r0, #-8]
   222aa:	1865      	adds	r5, r4, r1
   222ac:	42ab      	cmp	r3, r5
   222ae:	d903      	bls.n	222b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x20>
   222b0:	f840 3c04 	str.w	r3, [r0, #-4]
   222b4:	6074      	str	r4, [r6, #4]
   222b6:	bd70      	pop	{r4, r5, r6, pc}
   222b8:	d106      	bne.n	222c8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x30>
   222ba:	e9d3 3500 	ldrd	r3, r5, [r3]
   222be:	4419      	add	r1, r3
   222c0:	e940 1502 	strd	r1, r5, [r0, #-8]
   222c4:	6054      	str	r4, [r2, #4]
   222c6:	e7f6      	b.n	222b6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
   222c8:	3204      	adds	r2, #4
   222ca:	685e      	ldr	r6, [r3, #4]
   222cc:	b14e      	cbz	r6, 222e2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x4a>
   222ce:	42b5      	cmp	r5, r6
   222d0:	d202      	bcs.n	222d8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x40>
   222d2:	1d1a      	adds	r2, r3, #4
   222d4:	4633      	mov	r3, r6
   222d6:	e7f8      	b.n	222ca <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x32>
   222d8:	bf01      	itttt	eq
   222da:	682e      	ldreq	r6, [r5, #0]
   222dc:	686d      	ldreq	r5, [r5, #4]
   222de:	1989      	addeq	r1, r1, r6
   222e0:	605d      	streq	r5, [r3, #4]
   222e2:	6813      	ldr	r3, [r2, #0]
   222e4:	681d      	ldr	r5, [r3, #0]
   222e6:	195e      	adds	r6, r3, r5
   222e8:	42b4      	cmp	r4, r6
   222ea:	bf17      	itett	ne
   222ec:	685b      	ldrne	r3, [r3, #4]
   222ee:	1949      	addeq	r1, r1, r5
   222f0:	f840 1c08 	strne.w	r1, [r0, #-8]
   222f4:	f840 3c04 	strne.w	r3, [r0, #-4]
   222f8:	bf16      	itet	ne
   222fa:	6813      	ldrne	r3, [r2, #0]
   222fc:	6019      	streq	r1, [r3, #0]
   222fe:	605c      	strne	r4, [r3, #4]
   22300:	e7d9      	b.n	222b6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
   22302:	bf00      	nop
   22304:	20026064 	.word	0x20026064

00022308 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
   22308:	f100 0308 	add.w	r3, r0, #8
   2230c:	4a0f      	ldr	r2, [pc, #60]	; (2234c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
   2230e:	2b08      	cmp	r3, #8
   22310:	f852 0f04 	ldr.w	r0, [r2, #4]!
   22314:	bf38      	it	cc
   22316:	2308      	movcc	r3, #8
   22318:	3307      	adds	r3, #7
   2231a:	f023 0307 	bic.w	r3, r3, #7
   2231e:	b530      	push	{r4, r5, lr}
   22320:	b168      	cbz	r0, 2233e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x36>
   22322:	e9d0 1400 	ldrd	r1, r4, [r0]
   22326:	428b      	cmp	r3, r1
   22328:	d90a      	bls.n	22340 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x38>
   2232a:	1d02      	adds	r2, r0, #4
   2232c:	4620      	mov	r0, r4
   2232e:	e7f7      	b.n	22320 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x18>
   22330:	18c5      	adds	r5, r0, r3
   22332:	606c      	str	r4, [r5, #4]
   22334:	50c1      	str	r1, [r0, r3]
   22336:	6810      	ldr	r0, [r2, #0]
   22338:	6003      	str	r3, [r0, #0]
   2233a:	6015      	str	r5, [r2, #0]
   2233c:	3008      	adds	r0, #8
   2233e:	bd30      	pop	{r4, r5, pc}
   22340:	1ac9      	subs	r1, r1, r3
   22342:	2907      	cmp	r1, #7
   22344:	d8f4      	bhi.n	22330 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x28>
   22346:	6014      	str	r4, [r2, #0]
   22348:	e7f8      	b.n	2233c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x34>
   2234a:	bf00      	nop
   2234c:	20026064 	.word	0x20026064

00022350 <__cxa_free_exception>:
   22350:	4a06      	ldr	r2, [pc, #24]	; (2236c <__cxa_free_exception+0x1c>)
   22352:	3880      	subs	r0, #128	; 0x80
   22354:	6893      	ldr	r3, [r2, #8]
   22356:	4298      	cmp	r0, r3
   22358:	d905      	bls.n	22366 <__cxa_free_exception+0x16>
   2235a:	68d2      	ldr	r2, [r2, #12]
   2235c:	4413      	add	r3, r2
   2235e:	4298      	cmp	r0, r3
   22360:	d201      	bcs.n	22366 <__cxa_free_exception+0x16>
   22362:	f7ff bf99 	b.w	22298 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
   22366:	f003 b943 	b.w	255f0 <free>
   2236a:	bf00      	nop
   2236c:	20026064 	.word	0x20026064

00022370 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   22370:	b538      	push	{r3, r4, r5, lr}
   22372:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   22376:	4c07      	ldr	r4, [pc, #28]	; (22394 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   22378:	4628      	mov	r0, r5
   2237a:	60e5      	str	r5, [r4, #12]
   2237c:	f003 f930 	bl	255e0 <malloc>
   22380:	60a0      	str	r0, [r4, #8]
   22382:	b910      	cbnz	r0, 2238a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
   22384:	60e0      	str	r0, [r4, #12]
   22386:	6060      	str	r0, [r4, #4]
   22388:	bd38      	pop	{r3, r4, r5, pc}
   2238a:	2300      	movs	r3, #0
   2238c:	6060      	str	r0, [r4, #4]
   2238e:	6005      	str	r5, [r0, #0]
   22390:	6043      	str	r3, [r0, #4]
   22392:	e7f9      	b.n	22388 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
   22394:	20026064 	.word	0x20026064

00022398 <_ZGTtNKSt9exception4whatEv>:
   22398:	4800      	ldr	r0, [pc, #0]	; (2239c <_ZGTtNKSt9exception4whatEv+0x4>)
   2239a:	4770      	bx	lr
   2239c:	00036e28 	.word	0x00036e28

000223a0 <_ZGTtNKSt13bad_exception4whatEv>:
   223a0:	4800      	ldr	r0, [pc, #0]	; (223a4 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
   223a2:	4770      	bx	lr
   223a4:	00036e37 	.word	0x00036e37

000223a8 <_ZSt13get_terminatev>:
   223a8:	4b01      	ldr	r3, [pc, #4]	; (223b0 <_ZSt13get_terminatev+0x8>)
   223aa:	e8d3 0faf 	lda	r0, [r3]
   223ae:	4770      	bx	lr
   223b0:	20020054 	.word	0x20020054

000223b4 <_ZSt14get_unexpectedv>:
   223b4:	4b01      	ldr	r3, [pc, #4]	; (223bc <_ZSt14get_unexpectedv+0x8>)
   223b6:	e8d3 0faf 	lda	r0, [r3]
   223ba:	4770      	bx	lr
   223bc:	20020050 	.word	0x20020050

000223c0 <__cxa_init_primary_exception>:
   223c0:	b538      	push	{r3, r4, r5, lr}
   223c2:	2500      	movs	r5, #0
   223c4:	4604      	mov	r4, r0
   223c6:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
   223ca:	f840 5c80 	str.w	r5, [r0, #-128]
   223ce:	f7ff fff1 	bl	223b4 <_ZSt14get_unexpectedv>
   223d2:	f844 0c70 	str.w	r0, [r4, #-112]
   223d6:	f7ff ffe7 	bl	223a8 <_ZSt13get_terminatev>
   223da:	2347      	movs	r3, #71	; 0x47
   223dc:	f844 0c6c 	str.w	r0, [r4, #-108]
   223e0:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
   223e4:	f804 3c58 	strb.w	r3, [r4, #-88]
   223e8:	234e      	movs	r3, #78	; 0x4e
   223ea:	f804 5c51 	strb.w	r5, [r4, #-81]
   223ee:	f804 3c57 	strb.w	r3, [r4, #-87]
   223f2:	2355      	movs	r3, #85	; 0x55
   223f4:	f804 3c56 	strb.w	r3, [r4, #-86]
   223f8:	2343      	movs	r3, #67	; 0x43
   223fa:	f804 3c55 	strb.w	r3, [r4, #-85]
   223fe:	f804 3c54 	strb.w	r3, [r4, #-84]
   22402:	232b      	movs	r3, #43	; 0x2b
   22404:	f804 3c53 	strb.w	r3, [r4, #-83]
   22408:	f804 3c52 	strb.w	r3, [r4, #-82]
   2240c:	4b01      	ldr	r3, [pc, #4]	; (22414 <__cxa_init_primary_exception+0x54>)
   2240e:	f844 3c50 	str.w	r3, [r4, #-80]
   22412:	bd38      	pop	{r3, r4, r5, pc}
   22414:	0003086b 	.word	0x0003086b

00022418 <_Znwj>:
   22418:	2801      	cmp	r0, #1
   2241a:	bf38      	it	cc
   2241c:	2001      	movcc	r0, #1
   2241e:	b510      	push	{r4, lr}
   22420:	4604      	mov	r4, r0
   22422:	4620      	mov	r0, r4
   22424:	f003 f8dc 	bl	255e0 <malloc>
   22428:	b968      	cbnz	r0, 22446 <_Znwj+0x2e>
   2242a:	f000 faa3 	bl	22974 <_ZSt15get_new_handlerv>
   2242e:	b940      	cbnz	r0, 22442 <_Znwj+0x2a>
   22430:	2004      	movs	r0, #4
   22432:	f00e f9da 	bl	307ea <__cxa_allocate_exception>
   22436:	4b04      	ldr	r3, [pc, #16]	; (22448 <_Znwj+0x30>)
   22438:	4a04      	ldr	r2, [pc, #16]	; (2244c <_Znwj+0x34>)
   2243a:	4905      	ldr	r1, [pc, #20]	; (22450 <_Znwj+0x38>)
   2243c:	6003      	str	r3, [r0, #0]
   2243e:	f00e fa35 	bl	308ac <__cxa_throw>
   22442:	4780      	blx	r0
   22444:	e7ed      	b.n	22422 <_Znwj+0xa>
   22446:	bd10      	pop	{r4, pc}
   22448:	00033358 	.word	0x00033358
   2244c:	0002245d 	.word	0x0002245d
   22450:	00033344 	.word	0x00033344

00022454 <_ZNKSt9bad_alloc4whatEv>:
   22454:	4800      	ldr	r0, [pc, #0]	; (22458 <_ZNKSt9bad_alloc4whatEv+0x4>)
   22456:	4770      	bx	lr
   22458:	00036ead 	.word	0x00036ead

0002245c <_ZNSt9bad_allocD1Ev>:
   2245c:	4b03      	ldr	r3, [pc, #12]	; (2246c <_ZNSt9bad_allocD1Ev+0x10>)
   2245e:	b510      	push	{r4, lr}
   22460:	4604      	mov	r4, r0
   22462:	6003      	str	r3, [r0, #0]
   22464:	f00e f9d7 	bl	30816 <_ZNSt9exceptionD1Ev>
   22468:	4620      	mov	r0, r4
   2246a:	bd10      	pop	{r4, pc}
   2246c:	00033358 	.word	0x00033358

00022470 <__cxa_type_match>:
   22470:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22474:	461d      	mov	r5, r3
   22476:	7803      	ldrb	r3, [r0, #0]
   22478:	460e      	mov	r6, r1
   2247a:	4602      	mov	r2, r0
   2247c:	2b47      	cmp	r3, #71	; 0x47
   2247e:	79c1      	ldrb	r1, [r0, #7]
   22480:	d113      	bne.n	224aa <__cxa_type_match+0x3a>
   22482:	7843      	ldrb	r3, [r0, #1]
   22484:	2b4e      	cmp	r3, #78	; 0x4e
   22486:	d110      	bne.n	224aa <__cxa_type_match+0x3a>
   22488:	7883      	ldrb	r3, [r0, #2]
   2248a:	2b55      	cmp	r3, #85	; 0x55
   2248c:	d10d      	bne.n	224aa <__cxa_type_match+0x3a>
   2248e:	78c3      	ldrb	r3, [r0, #3]
   22490:	2b43      	cmp	r3, #67	; 0x43
   22492:	d10a      	bne.n	224aa <__cxa_type_match+0x3a>
   22494:	7903      	ldrb	r3, [r0, #4]
   22496:	2b46      	cmp	r3, #70	; 0x46
   22498:	d107      	bne.n	224aa <__cxa_type_match+0x3a>
   2249a:	7943      	ldrb	r3, [r0, #5]
   2249c:	2b4f      	cmp	r3, #79	; 0x4f
   2249e:	d104      	bne.n	224aa <__cxa_type_match+0x3a>
   224a0:	7983      	ldrb	r3, [r0, #6]
   224a2:	2b52      	cmp	r3, #82	; 0x52
   224a4:	d101      	bne.n	224aa <__cxa_type_match+0x3a>
   224a6:	2900      	cmp	r1, #0
   224a8:	d030      	beq.n	2250c <__cxa_type_match+0x9c>
   224aa:	4610      	mov	r0, r2
   224ac:	f00e fa5f 	bl	3096e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   224b0:	f080 0001 	eor.w	r0, r0, #1
   224b4:	2300      	movs	r3, #0
   224b6:	b2c0      	uxtb	r0, r0
   224b8:	2400      	movs	r4, #0
   224ba:	9401      	str	r4, [sp, #4]
   224bc:	bb4b      	cbnz	r3, 22512 <__cxa_type_match+0xa2>
   224be:	bb50      	cbnz	r0, 22516 <__cxa_type_match+0xa6>
   224c0:	2901      	cmp	r1, #1
   224c2:	bf0a      	itet	eq
   224c4:	f852 3c20 	ldreq.w	r3, [r2, #-32]
   224c8:	f1a2 0320 	subne.w	r3, r2, #32
   224cc:	3b78      	subeq	r3, #120	; 0x78
   224ce:	2901      	cmp	r1, #1
   224d0:	bf0c      	ite	eq
   224d2:	f852 2c20 	ldreq.w	r2, [r2, #-32]
   224d6:	3258      	addne	r2, #88	; 0x58
   224d8:	681c      	ldr	r4, [r3, #0]
   224da:	9201      	str	r2, [sp, #4]
   224dc:	6823      	ldr	r3, [r4, #0]
   224de:	4620      	mov	r0, r4
   224e0:	689b      	ldr	r3, [r3, #8]
   224e2:	4798      	blx	r3
   224e4:	b1c8      	cbz	r0, 2251a <__cxa_type_match+0xaa>
   224e6:	9b01      	ldr	r3, [sp, #4]
   224e8:	2702      	movs	r7, #2
   224ea:	681b      	ldr	r3, [r3, #0]
   224ec:	9301      	str	r3, [sp, #4]
   224ee:	6833      	ldr	r3, [r6, #0]
   224f0:	aa01      	add	r2, sp, #4
   224f2:	4621      	mov	r1, r4
   224f4:	4630      	mov	r0, r6
   224f6:	f8d3 8010 	ldr.w	r8, [r3, #16]
   224fa:	2301      	movs	r3, #1
   224fc:	47c0      	blx	r8
   224fe:	b170      	cbz	r0, 2251e <__cxa_type_match+0xae>
   22500:	9b01      	ldr	r3, [sp, #4]
   22502:	602b      	str	r3, [r5, #0]
   22504:	4638      	mov	r0, r7
   22506:	b002      	add	sp, #8
   22508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2250c:	2301      	movs	r3, #1
   2250e:	4608      	mov	r0, r1
   22510:	e7d2      	b.n	224b8 <__cxa_type_match+0x48>
   22512:	4c04      	ldr	r4, [pc, #16]	; (22524 <__cxa_type_match+0xb4>)
   22514:	e7e2      	b.n	224dc <__cxa_type_match+0x6c>
   22516:	4c04      	ldr	r4, [pc, #16]	; (22528 <__cxa_type_match+0xb8>)
   22518:	e7e0      	b.n	224dc <__cxa_type_match+0x6c>
   2251a:	2701      	movs	r7, #1
   2251c:	e7e7      	b.n	224ee <__cxa_type_match+0x7e>
   2251e:	4607      	mov	r7, r0
   22520:	e7f0      	b.n	22504 <__cxa_type_match+0x94>
   22522:	bf00      	nop
   22524:	0003330c 	.word	0x0003330c
   22528:	00033314 	.word	0x00033314

0002252c <__cxa_call_unexpected>:
   2252c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22530:	ed2d 8b02 	vpush	{d8}
   22534:	b085      	sub	sp, #20
   22536:	4602      	mov	r2, r0
   22538:	f00e fa6c 	bl	30a14 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   2253c:	b188      	cbz	r0, 22562 <__cxa_call_unexpected+0x36>
   2253e:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
   22542:	2600      	movs	r6, #0
   22544:	e952 7406 	ldrd	r7, r4, [r2, #-24]
   22548:	e9d2 850c 	ldrd	r8, r5, [r2, #48]	; 0x30
   2254c:	4610      	mov	r0, r2
   2254e:	f00e faaa 	bl	30aa6 <__cxa_begin_catch>
   22552:	b16e      	cbz	r6, 22570 <__cxa_call_unexpected+0x44>
   22554:	f00e f984 	bl	30860 <_ZSt10unexpectedv>
   22558:	f00e faa5 	bl	30aa6 <__cxa_begin_catch>
   2255c:	b15e      	cbz	r6, 22576 <__cxa_call_unexpected+0x4a>
   2255e:	f00e f976 	bl	3084e <_ZSt9terminatev>
   22562:	4604      	mov	r4, r0
   22564:	4607      	mov	r7, r0
   22566:	2601      	movs	r6, #1
   22568:	4605      	mov	r5, r0
   2256a:	4680      	mov	r8, r0
   2256c:	4682      	mov	sl, r0
   2256e:	e7ed      	b.n	2254c <__cxa_call_unexpected+0x20>
   22570:	4638      	mov	r0, r7
   22572:	f00e f971 	bl	30858 <_ZN10__cxxabiv112__unexpectedEPFvvE>
   22576:	f000 f851 	bl	2261c <__cxa_get_globals_fast>
   2257a:	6807      	ldr	r7, [r0, #0]
   2257c:	f04f 0900 	mov.w	r9, #0
   22580:	f8df b094 	ldr.w	fp, [pc, #148]	; 22618 <__cxa_call_unexpected+0xec>
   22584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   22588:	2b01      	cmp	r3, #1
   2258a:	bf0c      	ite	eq
   2258c:	683b      	ldreq	r3, [r7, #0]
   2258e:	f107 0378 	addne.w	r3, r7, #120	; 0x78
   22592:	9302      	str	r3, [sp, #8]
   22594:	f028 0303 	bic.w	r3, r8, #3
   22598:	9301      	str	r3, [sp, #4]
   2259a:	f107 0320 	add.w	r3, r7, #32
   2259e:	ee08 3a10 	vmov	s16, r3
   225a2:	45ca      	cmp	sl, r9
   225a4:	dd27      	ble.n	225f6 <__cxa_call_unexpected+0xca>
   225a6:	f8d5 8000 	ldr.w	r8, [r5]
   225aa:	f1b8 0f00 	cmp.w	r8, #0
   225ae:	d000      	beq.n	225b2 <__cxa_call_unexpected+0x86>
   225b0:	44a8      	add	r8, r5
   225b2:	ab02      	add	r3, sp, #8
   225b4:	2200      	movs	r2, #0
   225b6:	4641      	mov	r1, r8
   225b8:	ee18 0a10 	vmov	r0, s16
   225bc:	f7ff ff58 	bl	22470 <__cxa_type_match>
   225c0:	b138      	cbz	r0, 225d2 <__cxa_call_unexpected+0xa6>
   225c2:	f00e f98d 	bl	308e0 <__cxa_rethrow>
   225c6:	f00e fa97 	bl	30af8 <__cxa_end_catch>
   225ca:	f00e fa95 	bl	30af8 <__cxa_end_catch>
   225ce:	f00e f9c8 	bl	30962 <__cxa_end_cleanup>
   225d2:	f8d8 3000 	ldr.w	r3, [r8]
   225d6:	aa03      	add	r2, sp, #12
   225d8:	9003      	str	r0, [sp, #12]
   225da:	4659      	mov	r1, fp
   225dc:	691b      	ldr	r3, [r3, #16]
   225de:	4640      	mov	r0, r8
   225e0:	461f      	mov	r7, r3
   225e2:	2301      	movs	r3, #1
   225e4:	47b8      	blx	r7
   225e6:	9b01      	ldr	r3, [sp, #4]
   225e8:	2800      	cmp	r0, #0
   225ea:	bf18      	it	ne
   225ec:	4606      	movne	r6, r0
   225ee:	f109 0901 	add.w	r9, r9, #1
   225f2:	441d      	add	r5, r3
   225f4:	e7d5      	b.n	225a2 <__cxa_call_unexpected+0x76>
   225f6:	b146      	cbz	r6, 2260a <__cxa_call_unexpected+0xde>
   225f8:	2004      	movs	r0, #4
   225fa:	f00e f8f6 	bl	307ea <__cxa_allocate_exception>
   225fe:	4b04      	ldr	r3, [pc, #16]	; (22610 <__cxa_call_unexpected+0xe4>)
   22600:	4a04      	ldr	r2, [pc, #16]	; (22614 <__cxa_call_unexpected+0xe8>)
   22602:	4905      	ldr	r1, [pc, #20]	; (22618 <__cxa_call_unexpected+0xec>)
   22604:	6003      	str	r3, [r0, #0]
   22606:	f00e f951 	bl	308ac <__cxa_throw>
   2260a:	4620      	mov	r0, r4
   2260c:	f00e f90c 	bl	30828 <_ZN10__cxxabiv111__terminateEPFvvE>
   22610:	00033338 	.word	0x00033338
   22614:	00030819 	.word	0x00030819
   22618:	0003331c 	.word	0x0003331c

0002261c <__cxa_get_globals_fast>:
   2261c:	4800      	ldr	r0, [pc, #0]	; (22620 <__cxa_get_globals_fast+0x4>)
   2261e:	4770      	bx	lr
   22620:	20026074 	.word	0x20026074

00022624 <__cxa_get_globals>:
   22624:	4800      	ldr	r0, [pc, #0]	; (22628 <__cxa_get_globals+0x4>)
   22626:	4770      	bx	lr
   22628:	20026074 	.word	0x20026074

0002262c <__gxx_personality_v0>:
   2262c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22630:	2300      	movs	r3, #0
   22632:	b091      	sub	sp, #68	; 0x44
   22634:	4606      	mov	r6, r0
   22636:	460c      	mov	r4, r1
   22638:	9305      	str	r3, [sp, #20]
   2263a:	f000 0303 	and.w	r3, r0, #3
   2263e:	4617      	mov	r7, r2
   22640:	2b01      	cmp	r3, #1
   22642:	d00e      	beq.n	22662 <__gxx_personality_v0+0x36>
   22644:	2b02      	cmp	r3, #2
   22646:	d003      	beq.n	22650 <__gxx_personality_v0+0x24>
   22648:	2b00      	cmp	r3, #0
   2264a:	d13b      	bne.n	226c4 <__gxx_personality_v0+0x98>
   2264c:	0701      	lsls	r1, r0, #28
   2264e:	d53b      	bpl.n	226c8 <__gxx_personality_v0+0x9c>
   22650:	4639      	mov	r1, r7
   22652:	4620      	mov	r0, r4
   22654:	f7ef fa10 	bl	11a78 <__gnu_unwind_frame>
   22658:	b390      	cbz	r0, 226c0 <__gxx_personality_v0+0x94>
   2265a:	2009      	movs	r0, #9
   2265c:	b011      	add	sp, #68	; 0x44
   2265e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22662:	0702      	lsls	r2, r0, #28
   22664:	d406      	bmi.n	22674 <__gxx_personality_v0+0x48>
   22666:	6a0d      	ldr	r5, [r1, #32]
   22668:	4638      	mov	r0, r7
   2266a:	210d      	movs	r1, #13
   2266c:	f00e fb39 	bl	30ce2 <_Unwind_GetGR>
   22670:	4285      	cmp	r5, r0
   22672:	d02b      	beq.n	226cc <__gxx_personality_v0+0xa0>
   22674:	2002      	movs	r0, #2
   22676:	f006 0608 	and.w	r6, r6, #8
   2267a:	2300      	movs	r3, #0
   2267c:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
   22680:	220c      	movs	r2, #12
   22682:	4306      	orrs	r6, r0
   22684:	4619      	mov	r1, r3
   22686:	4638      	mov	r0, r7
   22688:	f8cd a000 	str.w	sl, [sp]
   2268c:	940a      	str	r4, [sp, #40]	; 0x28
   2268e:	f7ee fc49 	bl	10f24 <_Unwind_VRS_Set>
   22692:	2e06      	cmp	r6, #6
   22694:	d11c      	bne.n	226d0 <__gxx_personality_v0+0xa4>
   22696:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   2269a:	f1b8 0f00 	cmp.w	r8, #0
   2269e:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
   226a2:	bf0c      	ite	eq
   226a4:	f04f 0b01 	moveq.w	fp, #1
   226a8:	f04f 0b03 	movne.w	fp, #3
   226ac:	f016 0608 	ands.w	r6, r6, #8
   226b0:	f000 810f 	beq.w	228d2 <__gxx_personality_v0+0x2a6>
   226b4:	f1bb 0f01 	cmp.w	fp, #1
   226b8:	f040 8104 	bne.w	228c4 <__gxx_personality_v0+0x298>
   226bc:	f00e f8c7 	bl	3084e <_ZSt9terminatev>
   226c0:	2008      	movs	r0, #8
   226c2:	e7cb      	b.n	2265c <__gxx_personality_v0+0x30>
   226c4:	f00e fbad 	bl	30e22 <abort>
   226c8:	2001      	movs	r0, #1
   226ca:	e7d4      	b.n	22676 <__gxx_personality_v0+0x4a>
   226cc:	2006      	movs	r0, #6
   226ce:	e7d2      	b.n	22676 <__gxx_personality_v0+0x4a>
   226d0:	4638      	mov	r0, r7
   226d2:	f7ef f9ed 	bl	11ab0 <_Unwind_GetLanguageSpecificData>
   226d6:	4681      	mov	r9, r0
   226d8:	2800      	cmp	r0, #0
   226da:	d0b9      	beq.n	22650 <__gxx_personality_v0+0x24>
   226dc:	4652      	mov	r2, sl
   226de:	4601      	mov	r1, r0
   226e0:	4638      	mov	r0, r7
   226e2:	f00e facd 	bl	30c80 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   226e6:	4639      	mov	r1, r7
   226e8:	4605      	mov	r5, r0
   226ea:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   226ee:	f00e fa92 	bl	30c16 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   226f2:	210f      	movs	r1, #15
   226f4:	900c      	str	r0, [sp, #48]	; 0x30
   226f6:	4638      	mov	r0, r7
   226f8:	f00e faf3 	bl	30ce2 <_Unwind_GetGR>
   226fc:	f020 0801 	bic.w	r8, r0, #1
   22700:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   22704:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   22706:	42ab      	cmp	r3, r5
   22708:	f240 80c4 	bls.w	22894 <__gxx_personality_v0+0x268>
   2270c:	462a      	mov	r2, r5
   2270e:	ab06      	add	r3, sp, #24
   22710:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
   22714:	2000      	movs	r0, #0
   22716:	f00e faa2 	bl	30c5e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
   2271a:	ab07      	add	r3, sp, #28
   2271c:	4602      	mov	r2, r0
   2271e:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
   22722:	2000      	movs	r0, #0
   22724:	f00e fa9b 	bl	30c5e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
   22728:	ab08      	add	r3, sp, #32
   2272a:	4602      	mov	r2, r0
   2272c:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
   22730:	2000      	movs	r0, #0
   22732:	f00e fa94 	bl	30c5e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
   22736:	a909      	add	r1, sp, #36	; 0x24
   22738:	f00e fa02 	bl	30b40 <_ZL12read_uleb128PKhPm>
   2273c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2273e:	9a06      	ldr	r2, [sp, #24]
   22740:	4605      	mov	r5, r0
   22742:	4413      	add	r3, r2
   22744:	4543      	cmp	r3, r8
   22746:	d901      	bls.n	2274c <__gxx_personality_v0+0x120>
   22748:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2274a:	e7db      	b.n	22704 <__gxx_personality_v0+0xd8>
   2274c:	9a07      	ldr	r2, [sp, #28]
   2274e:	4413      	add	r3, r2
   22750:	4543      	cmp	r3, r8
   22752:	d9d7      	bls.n	22704 <__gxx_personality_v0+0xd8>
   22754:	f8dd 8020 	ldr.w	r8, [sp, #32]
   22758:	f1b8 0f00 	cmp.w	r8, #0
   2275c:	d001      	beq.n	22762 <__gxx_personality_v0+0x136>
   2275e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   22760:	4498      	add	r8, r3
   22762:	9d09      	ldr	r5, [sp, #36]	; 0x24
   22764:	b115      	cbz	r5, 2276c <__gxx_personality_v0+0x140>
   22766:	3d01      	subs	r5, #1
   22768:	980e      	ldr	r0, [sp, #56]	; 0x38
   2276a:	4405      	add	r5, r0
   2276c:	f1b8 0f00 	cmp.w	r8, #0
   22770:	f43f af6e 	beq.w	22650 <__gxx_personality_v0+0x24>
   22774:	2d00      	cmp	r5, #0
   22776:	f000 80fa 	beq.w	2296e <__gxx_personality_v0+0x342>
   2277a:	f016 0308 	ands.w	r3, r6, #8
   2277e:	9302      	str	r3, [sp, #8]
   22780:	d034      	beq.n	227ec <__gxx_personality_v0+0x1c0>
   22782:	2347      	movs	r3, #71	; 0x47
   22784:	7023      	strb	r3, [r4, #0]
   22786:	234e      	movs	r3, #78	; 0x4e
   22788:	7063      	strb	r3, [r4, #1]
   2278a:	2355      	movs	r3, #85	; 0x55
   2278c:	70a3      	strb	r3, [r4, #2]
   2278e:	2343      	movs	r3, #67	; 0x43
   22790:	70e3      	strb	r3, [r4, #3]
   22792:	2346      	movs	r3, #70	; 0x46
   22794:	7123      	strb	r3, [r4, #4]
   22796:	234f      	movs	r3, #79	; 0x4f
   22798:	7163      	strb	r3, [r4, #5]
   2279a:	2352      	movs	r3, #82	; 0x52
   2279c:	71a3      	strb	r3, [r4, #6]
   2279e:	2300      	movs	r3, #0
   227a0:	71e3      	strb	r3, [r4, #7]
   227a2:	f04f 0b00 	mov.w	fp, #0
   227a6:	a907      	add	r1, sp, #28
   227a8:	4628      	mov	r0, r5
   227aa:	f00e f9d7 	bl	30b5c <_ZL12read_sleb128PKhPl>
   227ae:	a908      	add	r1, sp, #32
   227b0:	9003      	str	r0, [sp, #12]
   227b2:	f00e f9d3 	bl	30b5c <_ZL12read_sleb128PKhPl>
   227b6:	9907      	ldr	r1, [sp, #28]
   227b8:	2900      	cmp	r1, #0
   227ba:	d068      	beq.n	2288e <__gxx_personality_v0+0x262>
   227bc:	dd3a      	ble.n	22834 <__gxx_personality_v0+0x208>
   227be:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   227c2:	28ff      	cmp	r0, #255	; 0xff
   227c4:	d032      	beq.n	2282c <__gxx_personality_v0+0x200>
   227c6:	f000 0307 	and.w	r3, r0, #7
   227ca:	2b04      	cmp	r3, #4
   227cc:	f63f af7a 	bhi.w	226c4 <__gxx_personality_v0+0x98>
   227d0:	a201      	add	r2, pc, #4	; (adr r2, 227d8 <__gxx_personality_v0+0x1ac>)
   227d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   227d6:	bf00      	nop
   227d8:	00022831 	.word	0x00022831
   227dc:	000226c5 	.word	0x000226c5
   227e0:	000227ff 	.word	0x000227ff
   227e4:	00022831 	.word	0x00022831
   227e8:	00022829 	.word	0x00022829
   227ec:	79e3      	ldrb	r3, [r4, #7]
   227ee:	2b01      	cmp	r3, #1
   227f0:	bf0c      	ite	eq
   227f2:	f854 3c20 	ldreq.w	r3, [r4, #-32]
   227f6:	f104 0358 	addne.w	r3, r4, #88	; 0x58
   227fa:	9305      	str	r3, [sp, #20]
   227fc:	e7d1      	b.n	227a2 <__gxx_personality_v0+0x176>
   227fe:	2502      	movs	r5, #2
   22800:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   22802:	ab09      	add	r3, sp, #36	; 0x24
   22804:	fb05 2211 	mls	r2, r5, r1, r2
   22808:	990c      	ldr	r1, [sp, #48]	; 0x30
   2280a:	f00e f9be 	bl	30b8a <_ZL28read_encoded_value_with_basehjPKhPj>
   2280e:	9909      	ldr	r1, [sp, #36]	; 0x24
   22810:	b131      	cbz	r1, 22820 <__gxx_personality_v0+0x1f4>
   22812:	b37c      	cbz	r4, 22874 <__gxx_personality_v0+0x248>
   22814:	ab05      	add	r3, sp, #20
   22816:	2200      	movs	r2, #0
   22818:	4620      	mov	r0, r4
   2281a:	f7ff fe29 	bl	22470 <__cxa_type_match>
   2281e:	b348      	cbz	r0, 22874 <__gxx_personality_v0+0x248>
   22820:	9d07      	ldr	r5, [sp, #28]
   22822:	f04f 0b03 	mov.w	fp, #3
   22826:	e039      	b.n	2289c <__gxx_personality_v0+0x270>
   22828:	2508      	movs	r5, #8
   2282a:	e7e9      	b.n	22800 <__gxx_personality_v0+0x1d4>
   2282c:	2500      	movs	r5, #0
   2282e:	e7e7      	b.n	22800 <__gxx_personality_v0+0x1d4>
   22830:	2504      	movs	r5, #4
   22832:	e7e5      	b.n	22800 <__gxx_personality_v0+0x1d4>
   22834:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
   22838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2283a:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
   2283e:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
   22842:	313f      	adds	r1, #63	; 0x3f
   22844:	eb03 0581 	add.w	r5, r3, r1, lsl #2
   22848:	b1dc      	cbz	r4, 22882 <__gxx_personality_v0+0x256>
   2284a:	9a02      	ldr	r2, [sp, #8]
   2284c:	b9ca      	cbnz	r2, 22882 <__gxx_personality_v0+0x256>
   2284e:	9b05      	ldr	r3, [sp, #20]
   22850:	3d04      	subs	r5, #4
   22852:	9309      	str	r3, [sp, #36]	; 0x24
   22854:	f855 1f04 	ldr.w	r1, [r5, #4]!
   22858:	b141      	cbz	r1, 2286c <__gxx_personality_v0+0x240>
   2285a:	ab09      	add	r3, sp, #36	; 0x24
   2285c:	2200      	movs	r2, #0
   2285e:	4429      	add	r1, r5
   22860:	4620      	mov	r0, r4
   22862:	f7ff fe05 	bl	22470 <__cxa_type_match>
   22866:	2800      	cmp	r0, #0
   22868:	d0f4      	beq.n	22854 <__gxx_personality_v0+0x228>
   2286a:	2101      	movs	r1, #1
   2286c:	f081 0101 	eor.w	r1, r1, #1
   22870:	2900      	cmp	r1, #0
   22872:	d1d5      	bne.n	22820 <__gxx_personality_v0+0x1f4>
   22874:	9d08      	ldr	r5, [sp, #32]
   22876:	2d00      	cmp	r5, #0
   22878:	d075      	beq.n	22966 <__gxx_personality_v0+0x33a>
   2287a:	9b03      	ldr	r3, [sp, #12]
   2287c:	442b      	add	r3, r5
   2287e:	461d      	mov	r5, r3
   22880:	e791      	b.n	227a6 <__gxx_personality_v0+0x17a>
   22882:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
   22886:	fab1 f181 	clz	r1, r1
   2288a:	0949      	lsrs	r1, r1, #5
   2288c:	e7f0      	b.n	22870 <__gxx_personality_v0+0x244>
   2288e:	f04f 0b01 	mov.w	fp, #1
   22892:	e7ef      	b.n	22874 <__gxx_personality_v0+0x248>
   22894:	2500      	movs	r5, #0
   22896:	f04f 0b01 	mov.w	fp, #1
   2289a:	46a8      	mov	r8, r5
   2289c:	07f3      	lsls	r3, r6, #31
   2289e:	f57f af05 	bpl.w	226ac <__gxx_personality_v0+0x80>
   228a2:	f1bb 0f02 	cmp.w	fp, #2
   228a6:	f43f aed3 	beq.w	22650 <__gxx_personality_v0+0x24>
   228aa:	9e05      	ldr	r6, [sp, #20]
   228ac:	210d      	movs	r1, #13
   228ae:	4638      	mov	r0, r7
   228b0:	f00e fa17 	bl	30ce2 <_Unwind_GetGR>
   228b4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
   228b8:	e9c4 0608 	strd	r0, r6, [r4, #32]
   228bc:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
   228c0:	2006      	movs	r0, #6
   228c2:	e6cb      	b.n	2265c <__gxx_personality_v0+0x30>
   228c4:	2d00      	cmp	r5, #0
   228c6:	da25      	bge.n	22914 <__gxx_personality_v0+0x2e8>
   228c8:	f00d ffca 	bl	30860 <_ZSt10unexpectedv>
   228cc:	f00e f8eb 	bl	30aa6 <__cxa_begin_catch>
   228d0:	e6f4      	b.n	226bc <__gxx_personality_v0+0x90>
   228d2:	f1bb 0f01 	cmp.w	fp, #1
   228d6:	d102      	bne.n	228de <__gxx_personality_v0+0x2b2>
   228d8:	4620      	mov	r0, r4
   228da:	f00e f8b8 	bl	30a4e <__cxa_call_terminate>
   228de:	2d00      	cmp	r5, #0
   228e0:	da18      	bge.n	22914 <__gxx_personality_v0+0x2e8>
   228e2:	4652      	mov	r2, sl
   228e4:	4649      	mov	r1, r9
   228e6:	4638      	mov	r0, r7
   228e8:	f00e f9ca 	bl	30c80 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
   228ec:	4639      	mov	r1, r7
   228ee:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   228f2:	f00e f990 	bl	30c16 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   228f6:	43eb      	mvns	r3, r5
   228f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   228fa:	900c      	str	r0, [sp, #48]	; 0x30
   228fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   22900:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
   22904:	b10a      	cbz	r2, 2290a <__gxx_personality_v0+0x2de>
   22906:	3601      	adds	r6, #1
   22908:	e7fa      	b.n	22900 <__gxx_personality_v0+0x2d4>
   2290a:	2204      	movs	r2, #4
   2290c:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
   22910:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   22914:	2300      	movs	r3, #0
   22916:	ae09      	add	r6, sp, #36	; 0x24
   22918:	4638      	mov	r0, r7
   2291a:	9409      	str	r4, [sp, #36]	; 0x24
   2291c:	461a      	mov	r2, r3
   2291e:	4619      	mov	r1, r3
   22920:	9600      	str	r6, [sp, #0]
   22922:	f7ee faff 	bl	10f24 <_Unwind_VRS_Set>
   22926:	2300      	movs	r3, #0
   22928:	2201      	movs	r2, #1
   2292a:	4638      	mov	r0, r7
   2292c:	4619      	mov	r1, r3
   2292e:	9600      	str	r6, [sp, #0]
   22930:	9509      	str	r5, [sp, #36]	; 0x24
   22932:	f7ee faf7 	bl	10f24 <_Unwind_VRS_Set>
   22936:	210f      	movs	r1, #15
   22938:	4638      	mov	r0, r7
   2293a:	f00e f9d2 	bl	30ce2 <_Unwind_GetGR>
   2293e:	f000 0001 	and.w	r0, r0, #1
   22942:	2300      	movs	r3, #0
   22944:	220f      	movs	r2, #15
   22946:	ea40 0008 	orr.w	r0, r0, r8
   2294a:	9600      	str	r6, [sp, #0]
   2294c:	4619      	mov	r1, r3
   2294e:	9009      	str	r0, [sp, #36]	; 0x24
   22950:	4638      	mov	r0, r7
   22952:	f7ee fae7 	bl	10f24 <_Unwind_VRS_Set>
   22956:	f1bb 0f02 	cmp.w	fp, #2
   2295a:	d102      	bne.n	22962 <__gxx_personality_v0+0x336>
   2295c:	4620      	mov	r0, r4
   2295e:	f00e f823 	bl	309a8 <__cxa_begin_cleanup>
   22962:	2007      	movs	r0, #7
   22964:	e67a      	b.n	2265c <__gxx_personality_v0+0x30>
   22966:	f1bb 0f00 	cmp.w	fp, #0
   2296a:	f43f ae71 	beq.w	22650 <__gxx_personality_v0+0x24>
   2296e:	f04f 0b02 	mov.w	fp, #2
   22972:	e793      	b.n	2289c <__gxx_personality_v0+0x270>

00022974 <_ZSt15get_new_handlerv>:
   22974:	4b01      	ldr	r3, [pc, #4]	; (2297c <_ZSt15get_new_handlerv+0x8>)
   22976:	e8d3 0faf 	lda	r0, [r3]
   2297a:	4770      	bx	lr
   2297c:	20026080 	.word	0x20026080

00022980 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
   22980:	4b32      	ldr	r3, [pc, #200]	; (22a4c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>)
   22982:	781a      	ldrb	r2, [r3, #0]
   22984:	b573      	push	{r0, r1, r4, r5, r6, lr}
   22986:	4c32      	ldr	r4, [pc, #200]	; (22a50 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>)
   22988:	b132      	cbz	r2, 22998 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x18>
   2298a:	6823      	ldr	r3, [r4, #0]
   2298c:	4831      	ldr	r0, [pc, #196]	; (22a54 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd4>)
   2298e:	68d9      	ldr	r1, [r3, #12]
   22990:	f002 fcd4 	bl	2533c <fputs>
   22994:	f00e fa45 	bl	30e22 <abort>
   22998:	2201      	movs	r2, #1
   2299a:	701a      	strb	r2, [r3, #0]
   2299c:	f00e f9ad 	bl	30cfa <__cxa_current_exception_type>
   229a0:	2800      	cmp	r0, #0
   229a2:	d038      	beq.n	22a16 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x96>
   229a4:	6845      	ldr	r5, [r0, #4]
   229a6:	2200      	movs	r2, #0
   229a8:	782b      	ldrb	r3, [r5, #0]
   229aa:	4611      	mov	r1, r2
   229ac:	2b2a      	cmp	r3, #42	; 0x2a
   229ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   229b2:	bf08      	it	eq
   229b4:	3501      	addeq	r5, #1
   229b6:	9301      	str	r3, [sp, #4]
   229b8:	ab01      	add	r3, sp, #4
   229ba:	4628      	mov	r0, r5
   229bc:	f7ed fd14 	bl	103e8 <__cxa_demangle>
   229c0:	6823      	ldr	r3, [r4, #0]
   229c2:	4606      	mov	r6, r0
   229c4:	4824      	ldr	r0, [pc, #144]	; (22a58 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd8>)
   229c6:	68d9      	ldr	r1, [r3, #12]
   229c8:	f002 fcb8 	bl	2533c <fputs>
   229cc:	9b01      	ldr	r3, [sp, #4]
   229ce:	b9f3      	cbnz	r3, 22a0e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8e>
   229d0:	6823      	ldr	r3, [r4, #0]
   229d2:	4630      	mov	r0, r6
   229d4:	68d9      	ldr	r1, [r3, #12]
   229d6:	f002 fcb1 	bl	2533c <fputs>
   229da:	6823      	ldr	r3, [r4, #0]
   229dc:	481f      	ldr	r0, [pc, #124]	; (22a5c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xdc>)
   229de:	68d9      	ldr	r1, [r3, #12]
   229e0:	f002 fcac 	bl	2533c <fputs>
   229e4:	9b01      	ldr	r3, [sp, #4]
   229e6:	b913      	cbnz	r3, 229ee <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6e>
   229e8:	4630      	mov	r0, r6
   229ea:	f002 fe01 	bl	255f0 <free>
   229ee:	f00d ff77 	bl	308e0 <__cxa_rethrow>
   229f2:	2901      	cmp	r1, #1
   229f4:	d120      	bne.n	22a38 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xb8>
   229f6:	f00e f856 	bl	30aa6 <__cxa_begin_catch>
   229fa:	6803      	ldr	r3, [r0, #0]
   229fc:	689b      	ldr	r3, [r3, #8]
   229fe:	4798      	blx	r3
   22a00:	6823      	ldr	r3, [r4, #0]
   22a02:	4605      	mov	r5, r0
   22a04:	4816      	ldr	r0, [pc, #88]	; (22a60 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe0>)
   22a06:	68d9      	ldr	r1, [r3, #12]
   22a08:	f002 fc98 	bl	2533c <fputs>
   22a0c:	e007      	b.n	22a1e <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x9e>
   22a0e:	6823      	ldr	r3, [r4, #0]
   22a10:	4628      	mov	r0, r5
   22a12:	68d9      	ldr	r1, [r3, #12]
   22a14:	e7df      	b.n	229d6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
   22a16:	6823      	ldr	r3, [r4, #0]
   22a18:	4812      	ldr	r0, [pc, #72]	; (22a64 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xe4>)
   22a1a:	68d9      	ldr	r1, [r3, #12]
   22a1c:	e7b8      	b.n	22990 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10>
   22a1e:	6823      	ldr	r3, [r4, #0]
   22a20:	4628      	mov	r0, r5
   22a22:	68d9      	ldr	r1, [r3, #12]
   22a24:	f002 fc8a 	bl	2533c <fputs>
   22a28:	6823      	ldr	r3, [r4, #0]
   22a2a:	200a      	movs	r0, #10
   22a2c:	68d9      	ldr	r1, [r3, #12]
   22a2e:	f002 fc4d 	bl	252cc <fputc>
   22a32:	f00e f861 	bl	30af8 <__cxa_end_catch>
   22a36:	e7ad      	b.n	22994 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x14>
   22a38:	f00e f835 	bl	30aa6 <__cxa_begin_catch>
   22a3c:	f00e f85c 	bl	30af8 <__cxa_end_catch>
   22a40:	e7a8      	b.n	22994 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x14>
   22a42:	f00e f859 	bl	30af8 <__cxa_end_catch>
   22a46:	f00d ff8c 	bl	30962 <__cxa_end_cleanup>
   22a4a:	bf00      	nop
   22a4c:	2002712c 	.word	0x2002712c
   22a50:	20020058 	.word	0x20020058
   22a54:	00036ec9 	.word	0x00036ec9
   22a58:	00036ee7 	.word	0x00036ee7
   22a5c:	00036d77 	.word	0x00036d77
   22a60:	00036f46 	.word	0x00036f46
   22a64:	00036f18 	.word	0x00036f18

00022a68 <frexp>:
   22a68:	b580      	push	{r7, lr}
   22a6a:	b08e      	sub	sp, #56	; 0x38
   22a6c:	af00      	add	r7, sp, #0
   22a6e:	e9c7 0102 	strd	r0, r1, [r7, #8]
   22a72:	607a      	str	r2, [r7, #4]
   22a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   22a78:	e9c7 2308 	strd	r2, r3, [r7, #32]
   22a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22a7e:	637b      	str	r3, [r7, #52]	; 0x34
   22a80:	6a3b      	ldr	r3, [r7, #32]
   22a82:	62fb      	str	r3, [r7, #44]	; 0x2c
   22a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   22a86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   22a8a:	633b      	str	r3, [r7, #48]	; 0x30
   22a8c:	687b      	ldr	r3, [r7, #4]
   22a8e:	2200      	movs	r2, #0
   22a90:	601a      	str	r2, [r3, #0]
   22a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   22a94:	4a23      	ldr	r2, [pc, #140]	; (22b24 <frexp+0xbc>)
   22a96:	4293      	cmp	r3, r2
   22a98:	dc04      	bgt.n	22aa4 <frexp+0x3c>
   22a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   22a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22a9e:	4313      	orrs	r3, r2
   22aa0:	2b00      	cmp	r3, #0
   22aa2:	d102      	bne.n	22aaa <frexp+0x42>
   22aa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   22aa8:	e037      	b.n	22b1a <frexp+0xb2>
   22aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   22aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22ab0:	da18      	bge.n	22ae4 <frexp+0x7c>
   22ab2:	f04f 0200 	mov.w	r2, #0
   22ab6:	4b1c      	ldr	r3, [pc, #112]	; (22b28 <frexp+0xc0>)
   22ab8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   22abc:	f7ed fcf6 	bl	104ac <__aeabi_dmul>
   22ac0:	4602      	mov	r2, r0
   22ac2:	460b      	mov	r3, r1
   22ac4:	e9c7 2302 	strd	r2, r3, [r7, #8]
   22ac8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   22acc:	e9c7 2306 	strd	r2, r3, [r7, #24]
   22ad0:	69fb      	ldr	r3, [r7, #28]
   22ad2:	637b      	str	r3, [r7, #52]	; 0x34
   22ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   22ad6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   22ada:	633b      	str	r3, [r7, #48]	; 0x30
   22adc:	687b      	ldr	r3, [r7, #4]
   22ade:	f06f 0235 	mvn.w	r2, #53	; 0x35
   22ae2:	601a      	str	r2, [r3, #0]
   22ae4:	687b      	ldr	r3, [r7, #4]
   22ae6:	681a      	ldr	r2, [r3, #0]
   22ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   22aea:	151b      	asrs	r3, r3, #20
   22aec:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   22af0:	441a      	add	r2, r3
   22af2:	687b      	ldr	r3, [r7, #4]
   22af4:	601a      	str	r2, [r3, #0]
   22af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   22af8:	4a0c      	ldr	r2, [pc, #48]	; (22b2c <frexp+0xc4>)
   22afa:	401a      	ands	r2, r3
   22afc:	4b0c      	ldr	r3, [pc, #48]	; (22b30 <frexp+0xc8>)
   22afe:	4313      	orrs	r3, r2
   22b00:	637b      	str	r3, [r7, #52]	; 0x34
   22b02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   22b06:	e9c7 2304 	strd	r2, r3, [r7, #16]
   22b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   22b0c:	617b      	str	r3, [r7, #20]
   22b0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
   22b12:	e9c7 2302 	strd	r2, r3, [r7, #8]
   22b16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   22b1a:	4610      	mov	r0, r2
   22b1c:	4619      	mov	r1, r3
   22b1e:	3738      	adds	r7, #56	; 0x38
   22b20:	46bd      	mov	sp, r7
   22b22:	bd80      	pop	{r7, pc}
   22b24:	7fefffff 	.word	0x7fefffff
   22b28:	43500000 	.word	0x43500000
   22b2c:	800fffff 	.word	0x800fffff
   22b30:	3fe00000 	.word	0x3fe00000

00022b34 <round>:
   22b34:	b580      	push	{r7, lr}
   22b36:	b08c      	sub	sp, #48	; 0x30
   22b38:	af00      	add	r7, sp, #0
   22b3a:	e9c7 0100 	strd	r0, r1, [r7]
   22b3e:	e9d7 2300 	ldrd	r2, r3, [r7]
   22b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
   22b46:	697b      	ldr	r3, [r7, #20]
   22b48:	62fb      	str	r3, [r7, #44]	; 0x2c
   22b4a:	693b      	ldr	r3, [r7, #16]
   22b4c:	62bb      	str	r3, [r7, #40]	; 0x28
   22b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22b50:	151b      	asrs	r3, r3, #20
   22b52:	f3c3 030a 	ubfx	r3, r3, #0, #11
   22b56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   22b5a:	627b      	str	r3, [r7, #36]	; 0x24
   22b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22b5e:	2b13      	cmp	r3, #19
   22b60:	dc31      	bgt.n	22bc6 <round+0x92>
   22b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22b64:	2b00      	cmp	r3, #0
   22b66:	da0e      	bge.n	22b86 <round+0x52>
   22b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22b6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   22b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   22b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22b76:	d103      	bne.n	22b80 <round+0x4c>
   22b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   22b7a:	4b37      	ldr	r3, [pc, #220]	; (22c58 <round+0x124>)
   22b7c:	4313      	orrs	r3, r2
   22b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   22b80:	2300      	movs	r3, #0
   22b82:	62bb      	str	r3, [r7, #40]	; 0x28
   22b84:	e059      	b.n	22c3a <round+0x106>
   22b86:	4a35      	ldr	r2, [pc, #212]	; (22c5c <round+0x128>)
   22b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22b8a:	fa42 f303 	asr.w	r3, r2, r3
   22b8e:	61bb      	str	r3, [r7, #24]
   22b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   22b92:	69bb      	ldr	r3, [r7, #24]
   22b94:	4013      	ands	r3, r2
   22b96:	2b00      	cmp	r3, #0
   22b98:	d105      	bne.n	22ba6 <round+0x72>
   22b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22b9c:	2b00      	cmp	r3, #0
   22b9e:	d102      	bne.n	22ba6 <round+0x72>
   22ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
   22ba4:	e053      	b.n	22c4e <round+0x11a>
   22ba6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   22baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22bac:	fa42 f303 	asr.w	r3, r2, r3
   22bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   22bb2:	4413      	add	r3, r2
   22bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   22bb6:	69bb      	ldr	r3, [r7, #24]
   22bb8:	43da      	mvns	r2, r3
   22bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22bbc:	4013      	ands	r3, r2
   22bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
   22bc0:	2300      	movs	r3, #0
   22bc2:	62bb      	str	r3, [r7, #40]	; 0x28
   22bc4:	e039      	b.n	22c3a <round+0x106>
   22bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22bc8:	2b33      	cmp	r3, #51	; 0x33
   22bca:	dd0f      	ble.n	22bec <round+0xb8>
   22bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   22bd2:	d108      	bne.n	22be6 <round+0xb2>
   22bd4:	e9d7 0100 	ldrd	r0, r1, [r7]
   22bd8:	4602      	mov	r2, r0
   22bda:	460b      	mov	r3, r1
   22bdc:	f7e9 fb36 	bl	c24c <__adddf3>
   22be0:	4602      	mov	r2, r0
   22be2:	460b      	mov	r3, r1
   22be4:	e033      	b.n	22c4e <round+0x11a>
   22be6:	e9d7 2300 	ldrd	r2, r3, [r7]
   22bea:	e030      	b.n	22c4e <round+0x11a>
   22bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22bee:	3b14      	subs	r3, #20
   22bf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22bf4:	fa22 f303 	lsr.w	r3, r2, r3
   22bf8:	623b      	str	r3, [r7, #32]
   22bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   22bfc:	6a3b      	ldr	r3, [r7, #32]
   22bfe:	4013      	ands	r3, r2
   22c00:	2b00      	cmp	r3, #0
   22c02:	d102      	bne.n	22c0a <round+0xd6>
   22c04:	e9d7 2300 	ldrd	r2, r3, [r7]
   22c08:	e021      	b.n	22c4e <round+0x11a>
   22c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   22c0c:	f1c3 0333 	rsb	r3, r3, #51	; 0x33
   22c10:	2201      	movs	r2, #1
   22c12:	fa02 f303 	lsl.w	r3, r2, r3
   22c16:	461a      	mov	r2, r3
   22c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22c1a:	4413      	add	r3, r2
   22c1c:	61fb      	str	r3, [r7, #28]
   22c1e:	69fa      	ldr	r2, [r7, #28]
   22c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22c22:	429a      	cmp	r2, r3
   22c24:	d202      	bcs.n	22c2c <round+0xf8>
   22c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22c28:	3301      	adds	r3, #1
   22c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   22c2c:	69fb      	ldr	r3, [r7, #28]
   22c2e:	62bb      	str	r3, [r7, #40]	; 0x28
   22c30:	6a3b      	ldr	r3, [r7, #32]
   22c32:	43db      	mvns	r3, r3
   22c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
   22c36:	4013      	ands	r3, r2
   22c38:	62bb      	str	r3, [r7, #40]	; 0x28
   22c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   22c3c:	60fb      	str	r3, [r7, #12]
   22c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22c40:	60bb      	str	r3, [r7, #8]
   22c42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   22c46:	e9c7 2300 	strd	r2, r3, [r7]
   22c4a:	e9d7 2300 	ldrd	r2, r3, [r7]
   22c4e:	4610      	mov	r0, r2
   22c50:	4619      	mov	r1, r3
   22c52:	3730      	adds	r7, #48	; 0x30
   22c54:	46bd      	mov	sp, r7
   22c56:	bd80      	pop	{r7, pc}
   22c58:	3ff00000 	.word	0x3ff00000
   22c5c:	000fffff 	.word	0x000fffff

00022c60 <cosf>:
   22c60:	b580      	push	{r7, lr}
   22c62:	b088      	sub	sp, #32
   22c64:	af00      	add	r7, sp, #0
   22c66:	6078      	str	r0, [r7, #4]
   22c68:	f04f 0300 	mov.w	r3, #0
   22c6c:	61fb      	str	r3, [r7, #28]
   22c6e:	687b      	ldr	r3, [r7, #4]
   22c70:	60bb      	str	r3, [r7, #8]
   22c72:	68bb      	ldr	r3, [r7, #8]
   22c74:	61bb      	str	r3, [r7, #24]
   22c76:	69bb      	ldr	r3, [r7, #24]
   22c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   22c7c:	61bb      	str	r3, [r7, #24]
   22c7e:	69bb      	ldr	r3, [r7, #24]
   22c80:	4a26      	ldr	r2, [pc, #152]	; (22d1c <cosf+0xbc>)
   22c82:	4293      	cmp	r3, r2
   22c84:	dc05      	bgt.n	22c92 <cosf+0x32>
   22c86:	69f9      	ldr	r1, [r7, #28]
   22c88:	6878      	ldr	r0, [r7, #4]
   22c8a:	f001 f8bb 	bl	23e04 <__kernel_cosf>
   22c8e:	4603      	mov	r3, r0
   22c90:	e040      	b.n	22d14 <cosf+0xb4>
   22c92:	69bb      	ldr	r3, [r7, #24]
   22c94:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   22c98:	db06      	blt.n	22ca8 <cosf+0x48>
   22c9a:	edd7 7a01 	vldr	s15, [r7, #4]
   22c9e:	ee77 7ae7 	vsub.f32	s15, s15, s15
   22ca2:	ee17 3a90 	vmov	r3, s15
   22ca6:	e035      	b.n	22d14 <cosf+0xb4>
   22ca8:	f107 030c 	add.w	r3, r7, #12
   22cac:	4619      	mov	r1, r3
   22cae:	6878      	ldr	r0, [r7, #4]
   22cb0:	f000 fe54 	bl	2395c <__ieee754_rem_pio2f>
   22cb4:	6178      	str	r0, [r7, #20]
   22cb6:	697b      	ldr	r3, [r7, #20]
   22cb8:	f003 0303 	and.w	r3, r3, #3
   22cbc:	2b02      	cmp	r3, #2
   22cbe:	d018      	beq.n	22cf2 <cosf+0x92>
   22cc0:	2b02      	cmp	r3, #2
   22cc2:	dc20      	bgt.n	22d06 <cosf+0xa6>
   22cc4:	2b00      	cmp	r3, #0
   22cc6:	d002      	beq.n	22cce <cosf+0x6e>
   22cc8:	2b01      	cmp	r3, #1
   22cca:	d008      	beq.n	22cde <cosf+0x7e>
   22ccc:	e01b      	b.n	22d06 <cosf+0xa6>
   22cce:	68fb      	ldr	r3, [r7, #12]
   22cd0:	693a      	ldr	r2, [r7, #16]
   22cd2:	4611      	mov	r1, r2
   22cd4:	4618      	mov	r0, r3
   22cd6:	f001 f895 	bl	23e04 <__kernel_cosf>
   22cda:	4603      	mov	r3, r0
   22cdc:	e01a      	b.n	22d14 <cosf+0xb4>
   22cde:	68fb      	ldr	r3, [r7, #12]
   22ce0:	6939      	ldr	r1, [r7, #16]
   22ce2:	2201      	movs	r2, #1
   22ce4:	4618      	mov	r0, r3
   22ce6:	f001 ff1b 	bl	24b20 <__kernel_sinf>
   22cea:	4603      	mov	r3, r0
   22cec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   22cf0:	e010      	b.n	22d14 <cosf+0xb4>
   22cf2:	68fb      	ldr	r3, [r7, #12]
   22cf4:	693a      	ldr	r2, [r7, #16]
   22cf6:	4611      	mov	r1, r2
   22cf8:	4618      	mov	r0, r3
   22cfa:	f001 f883 	bl	23e04 <__kernel_cosf>
   22cfe:	4603      	mov	r3, r0
   22d00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   22d04:	e006      	b.n	22d14 <cosf+0xb4>
   22d06:	68fb      	ldr	r3, [r7, #12]
   22d08:	6939      	ldr	r1, [r7, #16]
   22d0a:	2201      	movs	r2, #1
   22d0c:	4618      	mov	r0, r3
   22d0e:	f001 ff07 	bl	24b20 <__kernel_sinf>
   22d12:	4603      	mov	r3, r0
   22d14:	4618      	mov	r0, r3
   22d16:	3720      	adds	r7, #32
   22d18:	46bd      	mov	sp, r7
   22d1a:	bd80      	pop	{r7, pc}
   22d1c:	3f490fd8 	.word	0x3f490fd8

00022d20 <sinf>:
   22d20:	b580      	push	{r7, lr}
   22d22:	b088      	sub	sp, #32
   22d24:	af00      	add	r7, sp, #0
   22d26:	6078      	str	r0, [r7, #4]
   22d28:	f04f 0300 	mov.w	r3, #0
   22d2c:	61fb      	str	r3, [r7, #28]
   22d2e:	687b      	ldr	r3, [r7, #4]
   22d30:	60bb      	str	r3, [r7, #8]
   22d32:	68bb      	ldr	r3, [r7, #8]
   22d34:	61bb      	str	r3, [r7, #24]
   22d36:	69bb      	ldr	r3, [r7, #24]
   22d38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   22d3c:	61bb      	str	r3, [r7, #24]
   22d3e:	69bb      	ldr	r3, [r7, #24]
   22d40:	4a27      	ldr	r2, [pc, #156]	; (22de0 <sinf+0xc0>)
   22d42:	4293      	cmp	r3, r2
   22d44:	dc06      	bgt.n	22d54 <sinf+0x34>
   22d46:	2200      	movs	r2, #0
   22d48:	69f9      	ldr	r1, [r7, #28]
   22d4a:	6878      	ldr	r0, [r7, #4]
   22d4c:	f001 fee8 	bl	24b20 <__kernel_sinf>
   22d50:	4603      	mov	r3, r0
   22d52:	e040      	b.n	22dd6 <sinf+0xb6>
   22d54:	69bb      	ldr	r3, [r7, #24]
   22d56:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   22d5a:	db06      	blt.n	22d6a <sinf+0x4a>
   22d5c:	edd7 7a01 	vldr	s15, [r7, #4]
   22d60:	ee77 7ae7 	vsub.f32	s15, s15, s15
   22d64:	ee17 3a90 	vmov	r3, s15
   22d68:	e035      	b.n	22dd6 <sinf+0xb6>
   22d6a:	f107 030c 	add.w	r3, r7, #12
   22d6e:	4619      	mov	r1, r3
   22d70:	6878      	ldr	r0, [r7, #4]
   22d72:	f000 fdf3 	bl	2395c <__ieee754_rem_pio2f>
   22d76:	6178      	str	r0, [r7, #20]
   22d78:	697b      	ldr	r3, [r7, #20]
   22d7a:	f003 0303 	and.w	r3, r3, #3
   22d7e:	2b02      	cmp	r3, #2
   22d80:	d016      	beq.n	22db0 <sinf+0x90>
   22d82:	2b02      	cmp	r3, #2
   22d84:	dc1e      	bgt.n	22dc4 <sinf+0xa4>
   22d86:	2b00      	cmp	r3, #0
   22d88:	d002      	beq.n	22d90 <sinf+0x70>
   22d8a:	2b01      	cmp	r3, #1
   22d8c:	d008      	beq.n	22da0 <sinf+0x80>
   22d8e:	e019      	b.n	22dc4 <sinf+0xa4>
   22d90:	68fb      	ldr	r3, [r7, #12]
   22d92:	6939      	ldr	r1, [r7, #16]
   22d94:	2201      	movs	r2, #1
   22d96:	4618      	mov	r0, r3
   22d98:	f001 fec2 	bl	24b20 <__kernel_sinf>
   22d9c:	4603      	mov	r3, r0
   22d9e:	e01a      	b.n	22dd6 <sinf+0xb6>
   22da0:	68fb      	ldr	r3, [r7, #12]
   22da2:	693a      	ldr	r2, [r7, #16]
   22da4:	4611      	mov	r1, r2
   22da6:	4618      	mov	r0, r3
   22da8:	f001 f82c 	bl	23e04 <__kernel_cosf>
   22dac:	4603      	mov	r3, r0
   22dae:	e012      	b.n	22dd6 <sinf+0xb6>
   22db0:	68fb      	ldr	r3, [r7, #12]
   22db2:	6939      	ldr	r1, [r7, #16]
   22db4:	2201      	movs	r2, #1
   22db6:	4618      	mov	r0, r3
   22db8:	f001 feb2 	bl	24b20 <__kernel_sinf>
   22dbc:	4603      	mov	r3, r0
   22dbe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   22dc2:	e008      	b.n	22dd6 <sinf+0xb6>
   22dc4:	68fb      	ldr	r3, [r7, #12]
   22dc6:	693a      	ldr	r2, [r7, #16]
   22dc8:	4611      	mov	r1, r2
   22dca:	4618      	mov	r0, r3
   22dcc:	f001 f81a 	bl	23e04 <__kernel_cosf>
   22dd0:	4603      	mov	r3, r0
   22dd2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
   22dd6:	4618      	mov	r0, r3
   22dd8:	3720      	adds	r7, #32
   22dda:	46bd      	mov	sp, r7
   22ddc:	bd80      	pop	{r7, pc}
   22dde:	bf00      	nop
   22de0:	3f490fd8 	.word	0x3f490fd8

00022de4 <tanhf>:
   22de4:	b580      	push	{r7, lr}
   22de6:	ed2d 8b02 	vpush	{d8}
   22dea:	b088      	sub	sp, #32
   22dec:	af00      	add	r7, sp, #0
   22dee:	6078      	str	r0, [r7, #4]
   22df0:	687b      	ldr	r3, [r7, #4]
   22df2:	60fb      	str	r3, [r7, #12]
   22df4:	68fb      	ldr	r3, [r7, #12]
   22df6:	61bb      	str	r3, [r7, #24]
   22df8:	69bb      	ldr	r3, [r7, #24]
   22dfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   22dfe:	617b      	str	r3, [r7, #20]
   22e00:	697b      	ldr	r3, [r7, #20]
   22e02:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   22e06:	db18      	blt.n	22e3a <tanhf+0x56>
   22e08:	69bb      	ldr	r3, [r7, #24]
   22e0a:	2b00      	cmp	r3, #0
   22e0c:	db0a      	blt.n	22e24 <tanhf+0x40>
   22e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   22e12:	ed97 7a01 	vldr	s14, [r7, #4]
   22e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
   22e1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   22e1e:	ee77 7a87 	vadd.f32	s15, s15, s14
   22e22:	e071      	b.n	22f08 <tanhf+0x124>
   22e24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   22e28:	ed97 7a01 	vldr	s14, [r7, #4]
   22e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
   22e30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   22e34:	ee77 7ac7 	vsub.f32	s15, s15, s14
   22e38:	e066      	b.n	22f08 <tanhf+0x124>
   22e3a:	697b      	ldr	r3, [r7, #20]
   22e3c:	4a36      	ldr	r2, [pc, #216]	; (22f18 <tanhf+0x134>)
   22e3e:	4293      	cmp	r3, r2
   22e40:	dc50      	bgt.n	22ee4 <tanhf+0x100>
   22e42:	697b      	ldr	r3, [r7, #20]
   22e44:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
   22e48:	da0a      	bge.n	22e60 <tanhf+0x7c>
   22e4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   22e4e:	edd7 7a01 	vldr	s15, [r7, #4]
   22e52:	ee37 7a27 	vadd.f32	s14, s14, s15
   22e56:	edd7 7a01 	vldr	s15, [r7, #4]
   22e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
   22e5e:	e053      	b.n	22f08 <tanhf+0x124>
   22e60:	697b      	ldr	r3, [r7, #20]
   22e62:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   22e66:	db1e      	blt.n	22ea6 <tanhf+0xc2>
   22e68:	6878      	ldr	r0, [r7, #4]
   22e6a:	f00d ff7d 	bl	30d68 <fabsf>
   22e6e:	ee07 0a10 	vmov	s14, r0
   22e72:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   22e76:	ee67 7a27 	vmul.f32	s15, s14, s15
   22e7a:	ee17 0a90 	vmov	r0, s15
   22e7e:	f001 feff 	bl	24c80 <expm1f>
   22e82:	6138      	str	r0, [r7, #16]
   22e84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   22e88:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
   22e8c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   22e90:	edd7 7a04 	vldr	s15, [r7, #16]
   22e94:	ee37 7a27 	vadd.f32	s14, s14, s15
   22e98:	eec6 7a07 	vdiv.f32	s15, s12, s14
   22e9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
   22ea0:	edc7 7a07 	vstr	s15, [r7, #28]
   22ea4:	e026      	b.n	22ef4 <tanhf+0x110>
   22ea6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   22eaa:	eeb1 8a67 	vneg.f32	s16, s15
   22eae:	6878      	ldr	r0, [r7, #4]
   22eb0:	f00d ff5a 	bl	30d68 <fabsf>
   22eb4:	ee07 0a90 	vmov	s15, r0
   22eb8:	ee68 7a27 	vmul.f32	s15, s16, s15
   22ebc:	ee17 0a90 	vmov	r0, s15
   22ec0:	f001 fede 	bl	24c80 <expm1f>
   22ec4:	6138      	str	r0, [r7, #16]
   22ec6:	edd7 7a04 	vldr	s15, [r7, #16]
   22eca:	eef1 6a67 	vneg.f32	s13, s15
   22ece:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   22ed2:	edd7 7a04 	vldr	s15, [r7, #16]
   22ed6:	ee37 7a27 	vadd.f32	s14, s14, s15
   22eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
   22ede:	edc7 7a07 	vstr	s15, [r7, #28]
   22ee2:	e007      	b.n	22ef4 <tanhf+0x110>
   22ee4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   22ee8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 22f1c <tanhf+0x138>
   22eec:	ee77 7a67 	vsub.f32	s15, s14, s15
   22ef0:	edc7 7a07 	vstr	s15, [r7, #28]
   22ef4:	69bb      	ldr	r3, [r7, #24]
   22ef6:	2b00      	cmp	r3, #0
   22ef8:	da04      	bge.n	22f04 <tanhf+0x120>
   22efa:	edd7 7a07 	vldr	s15, [r7, #28]
   22efe:	eef1 7a67 	vneg.f32	s15, s15
   22f02:	e001      	b.n	22f08 <tanhf+0x124>
   22f04:	edd7 7a07 	vldr	s15, [r7, #28]
   22f08:	ee17 3a90 	vmov	r3, s15
   22f0c:	4618      	mov	r0, r3
   22f0e:	3720      	adds	r7, #32
   22f10:	46bd      	mov	sp, r7
   22f12:	ecbd 8b02 	vpop	{d8}
   22f16:	bd80      	pop	{r7, pc}
   22f18:	41afffff 	.word	0x41afffff
   22f1c:	0da24260 	.word	0x0da24260

00022f20 <expf>:
   22f20:	b580      	push	{r7, lr}
   22f22:	b08e      	sub	sp, #56	; 0x38
   22f24:	af00      	add	r7, sp, #0
   22f26:	6078      	str	r0, [r7, #4]
   22f28:	6878      	ldr	r0, [r7, #4]
   22f2a:	f000 f9d7 	bl	232dc <__ieee754_expf>
   22f2e:	6378      	str	r0, [r7, #52]	; 0x34
   22f30:	4b56      	ldr	r3, [pc, #344]	; (2308c <expf+0x16c>)
   22f32:	f993 3000 	ldrsb.w	r3, [r3]
   22f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   22f3a:	d101      	bne.n	22f40 <expf+0x20>
   22f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   22f3e:	e0a1      	b.n	23084 <expf+0x164>
   22f40:	6878      	ldr	r0, [r7, #4]
   22f42:	f00d ff26 	bl	30d92 <finitef>
   22f46:	4603      	mov	r3, r0
   22f48:	2b00      	cmp	r3, #0
   22f4a:	f000 809a 	beq.w	23082 <expf+0x162>
   22f4e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 23090 <expf+0x170>
   22f52:	edd7 7a01 	vldr	s15, [r7, #4]
   22f56:	eef4 7ac7 	vcmpe.f32	s15, s14
   22f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   22f5e:	dd48      	ble.n	22ff2 <expf+0xd2>
   22f60:	2303      	movs	r3, #3
   22f62:	60bb      	str	r3, [r7, #8]
   22f64:	4b4b      	ldr	r3, [pc, #300]	; (23094 <expf+0x174>)
   22f66:	60fb      	str	r3, [r7, #12]
   22f68:	2300      	movs	r3, #0
   22f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   22f6c:	6878      	ldr	r0, [r7, #4]
   22f6e:	f7e9 facb 	bl	c508 <__aeabi_f2d>
   22f72:	4602      	mov	r2, r0
   22f74:	460b      	mov	r3, r1
   22f76:	e9c7 2306 	strd	r2, r3, [r7, #24]
   22f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   22f7e:	e9c7 2304 	strd	r2, r3, [r7, #16]
   22f82:	4b42      	ldr	r3, [pc, #264]	; (2308c <expf+0x16c>)
   22f84:	f993 3000 	ldrsb.w	r3, [r3]
   22f88:	2b00      	cmp	r3, #0
   22f8a:	d105      	bne.n	22f98 <expf+0x78>
   22f8c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   22f90:	4b41      	ldr	r3, [pc, #260]	; (23098 <expf+0x178>)
   22f92:	e9c7 2308 	strd	r2, r3, [r7, #32]
   22f96:	e004      	b.n	22fa2 <expf+0x82>
   22f98:	f04f 0200 	mov.w	r2, #0
   22f9c:	4b3f      	ldr	r3, [pc, #252]	; (2309c <expf+0x17c>)
   22f9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
   22fa2:	4b3a      	ldr	r3, [pc, #232]	; (2308c <expf+0x16c>)
   22fa4:	f993 3000 	ldrsb.w	r3, [r3]
   22fa8:	2b02      	cmp	r3, #2
   22faa:	d105      	bne.n	22fb8 <expf+0x98>
   22fac:	f003 ff71 	bl	26e92 <__errno>
   22fb0:	4603      	mov	r3, r0
   22fb2:	2222      	movs	r2, #34	; 0x22
   22fb4:	601a      	str	r2, [r3, #0]
   22fb6:	e00c      	b.n	22fd2 <expf+0xb2>
   22fb8:	f107 0308 	add.w	r3, r7, #8
   22fbc:	4618      	mov	r0, r3
   22fbe:	f00d febb 	bl	30d38 <matherr>
   22fc2:	4603      	mov	r3, r0
   22fc4:	2b00      	cmp	r3, #0
   22fc6:	d104      	bne.n	22fd2 <expf+0xb2>
   22fc8:	f003 ff63 	bl	26e92 <__errno>
   22fcc:	4603      	mov	r3, r0
   22fce:	2222      	movs	r2, #34	; 0x22
   22fd0:	601a      	str	r2, [r3, #0]
   22fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22fd4:	2b00      	cmp	r3, #0
   22fd6:	d004      	beq.n	22fe2 <expf+0xc2>
   22fd8:	f003 ff5b 	bl	26e92 <__errno>
   22fdc:	4602      	mov	r2, r0
   22fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   22fe0:	6013      	str	r3, [r2, #0]
   22fe2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   22fe6:	4610      	mov	r0, r2
   22fe8:	4619      	mov	r1, r3
   22fea:	f7ed fd21 	bl	10a30 <__aeabi_d2f>
   22fee:	4603      	mov	r3, r0
   22ff0:	e048      	b.n	23084 <expf+0x164>
   22ff2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 230a0 <expf+0x180>
   22ff6:	edd7 7a01 	vldr	s15, [r7, #4]
   22ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
   22ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23002:	d53e      	bpl.n	23082 <expf+0x162>
   23004:	2304      	movs	r3, #4
   23006:	60bb      	str	r3, [r7, #8]
   23008:	4b22      	ldr	r3, [pc, #136]	; (23094 <expf+0x174>)
   2300a:	60fb      	str	r3, [r7, #12]
   2300c:	2300      	movs	r3, #0
   2300e:	62bb      	str	r3, [r7, #40]	; 0x28
   23010:	6878      	ldr	r0, [r7, #4]
   23012:	f7e9 fa79 	bl	c508 <__aeabi_f2d>
   23016:	4602      	mov	r2, r0
   23018:	460b      	mov	r3, r1
   2301a:	e9c7 2306 	strd	r2, r3, [r7, #24]
   2301e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   23022:	e9c7 2304 	strd	r2, r3, [r7, #16]
   23026:	f04f 0200 	mov.w	r2, #0
   2302a:	f04f 0300 	mov.w	r3, #0
   2302e:	e9c7 2308 	strd	r2, r3, [r7, #32]
   23032:	4b16      	ldr	r3, [pc, #88]	; (2308c <expf+0x16c>)
   23034:	f993 3000 	ldrsb.w	r3, [r3]
   23038:	2b02      	cmp	r3, #2
   2303a:	d105      	bne.n	23048 <expf+0x128>
   2303c:	f003 ff29 	bl	26e92 <__errno>
   23040:	4603      	mov	r3, r0
   23042:	2222      	movs	r2, #34	; 0x22
   23044:	601a      	str	r2, [r3, #0]
   23046:	e00c      	b.n	23062 <expf+0x142>
   23048:	f107 0308 	add.w	r3, r7, #8
   2304c:	4618      	mov	r0, r3
   2304e:	f00d fe73 	bl	30d38 <matherr>
   23052:	4603      	mov	r3, r0
   23054:	2b00      	cmp	r3, #0
   23056:	d104      	bne.n	23062 <expf+0x142>
   23058:	f003 ff1b 	bl	26e92 <__errno>
   2305c:	4603      	mov	r3, r0
   2305e:	2222      	movs	r2, #34	; 0x22
   23060:	601a      	str	r2, [r3, #0]
   23062:	6abb      	ldr	r3, [r7, #40]	; 0x28
   23064:	2b00      	cmp	r3, #0
   23066:	d004      	beq.n	23072 <expf+0x152>
   23068:	f003 ff13 	bl	26e92 <__errno>
   2306c:	4602      	mov	r2, r0
   2306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   23070:	6013      	str	r3, [r2, #0]
   23072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   23076:	4610      	mov	r0, r2
   23078:	4619      	mov	r1, r3
   2307a:	f7ed fcd9 	bl	10a30 <__aeabi_d2f>
   2307e:	4603      	mov	r3, r0
   23080:	e000      	b.n	23084 <expf+0x164>
   23082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23084:	4618      	mov	r0, r3
   23086:	3738      	adds	r7, #56	; 0x38
   23088:	46bd      	mov	sp, r7
   2308a:	bd80      	pop	{r7, pc}
   2308c:	200200bc 	.word	0x200200bc
   23090:	42b17180 	.word	0x42b17180
   23094:	00032468 	.word	0x00032468
   23098:	47efffff 	.word	0x47efffff
   2309c:	7ff00000 	.word	0x7ff00000
   230a0:	c2cff1b5 	.word	0xc2cff1b5

000230a4 <logf>:
   230a4:	b580      	push	{r7, lr}
   230a6:	b08e      	sub	sp, #56	; 0x38
   230a8:	af00      	add	r7, sp, #0
   230aa:	6078      	str	r0, [r7, #4]
   230ac:	6878      	ldr	r0, [r7, #4]
   230ae:	f000 fa7f 	bl	235b0 <__ieee754_logf>
   230b2:	6378      	str	r0, [r7, #52]	; 0x34
   230b4:	4b46      	ldr	r3, [pc, #280]	; (231d0 <logf+0x12c>)
   230b6:	f993 3000 	ldrsb.w	r3, [r3]
   230ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   230be:	d00f      	beq.n	230e0 <logf+0x3c>
   230c0:	ed97 7a01 	vldr	s14, [r7, #4]
   230c4:	edd7 7a01 	vldr	s15, [r7, #4]
   230c8:	eeb4 7a67 	vcmp.f32	s14, s15
   230cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   230d0:	d606      	bvs.n	230e0 <logf+0x3c>
   230d2:	edd7 7a01 	vldr	s15, [r7, #4]
   230d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   230da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   230de:	dd01      	ble.n	230e4 <logf+0x40>
   230e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   230e2:	e070      	b.n	231c6 <logf+0x122>
   230e4:	4b3b      	ldr	r3, [pc, #236]	; (231d4 <logf+0x130>)
   230e6:	60fb      	str	r3, [r7, #12]
   230e8:	2300      	movs	r3, #0
   230ea:	62bb      	str	r3, [r7, #40]	; 0x28
   230ec:	6878      	ldr	r0, [r7, #4]
   230ee:	f7e9 fa0b 	bl	c508 <__aeabi_f2d>
   230f2:	4602      	mov	r2, r0
   230f4:	460b      	mov	r3, r1
   230f6:	e9c7 2306 	strd	r2, r3, [r7, #24]
   230fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   230fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
   23102:	4b33      	ldr	r3, [pc, #204]	; (231d0 <logf+0x12c>)
   23104:	f993 3000 	ldrsb.w	r3, [r3]
   23108:	2b00      	cmp	r3, #0
   2310a:	d105      	bne.n	23118 <logf+0x74>
   2310c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   23110:	4b31      	ldr	r3, [pc, #196]	; (231d8 <logf+0x134>)
   23112:	e9c7 2308 	strd	r2, r3, [r7, #32]
   23116:	e004      	b.n	23122 <logf+0x7e>
   23118:	f04f 0200 	mov.w	r2, #0
   2311c:	4b2f      	ldr	r3, [pc, #188]	; (231dc <logf+0x138>)
   2311e:	e9c7 2308 	strd	r2, r3, [r7, #32]
   23122:	edd7 7a01 	vldr	s15, [r7, #4]
   23126:	eef5 7a40 	vcmp.f32	s15, #0.0
   2312a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2312e:	d11a      	bne.n	23166 <logf+0xc2>
   23130:	2302      	movs	r3, #2
   23132:	60bb      	str	r3, [r7, #8]
   23134:	4b26      	ldr	r3, [pc, #152]	; (231d0 <logf+0x12c>)
   23136:	f993 3000 	ldrsb.w	r3, [r3]
   2313a:	2b02      	cmp	r3, #2
   2313c:	d105      	bne.n	2314a <logf+0xa6>
   2313e:	f003 fea8 	bl	26e92 <__errno>
   23142:	4603      	mov	r3, r0
   23144:	2222      	movs	r2, #34	; 0x22
   23146:	601a      	str	r2, [r3, #0]
   23148:	e02e      	b.n	231a8 <logf+0x104>
   2314a:	f107 0308 	add.w	r3, r7, #8
   2314e:	4618      	mov	r0, r3
   23150:	f00d fdf2 	bl	30d38 <matherr>
   23154:	4603      	mov	r3, r0
   23156:	2b00      	cmp	r3, #0
   23158:	d126      	bne.n	231a8 <logf+0x104>
   2315a:	f003 fe9a 	bl	26e92 <__errno>
   2315e:	4603      	mov	r3, r0
   23160:	2222      	movs	r2, #34	; 0x22
   23162:	601a      	str	r2, [r3, #0]
   23164:	e020      	b.n	231a8 <logf+0x104>
   23166:	2301      	movs	r3, #1
   23168:	60bb      	str	r3, [r7, #8]
   2316a:	4b19      	ldr	r3, [pc, #100]	; (231d0 <logf+0x12c>)
   2316c:	f993 3000 	ldrsb.w	r3, [r3]
   23170:	2b02      	cmp	r3, #2
   23172:	d105      	bne.n	23180 <logf+0xdc>
   23174:	f003 fe8d 	bl	26e92 <__errno>
   23178:	4603      	mov	r3, r0
   2317a:	2221      	movs	r2, #33	; 0x21
   2317c:	601a      	str	r2, [r3, #0]
   2317e:	e00c      	b.n	2319a <logf+0xf6>
   23180:	f107 0308 	add.w	r3, r7, #8
   23184:	4618      	mov	r0, r3
   23186:	f00d fdd7 	bl	30d38 <matherr>
   2318a:	4603      	mov	r3, r0
   2318c:	2b00      	cmp	r3, #0
   2318e:	d104      	bne.n	2319a <logf+0xf6>
   23190:	f003 fe7f 	bl	26e92 <__errno>
   23194:	4603      	mov	r3, r0
   23196:	2221      	movs	r2, #33	; 0x21
   23198:	601a      	str	r2, [r3, #0]
   2319a:	4811      	ldr	r0, [pc, #68]	; (231e0 <logf+0x13c>)
   2319c:	f001 fd5c 	bl	24c58 <nan>
   231a0:	4602      	mov	r2, r0
   231a2:	460b      	mov	r3, r1
   231a4:	e9c7 2308 	strd	r2, r3, [r7, #32]
   231a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   231aa:	2b00      	cmp	r3, #0
   231ac:	d004      	beq.n	231b8 <logf+0x114>
   231ae:	f003 fe70 	bl	26e92 <__errno>
   231b2:	4602      	mov	r2, r0
   231b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   231b6:	6013      	str	r3, [r2, #0]
   231b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   231bc:	4610      	mov	r0, r2
   231be:	4619      	mov	r1, r3
   231c0:	f7ed fc36 	bl	10a30 <__aeabi_d2f>
   231c4:	4603      	mov	r3, r0
   231c6:	4618      	mov	r0, r3
   231c8:	3738      	adds	r7, #56	; 0x38
   231ca:	46bd      	mov	sp, r7
   231cc:	bd80      	pop	{r7, pc}
   231ce:	bf00      	nop
   231d0:	200200bc 	.word	0x200200bc
   231d4:	00032470 	.word	0x00032470
   231d8:	c7efffff 	.word	0xc7efffff
   231dc:	fff00000 	.word	0xfff00000
   231e0:	00032478 	.word	0x00032478

000231e4 <sqrtf>:
   231e4:	b580      	push	{r7, lr}
   231e6:	b08e      	sub	sp, #56	; 0x38
   231e8:	af00      	add	r7, sp, #0
   231ea:	6078      	str	r0, [r7, #4]
   231ec:	6878      	ldr	r0, [r7, #4]
   231ee:	f00d fd92 	bl	30d16 <__ieee754_sqrtf>
   231f2:	6378      	str	r0, [r7, #52]	; 0x34
   231f4:	4b37      	ldr	r3, [pc, #220]	; (232d4 <sqrtf+0xf0>)
   231f6:	f993 3000 	ldrsb.w	r3, [r3]
   231fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   231fe:	d008      	beq.n	23212 <sqrtf+0x2e>
   23200:	ed97 7a01 	vldr	s14, [r7, #4]
   23204:	edd7 7a01 	vldr	s15, [r7, #4]
   23208:	eeb4 7a67 	vcmp.f32	s14, s15
   2320c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23210:	d701      	bvc.n	23216 <sqrtf+0x32>
   23212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23214:	e05a      	b.n	232cc <sqrtf+0xe8>
   23216:	edd7 7a01 	vldr	s15, [r7, #4]
   2321a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   2321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23222:	d552      	bpl.n	232ca <sqrtf+0xe6>
   23224:	2301      	movs	r3, #1
   23226:	60bb      	str	r3, [r7, #8]
   23228:	4b2b      	ldr	r3, [pc, #172]	; (232d8 <sqrtf+0xf4>)
   2322a:	60fb      	str	r3, [r7, #12]
   2322c:	2300      	movs	r3, #0
   2322e:	62bb      	str	r3, [r7, #40]	; 0x28
   23230:	6878      	ldr	r0, [r7, #4]
   23232:	f7e9 f969 	bl	c508 <__aeabi_f2d>
   23236:	4602      	mov	r2, r0
   23238:	460b      	mov	r3, r1
   2323a:	e9c7 2306 	strd	r2, r3, [r7, #24]
   2323e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
   23242:	e9c7 2304 	strd	r2, r3, [r7, #16]
   23246:	4b23      	ldr	r3, [pc, #140]	; (232d4 <sqrtf+0xf0>)
   23248:	f993 3000 	ldrsb.w	r3, [r3]
   2324c:	2b00      	cmp	r3, #0
   2324e:	d106      	bne.n	2325e <sqrtf+0x7a>
   23250:	f04f 0200 	mov.w	r2, #0
   23254:	f04f 0300 	mov.w	r3, #0
   23258:	e9c7 2308 	strd	r2, r3, [r7, #32]
   2325c:	e00d      	b.n	2327a <sqrtf+0x96>
   2325e:	f04f 0200 	mov.w	r2, #0
   23262:	f04f 0300 	mov.w	r3, #0
   23266:	f04f 0000 	mov.w	r0, #0
   2326a:	f04f 0100 	mov.w	r1, #0
   2326e:	f7ed fa47 	bl	10700 <__aeabi_ddiv>
   23272:	4602      	mov	r2, r0
   23274:	460b      	mov	r3, r1
   23276:	e9c7 2308 	strd	r2, r3, [r7, #32]
   2327a:	4b16      	ldr	r3, [pc, #88]	; (232d4 <sqrtf+0xf0>)
   2327c:	f993 3000 	ldrsb.w	r3, [r3]
   23280:	2b02      	cmp	r3, #2
   23282:	d105      	bne.n	23290 <sqrtf+0xac>
   23284:	f003 fe05 	bl	26e92 <__errno>
   23288:	4603      	mov	r3, r0
   2328a:	2221      	movs	r2, #33	; 0x21
   2328c:	601a      	str	r2, [r3, #0]
   2328e:	e00c      	b.n	232aa <sqrtf+0xc6>
   23290:	f107 0308 	add.w	r3, r7, #8
   23294:	4618      	mov	r0, r3
   23296:	f00d fd4f 	bl	30d38 <matherr>
   2329a:	4603      	mov	r3, r0
   2329c:	2b00      	cmp	r3, #0
   2329e:	d104      	bne.n	232aa <sqrtf+0xc6>
   232a0:	f003 fdf7 	bl	26e92 <__errno>
   232a4:	4603      	mov	r3, r0
   232a6:	2221      	movs	r2, #33	; 0x21
   232a8:	601a      	str	r2, [r3, #0]
   232aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   232ac:	2b00      	cmp	r3, #0
   232ae:	d004      	beq.n	232ba <sqrtf+0xd6>
   232b0:	f003 fdef 	bl	26e92 <__errno>
   232b4:	4602      	mov	r2, r0
   232b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   232b8:	6013      	str	r3, [r2, #0]
   232ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
   232be:	4610      	mov	r0, r2
   232c0:	4619      	mov	r1, r3
   232c2:	f7ed fbb5 	bl	10a30 <__aeabi_d2f>
   232c6:	4603      	mov	r3, r0
   232c8:	e000      	b.n	232cc <sqrtf+0xe8>
   232ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   232cc:	4618      	mov	r0, r3
   232ce:	3738      	adds	r7, #56	; 0x38
   232d0:	46bd      	mov	sp, r7
   232d2:	bd80      	pop	{r7, pc}
   232d4:	200200bc 	.word	0x200200bc
   232d8:	0003247c 	.word	0x0003247c

000232dc <__ieee754_expf>:
   232dc:	b480      	push	{r7}
   232de:	b093      	sub	sp, #76	; 0x4c
   232e0:	af00      	add	r7, sp, #0
   232e2:	6078      	str	r0, [r7, #4]
   232e4:	2300      	movs	r3, #0
   232e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   232e8:	687b      	ldr	r3, [r7, #4]
   232ea:	61bb      	str	r3, [r7, #24]
   232ec:	69bb      	ldr	r3, [r7, #24]
   232ee:	63bb      	str	r3, [r7, #56]	; 0x38
   232f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   232f2:	0fdb      	lsrs	r3, r3, #31
   232f4:	637b      	str	r3, [r7, #52]	; 0x34
   232f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   232f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   232fc:	633b      	str	r3, [r7, #48]	; 0x30
   232fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23300:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   23304:	d904      	bls.n	23310 <__ieee754_expf+0x34>
   23306:	edd7 7a01 	vldr	s15, [r7, #4]
   2330a:	ee77 7aa7 	vadd.f32	s15, s15, s15
   2330e:	e123      	b.n	23558 <__ieee754_expf+0x27c>
   23310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23312:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   23316:	d108      	bne.n	2332a <__ieee754_expf+0x4e>
   23318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2331a:	2b00      	cmp	r3, #0
   2331c:	d102      	bne.n	23324 <__ieee754_expf+0x48>
   2331e:	edd7 7a01 	vldr	s15, [r7, #4]
   23322:	e119      	b.n	23558 <__ieee754_expf+0x27c>
   23324:	eddf 7a90 	vldr	s15, [pc, #576]	; 23568 <__ieee754_expf+0x28c>
   23328:	e116      	b.n	23558 <__ieee754_expf+0x27c>
   2332a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2332c:	4a8f      	ldr	r2, [pc, #572]	; (2356c <__ieee754_expf+0x290>)
   2332e:	4293      	cmp	r3, r2
   23330:	dd06      	ble.n	23340 <__ieee754_expf+0x64>
   23332:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 23570 <__ieee754_expf+0x294>
   23336:	eddf 7a8e 	vldr	s15, [pc, #568]	; 23570 <__ieee754_expf+0x294>
   2333a:	ee67 7a27 	vmul.f32	s15, s14, s15
   2333e:	e10b      	b.n	23558 <__ieee754_expf+0x27c>
   23340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23342:	2b00      	cmp	r3, #0
   23344:	da0a      	bge.n	2335c <__ieee754_expf+0x80>
   23346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23348:	4a8a      	ldr	r2, [pc, #552]	; (23574 <__ieee754_expf+0x298>)
   2334a:	4293      	cmp	r3, r2
   2334c:	d906      	bls.n	2335c <__ieee754_expf+0x80>
   2334e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 23578 <__ieee754_expf+0x29c>
   23352:	eddf 7a89 	vldr	s15, [pc, #548]	; 23578 <__ieee754_expf+0x29c>
   23356:	ee67 7a27 	vmul.f32	s15, s14, s15
   2335a:	e0fd      	b.n	23558 <__ieee754_expf+0x27c>
   2335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2335e:	4a87      	ldr	r2, [pc, #540]	; (2357c <__ieee754_expf+0x2a0>)
   23360:	4293      	cmp	r3, r2
   23362:	d953      	bls.n	2340c <__ieee754_expf+0x130>
   23364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   23366:	4a86      	ldr	r2, [pc, #536]	; (23580 <__ieee754_expf+0x2a4>)
   23368:	4293      	cmp	r3, r2
   2336a:	d818      	bhi.n	2339e <__ieee754_expf+0xc2>
   2336c:	4a85      	ldr	r2, [pc, #532]	; (23584 <__ieee754_expf+0x2a8>)
   2336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23370:	009b      	lsls	r3, r3, #2
   23372:	4413      	add	r3, r2
   23374:	edd3 7a00 	vldr	s15, [r3]
   23378:	ed97 7a01 	vldr	s14, [r7, #4]
   2337c:	ee77 7a67 	vsub.f32	s15, s14, s15
   23380:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
   23384:	4a80      	ldr	r2, [pc, #512]	; (23588 <__ieee754_expf+0x2ac>)
   23386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23388:	009b      	lsls	r3, r3, #2
   2338a:	4413      	add	r3, r2
   2338c:	681b      	ldr	r3, [r3, #0]
   2338e:	643b      	str	r3, [r7, #64]	; 0x40
   23390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23392:	f1c3 0201 	rsb	r2, r3, #1
   23396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23398:	1ad3      	subs	r3, r2, r3
   2339a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2339c:	e02d      	b.n	233fa <__ieee754_expf+0x11e>
   2339e:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 2358c <__ieee754_expf+0x2b0>
   233a2:	edd7 7a01 	vldr	s15, [r7, #4]
   233a6:	ee27 7a27 	vmul.f32	s14, s14, s15
   233aa:	4a79      	ldr	r2, [pc, #484]	; (23590 <__ieee754_expf+0x2b4>)
   233ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   233ae:	009b      	lsls	r3, r3, #2
   233b0:	4413      	add	r3, r2
   233b2:	edd3 7a00 	vldr	s15, [r3]
   233b6:	ee77 7a27 	vadd.f32	s15, s14, s15
   233ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   233be:	ee17 3a90 	vmov	r3, s15
   233c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   233c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   233c6:	ee07 3a90 	vmov	s15, r3
   233ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   233ce:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   233d2:	ed9f 7a70 	vldr	s14, [pc, #448]	; 23594 <__ieee754_expf+0x2b8>
   233d6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   233da:	ee67 7a27 	vmul.f32	s15, s14, s15
   233de:	ed97 7a01 	vldr	s14, [r7, #4]
   233e2:	ee77 7a67 	vsub.f32	s15, s14, s15
   233e6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
   233ea:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 23598 <__ieee754_expf+0x2bc>
   233ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   233f2:	ee67 7a87 	vmul.f32	s15, s15, s14
   233f6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
   233fa:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
   233fe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   23402:	ee77 7a67 	vsub.f32	s15, s14, s15
   23406:	edc7 7a01 	vstr	s15, [r7, #4]
   2340a:	e017      	b.n	2343c <__ieee754_expf+0x160>
   2340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2340e:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
   23412:	d213      	bcs.n	2343c <__ieee754_expf+0x160>
   23414:	ed9f 7a56 	vldr	s14, [pc, #344]	; 23570 <__ieee754_expf+0x294>
   23418:	edd7 7a01 	vldr	s15, [r7, #4]
   2341c:	ee77 7a27 	vadd.f32	s15, s14, s15
   23420:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   23424:	eef4 7ac7 	vcmpe.f32	s15, s14
   23428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2342c:	dd06      	ble.n	2343c <__ieee754_expf+0x160>
   2342e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   23432:	edd7 7a01 	vldr	s15, [r7, #4]
   23436:	ee77 7a27 	vadd.f32	s15, s14, s15
   2343a:	e08d      	b.n	23558 <__ieee754_expf+0x27c>
   2343c:	edd7 7a01 	vldr	s15, [r7, #4]
   23440:	ee67 7aa7 	vmul.f32	s15, s15, s15
   23444:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   23448:	ed9f 7a54 	vldr	s14, [pc, #336]	; 2359c <__ieee754_expf+0x2c0>
   2344c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23450:	ee67 7a27 	vmul.f32	s15, s14, s15
   23454:	ed9f 7a52 	vldr	s14, [pc, #328]	; 235a0 <__ieee754_expf+0x2c4>
   23458:	ee37 7a87 	vadd.f32	s14, s15, s14
   2345c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23460:	ee67 7a27 	vmul.f32	s15, s14, s15
   23464:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 235a4 <__ieee754_expf+0x2c8>
   23468:	ee37 7a87 	vadd.f32	s14, s15, s14
   2346c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23470:	ee67 7a27 	vmul.f32	s15, s14, s15
   23474:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 235a8 <__ieee754_expf+0x2cc>
   23478:	ee37 7a87 	vadd.f32	s14, s15, s14
   2347c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23480:	ee67 7a27 	vmul.f32	s15, s14, s15
   23484:	ed9f 7a49 	vldr	s14, [pc, #292]	; 235ac <__ieee754_expf+0x2d0>
   23488:	ee37 7a87 	vadd.f32	s14, s15, s14
   2348c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23490:	ee67 7a27 	vmul.f32	s15, s14, s15
   23494:	ed97 7a01 	vldr	s14, [r7, #4]
   23498:	ee77 7a67 	vsub.f32	s15, s14, s15
   2349c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
   234a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   234a2:	2b00      	cmp	r3, #0
   234a4:	d116      	bne.n	234d4 <__ieee754_expf+0x1f8>
   234a6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   234aa:	ed97 7a01 	vldr	s14, [r7, #4]
   234ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   234b2:	ee67 6a27 	vmul.f32	s13, s14, s15
   234b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   234ba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   234be:	ee77 7ac7 	vsub.f32	s15, s15, s14
   234c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
   234c6:	edd7 7a01 	vldr	s15, [r7, #4]
   234ca:	ee77 7a67 	vsub.f32	s15, s14, s15
   234ce:	ee76 7a67 	vsub.f32	s15, s12, s15
   234d2:	e041      	b.n	23558 <__ieee754_expf+0x27c>
   234d4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   234d8:	ed97 7a01 	vldr	s14, [r7, #4]
   234dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   234e0:	ee67 6a27 	vmul.f32	s13, s14, s15
   234e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   234e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   234ec:	ee37 7a67 	vsub.f32	s14, s14, s15
   234f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
   234f4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
   234f8:	ee37 7a67 	vsub.f32	s14, s14, s15
   234fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
   23500:	ee77 7a67 	vsub.f32	s15, s14, s15
   23504:	ee76 7a67 	vsub.f32	s15, s12, s15
   23508:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
   2350c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2350e:	f113 0f7d 	cmn.w	r3, #125	; 0x7d
   23512:	db0e      	blt.n	23532 <__ieee754_expf+0x256>
   23514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23516:	617b      	str	r3, [r7, #20]
   23518:	697b      	ldr	r3, [r7, #20]
   2351a:	61fb      	str	r3, [r7, #28]
   2351c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2351e:	05db      	lsls	r3, r3, #23
   23520:	461a      	mov	r2, r3
   23522:	69fb      	ldr	r3, [r7, #28]
   23524:	4413      	add	r3, r2
   23526:	613b      	str	r3, [r7, #16]
   23528:	693b      	ldr	r3, [r7, #16]
   2352a:	627b      	str	r3, [r7, #36]	; 0x24
   2352c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   23530:	e012      	b.n	23558 <__ieee754_expf+0x27c>
   23532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23534:	60fb      	str	r3, [r7, #12]
   23536:	68fb      	ldr	r3, [r7, #12]
   23538:	623b      	str	r3, [r7, #32]
   2353a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2353c:	3364      	adds	r3, #100	; 0x64
   2353e:	05db      	lsls	r3, r3, #23
   23540:	461a      	mov	r2, r3
   23542:	6a3b      	ldr	r3, [r7, #32]
   23544:	4413      	add	r3, r2
   23546:	60bb      	str	r3, [r7, #8]
   23548:	68bb      	ldr	r3, [r7, #8]
   2354a:	627b      	str	r3, [r7, #36]	; 0x24
   2354c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 23578 <__ieee754_expf+0x29c>
   23550:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   23554:	ee67 7a27 	vmul.f32	s15, s14, s15
   23558:	ee17 3a90 	vmov	r3, s15
   2355c:	4618      	mov	r0, r3
   2355e:	374c      	adds	r7, #76	; 0x4c
   23560:	46bd      	mov	sp, r7
   23562:	f85d 7b04 	ldr.w	r7, [sp], #4
   23566:	4770      	bx	lr
   23568:	00000000 	.word	0x00000000
   2356c:	42b17217 	.word	0x42b17217
   23570:	7149f2ca 	.word	0x7149f2ca
   23574:	42cff1b5 	.word	0x42cff1b5
   23578:	0d800000 	.word	0x0d800000
   2357c:	3eb17218 	.word	0x3eb17218
   23580:	3f851591 	.word	0x3f851591
   23584:	0003336c 	.word	0x0003336c
   23588:	00033374 	.word	0x00033374
   2358c:	3fb8aa3b 	.word	0x3fb8aa3b
   23590:	00033364 	.word	0x00033364
   23594:	3f317180 	.word	0x3f317180
   23598:	3717f7d1 	.word	0x3717f7d1
   2359c:	3331bb4c 	.word	0x3331bb4c
   235a0:	b5ddea0e 	.word	0xb5ddea0e
   235a4:	388ab355 	.word	0x388ab355
   235a8:	bb360b61 	.word	0xbb360b61
   235ac:	3e2aaaab 	.word	0x3e2aaaab

000235b0 <__ieee754_logf>:
   235b0:	b480      	push	{r7}
   235b2:	b093      	sub	sp, #76	; 0x4c
   235b4:	af00      	add	r7, sp, #0
   235b6:	6078      	str	r0, [r7, #4]
   235b8:	687b      	ldr	r3, [r7, #4]
   235ba:	613b      	str	r3, [r7, #16]
   235bc:	693b      	ldr	r3, [r7, #16]
   235be:	643b      	str	r3, [r7, #64]	; 0x40
   235c0:	2300      	movs	r3, #0
   235c2:	647b      	str	r3, [r7, #68]	; 0x44
   235c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   235c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   235ca:	2b00      	cmp	r3, #0
   235cc:	d108      	bne.n	235e0 <__ieee754_logf+0x30>
   235ce:	eddf 7ad3 	vldr	s15, [pc, #844]	; 2391c <__ieee754_logf+0x36c>
   235d2:	eeb1 7a67 	vneg.f32	s14, s15
   235d6:	eddf 6ad2 	vldr	s13, [pc, #840]	; 23920 <__ieee754_logf+0x370>
   235da:	eec7 7a26 	vdiv.f32	s15, s14, s13
   235de:	e195      	b.n	2390c <__ieee754_logf+0x35c>
   235e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   235e2:	2b00      	cmp	r3, #0
   235e4:	da08      	bge.n	235f8 <__ieee754_logf+0x48>
   235e6:	edd7 7a01 	vldr	s15, [r7, #4]
   235ea:	ee37 7ae7 	vsub.f32	s14, s15, s15
   235ee:	eddf 6acc 	vldr	s13, [pc, #816]	; 23920 <__ieee754_logf+0x370>
   235f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
   235f6:	e189      	b.n	2390c <__ieee754_logf+0x35c>
   235f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   235fa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   235fe:	db04      	blt.n	2360a <__ieee754_logf+0x5a>
   23600:	edd7 7a01 	vldr	s15, [r7, #4]
   23604:	ee77 7aa7 	vadd.f32	s15, s15, s15
   23608:	e180      	b.n	2390c <__ieee754_logf+0x35c>
   2360a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2360c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   23610:	da0e      	bge.n	23630 <__ieee754_logf+0x80>
   23612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23614:	3b19      	subs	r3, #25
   23616:	647b      	str	r3, [r7, #68]	; 0x44
   23618:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 2391c <__ieee754_logf+0x36c>
   2361c:	edd7 7a01 	vldr	s15, [r7, #4]
   23620:	ee67 7a87 	vmul.f32	s15, s15, s14
   23624:	edc7 7a01 	vstr	s15, [r7, #4]
   23628:	687b      	ldr	r3, [r7, #4]
   2362a:	60fb      	str	r3, [r7, #12]
   2362c:	68fb      	ldr	r3, [r7, #12]
   2362e:	643b      	str	r3, [r7, #64]	; 0x40
   23630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23632:	15db      	asrs	r3, r3, #23
   23634:	3b7f      	subs	r3, #127	; 0x7f
   23636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   23638:	4413      	add	r3, r2
   2363a:	647b      	str	r3, [r7, #68]	; 0x44
   2363c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2363e:	f3c3 0316 	ubfx	r3, r3, #0, #23
   23642:	643b      	str	r3, [r7, #64]	; 0x40
   23644:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   23646:	4bb7      	ldr	r3, [pc, #732]	; (23924 <__ieee754_logf+0x374>)
   23648:	4413      	add	r3, r2
   2364a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   2364e:	63fb      	str	r3, [r7, #60]	; 0x3c
   23650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23652:	f083 527e 	eor.w	r2, r3, #1065353216	; 0x3f800000
   23656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23658:	4313      	orrs	r3, r2
   2365a:	60bb      	str	r3, [r7, #8]
   2365c:	68bb      	ldr	r3, [r7, #8]
   2365e:	607b      	str	r3, [r7, #4]
   23660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23662:	15db      	asrs	r3, r3, #23
   23664:	6c7a      	ldr	r2, [r7, #68]	; 0x44
   23666:	4413      	add	r3, r2
   23668:	647b      	str	r3, [r7, #68]	; 0x44
   2366a:	edd7 7a01 	vldr	s15, [r7, #4]
   2366e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   23672:	ee77 7ac7 	vsub.f32	s15, s15, s14
   23676:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
   2367a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2367c:	f103 020f 	add.w	r2, r3, #15
   23680:	4ba9      	ldr	r3, [pc, #676]	; (23928 <__ieee754_logf+0x378>)
   23682:	4013      	ands	r3, r2
   23684:	2b00      	cmp	r3, #0
   23686:	d15e      	bne.n	23746 <__ieee754_logf+0x196>
   23688:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 23920 <__ieee754_logf+0x370>
   2368c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   23690:	eef4 7a47 	vcmp.f32	s15, s14
   23694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23698:	d11b      	bne.n	236d2 <__ieee754_logf+0x122>
   2369a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2369c:	2b00      	cmp	r3, #0
   2369e:	d102      	bne.n	236a6 <__ieee754_logf+0xf6>
   236a0:	eddf 7a9f 	vldr	s15, [pc, #636]	; 23920 <__ieee754_logf+0x370>
   236a4:	e132      	b.n	2390c <__ieee754_logf+0x35c>
   236a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   236a8:	ee07 3a90 	vmov	s15, r3
   236ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   236b0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
   236b4:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 2392c <__ieee754_logf+0x37c>
   236b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   236bc:	ee27 7a27 	vmul.f32	s14, s14, s15
   236c0:	eddf 6a9b 	vldr	s13, [pc, #620]	; 23930 <__ieee754_logf+0x380>
   236c4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   236c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
   236cc:	ee77 7a27 	vadd.f32	s15, s14, s15
   236d0:	e11c      	b.n	2390c <__ieee754_logf+0x35c>
   236d2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   236d6:	ee27 7aa7 	vmul.f32	s14, s15, s15
   236da:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   236de:	eddf 6a95 	vldr	s13, [pc, #596]	; 23934 <__ieee754_logf+0x384>
   236e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
   236e6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
   236ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
   236ee:	ee67 7a27 	vmul.f32	s15, s14, s15
   236f2:	edc7 7a06 	vstr	s15, [r7, #24]
   236f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   236f8:	2b00      	cmp	r3, #0
   236fa:	d106      	bne.n	2370a <__ieee754_logf+0x15a>
   236fc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   23700:	edd7 7a06 	vldr	s15, [r7, #24]
   23704:	ee77 7a67 	vsub.f32	s15, s14, s15
   23708:	e100      	b.n	2390c <__ieee754_logf+0x35c>
   2370a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2370c:	ee07 3a90 	vmov	s15, r3
   23710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   23714:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
   23718:	ed9f 7a84 	vldr	s14, [pc, #528]	; 2392c <__ieee754_logf+0x37c>
   2371c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   23720:	ee27 7a27 	vmul.f32	s14, s14, s15
   23724:	eddf 6a82 	vldr	s13, [pc, #520]	; 23930 <__ieee754_logf+0x380>
   23728:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   2372c:	ee66 7aa7 	vmul.f32	s15, s13, s15
   23730:	edd7 6a06 	vldr	s13, [r7, #24]
   23734:	ee76 6ae7 	vsub.f32	s13, s13, s15
   23738:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   2373c:	ee76 7ae7 	vsub.f32	s15, s13, s15
   23740:	ee77 7a67 	vsub.f32	s15, s14, s15
   23744:	e0e2      	b.n	2390c <__ieee754_logf+0x35c>
   23746:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   2374a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
   2374e:	ee37 7a87 	vadd.f32	s14, s15, s14
   23752:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
   23756:	eec6 7a87 	vdiv.f32	s15, s13, s14
   2375a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
   2375e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23760:	ee07 3a90 	vmov	s15, r3
   23764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   23768:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
   2376c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
   23770:	ee67 7aa7 	vmul.f32	s15, s15, s15
   23774:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   23778:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2377a:	4b6f      	ldr	r3, [pc, #444]	; (23938 <__ieee754_logf+0x388>)
   2377c:	4413      	add	r3, r2
   2377e:	63fb      	str	r3, [r7, #60]	; 0x3c
   23780:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23784:	ee67 7aa7 	vmul.f32	s15, s15, s15
   23788:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
   2378c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2378e:	4b6b      	ldr	r3, [pc, #428]	; (2393c <__ieee754_logf+0x38c>)
   23790:	1a9b      	subs	r3, r3, r2
   23792:	627b      	str	r3, [r7, #36]	; 0x24
   23794:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 23940 <__ieee754_logf+0x390>
   23798:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   2379c:	ee67 7a27 	vmul.f32	s15, s14, s15
   237a0:	ed9f 7a68 	vldr	s14, [pc, #416]	; 23944 <__ieee754_logf+0x394>
   237a4:	ee37 7a87 	vadd.f32	s14, s15, s14
   237a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   237ac:	ee67 7a27 	vmul.f32	s15, s14, s15
   237b0:	ed9f 7a65 	vldr	s14, [pc, #404]	; 23948 <__ieee754_logf+0x398>
   237b4:	ee77 7a87 	vadd.f32	s15, s15, s14
   237b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
   237bc:	ee67 7a27 	vmul.f32	s15, s14, s15
   237c0:	edc7 7a08 	vstr	s15, [r7, #32]
   237c4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 2394c <__ieee754_logf+0x39c>
   237c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   237cc:	ee67 7a27 	vmul.f32	s15, s14, s15
   237d0:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 23950 <__ieee754_logf+0x3a0>
   237d4:	ee37 7a87 	vadd.f32	s14, s15, s14
   237d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   237dc:	ee67 7a27 	vmul.f32	s15, s14, s15
   237e0:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 23954 <__ieee754_logf+0x3a4>
   237e4:	ee37 7a87 	vadd.f32	s14, s15, s14
   237e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
   237ec:	ee67 7a27 	vmul.f32	s15, s14, s15
   237f0:	ed9f 7a59 	vldr	s14, [pc, #356]	; 23958 <__ieee754_logf+0x3a8>
   237f4:	ee77 7a87 	vadd.f32	s15, s15, s14
   237f8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
   237fc:	ee67 7a27 	vmul.f32	s15, s14, s15
   23800:	edc7 7a07 	vstr	s15, [r7, #28]
   23804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   23806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23808:	4313      	orrs	r3, r2
   2380a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2380c:	ed97 7a07 	vldr	s14, [r7, #28]
   23810:	edd7 7a08 	vldr	s15, [r7, #32]
   23814:	ee77 7a27 	vadd.f32	s15, s14, s15
   23818:	edc7 7a06 	vstr	s15, [r7, #24]
   2381c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2381e:	2b00      	cmp	r3, #0
   23820:	dd44      	ble.n	238ac <__ieee754_logf+0x2fc>
   23822:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   23826:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   2382a:	ee67 7a87 	vmul.f32	s15, s15, s14
   2382e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   23832:	ee67 7a27 	vmul.f32	s15, s14, s15
   23836:	edc7 7a05 	vstr	s15, [r7, #20]
   2383a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2383c:	2b00      	cmp	r3, #0
   2383e:	d112      	bne.n	23866 <__ieee754_logf+0x2b6>
   23840:	ed97 7a05 	vldr	s14, [r7, #20]
   23844:	edd7 7a06 	vldr	s15, [r7, #24]
   23848:	ee37 7a27 	vadd.f32	s14, s14, s15
   2384c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
   23850:	ee67 7a27 	vmul.f32	s15, s14, s15
   23854:	ed97 7a05 	vldr	s14, [r7, #20]
   23858:	ee77 7a67 	vsub.f32	s15, s14, s15
   2385c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   23860:	ee77 7a67 	vsub.f32	s15, s14, s15
   23864:	e052      	b.n	2390c <__ieee754_logf+0x35c>
   23866:	ed9f 7a31 	vldr	s14, [pc, #196]	; 2392c <__ieee754_logf+0x37c>
   2386a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   2386e:	ee27 7a27 	vmul.f32	s14, s14, s15
   23872:	edd7 6a05 	vldr	s13, [r7, #20]
   23876:	edd7 7a06 	vldr	s15, [r7, #24]
   2387a:	ee76 6aa7 	vadd.f32	s13, s13, s15
   2387e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
   23882:	ee66 6aa7 	vmul.f32	s13, s13, s15
   23886:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 23930 <__ieee754_logf+0x380>
   2388a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   2388e:	ee66 7a27 	vmul.f32	s15, s12, s15
   23892:	ee76 7aa7 	vadd.f32	s15, s13, s15
   23896:	edd7 6a05 	vldr	s13, [r7, #20]
   2389a:	ee76 6ae7 	vsub.f32	s13, s13, s15
   2389e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   238a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
   238a6:	ee77 7a67 	vsub.f32	s15, s14, s15
   238aa:	e02f      	b.n	2390c <__ieee754_logf+0x35c>
   238ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   238ae:	2b00      	cmp	r3, #0
   238b0:	d10e      	bne.n	238d0 <__ieee754_logf+0x320>
   238b2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   238b6:	edd7 7a06 	vldr	s15, [r7, #24]
   238ba:	ee37 7a67 	vsub.f32	s14, s14, s15
   238be:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
   238c2:	ee67 7a27 	vmul.f32	s15, s14, s15
   238c6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   238ca:	ee77 7a67 	vsub.f32	s15, s14, s15
   238ce:	e01d      	b.n	2390c <__ieee754_logf+0x35c>
   238d0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 2392c <__ieee754_logf+0x37c>
   238d4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   238d8:	ee27 7a27 	vmul.f32	s14, s14, s15
   238dc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
   238e0:	edd7 7a06 	vldr	s15, [r7, #24]
   238e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
   238e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
   238ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
   238f0:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 23930 <__ieee754_logf+0x380>
   238f4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   238f8:	ee66 7a27 	vmul.f32	s15, s12, s15
   238fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
   23900:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   23904:	ee76 7ae7 	vsub.f32	s15, s13, s15
   23908:	ee77 7a67 	vsub.f32	s15, s14, s15
   2390c:	ee17 3a90 	vmov	r3, s15
   23910:	4618      	mov	r0, r3
   23912:	374c      	adds	r7, #76	; 0x4c
   23914:	46bd      	mov	sp, r7
   23916:	f85d 7b04 	ldr.w	r7, [sp], #4
   2391a:	4770      	bx	lr
   2391c:	4c000000 	.word	0x4c000000
   23920:	00000000 	.word	0x00000000
   23924:	004afb20 	.word	0x004afb20
   23928:	007ffff0 	.word	0x007ffff0
   2392c:	3f317180 	.word	0x3f317180
   23930:	3717f7d1 	.word	0x3717f7d1
   23934:	3eaaaaab 	.word	0x3eaaaaab
   23938:	ffcf5c30 	.word	0xffcf5c30
   2393c:	0035c288 	.word	0x0035c288
   23940:	3e1cd04f 	.word	0x3e1cd04f
   23944:	3e638e29 	.word	0x3e638e29
   23948:	3ecccccd 	.word	0x3ecccccd
   2394c:	3e178897 	.word	0x3e178897
   23950:	3e3a3325 	.word	0x3e3a3325
   23954:	3e924925 	.word	0x3e924925
   23958:	3f2aaaab 	.word	0x3f2aaaab

0002395c <__ieee754_rem_pio2f>:
   2395c:	b580      	push	{r7, lr}
   2395e:	b098      	sub	sp, #96	; 0x60
   23960:	af02      	add	r7, sp, #8
   23962:	6078      	str	r0, [r7, #4]
   23964:	6039      	str	r1, [r7, #0]
   23966:	687b      	ldr	r3, [r7, #4]
   23968:	617b      	str	r3, [r7, #20]
   2396a:	697b      	ldr	r3, [r7, #20]
   2396c:	643b      	str	r3, [r7, #64]	; 0x40
   2396e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   23974:	63fb      	str	r3, [r7, #60]	; 0x3c
   23976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23978:	4ad0      	ldr	r2, [pc, #832]	; (23cbc <__ieee754_rem_pio2f+0x360>)
   2397a:	4293      	cmp	r3, r2
   2397c:	dc09      	bgt.n	23992 <__ieee754_rem_pio2f+0x36>
   2397e:	683b      	ldr	r3, [r7, #0]
   23980:	687a      	ldr	r2, [r7, #4]
   23982:	601a      	str	r2, [r3, #0]
   23984:	683b      	ldr	r3, [r7, #0]
   23986:	3304      	adds	r3, #4
   23988:	f04f 0200 	mov.w	r2, #0
   2398c:	601a      	str	r2, [r3, #0]
   2398e:	2300      	movs	r3, #0
   23990:	e232      	b.n	23df8 <__ieee754_rem_pio2f+0x49c>
   23992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23994:	4aca      	ldr	r2, [pc, #808]	; (23cc0 <__ieee754_rem_pio2f+0x364>)
   23996:	4293      	cmp	r3, r2
   23998:	f300 8096 	bgt.w	23ac8 <__ieee754_rem_pio2f+0x16c>
   2399c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2399e:	2b00      	cmp	r3, #0
   239a0:	dd48      	ble.n	23a34 <__ieee754_rem_pio2f+0xd8>
   239a2:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 23cc4 <__ieee754_rem_pio2f+0x368>
   239a6:	edd7 7a01 	vldr	s15, [r7, #4]
   239aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
   239ae:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
   239b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   239b4:	f023 030f 	bic.w	r3, r3, #15
   239b8:	4ac3      	ldr	r2, [pc, #780]	; (23cc8 <__ieee754_rem_pio2f+0x36c>)
   239ba:	4293      	cmp	r3, r2
   239bc:	d018      	beq.n	239f0 <__ieee754_rem_pio2f+0x94>
   239be:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 23ccc <__ieee754_rem_pio2f+0x370>
   239c2:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
   239c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   239ca:	683b      	ldr	r3, [r7, #0]
   239cc:	edc3 7a00 	vstr	s15, [r3]
   239d0:	683b      	ldr	r3, [r7, #0]
   239d2:	edd3 7a00 	vldr	s15, [r3]
   239d6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
   239da:	ee77 7a67 	vsub.f32	s15, s14, s15
   239de:	ed9f 7abb 	vldr	s14, [pc, #748]	; 23ccc <__ieee754_rem_pio2f+0x370>
   239e2:	683b      	ldr	r3, [r7, #0]
   239e4:	3304      	adds	r3, #4
   239e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
   239ea:	edc3 7a00 	vstr	s15, [r3]
   239ee:	e01f      	b.n	23a30 <__ieee754_rem_pio2f+0xd4>
   239f0:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 23cd0 <__ieee754_rem_pio2f+0x374>
   239f4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
   239f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
   239fc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
   23a00:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 23cd4 <__ieee754_rem_pio2f+0x378>
   23a04:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
   23a08:	ee77 7ac7 	vsub.f32	s15, s15, s14
   23a0c:	683b      	ldr	r3, [r7, #0]
   23a0e:	edc3 7a00 	vstr	s15, [r3]
   23a12:	683b      	ldr	r3, [r7, #0]
   23a14:	edd3 7a00 	vldr	s15, [r3]
   23a18:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
   23a1c:	ee77 7a67 	vsub.f32	s15, s14, s15
   23a20:	ed9f 7aac 	vldr	s14, [pc, #688]	; 23cd4 <__ieee754_rem_pio2f+0x378>
   23a24:	683b      	ldr	r3, [r7, #0]
   23a26:	3304      	adds	r3, #4
   23a28:	ee77 7ac7 	vsub.f32	s15, s15, s14
   23a2c:	edc3 7a00 	vstr	s15, [r3]
   23a30:	2301      	movs	r3, #1
   23a32:	e1e1      	b.n	23df8 <__ieee754_rem_pio2f+0x49c>
   23a34:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 23cc4 <__ieee754_rem_pio2f+0x368>
   23a38:	edd7 7a01 	vldr	s15, [r7, #4]
   23a3c:	ee77 7a87 	vadd.f32	s15, s15, s14
   23a40:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
   23a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23a46:	f023 030f 	bic.w	r3, r3, #15
   23a4a:	4a9f      	ldr	r2, [pc, #636]	; (23cc8 <__ieee754_rem_pio2f+0x36c>)
   23a4c:	4293      	cmp	r3, r2
   23a4e:	d018      	beq.n	23a82 <__ieee754_rem_pio2f+0x126>
   23a50:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 23ccc <__ieee754_rem_pio2f+0x370>
   23a54:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
   23a58:	ee77 7a27 	vadd.f32	s15, s14, s15
   23a5c:	683b      	ldr	r3, [r7, #0]
   23a5e:	edc3 7a00 	vstr	s15, [r3]
   23a62:	683b      	ldr	r3, [r7, #0]
   23a64:	edd3 7a00 	vldr	s15, [r3]
   23a68:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
   23a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
   23a70:	ed9f 7a96 	vldr	s14, [pc, #600]	; 23ccc <__ieee754_rem_pio2f+0x370>
   23a74:	683b      	ldr	r3, [r7, #0]
   23a76:	3304      	adds	r3, #4
   23a78:	ee77 7a87 	vadd.f32	s15, s15, s14
   23a7c:	edc3 7a00 	vstr	s15, [r3]
   23a80:	e01f      	b.n	23ac2 <__ieee754_rem_pio2f+0x166>
   23a82:	ed9f 7a93 	vldr	s14, [pc, #588]	; 23cd0 <__ieee754_rem_pio2f+0x374>
   23a86:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
   23a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
   23a8e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
   23a92:	ed9f 7a90 	vldr	s14, [pc, #576]	; 23cd4 <__ieee754_rem_pio2f+0x378>
   23a96:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
   23a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
   23a9e:	683b      	ldr	r3, [r7, #0]
   23aa0:	edc3 7a00 	vstr	s15, [r3]
   23aa4:	683b      	ldr	r3, [r7, #0]
   23aa6:	edd3 7a00 	vldr	s15, [r3]
   23aaa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
   23aae:	ee77 7a67 	vsub.f32	s15, s14, s15
   23ab2:	ed9f 7a88 	vldr	s14, [pc, #544]	; 23cd4 <__ieee754_rem_pio2f+0x378>
   23ab6:	683b      	ldr	r3, [r7, #0]
   23ab8:	3304      	adds	r3, #4
   23aba:	ee77 7a87 	vadd.f32	s15, s15, s14
   23abe:	edc3 7a00 	vstr	s15, [r3]
   23ac2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23ac6:	e197      	b.n	23df8 <__ieee754_rem_pio2f+0x49c>
   23ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23aca:	4a83      	ldr	r2, [pc, #524]	; (23cd8 <__ieee754_rem_pio2f+0x37c>)
   23acc:	4293      	cmp	r3, r2
   23ace:	f300 8111 	bgt.w	23cf4 <__ieee754_rem_pio2f+0x398>
   23ad2:	6878      	ldr	r0, [r7, #4]
   23ad4:	f00d f948 	bl	30d68 <fabsf>
   23ad8:	6338      	str	r0, [r7, #48]	; 0x30
   23ada:	ed9f 7a80 	vldr	s14, [pc, #512]	; 23cdc <__ieee754_rem_pio2f+0x380>
   23ade:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
   23ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
   23ae6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   23aea:	ee77 7a87 	vadd.f32	s15, s15, s14
   23aee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   23af2:	ee17 3a90 	vmov	r3, s15
   23af6:	637b      	str	r3, [r7, #52]	; 0x34
   23af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23afa:	ee07 3a90 	vmov	s15, r3
   23afe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   23b02:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
   23b06:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 23cc4 <__ieee754_rem_pio2f+0x368>
   23b0a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
   23b12:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
   23b16:	ee77 7a67 	vsub.f32	s15, s14, s15
   23b1a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
   23b1e:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 23ccc <__ieee754_rem_pio2f+0x370>
   23b22:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23b26:	ee67 7a87 	vmul.f32	s15, s15, s14
   23b2a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   23b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23b30:	2b1f      	cmp	r3, #31
   23b32:	dc13      	bgt.n	23b5c <__ieee754_rem_pio2f+0x200>
   23b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23b36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   23b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   23b3c:	3a01      	subs	r2, #1
   23b3e:	4968      	ldr	r1, [pc, #416]	; (23ce0 <__ieee754_rem_pio2f+0x384>)
   23b40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   23b44:	4293      	cmp	r3, r2
   23b46:	d009      	beq.n	23b5c <__ieee754_rem_pio2f+0x200>
   23b48:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
   23b4c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23b50:	ee77 7a67 	vsub.f32	s15, s14, s15
   23b54:	683b      	ldr	r3, [r7, #0]
   23b56:	edc3 7a00 	vstr	s15, [r3]
   23b5a:	e085      	b.n	23c68 <__ieee754_rem_pio2f+0x30c>
   23b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23b5e:	15db      	asrs	r3, r3, #23
   23b60:	62bb      	str	r3, [r7, #40]	; 0x28
   23b62:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
   23b66:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
   23b6e:	683b      	ldr	r3, [r7, #0]
   23b70:	edc3 7a00 	vstr	s15, [r3]
   23b74:	683b      	ldr	r3, [r7, #0]
   23b76:	681b      	ldr	r3, [r3, #0]
   23b78:	613b      	str	r3, [r7, #16]
   23b7a:	693b      	ldr	r3, [r7, #16]
   23b7c:	627b      	str	r3, [r7, #36]	; 0x24
   23b7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   23b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23b82:	0ddb      	lsrs	r3, r3, #23
   23b84:	b2db      	uxtb	r3, r3
   23b86:	1ad3      	subs	r3, r2, r3
   23b88:	64bb      	str	r3, [r7, #72]	; 0x48
   23b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23b8c:	2b08      	cmp	r3, #8
   23b8e:	dd6b      	ble.n	23c68 <__ieee754_rem_pio2f+0x30c>
   23b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   23b92:	633b      	str	r3, [r7, #48]	; 0x30
   23b94:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 23cd0 <__ieee754_rem_pio2f+0x374>
   23b98:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23b9c:	ee67 7a87 	vmul.f32	s15, s15, s14
   23ba0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   23ba4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
   23ba8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23bac:	ee77 7a67 	vsub.f32	s15, s14, s15
   23bb0:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
   23bb4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 23cd4 <__ieee754_rem_pio2f+0x378>
   23bb8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
   23bc0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
   23bc4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
   23bc8:	ee76 6ae7 	vsub.f32	s13, s13, s15
   23bcc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23bd0:	ee76 7ae7 	vsub.f32	s15, s13, s15
   23bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
   23bd8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   23bdc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
   23be0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23be4:	ee77 7a67 	vsub.f32	s15, s14, s15
   23be8:	683b      	ldr	r3, [r7, #0]
   23bea:	edc3 7a00 	vstr	s15, [r3]
   23bee:	683b      	ldr	r3, [r7, #0]
   23bf0:	681b      	ldr	r3, [r3, #0]
   23bf2:	60fb      	str	r3, [r7, #12]
   23bf4:	68fb      	ldr	r3, [r7, #12]
   23bf6:	627b      	str	r3, [r7, #36]	; 0x24
   23bf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   23bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   23bfc:	0ddb      	lsrs	r3, r3, #23
   23bfe:	b2db      	uxtb	r3, r3
   23c00:	1ad3      	subs	r3, r2, r3
   23c02:	64bb      	str	r3, [r7, #72]	; 0x48
   23c04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23c06:	2b19      	cmp	r3, #25
   23c08:	dd2e      	ble.n	23c68 <__ieee754_rem_pio2f+0x30c>
   23c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   23c0c:	633b      	str	r3, [r7, #48]	; 0x30
   23c0e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 23ce4 <__ieee754_rem_pio2f+0x388>
   23c12:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23c16:	ee67 7a87 	vmul.f32	s15, s15, s14
   23c1a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   23c1e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
   23c22:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23c26:	ee77 7a67 	vsub.f32	s15, s14, s15
   23c2a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
   23c2e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 23ce8 <__ieee754_rem_pio2f+0x38c>
   23c32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
   23c36:	ee27 7a27 	vmul.f32	s14, s14, s15
   23c3a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
   23c3e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
   23c42:	ee76 6ae7 	vsub.f32	s13, s13, s15
   23c46:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23c4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
   23c4e:	ee77 7a67 	vsub.f32	s15, s14, s15
   23c52:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
   23c56:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
   23c5a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
   23c62:	683b      	ldr	r3, [r7, #0]
   23c64:	edc3 7a00 	vstr	s15, [r3]
   23c68:	683b      	ldr	r3, [r7, #0]
   23c6a:	edd3 7a00 	vldr	s15, [r3]
   23c6e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
   23c72:	ee37 7a67 	vsub.f32	s14, s14, s15
   23c76:	683b      	ldr	r3, [r7, #0]
   23c78:	3304      	adds	r3, #4
   23c7a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
   23c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
   23c82:	edc3 7a00 	vstr	s15, [r3]
   23c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23c88:	2b00      	cmp	r3, #0
   23c8a:	da14      	bge.n	23cb6 <__ieee754_rem_pio2f+0x35a>
   23c8c:	683b      	ldr	r3, [r7, #0]
   23c8e:	edd3 7a00 	vldr	s15, [r3]
   23c92:	eef1 7a67 	vneg.f32	s15, s15
   23c96:	683b      	ldr	r3, [r7, #0]
   23c98:	edc3 7a00 	vstr	s15, [r3]
   23c9c:	683b      	ldr	r3, [r7, #0]
   23c9e:	3304      	adds	r3, #4
   23ca0:	edd3 7a00 	vldr	s15, [r3]
   23ca4:	683b      	ldr	r3, [r7, #0]
   23ca6:	3304      	adds	r3, #4
   23ca8:	eef1 7a67 	vneg.f32	s15, s15
   23cac:	edc3 7a00 	vstr	s15, [r3]
   23cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23cb2:	425b      	negs	r3, r3
   23cb4:	e0a0      	b.n	23df8 <__ieee754_rem_pio2f+0x49c>
   23cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23cb8:	e09e      	b.n	23df8 <__ieee754_rem_pio2f+0x49c>
   23cba:	bf00      	nop
   23cbc:	3f490fd8 	.word	0x3f490fd8
   23cc0:	4016cbe3 	.word	0x4016cbe3
   23cc4:	3fc90f80 	.word	0x3fc90f80
   23cc8:	3fc90fd0 	.word	0x3fc90fd0
   23ccc:	37354443 	.word	0x37354443
   23cd0:	37354400 	.word	0x37354400
   23cd4:	2e85a308 	.word	0x2e85a308
   23cd8:	43490f80 	.word	0x43490f80
   23cdc:	3f22f984 	.word	0x3f22f984
   23ce0:	00033694 	.word	0x00033694
   23ce4:	2e85a300 	.word	0x2e85a300
   23ce8:	248d3132 	.word	0x248d3132
   23cec:	43800000 	.word	0x43800000
   23cf0:	00000000 	.word	0x00000000
   23cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23cf6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   23cfa:	db0c      	blt.n	23d16 <__ieee754_rem_pio2f+0x3ba>
   23cfc:	683b      	ldr	r3, [r7, #0]
   23cfe:	3304      	adds	r3, #4
   23d00:	edd7 7a01 	vldr	s15, [r7, #4]
   23d04:	ee77 7ae7 	vsub.f32	s15, s15, s15
   23d08:	edc3 7a00 	vstr	s15, [r3]
   23d0c:	681a      	ldr	r2, [r3, #0]
   23d0e:	683b      	ldr	r3, [r7, #0]
   23d10:	601a      	str	r2, [r3, #0]
   23d12:	2300      	movs	r3, #0
   23d14:	e070      	b.n	23df8 <__ieee754_rem_pio2f+0x49c>
   23d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   23d18:	15db      	asrs	r3, r3, #23
   23d1a:	3b86      	subs	r3, #134	; 0x86
   23d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   23d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   23d20:	05db      	lsls	r3, r3, #23
   23d22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   23d24:	1ad3      	subs	r3, r2, r3
   23d26:	60bb      	str	r3, [r7, #8]
   23d28:	68bb      	ldr	r3, [r7, #8]
   23d2a:	657b      	str	r3, [r7, #84]	; 0x54
   23d2c:	2300      	movs	r3, #0
   23d2e:	64bb      	str	r3, [r7, #72]	; 0x48
   23d30:	e022      	b.n	23d78 <__ieee754_rem_pio2f+0x41c>
   23d32:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
   23d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   23d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   23d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23d40:	009b      	lsls	r3, r3, #2
   23d42:	f107 0258 	add.w	r2, r7, #88	; 0x58
   23d46:	4413      	add	r3, r2
   23d48:	3b40      	subs	r3, #64	; 0x40
   23d4a:	edc3 7a00 	vstr	s15, [r3]
   23d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23d50:	009b      	lsls	r3, r3, #2
   23d52:	f107 0258 	add.w	r2, r7, #88	; 0x58
   23d56:	4413      	add	r3, r2
   23d58:	3b40      	subs	r3, #64	; 0x40
   23d5a:	edd3 7a00 	vldr	s15, [r3]
   23d5e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
   23d62:	ee77 7a67 	vsub.f32	s15, s14, s15
   23d66:	ed1f 7a1f 	vldr	s14, [pc, #-124]	; 23cec <__ieee754_rem_pio2f+0x390>
   23d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
   23d6e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
   23d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23d74:	3301      	adds	r3, #1
   23d76:	64bb      	str	r3, [r7, #72]	; 0x48
   23d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   23d7a:	2b01      	cmp	r3, #1
   23d7c:	ddd9      	ble.n	23d32 <__ieee754_rem_pio2f+0x3d6>
   23d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   23d80:	623b      	str	r3, [r7, #32]
   23d82:	2303      	movs	r3, #3
   23d84:	647b      	str	r3, [r7, #68]	; 0x44
   23d86:	e002      	b.n	23d8e <__ieee754_rem_pio2f+0x432>
   23d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23d8a:	3b01      	subs	r3, #1
   23d8c:	647b      	str	r3, [r7, #68]	; 0x44
   23d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23d90:	3b01      	subs	r3, #1
   23d92:	009b      	lsls	r3, r3, #2
   23d94:	f107 0258 	add.w	r2, r7, #88	; 0x58
   23d98:	4413      	add	r3, r2
   23d9a:	3b40      	subs	r3, #64	; 0x40
   23d9c:	edd3 7a00 	vldr	s15, [r3]
   23da0:	ed1f 7a2d 	vldr	s14, [pc, #-180]	; 23cf0 <__ieee754_rem_pio2f+0x394>
   23da4:	eef4 7a47 	vcmp.f32	s15, s14
   23da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23dac:	d0ec      	beq.n	23d88 <__ieee754_rem_pio2f+0x42c>
   23dae:	f107 0018 	add.w	r0, r7, #24
   23db2:	4b13      	ldr	r3, [pc, #76]	; (23e00 <__ieee754_rem_pio2f+0x4a4>)
   23db4:	9301      	str	r3, [sp, #4]
   23db6:	2302      	movs	r3, #2
   23db8:	9300      	str	r3, [sp, #0]
   23dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   23dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
   23dbe:	6839      	ldr	r1, [r7, #0]
   23dc0:	f000 f8e2 	bl	23f88 <__kernel_rem_pio2f>
   23dc4:	6378      	str	r0, [r7, #52]	; 0x34
   23dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   23dc8:	2b00      	cmp	r3, #0
   23dca:	da14      	bge.n	23df6 <__ieee754_rem_pio2f+0x49a>
   23dcc:	683b      	ldr	r3, [r7, #0]
   23dce:	edd3 7a00 	vldr	s15, [r3]
   23dd2:	eef1 7a67 	vneg.f32	s15, s15
   23dd6:	683b      	ldr	r3, [r7, #0]
   23dd8:	edc3 7a00 	vstr	s15, [r3]
   23ddc:	683b      	ldr	r3, [r7, #0]
   23dde:	3304      	adds	r3, #4
   23de0:	edd3 7a00 	vldr	s15, [r3]
   23de4:	683b      	ldr	r3, [r7, #0]
   23de6:	3304      	adds	r3, #4
   23de8:	eef1 7a67 	vneg.f32	s15, s15
   23dec:	edc3 7a00 	vstr	s15, [r3]
   23df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23df2:	425b      	negs	r3, r3
   23df4:	e000      	b.n	23df8 <__ieee754_rem_pio2f+0x49c>
   23df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   23df8:	4618      	mov	r0, r3
   23dfa:	3758      	adds	r7, #88	; 0x58
   23dfc:	46bd      	mov	sp, r7
   23dfe:	bd80      	pop	{r7, pc}
   23e00:	0003337c 	.word	0x0003337c

00023e04 <__kernel_cosf>:
   23e04:	b480      	push	{r7}
   23e06:	b08b      	sub	sp, #44	; 0x2c
   23e08:	af00      	add	r7, sp, #0
   23e0a:	6078      	str	r0, [r7, #4]
   23e0c:	6039      	str	r1, [r7, #0]
   23e0e:	687b      	ldr	r3, [r7, #4]
   23e10:	60fb      	str	r3, [r7, #12]
   23e12:	68fb      	ldr	r3, [r7, #12]
   23e14:	623b      	str	r3, [r7, #32]
   23e16:	6a3b      	ldr	r3, [r7, #32]
   23e18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   23e1c:	623b      	str	r3, [r7, #32]
   23e1e:	6a3b      	ldr	r3, [r7, #32]
   23e20:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   23e24:	da0a      	bge.n	23e3c <__kernel_cosf+0x38>
   23e26:	edd7 7a01 	vldr	s15, [r7, #4]
   23e2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   23e2e:	ee17 3a90 	vmov	r3, s15
   23e32:	2b00      	cmp	r3, #0
   23e34:	d102      	bne.n	23e3c <__kernel_cosf+0x38>
   23e36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   23e3a:	e08b      	b.n	23f54 <__kernel_cosf+0x150>
   23e3c:	edd7 7a01 	vldr	s15, [r7, #4]
   23e40:	ee67 7aa7 	vmul.f32	s15, s15, s15
   23e44:	edc7 7a07 	vstr	s15, [r7, #28]
   23e48:	ed9f 7a46 	vldr	s14, [pc, #280]	; 23f64 <__kernel_cosf+0x160>
   23e4c:	edd7 7a07 	vldr	s15, [r7, #28]
   23e50:	ee67 7a27 	vmul.f32	s15, s14, s15
   23e54:	ed9f 7a44 	vldr	s14, [pc, #272]	; 23f68 <__kernel_cosf+0x164>
   23e58:	ee37 7a87 	vadd.f32	s14, s15, s14
   23e5c:	edd7 7a07 	vldr	s15, [r7, #28]
   23e60:	ee67 7a27 	vmul.f32	s15, s14, s15
   23e64:	ed9f 7a41 	vldr	s14, [pc, #260]	; 23f6c <__kernel_cosf+0x168>
   23e68:	ee37 7a87 	vadd.f32	s14, s15, s14
   23e6c:	edd7 7a07 	vldr	s15, [r7, #28]
   23e70:	ee67 7a27 	vmul.f32	s15, s14, s15
   23e74:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 23f70 <__kernel_cosf+0x16c>
   23e78:	ee37 7a87 	vadd.f32	s14, s15, s14
   23e7c:	edd7 7a07 	vldr	s15, [r7, #28]
   23e80:	ee67 7a27 	vmul.f32	s15, s14, s15
   23e84:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 23f74 <__kernel_cosf+0x170>
   23e88:	ee37 7a87 	vadd.f32	s14, s15, s14
   23e8c:	edd7 7a07 	vldr	s15, [r7, #28]
   23e90:	ee67 7a27 	vmul.f32	s15, s14, s15
   23e94:	ed9f 7a38 	vldr	s14, [pc, #224]	; 23f78 <__kernel_cosf+0x174>
   23e98:	ee77 7a87 	vadd.f32	s15, s15, s14
   23e9c:	ed97 7a07 	vldr	s14, [r7, #28]
   23ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
   23ea4:	edc7 7a06 	vstr	s15, [r7, #24]
   23ea8:	6a3b      	ldr	r3, [r7, #32]
   23eaa:	4a34      	ldr	r2, [pc, #208]	; (23f7c <__kernel_cosf+0x178>)
   23eac:	4293      	cmp	r3, r2
   23eae:	dc1a      	bgt.n	23ee6 <__kernel_cosf+0xe2>
   23eb0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
   23eb4:	edd7 7a07 	vldr	s15, [r7, #28]
   23eb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   23ebc:	ee27 7a87 	vmul.f32	s14, s15, s14
   23ec0:	edd7 6a07 	vldr	s13, [r7, #28]
   23ec4:	edd7 7a06 	vldr	s15, [r7, #24]
   23ec8:	ee66 6aa7 	vmul.f32	s13, s13, s15
   23ecc:	ed97 6a01 	vldr	s12, [r7, #4]
   23ed0:	edd7 7a00 	vldr	s15, [r7]
   23ed4:	ee66 7a27 	vmul.f32	s15, s12, s15
   23ed8:	ee76 7ae7 	vsub.f32	s15, s13, s15
   23edc:	ee77 7a67 	vsub.f32	s15, s14, s15
   23ee0:	ee75 7ae7 	vsub.f32	s15, s11, s15
   23ee4:	e036      	b.n	23f54 <__kernel_cosf+0x150>
   23ee6:	6a3b      	ldr	r3, [r7, #32]
   23ee8:	4a25      	ldr	r2, [pc, #148]	; (23f80 <__kernel_cosf+0x17c>)
   23eea:	4293      	cmp	r3, r2
   23eec:	dd02      	ble.n	23ef4 <__kernel_cosf+0xf0>
   23eee:	4b25      	ldr	r3, [pc, #148]	; (23f84 <__kernel_cosf+0x180>)
   23ef0:	627b      	str	r3, [r7, #36]	; 0x24
   23ef2:	e005      	b.n	23f00 <__kernel_cosf+0xfc>
   23ef4:	6a3b      	ldr	r3, [r7, #32]
   23ef6:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
   23efa:	60bb      	str	r3, [r7, #8]
   23efc:	68bb      	ldr	r3, [r7, #8]
   23efe:	627b      	str	r3, [r7, #36]	; 0x24
   23f00:	edd7 7a07 	vldr	s15, [r7, #28]
   23f04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   23f08:	ee27 7a87 	vmul.f32	s14, s15, s14
   23f0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   23f10:	ee77 7a67 	vsub.f32	s15, s14, s15
   23f14:	edc7 7a05 	vstr	s15, [r7, #20]
   23f18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   23f1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
   23f20:	ee77 7a67 	vsub.f32	s15, s14, s15
   23f24:	edc7 7a04 	vstr	s15, [r7, #16]
   23f28:	ed97 7a07 	vldr	s14, [r7, #28]
   23f2c:	edd7 7a06 	vldr	s15, [r7, #24]
   23f30:	ee27 7a27 	vmul.f32	s14, s14, s15
   23f34:	edd7 6a01 	vldr	s13, [r7, #4]
   23f38:	edd7 7a00 	vldr	s15, [r7]
   23f3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
   23f40:	ee77 7a67 	vsub.f32	s15, s14, s15
   23f44:	ed97 7a05 	vldr	s14, [r7, #20]
   23f48:	ee77 7a67 	vsub.f32	s15, s14, s15
   23f4c:	ed97 7a04 	vldr	s14, [r7, #16]
   23f50:	ee77 7a67 	vsub.f32	s15, s14, s15
   23f54:	ee17 3a90 	vmov	r3, s15
   23f58:	4618      	mov	r0, r3
   23f5a:	372c      	adds	r7, #44	; 0x2c
   23f5c:	46bd      	mov	sp, r7
   23f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
   23f62:	4770      	bx	lr
   23f64:	ad47d74e 	.word	0xad47d74e
   23f68:	310f74f6 	.word	0x310f74f6
   23f6c:	b493f27c 	.word	0xb493f27c
   23f70:	37d00d01 	.word	0x37d00d01
   23f74:	bab60b61 	.word	0xbab60b61
   23f78:	3d2aaaab 	.word	0x3d2aaaab
   23f7c:	3e999999 	.word	0x3e999999
   23f80:	3f480000 	.word	0x3f480000
   23f84:	3e900000 	.word	0x3e900000

00023f88 <__kernel_rem_pio2f>:
   23f88:	b590      	push	{r4, r7, lr}
   23f8a:	b0e5      	sub	sp, #404	; 0x194
   23f8c:	af00      	add	r7, sp, #0
   23f8e:	f107 040c 	add.w	r4, r7, #12
   23f92:	6020      	str	r0, [r4, #0]
   23f94:	f107 0008 	add.w	r0, r7, #8
   23f98:	6001      	str	r1, [r0, #0]
   23f9a:	1d39      	adds	r1, r7, #4
   23f9c:	600a      	str	r2, [r1, #0]
   23f9e:	463a      	mov	r2, r7
   23fa0:	6013      	str	r3, [r2, #0]
   23fa2:	4ae9      	ldr	r2, [pc, #932]	; (24348 <__kernel_rem_pio2f+0x3c0>)
   23fa4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
   23fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   23fac:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   23fb0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   23fb4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   23fb8:	463b      	mov	r3, r7
   23fba:	681b      	ldr	r3, [r3, #0]
   23fbc:	3b01      	subs	r3, #1
   23fbe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   23fc2:	1d3b      	adds	r3, r7, #4
   23fc4:	681b      	ldr	r3, [r3, #0]
   23fc6:	3b03      	subs	r3, #3
   23fc8:	2b00      	cmp	r3, #0
   23fca:	da00      	bge.n	23fce <__kernel_rem_pio2f+0x46>
   23fcc:	3307      	adds	r3, #7
   23fce:	10db      	asrs	r3, r3, #3
   23fd0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   23fd4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
   23fd8:	2b00      	cmp	r3, #0
   23fda:	da02      	bge.n	23fe2 <__kernel_rem_pio2f+0x5a>
   23fdc:	2300      	movs	r3, #0
   23fde:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   23fe2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
   23fe6:	3301      	adds	r3, #1
   23fe8:	00db      	lsls	r3, r3, #3
   23fea:	1d3a      	adds	r2, r7, #4
   23fec:	6812      	ldr	r2, [r2, #0]
   23fee:	1ad3      	subs	r3, r2, r3
   23ff0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   23ff4:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
   23ff8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
   23ffc:	1ad3      	subs	r3, r2, r3
   23ffe:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   24002:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
   24006:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   2400a:	4413      	add	r3, r2
   2400c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
   24010:	2300      	movs	r3, #0
   24012:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24016:	e024      	b.n	24062 <__kernel_rem_pio2f+0xda>
   24018:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   2401c:	2b00      	cmp	r3, #0
   2401e:	db0b      	blt.n	24038 <__kernel_rem_pio2f+0xb0>
   24020:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   24024:	009b      	lsls	r3, r3, #2
   24026:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
   2402a:	4413      	add	r3, r2
   2402c:	681b      	ldr	r3, [r3, #0]
   2402e:	ee07 3a90 	vmov	s15, r3
   24032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   24036:	e001      	b.n	2403c <__kernel_rem_pio2f+0xb4>
   24038:	eddf 7ac4 	vldr	s15, [pc, #784]	; 2434c <__kernel_rem_pio2f+0x3c4>
   2403c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24040:	009b      	lsls	r3, r3, #2
   24042:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   24046:	4413      	add	r3, r2
   24048:	3bdc      	subs	r3, #220	; 0xdc
   2404a:	edc3 7a00 	vstr	s15, [r3]
   2404e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24052:	3301      	adds	r3, #1
   24054:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24058:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   2405c:	3301      	adds	r3, #1
   2405e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   24062:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   24066:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
   2406a:	429a      	cmp	r2, r3
   2406c:	ddd4      	ble.n	24018 <__kernel_rem_pio2f+0x90>
   2406e:	2300      	movs	r3, #0
   24070:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24074:	e040      	b.n	240f8 <__kernel_rem_pio2f+0x170>
   24076:	2300      	movs	r3, #0
   24078:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   2407c:	f04f 0300 	mov.w	r3, #0
   24080:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   24084:	e024      	b.n	240d0 <__kernel_rem_pio2f+0x148>
   24086:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   2408a:	009b      	lsls	r3, r3, #2
   2408c:	f107 020c 	add.w	r2, r7, #12
   24090:	6812      	ldr	r2, [r2, #0]
   24092:	4413      	add	r3, r2
   24094:	ed93 7a00 	vldr	s14, [r3]
   24098:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
   2409c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   240a0:	441a      	add	r2, r3
   240a2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   240a6:	1ad3      	subs	r3, r2, r3
   240a8:	009b      	lsls	r3, r3, #2
   240aa:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   240ae:	4413      	add	r3, r2
   240b0:	3bdc      	subs	r3, #220	; 0xdc
   240b2:	edd3 7a00 	vldr	s15, [r3]
   240b6:	ee67 7a27 	vmul.f32	s15, s14, s15
   240ba:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   240be:	ee77 7a27 	vadd.f32	s15, s14, s15
   240c2:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   240c6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   240ca:	3301      	adds	r3, #1
   240cc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   240d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   240d4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
   240d8:	429a      	cmp	r2, r3
   240da:	ddd4      	ble.n	24086 <__kernel_rem_pio2f+0xfe>
   240dc:	f107 0214 	add.w	r2, r7, #20
   240e0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   240e4:	009b      	lsls	r3, r3, #2
   240e6:	4413      	add	r3, r2
   240e8:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   240ec:	601a      	str	r2, [r3, #0]
   240ee:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   240f2:	3301      	adds	r3, #1
   240f4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   240f8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   240fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   24100:	429a      	cmp	r2, r3
   24102:	ddb8      	ble.n	24076 <__kernel_rem_pio2f+0xee>
   24104:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   24108:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   2410c:	2300      	movs	r3, #0
   2410e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24112:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24116:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   2411a:	f107 0214 	add.w	r2, r7, #20
   2411e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24122:	009b      	lsls	r3, r3, #2
   24124:	4413      	add	r3, r2
   24126:	681b      	ldr	r3, [r3, #0]
   24128:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   2412c:	e03a      	b.n	241a4 <__kernel_rem_pio2f+0x21c>
   2412e:	ed9f 7a89 	vldr	s14, [pc, #548]	; 24354 <__kernel_rem_pio2f+0x3cc>
   24132:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   24136:	ee67 7a27 	vmul.f32	s15, s14, s15
   2413a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2413e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   24142:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   24146:	ed9f 7a82 	vldr	s14, [pc, #520]	; 24350 <__kernel_rem_pio2f+0x3c8>
   2414a:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   2414e:	ee67 7a27 	vmul.f32	s15, s14, s15
   24152:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
   24156:	ee77 7a67 	vsub.f32	s15, s14, s15
   2415a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2415e:	ee17 2a90 	vmov	r2, s15
   24162:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24166:	009b      	lsls	r3, r3, #2
   24168:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   2416c:	440b      	add	r3, r1
   2416e:	f843 2c8c 	str.w	r2, [r3, #-140]
   24172:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   24176:	3b01      	subs	r3, #1
   24178:	f107 0214 	add.w	r2, r7, #20
   2417c:	009b      	lsls	r3, r3, #2
   2417e:	4413      	add	r3, r2
   24180:	edd3 7a00 	vldr	s15, [r3]
   24184:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   24188:	ee77 7a27 	vadd.f32	s15, s14, s15
   2418c:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
   24190:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24194:	3301      	adds	r3, #1
   24196:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   2419a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   2419e:	3b01      	subs	r3, #1
   241a0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   241a4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   241a8:	2b00      	cmp	r3, #0
   241aa:	dcc0      	bgt.n	2412e <__kernel_rem_pio2f+0x1a6>
   241ac:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
   241b0:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
   241b4:	f000 ffaa 	bl	2510c <scalbnf>
   241b8:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
   241bc:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   241c0:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
   241c4:	ee67 7a87 	vmul.f32	s15, s15, s14
   241c8:	ee17 0a90 	vmov	r0, s15
   241cc:	f00c fdfa 	bl	30dc4 <floorf>
   241d0:	ee07 0a10 	vmov	s14, r0
   241d4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   241d8:	ee67 7a27 	vmul.f32	s15, s14, s15
   241dc:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
   241e0:	ee77 7a67 	vsub.f32	s15, s14, s15
   241e4:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
   241e8:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   241ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   241f0:	ee17 3a90 	vmov	r3, s15
   241f4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   241f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   241fc:	ee07 3a90 	vmov	s15, r3
   24200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   24204:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
   24208:	ee77 7a67 	vsub.f32	s15, s14, s15
   2420c:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
   24210:	2300      	movs	r3, #0
   24212:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   24216:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   2421a:	2b00      	cmp	r3, #0
   2421c:	dd43      	ble.n	242a6 <__kernel_rem_pio2f+0x31e>
   2421e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24222:	3b01      	subs	r3, #1
   24224:	009b      	lsls	r3, r3, #2
   24226:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   2422a:	4413      	add	r3, r2
   2422c:	f853 2c8c 	ldr.w	r2, [r3, #-140]
   24230:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   24234:	f1c3 0308 	rsb	r3, r3, #8
   24238:	fa42 f303 	asr.w	r3, r2, r3
   2423c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24240:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
   24244:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24248:	4413      	add	r3, r2
   2424a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   2424e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24252:	3b01      	subs	r3, #1
   24254:	009b      	lsls	r3, r3, #2
   24256:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   2425a:	4413      	add	r3, r2
   2425c:	f853 1c8c 	ldr.w	r1, [r3, #-140]
   24260:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   24264:	f1c3 0308 	rsb	r3, r3, #8
   24268:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   2426c:	409a      	lsls	r2, r3
   2426e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24272:	3b01      	subs	r3, #1
   24274:	1a8a      	subs	r2, r1, r2
   24276:	009b      	lsls	r3, r3, #2
   24278:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   2427c:	440b      	add	r3, r1
   2427e:	f843 2c8c 	str.w	r2, [r3, #-140]
   24282:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24286:	3b01      	subs	r3, #1
   24288:	009b      	lsls	r3, r3, #2
   2428a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   2428e:	4413      	add	r3, r2
   24290:	f853 2c8c 	ldr.w	r2, [r3, #-140]
   24294:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   24298:	f1c3 0307 	rsb	r3, r3, #7
   2429c:	fa42 f303 	asr.w	r3, r2, r3
   242a0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   242a4:	e01c      	b.n	242e0 <__kernel_rem_pio2f+0x358>
   242a6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   242aa:	2b00      	cmp	r3, #0
   242ac:	d10c      	bne.n	242c8 <__kernel_rem_pio2f+0x340>
   242ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   242b2:	3b01      	subs	r3, #1
   242b4:	009b      	lsls	r3, r3, #2
   242b6:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   242ba:	4413      	add	r3, r2
   242bc:	f853 3c8c 	ldr.w	r3, [r3, #-140]
   242c0:	121b      	asrs	r3, r3, #8
   242c2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   242c6:	e00b      	b.n	242e0 <__kernel_rem_pio2f+0x358>
   242c8:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   242cc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   242d0:	eef4 7ac7 	vcmpe.f32	s15, s14
   242d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   242d8:	db02      	blt.n	242e0 <__kernel_rem_pio2f+0x358>
   242da:	2302      	movs	r3, #2
   242dc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   242e0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   242e4:	2b00      	cmp	r3, #0
   242e6:	f340 80a5 	ble.w	24434 <__kernel_rem_pio2f+0x4ac>
   242ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   242ee:	3301      	adds	r3, #1
   242f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
   242f4:	2300      	movs	r3, #0
   242f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
   242fa:	2300      	movs	r3, #0
   242fc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24300:	e03b      	b.n	2437a <__kernel_rem_pio2f+0x3f2>
   24302:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24306:	009b      	lsls	r3, r3, #2
   24308:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   2430c:	4413      	add	r3, r2
   2430e:	f853 3c8c 	ldr.w	r3, [r3, #-140]
   24312:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   24316:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
   2431a:	2b00      	cmp	r3, #0
   2431c:	d11c      	bne.n	24358 <__kernel_rem_pio2f+0x3d0>
   2431e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   24322:	2b00      	cmp	r3, #0
   24324:	d024      	beq.n	24370 <__kernel_rem_pio2f+0x3e8>
   24326:	2301      	movs	r3, #1
   24328:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
   2432c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   24330:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
   24334:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24338:	009b      	lsls	r3, r3, #2
   2433a:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   2433e:	440b      	add	r3, r1
   24340:	f843 2c8c 	str.w	r2, [r3, #-140]
   24344:	e014      	b.n	24370 <__kernel_rem_pio2f+0x3e8>
   24346:	bf00      	nop
   24348:	00033714 	.word	0x00033714
   2434c:	00000000 	.word	0x00000000
   24350:	43800000 	.word	0x43800000
   24354:	3b800000 	.word	0x3b800000
   24358:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   2435c:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
   24360:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24364:	009b      	lsls	r3, r3, #2
   24366:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   2436a:	440b      	add	r3, r1
   2436c:	f843 2c8c 	str.w	r2, [r3, #-140]
   24370:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24374:	3301      	adds	r3, #1
   24376:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   2437a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   2437e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24382:	429a      	cmp	r2, r3
   24384:	dbbd      	blt.n	24302 <__kernel_rem_pio2f+0x37a>
   24386:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   2438a:	2b00      	cmp	r3, #0
   2438c:	dd32      	ble.n	243f4 <__kernel_rem_pio2f+0x46c>
   2438e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   24392:	2b01      	cmp	r3, #1
   24394:	d004      	beq.n	243a0 <__kernel_rem_pio2f+0x418>
   24396:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   2439a:	2b02      	cmp	r3, #2
   2439c:	d015      	beq.n	243ca <__kernel_rem_pio2f+0x442>
   2439e:	e02a      	b.n	243f6 <__kernel_rem_pio2f+0x46e>
   243a0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   243a4:	3b01      	subs	r3, #1
   243a6:	009b      	lsls	r3, r3, #2
   243a8:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   243ac:	4413      	add	r3, r2
   243ae:	f853 2c8c 	ldr.w	r2, [r3, #-140]
   243b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   243b6:	3b01      	subs	r3, #1
   243b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   243bc:	009b      	lsls	r3, r3, #2
   243be:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   243c2:	440b      	add	r3, r1
   243c4:	f843 2c8c 	str.w	r2, [r3, #-140]
   243c8:	e015      	b.n	243f6 <__kernel_rem_pio2f+0x46e>
   243ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   243ce:	3b01      	subs	r3, #1
   243d0:	009b      	lsls	r3, r3, #2
   243d2:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   243d6:	4413      	add	r3, r2
   243d8:	f853 2c8c 	ldr.w	r2, [r3, #-140]
   243dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   243e0:	3b01      	subs	r3, #1
   243e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   243e6:	009b      	lsls	r3, r3, #2
   243e8:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   243ec:	440b      	add	r3, r1
   243ee:	f843 2c8c 	str.w	r2, [r3, #-140]
   243f2:	e000      	b.n	243f6 <__kernel_rem_pio2f+0x46e>
   243f4:	bf00      	nop
   243f6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   243fa:	2b02      	cmp	r3, #2
   243fc:	d11a      	bne.n	24434 <__kernel_rem_pio2f+0x4ac>
   243fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   24402:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   24406:	ee77 7a67 	vsub.f32	s15, s14, s15
   2440a:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
   2440e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
   24412:	2b00      	cmp	r3, #0
   24414:	d00e      	beq.n	24434 <__kernel_rem_pio2f+0x4ac>
   24416:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   2441a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
   2441e:	4618      	mov	r0, r3
   24420:	f000 fe74 	bl	2510c <scalbnf>
   24424:	ee07 0a10 	vmov	s14, r0
   24428:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   2442c:	ee77 7ac7 	vsub.f32	s15, s15, s14
   24430:	edc7 7a5a 	vstr	s15, [r7, #360]	; 0x168
   24434:	ed1f 7a3b 	vldr	s14, [pc, #-236]	; 2434c <__kernel_rem_pio2f+0x3c4>
   24438:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   2443c:	eef4 7a47 	vcmp.f32	s15, s14
   24440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24444:	f040 80ae 	bne.w	245a4 <__kernel_rem_pio2f+0x61c>
   24448:	2300      	movs	r3, #0
   2444a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   2444e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24452:	3b01      	subs	r3, #1
   24454:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24458:	e011      	b.n	2447e <__kernel_rem_pio2f+0x4f6>
   2445a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2445e:	009b      	lsls	r3, r3, #2
   24460:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   24464:	4413      	add	r3, r2
   24466:	f853 3c8c 	ldr.w	r3, [r3, #-140]
   2446a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   2446e:	4313      	orrs	r3, r2
   24470:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   24474:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24478:	3b01      	subs	r3, #1
   2447a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   2447e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   24482:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
   24486:	429a      	cmp	r2, r3
   24488:	dae7      	bge.n	2445a <__kernel_rem_pio2f+0x4d2>
   2448a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   2448e:	2b00      	cmp	r3, #0
   24490:	f040 8088 	bne.w	245a4 <__kernel_rem_pio2f+0x61c>
   24494:	2301      	movs	r3, #1
   24496:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   2449a:	e004      	b.n	244a6 <__kernel_rem_pio2f+0x51e>
   2449c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   244a0:	3301      	adds	r3, #1
   244a2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   244a6:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
   244aa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   244ae:	1ad3      	subs	r3, r2, r3
   244b0:	009b      	lsls	r3, r3, #2
   244b2:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   244b6:	4413      	add	r3, r2
   244b8:	f853 3c8c 	ldr.w	r3, [r3, #-140]
   244bc:	2b00      	cmp	r3, #0
   244be:	d0ed      	beq.n	2449c <__kernel_rem_pio2f+0x514>
   244c0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   244c4:	3301      	adds	r3, #1
   244c6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   244ca:	e05a      	b.n	24582 <__kernel_rem_pio2f+0x5fa>
   244cc:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
   244d0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   244d4:	4413      	add	r3, r2
   244d6:	009b      	lsls	r3, r3, #2
   244d8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
   244dc:	4413      	add	r3, r2
   244de:	6819      	ldr	r1, [r3, #0]
   244e0:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
   244e4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   244e8:	4413      	add	r3, r2
   244ea:	ee07 1a90 	vmov	s15, r1
   244ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   244f2:	009b      	lsls	r3, r3, #2
   244f4:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   244f8:	4413      	add	r3, r2
   244fa:	3bdc      	subs	r3, #220	; 0xdc
   244fc:	edc3 7a00 	vstr	s15, [r3]
   24500:	2300      	movs	r3, #0
   24502:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   24506:	f04f 0300 	mov.w	r3, #0
   2450a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   2450e:	e024      	b.n	2455a <__kernel_rem_pio2f+0x5d2>
   24510:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   24514:	009b      	lsls	r3, r3, #2
   24516:	f107 020c 	add.w	r2, r7, #12
   2451a:	6812      	ldr	r2, [r2, #0]
   2451c:	4413      	add	r3, r2
   2451e:	ed93 7a00 	vldr	s14, [r3]
   24522:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
   24526:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2452a:	441a      	add	r2, r3
   2452c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   24530:	1ad3      	subs	r3, r2, r3
   24532:	009b      	lsls	r3, r3, #2
   24534:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   24538:	4413      	add	r3, r2
   2453a:	3bdc      	subs	r3, #220	; 0xdc
   2453c:	edd3 7a00 	vldr	s15, [r3]
   24540:	ee67 7a27 	vmul.f32	s15, s14, s15
   24544:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   24548:	ee77 7a27 	vadd.f32	s15, s14, s15
   2454c:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   24550:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
   24554:	3301      	adds	r3, #1
   24556:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
   2455a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
   2455e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
   24562:	429a      	cmp	r2, r3
   24564:	ddd4      	ble.n	24510 <__kernel_rem_pio2f+0x588>
   24566:	f107 0214 	add.w	r2, r7, #20
   2456a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2456e:	009b      	lsls	r3, r3, #2
   24570:	4413      	add	r3, r2
   24572:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   24576:	601a      	str	r2, [r3, #0]
   24578:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2457c:	3301      	adds	r3, #1
   2457e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24582:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
   24586:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   2458a:	4413      	add	r3, r2
   2458c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   24590:	429a      	cmp	r2, r3
   24592:	dd9b      	ble.n	244cc <__kernel_rem_pio2f+0x544>
   24594:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
   24598:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   2459c:	4413      	add	r3, r2
   2459e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   245a2:	e5b3      	b.n	2410c <__kernel_rem_pio2f+0x184>
   245a4:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   245a8:	eef5 7a40 	vcmp.f32	s15, #0.0
   245ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   245b0:	d11f      	bne.n	245f2 <__kernel_rem_pio2f+0x66a>
   245b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   245b6:	3b01      	subs	r3, #1
   245b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   245bc:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   245c0:	3b08      	subs	r3, #8
   245c2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   245c6:	e009      	b.n	245dc <__kernel_rem_pio2f+0x654>
   245c8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   245cc:	3b01      	subs	r3, #1
   245ce:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   245d2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   245d6:	3b08      	subs	r3, #8
   245d8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   245dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   245e0:	009b      	lsls	r3, r3, #2
   245e2:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   245e6:	4413      	add	r3, r2
   245e8:	f853 3c8c 	ldr.w	r3, [r3, #-140]
   245ec:	2b00      	cmp	r3, #0
   245ee:	d0eb      	beq.n	245c8 <__kernel_rem_pio2f+0x640>
   245f0:	e05b      	b.n	246aa <__kernel_rem_pio2f+0x722>
   245f2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   245f6:	425b      	negs	r3, r3
   245f8:	4619      	mov	r1, r3
   245fa:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
   245fe:	f000 fd85 	bl	2510c <scalbnf>
   24602:	f8c7 0168 	str.w	r0, [r7, #360]	; 0x168
   24606:	ed1f 7aae 	vldr	s14, [pc, #-696]	; 24350 <__kernel_rem_pio2f+0x3c8>
   2460a:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   2460e:	eef4 7ac7 	vcmpe.f32	s15, s14
   24612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24616:	db3a      	blt.n	2468e <__kernel_rem_pio2f+0x706>
   24618:	ed1f 7ab2 	vldr	s14, [pc, #-712]	; 24354 <__kernel_rem_pio2f+0x3cc>
   2461c:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   24620:	ee67 7a27 	vmul.f32	s15, s14, s15
   24624:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   24628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2462c:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   24630:	ed1f 7ab9 	vldr	s14, [pc, #-740]	; 24350 <__kernel_rem_pio2f+0x3c8>
   24634:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   24638:	ee67 7a27 	vmul.f32	s15, s14, s15
   2463c:	ed97 7a5a 	vldr	s14, [r7, #360]	; 0x168
   24640:	ee77 7a67 	vsub.f32	s15, s14, s15
   24644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   24648:	ee17 2a90 	vmov	r2, s15
   2464c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24650:	009b      	lsls	r3, r3, #2
   24652:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   24656:	440b      	add	r3, r1
   24658:	f843 2c8c 	str.w	r2, [r3, #-140]
   2465c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24660:	3301      	adds	r3, #1
   24662:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   24666:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
   2466a:	3308      	adds	r3, #8
   2466c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
   24670:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   24674:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   24678:	ee17 2a90 	vmov	r2, s15
   2467c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24680:	009b      	lsls	r3, r3, #2
   24682:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   24686:	440b      	add	r3, r1
   24688:	f843 2c8c 	str.w	r2, [r3, #-140]
   2468c:	e00d      	b.n	246aa <__kernel_rem_pio2f+0x722>
   2468e:	edd7 7a5a 	vldr	s15, [r7, #360]	; 0x168
   24692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   24696:	ee17 2a90 	vmov	r2, s15
   2469a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   2469e:	009b      	lsls	r3, r3, #2
   246a0:	f507 71c8 	add.w	r1, r7, #400	; 0x190
   246a4:	440b      	add	r3, r1
   246a6:	f843 2c8c 	str.w	r2, [r3, #-140]
   246aa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   246ae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
   246b2:	4618      	mov	r0, r3
   246b4:	f000 fd2a 	bl	2510c <scalbnf>
   246b8:	f8c7 0164 	str.w	r0, [r7, #356]	; 0x164
   246bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   246c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   246c4:	e024      	b.n	24710 <__kernel_rem_pio2f+0x788>
   246c6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   246ca:	009b      	lsls	r3, r3, #2
   246cc:	f507 72c8 	add.w	r2, r7, #400	; 0x190
   246d0:	4413      	add	r3, r2
   246d2:	f853 3c8c 	ldr.w	r3, [r3, #-140]
   246d6:	ee07 3a90 	vmov	s15, r3
   246da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   246de:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   246e2:	ee67 7a27 	vmul.f32	s15, s14, s15
   246e6:	f107 0214 	add.w	r2, r7, #20
   246ea:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   246ee:	009b      	lsls	r3, r3, #2
   246f0:	4413      	add	r3, r2
   246f2:	edc3 7a00 	vstr	s15, [r3]
   246f6:	ed1f 7ae9 	vldr	s14, [pc, #-932]	; 24354 <__kernel_rem_pio2f+0x3cc>
   246fa:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   246fe:	ee67 7a87 	vmul.f32	s15, s15, s14
   24702:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   24706:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2470a:	3b01      	subs	r3, #1
   2470c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24710:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24714:	2b00      	cmp	r3, #0
   24716:	dad6      	bge.n	246c6 <__kernel_rem_pio2f+0x73e>
   24718:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   2471c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24720:	e046      	b.n	247b0 <__kernel_rem_pio2f+0x828>
   24722:	f04f 0300 	mov.w	r3, #0
   24726:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   2472a:	2300      	movs	r3, #0
   2472c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   24730:	e01e      	b.n	24770 <__kernel_rem_pio2f+0x7e8>
   24732:	4ae5      	ldr	r2, [pc, #916]	; (24ac8 <__kernel_rem_pio2f+0xb40>)
   24734:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   24738:	009b      	lsls	r3, r3, #2
   2473a:	4413      	add	r3, r2
   2473c:	ed93 7a00 	vldr	s14, [r3]
   24740:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   24744:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   24748:	4413      	add	r3, r2
   2474a:	f107 0214 	add.w	r2, r7, #20
   2474e:	009b      	lsls	r3, r3, #2
   24750:	4413      	add	r3, r2
   24752:	edd3 7a00 	vldr	s15, [r3]
   24756:	ee67 7a27 	vmul.f32	s15, s14, s15
   2475a:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   2475e:	ee77 7a27 	vadd.f32	s15, s14, s15
   24762:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   24766:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
   2476a:	3301      	adds	r3, #1
   2476c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   24770:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
   24774:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
   24778:	429a      	cmp	r2, r3
   2477a:	dc08      	bgt.n	2478e <__kernel_rem_pio2f+0x806>
   2477c:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
   24780:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24784:	1ad3      	subs	r3, r2, r3
   24786:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
   2478a:	429a      	cmp	r2, r3
   2478c:	ddd1      	ble.n	24732 <__kernel_rem_pio2f+0x7aa>
   2478e:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
   24792:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24796:	1ad3      	subs	r3, r2, r3
   24798:	f107 0264 	add.w	r2, r7, #100	; 0x64
   2479c:	009b      	lsls	r3, r3, #2
   2479e:	4413      	add	r3, r2
   247a0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   247a4:	601a      	str	r2, [r3, #0]
   247a6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   247aa:	3b01      	subs	r3, #1
   247ac:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   247b0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   247b4:	2b00      	cmp	r3, #0
   247b6:	dab4      	bge.n	24722 <__kernel_rem_pio2f+0x79a>
   247b8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
   247bc:	2b03      	cmp	r3, #3
   247be:	f000 80af 	beq.w	24920 <__kernel_rem_pio2f+0x998>
   247c2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
   247c6:	2b03      	cmp	r3, #3
   247c8:	f300 81a1 	bgt.w	24b0e <__kernel_rem_pio2f+0xb86>
   247cc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
   247d0:	2b00      	cmp	r3, #0
   247d2:	d00b      	beq.n	247ec <__kernel_rem_pio2f+0x864>
   247d4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
   247d8:	2b00      	cmp	r3, #0
   247da:	f2c0 8198 	blt.w	24b0e <__kernel_rem_pio2f+0xb86>
   247de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
   247e2:	3b01      	subs	r3, #1
   247e4:	2b01      	cmp	r3, #1
   247e6:	f200 8192 	bhi.w	24b0e <__kernel_rem_pio2f+0xb86>
   247ea:	e030      	b.n	2484e <__kernel_rem_pio2f+0x8c6>
   247ec:	f04f 0300 	mov.w	r3, #0
   247f0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   247f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   247f8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   247fc:	e012      	b.n	24824 <__kernel_rem_pio2f+0x89c>
   247fe:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24802:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24806:	009b      	lsls	r3, r3, #2
   24808:	4413      	add	r3, r2
   2480a:	edd3 7a00 	vldr	s15, [r3]
   2480e:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   24812:	ee77 7a27 	vadd.f32	s15, s14, s15
   24816:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   2481a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2481e:	3b01      	subs	r3, #1
   24820:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24824:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24828:	2b00      	cmp	r3, #0
   2482a:	dae8      	bge.n	247fe <__kernel_rem_pio2f+0x876>
   2482c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   24830:	2b00      	cmp	r3, #0
   24832:	d004      	beq.n	2483e <__kernel_rem_pio2f+0x8b6>
   24834:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   24838:	eef1 7a67 	vneg.f32	s15, s15
   2483c:	e001      	b.n	24842 <__kernel_rem_pio2f+0x8ba>
   2483e:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   24842:	f107 0308 	add.w	r3, r7, #8
   24846:	681b      	ldr	r3, [r3, #0]
   24848:	edc3 7a00 	vstr	s15, [r3]
   2484c:	e15f      	b.n	24b0e <__kernel_rem_pio2f+0xb86>
   2484e:	f04f 0300 	mov.w	r3, #0
   24852:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   24856:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   2485a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   2485e:	e012      	b.n	24886 <__kernel_rem_pio2f+0x8fe>
   24860:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24864:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24868:	009b      	lsls	r3, r3, #2
   2486a:	4413      	add	r3, r2
   2486c:	edd3 7a00 	vldr	s15, [r3]
   24870:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   24874:	ee77 7a27 	vadd.f32	s15, s14, s15
   24878:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   2487c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24880:	3b01      	subs	r3, #1
   24882:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24886:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2488a:	2b00      	cmp	r3, #0
   2488c:	dae8      	bge.n	24860 <__kernel_rem_pio2f+0x8d8>
   2488e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   24892:	2b00      	cmp	r3, #0
   24894:	d004      	beq.n	248a0 <__kernel_rem_pio2f+0x918>
   24896:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   2489a:	eef1 7a67 	vneg.f32	s15, s15
   2489e:	e001      	b.n	248a4 <__kernel_rem_pio2f+0x91c>
   248a0:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   248a4:	f107 0308 	add.w	r3, r7, #8
   248a8:	681b      	ldr	r3, [r3, #0]
   248aa:	edc3 7a00 	vstr	s15, [r3]
   248ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
   248b2:	ed93 7a00 	vldr	s14, [r3]
   248b6:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   248ba:	ee77 7a67 	vsub.f32	s15, s14, s15
   248be:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   248c2:	2301      	movs	r3, #1
   248c4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   248c8:	e012      	b.n	248f0 <__kernel_rem_pio2f+0x968>
   248ca:	f107 0264 	add.w	r2, r7, #100	; 0x64
   248ce:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   248d2:	009b      	lsls	r3, r3, #2
   248d4:	4413      	add	r3, r2
   248d6:	edd3 7a00 	vldr	s15, [r3]
   248da:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   248de:	ee77 7a27 	vadd.f32	s15, s14, s15
   248e2:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   248e6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   248ea:	3301      	adds	r3, #1
   248ec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   248f0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
   248f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   248f8:	429a      	cmp	r2, r3
   248fa:	dde6      	ble.n	248ca <__kernel_rem_pio2f+0x942>
   248fc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   24900:	2b00      	cmp	r3, #0
   24902:	d004      	beq.n	2490e <__kernel_rem_pio2f+0x986>
   24904:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   24908:	eef1 7a67 	vneg.f32	s15, s15
   2490c:	e001      	b.n	24912 <__kernel_rem_pio2f+0x98a>
   2490e:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   24912:	f107 0308 	add.w	r3, r7, #8
   24916:	681b      	ldr	r3, [r3, #0]
   24918:	3304      	adds	r3, #4
   2491a:	edc3 7a00 	vstr	s15, [r3]
   2491e:	e0f6      	b.n	24b0e <__kernel_rem_pio2f+0xb86>
   24920:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24924:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24928:	e042      	b.n	249b0 <__kernel_rem_pio2f+0xa28>
   2492a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2492e:	3b01      	subs	r3, #1
   24930:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24934:	009b      	lsls	r3, r3, #2
   24936:	4413      	add	r3, r2
   24938:	ed93 7a00 	vldr	s14, [r3]
   2493c:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24940:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24944:	009b      	lsls	r3, r3, #2
   24946:	4413      	add	r3, r2
   24948:	edd3 7a00 	vldr	s15, [r3]
   2494c:	ee77 7a27 	vadd.f32	s15, s14, s15
   24950:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   24954:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24958:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2495c:	009b      	lsls	r3, r3, #2
   2495e:	4413      	add	r3, r2
   24960:	ed93 7a00 	vldr	s14, [r3]
   24964:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24968:	3b01      	subs	r3, #1
   2496a:	f107 0264 	add.w	r2, r7, #100	; 0x64
   2496e:	009b      	lsls	r3, r3, #2
   24970:	4413      	add	r3, r2
   24972:	edd3 6a00 	vldr	s13, [r3]
   24976:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   2497a:	ee76 7ae7 	vsub.f32	s15, s13, s15
   2497e:	ee77 7a27 	vadd.f32	s15, s14, s15
   24982:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24986:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   2498a:	009b      	lsls	r3, r3, #2
   2498c:	4413      	add	r3, r2
   2498e:	edc3 7a00 	vstr	s15, [r3]
   24992:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24996:	3b01      	subs	r3, #1
   24998:	f107 0264 	add.w	r2, r7, #100	; 0x64
   2499c:	009b      	lsls	r3, r3, #2
   2499e:	4413      	add	r3, r2
   249a0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   249a4:	601a      	str	r2, [r3, #0]
   249a6:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   249aa:	3b01      	subs	r3, #1
   249ac:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   249b0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   249b4:	2b00      	cmp	r3, #0
   249b6:	dcb8      	bgt.n	2492a <__kernel_rem_pio2f+0x9a2>
   249b8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   249bc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   249c0:	e042      	b.n	24a48 <__kernel_rem_pio2f+0xac0>
   249c2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   249c6:	3b01      	subs	r3, #1
   249c8:	f107 0264 	add.w	r2, r7, #100	; 0x64
   249cc:	009b      	lsls	r3, r3, #2
   249ce:	4413      	add	r3, r2
   249d0:	ed93 7a00 	vldr	s14, [r3]
   249d4:	f107 0264 	add.w	r2, r7, #100	; 0x64
   249d8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   249dc:	009b      	lsls	r3, r3, #2
   249de:	4413      	add	r3, r2
   249e0:	edd3 7a00 	vldr	s15, [r3]
   249e4:	ee77 7a27 	vadd.f32	s15, s14, s15
   249e8:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   249ec:	f107 0264 	add.w	r2, r7, #100	; 0x64
   249f0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   249f4:	009b      	lsls	r3, r3, #2
   249f6:	4413      	add	r3, r2
   249f8:	ed93 7a00 	vldr	s14, [r3]
   249fc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24a00:	3b01      	subs	r3, #1
   24a02:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24a06:	009b      	lsls	r3, r3, #2
   24a08:	4413      	add	r3, r2
   24a0a:	edd3 6a00 	vldr	s13, [r3]
   24a0e:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   24a12:	ee76 7ae7 	vsub.f32	s15, s13, s15
   24a16:	ee77 7a27 	vadd.f32	s15, s14, s15
   24a1a:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24a1e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24a22:	009b      	lsls	r3, r3, #2
   24a24:	4413      	add	r3, r2
   24a26:	edc3 7a00 	vstr	s15, [r3]
   24a2a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24a2e:	3b01      	subs	r3, #1
   24a30:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24a34:	009b      	lsls	r3, r3, #2
   24a36:	4413      	add	r3, r2
   24a38:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   24a3c:	601a      	str	r2, [r3, #0]
   24a3e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24a42:	3b01      	subs	r3, #1
   24a44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24a48:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24a4c:	2b01      	cmp	r3, #1
   24a4e:	dcb8      	bgt.n	249c2 <__kernel_rem_pio2f+0xa3a>
   24a50:	f04f 0300 	mov.w	r3, #0
   24a54:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   24a58:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
   24a5c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24a60:	e012      	b.n	24a88 <__kernel_rem_pio2f+0xb00>
   24a62:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24a66:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24a6a:	009b      	lsls	r3, r3, #2
   24a6c:	4413      	add	r3, r2
   24a6e:	edd3 7a00 	vldr	s15, [r3]
   24a72:	ed97 7a59 	vldr	s14, [r7, #356]	; 0x164
   24a76:	ee77 7a27 	vadd.f32	s15, s14, s15
   24a7a:	edc7 7a59 	vstr	s15, [r7, #356]	; 0x164
   24a7e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24a82:	3b01      	subs	r3, #1
   24a84:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
   24a88:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
   24a8c:	2b01      	cmp	r3, #1
   24a8e:	dce8      	bgt.n	24a62 <__kernel_rem_pio2f+0xada>
   24a90:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
   24a94:	2b00      	cmp	r3, #0
   24a96:	d119      	bne.n	24acc <__kernel_rem_pio2f+0xb44>
   24a98:	f107 0364 	add.w	r3, r7, #100	; 0x64
   24a9c:	681a      	ldr	r2, [r3, #0]
   24a9e:	f107 0308 	add.w	r3, r7, #8
   24aa2:	681b      	ldr	r3, [r3, #0]
   24aa4:	601a      	str	r2, [r3, #0]
   24aa6:	f107 0308 	add.w	r3, r7, #8
   24aaa:	681b      	ldr	r3, [r3, #0]
   24aac:	3304      	adds	r3, #4
   24aae:	f107 0264 	add.w	r2, r7, #100	; 0x64
   24ab2:	6852      	ldr	r2, [r2, #4]
   24ab4:	601a      	str	r2, [r3, #0]
   24ab6:	f107 0308 	add.w	r3, r7, #8
   24aba:	681b      	ldr	r3, [r3, #0]
   24abc:	3308      	adds	r3, #8
   24abe:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
   24ac2:	601a      	str	r2, [r3, #0]
   24ac4:	e023      	b.n	24b0e <__kernel_rem_pio2f+0xb86>
   24ac6:	bf00      	nop
   24ac8:	00033720 	.word	0x00033720
   24acc:	f107 0364 	add.w	r3, r7, #100	; 0x64
   24ad0:	edd3 7a00 	vldr	s15, [r3]
   24ad4:	eef1 7a67 	vneg.f32	s15, s15
   24ad8:	f107 0308 	add.w	r3, r7, #8
   24adc:	681b      	ldr	r3, [r3, #0]
   24ade:	edc3 7a00 	vstr	s15, [r3]
   24ae2:	f107 0364 	add.w	r3, r7, #100	; 0x64
   24ae6:	edd3 7a01 	vldr	s15, [r3, #4]
   24aea:	f107 0308 	add.w	r3, r7, #8
   24aee:	681b      	ldr	r3, [r3, #0]
   24af0:	3304      	adds	r3, #4
   24af2:	eef1 7a67 	vneg.f32	s15, s15
   24af6:	edc3 7a00 	vstr	s15, [r3]
   24afa:	f107 0308 	add.w	r3, r7, #8
   24afe:	681b      	ldr	r3, [r3, #0]
   24b00:	3308      	adds	r3, #8
   24b02:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
   24b06:	eef1 7a67 	vneg.f32	s15, s15
   24b0a:	edc3 7a00 	vstr	s15, [r3]
   24b0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
   24b12:	f003 0307 	and.w	r3, r3, #7
   24b16:	4618      	mov	r0, r3
   24b18:	f507 77ca 	add.w	r7, r7, #404	; 0x194
   24b1c:	46bd      	mov	sp, r7
   24b1e:	bd90      	pop	{r4, r7, pc}

00024b20 <__kernel_sinf>:
   24b20:	b480      	push	{r7}
   24b22:	b08b      	sub	sp, #44	; 0x2c
   24b24:	af00      	add	r7, sp, #0
   24b26:	60f8      	str	r0, [r7, #12]
   24b28:	60b9      	str	r1, [r7, #8]
   24b2a:	607a      	str	r2, [r7, #4]
   24b2c:	68fb      	ldr	r3, [r7, #12]
   24b2e:	617b      	str	r3, [r7, #20]
   24b30:	697b      	ldr	r3, [r7, #20]
   24b32:	627b      	str	r3, [r7, #36]	; 0x24
   24b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24b36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   24b3a:	627b      	str	r3, [r7, #36]	; 0x24
   24b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   24b3e:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
   24b42:	da0a      	bge.n	24b5a <__kernel_sinf+0x3a>
   24b44:	edd7 7a03 	vldr	s15, [r7, #12]
   24b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   24b4c:	ee17 3a90 	vmov	r3, s15
   24b50:	2b00      	cmp	r3, #0
   24b52:	d102      	bne.n	24b5a <__kernel_sinf+0x3a>
   24b54:	edd7 7a03 	vldr	s15, [r7, #12]
   24b58:	e069      	b.n	24c2e <__kernel_sinf+0x10e>
   24b5a:	edd7 7a03 	vldr	s15, [r7, #12]
   24b5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
   24b62:	edc7 7a08 	vstr	s15, [r7, #32]
   24b66:	ed97 7a08 	vldr	s14, [r7, #32]
   24b6a:	edd7 7a03 	vldr	s15, [r7, #12]
   24b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
   24b72:	edc7 7a07 	vstr	s15, [r7, #28]
   24b76:	ed9f 7a32 	vldr	s14, [pc, #200]	; 24c40 <__kernel_sinf+0x120>
   24b7a:	edd7 7a08 	vldr	s15, [r7, #32]
   24b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
   24b82:	ed9f 7a30 	vldr	s14, [pc, #192]	; 24c44 <__kernel_sinf+0x124>
   24b86:	ee37 7a87 	vadd.f32	s14, s15, s14
   24b8a:	edd7 7a08 	vldr	s15, [r7, #32]
   24b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
   24b92:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 24c48 <__kernel_sinf+0x128>
   24b96:	ee37 7a87 	vadd.f32	s14, s15, s14
   24b9a:	edd7 7a08 	vldr	s15, [r7, #32]
   24b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
   24ba2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 24c4c <__kernel_sinf+0x12c>
   24ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
   24baa:	edd7 7a08 	vldr	s15, [r7, #32]
   24bae:	ee67 7a27 	vmul.f32	s15, s14, s15
   24bb2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 24c50 <__kernel_sinf+0x130>
   24bb6:	ee77 7a87 	vadd.f32	s15, s15, s14
   24bba:	edc7 7a06 	vstr	s15, [r7, #24]
   24bbe:	687b      	ldr	r3, [r7, #4]
   24bc0:	2b00      	cmp	r3, #0
   24bc2:	d112      	bne.n	24bea <__kernel_sinf+0xca>
   24bc4:	ed97 7a08 	vldr	s14, [r7, #32]
   24bc8:	edd7 7a06 	vldr	s15, [r7, #24]
   24bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
   24bd0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 24c54 <__kernel_sinf+0x134>
   24bd4:	ee37 7a87 	vadd.f32	s14, s15, s14
   24bd8:	edd7 7a07 	vldr	s15, [r7, #28]
   24bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
   24be0:	edd7 7a03 	vldr	s15, [r7, #12]
   24be4:	ee77 7a27 	vadd.f32	s15, s14, s15
   24be8:	e021      	b.n	24c2e <__kernel_sinf+0x10e>
   24bea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24bee:	edd7 7a02 	vldr	s15, [r7, #8]
   24bf2:	ee27 7a27 	vmul.f32	s14, s14, s15
   24bf6:	edd7 6a07 	vldr	s13, [r7, #28]
   24bfa:	edd7 7a06 	vldr	s15, [r7, #24]
   24bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
   24c02:	ee37 7a67 	vsub.f32	s14, s14, s15
   24c06:	edd7 7a08 	vldr	s15, [r7, #32]
   24c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
   24c0e:	edd7 7a02 	vldr	s15, [r7, #8]
   24c12:	ee37 7a67 	vsub.f32	s14, s14, s15
   24c16:	eddf 6a0f 	vldr	s13, [pc, #60]	; 24c54 <__kernel_sinf+0x134>
   24c1a:	edd7 7a07 	vldr	s15, [r7, #28]
   24c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
   24c22:	ee77 7a67 	vsub.f32	s15, s14, s15
   24c26:	ed97 7a03 	vldr	s14, [r7, #12]
   24c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
   24c2e:	ee17 3a90 	vmov	r3, s15
   24c32:	4618      	mov	r0, r3
   24c34:	372c      	adds	r7, #44	; 0x2c
   24c36:	46bd      	mov	sp, r7
   24c38:	f85d 7b04 	ldr.w	r7, [sp], #4
   24c3c:	4770      	bx	lr
   24c3e:	bf00      	nop
   24c40:	2f2ec9d3 	.word	0x2f2ec9d3
   24c44:	b2d72f34 	.word	0xb2d72f34
   24c48:	3638ef1b 	.word	0x3638ef1b
   24c4c:	b9500d01 	.word	0xb9500d01
   24c50:	3c088889 	.word	0x3c088889
   24c54:	be2aaaab 	.word	0xbe2aaaab

00024c58 <nan>:
   24c58:	b480      	push	{r7}
   24c5a:	b085      	sub	sp, #20
   24c5c:	af00      	add	r7, sp, #0
   24c5e:	6078      	str	r0, [r7, #4]
   24c60:	f04f 0200 	mov.w	r2, #0
   24c64:	4b05      	ldr	r3, [pc, #20]	; (24c7c <nan+0x24>)
   24c66:	e9c7 2302 	strd	r2, r3, [r7, #8]
   24c6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   24c6e:	4610      	mov	r0, r2
   24c70:	4619      	mov	r1, r3
   24c72:	3714      	adds	r7, #20
   24c74:	46bd      	mov	sp, r7
   24c76:	f85d 7b04 	ldr.w	r7, [sp], #4
   24c7a:	4770      	bx	lr
   24c7c:	7ff80000 	.word	0x7ff80000

00024c80 <expm1f>:
   24c80:	b480      	push	{r7}
   24c82:	b09b      	sub	sp, #108	; 0x6c
   24c84:	af00      	add	r7, sp, #0
   24c86:	6078      	str	r0, [r7, #4]
   24c88:	687b      	ldr	r3, [r7, #4]
   24c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   24c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   24c8e:	653b      	str	r3, [r7, #80]	; 0x50
   24c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24c92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   24c96:	64fb      	str	r3, [r7, #76]	; 0x4c
   24c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24c9a:	2b00      	cmp	r3, #0
   24c9c:	d102      	bne.n	24ca4 <expm1f+0x24>
   24c9e:	687b      	ldr	r3, [r7, #4]
   24ca0:	667b      	str	r3, [r7, #100]	; 0x64
   24ca2:	e005      	b.n	24cb0 <expm1f+0x30>
   24ca4:	edd7 7a01 	vldr	s15, [r7, #4]
   24ca8:	eef1 7a67 	vneg.f32	s15, s15
   24cac:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
   24cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24cb2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   24cb6:	653b      	str	r3, [r7, #80]	; 0x50
   24cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24cba:	4ad9      	ldr	r2, [pc, #868]	; (25020 <expm1f+0x3a0>)
   24cbc:	4293      	cmp	r3, r2
   24cbe:	d938      	bls.n	24d32 <expm1f+0xb2>
   24cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24cc2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   24cc6:	d904      	bls.n	24cd2 <expm1f+0x52>
   24cc8:	edd7 7a01 	vldr	s15, [r7, #4]
   24ccc:	ee77 7aa7 	vadd.f32	s15, s15, s15
   24cd0:	e214      	b.n	250fc <expm1f+0x47c>
   24cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24cd4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   24cd8:	d108      	bne.n	24cec <expm1f+0x6c>
   24cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24cdc:	2b00      	cmp	r3, #0
   24cde:	d102      	bne.n	24ce6 <expm1f+0x66>
   24ce0:	edd7 7a01 	vldr	s15, [r7, #4]
   24ce4:	e20a      	b.n	250fc <expm1f+0x47c>
   24ce6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   24cea:	e207      	b.n	250fc <expm1f+0x47c>
   24cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24cee:	2b00      	cmp	r3, #0
   24cf0:	d10a      	bne.n	24d08 <expm1f+0x88>
   24cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24cf4:	4acb      	ldr	r2, [pc, #812]	; (25024 <expm1f+0x3a4>)
   24cf6:	4293      	cmp	r3, r2
   24cf8:	d906      	bls.n	24d08 <expm1f+0x88>
   24cfa:	ed9f 7acb 	vldr	s14, [pc, #812]	; 25028 <expm1f+0x3a8>
   24cfe:	eddf 7aca 	vldr	s15, [pc, #808]	; 25028 <expm1f+0x3a8>
   24d02:	ee67 7a27 	vmul.f32	s15, s14, s15
   24d06:	e1f9      	b.n	250fc <expm1f+0x47c>
   24d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24d0a:	2b00      	cmp	r3, #0
   24d0c:	d011      	beq.n	24d32 <expm1f+0xb2>
   24d0e:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 2502c <expm1f+0x3ac>
   24d12:	edd7 7a01 	vldr	s15, [r7, #4]
   24d16:	ee77 7a27 	vadd.f32	s15, s14, s15
   24d1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   24d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24d22:	d506      	bpl.n	24d32 <expm1f+0xb2>
   24d24:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 2502c <expm1f+0x3ac>
   24d28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   24d2c:	ee77 7a67 	vsub.f32	s15, s14, s15
   24d30:	e1e4      	b.n	250fc <expm1f+0x47c>
   24d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24d34:	4abe      	ldr	r2, [pc, #760]	; (25030 <expm1f+0x3b0>)
   24d36:	4293      	cmp	r3, r2
   24d38:	d96a      	bls.n	24e10 <expm1f+0x190>
   24d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24d3c:	4abd      	ldr	r2, [pc, #756]	; (25034 <expm1f+0x3b4>)
   24d3e:	4293      	cmp	r3, r2
   24d40:	d821      	bhi.n	24d86 <expm1f+0x106>
   24d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24d44:	2b00      	cmp	r3, #0
   24d46:	d10c      	bne.n	24d62 <expm1f+0xe2>
   24d48:	ed9f 7abb 	vldr	s14, [pc, #748]	; 25038 <expm1f+0x3b8>
   24d4c:	edd7 7a01 	vldr	s15, [r7, #4]
   24d50:	ee77 7ac7 	vsub.f32	s15, s15, s14
   24d54:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
   24d58:	4bb8      	ldr	r3, [pc, #736]	; (2503c <expm1f+0x3bc>)
   24d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   24d5c:	2301      	movs	r3, #1
   24d5e:	657b      	str	r3, [r7, #84]	; 0x54
   24d60:	e041      	b.n	24de6 <expm1f+0x166>
   24d62:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 25038 <expm1f+0x3b8>
   24d66:	edd7 7a01 	vldr	s15, [r7, #4]
   24d6a:	ee77 7a87 	vadd.f32	s15, s15, s14
   24d6e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
   24d72:	eddf 7ab3 	vldr	s15, [pc, #716]	; 25040 <expm1f+0x3c0>
   24d76:	eef1 7a67 	vneg.f32	s15, s15
   24d7a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
   24d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24d82:	657b      	str	r3, [r7, #84]	; 0x54
   24d84:	e02f      	b.n	24de6 <expm1f+0x166>
   24d86:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 25044 <expm1f+0x3c4>
   24d8a:	edd7 7a01 	vldr	s15, [r7, #4]
   24d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
   24d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   24d94:	2b00      	cmp	r3, #0
   24d96:	d102      	bne.n	24d9e <expm1f+0x11e>
   24d98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24d9c:	e001      	b.n	24da2 <expm1f+0x122>
   24d9e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
   24da2:	ee77 7a27 	vadd.f32	s15, s14, s15
   24da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   24daa:	ee17 3a90 	vmov	r3, s15
   24dae:	657b      	str	r3, [r7, #84]	; 0x54
   24db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   24db2:	ee07 3a90 	vmov	s15, r3
   24db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   24dba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
   24dbe:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 25038 <expm1f+0x3b8>
   24dc2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
   24dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
   24dca:	ed97 7a01 	vldr	s14, [r7, #4]
   24dce:	ee77 7a67 	vsub.f32	s15, s14, s15
   24dd2:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
   24dd6:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 25040 <expm1f+0x3c0>
   24dda:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
   24dde:	ee67 7a87 	vmul.f32	s15, s15, s14
   24de2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
   24de6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
   24dea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
   24dee:	ee77 7a67 	vsub.f32	s15, s14, s15
   24df2:	edc7 7a01 	vstr	s15, [r7, #4]
   24df6:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
   24dfa:	edd7 7a01 	vldr	s15, [r7, #4]
   24dfe:	ee37 7a67 	vsub.f32	s14, s14, s15
   24e02:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
   24e06:	ee77 7a67 	vsub.f32	s15, s14, s15
   24e0a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
   24e0e:	e01c      	b.n	24e4a <expm1f+0x1ca>
   24e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   24e12:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
   24e16:	d216      	bcs.n	24e46 <expm1f+0x1c6>
   24e18:	ed9f 7a83 	vldr	s14, [pc, #524]	; 25028 <expm1f+0x3a8>
   24e1c:	edd7 7a01 	vldr	s15, [r7, #4]
   24e20:	ee77 7a87 	vadd.f32	s15, s15, s14
   24e24:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
   24e28:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 25028 <expm1f+0x3a8>
   24e2c:	edd7 7a01 	vldr	s15, [r7, #4]
   24e30:	ee77 7a27 	vadd.f32	s15, s14, s15
   24e34:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
   24e38:	ee77 7a67 	vsub.f32	s15, s14, s15
   24e3c:	ed97 7a01 	vldr	s14, [r7, #4]
   24e40:	ee77 7a67 	vsub.f32	s15, s14, s15
   24e44:	e15a      	b.n	250fc <expm1f+0x47c>
   24e46:	2300      	movs	r3, #0
   24e48:	657b      	str	r3, [r7, #84]	; 0x54
   24e4a:	edd7 7a01 	vldr	s15, [r7, #4]
   24e4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24e52:	ee67 7a87 	vmul.f32	s15, s15, s14
   24e56:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
   24e5a:	ed97 7a01 	vldr	s14, [r7, #4]
   24e5e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
   24e62:	ee67 7a27 	vmul.f32	s15, s14, s15
   24e66:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
   24e6a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 25048 <expm1f+0x3c8>
   24e6e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   24e72:	ee67 7a27 	vmul.f32	s15, s14, s15
   24e76:	ed9f 7a75 	vldr	s14, [pc, #468]	; 2504c <expm1f+0x3cc>
   24e7a:	ee37 7a87 	vadd.f32	s14, s15, s14
   24e7e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   24e82:	ee67 7a27 	vmul.f32	s15, s14, s15
   24e86:	ed9f 7a72 	vldr	s14, [pc, #456]	; 25050 <expm1f+0x3d0>
   24e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
   24e8e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   24e92:	ee67 7a27 	vmul.f32	s15, s14, s15
   24e96:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 25054 <expm1f+0x3d4>
   24e9a:	ee37 7a87 	vadd.f32	s14, s15, s14
   24e9e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   24ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
   24ea6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 25058 <expm1f+0x3d8>
   24eaa:	ee37 7a87 	vadd.f32	s14, s15, s14
   24eae:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   24eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
   24eb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   24eba:	ee77 7a87 	vadd.f32	s15, s15, s14
   24ebe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
   24ec2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
   24ec6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
   24eca:	ee67 7a27 	vmul.f32	s15, s14, s15
   24ece:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
   24ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
   24ed6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
   24eda:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
   24ede:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
   24ee2:	ee77 6a67 	vsub.f32	s13, s14, s15
   24ee6:	ed97 7a01 	vldr	s14, [r7, #4]
   24eea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
   24eee:	ee67 7a27 	vmul.f32	s15, s14, s15
   24ef2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
   24ef6:	ee37 7a67 	vsub.f32	s14, s14, s15
   24efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
   24efe:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
   24f02:	ee67 7a27 	vmul.f32	s15, s14, s15
   24f06:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
   24f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   24f0c:	2b00      	cmp	r3, #0
   24f0e:	d10e      	bne.n	24f2e <expm1f+0x2ae>
   24f10:	ed97 7a01 	vldr	s14, [r7, #4]
   24f14:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   24f18:	ee27 7a27 	vmul.f32	s14, s14, s15
   24f1c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   24f20:	ee77 7a67 	vsub.f32	s15, s14, s15
   24f24:	ed97 7a01 	vldr	s14, [r7, #4]
   24f28:	ee77 7a67 	vsub.f32	s15, s14, s15
   24f2c:	e0e6      	b.n	250fc <expm1f+0x47c>
   24f2e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   24f32:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
   24f36:	ee37 7a67 	vsub.f32	s14, s14, s15
   24f3a:	edd7 7a01 	vldr	s15, [r7, #4]
   24f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
   24f42:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
   24f46:	ee77 7a67 	vsub.f32	s15, s14, s15
   24f4a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
   24f4e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   24f52:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
   24f56:	ee77 7a67 	vsub.f32	s15, s14, s15
   24f5a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
   24f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   24f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   24f64:	d10e      	bne.n	24f84 <expm1f+0x304>
   24f66:	ed97 7a01 	vldr	s14, [r7, #4]
   24f6a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   24f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
   24f72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24f76:	ee67 7a87 	vmul.f32	s15, s15, s14
   24f7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24f7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   24f82:	e0bb      	b.n	250fc <expm1f+0x47c>
   24f84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   24f86:	2b01      	cmp	r3, #1
   24f88:	d124      	bne.n	24fd4 <expm1f+0x354>
   24f8a:	edd7 7a01 	vldr	s15, [r7, #4]
   24f8e:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
   24f92:	eef4 7ac7 	vcmpe.f32	s15, s14
   24f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24f9a:	d50e      	bpl.n	24fba <expm1f+0x33a>
   24f9c:	edd7 7a01 	vldr	s15, [r7, #4]
   24fa0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
   24fa4:	ee77 7a87 	vadd.f32	s15, s15, s14
   24fa8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   24fac:	ee77 7a67 	vsub.f32	s15, s14, s15
   24fb0:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
   24fb4:	ee67 7a87 	vmul.f32	s15, s15, s14
   24fb8:	e0a0      	b.n	250fc <expm1f+0x47c>
   24fba:	ed97 7a01 	vldr	s14, [r7, #4]
   24fbe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
   24fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
   24fc6:	ee77 7aa7 	vadd.f32	s15, s15, s15
   24fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   24fce:	ee77 7a87 	vadd.f32	s15, s15, s14
   24fd2:	e093      	b.n	250fc <expm1f+0x47c>
   24fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   24fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   24fda:	db02      	blt.n	24fe2 <expm1f+0x362>
   24fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   24fde:	2b38      	cmp	r3, #56	; 0x38
   24fe0:	dd3c      	ble.n	2505c <expm1f+0x3dc>
   24fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
   24fe6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   24fea:	edd7 7a01 	vldr	s15, [r7, #4]
   24fee:	ee77 7a67 	vsub.f32	s15, s14, s15
   24ff2:	ee76 7ae7 	vsub.f32	s15, s13, s15
   24ff6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
   24ffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24ffc:	627b      	str	r3, [r7, #36]	; 0x24
   24ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25000:	62fb      	str	r3, [r7, #44]	; 0x2c
   25002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   25004:	05da      	lsls	r2, r3, #23
   25006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25008:	4413      	add	r3, r2
   2500a:	623b      	str	r3, [r7, #32]
   2500c:	6a3b      	ldr	r3, [r7, #32]
   2500e:	667b      	str	r3, [r7, #100]	; 0x64
   25010:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   25014:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
   25018:	ee77 7ac7 	vsub.f32	s15, s15, s14
   2501c:	e06e      	b.n	250fc <expm1f+0x47c>
   2501e:	bf00      	nop
   25020:	4195b843 	.word	0x4195b843
   25024:	42b17217 	.word	0x42b17217
   25028:	7149f2ca 	.word	0x7149f2ca
   2502c:	0da24260 	.word	0x0da24260
   25030:	3eb17218 	.word	0x3eb17218
   25034:	3f851591 	.word	0x3f851591
   25038:	3f317180 	.word	0x3f317180
   2503c:	3717f7d1 	.word	0x3717f7d1
   25040:	3717f7d1 	.word	0x3717f7d1
   25044:	3fb8aa3b 	.word	0x3fb8aa3b
   25048:	b457edbb 	.word	0xb457edbb
   2504c:	36867e54 	.word	0x36867e54
   25050:	b8a670cd 	.word	0xb8a670cd
   25054:	3ad00d01 	.word	0x3ad00d01
   25058:	bd088889 	.word	0xbd088889
   2505c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
   25060:	64bb      	str	r3, [r7, #72]	; 0x48
   25062:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   25064:	2b16      	cmp	r3, #22
   25066:	dc21      	bgt.n	250ac <expm1f+0x42c>
   25068:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   2506c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2506e:	fa42 f303 	asr.w	r3, r2, r3
   25072:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
   25076:	61fb      	str	r3, [r7, #28]
   25078:	69fb      	ldr	r3, [r7, #28]
   2507a:	64bb      	str	r3, [r7, #72]	; 0x48
   2507c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   25080:	edd7 7a01 	vldr	s15, [r7, #4]
   25084:	ee77 7a67 	vsub.f32	s15, s14, s15
   25088:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
   2508c:	ee77 7a67 	vsub.f32	s15, s14, s15
   25090:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
   25094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   25096:	61bb      	str	r3, [r7, #24]
   25098:	69bb      	ldr	r3, [r7, #24]
   2509a:	633b      	str	r3, [r7, #48]	; 0x30
   2509c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   2509e:	05da      	lsls	r2, r3, #23
   250a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   250a2:	4413      	add	r3, r2
   250a4:	617b      	str	r3, [r7, #20]
   250a6:	697b      	ldr	r3, [r7, #20]
   250a8:	667b      	str	r3, [r7, #100]	; 0x64
   250aa:	e025      	b.n	250f8 <expm1f+0x478>
   250ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   250ae:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
   250b2:	05db      	lsls	r3, r3, #23
   250b4:	613b      	str	r3, [r7, #16]
   250b6:	693b      	ldr	r3, [r7, #16]
   250b8:	64bb      	str	r3, [r7, #72]	; 0x48
   250ba:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
   250be:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
   250c2:	ee77 7a27 	vadd.f32	s15, s14, s15
   250c6:	ed97 7a01 	vldr	s14, [r7, #4]
   250ca:	ee77 7a67 	vsub.f32	s15, s14, s15
   250ce:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
   250d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   250d6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
   250da:	ee77 7a87 	vadd.f32	s15, s15, s14
   250de:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
   250e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   250e4:	60fb      	str	r3, [r7, #12]
   250e6:	68fb      	ldr	r3, [r7, #12]
   250e8:	637b      	str	r3, [r7, #52]	; 0x34
   250ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   250ec:	05da      	lsls	r2, r3, #23
   250ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   250f0:	4413      	add	r3, r2
   250f2:	60bb      	str	r3, [r7, #8]
   250f4:	68bb      	ldr	r3, [r7, #8]
   250f6:	667b      	str	r3, [r7, #100]	; 0x64
   250f8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
   250fc:	ee17 3a90 	vmov	r3, s15
   25100:	4618      	mov	r0, r3
   25102:	376c      	adds	r7, #108	; 0x6c
   25104:	46bd      	mov	sp, r7
   25106:	f85d 7b04 	ldr.w	r7, [sp], #4
   2510a:	4770      	bx	lr

0002510c <scalbnf>:
   2510c:	b580      	push	{r7, lr}
   2510e:	b08a      	sub	sp, #40	; 0x28
   25110:	af00      	add	r7, sp, #0
   25112:	6078      	str	r0, [r7, #4]
   25114:	6039      	str	r1, [r7, #0]
   25116:	687b      	ldr	r3, [r7, #4]
   25118:	61bb      	str	r3, [r7, #24]
   2511a:	69bb      	ldr	r3, [r7, #24]
   2511c:	623b      	str	r3, [r7, #32]
   2511e:	6a3b      	ldr	r3, [r7, #32]
   25120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   25124:	61fb      	str	r3, [r7, #28]
   25126:	69fb      	ldr	r3, [r7, #28]
   25128:	0ddb      	lsrs	r3, r3, #23
   2512a:	627b      	str	r3, [r7, #36]	; 0x24
   2512c:	69fb      	ldr	r3, [r7, #28]
   2512e:	2b00      	cmp	r3, #0
   25130:	d102      	bne.n	25138 <scalbnf+0x2c>
   25132:	edd7 7a01 	vldr	s15, [r7, #4]
   25136:	e07d      	b.n	25234 <scalbnf+0x128>
   25138:	69fb      	ldr	r3, [r7, #28]
   2513a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   2513e:	d304      	bcc.n	2514a <scalbnf+0x3e>
   25140:	edd7 7a01 	vldr	s15, [r7, #4]
   25144:	ee77 7aa7 	vadd.f32	s15, s15, s15
   25148:	e074      	b.n	25234 <scalbnf+0x128>
   2514a:	69fb      	ldr	r3, [r7, #28]
   2514c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   25150:	d21b      	bcs.n	2518a <scalbnf+0x7e>
   25152:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 25240 <scalbnf+0x134>
   25156:	edd7 7a01 	vldr	s15, [r7, #4]
   2515a:	ee67 7a87 	vmul.f32	s15, s15, s14
   2515e:	edc7 7a01 	vstr	s15, [r7, #4]
   25162:	687b      	ldr	r3, [r7, #4]
   25164:	617b      	str	r3, [r7, #20]
   25166:	697b      	ldr	r3, [r7, #20]
   25168:	623b      	str	r3, [r7, #32]
   2516a:	6a3b      	ldr	r3, [r7, #32]
   2516c:	15db      	asrs	r3, r3, #23
   2516e:	b2db      	uxtb	r3, r3
   25170:	3b19      	subs	r3, #25
   25172:	627b      	str	r3, [r7, #36]	; 0x24
   25174:	683b      	ldr	r3, [r7, #0]
   25176:	4a33      	ldr	r2, [pc, #204]	; (25244 <scalbnf+0x138>)
   25178:	4293      	cmp	r3, r2
   2517a:	da06      	bge.n	2518a <scalbnf+0x7e>
   2517c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 25248 <scalbnf+0x13c>
   25180:	edd7 7a01 	vldr	s15, [r7, #4]
   25184:	ee67 7a27 	vmul.f32	s15, s14, s15
   25188:	e054      	b.n	25234 <scalbnf+0x128>
   2518a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2518c:	683b      	ldr	r3, [r7, #0]
   2518e:	4413      	add	r3, r2
   25190:	627b      	str	r3, [r7, #36]	; 0x24
   25192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25194:	2bfe      	cmp	r3, #254	; 0xfe
   25196:	dd0b      	ble.n	251b0 <scalbnf+0xa4>
   25198:	4b2c      	ldr	r3, [pc, #176]	; (2524c <scalbnf+0x140>)
   2519a:	6879      	ldr	r1, [r7, #4]
   2519c:	4618      	mov	r0, r3
   2519e:	f00b fe22 	bl	30de6 <copysignf>
   251a2:	ee07 0a10 	vmov	s14, r0
   251a6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 25250 <scalbnf+0x144>
   251aa:	ee67 7a27 	vmul.f32	s15, s14, s15
   251ae:	e041      	b.n	25234 <scalbnf+0x128>
   251b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   251b2:	2b00      	cmp	r3, #0
   251b4:	dd0b      	ble.n	251ce <scalbnf+0xc2>
   251b6:	6a3b      	ldr	r3, [r7, #32]
   251b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   251bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   251be:	05d2      	lsls	r2, r2, #23
   251c0:	4313      	orrs	r3, r2
   251c2:	613b      	str	r3, [r7, #16]
   251c4:	693b      	ldr	r3, [r7, #16]
   251c6:	607b      	str	r3, [r7, #4]
   251c8:	edd7 7a01 	vldr	s15, [r7, #4]
   251cc:	e032      	b.n	25234 <scalbnf+0x128>
   251ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   251d0:	f113 0f16 	cmn.w	r3, #22
   251d4:	da1c      	bge.n	25210 <scalbnf+0x104>
   251d6:	683b      	ldr	r3, [r7, #0]
   251d8:	f24c 3250 	movw	r2, #50000	; 0xc350
   251dc:	4293      	cmp	r3, r2
   251de:	dd0b      	ble.n	251f8 <scalbnf+0xec>
   251e0:	4b1a      	ldr	r3, [pc, #104]	; (2524c <scalbnf+0x140>)
   251e2:	6879      	ldr	r1, [r7, #4]
   251e4:	4618      	mov	r0, r3
   251e6:	f00b fdfe 	bl	30de6 <copysignf>
   251ea:	ee07 0a10 	vmov	s14, r0
   251ee:	eddf 7a18 	vldr	s15, [pc, #96]	; 25250 <scalbnf+0x144>
   251f2:	ee67 7a27 	vmul.f32	s15, s14, s15
   251f6:	e01d      	b.n	25234 <scalbnf+0x128>
   251f8:	4b16      	ldr	r3, [pc, #88]	; (25254 <scalbnf+0x148>)
   251fa:	6879      	ldr	r1, [r7, #4]
   251fc:	4618      	mov	r0, r3
   251fe:	f00b fdf2 	bl	30de6 <copysignf>
   25202:	ee07 0a10 	vmov	s14, r0
   25206:	eddf 7a10 	vldr	s15, [pc, #64]	; 25248 <scalbnf+0x13c>
   2520a:	ee67 7a27 	vmul.f32	s15, s14, s15
   2520e:	e011      	b.n	25234 <scalbnf+0x128>
   25210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25212:	3319      	adds	r3, #25
   25214:	627b      	str	r3, [r7, #36]	; 0x24
   25216:	6a3b      	ldr	r3, [r7, #32]
   25218:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
   2521c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2521e:	05d2      	lsls	r2, r2, #23
   25220:	4313      	orrs	r3, r2
   25222:	60fb      	str	r3, [r7, #12]
   25224:	68fb      	ldr	r3, [r7, #12]
   25226:	607b      	str	r3, [r7, #4]
   25228:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 25258 <scalbnf+0x14c>
   2522c:	edd7 7a01 	vldr	s15, [r7, #4]
   25230:	ee67 7a27 	vmul.f32	s15, s14, s15
   25234:	ee17 3a90 	vmov	r3, s15
   25238:	4618      	mov	r0, r3
   2523a:	3728      	adds	r7, #40	; 0x28
   2523c:	46bd      	mov	sp, r7
   2523e:	bd80      	pop	{r7, pc}
   25240:	4c000000 	.word	0x4c000000
   25244:	ffff3cb0 	.word	0xffff3cb0
   25248:	0da24260 	.word	0x0da24260
   2524c:	7149f2ca 	.word	0x7149f2ca
   25250:	7149f2ca 	.word	0x7149f2ca
   25254:	0da24260 	.word	0x0da24260
   25258:	33000000 	.word	0x33000000

0002525c <fiprintf>:
   2525c:	b40e      	push	{r1, r2, r3}
   2525e:	b503      	push	{r0, r1, lr}
   25260:	ab03      	add	r3, sp, #12
   25262:	4601      	mov	r1, r0
   25264:	4805      	ldr	r0, [pc, #20]	; (2527c <fiprintf+0x20>)
   25266:	f853 2b04 	ldr.w	r2, [r3], #4
   2526a:	6800      	ldr	r0, [r0, #0]
   2526c:	9301      	str	r3, [sp, #4]
   2526e:	f000 fa71 	bl	25754 <_vfiprintf_r>
   25272:	b002      	add	sp, #8
   25274:	f85d eb04 	ldr.w	lr, [sp], #4
   25278:	b003      	add	sp, #12
   2527a:	4770      	bx	lr
   2527c:	20020058 	.word	0x20020058

00025280 <_fputc_r>:
   25280:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25282:	4614      	mov	r4, r2
   25284:	4605      	mov	r5, r0
   25286:	b128      	cbz	r0, 25294 <_fputc_r+0x14>
   25288:	6983      	ldr	r3, [r0, #24]
   2528a:	b91b      	cbnz	r3, 25294 <_fputc_r+0x14>
   2528c:	9101      	str	r1, [sp, #4]
   2528e:	f000 fec7 	bl	26020 <__sinit>
   25292:	9901      	ldr	r1, [sp, #4]
   25294:	4b0a      	ldr	r3, [pc, #40]	; (252c0 <_fputc_r+0x40>)
   25296:	429c      	cmp	r4, r3
   25298:	d107      	bne.n	252aa <_fputc_r+0x2a>
   2529a:	686c      	ldr	r4, [r5, #4]
   2529c:	4622      	mov	r2, r4
   2529e:	4628      	mov	r0, r5
   252a0:	b003      	add	sp, #12
   252a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   252a6:	f000 bc91 	b.w	25bcc <_putc_r>
   252aa:	4b06      	ldr	r3, [pc, #24]	; (252c4 <_fputc_r+0x44>)
   252ac:	429c      	cmp	r4, r3
   252ae:	d101      	bne.n	252b4 <_fputc_r+0x34>
   252b0:	68ac      	ldr	r4, [r5, #8]
   252b2:	e7f3      	b.n	2529c <_fputc_r+0x1c>
   252b4:	4b04      	ldr	r3, [pc, #16]	; (252c8 <_fputc_r+0x48>)
   252b6:	429c      	cmp	r4, r3
   252b8:	bf08      	it	eq
   252ba:	68ec      	ldreq	r4, [r5, #12]
   252bc:	e7ee      	b.n	2529c <_fputc_r+0x1c>
   252be:	bf00      	nop
   252c0:	00033770 	.word	0x00033770
   252c4:	00033790 	.word	0x00033790
   252c8:	00033750 	.word	0x00033750

000252cc <fputc>:
   252cc:	4b02      	ldr	r3, [pc, #8]	; (252d8 <fputc+0xc>)
   252ce:	460a      	mov	r2, r1
   252d0:	4601      	mov	r1, r0
   252d2:	6818      	ldr	r0, [r3, #0]
   252d4:	f7ff bfd4 	b.w	25280 <_fputc_r>
   252d8:	20020058 	.word	0x20020058

000252dc <_fputs_r>:
   252dc:	b530      	push	{r4, r5, lr}
   252de:	b087      	sub	sp, #28
   252e0:	4604      	mov	r4, r0
   252e2:	4608      	mov	r0, r1
   252e4:	4615      	mov	r5, r2
   252e6:	9101      	str	r1, [sp, #4]
   252e8:	f7ec fc16 	bl	11b18 <strlen>
   252ec:	ab01      	add	r3, sp, #4
   252ee:	9005      	str	r0, [sp, #20]
   252f0:	9002      	str	r0, [sp, #8]
   252f2:	9303      	str	r3, [sp, #12]
   252f4:	2301      	movs	r3, #1
   252f6:	9304      	str	r3, [sp, #16]
   252f8:	b124      	cbz	r4, 25304 <_fputs_r+0x28>
   252fa:	69a3      	ldr	r3, [r4, #24]
   252fc:	b913      	cbnz	r3, 25304 <_fputs_r+0x28>
   252fe:	4620      	mov	r0, r4
   25300:	f000 fe8e 	bl	26020 <__sinit>
   25304:	4b0a      	ldr	r3, [pc, #40]	; (25330 <_fputs_r+0x54>)
   25306:	429d      	cmp	r5, r3
   25308:	d107      	bne.n	2531a <_fputs_r+0x3e>
   2530a:	6865      	ldr	r5, [r4, #4]
   2530c:	aa03      	add	r2, sp, #12
   2530e:	4629      	mov	r1, r5
   25310:	4620      	mov	r0, r4
   25312:	f000 f81b 	bl	2534c <__sfvwrite_r>
   25316:	b007      	add	sp, #28
   25318:	bd30      	pop	{r4, r5, pc}
   2531a:	4b06      	ldr	r3, [pc, #24]	; (25334 <_fputs_r+0x58>)
   2531c:	429d      	cmp	r5, r3
   2531e:	d101      	bne.n	25324 <_fputs_r+0x48>
   25320:	68a5      	ldr	r5, [r4, #8]
   25322:	e7f3      	b.n	2530c <_fputs_r+0x30>
   25324:	4b04      	ldr	r3, [pc, #16]	; (25338 <_fputs_r+0x5c>)
   25326:	429d      	cmp	r5, r3
   25328:	bf08      	it	eq
   2532a:	68e5      	ldreq	r5, [r4, #12]
   2532c:	e7ee      	b.n	2530c <_fputs_r+0x30>
   2532e:	bf00      	nop
   25330:	00033770 	.word	0x00033770
   25334:	00033790 	.word	0x00033790
   25338:	00033750 	.word	0x00033750

0002533c <fputs>:
   2533c:	4b02      	ldr	r3, [pc, #8]	; (25348 <fputs+0xc>)
   2533e:	460a      	mov	r2, r1
   25340:	4601      	mov	r1, r0
   25342:	6818      	ldr	r0, [r3, #0]
   25344:	f7ff bfca 	b.w	252dc <_fputs_r>
   25348:	20020058 	.word	0x20020058

0002534c <__sfvwrite_r>:
   2534c:	6893      	ldr	r3, [r2, #8]
   2534e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25352:	4606      	mov	r6, r0
   25354:	460c      	mov	r4, r1
   25356:	4690      	mov	r8, r2
   25358:	b91b      	cbnz	r3, 25362 <__sfvwrite_r+0x16>
   2535a:	2000      	movs	r0, #0
   2535c:	b003      	add	sp, #12
   2535e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25362:	898b      	ldrh	r3, [r1, #12]
   25364:	0718      	lsls	r0, r3, #28
   25366:	d550      	bpl.n	2540a <__sfvwrite_r+0xbe>
   25368:	690b      	ldr	r3, [r1, #16]
   2536a:	2b00      	cmp	r3, #0
   2536c:	d04d      	beq.n	2540a <__sfvwrite_r+0xbe>
   2536e:	89a3      	ldrh	r3, [r4, #12]
   25370:	f8d8 7000 	ldr.w	r7, [r8]
   25374:	f013 0902 	ands.w	r9, r3, #2
   25378:	d16c      	bne.n	25454 <__sfvwrite_r+0x108>
   2537a:	f013 0301 	ands.w	r3, r3, #1
   2537e:	f000 809c 	beq.w	254ba <__sfvwrite_r+0x16e>
   25382:	4648      	mov	r0, r9
   25384:	46ca      	mov	sl, r9
   25386:	46cb      	mov	fp, r9
   25388:	f1bb 0f00 	cmp.w	fp, #0
   2538c:	f000 8103 	beq.w	25596 <__sfvwrite_r+0x24a>
   25390:	b950      	cbnz	r0, 253a8 <__sfvwrite_r+0x5c>
   25392:	465a      	mov	r2, fp
   25394:	210a      	movs	r1, #10
   25396:	4650      	mov	r0, sl
   25398:	f00b fd4a 	bl	30e30 <memchr>
   2539c:	2800      	cmp	r0, #0
   2539e:	f000 80ff 	beq.w	255a0 <__sfvwrite_r+0x254>
   253a2:	3001      	adds	r0, #1
   253a4:	eba0 090a 	sub.w	r9, r0, sl
   253a8:	45d9      	cmp	r9, fp
   253aa:	6820      	ldr	r0, [r4, #0]
   253ac:	6921      	ldr	r1, [r4, #16]
   253ae:	464a      	mov	r2, r9
   253b0:	bf28      	it	cs
   253b2:	465a      	movcs	r2, fp
   253b4:	6963      	ldr	r3, [r4, #20]
   253b6:	4288      	cmp	r0, r1
   253b8:	f240 80f5 	bls.w	255a6 <__sfvwrite_r+0x25a>
   253bc:	68a5      	ldr	r5, [r4, #8]
   253be:	441d      	add	r5, r3
   253c0:	42aa      	cmp	r2, r5
   253c2:	f340 80f0 	ble.w	255a6 <__sfvwrite_r+0x25a>
   253c6:	4651      	mov	r1, sl
   253c8:	462a      	mov	r2, r5
   253ca:	f00b fd5a 	bl	30e82 <memmove>
   253ce:	6823      	ldr	r3, [r4, #0]
   253d0:	4621      	mov	r1, r4
   253d2:	4630      	mov	r0, r6
   253d4:	442b      	add	r3, r5
   253d6:	6023      	str	r3, [r4, #0]
   253d8:	f000 fdce 	bl	25f78 <_fflush_r>
   253dc:	2800      	cmp	r0, #0
   253de:	d167      	bne.n	254b0 <__sfvwrite_r+0x164>
   253e0:	ebb9 0905 	subs.w	r9, r9, r5
   253e4:	f040 80f7 	bne.w	255d6 <__sfvwrite_r+0x28a>
   253e8:	4621      	mov	r1, r4
   253ea:	4630      	mov	r0, r6
   253ec:	f000 fdc4 	bl	25f78 <_fflush_r>
   253f0:	2800      	cmp	r0, #0
   253f2:	d15d      	bne.n	254b0 <__sfvwrite_r+0x164>
   253f4:	f8d8 2008 	ldr.w	r2, [r8, #8]
   253f8:	44aa      	add	sl, r5
   253fa:	ebab 0b05 	sub.w	fp, fp, r5
   253fe:	1b55      	subs	r5, r2, r5
   25400:	f8c8 5008 	str.w	r5, [r8, #8]
   25404:	2d00      	cmp	r5, #0
   25406:	d1bf      	bne.n	25388 <__sfvwrite_r+0x3c>
   25408:	e7a7      	b.n	2535a <__sfvwrite_r+0xe>
   2540a:	4621      	mov	r1, r4
   2540c:	4630      	mov	r0, r6
   2540e:	f000 fcb7 	bl	25d80 <__swsetup_r>
   25412:	2800      	cmp	r0, #0
   25414:	d0ab      	beq.n	2536e <__sfvwrite_r+0x22>
   25416:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2541a:	e79f      	b.n	2535c <__sfvwrite_r+0x10>
   2541c:	e9d7 b900 	ldrd	fp, r9, [r7]
   25420:	3708      	adds	r7, #8
   25422:	f1b9 0f00 	cmp.w	r9, #0
   25426:	d0f9      	beq.n	2541c <__sfvwrite_r+0xd0>
   25428:	45d1      	cmp	r9, sl
   2542a:	464b      	mov	r3, r9
   2542c:	465a      	mov	r2, fp
   2542e:	6a21      	ldr	r1, [r4, #32]
   25430:	bf28      	it	cs
   25432:	4653      	movcs	r3, sl
   25434:	4630      	mov	r0, r6
   25436:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   25438:	47a8      	blx	r5
   2543a:	2800      	cmp	r0, #0
   2543c:	dd38      	ble.n	254b0 <__sfvwrite_r+0x164>
   2543e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   25442:	4483      	add	fp, r0
   25444:	eba9 0900 	sub.w	r9, r9, r0
   25448:	1a18      	subs	r0, r3, r0
   2544a:	f8c8 0008 	str.w	r0, [r8, #8]
   2544e:	2800      	cmp	r0, #0
   25450:	d1e7      	bne.n	25422 <__sfvwrite_r+0xd6>
   25452:	e782      	b.n	2535a <__sfvwrite_r+0xe>
   25454:	f04f 0b00 	mov.w	fp, #0
   25458:	f8df a180 	ldr.w	sl, [pc, #384]	; 255dc <__sfvwrite_r+0x290>
   2545c:	46d9      	mov	r9, fp
   2545e:	e7e0      	b.n	25422 <__sfvwrite_r+0xd6>
   25460:	e9d7 9a00 	ldrd	r9, sl, [r7]
   25464:	3708      	adds	r7, #8
   25466:	f1ba 0f00 	cmp.w	sl, #0
   2546a:	d0f9      	beq.n	25460 <__sfvwrite_r+0x114>
   2546c:	89a3      	ldrh	r3, [r4, #12]
   2546e:	68a2      	ldr	r2, [r4, #8]
   25470:	0599      	lsls	r1, r3, #22
   25472:	6820      	ldr	r0, [r4, #0]
   25474:	d563      	bpl.n	2553e <__sfvwrite_r+0x1f2>
   25476:	4552      	cmp	r2, sl
   25478:	d836      	bhi.n	254e8 <__sfvwrite_r+0x19c>
   2547a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2547e:	d033      	beq.n	254e8 <__sfvwrite_r+0x19c>
   25480:	6921      	ldr	r1, [r4, #16]
   25482:	6965      	ldr	r5, [r4, #20]
   25484:	eba0 0b01 	sub.w	fp, r0, r1
   25488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2548c:	f10b 0201 	add.w	r2, fp, #1
   25490:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   25494:	4452      	add	r2, sl
   25496:	106d      	asrs	r5, r5, #1
   25498:	4295      	cmp	r5, r2
   2549a:	bf38      	it	cc
   2549c:	4615      	movcc	r5, r2
   2549e:	055b      	lsls	r3, r3, #21
   254a0:	d53d      	bpl.n	2551e <__sfvwrite_r+0x1d2>
   254a2:	4629      	mov	r1, r5
   254a4:	4630      	mov	r0, r6
   254a6:	f000 f8fb 	bl	256a0 <_malloc_r>
   254aa:	b948      	cbnz	r0, 254c0 <__sfvwrite_r+0x174>
   254ac:	230c      	movs	r3, #12
   254ae:	6033      	str	r3, [r6, #0]
   254b0:	89a3      	ldrh	r3, [r4, #12]
   254b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   254b6:	81a3      	strh	r3, [r4, #12]
   254b8:	e7ad      	b.n	25416 <__sfvwrite_r+0xca>
   254ba:	4699      	mov	r9, r3
   254bc:	469a      	mov	sl, r3
   254be:	e7d2      	b.n	25466 <__sfvwrite_r+0x11a>
   254c0:	465a      	mov	r2, fp
   254c2:	6921      	ldr	r1, [r4, #16]
   254c4:	9001      	str	r0, [sp, #4]
   254c6:	f00b fccf 	bl	30e68 <memcpy>
   254ca:	89a2      	ldrh	r2, [r4, #12]
   254cc:	9b01      	ldr	r3, [sp, #4]
   254ce:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   254d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   254d6:	81a2      	strh	r2, [r4, #12]
   254d8:	6123      	str	r3, [r4, #16]
   254da:	4652      	mov	r2, sl
   254dc:	445b      	add	r3, fp
   254de:	6165      	str	r5, [r4, #20]
   254e0:	eba5 050b 	sub.w	r5, r5, fp
   254e4:	6023      	str	r3, [r4, #0]
   254e6:	60a5      	str	r5, [r4, #8]
   254e8:	4552      	cmp	r2, sl
   254ea:	4649      	mov	r1, r9
   254ec:	6820      	ldr	r0, [r4, #0]
   254ee:	4655      	mov	r5, sl
   254f0:	bf28      	it	cs
   254f2:	4652      	movcs	r2, sl
   254f4:	9201      	str	r2, [sp, #4]
   254f6:	f00b fcc4 	bl	30e82 <memmove>
   254fa:	68a3      	ldr	r3, [r4, #8]
   254fc:	9a01      	ldr	r2, [sp, #4]
   254fe:	1a9b      	subs	r3, r3, r2
   25500:	60a3      	str	r3, [r4, #8]
   25502:	6823      	ldr	r3, [r4, #0]
   25504:	441a      	add	r2, r3
   25506:	6022      	str	r2, [r4, #0]
   25508:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2550c:	44a9      	add	r9, r5
   2550e:	ebaa 0a05 	sub.w	sl, sl, r5
   25512:	1b45      	subs	r5, r0, r5
   25514:	f8c8 5008 	str.w	r5, [r8, #8]
   25518:	2d00      	cmp	r5, #0
   2551a:	d1a4      	bne.n	25466 <__sfvwrite_r+0x11a>
   2551c:	e71d      	b.n	2535a <__sfvwrite_r+0xe>
   2551e:	462a      	mov	r2, r5
   25520:	4630      	mov	r0, r6
   25522:	f00b fcd0 	bl	30ec6 <_realloc_r>
   25526:	4603      	mov	r3, r0
   25528:	2800      	cmp	r0, #0
   2552a:	d1d5      	bne.n	254d8 <__sfvwrite_r+0x18c>
   2552c:	6921      	ldr	r1, [r4, #16]
   2552e:	4630      	mov	r0, r6
   25530:	f000 f866 	bl	25600 <_free_r>
   25534:	89a3      	ldrh	r3, [r4, #12]
   25536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2553a:	81a3      	strh	r3, [r4, #12]
   2553c:	e7b6      	b.n	254ac <__sfvwrite_r+0x160>
   2553e:	6923      	ldr	r3, [r4, #16]
   25540:	4283      	cmp	r3, r0
   25542:	d302      	bcc.n	2554a <__sfvwrite_r+0x1fe>
   25544:	6961      	ldr	r1, [r4, #20]
   25546:	4551      	cmp	r1, sl
   25548:	d915      	bls.n	25576 <__sfvwrite_r+0x22a>
   2554a:	4552      	cmp	r2, sl
   2554c:	4649      	mov	r1, r9
   2554e:	bf28      	it	cs
   25550:	4652      	movcs	r2, sl
   25552:	4615      	mov	r5, r2
   25554:	f00b fc95 	bl	30e82 <memmove>
   25558:	68a3      	ldr	r3, [r4, #8]
   2555a:	6822      	ldr	r2, [r4, #0]
   2555c:	1b5b      	subs	r3, r3, r5
   2555e:	442a      	add	r2, r5
   25560:	60a3      	str	r3, [r4, #8]
   25562:	6022      	str	r2, [r4, #0]
   25564:	2b00      	cmp	r3, #0
   25566:	d1cf      	bne.n	25508 <__sfvwrite_r+0x1bc>
   25568:	4621      	mov	r1, r4
   2556a:	4630      	mov	r0, r6
   2556c:	f000 fd04 	bl	25f78 <_fflush_r>
   25570:	2800      	cmp	r0, #0
   25572:	d0c9      	beq.n	25508 <__sfvwrite_r+0x1bc>
   25574:	e79c      	b.n	254b0 <__sfvwrite_r+0x164>
   25576:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   2557a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   2557c:	464a      	mov	r2, r9
   2557e:	4630      	mov	r0, r6
   25580:	459a      	cmp	sl, r3
   25582:	bf38      	it	cc
   25584:	4653      	movcc	r3, sl
   25586:	fb93 f3f1 	sdiv	r3, r3, r1
   2558a:	434b      	muls	r3, r1
   2558c:	6a21      	ldr	r1, [r4, #32]
   2558e:	47a8      	blx	r5
   25590:	1e05      	subs	r5, r0, #0
   25592:	dcb9      	bgt.n	25508 <__sfvwrite_r+0x1bc>
   25594:	e78c      	b.n	254b0 <__sfvwrite_r+0x164>
   25596:	e9d7 ab00 	ldrd	sl, fp, [r7]
   2559a:	2000      	movs	r0, #0
   2559c:	3708      	adds	r7, #8
   2559e:	e6f3      	b.n	25388 <__sfvwrite_r+0x3c>
   255a0:	f10b 0901 	add.w	r9, fp, #1
   255a4:	e700      	b.n	253a8 <__sfvwrite_r+0x5c>
   255a6:	4293      	cmp	r3, r2
   255a8:	dc08      	bgt.n	255bc <__sfvwrite_r+0x270>
   255aa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   255ac:	4652      	mov	r2, sl
   255ae:	6a21      	ldr	r1, [r4, #32]
   255b0:	4630      	mov	r0, r6
   255b2:	47a8      	blx	r5
   255b4:	1e05      	subs	r5, r0, #0
   255b6:	f73f af13 	bgt.w	253e0 <__sfvwrite_r+0x94>
   255ba:	e779      	b.n	254b0 <__sfvwrite_r+0x164>
   255bc:	4651      	mov	r1, sl
   255be:	9201      	str	r2, [sp, #4]
   255c0:	f00b fc5f 	bl	30e82 <memmove>
   255c4:	9a01      	ldr	r2, [sp, #4]
   255c6:	68a3      	ldr	r3, [r4, #8]
   255c8:	4615      	mov	r5, r2
   255ca:	1a9b      	subs	r3, r3, r2
   255cc:	60a3      	str	r3, [r4, #8]
   255ce:	6823      	ldr	r3, [r4, #0]
   255d0:	4413      	add	r3, r2
   255d2:	6023      	str	r3, [r4, #0]
   255d4:	e704      	b.n	253e0 <__sfvwrite_r+0x94>
   255d6:	2001      	movs	r0, #1
   255d8:	e70c      	b.n	253f4 <__sfvwrite_r+0xa8>
   255da:	bf00      	nop
   255dc:	7ffffc00 	.word	0x7ffffc00

000255e0 <malloc>:
   255e0:	4b02      	ldr	r3, [pc, #8]	; (255ec <malloc+0xc>)
   255e2:	4601      	mov	r1, r0
   255e4:	6818      	ldr	r0, [r3, #0]
   255e6:	f000 b85b 	b.w	256a0 <_malloc_r>
   255ea:	bf00      	nop
   255ec:	20020058 	.word	0x20020058

000255f0 <free>:
   255f0:	4b02      	ldr	r3, [pc, #8]	; (255fc <free+0xc>)
   255f2:	4601      	mov	r1, r0
   255f4:	6818      	ldr	r0, [r3, #0]
   255f6:	f000 b803 	b.w	25600 <_free_r>
   255fa:	bf00      	nop
   255fc:	20020058 	.word	0x20020058

00025600 <_free_r>:
   25600:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25602:	2900      	cmp	r1, #0
   25604:	d047      	beq.n	25696 <_free_r+0x96>
   25606:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2560a:	1f0c      	subs	r4, r1, #4
   2560c:	9001      	str	r0, [sp, #4]
   2560e:	2b00      	cmp	r3, #0
   25610:	bfb8      	it	lt
   25612:	18e4      	addlt	r4, r4, r3
   25614:	f00b fdcd 	bl	311b2 <__malloc_lock>
   25618:	4a20      	ldr	r2, [pc, #128]	; (2569c <_free_r+0x9c>)
   2561a:	9801      	ldr	r0, [sp, #4]
   2561c:	6813      	ldr	r3, [r2, #0]
   2561e:	4615      	mov	r5, r2
   25620:	b933      	cbnz	r3, 25630 <_free_r+0x30>
   25622:	6063      	str	r3, [r4, #4]
   25624:	6014      	str	r4, [r2, #0]
   25626:	b003      	add	sp, #12
   25628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2562c:	f00b bdc2 	b.w	311b4 <__malloc_unlock>
   25630:	42a3      	cmp	r3, r4
   25632:	d90b      	bls.n	2564c <_free_r+0x4c>
   25634:	6821      	ldr	r1, [r4, #0]
   25636:	1862      	adds	r2, r4, r1
   25638:	4293      	cmp	r3, r2
   2563a:	bf02      	ittt	eq
   2563c:	681a      	ldreq	r2, [r3, #0]
   2563e:	685b      	ldreq	r3, [r3, #4]
   25640:	1852      	addeq	r2, r2, r1
   25642:	6063      	str	r3, [r4, #4]
   25644:	bf08      	it	eq
   25646:	6022      	streq	r2, [r4, #0]
   25648:	602c      	str	r4, [r5, #0]
   2564a:	e7ec      	b.n	25626 <_free_r+0x26>
   2564c:	461a      	mov	r2, r3
   2564e:	685b      	ldr	r3, [r3, #4]
   25650:	b10b      	cbz	r3, 25656 <_free_r+0x56>
   25652:	42a3      	cmp	r3, r4
   25654:	d9fa      	bls.n	2564c <_free_r+0x4c>
   25656:	6811      	ldr	r1, [r2, #0]
   25658:	1855      	adds	r5, r2, r1
   2565a:	42a5      	cmp	r5, r4
   2565c:	d10b      	bne.n	25676 <_free_r+0x76>
   2565e:	6824      	ldr	r4, [r4, #0]
   25660:	4421      	add	r1, r4
   25662:	1854      	adds	r4, r2, r1
   25664:	6011      	str	r1, [r2, #0]
   25666:	42a3      	cmp	r3, r4
   25668:	d1dd      	bne.n	25626 <_free_r+0x26>
   2566a:	681c      	ldr	r4, [r3, #0]
   2566c:	685b      	ldr	r3, [r3, #4]
   2566e:	4421      	add	r1, r4
   25670:	6053      	str	r3, [r2, #4]
   25672:	6011      	str	r1, [r2, #0]
   25674:	e7d7      	b.n	25626 <_free_r+0x26>
   25676:	d902      	bls.n	2567e <_free_r+0x7e>
   25678:	230c      	movs	r3, #12
   2567a:	6003      	str	r3, [r0, #0]
   2567c:	e7d3      	b.n	25626 <_free_r+0x26>
   2567e:	6825      	ldr	r5, [r4, #0]
   25680:	1961      	adds	r1, r4, r5
   25682:	428b      	cmp	r3, r1
   25684:	bf02      	ittt	eq
   25686:	6819      	ldreq	r1, [r3, #0]
   25688:	685b      	ldreq	r3, [r3, #4]
   2568a:	1949      	addeq	r1, r1, r5
   2568c:	6063      	str	r3, [r4, #4]
   2568e:	bf08      	it	eq
   25690:	6021      	streq	r1, [r4, #0]
   25692:	6054      	str	r4, [r2, #4]
   25694:	e7c7      	b.n	25626 <_free_r+0x26>
   25696:	b003      	add	sp, #12
   25698:	bd30      	pop	{r4, r5, pc}
   2569a:	bf00      	nop
   2569c:	20026084 	.word	0x20026084

000256a0 <_malloc_r>:
   256a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   256a2:	1ccd      	adds	r5, r1, #3
   256a4:	4606      	mov	r6, r0
   256a6:	f025 0503 	bic.w	r5, r5, #3
   256aa:	3508      	adds	r5, #8
   256ac:	2d0c      	cmp	r5, #12
   256ae:	bf38      	it	cc
   256b0:	250c      	movcc	r5, #12
   256b2:	2d00      	cmp	r5, #0
   256b4:	db01      	blt.n	256ba <_malloc_r+0x1a>
   256b6:	42a9      	cmp	r1, r5
   256b8:	d903      	bls.n	256c2 <_malloc_r+0x22>
   256ba:	230c      	movs	r3, #12
   256bc:	6033      	str	r3, [r6, #0]
   256be:	2000      	movs	r0, #0
   256c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   256c2:	f00b fd76 	bl	311b2 <__malloc_lock>
   256c6:	4921      	ldr	r1, [pc, #132]	; (2574c <_malloc_r+0xac>)
   256c8:	680a      	ldr	r2, [r1, #0]
   256ca:	4614      	mov	r4, r2
   256cc:	b99c      	cbnz	r4, 256f6 <_malloc_r+0x56>
   256ce:	4f20      	ldr	r7, [pc, #128]	; (25750 <_malloc_r+0xb0>)
   256d0:	683b      	ldr	r3, [r7, #0]
   256d2:	b923      	cbnz	r3, 256de <_malloc_r+0x3e>
   256d4:	4621      	mov	r1, r4
   256d6:	4630      	mov	r0, r6
   256d8:	f000 fab6 	bl	25c48 <_sbrk_r>
   256dc:	6038      	str	r0, [r7, #0]
   256de:	4629      	mov	r1, r5
   256e0:	4630      	mov	r0, r6
   256e2:	f000 fab1 	bl	25c48 <_sbrk_r>
   256e6:	1c43      	adds	r3, r0, #1
   256e8:	d123      	bne.n	25732 <_malloc_r+0x92>
   256ea:	230c      	movs	r3, #12
   256ec:	4630      	mov	r0, r6
   256ee:	6033      	str	r3, [r6, #0]
   256f0:	f00b fd60 	bl	311b4 <__malloc_unlock>
   256f4:	e7e3      	b.n	256be <_malloc_r+0x1e>
   256f6:	6823      	ldr	r3, [r4, #0]
   256f8:	1b5b      	subs	r3, r3, r5
   256fa:	d417      	bmi.n	2572c <_malloc_r+0x8c>
   256fc:	2b0b      	cmp	r3, #11
   256fe:	d903      	bls.n	25708 <_malloc_r+0x68>
   25700:	6023      	str	r3, [r4, #0]
   25702:	441c      	add	r4, r3
   25704:	6025      	str	r5, [r4, #0]
   25706:	e004      	b.n	25712 <_malloc_r+0x72>
   25708:	6863      	ldr	r3, [r4, #4]
   2570a:	42a2      	cmp	r2, r4
   2570c:	bf0c      	ite	eq
   2570e:	600b      	streq	r3, [r1, #0]
   25710:	6053      	strne	r3, [r2, #4]
   25712:	4630      	mov	r0, r6
   25714:	f00b fd4e 	bl	311b4 <__malloc_unlock>
   25718:	f104 000b 	add.w	r0, r4, #11
   2571c:	1d23      	adds	r3, r4, #4
   2571e:	f020 0007 	bic.w	r0, r0, #7
   25722:	1ac2      	subs	r2, r0, r3
   25724:	d0cc      	beq.n	256c0 <_malloc_r+0x20>
   25726:	1a1b      	subs	r3, r3, r0
   25728:	50a3      	str	r3, [r4, r2]
   2572a:	e7c9      	b.n	256c0 <_malloc_r+0x20>
   2572c:	4622      	mov	r2, r4
   2572e:	6864      	ldr	r4, [r4, #4]
   25730:	e7cc      	b.n	256cc <_malloc_r+0x2c>
   25732:	1cc4      	adds	r4, r0, #3
   25734:	f024 0403 	bic.w	r4, r4, #3
   25738:	42a0      	cmp	r0, r4
   2573a:	d0e3      	beq.n	25704 <_malloc_r+0x64>
   2573c:	1a21      	subs	r1, r4, r0
   2573e:	4630      	mov	r0, r6
   25740:	f000 fa82 	bl	25c48 <_sbrk_r>
   25744:	3001      	adds	r0, #1
   25746:	d1dd      	bne.n	25704 <_malloc_r+0x64>
   25748:	e7cf      	b.n	256ea <_malloc_r+0x4a>
   2574a:	bf00      	nop
   2574c:	20026084 	.word	0x20026084
   25750:	20026088 	.word	0x20026088

00025754 <_vfiprintf_r>:
   25754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25758:	460d      	mov	r5, r1
   2575a:	b09d      	sub	sp, #116	; 0x74
   2575c:	4614      	mov	r4, r2
   2575e:	4698      	mov	r8, r3
   25760:	4606      	mov	r6, r0
   25762:	b118      	cbz	r0, 2576c <_vfiprintf_r+0x18>
   25764:	6983      	ldr	r3, [r0, #24]
   25766:	b90b      	cbnz	r3, 2576c <_vfiprintf_r+0x18>
   25768:	f000 fc5a 	bl	26020 <__sinit>
   2576c:	4b7c      	ldr	r3, [pc, #496]	; (25960 <_vfiprintf_r+0x20c>)
   2576e:	429d      	cmp	r5, r3
   25770:	d161      	bne.n	25836 <_vfiprintf_r+0xe2>
   25772:	6875      	ldr	r5, [r6, #4]
   25774:	89ab      	ldrh	r3, [r5, #12]
   25776:	071b      	lsls	r3, r3, #28
   25778:	d567      	bpl.n	2584a <_vfiprintf_r+0xf6>
   2577a:	692b      	ldr	r3, [r5, #16]
   2577c:	2b00      	cmp	r3, #0
   2577e:	d064      	beq.n	2584a <_vfiprintf_r+0xf6>
   25780:	2300      	movs	r3, #0
   25782:	f8cd 800c 	str.w	r8, [sp, #12]
   25786:	f04f 0901 	mov.w	r9, #1
   2578a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 25964 <_vfiprintf_r+0x210>
   2578e:	9309      	str	r3, [sp, #36]	; 0x24
   25790:	2320      	movs	r3, #32
   25792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   25796:	2330      	movs	r3, #48	; 0x30
   25798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2579c:	4623      	mov	r3, r4
   2579e:	469a      	mov	sl, r3
   257a0:	f813 2b01 	ldrb.w	r2, [r3], #1
   257a4:	b10a      	cbz	r2, 257aa <_vfiprintf_r+0x56>
   257a6:	2a25      	cmp	r2, #37	; 0x25
   257a8:	d1f9      	bne.n	2579e <_vfiprintf_r+0x4a>
   257aa:	ebba 0b04 	subs.w	fp, sl, r4
   257ae:	d00b      	beq.n	257c8 <_vfiprintf_r+0x74>
   257b0:	465b      	mov	r3, fp
   257b2:	4622      	mov	r2, r4
   257b4:	4629      	mov	r1, r5
   257b6:	4630      	mov	r0, r6
   257b8:	f00b fbc2 	bl	30f40 <__sfputs_r>
   257bc:	3001      	adds	r0, #1
   257be:	f000 80c0 	beq.w	25942 <_vfiprintf_r+0x1ee>
   257c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   257c4:	445a      	add	r2, fp
   257c6:	9209      	str	r2, [sp, #36]	; 0x24
   257c8:	f89a 3000 	ldrb.w	r3, [sl]
   257cc:	2b00      	cmp	r3, #0
   257ce:	f000 80b8 	beq.w	25942 <_vfiprintf_r+0x1ee>
   257d2:	2300      	movs	r3, #0
   257d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   257d8:	f10a 0a01 	add.w	sl, sl, #1
   257dc:	9304      	str	r3, [sp, #16]
   257de:	9307      	str	r3, [sp, #28]
   257e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   257e4:	931a      	str	r3, [sp, #104]	; 0x68
   257e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
   257ea:	4654      	mov	r4, sl
   257ec:	2205      	movs	r2, #5
   257ee:	485d      	ldr	r0, [pc, #372]	; (25964 <_vfiprintf_r+0x210>)
   257f0:	f814 1b01 	ldrb.w	r1, [r4], #1
   257f4:	f00b fb1c 	bl	30e30 <memchr>
   257f8:	9a04      	ldr	r2, [sp, #16]
   257fa:	2800      	cmp	r0, #0
   257fc:	d130      	bne.n	25860 <_vfiprintf_r+0x10c>
   257fe:	06d0      	lsls	r0, r2, #27
   25800:	bf44      	itt	mi
   25802:	2320      	movmi	r3, #32
   25804:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   25808:	0711      	lsls	r1, r2, #28
   2580a:	bf44      	itt	mi
   2580c:	232b      	movmi	r3, #43	; 0x2b
   2580e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   25812:	f89a 3000 	ldrb.w	r3, [sl]
   25816:	2b2a      	cmp	r3, #42	; 0x2a
   25818:	d02a      	beq.n	25870 <_vfiprintf_r+0x11c>
   2581a:	9a07      	ldr	r2, [sp, #28]
   2581c:	4654      	mov	r4, sl
   2581e:	2000      	movs	r0, #0
   25820:	f04f 0c0a 	mov.w	ip, #10
   25824:	4621      	mov	r1, r4
   25826:	f811 3b01 	ldrb.w	r3, [r1], #1
   2582a:	3b30      	subs	r3, #48	; 0x30
   2582c:	2b09      	cmp	r3, #9
   2582e:	d963      	bls.n	258f8 <_vfiprintf_r+0x1a4>
   25830:	b358      	cbz	r0, 2588a <_vfiprintf_r+0x136>
   25832:	9207      	str	r2, [sp, #28]
   25834:	e029      	b.n	2588a <_vfiprintf_r+0x136>
   25836:	4b4c      	ldr	r3, [pc, #304]	; (25968 <_vfiprintf_r+0x214>)
   25838:	429d      	cmp	r5, r3
   2583a:	d101      	bne.n	25840 <_vfiprintf_r+0xec>
   2583c:	68b5      	ldr	r5, [r6, #8]
   2583e:	e799      	b.n	25774 <_vfiprintf_r+0x20>
   25840:	4b4a      	ldr	r3, [pc, #296]	; (2596c <_vfiprintf_r+0x218>)
   25842:	429d      	cmp	r5, r3
   25844:	bf08      	it	eq
   25846:	68f5      	ldreq	r5, [r6, #12]
   25848:	e794      	b.n	25774 <_vfiprintf_r+0x20>
   2584a:	4629      	mov	r1, r5
   2584c:	4630      	mov	r0, r6
   2584e:	f000 fa97 	bl	25d80 <__swsetup_r>
   25852:	2800      	cmp	r0, #0
   25854:	d094      	beq.n	25780 <_vfiprintf_r+0x2c>
   25856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2585a:	b01d      	add	sp, #116	; 0x74
   2585c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25860:	eba0 0308 	sub.w	r3, r0, r8
   25864:	46a2      	mov	sl, r4
   25866:	fa09 f303 	lsl.w	r3, r9, r3
   2586a:	4313      	orrs	r3, r2
   2586c:	9304      	str	r3, [sp, #16]
   2586e:	e7bc      	b.n	257ea <_vfiprintf_r+0x96>
   25870:	9b03      	ldr	r3, [sp, #12]
   25872:	1d19      	adds	r1, r3, #4
   25874:	681b      	ldr	r3, [r3, #0]
   25876:	2b00      	cmp	r3, #0
   25878:	9103      	str	r1, [sp, #12]
   2587a:	bfbb      	ittet	lt
   2587c:	425b      	neglt	r3, r3
   2587e:	f042 0202 	orrlt.w	r2, r2, #2
   25882:	9307      	strge	r3, [sp, #28]
   25884:	9307      	strlt	r3, [sp, #28]
   25886:	bfb8      	it	lt
   25888:	9204      	strlt	r2, [sp, #16]
   2588a:	7823      	ldrb	r3, [r4, #0]
   2588c:	2b2e      	cmp	r3, #46	; 0x2e
   2588e:	d10c      	bne.n	258aa <_vfiprintf_r+0x156>
   25890:	7863      	ldrb	r3, [r4, #1]
   25892:	2b2a      	cmp	r3, #42	; 0x2a
   25894:	d135      	bne.n	25902 <_vfiprintf_r+0x1ae>
   25896:	9b03      	ldr	r3, [sp, #12]
   25898:	3402      	adds	r4, #2
   2589a:	1d1a      	adds	r2, r3, #4
   2589c:	681b      	ldr	r3, [r3, #0]
   2589e:	2b00      	cmp	r3, #0
   258a0:	9203      	str	r2, [sp, #12]
   258a2:	bfb8      	it	lt
   258a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   258a8:	9305      	str	r3, [sp, #20]
   258aa:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 2597c <_vfiprintf_r+0x228>
   258ae:	2203      	movs	r2, #3
   258b0:	7821      	ldrb	r1, [r4, #0]
   258b2:	4650      	mov	r0, sl
   258b4:	f00b fabc 	bl	30e30 <memchr>
   258b8:	b140      	cbz	r0, 258cc <_vfiprintf_r+0x178>
   258ba:	2340      	movs	r3, #64	; 0x40
   258bc:	eba0 000a 	sub.w	r0, r0, sl
   258c0:	3401      	adds	r4, #1
   258c2:	fa03 f000 	lsl.w	r0, r3, r0
   258c6:	9b04      	ldr	r3, [sp, #16]
   258c8:	4303      	orrs	r3, r0
   258ca:	9304      	str	r3, [sp, #16]
   258cc:	f814 1b01 	ldrb.w	r1, [r4], #1
   258d0:	2206      	movs	r2, #6
   258d2:	4827      	ldr	r0, [pc, #156]	; (25970 <_vfiprintf_r+0x21c>)
   258d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   258d8:	f00b faaa 	bl	30e30 <memchr>
   258dc:	2800      	cmp	r0, #0
   258de:	d035      	beq.n	2594c <_vfiprintf_r+0x1f8>
   258e0:	4b24      	ldr	r3, [pc, #144]	; (25974 <_vfiprintf_r+0x220>)
   258e2:	bb1b      	cbnz	r3, 2592c <_vfiprintf_r+0x1d8>
   258e4:	9b03      	ldr	r3, [sp, #12]
   258e6:	3307      	adds	r3, #7
   258e8:	f023 0307 	bic.w	r3, r3, #7
   258ec:	3308      	adds	r3, #8
   258ee:	9303      	str	r3, [sp, #12]
   258f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   258f2:	443b      	add	r3, r7
   258f4:	9309      	str	r3, [sp, #36]	; 0x24
   258f6:	e751      	b.n	2579c <_vfiprintf_r+0x48>
   258f8:	fb0c 3202 	mla	r2, ip, r2, r3
   258fc:	460c      	mov	r4, r1
   258fe:	2001      	movs	r0, #1
   25900:	e790      	b.n	25824 <_vfiprintf_r+0xd0>
   25902:	2300      	movs	r3, #0
   25904:	3401      	adds	r4, #1
   25906:	f04f 0c0a 	mov.w	ip, #10
   2590a:	4619      	mov	r1, r3
   2590c:	9305      	str	r3, [sp, #20]
   2590e:	4620      	mov	r0, r4
   25910:	f810 2b01 	ldrb.w	r2, [r0], #1
   25914:	3a30      	subs	r2, #48	; 0x30
   25916:	2a09      	cmp	r2, #9
   25918:	d903      	bls.n	25922 <_vfiprintf_r+0x1ce>
   2591a:	2b00      	cmp	r3, #0
   2591c:	d0c5      	beq.n	258aa <_vfiprintf_r+0x156>
   2591e:	9105      	str	r1, [sp, #20]
   25920:	e7c3      	b.n	258aa <_vfiprintf_r+0x156>
   25922:	fb0c 2101 	mla	r1, ip, r1, r2
   25926:	4604      	mov	r4, r0
   25928:	2301      	movs	r3, #1
   2592a:	e7f0      	b.n	2590e <_vfiprintf_r+0x1ba>
   2592c:	ab03      	add	r3, sp, #12
   2592e:	462a      	mov	r2, r5
   25930:	a904      	add	r1, sp, #16
   25932:	4630      	mov	r0, r6
   25934:	9300      	str	r3, [sp, #0]
   25936:	4b10      	ldr	r3, [pc, #64]	; (25978 <_vfiprintf_r+0x224>)
   25938:	e000      	b.n	2593c <_vfiprintf_r+0x1e8>
   2593a:	bf00      	nop
   2593c:	1c42      	adds	r2, r0, #1
   2593e:	4607      	mov	r7, r0
   25940:	d1d6      	bne.n	258f0 <_vfiprintf_r+0x19c>
   25942:	89ab      	ldrh	r3, [r5, #12]
   25944:	065b      	lsls	r3, r3, #25
   25946:	d486      	bmi.n	25856 <_vfiprintf_r+0x102>
   25948:	9809      	ldr	r0, [sp, #36]	; 0x24
   2594a:	e786      	b.n	2585a <_vfiprintf_r+0x106>
   2594c:	ab03      	add	r3, sp, #12
   2594e:	462a      	mov	r2, r5
   25950:	a904      	add	r1, sp, #16
   25952:	4630      	mov	r0, r6
   25954:	9300      	str	r3, [sp, #0]
   25956:	4b08      	ldr	r3, [pc, #32]	; (25978 <_vfiprintf_r+0x224>)
   25958:	f000 f812 	bl	25980 <_printf_i>
   2595c:	e7ee      	b.n	2593c <_vfiprintf_r+0x1e8>
   2595e:	bf00      	nop
   25960:	00033770 	.word	0x00033770
   25964:	000376e5 	.word	0x000376e5
   25968:	00033790 	.word	0x00033790
   2596c:	00033750 	.word	0x00033750
   25970:	000376ef 	.word	0x000376ef
   25974:	00000000 	.word	0x00000000
   25978:	00030f41 	.word	0x00030f41
   2597c:	000376eb 	.word	0x000376eb

00025980 <_printf_i>:
   25980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   25984:	460c      	mov	r4, r1
   25986:	4691      	mov	r9, r2
   25988:	4680      	mov	r8, r0
   2598a:	469a      	mov	sl, r3
   2598c:	7e27      	ldrb	r7, [r4, #24]
   2598e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   25992:	990c      	ldr	r1, [sp, #48]	; 0x30
   25994:	2f78      	cmp	r7, #120	; 0x78
   25996:	d807      	bhi.n	259a8 <_printf_i+0x28>
   25998:	2f62      	cmp	r7, #98	; 0x62
   2599a:	d80a      	bhi.n	259b2 <_printf_i+0x32>
   2599c:	2f00      	cmp	r7, #0
   2599e:	f000 80d8 	beq.w	25b52 <_printf_i+0x1d2>
   259a2:	2f58      	cmp	r7, #88	; 0x58
   259a4:	f000 80a3 	beq.w	25aee <_printf_i+0x16e>
   259a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
   259ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   259b0:	e03a      	b.n	25a28 <_printf_i+0xa8>
   259b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   259b6:	2b15      	cmp	r3, #21
   259b8:	d8f6      	bhi.n	259a8 <_printf_i+0x28>
   259ba:	a001      	add	r0, pc, #4	; (adr r0, 259c0 <_printf_i+0x40>)
   259bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   259c0:	00025a19 	.word	0x00025a19
   259c4:	00025a2d 	.word	0x00025a2d
   259c8:	000259a9 	.word	0x000259a9
   259cc:	000259a9 	.word	0x000259a9
   259d0:	000259a9 	.word	0x000259a9
   259d4:	000259a9 	.word	0x000259a9
   259d8:	00025a2d 	.word	0x00025a2d
   259dc:	000259a9 	.word	0x000259a9
   259e0:	000259a9 	.word	0x000259a9
   259e4:	000259a9 	.word	0x000259a9
   259e8:	000259a9 	.word	0x000259a9
   259ec:	00025b39 	.word	0x00025b39
   259f0:	00025a5d 	.word	0x00025a5d
   259f4:	00025b1b 	.word	0x00025b1b
   259f8:	000259a9 	.word	0x000259a9
   259fc:	000259a9 	.word	0x000259a9
   25a00:	00025b5b 	.word	0x00025b5b
   25a04:	000259a9 	.word	0x000259a9
   25a08:	00025a5d 	.word	0x00025a5d
   25a0c:	000259a9 	.word	0x000259a9
   25a10:	000259a9 	.word	0x000259a9
   25a14:	00025b23 	.word	0x00025b23
   25a18:	680b      	ldr	r3, [r1, #0]
   25a1a:	f104 0642 	add.w	r6, r4, #66	; 0x42
   25a1e:	1d1a      	adds	r2, r3, #4
   25a20:	681b      	ldr	r3, [r3, #0]
   25a22:	600a      	str	r2, [r1, #0]
   25a24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   25a28:	2301      	movs	r3, #1
   25a2a:	e0a3      	b.n	25b74 <_printf_i+0x1f4>
   25a2c:	6825      	ldr	r5, [r4, #0]
   25a2e:	6808      	ldr	r0, [r1, #0]
   25a30:	062e      	lsls	r6, r5, #24
   25a32:	f100 0304 	add.w	r3, r0, #4
   25a36:	d50a      	bpl.n	25a4e <_printf_i+0xce>
   25a38:	6805      	ldr	r5, [r0, #0]
   25a3a:	600b      	str	r3, [r1, #0]
   25a3c:	2d00      	cmp	r5, #0
   25a3e:	da03      	bge.n	25a48 <_printf_i+0xc8>
   25a40:	232d      	movs	r3, #45	; 0x2d
   25a42:	426d      	negs	r5, r5
   25a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   25a48:	485e      	ldr	r0, [pc, #376]	; (25bc4 <_printf_i+0x244>)
   25a4a:	230a      	movs	r3, #10
   25a4c:	e019      	b.n	25a82 <_printf_i+0x102>
   25a4e:	f015 0f40 	tst.w	r5, #64	; 0x40
   25a52:	6805      	ldr	r5, [r0, #0]
   25a54:	600b      	str	r3, [r1, #0]
   25a56:	bf18      	it	ne
   25a58:	b22d      	sxthne	r5, r5
   25a5a:	e7ef      	b.n	25a3c <_printf_i+0xbc>
   25a5c:	680b      	ldr	r3, [r1, #0]
   25a5e:	6825      	ldr	r5, [r4, #0]
   25a60:	1d18      	adds	r0, r3, #4
   25a62:	6008      	str	r0, [r1, #0]
   25a64:	0628      	lsls	r0, r5, #24
   25a66:	d501      	bpl.n	25a6c <_printf_i+0xec>
   25a68:	681d      	ldr	r5, [r3, #0]
   25a6a:	e002      	b.n	25a72 <_printf_i+0xf2>
   25a6c:	0669      	lsls	r1, r5, #25
   25a6e:	d5fb      	bpl.n	25a68 <_printf_i+0xe8>
   25a70:	881d      	ldrh	r5, [r3, #0]
   25a72:	2f6f      	cmp	r7, #111	; 0x6f
   25a74:	4853      	ldr	r0, [pc, #332]	; (25bc4 <_printf_i+0x244>)
   25a76:	bf0c      	ite	eq
   25a78:	2308      	moveq	r3, #8
   25a7a:	230a      	movne	r3, #10
   25a7c:	2100      	movs	r1, #0
   25a7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   25a82:	6866      	ldr	r6, [r4, #4]
   25a84:	2e00      	cmp	r6, #0
   25a86:	60a6      	str	r6, [r4, #8]
   25a88:	bfa2      	ittt	ge
   25a8a:	6821      	ldrge	r1, [r4, #0]
   25a8c:	f021 0104 	bicge.w	r1, r1, #4
   25a90:	6021      	strge	r1, [r4, #0]
   25a92:	b90d      	cbnz	r5, 25a98 <_printf_i+0x118>
   25a94:	2e00      	cmp	r6, #0
   25a96:	d04d      	beq.n	25b34 <_printf_i+0x1b4>
   25a98:	4616      	mov	r6, r2
   25a9a:	fbb5 f1f3 	udiv	r1, r5, r3
   25a9e:	fb03 5711 	mls	r7, r3, r1, r5
   25aa2:	5dc7      	ldrb	r7, [r0, r7]
   25aa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
   25aa8:	462f      	mov	r7, r5
   25aaa:	460d      	mov	r5, r1
   25aac:	42bb      	cmp	r3, r7
   25aae:	d9f4      	bls.n	25a9a <_printf_i+0x11a>
   25ab0:	2b08      	cmp	r3, #8
   25ab2:	d10b      	bne.n	25acc <_printf_i+0x14c>
   25ab4:	6823      	ldr	r3, [r4, #0]
   25ab6:	07df      	lsls	r7, r3, #31
   25ab8:	d508      	bpl.n	25acc <_printf_i+0x14c>
   25aba:	6923      	ldr	r3, [r4, #16]
   25abc:	6861      	ldr	r1, [r4, #4]
   25abe:	4299      	cmp	r1, r3
   25ac0:	bfde      	ittt	le
   25ac2:	2330      	movle	r3, #48	; 0x30
   25ac4:	f806 3c01 	strble.w	r3, [r6, #-1]
   25ac8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   25acc:	1b92      	subs	r2, r2, r6
   25ace:	6122      	str	r2, [r4, #16]
   25ad0:	464b      	mov	r3, r9
   25ad2:	aa03      	add	r2, sp, #12
   25ad4:	4621      	mov	r1, r4
   25ad6:	4640      	mov	r0, r8
   25ad8:	f8cd a000 	str.w	sl, [sp]
   25adc:	f00b fa42 	bl	30f64 <_printf_common>
   25ae0:	3001      	adds	r0, #1
   25ae2:	d14c      	bne.n	25b7e <_printf_i+0x1fe>
   25ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25ae8:	b004      	add	sp, #16
   25aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25aee:	4835      	ldr	r0, [pc, #212]	; (25bc4 <_printf_i+0x244>)
   25af0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   25af4:	6823      	ldr	r3, [r4, #0]
   25af6:	680e      	ldr	r6, [r1, #0]
   25af8:	061f      	lsls	r7, r3, #24
   25afa:	f856 5b04 	ldr.w	r5, [r6], #4
   25afe:	600e      	str	r6, [r1, #0]
   25b00:	d514      	bpl.n	25b2c <_printf_i+0x1ac>
   25b02:	07d9      	lsls	r1, r3, #31
   25b04:	bf44      	itt	mi
   25b06:	f043 0320 	orrmi.w	r3, r3, #32
   25b0a:	6023      	strmi	r3, [r4, #0]
   25b0c:	b91d      	cbnz	r5, 25b16 <_printf_i+0x196>
   25b0e:	6823      	ldr	r3, [r4, #0]
   25b10:	f023 0320 	bic.w	r3, r3, #32
   25b14:	6023      	str	r3, [r4, #0]
   25b16:	2310      	movs	r3, #16
   25b18:	e7b0      	b.n	25a7c <_printf_i+0xfc>
   25b1a:	6823      	ldr	r3, [r4, #0]
   25b1c:	f043 0320 	orr.w	r3, r3, #32
   25b20:	6023      	str	r3, [r4, #0]
   25b22:	2378      	movs	r3, #120	; 0x78
   25b24:	4828      	ldr	r0, [pc, #160]	; (25bc8 <_printf_i+0x248>)
   25b26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   25b2a:	e7e3      	b.n	25af4 <_printf_i+0x174>
   25b2c:	065e      	lsls	r6, r3, #25
   25b2e:	bf48      	it	mi
   25b30:	b2ad      	uxthmi	r5, r5
   25b32:	e7e6      	b.n	25b02 <_printf_i+0x182>
   25b34:	4616      	mov	r6, r2
   25b36:	e7bb      	b.n	25ab0 <_printf_i+0x130>
   25b38:	680b      	ldr	r3, [r1, #0]
   25b3a:	6826      	ldr	r6, [r4, #0]
   25b3c:	1d1d      	adds	r5, r3, #4
   25b3e:	6960      	ldr	r0, [r4, #20]
   25b40:	600d      	str	r5, [r1, #0]
   25b42:	0635      	lsls	r5, r6, #24
   25b44:	681b      	ldr	r3, [r3, #0]
   25b46:	d501      	bpl.n	25b4c <_printf_i+0x1cc>
   25b48:	6018      	str	r0, [r3, #0]
   25b4a:	e002      	b.n	25b52 <_printf_i+0x1d2>
   25b4c:	0671      	lsls	r1, r6, #25
   25b4e:	d5fb      	bpl.n	25b48 <_printf_i+0x1c8>
   25b50:	8018      	strh	r0, [r3, #0]
   25b52:	2300      	movs	r3, #0
   25b54:	4616      	mov	r6, r2
   25b56:	6123      	str	r3, [r4, #16]
   25b58:	e7ba      	b.n	25ad0 <_printf_i+0x150>
   25b5a:	680b      	ldr	r3, [r1, #0]
   25b5c:	1d1a      	adds	r2, r3, #4
   25b5e:	600a      	str	r2, [r1, #0]
   25b60:	2100      	movs	r1, #0
   25b62:	681e      	ldr	r6, [r3, #0]
   25b64:	6862      	ldr	r2, [r4, #4]
   25b66:	4630      	mov	r0, r6
   25b68:	f00b f962 	bl	30e30 <memchr>
   25b6c:	b108      	cbz	r0, 25b72 <_printf_i+0x1f2>
   25b6e:	1b80      	subs	r0, r0, r6
   25b70:	6060      	str	r0, [r4, #4]
   25b72:	6863      	ldr	r3, [r4, #4]
   25b74:	6123      	str	r3, [r4, #16]
   25b76:	2300      	movs	r3, #0
   25b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   25b7c:	e7a8      	b.n	25ad0 <_printf_i+0x150>
   25b7e:	6923      	ldr	r3, [r4, #16]
   25b80:	4632      	mov	r2, r6
   25b82:	4649      	mov	r1, r9
   25b84:	4640      	mov	r0, r8
   25b86:	47d0      	blx	sl
   25b88:	3001      	adds	r0, #1
   25b8a:	d0ab      	beq.n	25ae4 <_printf_i+0x164>
   25b8c:	6823      	ldr	r3, [r4, #0]
   25b8e:	079b      	lsls	r3, r3, #30
   25b90:	d413      	bmi.n	25bba <_printf_i+0x23a>
   25b92:	68e0      	ldr	r0, [r4, #12]
   25b94:	9b03      	ldr	r3, [sp, #12]
   25b96:	4298      	cmp	r0, r3
   25b98:	bfb8      	it	lt
   25b9a:	4618      	movlt	r0, r3
   25b9c:	e7a4      	b.n	25ae8 <_printf_i+0x168>
   25b9e:	2301      	movs	r3, #1
   25ba0:	4632      	mov	r2, r6
   25ba2:	4649      	mov	r1, r9
   25ba4:	4640      	mov	r0, r8
   25ba6:	47d0      	blx	sl
   25ba8:	3001      	adds	r0, #1
   25baa:	d09b      	beq.n	25ae4 <_printf_i+0x164>
   25bac:	3501      	adds	r5, #1
   25bae:	68e3      	ldr	r3, [r4, #12]
   25bb0:	9903      	ldr	r1, [sp, #12]
   25bb2:	1a5b      	subs	r3, r3, r1
   25bb4:	42ab      	cmp	r3, r5
   25bb6:	dcf2      	bgt.n	25b9e <_printf_i+0x21e>
   25bb8:	e7eb      	b.n	25b92 <_printf_i+0x212>
   25bba:	2500      	movs	r5, #0
   25bbc:	f104 0619 	add.w	r6, r4, #25
   25bc0:	e7f5      	b.n	25bae <_printf_i+0x22e>
   25bc2:	bf00      	nop
   25bc4:	000376f6 	.word	0x000376f6
   25bc8:	00037707 	.word	0x00037707

00025bcc <_putc_r>:
   25bcc:	b570      	push	{r4, r5, r6, lr}
   25bce:	460d      	mov	r5, r1
   25bd0:	4614      	mov	r4, r2
   25bd2:	4606      	mov	r6, r0
   25bd4:	b118      	cbz	r0, 25bde <_putc_r+0x12>
   25bd6:	6983      	ldr	r3, [r0, #24]
   25bd8:	b90b      	cbnz	r3, 25bde <_putc_r+0x12>
   25bda:	f000 fa21 	bl	26020 <__sinit>
   25bde:	4b13      	ldr	r3, [pc, #76]	; (25c2c <_putc_r+0x60>)
   25be0:	429c      	cmp	r4, r3
   25be2:	d111      	bne.n	25c08 <_putc_r+0x3c>
   25be4:	6874      	ldr	r4, [r6, #4]
   25be6:	68a3      	ldr	r3, [r4, #8]
   25be8:	3b01      	subs	r3, #1
   25bea:	2b00      	cmp	r3, #0
   25bec:	60a3      	str	r3, [r4, #8]
   25bee:	da05      	bge.n	25bfc <_putc_r+0x30>
   25bf0:	69a2      	ldr	r2, [r4, #24]
   25bf2:	4293      	cmp	r3, r2
   25bf4:	db12      	blt.n	25c1c <_putc_r+0x50>
   25bf6:	b2eb      	uxtb	r3, r5
   25bf8:	2b0a      	cmp	r3, #10
   25bfa:	d00f      	beq.n	25c1c <_putc_r+0x50>
   25bfc:	6823      	ldr	r3, [r4, #0]
   25bfe:	b2e8      	uxtb	r0, r5
   25c00:	1c5a      	adds	r2, r3, #1
   25c02:	6022      	str	r2, [r4, #0]
   25c04:	701d      	strb	r5, [r3, #0]
   25c06:	bd70      	pop	{r4, r5, r6, pc}
   25c08:	4b09      	ldr	r3, [pc, #36]	; (25c30 <_putc_r+0x64>)
   25c0a:	429c      	cmp	r4, r3
   25c0c:	d101      	bne.n	25c12 <_putc_r+0x46>
   25c0e:	68b4      	ldr	r4, [r6, #8]
   25c10:	e7e9      	b.n	25be6 <_putc_r+0x1a>
   25c12:	4b08      	ldr	r3, [pc, #32]	; (25c34 <_putc_r+0x68>)
   25c14:	429c      	cmp	r4, r3
   25c16:	bf08      	it	eq
   25c18:	68f4      	ldreq	r4, [r6, #12]
   25c1a:	e7e4      	b.n	25be6 <_putc_r+0x1a>
   25c1c:	4622      	mov	r2, r4
   25c1e:	4629      	mov	r1, r5
   25c20:	4630      	mov	r0, r6
   25c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25c26:	f000 b859 	b.w	25cdc <__swbuf_r>
   25c2a:	bf00      	nop
   25c2c:	00033770 	.word	0x00033770
   25c30:	00033790 	.word	0x00033790
   25c34:	00033750 	.word	0x00033750

00025c38 <realloc>:
   25c38:	4b02      	ldr	r3, [pc, #8]	; (25c44 <realloc+0xc>)
   25c3a:	460a      	mov	r2, r1
   25c3c:	4601      	mov	r1, r0
   25c3e:	6818      	ldr	r0, [r3, #0]
   25c40:	f00b b941 	b.w	30ec6 <_realloc_r>
   25c44:	20020058 	.word	0x20020058

00025c48 <_sbrk_r>:
   25c48:	b538      	push	{r3, r4, r5, lr}
   25c4a:	2300      	movs	r3, #0
   25c4c:	4d05      	ldr	r5, [pc, #20]	; (25c64 <_sbrk_r+0x1c>)
   25c4e:	4604      	mov	r4, r0
   25c50:	4608      	mov	r0, r1
   25c52:	602b      	str	r3, [r5, #0]
   25c54:	f7ee fabc 	bl	141d0 <_sbrk>
   25c58:	1c43      	adds	r3, r0, #1
   25c5a:	d102      	bne.n	25c62 <_sbrk_r+0x1a>
   25c5c:	682b      	ldr	r3, [r5, #0]
   25c5e:	b103      	cbz	r3, 25c62 <_sbrk_r+0x1a>
   25c60:	6023      	str	r3, [r4, #0]
   25c62:	bd38      	pop	{r3, r4, r5, pc}
   25c64:	20027130 	.word	0x20027130

00025c68 <raise>:
   25c68:	4b02      	ldr	r3, [pc, #8]	; (25c74 <raise+0xc>)
   25c6a:	4601      	mov	r1, r0
   25c6c:	6818      	ldr	r0, [r3, #0]
   25c6e:	f00b b9e9 	b.w	31044 <_raise_r>
   25c72:	bf00      	nop
   25c74:	20020058 	.word	0x20020058

00025c78 <_kill_r>:
   25c78:	b538      	push	{r3, r4, r5, lr}
   25c7a:	2300      	movs	r3, #0
   25c7c:	4d06      	ldr	r5, [pc, #24]	; (25c98 <_kill_r+0x20>)
   25c7e:	4604      	mov	r4, r0
   25c80:	4608      	mov	r0, r1
   25c82:	4611      	mov	r1, r2
   25c84:	602b      	str	r3, [r5, #0]
   25c86:	f001 f8fb 	bl	26e80 <_kill>
   25c8a:	1c43      	adds	r3, r0, #1
   25c8c:	d102      	bne.n	25c94 <_kill_r+0x1c>
   25c8e:	682b      	ldr	r3, [r5, #0]
   25c90:	b103      	cbz	r3, 25c94 <_kill_r+0x1c>
   25c92:	6023      	str	r3, [r4, #0]
   25c94:	bd38      	pop	{r3, r4, r5, pc}
   25c96:	bf00      	nop
   25c98:	20027130 	.word	0x20027130

00025c9c <siprintf>:
   25c9c:	b40e      	push	{r1, r2, r3}
   25c9e:	b500      	push	{lr}
   25ca0:	b09a      	sub	sp, #104	; 0x68
   25ca2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   25ca6:	ab1b      	add	r3, sp, #108	; 0x6c
   25ca8:	9001      	str	r0, [sp, #4]
   25caa:	9005      	str	r0, [sp, #20]
   25cac:	9106      	str	r1, [sp, #24]
   25cae:	9103      	str	r1, [sp, #12]
   25cb0:	4808      	ldr	r0, [pc, #32]	; (25cd4 <siprintf+0x38>)
   25cb2:	4909      	ldr	r1, [pc, #36]	; (25cd8 <siprintf+0x3c>)
   25cb4:	f853 2b04 	ldr.w	r2, [r3], #4
   25cb8:	9104      	str	r1, [sp, #16]
   25cba:	a901      	add	r1, sp, #4
   25cbc:	6800      	ldr	r0, [r0, #0]
   25cbe:	9300      	str	r3, [sp, #0]
   25cc0:	f000 fa5a 	bl	26178 <_svfiprintf_r>
   25cc4:	9b01      	ldr	r3, [sp, #4]
   25cc6:	2200      	movs	r2, #0
   25cc8:	701a      	strb	r2, [r3, #0]
   25cca:	b01a      	add	sp, #104	; 0x68
   25ccc:	f85d eb04 	ldr.w	lr, [sp], #4
   25cd0:	b003      	add	sp, #12
   25cd2:	4770      	bx	lr
   25cd4:	20020058 	.word	0x20020058
   25cd8:	ffff0208 	.word	0xffff0208

00025cdc <__swbuf_r>:
   25cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25cde:	460e      	mov	r6, r1
   25ce0:	4614      	mov	r4, r2
   25ce2:	4605      	mov	r5, r0
   25ce4:	b118      	cbz	r0, 25cee <__swbuf_r+0x12>
   25ce6:	6983      	ldr	r3, [r0, #24]
   25ce8:	b90b      	cbnz	r3, 25cee <__swbuf_r+0x12>
   25cea:	f000 f999 	bl	26020 <__sinit>
   25cee:	4b21      	ldr	r3, [pc, #132]	; (25d74 <__swbuf_r+0x98>)
   25cf0:	429c      	cmp	r4, r3
   25cf2:	d12b      	bne.n	25d4c <__swbuf_r+0x70>
   25cf4:	686c      	ldr	r4, [r5, #4]
   25cf6:	69a3      	ldr	r3, [r4, #24]
   25cf8:	60a3      	str	r3, [r4, #8]
   25cfa:	89a3      	ldrh	r3, [r4, #12]
   25cfc:	071a      	lsls	r2, r3, #28
   25cfe:	d52f      	bpl.n	25d60 <__swbuf_r+0x84>
   25d00:	6923      	ldr	r3, [r4, #16]
   25d02:	b36b      	cbz	r3, 25d60 <__swbuf_r+0x84>
   25d04:	6923      	ldr	r3, [r4, #16]
   25d06:	b2f6      	uxtb	r6, r6
   25d08:	6820      	ldr	r0, [r4, #0]
   25d0a:	4637      	mov	r7, r6
   25d0c:	1ac0      	subs	r0, r0, r3
   25d0e:	6963      	ldr	r3, [r4, #20]
   25d10:	4283      	cmp	r3, r0
   25d12:	dc04      	bgt.n	25d1e <__swbuf_r+0x42>
   25d14:	4621      	mov	r1, r4
   25d16:	4628      	mov	r0, r5
   25d18:	f000 f92e 	bl	25f78 <_fflush_r>
   25d1c:	bb30      	cbnz	r0, 25d6c <__swbuf_r+0x90>
   25d1e:	68a3      	ldr	r3, [r4, #8]
   25d20:	3001      	adds	r0, #1
   25d22:	3b01      	subs	r3, #1
   25d24:	60a3      	str	r3, [r4, #8]
   25d26:	6823      	ldr	r3, [r4, #0]
   25d28:	1c5a      	adds	r2, r3, #1
   25d2a:	6022      	str	r2, [r4, #0]
   25d2c:	701e      	strb	r6, [r3, #0]
   25d2e:	6963      	ldr	r3, [r4, #20]
   25d30:	4283      	cmp	r3, r0
   25d32:	d004      	beq.n	25d3e <__swbuf_r+0x62>
   25d34:	89a3      	ldrh	r3, [r4, #12]
   25d36:	07db      	lsls	r3, r3, #31
   25d38:	d506      	bpl.n	25d48 <__swbuf_r+0x6c>
   25d3a:	2e0a      	cmp	r6, #10
   25d3c:	d104      	bne.n	25d48 <__swbuf_r+0x6c>
   25d3e:	4621      	mov	r1, r4
   25d40:	4628      	mov	r0, r5
   25d42:	f000 f919 	bl	25f78 <_fflush_r>
   25d46:	b988      	cbnz	r0, 25d6c <__swbuf_r+0x90>
   25d48:	4638      	mov	r0, r7
   25d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25d4c:	4b0a      	ldr	r3, [pc, #40]	; (25d78 <__swbuf_r+0x9c>)
   25d4e:	429c      	cmp	r4, r3
   25d50:	d101      	bne.n	25d56 <__swbuf_r+0x7a>
   25d52:	68ac      	ldr	r4, [r5, #8]
   25d54:	e7cf      	b.n	25cf6 <__swbuf_r+0x1a>
   25d56:	4b09      	ldr	r3, [pc, #36]	; (25d7c <__swbuf_r+0xa0>)
   25d58:	429c      	cmp	r4, r3
   25d5a:	bf08      	it	eq
   25d5c:	68ec      	ldreq	r4, [r5, #12]
   25d5e:	e7ca      	b.n	25cf6 <__swbuf_r+0x1a>
   25d60:	4621      	mov	r1, r4
   25d62:	4628      	mov	r0, r5
   25d64:	f000 f80c 	bl	25d80 <__swsetup_r>
   25d68:	2800      	cmp	r0, #0
   25d6a:	d0cb      	beq.n	25d04 <__swbuf_r+0x28>
   25d6c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   25d70:	e7ea      	b.n	25d48 <__swbuf_r+0x6c>
   25d72:	bf00      	nop
   25d74:	00033770 	.word	0x00033770
   25d78:	00033790 	.word	0x00033790
   25d7c:	00033750 	.word	0x00033750

00025d80 <__swsetup_r>:
   25d80:	4b32      	ldr	r3, [pc, #200]	; (25e4c <__swsetup_r+0xcc>)
   25d82:	b570      	push	{r4, r5, r6, lr}
   25d84:	681d      	ldr	r5, [r3, #0]
   25d86:	4606      	mov	r6, r0
   25d88:	460c      	mov	r4, r1
   25d8a:	b125      	cbz	r5, 25d96 <__swsetup_r+0x16>
   25d8c:	69ab      	ldr	r3, [r5, #24]
   25d8e:	b913      	cbnz	r3, 25d96 <__swsetup_r+0x16>
   25d90:	4628      	mov	r0, r5
   25d92:	f000 f945 	bl	26020 <__sinit>
   25d96:	4b2e      	ldr	r3, [pc, #184]	; (25e50 <__swsetup_r+0xd0>)
   25d98:	429c      	cmp	r4, r3
   25d9a:	d10f      	bne.n	25dbc <__swsetup_r+0x3c>
   25d9c:	686c      	ldr	r4, [r5, #4]
   25d9e:	89a3      	ldrh	r3, [r4, #12]
   25da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   25da4:	0719      	lsls	r1, r3, #28
   25da6:	d42c      	bmi.n	25e02 <__swsetup_r+0x82>
   25da8:	06dd      	lsls	r5, r3, #27
   25daa:	d411      	bmi.n	25dd0 <__swsetup_r+0x50>
   25dac:	2309      	movs	r3, #9
   25dae:	6033      	str	r3, [r6, #0]
   25db0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   25db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25db8:	81a3      	strh	r3, [r4, #12]
   25dba:	e03e      	b.n	25e3a <__swsetup_r+0xba>
   25dbc:	4b25      	ldr	r3, [pc, #148]	; (25e54 <__swsetup_r+0xd4>)
   25dbe:	429c      	cmp	r4, r3
   25dc0:	d101      	bne.n	25dc6 <__swsetup_r+0x46>
   25dc2:	68ac      	ldr	r4, [r5, #8]
   25dc4:	e7eb      	b.n	25d9e <__swsetup_r+0x1e>
   25dc6:	4b24      	ldr	r3, [pc, #144]	; (25e58 <__swsetup_r+0xd8>)
   25dc8:	429c      	cmp	r4, r3
   25dca:	bf08      	it	eq
   25dcc:	68ec      	ldreq	r4, [r5, #12]
   25dce:	e7e6      	b.n	25d9e <__swsetup_r+0x1e>
   25dd0:	0758      	lsls	r0, r3, #29
   25dd2:	d512      	bpl.n	25dfa <__swsetup_r+0x7a>
   25dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   25dd6:	b141      	cbz	r1, 25dea <__swsetup_r+0x6a>
   25dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   25ddc:	4299      	cmp	r1, r3
   25dde:	d002      	beq.n	25de6 <__swsetup_r+0x66>
   25de0:	4630      	mov	r0, r6
   25de2:	f7ff fc0d 	bl	25600 <_free_r>
   25de6:	2300      	movs	r3, #0
   25de8:	6363      	str	r3, [r4, #52]	; 0x34
   25dea:	89a3      	ldrh	r3, [r4, #12]
   25dec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   25df0:	81a3      	strh	r3, [r4, #12]
   25df2:	2300      	movs	r3, #0
   25df4:	6063      	str	r3, [r4, #4]
   25df6:	6923      	ldr	r3, [r4, #16]
   25df8:	6023      	str	r3, [r4, #0]
   25dfa:	89a3      	ldrh	r3, [r4, #12]
   25dfc:	f043 0308 	orr.w	r3, r3, #8
   25e00:	81a3      	strh	r3, [r4, #12]
   25e02:	6923      	ldr	r3, [r4, #16]
   25e04:	b94b      	cbnz	r3, 25e1a <__swsetup_r+0x9a>
   25e06:	89a3      	ldrh	r3, [r4, #12]
   25e08:	f403 7320 	and.w	r3, r3, #640	; 0x280
   25e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   25e10:	d003      	beq.n	25e1a <__swsetup_r+0x9a>
   25e12:	4621      	mov	r1, r4
   25e14:	4630      	mov	r0, r6
   25e16:	f000 f96f 	bl	260f8 <__smakebuf_r>
   25e1a:	89a0      	ldrh	r0, [r4, #12]
   25e1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   25e20:	f010 0301 	ands.w	r3, r0, #1
   25e24:	d00a      	beq.n	25e3c <__swsetup_r+0xbc>
   25e26:	2300      	movs	r3, #0
   25e28:	60a3      	str	r3, [r4, #8]
   25e2a:	6963      	ldr	r3, [r4, #20]
   25e2c:	425b      	negs	r3, r3
   25e2e:	61a3      	str	r3, [r4, #24]
   25e30:	6923      	ldr	r3, [r4, #16]
   25e32:	b943      	cbnz	r3, 25e46 <__swsetup_r+0xc6>
   25e34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   25e38:	d1ba      	bne.n	25db0 <__swsetup_r+0x30>
   25e3a:	bd70      	pop	{r4, r5, r6, pc}
   25e3c:	0781      	lsls	r1, r0, #30
   25e3e:	bf58      	it	pl
   25e40:	6963      	ldrpl	r3, [r4, #20]
   25e42:	60a3      	str	r3, [r4, #8]
   25e44:	e7f4      	b.n	25e30 <__swsetup_r+0xb0>
   25e46:	2000      	movs	r0, #0
   25e48:	e7f7      	b.n	25e3a <__swsetup_r+0xba>
   25e4a:	bf00      	nop
   25e4c:	20020058 	.word	0x20020058
   25e50:	00033770 	.word	0x00033770
   25e54:	00033790 	.word	0x00033790
   25e58:	00033750 	.word	0x00033750

00025e5c <__sflush_r>:
   25e5c:	898b      	ldrh	r3, [r1, #12]
   25e5e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   25e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25e66:	4605      	mov	r5, r0
   25e68:	0718      	lsls	r0, r3, #28
   25e6a:	460c      	mov	r4, r1
   25e6c:	d45f      	bmi.n	25f2e <__sflush_r+0xd2>
   25e6e:	684b      	ldr	r3, [r1, #4]
   25e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   25e74:	2b00      	cmp	r3, #0
   25e76:	818a      	strh	r2, [r1, #12]
   25e78:	dc05      	bgt.n	25e86 <__sflush_r+0x2a>
   25e7a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   25e7c:	2b00      	cmp	r3, #0
   25e7e:	dc02      	bgt.n	25e86 <__sflush_r+0x2a>
   25e80:	2000      	movs	r0, #0
   25e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25e86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   25e88:	2e00      	cmp	r6, #0
   25e8a:	d0f9      	beq.n	25e80 <__sflush_r+0x24>
   25e8c:	2300      	movs	r3, #0
   25e8e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   25e92:	682f      	ldr	r7, [r5, #0]
   25e94:	602b      	str	r3, [r5, #0]
   25e96:	d036      	beq.n	25f06 <__sflush_r+0xaa>
   25e98:	6d60      	ldr	r0, [r4, #84]	; 0x54
   25e9a:	89a3      	ldrh	r3, [r4, #12]
   25e9c:	075a      	lsls	r2, r3, #29
   25e9e:	d505      	bpl.n	25eac <__sflush_r+0x50>
   25ea0:	6863      	ldr	r3, [r4, #4]
   25ea2:	1ac0      	subs	r0, r0, r3
   25ea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25ea6:	b10b      	cbz	r3, 25eac <__sflush_r+0x50>
   25ea8:	6c23      	ldr	r3, [r4, #64]	; 0x40
   25eaa:	1ac0      	subs	r0, r0, r3
   25eac:	2300      	movs	r3, #0
   25eae:	4602      	mov	r2, r0
   25eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   25eb2:	4628      	mov	r0, r5
   25eb4:	6a21      	ldr	r1, [r4, #32]
   25eb6:	47b0      	blx	r6
   25eb8:	1c43      	adds	r3, r0, #1
   25eba:	89a3      	ldrh	r3, [r4, #12]
   25ebc:	d106      	bne.n	25ecc <__sflush_r+0x70>
   25ebe:	6829      	ldr	r1, [r5, #0]
   25ec0:	291d      	cmp	r1, #29
   25ec2:	d830      	bhi.n	25f26 <__sflush_r+0xca>
   25ec4:	4a2b      	ldr	r2, [pc, #172]	; (25f74 <__sflush_r+0x118>)
   25ec6:	40ca      	lsrs	r2, r1
   25ec8:	07d6      	lsls	r6, r2, #31
   25eca:	d52c      	bpl.n	25f26 <__sflush_r+0xca>
   25ecc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   25ed0:	2200      	movs	r2, #0
   25ed2:	b21b      	sxth	r3, r3
   25ed4:	6062      	str	r2, [r4, #4]
   25ed6:	6922      	ldr	r2, [r4, #16]
   25ed8:	04d9      	lsls	r1, r3, #19
   25eda:	81a3      	strh	r3, [r4, #12]
   25edc:	6022      	str	r2, [r4, #0]
   25ede:	d504      	bpl.n	25eea <__sflush_r+0x8e>
   25ee0:	1c42      	adds	r2, r0, #1
   25ee2:	d101      	bne.n	25ee8 <__sflush_r+0x8c>
   25ee4:	682b      	ldr	r3, [r5, #0]
   25ee6:	b903      	cbnz	r3, 25eea <__sflush_r+0x8e>
   25ee8:	6560      	str	r0, [r4, #84]	; 0x54
   25eea:	6b61      	ldr	r1, [r4, #52]	; 0x34
   25eec:	602f      	str	r7, [r5, #0]
   25eee:	2900      	cmp	r1, #0
   25ef0:	d0c6      	beq.n	25e80 <__sflush_r+0x24>
   25ef2:	f104 0344 	add.w	r3, r4, #68	; 0x44
   25ef6:	4299      	cmp	r1, r3
   25ef8:	d002      	beq.n	25f00 <__sflush_r+0xa4>
   25efa:	4628      	mov	r0, r5
   25efc:	f7ff fb80 	bl	25600 <_free_r>
   25f00:	2000      	movs	r0, #0
   25f02:	6360      	str	r0, [r4, #52]	; 0x34
   25f04:	e7bd      	b.n	25e82 <__sflush_r+0x26>
   25f06:	6a21      	ldr	r1, [r4, #32]
   25f08:	2301      	movs	r3, #1
   25f0a:	4628      	mov	r0, r5
   25f0c:	47b0      	blx	r6
   25f0e:	1c41      	adds	r1, r0, #1
   25f10:	d1c3      	bne.n	25e9a <__sflush_r+0x3e>
   25f12:	682b      	ldr	r3, [r5, #0]
   25f14:	2b00      	cmp	r3, #0
   25f16:	d0c0      	beq.n	25e9a <__sflush_r+0x3e>
   25f18:	2b1d      	cmp	r3, #29
   25f1a:	d001      	beq.n	25f20 <__sflush_r+0xc4>
   25f1c:	2b16      	cmp	r3, #22
   25f1e:	d101      	bne.n	25f24 <__sflush_r+0xc8>
   25f20:	602f      	str	r7, [r5, #0]
   25f22:	e7ad      	b.n	25e80 <__sflush_r+0x24>
   25f24:	89a3      	ldrh	r3, [r4, #12]
   25f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25f2a:	81a3      	strh	r3, [r4, #12]
   25f2c:	e7a9      	b.n	25e82 <__sflush_r+0x26>
   25f2e:	690f      	ldr	r7, [r1, #16]
   25f30:	2f00      	cmp	r7, #0
   25f32:	d0a5      	beq.n	25e80 <__sflush_r+0x24>
   25f34:	079b      	lsls	r3, r3, #30
   25f36:	680e      	ldr	r6, [r1, #0]
   25f38:	600f      	str	r7, [r1, #0]
   25f3a:	bf0c      	ite	eq
   25f3c:	694b      	ldreq	r3, [r1, #20]
   25f3e:	2300      	movne	r3, #0
   25f40:	eba6 0807 	sub.w	r8, r6, r7
   25f44:	608b      	str	r3, [r1, #8]
   25f46:	f1b8 0f00 	cmp.w	r8, #0
   25f4a:	dd99      	ble.n	25e80 <__sflush_r+0x24>
   25f4c:	4643      	mov	r3, r8
   25f4e:	463a      	mov	r2, r7
   25f50:	6a21      	ldr	r1, [r4, #32]
   25f52:	4628      	mov	r0, r5
   25f54:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   25f56:	47b0      	blx	r6
   25f58:	2800      	cmp	r0, #0
   25f5a:	dc06      	bgt.n	25f6a <__sflush_r+0x10e>
   25f5c:	89a3      	ldrh	r3, [r4, #12]
   25f5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   25f66:	81a3      	strh	r3, [r4, #12]
   25f68:	e78b      	b.n	25e82 <__sflush_r+0x26>
   25f6a:	4407      	add	r7, r0
   25f6c:	eba8 0800 	sub.w	r8, r8, r0
   25f70:	e7e9      	b.n	25f46 <__sflush_r+0xea>
   25f72:	bf00      	nop
   25f74:	20400001 	.word	0x20400001

00025f78 <_fflush_r>:
   25f78:	b538      	push	{r3, r4, r5, lr}
   25f7a:	690b      	ldr	r3, [r1, #16]
   25f7c:	4605      	mov	r5, r0
   25f7e:	460c      	mov	r4, r1
   25f80:	b1db      	cbz	r3, 25fba <_fflush_r+0x42>
   25f82:	b118      	cbz	r0, 25f8c <_fflush_r+0x14>
   25f84:	6983      	ldr	r3, [r0, #24]
   25f86:	b90b      	cbnz	r3, 25f8c <_fflush_r+0x14>
   25f88:	f000 f84a 	bl	26020 <__sinit>
   25f8c:	4b0c      	ldr	r3, [pc, #48]	; (25fc0 <_fflush_r+0x48>)
   25f8e:	429c      	cmp	r4, r3
   25f90:	d109      	bne.n	25fa6 <_fflush_r+0x2e>
   25f92:	686c      	ldr	r4, [r5, #4]
   25f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25f98:	b17b      	cbz	r3, 25fba <_fflush_r+0x42>
   25f9a:	4621      	mov	r1, r4
   25f9c:	4628      	mov	r0, r5
   25f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25fa2:	f7ff bf5b 	b.w	25e5c <__sflush_r>
   25fa6:	4b07      	ldr	r3, [pc, #28]	; (25fc4 <_fflush_r+0x4c>)
   25fa8:	429c      	cmp	r4, r3
   25faa:	d101      	bne.n	25fb0 <_fflush_r+0x38>
   25fac:	68ac      	ldr	r4, [r5, #8]
   25fae:	e7f1      	b.n	25f94 <_fflush_r+0x1c>
   25fb0:	4b05      	ldr	r3, [pc, #20]	; (25fc8 <_fflush_r+0x50>)
   25fb2:	429c      	cmp	r4, r3
   25fb4:	bf08      	it	eq
   25fb6:	68ec      	ldreq	r4, [r5, #12]
   25fb8:	e7ec      	b.n	25f94 <_fflush_r+0x1c>
   25fba:	2000      	movs	r0, #0
   25fbc:	bd38      	pop	{r3, r4, r5, pc}
   25fbe:	bf00      	nop
   25fc0:	00033770 	.word	0x00033770
   25fc4:	00033790 	.word	0x00033790
   25fc8:	00033750 	.word	0x00033750

00025fcc <std>:
   25fcc:	2300      	movs	r3, #0
   25fce:	b510      	push	{r4, lr}
   25fd0:	4604      	mov	r4, r0
   25fd2:	6083      	str	r3, [r0, #8]
   25fd4:	8181      	strh	r1, [r0, #12]
   25fd6:	4619      	mov	r1, r3
   25fd8:	6603      	str	r3, [r0, #96]	; 0x60
   25fda:	81c2      	strh	r2, [r0, #14]
   25fdc:	2208      	movs	r2, #8
   25fde:	6183      	str	r3, [r0, #24]
   25fe0:	e9c0 3300 	strd	r3, r3, [r0]
   25fe4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   25fe8:	3058      	adds	r0, #88	; 0x58
   25fea:	f00a ff64 	bl	30eb6 <memset>
   25fee:	4b05      	ldr	r3, [pc, #20]	; (26004 <std+0x38>)
   25ff0:	6224      	str	r4, [r4, #32]
   25ff2:	6263      	str	r3, [r4, #36]	; 0x24
   25ff4:	4b04      	ldr	r3, [pc, #16]	; (26008 <std+0x3c>)
   25ff6:	62a3      	str	r3, [r4, #40]	; 0x28
   25ff8:	4b04      	ldr	r3, [pc, #16]	; (2600c <std+0x40>)
   25ffa:	62e3      	str	r3, [r4, #44]	; 0x2c
   25ffc:	4b04      	ldr	r3, [pc, #16]	; (26010 <std+0x44>)
   25ffe:	6323      	str	r3, [r4, #48]	; 0x30
   26000:	bd10      	pop	{r4, pc}
   26002:	bf00      	nop
   26004:	0003127d 	.word	0x0003127d
   26008:	0003129f 	.word	0x0003129f
   2600c:	000312d7 	.word	0x000312d7
   26010:	000312fb 	.word	0x000312fb

00026014 <_cleanup_r>:
   26014:	4901      	ldr	r1, [pc, #4]	; (2601c <_cleanup_r+0x8>)
   26016:	f00b b882 	b.w	3111e <_fwalk_reent>
   2601a:	bf00      	nop
   2601c:	00025f79 	.word	0x00025f79

00026020 <__sinit>:
   26020:	6983      	ldr	r3, [r0, #24]
   26022:	b510      	push	{r4, lr}
   26024:	4604      	mov	r4, r0
   26026:	bb33      	cbnz	r3, 26076 <__sinit+0x56>
   26028:	6503      	str	r3, [r0, #80]	; 0x50
   2602a:	4a13      	ldr	r2, [pc, #76]	; (26078 <__sinit+0x58>)
   2602c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
   26030:	4b12      	ldr	r3, [pc, #72]	; (2607c <__sinit+0x5c>)
   26032:	6282      	str	r2, [r0, #40]	; 0x28
   26034:	681b      	ldr	r3, [r3, #0]
   26036:	4298      	cmp	r0, r3
   26038:	bf04      	itt	eq
   2603a:	2301      	moveq	r3, #1
   2603c:	6183      	streq	r3, [r0, #24]
   2603e:	f000 f81f 	bl	26080 <__sfp>
   26042:	6060      	str	r0, [r4, #4]
   26044:	4620      	mov	r0, r4
   26046:	f000 f81b 	bl	26080 <__sfp>
   2604a:	60a0      	str	r0, [r4, #8]
   2604c:	4620      	mov	r0, r4
   2604e:	f000 f817 	bl	26080 <__sfp>
   26052:	2200      	movs	r2, #0
   26054:	2104      	movs	r1, #4
   26056:	60e0      	str	r0, [r4, #12]
   26058:	6860      	ldr	r0, [r4, #4]
   2605a:	f7ff ffb7 	bl	25fcc <std>
   2605e:	2201      	movs	r2, #1
   26060:	2109      	movs	r1, #9
   26062:	68a0      	ldr	r0, [r4, #8]
   26064:	f7ff ffb2 	bl	25fcc <std>
   26068:	2202      	movs	r2, #2
   2606a:	2112      	movs	r1, #18
   2606c:	68e0      	ldr	r0, [r4, #12]
   2606e:	f7ff ffad 	bl	25fcc <std>
   26072:	2301      	movs	r3, #1
   26074:	61a3      	str	r3, [r4, #24]
   26076:	bd10      	pop	{r4, pc}
   26078:	00026015 	.word	0x00026015
   2607c:	0003374c 	.word	0x0003374c

00026080 <__sfp>:
   26080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26082:	4b1b      	ldr	r3, [pc, #108]	; (260f0 <__sfp+0x70>)
   26084:	4607      	mov	r7, r0
   26086:	681e      	ldr	r6, [r3, #0]
   26088:	69b3      	ldr	r3, [r6, #24]
   2608a:	b913      	cbnz	r3, 26092 <__sfp+0x12>
   2608c:	4630      	mov	r0, r6
   2608e:	f7ff ffc7 	bl	26020 <__sinit>
   26092:	3648      	adds	r6, #72	; 0x48
   26094:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   26098:	3b01      	subs	r3, #1
   2609a:	d503      	bpl.n	260a4 <__sfp+0x24>
   2609c:	6833      	ldr	r3, [r6, #0]
   2609e:	b1db      	cbz	r3, 260d8 <__sfp+0x58>
   260a0:	6836      	ldr	r6, [r6, #0]
   260a2:	e7f7      	b.n	26094 <__sfp+0x14>
   260a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   260a8:	b9a5      	cbnz	r5, 260d4 <__sfp+0x54>
   260aa:	4b12      	ldr	r3, [pc, #72]	; (260f4 <__sfp+0x74>)
   260ac:	2208      	movs	r2, #8
   260ae:	4629      	mov	r1, r5
   260b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   260b4:	6625      	str	r5, [r4, #96]	; 0x60
   260b6:	60a5      	str	r5, [r4, #8]
   260b8:	e9c4 5500 	strd	r5, r5, [r4]
   260bc:	e9c4 3503 	strd	r3, r5, [r4, #12]
   260c0:	e9c4 5505 	strd	r5, r5, [r4, #20]
   260c4:	f00a fef7 	bl	30eb6 <memset>
   260c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   260cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   260d0:	4620      	mov	r0, r4
   260d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   260d4:	3464      	adds	r4, #100	; 0x64
   260d6:	e7df      	b.n	26098 <__sfp+0x18>
   260d8:	2104      	movs	r1, #4
   260da:	4638      	mov	r0, r7
   260dc:	f00b f809 	bl	310f2 <__sfmoreglue>
   260e0:	4604      	mov	r4, r0
   260e2:	6030      	str	r0, [r6, #0]
   260e4:	2800      	cmp	r0, #0
   260e6:	d1db      	bne.n	260a0 <__sfp+0x20>
   260e8:	230c      	movs	r3, #12
   260ea:	603b      	str	r3, [r7, #0]
   260ec:	e7f0      	b.n	260d0 <__sfp+0x50>
   260ee:	bf00      	nop
   260f0:	0003374c 	.word	0x0003374c
   260f4:	ffff0001 	.word	0xffff0001

000260f8 <__smakebuf_r>:
   260f8:	898b      	ldrh	r3, [r1, #12]
   260fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   260fc:	079d      	lsls	r5, r3, #30
   260fe:	4606      	mov	r6, r0
   26100:	460c      	mov	r4, r1
   26102:	d507      	bpl.n	26114 <__smakebuf_r+0x1c>
   26104:	f104 0347 	add.w	r3, r4, #71	; 0x47
   26108:	6023      	str	r3, [r4, #0]
   2610a:	6123      	str	r3, [r4, #16]
   2610c:	2301      	movs	r3, #1
   2610e:	6163      	str	r3, [r4, #20]
   26110:	b002      	add	sp, #8
   26112:	bd70      	pop	{r4, r5, r6, pc}
   26114:	ab01      	add	r3, sp, #4
   26116:	466a      	mov	r2, sp
   26118:	f00b f820 	bl	3115c <__swhatbuf_r>
   2611c:	9900      	ldr	r1, [sp, #0]
   2611e:	4605      	mov	r5, r0
   26120:	4630      	mov	r0, r6
   26122:	f7ff fabd 	bl	256a0 <_malloc_r>
   26126:	b948      	cbnz	r0, 2613c <__smakebuf_r+0x44>
   26128:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2612c:	059a      	lsls	r2, r3, #22
   2612e:	d4ef      	bmi.n	26110 <__smakebuf_r+0x18>
   26130:	f023 0303 	bic.w	r3, r3, #3
   26134:	f043 0302 	orr.w	r3, r3, #2
   26138:	81a3      	strh	r3, [r4, #12]
   2613a:	e7e3      	b.n	26104 <__smakebuf_r+0xc>
   2613c:	4b0d      	ldr	r3, [pc, #52]	; (26174 <__smakebuf_r+0x7c>)
   2613e:	62b3      	str	r3, [r6, #40]	; 0x28
   26140:	89a3      	ldrh	r3, [r4, #12]
   26142:	6020      	str	r0, [r4, #0]
   26144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   26148:	6120      	str	r0, [r4, #16]
   2614a:	81a3      	strh	r3, [r4, #12]
   2614c:	9b00      	ldr	r3, [sp, #0]
   2614e:	6163      	str	r3, [r4, #20]
   26150:	9b01      	ldr	r3, [sp, #4]
   26152:	b15b      	cbz	r3, 2616c <__smakebuf_r+0x74>
   26154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   26158:	4630      	mov	r0, r6
   2615a:	f000 f941 	bl	263e0 <_isatty_r>
   2615e:	b128      	cbz	r0, 2616c <__smakebuf_r+0x74>
   26160:	89a3      	ldrh	r3, [r4, #12]
   26162:	f023 0303 	bic.w	r3, r3, #3
   26166:	f043 0301 	orr.w	r3, r3, #1
   2616a:	81a3      	strh	r3, [r4, #12]
   2616c:	89a0      	ldrh	r0, [r4, #12]
   2616e:	4305      	orrs	r5, r0
   26170:	81a5      	strh	r5, [r4, #12]
   26172:	e7cd      	b.n	26110 <__smakebuf_r+0x18>
   26174:	00026015 	.word	0x00026015

00026178 <_svfiprintf_r>:
   26178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2617c:	4698      	mov	r8, r3
   2617e:	898b      	ldrh	r3, [r1, #12]
   26180:	b09d      	sub	sp, #116	; 0x74
   26182:	4607      	mov	r7, r0
   26184:	061b      	lsls	r3, r3, #24
   26186:	460d      	mov	r5, r1
   26188:	4614      	mov	r4, r2
   2618a:	d50e      	bpl.n	261aa <_svfiprintf_r+0x32>
   2618c:	690b      	ldr	r3, [r1, #16]
   2618e:	b963      	cbnz	r3, 261aa <_svfiprintf_r+0x32>
   26190:	2140      	movs	r1, #64	; 0x40
   26192:	f7ff fa85 	bl	256a0 <_malloc_r>
   26196:	6028      	str	r0, [r5, #0]
   26198:	6128      	str	r0, [r5, #16]
   2619a:	b920      	cbnz	r0, 261a6 <_svfiprintf_r+0x2e>
   2619c:	230c      	movs	r3, #12
   2619e:	603b      	str	r3, [r7, #0]
   261a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   261a4:	e0d1      	b.n	2634a <_svfiprintf_r+0x1d2>
   261a6:	2340      	movs	r3, #64	; 0x40
   261a8:	616b      	str	r3, [r5, #20]
   261aa:	2300      	movs	r3, #0
   261ac:	f8cd 800c 	str.w	r8, [sp, #12]
   261b0:	f04f 0901 	mov.w	r9, #1
   261b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 26364 <_svfiprintf_r+0x1ec>
   261b8:	9309      	str	r3, [sp, #36]	; 0x24
   261ba:	2320      	movs	r3, #32
   261bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   261c0:	2330      	movs	r3, #48	; 0x30
   261c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   261c6:	4623      	mov	r3, r4
   261c8:	469a      	mov	sl, r3
   261ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   261ce:	b10a      	cbz	r2, 261d4 <_svfiprintf_r+0x5c>
   261d0:	2a25      	cmp	r2, #37	; 0x25
   261d2:	d1f9      	bne.n	261c8 <_svfiprintf_r+0x50>
   261d4:	ebba 0b04 	subs.w	fp, sl, r4
   261d8:	d00b      	beq.n	261f2 <_svfiprintf_r+0x7a>
   261da:	465b      	mov	r3, fp
   261dc:	4622      	mov	r2, r4
   261de:	4629      	mov	r1, r5
   261e0:	4638      	mov	r0, r7
   261e2:	f00a fff0 	bl	311c6 <__ssputs_r>
   261e6:	3001      	adds	r0, #1
   261e8:	f000 80aa 	beq.w	26340 <_svfiprintf_r+0x1c8>
   261ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
   261ee:	445a      	add	r2, fp
   261f0:	9209      	str	r2, [sp, #36]	; 0x24
   261f2:	f89a 3000 	ldrb.w	r3, [sl]
   261f6:	2b00      	cmp	r3, #0
   261f8:	f000 80a2 	beq.w	26340 <_svfiprintf_r+0x1c8>
   261fc:	2300      	movs	r3, #0
   261fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26202:	f10a 0a01 	add.w	sl, sl, #1
   26206:	9304      	str	r3, [sp, #16]
   26208:	9307      	str	r3, [sp, #28]
   2620a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2620e:	931a      	str	r3, [sp, #104]	; 0x68
   26210:	e9cd 2305 	strd	r2, r3, [sp, #20]
   26214:	4654      	mov	r4, sl
   26216:	2205      	movs	r2, #5
   26218:	4852      	ldr	r0, [pc, #328]	; (26364 <_svfiprintf_r+0x1ec>)
   2621a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2621e:	f00a fe07 	bl	30e30 <memchr>
   26222:	9a04      	ldr	r2, [sp, #16]
   26224:	b9d8      	cbnz	r0, 2625e <_svfiprintf_r+0xe6>
   26226:	06d0      	lsls	r0, r2, #27
   26228:	bf44      	itt	mi
   2622a:	2320      	movmi	r3, #32
   2622c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   26230:	0711      	lsls	r1, r2, #28
   26232:	bf44      	itt	mi
   26234:	232b      	movmi	r3, #43	; 0x2b
   26236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2623a:	f89a 3000 	ldrb.w	r3, [sl]
   2623e:	2b2a      	cmp	r3, #42	; 0x2a
   26240:	d015      	beq.n	2626e <_svfiprintf_r+0xf6>
   26242:	9a07      	ldr	r2, [sp, #28]
   26244:	4654      	mov	r4, sl
   26246:	2000      	movs	r0, #0
   26248:	f04f 0c0a 	mov.w	ip, #10
   2624c:	4621      	mov	r1, r4
   2624e:	f811 3b01 	ldrb.w	r3, [r1], #1
   26252:	3b30      	subs	r3, #48	; 0x30
   26254:	2b09      	cmp	r3, #9
   26256:	d94e      	bls.n	262f6 <_svfiprintf_r+0x17e>
   26258:	b1b0      	cbz	r0, 26288 <_svfiprintf_r+0x110>
   2625a:	9207      	str	r2, [sp, #28]
   2625c:	e014      	b.n	26288 <_svfiprintf_r+0x110>
   2625e:	eba0 0308 	sub.w	r3, r0, r8
   26262:	46a2      	mov	sl, r4
   26264:	fa09 f303 	lsl.w	r3, r9, r3
   26268:	4313      	orrs	r3, r2
   2626a:	9304      	str	r3, [sp, #16]
   2626c:	e7d2      	b.n	26214 <_svfiprintf_r+0x9c>
   2626e:	9b03      	ldr	r3, [sp, #12]
   26270:	1d19      	adds	r1, r3, #4
   26272:	681b      	ldr	r3, [r3, #0]
   26274:	2b00      	cmp	r3, #0
   26276:	9103      	str	r1, [sp, #12]
   26278:	bfbb      	ittet	lt
   2627a:	425b      	neglt	r3, r3
   2627c:	f042 0202 	orrlt.w	r2, r2, #2
   26280:	9307      	strge	r3, [sp, #28]
   26282:	9307      	strlt	r3, [sp, #28]
   26284:	bfb8      	it	lt
   26286:	9204      	strlt	r2, [sp, #16]
   26288:	7823      	ldrb	r3, [r4, #0]
   2628a:	2b2e      	cmp	r3, #46	; 0x2e
   2628c:	d10c      	bne.n	262a8 <_svfiprintf_r+0x130>
   2628e:	7863      	ldrb	r3, [r4, #1]
   26290:	2b2a      	cmp	r3, #42	; 0x2a
   26292:	d135      	bne.n	26300 <_svfiprintf_r+0x188>
   26294:	9b03      	ldr	r3, [sp, #12]
   26296:	3402      	adds	r4, #2
   26298:	1d1a      	adds	r2, r3, #4
   2629a:	681b      	ldr	r3, [r3, #0]
   2629c:	2b00      	cmp	r3, #0
   2629e:	9203      	str	r2, [sp, #12]
   262a0:	bfb8      	it	lt
   262a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   262a6:	9305      	str	r3, [sp, #20]
   262a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 26374 <_svfiprintf_r+0x1fc>
   262ac:	2203      	movs	r2, #3
   262ae:	7821      	ldrb	r1, [r4, #0]
   262b0:	4650      	mov	r0, sl
   262b2:	f00a fdbd 	bl	30e30 <memchr>
   262b6:	b140      	cbz	r0, 262ca <_svfiprintf_r+0x152>
   262b8:	2340      	movs	r3, #64	; 0x40
   262ba:	eba0 000a 	sub.w	r0, r0, sl
   262be:	3401      	adds	r4, #1
   262c0:	fa03 f000 	lsl.w	r0, r3, r0
   262c4:	9b04      	ldr	r3, [sp, #16]
   262c6:	4303      	orrs	r3, r0
   262c8:	9304      	str	r3, [sp, #16]
   262ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   262ce:	2206      	movs	r2, #6
   262d0:	4825      	ldr	r0, [pc, #148]	; (26368 <_svfiprintf_r+0x1f0>)
   262d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   262d6:	f00a fdab 	bl	30e30 <memchr>
   262da:	2800      	cmp	r0, #0
   262dc:	d038      	beq.n	26350 <_svfiprintf_r+0x1d8>
   262de:	4b23      	ldr	r3, [pc, #140]	; (2636c <_svfiprintf_r+0x1f4>)
   262e0:	bb1b      	cbnz	r3, 2632a <_svfiprintf_r+0x1b2>
   262e2:	9b03      	ldr	r3, [sp, #12]
   262e4:	3307      	adds	r3, #7
   262e6:	f023 0307 	bic.w	r3, r3, #7
   262ea:	3308      	adds	r3, #8
   262ec:	9303      	str	r3, [sp, #12]
   262ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   262f0:	4433      	add	r3, r6
   262f2:	9309      	str	r3, [sp, #36]	; 0x24
   262f4:	e767      	b.n	261c6 <_svfiprintf_r+0x4e>
   262f6:	fb0c 3202 	mla	r2, ip, r2, r3
   262fa:	460c      	mov	r4, r1
   262fc:	2001      	movs	r0, #1
   262fe:	e7a5      	b.n	2624c <_svfiprintf_r+0xd4>
   26300:	2300      	movs	r3, #0
   26302:	3401      	adds	r4, #1
   26304:	f04f 0c0a 	mov.w	ip, #10
   26308:	4619      	mov	r1, r3
   2630a:	9305      	str	r3, [sp, #20]
   2630c:	4620      	mov	r0, r4
   2630e:	f810 2b01 	ldrb.w	r2, [r0], #1
   26312:	3a30      	subs	r2, #48	; 0x30
   26314:	2a09      	cmp	r2, #9
   26316:	d903      	bls.n	26320 <_svfiprintf_r+0x1a8>
   26318:	2b00      	cmp	r3, #0
   2631a:	d0c5      	beq.n	262a8 <_svfiprintf_r+0x130>
   2631c:	9105      	str	r1, [sp, #20]
   2631e:	e7c3      	b.n	262a8 <_svfiprintf_r+0x130>
   26320:	fb0c 2101 	mla	r1, ip, r1, r2
   26324:	4604      	mov	r4, r0
   26326:	2301      	movs	r3, #1
   26328:	e7f0      	b.n	2630c <_svfiprintf_r+0x194>
   2632a:	ab03      	add	r3, sp, #12
   2632c:	462a      	mov	r2, r5
   2632e:	a904      	add	r1, sp, #16
   26330:	4638      	mov	r0, r7
   26332:	9300      	str	r3, [sp, #0]
   26334:	4b0e      	ldr	r3, [pc, #56]	; (26370 <_svfiprintf_r+0x1f8>)
   26336:	e000      	b.n	2633a <_svfiprintf_r+0x1c2>
   26338:	bf00      	nop
   2633a:	1c42      	adds	r2, r0, #1
   2633c:	4606      	mov	r6, r0
   2633e:	d1d6      	bne.n	262ee <_svfiprintf_r+0x176>
   26340:	89ab      	ldrh	r3, [r5, #12]
   26342:	065b      	lsls	r3, r3, #25
   26344:	f53f af2c 	bmi.w	261a0 <_svfiprintf_r+0x28>
   26348:	9809      	ldr	r0, [sp, #36]	; 0x24
   2634a:	b01d      	add	sp, #116	; 0x74
   2634c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26350:	ab03      	add	r3, sp, #12
   26352:	462a      	mov	r2, r5
   26354:	a904      	add	r1, sp, #16
   26356:	4638      	mov	r0, r7
   26358:	9300      	str	r3, [sp, #0]
   2635a:	4b05      	ldr	r3, [pc, #20]	; (26370 <_svfiprintf_r+0x1f8>)
   2635c:	f7ff fb10 	bl	25980 <_printf_i>
   26360:	e7eb      	b.n	2633a <_svfiprintf_r+0x1c2>
   26362:	bf00      	nop
   26364:	000376e5 	.word	0x000376e5
   26368:	000376ef 	.word	0x000376ef
   2636c:	00000000 	.word	0x00000000
   26370:	000311c7 	.word	0x000311c7
   26374:	000376eb 	.word	0x000376eb

00026378 <_write_r>:
   26378:	b538      	push	{r3, r4, r5, lr}
   2637a:	4604      	mov	r4, r0
   2637c:	4d06      	ldr	r5, [pc, #24]	; (26398 <_write_r+0x20>)
   2637e:	4608      	mov	r0, r1
   26380:	4611      	mov	r1, r2
   26382:	2200      	movs	r2, #0
   26384:	602a      	str	r2, [r5, #0]
   26386:	461a      	mov	r2, r3
   26388:	f000 fd6f 	bl	26e6a <_write>
   2638c:	1c43      	adds	r3, r0, #1
   2638e:	d102      	bne.n	26396 <_write_r+0x1e>
   26390:	682b      	ldr	r3, [r5, #0]
   26392:	b103      	cbz	r3, 26396 <_write_r+0x1e>
   26394:	6023      	str	r3, [r4, #0]
   26396:	bd38      	pop	{r3, r4, r5, pc}
   26398:	20027130 	.word	0x20027130

0002639c <_close_r>:
   2639c:	b538      	push	{r3, r4, r5, lr}
   2639e:	2300      	movs	r3, #0
   263a0:	4d05      	ldr	r5, [pc, #20]	; (263b8 <_close_r+0x1c>)
   263a2:	4604      	mov	r4, r0
   263a4:	4608      	mov	r0, r1
   263a6:	602b      	str	r3, [r5, #0]
   263a8:	f000 fd63 	bl	26e72 <_close>
   263ac:	1c43      	adds	r3, r0, #1
   263ae:	d102      	bne.n	263b6 <_close_r+0x1a>
   263b0:	682b      	ldr	r3, [r5, #0]
   263b2:	b103      	cbz	r3, 263b6 <_close_r+0x1a>
   263b4:	6023      	str	r3, [r4, #0]
   263b6:	bd38      	pop	{r3, r4, r5, pc}
   263b8:	20027130 	.word	0x20027130

000263bc <_fstat_r>:
   263bc:	b538      	push	{r3, r4, r5, lr}
   263be:	2300      	movs	r3, #0
   263c0:	4d06      	ldr	r5, [pc, #24]	; (263dc <_fstat_r+0x20>)
   263c2:	4604      	mov	r4, r0
   263c4:	4608      	mov	r0, r1
   263c6:	4611      	mov	r1, r2
   263c8:	602b      	str	r3, [r5, #0]
   263ca:	f000 fd5d 	bl	26e88 <_fstat>
   263ce:	1c43      	adds	r3, r0, #1
   263d0:	d102      	bne.n	263d8 <_fstat_r+0x1c>
   263d2:	682b      	ldr	r3, [r5, #0]
   263d4:	b103      	cbz	r3, 263d8 <_fstat_r+0x1c>
   263d6:	6023      	str	r3, [r4, #0]
   263d8:	bd38      	pop	{r3, r4, r5, pc}
   263da:	bf00      	nop
   263dc:	20027130 	.word	0x20027130

000263e0 <_isatty_r>:
   263e0:	b538      	push	{r3, r4, r5, lr}
   263e2:	2300      	movs	r3, #0
   263e4:	4d05      	ldr	r5, [pc, #20]	; (263fc <_isatty_r+0x1c>)
   263e6:	4604      	mov	r4, r0
   263e8:	4608      	mov	r0, r1
   263ea:	602b      	str	r3, [r5, #0]
   263ec:	f000 fd46 	bl	26e7c <_isatty>
   263f0:	1c43      	adds	r3, r0, #1
   263f2:	d102      	bne.n	263fa <_isatty_r+0x1a>
   263f4:	682b      	ldr	r3, [r5, #0]
   263f6:	b103      	cbz	r3, 263fa <_isatty_r+0x1a>
   263f8:	6023      	str	r3, [r4, #0]
   263fa:	bd38      	pop	{r3, r4, r5, pc}
   263fc:	20027130 	.word	0x20027130

00026400 <_lseek_r>:
   26400:	b538      	push	{r3, r4, r5, lr}
   26402:	4604      	mov	r4, r0
   26404:	4d06      	ldr	r5, [pc, #24]	; (26420 <_lseek_r+0x20>)
   26406:	4608      	mov	r0, r1
   26408:	4611      	mov	r1, r2
   2640a:	2200      	movs	r2, #0
   2640c:	602a      	str	r2, [r5, #0]
   2640e:	461a      	mov	r2, r3
   26410:	f000 fd32 	bl	26e78 <_lseek>
   26414:	1c43      	adds	r3, r0, #1
   26416:	d102      	bne.n	2641e <_lseek_r+0x1e>
   26418:	682b      	ldr	r3, [r5, #0]
   2641a:	b103      	cbz	r3, 2641e <_lseek_r+0x1e>
   2641c:	6023      	str	r3, [r4, #0]
   2641e:	bd38      	pop	{r3, r4, r5, pc}
   26420:	20027130 	.word	0x20027130

00026424 <_read_r>:
   26424:	b538      	push	{r3, r4, r5, lr}
   26426:	4604      	mov	r4, r0
   26428:	4d06      	ldr	r5, [pc, #24]	; (26444 <_read_r+0x20>)
   2642a:	4608      	mov	r0, r1
   2642c:	4611      	mov	r1, r2
   2642e:	2200      	movs	r2, #0
   26430:	602a      	str	r2, [r5, #0]
   26432:	461a      	mov	r2, r3
   26434:	f000 fd15 	bl	26e62 <_read>
   26438:	1c43      	adds	r3, r0, #1
   2643a:	d102      	bne.n	26442 <_read_r+0x1e>
   2643c:	682b      	ldr	r3, [r5, #0]
   2643e:	b103      	cbz	r3, 26442 <_read_r+0x1e>
   26440:	6023      	str	r3, [r4, #0]
   26442:	bd38      	pop	{r3, r4, r5, pc}
   26444:	20027130 	.word	0x20027130

00026448 <main>:

// This is the default main used on systems that have the standard C entry
// point. Other devices (for example FreeRTOS or ESP32) that have different
// requirements for entry code (like an app_main function) should specialize
// this main.cc file in a target-specific subfolder.
int main(int argc, char* argv[]) {
   26448:	b508      	push	{r3, lr}
  
  setup();
   2644a:	f7eb fce1 	bl	11e10 <setup>
  while (true) {
    loop();
   2644e:	f7eb fd87 	bl	11f60 <loop>
  while (true) {
   26452:	e7fc      	b.n	2644e <main+0x6>

00026454 <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
   26454:	4770      	bx	lr

00026456 <_ZN6tflite14AllOpsResolverD1Ev>:
// The magic number in the template parameter is the maximum number of ops that
// can be added to AllOpsResolver. It can be increased if needed. And most
// applications that care about the memory footprint will want to directly use
// MicroMutableOpResolver and have an application specific template parameter.
// The examples directory has sample code for this.
class AllOpsResolver : public MicroMutableOpResolver<128> {
   26456:	4770      	bx	lr

00026458 <_ZN6tflite18MicroErrorReporterD0Ev>:
   26458:	b510      	push	{r4, lr}
   2645a:	4604      	mov	r4, r0
   2645c:	f00a f8b8 	bl	305d0 <_ZdlPv>
   26460:	4620      	mov	r0, r4
   26462:	bd10      	pop	{r4, pc}

00026464 <_ZN6tflite14AllOpsResolverD0Ev>:
   26464:	b510      	push	{r4, lr}
   26466:	4604      	mov	r4, r0
   26468:	f00a f8b2 	bl	305d0 <_ZdlPv>
   2646c:	4620      	mov	r0, r4
   2646e:	bd10      	pop	{r4, pc}

00026470 <__assert_func>:
limitations under the License.
==============================================================================*/

extern "C" {

void __assert_func(const char *, int, const char *, const char *) {}
   26470:	4770      	bx	lr

00026472 <arch_printk_char_out>:
}
   26472:	2000      	movs	r0, #0
   26474:	4770      	bx	lr

00026476 <print_err>:
{
   26476:	b570      	push	{r4, r5, r6, lr}
   26478:	460d      	mov	r5, r1
   2647a:	4604      	mov	r4, r0
	out('E', ctx);
   2647c:	2045      	movs	r0, #69	; 0x45
   2647e:	47a0      	blx	r4
	out('R', ctx);
   26480:	4629      	mov	r1, r5
   26482:	2052      	movs	r0, #82	; 0x52
   26484:	47a0      	blx	r4
	out('R', ctx);
   26486:	4629      	mov	r1, r5
   26488:	4623      	mov	r3, r4
}
   2648a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
   2648e:	2052      	movs	r0, #82	; 0x52
   26490:	4718      	bx	r3

00026492 <str_out>:
{
   26492:	b530      	push	{r4, r5, lr}
   26494:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   26496:	680c      	ldr	r4, [r1, #0]
   26498:	1c55      	adds	r5, r2, #1
   2649a:	b114      	cbz	r4, 264a2 <str_out+0x10>
   2649c:	684b      	ldr	r3, [r1, #4]
   2649e:	4293      	cmp	r3, r2
   264a0:	dc01      	bgt.n	264a6 <str_out+0x14>
		ctx->count++;
   264a2:	608d      	str	r5, [r1, #8]
}
   264a4:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   264a6:	3b01      	subs	r3, #1
   264a8:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   264aa:	bf08      	it	eq
   264ac:	2200      	moveq	r2, #0
   264ae:	608d      	str	r5, [r1, #8]
   264b0:	bf0c      	ite	eq
   264b2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   264b4:	54a0      	strbne	r0, [r4, r2]
   264b6:	e7f5      	b.n	264a4 <str_out+0x12>

000264b8 <printk>:
{
   264b8:	b40f      	push	{r0, r1, r2, r3}
   264ba:	b507      	push	{r0, r1, r2, lr}
   264bc:	a904      	add	r1, sp, #16
   264be:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   264c2:	9101      	str	r1, [sp, #4]
		log_printk(fmt, ap);
   264c4:	f000 f95e 	bl	26784 <log_printk>
}
   264c8:	b003      	add	sp, #12
   264ca:	f85d eb04 	ldr.w	lr, [sp], #4
   264ce:	b004      	add	sp, #16
   264d0:	4770      	bx	lr

000264d2 <snprintk>:
{
   264d2:	b40c      	push	{r2, r3}
   264d4:	b507      	push	{r0, r1, r2, lr}
   264d6:	ab04      	add	r3, sp, #16
   264d8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   264dc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   264de:	f7eb fffd 	bl	124dc <vsnprintk>
}
   264e2:	b003      	add	sp, #12
   264e4:	f85d eb04 	ldr.w	lr, [sp], #4
   264e8:	b002      	add	sp, #8
   264ea:	4770      	bx	lr

000264ec <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   264ec:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   264ee:	f7ef fa19 	bl	15924 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   264f2:	2000      	movs	r0, #0
   264f4:	bd08      	pop	{r3, pc}

000264f6 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   264f6:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   264f8:	f7ef fa34 	bl	15964 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   264fc:	f110 0f0b 	cmn.w	r0, #11
   26500:	d005      	beq.n	2650e <sys_sem_take+0x18>
   26502:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   26506:	bf08      	it	eq
   26508:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   2650c:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   2650e:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   26512:	e7fb      	b.n	2650c <sys_sem_take+0x16>

00026514 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   26514:	4604      	mov	r4, r0
   26516:	b508      	push	{r3, lr}
   26518:	4608      	mov	r0, r1
   2651a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2651c:	461a      	mov	r2, r3
   2651e:	47a0      	blx	r4
	return z_impl_k_current_get();
   26520:	f7ef f9fa 	bl	15918 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   26524:	f7ed fc46 	bl	13db4 <z_impl_k_thread_abort>

00026528 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
   26528:	6803      	ldr	r3, [r0, #0]
   2652a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
   2652e:	6883      	ldr	r3, [r0, #8]
   26530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
   26534:	bf2c      	ite	cs
   26536:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
   2653a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   2653e:	4770      	bx	lr

00026540 <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
   26540:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
   26542:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
   26544:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
   26546:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
   2654a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
   2654e:	bf2c      	ite	cs
   26550:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
   26554:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   26558:	bd10      	pop	{r4, pc}

0002655a <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   2655a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2655e:	4604      	mov	r4, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   26560:	2200      	movs	r2, #0
   26562:	460d      	mov	r5, r1
   26564:	f7ff ffe0 	bl	26528 <chunk_field>
   26568:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2656a:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
   2656c:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2656e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   26572:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   26576:	bf34      	ite	cc
   26578:	2000      	movcc	r0, #0
   2657a:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
   2657c:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   2657e:	f1c0 001f 	rsb	r0, r0, #31
   26582:	1a80      	subs	r0, r0, r2
   26584:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
   26588:	684a      	ldr	r2, [r1, #4]
   2658a:	1c56      	adds	r6, r2, #1
   2658c:	604e      	str	r6, [r1, #4]
   2658e:	b9a2      	cbnz	r2, 265ba <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
   26590:	2201      	movs	r2, #1
   26592:	fa02 f100 	lsl.w	r1, r2, r0
   26596:	6962      	ldr	r2, [r4, #20]
   26598:	430a      	orrs	r2, r1
   2659a:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
   2659c:	4629      	mov	r1, r5
		h->buckets[b].next = c;
   2659e:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
   265a2:	2202      	movs	r2, #2
   265a4:	462b      	mov	r3, r5
   265a6:	4620      	mov	r0, r4
   265a8:	f7ff ffca 	bl	26540 <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
   265ac:	2203      	movs	r2, #3
   265ae:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
   265b0:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
   265b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
   265b6:	f7ff bfc3 	b.w	26540 <chunk_set>
		chunkid_t second = h->buckets[b].next;
   265ba:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
   265be:	2202      	movs	r2, #2
   265c0:	4639      	mov	r1, r7
   265c2:	4620      	mov	r0, r4
   265c4:	f7ff ffb0 	bl	26528 <chunk_field>
   265c8:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
   265ca:	4603      	mov	r3, r0
   265cc:	2202      	movs	r2, #2
   265ce:	4629      	mov	r1, r5
   265d0:	4620      	mov	r0, r4
   265d2:	f7ff ffb5 	bl	26540 <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
   265d6:	463b      	mov	r3, r7
   265d8:	2203      	movs	r2, #3
   265da:	4629      	mov	r1, r5
   265dc:	4620      	mov	r0, r4
   265de:	f7ff ffaf 	bl	26540 <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
   265e2:	2203      	movs	r2, #3
   265e4:	4631      	mov	r1, r6
   265e6:	462b      	mov	r3, r5
   265e8:	4620      	mov	r0, r4
   265ea:	f7ff ffa9 	bl	26540 <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
   265ee:	2202      	movs	r2, #2
   265f0:	4639      	mov	r1, r7
   265f2:	e7dd      	b.n	265b0 <free_list_add+0x56>

000265f4 <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   265f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   265f6:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   265f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
   265fc:	1dcc      	adds	r4, r1, #7
   265fe:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
   26602:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   26606:	1b1b      	subs	r3, r3, r4
   26608:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   2660a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2660e:	bf2c      	ite	cs
   26610:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
   26614:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
   26616:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
   26618:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   2661a:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
   2661c:	60e1      	str	r1, [r4, #12]
   2661e:	bf94      	ite	ls
   26620:	2100      	movls	r1, #0
   26622:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   26624:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   26628:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
   2662a:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   2662c:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
   26630:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
   26634:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   26636:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
   2663a:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   2663e:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
   26640:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
   26642:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
   26644:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
   26646:	68a2      	ldr	r2, [r4, #8]
   26648:	42ba      	cmp	r2, r7
   2664a:	bf94      	ite	ls
   2664c:	2200      	movls	r2, #0
   2664e:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
   26650:	f1c2 021f 	rsb	r2, r2, #31
   26654:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   26656:	4290      	cmp	r0, r2
   26658:	dd0a      	ble.n	26670 <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
   2665a:	4620      	mov	r0, r4
   2665c:	1a5b      	subs	r3, r3, r1
   2665e:	2200      	movs	r2, #0
   26660:	f7ff ff6e 	bl	26540 <chunk_set>
	free_list_add(h, h->chunk0);
   26664:	4620      	mov	r0, r4
   26666:	6921      	ldr	r1, [r4, #16]
}
   26668:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
   2666c:	f7ff bf75 	b.w	2655a <free_list_add>
		heap->heap->buckets[i].list_size = 0;
   26670:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   26674:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
   26676:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
   2667a:	e7e4      	b.n	26646 <sys_heap_init+0x52>

0002667c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2667c:	4770      	bx	lr

0002667e <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   2667e:	f7ee ba55 	b.w	14b2c <SystemInit>

00026682 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   26682:	2300      	movs	r3, #0
	list->head = NULL;
   26684:	e9c0 3300 	strd	r3, r3, [r0]
}
   26688:	4770      	bx	lr

0002668a <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   2668a:	6803      	ldr	r3, [r0, #0]
   2668c:	b923      	cbnz	r3, 26698 <log_list_add_tail+0xe>
		list->head = msg;
   2668e:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   26690:	2300      	movs	r3, #0
	list->tail = msg;
   26692:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   26694:	600b      	str	r3, [r1, #0]
}
   26696:	4770      	bx	lr
		list->tail->next = msg;
   26698:	6843      	ldr	r3, [r0, #4]
   2669a:	6019      	str	r1, [r3, #0]
   2669c:	e7f8      	b.n	26690 <log_list_add_tail+0x6>

0002669e <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   2669e:	6800      	ldr	r0, [r0, #0]
   266a0:	4770      	bx	lr

000266a2 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
   266a2:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
   266a4:	b10b      	cbz	r3, 266aa <log_list_head_get+0x8>
		list->head = list->head->next;
   266a6:	681a      	ldr	r2, [r3, #0]
   266a8:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
   266aa:	4618      	mov	r0, r3
   266ac:	4770      	bx	lr

000266ae <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   266ae:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   266b0:	f7ec fa1c 	bl	12aec <log_msg_chunk_alloc>

	if (msg != NULL) {
   266b4:	b118      	cbz	r0, 266be <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   266b6:	2301      	movs	r3, #1
   266b8:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   266ba:	2300      	movs	r3, #0
   266bc:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
   266be:	bd08      	pop	{r3, pc}

000266c0 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   266c0:	f7ec bee6 	b.w	13490 <z_timer_cycle_get_32>

000266c4 <dummy_timestamp>:
   266c4:	2000      	movs	r0, #0
   266c6:	4770      	bx	lr

000266c8 <log_0>:
{
   266c8:	b513      	push	{r0, r1, r4, lr}
   266ca:	4604      	mov	r4, r0
   266cc:	9101      	str	r1, [sp, #4]
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   266ce:	f7ff ffee 	bl	266ae <z_log_msg_std_alloc>

	if (msg != NULL) {
   266d2:	b130      	cbz	r0, 266e2 <log_0+0x1a>
		msg_finalize(msg, src_level);
   266d4:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   266d6:	6104      	str	r4, [r0, #16]
}
   266d8:	b002      	add	sp, #8
   266da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   266de:	f7ec b927 	b.w	12930 <msg_finalize>
}
   266e2:	b002      	add	sp, #8
   266e4:	bd10      	pop	{r4, pc}

000266e6 <log_1>:
{
   266e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   266e8:	460c      	mov	r4, r1
   266ea:	4611      	mov	r1, r2
   266ec:	4605      	mov	r5, r0
   266ee:	9101      	str	r1, [sp, #4]
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   266f0:	f7ff ffdd 	bl	266ae <z_log_msg_std_alloc>

	if (msg != NULL) {
   266f4:	b160      	cbz	r0, 26710 <log_1+0x2a>
		msg->str = str;
   266f6:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   266f8:	2501      	movs	r5, #1
   266fa:	7a42      	ldrb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   266fc:	6144      	str	r4, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
   266fe:	f365 1207 	bfi	r2, r5, #4, #4
   26702:	7242      	strb	r2, [r0, #9]
		msg_finalize(msg, src_level);
   26704:	9901      	ldr	r1, [sp, #4]
}
   26706:	b003      	add	sp, #12
   26708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		msg_finalize(msg, src_level);
   2670c:	f7ec b910 	b.w	12930 <msg_finalize>
}
   26710:	b003      	add	sp, #12
   26712:	bd30      	pop	{r4, r5, pc}

00026714 <log_2>:
{
   26714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26716:	460e      	mov	r6, r1
   26718:	4619      	mov	r1, r3
   2671a:	4607      	mov	r7, r0
   2671c:	4615      	mov	r5, r2
   2671e:	9101      	str	r1, [sp, #4]
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   26720:	f7ff ffc5 	bl	266ae <z_log_msg_std_alloc>

	if (msg != NULL) {
   26724:	b168      	cbz	r0, 26742 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   26726:	2202      	movs	r2, #2
   26728:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2672a:	e9c0 6505 	strd	r6, r5, [r0, #20]
		msg->hdr.params.std.nargs = 2U;
   2672e:	f362 1307 	bfi	r3, r2, #4, #4
   26732:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   26734:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   26736:	6107      	str	r7, [r0, #16]
}
   26738:	b003      	add	sp, #12
   2673a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		msg_finalize(msg, src_level);
   2673e:	f7ec b8f7 	b.w	12930 <msg_finalize>
}
   26742:	b003      	add	sp, #12
   26744:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026746 <log_3>:
{
   26746:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2674a:	460f      	mov	r7, r1
   2674c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   26750:	4680      	mov	r8, r0
   26752:	4616      	mov	r6, r2
   26754:	461d      	mov	r5, r3
   26756:	9101      	str	r1, [sp, #4]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   26758:	f7ff ffa9 	bl	266ae <z_log_msg_std_alloc>

	if (msg != NULL) {
   2675c:	b178      	cbz	r0, 2677e <log_3+0x38>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   2675e:	2203      	movs	r2, #3
   26760:	7a43      	ldrb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   26762:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->hdr.params.std.nargs = 3U;
   26766:	f362 1307 	bfi	r3, r2, #4, #4
   2676a:	7243      	strb	r3, [r0, #9]
		msg_finalize(msg, src_level);
   2676c:	9901      	ldr	r1, [sp, #4]
		msg->str = str;
   2676e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->payload.single.args[2] = arg3;
   26772:	61c5      	str	r5, [r0, #28]
}
   26774:	b002      	add	sp, #8
   26776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   2677a:	f7ec b8d9 	b.w	12930 <msg_finalize>
}
   2677e:	b002      	add	sp, #8
   26780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026784 <log_printk>:
{
   26784:	b500      	push	{lr}
   26786:	b0c3      	sub	sp, #268	; 0x10c
   26788:	4602      	mov	r2, r0
   2678a:	460b      	mov	r3, r1
			length = vsnprintk(str, sizeof(str), fmt, ap);
   2678c:	a801      	add	r0, sp, #4
   2678e:	f240 1101 	movw	r1, #257	; 0x101
   26792:	f7eb fea3 	bl	124dc <vsnprintk>
			msg = log_msg_hexdump_create(NULL, str, length);
   26796:	f240 1201 	movw	r2, #257	; 0x101
   2679a:	4282      	cmp	r2, r0
   2679c:	bf28      	it	cs
   2679e:	4602      	movcs	r2, r0
   267a0:	a901      	add	r1, sp, #4
   267a2:	2000      	movs	r0, #0
   267a4:	f000 f898 	bl	268d8 <log_msg_hexdump_create>
			if (msg == NULL) {
   267a8:	b118      	cbz	r0, 267b2 <log_printk+0x2e>
			msg_finalize(msg, src_level_union.structure);
   267aa:	f04f 0100 	mov.w	r1, #0
   267ae:	f7ec f8bf 	bl	12930 <msg_finalize>
}
   267b2:	b043      	add	sp, #268	; 0x10c
   267b4:	f85d fb04 	ldr.w	pc, [sp], #4

000267b8 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   267b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   267bc:	461c      	mov	r4, r3
   267be:	460e      	mov	r6, r1
	u32_t available_len = msg->hdr.params.hexdump.length;
   267c0:	8901      	ldrh	r1, [r0, #8]
{
   267c2:	f89d 8020 	ldrb.w	r8, [sp, #32]
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
   267c6:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
	u32_t available_len = msg->hdr.params.hexdump.length;
   267ca:	ea4f 0391 	mov.w	r3, r1, lsr #2
	if (offset >= available_len) {
   267ce:	d303      	bcc.n	267d8 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   267d0:	2300      	movs	r3, #0
   267d2:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   267d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   267d8:	6811      	ldr	r1, [r2, #0]
   267da:	4421      	add	r1, r4
   267dc:	4299      	cmp	r1, r3
		*length = available_len - offset;
   267de:	bf84      	itt	hi
   267e0:	1b19      	subhi	r1, r3, r4
   267e2:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   267e4:	2b0c      	cmp	r3, #12
	req_len = *length;
   267e6:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   267ea:	d92a      	bls.n	26842 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   267ec:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   267ee:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   267f0:	d82d      	bhi.n	2684e <log_msg_hexdump_data_op+0x96>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   267f2:	2308      	movs	r3, #8
		head_data = msg->payload.ext.data.bytes;
   267f4:	3018      	adds	r0, #24
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   267f6:	454b      	cmp	r3, r9
   267f8:	bf28      	it	cs
   267fa:	464b      	movcs	r3, r9
   267fc:	4420      	add	r0, r4
   267fe:	461d      	mov	r5, r3
   26800:	461a      	mov	r2, r3
		if (put_op) {
   26802:	f1b8 0f00 	cmp.w	r8, #0
   26806:	d01f      	beq.n	26848 <log_msg_hexdump_data_op+0x90>
   26808:	4631      	mov	r1, r6
   2680a:	f00a fb2d 	bl	30e68 <memcpy>
		req_len -= cpy_len;
   2680e:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   26812:	442e      	add	r6, r5
	while (req_len > 0) {
   26814:	f1b9 0f00 	cmp.w	r9, #0
   26818:	d0dc      	beq.n	267d4 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   2681a:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2681e:	454d      	cmp	r5, r9
   26820:	bf28      	it	cs
   26822:	464d      	movcs	r5, r9
		if (put_op) {
   26824:	1d20      	adds	r0, r4, #4
   26826:	462a      	mov	r2, r5
   26828:	4438      	add	r0, r7
   2682a:	f1b8 0f00 	cmp.w	r8, #0
   2682e:	d014      	beq.n	2685a <log_msg_hexdump_data_op+0xa2>
   26830:	4631      	mov	r1, r6
   26832:	f00a fb19 	bl	30e68 <memcpy>
		offset = 0;
   26836:	2400      	movs	r4, #0
		cont = cont->next;
   26838:	683f      	ldr	r7, [r7, #0]
		req_len -= cpy_len;
   2683a:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   2683e:	442e      	add	r6, r5
   26840:	e7e8      	b.n	26814 <log_msg_hexdump_data_op+0x5c>
	struct log_msg_cont *cont = NULL;
   26842:	2700      	movs	r7, #0
		head_data = msg->payload.single.bytes;
   26844:	3014      	adds	r0, #20
	if (offset < chunk_len) {
   26846:	e7d6      	b.n	267f6 <log_msg_hexdump_data_op+0x3e>
   26848:	4601      	mov	r1, r0
   2684a:	4630      	mov	r0, r6
   2684c:	e7dd      	b.n	2680a <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   2684e:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   26850:	2c1b      	cmp	r4, #27
   26852:	d9df      	bls.n	26814 <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   26854:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   26856:	3c1c      	subs	r4, #28
   26858:	e7fa      	b.n	26850 <log_msg_hexdump_data_op+0x98>
   2685a:	4601      	mov	r1, r0
   2685c:	4630      	mov	r0, r6
   2685e:	e7e8      	b.n	26832 <log_msg_hexdump_data_op+0x7a>

00026860 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26860:	3004      	adds	r0, #4
   26862:	e8d0 3fef 	ldaex	r3, [r0]
   26866:	3301      	adds	r3, #1
   26868:	e8c0 3fe2 	stlex	r2, r3, [r0]
   2686c:	2a00      	cmp	r2, #0
   2686e:	d1f8      	bne.n	26862 <log_msg_get+0x2>
}
   26870:	4770      	bx	lr

00026872 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   26872:	7a40      	ldrb	r0, [r0, #9]
}
   26874:	0900      	lsrs	r0, r0, #4
   26876:	4770      	bx	lr

00026878 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   26878:	7a43      	ldrb	r3, [r0, #9]
   2687a:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2687e:	ea4f 1213 	mov.w	r2, r3, lsr #4
   26882:	d216      	bcs.n	268b2 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   26884:	2a03      	cmp	r2, #3
   26886:	d803      	bhi.n	26890 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   26888:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2688c:	6948      	ldr	r0, [r1, #20]
   2688e:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   26890:	2901      	cmp	r1, #1
   26892:	d803      	bhi.n	2689c <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   26894:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   26898:	6988      	ldr	r0, [r1, #24]
   2689a:	4770      	bx	lr
	cont = msg->payload.ext.next;
   2689c:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   2689e:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   268a0:	2906      	cmp	r1, #6
   268a2:	d803      	bhi.n	268ac <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   268a4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   268a8:	6848      	ldr	r0, [r1, #4]
   268aa:	4770      	bx	lr
		cont = cont->next;
   268ac:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   268ae:	3907      	subs	r1, #7
		cont = cont->next;
   268b0:	e7f6      	b.n	268a0 <log_msg_arg_get+0x28>
		return 0;
   268b2:	2000      	movs	r0, #0
}
   268b4:	4770      	bx	lr

000268b6 <log_msg_put>:
{
   268b6:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   268b8:	1d02      	adds	r2, r0, #4
   268ba:	e8d2 1fef 	ldaex	r1, [r2]
   268be:	3901      	subs	r1, #1
   268c0:	e8c2 1fec 	stlex	ip, r1, [r2]
   268c4:	f1bc 0f00 	cmp.w	ip, #0
   268c8:	d1f7      	bne.n	268ba <log_msg_put+0x4>
	if (msg->hdr.ref_cnt == 0) {
   268ca:	685b      	ldr	r3, [r3, #4]
   268cc:	b90b      	cbnz	r3, 268d2 <log_msg_put+0x1c>
		msg_free(msg);
   268ce:	f7ec b921 	b.w	12b14 <msg_free>
}
   268d2:	4770      	bx	lr

000268d4 <log_msg_str_get>:
}
   268d4:	6900      	ldr	r0, [r0, #16]
   268d6:	4770      	bx	lr

000268d8 <log_msg_hexdump_create>:
{
   268d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   268dc:	f643 75ff 	movw	r5, #16383	; 0x3fff
   268e0:	4295      	cmp	r5, r2
{
   268e2:	4680      	mov	r8, r0
   268e4:	460e      	mov	r6, r1
   268e6:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   268e8:	bf28      	it	cs
   268ea:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   268ec:	f7ec f8fe 	bl	12aec <log_msg_chunk_alloc>
	if (msg == NULL) {
   268f0:	4604      	mov	r4, r0
   268f2:	b378      	cbz	r0, 26954 <log_msg_hexdump_create+0x7c>
	msg->hdr.ref_cnt = 1;
   268f4:	2301      	movs	r3, #1
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   268f6:	8902      	ldrh	r2, [r0, #8]
	msg->hdr.ref_cnt = 1;
   268f8:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   268fa:	00ab      	lsls	r3, r5, #2
   268fc:	f043 0301 	orr.w	r3, r3, #1
   26900:	f002 0202 	and.w	r2, r2, #2
   26904:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   26906:	2f0c      	cmp	r7, #12
	msg->str = str;
   26908:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   2690c:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2690e:	f100 0814 	add.w	r8, r0, #20
   26912:	d916      	bls.n	26942 <log_msg_hexdump_create+0x6a>
   26914:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   26916:	7a02      	ldrb	r2, [r0, #8]
   26918:	6183      	str	r3, [r0, #24]
   2691a:	6873      	ldr	r3, [r6, #4]
   2691c:	f042 0202 	orr.w	r2, r2, #2
   26920:	61c3      	str	r3, [r0, #28]
		msg->payload.ext.next = NULL;
   26922:	2300      	movs	r3, #0
   26924:	4699      	mov	r9, r3
   26926:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   26928:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2692a:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2692c:	3d08      	subs	r5, #8
	while (length > 0) {
   2692e:	b18d      	cbz	r5, 26954 <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   26930:	f7ec f8dc 	bl	12aec <log_msg_chunk_alloc>
		if (cont == NULL) {
   26934:	4607      	mov	r7, r0
   26936:	b980      	cbnz	r0, 2695a <log_msg_hexdump_create+0x82>
			msg_free(msg);
   26938:	4620      	mov	r0, r4
   2693a:	f7ec f8eb 	bl	12b14 <msg_free>
			return NULL;
   2693e:	463c      	mov	r4, r7
   26940:	e008      	b.n	26954 <log_msg_hexdump_create+0x7c>
   26942:	462a      	mov	r2, r5
   26944:	4631      	mov	r1, r6
   26946:	4640      	mov	r0, r8
   26948:	f00a fa8e 	bl	30e68 <memcpy>
		msg->hdr.params.generic.ext = 0;
   2694c:	7a23      	ldrb	r3, [r4, #8]
   2694e:	f36f 0341 	bfc	r3, #1, #1
   26952:	7223      	strb	r3, [r4, #8]
}
   26954:	4620      	mov	r0, r4
   26956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   2695a:	2d1c      	cmp	r5, #28
   2695c:	462f      	mov	r7, r5
   2695e:	bf28      	it	cs
   26960:	271c      	movcs	r7, #28
		*prev_cont = cont;
   26962:	f8c8 0000 	str.w	r0, [r8]
   26966:	4631      	mov	r1, r6
		cont->next = NULL;
   26968:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   2696c:	4680      	mov	r8, r0
   2696e:	463a      	mov	r2, r7
   26970:	3004      	adds	r0, #4
   26972:	f00a fa79 	bl	30e68 <memcpy>
		data += chunk_length;
   26976:	443e      	add	r6, r7
		length -= chunk_length;
   26978:	1bed      	subs	r5, r5, r7
   2697a:	e7d8      	b.n	2692e <log_msg_hexdump_create+0x56>

0002697c <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
   2697c:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   2697e:	2400      	movs	r4, #0
   26980:	9400      	str	r4, [sp, #0]
   26982:	f7ff ff19 	bl	267b8 <log_msg_hexdump_data_op>
}
   26986:	b002      	add	sp, #8
   26988:	bd10      	pop	{r4, pc}

0002698a <buffer_write>:
{
   2698a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2698c:	4606      	mov	r6, r0
   2698e:	460d      	mov	r5, r1
   26990:	4614      	mov	r4, r2
   26992:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   26994:	4621      	mov	r1, r4
   26996:	4628      	mov	r0, r5
   26998:	463a      	mov	r2, r7
   2699a:	47b0      	blx	r6
	} while (len != 0);
   2699c:	1a24      	subs	r4, r4, r0
		buf += processed;
   2699e:	4405      	add	r5, r0
	} while (len != 0);
   269a0:	d1f8      	bne.n	26994 <buffer_write+0xa>
}
   269a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000269a4 <std_print>:
{
   269a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   269a8:	b08e      	sub	sp, #56	; 0x38
   269aa:	af0e      	add	r7, sp, #56	; 0x38
   269ac:	4680      	mov	r8, r0
   269ae:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   269b0:	f7ff ff90 	bl	268d4 <log_msg_str_get>
   269b4:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
   269b6:	4640      	mov	r0, r8
   269b8:	f7ff ff5b 	bl	26872 <log_msg_nargs_get>
	for (i = 0; i < nargs; i++) {
   269bc:	f04f 0900 	mov.w	r9, #0
	u32_t nargs = log_msg_nargs_get(msg);
   269c0:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
   269c2:	0083      	lsls	r3, r0, #2
   269c4:	3307      	adds	r3, #7
   269c6:	f023 0307 	bic.w	r3, r3, #7
   269ca:	ebad 0d03 	sub.w	sp, sp, r3
   269ce:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   269d0:	45d1      	cmp	r9, sl
   269d2:	d116      	bne.n	26a02 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   269d4:	4640      	mov	r0, r8
   269d6:	f7ff ff4c 	bl	26872 <log_msg_nargs_get>
   269da:	280f      	cmp	r0, #15
   269dc:	d81e      	bhi.n	26a1c <std_print+0x78>
   269de:	e8df f010 	tbh	[pc, r0, lsl #1]
   269e2:	0019      	.short	0x0019
   269e4:	00260020 	.word	0x00260020
   269e8:	0036002d 	.word	0x0036002d
   269ec:	004e0041 	.word	0x004e0041
   269f0:	006e005d 	.word	0x006e005d
   269f4:	00960081 	.word	0x00960081
   269f8:	00c600ad 	.word	0x00c600ad
   269fc:	00fe00e1 	.word	0x00fe00e1
   26a00:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   26a02:	4649      	mov	r1, r9
   26a04:	4640      	mov	r0, r8
   26a06:	f7ff ff37 	bl	26878 <log_msg_arg_get>
   26a0a:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   26a0e:	f109 0901 	add.w	r9, r9, #1
   26a12:	e7dd      	b.n	269d0 <std_print+0x2c>
		print_formatted(log_output, str);
   26a14:	4631      	mov	r1, r6
   26a16:	4628      	mov	r0, r5
   26a18:	f7ec f8ba 	bl	12b90 <print_formatted>
}
   26a1c:	46bd      	mov	sp, r7
   26a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   26a22:	4631      	mov	r1, r6
   26a24:	4628      	mov	r0, r5
   26a26:	6822      	ldr	r2, [r4, #0]
   26a28:	f7ec f8b2 	bl	12b90 <print_formatted>
		break;
   26a2c:	e7f6      	b.n	26a1c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   26a2e:	4631      	mov	r1, r6
   26a30:	e9d4 2300 	ldrd	r2, r3, [r4]
   26a34:	4628      	mov	r0, r5
   26a36:	f7ec f8ab 	bl	12b90 <print_formatted>
		break;
   26a3a:	e7ef      	b.n	26a1c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   26a3c:	68a3      	ldr	r3, [r4, #8]
   26a3e:	4631      	mov	r1, r6
   26a40:	9300      	str	r3, [sp, #0]
   26a42:	4628      	mov	r0, r5
   26a44:	e9d4 2300 	ldrd	r2, r3, [r4]
   26a48:	f7ec f8a2 	bl	12b90 <print_formatted>
		break;
   26a4c:	e7e6      	b.n	26a1c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26a4e:	68e3      	ldr	r3, [r4, #12]
   26a50:	4631      	mov	r1, r6
   26a52:	9301      	str	r3, [sp, #4]
   26a54:	68a3      	ldr	r3, [r4, #8]
   26a56:	4628      	mov	r0, r5
   26a58:	9300      	str	r3, [sp, #0]
   26a5a:	e9d4 2300 	ldrd	r2, r3, [r4]
   26a5e:	f7ec f897 	bl	12b90 <print_formatted>
		break;
   26a62:	e7db      	b.n	26a1c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26a64:	6923      	ldr	r3, [r4, #16]
   26a66:	4631      	mov	r1, r6
   26a68:	9302      	str	r3, [sp, #8]
   26a6a:	68e3      	ldr	r3, [r4, #12]
   26a6c:	4628      	mov	r0, r5
   26a6e:	9301      	str	r3, [sp, #4]
   26a70:	68a3      	ldr	r3, [r4, #8]
   26a72:	9300      	str	r3, [sp, #0]
   26a74:	e9d4 2300 	ldrd	r2, r3, [r4]
   26a78:	f7ec f88a 	bl	12b90 <print_formatted>
		break;
   26a7c:	e7ce      	b.n	26a1c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26a7e:	6963      	ldr	r3, [r4, #20]
   26a80:	4631      	mov	r1, r6
   26a82:	9303      	str	r3, [sp, #12]
   26a84:	6923      	ldr	r3, [r4, #16]
   26a86:	4628      	mov	r0, r5
   26a88:	9302      	str	r3, [sp, #8]
   26a8a:	68e3      	ldr	r3, [r4, #12]
   26a8c:	9301      	str	r3, [sp, #4]
   26a8e:	68a3      	ldr	r3, [r4, #8]
   26a90:	9300      	str	r3, [sp, #0]
   26a92:	e9d4 2300 	ldrd	r2, r3, [r4]
   26a96:	f7ec f87b 	bl	12b90 <print_formatted>
		break;
   26a9a:	e7bf      	b.n	26a1c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26a9c:	69a3      	ldr	r3, [r4, #24]
   26a9e:	4631      	mov	r1, r6
   26aa0:	9304      	str	r3, [sp, #16]
   26aa2:	6963      	ldr	r3, [r4, #20]
   26aa4:	4628      	mov	r0, r5
   26aa6:	9303      	str	r3, [sp, #12]
   26aa8:	6923      	ldr	r3, [r4, #16]
   26aaa:	9302      	str	r3, [sp, #8]
   26aac:	68e3      	ldr	r3, [r4, #12]
   26aae:	9301      	str	r3, [sp, #4]
   26ab0:	68a3      	ldr	r3, [r4, #8]
   26ab2:	9300      	str	r3, [sp, #0]
   26ab4:	e9d4 2300 	ldrd	r2, r3, [r4]
   26ab8:	f7ec f86a 	bl	12b90 <print_formatted>
		break;
   26abc:	e7ae      	b.n	26a1c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26abe:	69e3      	ldr	r3, [r4, #28]
   26ac0:	4631      	mov	r1, r6
   26ac2:	9305      	str	r3, [sp, #20]
   26ac4:	69a3      	ldr	r3, [r4, #24]
   26ac6:	4628      	mov	r0, r5
   26ac8:	9304      	str	r3, [sp, #16]
   26aca:	6963      	ldr	r3, [r4, #20]
   26acc:	9303      	str	r3, [sp, #12]
   26ace:	6923      	ldr	r3, [r4, #16]
   26ad0:	9302      	str	r3, [sp, #8]
   26ad2:	68e3      	ldr	r3, [r4, #12]
   26ad4:	9301      	str	r3, [sp, #4]
   26ad6:	68a3      	ldr	r3, [r4, #8]
   26ad8:	9300      	str	r3, [sp, #0]
   26ada:	e9d4 2300 	ldrd	r2, r3, [r4]
   26ade:	f7ec f857 	bl	12b90 <print_formatted>
		break;
   26ae2:	e79b      	b.n	26a1c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26ae4:	6a23      	ldr	r3, [r4, #32]
   26ae6:	4631      	mov	r1, r6
   26ae8:	9306      	str	r3, [sp, #24]
   26aea:	69e3      	ldr	r3, [r4, #28]
   26aec:	4628      	mov	r0, r5
   26aee:	9305      	str	r3, [sp, #20]
   26af0:	69a3      	ldr	r3, [r4, #24]
   26af2:	9304      	str	r3, [sp, #16]
   26af4:	6963      	ldr	r3, [r4, #20]
   26af6:	9303      	str	r3, [sp, #12]
   26af8:	6923      	ldr	r3, [r4, #16]
   26afa:	9302      	str	r3, [sp, #8]
   26afc:	68e3      	ldr	r3, [r4, #12]
   26afe:	9301      	str	r3, [sp, #4]
   26b00:	68a3      	ldr	r3, [r4, #8]
   26b02:	9300      	str	r3, [sp, #0]
   26b04:	e9d4 2300 	ldrd	r2, r3, [r4]
   26b08:	f7ec f842 	bl	12b90 <print_formatted>
		break;
   26b0c:	e786      	b.n	26a1c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26b10:	4631      	mov	r1, r6
   26b12:	9307      	str	r3, [sp, #28]
   26b14:	6a23      	ldr	r3, [r4, #32]
   26b16:	4628      	mov	r0, r5
   26b18:	9306      	str	r3, [sp, #24]
   26b1a:	69e3      	ldr	r3, [r4, #28]
   26b1c:	9305      	str	r3, [sp, #20]
   26b1e:	69a3      	ldr	r3, [r4, #24]
   26b20:	9304      	str	r3, [sp, #16]
   26b22:	6963      	ldr	r3, [r4, #20]
   26b24:	9303      	str	r3, [sp, #12]
   26b26:	6923      	ldr	r3, [r4, #16]
   26b28:	9302      	str	r3, [sp, #8]
   26b2a:	68e3      	ldr	r3, [r4, #12]
   26b2c:	9301      	str	r3, [sp, #4]
   26b2e:	68a3      	ldr	r3, [r4, #8]
   26b30:	9300      	str	r3, [sp, #0]
   26b32:	e9d4 2300 	ldrd	r2, r3, [r4]
   26b36:	f7ec f82b 	bl	12b90 <print_formatted>
		break;
   26b3a:	e76f      	b.n	26a1c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26b3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26b3e:	4631      	mov	r1, r6
   26b40:	9308      	str	r3, [sp, #32]
   26b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26b44:	4628      	mov	r0, r5
   26b46:	9307      	str	r3, [sp, #28]
   26b48:	6a23      	ldr	r3, [r4, #32]
   26b4a:	9306      	str	r3, [sp, #24]
   26b4c:	69e3      	ldr	r3, [r4, #28]
   26b4e:	9305      	str	r3, [sp, #20]
   26b50:	69a3      	ldr	r3, [r4, #24]
   26b52:	9304      	str	r3, [sp, #16]
   26b54:	6963      	ldr	r3, [r4, #20]
   26b56:	9303      	str	r3, [sp, #12]
   26b58:	6923      	ldr	r3, [r4, #16]
   26b5a:	9302      	str	r3, [sp, #8]
   26b5c:	68e3      	ldr	r3, [r4, #12]
   26b5e:	9301      	str	r3, [sp, #4]
   26b60:	68a3      	ldr	r3, [r4, #8]
   26b62:	9300      	str	r3, [sp, #0]
   26b64:	e9d4 2300 	ldrd	r2, r3, [r4]
   26b68:	f7ec f812 	bl	12b90 <print_formatted>
		break;
   26b6c:	e756      	b.n	26a1c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26b6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26b70:	4631      	mov	r1, r6
   26b72:	9309      	str	r3, [sp, #36]	; 0x24
   26b74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26b76:	4628      	mov	r0, r5
   26b78:	9308      	str	r3, [sp, #32]
   26b7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26b7c:	9307      	str	r3, [sp, #28]
   26b7e:	6a23      	ldr	r3, [r4, #32]
   26b80:	9306      	str	r3, [sp, #24]
   26b82:	69e3      	ldr	r3, [r4, #28]
   26b84:	9305      	str	r3, [sp, #20]
   26b86:	69a3      	ldr	r3, [r4, #24]
   26b88:	9304      	str	r3, [sp, #16]
   26b8a:	6963      	ldr	r3, [r4, #20]
   26b8c:	9303      	str	r3, [sp, #12]
   26b8e:	6923      	ldr	r3, [r4, #16]
   26b90:	9302      	str	r3, [sp, #8]
   26b92:	68e3      	ldr	r3, [r4, #12]
   26b94:	9301      	str	r3, [sp, #4]
   26b96:	68a3      	ldr	r3, [r4, #8]
   26b98:	9300      	str	r3, [sp, #0]
   26b9a:	e9d4 2300 	ldrd	r2, r3, [r4]
   26b9e:	f7eb fff7 	bl	12b90 <print_formatted>
		break;
   26ba2:	e73b      	b.n	26a1c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26ba4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26ba6:	4631      	mov	r1, r6
   26ba8:	930a      	str	r3, [sp, #40]	; 0x28
   26baa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26bac:	4628      	mov	r0, r5
   26bae:	9309      	str	r3, [sp, #36]	; 0x24
   26bb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26bb2:	9308      	str	r3, [sp, #32]
   26bb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26bb6:	9307      	str	r3, [sp, #28]
   26bb8:	6a23      	ldr	r3, [r4, #32]
   26bba:	9306      	str	r3, [sp, #24]
   26bbc:	69e3      	ldr	r3, [r4, #28]
   26bbe:	9305      	str	r3, [sp, #20]
   26bc0:	69a3      	ldr	r3, [r4, #24]
   26bc2:	9304      	str	r3, [sp, #16]
   26bc4:	6963      	ldr	r3, [r4, #20]
   26bc6:	9303      	str	r3, [sp, #12]
   26bc8:	6923      	ldr	r3, [r4, #16]
   26bca:	9302      	str	r3, [sp, #8]
   26bcc:	68e3      	ldr	r3, [r4, #12]
   26bce:	9301      	str	r3, [sp, #4]
   26bd0:	68a3      	ldr	r3, [r4, #8]
   26bd2:	9300      	str	r3, [sp, #0]
   26bd4:	e9d4 2300 	ldrd	r2, r3, [r4]
   26bd8:	f7eb ffda 	bl	12b90 <print_formatted>
		break;
   26bdc:	e71e      	b.n	26a1c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26be0:	4631      	mov	r1, r6
   26be2:	930b      	str	r3, [sp, #44]	; 0x2c
   26be4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26be6:	4628      	mov	r0, r5
   26be8:	930a      	str	r3, [sp, #40]	; 0x28
   26bea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26bec:	9309      	str	r3, [sp, #36]	; 0x24
   26bee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26bf0:	9308      	str	r3, [sp, #32]
   26bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26bf4:	9307      	str	r3, [sp, #28]
   26bf6:	6a23      	ldr	r3, [r4, #32]
   26bf8:	9306      	str	r3, [sp, #24]
   26bfa:	69e3      	ldr	r3, [r4, #28]
   26bfc:	9305      	str	r3, [sp, #20]
   26bfe:	69a3      	ldr	r3, [r4, #24]
   26c00:	9304      	str	r3, [sp, #16]
   26c02:	6963      	ldr	r3, [r4, #20]
   26c04:	9303      	str	r3, [sp, #12]
   26c06:	6923      	ldr	r3, [r4, #16]
   26c08:	9302      	str	r3, [sp, #8]
   26c0a:	68e3      	ldr	r3, [r4, #12]
   26c0c:	9301      	str	r3, [sp, #4]
   26c0e:	68a3      	ldr	r3, [r4, #8]
   26c10:	9300      	str	r3, [sp, #0]
   26c12:	e9d4 2300 	ldrd	r2, r3, [r4]
   26c16:	f7eb ffbb 	bl	12b90 <print_formatted>
		break;
   26c1a:	e6ff      	b.n	26a1c <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   26c1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   26c1e:	4631      	mov	r1, r6
   26c20:	930c      	str	r3, [sp, #48]	; 0x30
   26c22:	6b63      	ldr	r3, [r4, #52]	; 0x34
   26c24:	4628      	mov	r0, r5
   26c26:	930b      	str	r3, [sp, #44]	; 0x2c
   26c28:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26c2a:	930a      	str	r3, [sp, #40]	; 0x28
   26c2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   26c2e:	9309      	str	r3, [sp, #36]	; 0x24
   26c30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   26c32:	9308      	str	r3, [sp, #32]
   26c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26c36:	9307      	str	r3, [sp, #28]
   26c38:	6a23      	ldr	r3, [r4, #32]
   26c3a:	9306      	str	r3, [sp, #24]
   26c3c:	69e3      	ldr	r3, [r4, #28]
   26c3e:	9305      	str	r3, [sp, #20]
   26c40:	69a3      	ldr	r3, [r4, #24]
   26c42:	9304      	str	r3, [sp, #16]
   26c44:	6963      	ldr	r3, [r4, #20]
   26c46:	9303      	str	r3, [sp, #12]
   26c48:	6923      	ldr	r3, [r4, #16]
   26c4a:	9302      	str	r3, [sp, #8]
   26c4c:	68e3      	ldr	r3, [r4, #12]
   26c4e:	9301      	str	r3, [sp, #4]
   26c50:	68a3      	ldr	r3, [r4, #8]
   26c52:	9300      	str	r3, [sp, #0]
   26c54:	e9d4 2300 	ldrd	r2, r3, [r4]
   26c58:	f7eb ff9a 	bl	12b90 <print_formatted>
}
   26c5c:	e6de      	b.n	26a1c <std_print+0x78>

00026c5e <log_output_flush>:
		     log_output->control_block->offset,
   26c5e:	6842      	ldr	r2, [r0, #4]
{
   26c60:	b510      	push	{r4, lr}
	buffer_write(log_output->func, log_output->buf,
   26c62:	e9d2 2300 	ldrd	r2, r3, [r2]
{
   26c66:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   26c68:	6881      	ldr	r1, [r0, #8]
   26c6a:	6800      	ldr	r0, [r0, #0]
   26c6c:	f7ff fe8d 	bl	2698a <buffer_write>
	log_output->control_block->offset = 0;
   26c70:	2200      	movs	r2, #0
   26c72:	6863      	ldr	r3, [r4, #4]
   26c74:	601a      	str	r2, [r3, #0]
}
   26c76:	bd10      	pop	{r4, pc}

00026c78 <out_func>:
{
   26c78:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   26c7a:	684b      	ldr	r3, [r1, #4]
{
   26c7c:	4605      	mov	r5, r0
	if (out_ctx->control_block->offset == out_ctx->size) {
   26c7e:	681a      	ldr	r2, [r3, #0]
   26c80:	68cb      	ldr	r3, [r1, #12]
{
   26c82:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   26c84:	429a      	cmp	r2, r3
   26c86:	d102      	bne.n	26c8e <out_func+0x16>
		log_output_flush(out_ctx);
   26c88:	4608      	mov	r0, r1
   26c8a:	f7ff ffe8 	bl	26c5e <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   26c8e:	6863      	ldr	r3, [r4, #4]
   26c90:	e8d3 2fef 	ldaex	r2, [r3]
   26c94:	1c51      	adds	r1, r2, #1
   26c96:	e8c3 1fe0 	stlex	r0, r1, [r3]
   26c9a:	2800      	cmp	r0, #0
   26c9c:	d1f8      	bne.n	26c90 <out_func+0x18>
	out_ctx->buf[idx] = (u8_t)c;
   26c9e:	68a3      	ldr	r3, [r4, #8]
}
   26ca0:	2000      	movs	r0, #0
	out_ctx->buf[idx] = (u8_t)c;
   26ca2:	549d      	strb	r5, [r3, r2]
}
   26ca4:	bd38      	pop	{r3, r4, r5, pc}

00026ca6 <__cxa_atexit>:
{
	ARG_UNUSED(destructor);
	ARG_UNUSED(objptr);
	ARG_UNUSED(dso);
	return 0;
}
   26ca6:	2000      	movs	r0, #0
   26ca8:	4770      	bx	lr

00026caa <get_status>:
	if (data->started) {
   26caa:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
   26cac:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
   26cae:	b2c9      	uxtb	r1, r1
	if (data->started) {
   26cb0:	fb02 3101 	mla	r1, r2, r1, r3
   26cb4:	7a4b      	ldrb	r3, [r1, #9]
   26cb6:	b923      	cbnz	r3, 26cc2 <get_status+0x18>
	if (data->ref > 0) {
   26cb8:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
   26cba:	fab0 f080 	clz	r0, r0
   26cbe:	0940      	lsrs	r0, r0, #5
   26cc0:	4770      	bx	lr
   26cc2:	2002      	movs	r0, #2
}
   26cc4:	4770      	bx	lr

00026cc6 <clock_stop>:
{
   26cc6:	b570      	push	{r4, r5, r6, lr}
   26cc8:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
   26cca:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
   26ccc:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
   26cce:	f04f 0320 	mov.w	r3, #32
   26cd2:	f3ef 8611 	mrs	r6, BASEPRI
   26cd6:	f383 8811 	msr	BASEPRI, r3
   26cda:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
   26cde:	230c      	movs	r3, #12
   26ce0:	434b      	muls	r3, r1
   26ce2:	18ea      	adds	r2, r5, r3
   26ce4:	7a10      	ldrb	r0, [r2, #8]
   26ce6:	b1a0      	cbz	r0, 26d12 <clock_stop+0x4c>
	data->ref--;
   26ce8:	3801      	subs	r0, #1
   26cea:	b2c0      	uxtb	r0, r0
   26cec:	7210      	strb	r0, [r2, #8]
	if (data->ref == 0) {
   26cee:	b998      	cbnz	r0, 26d18 <clock_stop+0x52>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
   26cf0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	list->head = NULL;
   26cf4:	50e8      	str	r0, [r5, r3]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26cf6:	78cb      	ldrb	r3, [r1, #3]
   26cf8:	2101      	movs	r1, #1
   26cfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   26cfe:	f503 43a0 	add.w	r3, r3, #20480	; 0x5000
	list->tail = NULL;
   26d02:	6050      	str	r0, [r2, #4]
   26d04:	6019      	str	r1, [r3, #0]
		data->started = false;
   26d06:	7250      	strb	r0, [r2, #9]
	__asm__ volatile(
   26d08:	f386 8811 	msr	BASEPRI, r6
   26d0c:	f3bf 8f6f 	isb	sy
}
   26d10:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
   26d12:	f06f 0077 	mvn.w	r0, #119	; 0x77
   26d16:	e7f7      	b.n	26d08 <clock_stop+0x42>
	int err = 0;
   26d18:	2000      	movs	r0, #0
   26d1a:	e7f5      	b.n	26d08 <clock_stop+0x42>

00026d1c <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
   26d1c:	2200      	movs	r2, #0
   26d1e:	f7ec ba09 	b.w	13134 <clock_async_start>

00026d22 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   26d22:	4770      	bx	lr

00026d24 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   26d24:	4770      	bx	lr

00026d26 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   26d26:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   26d28:	68c1      	ldr	r1, [r0, #12]
  if (RdOff <= WrOff) {
   26d2a:	428b      	cmp	r3, r1
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   26d2c:	bf97      	itett	ls
   26d2e:	6882      	ldrls	r2, [r0, #8]
    r = RdOff - WrOff - 1u;
   26d30:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   26d34:	18d2      	addls	r2, r2, r3
   26d36:	f102 32ff 	addls.w	r2, r2, #4294967295	; 0xffffffff
   26d3a:	bf94      	ite	ls
   26d3c:	1a50      	subls	r0, r2, r1
    r = RdOff - WrOff - 1u;
   26d3e:	1a58      	subhi	r0, r3, r1
}
   26d40:	4770      	bx	lr

00026d42 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   26d42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   26d46:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   26d4a:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   26d4c:	eba9 0804 	sub.w	r8, r9, r4
   26d50:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   26d52:	4590      	cmp	r8, r2
   26d54:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   26d56:	460f      	mov	r7, r1
  if (Rem > NumBytes) {
   26d58:	4414      	add	r4, r2
   26d5a:	d904      	bls.n	26d66 <_WriteNoCheck+0x24>
   26d5c:	f00a f884 	bl	30e68 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   26d60:	60ec      	str	r4, [r5, #12]
}
   26d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   26d66:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
   26d68:	eba4 0409 	sub.w	r4, r4, r9
   26d6c:	f00a f87c 	bl	30e68 <memcpy>
   26d70:	4622      	mov	r2, r4
   26d72:	6868      	ldr	r0, [r5, #4]
   26d74:	eb07 0108 	add.w	r1, r7, r8
   26d78:	e7f0      	b.n	26d5c <_WriteNoCheck+0x1a>

00026d7a <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   26d7a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26d7e:	4606      	mov	r6, r0
   26d80:	4689      	mov	r9, r1
   26d82:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   26d84:	f04f 0800 	mov.w	r8, #0
  WrOff = pRing->WrOff;
   26d88:	68c5      	ldr	r5, [r0, #12]
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   26d8a:	6934      	ldr	r4, [r6, #16]
    if (RdOff > WrOff) {
   26d8c:	68b3      	ldr	r3, [r6, #8]
   26d8e:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   26d90:	bf28      	it	cs
   26d92:	18e4      	addcs	r4, r4, r3
   26d94:	3c01      	subs	r4, #1
   26d96:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   26d98:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   26d9a:	42bc      	cmp	r4, r7
   26d9c:	bf28      	it	cs
   26d9e:	463c      	movcs	r4, r7
   26da0:	4294      	cmp	r4, r2
   26da2:	bf28      	it	cs
   26da4:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY(pRing->pBuffer + WrOff, pBuffer, NumBytesToWrite);
   26da6:	6870      	ldr	r0, [r6, #4]
   26da8:	4649      	mov	r1, r9
   26daa:	4428      	add	r0, r5
   26dac:	4622      	mov	r2, r4
   26dae:	f00a f85b 	bl	30e68 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   26db2:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   26db4:	4425      	add	r5, r4
      WrOff = 0u;
   26db6:	42ab      	cmp	r3, r5
   26db8:	bf08      	it	eq
   26dba:	2500      	moveq	r5, #0
  } while (NumBytes);
   26dbc:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   26dbe:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   26dc0:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   26dc2:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   26dc4:	d1e1      	bne.n	26d8a <_WriteBlocking+0x10>
}
   26dc6:	4640      	mov	r0, r8
   26dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00026dcc <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   26dcc:	f7ec bb7a 	b.w	134c4 <_DoInit>

00026dd0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   26dd0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   26dd2:	f7ff fffb 	bl	26dcc <SEGGER_RTT_Init>

	return 0;
}
   26dd6:	2000      	movs	r0, #0
   26dd8:	bd08      	pop	{r3, pc}

00026dda <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   26dda:	2100      	movs	r1, #0
   26ddc:	2001      	movs	r0, #1
   26dde:	f7ec bceb 	b.w	137b8 <z_arm_fatal_error>

00026de2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   26de2:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   26de4:	6800      	ldr	r0, [r0, #0]
   26de6:	f7ec bce7 	b.w	137b8 <z_arm_fatal_error>

00026dea <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   26dea:	b508      	push	{r3, lr}
	handler();
   26dec:	f7ec fd1c 	bl	13828 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   26df0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   26df4:	f7ec bfb2 	b.w	13d5c <z_arm_exc_exit>

00026df8 <__aeabi_atexit>:
 * @param dso Dynamic Shared Object handle for shared libraries
 *
 * Wrapper for __cxa_atexit()
 */
int __aeabi_atexit(void *objptr, void (*destructor)(void *), void *dso)
{
   26df8:	460b      	mov	r3, r1
	return __cxa_atexit(destructor, objptr, dso);
   26dfa:	4601      	mov	r1, r0
   26dfc:	4618      	mov	r0, r3
   26dfe:	f7ff bf52 	b.w	26ca6 <__cxa_atexit>

00026e02 <mpu_configure_region>:
{
   26e02:	b530      	push	{r4, r5, lr}
	p_attr->rbar = attr->rbar &
   26e04:	890a      	ldrh	r2, [r1, #8]
   26e06:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
   26e08:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
   26e0a:	684c      	ldr	r4, [r1, #4]
   26e0c:	f002 021f 	and.w	r2, r2, #31
{
   26e10:	b085      	sub	sp, #20
   26e12:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	region_conf.base = new_region->start;
   26e16:	9300      	str	r3, [sp, #0]
   26e18:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
   26e1c:	f023 031f 	bic.w	r3, r3, #31
   26e20:	1e62      	subs	r2, r4, #1
   26e22:	4413      	add	r3, r2
   26e24:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
   26e28:	280f      	cmp	r0, #15
   26e2a:	4604      	mov	r4, r0
   26e2c:	9303      	str	r3, [sp, #12]
   26e2e:	d905      	bls.n	26e3c <mpu_configure_region+0x3a>
   26e30:	f7ed f828 	bl	13e84 <region_allocate_and_init.part.0>
   26e34:	4604      	mov	r4, r0
}
   26e36:	4620      	mov	r0, r4
   26e38:	b005      	add	sp, #20
   26e3a:	bd30      	pop	{r4, r5, pc}
	region_init(index, region_conf);
   26e3c:	4669      	mov	r1, sp
   26e3e:	f7ed f809 	bl	13e54 <region_init>
	return region_allocate_and_init(index,
   26e42:	e7f8      	b.n	26e36 <mpu_configure_region+0x34>

00026e44 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
   26e44:	e840 f000 	tt	r0, r0
   26e48:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
   26e4a:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
   26e4e:	bf14      	ite	ne
   26e50:	4618      	movne	r0, r3
   26e52:	f06f 0015 	mvneq.w	r0, #21
   26e56:	4770      	bx	lr

00026e58 <_stdout_hook_default>:
}
   26e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26e5c:	4770      	bx	lr

00026e5e <_stdin_hook_default>:
}
   26e5e:	2000      	movs	r0, #0
   26e60:	4770      	bx	lr

00026e62 <_read>:
{
   26e62:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
   26e64:	4611      	mov	r1, r2
   26e66:	f7ed b97f 	b.w	14168 <z_impl_zephyr_read_stdin>

00026e6a <_write>:
{
   26e6a:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
   26e6c:	4611      	mov	r1, r2
   26e6e:	f7ed b98f 	b.w	14190 <z_impl_zephyr_write_stdout>

00026e72 <_close>:
   26e72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26e76:	4770      	bx	lr

00026e78 <_lseek>:
}
   26e78:	2000      	movs	r0, #0
   26e7a:	4770      	bx	lr

00026e7c <_isatty>:
}
   26e7c:	2001      	movs	r0, #1
   26e7e:	4770      	bx	lr

00026e80 <_kill>:
}
   26e80:	2000      	movs	r0, #0
   26e82:	4770      	bx	lr

00026e84 <_getpid>:
}
   26e84:	2000      	movs	r0, #0
   26e86:	4770      	bx	lr

00026e88 <_fstat>:
	st->st_mode = S_IFCHR;
   26e88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
}
   26e8c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   26e8e:	604b      	str	r3, [r1, #4]
}
   26e90:	4770      	bx	lr

00026e92 <__errno>:
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   26e92:	f7ed bf69 	b.w	14d68 <z_impl_z_errno>

00026e96 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e96:	6843      	ldr	r3, [r0, #4]
}
   26e98:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26e9a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   26e9c:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
   26e9e:	600b      	str	r3, [r1, #0]
}
   26ea0:	4770      	bx	lr

00026ea2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26ea2:	6843      	ldr	r3, [r0, #4]
   26ea4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   26ea6:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   26ea8:	4042      	eors	r2, r0
   26eaa:	400a      	ands	r2, r1
   26eac:	4042      	eors	r2, r0
    p_reg->OUT = value;
   26eae:	605a      	str	r2, [r3, #4]
}
   26eb0:	2000      	movs	r0, #0
   26eb2:	4770      	bx	lr

00026eb4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26eb4:	6843      	ldr	r3, [r0, #4]
}
   26eb6:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26eb8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   26eba:	6099      	str	r1, [r3, #8]
}
   26ebc:	4770      	bx	lr

00026ebe <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26ebe:	6843      	ldr	r3, [r0, #4]
}
   26ec0:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26ec2:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   26ec4:	60d9      	str	r1, [r3, #12]
}
   26ec6:	4770      	bx	lr

00026ec8 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26ec8:	6843      	ldr	r3, [r0, #4]
}
   26eca:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26ecc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   26ece:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
   26ed0:	4059      	eors	r1, r3
    p_reg->OUT = value;
   26ed2:	6051      	str	r1, [r2, #4]
}
   26ed4:	4770      	bx	lr

00026ed6 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   26ed6:	68c3      	ldr	r3, [r0, #12]
{
   26ed8:	b530      	push	{r4, r5, lr}
Z_GENLIST_IS_EMPTY(slist)
   26eda:	6858      	ldr	r0, [r3, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   26edc:	b158      	cbz	r0, 26ef6 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26ede:	2400      	movs	r4, #0
   26ee0:	4281      	cmp	r1, r0
   26ee2:	d113      	bne.n	26f0c <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   26ee4:	6808      	ldr	r0, [r1, #0]
   26ee6:	b95c      	cbnz	r4, 26f00 <gpio_nrfx_manage_callback+0x2a>
   26ee8:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   26eea:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   26eec:	42a1      	cmp	r1, r4
   26eee:	d100      	bne.n	26ef2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   26ef0:	6098      	str	r0, [r3, #8]
	parent->next = child;
   26ef2:	2000      	movs	r0, #0
   26ef4:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   26ef6:	b972      	cbnz	r2, 26f16 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   26ef8:	2000      	movs	r0, #0
}
   26efa:	bd30      	pop	{r4, r5, pc}
   26efc:	4628      	mov	r0, r5
   26efe:	e7ef      	b.n	26ee0 <gpio_nrfx_manage_callback+0xa>
   26f00:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   26f02:	6898      	ldr	r0, [r3, #8]
   26f04:	4281      	cmp	r1, r0
	list->tail = node;
   26f06:	bf08      	it	eq
   26f08:	609c      	streq	r4, [r3, #8]
}
   26f0a:	e7f2      	b.n	26ef2 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26f0c:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26f0e:	4604      	mov	r4, r0
   26f10:	2d00      	cmp	r5, #0
   26f12:	d1f3      	bne.n	26efc <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   26f14:	b13a      	cbz	r2, 26f26 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   26f16:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   26f18:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   26f1a:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   26f1c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   26f1e:	2800      	cmp	r0, #0
   26f20:	d1ea      	bne.n	26ef8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   26f22:	6099      	str	r1, [r3, #8]
}
   26f24:	e7e9      	b.n	26efa <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   26f26:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   26f2a:	e7e6      	b.n	26efa <gpio_nrfx_manage_callback+0x24>

00026f2c <gpio_nrfx_pin_disable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   26f2c:	2201      	movs	r2, #1
{
   26f2e:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   26f30:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   26f32:	408a      	lsls	r2, r1
   26f34:	6923      	ldr	r3, [r4, #16]
   26f36:	ea23 0302 	bic.w	r3, r3, r2
   26f3a:	6123      	str	r3, [r4, #16]
}
   26f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   26f40:	f7ed b9dc 	b.w	142fc <gpiote_pin_int_cfg>

00026f44 <gpio_nrfx_pin_enable_callback>:
	WRITE_BIT(data->int_en, pin, enable);
   26f44:	2201      	movs	r2, #1
{
   26f46:	b410      	push	{r4}
	struct gpio_nrfx_data *data = get_port_data(port);
   26f48:	68c4      	ldr	r4, [r0, #12]
	WRITE_BIT(data->int_en, pin, enable);
   26f4a:	408a      	lsls	r2, r1
   26f4c:	6923      	ldr	r3, [r4, #16]
   26f4e:	4313      	orrs	r3, r2
   26f50:	6123      	str	r3, [r4, #16]
}
   26f52:	f85d 4b04 	ldr.w	r4, [sp], #4
	return gpiote_pin_int_cfg(port, pin);
   26f56:	f7ed b9d1 	b.w	142fc <gpiote_pin_int_cfg>

00026f5a <any_other_channel_is_active>:
{
   26f5a:	2300      	movs	r3, #0
   26f5c:	b530      	push	{r4, r5, lr}
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   26f5e:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
   26f60:	b2da      	uxtb	r2, r3
   26f62:	4282      	cmp	r2, r0
   26f64:	d007      	beq.n	26f76 <any_other_channel_is_active+0x1c>
	u16_t pulse_cycle =
   26f66:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
   26f6a:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   26f6e:	b112      	cbz	r2, 26f76 <any_other_channel_is_active+0x1c>
   26f70:	898d      	ldrh	r5, [r1, #12]
   26f72:	4295      	cmp	r5, r2
   26f74:	d804      	bhi.n	26f80 <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   26f76:	3301      	adds	r3, #1
   26f78:	2b04      	cmp	r3, #4
   26f7a:	d1f1      	bne.n	26f60 <any_other_channel_is_active+0x6>
	return false;
   26f7c:	2000      	movs	r0, #0
}
   26f7e:	bd30      	pop	{r4, r5, pc}
			return true;
   26f80:	2001      	movs	r0, #1
   26f82:	e7fc      	b.n	26f7e <any_other_channel_is_active+0x24>

00026f84 <uarte_nrfx_config_get>:
{
   26f84:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   26f86:	68c2      	ldr	r2, [r0, #12]
   26f88:	e892 0003 	ldmia.w	r2, {r0, r1}
   26f8c:	e883 0003 	stmia.w	r3, {r0, r1}
}
   26f90:	2000      	movs	r0, #0
   26f92:	4770      	bx	lr

00026f94 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   26f94:	6843      	ldr	r3, [r0, #4]
   26f96:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   26f98:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   26f9c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   26fa0:	4770      	bx	lr

00026fa2 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   26fa2:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   26fa4:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   26fa6:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26fa8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26fac:	b138      	cbz	r0, 26fbe <uarte_nrfx_poll_in+0x1c>
	*c = data->rx_data;
   26fae:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26fb0:	2000      	movs	r0, #0
   26fb2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26fb4:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26fb6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26fba:	601a      	str	r2, [r3, #0]
	return 0;
   26fbc:	4770      	bx	lr
		return -1;
   26fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   26fc2:	4770      	bx	lr

00026fc4 <uarte_nrfx_poll_out>:
{
   26fc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   26fc8:	6843      	ldr	r3, [r0, #4]
{
   26fca:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
   26fce:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   26fd0:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
   26fd2:	f000 f983 	bl	272dc <k_is_in_isr>
   26fd6:	b9c0      	cbnz	r0, 2700a <uarte_nrfx_poll_out+0x46>
   26fd8:	2564      	movs	r5, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   26fda:	f04f 0801 	mov.w	r8, #1
   26fde:	f106 0708 	add.w	r7, r6, #8
   26fe2:	e8d7 3fef 	ldaex	r3, [r7]
   26fe6:	2b00      	cmp	r3, #0
   26fe8:	d103      	bne.n	26ff2 <uarte_nrfx_poll_out+0x2e>
   26fea:	e8c7 8fe2 	stlex	r2, r8, [r7]
   26fee:	2a00      	cmp	r2, #0
   26ff0:	d1f7      	bne.n	26fe2 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
   26ff2:	d00c      	beq.n	2700e <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
   26ff4:	2021      	movs	r0, #33	; 0x21
   26ff6:	2100      	movs	r1, #0
   26ff8:	3d01      	subs	r5, #1
   26ffa:	f7ee fc6d 	bl	158d8 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   26ffe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   27002:	d1ee      	bne.n	26fe2 <uarte_nrfx_poll_out+0x1e>
}
   27004:	b002      	add	sp, #8
   27006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
   2700a:	2301      	movs	r3, #1
   2700c:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2700e:	2300      	movs	r3, #0
   27010:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   27014:	f10d 0307 	add.w	r3, sp, #7
   27018:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2701c:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2701e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
   27022:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27026:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   27028:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
   2702c:	b923      	cbnz	r3, 27038 <uarte_nrfx_poll_out+0x74>
   2702e:	2001      	movs	r0, #1
   27030:	f000 f807 	bl	27042 <nrfx_busy_wait>
   27034:	3d01      	subs	r5, #1
   27036:	d1f7      	bne.n	27028 <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27038:	2301      	movs	r3, #1
   2703a:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   2703c:	2300      	movs	r3, #0
   2703e:	60b3      	str	r3, [r6, #8]
   27040:	e7e0      	b.n	27004 <uarte_nrfx_poll_out+0x40>

00027042 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   27042:	f000 b951 	b.w	272e8 <z_impl_k_busy_wait>

00027046 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
   27046:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   27048:	2402      	movs	r4, #2
    p_cb->flags = flags;
   2704a:	724a      	strb	r2, [r1, #9]
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   2704c:	720c      	strb	r4, [r1, #8]
    if (p_cb->handler)
   2704e:	6809      	ldr	r1, [r1, #0]
   27050:	b171      	cbz	r1, 27070 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   27052:	f012 0f04 	tst.w	r2, #4
   27056:	bf0c      	ite	eq
   27058:	2182      	moveq	r1, #130	; 0x82
   2705a:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   2705c:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   2705e:	bf48      	it	mi
   27060:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   27064:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   27066:	bf48      	it	mi
   27068:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   2706c:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   27070:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   27072:	f04f 0100 	mov.w	r1, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27076:	bf58      	it	pl
   27078:	2201      	movpl	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2707a:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2707e:	bf56      	itet	pl
   27080:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   27082:	18c0      	addmi	r0, r0, r3
    return 0;
   27084:	4608      	movpl	r0, r1
}
   27086:	bd10      	pop	{r4, pc}

00027088 <nrfx_pwm_stop>:
    p_reg->SHORTS = mask;
   27088:	2200      	movs	r2, #0
{
   2708a:	b538      	push	{r3, r4, r5, lr}
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   2708c:	6803      	ldr	r3, [r0, #0]
{
   2708e:	4605      	mov	r5, r0
   27090:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   27094:	2201      	movs	r2, #1
   27096:	605a      	str	r2, [r3, #4]
   27098:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
   2709a:	f7ed fe17 	bl	14ccc <nrfx_pwm_is_stopped>
   2709e:	b938      	cbnz	r0, 270b0 <nrfx_pwm_stop+0x28>
            if (nrfx_pwm_is_stopped(p_instance))
   270a0:	4628      	mov	r0, r5
   270a2:	f7ed fe13 	bl	14ccc <nrfx_pwm_is_stopped>
   270a6:	b918      	cbnz	r0, 270b0 <nrfx_pwm_stop+0x28>
        } while (wait_until_stopped);
   270a8:	2c00      	cmp	r4, #0
   270aa:	d1f9      	bne.n	270a0 <nrfx_pwm_stop+0x18>
}
   270ac:	4620      	mov	r0, r4
   270ae:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
   270b0:	2401      	movs	r4, #1
   270b2:	e7fb      	b.n	270ac <nrfx_pwm_stop+0x24>

000270b4 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   270b4:	f7ff be36 	b.w	26d24 <z_clock_idle_exit>

000270b8 <k_mem_slab_init>:
{
   270b8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   270ba:	2400      	movs	r4, #0
   270bc:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   270be:	ea41 0402 	orr.w	r4, r1, r2
   270c2:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   270c6:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   270ca:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   270cc:	d10c      	bne.n	270e8 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   270ce:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   270d0:	42a3      	cmp	r3, r4
   270d2:	d103      	bne.n	270dc <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
   270d4:	e9c0 0000 	strd	r0, r0, [r0]
}
   270d8:	2000      	movs	r0, #0
}
   270da:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   270dc:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   270de:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
   270e0:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
   270e2:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   270e4:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   270e6:	e7f3      	b.n	270d0 <k_mem_slab_init+0x18>
		return -EINVAL;
   270e8:	f06f 0015 	mvn.w	r0, #21
	return rc;
   270ec:	e7f5      	b.n	270da <k_mem_slab_init+0x22>

000270ee <z_find_first_thread_to_unpend>:
{
   270ee:	b510      	push	{r4, lr}
	__asm__ volatile(
   270f0:	f04f 0320 	mov.w	r3, #32
   270f4:	f3ef 8411 	mrs	r4, BASEPRI
   270f8:	f383 8811 	msr	BASEPRI, r3
   270fc:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   27100:	f000 f83f 	bl	27182 <z_priq_dumb_best>
	__asm__ volatile(
   27104:	f384 8811 	msr	BASEPRI, r4
   27108:	f3bf 8f6f 	isb	sy
}
   2710c:	bd10      	pop	{r4, pc}

0002710e <z_unpend_thread_no_timeout>:
{
   2710e:	b538      	push	{r3, r4, r5, lr}
   27110:	4604      	mov	r4, r0
	__asm__ volatile(
   27112:	f04f 0320 	mov.w	r3, #32
   27116:	f3ef 8511 	mrs	r5, BASEPRI
   2711a:	f383 8811 	msr	BASEPRI, r3
   2711e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   27122:	4601      	mov	r1, r0
   27124:	6880      	ldr	r0, [r0, #8]
   27126:	f7ee f903 	bl	15330 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2712a:	7b63      	ldrb	r3, [r4, #13]
   2712c:	f023 0302 	bic.w	r3, r3, #2
   27130:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   27132:	2300      	movs	r3, #0
   27134:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   27136:	f385 8811 	msr	BASEPRI, r5
   2713a:	f3bf 8f6f 	isb	sy
}
   2713e:	bd38      	pop	{r3, r4, r5, pc}

00027140 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   27140:	b921      	cbnz	r1, 2714c <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   27142:	f3ef 8005 	mrs	r0, IPSR
   27146:	b908      	cbnz	r0, 2714c <z_reschedule+0xc>
   27148:	f7ec ba76 	b.w	13638 <arch_swap>
   2714c:	f381 8811 	msr	BASEPRI, r1
   27150:	f3bf 8f6f 	isb	sy
}
   27154:	4770      	bx	lr

00027156 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   27156:	4603      	mov	r3, r0
   27158:	b920      	cbnz	r0, 27164 <z_reschedule_irqlock+0xe>
   2715a:	f3ef 8205 	mrs	r2, IPSR
   2715e:	b90a      	cbnz	r2, 27164 <z_reschedule_irqlock+0xe>
   27160:	f7ec ba6a 	b.w	13638 <arch_swap>
   27164:	f383 8811 	msr	BASEPRI, r3
   27168:	f3bf 8f6f 	isb	sy
}
   2716c:	4770      	bx	lr

0002716e <z_reschedule_unlocked>:
	__asm__ volatile(
   2716e:	f04f 0320 	mov.w	r3, #32
   27172:	f3ef 8011 	mrs	r0, BASEPRI
   27176:	f383 8811 	msr	BASEPRI, r3
   2717a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2717e:	f7ff bfea 	b.w	27156 <z_reschedule_irqlock>

00027182 <z_priq_dumb_best>:
	return list->head == list;
   27182:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27184:	4298      	cmp	r0, r3
   27186:	d004      	beq.n	27192 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   27188:	2b00      	cmp	r3, #0
   2718a:	bf38      	it	cc
   2718c:	2300      	movcc	r3, #0
   2718e:	4618      	mov	r0, r3
   27190:	4770      	bx	lr
	struct k_thread *thread = NULL;
   27192:	2000      	movs	r0, #0
}
   27194:	4770      	bx	lr

00027196 <z_ready_thread>:
{
   27196:	b510      	push	{r4, lr}
   27198:	f04f 0320 	mov.w	r3, #32
   2719c:	f3ef 8411 	mrs	r4, BASEPRI
   271a0:	f383 8811 	msr	BASEPRI, r3
   271a4:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   271a8:	f7ee f918 	bl	153dc <ready_thread>
	__asm__ volatile(
   271ac:	f384 8811 	msr	BASEPRI, r4
   271b0:	f3bf 8f6f 	isb	sy
}
   271b4:	bd10      	pop	{r4, pc}

000271b6 <z_thread_timeout>:
{
   271b6:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   271b8:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   271bc:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   271be:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   271c2:	b1c3      	cbz	r3, 271f6 <z_thread_timeout+0x40>
	__asm__ volatile(
   271c4:	f04f 0320 	mov.w	r3, #32
   271c8:	f3ef 8511 	mrs	r5, BASEPRI
   271cc:	f383 8811 	msr	BASEPRI, r3
   271d0:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   271d4:	f850 0c10 	ldr.w	r0, [r0, #-16]
   271d8:	f7ee f8aa 	bl	15330 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   271dc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   271e0:	f023 0302 	bic.w	r3, r3, #2
   271e4:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   271e8:	2300      	movs	r3, #0
   271ea:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   271ee:	f385 8811 	msr	BASEPRI, r5
   271f2:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   271f6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   271fa:	4608      	mov	r0, r1
   271fc:	f023 0314 	bic.w	r3, r3, #20
   27200:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
   27204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   27208:	f7ff bfc5 	b.w	27196 <z_ready_thread>

0002720c <z_remove_thread_from_ready_q>:
{
   2720c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2720e:	f04f 0320 	mov.w	r3, #32
   27212:	f3ef 8411 	mrs	r4, BASEPRI
   27216:	f383 8811 	msr	BASEPRI, r3
   2721a:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   2721e:	f7ee fa3b 	bl	15698 <unready_thread>
	__asm__ volatile(
   27222:	f384 8811 	msr	BASEPRI, r4
   27226:	f3bf 8f6f 	isb	sy
}
   2722a:	bd10      	pop	{r4, pc}

0002722c <add_to_waitq_locked>:
{
   2722c:	b538      	push	{r3, r4, r5, lr}
   2722e:	4604      	mov	r4, r0
   27230:	460d      	mov	r5, r1
	unready_thread(thread);
   27232:	f7ee fa31 	bl	15698 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   27236:	7b63      	ldrb	r3, [r4, #13]
   27238:	f043 0302 	orr.w	r3, r3, #2
   2723c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2723e:	b1c5      	cbz	r5, 27272 <add_to_waitq_locked+0x46>
	return list->head == list;
   27240:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   27242:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27244:	429d      	cmp	r5, r3
   27246:	bf08      	it	eq
   27248:	2300      	moveq	r3, #0
   2724a:	2b00      	cmp	r3, #0
   2724c:	bf38      	it	cc
   2724e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27250:	b183      	cbz	r3, 27274 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   27252:	f994 100e 	ldrsb.w	r1, [r4, #14]
   27256:	f993 200e 	ldrsb.w	r2, [r3, #14]
   2725a:	4291      	cmp	r1, r2
   2725c:	db04      	blt.n	27268 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   2725e:	686a      	ldr	r2, [r5, #4]
   27260:	429a      	cmp	r2, r3
   27262:	d007      	beq.n	27274 <add_to_waitq_locked+0x48>
   27264:	681b      	ldr	r3, [r3, #0]
   27266:	e7f3      	b.n	27250 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   27268:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2726a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2726e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27270:	605c      	str	r4, [r3, #4]
}
   27272:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   27274:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   27276:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   27278:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2727a:	686b      	ldr	r3, [r5, #4]
   2727c:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2727e:	606c      	str	r4, [r5, #4]
   27280:	e7f7      	b.n	27272 <add_to_waitq_locked+0x46>

00027282 <z_unpend_first_thread>:
{
   27282:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27284:	f04f 0320 	mov.w	r3, #32
   27288:	f3ef 8211 	mrs	r2, BASEPRI
   2728c:	f383 8811 	msr	BASEPRI, r3
   27290:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   27294:	f7ff ff75 	bl	27182 <z_priq_dumb_best>
   27298:	4604      	mov	r4, r0
	__asm__ volatile(
   2729a:	f382 8811 	msr	BASEPRI, r2
   2729e:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   272a2:	b1c8      	cbz	r0, 272d8 <z_unpend_first_thread+0x56>
	__asm__ volatile(
   272a4:	f04f 0320 	mov.w	r3, #32
   272a8:	f3ef 8511 	mrs	r5, BASEPRI
   272ac:	f383 8811 	msr	BASEPRI, r3
   272b0:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   272b4:	4601      	mov	r1, r0
   272b6:	6880      	ldr	r0, [r0, #8]
   272b8:	f7ee f83a 	bl	15330 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   272bc:	7b63      	ldrb	r3, [r4, #13]
   272be:	f023 0302 	bic.w	r3, r3, #2
   272c2:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   272c4:	2300      	movs	r3, #0
   272c6:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   272c8:	f385 8811 	msr	BASEPRI, r5
   272cc:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   272d0:	f104 0018 	add.w	r0, r4, #24
   272d4:	f000 f80f 	bl	272f6 <z_abort_timeout>
}
   272d8:	4620      	mov	r0, r4
   272da:	bd38      	pop	{r3, r4, r5, pc}

000272dc <k_is_in_isr>:
   272dc:	f3ef 8005 	mrs	r0, IPSR
}
   272e0:	3800      	subs	r0, #0
   272e2:	bf18      	it	ne
   272e4:	2001      	movne	r0, #1
   272e6:	4770      	bx	lr

000272e8 <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   272e8:	f7eb b920 	b.w	1252c <arch_busy_wait>

000272ec <z_impl_k_thread_name_set>:
}
   272ec:	f06f 0057 	mvn.w	r0, #87	; 0x57
   272f0:	4770      	bx	lr

000272f2 <k_thread_name_get>:
}
   272f2:	2000      	movs	r0, #0
   272f4:	4770      	bx	lr

000272f6 <z_abort_timeout>:
{
   272f6:	b510      	push	{r4, lr}
	__asm__ volatile(
   272f8:	f04f 0220 	mov.w	r2, #32
   272fc:	f3ef 8411 	mrs	r4, BASEPRI
   27300:	f382 8811 	msr	BASEPRI, r2
   27304:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   27308:	6803      	ldr	r3, [r0, #0]
   2730a:	b13b      	cbz	r3, 2731c <z_abort_timeout+0x26>
			remove_timeout(to);
   2730c:	f7ee fc12 	bl	15b34 <remove_timeout>
			ret = 0;
   27310:	2000      	movs	r0, #0
	__asm__ volatile(
   27312:	f384 8811 	msr	BASEPRI, r4
   27316:	f3bf 8f6f 	isb	sy
}
   2731a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2731c:	f06f 0015 	mvn.w	r0, #21
   27320:	e7f7      	b.n	27312 <z_abort_timeout+0x1c>

00027322 <z_get_next_timeout_expiry>:
{
   27322:	b510      	push	{r4, lr}
	__asm__ volatile(
   27324:	f04f 0320 	mov.w	r3, #32
   27328:	f3ef 8411 	mrs	r4, BASEPRI
   2732c:	f383 8811 	msr	BASEPRI, r3
   27330:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   27334:	f7ee fc12 	bl	15b5c <next_timeout>
	__asm__ volatile(
   27338:	f384 8811 	msr	BASEPRI, r4
   2733c:	f3bf 8f6f 	isb	sy
}
   27340:	bd10      	pop	{r4, pc}

00027342 <z_set_timeout_expiry>:
{
   27342:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27344:	4604      	mov	r4, r0
   27346:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
   27348:	f04f 0320 	mov.w	r3, #32
   2734c:	f3ef 8511 	mrs	r5, BASEPRI
   27350:	f383 8811 	msr	BASEPRI, r3
   27354:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
   27358:	f7ee fc00 	bl	15b5c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2735c:	2801      	cmp	r0, #1
   2735e:	dd05      	ble.n	2736c <z_set_timeout_expiry+0x2a>
   27360:	42a0      	cmp	r0, r4
   27362:	9901      	ldr	r1, [sp, #4]
   27364:	dd02      	ble.n	2736c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
   27366:	4620      	mov	r0, r4
   27368:	f7ec f814 	bl	13394 <z_clock_set_timeout>
	__asm__ volatile(
   2736c:	f385 8811 	msr	BASEPRI, r5
   27370:	f3bf 8f6f 	isb	sy
}
   27374:	b003      	add	sp, #12
   27376:	bd30      	pop	{r4, r5, pc}

00027378 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
   27378:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
   2737a:	f7ee fcd9 	bl	15d30 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
   2737e:	bd08      	pop	{r3, pc}

00027380 <k_timer_init>:
	timer->status = 0U;
   27380:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   27382:	e9c0 1206 	strd	r1, r2, [r0, #24]
	sys_dlist_init(&w->waitq);
   27386:	f100 0210 	add.w	r2, r0, #16
	list->tail = (sys_dnode_t *)list;
   2738a:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
   2738e:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   27392:	6283      	str	r3, [r0, #40]	; 0x28
	timer->user_data = NULL;
   27394:	62c3      	str	r3, [r0, #44]	; 0x2c
}
   27396:	4770      	bx	lr

00027398 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   27398:	b510      	push	{r4, lr}
   2739a:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2739c:	f7ff ffab 	bl	272f6 <z_abort_timeout>

	if (inactive) {
   273a0:	b9d8      	cbnz	r0, 273da <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   273a2:	69e3      	ldr	r3, [r4, #28]
   273a4:	b10b      	cbz	r3, 273aa <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   273a6:	4620      	mov	r0, r4
   273a8:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   273aa:	f104 0010 	add.w	r0, r4, #16
   273ae:	2100      	movs	r1, #0
   273b0:	f7ff fe9d 	bl	270ee <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   273b4:	4604      	mov	r4, r0
   273b6:	b180      	cbz	r0, 273da <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   273b8:	f7ff fea9 	bl	2710e <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   273bc:	4620      	mov	r0, r4
   273be:	f7ff feea 	bl	27196 <z_ready_thread>
	__asm__ volatile(
   273c2:	f04f 0320 	mov.w	r3, #32
   273c6:	f3ef 8011 	mrs	r0, BASEPRI
   273ca:	f383 8811 	msr	BASEPRI, r3
   273ce:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   273d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   273d6:	f7ff bebe 	b.w	27156 <z_reschedule_irqlock>
   273da:	bd10      	pop	{r4, pc}

000273dc <k_heap_init>:
{
   273dc:	b410      	push	{r4}
   273de:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   273e2:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   273e6:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
   273ea:	f7ff b903 	b.w	265f4 <sys_heap_init>

000273ee <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   273ee:	4770      	bx	lr

000273f0 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
                                   int version) const final {
    return FindOp(op);
   273f0:	6803      	ldr	r3, [r0, #0]
   273f2:	691b      	ldr	r3, [r3, #16]
   273f4:	4718      	bx	r3

000273f6 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:
  }

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
    return FindOp(op);
   273f6:	6803      	ldr	r3, [r0, #0]
   273f8:	695b      	ldr	r3, [r3, #20]
   273fa:	4718      	bx	r3

000273fc <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE>:
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   273fc:	2920      	cmp	r1, #32
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
   273fe:	b570      	push	{r4, r5, r6, lr}
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   27400:	d010      	beq.n	27424 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x28>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   27402:	f241 0304 	movw	r3, #4100	; 0x1004
   27406:	58c4      	ldr	r4, [r0, r3]
   27408:	2300      	movs	r3, #0
      if (registration.builtin_code == op) {
   2740a:	f100 0518 	add.w	r5, r0, #24
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   2740e:	429c      	cmp	r4, r3
   27410:	d008      	beq.n	27424 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x28>
   27412:	015a      	lsls	r2, r3, #5
      if (registration.builtin_code == op) {
   27414:	58ae      	ldr	r6, [r5, r2]
   27416:	428e      	cmp	r6, r1
   27418:	d102      	bne.n	27420 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x24>
      const TfLiteRegistration& registration = registrations_[i];
   2741a:	3204      	adds	r2, #4
   2741c:	4410      	add	r0, r2
  }
   2741e:	bd70      	pop	{r4, r5, r6, pc}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   27420:	3301      	adds	r3, #1
   27422:	e7f4      	b.n	2740e <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x12>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
   27424:	2000      	movs	r0, #0
   27426:	e7fa      	b.n	2741e <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpENS_15BuiltinOperatorE+0x22>

00027428 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
   27428:	b538      	push	{r3, r4, r5, lr}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   2742a:	f241 2388 	movw	r3, #4744	; 0x1288
   2742e:	58c4      	ldr	r4, [r0, r3]
   27430:	2c80      	cmp	r4, #128	; 0x80
   27432:	d80e      	bhi.n	27452 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x2a>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   27434:	2300      	movs	r3, #0
   27436:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
   2743a:	3208      	adds	r2, #8
   2743c:	429c      	cmp	r4, r3
   2743e:	d00c      	beq.n	2745a <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x32>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
   27440:	f812 5b01 	ldrb.w	r5, [r2], #1
   27444:	428d      	cmp	r5, r1
   27446:	d106      	bne.n	27456 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x2e>
   27448:	f203 4322 	addw	r3, r3, #1058	; 0x422
   2744c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  }
   27450:	bd38      	pop	{r3, r4, r5, pc}
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
   27452:	f009 fce6 	bl	30e22 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
   27456:	3301      	adds	r3, #1
   27458:	e7f0      	b.n	2743c <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x14>
    return nullptr;
   2745a:	2000      	movs	r0, #0
   2745c:	e7f8      	b.n	27450 <_ZNK6tflite22MicroMutableOpResolverILj128EE15GetOpDataParserENS_15BuiltinOperatorE+0x28>

0002745e <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
   2745e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27462:	4604      	mov	r4, r0
   27464:	4688      	mov	r8, r1
   27466:	4606      	mov	r6, r0
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   27468:	2500      	movs	r5, #0
   2746a:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
   2746e:	3704      	adds	r7, #4
   27470:	683b      	ldr	r3, [r7, #0]
   27472:	42ab      	cmp	r3, r5
   27474:	d910      	bls.n	27498 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x3a>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   27476:	69b3      	ldr	r3, [r6, #24]
   27478:	2b20      	cmp	r3, #32
   2747a:	d002      	beq.n	27482 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x24>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
   2747c:	3501      	adds	r5, #1
   2747e:	3620      	adds	r6, #32
   27480:	e7f6      	b.n	27470 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x12>
          (strcmp(registration.custom_name, op) == 0)) {
   27482:	4641      	mov	r1, r8
   27484:	69f0      	ldr	r0, [r6, #28]
   27486:	f7ea fb3d 	bl	11b04 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
   2748a:	2800      	cmp	r0, #0
   2748c:	d1f6      	bne.n	2747c <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x1e>
      const TfLiteRegistration& registration = registrations_[i];
   2748e:	eb04 1045 	add.w	r0, r4, r5, lsl #5
   27492:	3004      	adds	r0, #4
  }
   27494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return nullptr;
   27498:	2000      	movs	r0, #0
   2749a:	e7fb      	b.n	27494 <_ZNK6tflite22MicroMutableOpResolverILj128EE6FindOpEPKc+0x36>

0002749c <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv>:
      ->allocator_->AllocatePersistentBuffer(bytes, ptr);
   2749c:	68c3      	ldr	r3, [r0, #12]
   2749e:	6818      	ldr	r0, [r3, #0]
   274a0:	f7f9 bfca 	b.w	21438 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>

000274a4 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
   274a4:	68c0      	ldr	r0, [r0, #12]
                                                        int* buffer_idx) {
   274a6:	4613      	mov	r3, r2
  return helper->allocator_->RequestScratchBufferInArena(
   274a8:	460a      	mov	r2, r1
   274aa:	6881      	ldr	r1, [r0, #8]
   274ac:	6800      	ldr	r0, [r0, #0]
   274ae:	f7f9 bfd9 	b.w	21464 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>

000274b2 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:
      ->allocator_->GetScratchBuffer(buffer_idx);
   274b2:	68c3      	ldr	r3, [r0, #12]
   274b4:	6818      	ldr	r0, [r3, #0]
   274b6:	f7fa b807 	b.w	214c8 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>

000274ba <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:
                                  const char* format, ...) {
   274ba:	b40e      	push	{r1, r2, r3}
   274bc:	b503      	push	{r0, r1, lr}
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
   274be:	68c3      	ldr	r3, [r0, #12]
                                  const char* format, ...) {
   274c0:	aa03      	add	r2, sp, #12
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   274c2:	6858      	ldr	r0, [r3, #4]
                                  const char* format, ...) {
   274c4:	f852 1b04 	ldr.w	r1, [r2], #4
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   274c8:	6803      	ldr	r3, [r0, #0]
  va_start(args, format);
   274ca:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
   274cc:	689b      	ldr	r3, [r3, #8]
   274ce:	4798      	blx	r3
}
   274d0:	b002      	add	sp, #8
   274d2:	f85d eb04 	ldr.w	lr, [sp], #4
   274d6:	b003      	add	sp, #12
   274d8:	4770      	bx	lr

000274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:
    return data_ - ReadScalar<soffset_t>(data_);
   274da:	6803      	ldr	r3, [r0, #0]
   274dc:	1ac0      	subs	r0, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   274de:	8803      	ldrh	r3, [r0, #0]
   274e0:	428b      	cmp	r3, r1
   274e2:	bf8c      	ite	hi
   274e4:	5a40      	ldrhhi	r0, [r0, r1]
   274e6:	2000      	movls	r0, #0
  }
   274e8:	4770      	bx	lr

000274ea <_ZN6tflite13ScopedProfileD1Ev>:
  ~ScopedProfile() {
   274ea:	b510      	push	{r4, lr}
   274ec:	4604      	mov	r4, r0
    if (profiler_) {
   274ee:	6800      	ldr	r0, [r0, #0]
   274f0:	b118      	cbz	r0, 274fa <_ZN6tflite13ScopedProfileD1Ev+0x10>
      profiler_->EndEvent(event_handle_);
   274f2:	6803      	ldr	r3, [r0, #0]
   274f4:	6861      	ldr	r1, [r4, #4]
   274f6:	691b      	ldr	r3, [r3, #16]
   274f8:	4798      	blx	r3
  }
   274fa:	4620      	mov	r0, r4
   274fc:	bd10      	pop	{r4, pc}

000274fe <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:
MicroInterpreter::MicroInterpreter(const Model* model,
   274fe:	b570      	push	{r4, r5, r6, lr}
   27500:	461d      	mov	r5, r3
      context_helper_(error_reporter_, &allocator_) {
   27502:	2300      	movs	r3, #0
MicroInterpreter::MicroInterpreter(const Model* model,
   27504:	9e05      	ldr	r6, [sp, #20]
   27506:	4604      	mov	r4, r0
      context_helper_(error_reporter_, &allocator_) {
   27508:	e9c0 3100 	strd	r3, r1, [r0]
   2750c:	e9c0 2602 	strd	r2, r6, [r0, #8]
   27510:	4619      	mov	r1, r3
   27512:	2250      	movs	r2, #80	; 0x50
   27514:	3010      	adds	r0, #16
   27516:	f009 fcce 	bl	30eb6 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
   2751a:	4632      	mov	r2, r6
   2751c:	9904      	ldr	r1, [sp, #16]
   2751e:	4628      	mov	r0, r5
   27520:	f7f9 ff6e 	bl	21400 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
      context_helper_(error_reporter_, &allocator_) {
   27524:	f44f 7380 	mov.w	r3, #256	; 0x100
   27528:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
   2752c:	68e3      	ldr	r3, [r4, #12]
   2752e:	6620      	str	r0, [r4, #96]	; 0x60
      : allocator_(allocator), error_reporter_(error_reporter) {}
   27530:	e9c4 031b 	strd	r0, r3, [r4, #108]	; 0x6c
   27534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  Init(profiler);
   27538:	4620      	mov	r0, r4
   2753a:	9906      	ldr	r1, [sp, #24]
   2753c:	6763      	str	r3, [r4, #116]	; 0x74
   2753e:	f7ee ffa9 	bl	16494 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
   27542:	4620      	mov	r0, r4
   27544:	bd70      	pop	{r4, r5, r6, pc}

00027546 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   27546:	b510      	push	{r4, lr}
   27548:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   2754a:	f7ff ffc6 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   2754e:	b110      	cbz	r0, 27556 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIiEEEET_t+0x10>
    auto p = data_ + field_offset;
   27550:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   27552:	5820      	ldr	r0, [r4, r0]
   27554:	4418      	add	r0, r3
  }
   27556:	bd10      	pop	{r4, pc}

00027558 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   27558:	b510      	push	{r4, lr}
   2755a:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   2755c:	f7ff ffbd 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   27560:	b110      	cbz	r0, 27568 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x10>
    auto p = data_ + field_offset;
   27562:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   27564:	5820      	ldr	r0, [r4, r0]
   27566:	4418      	add	r0, r3
  }
   27568:	bd10      	pop	{r4, pc}

0002756a <_ZN6tflite16MicroInterpreterD1Ev>:
MicroInterpreter::~MicroInterpreter() {
   2756a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (node_and_registrations_ != nullptr) {
   2756c:	6803      	ldr	r3, [r0, #0]
MicroInterpreter::~MicroInterpreter() {
   2756e:	4604      	mov	r4, r0
  if (node_and_registrations_ != nullptr) {
   27570:	b1b3      	cbz	r3, 275a0 <_ZN6tflite16MicroInterpreterD1Ev+0x36>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   27572:	2500      	movs	r5, #0
      TfLiteNode* node = &(node_and_registrations_[i].node);
   27574:	2628      	movs	r6, #40	; 0x28
        registration->free(&context_, node->user_data);
   27576:	f100 0710 	add.w	r7, r0, #16
    return const_cast<Table *>(this)->GetPointer<P>(field);
   2757a:	210a      	movs	r1, #10
   2757c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   2757e:	f7ff ffeb 	bl	27558 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   27582:	6803      	ldr	r3, [r0, #0]
   27584:	42ab      	cmp	r3, r5
   27586:	d90b      	bls.n	275a0 <_ZN6tflite16MicroInterpreterD1Ev+0x36>
      TfLiteNode* node = &(node_and_registrations_[i].node);
   27588:	6823      	ldr	r3, [r4, #0]
   2758a:	fb06 3305 	mla	r3, r6, r5, r3
      const TfLiteRegistration* registration =
   2758e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      if (registration != nullptr && registration->free != nullptr) {
   27590:	b122      	cbz	r2, 2759c <_ZN6tflite16MicroInterpreterD1Ev+0x32>
   27592:	6852      	ldr	r2, [r2, #4]
   27594:	b112      	cbz	r2, 2759c <_ZN6tflite16MicroInterpreterD1Ev+0x32>
        registration->free(&context_, node->user_data);
   27596:	4638      	mov	r0, r7
   27598:	6919      	ldr	r1, [r3, #16]
   2759a:	4790      	blx	r2
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
   2759c:	3501      	adds	r5, #1
   2759e:	e7ec      	b.n	2757a <_ZN6tflite16MicroInterpreterD1Ev+0x10>
}
   275a0:	4620      	mov	r0, r4
   275a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000275a4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
   275a4:	b530      	push	{r4, r5, lr}
   275a6:	4603      	mov	r3, r0
  char* current = main;
   275a8:	4604      	mov	r4, r0
   275aa:	4620      	mov	r0, r4
  while (*current != 0) {
   275ac:	f814 5b01 	ldrb.w	r5, [r4], #1
   275b0:	2d00      	cmp	r5, #0
   275b2:	d1fa      	bne.n	275aa <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x6>
  char* current_end = main + (main_max_length - 1);
   275b4:	3901      	subs	r1, #1
   275b6:	440b      	add	r3, r1
   275b8:	3a01      	subs	r2, #1
  while ((*to_append != 0) && (current < current_end)) {
   275ba:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   275be:	b121      	cbz	r1, 275ca <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
   275c0:	4298      	cmp	r0, r3
   275c2:	d202      	bcs.n	275ca <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x26>
    *current = *to_append;
   275c4:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*to_append != 0) && (current < current_end)) {
   275c8:	e7f7      	b.n	275ba <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x16>
  *current = 0;
   275ca:	2300      	movs	r3, #0
   275cc:	7003      	strb	r3, [r0, #0]
}
   275ce:	bd30      	pop	{r4, r5, pc}

000275d0 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci>:
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
   275d0:	b570      	push	{r4, r5, r6, lr}
   275d2:	460c      	mov	r4, r1
    int32_t digit = i % base;
   275d4:	fbb0 f6f2 	udiv	r6, r0, r2
   275d8:	fb02 0516 	mls	r5, r2, r6, r0
    if (digit < 10) {
   275dc:	b26b      	sxtb	r3, r5
   275de:	2d09      	cmp	r5, #9
    *buffer++ = character;
   275e0:	4625      	mov	r5, r4
      character = '0' + digit;
   275e2:	bf94      	ite	ls
   275e4:	3330      	addls	r3, #48	; 0x30
      character = 'a' + (digit - 10);
   275e6:	3357      	addhi	r3, #87	; 0x57
   275e8:	b2db      	uxtb	r3, r3
  } while (i > 0);
   275ea:	4282      	cmp	r2, r0
    *buffer++ = character;
   275ec:	f805 3b01 	strb.w	r3, [r5], #1
  } while (i > 0);
   275f0:	d90a      	bls.n	27608 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x38>
  *buffer = 0;
   275f2:	2300      	movs	r3, #0
   275f4:	702b      	strb	r3, [r5, #0]
  while (p1 < p2) {
   275f6:	42a1      	cmp	r1, r4
   275f8:	d209      	bcs.n	2760e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x3e>
    char tmp = *p1;
   275fa:	780b      	ldrb	r3, [r1, #0]
    *p1++ = *p2;
   275fc:	7822      	ldrb	r2, [r4, #0]
   275fe:	f801 2b01 	strb.w	r2, [r1], #1
    *p2-- = tmp;
   27602:	f804 3901 	strb.w	r3, [r4], #-1
  while (p1 < p2) {
   27606:	e7f6      	b.n	275f6 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x26>
   27608:	462c      	mov	r4, r5
    i /= base;
   2760a:	4630      	mov	r0, r6
   2760c:	e7e2      	b.n	275d4 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEjPci+0x4>
}
   2760e:	4628      	mov	r0, r5
   27610:	bd70      	pop	{r4, r5, r6, pc}

00027612 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:
}
   27612:	2000      	movs	r0, #0
   27614:	4770      	bx	lr

00027616 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:
   27616:	2000      	movs	r0, #0
   27618:	4770      	bx	lr

0002761a <_ZN6tflite12RuntimeShapeD1Ev>:
    if (size_ > kMaxSmallSize) {
   2761a:	6803      	ldr	r3, [r0, #0]
  ~RuntimeShape() {
   2761c:	b510      	push	{r4, lr}
    if (size_ > kMaxSmallSize) {
   2761e:	2b05      	cmp	r3, #5
  ~RuntimeShape() {
   27620:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
   27622:	dd03      	ble.n	2762c <_ZN6tflite12RuntimeShapeD1Ev+0x12>
      delete[] dims_pointer_;
   27624:	6840      	ldr	r0, [r0, #4]
   27626:	b108      	cbz	r0, 2762c <_ZN6tflite12RuntimeShapeD1Ev+0x12>
   27628:	f008 ffd4 	bl	305d4 <_ZdaPv>
  }
   2762c:	4620      	mov	r0, r4
   2762e:	bd10      	pop	{r4, pc}

00027630 <_ZNK6tflite12RuntimeShape4DimsEi>:
    TFLITE_DCHECK_GE(i, 0);
   27630:	2900      	cmp	r1, #0
  inline int32 Dims(int i) const {
   27632:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   27634:	da01      	bge.n	2763a <_ZNK6tflite12RuntimeShape4DimsEi+0xa>
   27636:	f009 fbf4 	bl	30e22 <abort>
    TFLITE_DCHECK_LT(i, size_);
   2763a:	6803      	ldr	r3, [r0, #0]
   2763c:	428b      	cmp	r3, r1
   2763e:	ddfa      	ble.n	27636 <_ZNK6tflite12RuntimeShape4DimsEi+0x6>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
   27640:	2b05      	cmp	r3, #5
   27642:	bfcb      	itete	gt
   27644:	6843      	ldrgt	r3, [r0, #4]
   27646:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
   2764a:	f853 0021 	ldrgt.w	r0, [r3, r1, lsl #2]
   2764e:	6840      	ldrle	r0, [r0, #4]
  }
   27650:	bd08      	pop	{r3, pc}

00027652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
                            const RuntimeShape& check_shape_0) {
   27652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   27656:	680b      	ldr	r3, [r1, #0]
   27658:	6806      	ldr	r6, [r0, #0]
                            const RuntimeShape& check_shape_0) {
   2765a:	4604      	mov	r4, r0
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   2765c:	429e      	cmp	r6, r3
                            const RuntimeShape& check_shape_0) {
   2765e:	460f      	mov	r7, r1
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   27660:	d001      	beq.n	27666 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x14>
   27662:	f009 fbde 	bl	30e22 <abort>
  for (int i = 0; i < dims_count; ++i) {
   27666:	2500      	movs	r5, #0
   27668:	42b5      	cmp	r5, r6
   2766a:	da0c      	bge.n	27686 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x34>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   2766c:	4629      	mov	r1, r5
   2766e:	4620      	mov	r0, r4
   27670:	f7ff ffde 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27674:	4629      	mov	r1, r5
   27676:	4680      	mov	r8, r0
   27678:	4638      	mov	r0, r7
   2767a:	f7ff ffd9 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2767e:	4580      	cmp	r8, r0
   27680:	d1ef      	bne.n	27662 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x10>
  for (int i = 0; i < dims_count; ++i) {
   27682:	3501      	adds	r5, #1
   27684:	e7f0      	b.n	27668 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x16>
    for (int i = 0; i < size_; i++) {
   27686:	2300      	movs	r3, #0
    int buffer_size = 1;
   27688:	2001      	movs	r0, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2768a:	2e05      	cmp	r6, #5
   2768c:	bfcc      	ite	gt
   2768e:	6864      	ldrgt	r4, [r4, #4]
   27690:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   27692:	429e      	cmp	r6, r3
   27694:	dd04      	ble.n	276a0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x4e>
      buffer_size *= dims_data[i];
   27696:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   2769a:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   2769c:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
   2769e:	e7f8      	b.n	27692 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x40>
}
   276a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
   276a4:	b570      	push	{r4, r5, r6, lr}
   276a6:	4604      	mov	r4, r0
  if (tensor == nullptr) {
   276a8:	b911      	cbnz	r1, 276b0 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0xc>
  RuntimeShape() : size_(0) {}
   276aa:	6001      	str	r1, [r0, #0]

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
   276ac:	4620      	mov	r0, r4
   276ae:	bd70      	pop	{r4, r5, r6, pc}
  const int dims_size = dims->size;
   276b0:	688d      	ldr	r5, [r1, #8]
   276b2:	f855 3b04 	ldr.w	r3, [r5], #4
    if (dimensions_count > kMaxSmallSize) {
   276b6:	2b05      	cmp	r3, #5
    size_ = dimensions_count;
   276b8:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
   276ba:	ea4f 0683 	mov.w	r6, r3, lsl #2
   276be:	dc05      	bgt.n	276cc <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   276c0:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   276c2:	4632      	mov	r2, r6
   276c4:	4629      	mov	r1, r5
   276c6:	f009 fbcf 	bl	30e68 <memcpy>
  }
   276ca:	e7ef      	b.n	276ac <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x8>
      dims_pointer_ = new int32[dimensions_count];
   276cc:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
   276d0:	4283      	cmp	r3, r0
   276d2:	bfb4      	ite	lt
   276d4:	4630      	movlt	r0, r6
   276d6:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   276da:	f008 ff8a 	bl	305f2 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   276de:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32[dimensions_count];
   276e0:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   276e2:	2b05      	cmp	r3, #5
   276e4:	dced      	bgt.n	276c2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1e>
   276e6:	e7eb      	b.n	276c0 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x1c>

000276e8 <_ZN6tflite12RuntimeShape6SetDimEii>:
    TFLITE_DCHECK_GE(i, 0);
   276e8:	2900      	cmp	r1, #0
  inline void SetDim(int i, int32 val) {
   276ea:	b508      	push	{r3, lr}
    TFLITE_DCHECK_GE(i, 0);
   276ec:	da01      	bge.n	276f2 <_ZN6tflite12RuntimeShape6SetDimEii+0xa>
   276ee:	f009 fb98 	bl	30e22 <abort>
    TFLITE_DCHECK_LT(i, size_);
   276f2:	6803      	ldr	r3, [r0, #0]
   276f4:	428b      	cmp	r3, r1
   276f6:	ddfa      	ble.n	276ee <_ZN6tflite12RuntimeShape6SetDimEii+0x6>
    if (size_ > kMaxSmallSize) {
   276f8:	2b05      	cmp	r3, #5
      dims_pointer_[i] = val;
   276fa:	bfcb      	itete	gt
   276fc:	6843      	ldrgt	r3, [r0, #4]
      dims_[i] = val;
   276fe:	eb00 0081 	addle.w	r0, r0, r1, lsl #2
      dims_pointer_[i] = val;
   27702:	f843 2021 	strgt.w	r2, [r3, r1, lsl #2]
      dims_[i] = val;
   27706:	6042      	strle	r2, [r0, #4]
  }
   27708:	bd08      	pop	{r3, pc}

0002770a <_ZN6tflite12RuntimeShape6ResizeEi>:
  inline void Resize(int dimensions_count) {
   2770a:	b538      	push	{r3, r4, r5, lr}
    if (size_ > kMaxSmallSize) {
   2770c:	6803      	ldr	r3, [r0, #0]
  inline void Resize(int dimensions_count) {
   2770e:	4605      	mov	r5, r0
    if (size_ > kMaxSmallSize) {
   27710:	2b05      	cmp	r3, #5
  inline void Resize(int dimensions_count) {
   27712:	460c      	mov	r4, r1
    if (size_ > kMaxSmallSize) {
   27714:	dd03      	ble.n	2771e <_ZN6tflite12RuntimeShape6ResizeEi+0x14>
      delete[] dims_pointer_;
   27716:	6840      	ldr	r0, [r0, #4]
   27718:	b108      	cbz	r0, 2771e <_ZN6tflite12RuntimeShape6ResizeEi+0x14>
   2771a:	f008 ff5b 	bl	305d4 <_ZdaPv>
    if (dimensions_count > kMaxSmallSize) {
   2771e:	2c05      	cmp	r4, #5
    size_ = dimensions_count;
   27720:	602c      	str	r4, [r5, #0]
    if (dimensions_count > kMaxSmallSize) {
   27722:	dd09      	ble.n	27738 <_ZN6tflite12RuntimeShape6ResizeEi+0x2e>
      dims_pointer_ = new int32[dimensions_count];
   27724:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
   27728:	429c      	cmp	r4, r3
   2772a:	bfac      	ite	ge
   2772c:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   27730:	00a0      	lsllt	r0, r4, #2
   27732:	f008 ff5e 	bl	305f2 <_Znaj>
   27736:	6068      	str	r0, [r5, #4]
  }
   27738:	bd38      	pop	{r3, r4, r5, pc}

0002773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2773a:	6801      	ldr	r1, [r0, #0]
    for (int i = 0; i < size_; i++) {
   2773c:	2200      	movs	r2, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2773e:	2905      	cmp	r1, #5
   27740:	bfcc      	ite	gt
   27742:	6843      	ldrgt	r3, [r0, #4]
   27744:	1d03      	addle	r3, r0, #4
    int buffer_size = 1;
   27746:	2001      	movs	r0, #1
  inline int FlatSize() const {
   27748:	b510      	push	{r4, lr}
    for (int i = 0; i < size_; i++) {
   2774a:	428a      	cmp	r2, r1
   2774c:	da04      	bge.n	27758 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x1e>
      buffer_size *= dims_data[i];
   2774e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
    for (int i = 0; i < size_; i++) {
   27752:	3201      	adds	r2, #1
      buffer_size *= dims_data[i];
   27754:	4360      	muls	r0, r4
    for (int i = 0; i < size_; i++) {
   27756:	e7f8      	b.n	2774a <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x10>
  }
   27758:	bd10      	pop	{r4, pc}

0002775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>:
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   2775a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : size_(0) {
   2775e:	2700      	movs	r7, #0
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   27760:	4698      	mov	r8, r3
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   27762:	6813      	ldr	r3, [r2, #0]
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   27764:	4605      	mov	r5, r0
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   27766:	4299      	cmp	r1, r3
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
   27768:	460e      	mov	r6, r1
   2776a:	4614      	mov	r4, r2
      : size_(0) {
   2776c:	6007      	str	r7, [r0, #0]
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
   2776e:	da01      	bge.n	27774 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x1a>
   27770:	f009 fb57 	bl	30e22 <abort>
    Resize(new_shape_size);
   27774:	f7ff ffc9 	bl	2770a <_ZN6tflite12RuntimeShape6ResizeEi>
    const int size_increase = new_shape_size - shape.DimensionsCount();
   27778:	6820      	ldr	r0, [r4, #0]
   2777a:	1a36      	subs	r6, r6, r0
    for (int i = 0; i < size_increase; ++i) {
   2777c:	42b7      	cmp	r7, r6
   2777e:	da06      	bge.n	2778e <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x34>
      SetDim(i, pad_value);
   27780:	4639      	mov	r1, r7
   27782:	4642      	mov	r2, r8
   27784:	4628      	mov	r0, r5
   27786:	f7ff ffaf 	bl	276e8 <_ZN6tflite12RuntimeShape6SetDimEii>
    for (int i = 0; i < size_increase; ++i) {
   2778a:	3701      	adds	r7, #1
   2778c:	e7f6      	b.n	2777c <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x22>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2778e:	682b      	ldr	r3, [r5, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   27790:	6822      	ldr	r2, [r4, #0]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   27792:	2b05      	cmp	r3, #5
   27794:	bfcc      	ite	gt
   27796:	6868      	ldrgt	r0, [r5, #4]
   27798:	1d28      	addle	r0, r5, #4
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2779a:	2a05      	cmp	r2, #5
   2779c:	bfc8      	it	gt
   2779e:	6861      	ldrgt	r1, [r4, #4]
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   277a0:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   277a4:	bfd8      	it	le
   277a6:	1d21      	addle	r1, r4, #4
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
   277a8:	0092      	lsls	r2, r2, #2
   277aa:	f009 fb5d 	bl	30e68 <memcpy>
  }
   277ae:	4628      	mov	r0, r5
   277b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   277b4:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   277b6:	6804      	ldr	r4, [r0, #0]
inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
   277b8:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   277ba:	2c04      	cmp	r4, #4
   277bc:	d001      	beq.n	277c2 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xe>
   277be:	f009 fb30 	bl	30e22 <abort>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   277c2:	2900      	cmp	r1, #0
   277c4:	dbfb      	blt.n	277be <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   277c6:	6844      	ldr	r4, [r0, #4]
   277c8:	428c      	cmp	r4, r1
   277ca:	ddf8      	ble.n	277be <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   277cc:	2a00      	cmp	r2, #0
   277ce:	dbf6      	blt.n	277be <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   277d0:	6884      	ldr	r4, [r0, #8]
   277d2:	4294      	cmp	r4, r2
   277d4:	ddf3      	ble.n	277be <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   277d6:	2b00      	cmp	r3, #0
   277d8:	dbf1      	blt.n	277be <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   277da:	68c6      	ldr	r6, [r0, #12]
   277dc:	429e      	cmp	r6, r3
   277de:	ddee      	ble.n	277be <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   277e0:	2d00      	cmp	r5, #0
   277e2:	dbec      	blt.n	277be <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
   277e4:	6900      	ldr	r0, [r0, #16]
   277e6:	42a8      	cmp	r0, r5
   277e8:	dde9      	ble.n	277be <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0xa>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   277ea:	fb01 2204 	mla	r2, r1, r4, r2
   277ee:	fb06 3302 	mla	r3, r6, r2, r3
}
   277f2:	fb00 5003 	mla	r0, r0, r3, r5
   277f6:	bd70      	pop	{r4, r5, r6, pc}

000277f8 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>:
                                const RuntimeShape& check_shape_1) {
   277f8:	b570      	push	{r4, r5, r6, lr}
   277fa:	460d      	mov	r5, r1
   277fc:	4616      	mov	r6, r2
  const int size_1 = shape.FlatSize();
   277fe:	f7ff ff9c 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   27802:	4604      	mov	r4, r0
  const int size_2 = check_shape_0.FlatSize();
   27804:	4628      	mov	r0, r5
   27806:	f7ff ff98 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2780a:	4605      	mov	r5, r0
  const int size_3 = check_shape_1.FlatSize();
   2780c:	4630      	mov	r0, r6
   2780e:	f7ff ff94 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
  TFLITE_CHECK_EQ(size_1, size_2);
   27812:	42ac      	cmp	r4, r5
   27814:	d001      	beq.n	2781a <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x22>
   27816:	f009 fb04 	bl	30e22 <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
   2781a:	4284      	cmp	r4, r0
   2781c:	d1fb      	bne.n	27816 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x1e>
}
   2781e:	bd70      	pop	{r4, r5, r6, pc}

00027820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>:
                            int i3) {
   27820:	b570      	push	{r4, r5, r6, lr}
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   27822:	2900      	cmp	r1, #0
                            int i3) {
   27824:	9d04      	ldr	r5, [sp, #16]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
   27826:	db02      	blt.n	2782e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   27828:	6804      	ldr	r4, [r0, #0]
   2782a:	428c      	cmp	r4, r1
   2782c:	dc01      	bgt.n	27832 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x12>
   2782e:	f009 faf8 	bl	30e22 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
   27832:	2a00      	cmp	r2, #0
   27834:	dbfb      	blt.n	2782e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   27836:	6844      	ldr	r4, [r0, #4]
   27838:	4294      	cmp	r4, r2
   2783a:	ddf8      	ble.n	2782e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
   2783c:	2b00      	cmp	r3, #0
   2783e:	dbf6      	blt.n	2782e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   27840:	6884      	ldr	r4, [r0, #8]
   27842:	429c      	cmp	r4, r3
   27844:	ddf3      	ble.n	2782e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
   27846:	2d00      	cmp	r5, #0
   27848:	dbf1      	blt.n	2782e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
   2784a:	68c4      	ldr	r4, [r0, #12]
   2784c:	42ac      	cmp	r4, r5
   2784e:	ddee      	ble.n	2782e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0xe>
         i3 * desc.strides[3];
   27850:	69c4      	ldr	r4, [r0, #28]
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   27852:	6946      	ldr	r6, [r0, #20]
         i3 * desc.strides[3];
   27854:	436c      	muls	r4, r5
   27856:	fb06 4202 	mla	r2, r6, r2, r4
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
   2785a:	6984      	ldr	r4, [r0, #24]
   2785c:	6900      	ldr	r0, [r0, #16]
         i3 * desc.strides[3];
   2785e:	fb04 2303 	mla	r3, r4, r3, r2
}
   27862:	fb00 3001 	mla	r0, r0, r1, r3
   27866:	bd70      	pop	{r4, r5, r6, pc}

00027868 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const uint8* input1_data,
                const RuntimeShape& input2_shape, const uint8* input2_data,
                const RuntimeShape& output_shape, uint8* output_data) {
   27868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2786c:	4604      	mov	r4, r0
   2786e:	4690      	mov	r8, r2
   27870:	4608      	mov	r0, r1
   27872:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   27874:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   27878:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, uint8* output_data) {
   2787a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2787c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2787e:	dd01      	ble.n	27884 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1c>
   27880:	f009 facf 	bl	30e22 <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   27884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   27886:	f7ff ffb7 	bl	277f8 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>

  TFLITE_DCHECK_GT(params.input1_offset, -256);
   2788a:	6862      	ldr	r2, [r4, #4]
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   2788c:	4681      	mov	r9, r0
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   2788e:	f112 0fff 	cmn.w	r2, #255	; 0xff
   27892:	dbf5      	blt.n	27880 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_GT(params.input2_offset, -256);
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   27894:	2aff      	cmp	r2, #255	; 0xff
  TFLITE_DCHECK_GT(params.input2_offset, -256);
   27896:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   27898:	dcf2      	bgt.n	27880 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
   2789a:	33ff      	adds	r3, #255	; 0xff
   2789c:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
   278a0:	d8ee      	bhi.n	27880 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  for (int i = 0; i < size; ++i) {
   278a2:	2700      	movs	r7, #0
   278a4:	45b9      	cmp	r9, r7
   278a6:	dd28      	ble.n	278fa <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x92>
    const int32 input2_val = params.input2_offset + input2_data[i];
   278a8:	f816 a007 	ldrb.w	sl, [r6, r7]
   278ac:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   278ae:	6862      	ldr	r2, [r4, #4]
    const int32 input2_val = params.input2_offset + input2_data[i];
   278b0:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   278b2:	f818 3007 	ldrb.w	r3, [r8, r7]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   278b6:	69a0      	ldr	r0, [r4, #24]
    const int32 input1_val = params.input1_offset + input1_data[i];
   278b8:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   278ba:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   278be:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   278c2:	fa03 f000 	lsl.w	r0, r3, r0
   278c6:	f7ef f9c1 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   278ca:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   278ce:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   278d0:	4650      	mov	r0, sl
   278d2:	f7ef f9bb 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   278d6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   278da:	4458      	add	r0, fp
   278dc:	f7ef f9b6 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sum, params.output_multiplier, params.output_shift) +
   278e0:	68e3      	ldr	r3, [r4, #12]
   278e2:	4403      	add	r3, r0
    output_data[i] = static_cast<uint8>(clamped_output);
   278e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   278e6:	4283      	cmp	r3, r0
   278e8:	bfb8      	it	lt
   278ea:	4603      	movlt	r3, r0
   278ec:	6b20      	ldr	r0, [r4, #48]	; 0x30
   278ee:	4283      	cmp	r3, r0
   278f0:	bfa8      	it	ge
   278f2:	4603      	movge	r3, r0
   278f4:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   278f6:	3701      	adds	r7, #1
   278f8:	e7d4      	b.n	278a4 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x3c>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
}
   278fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000278fe <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const int8_t* input1_data,
                const RuntimeShape& input2_shape, const int8_t* input2_data,
                const RuntimeShape& output_shape, int8_t* output_data) {
   278fe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27902:	4604      	mov	r4, r0
   27904:	4690      	mov	r8, r2
   27906:	4608      	mov	r0, r1
   27908:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2790a:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   2790e:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, int8_t* output_data) {
   27910:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   27912:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   27914:	dd01      	ble.n	2791a <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1c>
   27916:	f009 fa84 	bl	30e22 <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   2791a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2791c:	f7ff ff6c 	bl	277f8 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>

  const int32_t int8_max_value = std::numeric_limits<int8_t>::max();
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   27920:	6862      	ldr	r2, [r4, #4]
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   27922:	4681      	mov	r9, r0
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   27924:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
   27928:	dbf5      	blt.n	27916 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   2792a:	2a7f      	cmp	r2, #127	; 0x7f
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
   2792c:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   2792e:	dcf2      	bgt.n	27916 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_LE(params.input2_offset, int8_max_value);
   27930:	337f      	adds	r3, #127	; 0x7f
   27932:	2bfe      	cmp	r3, #254	; 0xfe
   27934:	d8ef      	bhi.n	27916 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  for (int i = 0; i < size; ++i) {
   27936:	2700      	movs	r7, #0
   27938:	45b9      	cmp	r9, r7
   2793a:	dd28      	ble.n	2798e <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x90>
    const int32 input2_val = params.input2_offset + input2_data[i];
   2793c:	f916 a007 	ldrsb.w	sl, [r6, r7]
   27940:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   27942:	6862      	ldr	r2, [r4, #4]
    const int32 input2_val = params.input2_offset + input2_data[i];
   27944:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   27946:	f918 3007 	ldrsb.w	r3, [r8, r7]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   2794a:	69a0      	ldr	r0, [r4, #24]
    const int32 input1_val = params.input1_offset + input1_data[i];
   2794c:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   2794e:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27952:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   27956:	fa03 f000 	lsl.w	r0, r3, r0
   2795a:	f7ef f977 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2795e:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27962:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27964:	4650      	mov	r0, sl
   27966:	f7ef f971 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2796a:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2796e:	4458      	add	r0, fp
   27970:	f7ef f96c 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sum, params.output_multiplier, params.output_shift) +
   27974:	68e3      	ldr	r3, [r4, #12]
   27976:	4403      	add	r3, r0
    output_data[i] = static_cast<int8_t>(clamped_output);
   27978:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2797a:	4283      	cmp	r3, r0
   2797c:	bfb8      	it	lt
   2797e:	4603      	movlt	r3, r0
   27980:	6b20      	ldr	r0, [r4, #48]	; 0x30
   27982:	4283      	cmp	r3, r0
   27984:	bfa8      	it	ge
   27986:	4603      	movge	r3, r0
   27988:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   2798a:	3701      	adds	r7, #1
   2798c:	e7d4      	b.n	27938 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x3a>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
}
   2798e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027992 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>:
//
// Returns true iff there is some sort of broadcast, which includes five-fold
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
   27992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27996:	680b      	ldr	r3, [r1, #0]
   27998:	6804      	ldr	r4, [r0, #0]
  RuntimeShape(int shape_size, int32 value) : size_(0) {
   2799a:	2600      	movs	r6, #0
   2799c:	429c      	cmp	r4, r3
   2799e:	bfb8      	it	lt
   279a0:	461c      	movlt	r4, r3
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   279a2:	2304      	movs	r3, #4
                                   tflite::ArithmeticParams* params) {
   279a4:	b092      	sub	sp, #72	; 0x48
   279a6:	4680      	mov	r8, r0
   279a8:	460f      	mov	r7, r1
    Resize(shape_size);
   279aa:	4668      	mov	r0, sp
   279ac:	4621      	mov	r1, r4
  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   279ae:	7013      	strb	r3, [r2, #0]
                                   tflite::ArithmeticParams* params) {
   279b0:	4615      	mov	r5, r2
  RuntimeShape(int shape_size, int32 value) : size_(0) {
   279b2:	9600      	str	r6, [sp, #0]
    Resize(shape_size);
   279b4:	f7ff fea9 	bl	2770a <_ZN6tflite12RuntimeShape6ResizeEi>
    for (int i = 0; i < shape_size; ++i) {
   279b8:	42a6      	cmp	r6, r4
   279ba:	da06      	bge.n	279ca <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x38>
      SetDim(i, value);
   279bc:	4631      	mov	r1, r6
   279be:	2201      	movs	r2, #1
   279c0:	4668      	mov	r0, sp
   279c2:	f7ff fe91 	bl	276e8 <_ZN6tflite12RuntimeShape6SetDimEii>
    for (int i = 0; i < shape_size; ++i) {
   279c6:	3601      	adds	r6, #1
   279c8:	e7f6      	b.n	279b8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x26>
    return RuntimeShape(new_shape_size, shape, 1);
   279ca:	2301      	movs	r3, #1
   279cc:	4642      	mov	r2, r8
   279ce:	4621      	mov	r1, r4
   279d0:	a806      	add	r0, sp, #24
   279d2:	f7ff fec2 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   279d6:	2301      	movs	r3, #1
   279d8:	463a      	mov	r2, r7
   279da:	4621      	mov	r1, r4
   279dc:	a80c      	add	r0, sp, #48	; 0x30
   279de:	f7ff febc 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
    return this->size_ == comp.size_ &&
   279e2:	9a06      	ldr	r2, [sp, #24]
   279e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   279e6:	429a      	cmp	r2, r3
   279e8:	d11b      	bne.n	27a22 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x90>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   279ea:	2a05      	cmp	r2, #5
   279ec:	bfcc      	ite	gt
   279ee:	9807      	ldrgt	r0, [sp, #28]
   279f0:	a807      	addle	r0, sp, #28
   279f2:	2b05      	cmp	r3, #5
   279f4:	bfcc      	ite	gt
   279f6:	990d      	ldrgt	r1, [sp, #52]	; 0x34
   279f8:	a90d      	addle	r1, sp, #52	; 0x34
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
   279fa:	0092      	lsls	r2, r2, #2
   279fc:	f009 fa26 	bl	30e4c <memcmp>
    return this->size_ == comp.size_ &&
   27a00:	b978      	cbnz	r0, 27a22 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x90>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
   27a02:	2301      	movs	r3, #1
    return false;
   27a04:	4604      	mov	r4, r0
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
   27a06:	702b      	strb	r3, [r5, #0]
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);
   27a08:	a80c      	add	r0, sp, #48	; 0x30
   27a0a:	f7ff fe06 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
   27a0e:	a806      	add	r0, sp, #24
   27a10:	f7ff fe03 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape scalar_shape(dims_count, 1);
   27a14:	4668      	mov	r0, sp
   27a16:	f7ff fe00 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  // loop.
  if (i >= 0) {
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
  }
  return true;
}
   27a1a:	4620      	mov	r0, r4
   27a1c:	b012      	add	sp, #72	; 0x48
   27a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (int i = dims_count - 1; i >= 0; --i) {
   27a22:	3c01      	subs	r4, #1
   27a24:	4626      	mov	r6, r4
   27a26:	2e00      	cmp	r6, #0
   27a28:	db10      	blt.n	27a4c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xba>
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
   27a2a:	4631      	mov	r1, r6
   27a2c:	a806      	add	r0, sp, #24
   27a2e:	f7ff fdff 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27a32:	4631      	mov	r1, r6
   27a34:	4607      	mov	r7, r0
   27a36:	a80c      	add	r0, sp, #48	; 0x30
   27a38:	f7ff fdfa 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27a3c:	4287      	cmp	r7, r0
   27a3e:	d101      	bne.n	27a44 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xb2>
  for (int i = dims_count - 1; i >= 0; --i) {
   27a40:	3e01      	subs	r6, #1
   27a42:	e7f0      	b.n	27a26 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x94>
    } else if (extended_shape0.Dims(i) == 1) {
   27a44:	2f01      	cmp	r7, #1
   27a46:	d107      	bne.n	27a58 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xc6>
      params->broadcast_category =
   27a48:	2302      	movs	r3, #2
      params->broadcast_category =
   27a4a:	702b      	strb	r3, [r5, #0]
  if (params->broadcast_category !=
   27a4c:	782b      	ldrb	r3, [r5, #0]
   27a4e:	1e9a      	subs	r2, r3, #2
   27a50:	2a01      	cmp	r2, #1
   27a52:	d909      	bls.n	27a68 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd6>
    TFLITE_DCHECK(false);
   27a54:	f009 f9e5 	bl	30e22 <abort>
    } else if (extended_shape1.Dims(i) == 1) {
   27a58:	2801      	cmp	r0, #1
   27a5a:	d101      	bne.n	27a60 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xce>
      params->broadcast_category =
   27a5c:	2303      	movs	r3, #3
   27a5e:	e7f4      	b.n	27a4a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xb8>
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
   27a60:	2304      	movs	r3, #4
   27a62:	702b      	strb	r3, [r5, #0]
  return true;
   27a64:	2401      	movs	r4, #1
   27a66:	e7cf      	b.n	27a08 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x76>
  const RuntimeShape* shape_a =
   27a68:	2b03      	cmp	r3, #3
  params->broadcast_shape[0] = 1;
   27a6a:	f04f 0301 	mov.w	r3, #1
  params->broadcast_shape[1] = 1;
   27a6e:	e9c5 3314 	strd	r3, r3, [r5, #80]	; 0x50
  params->broadcast_shape[3] = 1;
   27a72:	e9c5 3316 	strd	r3, r3, [r5, #88]	; 0x58
  const RuntimeShape* shape_a =
   27a76:	bf19      	ittee	ne
   27a78:	f10d 0818 	addne.w	r8, sp, #24
  const RuntimeShape* shape_b =
   27a7c:	af0c      	addne	r7, sp, #48	; 0x30
  const RuntimeShape* shape_a =
   27a7e:	f10d 0830 	addeq.w	r8, sp, #48	; 0x30
  const RuntimeShape* shape_b =
   27a82:	af06      	addeq	r7, sp, #24
  params->broadcast_shape[4] = 1;
   27a84:	662b      	str	r3, [r5, #96]	; 0x60
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27a86:	2c00      	cmp	r4, #0
   27a88:	dbec      	blt.n	27a64 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
   27a8a:	4621      	mov	r1, r4
   27a8c:	4640      	mov	r0, r8
   27a8e:	f7ff fdcf 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27a92:	4621      	mov	r1, r4
   27a94:	4606      	mov	r6, r0
   27a96:	4638      	mov	r0, r7
   27a98:	f7ff fdca 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27a9c:	4286      	cmp	r6, r0
   27a9e:	d104      	bne.n	27aaa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    params->broadcast_shape[4] *= shape_b->Dims(i);
   27aa0:	6e28      	ldr	r0, [r5, #96]	; 0x60
    --i;
   27aa2:	3c01      	subs	r4, #1
    params->broadcast_shape[4] *= shape_b->Dims(i);
   27aa4:	4346      	muls	r6, r0
   27aa6:	662e      	str	r6, [r5, #96]	; 0x60
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27aa8:	e7ed      	b.n	27a86 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xf4>
  while (i >= 0 && shape_a->Dims(i) == 1) {
   27aaa:	4621      	mov	r1, r4
   27aac:	4640      	mov	r0, r8
   27aae:	f7ff fdbf 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27ab2:	2801      	cmp	r0, #1
   27ab4:	d10a      	bne.n	27acc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x13a>
    params->broadcast_shape[3] *= shape_b->Dims(i);
   27ab6:	4621      	mov	r1, r4
   27ab8:	4638      	mov	r0, r7
   27aba:	f7ff fdb9 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27abe:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  while (i >= 0 && shape_a->Dims(i) == 1) {
   27ac0:	3c01      	subs	r4, #1
    params->broadcast_shape[3] *= shape_b->Dims(i);
   27ac2:	fb00 f003 	mul.w	r0, r0, r3
   27ac6:	65e8      	str	r0, [r5, #92]	; 0x5c
  while (i >= 0 && shape_a->Dims(i) == 1) {
   27ac8:	d2ef      	bcs.n	27aaa <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
   27aca:	e7cb      	b.n	27a64 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27acc:	4621      	mov	r1, r4
   27ace:	4640      	mov	r0, r8
   27ad0:	f7ff fdae 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27ad4:	4621      	mov	r1, r4
   27ad6:	4606      	mov	r6, r0
   27ad8:	4638      	mov	r0, r7
   27ada:	f7ff fda9 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27ade:	4286      	cmp	r6, r0
   27ae0:	d106      	bne.n	27af0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15e>
    params->broadcast_shape[2] *= shape_a->Dims(i);
   27ae2:	6da8      	ldr	r0, [r5, #88]	; 0x58
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27ae4:	3c01      	subs	r4, #1
    params->broadcast_shape[2] *= shape_a->Dims(i);
   27ae6:	fb06 f600 	mul.w	r6, r6, r0
   27aea:	65ae      	str	r6, [r5, #88]	; 0x58
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27aec:	d2ee      	bcs.n	27acc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x13a>
   27aee:	e7b9      	b.n	27a64 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_b->Dims(i) == 1) {
   27af0:	4621      	mov	r1, r4
   27af2:	4638      	mov	r0, r7
   27af4:	f7ff fd9c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27af8:	2801      	cmp	r0, #1
   27afa:	d10a      	bne.n	27b12 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x180>
    params->broadcast_shape[1] *= shape_a->Dims(i);
   27afc:	4621      	mov	r1, r4
   27afe:	4640      	mov	r0, r8
   27b00:	f7ff fd96 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27b04:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  while (i >= 0 && shape_b->Dims(i) == 1) {
   27b06:	3c01      	subs	r4, #1
    params->broadcast_shape[1] *= shape_a->Dims(i);
   27b08:	fb00 f003 	mul.w	r0, r0, r3
   27b0c:	6568      	str	r0, [r5, #84]	; 0x54
  while (i >= 0 && shape_b->Dims(i) == 1) {
   27b0e:	d2ef      	bcs.n	27af0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15e>
   27b10:	e7a8      	b.n	27a64 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27b12:	4621      	mov	r1, r4
   27b14:	4640      	mov	r0, r8
   27b16:	f7ff fd8b 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27b1a:	4621      	mov	r1, r4
   27b1c:	4606      	mov	r6, r0
   27b1e:	4638      	mov	r0, r7
   27b20:	f7ff fd86 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27b24:	4286      	cmp	r6, r0
   27b26:	d19b      	bne.n	27a60 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xce>
    params->broadcast_shape[0] *= shape_b->Dims(i);
   27b28:	6d28      	ldr	r0, [r5, #80]	; 0x50
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27b2a:	3c01      	subs	r4, #1
    params->broadcast_shape[0] *= shape_b->Dims(i);
   27b2c:	fb06 f600 	mul.w	r6, r6, r0
   27b30:	652e      	str	r6, [r5, #80]	; 0x50
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
   27b32:	d2ee      	bcs.n	27b12 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x180>
   27b34:	e796      	b.n	27a64 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xd2>

00027b36 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
   27b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b38:	4606      	mov	r6, r0
  for (int i = N - 1; i >= 0; --i) {
   27b3a:	2403      	movs	r4, #3
  int desc_stride = 1;
   27b3c:	2701      	movs	r7, #1
   27b3e:	f101 050c 	add.w	r5, r1, #12
    desc_out->extents[i] = input_shape.Dims(i);
   27b42:	4621      	mov	r1, r4
   27b44:	4630      	mov	r0, r6
   27b46:	f7ff fd73 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27b4a:	f845 0904 	str.w	r0, [r5], #-4
    desc_stride *= input_shape.Dims(i);
   27b4e:	4621      	mov	r1, r4
    desc_out->strides[i] = desc_stride;
   27b50:	616f      	str	r7, [r5, #20]
    desc_stride *= input_shape.Dims(i);
   27b52:	4630      	mov	r0, r6
   27b54:	f7ff fd6c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = N - 1; i >= 0; --i) {
   27b58:	3c01      	subs	r4, #1
    desc_stride *= input_shape.Dims(i);
   27b5a:	fb00 f707 	mul.w	r7, r0, r7
  for (int i = N - 1; i >= 0; --i) {
   27b5e:	d2f0      	bcs.n	27b42 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0xc>
}
   27b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027b62 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
inline void NdArrayDescsForElementwiseBroadcast(
   27b62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27b66:	460c      	mov	r4, r1
   27b68:	461e      	mov	r6, r3
  TFLITE_DCHECK(desc0_out != nullptr);
   27b6a:	4615      	mov	r5, r2
inline void NdArrayDescsForElementwiseBroadcast(
   27b6c:	b08d      	sub	sp, #52	; 0x34
  TFLITE_DCHECK(desc0_out != nullptr);
   27b6e:	b90a      	cbnz	r2, 27b74 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x12>
   27b70:	f009 f957 	bl	30e22 <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
   27b74:	2b00      	cmp	r3, #0
   27b76:	d0fb      	beq.n	27b70 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
    return RuntimeShape(new_shape_size, shape, 1);
   27b78:	4602      	mov	r2, r0
   27b7a:	2301      	movs	r3, #1
   27b7c:	2104      	movs	r1, #4
   27b7e:	4668      	mov	r0, sp
   27b80:	f7ff fdeb 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   27b84:	4622      	mov	r2, r4
  for (int i = 0; i < N; ++i) {
   27b86:	2400      	movs	r4, #0
   27b88:	2301      	movs	r3, #1
   27b8a:	2104      	movs	r1, #4
   27b8c:	a806      	add	r0, sp, #24
   27b8e:	f7ff fde4 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   27b92:	4629      	mov	r1, r5
   27b94:	4668      	mov	r0, sp
   27b96:	f7ff ffce 	bl	27b36 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   27b9a:	4631      	mov	r1, r6
   27b9c:	a806      	add	r0, sp, #24
   27b9e:	f7ff ffca 	bl	27b36 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   27ba2:	f04f 0810 	mov.w	r8, #16
   27ba6:	46a1      	mov	r9, r4
    const int extent0 = extended_input0_shape.Dims(i);
   27ba8:	4621      	mov	r1, r4
   27baa:	4668      	mov	r0, sp
   27bac:	f7ff fd40 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   27bb0:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   27bb2:	4607      	mov	r7, r0
    const int extent1 = extended_input1_shape.Dims(i);
   27bb4:	a806      	add	r0, sp, #24
   27bb6:	f7ff fd3b 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   27bba:	4287      	cmp	r7, r0
   27bbc:	d005      	beq.n	27bca <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>
      if (extent0 == 1) {
   27bbe:	2f01      	cmp	r7, #1
   27bc0:	d111      	bne.n	27be6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x84>
        desc0_out->strides[i] = 0;
   27bc2:	f845 9008 	str.w	r9, [r5, r8]
        desc0_out->extents[i] = extent1;
   27bc6:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < N; ++i) {
   27bca:	3401      	adds	r4, #1
   27bcc:	2c04      	cmp	r4, #4
   27bce:	f108 0804 	add.w	r8, r8, #4
   27bd2:	d1e9      	bne.n	27ba8 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x46>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   27bd4:	a806      	add	r0, sp, #24
   27bd6:	f7ff fd20 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   27bda:	4668      	mov	r0, sp
   27bdc:	f7ff fd1d 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   27be0:	b00d      	add	sp, #52	; 0x34
   27be2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   27be6:	2801      	cmp	r0, #1
   27be8:	d1c2      	bne.n	27b70 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
        desc1_out->strides[i] = 0;
   27bea:	f846 9008 	str.w	r9, [r6, r8]
        desc1_out->extents[i] = extent0;
   27bee:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
   27bf2:	e7ea      	b.n	27bca <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>

00027bf4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
                               const RuntimeShape& input1_shape,
                               const float* input1_data,
                               const RuntimeShape& input2_shape,
                               const float* input2_data,
                               const RuntimeShape& output_shape,
                               float* output_data) {
   27bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27bf8:	ed2d 8b04 	vpush	{d8-d9}
   27bfc:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27bfe:	af0a      	add	r7, sp, #40	; 0x28
                               float* output_data) {
   27c00:	9203      	str	r2, [sp, #12]
   27c02:	4683      	mov	fp, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27c04:	463a      	mov	r2, r7
                               float* output_data) {
   27c06:	4608      	mov	r0, r1
   27c08:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27c0a:	ab12      	add	r3, sp, #72	; 0x48
   27c0c:	f7ff ffa9 	bl	27b62 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   27c10:	2301      	movs	r3, #1
   27c12:	2104      	movs	r1, #4
   27c14:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   27c16:	a804      	add	r0, sp, #16
   27c18:	f7ff fd9f 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   27c1c:	2400      	movs	r4, #0
   27c1e:	2100      	movs	r1, #0
   27c20:	a804      	add	r0, sp, #16
   27c22:	f7ff fd05 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27c26:	42a0      	cmp	r0, r4
   27c28:	dd5c      	ble.n	27ce4 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xf0>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   27c2a:	2500      	movs	r5, #0
   27c2c:	f10d 0810 	add.w	r8, sp, #16
   27c30:	2101      	movs	r1, #1
   27c32:	4640      	mov	r0, r8
   27c34:	f7ff fcfc 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27c38:	42a8      	cmp	r0, r5
   27c3a:	dd51      	ble.n	27ce0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xec>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   27c3c:	2600      	movs	r6, #0
   27c3e:	2102      	movs	r1, #2
   27c40:	4640      	mov	r0, r8
   27c42:	f7ff fcf5 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27c46:	42b0      	cmp	r0, r6
   27c48:	dd48      	ble.n	27cdc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe8>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27c4a:	f04f 0900 	mov.w	r9, #0
   27c4e:	2103      	movs	r1, #3
   27c50:	4640      	mov	r0, r8
   27c52:	f7ff fced 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27c56:	4548      	cmp	r0, r9
   27c58:	dd3e      	ble.n	27cd8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0xe4>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   27c5a:	4633      	mov	r3, r6
   27c5c:	462a      	mov	r2, r5
   27c5e:	4621      	mov	r1, r4
   27c60:	f8cd 9000 	str.w	r9, [sp]
   27c64:	4638      	mov	r0, r7
   27c66:	f7ff fddb 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   27c6a:	4682      	mov	sl, r0
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   27c6c:	4633      	mov	r3, r6
   27c6e:	462a      	mov	r2, r5
   27c70:	4621      	mov	r1, r4
   27c72:	f8cd 9000 	str.w	r9, [sp]
   27c76:	a812      	add	r0, sp, #72	; 0x48
   27c78:	f7ff fdd2 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   27c7c:	9b03      	ldr	r3, [sp, #12]
                  params.float_activation_min, params.float_activation_max);
   27c7e:	ed9b 8a0d 	vldr	s16, [fp, #52]	; 0x34
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
   27c82:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   27c86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
              ActivationFunctionWithMinMax(
   27c88:	edda 8a00 	vldr	s17, [sl]
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   27c8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              ActivationFunctionWithMinMax(
   27c90:	edd0 7a00 	vldr	s15, [r0]
   27c94:	ee78 8aa7 	vadd.f32	s17, s17, s15
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27c98:	4633      	mov	r3, r6
   27c9a:	f8cd 9000 	str.w	r9, [sp]
   27c9e:	462a      	mov	r2, r5
   27ca0:	4621      	mov	r1, r4
   27ca2:	4640      	mov	r0, r8
   27ca4:	f7ff fd86 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   27ca8:	eef4 8ac8 	vcmpe.f32	s17, s16
   27cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                  params.float_activation_min, params.float_activation_max);
   27cb0:	ed9b 9a0e 	vldr	s18, [fp, #56]	; 0x38
   27cb4:	bf58      	it	pl
   27cb6:	eeb0 8a68 	vmovpl.f32	s16, s17
	return __b;
   27cba:	eeb4 9a48 	vcmp.f32	s18, s16
   27cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   27cc2:	bf48      	it	mi
   27cc4:	eeb0 8a49 	vmovmi.f32	s16, s18
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27cc8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27cca:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27cce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   27cd2:	ed80 8a00 	vstr	s16, [r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27cd6:	e7ba      	b.n	27c4e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   27cd8:	3601      	adds	r6, #1
   27cda:	e7b0      	b.n	27c3e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   27cdc:	3501      	adds	r5, #1
   27cde:	e7a5      	b.n	27c2c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x38>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   27ce0:	3401      	adds	r4, #1
   27ce2:	e79c      	b.n	27c1e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x2a>
      RuntimeShape::ExtendedShape(4, output_shape);
   27ce4:	a804      	add	r0, sp, #16
   27ce6:	f7ff fc98 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
   27cea:	b01b      	add	sp, #108	; 0x6c
   27cec:	ecbd 8b04 	vpop	{d8-d9}
   27cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027cf4 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
                               const RuntimeShape& input1_shape,
                               const int8_t* input1_data,
                               const RuntimeShape& input2_shape,
                               const int8_t* input2_data,
                               const RuntimeShape& output_shape,
                               int8_t* output_data) {
   27cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27cf8:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27cfa:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
                               int8_t* output_data) {
   27cfe:	9202      	str	r2, [sp, #8]
   27d00:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27d02:	465a      	mov	r2, fp
                               int8_t* output_data) {
   27d04:	4608      	mov	r0, r1
   27d06:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27d08:	ab12      	add	r3, sp, #72	; 0x48
   27d0a:	f7ff ff2a 	bl	27b62 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   27d0e:	2301      	movs	r3, #1
   27d10:	2104      	movs	r1, #4
   27d12:	9a25      	ldr	r2, [sp, #148]	; 0x94
   27d14:	a804      	add	r0, sp, #16
   27d16:	f7ff fd20 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   27d1a:	2600      	movs	r6, #0
   27d1c:	2100      	movs	r1, #0
   27d1e:	a804      	add	r0, sp, #16
   27d20:	f7ff fc86 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27d24:	42b0      	cmp	r0, r6
   27d26:	dd65      	ble.n	27df4 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x100>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   27d28:	2700      	movs	r7, #0
   27d2a:	f10d 0910 	add.w	r9, sp, #16
   27d2e:	2101      	movs	r1, #1
   27d30:	4648      	mov	r0, r9
   27d32:	f7ff fc7d 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27d36:	42b8      	cmp	r0, r7
   27d38:	dd5a      	ble.n	27df0 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xfc>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   27d3a:	f04f 0800 	mov.w	r8, #0
   27d3e:	2102      	movs	r1, #2
   27d40:	4648      	mov	r0, r9
   27d42:	f7ff fc75 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27d46:	4540      	cmp	r0, r8
   27d48:	dd50      	ble.n	27dec <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xf8>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27d4a:	f04f 0a00 	mov.w	sl, #0
   27d4e:	2103      	movs	r1, #3
   27d50:	4648      	mov	r0, r9
   27d52:	f7ff fc6d 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27d56:	4550      	cmp	r0, sl
   27d58:	dd45      	ble.n	27de6 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xf2>
          const int32_t input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   27d5a:	4643      	mov	r3, r8
   27d5c:	463a      	mov	r2, r7
   27d5e:	4631      	mov	r1, r6
   27d60:	f8cd a000 	str.w	sl, [sp]
   27d64:	4658      	mov	r0, fp
   27d66:	f7ff fd5b 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   27d6a:	9b02      	ldr	r3, [sp, #8]
          const int32_t input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27d6c:	463a      	mov	r2, r7
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   27d6e:	561d      	ldrsb	r5, [r3, r0]
   27d70:	6863      	ldr	r3, [r4, #4]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27d72:	4631      	mov	r1, r6
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   27d74:	441d      	add	r5, r3
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27d76:	f8cd a000 	str.w	sl, [sp]
   27d7a:	4643      	mov	r3, r8
   27d7c:	a812      	add	r0, sp, #72	; 0x48
   27d7e:	f7ff fd4f 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   27d82:	9b24      	ldr	r3, [sp, #144]	; 0x90
   27d84:	68a2      	ldr	r2, [r4, #8]
   27d86:	561b      	ldrsb	r3, [r3, r0]
          const int32_t shifted_input1_val =
              input1_val * (1 << params.left_shift);
   27d88:	f8d4 c018 	ldr.w	ip, [r4, #24]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27d8c:	4413      	add	r3, r2
          const int32_t shifted_input2_val =
   27d8e:	fa03 f30c 	lsl.w	r3, r3, ip
              input2_val * (1 << params.left_shift);
          const int32_t scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27d92:	fa05 f00c 	lsl.w	r0, r5, ip
   27d96:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
          const int32_t shifted_input2_val =
   27d9a:	9303      	str	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27d9c:	f7ee ff56 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27da0:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   27da4:	9b03      	ldr	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27da6:	4605      	mov	r5, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27da8:	4618      	mov	r0, r3
   27daa:	f7ee ff4f 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27dae:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   27db2:	4428      	add	r0, r5
   27db4:	f7ee ff4a 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  raw_sum, params.output_multiplier, params.output_shift) +
   27db8:	68e5      	ldr	r5, [r4, #12]
              params.output_offset;
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27dba:	4643      	mov	r3, r8
                  raw_sum, params.output_multiplier, params.output_shift) +
   27dbc:	4405      	add	r5, r0
   27dbe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27dc0:	f8cd a000 	str.w	sl, [sp]
   27dc4:	4285      	cmp	r5, r0
   27dc6:	bfb8      	it	lt
   27dc8:	4605      	movlt	r5, r0
   27dca:	6b20      	ldr	r0, [r4, #48]	; 0x30
   27dcc:	463a      	mov	r2, r7
   27dce:	4285      	cmp	r5, r0
   27dd0:	bfa8      	it	ge
   27dd2:	4605      	movge	r5, r0
   27dd4:	4631      	mov	r1, r6
   27dd6:	4648      	mov	r0, r9
   27dd8:	f7ff fcec 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   27ddc:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27dde:	f10a 0a01 	add.w	sl, sl, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27de2:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27de4:	e7b3      	b.n	27d4e <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   27de6:	f108 0801 	add.w	r8, r8, #1
   27dea:	e7a8      	b.n	27d3e <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   27dec:	3701      	adds	r7, #1
   27dee:	e79c      	b.n	27d2a <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   27df0:	3601      	adds	r6, #1
   27df2:	e793      	b.n	27d1c <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   27df4:	a804      	add	r0, sp, #16
   27df6:	f7ff fc10 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<int8_t>(clamped_output);
        }
      }
    }
  }
}
   27dfa:	b01b      	add	sp, #108	; 0x6c
   27dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027e00 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                               const RuntimeShape& input1_shape,
                               const uint8* input1_data,
                               const RuntimeShape& input2_shape,
                               const uint8* input2_data,
                               const RuntimeShape& output_shape,
                               uint8* output_data) {
   27e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27e04:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27e06:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
                               uint8* output_data) {
   27e0a:	9202      	str	r2, [sp, #8]
   27e0c:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27e0e:	465a      	mov	r2, fp
                               uint8* output_data) {
   27e10:	4608      	mov	r0, r1
   27e12:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   27e14:	ab12      	add	r3, sp, #72	; 0x48
   27e16:	f7ff fea4 	bl	27b62 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   27e1a:	2301      	movs	r3, #1
   27e1c:	2104      	movs	r1, #4
   27e1e:	9a25      	ldr	r2, [sp, #148]	; 0x94
   27e20:	a804      	add	r0, sp, #16
   27e22:	f7ff fc9a 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   27e26:	2600      	movs	r6, #0
   27e28:	2100      	movs	r1, #0
   27e2a:	a804      	add	r0, sp, #16
   27e2c:	f7ff fc00 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27e30:	42b0      	cmp	r0, r6
   27e32:	dd65      	ble.n	27f00 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x100>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   27e34:	2700      	movs	r7, #0
   27e36:	f10d 0910 	add.w	r9, sp, #16
   27e3a:	2101      	movs	r1, #1
   27e3c:	4648      	mov	r0, r9
   27e3e:	f7ff fbf7 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27e42:	42b8      	cmp	r0, r7
   27e44:	dd5a      	ble.n	27efc <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xfc>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   27e46:	f04f 0800 	mov.w	r8, #0
   27e4a:	2102      	movs	r1, #2
   27e4c:	4648      	mov	r0, r9
   27e4e:	f7ff fbef 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27e52:	4540      	cmp	r0, r8
   27e54:	dd50      	ble.n	27ef8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xf8>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27e56:	f04f 0a00 	mov.w	sl, #0
   27e5a:	2103      	movs	r1, #3
   27e5c:	4648      	mov	r0, r9
   27e5e:	f7ff fbe7 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   27e62:	4550      	cmp	r0, sl
   27e64:	dd45      	ble.n	27ef2 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xf2>
          const int32 input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   27e66:	4643      	mov	r3, r8
   27e68:	463a      	mov	r2, r7
   27e6a:	4631      	mov	r1, r6
   27e6c:	f8cd a000 	str.w	sl, [sp]
   27e70:	4658      	mov	r0, fp
   27e72:	f7ff fcd5 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   27e76:	9b02      	ldr	r3, [sp, #8]
          const int32 input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27e78:	463a      	mov	r2, r7
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   27e7a:	5c1d      	ldrb	r5, [r3, r0]
   27e7c:	6863      	ldr	r3, [r4, #4]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27e7e:	4631      	mov	r1, r6
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   27e80:	441d      	add	r5, r3
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27e82:	f8cd a000 	str.w	sl, [sp]
   27e86:	4643      	mov	r3, r8
   27e88:	a812      	add	r0, sp, #72	; 0x48
   27e8a:	f7ff fcc9 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   27e8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   27e90:	68a2      	ldr	r2, [r4, #8]
   27e92:	5c1b      	ldrb	r3, [r3, r0]
          const int32 shifted_input1_val =
              input1_val * (1 << params.left_shift);
   27e94:	f8d4 c018 	ldr.w	ip, [r4, #24]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   27e98:	4413      	add	r3, r2
          const int32 shifted_input2_val =
   27e9a:	fa03 f30c 	lsl.w	r3, r3, ip
              input2_val * (1 << params.left_shift);
          const int32 scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27e9e:	fa05 f00c 	lsl.w	r0, r5, ip
   27ea2:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
          const int32 shifted_input2_val =
   27ea6:	9303      	str	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27ea8:	f7ee fed0 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input1_val, params.input1_multiplier,
                  params.input1_shift);
          const int32 scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27eac:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
   27eb0:	9b03      	ldr	r3, [sp, #12]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27eb2:	4605      	mov	r5, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27eb4:	4618      	mov	r0, r3
   27eb6:	f7ee fec9 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  shifted_input2_val, params.input2_multiplier,
                  params.input2_shift);
          const int32 raw_sum = scaled_input1_val + scaled_input2_val;
          const int32 raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   27eba:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   27ebe:	4428      	add	r0, r5
   27ec0:	f7ee fec4 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
                  raw_sum, params.output_multiplier, params.output_shift) +
   27ec4:	68e5      	ldr	r5, [r4, #12]
              params.output_offset;
          const int32 clamped_output =
              std::min(params.quantized_activation_max,
                       std::max(params.quantized_activation_min, raw_output));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27ec6:	4643      	mov	r3, r8
                  raw_sum, params.output_multiplier, params.output_shift) +
   27ec8:	4405      	add	r5, r0
   27eca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27ecc:	f8cd a000 	str.w	sl, [sp]
   27ed0:	4285      	cmp	r5, r0
   27ed2:	bfb8      	it	lt
   27ed4:	4605      	movlt	r5, r0
   27ed6:	6b20      	ldr	r0, [r4, #48]	; 0x30
   27ed8:	463a      	mov	r2, r7
   27eda:	4285      	cmp	r5, r0
   27edc:	bfa8      	it	ge
   27ede:	4605      	movge	r5, r0
   27ee0:	4631      	mov	r1, r6
   27ee2:	4648      	mov	r0, r9
   27ee4:	f7ff fc66 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   27ee8:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27eea:	f10a 0a01 	add.w	sl, sl, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   27eee:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   27ef0:	e7b3      	b.n	27e5a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   27ef2:	f108 0801 	add.w	r8, r8, #1
   27ef6:	e7a8      	b.n	27e4a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   27ef8:	3701      	adds	r7, #1
   27efa:	e79c      	b.n	27e36 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   27efc:	3601      	adds	r6, #1
   27efe:	e793      	b.n	27e28 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   27f00:	a804      	add	r0, sp, #16
   27f02:	f7ff fb8a 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<uint8>(clamped_output);
        }
      }
    }
  }
}
   27f06:	b01b      	add	sp, #108	; 0x6c
   27f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00027f0c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>:
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   27f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   27f0e:	4614      	mov	r4, r2
   27f10:	461e      	mov	r6, r3
    op_params.left_shift = data->left_shift;
   27f12:	6a43      	ldr	r3, [r0, #36]	; 0x24
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   27f14:	b0b1      	sub	sp, #196	; 0xc4
    op_params.left_shift = data->left_shift;
   27f16:	931c      	str	r3, [sp, #112]	; 0x70
    op_params.input1_offset = data->input1_offset;
   27f18:	6a83      	ldr	r3, [r0, #40]	; 0x28
TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
   27f1a:	460d      	mov	r5, r1
    op_params.input1_offset = data->input1_offset;
   27f1c:	9317      	str	r3, [sp, #92]	; 0x5c
    op_params.input1_multiplier = data->input1_multiplier;
   27f1e:	6943      	ldr	r3, [r0, #20]
   27f20:	931d      	str	r3, [sp, #116]	; 0x74
    op_params.input1_shift = data->input1_shift;
   27f22:	6843      	ldr	r3, [r0, #4]
   27f24:	931e      	str	r3, [sp, #120]	; 0x78
    op_params.input2_offset = data->input2_offset;
   27f26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   27f28:	9318      	str	r3, [sp, #96]	; 0x60
    op_params.input2_multiplier = data->input2_multiplier;
   27f2a:	6983      	ldr	r3, [r0, #24]
   27f2c:	931f      	str	r3, [sp, #124]	; 0x7c
    op_params.input2_shift = data->input2_shift;
   27f2e:	6883      	ldr	r3, [r0, #8]
   27f30:	9320      	str	r3, [sp, #128]	; 0x80
    op_params.output_offset = data->output_offset;
   27f32:	6b03      	ldr	r3, [r0, #48]	; 0x30
   27f34:	9319      	str	r3, [sp, #100]	; 0x64
    op_params.output_multiplier = data->output_multiplier;
   27f36:	69c3      	ldr	r3, [r0, #28]
   27f38:	931a      	str	r3, [sp, #104]	; 0x68
    op_params.output_shift = data->output_shift;
   27f3a:	6a03      	ldr	r3, [r0, #32]
   27f3c:	931b      	str	r3, [sp, #108]	; 0x6c
  params->quantized_activation_min = min;
   27f3e:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   27f42:	a810      	add	r0, sp, #64	; 0x40
  params->quantized_activation_max = max;
   27f44:	e9cd 2321 	strd	r2, r3, [sp, #132]	; 0x84
   27f48:	f7ff fbac 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27f4c:	4621      	mov	r1, r4
   27f4e:	a80a      	add	r0, sp, #40	; 0x28
   27f50:	f7ff fba8 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   27f54:	a90a      	add	r1, sp, #40	; 0x28
   27f56:	aa16      	add	r2, sp, #88	; 0x58
   27f58:	a810      	add	r0, sp, #64	; 0x40
   27f5a:	f7ff fd1a 	bl	27992 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   27f5e:	4607      	mov	r7, r0
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   27f60:	a80a      	add	r0, sp, #40	; 0x28
   27f62:	f7ff fb5a 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   27f66:	a810      	add	r0, sp, #64	; 0x40
   27f68:	f7ff fb57 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   27f6c:	7833      	ldrb	r3, [r6, #0]
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   27f6e:	4629      	mov	r1, r5
    if (output->type == kTfLiteInt8) {
   27f70:	2b09      	cmp	r3, #9
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   27f72:	a810      	add	r0, sp, #64	; 0x40
    if (output->type == kTfLiteInt8) {
   27f74:	d13e      	bne.n	27ff4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xe8>
      if (need_broadcast) {
   27f76:	b31f      	cbz	r7, 27fc0 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xb4>
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
   27f78:	f7ff fb94 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   27f7c:	b105      	cbz	r5, 27f80 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x74>
   27f7e:	686d      	ldr	r5, [r5, #4]
   27f80:	4621      	mov	r1, r4
   27f82:	a80a      	add	r0, sp, #40	; 0x28
   27f84:	f7ff fb8e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27f88:	b104      	cbz	r4, 27f8c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x80>
   27f8a:	6864      	ldr	r4, [r4, #4]
   27f8c:	4631      	mov	r1, r6
   27f8e:	a804      	add	r0, sp, #16
   27f90:	f7ff fb88 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27f94:	6873      	ldr	r3, [r6, #4]
   27f96:	462a      	mov	r2, r5
   27f98:	9302      	str	r3, [sp, #8]
   27f9a:	ab04      	add	r3, sp, #16
   27f9c:	e9cd 4300 	strd	r4, r3, [sp]
   27fa0:	a910      	add	r1, sp, #64	; 0x40
   27fa2:	ab0a      	add	r3, sp, #40	; 0x28
   27fa4:	a816      	add	r0, sp, #88	; 0x58
   27fa6:	f7ff fea5 	bl	27cf4 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
        TF_LITE_ADD(reference_ops, Add, uint8_t);
   27faa:	a804      	add	r0, sp, #16
   27fac:	f7ff fb35 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   27fb0:	a80a      	add	r0, sp, #40	; 0x28
   27fb2:	f7ff fb32 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   27fb6:	a810      	add	r0, sp, #64	; 0x40
   27fb8:	f7ff fb2f 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   27fbc:	b031      	add	sp, #196	; 0xc4
   27fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TF_LITE_ADD(reference_integer_ops, Add, int8_t);
   27fc0:	f7ff fb70 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27fc4:	b105      	cbz	r5, 27fc8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xbc>
   27fc6:	686d      	ldr	r5, [r5, #4]
   27fc8:	4621      	mov	r1, r4
   27fca:	a80a      	add	r0, sp, #40	; 0x28
   27fcc:	f7ff fb6a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27fd0:	b104      	cbz	r4, 27fd4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xc8>
   27fd2:	6864      	ldr	r4, [r4, #4]
   27fd4:	4631      	mov	r1, r6
   27fd6:	a804      	add	r0, sp, #16
   27fd8:	f7ff fb64 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27fdc:	6873      	ldr	r3, [r6, #4]
   27fde:	462a      	mov	r2, r5
   27fe0:	9302      	str	r3, [sp, #8]
   27fe2:	ab04      	add	r3, sp, #16
   27fe4:	e9cd 4300 	strd	r4, r3, [sp]
   27fe8:	a910      	add	r1, sp, #64	; 0x40
   27fea:	ab0a      	add	r3, sp, #40	; 0x28
   27fec:	a816      	add	r0, sp, #88	; 0x58
   27fee:	f7ff fc86 	bl	278fe <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
   27ff2:	e7da      	b.n	27faa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
      if (need_broadcast) {
   27ff4:	b1cf      	cbz	r7, 2802a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x11e>
        TF_LITE_ADD(reference_ops, BroadcastAdd4DSlow, uint8_t);
   27ff6:	f7ff fb55 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   27ffa:	b105      	cbz	r5, 27ffe <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xf2>
   27ffc:	686d      	ldr	r5, [r5, #4]
   27ffe:	4621      	mov	r1, r4
   28000:	a80a      	add	r0, sp, #40	; 0x28
   28002:	f7ff fb4f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   28006:	b104      	cbz	r4, 2800a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xfe>
   28008:	6864      	ldr	r4, [r4, #4]
   2800a:	4631      	mov	r1, r6
   2800c:	a804      	add	r0, sp, #16
   2800e:	f7ff fb49 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   28012:	6873      	ldr	r3, [r6, #4]
   28014:	462a      	mov	r2, r5
   28016:	9302      	str	r3, [sp, #8]
   28018:	ab04      	add	r3, sp, #16
   2801a:	e9cd 4300 	strd	r4, r3, [sp]
   2801e:	a910      	add	r1, sp, #64	; 0x40
   28020:	ab0a      	add	r3, sp, #40	; 0x28
   28022:	a816      	add	r0, sp, #88	; 0x58
   28024:	f7ff feec 	bl	27e00 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   28028:	e7bf      	b.n	27faa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
        TF_LITE_ADD(reference_ops, Add, uint8_t);
   2802a:	f7ff fb3b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2802e:	b105      	cbz	r5, 28032 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x126>
   28030:	686d      	ldr	r5, [r5, #4]
   28032:	4621      	mov	r1, r4
   28034:	a80a      	add	r0, sp, #40	; 0x28
   28036:	f7ff fb35 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2803a:	b104      	cbz	r4, 2803e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x132>
   2803c:	6864      	ldr	r4, [r4, #4]
   2803e:	4631      	mov	r1, r6
   28040:	a804      	add	r0, sp, #16
   28042:	f7ff fb2f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   28046:	6873      	ldr	r3, [r6, #4]
   28048:	462a      	mov	r2, r5
   2804a:	9302      	str	r3, [sp, #8]
   2804c:	ab04      	add	r3, sp, #16
   2804e:	e9cd 4300 	strd	r4, r3, [sp]
   28052:	a910      	add	r1, sp, #64	; 0x40
   28054:	ab0a      	add	r3, sp, #40	; 0x28
   28056:	a816      	add	r0, sp, #88	; 0x58
   28058:	f7ff fc06 	bl	27868 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   2805c:	e7a5      	b.n	27faa <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>

0002805e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
                              TfLiteTensor* output) {
   2805e:	b508      	push	{r3, lr}
   28060:	4618      	mov	r0, r3
   28062:	9b04      	ldr	r3, [sp, #16]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   28064:	781a      	ldrb	r2, [r3, #0]
   28066:	2a03      	cmp	r2, #3
   28068:	d001      	beq.n	2806e <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x10>
   2806a:	2a09      	cmp	r2, #9
   2806c:	d103      	bne.n	28076 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x18>
   2806e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   28072:	f7ff ff4b 	bl	27f0c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>
}
   28076:	2000      	movs	r0, #0
   28078:	bd08      	pop	{r3, pc}

0002807a <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
namespace tflite {

namespace reference_ops {

template <typename T1, typename T2, typename T3, typename Cmp>
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   2807a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               const T3* input2_data, const RuntimeShape& output_shape,
               T2* output_data, const Cmp& cmp) {
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   2807e:	6807      	ldr	r7, [r0, #0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28080:	b085      	sub	sp, #20
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28082:	2f00      	cmp	r7, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28084:	4605      	mov	r5, r0
   28086:	461e      	mov	r6, r3
   28088:	9102      	str	r1, [sp, #8]
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   2808a:	dc01      	bgt.n	28090 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x16>
   2808c:	f008 fec9 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   28090:	6831      	ldr	r1, [r6, #0]
   28092:	1e7b      	subs	r3, r7, #1
   28094:	428b      	cmp	r3, r1
   28096:	d1f9      	bne.n	2808c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
                   output_shape.DimensionsCount());
  int axis = input2_data[0];
   28098:	6814      	ldr	r4, [r2, #0]
    axis += input1_shape.DimensionsCount();
  }
  const int axis_size = input1_shape.Dims(axis);

  int outer_size = 1;
  for (int i = 0; i < axis; ++i) {
   2809a:	f04f 0800 	mov.w	r8, #0
  if (axis < 0) {
   2809e:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   280a0:	bfb8      	it	lt
   280a2:	19e4      	addlt	r4, r4, r7
  const int axis_size = input1_shape.Dims(axis);
   280a4:	4621      	mov	r1, r4
   280a6:	f7ff fac3 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  int outer_size = 1;
   280aa:	f04f 0b01 	mov.w	fp, #1
  const int axis_size = input1_shape.Dims(axis);
   280ae:	9001      	str	r0, [sp, #4]
  for (int i = 0; i < axis; ++i) {
   280b0:	4544      	cmp	r4, r8
   280b2:	dd0f      	ble.n	280d4 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5a>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   280b4:	4641      	mov	r1, r8
   280b6:	4628      	mov	r0, r5
   280b8:	f7ff faba 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   280bc:	4641      	mov	r1, r8
   280be:	4681      	mov	r9, r0
   280c0:	4630      	mov	r0, r6
   280c2:	f7ff fab5 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   280c6:	4581      	cmp	r9, r0
   280c8:	d1e0      	bne.n	2808c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    outer_size *= input1_shape.Dims(i);
   280ca:	fb09 fb0b 	mul.w	fp, r9, fp
  for (int i = 0; i < axis; ++i) {
   280ce:	f108 0801 	add.w	r8, r8, #1
   280d2:	e7ed      	b.n	280b0 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x36>
  }

  int inner_size = 1;
  const int dims_count = input1_shape.DimensionsCount();
  for (int i = axis + 1; i < dims_count; ++i) {
   280d4:	f104 0801 	add.w	r8, r4, #1
  int inner_size = 1;
   280d8:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   280da:	45b8      	cmp	r8, r7
   280dc:	db2d      	blt.n	2813a <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xc0>
   280de:	9b01      	ldr	r3, [sp, #4]
   280e0:	9400      	str	r4, [sp, #0]
   280e2:	fb03 fe04 	mul.w	lr, r3, r4
   280e6:	00a3      	lsls	r3, r4, #2
   280e8:	9303      	str	r3, [sp, #12]
   280ea:	2300      	movs	r3, #0
   280ec:	4618      	mov	r0, r3
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
    inner_size *= input1_shape.Dims(i);
  }
  for (int outer = 0; outer < outer_size; ++outer) {
   280ee:	461d      	mov	r5, r3
   280f0:	45ab      	cmp	fp, r5
   280f2:	dd3f      	ble.n	28174 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xfa>
    for (int inner = 0; inner < inner_size; ++inner) {
   280f4:	2700      	movs	r7, #0
   280f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   280f8:	9900      	ldr	r1, [sp, #0]
   280fa:	eb02 0880 	add.w	r8, r2, r0, lsl #2
   280fe:	9a02      	ldr	r2, [sp, #8]
   28100:	eb02 0681 	add.w	r6, r2, r1, lsl #2
   28104:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
   28108:	42bc      	cmp	r4, r7
   2810a:	dd2c      	ble.n	28166 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xec>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   2810c:	ecfa 7a01 	vldmia	sl!, {s15}
   28110:	46b4      	mov	ip, r6
      T2 min_max_index = 0;
      for (int i = 1; i < axis_size; ++i) {
   28112:	2201      	movs	r2, #1
      T2 min_max_index = 0;
   28114:	f04f 0900 	mov.w	r9, #0
      for (int i = 1; i < axis_size; ++i) {
   28118:	9901      	ldr	r1, [sp, #4]
   2811a:	428a      	cmp	r2, r1
   2811c:	da1e      	bge.n	2815c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
        const auto& curr_value =
            input1_data[(outer * axis_size + i) * inner_size + inner];
        if (cmp(curr_value, min_max_value)) {
   2811e:	ed9c 7a00 	vldr	s14, [ip]
   28122:	eeb4 7ae7 	vcmpe.f32	s14, s15
   28126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2812a:	9903      	ldr	r1, [sp, #12]
   2812c:	bfc4      	itt	gt
   2812e:	4691      	movgt	r9, r2
          min_max_value = curr_value;
   28130:	eef0 7a47 	vmovgt.f32	s15, s14
      for (int i = 1; i < axis_size; ++i) {
   28134:	3201      	adds	r2, #1
   28136:	448c      	add	ip, r1
   28138:	e7ee      	b.n	28118 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x9e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   2813a:	4641      	mov	r1, r8
   2813c:	4628      	mov	r0, r5
   2813e:	f7ff fa77 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28142:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   28146:	4681      	mov	r9, r0
   28148:	4630      	mov	r0, r6
   2814a:	f7ff fa71 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2814e:	4581      	cmp	r9, r0
   28150:	d19c      	bne.n	2808c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    inner_size *= input1_shape.Dims(i);
   28152:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   28156:	f108 0801 	add.w	r8, r8, #1
   2815a:	e7be      	b.n	280da <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x60>
          min_max_index = static_cast<T2>(i);
        }
      }
      output_data[outer * inner_size + inner] = min_max_index;
   2815c:	f848 9b04 	str.w	r9, [r8], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   28160:	3701      	adds	r7, #1
   28162:	3604      	adds	r6, #4
   28164:	e7d0      	b.n	28108 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x8e>
  for (int outer = 0; outer < outer_size; ++outer) {
   28166:	9a00      	ldr	r2, [sp, #0]
   28168:	3501      	adds	r5, #1
   2816a:	4472      	add	r2, lr
   2816c:	4420      	add	r0, r4
   2816e:	4473      	add	r3, lr
   28170:	9200      	str	r2, [sp, #0]
   28172:	e7bd      	b.n	280f0 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
    }
  }
}
   28174:	b005      	add	sp, #20
   28176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002817a <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   2817a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   2817e:	6807      	ldr	r7, [r0, #0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28180:	b085      	sub	sp, #20
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28182:	2f00      	cmp	r7, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28184:	4605      	mov	r5, r0
   28186:	461e      	mov	r6, r3
   28188:	9102      	str	r1, [sp, #8]
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   2818a:	dc01      	bgt.n	28190 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x16>
   2818c:	f008 fe49 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   28190:	6831      	ldr	r1, [r6, #0]
   28192:	1e7b      	subs	r3, r7, #1
   28194:	428b      	cmp	r3, r1
   28196:	d1f9      	bne.n	2818c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
  int axis = input2_data[0];
   28198:	6814      	ldr	r4, [r2, #0]
  for (int i = 0; i < axis; ++i) {
   2819a:	f04f 0800 	mov.w	r8, #0
  if (axis < 0) {
   2819e:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   281a0:	bfb8      	it	lt
   281a2:	19e4      	addlt	r4, r4, r7
  const int axis_size = input1_shape.Dims(axis);
   281a4:	4621      	mov	r1, r4
   281a6:	f7ff fa43 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  int outer_size = 1;
   281aa:	f04f 0b01 	mov.w	fp, #1
  const int axis_size = input1_shape.Dims(axis);
   281ae:	9001      	str	r0, [sp, #4]
  for (int i = 0; i < axis; ++i) {
   281b0:	4544      	cmp	r4, r8
   281b2:	dd0f      	ble.n	281d4 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5a>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   281b4:	4641      	mov	r1, r8
   281b6:	4628      	mov	r0, r5
   281b8:	f7ff fa3a 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   281bc:	4641      	mov	r1, r8
   281be:	4681      	mov	r9, r0
   281c0:	4630      	mov	r0, r6
   281c2:	f7ff fa35 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   281c6:	4581      	cmp	r9, r0
   281c8:	d1e0      	bne.n	2818c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    outer_size *= input1_shape.Dims(i);
   281ca:	fb09 fb0b 	mul.w	fp, r9, fp
  for (int i = 0; i < axis; ++i) {
   281ce:	f108 0801 	add.w	r8, r8, #1
   281d2:	e7ed      	b.n	281b0 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x36>
  for (int i = axis + 1; i < dims_count; ++i) {
   281d4:	f104 0801 	add.w	r8, r4, #1
  int inner_size = 1;
   281d8:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   281da:	45b8      	cmp	r8, r7
   281dc:	db2d      	blt.n	2823a <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xc0>
   281de:	9b01      	ldr	r3, [sp, #4]
   281e0:	9400      	str	r4, [sp, #0]
   281e2:	fb03 fe04 	mul.w	lr, r3, r4
   281e6:	00a3      	lsls	r3, r4, #2
   281e8:	9303      	str	r3, [sp, #12]
   281ea:	2300      	movs	r3, #0
   281ec:	4618      	mov	r0, r3
  for (int outer = 0; outer < outer_size; ++outer) {
   281ee:	461d      	mov	r5, r3
   281f0:	45ab      	cmp	fp, r5
   281f2:	dd3f      	ble.n	28274 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xfa>
    for (int inner = 0; inner < inner_size; ++inner) {
   281f4:	2700      	movs	r7, #0
   281f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   281f8:	9900      	ldr	r1, [sp, #0]
   281fa:	eb02 0880 	add.w	r8, r2, r0, lsl #2
   281fe:	9a02      	ldr	r2, [sp, #8]
   28200:	eb02 0681 	add.w	r6, r2, r1, lsl #2
   28204:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
   28208:	42bc      	cmp	r4, r7
   2820a:	dd2c      	ble.n	28266 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xec>
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   2820c:	ecfa 7a01 	vldmia	sl!, {s15}
   28210:	46b4      	mov	ip, r6
      for (int i = 1; i < axis_size; ++i) {
   28212:	2201      	movs	r2, #1
      T2 min_max_index = 0;
   28214:	f04f 0900 	mov.w	r9, #0
      for (int i = 1; i < axis_size; ++i) {
   28218:	9901      	ldr	r1, [sp, #4]
   2821a:	428a      	cmp	r2, r1
   2821c:	da1e      	bge.n	2825c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
        if (cmp(curr_value, min_max_value)) {
   2821e:	ed9c 7a00 	vldr	s14, [ip]
   28222:	eeb4 7ae7 	vcmpe.f32	s14, s15
   28226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2822a:	9903      	ldr	r1, [sp, #12]
   2822c:	bf44      	itt	mi
   2822e:	4691      	movmi	r9, r2
          min_max_value = curr_value;
   28230:	eef0 7a47 	vmovmi.f32	s15, s14
      for (int i = 1; i < axis_size; ++i) {
   28234:	3201      	adds	r2, #1
   28236:	448c      	add	ip, r1
   28238:	e7ee      	b.n	28218 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x9e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   2823a:	4641      	mov	r1, r8
   2823c:	4628      	mov	r0, r5
   2823e:	f7ff f9f7 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28242:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
   28246:	4681      	mov	r9, r0
   28248:	4630      	mov	r0, r6
   2824a:	f7ff f9f1 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2824e:	4581      	cmp	r9, r0
   28250:	d19c      	bne.n	2818c <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x12>
    inner_size *= input1_shape.Dims(i);
   28252:	fb09 f404 	mul.w	r4, r9, r4
  for (int i = axis + 1; i < dims_count; ++i) {
   28256:	f108 0801 	add.w	r8, r8, #1
   2825a:	e7be      	b.n	281da <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x60>
      output_data[outer * inner_size + inner] = min_max_index;
   2825c:	f848 9b04 	str.w	r9, [r8], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   28260:	3701      	adds	r7, #1
   28262:	3604      	adds	r6, #4
   28264:	e7d0      	b.n	28208 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x8e>
  for (int outer = 0; outer < outer_size; ++outer) {
   28266:	9a00      	ldr	r2, [sp, #0]
   28268:	3501      	adds	r5, #1
   2826a:	4472      	add	r2, lr
   2826c:	4420      	add	r0, r4
   2826e:	4473      	add	r3, lr
   28270:	9200      	str	r2, [sp, #0]
   28272:	e7bd      	b.n	281f0 <_ZN6tflite13reference_ops9ArgMinMaxIfiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   28274:	b005      	add	sp, #20
   28276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002827a <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   2827a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   2827e:	f8d0 a000 	ldr.w	sl, [r0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28282:	4606      	mov	r6, r0
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28284:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28288:	4689      	mov	r9, r1
   2828a:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   2828c:	dc01      	bgt.n	28292 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   2828e:	f008 fdc8 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   28292:	f8d8 1000 	ldr.w	r1, [r8]
   28296:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   2829a:	428b      	cmp	r3, r1
   2829c:	d1f7      	bne.n	2828e <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   2829e:	6814      	ldr	r4, [r2, #0]
  for (int i = 0; i < axis; ++i) {
   282a0:	f04f 0b00 	mov.w	fp, #0
  if (axis < 0) {
   282a4:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   282a6:	bfb8      	it	lt
   282a8:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   282aa:	4621      	mov	r1, r4
   282ac:	f7ff f9c0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  int outer_size = 1;
   282b0:	2701      	movs	r7, #1
  const int axis_size = input1_shape.Dims(axis);
   282b2:	4605      	mov	r5, r0
  for (int i = 0; i < axis; ++i) {
   282b4:	455c      	cmp	r4, fp
   282b6:	dd0f      	ble.n	282d8 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   282b8:	4659      	mov	r1, fp
   282ba:	4630      	mov	r0, r6
   282bc:	f7ff f9b8 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   282c0:	4659      	mov	r1, fp
   282c2:	9001      	str	r0, [sp, #4]
   282c4:	4640      	mov	r0, r8
   282c6:	f7ff f9b3 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   282ca:	9b01      	ldr	r3, [sp, #4]
   282cc:	4283      	cmp	r3, r0
   282ce:	d1de      	bne.n	2828e <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   282d0:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   282d2:	f10b 0b01 	add.w	fp, fp, #1
   282d6:	e7ed      	b.n	282b4 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   282d8:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   282dc:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   282de:	45d3      	cmp	fp, sl
   282e0:	db22      	blt.n	28328 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   282e2:	fb05 f304 	mul.w	r3, r5, r4
   282e6:	9301      	str	r3, [sp, #4]
   282e8:	2300      	movs	r3, #0
  for (int outer = 0; outer < outer_size; ++outer) {
   282ea:	461e      	mov	r6, r3
   282ec:	eb09 0104 	add.w	r1, r9, r4
   282f0:	42b7      	cmp	r7, r6
   282f2:	dd33      	ble.n	2835c <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   282f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   282f6:	eba1 0904 	sub.w	r9, r1, r4
   282fa:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   282fe:	2200      	movs	r2, #0
   28300:	4294      	cmp	r4, r2
   28302:	dd26      	ble.n	28352 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      for (int i = 1; i < axis_size; ++i) {
   28304:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   28306:	f04f 0800 	mov.w	r8, #0
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   2830a:	f819 ab01 	ldrb.w	sl, [r9], #1
   2830e:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   28312:	42a8      	cmp	r0, r5
   28314:	da19      	bge.n	2834a <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   28316:	f89c b000 	ldrb.w	fp, [ip]
   2831a:	44a4      	add	ip, r4
   2831c:	45d3      	cmp	fp, sl
   2831e:	bf84      	itt	hi
   28320:	4680      	movhi	r8, r0
   28322:	46da      	movhi	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   28324:	3001      	adds	r0, #1
   28326:	e7f4      	b.n	28312 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   28328:	4659      	mov	r1, fp
   2832a:	4630      	mov	r0, r6
   2832c:	f7ff f980 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28330:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   28334:	9001      	str	r0, [sp, #4]
   28336:	4640      	mov	r0, r8
   28338:	f7ff f97a 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2833c:	9b01      	ldr	r3, [sp, #4]
   2833e:	4283      	cmp	r3, r0
   28340:	d1a5      	bne.n	2828e <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   28342:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   28344:	f10b 0b01 	add.w	fp, fp, #1
   28348:	e7c9      	b.n	282de <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   2834a:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   2834e:	3201      	adds	r2, #1
   28350:	e7d6      	b.n	28300 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   28352:	9a01      	ldr	r2, [sp, #4]
   28354:	3601      	adds	r6, #1
   28356:	4423      	add	r3, r4
   28358:	4411      	add	r1, r2
   2835a:	e7c9      	b.n	282f0 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   2835c:	b003      	add	sp, #12
   2835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028362 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28362:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28366:	f8d0 a000 	ldr.w	sl, [r0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   2836a:	4606      	mov	r6, r0
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   2836c:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28370:	4689      	mov	r9, r1
   28372:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28374:	dc01      	bgt.n	2837a <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   28376:	f008 fd54 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   2837a:	f8d8 1000 	ldr.w	r1, [r8]
   2837e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   28382:	428b      	cmp	r3, r1
   28384:	d1f7      	bne.n	28376 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   28386:	6814      	ldr	r4, [r2, #0]
  for (int i = 0; i < axis; ++i) {
   28388:	f04f 0b00 	mov.w	fp, #0
  if (axis < 0) {
   2838c:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   2838e:	bfb8      	it	lt
   28390:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   28392:	4621      	mov	r1, r4
   28394:	f7ff f94c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  int outer_size = 1;
   28398:	2701      	movs	r7, #1
  const int axis_size = input1_shape.Dims(axis);
   2839a:	4605      	mov	r5, r0
  for (int i = 0; i < axis; ++i) {
   2839c:	455c      	cmp	r4, fp
   2839e:	dd0f      	ble.n	283c0 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   283a0:	4659      	mov	r1, fp
   283a2:	4630      	mov	r0, r6
   283a4:	f7ff f944 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   283a8:	4659      	mov	r1, fp
   283aa:	9001      	str	r0, [sp, #4]
   283ac:	4640      	mov	r0, r8
   283ae:	f7ff f93f 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   283b2:	9b01      	ldr	r3, [sp, #4]
   283b4:	4283      	cmp	r3, r0
   283b6:	d1de      	bne.n	28376 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   283b8:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   283ba:	f10b 0b01 	add.w	fp, fp, #1
   283be:	e7ed      	b.n	2839c <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   283c0:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   283c4:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   283c6:	45d3      	cmp	fp, sl
   283c8:	db22      	blt.n	28410 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   283ca:	fb05 f304 	mul.w	r3, r5, r4
   283ce:	9301      	str	r3, [sp, #4]
   283d0:	2300      	movs	r3, #0
  for (int outer = 0; outer < outer_size; ++outer) {
   283d2:	461e      	mov	r6, r3
   283d4:	eb09 0104 	add.w	r1, r9, r4
   283d8:	42b7      	cmp	r7, r6
   283da:	dd33      	ble.n	28444 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   283dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   283de:	eba1 0904 	sub.w	r9, r1, r4
   283e2:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   283e6:	2200      	movs	r2, #0
   283e8:	4294      	cmp	r4, r2
   283ea:	dd26      	ble.n	2843a <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      for (int i = 1; i < axis_size; ++i) {
   283ec:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   283ee:	f04f 0800 	mov.w	r8, #0
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   283f2:	f819 ab01 	ldrb.w	sl, [r9], #1
   283f6:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   283fa:	42a8      	cmp	r0, r5
   283fc:	da19      	bge.n	28432 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   283fe:	f89c b000 	ldrb.w	fp, [ip]
   28402:	44a4      	add	ip, r4
   28404:	45d3      	cmp	fp, sl
   28406:	bf3c      	itt	cc
   28408:	4680      	movcc	r8, r0
   2840a:	46da      	movcc	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   2840c:	3001      	adds	r0, #1
   2840e:	e7f4      	b.n	283fa <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   28410:	4659      	mov	r1, fp
   28412:	4630      	mov	r0, r6
   28414:	f7ff f90c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28418:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   2841c:	9001      	str	r0, [sp, #4]
   2841e:	4640      	mov	r0, r8
   28420:	f7ff f906 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28424:	9b01      	ldr	r3, [sp, #4]
   28426:	4283      	cmp	r3, r0
   28428:	d1a5      	bne.n	28376 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   2842a:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   2842c:	f10b 0b01 	add.w	fp, fp, #1
   28430:	e7c9      	b.n	283c6 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   28432:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   28436:	3201      	adds	r2, #1
   28438:	e7d6      	b.n	283e8 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   2843a:	9a01      	ldr	r2, [sp, #4]
   2843c:	3601      	adds	r6, #1
   2843e:	4423      	add	r3, r4
   28440:	4411      	add	r1, r2
   28442:	e7c9      	b.n	283d8 <_ZN6tflite13reference_ops9ArgMinMaxIhiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   28444:	b003      	add	sp, #12
   28446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002844a <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   2844a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   2844e:	f8d0 a000 	ldr.w	sl, [r0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28452:	4606      	mov	r6, r0
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28454:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28458:	4689      	mov	r9, r1
   2845a:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   2845c:	dc01      	bgt.n	28462 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   2845e:	f008 fce0 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   28462:	f8d8 1000 	ldr.w	r1, [r8]
   28466:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   2846a:	428b      	cmp	r3, r1
   2846c:	d1f7      	bne.n	2845e <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   2846e:	6814      	ldr	r4, [r2, #0]
  for (int i = 0; i < axis; ++i) {
   28470:	f04f 0b00 	mov.w	fp, #0
  if (axis < 0) {
   28474:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   28476:	bfb8      	it	lt
   28478:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   2847a:	4621      	mov	r1, r4
   2847c:	f7ff f8d8 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  int outer_size = 1;
   28480:	2701      	movs	r7, #1
  const int axis_size = input1_shape.Dims(axis);
   28482:	4605      	mov	r5, r0
  for (int i = 0; i < axis; ++i) {
   28484:	455c      	cmp	r4, fp
   28486:	dd0f      	ble.n	284a8 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   28488:	4659      	mov	r1, fp
   2848a:	4630      	mov	r0, r6
   2848c:	f7ff f8d0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28490:	4659      	mov	r1, fp
   28492:	9001      	str	r0, [sp, #4]
   28494:	4640      	mov	r0, r8
   28496:	f7ff f8cb 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2849a:	9b01      	ldr	r3, [sp, #4]
   2849c:	4283      	cmp	r3, r0
   2849e:	d1de      	bne.n	2845e <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   284a0:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   284a2:	f10b 0b01 	add.w	fp, fp, #1
   284a6:	e7ed      	b.n	28484 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   284a8:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   284ac:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   284ae:	45d3      	cmp	fp, sl
   284b0:	db22      	blt.n	284f8 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   284b2:	fb05 f304 	mul.w	r3, r5, r4
   284b6:	9301      	str	r3, [sp, #4]
   284b8:	2300      	movs	r3, #0
  for (int outer = 0; outer < outer_size; ++outer) {
   284ba:	461e      	mov	r6, r3
   284bc:	eb09 0104 	add.w	r1, r9, r4
   284c0:	42b7      	cmp	r7, r6
   284c2:	dd33      	ble.n	2852c <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   284c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   284c6:	eba1 0904 	sub.w	r9, r1, r4
   284ca:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   284ce:	2200      	movs	r2, #0
   284d0:	4294      	cmp	r4, r2
   284d2:	dd26      	ble.n	28522 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      for (int i = 1; i < axis_size; ++i) {
   284d4:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   284d6:	f04f 0800 	mov.w	r8, #0
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   284da:	f919 ab01 	ldrsb.w	sl, [r9], #1
   284de:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   284e2:	42a8      	cmp	r0, r5
   284e4:	da19      	bge.n	2851a <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   284e6:	f99c b000 	ldrsb.w	fp, [ip]
   284ea:	44a4      	add	ip, r4
   284ec:	45d3      	cmp	fp, sl
   284ee:	bfc4      	itt	gt
   284f0:	4680      	movgt	r8, r0
   284f2:	46da      	movgt	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   284f4:	3001      	adds	r0, #1
   284f6:	e7f4      	b.n	284e2 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   284f8:	4659      	mov	r1, fp
   284fa:	4630      	mov	r0, r6
   284fc:	f7ff f898 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28500:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   28504:	9001      	str	r0, [sp, #4]
   28506:	4640      	mov	r0, r8
   28508:	f7ff f892 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2850c:	9b01      	ldr	r3, [sp, #4]
   2850e:	4283      	cmp	r3, r0
   28510:	d1a5      	bne.n	2845e <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   28512:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   28514:	f10b 0b01 	add.w	fp, fp, #1
   28518:	e7c9      	b.n	284ae <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   2851a:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   2851e:	3201      	adds	r2, #1
   28520:	e7d6      	b.n	284d0 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   28522:	9a01      	ldr	r2, [sp, #4]
   28524:	3601      	adds	r6, #1
   28526:	4423      	add	r3, r4
   28528:	4411      	add	r1, r2
   2852a:	e7c9      	b.n	284c0 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro7GreaterEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   2852c:	b003      	add	sp, #12
   2852e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028532 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_>:
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28532:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28536:	f8d0 a000 	ldr.w	sl, [r0]
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   2853a:	4606      	mov	r6, r0
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   2853c:	f1ba 0f00 	cmp.w	sl, #0
void ArgMinMax(const RuntimeShape& input1_shape, const T1* input1_data,
   28540:	4689      	mov	r9, r1
   28542:	4698      	mov	r8, r3
  TFLITE_DCHECK_GT(input1_shape.DimensionsCount(), 0);
   28544:	dc01      	bgt.n	2854a <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x18>
   28546:	f008 fc6c 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(input1_shape.DimensionsCount() - 1,
   2854a:	f8d8 1000 	ldr.w	r1, [r8]
   2854e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   28552:	428b      	cmp	r3, r1
   28554:	d1f7      	bne.n	28546 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
  int axis = input2_data[0];
   28556:	6814      	ldr	r4, [r2, #0]
  for (int i = 0; i < axis; ++i) {
   28558:	f04f 0b00 	mov.w	fp, #0
  if (axis < 0) {
   2855c:	2c00      	cmp	r4, #0
    axis += input1_shape.DimensionsCount();
   2855e:	bfb8      	it	lt
   28560:	4454      	addlt	r4, sl
  const int axis_size = input1_shape.Dims(axis);
   28562:	4621      	mov	r1, r4
   28564:	f7ff f864 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  int outer_size = 1;
   28568:	2701      	movs	r7, #1
  const int axis_size = input1_shape.Dims(axis);
   2856a:	4605      	mov	r5, r0
  for (int i = 0; i < axis; ++i) {
   2856c:	455c      	cmp	r4, fp
   2856e:	dd0f      	ble.n	28590 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x5e>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i));
   28570:	4659      	mov	r1, fp
   28572:	4630      	mov	r0, r6
   28574:	f7ff f85c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28578:	4659      	mov	r1, fp
   2857a:	9001      	str	r0, [sp, #4]
   2857c:	4640      	mov	r0, r8
   2857e:	f7ff f857 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28582:	9b01      	ldr	r3, [sp, #4]
   28584:	4283      	cmp	r3, r0
   28586:	d1de      	bne.n	28546 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    outer_size *= input1_shape.Dims(i);
   28588:	435f      	muls	r7, r3
  for (int i = 0; i < axis; ++i) {
   2858a:	f10b 0b01 	add.w	fp, fp, #1
   2858e:	e7ed      	b.n	2856c <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x3a>
  for (int i = axis + 1; i < dims_count; ++i) {
   28590:	f104 0b01 	add.w	fp, r4, #1
  int inner_size = 1;
   28594:	2401      	movs	r4, #1
  for (int i = axis + 1; i < dims_count; ++i) {
   28596:	45d3      	cmp	fp, sl
   28598:	db22      	blt.n	285e0 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xae>
   2859a:	fb05 f304 	mul.w	r3, r5, r4
   2859e:	9301      	str	r3, [sp, #4]
   285a0:	2300      	movs	r3, #0
  for (int outer = 0; outer < outer_size; ++outer) {
   285a2:	461e      	mov	r6, r3
   285a4:	eb09 0104 	add.w	r1, r9, r4
   285a8:	42b7      	cmp	r7, r6
   285aa:	dd33      	ble.n	28614 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xe2>
   285ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   285ae:	eba1 0904 	sub.w	r9, r1, r4
   285b2:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
    for (int inner = 0; inner < inner_size; ++inner) {
   285b6:	2200      	movs	r2, #0
   285b8:	4294      	cmp	r4, r2
   285ba:	dd26      	ble.n	2860a <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd8>
      for (int i = 1; i < axis_size; ++i) {
   285bc:	2001      	movs	r0, #1
      T2 min_max_index = 0;
   285be:	f04f 0800 	mov.w	r8, #0
      auto min_max_value = input1_data[outer * axis_size * inner_size + inner];
   285c2:	f919 ab01 	ldrsb.w	sl, [r9], #1
   285c6:	eb02 0c01 	add.w	ip, r2, r1
      for (int i = 1; i < axis_size; ++i) {
   285ca:	42a8      	cmp	r0, r5
   285cc:	da19      	bge.n	28602 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0xd0>
        if (cmp(curr_value, min_max_value)) {
   285ce:	f99c b000 	ldrsb.w	fp, [ip]
   285d2:	44a4      	add	ip, r4
   285d4:	45d3      	cmp	fp, sl
   285d6:	bfbc      	itt	lt
   285d8:	4680      	movlt	r8, r0
   285da:	46da      	movlt	sl, fp
      for (int i = 1; i < axis_size; ++i) {
   285dc:	3001      	adds	r0, #1
   285de:	e7f4      	b.n	285ca <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x98>
    TFLITE_DCHECK_EQ(input1_shape.Dims(i), output_shape.Dims(i - 1));
   285e0:	4659      	mov	r1, fp
   285e2:	4630      	mov	r0, r6
   285e4:	f7ff f824 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   285e8:	f10b 31ff 	add.w	r1, fp, #4294967295	; 0xffffffff
   285ec:	9001      	str	r0, [sp, #4]
   285ee:	4640      	mov	r0, r8
   285f0:	f7ff f81e 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   285f4:	9b01      	ldr	r3, [sp, #4]
   285f6:	4283      	cmp	r3, r0
   285f8:	d1a5      	bne.n	28546 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x14>
    inner_size *= input1_shape.Dims(i);
   285fa:	435c      	muls	r4, r3
  for (int i = axis + 1; i < dims_count; ++i) {
   285fc:	f10b 0b01 	add.w	fp, fp, #1
   28600:	e7c9      	b.n	28596 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x64>
      output_data[outer * inner_size + inner] = min_max_index;
   28602:	f84e 8b04 	str.w	r8, [lr], #4
    for (int inner = 0; inner < inner_size; ++inner) {
   28606:	3201      	adds	r2, #1
   28608:	e7d6      	b.n	285b8 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x86>
  for (int outer = 0; outer < outer_size; ++outer) {
   2860a:	9a01      	ldr	r2, [sp, #4]
   2860c:	3601      	adds	r6, #1
   2860e:	4423      	add	r3, r4
   28610:	4411      	add	r1, r2
   28612:	e7c9      	b.n	285a8 <_ZN6tflite13reference_ops9ArgMinMaxIaiiNS_3ops5micro4LessEEEvRKNS_12RuntimeShapeEPKT_PKT1_S7_PT0_RKT2_+0x76>
}
   28614:	b003      	add	sp, #12
   28616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002861a <_ZN6tflite3ops5micro11arg_min_max10ArgMinEvalEP13TfLiteContextP10TfLiteNode>:
  return Eval(context, node, false);
   2861a:	2200      	movs	r2, #0
   2861c:	f7ee bcea 	b.w	16ff4 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>

00028620 <_ZN6tflite3ops5micro11arg_min_max10ArgMaxEvalEP13TfLiteContextP10TfLiteNode>:
  return Eval(context, node, true);
   28620:	2201      	movs	r2, #1
   28622:	f7ee bce7 	b.w	16ff4 <_ZN6tflite3ops5micro11arg_min_max4EvalEP13TfLiteContextP10TfLiteNodeb>

00028626 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>:
  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
   28626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ > kMaxSmallSize) {
   28628:	6803      	ldr	r3, [r0, #0]
  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
   2862a:	4604      	mov	r4, r0
    if (size_ > kMaxSmallSize) {
   2862c:	2b05      	cmp	r3, #5
  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
   2862e:	460d      	mov	r5, r1
   28630:	4616      	mov	r6, r2
    if (size_ > kMaxSmallSize) {
   28632:	dd03      	ble.n	2863c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x16>
      delete[] dims_pointer_;
   28634:	6840      	ldr	r0, [r0, #4]
   28636:	b108      	cbz	r0, 2863c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x16>
   28638:	f007 ffcc 	bl	305d4 <_ZdaPv>
    if (dimensions_count > kMaxSmallSize) {
   2863c:	2d05      	cmp	r5, #5
    size_ = dimensions_count;
   2863e:	6025      	str	r5, [r4, #0]
    if (dimensions_count > kMaxSmallSize) {
   28640:	ea4f 0785 	mov.w	r7, r5, lsl #2
   28644:	dc06      	bgt.n	28654 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   28646:	1d20      	adds	r0, r4, #4
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   28648:	463a      	mov	r2, r7
   2864a:	4631      	mov	r1, r6
  }
   2864c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
   28650:	f008 bc0a 	b.w	30e68 <memcpy>
      dims_pointer_ = new int32[dimensions_count];
   28654:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
   28658:	4285      	cmp	r5, r0
   2865a:	bfb4      	ite	lt
   2865c:	4638      	movlt	r0, r7
   2865e:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   28662:	f007 ffc6 	bl	305f2 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   28666:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32[dimensions_count];
   28668:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2866a:	2b05      	cmp	r3, #5
   2866c:	dcec      	bgt.n	28648 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x22>
   2866e:	e7ea      	b.n	28646 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi+0x20>

00028670 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   28670:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   28672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28676:	685a      	ldr	r2, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   28678:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   2867a:	6884      	ldr	r4, [r0, #8]
   2867c:	685d      	ldr	r5, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   2867e:	b08c      	sub	sp, #48	; 0x30
   28680:	eb04 1585 	add.w	r5, r4, r5, lsl #6
  if (tensor == nullptr) {
   28684:	eb14 1482 	adds.w	r4, r4, r2, lsl #6
   28688:	d108      	bne.n	2869c <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x2c>
  RuntimeShape() : size_(0) {}
   2868a:	9400      	str	r4, [sp, #0]
   2868c:	b985      	cbnz	r5, 286b0 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x40>
   2868e:	9506      	str	r5, [sp, #24]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   28690:	9f00      	ldr	r7, [sp, #0]
   28692:	9b06      	ldr	r3, [sp, #24]
   28694:	429f      	cmp	r7, r3
   28696:	d015      	beq.n	286c4 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x54>
   28698:	f008 fbc3 	bl	30e22 <abort>
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   2869c:	2300      	movs	r3, #0
  const int dims_size = dims->size;
   2869e:	68a2      	ldr	r2, [r4, #8]
    ReplaceWith(dimensions_count, dims_data);
   286a0:	4668      	mov	r0, sp
   286a2:	f852 1b04 	ldr.w	r1, [r2], #4
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   286a6:	9300      	str	r3, [sp, #0]
    ReplaceWith(dimensions_count, dims_data);
   286a8:	f7ff ffbd 	bl	28626 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   286ac:	6864      	ldr	r4, [r4, #4]
   286ae:	e7ed      	b.n	2868c <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x1c>
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   286b0:	2300      	movs	r3, #0
  const int dims_size = dims->size;
   286b2:	68aa      	ldr	r2, [r5, #8]
    ReplaceWith(dimensions_count, dims_data);
   286b4:	a806      	add	r0, sp, #24
   286b6:	f852 1b04 	ldr.w	r1, [r2], #4
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   286ba:	9306      	str	r3, [sp, #24]
    ReplaceWith(dimensions_count, dims_data);
   286bc:	f7ff ffb3 	bl	28626 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   286c0:	686d      	ldr	r5, [r5, #4]
   286c2:	e7e5      	b.n	28690 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x20>
  for (int i = 0; i < dims_count; ++i) {
   286c4:	2600      	movs	r6, #0
   286c6:	42b7      	cmp	r7, r6
   286c8:	dd0c      	ble.n	286e4 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x74>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   286ca:	4631      	mov	r1, r6
   286cc:	4668      	mov	r0, sp
   286ce:	f7fe ffaf 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   286d2:	4631      	mov	r1, r6
   286d4:	4680      	mov	r8, r0
   286d6:	a806      	add	r0, sp, #24
   286d8:	f7fe ffaa 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   286dc:	4580      	cmp	r8, r0
   286de:	d1db      	bne.n	28698 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x28>
  for (int i = 0; i < dims_count; ++i) {
   286e0:	3601      	adds	r6, #1
   286e2:	e7f0      	b.n	286c6 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x56>
    for (int i = 0; i < size_; i++) {
   286e4:	2300      	movs	r3, #0
    int buffer_size = 1;
   286e6:	2101      	movs	r1, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   286e8:	2f05      	cmp	r7, #5
   286ea:	bfcc      	ite	gt
   286ec:	9a01      	ldrgt	r2, [sp, #4]
   286ee:	aa01      	addle	r2, sp, #4
    for (int i = 0; i < size_; i++) {
   286f0:	429f      	cmp	r7, r3
   286f2:	dc0b      	bgt.n	2870c <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x9c>
   286f4:	462b      	mov	r3, r5

inline void Ceil(const RuntimeShape& input_shape, const float* input_data,
                 const RuntimeShape& output_shape, float* output_data) {
  const int flat_size = MatchingFlatSize(input_shape, output_shape);

  for (int i = 0; i < flat_size; ++i) {
   286f6:	2200      	movs	r2, #0
   286f8:	428a      	cmp	r2, r1
   286fa:	da0c      	bge.n	28716 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0xa6>
    output_data[i] = std::ceil(input_data[i]);
   286fc:	ecf4 7a01 	vldmia	r4!, {s15}
  { return __builtin_ceilf(__x); }
   28700:	fefa 7a67 	vrintp.f32	s15, s15
  for (int i = 0; i < flat_size; ++i) {
   28704:	3201      	adds	r2, #1
    output_data[i] = std::ceil(input_data[i]);
   28706:	ece3 7a01 	vstmia	r3!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   2870a:	e7f5      	b.n	286f8 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x88>
      buffer_size *= dims_data[i];
   2870c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   28710:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   28712:	4341      	muls	r1, r0
    for (int i = 0; i < size_; i++) {
   28714:	e7ec      	b.n	286f0 <_ZN6tflite3ops5micro4ceil4EvalEP13TfLiteContextP10TfLiteNode+0x80>
                      GetTensorShape(output), GetTensorData<float>(output));
   28716:	a806      	add	r0, sp, #24
   28718:	f7fe ff7f 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Ceil(GetTensorShape(input), GetTensorData<float>(input),
   2871c:	4668      	mov	r0, sp
   2871e:	f7fe ff7c 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   28722:	2000      	movs	r0, #0
   28724:	b00c      	add	sp, #48	; 0x30
   28726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>:
                            const RuntimeShape& check_shape_1) {
   2872a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   2872e:	6805      	ldr	r5, [r0, #0]
   28730:	680b      	ldr	r3, [r1, #0]
                            const RuntimeShape& check_shape_1) {
   28732:	4604      	mov	r4, r0
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   28734:	429d      	cmp	r5, r3
                            const RuntimeShape& check_shape_1) {
   28736:	4688      	mov	r8, r1
   28738:	4617      	mov	r7, r2
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   2873a:	d001      	beq.n	28740 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x16>
   2873c:	f008 fb71 	bl	30e22 <abort>
  for (int i = 0; i < dims_count; ++i) {
   28740:	2600      	movs	r6, #0
   28742:	42ae      	cmp	r6, r5
   28744:	da0c      	bge.n	28760 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x36>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   28746:	4631      	mov	r1, r6
   28748:	4620      	mov	r0, r4
   2874a:	f7fe ff71 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2874e:	4631      	mov	r1, r6
   28750:	4681      	mov	r9, r0
   28752:	4640      	mov	r0, r8
   28754:	f7fe ff6c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28758:	4581      	cmp	r9, r0
   2875a:	d1ef      	bne.n	2873c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   2875c:	3601      	adds	r6, #1
   2875e:	e7f0      	b.n	28742 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x18>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   28760:	683b      	ldr	r3, [r7, #0]
   28762:	429d      	cmp	r5, r3
   28764:	d1ea      	bne.n	2873c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   28766:	2600      	movs	r6, #0
   28768:	42b5      	cmp	r5, r6
   2876a:	dd0c      	ble.n	28786 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x5c>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   2876c:	4631      	mov	r1, r6
   2876e:	4620      	mov	r0, r4
   28770:	f7fe ff5e 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28774:	4631      	mov	r1, r6
   28776:	4680      	mov	r8, r0
   28778:	4638      	mov	r0, r7
   2877a:	f7fe ff59 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2877e:	4580      	cmp	r8, r0
   28780:	d1dc      	bne.n	2873c <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x12>
  for (int i = 0; i < dims_count; ++i) {
   28782:	3601      	adds	r6, #1
   28784:	e7f0      	b.n	28768 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x3e>
    for (int i = 0; i < size_; i++) {
   28786:	2300      	movs	r3, #0
    int buffer_size = 1;
   28788:	2001      	movs	r0, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2878a:	2d05      	cmp	r5, #5
   2878c:	bfcc      	ite	gt
   2878e:	6864      	ldrgt	r4, [r4, #4]
   28790:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   28792:	429d      	cmp	r5, r3
   28794:	dd04      	ble.n	287a0 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x76>
      buffer_size *= dims_data[i];
   28796:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   2879a:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   2879c:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
   2879e:	e7f8      	b.n	28792 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_+0x68>
}
   287a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>:
    const RuntimeShape& unextended_output_shape) {
   287a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   287a8:	461f      	mov	r7, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   287aa:	680b      	ldr	r3, [r1, #0]
    const RuntimeShape& unextended_output_shape) {
   287ac:	4606      	mov	r6, r0
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   287ae:	2b04      	cmp	r3, #4
    const RuntimeShape& unextended_output_shape) {
   287b0:	4614      	mov	r4, r2
   287b2:	b09c      	sub	sp, #112	; 0x70
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   287b4:	dd01      	ble.n	287ba <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x16>
   287b6:	f008 fb34 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   287ba:	6813      	ldr	r3, [r2, #0]
   287bc:	2b04      	cmp	r3, #4
   287be:	dcfa      	bgt.n	287b6 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x12>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   287c0:	683b      	ldr	r3, [r7, #0]
   287c2:	2b04      	cmp	r3, #4
   287c4:	dcf7      	bgt.n	287b6 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x12>
    return RuntimeShape(new_shape_size, shape, 1);
   287c6:	460a      	mov	r2, r1
   287c8:	2301      	movs	r3, #1
   287ca:	2104      	movs	r1, #4
   287cc:	4668      	mov	r0, sp
   287ce:	f7fe ffc4 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   287d2:	4622      	mov	r2, r4
  for (int i = 0; i < N; ++i) {
   287d4:	2400      	movs	r4, #0
   287d6:	2301      	movs	r3, #1
   287d8:	2104      	movs	r1, #4
   287da:	a806      	add	r0, sp, #24
   287dc:	f7fe ffbd 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   287e0:	4668      	mov	r0, sp
   287e2:	a90c      	add	r1, sp, #48	; 0x30
   287e4:	f7ff f9a7 	bl	27b36 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   287e8:	a914      	add	r1, sp, #80	; 0x50
   287ea:	a806      	add	r0, sp, #24
   287ec:	f7ff f9a3 	bl	27b36 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  for (int i = 0; i < N; ++i) {
   287f0:	46a2      	mov	sl, r4
   287f2:	f10d 0950 	add.w	r9, sp, #80	; 0x50
   287f6:	f10d 0830 	add.w	r8, sp, #48	; 0x30
    const int extent0 = extended_input0_shape.Dims(i);
   287fa:	4621      	mov	r1, r4
   287fc:	4668      	mov	r0, sp
   287fe:	f7fe ff17 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   28802:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   28804:	4605      	mov	r5, r0
    const int extent1 = extended_input1_shape.Dims(i);
   28806:	a806      	add	r0, sp, #24
   28808:	f7fe ff12 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   2880c:	4285      	cmp	r5, r0
   2880e:	d005      	beq.n	2881c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x78>
      if (extent0 == 1) {
   28810:	2d01      	cmp	r5, #1
   28812:	d12c      	bne.n	2886e <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0xca>
        desc0_out->strides[i] = 0;
   28814:	f8c8 a010 	str.w	sl, [r8, #16]
        desc0_out->extents[i] = extent1;
   28818:	f8c8 0000 	str.w	r0, [r8]
  for (int i = 0; i < N; ++i) {
   2881c:	3401      	adds	r4, #1
   2881e:	2c04      	cmp	r4, #4
   28820:	f109 0904 	add.w	r9, r9, #4
   28824:	f108 0804 	add.w	r8, r8, #4
   28828:	d1e7      	bne.n	287fa <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x56>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   2882a:	a806      	add	r0, sp, #24
   2882c:	f7fe fef5 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   28830:	4668      	mov	r0, sp
   28832:	f7fe fef2 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
          desc2};
   28836:	f106 0518 	add.w	r5, r6, #24
   2883a:	463a      	mov	r2, r7
   2883c:	4621      	mov	r1, r4
   2883e:	2301      	movs	r3, #1
   28840:	4630      	mov	r0, r6
   28842:	ac0c      	add	r4, sp, #48	; 0x30
   28844:	f7fe ff89 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   28848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   2884a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2884c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   28850:	ac14      	add	r4, sp, #80	; 0x50
   28852:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   28856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   28858:	f106 0538 	add.w	r5, r6, #56	; 0x38
   2885c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   2885e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   28862:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
   28866:	4630      	mov	r0, r6
   28868:	b01c      	add	sp, #112	; 0x70
   2886a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   2886e:	2801      	cmp	r0, #1
   28870:	d1a1      	bne.n	287b6 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x12>
        desc1_out->strides[i] = 0;
   28872:	f8c9 a010 	str.w	sl, [r9, #16]
        desc1_out->extents[i] = extent0;
   28876:	f8c9 5000 	str.w	r5, [r9]
   2887a:	e7cf      	b.n	2881c <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_+0x78>

0002887c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   2887c:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28880:	b098      	sub	sp, #96	; 0x60
   28882:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   28884:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28886:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28888:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2888a:	f7ff ff8b 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2888e:	2400      	movs	r4, #0
   28890:	2100      	movs	r1, #0
   28892:	a802      	add	r0, sp, #8
   28894:	f7fe fecc 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28898:	42a0      	cmp	r0, r4
   2889a:	dd45      	ble.n	28928 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2889c:	2500      	movs	r5, #0
   2889e:	2101      	movs	r1, #1
   288a0:	a802      	add	r0, sp, #8
   288a2:	f7fe fec5 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   288a6:	42a8      	cmp	r0, r5
   288a8:	dd3c      	ble.n	28924 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   288aa:	2600      	movs	r6, #0
   288ac:	2102      	movs	r1, #2
   288ae:	a802      	add	r0, sp, #8
   288b0:	f7fe febe 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   288b4:	42b0      	cmp	r0, r6
   288b6:	dd33      	ble.n	28920 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   288b8:	2700      	movs	r7, #0
   288ba:	2103      	movs	r1, #3
   288bc:	a802      	add	r0, sp, #8
   288be:	f7fe feb7 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   288c2:	42b8      	cmp	r0, r7
   288c4:	dd2a      	ble.n	2891c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   288c6:	4633      	mov	r3, r6
   288c8:	462a      	mov	r2, r5
   288ca:	4621      	mov	r1, r4
   288cc:	9700      	str	r7, [sp, #0]
   288ce:	a808      	add	r0, sp, #32
   288d0:	f7fe ffa6 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   288d4:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   288d6:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   288d8:	462a      	mov	r2, r5
   288da:	4621      	mov	r1, r4
   288dc:	9700      	str	r7, [sp, #0]
   288de:	a810      	add	r0, sp, #64	; 0x40
   288e0:	f7fe ff9e 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   288e4:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   288e6:	462a      	mov	r2, r5
   288e8:	4633      	mov	r3, r6
   288ea:	9700      	str	r7, [sp, #0]
   288ec:	4621      	mov	r1, r4
   288ee:	a802      	add	r0, sp, #8
   288f0:	f7fe ff60 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   288f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   288f6:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   288fa:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs == rhs;
   288fe:	ed9a 7a00 	vldr	s14, [sl]
   28902:	edd9 7a00 	vldr	s15, [r9]
   28906:	eeb4 7a67 	vcmp.f32	s14, s15
   2890a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2890e:	bf0c      	ite	eq
   28910:	2201      	moveq	r2, #1
   28912:	2200      	movne	r2, #0
   28914:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28916:	3701      	adds	r7, #1
  return lhs == rhs;
   28918:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2891a:	e7ce      	b.n	288ba <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2891c:	3601      	adds	r6, #1
   2891e:	e7c5      	b.n	288ac <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28920:	3501      	adds	r5, #1
   28922:	e7bc      	b.n	2889e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28924:	3401      	adds	r4, #1
   28926:	e7b3      	b.n	28890 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_7EqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28928:	a802      	add	r0, sp, #8
   2892a:	f7fe fe76 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2892e:	b018      	add	sp, #96	; 0x60
   28930:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028934 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28934:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28938:	b098      	sub	sp, #96	; 0x60
   2893a:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   2893c:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   2893e:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28940:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28942:	f7ff ff2f 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28946:	2400      	movs	r4, #0
   28948:	2100      	movs	r1, #0
   2894a:	a802      	add	r0, sp, #8
   2894c:	f7fe fe70 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28950:	42a0      	cmp	r0, r4
   28952:	dd45      	ble.n	289e0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28954:	2500      	movs	r5, #0
   28956:	2101      	movs	r1, #1
   28958:	a802      	add	r0, sp, #8
   2895a:	f7fe fe69 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2895e:	42a8      	cmp	r0, r5
   28960:	dd3c      	ble.n	289dc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28962:	2600      	movs	r6, #0
   28964:	2102      	movs	r1, #2
   28966:	a802      	add	r0, sp, #8
   28968:	f7fe fe62 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2896c:	42b0      	cmp	r0, r6
   2896e:	dd33      	ble.n	289d8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28970:	2700      	movs	r7, #0
   28972:	2103      	movs	r1, #3
   28974:	a802      	add	r0, sp, #8
   28976:	f7fe fe5b 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2897a:	42b8      	cmp	r0, r7
   2897c:	dd2a      	ble.n	289d4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2897e:	4633      	mov	r3, r6
   28980:	462a      	mov	r2, r5
   28982:	4621      	mov	r1, r4
   28984:	9700      	str	r7, [sp, #0]
   28986:	a808      	add	r0, sp, #32
   28988:	f7fe ff4a 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   2898c:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2898e:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28990:	462a      	mov	r2, r5
   28992:	4621      	mov	r1, r4
   28994:	9700      	str	r7, [sp, #0]
   28996:	a810      	add	r0, sp, #64	; 0x40
   28998:	f7fe ff42 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2899c:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2899e:	462a      	mov	r2, r5
   289a0:	4633      	mov	r3, r6
   289a2:	9700      	str	r7, [sp, #0]
   289a4:	4621      	mov	r1, r4
   289a6:	a802      	add	r0, sp, #8
   289a8:	f7fe ff04 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   289ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
   289ae:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   289b2:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs != rhs;
   289b6:	ed9a 7a00 	vldr	s14, [sl]
   289ba:	edd9 7a00 	vldr	s15, [r9]
   289be:	eeb4 7a67 	vcmp.f32	s14, s15
   289c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   289c6:	bf14      	ite	ne
   289c8:	2201      	movne	r2, #1
   289ca:	2200      	moveq	r2, #0
   289cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   289ce:	3701      	adds	r7, #1
  return lhs != rhs;
   289d0:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   289d2:	e7ce      	b.n	28972 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   289d4:	3601      	adds	r6, #1
   289d6:	e7c5      	b.n	28964 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   289d8:	3501      	adds	r5, #1
   289da:	e7bc      	b.n	28956 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   289dc:	3401      	adds	r4, #1
   289de:	e7b3      	b.n	28948 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_10NotEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   289e0:	a802      	add	r0, sp, #8
   289e2:	f7fe fe1a 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   289e6:	b018      	add	sp, #96	; 0x60
   289e8:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

000289ec <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   289ec:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   289f0:	b098      	sub	sp, #96	; 0x60
   289f2:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   289f4:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   289f6:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   289f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   289fa:	f7ff fed3 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   289fe:	2400      	movs	r4, #0
   28a00:	2100      	movs	r1, #0
   28a02:	a802      	add	r0, sp, #8
   28a04:	f7fe fe14 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28a08:	42a0      	cmp	r0, r4
   28a0a:	dd45      	ble.n	28a98 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28a0c:	2500      	movs	r5, #0
   28a0e:	2101      	movs	r1, #1
   28a10:	a802      	add	r0, sp, #8
   28a12:	f7fe fe0d 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28a16:	42a8      	cmp	r0, r5
   28a18:	dd3c      	ble.n	28a94 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28a1a:	2600      	movs	r6, #0
   28a1c:	2102      	movs	r1, #2
   28a1e:	a802      	add	r0, sp, #8
   28a20:	f7fe fe06 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28a24:	42b0      	cmp	r0, r6
   28a26:	dd33      	ble.n	28a90 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28a28:	2700      	movs	r7, #0
   28a2a:	2103      	movs	r1, #3
   28a2c:	a802      	add	r0, sp, #8
   28a2e:	f7fe fdff 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28a32:	42b8      	cmp	r0, r7
   28a34:	dd2a      	ble.n	28a8c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28a36:	4633      	mov	r3, r6
   28a38:	462a      	mov	r2, r5
   28a3a:	4621      	mov	r1, r4
   28a3c:	9700      	str	r7, [sp, #0]
   28a3e:	a808      	add	r0, sp, #32
   28a40:	f7fe feee 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28a44:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28a46:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28a48:	462a      	mov	r2, r5
   28a4a:	4621      	mov	r1, r4
   28a4c:	9700      	str	r7, [sp, #0]
   28a4e:	a810      	add	r0, sp, #64	; 0x40
   28a50:	f7fe fee6 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28a54:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28a56:	462a      	mov	r2, r5
   28a58:	4633      	mov	r3, r6
   28a5a:	9700      	str	r7, [sp, #0]
   28a5c:	4621      	mov	r1, r4
   28a5e:	a802      	add	r0, sp, #8
   28a60:	f7fe fea8 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28a64:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28a66:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   28a6a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs > rhs;
   28a6e:	ed9a 7a00 	vldr	s14, [sl]
   28a72:	edd9 7a00 	vldr	s15, [r9]
   28a76:	eeb4 7ae7 	vcmpe.f32	s14, s15
   28a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28a7e:	bfcc      	ite	gt
   28a80:	2201      	movgt	r2, #1
   28a82:	2200      	movle	r2, #0
   28a84:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28a86:	3701      	adds	r7, #1
  return lhs > rhs;
   28a88:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28a8a:	e7ce      	b.n	28a2a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28a8c:	3601      	adds	r6, #1
   28a8e:	e7c5      	b.n	28a1c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28a90:	3501      	adds	r5, #1
   28a92:	e7bc      	b.n	28a0e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28a94:	3401      	adds	r4, #1
   28a96:	e7b3      	b.n	28a00 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_9GreaterFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28a98:	a802      	add	r0, sp, #8
   28a9a:	f7fe fdbe 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   28a9e:	b018      	add	sp, #96	; 0x60
   28aa0:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028aa4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28aa4:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28aa8:	b098      	sub	sp, #96	; 0x60
   28aaa:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   28aac:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28aae:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28ab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28ab2:	f7ff fe77 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28ab6:	2400      	movs	r4, #0
   28ab8:	2100      	movs	r1, #0
   28aba:	a802      	add	r0, sp, #8
   28abc:	f7fe fdb8 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28ac0:	42a0      	cmp	r0, r4
   28ac2:	dd45      	ble.n	28b50 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28ac4:	2500      	movs	r5, #0
   28ac6:	2101      	movs	r1, #1
   28ac8:	a802      	add	r0, sp, #8
   28aca:	f7fe fdb1 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28ace:	42a8      	cmp	r0, r5
   28ad0:	dd3c      	ble.n	28b4c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28ad2:	2600      	movs	r6, #0
   28ad4:	2102      	movs	r1, #2
   28ad6:	a802      	add	r0, sp, #8
   28ad8:	f7fe fdaa 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28adc:	42b0      	cmp	r0, r6
   28ade:	dd33      	ble.n	28b48 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28ae0:	2700      	movs	r7, #0
   28ae2:	2103      	movs	r1, #3
   28ae4:	a802      	add	r0, sp, #8
   28ae6:	f7fe fda3 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28aea:	42b8      	cmp	r0, r7
   28aec:	dd2a      	ble.n	28b44 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28aee:	4633      	mov	r3, r6
   28af0:	462a      	mov	r2, r5
   28af2:	4621      	mov	r1, r4
   28af4:	9700      	str	r7, [sp, #0]
   28af6:	a808      	add	r0, sp, #32
   28af8:	f7fe fe92 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28afc:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28afe:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28b00:	462a      	mov	r2, r5
   28b02:	4621      	mov	r1, r4
   28b04:	9700      	str	r7, [sp, #0]
   28b06:	a810      	add	r0, sp, #64	; 0x40
   28b08:	f7fe fe8a 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28b0c:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28b0e:	462a      	mov	r2, r5
   28b10:	4633      	mov	r3, r6
   28b12:	9700      	str	r7, [sp, #0]
   28b14:	4621      	mov	r1, r4
   28b16:	a802      	add	r0, sp, #8
   28b18:	f7fe fe4c 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28b1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28b1e:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   28b22:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs >= rhs;
   28b26:	ed9a 7a00 	vldr	s14, [sl]
   28b2a:	edd9 7a00 	vldr	s15, [r9]
   28b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   28b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28b36:	bfac      	ite	ge
   28b38:	2201      	movge	r2, #1
   28b3a:	2200      	movlt	r2, #0
   28b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28b3e:	3701      	adds	r7, #1
  return lhs >= rhs;
   28b40:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28b42:	e7ce      	b.n	28ae2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28b44:	3601      	adds	r6, #1
   28b46:	e7c5      	b.n	28ad4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28b48:	3501      	adds	r5, #1
   28b4a:	e7bc      	b.n	28ac6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28b4c:	3401      	adds	r4, #1
   28b4e:	e7b3      	b.n	28ab8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_14GreaterEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28b50:	a802      	add	r0, sp, #8
   28b52:	f7fe fd62 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   28b56:	b018      	add	sp, #96	; 0x60
   28b58:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028b5c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28b5c:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28b60:	b098      	sub	sp, #96	; 0x60
   28b62:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   28b64:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28b66:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28b68:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28b6a:	f7ff fe1b 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28b6e:	2400      	movs	r4, #0
   28b70:	2100      	movs	r1, #0
   28b72:	a802      	add	r0, sp, #8
   28b74:	f7fe fd5c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28b78:	42a0      	cmp	r0, r4
   28b7a:	dd45      	ble.n	28c08 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28b7c:	2500      	movs	r5, #0
   28b7e:	2101      	movs	r1, #1
   28b80:	a802      	add	r0, sp, #8
   28b82:	f7fe fd55 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28b86:	42a8      	cmp	r0, r5
   28b88:	dd3c      	ble.n	28c04 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28b8a:	2600      	movs	r6, #0
   28b8c:	2102      	movs	r1, #2
   28b8e:	a802      	add	r0, sp, #8
   28b90:	f7fe fd4e 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28b94:	42b0      	cmp	r0, r6
   28b96:	dd33      	ble.n	28c00 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28b98:	2700      	movs	r7, #0
   28b9a:	2103      	movs	r1, #3
   28b9c:	a802      	add	r0, sp, #8
   28b9e:	f7fe fd47 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28ba2:	42b8      	cmp	r0, r7
   28ba4:	dd2a      	ble.n	28bfc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28ba6:	4633      	mov	r3, r6
   28ba8:	462a      	mov	r2, r5
   28baa:	4621      	mov	r1, r4
   28bac:	9700      	str	r7, [sp, #0]
   28bae:	a808      	add	r0, sp, #32
   28bb0:	f7fe fe36 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28bb4:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28bb6:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28bb8:	462a      	mov	r2, r5
   28bba:	4621      	mov	r1, r4
   28bbc:	9700      	str	r7, [sp, #0]
   28bbe:	a810      	add	r0, sp, #64	; 0x40
   28bc0:	f7fe fe2e 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28bc4:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28bc6:	462a      	mov	r2, r5
   28bc8:	4633      	mov	r3, r6
   28bca:	9700      	str	r7, [sp, #0]
   28bcc:	4621      	mov	r1, r4
   28bce:	a802      	add	r0, sp, #8
   28bd0:	f7fe fdf0 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28bd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28bd6:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   28bda:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs < rhs;
   28bde:	ed9a 7a00 	vldr	s14, [sl]
   28be2:	edd9 7a00 	vldr	s15, [r9]
   28be6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   28bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28bee:	bf4c      	ite	mi
   28bf0:	2201      	movmi	r2, #1
   28bf2:	2200      	movpl	r2, #0
   28bf4:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28bf6:	3701      	adds	r7, #1
  return lhs < rhs;
   28bf8:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28bfa:	e7ce      	b.n	28b9a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28bfc:	3601      	adds	r6, #1
   28bfe:	e7c5      	b.n	28b8c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28c00:	3501      	adds	r5, #1
   28c02:	e7bc      	b.n	28b7e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28c04:	3401      	adds	r4, #1
   28c06:	e7b3      	b.n	28b70 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_6LessFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28c08:	a802      	add	r0, sp, #8
   28c0a:	f7fe fd06 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   28c0e:	b018      	add	sp, #96	; 0x60
   28c10:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028c14 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28c14:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28c18:	b098      	sub	sp, #96	; 0x60
   28c1a:	4693      	mov	fp, r2
  const BroadcastComparison4DSlowCommon dims =
   28c1c:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28c1e:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28c20:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28c22:	f7ff fdbf 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28c26:	2400      	movs	r4, #0
   28c28:	2100      	movs	r1, #0
   28c2a:	a802      	add	r0, sp, #8
   28c2c:	f7fe fd00 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28c30:	42a0      	cmp	r0, r4
   28c32:	dd45      	ble.n	28cc0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28c34:	2500      	movs	r5, #0
   28c36:	2101      	movs	r1, #1
   28c38:	a802      	add	r0, sp, #8
   28c3a:	f7fe fcf9 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28c3e:	42a8      	cmp	r0, r5
   28c40:	dd3c      	ble.n	28cbc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28c42:	2600      	movs	r6, #0
   28c44:	2102      	movs	r1, #2
   28c46:	a802      	add	r0, sp, #8
   28c48:	f7fe fcf2 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28c4c:	42b0      	cmp	r0, r6
   28c4e:	dd33      	ble.n	28cb8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28c50:	2700      	movs	r7, #0
   28c52:	2103      	movs	r1, #3
   28c54:	a802      	add	r0, sp, #8
   28c56:	f7fe fceb 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28c5a:	42b8      	cmp	r0, r7
   28c5c:	dd2a      	ble.n	28cb4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28c5e:	4633      	mov	r3, r6
   28c60:	462a      	mov	r2, r5
   28c62:	4621      	mov	r1, r4
   28c64:	9700      	str	r7, [sp, #0]
   28c66:	a808      	add	r0, sp, #32
   28c68:	f7fe fdda 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28c6c:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28c6e:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28c70:	462a      	mov	r2, r5
   28c72:	4621      	mov	r1, r4
   28c74:	9700      	str	r7, [sp, #0]
   28c76:	a810      	add	r0, sp, #64	; 0x40
   28c78:	f7fe fdd2 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28c7c:	4681      	mov	r9, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28c7e:	462a      	mov	r2, r5
   28c80:	4633      	mov	r3, r6
   28c82:	9700      	str	r7, [sp, #0]
   28c84:	4621      	mov	r1, r4
   28c86:	a802      	add	r0, sp, #8
   28c88:	f7fe fd94 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28c8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28c8e:	eb0b 0a8a 	add.w	sl, fp, sl, lsl #2
   28c92:	eb03 0989 	add.w	r9, r3, r9, lsl #2
  return lhs <= rhs;
   28c96:	ed9a 7a00 	vldr	s14, [sl]
   28c9a:	edd9 7a00 	vldr	s15, [r9]
   28c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   28ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   28ca6:	bf94      	ite	ls
   28ca8:	2201      	movls	r2, #1
   28caa:	2200      	movhi	r2, #0
   28cac:	9b22      	ldr	r3, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28cae:	3701      	adds	r7, #1
  return lhs <= rhs;
   28cb0:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28cb2:	e7ce      	b.n	28c52 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28cb4:	3601      	adds	r6, #1
   28cb6:	e7c5      	b.n	28c44 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28cb8:	3501      	adds	r5, #1
   28cba:	e7bc      	b.n	28c36 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28cbc:	3401      	adds	r4, #1
   28cbe:	e7b3      	b.n	28c28 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIfXadL_ZNS0_11LessEqualFnIfEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28cc0:	a802      	add	r0, sp, #8
   28cc2:	f7fe fcaa 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   28cc6:	b018      	add	sp, #96	; 0x60
   28cc8:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028ccc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28ccc:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28cd0:	b098      	sub	sp, #96	; 0x60
   28cd2:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   28cd4:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28cd6:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28cd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28cda:	f7ff fd63 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28cde:	2400      	movs	r4, #0
   28ce0:	2100      	movs	r1, #0
   28ce2:	a802      	add	r0, sp, #8
   28ce4:	f7fe fca4 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28ce8:	42a0      	cmp	r0, r4
   28cea:	dd3d      	ble.n	28d68 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28cec:	2500      	movs	r5, #0
   28cee:	2101      	movs	r1, #1
   28cf0:	a802      	add	r0, sp, #8
   28cf2:	f7fe fc9d 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28cf6:	42a8      	cmp	r0, r5
   28cf8:	dd34      	ble.n	28d64 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28cfa:	2600      	movs	r6, #0
   28cfc:	2102      	movs	r1, #2
   28cfe:	a802      	add	r0, sp, #8
   28d00:	f7fe fc96 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28d04:	42b0      	cmp	r0, r6
   28d06:	dd2b      	ble.n	28d60 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28d08:	2700      	movs	r7, #0
   28d0a:	2103      	movs	r1, #3
   28d0c:	a802      	add	r0, sp, #8
   28d0e:	f7fe fc8f 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28d12:	42b8      	cmp	r0, r7
   28d14:	dd22      	ble.n	28d5c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28d16:	4633      	mov	r3, r6
   28d18:	462a      	mov	r2, r5
   28d1a:	4621      	mov	r1, r4
   28d1c:	9700      	str	r7, [sp, #0]
   28d1e:	a808      	add	r0, sp, #32
   28d20:	f7fe fd7e 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28d24:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28d26:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28d28:	462a      	mov	r2, r5
   28d2a:	4621      	mov	r1, r4
   28d2c:	9700      	str	r7, [sp, #0]
   28d2e:	a810      	add	r0, sp, #64	; 0x40
   28d30:	f7fe fd76 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28d34:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28d36:	4633      	mov	r3, r6
   28d38:	462a      	mov	r2, r5
   28d3a:	4621      	mov	r1, r4
   28d3c:	9700      	str	r7, [sp, #0]
   28d3e:	a802      	add	r0, sp, #8
   28d40:	f7fe fd38 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   28d44:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28d46:	f819 200b 	ldrb.w	r2, [r9, fp]
   28d4a:	f813 100a 	ldrb.w	r1, [r3, sl]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28d4e:	3701      	adds	r7, #1
  return lhs == rhs;
   28d50:	1a53      	subs	r3, r2, r1
   28d52:	425a      	negs	r2, r3
   28d54:	415a      	adcs	r2, r3
   28d56:	9b22      	ldr	r3, [sp, #136]	; 0x88
   28d58:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28d5a:	e7d6      	b.n	28d0a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28d5c:	3601      	adds	r6, #1
   28d5e:	e7cd      	b.n	28cfc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28d60:	3501      	adds	r5, #1
   28d62:	e7c4      	b.n	28cee <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28d64:	3401      	adds	r4, #1
   28d66:	e7bb      	b.n	28ce0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_7EqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28d68:	a802      	add	r0, sp, #8
   28d6a:	f7fe fc56 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   28d6e:	b018      	add	sp, #96	; 0x60
   28d70:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028d74 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28d74:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28d78:	b098      	sub	sp, #96	; 0x60
   28d7a:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   28d7c:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28d7e:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28d80:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28d82:	f7ff fd0f 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28d86:	2400      	movs	r4, #0
   28d88:	2100      	movs	r1, #0
   28d8a:	a802      	add	r0, sp, #8
   28d8c:	f7fe fc50 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28d90:	42a0      	cmp	r0, r4
   28d92:	dd3d      	ble.n	28e10 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28d94:	2500      	movs	r5, #0
   28d96:	2101      	movs	r1, #1
   28d98:	a802      	add	r0, sp, #8
   28d9a:	f7fe fc49 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28d9e:	42a8      	cmp	r0, r5
   28da0:	dd34      	ble.n	28e0c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28da2:	2600      	movs	r6, #0
   28da4:	2102      	movs	r1, #2
   28da6:	a802      	add	r0, sp, #8
   28da8:	f7fe fc42 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28dac:	42b0      	cmp	r0, r6
   28dae:	dd2b      	ble.n	28e08 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28db0:	2700      	movs	r7, #0
   28db2:	2103      	movs	r1, #3
   28db4:	a802      	add	r0, sp, #8
   28db6:	f7fe fc3b 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28dba:	42b8      	cmp	r0, r7
   28dbc:	dd22      	ble.n	28e04 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28dbe:	4633      	mov	r3, r6
   28dc0:	462a      	mov	r2, r5
   28dc2:	4621      	mov	r1, r4
   28dc4:	9700      	str	r7, [sp, #0]
   28dc6:	a808      	add	r0, sp, #32
   28dc8:	f7fe fd2a 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28dcc:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28dce:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28dd0:	462a      	mov	r2, r5
   28dd2:	4621      	mov	r1, r4
   28dd4:	9700      	str	r7, [sp, #0]
   28dd6:	a810      	add	r0, sp, #64	; 0x40
   28dd8:	f7fe fd22 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28ddc:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28dde:	4633      	mov	r3, r6
   28de0:	462a      	mov	r2, r5
   28de2:	4621      	mov	r1, r4
   28de4:	9700      	str	r7, [sp, #0]
   28de6:	a802      	add	r0, sp, #8
   28de8:	f7fe fce4 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   28dec:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28dee:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   28df2:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28df6:	3701      	adds	r7, #1
  return lhs == rhs;
   28df8:	1a53      	subs	r3, r2, r1
   28dfa:	425a      	negs	r2, r3
   28dfc:	415a      	adcs	r2, r3
   28dfe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   28e00:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28e02:	e7d6      	b.n	28db2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28e04:	3601      	adds	r6, #1
   28e06:	e7cd      	b.n	28da4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28e08:	3501      	adds	r5, #1
   28e0a:	e7c4      	b.n	28d96 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28e0c:	3401      	adds	r4, #1
   28e0e:	e7bb      	b.n	28d88 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28e10:	a802      	add	r0, sp, #8
   28e12:	f7fe fc02 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   28e16:	b018      	add	sp, #96	; 0x60
   28e18:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028e1c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28e1c:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   28e20:	b098      	sub	sp, #96	; 0x60
   28e22:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   28e24:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28e26:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28e28:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28e2a:	f7ff fcbb 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28e2e:	2400      	movs	r4, #0
   28e30:	2100      	movs	r1, #0
   28e32:	a802      	add	r0, sp, #8
   28e34:	f7fe fbfc 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28e38:	42a0      	cmp	r0, r4
   28e3a:	dd45      	ble.n	28ec8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28e3c:	2500      	movs	r5, #0
   28e3e:	2101      	movs	r1, #1
   28e40:	a802      	add	r0, sp, #8
   28e42:	f7fe fbf5 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28e46:	42a8      	cmp	r0, r5
   28e48:	dd3c      	ble.n	28ec4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28e4a:	f04f 0800 	mov.w	r8, #0
   28e4e:	2102      	movs	r1, #2
   28e50:	a802      	add	r0, sp, #8
   28e52:	f7fe fbed 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28e56:	4540      	cmp	r0, r8
   28e58:	dd32      	ble.n	28ec0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28e5a:	2700      	movs	r7, #0
   28e5c:	2103      	movs	r1, #3
   28e5e:	a802      	add	r0, sp, #8
   28e60:	f7fe fbe6 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28e64:	42b8      	cmp	r0, r7
   28e66:	dd28      	ble.n	28eba <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28e68:	4643      	mov	r3, r8
   28e6a:	462a      	mov	r2, r5
   28e6c:	4621      	mov	r1, r4
   28e6e:	9700      	str	r7, [sp, #0]
   28e70:	a808      	add	r0, sp, #32
   28e72:	f7fe fcd5 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28e76:	4643      	mov	r3, r8
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28e78:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28e7a:	462a      	mov	r2, r5
   28e7c:	4621      	mov	r1, r4
   28e7e:	9700      	str	r7, [sp, #0]
   28e80:	a810      	add	r0, sp, #64	; 0x40
   28e82:	f7fe fccd 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28e86:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28e88:	4643      	mov	r3, r8
   28e8a:	462a      	mov	r2, r5
   28e8c:	9700      	str	r7, [sp, #0]
   28e8e:	4621      	mov	r1, r4
   28e90:	a802      	add	r0, sp, #8
   28e92:	f7fe fc8f 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28e96:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28e98:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   28e9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs == rhs;
   28ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
   28ea4:	e9db ab00 	ldrd	sl, fp, [fp]
   28ea8:	459b      	cmp	fp, r3
   28eaa:	bf06      	itte	eq
   28eac:	4592      	cmpeq	sl, r2
   28eae:	2301      	moveq	r3, #1
   28eb0:	2300      	movne	r3, #0
   28eb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28eb4:	3701      	adds	r7, #1
  return lhs == rhs;
   28eb6:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28eb8:	e7d0      	b.n	28e5c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28eba:	f108 0801 	add.w	r8, r8, #1
   28ebe:	e7c6      	b.n	28e4e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28ec0:	3501      	adds	r5, #1
   28ec2:	e7bc      	b.n	28e3e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28ec4:	3401      	adds	r4, #1
   28ec6:	e7b3      	b.n	28e30 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_7EqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28ec8:	a802      	add	r0, sp, #8
   28eca:	f7fe fba6 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   28ece:	b018      	add	sp, #96	; 0x60
   28ed0:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

00028ed4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28ed4:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28ed8:	b098      	sub	sp, #96	; 0x60
   28eda:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   28edc:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28ede:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28ee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28ee2:	f7ff fc5f 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28ee6:	2400      	movs	r4, #0
   28ee8:	2100      	movs	r1, #0
   28eea:	a802      	add	r0, sp, #8
   28eec:	f7fe fba0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28ef0:	42a0      	cmp	r0, r4
   28ef2:	dd3b      	ble.n	28f6c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28ef4:	2500      	movs	r5, #0
   28ef6:	2101      	movs	r1, #1
   28ef8:	a802      	add	r0, sp, #8
   28efa:	f7fe fb99 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28efe:	42a8      	cmp	r0, r5
   28f00:	dd32      	ble.n	28f68 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28f02:	2600      	movs	r6, #0
   28f04:	2102      	movs	r1, #2
   28f06:	a802      	add	r0, sp, #8
   28f08:	f7fe fb92 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28f0c:	42b0      	cmp	r0, r6
   28f0e:	dd29      	ble.n	28f64 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28f10:	2700      	movs	r7, #0
   28f12:	2103      	movs	r1, #3
   28f14:	a802      	add	r0, sp, #8
   28f16:	f7fe fb8b 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28f1a:	42b8      	cmp	r0, r7
   28f1c:	dd20      	ble.n	28f60 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x8c>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28f1e:	4633      	mov	r3, r6
   28f20:	462a      	mov	r2, r5
   28f22:	4621      	mov	r1, r4
   28f24:	9700      	str	r7, [sp, #0]
   28f26:	a808      	add	r0, sp, #32
   28f28:	f7fe fc7a 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28f2c:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28f2e:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28f30:	462a      	mov	r2, r5
   28f32:	4621      	mov	r1, r4
   28f34:	9700      	str	r7, [sp, #0]
   28f36:	a810      	add	r0, sp, #64	; 0x40
   28f38:	f7fe fc72 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28f3c:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28f3e:	4633      	mov	r3, r6
   28f40:	462a      	mov	r2, r5
   28f42:	4621      	mov	r1, r4
   28f44:	9700      	str	r7, [sp, #0]
   28f46:	a802      	add	r0, sp, #8
   28f48:	f7fe fc34 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   28f4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28f4e:	f819 200b 	ldrb.w	r2, [r9, fp]
   28f52:	f813 100a 	ldrb.w	r1, [r3, sl]
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28f56:	9b22      	ldr	r3, [sp, #136]	; 0x88
  return lhs != rhs;
   28f58:	404a      	eors	r2, r1
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28f5a:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28f5c:	3701      	adds	r7, #1
   28f5e:	e7d8      	b.n	28f12 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28f60:	3601      	adds	r6, #1
   28f62:	e7cf      	b.n	28f04 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28f64:	3501      	adds	r5, #1
   28f66:	e7c6      	b.n	28ef6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28f68:	3401      	adds	r4, #1
   28f6a:	e7bd      	b.n	28ee8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIbXadL_ZNS0_10NotEqualFnIbEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   28f6c:	a802      	add	r0, sp, #8
   28f6e:	f7fe fb54 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   28f72:	b018      	add	sp, #96	; 0x60
   28f74:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00028f78 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   28f78:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   28f7c:	b098      	sub	sp, #96	; 0x60
   28f7e:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   28f80:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   28f82:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   28f84:	9b21      	ldr	r3, [sp, #132]	; 0x84
   28f86:	f7ff fc0d 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   28f8a:	2400      	movs	r4, #0
   28f8c:	2100      	movs	r1, #0
   28f8e:	a802      	add	r0, sp, #8
   28f90:	f7fe fb4e 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28f94:	42a0      	cmp	r0, r4
   28f96:	dd3d      	ble.n	29014 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   28f98:	2500      	movs	r5, #0
   28f9a:	2101      	movs	r1, #1
   28f9c:	a802      	add	r0, sp, #8
   28f9e:	f7fe fb47 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28fa2:	42a8      	cmp	r0, r5
   28fa4:	dd34      	ble.n	29010 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x98>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   28fa6:	2600      	movs	r6, #0
   28fa8:	2102      	movs	r1, #2
   28faa:	a802      	add	r0, sp, #8
   28fac:	f7fe fb40 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28fb0:	42b0      	cmp	r0, r6
   28fb2:	dd2b      	ble.n	2900c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x94>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   28fb4:	2700      	movs	r7, #0
   28fb6:	2103      	movs	r1, #3
   28fb8:	a802      	add	r0, sp, #8
   28fba:	f7fe fb39 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   28fbe:	42b8      	cmp	r0, r7
   28fc0:	dd22      	ble.n	29008 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x90>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28fc2:	4633      	mov	r3, r6
   28fc4:	462a      	mov	r2, r5
   28fc6:	4621      	mov	r1, r4
   28fc8:	9700      	str	r7, [sp, #0]
   28fca:	a808      	add	r0, sp, #32
   28fcc:	f7fe fc28 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28fd0:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   28fd2:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   28fd4:	462a      	mov	r2, r5
   28fd6:	4621      	mov	r1, r4
   28fd8:	9700      	str	r7, [sp, #0]
   28fda:	a810      	add	r0, sp, #64	; 0x40
   28fdc:	f7fe fc20 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   28fe0:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   28fe2:	4633      	mov	r3, r6
   28fe4:	462a      	mov	r2, r5
   28fe6:	4621      	mov	r1, r4
   28fe8:	9700      	str	r7, [sp, #0]
   28fea:	a802      	add	r0, sp, #8
   28fec:	f7fe fbe2 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   28ff0:	9b20      	ldr	r3, [sp, #128]	; 0x80
   28ff2:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   28ff6:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   28ffa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   28ffc:	1a52      	subs	r2, r2, r1
   28ffe:	bf18      	it	ne
   29000:	2201      	movne	r2, #1
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29002:	3701      	adds	r7, #1
  return lhs != rhs;
   29004:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29006:	e7d6      	b.n	28fb6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29008:	3601      	adds	r6, #1
   2900a:	e7cd      	b.n	28fa8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2900c:	3501      	adds	r5, #1
   2900e:	e7c4      	b.n	28f9a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29010:	3401      	adds	r4, #1
   29012:	e7bb      	b.n	28f8c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   29014:	a802      	add	r0, sp, #8
   29016:	f7fe fb00 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2901a:	b018      	add	sp, #96	; 0x60
   2901c:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00029020 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   29020:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   29024:	b098      	sub	sp, #96	; 0x60
   29026:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   29028:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   2902a:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   2902c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2902e:	f7ff fbb9 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29032:	2400      	movs	r4, #0
   29034:	2100      	movs	r1, #0
   29036:	a802      	add	r0, sp, #8
   29038:	f7fe fafa 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2903c:	42a0      	cmp	r0, r4
   2903e:	dd45      	ble.n	290cc <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xac>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29040:	2500      	movs	r5, #0
   29042:	2101      	movs	r1, #1
   29044:	a802      	add	r0, sp, #8
   29046:	f7fe faf3 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2904a:	42a8      	cmp	r0, r5
   2904c:	dd3c      	ble.n	290c8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa8>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2904e:	f04f 0800 	mov.w	r8, #0
   29052:	2102      	movs	r1, #2
   29054:	a802      	add	r0, sp, #8
   29056:	f7fe faeb 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2905a:	4540      	cmp	r0, r8
   2905c:	dd32      	ble.n	290c4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa4>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2905e:	2700      	movs	r7, #0
   29060:	2103      	movs	r1, #3
   29062:	a802      	add	r0, sp, #8
   29064:	f7fe fae4 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29068:	42b8      	cmp	r0, r7
   2906a:	dd28      	ble.n	290be <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2906c:	4643      	mov	r3, r8
   2906e:	462a      	mov	r2, r5
   29070:	4621      	mov	r1, r4
   29072:	9700      	str	r7, [sp, #0]
   29074:	a808      	add	r0, sp, #32
   29076:	f7fe fbd3 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   2907a:	4643      	mov	r3, r8
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2907c:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   2907e:	462a      	mov	r2, r5
   29080:	4621      	mov	r1, r4
   29082:	9700      	str	r7, [sp, #0]
   29084:	a810      	add	r0, sp, #64	; 0x40
   29086:	f7fe fbcb 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2908a:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2908c:	4643      	mov	r3, r8
   2908e:	462a      	mov	r2, r5
   29090:	9700      	str	r7, [sp, #0]
   29092:	4621      	mov	r1, r4
   29094:	a802      	add	r0, sp, #8
   29096:	f7fe fb8d 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2909a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   2909c:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   290a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs != rhs;
   290a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   290a8:	e9db ab00 	ldrd	sl, fp, [fp]
   290ac:	459b      	cmp	fp, r3
   290ae:	bf0a      	itet	eq
   290b0:	4592      	cmpeq	sl, r2
   290b2:	2301      	movne	r3, #1
   290b4:	2300      	moveq	r3, #0
   290b6:	9a22      	ldr	r2, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   290b8:	3701      	adds	r7, #1
  return lhs != rhs;
   290ba:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   290bc:	e7d0      	b.n	29060 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   290be:	f108 0801 	add.w	r8, r8, #1
   290c2:	e7c6      	b.n	29052 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   290c4:	3501      	adds	r5, #1
   290c6:	e7bc      	b.n	29042 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   290c8:	3401      	adds	r4, #1
   290ca:	e7b3      	b.n	29034 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_10NotEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   290cc:	a802      	add	r0, sp, #8
   290ce:	f7fe faa4 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   290d2:	b018      	add	sp, #96	; 0x60
   290d4:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

000290d8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   290d8:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   290dc:	b098      	sub	sp, #96	; 0x60
   290de:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   290e0:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   290e2:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   290e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
   290e6:	f7ff fb5d 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   290ea:	2400      	movs	r4, #0
   290ec:	2100      	movs	r1, #0
   290ee:	a802      	add	r0, sp, #8
   290f0:	f7fe fa9e 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   290f4:	42a0      	cmp	r0, r4
   290f6:	dd3e      	ble.n	29176 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   290f8:	2500      	movs	r5, #0
   290fa:	2101      	movs	r1, #1
   290fc:	a802      	add	r0, sp, #8
   290fe:	f7fe fa97 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29102:	42a8      	cmp	r0, r5
   29104:	dd35      	ble.n	29172 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29106:	2600      	movs	r6, #0
   29108:	2102      	movs	r1, #2
   2910a:	a802      	add	r0, sp, #8
   2910c:	f7fe fa90 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29110:	42b0      	cmp	r0, r6
   29112:	dd2c      	ble.n	2916e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29114:	2700      	movs	r7, #0
   29116:	2103      	movs	r1, #3
   29118:	a802      	add	r0, sp, #8
   2911a:	f7fe fa89 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2911e:	42b8      	cmp	r0, r7
   29120:	dd23      	ble.n	2916a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29122:	4633      	mov	r3, r6
   29124:	462a      	mov	r2, r5
   29126:	4621      	mov	r1, r4
   29128:	9700      	str	r7, [sp, #0]
   2912a:	a808      	add	r0, sp, #32
   2912c:	f7fe fb78 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29130:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29132:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29134:	462a      	mov	r2, r5
   29136:	4621      	mov	r1, r4
   29138:	9700      	str	r7, [sp, #0]
   2913a:	a810      	add	r0, sp, #64	; 0x40
   2913c:	f7fe fb70 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29140:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29142:	4633      	mov	r3, r6
   29144:	462a      	mov	r2, r5
   29146:	4621      	mov	r1, r4
   29148:	9700      	str	r7, [sp, #0]
   2914a:	a802      	add	r0, sp, #8
   2914c:	f7fe fb32 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs > rhs;
   29150:	9b20      	ldr	r3, [sp, #128]	; 0x80
   29152:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   29156:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   2915a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2915c:	428a      	cmp	r2, r1
   2915e:	bfd4      	ite	le
   29160:	2200      	movle	r2, #0
   29162:	2201      	movgt	r2, #1
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29164:	3701      	adds	r7, #1
  return lhs > rhs;
   29166:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29168:	e7d5      	b.n	29116 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2916a:	3601      	adds	r6, #1
   2916c:	e7cc      	b.n	29108 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2916e:	3501      	adds	r5, #1
   29170:	e7c3      	b.n	290fa <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29172:	3401      	adds	r4, #1
   29174:	e7ba      	b.n	290ec <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   29176:	a802      	add	r0, sp, #8
   29178:	f7fe fa4f 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2917c:	b018      	add	sp, #96	; 0x60
   2917e:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

00029182 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   29182:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   29186:	b098      	sub	sp, #96	; 0x60
   29188:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   2918a:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   2918c:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   2918e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   29190:	f7ff fb08 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29194:	2400      	movs	r4, #0
   29196:	2100      	movs	r1, #0
   29198:	a802      	add	r0, sp, #8
   2919a:	f7fe fa49 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2919e:	42a0      	cmp	r0, r4
   291a0:	dd46      	ble.n	29230 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   291a2:	2500      	movs	r5, #0
   291a4:	2101      	movs	r1, #1
   291a6:	a802      	add	r0, sp, #8
   291a8:	f7fe fa42 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   291ac:	42a8      	cmp	r0, r5
   291ae:	dd3d      	ble.n	2922c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   291b0:	f04f 0800 	mov.w	r8, #0
   291b4:	2102      	movs	r1, #2
   291b6:	a802      	add	r0, sp, #8
   291b8:	f7fe fa3a 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   291bc:	4540      	cmp	r0, r8
   291be:	dd33      	ble.n	29228 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   291c0:	2700      	movs	r7, #0
   291c2:	2103      	movs	r1, #3
   291c4:	a802      	add	r0, sp, #8
   291c6:	f7fe fa33 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   291ca:	42b8      	cmp	r0, r7
   291cc:	dd29      	ble.n	29222 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   291ce:	4643      	mov	r3, r8
   291d0:	462a      	mov	r2, r5
   291d2:	4621      	mov	r1, r4
   291d4:	9700      	str	r7, [sp, #0]
   291d6:	a808      	add	r0, sp, #32
   291d8:	f7fe fb22 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   291dc:	4643      	mov	r3, r8
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   291de:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   291e0:	462a      	mov	r2, r5
   291e2:	4621      	mov	r1, r4
   291e4:	9700      	str	r7, [sp, #0]
   291e6:	a810      	add	r0, sp, #64	; 0x40
   291e8:	f7fe fb1a 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   291ec:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   291ee:	4643      	mov	r3, r8
   291f0:	462a      	mov	r2, r5
   291f2:	9700      	str	r7, [sp, #0]
   291f4:	4621      	mov	r1, r4
   291f6:	a802      	add	r0, sp, #8
   291f8:	f7fe fadc 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   291fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
   291fe:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   29202:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs > rhs;
   29206:	e9d3 2300 	ldrd	r2, r3, [r3]
   2920a:	e9db ab00 	ldrd	sl, fp, [fp]
   2920e:	4552      	cmp	r2, sl
   29210:	eb73 030b 	sbcs.w	r3, r3, fp
   29214:	bfb4      	ite	lt
   29216:	2301      	movlt	r3, #1
   29218:	2300      	movge	r3, #0
   2921a:	9a22      	ldr	r2, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2921c:	3701      	adds	r7, #1
  return lhs > rhs;
   2921e:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29220:	e7cf      	b.n	291c2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29222:	f108 0801 	add.w	r8, r8, #1
   29226:	e7c5      	b.n	291b4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29228:	3501      	adds	r5, #1
   2922a:	e7bb      	b.n	291a4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2922c:	3401      	adds	r4, #1
   2922e:	e7b2      	b.n	29196 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_9GreaterFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   29230:	a802      	add	r0, sp, #8
   29232:	f7fe f9f2 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   29236:	b018      	add	sp, #96	; 0x60
   29238:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

0002923c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   2923c:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   29240:	b098      	sub	sp, #96	; 0x60
   29242:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   29244:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   29246:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29248:	9b21      	ldr	r3, [sp, #132]	; 0x84
   2924a:	f7ff faab 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2924e:	2400      	movs	r4, #0
   29250:	2100      	movs	r1, #0
   29252:	a802      	add	r0, sp, #8
   29254:	f7fe f9ec 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29258:	42a0      	cmp	r0, r4
   2925a:	dd3e      	ble.n	292da <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2925c:	2500      	movs	r5, #0
   2925e:	2101      	movs	r1, #1
   29260:	a802      	add	r0, sp, #8
   29262:	f7fe f9e5 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29266:	42a8      	cmp	r0, r5
   29268:	dd35      	ble.n	292d6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2926a:	2600      	movs	r6, #0
   2926c:	2102      	movs	r1, #2
   2926e:	a802      	add	r0, sp, #8
   29270:	f7fe f9de 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29274:	42b0      	cmp	r0, r6
   29276:	dd2c      	ble.n	292d2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29278:	2700      	movs	r7, #0
   2927a:	2103      	movs	r1, #3
   2927c:	a802      	add	r0, sp, #8
   2927e:	f7fe f9d7 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29282:	42b8      	cmp	r0, r7
   29284:	dd23      	ble.n	292ce <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29286:	4633      	mov	r3, r6
   29288:	462a      	mov	r2, r5
   2928a:	4621      	mov	r1, r4
   2928c:	9700      	str	r7, [sp, #0]
   2928e:	a808      	add	r0, sp, #32
   29290:	f7fe fac6 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29294:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29296:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29298:	462a      	mov	r2, r5
   2929a:	4621      	mov	r1, r4
   2929c:	9700      	str	r7, [sp, #0]
   2929e:	a810      	add	r0, sp, #64	; 0x40
   292a0:	f7fe fabe 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   292a4:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   292a6:	4633      	mov	r3, r6
   292a8:	462a      	mov	r2, r5
   292aa:	4621      	mov	r1, r4
   292ac:	9700      	str	r7, [sp, #0]
   292ae:	a802      	add	r0, sp, #8
   292b0:	f7fe fa80 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs >= rhs;
   292b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   292b6:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   292ba:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   292be:	9b22      	ldr	r3, [sp, #136]	; 0x88
   292c0:	428a      	cmp	r2, r1
   292c2:	bfb4      	ite	lt
   292c4:	2200      	movlt	r2, #0
   292c6:	2201      	movge	r2, #1
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   292c8:	3701      	adds	r7, #1
  return lhs >= rhs;
   292ca:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   292cc:	e7d5      	b.n	2927a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   292ce:	3601      	adds	r6, #1
   292d0:	e7cc      	b.n	2926c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   292d2:	3501      	adds	r5, #1
   292d4:	e7c3      	b.n	2925e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   292d6:	3401      	adds	r4, #1
   292d8:	e7ba      	b.n	29250 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   292da:	a802      	add	r0, sp, #8
   292dc:	f7fe f99d 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   292e0:	b018      	add	sp, #96	; 0x60
   292e2:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

000292e6 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   292e6:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   292ea:	b098      	sub	sp, #96	; 0x60
   292ec:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   292ee:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   292f0:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   292f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   292f4:	f7ff fa56 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   292f8:	2400      	movs	r4, #0
   292fa:	2100      	movs	r1, #0
   292fc:	a802      	add	r0, sp, #8
   292fe:	f7fe f997 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29302:	42a0      	cmp	r0, r4
   29304:	dd46      	ble.n	29394 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29306:	2500      	movs	r5, #0
   29308:	2101      	movs	r1, #1
   2930a:	a802      	add	r0, sp, #8
   2930c:	f7fe f990 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29310:	42a8      	cmp	r0, r5
   29312:	dd3d      	ble.n	29390 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29314:	f04f 0800 	mov.w	r8, #0
   29318:	2102      	movs	r1, #2
   2931a:	a802      	add	r0, sp, #8
   2931c:	f7fe f988 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29320:	4540      	cmp	r0, r8
   29322:	dd33      	ble.n	2938c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29324:	2700      	movs	r7, #0
   29326:	2103      	movs	r1, #3
   29328:	a802      	add	r0, sp, #8
   2932a:	f7fe f981 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2932e:	42b8      	cmp	r0, r7
   29330:	dd29      	ble.n	29386 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29332:	4643      	mov	r3, r8
   29334:	462a      	mov	r2, r5
   29336:	4621      	mov	r1, r4
   29338:	9700      	str	r7, [sp, #0]
   2933a:	a808      	add	r0, sp, #32
   2933c:	f7fe fa70 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29340:	4643      	mov	r3, r8
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29342:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29344:	462a      	mov	r2, r5
   29346:	4621      	mov	r1, r4
   29348:	9700      	str	r7, [sp, #0]
   2934a:	a810      	add	r0, sp, #64	; 0x40
   2934c:	f7fe fa68 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29350:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29352:	4643      	mov	r3, r8
   29354:	462a      	mov	r2, r5
   29356:	9700      	str	r7, [sp, #0]
   29358:	4621      	mov	r1, r4
   2935a:	a802      	add	r0, sp, #8
   2935c:	f7fe fa2a 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29360:	9b20      	ldr	r3, [sp, #128]	; 0x80
   29362:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   29366:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs >= rhs;
   2936a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2936e:	e9db ab00 	ldrd	sl, fp, [fp]
   29372:	4592      	cmp	sl, r2
   29374:	eb7b 0303 	sbcs.w	r3, fp, r3
   29378:	bfac      	ite	ge
   2937a:	2301      	movge	r3, #1
   2937c:	2300      	movlt	r3, #0
   2937e:	9a22      	ldr	r2, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29380:	3701      	adds	r7, #1
  return lhs >= rhs;
   29382:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29384:	e7cf      	b.n	29326 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29386:	f108 0801 	add.w	r8, r8, #1
   2938a:	e7c5      	b.n	29318 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2938c:	3501      	adds	r5, #1
   2938e:	e7bb      	b.n	29308 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29390:	3401      	adds	r4, #1
   29392:	e7b2      	b.n	292fa <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_14GreaterEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   29394:	a802      	add	r0, sp, #8
   29396:	f7fe f940 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2939a:	b018      	add	sp, #96	; 0x60
   2939c:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

000293a0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   293a0:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   293a4:	b098      	sub	sp, #96	; 0x60
   293a6:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   293a8:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   293aa:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   293ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
   293ae:	f7ff f9f9 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   293b2:	2400      	movs	r4, #0
   293b4:	2100      	movs	r1, #0
   293b6:	a802      	add	r0, sp, #8
   293b8:	f7fe f93a 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   293bc:	42a0      	cmp	r0, r4
   293be:	dd3e      	ble.n	2943e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   293c0:	2500      	movs	r5, #0
   293c2:	2101      	movs	r1, #1
   293c4:	a802      	add	r0, sp, #8
   293c6:	f7fe f933 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   293ca:	42a8      	cmp	r0, r5
   293cc:	dd35      	ble.n	2943a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   293ce:	2600      	movs	r6, #0
   293d0:	2102      	movs	r1, #2
   293d2:	a802      	add	r0, sp, #8
   293d4:	f7fe f92c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   293d8:	42b0      	cmp	r0, r6
   293da:	dd2c      	ble.n	29436 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   293dc:	2700      	movs	r7, #0
   293de:	2103      	movs	r1, #3
   293e0:	a802      	add	r0, sp, #8
   293e2:	f7fe f925 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   293e6:	42b8      	cmp	r0, r7
   293e8:	dd23      	ble.n	29432 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   293ea:	4633      	mov	r3, r6
   293ec:	462a      	mov	r2, r5
   293ee:	4621      	mov	r1, r4
   293f0:	9700      	str	r7, [sp, #0]
   293f2:	a808      	add	r0, sp, #32
   293f4:	f7fe fa14 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   293f8:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   293fa:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   293fc:	462a      	mov	r2, r5
   293fe:	4621      	mov	r1, r4
   29400:	9700      	str	r7, [sp, #0]
   29402:	a810      	add	r0, sp, #64	; 0x40
   29404:	f7fe fa0c 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29408:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2940a:	4633      	mov	r3, r6
   2940c:	462a      	mov	r2, r5
   2940e:	4621      	mov	r1, r4
   29410:	9700      	str	r7, [sp, #0]
   29412:	a802      	add	r0, sp, #8
   29414:	f7fe f9ce 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs < rhs;
   29418:	9b20      	ldr	r3, [sp, #128]	; 0x80
   2941a:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   2941e:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   29422:	9b22      	ldr	r3, [sp, #136]	; 0x88
   29424:	428a      	cmp	r2, r1
   29426:	bfac      	ite	ge
   29428:	2200      	movge	r2, #0
   2942a:	2201      	movlt	r2, #1
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2942c:	3701      	adds	r7, #1
  return lhs < rhs;
   2942e:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29430:	e7d5      	b.n	293de <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29432:	3601      	adds	r6, #1
   29434:	e7cc      	b.n	293d0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29436:	3501      	adds	r5, #1
   29438:	e7c3      	b.n	293c2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2943a:	3401      	adds	r4, #1
   2943c:	e7ba      	b.n	293b4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   2943e:	a802      	add	r0, sp, #8
   29440:	f7fe f8eb 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   29444:	b018      	add	sp, #96	; 0x60
   29446:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

0002944a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   2944a:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   2944e:	b098      	sub	sp, #96	; 0x60
   29450:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   29452:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   29454:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29456:	9b21      	ldr	r3, [sp, #132]	; 0x84
   29458:	f7ff f9a4 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2945c:	2400      	movs	r4, #0
   2945e:	2100      	movs	r1, #0
   29460:	a802      	add	r0, sp, #8
   29462:	f7fe f8e5 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29466:	42a0      	cmp	r0, r4
   29468:	dd46      	ble.n	294f8 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2946a:	2500      	movs	r5, #0
   2946c:	2101      	movs	r1, #1
   2946e:	a802      	add	r0, sp, #8
   29470:	f7fe f8de 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29474:	42a8      	cmp	r0, r5
   29476:	dd3d      	ble.n	294f4 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29478:	f04f 0800 	mov.w	r8, #0
   2947c:	2102      	movs	r1, #2
   2947e:	a802      	add	r0, sp, #8
   29480:	f7fe f8d6 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29484:	4540      	cmp	r0, r8
   29486:	dd33      	ble.n	294f0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29488:	2700      	movs	r7, #0
   2948a:	2103      	movs	r1, #3
   2948c:	a802      	add	r0, sp, #8
   2948e:	f7fe f8cf 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29492:	42b8      	cmp	r0, r7
   29494:	dd29      	ble.n	294ea <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29496:	4643      	mov	r3, r8
   29498:	462a      	mov	r2, r5
   2949a:	4621      	mov	r1, r4
   2949c:	9700      	str	r7, [sp, #0]
   2949e:	a808      	add	r0, sp, #32
   294a0:	f7fe f9be 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   294a4:	4643      	mov	r3, r8
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   294a6:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   294a8:	462a      	mov	r2, r5
   294aa:	4621      	mov	r1, r4
   294ac:	9700      	str	r7, [sp, #0]
   294ae:	a810      	add	r0, sp, #64	; 0x40
   294b0:	f7fe f9b6 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   294b4:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   294b6:	4643      	mov	r3, r8
   294b8:	462a      	mov	r2, r5
   294ba:	9700      	str	r7, [sp, #0]
   294bc:	4621      	mov	r1, r4
   294be:	a802      	add	r0, sp, #8
   294c0:	f7fe f978 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   294c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
   294c6:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   294ca:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs < rhs;
   294ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   294d2:	e9db ab00 	ldrd	sl, fp, [fp]
   294d6:	4592      	cmp	sl, r2
   294d8:	eb7b 0303 	sbcs.w	r3, fp, r3
   294dc:	bfb4      	ite	lt
   294de:	2301      	movlt	r3, #1
   294e0:	2300      	movge	r3, #0
   294e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   294e4:	3701      	adds	r7, #1
  return lhs < rhs;
   294e6:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   294e8:	e7cf      	b.n	2948a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   294ea:	f108 0801 	add.w	r8, r8, #1
   294ee:	e7c5      	b.n	2947c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   294f0:	3501      	adds	r5, #1
   294f2:	e7bb      	b.n	2946c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   294f4:	3401      	adds	r4, #1
   294f6:	e7b2      	b.n	2945e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_6LessFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   294f8:	a802      	add	r0, sp, #8
   294fa:	f7fe f88e 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   294fe:	b018      	add	sp, #96	; 0x60
   29500:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

00029504 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   29504:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   29508:	b098      	sub	sp, #96	; 0x60
   2950a:	4691      	mov	r9, r2
  const BroadcastComparison4DSlowCommon dims =
   2950c:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   2950e:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29510:	9b21      	ldr	r3, [sp, #132]	; 0x84
   29512:	f7ff f947 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29516:	2400      	movs	r4, #0
   29518:	2100      	movs	r1, #0
   2951a:	a802      	add	r0, sp, #8
   2951c:	f7fe f888 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29520:	42a0      	cmp	r0, r4
   29522:	dd3e      	ble.n	295a2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9e>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29524:	2500      	movs	r5, #0
   29526:	2101      	movs	r1, #1
   29528:	a802      	add	r0, sp, #8
   2952a:	f7fe f881 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2952e:	42a8      	cmp	r0, r5
   29530:	dd35      	ble.n	2959e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x9a>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29532:	2600      	movs	r6, #0
   29534:	2102      	movs	r1, #2
   29536:	a802      	add	r0, sp, #8
   29538:	f7fe f87a 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2953c:	42b0      	cmp	r0, r6
   2953e:	dd2c      	ble.n	2959a <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x96>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29540:	2700      	movs	r7, #0
   29542:	2103      	movs	r1, #3
   29544:	a802      	add	r0, sp, #8
   29546:	f7fe f873 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2954a:	42b8      	cmp	r0, r7
   2954c:	dd23      	ble.n	29596 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x92>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2954e:	4633      	mov	r3, r6
   29550:	462a      	mov	r2, r5
   29552:	4621      	mov	r1, r4
   29554:	9700      	str	r7, [sp, #0]
   29556:	a808      	add	r0, sp, #32
   29558:	f7fe f962 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   2955c:	4633      	mov	r3, r6
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2955e:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29560:	462a      	mov	r2, r5
   29562:	4621      	mov	r1, r4
   29564:	9700      	str	r7, [sp, #0]
   29566:	a810      	add	r0, sp, #64	; 0x40
   29568:	f7fe f95a 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2956c:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2956e:	4633      	mov	r3, r6
   29570:	462a      	mov	r2, r5
   29572:	4621      	mov	r1, r4
   29574:	9700      	str	r7, [sp, #0]
   29576:	a802      	add	r0, sp, #8
   29578:	f7fe f91c 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs <= rhs;
   2957c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   2957e:	f859 202b 	ldr.w	r2, [r9, fp, lsl #2]
   29582:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   29586:	9b22      	ldr	r3, [sp, #136]	; 0x88
   29588:	428a      	cmp	r2, r1
   2958a:	bfcc      	ite	gt
   2958c:	2200      	movgt	r2, #0
   2958e:	2201      	movle	r2, #1
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29590:	3701      	adds	r7, #1
  return lhs <= rhs;
   29592:	541a      	strb	r2, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29594:	e7d5      	b.n	29542 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3e>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29596:	3601      	adds	r6, #1
   29598:	e7cc      	b.n	29534 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x30>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2959a:	3501      	adds	r5, #1
   2959c:	e7c3      	b.n	29526 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2959e:	3401      	adds	r4, #1
   295a0:	e7ba      	b.n	29518 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIiXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   295a2:	a802      	add	r0, sp, #8
   295a4:	f7fe f839 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   295a8:	b018      	add	sp, #96	; 0x60
   295aa:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

000295ae <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowImpl(
   295ae:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
   295b2:	b098      	sub	sp, #96	; 0x60
   295b4:	4616      	mov	r6, r2
  const BroadcastComparison4DSlowCommon dims =
   295b6:	a802      	add	r0, sp, #8
inline void BroadcastComparison4DSlowImpl(
   295b8:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   295ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
   295bc:	f7ff f8f2 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   295c0:	2400      	movs	r4, #0
   295c2:	2100      	movs	r1, #0
   295c4:	a802      	add	r0, sp, #8
   295c6:	f7fe f833 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   295ca:	42a0      	cmp	r0, r4
   295cc:	dd46      	ble.n	2965c <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xae>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   295ce:	2500      	movs	r5, #0
   295d0:	2101      	movs	r1, #1
   295d2:	a802      	add	r0, sp, #8
   295d4:	f7fe f82c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   295d8:	42a8      	cmp	r0, r5
   295da:	dd3d      	ble.n	29658 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xaa>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   295dc:	f04f 0800 	mov.w	r8, #0
   295e0:	2102      	movs	r1, #2
   295e2:	a802      	add	r0, sp, #8
   295e4:	f7fe f824 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   295e8:	4540      	cmp	r0, r8
   295ea:	dd33      	ble.n	29654 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa6>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   295ec:	2700      	movs	r7, #0
   295ee:	2103      	movs	r1, #3
   295f0:	a802      	add	r0, sp, #8
   295f2:	f7fe f81d 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   295f6:	42b8      	cmp	r0, r7
   295f8:	dd29      	ble.n	2964e <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xa0>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   295fa:	4643      	mov	r3, r8
   295fc:	462a      	mov	r2, r5
   295fe:	4621      	mov	r1, r4
   29600:	9700      	str	r7, [sp, #0]
   29602:	a808      	add	r0, sp, #32
   29604:	f7fe f90c 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   29608:	4643      	mov	r3, r8
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   2960a:	4683      	mov	fp, r0
                input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)]);
   2960c:	462a      	mov	r2, r5
   2960e:	4621      	mov	r1, r4
   29610:	9700      	str	r7, [sp, #0]
   29612:	a810      	add	r0, sp, #64	; 0x40
   29614:	f7fe f904 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29618:	4682      	mov	sl, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2961a:	4643      	mov	r3, r8
   2961c:	462a      	mov	r2, r5
   2961e:	9700      	str	r7, [sp, #0]
   29620:	4621      	mov	r1, r4
   29622:	a802      	add	r0, sp, #8
   29624:	f7fe f8c6 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
              F(input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)],
   29628:	9b20      	ldr	r3, [sp, #128]	; 0x80
   2962a:	eb06 0bcb 	add.w	fp, r6, fp, lsl #3
   2962e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
  return lhs <= rhs;
   29632:	e9d3 2300 	ldrd	r2, r3, [r3]
   29636:	e9db ab00 	ldrd	sl, fp, [fp]
   2963a:	4552      	cmp	r2, sl
   2963c:	eb73 030b 	sbcs.w	r3, r3, fp
   29640:	bfac      	ite	ge
   29642:	2301      	movge	r3, #1
   29644:	2300      	movlt	r3, #0
   29646:	9a22      	ldr	r2, [sp, #136]	; 0x88
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29648:	3701      	adds	r7, #1
  return lhs <= rhs;
   2964a:	5413      	strb	r3, [r2, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2964c:	e7cf      	b.n	295ee <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x40>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2964e:	f108 0801 	add.w	r8, r8, #1
   29652:	e7c5      	b.n	295e0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x32>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29654:	3501      	adds	r5, #1
   29656:	e7bb      	b.n	295d0 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x22>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29658:	3401      	adds	r4, #1
   2965a:	e7b2      	b.n	295c2 <_ZN6tflite13reference_ops29BroadcastComparison4DSlowImplIxXadL_ZNS0_11LessEqualFnIxEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x14>
struct BroadcastComparison4DSlowCommon {
   2965c:	a802      	add	r0, sp, #8
   2965e:	f7fd ffdc 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   29662:	b018      	add	sp, #96	; 0x60
   29664:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

00029668 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2966c:	ed2d 8b04 	vpush	{d8-d9}
   29670:	4604      	mov	r4, r0
   29672:	b09d      	sub	sp, #116	; 0x74
   29674:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   29676:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29678:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   2967a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   2967c:	f7ff f892 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29680:	e9d4 6300 	ldrd	r6, r3, [r4]
   29684:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   29686:	68a3      	ldr	r3, [r4, #8]
   29688:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   2968c:	68e3      	ldr	r3, [r4, #12]
   2968e:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   29692:	6923      	ldr	r3, [r4, #16]
   29694:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   29696:	6963      	ldr	r3, [r4, #20]
   29698:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   2969c:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2969e:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   296a0:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   296a4:	2100      	movs	r1, #0
   296a6:	a806      	add	r0, sp, #24
   296a8:	f7fd ffc2 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   296ac:	42a0      	cmp	r0, r4
   296ae:	dd5f      	ble.n	29770 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   296b0:	2500      	movs	r5, #0
   296b2:	af06      	add	r7, sp, #24
   296b4:	2101      	movs	r1, #1
   296b6:	4638      	mov	r0, r7
   296b8:	f7fd ffba 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   296bc:	42a8      	cmp	r0, r5
   296be:	dd55      	ble.n	2976c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   296c0:	f04f 0800 	mov.w	r8, #0
   296c4:	2102      	movs	r1, #2
   296c6:	4638      	mov	r0, r7
   296c8:	f7fd ffb2 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   296cc:	4540      	cmp	r0, r8
   296ce:	dd4b      	ble.n	29768 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   296d0:	f04f 0900 	mov.w	r9, #0
   296d4:	2103      	movs	r1, #3
   296d6:	4638      	mov	r0, r7
   296d8:	f7fd ffaa 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   296dc:	4548      	cmp	r0, r9
   296de:	dd40      	ble.n	29762 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   296e0:	4643      	mov	r3, r8
   296e2:	462a      	mov	r2, r5
   296e4:	4621      	mov	r1, r4
   296e6:	f8cd 9000 	str.w	r9, [sp]
   296ea:	a80c      	add	r0, sp, #48	; 0x30
   296ec:	f7fe f898 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   296f0:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   296f2:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   296f4:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   296f8:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   296fa:	4621      	mov	r1, r4
          const int32 input1_val =
   296fc:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   296fe:	f8cd 9000 	str.w	r9, [sp]
   29702:	4643      	mov	r3, r8
   29704:	a814      	add	r0, sp, #80	; 0x50
   29706:	f7fe f88b 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2970a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2970c:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29710:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   29714:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29716:	ee18 1a10 	vmov	r1, s16
   2971a:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   2971e:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29720:	f7ed fa94 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   29724:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29728:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2972a:	ee19 2a90 	vmov	r2, s19
   2972e:	ee19 1a10 	vmov	r1, s18
   29732:	4658      	mov	r0, fp
   29734:	f7ed fa8a 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29738:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2973a:	4643      	mov	r3, r8
   2973c:	f8cd 9000 	str.w	r9, [sp]
   29740:	462a      	mov	r2, r5
   29742:	4621      	mov	r1, r4
   29744:	4638      	mov	r0, r7
   29746:	f7fe f835 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   2974a:	ebaa 030b 	sub.w	r3, sl, fp
   2974e:	f1d3 0a00 	rsbs	sl, r3, #0
   29752:	eb4a 0a03 	adc.w	sl, sl, r3
   29756:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29758:	f109 0901 	add.w	r9, r9, #1
  return lhs == rhs;
   2975c:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29760:	e7b8      	b.n	296d4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29762:	f108 0801 	add.w	r8, r8, #1
   29766:	e7ad      	b.n	296c4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29768:	3501      	adds	r5, #1
   2976a:	e7a2      	b.n	296b2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2976c:	3401      	adds	r4, #1
   2976e:	e799      	b.n	296a4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29770:	a806      	add	r0, sp, #24
   29772:	f7fd ff52 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   29776:	b01d      	add	sp, #116	; 0x74
   29778:	ecbd 8b04 	vpop	{d8-d9}
   2977c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029780 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29784:	ed2d 8b04 	vpush	{d8-d9}
   29788:	4604      	mov	r4, r0
   2978a:	b09d      	sub	sp, #116	; 0x74
   2978c:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   2978e:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29790:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29792:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   29794:	f7ff f806 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29798:	e9d4 6300 	ldrd	r6, r3, [r4]
   2979c:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   2979e:	68a3      	ldr	r3, [r4, #8]
   297a0:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   297a4:	68e3      	ldr	r3, [r4, #12]
   297a6:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   297aa:	6923      	ldr	r3, [r4, #16]
   297ac:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   297ae:	6963      	ldr	r3, [r4, #20]
   297b0:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   297b4:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   297b6:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   297b8:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   297bc:	2100      	movs	r1, #0
   297be:	a806      	add	r0, sp, #24
   297c0:	f7fd ff36 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   297c4:	42a0      	cmp	r0, r4
   297c6:	dd5f      	ble.n	29888 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   297c8:	2500      	movs	r5, #0
   297ca:	af06      	add	r7, sp, #24
   297cc:	2101      	movs	r1, #1
   297ce:	4638      	mov	r0, r7
   297d0:	f7fd ff2e 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   297d4:	42a8      	cmp	r0, r5
   297d6:	dd55      	ble.n	29884 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   297d8:	f04f 0800 	mov.w	r8, #0
   297dc:	2102      	movs	r1, #2
   297de:	4638      	mov	r0, r7
   297e0:	f7fd ff26 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   297e4:	4540      	cmp	r0, r8
   297e6:	dd4b      	ble.n	29880 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   297e8:	f04f 0900 	mov.w	r9, #0
   297ec:	2103      	movs	r1, #3
   297ee:	4638      	mov	r0, r7
   297f0:	f7fd ff1e 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   297f4:	4548      	cmp	r0, r9
   297f6:	dd40      	ble.n	2987a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   297f8:	4643      	mov	r3, r8
   297fa:	462a      	mov	r2, r5
   297fc:	4621      	mov	r1, r4
   297fe:	f8cd 9000 	str.w	r9, [sp]
   29802:	a80c      	add	r0, sp, #48	; 0x30
   29804:	f7fe f80c 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29808:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2980a:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   2980c:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   29810:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29812:	4621      	mov	r1, r4
          const int32 input1_val =
   29814:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29816:	f8cd 9000 	str.w	r9, [sp]
   2981a:	4643      	mov	r3, r8
   2981c:	a814      	add	r0, sp, #80	; 0x50
   2981e:	f7fd ffff 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29822:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29824:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29828:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   2982c:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2982e:	ee18 1a10 	vmov	r1, s16
   29832:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   29836:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29838:	f7ed fa08 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   2983c:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29840:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29842:	ee19 2a90 	vmov	r2, s19
   29846:	ee19 1a10 	vmov	r1, s18
   2984a:	4658      	mov	r0, fp
   2984c:	f7ed f9fe 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29850:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29852:	4643      	mov	r3, r8
   29854:	f8cd 9000 	str.w	r9, [sp]
   29858:	462a      	mov	r2, r5
   2985a:	4621      	mov	r1, r4
   2985c:	4638      	mov	r0, r7
   2985e:	f7fd ffa9 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs == rhs;
   29862:	ebaa 030b 	sub.w	r3, sl, fp
   29866:	f1d3 0a00 	rsbs	sl, r3, #0
   2986a:	eb4a 0a03 	adc.w	sl, sl, r3
   2986e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29870:	f109 0901 	add.w	r9, r9, #1
  return lhs == rhs;
   29874:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29878:	e7b8      	b.n	297ec <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2987a:	f108 0801 	add.w	r8, r8, #1
   2987e:	e7ad      	b.n	297dc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29880:	3501      	adds	r5, #1
   29882:	e7a2      	b.n	297ca <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29884:	3401      	adds	r4, #1
   29886:	e799      	b.n	297bc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_7EqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29888:	a806      	add	r0, sp, #24
   2988a:	f7fd fec6 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2988e:	b01d      	add	sp, #116	; 0x74
   29890:	ecbd 8b04 	vpop	{d8-d9}
   29894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029898 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2989c:	ed2d 8b04 	vpush	{d8-d9}
   298a0:	4604      	mov	r4, r0
   298a2:	b09d      	sub	sp, #116	; 0x74
   298a4:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   298a6:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   298a8:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   298aa:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   298ac:	f7fe ff7a 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   298b0:	e9d4 6300 	ldrd	r6, r3, [r4]
   298b4:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   298b6:	68a3      	ldr	r3, [r4, #8]
   298b8:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   298bc:	68e3      	ldr	r3, [r4, #12]
   298be:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   298c2:	6923      	ldr	r3, [r4, #16]
   298c4:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   298c6:	6963      	ldr	r3, [r4, #20]
   298c8:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   298cc:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   298ce:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   298d0:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   298d4:	2100      	movs	r1, #0
   298d6:	a806      	add	r0, sp, #24
   298d8:	f7fd feaa 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   298dc:	42a0      	cmp	r0, r4
   298de:	dd5e      	ble.n	2999e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x106>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   298e0:	2500      	movs	r5, #0
   298e2:	af06      	add	r7, sp, #24
   298e4:	2101      	movs	r1, #1
   298e6:	4638      	mov	r0, r7
   298e8:	f7fd fea2 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   298ec:	42a8      	cmp	r0, r5
   298ee:	dd54      	ble.n	2999a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x102>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   298f0:	f04f 0800 	mov.w	r8, #0
   298f4:	2102      	movs	r1, #2
   298f6:	4638      	mov	r0, r7
   298f8:	f7fd fe9a 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   298fc:	4540      	cmp	r0, r8
   298fe:	dd4a      	ble.n	29996 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfe>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29900:	f04f 0900 	mov.w	r9, #0
   29904:	2103      	movs	r1, #3
   29906:	4638      	mov	r0, r7
   29908:	f7fd fe92 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2990c:	4548      	cmp	r0, r9
   2990e:	dd3f      	ble.n	29990 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xf8>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29910:	4643      	mov	r3, r8
   29912:	462a      	mov	r2, r5
   29914:	4621      	mov	r1, r4
   29916:	f8cd 9000 	str.w	r9, [sp]
   2991a:	a80c      	add	r0, sp, #48	; 0x30
   2991c:	f7fd ff80 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29920:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29922:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29924:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   29928:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2992a:	4621      	mov	r1, r4
          const int32 input1_val =
   2992c:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2992e:	f8cd 9000 	str.w	r9, [sp]
   29932:	4643      	mov	r3, r8
   29934:	a814      	add	r0, sp, #80	; 0x50
   29936:	f7fd ff73 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2993a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2993c:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29940:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   29944:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29946:	ee18 1a10 	vmov	r1, s16
   2994a:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   2994e:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29950:	f7ed f97c 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   29954:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29958:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2995a:	ee19 2a90 	vmov	r2, s19
   2995e:	ee19 1a10 	vmov	r1, s18
   29962:	4658      	mov	r0, fp
   29964:	f7ed f972 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29968:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2996a:	4643      	mov	r3, r8
   2996c:	f8cd 9000 	str.w	r9, [sp]
   29970:	462a      	mov	r2, r5
   29972:	4621      	mov	r1, r4
   29974:	4638      	mov	r0, r7
   29976:	f7fd ff1d 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   2997a:	ebba 0a0b 	subs.w	sl, sl, fp
   2997e:	bf18      	it	ne
   29980:	f04f 0a01 	movne.w	sl, #1
   29984:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29986:	f109 0901 	add.w	r9, r9, #1
  return lhs != rhs;
   2998a:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2998e:	e7b9      	b.n	29904 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29990:	f108 0801 	add.w	r8, r8, #1
   29994:	e7ae      	b.n	298f4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29996:	3501      	adds	r5, #1
   29998:	e7a3      	b.n	298e2 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2999a:	3401      	adds	r4, #1
   2999c:	e79a      	b.n	298d4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   2999e:	a806      	add	r0, sp, #24
   299a0:	f7fd fe3b 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   299a4:	b01d      	add	sp, #116	; 0x74
   299a6:	ecbd 8b04 	vpop	{d8-d9}
   299aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000299ae <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   299ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   299b2:	ed2d 8b04 	vpush	{d8-d9}
   299b6:	4604      	mov	r4, r0
   299b8:	b09d      	sub	sp, #116	; 0x74
   299ba:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   299bc:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   299be:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   299c0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   299c2:	f7fe feef 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   299c6:	e9d4 6300 	ldrd	r6, r3, [r4]
   299ca:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   299cc:	68a3      	ldr	r3, [r4, #8]
   299ce:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   299d2:	68e3      	ldr	r3, [r4, #12]
   299d4:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   299d8:	6923      	ldr	r3, [r4, #16]
   299da:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   299dc:	6963      	ldr	r3, [r4, #20]
   299de:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   299e2:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   299e4:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   299e6:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   299ea:	2100      	movs	r1, #0
   299ec:	a806      	add	r0, sp, #24
   299ee:	f7fd fe1f 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   299f2:	42a0      	cmp	r0, r4
   299f4:	dd5e      	ble.n	29ab4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x106>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   299f6:	2500      	movs	r5, #0
   299f8:	af06      	add	r7, sp, #24
   299fa:	2101      	movs	r1, #1
   299fc:	4638      	mov	r0, r7
   299fe:	f7fd fe17 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29a02:	42a8      	cmp	r0, r5
   29a04:	dd54      	ble.n	29ab0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x102>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29a06:	f04f 0800 	mov.w	r8, #0
   29a0a:	2102      	movs	r1, #2
   29a0c:	4638      	mov	r0, r7
   29a0e:	f7fd fe0f 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29a12:	4540      	cmp	r0, r8
   29a14:	dd4a      	ble.n	29aac <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfe>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29a16:	f04f 0900 	mov.w	r9, #0
   29a1a:	2103      	movs	r1, #3
   29a1c:	4638      	mov	r0, r7
   29a1e:	f7fd fe07 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29a22:	4548      	cmp	r0, r9
   29a24:	dd3f      	ble.n	29aa6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xf8>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29a26:	4643      	mov	r3, r8
   29a28:	462a      	mov	r2, r5
   29a2a:	4621      	mov	r1, r4
   29a2c:	f8cd 9000 	str.w	r9, [sp]
   29a30:	a80c      	add	r0, sp, #48	; 0x30
   29a32:	f7fd fef5 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29a36:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29a38:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29a3a:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   29a3e:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29a40:	4621      	mov	r1, r4
          const int32 input1_val =
   29a42:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29a44:	f8cd 9000 	str.w	r9, [sp]
   29a48:	4643      	mov	r3, r8
   29a4a:	a814      	add	r0, sp, #80	; 0x50
   29a4c:	f7fd fee8 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29a50:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29a52:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29a56:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   29a5a:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29a5c:	ee18 1a10 	vmov	r1, s16
   29a60:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   29a64:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29a66:	f7ed f8f1 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   29a6a:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29a6e:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29a70:	ee19 2a90 	vmov	r2, s19
   29a74:	ee19 1a10 	vmov	r1, s18
   29a78:	4658      	mov	r0, fp
   29a7a:	f7ed f8e7 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29a7e:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29a80:	4643      	mov	r3, r8
   29a82:	f8cd 9000 	str.w	r9, [sp]
   29a86:	462a      	mov	r2, r5
   29a88:	4621      	mov	r1, r4
   29a8a:	4638      	mov	r0, r7
   29a8c:	f7fd fe92 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs != rhs;
   29a90:	ebba 0a0b 	subs.w	sl, sl, fp
   29a94:	bf18      	it	ne
   29a96:	f04f 0a01 	movne.w	sl, #1
   29a9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29a9c:	f109 0901 	add.w	r9, r9, #1
  return lhs != rhs;
   29aa0:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29aa4:	e7b9      	b.n	29a1a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29aa6:	f108 0801 	add.w	r8, r8, #1
   29aaa:	e7ae      	b.n	29a0a <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29aac:	3501      	adds	r5, #1
   29aae:	e7a3      	b.n	299f8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29ab0:	3401      	adds	r4, #1
   29ab2:	e79a      	b.n	299ea <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_10NotEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29ab4:	a806      	add	r0, sp, #24
   29ab6:	f7fd fdb0 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   29aba:	b01d      	add	sp, #116	; 0x74
   29abc:	ecbd 8b04 	vpop	{d8-d9}
   29ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029ac4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ac8:	ed2d 8b04 	vpush	{d8-d9}
   29acc:	4604      	mov	r4, r0
   29ace:	b09d      	sub	sp, #116	; 0x74
   29ad0:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   29ad2:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29ad4:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29ad6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   29ad8:	f7fe fe64 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29adc:	e9d4 6300 	ldrd	r6, r3, [r4]
   29ae0:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   29ae2:	68a3      	ldr	r3, [r4, #8]
   29ae4:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   29ae8:	68e3      	ldr	r3, [r4, #12]
   29aea:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   29aee:	6923      	ldr	r3, [r4, #16]
   29af0:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   29af2:	6963      	ldr	r3, [r4, #20]
   29af4:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   29af8:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29afa:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   29afc:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29b00:	2100      	movs	r1, #0
   29b02:	a806      	add	r0, sp, #24
   29b04:	f7fd fd94 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29b08:	42a0      	cmp	r0, r4
   29b0a:	dd5f      	ble.n	29bcc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29b0c:	2500      	movs	r5, #0
   29b0e:	af06      	add	r7, sp, #24
   29b10:	2101      	movs	r1, #1
   29b12:	4638      	mov	r0, r7
   29b14:	f7fd fd8c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29b18:	42a8      	cmp	r0, r5
   29b1a:	dd55      	ble.n	29bc8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29b1c:	f04f 0800 	mov.w	r8, #0
   29b20:	2102      	movs	r1, #2
   29b22:	4638      	mov	r0, r7
   29b24:	f7fd fd84 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29b28:	4540      	cmp	r0, r8
   29b2a:	dd4b      	ble.n	29bc4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29b2c:	f04f 0900 	mov.w	r9, #0
   29b30:	2103      	movs	r1, #3
   29b32:	4638      	mov	r0, r7
   29b34:	f7fd fd7c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29b38:	4548      	cmp	r0, r9
   29b3a:	dd40      	ble.n	29bbe <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29b3c:	4643      	mov	r3, r8
   29b3e:	462a      	mov	r2, r5
   29b40:	4621      	mov	r1, r4
   29b42:	f8cd 9000 	str.w	r9, [sp]
   29b46:	a80c      	add	r0, sp, #48	; 0x30
   29b48:	f7fd fe6a 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29b4c:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29b4e:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29b50:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   29b54:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29b56:	4621      	mov	r1, r4
          const int32 input1_val =
   29b58:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29b5a:	f8cd 9000 	str.w	r9, [sp]
   29b5e:	4643      	mov	r3, r8
   29b60:	a814      	add	r0, sp, #80	; 0x50
   29b62:	f7fd fe5d 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29b66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29b68:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29b6c:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   29b70:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29b72:	ee18 1a10 	vmov	r1, s16
   29b76:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   29b7a:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29b7c:	f7ed f866 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   29b80:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29b84:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29b86:	ee19 2a90 	vmov	r2, s19
   29b8a:	ee19 1a10 	vmov	r1, s18
   29b8e:	4658      	mov	r0, fp
   29b90:	f7ed f85c 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29b94:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29b96:	4643      	mov	r3, r8
   29b98:	f8cd 9000 	str.w	r9, [sp]
   29b9c:	462a      	mov	r2, r5
   29b9e:	4621      	mov	r1, r4
   29ba0:	4638      	mov	r0, r7
   29ba2:	f7fd fe07 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs > rhs;
   29ba6:	45da      	cmp	sl, fp
   29ba8:	bfd4      	ite	le
   29baa:	f04f 0a00 	movle.w	sl, #0
   29bae:	f04f 0a01 	movgt.w	sl, #1
   29bb2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29bb4:	f109 0901 	add.w	r9, r9, #1
  return lhs > rhs;
   29bb8:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29bbc:	e7b8      	b.n	29b30 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29bbe:	f108 0801 	add.w	r8, r8, #1
   29bc2:	e7ad      	b.n	29b20 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29bc4:	3501      	adds	r5, #1
   29bc6:	e7a2      	b.n	29b0e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29bc8:	3401      	adds	r4, #1
   29bca:	e799      	b.n	29b00 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29bcc:	a806      	add	r0, sp, #24
   29bce:	f7fd fd24 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   29bd2:	b01d      	add	sp, #116	; 0x74
   29bd4:	ecbd 8b04 	vpop	{d8-d9}
   29bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029bdc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29be0:	ed2d 8b04 	vpush	{d8-d9}
   29be4:	4604      	mov	r4, r0
   29be6:	b09d      	sub	sp, #116	; 0x74
   29be8:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   29bea:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29bec:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29bee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   29bf0:	f7fe fdd8 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29bf4:	e9d4 6300 	ldrd	r6, r3, [r4]
   29bf8:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   29bfa:	68a3      	ldr	r3, [r4, #8]
   29bfc:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   29c00:	68e3      	ldr	r3, [r4, #12]
   29c02:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   29c06:	6923      	ldr	r3, [r4, #16]
   29c08:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   29c0a:	6963      	ldr	r3, [r4, #20]
   29c0c:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   29c10:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29c12:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   29c14:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29c18:	2100      	movs	r1, #0
   29c1a:	a806      	add	r0, sp, #24
   29c1c:	f7fd fd08 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29c20:	42a0      	cmp	r0, r4
   29c22:	dd5f      	ble.n	29ce4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29c24:	2500      	movs	r5, #0
   29c26:	af06      	add	r7, sp, #24
   29c28:	2101      	movs	r1, #1
   29c2a:	4638      	mov	r0, r7
   29c2c:	f7fd fd00 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29c30:	42a8      	cmp	r0, r5
   29c32:	dd55      	ble.n	29ce0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29c34:	f04f 0800 	mov.w	r8, #0
   29c38:	2102      	movs	r1, #2
   29c3a:	4638      	mov	r0, r7
   29c3c:	f7fd fcf8 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29c40:	4540      	cmp	r0, r8
   29c42:	dd4b      	ble.n	29cdc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29c44:	f04f 0900 	mov.w	r9, #0
   29c48:	2103      	movs	r1, #3
   29c4a:	4638      	mov	r0, r7
   29c4c:	f7fd fcf0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29c50:	4548      	cmp	r0, r9
   29c52:	dd40      	ble.n	29cd6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29c54:	4643      	mov	r3, r8
   29c56:	462a      	mov	r2, r5
   29c58:	4621      	mov	r1, r4
   29c5a:	f8cd 9000 	str.w	r9, [sp]
   29c5e:	a80c      	add	r0, sp, #48	; 0x30
   29c60:	f7fd fdde 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29c64:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29c66:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29c68:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   29c6c:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29c6e:	4621      	mov	r1, r4
          const int32 input1_val =
   29c70:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29c72:	f8cd 9000 	str.w	r9, [sp]
   29c76:	4643      	mov	r3, r8
   29c78:	a814      	add	r0, sp, #80	; 0x50
   29c7a:	f7fd fdd1 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29c7e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29c80:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29c84:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   29c88:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29c8a:	ee18 1a10 	vmov	r1, s16
   29c8e:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   29c92:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29c94:	f7ec ffda 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   29c98:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29c9c:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29c9e:	ee19 2a90 	vmov	r2, s19
   29ca2:	ee19 1a10 	vmov	r1, s18
   29ca6:	4658      	mov	r0, fp
   29ca8:	f7ec ffd0 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29cac:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29cae:	4643      	mov	r3, r8
   29cb0:	f8cd 9000 	str.w	r9, [sp]
   29cb4:	462a      	mov	r2, r5
   29cb6:	4621      	mov	r1, r4
   29cb8:	4638      	mov	r0, r7
   29cba:	f7fd fd7b 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs > rhs;
   29cbe:	45da      	cmp	sl, fp
   29cc0:	bfd4      	ite	le
   29cc2:	f04f 0a00 	movle.w	sl, #0
   29cc6:	f04f 0a01 	movgt.w	sl, #1
   29cca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29ccc:	f109 0901 	add.w	r9, r9, #1
  return lhs > rhs;
   29cd0:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29cd4:	e7b8      	b.n	29c48 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29cd6:	f108 0801 	add.w	r8, r8, #1
   29cda:	e7ad      	b.n	29c38 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29cdc:	3501      	adds	r5, #1
   29cde:	e7a2      	b.n	29c26 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29ce0:	3401      	adds	r4, #1
   29ce2:	e799      	b.n	29c18 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_9GreaterFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29ce4:	a806      	add	r0, sp, #24
   29ce6:	f7fd fc98 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   29cea:	b01d      	add	sp, #116	; 0x74
   29cec:	ecbd 8b04 	vpop	{d8-d9}
   29cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029cf4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29cf8:	ed2d 8b04 	vpush	{d8-d9}
   29cfc:	4604      	mov	r4, r0
   29cfe:	b09d      	sub	sp, #116	; 0x74
   29d00:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   29d02:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29d04:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29d06:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   29d08:	f7fe fd4c 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29d0c:	e9d4 6300 	ldrd	r6, r3, [r4]
   29d10:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   29d12:	68a3      	ldr	r3, [r4, #8]
   29d14:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   29d18:	68e3      	ldr	r3, [r4, #12]
   29d1a:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   29d1e:	6923      	ldr	r3, [r4, #16]
   29d20:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   29d22:	6963      	ldr	r3, [r4, #20]
   29d24:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   29d28:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29d2a:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   29d2c:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29d30:	2100      	movs	r1, #0
   29d32:	a806      	add	r0, sp, #24
   29d34:	f7fd fc7c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29d38:	42a0      	cmp	r0, r4
   29d3a:	dd5f      	ble.n	29dfc <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29d3c:	2500      	movs	r5, #0
   29d3e:	af06      	add	r7, sp, #24
   29d40:	2101      	movs	r1, #1
   29d42:	4638      	mov	r0, r7
   29d44:	f7fd fc74 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29d48:	42a8      	cmp	r0, r5
   29d4a:	dd55      	ble.n	29df8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29d4c:	f04f 0800 	mov.w	r8, #0
   29d50:	2102      	movs	r1, #2
   29d52:	4638      	mov	r0, r7
   29d54:	f7fd fc6c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29d58:	4540      	cmp	r0, r8
   29d5a:	dd4b      	ble.n	29df4 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29d5c:	f04f 0900 	mov.w	r9, #0
   29d60:	2103      	movs	r1, #3
   29d62:	4638      	mov	r0, r7
   29d64:	f7fd fc64 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29d68:	4548      	cmp	r0, r9
   29d6a:	dd40      	ble.n	29dee <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29d6c:	4643      	mov	r3, r8
   29d6e:	462a      	mov	r2, r5
   29d70:	4621      	mov	r1, r4
   29d72:	f8cd 9000 	str.w	r9, [sp]
   29d76:	a80c      	add	r0, sp, #48	; 0x30
   29d78:	f7fd fd52 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29d7c:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29d7e:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29d80:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   29d84:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29d86:	4621      	mov	r1, r4
          const int32 input1_val =
   29d88:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29d8a:	f8cd 9000 	str.w	r9, [sp]
   29d8e:	4643      	mov	r3, r8
   29d90:	a814      	add	r0, sp, #80	; 0x50
   29d92:	f7fd fd45 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29d96:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29d98:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29d9c:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   29da0:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29da2:	ee18 1a10 	vmov	r1, s16
   29da6:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   29daa:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29dac:	f7ec ff4e 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   29db0:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29db4:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29db6:	ee19 2a90 	vmov	r2, s19
   29dba:	ee19 1a10 	vmov	r1, s18
   29dbe:	4658      	mov	r0, fp
   29dc0:	f7ec ff44 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29dc4:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29dc6:	4643      	mov	r3, r8
   29dc8:	f8cd 9000 	str.w	r9, [sp]
   29dcc:	462a      	mov	r2, r5
   29dce:	4621      	mov	r1, r4
   29dd0:	4638      	mov	r0, r7
   29dd2:	f7fd fcef 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs >= rhs;
   29dd6:	45da      	cmp	sl, fp
   29dd8:	bfb4      	ite	lt
   29dda:	f04f 0a00 	movlt.w	sl, #0
   29dde:	f04f 0a01 	movge.w	sl, #1
   29de2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29de4:	f109 0901 	add.w	r9, r9, #1
  return lhs >= rhs;
   29de8:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29dec:	e7b8      	b.n	29d60 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29dee:	f108 0801 	add.w	r8, r8, #1
   29df2:	e7ad      	b.n	29d50 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29df4:	3501      	adds	r5, #1
   29df6:	e7a2      	b.n	29d3e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29df8:	3401      	adds	r4, #1
   29dfa:	e799      	b.n	29d30 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29dfc:	a806      	add	r0, sp, #24
   29dfe:	f7fd fc0c 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   29e02:	b01d      	add	sp, #116	; 0x74
   29e04:	ecbd 8b04 	vpop	{d8-d9}
   29e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029e0c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e10:	ed2d 8b04 	vpush	{d8-d9}
   29e14:	4604      	mov	r4, r0
   29e16:	b09d      	sub	sp, #116	; 0x74
   29e18:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   29e1a:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29e1c:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29e1e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   29e20:	f7fe fcc0 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29e24:	e9d4 6300 	ldrd	r6, r3, [r4]
   29e28:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   29e2a:	68a3      	ldr	r3, [r4, #8]
   29e2c:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   29e30:	68e3      	ldr	r3, [r4, #12]
   29e32:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   29e36:	6923      	ldr	r3, [r4, #16]
   29e38:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   29e3a:	6963      	ldr	r3, [r4, #20]
   29e3c:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   29e40:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29e42:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   29e44:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29e48:	2100      	movs	r1, #0
   29e4a:	a806      	add	r0, sp, #24
   29e4c:	f7fd fbf0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29e50:	42a0      	cmp	r0, r4
   29e52:	dd5f      	ble.n	29f14 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29e54:	2500      	movs	r5, #0
   29e56:	af06      	add	r7, sp, #24
   29e58:	2101      	movs	r1, #1
   29e5a:	4638      	mov	r0, r7
   29e5c:	f7fd fbe8 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29e60:	42a8      	cmp	r0, r5
   29e62:	dd55      	ble.n	29f10 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29e64:	f04f 0800 	mov.w	r8, #0
   29e68:	2102      	movs	r1, #2
   29e6a:	4638      	mov	r0, r7
   29e6c:	f7fd fbe0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29e70:	4540      	cmp	r0, r8
   29e72:	dd4b      	ble.n	29f0c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29e74:	f04f 0900 	mov.w	r9, #0
   29e78:	2103      	movs	r1, #3
   29e7a:	4638      	mov	r0, r7
   29e7c:	f7fd fbd8 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29e80:	4548      	cmp	r0, r9
   29e82:	dd40      	ble.n	29f06 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29e84:	4643      	mov	r3, r8
   29e86:	462a      	mov	r2, r5
   29e88:	4621      	mov	r1, r4
   29e8a:	f8cd 9000 	str.w	r9, [sp]
   29e8e:	a80c      	add	r0, sp, #48	; 0x30
   29e90:	f7fd fcc6 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29e94:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29e96:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29e98:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   29e9c:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29e9e:	4621      	mov	r1, r4
          const int32 input1_val =
   29ea0:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29ea2:	f8cd 9000 	str.w	r9, [sp]
   29ea6:	4643      	mov	r3, r8
   29ea8:	a814      	add	r0, sp, #80	; 0x50
   29eaa:	f7fd fcb9 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29eae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29eb0:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29eb4:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   29eb8:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29eba:	ee18 1a10 	vmov	r1, s16
   29ebe:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   29ec2:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29ec4:	f7ec fec2 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   29ec8:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29ecc:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29ece:	ee19 2a90 	vmov	r2, s19
   29ed2:	ee19 1a10 	vmov	r1, s18
   29ed6:	4658      	mov	r0, fp
   29ed8:	f7ec feb8 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29edc:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29ede:	4643      	mov	r3, r8
   29ee0:	f8cd 9000 	str.w	r9, [sp]
   29ee4:	462a      	mov	r2, r5
   29ee6:	4621      	mov	r1, r4
   29ee8:	4638      	mov	r0, r7
   29eea:	f7fd fc63 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs >= rhs;
   29eee:	45da      	cmp	sl, fp
   29ef0:	bfb4      	ite	lt
   29ef2:	f04f 0a00 	movlt.w	sl, #0
   29ef6:	f04f 0a01 	movge.w	sl, #1
   29efa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29efc:	f109 0901 	add.w	r9, r9, #1
  return lhs >= rhs;
   29f00:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29f04:	e7b8      	b.n	29e78 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29f06:	f108 0801 	add.w	r8, r8, #1
   29f0a:	e7ad      	b.n	29e68 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29f0c:	3501      	adds	r5, #1
   29f0e:	e7a2      	b.n	29e56 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29f10:	3401      	adds	r4, #1
   29f12:	e799      	b.n	29e48 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_14GreaterEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   29f14:	a806      	add	r0, sp, #24
   29f16:	f7fd fb80 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   29f1a:	b01d      	add	sp, #116	; 0x74
   29f1c:	ecbd 8b04 	vpop	{d8-d9}
   29f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00029f24 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   29f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29f28:	ed2d 8b04 	vpush	{d8-d9}
   29f2c:	4604      	mov	r4, r0
   29f2e:	b09d      	sub	sp, #116	; 0x74
   29f30:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   29f32:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   29f34:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   29f36:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   29f38:	f7fe fc34 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   29f3c:	e9d4 6300 	ldrd	r6, r3, [r4]
   29f40:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   29f42:	68a3      	ldr	r3, [r4, #8]
   29f44:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   29f48:	68e3      	ldr	r3, [r4, #12]
   29f4a:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   29f4e:	6923      	ldr	r3, [r4, #16]
   29f50:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   29f52:	6963      	ldr	r3, [r4, #20]
   29f54:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   29f58:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29f5a:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   29f5c:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   29f60:	2100      	movs	r1, #0
   29f62:	a806      	add	r0, sp, #24
   29f64:	f7fd fb64 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29f68:	42a0      	cmp	r0, r4
   29f6a:	dd5f      	ble.n	2a02c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   29f6c:	2500      	movs	r5, #0
   29f6e:	af06      	add	r7, sp, #24
   29f70:	2101      	movs	r1, #1
   29f72:	4638      	mov	r0, r7
   29f74:	f7fd fb5c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29f78:	42a8      	cmp	r0, r5
   29f7a:	dd55      	ble.n	2a028 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   29f7c:	f04f 0800 	mov.w	r8, #0
   29f80:	2102      	movs	r1, #2
   29f82:	4638      	mov	r0, r7
   29f84:	f7fd fb54 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29f88:	4540      	cmp	r0, r8
   29f8a:	dd4b      	ble.n	2a024 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   29f8c:	f04f 0900 	mov.w	r9, #0
   29f90:	2103      	movs	r1, #3
   29f92:	4638      	mov	r0, r7
   29f94:	f7fd fb4c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   29f98:	4548      	cmp	r0, r9
   29f9a:	dd40      	ble.n	2a01e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29f9c:	4643      	mov	r3, r8
   29f9e:	462a      	mov	r2, r5
   29fa0:	4621      	mov	r1, r4
   29fa2:	f8cd 9000 	str.w	r9, [sp]
   29fa6:	a80c      	add	r0, sp, #48	; 0x30
   29fa8:	f7fd fc3a 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29fac:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29fae:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   29fb0:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   29fb4:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29fb6:	4621      	mov	r1, r4
          const int32 input1_val =
   29fb8:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29fba:	f8cd 9000 	str.w	r9, [sp]
   29fbe:	4643      	mov	r3, r8
   29fc0:	a814      	add	r0, sp, #80	; 0x50
   29fc2:	f7fd fc2d 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   29fc6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29fc8:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   29fcc:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   29fd0:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29fd2:	ee18 1a10 	vmov	r1, s16
   29fd6:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   29fda:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29fdc:	f7ec fe36 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   29fe0:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29fe4:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   29fe6:	ee19 2a90 	vmov	r2, s19
   29fea:	ee19 1a10 	vmov	r1, s18
   29fee:	4658      	mov	r0, fp
   29ff0:	f7ec fe2c 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   29ff4:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   29ff6:	4643      	mov	r3, r8
   29ff8:	f8cd 9000 	str.w	r9, [sp]
   29ffc:	462a      	mov	r2, r5
   29ffe:	4621      	mov	r1, r4
   2a000:	4638      	mov	r0, r7
   2a002:	f7fd fbd7 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs < rhs;
   2a006:	45da      	cmp	sl, fp
   2a008:	bfac      	ite	ge
   2a00a:	f04f 0a00 	movge.w	sl, #0
   2a00e:	f04f 0a01 	movlt.w	sl, #1
   2a012:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a014:	f109 0901 	add.w	r9, r9, #1
  return lhs < rhs;
   2a018:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a01c:	e7b8      	b.n	29f90 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2a01e:	f108 0801 	add.w	r8, r8, #1
   2a022:	e7ad      	b.n	29f80 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2a024:	3501      	adds	r5, #1
   2a026:	e7a2      	b.n	29f6e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a028:	3401      	adds	r4, #1
   2a02a:	e799      	b.n	29f60 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   2a02c:	a806      	add	r0, sp, #24
   2a02e:	f7fd faf4 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2a032:	b01d      	add	sp, #116	; 0x74
   2a034:	ecbd 8b04 	vpop	{d8-d9}
   2a038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a03c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   2a03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a040:	ed2d 8b04 	vpush	{d8-d9}
   2a044:	4604      	mov	r4, r0
   2a046:	b09d      	sub	sp, #116	; 0x74
   2a048:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   2a04a:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   2a04c:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   2a04e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   2a050:	f7fe fba8 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   2a054:	e9d4 6300 	ldrd	r6, r3, [r4]
   2a058:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   2a05a:	68a3      	ldr	r3, [r4, #8]
   2a05c:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   2a060:	68e3      	ldr	r3, [r4, #12]
   2a062:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   2a066:	6923      	ldr	r3, [r4, #16]
   2a068:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   2a06a:	6963      	ldr	r3, [r4, #20]
   2a06c:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   2a070:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a072:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   2a074:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a078:	2100      	movs	r1, #0
   2a07a:	a806      	add	r0, sp, #24
   2a07c:	f7fd fad8 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a080:	42a0      	cmp	r0, r4
   2a082:	dd5f      	ble.n	2a144 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2a084:	2500      	movs	r5, #0
   2a086:	af06      	add	r7, sp, #24
   2a088:	2101      	movs	r1, #1
   2a08a:	4638      	mov	r0, r7
   2a08c:	f7fd fad0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a090:	42a8      	cmp	r0, r5
   2a092:	dd55      	ble.n	2a140 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2a094:	f04f 0800 	mov.w	r8, #0
   2a098:	2102      	movs	r1, #2
   2a09a:	4638      	mov	r0, r7
   2a09c:	f7fd fac8 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a0a0:	4540      	cmp	r0, r8
   2a0a2:	dd4b      	ble.n	2a13c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a0a4:	f04f 0900 	mov.w	r9, #0
   2a0a8:	2103      	movs	r1, #3
   2a0aa:	4638      	mov	r0, r7
   2a0ac:	f7fd fac0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a0b0:	4548      	cmp	r0, r9
   2a0b2:	dd40      	ble.n	2a136 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   2a0b4:	4643      	mov	r3, r8
   2a0b6:	462a      	mov	r2, r5
   2a0b8:	4621      	mov	r1, r4
   2a0ba:	f8cd 9000 	str.w	r9, [sp]
   2a0be:	a80c      	add	r0, sp, #48	; 0x30
   2a0c0:	f7fd fbae 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2a0c4:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a0c6:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   2a0c8:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   2a0cc:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a0ce:	4621      	mov	r1, r4
          const int32 input1_val =
   2a0d0:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a0d2:	f8cd 9000 	str.w	r9, [sp]
   2a0d6:	4643      	mov	r3, r8
   2a0d8:	a814      	add	r0, sp, #80	; 0x50
   2a0da:	f7fd fba1 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2a0de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a0e0:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a0e4:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   2a0e8:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a0ea:	ee18 1a10 	vmov	r1, s16
   2a0ee:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   2a0f2:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a0f4:	f7ec fdaa 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   2a0f8:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a0fc:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a0fe:	ee19 2a90 	vmov	r2, s19
   2a102:	ee19 1a10 	vmov	r1, s18
   2a106:	4658      	mov	r0, fp
   2a108:	f7ec fda0 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   2a10c:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2a10e:	4643      	mov	r3, r8
   2a110:	f8cd 9000 	str.w	r9, [sp]
   2a114:	462a      	mov	r2, r5
   2a116:	4621      	mov	r1, r4
   2a118:	4638      	mov	r0, r7
   2a11a:	f7fd fb4b 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs < rhs;
   2a11e:	45da      	cmp	sl, fp
   2a120:	bfac      	ite	ge
   2a122:	f04f 0a00 	movge.w	sl, #0
   2a126:	f04f 0a01 	movlt.w	sl, #1
   2a12a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a12c:	f109 0901 	add.w	r9, r9, #1
  return lhs < rhs;
   2a130:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a134:	e7b8      	b.n	2a0a8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2a136:	f108 0801 	add.w	r8, r8, #1
   2a13a:	e7ad      	b.n	2a098 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2a13c:	3501      	adds	r5, #1
   2a13e:	e7a2      	b.n	2a086 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a140:	3401      	adds	r4, #1
   2a142:	e799      	b.n	2a078 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_6LessFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   2a144:	a806      	add	r0, sp, #24
   2a146:	f7fd fa68 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2a14a:	b01d      	add	sp, #116	; 0x74
   2a14c:	ecbd 8b04 	vpop	{d8-d9}
   2a150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a154 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   2a154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a158:	ed2d 8b04 	vpush	{d8-d9}
   2a15c:	4604      	mov	r4, r0
   2a15e:	b09d      	sub	sp, #116	; 0x74
   2a160:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   2a162:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   2a164:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   2a166:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   2a168:	f7fe fb1c 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   2a16c:	e9d4 6300 	ldrd	r6, r3, [r4]
   2a170:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   2a172:	68a3      	ldr	r3, [r4, #8]
   2a174:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   2a178:	68e3      	ldr	r3, [r4, #12]
   2a17a:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   2a17e:	6923      	ldr	r3, [r4, #16]
   2a180:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   2a182:	6963      	ldr	r3, [r4, #20]
   2a184:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   2a188:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a18a:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   2a18c:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a190:	2100      	movs	r1, #0
   2a192:	a806      	add	r0, sp, #24
   2a194:	f7fd fa4c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a198:	42a0      	cmp	r0, r4
   2a19a:	dd5f      	ble.n	2a25c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2a19c:	2500      	movs	r5, #0
   2a19e:	af06      	add	r7, sp, #24
   2a1a0:	2101      	movs	r1, #1
   2a1a2:	4638      	mov	r0, r7
   2a1a4:	f7fd fa44 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a1a8:	42a8      	cmp	r0, r5
   2a1aa:	dd55      	ble.n	2a258 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2a1ac:	f04f 0800 	mov.w	r8, #0
   2a1b0:	2102      	movs	r1, #2
   2a1b2:	4638      	mov	r0, r7
   2a1b4:	f7fd fa3c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a1b8:	4540      	cmp	r0, r8
   2a1ba:	dd4b      	ble.n	2a254 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a1bc:	f04f 0900 	mov.w	r9, #0
   2a1c0:	2103      	movs	r1, #3
   2a1c2:	4638      	mov	r0, r7
   2a1c4:	f7fd fa34 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a1c8:	4548      	cmp	r0, r9
   2a1ca:	dd40      	ble.n	2a24e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   2a1cc:	4643      	mov	r3, r8
   2a1ce:	462a      	mov	r2, r5
   2a1d0:	4621      	mov	r1, r4
   2a1d2:	f8cd 9000 	str.w	r9, [sp]
   2a1d6:	a80c      	add	r0, sp, #48	; 0x30
   2a1d8:	f7fd fb22 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2a1dc:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a1de:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   2a1e0:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input1_val =
   2a1e4:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a1e6:	4621      	mov	r1, r4
          const int32 input1_val =
   2a1e8:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a1ea:	f8cd 9000 	str.w	r9, [sp]
   2a1ee:	4643      	mov	r3, r8
   2a1f0:	a814      	add	r0, sp, #80	; 0x50
   2a1f2:	f7fd fb15 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2a1f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a1f8:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a1fc:	f813 b000 	ldrb.w	fp, [r3, r0]
          const int32 input2_val =
   2a200:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a202:	ee18 1a10 	vmov	r1, s16
   2a206:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   2a20a:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a20c:	f7ec fd1e 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   2a210:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a214:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a216:	ee19 2a90 	vmov	r2, s19
   2a21a:	ee19 1a10 	vmov	r1, s18
   2a21e:	4658      	mov	r0, fp
   2a220:	f7ec fd14 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   2a224:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2a226:	4643      	mov	r3, r8
   2a228:	f8cd 9000 	str.w	r9, [sp]
   2a22c:	462a      	mov	r2, r5
   2a22e:	4621      	mov	r1, r4
   2a230:	4638      	mov	r0, r7
   2a232:	f7fd fabf 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs <= rhs;
   2a236:	45da      	cmp	sl, fp
   2a238:	bfcc      	ite	gt
   2a23a:	f04f 0a00 	movgt.w	sl, #0
   2a23e:	f04f 0a01 	movle.w	sl, #1
   2a242:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a244:	f109 0901 	add.w	r9, r9, #1
  return lhs <= rhs;
   2a248:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a24c:	e7b8      	b.n	2a1c0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2a24e:	f108 0801 	add.w	r8, r8, #1
   2a252:	e7ad      	b.n	2a1b0 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2a254:	3501      	adds	r5, #1
   2a256:	e7a2      	b.n	2a19e <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a258:	3401      	adds	r4, #1
   2a25a:	e799      	b.n	2a190 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIhXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   2a25c:	a806      	add	r0, sp, #24
   2a25e:	f7fd f9dc 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2a262:	b01d      	add	sp, #116	; 0x74
   2a264:	ecbd 8b04 	vpop	{d8-d9}
   2a268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a26c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb>:
inline void BroadcastComparison4DSlowWithScaling(
   2a26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a270:	ed2d 8b04 	vpush	{d8-d9}
   2a274:	4604      	mov	r4, r0
   2a276:	b09d      	sub	sp, #116	; 0x74
   2a278:	9205      	str	r2, [sp, #20]
  const BroadcastComparison4DSlowCommon dims =
   2a27a:	a806      	add	r0, sp, #24
inline void BroadcastComparison4DSlowWithScaling(
   2a27c:	461a      	mov	r2, r3
  const BroadcastComparison4DSlowCommon dims =
   2a27e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   2a280:	f7fe fa90 	bl	287a4 <_ZN6tflite13reference_ops35BroadcastComparison4DSlowPreprocessERKNS_12RuntimeShapeES3_S3_>
  int32 input1_offset = op_params.input1_offset;
   2a284:	e9d4 6300 	ldrd	r6, r3, [r4]
   2a288:	9303      	str	r3, [sp, #12]
  int32 input1_multiplier = op_params.input1_multiplier;
   2a28a:	68a3      	ldr	r3, [r4, #8]
   2a28c:	ee08 3a10 	vmov	s16, r3
  int input1_shift = op_params.input1_shift;
   2a290:	68e3      	ldr	r3, [r4, #12]
   2a292:	ee08 3a90 	vmov	s17, r3
  int32 input2_offset = op_params.input2_offset;
   2a296:	6923      	ldr	r3, [r4, #16]
   2a298:	9304      	str	r3, [sp, #16]
  int32 input2_multiplier = op_params.input2_multiplier;
   2a29a:	6963      	ldr	r3, [r4, #20]
   2a29c:	ee09 3a10 	vmov	s18, r3
  int input2_shift = op_params.input2_shift;
   2a2a0:	69a3      	ldr	r3, [r4, #24]
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a2a2:	2400      	movs	r4, #0
  int input2_shift = op_params.input2_shift;
   2a2a4:	ee09 3a90 	vmov	s19, r3
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a2a8:	2100      	movs	r1, #0
   2a2aa:	a806      	add	r0, sp, #24
   2a2ac:	f7fd f9c0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a2b0:	42a0      	cmp	r0, r4
   2a2b2:	dd5f      	ble.n	2a374 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x108>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2a2b4:	2500      	movs	r5, #0
   2a2b6:	af06      	add	r7, sp, #24
   2a2b8:	2101      	movs	r1, #1
   2a2ba:	4638      	mov	r0, r7
   2a2bc:	f7fd f9b8 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a2c0:	42a8      	cmp	r0, r5
   2a2c2:	dd55      	ble.n	2a370 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x104>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2a2c4:	f04f 0800 	mov.w	r8, #0
   2a2c8:	2102      	movs	r1, #2
   2a2ca:	4638      	mov	r0, r7
   2a2cc:	f7fd f9b0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a2d0:	4540      	cmp	r0, r8
   2a2d2:	dd4b      	ble.n	2a36c <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x100>
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a2d4:	f04f 0900 	mov.w	r9, #0
   2a2d8:	2103      	movs	r1, #3
   2a2da:	4638      	mov	r0, r7
   2a2dc:	f7fd f9a8 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a2e0:	4548      	cmp	r0, r9
   2a2e2:	dd40      	ble.n	2a366 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0xfa>
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   2a2e4:	4643      	mov	r3, r8
   2a2e6:	462a      	mov	r2, r5
   2a2e8:	4621      	mov	r1, r4
   2a2ea:	f8cd 9000 	str.w	r9, [sp]
   2a2ee:	a80c      	add	r0, sp, #48	; 0x30
   2a2f0:	f7fd fa96 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2a2f4:	9b05      	ldr	r3, [sp, #20]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a2f6:	462a      	mov	r2, r5
              input1_data[SubscriptToIndex(dims.desc1, b, y, x, c)];
   2a2f8:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input1_val =
   2a2fc:	9b03      	ldr	r3, [sp, #12]
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a2fe:	4621      	mov	r1, r4
          const int32 input1_val =
   2a300:	449a      	add	sl, r3
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a302:	f8cd 9000 	str.w	r9, [sp]
   2a306:	4643      	mov	r3, r8
   2a308:	a814      	add	r0, sp, #80	; 0x50
   2a30a:	f7fd fa89 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2a30e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a310:	ee18 2a90 	vmov	r2, s17
              input2_data[SubscriptToIndex(dims.desc2, b, y, x, c)];
   2a314:	f913 b000 	ldrsb.w	fp, [r3, r0]
          const int32 input2_val =
   2a318:	9b04      	ldr	r3, [sp, #16]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a31a:	ee18 1a10 	vmov	r1, s16
   2a31e:	fa0a f006 	lsl.w	r0, sl, r6
          const int32 input2_val =
   2a322:	449b      	add	fp, r3
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a324:	f7ec fc92 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
          const int32 shifted_input2_val = input2_val * (1 << left_shift);
   2a328:	fa0b fb06 	lsl.w	fp, fp, r6
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a32c:	4682      	mov	sl, r0
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2a32e:	ee19 2a90 	vmov	r2, s19
   2a332:	ee19 1a10 	vmov	r1, s18
   2a336:	4658      	mov	r0, fp
   2a338:	f7ec fc88 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
   2a33c:	4683      	mov	fp, r0
          output_data[Offset(dims.output_shape, b, y, x, c)] =
   2a33e:	4643      	mov	r3, r8
   2a340:	f8cd 9000 	str.w	r9, [sp]
   2a344:	462a      	mov	r2, r5
   2a346:	4621      	mov	r1, r4
   2a348:	4638      	mov	r0, r7
   2a34a:	f7fd fa33 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
  return lhs <= rhs;
   2a34e:	45da      	cmp	sl, fp
   2a350:	bfcc      	ite	gt
   2a352:	f04f 0a00 	movgt.w	sl, #0
   2a356:	f04f 0a01 	movle.w	sl, #1
   2a35a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a35c:	f109 0901 	add.w	r9, r9, #1
  return lhs <= rhs;
   2a360:	f803 a000 	strb.w	sl, [r3, r0]
        for (int c = 0; c < dims.output_shape.Dims(3); ++c) {
   2a364:	e7b8      	b.n	2a2d8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x6c>
      for (int x = 0; x < dims.output_shape.Dims(2); ++x) {
   2a366:	f108 0801 	add.w	r8, r8, #1
   2a36a:	e7ad      	b.n	2a2c8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x5c>
    for (int y = 0; y < dims.output_shape.Dims(1); ++y) {
   2a36c:	3501      	adds	r5, #1
   2a36e:	e7a2      	b.n	2a2b6 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x4a>
  for (int b = 0; b < dims.output_shape.Dims(0); ++b) {
   2a370:	3401      	adds	r4, #1
   2a372:	e799      	b.n	2a2a8 <_ZN6tflite13reference_ops36BroadcastComparison4DSlowWithScalingIaXadL_ZNS0_11LessEqualFnIiEEbT_S3_EEEEvRKNS_16ComparisonParamsERKNS_12RuntimeShapeEPKS3_S9_SB_S9_Pb+0x3c>
struct BroadcastComparison4DSlowCommon {
   2a374:	a806      	add	r0, sp, #24
   2a376:	f7fd f950 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2a37a:	b01d      	add	sp, #116	; 0x74
   2a37c:	ecbd 8b04 	vpop	{d8-d9}
   2a380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
   2a384:	b570      	push	{r4, r5, r6, lr}
   2a386:	4615      	mov	r5, r2
   2a388:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
   2a38a:	f7fd f951 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a38e:	4631      	mov	r1, r6
   2a390:	4604      	mov	r4, r0
   2a392:	4628      	mov	r0, r5
   2a394:	f7fd f94c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a398:	4284      	cmp	r4, r0
   2a39a:	d001      	beq.n	2a3a0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x1c>
   2a39c:	f006 fd41 	bl	30e22 <abort>
}
   2a3a0:	bd70      	pop	{r4, r5, r6, pc}

0002a3a2 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph>:
// when optimizng this routine further.
inline void ConcatenationWithScaling(const ConcatenationParams& params,
                                     const RuntimeShape* const* input_shapes,
                                     const uint8* const* input_data,
                                     const RuntimeShape& output_shape,
                                     uint8* output_data) {
   2a3a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a3a6:	ed2d 8b04 	vpush	{d8-d9}
   2a3aa:	469b      	mov	fp, r3
  int axis = params.axis;
  const int32* input_zeropoint = params.input_zeropoint;
   2a3ac:	6843      	ldr	r3, [r0, #4]
                                     uint8* output_data) {
   2a3ae:	b08f      	sub	sp, #60	; 0x3c
  const int32* input_zeropoint = params.input_zeropoint;
   2a3b0:	9306      	str	r3, [sp, #24]
  const float* input_scale = params.input_scale;
   2a3b2:	6883      	ldr	r3, [r0, #8]
  int axis = params.axis;
   2a3b4:	f990 4000 	ldrsb.w	r4, [r0]
  const float* input_scale = params.input_scale;
   2a3b8:	9307      	str	r3, [sp, #28]
  int inputs_count = params.inputs_count;
   2a3ba:	8983      	ldrh	r3, [r0, #12]
  const int32 output_zeropoint = params.output_zeropoint;
  const float output_scale = params.output_scale;

  const int concat_dimensions = output_shape.DimensionsCount();
   2a3bc:	f8db 5000 	ldr.w	r5, [fp]
  int inputs_count = params.inputs_count;
   2a3c0:	9303      	str	r3, [sp, #12]
  const int32 output_zeropoint = params.output_zeropoint;
   2a3c2:	6903      	ldr	r3, [r0, #16]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2a3c4:	42ac      	cmp	r4, r5
  const float output_scale = params.output_scale;
   2a3c6:	ed90 9a05 	vldr	s18, [r0, #20]
                                     uint8* output_data) {
   2a3ca:	9105      	str	r1, [sp, #20]
   2a3cc:	9208      	str	r2, [sp, #32]
  const int32 output_zeropoint = params.output_zeropoint;
   2a3ce:	9304      	str	r3, [sp, #16]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2a3d0:	db01      	blt.n	2a3d6 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x34>
   2a3d2:	f006 fd26 	bl	30e22 <abort>

  int64_t concat_size = 0;
  for (int i = 0; i < inputs_count; i++) {
   2a3d6:	f04f 0800 	mov.w	r8, #0
  int64_t concat_size = 0;
   2a3da:	2600      	movs	r6, #0
   2a3dc:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   2a3de:	9b03      	ldr	r3, [sp, #12]
   2a3e0:	4598      	cmp	r8, r3
   2a3e2:	da1f      	bge.n	2a424 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x82>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   2a3e4:	9b05      	ldr	r3, [sp, #20]
   2a3e6:	f853 a028 	ldr.w	sl, [r3, r8, lsl #2]
   2a3ea:	f8da 3000 	ldr.w	r3, [sl]
   2a3ee:	429d      	cmp	r5, r3
   2a3f0:	d1ef      	bne.n	2a3d2 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x30>
    for (int j = 0; j < concat_dimensions; j++) {
   2a3f2:	f04f 0900 	mov.w	r9, #0
   2a3f6:	45a9      	cmp	r9, r5
   2a3f8:	da0a      	bge.n	2a410 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x6e>
      if (j != axis) {
   2a3fa:	45a1      	cmp	r9, r4
   2a3fc:	d005      	beq.n	2a40a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x68>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   2a3fe:	464b      	mov	r3, r9
   2a400:	465a      	mov	r2, fp
   2a402:	4649      	mov	r1, r9
   2a404:	4650      	mov	r0, sl
   2a406:	f7ff ffbd 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   2a40a:	f109 0901 	add.w	r9, r9, #1
   2a40e:	e7f2      	b.n	2a3f6 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x54>
      }
    }
    concat_size += input_shapes[i]->Dims(axis);
   2a410:	4621      	mov	r1, r4
   2a412:	4650      	mov	r0, sl
   2a414:	f7fd f90c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a418:	1836      	adds	r6, r6, r0
   2a41a:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   2a41e:	f108 0801 	add.w	r8, r8, #1
   2a422:	e7dc      	b.n	2a3de <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x3c>
  }
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   2a424:	4621      	mov	r1, r4
   2a426:	4658      	mov	r0, fp
   2a428:	f7fd f902 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a42c:	17c1      	asrs	r1, r0, #31
   2a42e:	42b9      	cmp	r1, r7
   2a430:	bf08      	it	eq
   2a432:	42b0      	cmpeq	r0, r6
   2a434:	d1cd      	bne.n	2a3d2 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x30>
  int64_t outer_size = 1;
  for (int i = 0; i < axis; ++i) {
   2a436:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   2a438:	f04f 0901 	mov.w	r9, #1
   2a43c:	f04f 0a00 	mov.w	sl, #0
  for (int i = 0; i < axis; ++i) {
   2a440:	42a6      	cmp	r6, r4
   2a442:	da0d      	bge.n	2a460 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xbe>
    outer_size *= output_shape.Dims(i);
   2a444:	4631      	mov	r1, r6
   2a446:	4658      	mov	r0, fp
   2a448:	f7fd f8f2 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a44c:	17c3      	asrs	r3, r0, #31
   2a44e:	fb09 f303 	mul.w	r3, r9, r3
   2a452:	fb00 330a 	mla	r3, r0, sl, r3
   2a456:	fba9 9a00 	umull	r9, sl, r9, r0
  for (int i = 0; i < axis; ++i) {
   2a45a:	3601      	adds	r6, #1
    outer_size *= output_shape.Dims(i);
   2a45c:	449a      	add	sl, r3
  for (int i = 0; i < axis; ++i) {
   2a45e:	e7ef      	b.n	2a440 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x9e>
  }
  // For all input arrays,
  // FlatSize() = outer_size * Dims(axis) * base_inner_size;
  int64_t base_inner_size = 1;
   2a460:	2201      	movs	r2, #1
   2a462:	2300      	movs	r3, #0
   2a464:	e9cd 2300 	strd	r2, r3, [sp]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a468:	1c66      	adds	r6, r4, #1
   2a46a:	42ae      	cmp	r6, r5
   2a46c:	d012      	beq.n	2a494 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xf2>
    base_inner_size *= output_shape.Dims(i);
   2a46e:	4631      	mov	r1, r6
   2a470:	4658      	mov	r0, fp
   2a472:	f7fd f8dd 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a476:	9900      	ldr	r1, [sp, #0]
   2a478:	17c3      	asrs	r3, r0, #31
   2a47a:	434b      	muls	r3, r1
   2a47c:	9a01      	ldr	r2, [sp, #4]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a47e:	3601      	adds	r6, #1
    base_inner_size *= output_shape.Dims(i);
   2a480:	fb00 3302 	mla	r3, r0, r2, r3
   2a484:	fba1 1200 	umull	r1, r2, r1, r0
   2a488:	e9cd 1200 	strd	r1, r2, [sp]
   2a48c:	9a01      	ldr	r2, [sp, #4]
   2a48e:	4413      	add	r3, r2
   2a490:	9301      	str	r3, [sp, #4]
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a492:	e7ea      	b.n	2a46a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xc8>
  }

  const float inverse_output_scale = 1.f / output_scale;
   2a494:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  uint8* output_ptr = output_data;
  for (int k = 0; k < outer_size; k++) {
   2a498:	f04f 0800 	mov.w	r8, #0
  const float inverse_output_scale = 1.f / output_scale;
   2a49c:	eec7 9a89 	vdiv.f32	s19, s15, s18
  for (int k = 0; k < outer_size; k++) {
   2a4a0:	4642      	mov	r2, r8
   2a4a2:	45c8      	cmp	r8, r9
   2a4a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
   2a4a8:	eb73 030a 	sbcs.w	r3, r3, sl
   2a4ac:	da68      	bge.n	2a580 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x1de>
    for (int i = 0; i < inputs_count; ++i) {
   2a4ae:	2500      	movs	r5, #0
   2a4b0:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2a4b4:	9b03      	ldr	r3, [sp, #12]
   2a4b6:	429d      	cmp	r5, r3
   2a4b8:	da5f      	bge.n	2a57a <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x1d8>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   2a4ba:	9b05      	ldr	r3, [sp, #20]
   2a4bc:	4621      	mov	r1, r4
   2a4be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2a4c2:	f7fd f8b5 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a4c6:	9b00      	ldr	r3, [sp, #0]
      const uint8* input_ptr = input_data[i] + k * copy_size;
      if (input_zeropoint[i] == output_zeropoint &&
   2a4c8:	9a06      	ldr	r2, [sp, #24]
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   2a4ca:	fb00 f603 	mul.w	r6, r0, r3
      const uint8* input_ptr = input_data[i] + k * copy_size;
   2a4ce:	9b08      	ldr	r3, [sp, #32]
      if (input_zeropoint[i] == output_zeropoint &&
   2a4d0:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
   2a4d4:	9904      	ldr	r1, [sp, #16]
      const uint8* input_ptr = input_data[i] + k * copy_size;
   2a4d6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
      if (input_zeropoint[i] == output_zeropoint &&
   2a4da:	428a      	cmp	r2, r1
   2a4dc:	ecfb 8a01 	vldmia	fp!, {s17}
      const uint8* input_ptr = input_data[i] + k * copy_size;
   2a4e0:	fb06 3308 	mla	r3, r6, r8, r3
      if (input_zeropoint[i] == output_zeropoint &&
   2a4e4:	d10e      	bne.n	2a504 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x162>
   2a4e6:	eef4 8a49 	vcmp.f32	s17, s18
   2a4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2a4ee:	d109      	bne.n	2a504 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x162>
          input_scale[i] == output_scale) {
        memcpy(output_ptr, input_ptr, copy_size);
   2a4f0:	4632      	mov	r2, r6
   2a4f2:	4619      	mov	r1, r3
   2a4f4:	981c      	ldr	r0, [sp, #112]	; 0x70
   2a4f6:	f006 fcb7 	bl	30e68 <memcpy>
                                output_zeropoint;
          output_ptr[j] = static_cast<uint8_t>(
              std::max<int32_t>(std::min<int32_t>(255, value), 0));
        }
      }
      output_ptr += copy_size;
   2a4fa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    for (int i = 0; i < inputs_count; ++i) {
   2a4fc:	3501      	adds	r5, #1
      output_ptr += copy_size;
   2a4fe:	4433      	add	r3, r6
   2a500:	931c      	str	r3, [sp, #112]	; 0x70
    for (int i = 0; i < inputs_count; ++i) {
   2a502:	e7d7      	b.n	2a4b4 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x112>
        const float bias = -input_zeropoint[i] * scale;
   2a504:	4252      	negs	r2, r2
   2a506:	ee08 2a10 	vmov	s16, r2
        const float scale = input_scale[i] * inverse_output_scale;
   2a50a:	ee68 8aa9 	vmul.f32	s17, s17, s19
        const float bias = -input_zeropoint[i] * scale;
   2a50e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
        for (int j = 0; j < copy_size; ++j) {
   2a512:	2700      	movs	r7, #0
        const float bias = -input_zeropoint[i] * scale;
   2a514:	ee28 8a28 	vmul.f32	s16, s16, s17
        for (int j = 0; j < copy_size; ++j) {
   2a518:	42b7      	cmp	r7, r6
   2a51a:	daee      	bge.n	2a4fa <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x158>
                                    input_ptr[j] * scale + bias)) +
   2a51c:	5dda      	ldrb	r2, [r3, r7]
   2a51e:	eeb0 7a48 	vmov.f32	s14, s16
   2a522:	ee07 2a90 	vmov	s15, r2
   2a526:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   2a52a:	eea7 7aa8 	vfma.f32	s14, s15, s17
   2a52e:	ee17 0a10 	vmov	r0, s14
   2a532:	9309      	str	r3, [sp, #36]	; 0x24
   2a534:	f7e1 ffe8 	bl	c508 <__aeabi_f2d>
   2a538:	f7f8 fafc 	bl	22b34 <round>
   2a53c:	f7e6 fa78 	bl	10a30 <__aeabi_d2f>
          const int32_t value = static_cast<int32_t>(tflite::TfLiteRound(
   2a540:	ee07 0a90 	vmov	s15, r0
   2a544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   2a548:	ee17 0a90 	vmov	r0, s15
                                    input_ptr[j] * scale + bias)) +
   2a54c:	9b04      	ldr	r3, [sp, #16]
   2a54e:	aa0b      	add	r2, sp, #44	; 0x2c
   2a550:	4418      	add	r0, r3
              std::max<int32_t>(std::min<int32_t>(255, value), 0));
   2a552:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   2a554:	28fe      	cmp	r0, #254	; 0xfe
   2a556:	930c      	str	r3, [sp, #48]	; 0x30
	return __b;
   2a558:	ab0c      	add	r3, sp, #48	; 0x30
   2a55a:	bfcc      	ite	gt
   2a55c:	4619      	movgt	r1, r3
   2a55e:	4611      	movle	r1, r2
                                output_zeropoint;
   2a560:	900b      	str	r0, [sp, #44]	; 0x2c
              std::max<int32_t>(std::min<int32_t>(255, value), 0));
   2a562:	2000      	movs	r0, #0
   2a564:	900d      	str	r0, [sp, #52]	; 0x34
      if (__a < __b)
   2a566:	6808      	ldr	r0, [r1, #0]
   2a568:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a56a:	2800      	cmp	r0, #0
	return __b;
   2a56c:	bfb8      	it	lt
   2a56e:	a90d      	addlt	r1, sp, #52	; 0x34
          output_ptr[j] = static_cast<uint8_t>(
   2a570:	6809      	ldr	r1, [r1, #0]
   2a572:	981c      	ldr	r0, [sp, #112]	; 0x70
   2a574:	55c1      	strb	r1, [r0, r7]
        for (int j = 0; j < copy_size; ++j) {
   2a576:	3701      	adds	r7, #1
   2a578:	e7ce      	b.n	2a518 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0x176>
  for (int k = 0; k < outer_size; k++) {
   2a57a:	f108 0801 	add.w	r8, r8, #1
   2a57e:	e78f      	b.n	2a4a0 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph+0xfe>
    }
  }
}
   2a580:	b00f      	add	sp, #60	; 0x3c
   2a582:	ecbd 8b04 	vpop	{d8-d9}
   2a586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a58a <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>:
inline void GetAllTensorShapes(const TfLiteContext& context,
   2a58a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a58c:	4607      	mov	r7, r0
   2a58e:	460e      	mov	r6, r1
   2a590:	4614      	mov	r4, r2
   2a592:	2501      	movs	r5, #1
   2a594:	b087      	sub	sp, #28
  for (int i = 0; i < tensor_list.size; ++i) {
   2a596:	6832      	ldr	r2, [r6, #0]
   2a598:	1e6b      	subs	r3, r5, #1
   2a59a:	429a      	cmp	r2, r3
   2a59c:	dd15      	ble.n	2a5ca <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0+0x40>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   2a59e:	683b      	ldr	r3, [r7, #0]
   2a5a0:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
    RuntimeShape shape = GetTensorShape(t);
   2a5a4:	4668      	mov	r0, sp
   2a5a6:	eb03 1181 	add.w	r1, r3, r1, lsl #6
   2a5aa:	f7fd f87b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    all_shapes[i].ReplaceWith(shape.DimensionsCount(), shape.DimsData());
   2a5ae:	9900      	ldr	r1, [sp, #0]
   2a5b0:	4620      	mov	r0, r4
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2a5b2:	2905      	cmp	r1, #5
   2a5b4:	bfcc      	ite	gt
   2a5b6:	9a01      	ldrgt	r2, [sp, #4]
   2a5b8:	aa01      	addle	r2, sp, #4
   2a5ba:	f7fe f834 	bl	28626 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
    RuntimeShape shape = GetTensorShape(t);
   2a5be:	4668      	mov	r0, sp
   2a5c0:	f7fd f82b 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  for (int i = 0; i < tensor_list.size; ++i) {
   2a5c4:	3501      	adds	r5, #1
   2a5c6:	3418      	adds	r4, #24
   2a5c8:	e7e5      	b.n	2a596 <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0+0xc>
}
   2a5ca:	b007      	add	sp, #28
   2a5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a5ce <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>:
                              const RuntimeShape* pointers[]) {
   2a5ce:	b530      	push	{r4, r5, lr}
  for (size_t i = 0; i < num; ++i) {
   2a5d0:	2300      	movs	r3, #0
    pointers[i] = &shapes[i];
   2a5d2:	2518      	movs	r5, #24
  for (size_t i = 0; i < num; ++i) {
   2a5d4:	428b      	cmp	r3, r1
   2a5d6:	d005      	beq.n	2a5e4 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_+0x16>
    pointers[i] = &shapes[i];
   2a5d8:	fb05 0403 	mla	r4, r5, r3, r0
   2a5dc:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  for (size_t i = 0; i < num; ++i) {
   2a5e0:	3301      	adds	r3, #1
   2a5e2:	e7f7      	b.n	2a5d4 <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_+0x6>
}
   2a5e4:	bd30      	pop	{r4, r5, pc}

0002a5e6 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode>:
void EvalQuantizedUInt8(TfLiteContext* context, TfLiteNode* node) {
   2a5e6:	b5f0      	push	{r4, r5, r6, r7, lr}
  RuntimeShape() : size_(0) {}
   2a5e8:	2200      	movs	r2, #0
   2a5ea:	4604      	mov	r4, r0
   2a5ec:	460e      	mov	r6, r1
   2a5ee:	250a      	movs	r5, #10
   2a5f0:	b0f3      	sub	sp, #460	; 0x1cc
   2a5f2:	ab36      	add	r3, sp, #216	; 0xd8
  RuntimeShape inputs_shape[kMaxInputNum];
   2a5f4:	3d01      	subs	r5, #1
   2a5f6:	f843 2b18 	str.w	r2, [r3], #24
   2a5fa:	d1fb      	bne.n	2a5f4 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   2a5fc:	f104 0008 	add.w	r0, r4, #8
   2a600:	6831      	ldr	r1, [r6, #0]
   2a602:	aa36      	add	r2, sp, #216	; 0xd8
   2a604:	f7ff ffc1 	bl	2a58a <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   2a608:	6833      	ldr	r3, [r6, #0]
   2a60a:	aa0e      	add	r2, sp, #56	; 0x38
   2a60c:	6819      	ldr	r1, [r3, #0]
   2a60e:	a836      	add	r0, sp, #216	; 0xd8
   2a610:	f7ff ffdd 	bl	2a5ce <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  GetAllTensorData(*context, *node->inputs, inputs_data);
   2a614:	6837      	ldr	r7, [r6, #0]
inline void GetAllTensorData(const TfLiteContext& context,
   2a616:	68a4      	ldr	r4, [r4, #8]
  for (int i = 0; i < tensor_list.size; ++i) {
   2a618:	463a      	mov	r2, r7
   2a61a:	f852 cb04 	ldr.w	ip, [r2], #4
    all_data[i] = GetTensorData<T>(t);
   2a61e:	a818      	add	r0, sp, #96	; 0x60
  for (int i = 0; i < tensor_list.size; ++i) {
   2a620:	4611      	mov	r1, r2
   2a622:	45ac      	cmp	ip, r5
   2a624:	dc13      	bgt.n	2a64e <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x68>
   2a626:	a822      	add	r0, sp, #136	; 0x88
  for (int i = 0; i < tensor_list.size; ++i) {
   2a628:	2300      	movs	r3, #0
   2a62a:	4684      	mov	ip, r0
   2a62c:	ad2c      	add	r5, sp, #176	; 0xb0
   2a62e:	6839      	ldr	r1, [r7, #0]
   2a630:	4299      	cmp	r1, r3
   2a632:	dd16      	ble.n	2a662 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x7c>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   2a634:	f852 1b04 	ldr.w	r1, [r2], #4
   2a638:	eb04 1181 	add.w	r1, r4, r1, lsl #6
    scales[i] = t->params.scale;
   2a63c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    zero_points[i] = t->params.zero_point;
   2a640:	6909      	ldr	r1, [r1, #16]
    scales[i] = t->params.scale;
   2a642:	f840 eb04 	str.w	lr, [r0], #4
    zero_points[i] = t->params.zero_point;
   2a646:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   2a64a:	3301      	adds	r3, #1
   2a64c:	e7ef      	b.n	2a62e <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x48>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   2a64e:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2a652:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   2a656:	bf18      	it	ne
   2a658:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   2a65a:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   2a65e:	3501      	adds	r5, #1
   2a660:	e7df      	b.n	2a622 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0x3c>
   2a662:	6873      	ldr	r3, [r6, #4]
                                          inputs_data, GetTensorShape(output),
   2a664:	a808      	add	r0, sp, #32
   2a666:	685b      	ldr	r3, [r3, #4]
   2a668:	eb04 1483 	add.w	r4, r4, r3, lsl #6
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2a66c:	6973      	ldr	r3, [r6, #20]
   2a66e:	681b      	ldr	r3, [r3, #0]
  if (axis >= 0) {
   2a670:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   2a672:	bfbc      	itt	lt
   2a674:	68a2      	ldrlt	r2, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   2a676:	6812      	ldrlt	r2, [r2, #0]
  op_params.inputs_count = NumInputs(node);
   2a678:	f8ad 1014 	strh.w	r1, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   2a67c:	bfb8      	it	lt
   2a67e:	189b      	addlt	r3, r3, r2
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2a680:	f88d 3008 	strb.w	r3, [sp, #8]
  op_params.output_zeropoint = output->params.zero_point;
   2a684:	6923      	ldr	r3, [r4, #16]
                                          inputs_data, GetTensorShape(output),
   2a686:	4621      	mov	r1, r4
  op_params.output_zeropoint = output->params.zero_point;
   2a688:	9306      	str	r3, [sp, #24]
  op_params.output_scale = output->params.scale;
   2a68a:	68e3      	ldr	r3, [r4, #12]
  op_params.input_scale = inputs_scale;
   2a68c:	e9cd 5c03 	strd	r5, ip, [sp, #12]
  op_params.output_scale = output->params.scale;
   2a690:	9307      	str	r3, [sp, #28]
                                          inputs_data, GetTensorShape(output),
   2a692:	f7fd f807 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::ConcatenationWithScaling(op_params, inputs_shape_ptr,
   2a696:	6863      	ldr	r3, [r4, #4]
   2a698:	aa18      	add	r2, sp, #96	; 0x60
   2a69a:	9300      	str	r3, [sp, #0]
   2a69c:	a90e      	add	r1, sp, #56	; 0x38
   2a69e:	ab08      	add	r3, sp, #32
   2a6a0:	a802      	add	r0, sp, #8
   2a6a2:	f7ff fe7e 	bl	2a3a2 <_ZN6tflite13reference_ops24ConcatenationWithScalingERKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKhRS5_Ph>
                                          inputs_data, GetTensorShape(output),
   2a6a6:	a808      	add	r0, sp, #32
   2a6a8:	f7fc ffb7 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   2a6ac:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   2a6ae:	2518      	movs	r5, #24
   2a6b0:	ab36      	add	r3, sp, #216	; 0xd8
   2a6b2:	fb05 3004 	mla	r0, r5, r4, r3
   2a6b6:	f7fc ffb0 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   2a6ba:	3c01      	subs	r4, #1
   2a6bc:	d2f8      	bcs.n	2a6b0 <_ZN6tflite3ops5micro13concatenation18EvalQuantizedUInt8EP13TfLiteContextP10TfLiteNode+0xca>
}
   2a6be:	b073      	add	sp, #460	; 0x1cc
   2a6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a6c2 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   2a6c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a6c6:	469b      	mov	fp, r3
  int axis = params.axis;
   2a6c8:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   2a6cc:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   2a6d0:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   2a6d2:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2a6d4:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   2a6d6:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   2a6da:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2a6dc:	db01      	blt.n	2a6e2 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   2a6de:	f006 fba0 	bl	30e22 <abort>
  for (int i = 0; i < inputs_count; i++) {
   2a6e2:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   2a6e4:	2600      	movs	r6, #0
   2a6e6:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   2a6e8:	9b00      	ldr	r3, [sp, #0]
   2a6ea:	429c      	cmp	r4, r3
   2a6ec:	da1d      	bge.n	2a72a <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   2a6ee:	9b01      	ldr	r3, [sp, #4]
   2a6f0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   2a6f4:	682b      	ldr	r3, [r5, #0]
   2a6f6:	4599      	cmp	r9, r3
   2a6f8:	d1f1      	bne.n	2a6de <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   2a6fa:	f04f 0a00 	mov.w	sl, #0
   2a6fe:	45ca      	cmp	sl, r9
   2a700:	da0a      	bge.n	2a718 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   2a702:	45c2      	cmp	sl, r8
   2a704:	d005      	beq.n	2a712 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   2a706:	4653      	mov	r3, sl
   2a708:	465a      	mov	r2, fp
   2a70a:	4651      	mov	r1, sl
   2a70c:	4628      	mov	r0, r5
   2a70e:	f7ff fe39 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   2a712:	f10a 0a01 	add.w	sl, sl, #1
   2a716:	e7f2      	b.n	2a6fe <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   2a718:	4641      	mov	r1, r8
   2a71a:	4628      	mov	r0, r5
   2a71c:	f7fc ff88 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a720:	1836      	adds	r6, r6, r0
   2a722:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   2a726:	3401      	adds	r4, #1
   2a728:	e7de      	b.n	2a6e8 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   2a72a:	4641      	mov	r1, r8
   2a72c:	4658      	mov	r0, fp
   2a72e:	f7fc ff7f 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a732:	17c1      	asrs	r1, r0, #31
   2a734:	42b9      	cmp	r1, r7
   2a736:	bf08      	it	eq
   2a738:	42b0      	cmpeq	r0, r6
   2a73a:	d1d0      	bne.n	2a6de <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   2a73c:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   2a73e:	2401      	movs	r4, #1
   2a740:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   2a742:	4546      	cmp	r6, r8
   2a744:	da0c      	bge.n	2a760 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   2a746:	4631      	mov	r1, r6
   2a748:	4658      	mov	r0, fp
   2a74a:	f7fc ff71 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a74e:	17c1      	asrs	r1, r0, #31
   2a750:	4361      	muls	r1, r4
   2a752:	fb00 1105 	mla	r1, r0, r5, r1
   2a756:	fba4 4500 	umull	r4, r5, r4, r0
  for (int i = 0; i < axis; ++i) {
   2a75a:	3601      	adds	r6, #1
    outer_size *= output_shape.Dims(i);
   2a75c:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   2a75e:	e7f0      	b.n	2a742 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  int64_t base_inner_size = 1;
   2a760:	2601      	movs	r6, #1
   2a762:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a764:	f108 0a01 	add.w	sl, r8, #1
   2a768:	45ca      	cmp	sl, r9
   2a76a:	d00d      	beq.n	2a788 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   2a76c:	4651      	mov	r1, sl
   2a76e:	4658      	mov	r0, fp
   2a770:	f7fc ff5e 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a774:	17c3      	asrs	r3, r0, #31
   2a776:	4373      	muls	r3, r6
   2a778:	fb00 3307 	mla	r3, r0, r7, r3
   2a77c:	fba6 6700 	umull	r6, r7, r6, r0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a780:	f10a 0a01 	add.w	sl, sl, #1
    base_inner_size *= output_shape.Dims(i);
   2a784:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a786:	e7ef      	b.n	2a768 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   2a788:	f04f 0a00 	mov.w	sl, #0
   2a78c:	4650      	mov	r0, sl
   2a78e:	45a2      	cmp	sl, r4
   2a790:	ea4f 71e0 	mov.w	r1, r0, asr #31
   2a794:	eb71 0305 	sbcs.w	r3, r1, r5
   2a798:	da21      	bge.n	2a7de <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x11c>
    for (int i = 0; i < inputs_count; ++i) {
   2a79a:	f04f 0900 	mov.w	r9, #0
   2a79e:	9b00      	ldr	r3, [sp, #0]
   2a7a0:	4599      	cmp	r9, r3
   2a7a2:	da19      	bge.n	2a7d8 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x116>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   2a7a4:	9b01      	ldr	r3, [sp, #4]
   2a7a6:	4641      	mov	r1, r8
   2a7a8:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   2a7ac:	f7fc ff40 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a7b0:	4370      	muls	r0, r6
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2a7b2:	9b02      	ldr	r3, [sp, #8]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   2a7b4:	0082      	lsls	r2, r0, #2
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2a7b6:	fb00 f00a 	mul.w	r0, r0, sl
   2a7ba:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   2a7be:	9203      	str	r2, [sp, #12]
   2a7c0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   2a7c4:	980e      	ldr	r0, [sp, #56]	; 0x38
   2a7c6:	f006 fb4f 	bl	30e68 <memcpy>
      output_ptr += copy_size;
   2a7ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a7cc:	9a03      	ldr	r2, [sp, #12]
    for (int i = 0; i < inputs_count; ++i) {
   2a7ce:	f109 0901 	add.w	r9, r9, #1
      output_ptr += copy_size;
   2a7d2:	4413      	add	r3, r2
   2a7d4:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   2a7d6:	e7e2      	b.n	2a79e <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xdc>
  for (int k = 0; k < outer_size; k++) {
   2a7d8:	f10a 0a01 	add.w	sl, sl, #1
   2a7dc:	e7d6      	b.n	2a78c <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   2a7de:	b005      	add	sp, #20
   2a7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a7e4 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   2a7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a7e6:	2200      	movs	r2, #0
   2a7e8:	4604      	mov	r4, r0
   2a7ea:	460e      	mov	r6, r1
   2a7ec:	250a      	movs	r5, #10
   2a7ee:	b0df      	sub	sp, #380	; 0x17c
   2a7f0:	ab22      	add	r3, sp, #136	; 0x88
  RuntimeShape inputs_shape[kMaxInputNum];
   2a7f2:	3d01      	subs	r5, #1
   2a7f4:	f843 2b18 	str.w	r2, [r3], #24
   2a7f8:	d1fb      	bne.n	2a7f2 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   2a7fa:	f104 0008 	add.w	r0, r4, #8
   2a7fe:	6831      	ldr	r1, [r6, #0]
   2a800:	aa22      	add	r2, sp, #136	; 0x88
   2a802:	f7ff fec2 	bl	2a58a <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   2a806:	6833      	ldr	r3, [r6, #0]
   2a808:	aa0e      	add	r2, sp, #56	; 0x38
   2a80a:	6819      	ldr	r1, [r3, #0]
   2a80c:	a822      	add	r0, sp, #136	; 0x88
   2a80e:	f7ff fede 	bl	2a5ce <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   2a812:	6831      	ldr	r1, [r6, #0]
   2a814:	68a4      	ldr	r4, [r4, #8]
   2a816:	f851 2b04 	ldr.w	r2, [r1], #4
   2a81a:	af18      	add	r7, sp, #96	; 0x60
   2a81c:	42aa      	cmp	r2, r5
   2a81e:	dd09      	ble.n	2a834 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   2a820:	f851 3b04 	ldr.w	r3, [r1], #4
   2a824:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   2a828:	bf18      	it	ne
   2a82a:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   2a82c:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   2a830:	3501      	adds	r5, #1
   2a832:	e7f3      	b.n	2a81c <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   2a834:	6873      	ldr	r3, [r6, #4]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2a836:	a808      	add	r0, sp, #32
   2a838:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2a83a:	6973      	ldr	r3, [r6, #20]
   2a83c:	eb04 1481 	add.w	r4, r4, r1, lsl #6
   2a840:	681b      	ldr	r3, [r3, #0]
  if (axis >= 0) {
   2a842:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   2a844:	bfbc      	itt	lt
   2a846:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   2a848:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   2a84a:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   2a84e:	bfb8      	it	lt
   2a850:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2a852:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2a854:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2a858:	f7fc ff24 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2a85c:	b104      	cbz	r4, 2a860 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x7c>
   2a85e:	6864      	ldr	r4, [r4, #4]
   2a860:	463a      	mov	r2, r7
   2a862:	9400      	str	r4, [sp, #0]
   2a864:	ab08      	add	r3, sp, #32
   2a866:	a90e      	add	r1, sp, #56	; 0x38
   2a868:	a802      	add	r0, sp, #8
   2a86a:	f7ff ff2a 	bl	2a6c2 <_ZN6tflite13reference_ops13ConcatenationIfEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   2a86e:	a808      	add	r0, sp, #32
   2a870:	f7fc fed3 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2a874:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   2a876:	2518      	movs	r5, #24
   2a878:	ab22      	add	r3, sp, #136	; 0x88
   2a87a:	fb05 3004 	mla	r0, r5, r4, r3
   2a87e:	f7fc fecc 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   2a882:	3c01      	subs	r4, #1
   2a884:	d2f8      	bcs.n	2a878 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIfEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   2a886:	b05f      	add	sp, #380	; 0x17c
   2a888:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a88a <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   2a88a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a88e:	469b      	mov	fp, r3
  int axis = params.axis;
   2a890:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   2a894:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   2a898:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   2a89a:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2a89c:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   2a89e:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   2a8a2:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2a8a4:	db01      	blt.n	2a8aa <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   2a8a6:	f006 fabc 	bl	30e22 <abort>
  for (int i = 0; i < inputs_count; i++) {
   2a8aa:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   2a8ac:	2600      	movs	r6, #0
   2a8ae:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   2a8b0:	9b00      	ldr	r3, [sp, #0]
   2a8b2:	429c      	cmp	r4, r3
   2a8b4:	da1d      	bge.n	2a8f2 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   2a8b6:	9b01      	ldr	r3, [sp, #4]
   2a8b8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   2a8bc:	682b      	ldr	r3, [r5, #0]
   2a8be:	4599      	cmp	r9, r3
   2a8c0:	d1f1      	bne.n	2a8a6 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   2a8c2:	f04f 0a00 	mov.w	sl, #0
   2a8c6:	45ca      	cmp	sl, r9
   2a8c8:	da0a      	bge.n	2a8e0 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   2a8ca:	45c2      	cmp	sl, r8
   2a8cc:	d005      	beq.n	2a8da <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   2a8ce:	4653      	mov	r3, sl
   2a8d0:	465a      	mov	r2, fp
   2a8d2:	4651      	mov	r1, sl
   2a8d4:	4628      	mov	r0, r5
   2a8d6:	f7ff fd55 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   2a8da:	f10a 0a01 	add.w	sl, sl, #1
   2a8de:	e7f2      	b.n	2a8c6 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   2a8e0:	4641      	mov	r1, r8
   2a8e2:	4628      	mov	r0, r5
   2a8e4:	f7fc fea4 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a8e8:	1836      	adds	r6, r6, r0
   2a8ea:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   2a8ee:	3401      	adds	r4, #1
   2a8f0:	e7de      	b.n	2a8b0 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   2a8f2:	4641      	mov	r1, r8
   2a8f4:	4658      	mov	r0, fp
   2a8f6:	f7fc fe9b 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a8fa:	17c1      	asrs	r1, r0, #31
   2a8fc:	42b9      	cmp	r1, r7
   2a8fe:	bf08      	it	eq
   2a900:	42b0      	cmpeq	r0, r6
   2a902:	d1d0      	bne.n	2a8a6 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   2a904:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   2a906:	2401      	movs	r4, #1
   2a908:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   2a90a:	4546      	cmp	r6, r8
   2a90c:	da0c      	bge.n	2a928 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   2a90e:	4631      	mov	r1, r6
   2a910:	4658      	mov	r0, fp
   2a912:	f7fc fe8d 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a916:	17c1      	asrs	r1, r0, #31
   2a918:	4361      	muls	r1, r4
   2a91a:	fb00 1105 	mla	r1, r0, r5, r1
   2a91e:	fba4 4500 	umull	r4, r5, r4, r0
  for (int i = 0; i < axis; ++i) {
   2a922:	3601      	adds	r6, #1
    outer_size *= output_shape.Dims(i);
   2a924:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   2a926:	e7f0      	b.n	2a90a <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  int64_t base_inner_size = 1;
   2a928:	2601      	movs	r6, #1
   2a92a:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a92c:	f108 0a01 	add.w	sl, r8, #1
   2a930:	45ca      	cmp	sl, r9
   2a932:	d00d      	beq.n	2a950 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   2a934:	4651      	mov	r1, sl
   2a936:	4658      	mov	r0, fp
   2a938:	f7fc fe7a 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a93c:	17c3      	asrs	r3, r0, #31
   2a93e:	4373      	muls	r3, r6
   2a940:	fb00 3307 	mla	r3, r0, r7, r3
   2a944:	fba6 6700 	umull	r6, r7, r6, r0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a948:	f10a 0a01 	add.w	sl, sl, #1
    base_inner_size *= output_shape.Dims(i);
   2a94c:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2a94e:	e7ef      	b.n	2a930 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   2a950:	f04f 0a00 	mov.w	sl, #0
   2a954:	4650      	mov	r0, sl
   2a956:	45a2      	cmp	sl, r4
   2a958:	ea4f 71e0 	mov.w	r1, r0, asr #31
   2a95c:	eb71 0305 	sbcs.w	r3, r1, r5
   2a960:	da21      	bge.n	2a9a6 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x11c>
    for (int i = 0; i < inputs_count; ++i) {
   2a962:	f04f 0900 	mov.w	r9, #0
   2a966:	9b00      	ldr	r3, [sp, #0]
   2a968:	4599      	cmp	r9, r3
   2a96a:	da19      	bge.n	2a9a0 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x116>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   2a96c:	9b01      	ldr	r3, [sp, #4]
   2a96e:	4641      	mov	r1, r8
   2a970:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   2a974:	f7fc fe5c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2a978:	4370      	muls	r0, r6
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2a97a:	9b02      	ldr	r3, [sp, #8]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   2a97c:	0082      	lsls	r2, r0, #2
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2a97e:	fb00 f00a 	mul.w	r0, r0, sl
   2a982:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   2a986:	9203      	str	r2, [sp, #12]
   2a988:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   2a98c:	980e      	ldr	r0, [sp, #56]	; 0x38
   2a98e:	f006 fa6b 	bl	30e68 <memcpy>
      output_ptr += copy_size;
   2a992:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2a994:	9a03      	ldr	r2, [sp, #12]
    for (int i = 0; i < inputs_count; ++i) {
   2a996:	f109 0901 	add.w	r9, r9, #1
      output_ptr += copy_size;
   2a99a:	4413      	add	r3, r2
   2a99c:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   2a99e:	e7e2      	b.n	2a966 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xdc>
  for (int k = 0; k < outer_size; k++) {
   2a9a0:	f10a 0a01 	add.w	sl, sl, #1
   2a9a4:	e7d6      	b.n	2a954 <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   2a9a6:	b005      	add	sp, #20
   2a9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a9ac <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   2a9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a9ae:	2200      	movs	r2, #0
   2a9b0:	4604      	mov	r4, r0
   2a9b2:	460e      	mov	r6, r1
   2a9b4:	250a      	movs	r5, #10
   2a9b6:	b0df      	sub	sp, #380	; 0x17c
   2a9b8:	ab22      	add	r3, sp, #136	; 0x88
  RuntimeShape inputs_shape[kMaxInputNum];
   2a9ba:	3d01      	subs	r5, #1
   2a9bc:	f843 2b18 	str.w	r2, [r3], #24
   2a9c0:	d1fb      	bne.n	2a9ba <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   2a9c2:	f104 0008 	add.w	r0, r4, #8
   2a9c6:	6831      	ldr	r1, [r6, #0]
   2a9c8:	aa22      	add	r2, sp, #136	; 0x88
   2a9ca:	f7ff fdde 	bl	2a58a <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   2a9ce:	6833      	ldr	r3, [r6, #0]
   2a9d0:	aa0e      	add	r2, sp, #56	; 0x38
   2a9d2:	6819      	ldr	r1, [r3, #0]
   2a9d4:	a822      	add	r0, sp, #136	; 0x88
   2a9d6:	f7ff fdfa 	bl	2a5ce <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   2a9da:	6831      	ldr	r1, [r6, #0]
   2a9dc:	68a4      	ldr	r4, [r4, #8]
   2a9de:	f851 2b04 	ldr.w	r2, [r1], #4
   2a9e2:	af18      	add	r7, sp, #96	; 0x60
   2a9e4:	42aa      	cmp	r2, r5
   2a9e6:	dd09      	ble.n	2a9fc <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   2a9e8:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2a9ec:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   2a9f0:	bf18      	it	ne
   2a9f2:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   2a9f4:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   2a9f8:	3501      	adds	r5, #1
   2a9fa:	e7f3      	b.n	2a9e4 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   2a9fc:	6873      	ldr	r3, [r6, #4]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2a9fe:	a808      	add	r0, sp, #32
   2aa00:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2aa02:	6973      	ldr	r3, [r6, #20]
   2aa04:	eb04 1481 	add.w	r4, r4, r1, lsl #6
   2aa08:	681b      	ldr	r3, [r3, #0]
  if (axis >= 0) {
   2aa0a:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   2aa0c:	bfbc      	itt	lt
   2aa0e:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   2aa10:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   2aa12:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   2aa16:	bfb8      	it	lt
   2aa18:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2aa1a:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2aa1c:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2aa20:	f7fc fe40 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2aa24:	b104      	cbz	r4, 2aa28 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x7c>
   2aa26:	6864      	ldr	r4, [r4, #4]
   2aa28:	463a      	mov	r2, r7
   2aa2a:	9400      	str	r4, [sp, #0]
   2aa2c:	ab08      	add	r3, sp, #32
   2aa2e:	a90e      	add	r1, sp, #56	; 0x38
   2aa30:	a802      	add	r0, sp, #8
   2aa32:	f7ff ff2a 	bl	2a88a <_ZN6tflite13reference_ops13ConcatenationIiEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   2aa36:	a808      	add	r0, sp, #32
   2aa38:	f7fc fdef 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2aa3c:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   2aa3e:	2518      	movs	r5, #24
   2aa40:	ab22      	add	r3, sp, #136	; 0x88
   2aa42:	fb05 3004 	mla	r0, r5, r4, r3
   2aa46:	f7fc fde8 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   2aa4a:	3c01      	subs	r4, #1
   2aa4c:	d2f8      	bcs.n	2aa40 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIiEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   2aa4e:	b05f      	add	sp, #380	; 0x17c
   2aa50:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002aa52 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   2aa52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aa56:	469b      	mov	fp, r3
  int axis = params.axis;
   2aa58:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   2aa5c:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   2aa60:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   2aa62:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2aa64:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   2aa66:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   2aa6a:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2aa6c:	db01      	blt.n	2aa72 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   2aa6e:	f006 f9d8 	bl	30e22 <abort>
  for (int i = 0; i < inputs_count; i++) {
   2aa72:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   2aa74:	2600      	movs	r6, #0
   2aa76:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   2aa78:	9b00      	ldr	r3, [sp, #0]
   2aa7a:	429c      	cmp	r4, r3
   2aa7c:	da1d      	bge.n	2aaba <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   2aa7e:	9b01      	ldr	r3, [sp, #4]
   2aa80:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   2aa84:	682b      	ldr	r3, [r5, #0]
   2aa86:	4599      	cmp	r9, r3
   2aa88:	d1f1      	bne.n	2aa6e <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   2aa8a:	f04f 0a00 	mov.w	sl, #0
   2aa8e:	45ca      	cmp	sl, r9
   2aa90:	da0a      	bge.n	2aaa8 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   2aa92:	45c2      	cmp	sl, r8
   2aa94:	d005      	beq.n	2aaa2 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   2aa96:	4653      	mov	r3, sl
   2aa98:	465a      	mov	r2, fp
   2aa9a:	4651      	mov	r1, sl
   2aa9c:	4628      	mov	r0, r5
   2aa9e:	f7ff fc71 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   2aaa2:	f10a 0a01 	add.w	sl, sl, #1
   2aaa6:	e7f2      	b.n	2aa8e <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   2aaa8:	4641      	mov	r1, r8
   2aaaa:	4628      	mov	r0, r5
   2aaac:	f7fc fdc0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2aab0:	1836      	adds	r6, r6, r0
   2aab2:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   2aab6:	3401      	adds	r4, #1
   2aab8:	e7de      	b.n	2aa78 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   2aaba:	4641      	mov	r1, r8
   2aabc:	4658      	mov	r0, fp
   2aabe:	f7fc fdb7 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2aac2:	17c1      	asrs	r1, r0, #31
   2aac4:	42b9      	cmp	r1, r7
   2aac6:	bf08      	it	eq
   2aac8:	42b0      	cmpeq	r0, r6
   2aaca:	d1d0      	bne.n	2aa6e <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   2aacc:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   2aace:	2401      	movs	r4, #1
   2aad0:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   2aad2:	4546      	cmp	r6, r8
   2aad4:	da0c      	bge.n	2aaf0 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   2aad6:	4631      	mov	r1, r6
   2aad8:	4658      	mov	r0, fp
   2aada:	f7fc fda9 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2aade:	17c1      	asrs	r1, r0, #31
   2aae0:	4361      	muls	r1, r4
   2aae2:	fb00 1105 	mla	r1, r0, r5, r1
   2aae6:	fba4 4500 	umull	r4, r5, r4, r0
  for (int i = 0; i < axis; ++i) {
   2aaea:	3601      	adds	r6, #1
    outer_size *= output_shape.Dims(i);
   2aaec:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   2aaee:	e7f0      	b.n	2aad2 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  int64_t base_inner_size = 1;
   2aaf0:	2601      	movs	r6, #1
   2aaf2:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2aaf4:	f108 0a01 	add.w	sl, r8, #1
   2aaf8:	45ca      	cmp	sl, r9
   2aafa:	d00d      	beq.n	2ab18 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   2aafc:	4651      	mov	r1, sl
   2aafe:	4658      	mov	r0, fp
   2ab00:	f7fc fd96 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2ab04:	17c3      	asrs	r3, r0, #31
   2ab06:	4373      	muls	r3, r6
   2ab08:	fb00 3307 	mla	r3, r0, r7, r3
   2ab0c:	fba6 6700 	umull	r6, r7, r6, r0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2ab10:	f10a 0a01 	add.w	sl, sl, #1
    base_inner_size *= output_shape.Dims(i);
   2ab14:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2ab16:	e7ef      	b.n	2aaf8 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   2ab18:	f04f 0a00 	mov.w	sl, #0
   2ab1c:	4650      	mov	r0, sl
   2ab1e:	45a2      	cmp	sl, r4
   2ab20:	ea4f 71e0 	mov.w	r1, r0, asr #31
   2ab24:	eb71 0305 	sbcs.w	r3, r1, r5
   2ab28:	da1f      	bge.n	2ab6a <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x118>
    for (int i = 0; i < inputs_count; ++i) {
   2ab2a:	f04f 0900 	mov.w	r9, #0
   2ab2e:	9b00      	ldr	r3, [sp, #0]
   2ab30:	4599      	cmp	r9, r3
   2ab32:	da17      	bge.n	2ab64 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x112>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   2ab34:	9b01      	ldr	r3, [sp, #4]
   2ab36:	4641      	mov	r1, r8
   2ab38:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   2ab3c:	f7fc fd78 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2ab40:	9b02      	ldr	r3, [sp, #8]
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   2ab42:	fb00 f206 	mul.w	r2, r0, r6
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2ab46:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   2ab4a:	980e      	ldr	r0, [sp, #56]	; 0x38
   2ab4c:	fb02 110a 	mla	r1, r2, sl, r1
   2ab50:	9203      	str	r2, [sp, #12]
   2ab52:	f006 f989 	bl	30e68 <memcpy>
      output_ptr += copy_size;
   2ab56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2ab58:	9a03      	ldr	r2, [sp, #12]
    for (int i = 0; i < inputs_count; ++i) {
   2ab5a:	f109 0901 	add.w	r9, r9, #1
      output_ptr += copy_size;
   2ab5e:	4413      	add	r3, r2
   2ab60:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   2ab62:	e7e4      	b.n	2ab2e <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xdc>
  for (int k = 0; k < outer_size; k++) {
   2ab64:	f10a 0a01 	add.w	sl, sl, #1
   2ab68:	e7d8      	b.n	2ab1c <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   2ab6a:	b005      	add	sp, #20
   2ab6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ab70 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   2ab70:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ab72:	2200      	movs	r2, #0
   2ab74:	4604      	mov	r4, r0
   2ab76:	460e      	mov	r6, r1
   2ab78:	250a      	movs	r5, #10
   2ab7a:	b0df      	sub	sp, #380	; 0x17c
   2ab7c:	ab22      	add	r3, sp, #136	; 0x88
  RuntimeShape inputs_shape[kMaxInputNum];
   2ab7e:	3d01      	subs	r5, #1
   2ab80:	f843 2b18 	str.w	r2, [r3], #24
   2ab84:	d1fb      	bne.n	2ab7e <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   2ab86:	f104 0008 	add.w	r0, r4, #8
   2ab8a:	6831      	ldr	r1, [r6, #0]
   2ab8c:	aa22      	add	r2, sp, #136	; 0x88
   2ab8e:	f7ff fcfc 	bl	2a58a <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   2ab92:	6833      	ldr	r3, [r6, #0]
   2ab94:	aa0e      	add	r2, sp, #56	; 0x38
   2ab96:	6819      	ldr	r1, [r3, #0]
   2ab98:	a822      	add	r0, sp, #136	; 0x88
   2ab9a:	f7ff fd18 	bl	2a5ce <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   2ab9e:	6831      	ldr	r1, [r6, #0]
   2aba0:	68a4      	ldr	r4, [r4, #8]
   2aba2:	f851 2b04 	ldr.w	r2, [r1], #4
   2aba6:	af18      	add	r7, sp, #96	; 0x60
   2aba8:	42aa      	cmp	r2, r5
   2abaa:	dd09      	ble.n	2abc0 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   2abac:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2abb0:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   2abb4:	bf18      	it	ne
   2abb6:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   2abb8:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   2abbc:	3501      	adds	r5, #1
   2abbe:	e7f3      	b.n	2aba8 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   2abc0:	6873      	ldr	r3, [r6, #4]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2abc2:	a808      	add	r0, sp, #32
   2abc4:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2abc6:	6973      	ldr	r3, [r6, #20]
   2abc8:	eb04 1481 	add.w	r4, r4, r1, lsl #6
   2abcc:	681b      	ldr	r3, [r3, #0]
  if (axis >= 0) {
   2abce:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   2abd0:	bfbc      	itt	lt
   2abd2:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   2abd4:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   2abd6:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   2abda:	bfb8      	it	lt
   2abdc:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2abde:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2abe0:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2abe4:	f7fc fd5e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2abe8:	b104      	cbz	r4, 2abec <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x7c>
   2abea:	6864      	ldr	r4, [r4, #4]
   2abec:	463a      	mov	r2, r7
   2abee:	9400      	str	r4, [sp, #0]
   2abf0:	ab08      	add	r3, sp, #32
   2abf2:	a90e      	add	r1, sp, #56	; 0x38
   2abf4:	a802      	add	r0, sp, #8
   2abf6:	f7ff ff2c 	bl	2aa52 <_ZN6tflite13reference_ops13ConcatenationIaEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   2abfa:	a808      	add	r0, sp, #32
   2abfc:	f7fc fd0d 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2ac00:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   2ac02:	2518      	movs	r5, #24
   2ac04:	ab22      	add	r3, sp, #136	; 0x88
   2ac06:	fb05 3004 	mla	r0, r5, r4, r3
   2ac0a:	f7fc fd06 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   2ac0e:	3c01      	subs	r4, #1
   2ac10:	d2f8      	bcs.n	2ac04 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIaEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   2ac12:	b05f      	add	sp, #380	; 0x17c
   2ac14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002ac16 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>:
inline void Concatenation(const ConcatenationParams& params,
   2ac16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ac1a:	469b      	mov	fp, r3
  int axis = params.axis;
   2ac1c:	f990 8000 	ldrsb.w	r8, [r0]
  const int concat_dimensions = output_shape.DimensionsCount();
   2ac20:	f8db 9000 	ldr.w	r9, [fp]
  int inputs_count = params.inputs_count;
   2ac24:	8983      	ldrh	r3, [r0, #12]
inline void Concatenation(const ConcatenationParams& params,
   2ac26:	b085      	sub	sp, #20
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2ac28:	45c8      	cmp	r8, r9
inline void Concatenation(const ConcatenationParams& params,
   2ac2a:	e9cd 1201 	strd	r1, r2, [sp, #4]
  int inputs_count = params.inputs_count;
   2ac2e:	9300      	str	r3, [sp, #0]
  TFLITE_DCHECK_LT(axis, concat_dimensions);
   2ac30:	db01      	blt.n	2ac36 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x20>
   2ac32:	f006 f8f6 	bl	30e22 <abort>
  for (int i = 0; i < inputs_count; i++) {
   2ac36:	2400      	movs	r4, #0
  int64_t concat_size = 0;
   2ac38:	2600      	movs	r6, #0
   2ac3a:	2700      	movs	r7, #0
  for (int i = 0; i < inputs_count; i++) {
   2ac3c:	9b00      	ldr	r3, [sp, #0]
   2ac3e:	429c      	cmp	r4, r3
   2ac40:	da1d      	bge.n	2ac7e <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x68>
    TFLITE_DCHECK_EQ(input_shapes[i]->DimensionsCount(), concat_dimensions);
   2ac42:	9b01      	ldr	r3, [sp, #4]
   2ac44:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   2ac48:	682b      	ldr	r3, [r5, #0]
   2ac4a:	4599      	cmp	r9, r3
   2ac4c:	d1f1      	bne.n	2ac32 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
    for (int j = 0; j < concat_dimensions; j++) {
   2ac4e:	f04f 0a00 	mov.w	sl, #0
   2ac52:	45ca      	cmp	sl, r9
   2ac54:	da0a      	bge.n	2ac6c <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x56>
      if (j != axis) {
   2ac56:	45c2      	cmp	sl, r8
   2ac58:	d005      	beq.n	2ac66 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x50>
        MatchingDim(*input_shapes[i], j, output_shape, j);
   2ac5a:	4653      	mov	r3, sl
   2ac5c:	465a      	mov	r2, fp
   2ac5e:	4651      	mov	r1, sl
   2ac60:	4628      	mov	r0, r5
   2ac62:	f7ff fb8f 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    for (int j = 0; j < concat_dimensions; j++) {
   2ac66:	f10a 0a01 	add.w	sl, sl, #1
   2ac6a:	e7f2      	b.n	2ac52 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x3c>
    concat_size += input_shapes[i]->Dims(axis);
   2ac6c:	4641      	mov	r1, r8
   2ac6e:	4628      	mov	r0, r5
   2ac70:	f7fc fcde 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2ac74:	1836      	adds	r6, r6, r0
   2ac76:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
  for (int i = 0; i < inputs_count; i++) {
   2ac7a:	3401      	adds	r4, #1
   2ac7c:	e7de      	b.n	2ac3c <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x26>
  TFLITE_DCHECK_EQ(concat_size, output_shape.Dims(axis));
   2ac7e:	4641      	mov	r1, r8
   2ac80:	4658      	mov	r0, fp
   2ac82:	f7fc fcd5 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2ac86:	17c1      	asrs	r1, r0, #31
   2ac88:	42b9      	cmp	r1, r7
   2ac8a:	bf08      	it	eq
   2ac8c:	42b0      	cmpeq	r0, r6
   2ac8e:	d1d0      	bne.n	2ac32 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x1c>
  for (int i = 0; i < axis; ++i) {
   2ac90:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   2ac92:	2401      	movs	r4, #1
   2ac94:	2500      	movs	r5, #0
  for (int i = 0; i < axis; ++i) {
   2ac96:	4546      	cmp	r6, r8
   2ac98:	da0c      	bge.n	2acb4 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x9e>
    outer_size *= output_shape.Dims(i);
   2ac9a:	4631      	mov	r1, r6
   2ac9c:	4658      	mov	r0, fp
   2ac9e:	f7fc fcc7 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2aca2:	17c1      	asrs	r1, r0, #31
   2aca4:	4361      	muls	r1, r4
   2aca6:	fb00 1105 	mla	r1, r0, r5, r1
   2acaa:	fba4 4500 	umull	r4, r5, r4, r0
  for (int i = 0; i < axis; ++i) {
   2acae:	3601      	adds	r6, #1
    outer_size *= output_shape.Dims(i);
   2acb0:	440d      	add	r5, r1
  for (int i = 0; i < axis; ++i) {
   2acb2:	e7f0      	b.n	2ac96 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x80>
  int64_t base_inner_size = 1;
   2acb4:	2601      	movs	r6, #1
   2acb6:	2700      	movs	r7, #0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2acb8:	f108 0a01 	add.w	sl, r8, #1
   2acbc:	45ca      	cmp	sl, r9
   2acbe:	d00d      	beq.n	2acdc <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xc6>
    base_inner_size *= output_shape.Dims(i);
   2acc0:	4651      	mov	r1, sl
   2acc2:	4658      	mov	r0, fp
   2acc4:	f7fc fcb4 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2acc8:	17c3      	asrs	r3, r0, #31
   2acca:	4373      	muls	r3, r6
   2accc:	fb00 3307 	mla	r3, r0, r7, r3
   2acd0:	fba6 6700 	umull	r6, r7, r6, r0
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2acd4:	f10a 0a01 	add.w	sl, sl, #1
    base_inner_size *= output_shape.Dims(i);
   2acd8:	441f      	add	r7, r3
  for (int i = axis + 1; i < concat_dimensions; ++i) {
   2acda:	e7ef      	b.n	2acbc <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xa6>
  for (int k = 0; k < outer_size; k++) {
   2acdc:	f04f 0a00 	mov.w	sl, #0
   2ace0:	4650      	mov	r0, sl
   2ace2:	45a2      	cmp	sl, r4
   2ace4:	ea4f 71e0 	mov.w	r1, r0, asr #31
   2ace8:	eb71 0305 	sbcs.w	r3, r1, r5
   2acec:	da21      	bge.n	2ad32 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x11c>
    for (int i = 0; i < inputs_count; ++i) {
   2acee:	f04f 0900 	mov.w	r9, #0
   2acf2:	9b00      	ldr	r3, [sp, #0]
   2acf4:	4599      	cmp	r9, r3
   2acf6:	da19      	bge.n	2ad2c <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0x116>
      const int copy_size = input_shapes[i]->Dims(axis) * base_inner_size;
   2acf8:	9b01      	ldr	r3, [sp, #4]
   2acfa:	4641      	mov	r1, r8
   2acfc:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
   2ad00:	f7fc fc96 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2ad04:	4370      	muls	r0, r6
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2ad06:	9b02      	ldr	r3, [sp, #8]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   2ad08:	00c2      	lsls	r2, r0, #3
      const Scalar* input_ptr = input_data[i] + k * copy_size;
   2ad0a:	fb00 f00a 	mul.w	r0, r0, sl
   2ad0e:	f853 1029 	ldr.w	r1, [r3, r9, lsl #2]
      memcpy(output_ptr, input_ptr, copy_size * sizeof(Scalar));
   2ad12:	9203      	str	r2, [sp, #12]
   2ad14:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   2ad18:	980e      	ldr	r0, [sp, #56]	; 0x38
   2ad1a:	f006 f8a5 	bl	30e68 <memcpy>
      output_ptr += copy_size;
   2ad1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2ad20:	9a03      	ldr	r2, [sp, #12]
    for (int i = 0; i < inputs_count; ++i) {
   2ad22:	f109 0901 	add.w	r9, r9, #1
      output_ptr += copy_size;
   2ad26:	4413      	add	r3, r2
   2ad28:	930e      	str	r3, [sp, #56]	; 0x38
    for (int i = 0; i < inputs_count; ++i) {
   2ad2a:	e7e2      	b.n	2acf2 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xdc>
  for (int k = 0; k < outer_size; k++) {
   2ad2c:	f10a 0a01 	add.w	sl, sl, #1
   2ad30:	e7d6      	b.n	2ace0 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_+0xca>
}
   2ad32:	b005      	add	sp, #20
   2ad34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ad38 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode>:
void EvalUnquantized(TfLiteContext* context, TfLiteNode* node) {
   2ad38:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ad3a:	2200      	movs	r2, #0
   2ad3c:	4604      	mov	r4, r0
   2ad3e:	460e      	mov	r6, r1
   2ad40:	250a      	movs	r5, #10
   2ad42:	b0df      	sub	sp, #380	; 0x17c
   2ad44:	ab22      	add	r3, sp, #136	; 0x88
  RuntimeShape inputs_shape[kMaxInputNum];
   2ad46:	3d01      	subs	r5, #1
   2ad48:	f843 2b18 	str.w	r2, [r3], #24
   2ad4c:	d1fb      	bne.n	2ad46 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0xe>
  GetAllTensorShapes(*context, *node->inputs, inputs_shape);
   2ad4e:	f104 0008 	add.w	r0, r4, #8
   2ad52:	6831      	ldr	r1, [r6, #0]
   2ad54:	aa22      	add	r2, sp, #136	; 0x88
   2ad56:	f7ff fc18 	bl	2a58a <_ZN6tflite3ops5micro13concatenation18GetAllTensorShapesERK13TfLiteContextRK14TfLiteIntArrayPNS_12RuntimeShapeE.isra.0>
  GetShapesPointers(inputs_shape, node->inputs->size, inputs_shape_ptr);
   2ad5a:	6833      	ldr	r3, [r6, #0]
   2ad5c:	aa0e      	add	r2, sp, #56	; 0x38
   2ad5e:	6819      	ldr	r1, [r3, #0]
   2ad60:	a822      	add	r0, sp, #136	; 0x88
   2ad62:	f7ff fc34 	bl	2a5ce <_ZN6tflite3ops5micro13concatenation17GetShapesPointersEPKNS_12RuntimeShapeEjPS5_>
  for (int i = 0; i < tensor_list.size; ++i) {
   2ad66:	6831      	ldr	r1, [r6, #0]
   2ad68:	68a4      	ldr	r4, [r4, #8]
   2ad6a:	f851 2b04 	ldr.w	r2, [r1], #4
   2ad6e:	af18      	add	r7, sp, #96	; 0x60
   2ad70:	42aa      	cmp	r2, r5
   2ad72:	dd09      	ble.n	2ad88 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x50>
    const TfLiteTensor* t = &context.tensors[tensor_list.data[i]];
   2ad74:	f851 3b04 	ldr.w	r3, [r1], #4
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2ad78:	eb14 1383 	adds.w	r3, r4, r3, lsl #6
   2ad7c:	bf18      	it	ne
   2ad7e:	685b      	ldrne	r3, [r3, #4]
    all_data[i] = GetTensorData<T>(t);
   2ad80:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
  for (int i = 0; i < tensor_list.size; ++i) {
   2ad84:	3501      	adds	r5, #1
   2ad86:	e7f3      	b.n	2ad70 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x38>
  return &context->tensors[node->outputs->data[index]];
   2ad88:	6873      	ldr	r3, [r6, #4]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2ad8a:	a808      	add	r0, sp, #32
   2ad8c:	6859      	ldr	r1, [r3, #4]
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2ad8e:	6973      	ldr	r3, [r6, #20]
   2ad90:	eb04 1481 	add.w	r4, r4, r1, lsl #6
   2ad94:	681b      	ldr	r3, [r3, #0]
  if (axis >= 0) {
   2ad96:	2b00      	cmp	r3, #0
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   2ad98:	bfbc      	itt	lt
   2ad9a:	68a1      	ldrlt	r1, [r4, #8]
    return NumDimensions(output_tensor) + axis;
   2ad9c:	6809      	ldrlt	r1, [r1, #0]
  op_params.inputs_count = NumInputs(node);
   2ad9e:	f8ad 2014 	strh.w	r2, [sp, #20]
    return NumDimensions(output_tensor) + axis;
   2ada2:	bfb8      	it	lt
   2ada4:	185b      	addlt	r3, r3, r1
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2ada6:	4621      	mov	r1, r4
  op_params.axis = CalculatePositiveAxis(params->axis, output);
   2ada8:	f88d 3008 	strb.w	r3, [sp, #8]
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2adac:	f7fc fc7a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2adb0:	b104      	cbz	r4, 2adb4 <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x7c>
   2adb2:	6864      	ldr	r4, [r4, #4]
   2adb4:	463a      	mov	r2, r7
   2adb6:	9400      	str	r4, [sp, #0]
   2adb8:	ab08      	add	r3, sp, #32
   2adba:	a90e      	add	r1, sp, #56	; 0x38
   2adbc:	a802      	add	r0, sp, #8
   2adbe:	f7ff ff2a 	bl	2ac16 <_ZN6tflite13reference_ops13ConcatenationIxEEvRKNS_19ConcatenationParamsEPKPKNS_12RuntimeShapeEPKPKT_RS6_PSA_>
                               GetTensorShape(output),
   2adc2:	a808      	add	r0, sp, #32
   2adc4:	f7fc fc29 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Concatenation(op_params, inputs_shape_ptr, inputs_data,
   2adc8:	2409      	movs	r4, #9
  RuntimeShape inputs_shape[kMaxInputNum];
   2adca:	2518      	movs	r5, #24
   2adcc:	ab22      	add	r3, sp, #136	; 0x88
   2adce:	fb05 3004 	mla	r0, r5, r4, r3
   2add2:	f7fc fc22 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   2add6:	3c01      	subs	r4, #1
   2add8:	d2f8      	bcs.n	2adcc <_ZN6tflite3ops5micro13concatenation15EvalUnquantizedIxEEvP13TfLiteContextP10TfLiteNode+0x94>
}
   2adda:	b05f      	add	sp, #380	; 0x17c
   2addc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002adde <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2adde:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   2ade0:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2ade2:	b90b      	cbnz	r3, 2ade8 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0xa>
   2ade4:	f006 f81d 	bl	30e22 <abort>
  void* data = nullptr;
   2ade8:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2adea:	2128      	movs	r1, #40	; 0x28
  void* data = nullptr;
   2adec:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2adee:	aa01      	add	r2, sp, #4
   2adf0:	4798      	blx	r3
   2adf2:	2801      	cmp	r0, #1
    return nullptr;
   2adf4:	bf0c      	ite	eq
   2adf6:	4620      	moveq	r0, r4
  return data;
   2adf8:	9801      	ldrne	r0, [sp, #4]
}
   2adfa:	b002      	add	sp, #8
   2adfc:	bd10      	pop	{r4, pc}

0002adfe <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const uint8* input_data, const RuntimeShape& filter_shape,
                 const uint8* filter_data, const RuntimeShape& bias_shape,
                 const int32* bias_data, const RuntimeShape& output_shape,
                 uint8* output_data, const RuntimeShape& im2col_shape,
                 uint8* im2col_data, void* cpu_backend_context) {
   2adfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ae02:	ed2d 8b02 	vpush	{d8}
   2ae06:	4699      	mov	r9, r3
  (void)cpu_backend_context;  // only used in optimized code.
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int stride_width = params.stride_width;
   2ae08:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
                 uint8* im2col_data, void* cpu_backend_context) {
   2ae0c:	b0a1      	sub	sp, #132	; 0x84
  const int stride_width = params.stride_width;
   2ae0e:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   2ae10:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
                 uint8* im2col_data, void* cpu_backend_context) {
   2ae14:	921f      	str	r2, [sp, #124]	; 0x7c
  const int stride_height = params.stride_height;
   2ae16:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   2ae18:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
                 uint8* im2col_data, void* cpu_backend_context) {
   2ae1c:	4688      	mov	r8, r1
  const int dilation_width_factor = params.dilation_width_factor;
   2ae1e:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   2ae20:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
                 uint8* im2col_data, void* cpu_backend_context) {
   2ae24:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
  const int dilation_height_factor = params.dilation_height_factor;
   2ae26:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   2ae28:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   2ae2c:	9312      	str	r3, [sp, #72]	; 0x48
  const int pad_height = params.padding_values.height;
   2ae2e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   2ae32:	9313      	str	r3, [sp, #76]	; 0x4c
  const int32 input_offset = params.input_offset;
   2ae34:	6943      	ldr	r3, [r0, #20]
   2ae36:	9314      	str	r3, [sp, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
   2ae38:	6983      	ldr	r3, [r0, #24]
   2ae3a:	9315      	str	r3, [sp, #84]	; 0x54
  const int32 output_offset = params.output_offset;
   2ae3c:	69c3      	ldr	r3, [r0, #28]
   2ae3e:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_multiplier = params.output_multiplier;
   2ae40:	6a03      	ldr	r3, [r0, #32]
   2ae42:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   2ae46:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2ae48:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   2ae4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2ae4e:	930a      	str	r3, [sp, #40]	; 0x28
  const int32 output_activation_max = params.quantized_activation_max;
   2ae50:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2ae52:	930b      	str	r3, [sp, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   2ae54:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   2ae58:	4293      	cmp	r3, r2
   2ae5a:	dd01      	ble.n	2ae60 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x62>
   2ae5c:	f005 ffe1 	bl	30e22 <abort>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2ae60:	680b      	ldr	r3, [r1, #0]
   2ae62:	2b04      	cmp	r3, #4
   2ae64:	d1fa      	bne.n	2ae5c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   2ae66:	f8d9 3000 	ldr.w	r3, [r9]
   2ae6a:	2b04      	cmp	r3, #4
   2ae6c:	d1f6      	bne.n	2ae5c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2ae6e:	6833      	ldr	r3, [r6, #0]
   2ae70:	2b04      	cmp	r3, #4
   2ae72:	d1f3      	bne.n	2ae5c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2ae74:	2300      	movs	r3, #0
   2ae76:	4632      	mov	r2, r6
   2ae78:	4619      	mov	r1, r3
   2ae7a:	4640      	mov	r0, r8
   2ae7c:	f7ff fa82 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   2ae80:	2303      	movs	r3, #3
   2ae82:	464a      	mov	r2, r9
   2ae84:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2ae86:	9017      	str	r0, [sp, #92]	; 0x5c
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   2ae88:	4640      	mov	r0, r8
   2ae8a:	f7ff fa7b 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   2ae8e:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   2ae90:	9018      	str	r0, [sp, #96]	; 0x60
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   2ae92:	4632      	mov	r2, r6
   2ae94:	2100      	movs	r1, #0
   2ae96:	4648      	mov	r0, r9
   2ae98:	f7ff fa74 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   2ae9c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   2ae9e:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
   2aea0:	b12b      	cbz	r3, 2aeae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0xb0>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   2aea2:	982d      	ldr	r0, [sp, #180]	; 0xb4
   2aea4:	f7fc fc49 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2aea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2aeaa:	4298      	cmp	r0, r3
   2aeac:	d1d6      	bne.n	2ae5c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x5e>
  }
  const int input_height = input_shape.Dims(1);
   2aeae:	2101      	movs	r1, #1
   2aeb0:	4640      	mov	r0, r8
   2aeb2:	f7fc fbbd 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2aeb6:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2aeb8:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
   2aeba:	4640      	mov	r0, r8
   2aebc:	f7fc fbb8 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   2aec0:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   2aec2:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_height = filter_shape.Dims(1);
   2aec4:	4648      	mov	r0, r9
   2aec6:	f7fc fbb3 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   2aeca:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   2aecc:	901b      	str	r0, [sp, #108]	; 0x6c
  const int filter_width = filter_shape.Dims(2);
   2aece:	4648      	mov	r0, r9
   2aed0:	f7fc fbae 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2aed4:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   2aed6:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_height = output_shape.Dims(1);
   2aed8:	4630      	mov	r0, r6
   2aeda:	f7fc fba9 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2aede:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2aee0:	901d      	str	r0, [sp, #116]	; 0x74
  const int output_width = output_shape.Dims(2);
   2aee2:	4630      	mov	r0, r6
   2aee4:	f7fc fba4 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   2aee8:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
   2aeec:	901e      	str	r0, [sp, #120]	; 0x78
  for (int batch = 0; batch < batches; ++batch) {
   2aeee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2aef0:	459b      	cmp	fp, r3
   2aef2:	f280 8096 	bge.w	2b022 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x224>
   2aef6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2aef8:	425b      	negs	r3, r3
   2aefa:	9308      	str	r3, [sp, #32]
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2aefc:	2300      	movs	r3, #0
   2aefe:	9304      	str	r3, [sp, #16]
   2af00:	9b04      	ldr	r3, [sp, #16]
   2af02:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2af04:	4293      	cmp	r3, r2
   2af06:	f280 8089 	bge.w	2b01c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x21e>
   2af0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2af0c:	425b      	negs	r3, r3
   2af0e:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2af10:	2300      	movs	r3, #0
   2af12:	9305      	str	r3, [sp, #20]
   2af14:	9b05      	ldr	r3, [sp, #20]
   2af16:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   2af18:	4293      	cmp	r3, r2
   2af1a:	da77      	bge.n	2b00c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x20e>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2af1c:	2400      	movs	r4, #0
   2af1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2af20:	429c      	cmp	r4, r3
   2af22:	da6b      	bge.n	2affc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1fe>
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
   2af24:	2500      	movs	r5, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2af26:	f8dd a020 	ldr.w	sl, [sp, #32]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2af2a:	9506      	str	r5, [sp, #24]
   2af2c:	9b06      	ldr	r3, [sp, #24]
   2af2e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2af30:	4293      	cmp	r3, r2
   2af32:	da42      	bge.n	2afba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1bc>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2af34:	2300      	movs	r3, #0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
   2af36:	9f09      	ldr	r7, [sp, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2af38:	9307      	str	r3, [sp, #28]
   2af3a:	9b07      	ldr	r3, [sp, #28]
   2af3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   2af3e:	4293      	cmp	r3, r2
   2af40:	da35      	bge.n	2afae <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1b0>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   2af42:	2300      	movs	r3, #0
   2af44:	9303      	str	r3, [sp, #12]
   2af46:	9b03      	ldr	r3, [sp, #12]
   2af48:	9a18      	ldr	r2, [sp, #96]	; 0x60
   2af4a:	4293      	cmp	r3, r2
   2af4c:	da29      	bge.n	2afa2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1a4>
                    in_y_origin + dilation_height_factor * filter_y;
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   2af4e:	2f00      	cmp	r7, #0
   2af50:	db24      	blt.n	2af9c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
   2af52:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2af54:	42bb      	cmp	r3, r7
   2af56:	dd21      	ble.n	2af9c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
   2af58:	f1ba 0f00 	cmp.w	sl, #0
   2af5c:	db1e      	blt.n	2af9c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
   2af5e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2af60:	4553      	cmp	r3, sl
   2af62:	dd1b      	ble.n	2af9c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x19e>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   2af64:	9b03      	ldr	r3, [sp, #12]
   2af66:	4652      	mov	r2, sl
   2af68:	4659      	mov	r1, fp
   2af6a:	9300      	str	r3, [sp, #0]
   2af6c:	4640      	mov	r0, r8
   2af6e:	463b      	mov	r3, r7
   2af70:	f7fc fc20 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   2af74:	9b03      	ldr	r3, [sp, #12]
   2af76:	4621      	mov	r1, r4
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   2af78:	9011      	str	r0, [sp, #68]	; 0x44
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   2af7a:	9300      	str	r3, [sp, #0]
   2af7c:	4648      	mov	r0, r9
   2af7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2af82:	f7fc fc17 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                         filter_x, in_channel)];
   2af86:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
   2af88:	9a15      	ldr	r2, [sp, #84]	; 0x54
                                         filter_x, in_channel)];
   2af8a:	5c1b      	ldrb	r3, [r3, r0]
                                                      in_x, in_channel)];
   2af8c:	9911      	ldr	r1, [sp, #68]	; 0x44
                      (filter_val + filter_offset) * (input_val + input_offset);
   2af8e:	4413      	add	r3, r2
                                                      in_x, in_channel)];
   2af90:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2af92:	5c52      	ldrb	r2, [r2, r1]
                      (filter_val + filter_offset) * (input_val + input_offset);
   2af94:	9914      	ldr	r1, [sp, #80]	; 0x50
   2af96:	440a      	add	r2, r1
                  acc +=
   2af98:	fb02 5503 	mla	r5, r2, r3, r5
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   2af9c:	9b03      	ldr	r3, [sp, #12]
   2af9e:	3301      	adds	r3, #1
   2afa0:	e7d0      	b.n	2af44 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x146>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2afa2:	9b07      	ldr	r3, [sp, #28]
   2afa4:	3301      	adds	r3, #1
   2afa6:	9307      	str	r3, [sp, #28]
   2afa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2afaa:	441f      	add	r7, r3
   2afac:	e7c5      	b.n	2af3a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x13c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2afae:	9b06      	ldr	r3, [sp, #24]
   2afb0:	3301      	adds	r3, #1
   2afb2:	9306      	str	r3, [sp, #24]
   2afb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2afb6:	449a      	add	sl, r3
   2afb8:	e7b8      	b.n	2af2c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x12e>
                }
              }
            }
          }
          if (bias_data) {
   2afba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   2afbc:	b113      	cbz	r3, 2afc4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x1c6>
            acc += bias_data[out_channel];
   2afbe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2afc2:	441d      	add	r5, r3
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
   2afc4:	ee18 2a90 	vmov	r2, s17
   2afc8:	ee18 1a10 	vmov	r1, s16
   2afcc:	4628      	mov	r0, r5
   2afce:	f7ee f9d3 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                                              output_shift);
          acc += output_offset;
   2afd2:	9b16      	ldr	r3, [sp, #88]	; 0x58
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   2afd4:	9400      	str	r4, [sp, #0]
          acc += output_offset;
   2afd6:	18c5      	adds	r5, r0, r3
   2afd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   2afda:	4659      	mov	r1, fp
   2afdc:	429d      	cmp	r5, r3
   2afde:	bfb8      	it	lt
   2afe0:	461d      	movlt	r5, r3
   2afe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2afe4:	4630      	mov	r0, r6
   2afe6:	429d      	cmp	r5, r3
   2afe8:	bfa8      	it	ge
   2afea:	461d      	movge	r5, r3
   2afec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2aff0:	f7fc fbe0 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2aff4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2aff6:	3401      	adds	r4, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   2aff8:	541d      	strb	r5, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2affa:	e790      	b.n	2af1e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x120>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2affc:	9b05      	ldr	r3, [sp, #20]
   2affe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2b000:	3301      	adds	r3, #1
   2b002:	9305      	str	r3, [sp, #20]
   2b004:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b006:	4413      	add	r3, r2
   2b008:	9309      	str	r3, [sp, #36]	; 0x24
   2b00a:	e783      	b.n	2af14 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x116>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2b00c:	9b04      	ldr	r3, [sp, #16]
   2b00e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b010:	3301      	adds	r3, #1
   2b012:	9304      	str	r3, [sp, #16]
   2b014:	9b08      	ldr	r3, [sp, #32]
   2b016:	4413      	add	r3, r2
   2b018:	9308      	str	r3, [sp, #32]
   2b01a:	e771      	b.n	2af00 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0x102>
  for (int batch = 0; batch < batches; ++batch) {
   2b01c:	f10b 0b01 	add.w	fp, fp, #1
   2b020:	e765      	b.n	2aeee <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv+0xf0>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
   2b022:	b021      	add	sp, #132	; 0x84
   2b024:	ecbd 8b02 	vpop	{d8}
   2b028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b02c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
   2b02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b030:	4698      	mov	r8, r3
  // Get parameters.
  const int32 input_offset = params.input_offset;  // r = s(q - Z)
   2b032:	6943      	ldr	r3, [r0, #20]
    int8* output_data) {
   2b034:	b0a1      	sub	sp, #132	; 0x84
  const int32 input_offset = params.input_offset;  // r = s(q - Z)
   2b036:	9312      	str	r3, [sp, #72]	; 0x48
  const int stride_width = params.stride_width;
   2b038:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int8* output_data) {
   2b03c:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  const int stride_width = params.stride_width;
   2b040:	930d      	str	r3, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   2b042:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    int8* output_data) {
   2b046:	9e2b      	ldr	r6, [sp, #172]	; 0xac
  const int stride_height = params.stride_height;
   2b048:	930e      	str	r3, [sp, #56]	; 0x38
  const int dilation_width_factor = params.dilation_width_factor;
   2b04a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int8* output_data) {
   2b04e:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  const int dilation_width_factor = params.dilation_width_factor;
   2b050:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_height_factor = params.dilation_height_factor;
   2b052:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
   2b056:	9310      	str	r3, [sp, #64]	; 0x40
  const int pad_width = params.padding_values.width;
   2b058:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   2b05c:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
   2b05e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   2b062:	9314      	str	r3, [sp, #80]	; 0x50
  const int32 output_offset = params.output_offset;
   2b064:	69c3      	ldr	r3, [r0, #28]
   2b066:	9315      	str	r3, [sp, #84]	; 0x54

  // Set min and max value of the output.
  const int32 output_activation_min = params.quantized_activation_min;
   2b068:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2b06a:	930a      	str	r3, [sp, #40]	; 0x28
  const int32 output_activation_max = params.quantized_activation_max;
   2b06c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b06e:	930b      	str	r3, [sp, #44]	; 0x2c

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   2b070:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
   2b074:	4293      	cmp	r3, r2
   2b076:	dd01      	ble.n	2b07c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x50>
   2b078:	f005 fed3 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2b07c:	f8d8 3000 	ldr.w	r3, [r8]
   2b080:	2b04      	cmp	r3, #4
   2b082:	d1f9      	bne.n	2b078 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   2b084:	6833      	ldr	r3, [r6, #0]
   2b086:	2b04      	cmp	r3, #4
   2b088:	d1f6      	bne.n	2b078 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2b08a:	683b      	ldr	r3, [r7, #0]
   2b08c:	2b04      	cmp	r3, #4
   2b08e:	d1f3      	bne.n	2b078 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2b090:	2300      	movs	r3, #0
   2b092:	463a      	mov	r2, r7
   2b094:	4619      	mov	r1, r3
   2b096:	4640      	mov	r0, r8
   2b098:	f7ff f974 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   2b09c:	2303      	movs	r3, #3
   2b09e:	4632      	mov	r2, r6
   2b0a0:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2b0a2:	9016      	str	r0, [sp, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   2b0a4:	4640      	mov	r0, r8
   2b0a6:	f7ff f96d 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   2b0aa:	2303      	movs	r3, #3
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
   2b0ac:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   2b0ae:	463a      	mov	r2, r7
   2b0b0:	2100      	movs	r1, #0
   2b0b2:	4630      	mov	r0, r6
   2b0b4:	f7ff f966 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  if (bias_data) {
   2b0b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
   2b0ba:	900c      	str	r0, [sp, #48]	; 0x30
  if (bias_data) {
   2b0bc:	b12b      	cbz	r3, 2b0ca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x9e>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   2b0be:	982d      	ldr	r0, [sp, #180]	; 0xb4
   2b0c0:	f7fc fb3b 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2b0c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b0c6:	4298      	cmp	r0, r3
   2b0c8:	d1d6      	bne.n	2b078 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x4c>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
   2b0ca:	2101      	movs	r1, #1
   2b0cc:	4640      	mov	r0, r8
   2b0ce:	f7fc faaf 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2b0d2:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2b0d4:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
   2b0d6:	4640      	mov	r0, r8
   2b0d8:	f7fc faaa 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   2b0dc:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   2b0de:	9019      	str	r0, [sp, #100]	; 0x64
  const int filter_height = filter_shape.Dims(1);
   2b0e0:	4630      	mov	r0, r6
   2b0e2:	f7fc faa5 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   2b0e6:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   2b0e8:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
   2b0ea:	4630      	mov	r0, r6
   2b0ec:	f7fc faa0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2b0f0:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   2b0f2:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
   2b0f4:	4638      	mov	r0, r7
   2b0f6:	f7fc fa9b 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2b0fa:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2b0fc:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
   2b0fe:	4638      	mov	r0, r7
   2b100:	f7fc fa96 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int batch = 0; batch < batches; ++batch) {
   2b104:	f04f 0b00 	mov.w	fp, #0
  const int output_width = output_shape.Dims(2);
   2b108:	901d      	str	r0, [sp, #116]	; 0x74
  for (int batch = 0; batch < batches; ++batch) {
   2b10a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2b10c:	459b      	cmp	fp, r3
   2b10e:	f280 8098 	bge.w	2b242 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x216>
   2b112:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2b114:	425b      	negs	r3, r3
   2b116:	9308      	str	r3, [sp, #32]
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2b118:	2300      	movs	r3, #0
   2b11a:	9304      	str	r3, [sp, #16]
   2b11c:	9b04      	ldr	r3, [sp, #16]
   2b11e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   2b120:	4293      	cmp	r3, r2
   2b122:	f280 808b 	bge.w	2b23c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x210>
   2b126:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b128:	425b      	negs	r3, r3
   2b12a:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2b12c:	2300      	movs	r3, #0
   2b12e:	9305      	str	r3, [sp, #20]
   2b130:	9b05      	ldr	r3, [sp, #20]
   2b132:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2b134:	4293      	cmp	r3, r2
   2b136:	da79      	bge.n	2b22c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2b138:	2400      	movs	r4, #0
   2b13a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b13c:	429c      	cmp	r4, r3
   2b13e:	da6d      	bge.n	2b21c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f0>
          const int in_x_origin = (out_x * stride_width) - pad_width;
          const int in_y_origin = (out_y * stride_height) - pad_height;
          int32 acc = 0;
   2b140:	2500      	movs	r5, #0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2b142:	f8dd 9020 	ldr.w	r9, [sp, #32]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2b146:	9506      	str	r5, [sp, #24]
   2b148:	9b06      	ldr	r3, [sp, #24]
   2b14a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2b14c:	4293      	cmp	r3, r2
   2b14e:	da42      	bge.n	2b1d6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1aa>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b150:	2300      	movs	r3, #0
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
   2b152:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b156:	9307      	str	r3, [sp, #28]
   2b158:	9b07      	ldr	r3, [sp, #28]
   2b15a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2b15c:	4293      	cmp	r3, r2
   2b15e:	da34      	bge.n	2b1ca <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19e>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   2b160:	2300      	movs	r3, #0
   2b162:	9303      	str	r3, [sp, #12]
   2b164:	9b03      	ldr	r3, [sp, #12]
   2b166:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   2b168:	4293      	cmp	r3, r2
   2b16a:	da28      	bge.n	2b1be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x192>
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   2b16c:	f1ba 0f00 	cmp.w	sl, #0
   2b170:	db22      	blt.n	2b1b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
   2b172:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2b174:	4553      	cmp	r3, sl
   2b176:	dd1f      	ble.n	2b1b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
   2b178:	f1b9 0f00 	cmp.w	r9, #0
   2b17c:	db1c      	blt.n	2b1b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
   2b17e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2b180:	454b      	cmp	r3, r9
   2b182:	dd19      	ble.n	2b1b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x18c>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   2b184:	9b03      	ldr	r3, [sp, #12]
   2b186:	464a      	mov	r2, r9
   2b188:	4659      	mov	r1, fp
   2b18a:	9300      	str	r3, [sp, #0]
   2b18c:	4640      	mov	r0, r8
   2b18e:	4653      	mov	r3, sl
   2b190:	f7fc fb10 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   2b194:	9b03      	ldr	r3, [sp, #12]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   2b196:	9011      	str	r0, [sp, #68]	; 0x44
                      filter_data[Offset(filter_shape, out_channel, filter_y,
   2b198:	9300      	str	r3, [sp, #0]
   2b19a:	4621      	mov	r1, r4
   2b19c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2b1a0:	4630      	mov	r0, r6
   2b1a2:	f7fc fb07 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   2b1a6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2b1a8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   2b1aa:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
   2b1ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2b1ae:	4413      	add	r3, r2
                                         filter_x, in_channel)];
   2b1b0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   2b1b2:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
   2b1b4:	fb02 5503 	mla	r5, r2, r3, r5
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   2b1b8:	9b03      	ldr	r3, [sp, #12]
   2b1ba:	3301      	adds	r3, #1
   2b1bc:	e7d1      	b.n	2b162 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x136>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b1be:	9b07      	ldr	r3, [sp, #28]
   2b1c0:	3301      	adds	r3, #1
   2b1c2:	9307      	str	r3, [sp, #28]
   2b1c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2b1c6:	449a      	add	sl, r3
   2b1c8:	e7c6      	b.n	2b158 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12c>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2b1ca:	9b06      	ldr	r3, [sp, #24]
   2b1cc:	3301      	adds	r3, #1
   2b1ce:	9306      	str	r3, [sp, #24]
   2b1d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b1d2:	4499      	add	r9, r3
   2b1d4:	e7b8      	b.n	2b148 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11c>
                }
              }
            }
          }

          if (bias_data) {
   2b1d6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   2b1d8:	b113      	cbz	r3, 2b1e0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b4>
            acc += bias_data[out_channel];
   2b1da:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2b1de:	441d      	add	r5, r3
          }
          acc = MultiplyByQuantizedMultiplier(
   2b1e0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2b1e2:	4628      	mov	r0, r5
   2b1e4:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   2b1e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2b1ea:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   2b1ee:	f7ee f8c3 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
   2b1f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   2b1f4:	9400      	str	r4, [sp, #0]
          acc += output_offset;
   2b1f6:	18c5      	adds	r5, r0, r3
   2b1f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   2b1fa:	4659      	mov	r1, fp
   2b1fc:	429d      	cmp	r5, r3
   2b1fe:	bfb8      	it	lt
   2b200:	461d      	movlt	r5, r3
   2b202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b204:	4638      	mov	r0, r7
   2b206:	429d      	cmp	r5, r3
   2b208:	bfa8      	it	ge
   2b20a:	461d      	movge	r5, r3
   2b20c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2b210:	f7fc fad0 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2b214:	9b30      	ldr	r3, [sp, #192]	; 0xc0
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2b216:	3401      	adds	r4, #1
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
   2b218:	541d      	strb	r5, [r3, r0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
   2b21a:	e78e      	b.n	2b13a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2b21c:	9b05      	ldr	r3, [sp, #20]
   2b21e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2b220:	3301      	adds	r3, #1
   2b222:	9305      	str	r3, [sp, #20]
   2b224:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b226:	4413      	add	r3, r2
   2b228:	9309      	str	r3, [sp, #36]	; 0x24
   2b22a:	e781      	b.n	2b130 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x104>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2b22c:	9b04      	ldr	r3, [sp, #16]
   2b22e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b230:	3301      	adds	r3, #1
   2b232:	9304      	str	r3, [sp, #16]
   2b234:	9b08      	ldr	r3, [sp, #32]
   2b236:	4413      	add	r3, r2
   2b238:	9308      	str	r3, [sp, #32]
   2b23a:	e76f      	b.n	2b11c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf0>
  for (int batch = 0; batch < batches; ++batch) {
   2b23c:	f10b 0b01 	add.w	fp, fp, #1
   2b240:	e763      	b.n	2b10a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xde>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
   2b242:	b021      	add	sp, #132	; 0x84
   2b244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b248 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:
  switch (padding) {
   2b248:	2801      	cmp	r0, #1
   2b24a:	d003      	beq.n	2b254 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0xc>
   2b24c:	2802      	cmp	r0, #2
   2b24e:	d006      	beq.n	2b25e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x16>
   2b250:	2000      	movs	r0, #0
   2b252:	4770      	bx	lr
      return (image_size + stride - 1) / stride;
   2b254:	1e58      	subs	r0, r3, #1
   2b256:	4408      	add	r0, r1
      return (image_size + stride - effective_filter_size) / stride;
   2b258:	fb90 f0f3 	sdiv	r0, r0, r3
}
   2b25c:	4770      	bx	lr
      return (image_size + stride - effective_filter_size) / stride;
   2b25e:	1e58      	subs	r0, r3, #1
   2b260:	4408      	add	r0, r1
   2b262:	9900      	ldr	r1, [sp, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
   2b264:	3a01      	subs	r2, #1
      return (image_size + stride - effective_filter_size) / stride;
   2b266:	fb01 0012 	mls	r0, r1, r2, r0
   2b26a:	e7f5      	b.n	2b258 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x10>

0002b26c <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   2b26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b270:	b0b5      	sub	sp, #212	; 0xd4
   2b272:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
  const int32_t input_offset = -input->params.zero_point;
   2b276:	f8d8 1010 	ldr.w	r1, [r8, #16]
  op_params.padding_type = RuntimePaddingType(params->padding);
   2b27a:	7810      	ldrb	r0, [r2, #0]
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   2b27c:	9e43      	ldr	r6, [sp, #268]	; 0x10c
  const int32_t input_offset = -input->params.zero_point;
   2b27e:	f1c1 0c00 	rsb	ip, r1, #0
  const int32_t filter_offset = -filter->params.zero_point;
   2b282:	6939      	ldr	r1, [r7, #16]
  switch (padding) {
   2b284:	2801      	cmp	r0, #1
  const int32_t output_offset = output->params.zero_point;
   2b286:	f8d6 e010 	ldr.w	lr, [r6, #16]
  const int32_t filter_offset = -filter->params.zero_point;
   2b28a:	f1c1 0100 	rsb	r1, r1, #0
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
   2b28e:	e9dd 4540 	ldrd	r4, r5, [sp, #256]	; 0x100
  switch (padding) {
   2b292:	d002      	beq.n	2b29a <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x2e>
      return PaddingType::kNone;
   2b294:	2802      	cmp	r0, #2
   2b296:	bf18      	it	ne
   2b298:	2000      	movne	r0, #0
  op_params.padding_type = RuntimePaddingType(params->padding);
   2b29a:	f88d 0098 	strb.w	r0, [sp, #152]	; 0x98
  op_params.padding_values.width = data.padding.width;
   2b29e:	6818      	ldr	r0, [r3, #0]
  op_params.weights_offset = filter_offset;
   2b2a0:	e9cd c12b 	strd	ip, r1, [sp, #172]	; 0xac
  op_params.padding_values.width = data.padding.width;
   2b2a4:	f8ad 009a 	strh.w	r0, [sp, #154]	; 0x9a
  op_params.padding_values.height = data.padding.height;
   2b2a8:	6858      	ldr	r0, [r3, #4]
  reference_ops::Conv(op_params, GetTensorShape(input),
   2b2aa:	4641      	mov	r1, r8
  op_params.padding_values.height = data.padding.height;
   2b2ac:	f8ad 009c 	strh.w	r0, [sp, #156]	; 0x9c
  op_params.stride_width = params->stride_width;
   2b2b0:	6850      	ldr	r0, [r2, #4]
  op_params.output_offset = output_offset;
   2b2b2:	f8cd e0b4 	str.w	lr, [sp, #180]	; 0xb4
  op_params.stride_width = params->stride_width;
   2b2b6:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
  op_params.stride_height = params->stride_height;
   2b2ba:	6890      	ldr	r0, [r2, #8]
   2b2bc:	f8ad 00a4 	strh.w	r0, [sp, #164]	; 0xa4
  op_params.dilation_width_factor = params->dilation_width_factor;
   2b2c0:	6910      	ldr	r0, [r2, #16]
  op_params.dilation_height_factor = params->dilation_height_factor;
   2b2c2:	6952      	ldr	r2, [r2, #20]
  op_params.dilation_width_factor = params->dilation_width_factor;
   2b2c4:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
  op_params.dilation_height_factor = params->dilation_height_factor;
   2b2c8:	f8ad 20a8 	strh.w	r2, [sp, #168]	; 0xa8
  op_params.output_multiplier = data.output_multiplier;
   2b2cc:	691a      	ldr	r2, [r3, #16]
  reference_ops::Conv(op_params, GetTensorShape(input),
   2b2ce:	a808      	add	r0, sp, #32
  op_params.output_multiplier = data.output_multiplier;
   2b2d0:	922e      	str	r2, [sp, #184]	; 0xb8
  op_params.output_shift = -data.output_shift;
   2b2d2:	695a      	ldr	r2, [r3, #20]
   2b2d4:	4252      	negs	r2, r2
   2b2d6:	922f      	str	r2, [sp, #188]	; 0xbc
  op_params.quantized_activation_min = data.output_activation_min;
   2b2d8:	6a1a      	ldr	r2, [r3, #32]
  op_params.quantized_activation_max = data.output_activation_max;
   2b2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
   2b2dc:	9230      	str	r2, [sp, #192]	; 0xc0
  op_params.quantized_activation_max = data.output_activation_max;
   2b2de:	9331      	str	r3, [sp, #196]	; 0xc4
  reference_ops::Conv(op_params, GetTensorShape(input),
   2b2e0:	f7fc f9e0 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
   2b2e4:	4639      	mov	r1, r7
   2b2e6:	a80e      	add	r0, sp, #56	; 0x38
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2b2e8:	f8d8 9004 	ldr.w	r9, [r8, #4]
   2b2ec:	f7fc f9da 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2b2f0:	f8d7 a004 	ldr.w	sl, [r7, #4]
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   2b2f4:	af14      	add	r7, sp, #80	; 0x50
   2b2f6:	4621      	mov	r1, r4
   2b2f8:	4638      	mov	r0, r7
   2b2fa:	f7fc f9d3 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2b2fe:	b104      	cbz	r4, 2b302 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0x96>
   2b300:	6864      	ldr	r4, [r4, #4]
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
   2b302:	f10d 0868 	add.w	r8, sp, #104	; 0x68
   2b306:	4631      	mov	r1, r6
   2b308:	4640      	mov	r0, r8
   2b30a:	f7fc f9cb 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2b30e:	f8d6 b004 	ldr.w	fp, [r6, #4]
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
   2b312:	ae20      	add	r6, sp, #128	; 0x80
   2b314:	4629      	mov	r1, r5
   2b316:	4630      	mov	r0, r6
   2b318:	f7fc f9c4 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2b31c:	b105      	cbz	r5, 2b320 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_+0xb4>
   2b31e:	686d      	ldr	r5, [r5, #4]
  reference_ops::Conv(op_params, GetTensorShape(input),
   2b320:	2300      	movs	r3, #0
   2b322:	464a      	mov	r2, r9
   2b324:	a908      	add	r1, sp, #32
   2b326:	e9cd 5306 	strd	r5, r3, [sp, #24]
   2b32a:	a826      	add	r0, sp, #152	; 0x98
   2b32c:	ab0e      	add	r3, sp, #56	; 0x38
   2b32e:	e9cd b604 	strd	fp, r6, [sp, #16]
   2b332:	e9cd 4802 	strd	r4, r8, [sp, #8]
   2b336:	e9cd a700 	strd	sl, r7, [sp]
   2b33a:	f7ff fd60 	bl	2adfe <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_PhS6_SB_Pv>
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
   2b33e:	4630      	mov	r0, r6
   2b340:	f7fc f96b 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
   2b344:	4640      	mov	r0, r8
   2b346:	f7fc f968 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
   2b34a:	4638      	mov	r0, r7
   2b34c:	f7fc f965 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
   2b350:	a80e      	add	r0, sp, #56	; 0x38
   2b352:	f7fc f962 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
   2b356:	a808      	add	r0, sp, #32
   2b358:	f7fc f95f 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2b35c:	b035      	add	sp, #212	; 0xd4
   2b35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b362 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>:
                             TfLiteTensor* im2col) {
   2b362:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      data.per_channel_output_shift, GetTensorShape(input),
   2b366:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
                             TfLiteTensor* im2col) {
   2b36a:	b0b1      	sub	sp, #196	; 0xc4
   2b36c:	e9dd 643a 	ldrd	r6, r4, [sp, #232]	; 0xe8
  op_params.input_offset = -input->params.zero_point;
   2b370:	6931      	ldr	r1, [r6, #16]
                             TfLiteTensor* im2col) {
   2b372:	e9dd 593c 	ldrd	r5, r9, [sp, #240]	; 0xf0
  op_params.input_offset = -input->params.zero_point;
   2b376:	4249      	negs	r1, r1
   2b378:	9127      	str	r1, [sp, #156]	; 0x9c
  op_params.output_offset = output->params.zero_point;
   2b37a:	f8d9 1010 	ldr.w	r1, [r9, #16]
      data.per_channel_output_shift, GetTensorShape(input),
   2b37e:	a80a      	add	r0, sp, #40	; 0x28
  op_params.output_offset = output->params.zero_point;
   2b380:	9129      	str	r1, [sp, #164]	; 0xa4
  op_params.stride_height = params->stride_height;
   2b382:	6891      	ldr	r1, [r2, #8]
   2b384:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
  op_params.stride_width = params->stride_width;
   2b388:	6851      	ldr	r1, [r2, #4]
   2b38a:	f8ad 1092 	strh.w	r1, [sp, #146]	; 0x92
  op_params.dilation_height_factor = params->dilation_height_factor;
   2b38e:	6951      	ldr	r1, [r2, #20]
  op_params.dilation_width_factor = params->dilation_width_factor;
   2b390:	6912      	ldr	r2, [r2, #16]
  op_params.dilation_height_factor = params->dilation_height_factor;
   2b392:	f8ad 1098 	strh.w	r1, [sp, #152]	; 0x98
  op_params.dilation_width_factor = params->dilation_width_factor;
   2b396:	f8ad 2096 	strh.w	r2, [sp, #150]	; 0x96
  op_params.padding_values.height = data.padding.height;
   2b39a:	685a      	ldr	r2, [r3, #4]
      data.per_channel_output_shift, GetTensorShape(input),
   2b39c:	4631      	mov	r1, r6
  op_params.padding_values.height = data.padding.height;
   2b39e:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
  op_params.padding_values.width = data.padding.width;
   2b3a2:	681a      	ldr	r2, [r3, #0]
   2b3a4:	f8ad 208a 	strh.w	r2, [sp, #138]	; 0x8a
  op_params.quantized_activation_min = data.output_activation_min;
   2b3a8:	6a1a      	ldr	r2, [r3, #32]
   2b3aa:	922c      	str	r2, [sp, #176]	; 0xb0
  op_params.quantized_activation_max = data.output_activation_max;
   2b3ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2b3ae:	922d      	str	r2, [sp, #180]	; 0xb4
      data.per_channel_output_shift, GetTensorShape(input),
   2b3b0:	f7fc f978 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2b3b4:	6873      	ldr	r3, [r6, #4]
      GetTensorData<int8>(input), GetTensorShape(filter),
   2b3b6:	ae10      	add	r6, sp, #64	; 0x40
   2b3b8:	4621      	mov	r1, r4
   2b3ba:	4630      	mov	r0, r6
   2b3bc:	9309      	str	r3, [sp, #36]	; 0x24
   2b3be:	f7fc f971 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2b3c2:	b104      	cbz	r4, 2b3c6 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x64>
   2b3c4:	6864      	ldr	r4, [r4, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
   2b3c6:	af16      	add	r7, sp, #88	; 0x58
   2b3c8:	4629      	mov	r1, r5
   2b3ca:	4638      	mov	r0, r7
   2b3cc:	f7fc f96a 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2b3d0:	b105      	cbz	r5, 2b3d4 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_+0x72>
   2b3d2:	686d      	ldr	r5, [r5, #4]
      GetTensorData<int32>(bias), GetTensorShape(output),
   2b3d4:	f10d 0870 	add.w	r8, sp, #112	; 0x70
   2b3d8:	4649      	mov	r1, r9
   2b3da:	4640      	mov	r0, r8
   2b3dc:	f7fc f962 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
   2b3e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2b3e4:	465a      	mov	r2, fp
   2b3e6:	e9cd 8305 	strd	r8, r3, [sp, #20]
   2b3ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b3ec:	4651      	mov	r1, sl
   2b3ee:	9300      	str	r3, [sp, #0]
   2b3f0:	a822      	add	r0, sp, #136	; 0x88
   2b3f2:	ab0a      	add	r3, sp, #40	; 0x28
   2b3f4:	e9cd 7503 	strd	r7, r5, [sp, #12]
   2b3f8:	e9cd 6401 	strd	r6, r4, [sp, #4]
   2b3fc:	f7ff fe16 	bl	2b02c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
   2b400:	4640      	mov	r0, r8
   2b402:	f7fc f90a 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
   2b406:	4638      	mov	r0, r7
   2b408:	f7fc f907 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
   2b40c:	4630      	mov	r0, r6
   2b40e:	f7fc f904 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      data.per_channel_output_shift, GetTensorShape(input),
   2b412:	a80a      	add	r0, sp, #40	; 0x28
   2b414:	f7fc f901 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2b418:	b031      	add	sp, #196	; 0xc4
   2b41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b41e <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2b41e:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   2b420:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2b422:	b90b      	cbnz	r3, 2b428 <_ZN6tflite3ops5micro14depthwise_conv4InitEP13TfLiteContextPKcj+0xa>
   2b424:	f005 fcfd 	bl	30e22 <abort>
  void* data = nullptr;
   2b428:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2b42a:	2128      	movs	r1, #40	; 0x28
  void* data = nullptr;
   2b42c:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2b42e:	aa01      	add	r2, sp, #4
   2b430:	4798      	blx	r3
   2b432:	2801      	cmp	r0, #1
    return nullptr;
   2b434:	bf0c      	ite	eq
   2b436:	4620      	moveq	r0, r4
  return data;
   2b438:	9801      	ldrne	r0, [sp, #4]
}
   2b43a:	b002      	add	sp, #8
   2b43c:	bd10      	pop	{r4, pc}

0002b43e <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const DepthwiseParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
   2b43e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b442:	4699      	mov	r9, r3
  // Get parameters.
  // TODO(b/141565753): Re-introduce ScopedProfilingLabel on Micro.
  const int stride_width = params.stride_width;
   2b444:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
    int8* output_data) {
   2b448:	b0a1      	sub	sp, #132	; 0x84
  const int stride_width = params.stride_width;
   2b44a:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
   2b44c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    int8* output_data) {
   2b450:	e9cd 121e 	strd	r1, r2, [sp, #120]	; 0x78
  const int stride_height = params.stride_height;
   2b454:	930f      	str	r3, [sp, #60]	; 0x3c
  const int dilation_width_factor = params.dilation_width_factor;
   2b456:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    int8* output_data) {
   2b45a:	9e2b      	ldr	r6, [sp, #172]	; 0xac
  const int dilation_width_factor = params.dilation_width_factor;
   2b45c:	9310      	str	r3, [sp, #64]	; 0x40
  const int dilation_height_factor = params.dilation_height_factor;
   2b45e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
    int8* output_data) {
   2b462:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
  const int dilation_height_factor = params.dilation_height_factor;
   2b464:	9311      	str	r3, [sp, #68]	; 0x44
  const int pad_width = params.padding_values.width;
   2b466:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   2b46a:	9313      	str	r3, [sp, #76]	; 0x4c
  const int pad_height = params.padding_values.height;
   2b46c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   2b470:	9314      	str	r3, [sp, #80]	; 0x50
  const int depth_multiplier = params.depth_multiplier;
   2b472:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   2b476:	9308      	str	r3, [sp, #32]
  const int32 input_offset = params.input_offset;
   2b478:	6943      	ldr	r3, [r0, #20]
   2b47a:	9315      	str	r3, [sp, #84]	; 0x54
  const int32 output_offset = params.output_offset;
   2b47c:	69c3      	ldr	r3, [r0, #28]
   2b47e:	9316      	str	r3, [sp, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
   2b480:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2b482:	930b      	str	r3, [sp, #44]	; 0x2c
  const int32 output_activation_max = params.quantized_activation_max;
   2b484:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b486:	930c      	str	r3, [sp, #48]	; 0x30

  // Check dimensions of the tensors.
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2b488:	f8d9 3000 	ldr.w	r3, [r9]
   2b48c:	2b04      	cmp	r3, #4
   2b48e:	d001      	beq.n	2b494 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x56>
   2b490:	f005 fcc7 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   2b494:	6833      	ldr	r3, [r6, #0]
   2b496:	2b04      	cmp	r3, #4
   2b498:	d1fa      	bne.n	2b490 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2b49a:	683b      	ldr	r3, [r7, #0]
   2b49c:	2b04      	cmp	r3, #4
   2b49e:	d1f7      	bne.n	2b490 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   2b4a0:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
   2b4a4:	4293      	cmp	r3, r2
   2b4a6:	dcf3      	bgt.n	2b490 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2b4a8:	2300      	movs	r3, #0
   2b4aa:	463a      	mov	r2, r7
   2b4ac:	4619      	mov	r1, r3
   2b4ae:	4648      	mov	r0, r9
   2b4b0:	f7fe ff68 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   2b4b4:	2303      	movs	r3, #3
   2b4b6:	463a      	mov	r2, r7
   2b4b8:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2b4ba:	9017      	str	r0, [sp, #92]	; 0x5c
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   2b4bc:	4630      	mov	r0, r6
   2b4be:	f7fe ff61 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   2b4c2:	2101      	movs	r1, #1
  const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   2b4c4:	4604      	mov	r4, r0
  const int input_height = input_shape.Dims(1);
   2b4c6:	4648      	mov	r0, r9
   2b4c8:	f7fc f8b2 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2b4cc:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2b4ce:	9018      	str	r0, [sp, #96]	; 0x60
  const int input_width = input_shape.Dims(2);
   2b4d0:	4648      	mov	r0, r9
   2b4d2:	f7fc f8ad 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_depth = input_shape.Dims(3);
   2b4d6:	2103      	movs	r1, #3
  const int input_width = input_shape.Dims(2);
   2b4d8:	9019      	str	r0, [sp, #100]	; 0x64
  const int input_depth = input_shape.Dims(3);
   2b4da:	4648      	mov	r0, r9
   2b4dc:	f7fc f8a8 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_height = filter_shape.Dims(1);
   2b4e0:	2101      	movs	r1, #1
  const int input_depth = input_shape.Dims(3);
   2b4e2:	900d      	str	r0, [sp, #52]	; 0x34
  const int filter_height = filter_shape.Dims(1);
   2b4e4:	4630      	mov	r0, r6
   2b4e6:	f7fc f8a3 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int filter_width = filter_shape.Dims(2);
   2b4ea:	2102      	movs	r1, #2
  const int filter_height = filter_shape.Dims(1);
   2b4ec:	901a      	str	r0, [sp, #104]	; 0x68
  const int filter_width = filter_shape.Dims(2);
   2b4ee:	4630      	mov	r0, r6
   2b4f0:	f7fc f89e 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2b4f4:	2101      	movs	r1, #1
  const int filter_width = filter_shape.Dims(2);
   2b4f6:	901b      	str	r0, [sp, #108]	; 0x6c
  const int output_height = output_shape.Dims(1);
   2b4f8:	4638      	mov	r0, r7
   2b4fa:	f7fc f899 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2b4fe:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2b500:	901c      	str	r0, [sp, #112]	; 0x70
  const int output_width = output_shape.Dims(2);
   2b502:	4638      	mov	r0, r7
   2b504:	f7fc f894 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   2b508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b50a:	9a08      	ldr	r2, [sp, #32]
  const int output_width = output_shape.Dims(2);
   2b50c:	901d      	str	r0, [sp, #116]	; 0x74
  TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   2b50e:	fb03 f502 	mul.w	r5, r3, r2
   2b512:	42a5      	cmp	r5, r4
   2b514:	d1bc      	bne.n	2b490 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>
  TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   2b516:	982d      	ldr	r0, [sp, #180]	; 0xb4
   2b518:	f7fc f90f 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2b51c:	42a8      	cmp	r0, r5
   2b51e:	d1b7      	bne.n	2b490 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x52>

  for (int batch = 0; batch < batches; ++batch) {
   2b520:	f04f 0b00 	mov.w	fp, #0
   2b524:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2b526:	459b      	cmp	fp, r3
   2b528:	f280 80a0 	bge.w	2b66c <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x22e>
   2b52c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2b52e:	425b      	negs	r3, r3
   2b530:	930a      	str	r3, [sp, #40]	; 0x28
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2b532:	2300      	movs	r3, #0
   2b534:	9303      	str	r3, [sp, #12]
   2b536:	9b03      	ldr	r3, [sp, #12]
   2b538:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   2b53a:	4293      	cmp	r3, r2
   2b53c:	f280 8093 	bge.w	2b666 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x228>
   2b540:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b542:	425b      	negs	r3, r3
   2b544:	9309      	str	r3, [sp, #36]	; 0x24
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2b546:	2300      	movs	r3, #0
   2b548:	9304      	str	r3, [sp, #16]
   2b54a:	9b04      	ldr	r3, [sp, #16]
   2b54c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2b54e:	4293      	cmp	r3, r2
   2b550:	f280 8081 	bge.w	2b656 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x218>
   2b554:	2300      	movs	r3, #0
   2b556:	9302      	str	r3, [sp, #8]
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   2b558:	9305      	str	r3, [sp, #20]
   2b55a:	9b05      	ldr	r3, [sp, #20]
   2b55c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2b55e:	4293      	cmp	r3, r2
   2b560:	da71      	bge.n	2b646 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x208>
   2b562:	9c02      	ldr	r4, [sp, #8]
          for (int m = 0; m < depth_multiplier; ++m) {
   2b564:	9b02      	ldr	r3, [sp, #8]
   2b566:	9a08      	ldr	r2, [sp, #32]
   2b568:	1ae3      	subs	r3, r4, r3
   2b56a:	4293      	cmp	r3, r2
   2b56c:	da63      	bge.n	2b636 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1f8>
            const int output_channel = m + in_channel * depth_multiplier;
            const int in_x_origin = (out_x * stride_width) - pad_width;
            const int in_y_origin = (out_y * stride_height) - pad_height;
            int32 acc = 0;
   2b56e:	2500      	movs	r5, #0
            const int output_channel = m + in_channel * depth_multiplier;
   2b570:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2b574:	9506      	str	r5, [sp, #24]
   2b576:	9b06      	ldr	r3, [sp, #24]
   2b578:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2b57a:	4293      	cmp	r3, r2
   2b57c:	da38      	bge.n	2b5f0 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b2>
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b57e:	2300      	movs	r3, #0
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
                const int in_y =
   2b580:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b584:	9307      	str	r3, [sp, #28]
   2b586:	9b07      	ldr	r3, [sp, #28]
   2b588:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2b58a:	4293      	cmp	r3, r2
   2b58c:	da2a      	bge.n	2b5e4 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1a6>
                    in_y_origin + dilation_height_factor * filter_y;
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   2b58e:	f1b8 0f00 	cmp.w	r8, #0
   2b592:	db21      	blt.n	2b5d8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   2b594:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2b596:	4543      	cmp	r3, r8
   2b598:	dd1e      	ble.n	2b5d8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   2b59a:	f1ba 0f00 	cmp.w	sl, #0
   2b59e:	db1b      	blt.n	2b5d8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
   2b5a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2b5a2:	4553      	cmp	r3, sl
   2b5a4:	dd18      	ble.n	2b5d8 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
                    (in_y < input_height);
                if (is_point_inside_image) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   2b5a6:	9b05      	ldr	r3, [sp, #20]
   2b5a8:	4652      	mov	r2, sl
   2b5aa:	4659      	mov	r1, fp
   2b5ac:	9300      	str	r3, [sp, #0]
   2b5ae:	4648      	mov	r0, r9
   2b5b0:	4643      	mov	r3, r8
   2b5b2:	f7fc f8ff 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
                  int32 filter_val = filter_data[Offset(
   2b5b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
   2b5ba:	9012      	str	r0, [sp, #72]	; 0x48
                  int32 filter_val = filter_data[Offset(
   2b5bc:	2100      	movs	r1, #0
   2b5be:	4630      	mov	r0, r6
   2b5c0:	9400      	str	r4, [sp, #0]
   2b5c2:	f7fc f8f7 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                                                      in_x, in_channel)];
   2b5c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2b5c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   2b5ca:	569b      	ldrsb	r3, [r3, r2]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
   2b5cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2b5ce:	4413      	add	r3, r2
                      filter_shape, 0, filter_y, filter_x, output_channel)];
   2b5d0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   2b5d2:	5612      	ldrsb	r2, [r2, r0]
                  acc += filter_val * (input_val + input_offset);
   2b5d4:	fb02 5503 	mla	r5, r2, r3, r5
              for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b5d8:	9b07      	ldr	r3, [sp, #28]
   2b5da:	3301      	adds	r3, #1
   2b5dc:	9307      	str	r3, [sp, #28]
   2b5de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b5e0:	4498      	add	r8, r3
   2b5e2:	e7d0      	b.n	2b586 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x148>
            for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2b5e4:	9b06      	ldr	r3, [sp, #24]
   2b5e6:	3301      	adds	r3, #1
   2b5e8:	9306      	str	r3, [sp, #24]
   2b5ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b5ec:	449a      	add	sl, r3
   2b5ee:	e7c2      	b.n	2b576 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x138>
                }
              }
            }
            if (bias_data) {
   2b5f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   2b5f2:	b113      	cbz	r3, 2b5fa <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1bc>
              acc += bias_data[output_channel];
   2b5f4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2b5f8:	441d      	add	r5, r3
            }
            acc = MultiplyByQuantizedMultiplier(
   2b5fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2b5fc:	4628      	mov	r0, r5
   2b5fe:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
   2b602:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2b604:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   2b608:	f7ed feb6 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                acc, output_multiplier[output_channel],
                output_shift[output_channel]);
            acc += output_offset;
   2b60c:	9b16      	ldr	r3, [sp, #88]	; 0x58
            acc = std::max(acc, output_activation_min);
            acc = std::min(acc, output_activation_max);
            output_data[Offset(output_shape, batch, out_y, out_x,
   2b60e:	9400      	str	r4, [sp, #0]
            acc += output_offset;
   2b610:	18c5      	adds	r5, r0, r3
   2b612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            output_data[Offset(output_shape, batch, out_y, out_x,
   2b614:	4659      	mov	r1, fp
   2b616:	429d      	cmp	r5, r3
   2b618:	bfb8      	it	lt
   2b61a:	461d      	movlt	r5, r3
   2b61c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b61e:	4638      	mov	r0, r7
   2b620:	429d      	cmp	r5, r3
   2b622:	bfa8      	it	ge
   2b624:	461d      	movge	r5, r3
   2b626:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   2b62a:	f7fc f8c3 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                               output_channel)] = static_cast<int8_t>(acc);
   2b62e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   2b630:	3401      	adds	r4, #1
   2b632:	541d      	strb	r5, [r3, r0]
          for (int m = 0; m < depth_multiplier; ++m) {
   2b634:	e796      	b.n	2b564 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x126>
        for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
   2b636:	9b05      	ldr	r3, [sp, #20]
   2b638:	9a08      	ldr	r2, [sp, #32]
   2b63a:	3301      	adds	r3, #1
   2b63c:	9305      	str	r3, [sp, #20]
   2b63e:	9b02      	ldr	r3, [sp, #8]
   2b640:	4413      	add	r3, r2
   2b642:	9302      	str	r3, [sp, #8]
   2b644:	e789      	b.n	2b55a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x11c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2b646:	9b04      	ldr	r3, [sp, #16]
   2b648:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b64a:	3301      	adds	r3, #1
   2b64c:	9304      	str	r3, [sp, #16]
   2b64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b650:	4413      	add	r3, r2
   2b652:	9309      	str	r3, [sp, #36]	; 0x24
   2b654:	e779      	b.n	2b54a <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x10c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2b656:	9b03      	ldr	r3, [sp, #12]
   2b658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b65a:	3301      	adds	r3, #1
   2b65c:	9303      	str	r3, [sp, #12]
   2b65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b660:	4413      	add	r3, r2
   2b662:	930a      	str	r3, [sp, #40]	; 0x28
   2b664:	e767      	b.n	2b536 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xf8>
  for (int batch = 0; batch < batches; ++batch) {
   2b666:	f10b 0b01 	add.w	fp, fp, #1
   2b66a:	e75b      	b.n	2b524 <_ZN6tflite21reference_integer_ops23DepthwiseConvPerChannelERKNS_15DepthwiseParamsEPKiS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe6>
          }
        }
      }
    }
  }
}
   2b66c:	b021      	add	sp, #132	; 0x84
   2b66e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b672 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph>:
  static inline void Run(const DepthwiseParams& params,
   2b672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b676:	ed2d 8b02 	vpush	{d8}
   2b67a:	469a      	mov	sl, r3
    const int stride_width = params.stride_width;
   2b67c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
  static inline void Run(const DepthwiseParams& params,
   2b680:	b0a1      	sub	sp, #132	; 0x84
    const int stride_width = params.stride_width;
   2b682:	930e      	str	r3, [sp, #56]	; 0x38
    const int stride_height = params.stride_height;
   2b684:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  static inline void Run(const DepthwiseParams& params,
   2b688:	4689      	mov	r9, r1
    const int stride_height = params.stride_height;
   2b68a:	930f      	str	r3, [sp, #60]	; 0x3c
    const int dilation_width_factor = params.dilation_width_factor;
   2b68c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  static inline void Run(const DepthwiseParams& params,
   2b690:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
    const int dilation_width_factor = params.dilation_width_factor;
   2b692:	9310      	str	r3, [sp, #64]	; 0x40
    const int dilation_height_factor = params.dilation_height_factor;
   2b694:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  static inline void Run(const DepthwiseParams& params,
   2b698:	921f      	str	r2, [sp, #124]	; 0x7c
    const int dilation_height_factor = params.dilation_height_factor;
   2b69a:	9311      	str	r3, [sp, #68]	; 0x44
    const int pad_width = params.padding_values.width;
   2b69c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
   2b6a0:	9313      	str	r3, [sp, #76]	; 0x4c
    const int pad_height = params.padding_values.height;
   2b6a2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   2b6a6:	9314      	str	r3, [sp, #80]	; 0x50
    const int depth_multiplier = params.depth_multiplier;
   2b6a8:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
   2b6ac:	9308      	str	r3, [sp, #32]
    const int32 output_activation_min = params.quantized_activation_min;
   2b6ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2b6b0:	930b      	str	r3, [sp, #44]	; 0x2c
    const int32 output_activation_max = params.quantized_activation_max;
   2b6b2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2b6b4:	930c      	str	r3, [sp, #48]	; 0x30
    const int32 input_offset = params.input_offset;
   2b6b6:	6943      	ldr	r3, [r0, #20]
   2b6b8:	9315      	str	r3, [sp, #84]	; 0x54
    const int32 filter_offset = params.weights_offset;
   2b6ba:	6983      	ldr	r3, [r0, #24]
   2b6bc:	9316      	str	r3, [sp, #88]	; 0x58
    const int32 output_offset = params.output_offset;
   2b6be:	69c3      	ldr	r3, [r0, #28]
   2b6c0:	9317      	str	r3, [sp, #92]	; 0x5c
    const int32 output_multiplier = params.output_multiplier;
   2b6c2:	6a03      	ldr	r3, [r0, #32]
   2b6c4:	ee08 3a10 	vmov	s16, r3
    const int output_shift = params.output_shift;
   2b6c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2b6ca:	ee08 3a90 	vmov	s17, r3
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2b6ce:	680b      	ldr	r3, [r1, #0]
   2b6d0:	2b04      	cmp	r3, #4
   2b6d2:	d001      	beq.n	2b6d8 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x66>
   2b6d4:	f005 fba5 	bl	30e22 <abort>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
   2b6d8:	f8da 3000 	ldr.w	r3, [sl]
   2b6dc:	2b04      	cmp	r3, #4
   2b6de:	d1f9      	bne.n	2b6d4 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2b6e0:	6833      	ldr	r3, [r6, #0]
   2b6e2:	2b04      	cmp	r3, #4
   2b6e4:	d1f6      	bne.n	2b6d4 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   2b6e6:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
   2b6ea:	4293      	cmp	r3, r2
   2b6ec:	dcf2      	bgt.n	2b6d4 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2b6ee:	2300      	movs	r3, #0
   2b6f0:	4632      	mov	r2, r6
   2b6f2:	4619      	mov	r1, r3
   2b6f4:	4648      	mov	r0, r9
   2b6f6:	f7fe fe45 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   2b6fa:	2303      	movs	r3, #3
   2b6fc:	4632      	mov	r2, r6
   2b6fe:	4619      	mov	r1, r3
    const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2b700:	9018      	str	r0, [sp, #96]	; 0x60
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   2b702:	4650      	mov	r0, sl
   2b704:	f7fe fe3e 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
    const int input_height = input_shape.Dims(1);
   2b708:	2101      	movs	r1, #1
    const int output_depth = MatchingDim(filter_shape, 3, output_shape, 3);
   2b70a:	4604      	mov	r4, r0
    const int input_height = input_shape.Dims(1);
   2b70c:	4648      	mov	r0, r9
   2b70e:	f7fb ff8f 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int input_width = input_shape.Dims(2);
   2b712:	2102      	movs	r1, #2
    const int input_height = input_shape.Dims(1);
   2b714:	9019      	str	r0, [sp, #100]	; 0x64
    const int input_width = input_shape.Dims(2);
   2b716:	4648      	mov	r0, r9
   2b718:	f7fb ff8a 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int input_depth = input_shape.Dims(3);
   2b71c:	2103      	movs	r1, #3
    const int input_width = input_shape.Dims(2);
   2b71e:	901a      	str	r0, [sp, #104]	; 0x68
    const int input_depth = input_shape.Dims(3);
   2b720:	4648      	mov	r0, r9
   2b722:	f7fb ff85 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int filter_height = filter_shape.Dims(1);
   2b726:	2101      	movs	r1, #1
    const int input_depth = input_shape.Dims(3);
   2b728:	900d      	str	r0, [sp, #52]	; 0x34
    const int filter_height = filter_shape.Dims(1);
   2b72a:	4650      	mov	r0, sl
   2b72c:	f7fb ff80 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int filter_width = filter_shape.Dims(2);
   2b730:	2102      	movs	r1, #2
    const int filter_height = filter_shape.Dims(1);
   2b732:	901b      	str	r0, [sp, #108]	; 0x6c
    const int filter_width = filter_shape.Dims(2);
   2b734:	4650      	mov	r0, sl
   2b736:	f7fb ff7b 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int output_height = output_shape.Dims(1);
   2b73a:	2101      	movs	r1, #1
    const int filter_width = filter_shape.Dims(2);
   2b73c:	901c      	str	r0, [sp, #112]	; 0x70
    const int output_height = output_shape.Dims(1);
   2b73e:	4630      	mov	r0, r6
   2b740:	f7fb ff76 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int output_width = output_shape.Dims(2);
   2b744:	2102      	movs	r1, #2
    const int output_height = output_shape.Dims(1);
   2b746:	901d      	str	r0, [sp, #116]	; 0x74
    const int output_width = output_shape.Dims(2);
   2b748:	4630      	mov	r0, r6
   2b74a:	f7fb ff71 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   2b74e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b750:	9a08      	ldr	r2, [sp, #32]
    const int output_width = output_shape.Dims(2);
   2b752:	901e      	str	r0, [sp, #120]	; 0x78
    TFLITE_DCHECK_EQ(output_depth, input_depth * depth_multiplier);
   2b754:	fb03 f502 	mul.w	r5, r3, r2
   2b758:	42a5      	cmp	r5, r4
   2b75a:	d1bb      	bne.n	2b6d4 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
   2b75c:	982d      	ldr	r0, [sp, #180]	; 0xb4
   2b75e:	f7fb ffec 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2b762:	42a8      	cmp	r0, r5
   2b764:	d1b6      	bne.n	2b6d4 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x62>
    for (int b = 0; b < batches; ++b) {
   2b766:	f04f 0b00 	mov.w	fp, #0
   2b76a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2b76c:	459b      	cmp	fp, r3
   2b76e:	f280 809d 	bge.w	2b8ac <_flash_used+0x10>
   2b772:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2b774:	425b      	negs	r3, r3
   2b776:	930a      	str	r3, [sp, #40]	; 0x28
      for (int out_y = 0; out_y < output_height; ++out_y) {
   2b778:	2300      	movs	r3, #0
   2b77a:	9303      	str	r3, [sp, #12]
   2b77c:	9b03      	ldr	r3, [sp, #12]
   2b77e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2b780:	4293      	cmp	r3, r2
   2b782:	f280 8090 	bge.w	2b8a6 <_flash_used+0xa>
   2b786:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2b788:	425b      	negs	r3, r3
   2b78a:	9309      	str	r3, [sp, #36]	; 0x24
        for (int out_x = 0; out_x < output_width; ++out_x) {
   2b78c:	2300      	movs	r3, #0
   2b78e:	9304      	str	r3, [sp, #16]
   2b790:	9b04      	ldr	r3, [sp, #16]
   2b792:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   2b794:	4293      	cmp	r3, r2
   2b796:	da7e      	bge.n	2b896 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x224>
   2b798:	2300      	movs	r3, #0
   2b79a:	9302      	str	r3, [sp, #8]
          for (int ic = 0; ic < input_depth; ++ic) {
   2b79c:	9305      	str	r3, [sp, #20]
   2b79e:	9b05      	ldr	r3, [sp, #20]
   2b7a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2b7a2:	4293      	cmp	r3, r2
   2b7a4:	da6f      	bge.n	2b886 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x214>
   2b7a6:	9c02      	ldr	r4, [sp, #8]
            for (int m = 0; m < depth_multiplier; m++) {
   2b7a8:	9b02      	ldr	r3, [sp, #8]
   2b7aa:	9a08      	ldr	r2, [sp, #32]
   2b7ac:	1ae3      	subs	r3, r4, r3
   2b7ae:	429a      	cmp	r2, r3
   2b7b0:	dd61      	ble.n	2b876 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x204>
              int32 acc = 0;
   2b7b2:	2500      	movs	r5, #0
              const int oc = m + ic * depth_multiplier;
   2b7b4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2b7b6:	9506      	str	r5, [sp, #24]
   2b7b8:	9b06      	ldr	r3, [sp, #24]
   2b7ba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2b7bc:	4293      	cmp	r3, r2
   2b7be:	da39      	bge.n	2b834 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1c2>
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b7c0:	2300      	movs	r3, #0
                  const int in_y =
   2b7c2:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b7c6:	9307      	str	r3, [sp, #28]
   2b7c8:	9b07      	ldr	r3, [sp, #28]
   2b7ca:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   2b7cc:	4293      	cmp	r3, r2
   2b7ce:	da2b      	bge.n	2b828 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1b6>
                  if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
   2b7d0:	f1b8 0f00 	cmp.w	r8, #0
   2b7d4:	db22      	blt.n	2b81c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   2b7d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2b7d8:	4543      	cmp	r3, r8
   2b7da:	dd1f      	ble.n	2b81c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   2b7dc:	2f00      	cmp	r7, #0
   2b7de:	db1d      	blt.n	2b81c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
   2b7e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2b7e2:	42bb      	cmp	r3, r7
   2b7e4:	dd1a      	ble.n	2b81c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1aa>
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
   2b7e6:	9b05      	ldr	r3, [sp, #20]
   2b7e8:	463a      	mov	r2, r7
   2b7ea:	4659      	mov	r1, fp
   2b7ec:	9300      	str	r3, [sp, #0]
   2b7ee:	4648      	mov	r0, r9
   2b7f0:	4643      	mov	r3, r8
   2b7f2:	f7fb ffdf 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
                    int32 filter_val = filter_data[Offset(
   2b7f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   2b7fa:	2100      	movs	r1, #0
                        input_data[Offset(input_shape, b, in_y, in_x, ic)];
   2b7fc:	9012      	str	r0, [sp, #72]	; 0x48
                    int32 filter_val = filter_data[Offset(
   2b7fe:	9400      	str	r4, [sp, #0]
   2b800:	4650      	mov	r0, sl
   2b802:	f7fb ffd7 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2b806:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
                    acc += (filter_val + filter_offset) *
   2b808:	9a16      	ldr	r2, [sp, #88]	; 0x58
                    int32 filter_val = filter_data[Offset(
   2b80a:	5c1b      	ldrb	r3, [r3, r0]
                    int32 input_val =
   2b80c:	9912      	ldr	r1, [sp, #72]	; 0x48
                    acc += (filter_val + filter_offset) *
   2b80e:	4413      	add	r3, r2
                    int32 input_val =
   2b810:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2b812:	5c52      	ldrb	r2, [r2, r1]
                           (input_val + input_offset);
   2b814:	9915      	ldr	r1, [sp, #84]	; 0x54
   2b816:	440a      	add	r2, r1
                    acc += (filter_val + filter_offset) *
   2b818:	fb02 5503 	mla	r5, r2, r3, r5
                for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
   2b81c:	9b07      	ldr	r3, [sp, #28]
   2b81e:	3301      	adds	r3, #1
   2b820:	9307      	str	r3, [sp, #28]
   2b822:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b824:	4498      	add	r8, r3
   2b826:	e7cf      	b.n	2b7c8 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x156>
              for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
   2b828:	9b06      	ldr	r3, [sp, #24]
   2b82a:	3301      	adds	r3, #1
   2b82c:	9306      	str	r3, [sp, #24]
   2b82e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2b830:	441f      	add	r7, r3
   2b832:	e7c1      	b.n	2b7b8 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x146>
              if (bias_data) {
   2b834:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   2b836:	b113      	cbz	r3, 2b83e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x1cc>
                acc += bias_data[oc];
   2b838:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   2b83c:	441d      	add	r5, r3
  return MultiplyByQuantizedMultiplier(x, quantized_multiplier, shift);
   2b83e:	ee18 2a90 	vmov	r2, s17
   2b842:	ee18 1a10 	vmov	r1, s16
   2b846:	4628      	mov	r0, r5
   2b848:	f7ed fd96 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              acc += output_offset;
   2b84c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   2b84e:	9400      	str	r4, [sp, #0]
              acc += output_offset;
   2b850:	181d      	adds	r5, r3, r0
   2b852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              output_data[Offset(output_shape, b, out_y, out_x, oc)] =
   2b854:	4659      	mov	r1, fp
   2b856:	429d      	cmp	r5, r3
   2b858:	bfb8      	it	lt
   2b85a:	461d      	movlt	r5, r3
   2b85c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2b85e:	4630      	mov	r0, r6
   2b860:	429d      	cmp	r5, r3
   2b862:	bfa8      	it	ge
   2b864:	461d      	movge	r5, r3
   2b866:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   2b86a:	f7fb ffa3 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2b86e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   2b870:	3401      	adds	r4, #1
   2b872:	541d      	strb	r5, [r3, r0]
            for (int m = 0; m < depth_multiplier; m++) {
   2b874:	e798      	b.n	2b7a8 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x136>
          for (int ic = 0; ic < input_depth; ++ic) {
   2b876:	9b05      	ldr	r3, [sp, #20]
   2b878:	9a08      	ldr	r2, [sp, #32]
   2b87a:	3301      	adds	r3, #1
   2b87c:	9305      	str	r3, [sp, #20]
   2b87e:	9b02      	ldr	r3, [sp, #8]
   2b880:	4413      	add	r3, r2
   2b882:	9302      	str	r3, [sp, #8]
   2b884:	e78b      	b.n	2b79e <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x12c>
        for (int out_x = 0; out_x < output_width; ++out_x) {
   2b886:	9b04      	ldr	r3, [sp, #16]
   2b888:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b88a:	3301      	adds	r3, #1
   2b88c:	9304      	str	r3, [sp, #16]
   2b88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b890:	4413      	add	r3, r2
   2b892:	9309      	str	r3, [sp, #36]	; 0x24
   2b894:	e77c      	b.n	2b790 <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x11e>
      for (int out_y = 0; out_y < output_height; ++out_y) {
   2b896:	9b03      	ldr	r3, [sp, #12]
   2b898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b89a:	3301      	adds	r3, #1
   2b89c:	9303      	str	r3, [sp, #12]
   2b89e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b8a0:	4413      	add	r3, r2
   2b8a2:	930a      	str	r3, [sp, #40]	; 0x28
   2b8a4:	e76a      	b.n	2b77c <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0x10a>
    for (int b = 0; b < batches; ++b) {
   2b8a6:	f10b 0b01 	add.w	fp, fp, #1
   2b8aa:	e75e      	b.n	2b76a <_ZN6tflite13reference_ops14depthwise_conv24DepthwiseConvBasicKernelILNS_27DepthwiseConvOutputRoundingE1EE3RunERKNS_15DepthwiseParamsERKNS_12RuntimeShapeEPKhSA_SC_SA_PKiSA_Ph+0xf8>
  }
   2b8ac:	b021      	add	sp, #132	; 0x84
   2b8ae:	ecbd 8b02 	vpop	{d8}
   2b8b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b8b6 <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2b8b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   2b8b8:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2b8ba:	b90b      	cbnz	r3, 2b8c0 <_ZN6tflite3ops5micro10dequantize4InitEP13TfLiteContextPKcj+0xa>
   2b8bc:	f005 fab1 	bl	30e22 <abort>
  void* data = nullptr;
   2b8c0:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2b8c2:	2108      	movs	r1, #8
  void* data = nullptr;
   2b8c4:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2b8c6:	aa01      	add	r2, sp, #4
   2b8c8:	4798      	blx	r3
   2b8ca:	2801      	cmp	r0, #1
    return nullptr;
   2b8cc:	bf0c      	ite	eq
   2b8ce:	4620      	moveq	r0, r4
  return data;
   2b8d0:	9801      	ldrne	r0, [sp, #4]
}
   2b8d2:	b002      	add	sp, #8
   2b8d4:	bd10      	pop	{r4, pc}

0002b8d6 <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
   2b8d6:	ee07 0a90 	vmov	s15, r0
   2b8da:	eef0 7ae7 	vabs.f32	s15, s15
   2b8de:	ee17 0a90 	vmov	r0, s15
   2b8e2:	4770      	bx	lr

0002b8e4 <_ZZN6tflite3ops5micro11elementwise12_GLOBAL__N_110SquareEvalEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
  return EvalNumeric(context, node, [](float f) { return f * f; });
   2b8e4:	ee07 0a90 	vmov	s15, r0
   2b8e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
   2b8ec:	ee17 0a90 	vmov	r0, s15
   2b8f0:	4770      	bx	lr

0002b8f2 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsLogicalSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>:
   2b8f2:	f7ee be5d 	b.w	1a5b0 <_ZN6tflite3ops5micro11elementwise12_GLOBAL__N_114GenericPrepareIXadL_ZNS3_22IsNumericSupportedTypeE10TfLiteTypeEEEE12TfLiteStatusP13TfLiteContextP10TfLiteNode>

0002b8f6 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
   2b8f6:	f7f7 ba13 	b.w	22d20 <sinf>

0002b8fa <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
   2b8fa:	f7f7 b9b1 	b.w	22c60 <cosf>

0002b8fe <_ZSt3logf>:
  { return __builtin_logf(__x); }
   2b8fe:	f7f7 bbd1 	b.w	230a4 <logf>

0002b902 <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
   2b902:	f7f7 bc6f 	b.w	231e4 <sqrtf>

0002b906 <_ZZN6tflite3ops5micro11elementwise12_GLOBAL__N_19RsqrtEvalEP13TfLiteContextP10TfLiteNodeENUlfE_4_FUNEf>:
  return EvalNumeric(context, node, [](float f) { return 1.f / std::sqrt(f); });
   2b906:	b508      	push	{r3, lr}
   2b908:	f7f7 fc6c 	bl	231e4 <sqrtf>
   2b90c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   2b910:	ee07 0a10 	vmov	s14, r0
   2b914:	eec7 7a87 	vdiv.f32	s15, s15, s14
   2b918:	ee17 0a90 	vmov	r0, s15
   2b91c:	bd08      	pop	{r3, pc}

0002b91e <_ZN6tflite3ops5micro6custom15Register_ETHOSUEv>:
TfLiteRegistration* Register_ETHOSU() { return nullptr; }
   2b91e:	2000      	movs	r0, #0
   2b920:	4770      	bx	lr

0002b922 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2b922:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   2b924:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2b926:	b90b      	cbnz	r3, 2b92c <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0xa>
   2b928:	f005 fa7b 	bl	30e22 <abort>
  void* data = nullptr;
   2b92c:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2b92e:	2114      	movs	r1, #20
  void* data = nullptr;
   2b930:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2b932:	aa01      	add	r2, sp, #4
   2b934:	4798      	blx	r3
   2b936:	2801      	cmp	r0, #1
    return nullptr;
   2b938:	bf0c      	ite	eq
   2b93a:	4620      	moveq	r0, r4
  return data;
   2b93c:	9801      	ldrne	r0, [sp, #4]
}
   2b93e:	b002      	add	sp, #8
   2b940:	bd10      	pop	{r4, pc}

0002b942 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   2b942:	2900      	cmp	r1, #0
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
   2b944:	b538      	push	{r3, r4, r5, lr}
  const int dims_count = shape.DimensionsCount();
   2b946:	6804      	ldr	r4, [r0, #0]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   2b948:	db01      	blt.n	2b94e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0xc>
   2b94a:	42a1      	cmp	r1, r4
   2b94c:	db01      	blt.n	2b952 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x10>
   2b94e:	f005 fa68 	bl	30e22 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2b952:	2c05      	cmp	r4, #5
   2b954:	bfcc      	ite	gt
   2b956:	6843      	ldrgt	r3, [r0, #4]
   2b958:	1d03      	addle	r3, r0, #4
  for (int i = 0; i < dims_count; ++i) {
   2b95a:	2200      	movs	r2, #0
  int flat_size = 1;
   2b95c:	2001      	movs	r0, #1
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   2b95e:	4291      	cmp	r1, r2
   2b960:	bf0c      	ite	eq
   2b962:	2501      	moveq	r5, #1
   2b964:	f853 5022 	ldrne.w	r5, [r3, r2, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   2b968:	3201      	adds	r2, #1
   2b96a:	42a2      	cmp	r2, r4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   2b96c:	fb05 f000 	mul.w	r0, r5, r0
  for (int i = 0; i < dims_count; ++i) {
   2b970:	dbf5      	blt.n	2b95e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x1c>
}
   2b972:	bd38      	pop	{r3, r4, r5, pc}

0002b974 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph>:
    uint8* output_data) {
   2b974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b978:	ed2d 8b02 	vpush	{d8}
   2b97c:	461d      	mov	r5, r3
  const int32 input_offset = params.input_offset;
   2b97e:	6803      	ldr	r3, [r0, #0]
    uint8* output_data) {
   2b980:	b089      	sub	sp, #36	; 0x24
  const int32 input_offset = params.input_offset;
   2b982:	9303      	str	r3, [sp, #12]
  const int32 filter_offset = params.weights_offset;
   2b984:	6843      	ldr	r3, [r0, #4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   2b986:	682e      	ldr	r6, [r5, #0]
  const int32 filter_offset = params.weights_offset;
   2b988:	9304      	str	r3, [sp, #16]
  const int32 output_offset = params.output_offset;
   2b98a:	6883      	ldr	r3, [r0, #8]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   2b98c:	2e01      	cmp	r6, #1
  const int32 output_offset = params.output_offset;
   2b98e:	9305      	str	r3, [sp, #20]
  const int32 output_multiplier = params.output_multiplier;
   2b990:	68c3      	ldr	r3, [r0, #12]
    uint8* output_data) {
   2b992:	4614      	mov	r4, r2
  const int32 output_multiplier = params.output_multiplier;
   2b994:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   2b998:	6903      	ldr	r3, [r0, #16]
    uint8* output_data) {
   2b99a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
  const int output_shift = params.output_shift;
   2b99c:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   2b9a0:	6943      	ldr	r3, [r0, #20]
   2b9a2:	9300      	str	r3, [sp, #0]
  const int32 output_activation_max = params.quantized_activation_max;
   2b9a4:	6983      	ldr	r3, [r0, #24]
   2b9a6:	9301      	str	r3, [sp, #4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   2b9a8:	dc01      	bgt.n	2b9ae <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x3a>
   2b9aa:	f005 fa3a 	bl	30e22 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
   2b9ae:	683b      	ldr	r3, [r7, #0]
   2b9b0:	2b00      	cmp	r3, #0
   2b9b2:	ddfa      	ble.n	2b9aa <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x36>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   2b9b4:	e9dd 2100 	ldrd	r2, r1, [sp]
   2b9b8:	428a      	cmp	r2, r1
   2b9ba:	dcf6      	bgt.n	2b9aa <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x36>
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   2b9bc:	3b01      	subs	r3, #1
   2b9be:	4619      	mov	r1, r3
   2b9c0:	4638      	mov	r0, r7
   2b9c2:	9302      	str	r3, [sp, #8]
   2b9c4:	f7ff ffbd 	bl	2b942 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   2b9c8:	463a      	mov	r2, r7
   2b9ca:	1eb1      	subs	r1, r6, #2
   2b9cc:	9b02      	ldr	r3, [sp, #8]
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
   2b9ce:	9006      	str	r0, [sp, #24]
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   2b9d0:	4628      	mov	r0, r5
   2b9d2:	f7fe fcd7 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   2b9d6:	1e71      	subs	r1, r6, #1
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
   2b9d8:	4607      	mov	r7, r0
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   2b9da:	4628      	mov	r0, r5
   2b9dc:	f7fb fe28 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2b9e0:	2600      	movs	r6, #0
   2b9e2:	4605      	mov	r5, r0
  for (int b = 0; b < batches; ++b) {
   2b9e4:	46b2      	mov	sl, r6
   2b9e6:	9b06      	ldr	r3, [sp, #24]
   2b9e8:	459a      	cmp	sl, r3
   2b9ea:	da41      	bge.n	2ba70 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xfc>
   2b9ec:	f04f 0800 	mov.w	r8, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2b9f0:	46c1      	mov	r9, r8
   2b9f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2b9f4:	eb03 0b06 	add.w	fp, r3, r6
   2b9f8:	45b9      	cmp	r9, r7
   2b9fa:	da34      	bge.n	2ba66 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xf2>
      for (int d = 0; d < accum_depth; ++d) {
   2b9fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2b9fe:	46a6      	mov	lr, r4
   2ba00:	eb03 0c08 	add.w	ip, r3, r8
      int32 acc = 0;
   2ba04:	2300      	movs	r3, #0
      for (int d = 0; d < accum_depth; ++d) {
   2ba06:	461a      	mov	r2, r3
   2ba08:	42aa      	cmp	r2, r5
   2ba0a:	da10      	bge.n	2ba2e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xba>
        int32 input_val = input_data[b * accum_depth + d];
   2ba0c:	f81e 1b01 	ldrb.w	r1, [lr], #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   2ba10:	9804      	ldr	r0, [sp, #16]
        int32 input_val = input_data[b * accum_depth + d];
   2ba12:	9102      	str	r1, [sp, #8]
        int32 filter_val = filter_data[out_c * accum_depth + d];
   2ba14:	f81c 1b01 	ldrb.w	r1, [ip], #1
      for (int d = 0; d < accum_depth; ++d) {
   2ba18:	3201      	adds	r2, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   2ba1a:	4401      	add	r1, r0
   2ba1c:	9107      	str	r1, [sp, #28]
   2ba1e:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   2ba22:	4401      	add	r1, r0
   2ba24:	4608      	mov	r0, r1
   2ba26:	9907      	ldr	r1, [sp, #28]
   2ba28:	fb00 3301 	mla	r3, r0, r1, r3
      for (int d = 0; d < accum_depth; ++d) {
   2ba2c:	e7ec      	b.n	2ba08 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x94>
      if (bias_data) {
   2ba2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2ba30:	b112      	cbz	r2, 2ba38 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0xc4>
        acc += bias_data[out_c];
   2ba32:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
   2ba36:	4413      	add	r3, r2
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
   2ba38:	4618      	mov	r0, r3
   2ba3a:	ee18 2a90 	vmov	r2, s17
   2ba3e:	ee18 1a10 	vmov	r1, s16
   2ba42:	f7ed fc99 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      acc += output_offset;
   2ba46:	9b05      	ldr	r3, [sp, #20]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2ba48:	f109 0901 	add.w	r9, r9, #1
      acc += output_offset;
   2ba4c:	4418      	add	r0, r3
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
   2ba4e:	9b00      	ldr	r3, [sp, #0]
   2ba50:	44a8      	add	r8, r5
   2ba52:	4298      	cmp	r0, r3
   2ba54:	bfb8      	it	lt
   2ba56:	4618      	movlt	r0, r3
   2ba58:	9b01      	ldr	r3, [sp, #4]
   2ba5a:	4298      	cmp	r0, r3
   2ba5c:	bfa8      	it	ge
   2ba5e:	4618      	movge	r0, r3
   2ba60:	f80b 0b01 	strb.w	r0, [fp], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2ba64:	e7c8      	b.n	2b9f8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x84>
  for (int b = 0; b < batches; ++b) {
   2ba66:	f10a 0a01 	add.w	sl, sl, #1
   2ba6a:	443e      	add	r6, r7
   2ba6c:	442c      	add	r4, r5
   2ba6e:	e7ba      	b.n	2b9e6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKiS6_Ph+0x72>
}
   2ba70:	b009      	add	sp, #36	; 0x24
   2ba72:	ecbd 8b02 	vpop	{d8}
   2ba76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ba7a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
   2ba7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba7e:	ed2d 8b02 	vpush	{d8}
   2ba82:	461d      	mov	r5, r3
  const int32 input_offset = params.input_offset;
   2ba84:	6803      	ldr	r3, [r0, #0]
    int8_t* output_data) {
   2ba86:	b089      	sub	sp, #36	; 0x24
  const int32 input_offset = params.input_offset;
   2ba88:	9303      	str	r3, [sp, #12]
  const int32 filter_offset = params.weights_offset;
   2ba8a:	6843      	ldr	r3, [r0, #4]
  const int32 output_offset = params.output_offset;
  const int32 output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32 output_activation_min = params.quantized_activation_min;
  const int32 output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   2ba8c:	682f      	ldr	r7, [r5, #0]
  const int32 filter_offset = params.weights_offset;
   2ba8e:	9304      	str	r3, [sp, #16]
  const int32 output_offset = params.output_offset;
   2ba90:	6883      	ldr	r3, [r0, #8]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   2ba92:	2f01      	cmp	r7, #1
  const int32 output_offset = params.output_offset;
   2ba94:	9305      	str	r3, [sp, #20]
  const int32 output_multiplier = params.output_multiplier;
   2ba96:	68c3      	ldr	r3, [r0, #12]
    int8_t* output_data) {
   2ba98:	4614      	mov	r4, r2
  const int32 output_multiplier = params.output_multiplier;
   2ba9a:	ee08 3a10 	vmov	s16, r3
  const int output_shift = params.output_shift;
   2ba9e:	6903      	ldr	r3, [r0, #16]
    int8_t* output_data) {
   2baa0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
  const int output_shift = params.output_shift;
   2baa2:	ee08 3a90 	vmov	s17, r3
  const int32 output_activation_min = params.quantized_activation_min;
   2baa6:	6943      	ldr	r3, [r0, #20]
   2baa8:	9300      	str	r3, [sp, #0]
  const int32 output_activation_max = params.quantized_activation_max;
   2baaa:	6983      	ldr	r3, [r0, #24]
   2baac:	9301      	str	r3, [sp, #4]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
   2baae:	dc01      	bgt.n	2bab4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x3a>
   2bab0:	f005 f9b7 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
   2bab4:	6833      	ldr	r3, [r6, #0]
   2bab6:	2b02      	cmp	r3, #2
   2bab8:	d1fa      	bne.n	2bab0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
   2baba:	e9dd 3200 	ldrd	r3, r2, [sp]
   2babe:	4293      	cmp	r3, r2
   2bac0:	dcf6      	bgt.n	2bab0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
   2bac2:	2100      	movs	r1, #0
   2bac4:	4630      	mov	r0, r6
   2bac6:	f7fb fdb3 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = output_shape.Dims(1);
   2baca:	2101      	movs	r1, #1
  const int batches = output_shape.Dims(0);
   2bacc:	9006      	str	r0, [sp, #24]
  const int output_depth = output_shape.Dims(1);
   2bace:	4630      	mov	r0, r6
   2bad0:	f7fb fdae 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
   2bad4:	1eb9      	subs	r1, r7, #2
  const int output_depth = output_shape.Dims(1);
   2bad6:	4606      	mov	r6, r0
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
   2bad8:	4628      	mov	r0, r5
   2bada:	f7fb fda9 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2bade:	42b0      	cmp	r0, r6
   2bae0:	dbe6      	blt.n	2bab0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x36>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
   2bae2:	4628      	mov	r0, r5
   2bae4:	1e79      	subs	r1, r7, #1
   2bae6:	f7fb fda3 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2baea:	2700      	movs	r7, #0
   2baec:	4605      	mov	r5, r0
  for (int b = 0; b < batches; ++b) {
   2baee:	46ba      	mov	sl, r7
   2baf0:	9b06      	ldr	r3, [sp, #24]
   2baf2:	459a      	cmp	sl, r3
   2baf4:	da41      	bge.n	2bb7a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x100>
   2baf6:	f04f 0800 	mov.w	r8, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2bafa:	46c1      	mov	r9, r8
   2bafc:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2bafe:	eb03 0b07 	add.w	fp, r3, r7
   2bb02:	45b1      	cmp	r9, r6
   2bb04:	da34      	bge.n	2bb70 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xf6>
      int32 acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
   2bb06:	9b14      	ldr	r3, [sp, #80]	; 0x50
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2bb08:	46a6      	mov	lr, r4
   2bb0a:	eb03 0c08 	add.w	ip, r3, r8
      int32 acc = 0;
   2bb0e:	2300      	movs	r3, #0
      for (int d = 0; d < accum_depth; ++d) {
   2bb10:	461a      	mov	r2, r3
   2bb12:	42aa      	cmp	r2, r5
   2bb14:	da10      	bge.n	2bb38 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xbe>
        int32 input_val = input_data[b * accum_depth + d];
   2bb16:	f91e 1b01 	ldrsb.w	r1, [lr], #1
        int32 filter_val = filter_data[out_c * accum_depth + d];
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   2bb1a:	9804      	ldr	r0, [sp, #16]
        int32 input_val = input_data[b * accum_depth + d];
   2bb1c:	9102      	str	r1, [sp, #8]
        int32 filter_val = filter_data[out_c * accum_depth + d];
   2bb1e:	f91c 1b01 	ldrsb.w	r1, [ip], #1
      for (int d = 0; d < accum_depth; ++d) {
   2bb22:	3201      	adds	r2, #1
        acc += (filter_val + filter_offset) * (input_val + input_offset);
   2bb24:	4401      	add	r1, r0
   2bb26:	9107      	str	r1, [sp, #28]
   2bb28:	e9dd 1002 	ldrd	r1, r0, [sp, #8]
   2bb2c:	4401      	add	r1, r0
   2bb2e:	4608      	mov	r0, r1
   2bb30:	9907      	ldr	r1, [sp, #28]
   2bb32:	fb00 3301 	mla	r3, r0, r1, r3
      for (int d = 0; d < accum_depth; ++d) {
   2bb36:	e7ec      	b.n	2bb12 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x98>
      }
      if (bias_data) {
   2bb38:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2bb3a:	b112      	cbz	r2, 2bb42 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0xc8>
        acc += bias_data[out_c];
   2bb3c:	f852 2029 	ldr.w	r2, [r2, r9, lsl #2]
   2bb40:	4413      	add	r3, r2
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
   2bb42:	4618      	mov	r0, r3
   2bb44:	ee18 2a90 	vmov	r2, s17
   2bb48:	ee18 1a10 	vmov	r1, s16
   2bb4c:	f7ed fc14 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
      acc += output_offset;
   2bb50:	9b05      	ldr	r3, [sp, #20]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2bb52:	f109 0901 	add.w	r9, r9, #1
      acc += output_offset;
   2bb56:	4418      	add	r0, r3
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
   2bb58:	9b00      	ldr	r3, [sp, #0]
   2bb5a:	44a8      	add	r8, r5
   2bb5c:	4298      	cmp	r0, r3
   2bb5e:	bfb8      	it	lt
   2bb60:	4618      	movlt	r0, r3
   2bb62:	9b01      	ldr	r3, [sp, #4]
   2bb64:	4298      	cmp	r0, r3
   2bb66:	bfa8      	it	ge
   2bb68:	4618      	movge	r0, r3
   2bb6a:	f80b 0b01 	strb.w	r0, [fp], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
   2bb6e:	e7c8      	b.n	2bb02 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x88>
  for (int b = 0; b < batches; ++b) {
   2bb70:	f10a 0a01 	add.w	sl, sl, #1
   2bb74:	4437      	add	r7, r6
   2bb76:	442c      	add	r4, r5
   2bb78:	e7ba      	b.n	2baf0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKiS6_Pa+0x76>
    }
  }
}
   2bb7a:	b009      	add	sp, #36	; 0x24
   2bb7c:	ecbd 8b02 	vpop	{d8}
   2bb80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bb84 <_ZN6tflite3ops5micro10hard_swish13HardSwishInitEP13TfLiteContextPKcj>:
void* HardSwishInit(TfLiteContext* context, const char* buffer, size_t length) {
   2bb84:	b513      	push	{r0, r1, r4, lr}
  void* data = nullptr;
   2bb86:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(HardSwishParams),
   2bb88:	2114      	movs	r1, #20
   2bb8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  void* data = nullptr;
   2bb8c:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(HardSwishParams),
   2bb8e:	aa01      	add	r2, sp, #4
   2bb90:	4798      	blx	r3
   2bb92:	2801      	cmp	r0, #1
    return nullptr;
   2bb94:	bf0c      	ite	eq
   2bb96:	4620      	moveq	r0, r4
  return data;
   2bb98:	9801      	ldrne	r0, [sp, #4]
}
   2bb9a:	b002      	add	sp, #8
   2bb9c:	bd10      	pop	{r4, pc}

0002bb9e <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs>:
  TFLITE_DCHECK_GE(multiplier_int32, 0);
   2bb9e:	2800      	cmp	r0, #0
                                            int16_t* multiplier_int16) {
   2bba0:	b510      	push	{r4, lr}
  TFLITE_DCHECK_GE(multiplier_int32, 0);
   2bba2:	da01      	bge.n	2bba8 <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs+0xa>
   2bba4:	f005 f93d 	bl	30e22 <abort>
  if (multiplier_int32 >=
   2bba8:	f06f 2380 	mvn.w	r3, #2147516416	; 0x80008000
   2bbac:	4298      	cmp	r0, r3
   2bbae:	db03      	blt.n	2bbb8 <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs+0x1a>
    *multiplier_int16 = std::numeric_limits<int16_t>::max();
   2bbb0:	f647 73ff 	movw	r3, #32767	; 0x7fff
   2bbb4:	800b      	strh	r3, [r1, #0]
}
   2bbb6:	bd10      	pop	{r4, pc}
  const int32_t result = (multiplier_int32 + kRoundingOffset) >> 16;
   2bbb8:	f500 4200 	add.w	r2, r0, #32768	; 0x8000
  TFLITE_DCHECK_LE(result << 16, multiplier_int32 + kRoundingOffset);
   2bbbc:	0c13      	lsrs	r3, r2, #16
   2bbbe:	041b      	lsls	r3, r3, #16
   2bbc0:	429a      	cmp	r2, r3
  const int32_t result = (multiplier_int32 + kRoundingOffset) >> 16;
   2bbc2:	ea4f 4422 	mov.w	r4, r2, asr #16
  TFLITE_DCHECK_LE(result << 16, multiplier_int32 + kRoundingOffset);
   2bbc6:	dbed      	blt.n	2bba4 <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs+0x6>
  TFLITE_DCHECK_GT(result << 16, multiplier_int32 - kRoundingOffset);
   2bbc8:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
   2bbcc:	4283      	cmp	r3, r0
   2bbce:	dde9      	ble.n	2bba4 <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs+0x6>
  *multiplier_int16 = result;
   2bbd0:	800c      	strh	r4, [r1, #0]
  TFLITE_DCHECK_EQ(*multiplier_int16, result);
   2bbd2:	e7f0      	b.n	2bbb6 <_ZN6tflite31DownScaleInt32ToInt16MultiplierEiPs+0x18>

0002bbd4 <_ZN6tflite13reference_ops19SaturatingLeftShiftEsi>:
  int32_t result = static_cast<int32_t>(value) * (1 << amount);
   2bbd4:	4088      	lsls	r0, r1
  return result;
   2bbd6:	f300 000f 	ssat	r0, #16, r0
}
   2bbda:	b200      	sxth	r0, r0
   2bbdc:	4770      	bx	lr

0002bbde <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
        6;
  }
}

template <typename T>
inline void HardSwish(const HardSwishParams& params,
   2bbde:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bbe2:	4604      	mov	r4, r0
   2bbe4:	4608      	mov	r0, r1
                      const RuntimeShape& input_shape, const T* input_data,
                      const RuntimeShape& output_shape, T* output_data) {
  ruy::profiler::ScopeLabel label("ReferenceHardSwish/Quantized");

  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   2bbe6:	4619      	mov	r1, r3
inline void HardSwish(const HardSwishParams& params,
   2bbe8:	4691      	mov	r9, r2
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   2bbea:	f7fb fd32 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>

  for (int i = 0; i < flat_size; i++) {
   2bbee:	2700      	movs	r7, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   2bbf0:	4680      	mov	r8, r0
  std::int16_t ab_x2_high16 = static_cast<std::int16_t>((ab_32) / (1 << 15));
   2bbf2:	f647 7aff 	movw	sl, #32767	; 0x7fff
  for (int i = 0; i < flat_size; i++) {
   2bbf6:	4547      	cmp	r7, r8
   2bbf8:	da3a      	bge.n	2bc70 <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x92>
    const int16_t input_value = input_data[i] - params.input_zero_point;
   2bbfa:	8820      	ldrh	r0, [r4, #0]
   2bbfc:	f819 2007 	ldrb.w	r2, [r9, r7]
    // Compute the input value on essentially the output scale, just not
    // right-shifted yet. This is the value that we'll use in the (x >= +3)
    // case, and that in the general case we'll multiply against the "relu-ish"
    // fixed-point multiplier in [0, 1].
    const int16_t input_value_on_preshift_output_scale =
        gemmlowp::SaturatingRoundingDoublingHighMul(
   2bc00:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    const int16_t input_value = input_data[i] - params.input_zero_point;
   2bc04:	1a12      	subs	r2, r2, r0
    const int16_t input_value_on_hires_input_scale = input_value * (1 << 7);
   2bc06:	01d2      	lsls	r2, r2, #7
   2bc08:	fa0f fb82 	sxth.w	fp, r2
        gemmlowp::SaturatingRoundingDoublingHighMul(
   2bc0c:	4658      	mov	r0, fp
   2bc0e:	f7ef f9b3 	bl	1af78 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
    // MultiplyByQuantizedMultiplier assumes.
    int16_t reluish_value = input_value_on_hires_input_scale;
    // Shift left, saturating, as much as we can while ensuring that this
    // saturation will not contribute to the result. That is, left shift amount
    // reduced by 1.
    if (params.reluish_multiplier_exponent > 0) {
   2bc12:	68a6      	ldr	r6, [r4, #8]
        gemmlowp::SaturatingRoundingDoublingHighMul(
   2bc14:	4605      	mov	r5, r0
    if (params.reluish_multiplier_exponent > 0) {
   2bc16:	2e00      	cmp	r6, #0
   2bc18:	dd04      	ble.n	2bc24 <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x46>
      reluish_value = SaturatingLeftShift(
   2bc1a:	4658      	mov	r0, fp
   2bc1c:	1e71      	subs	r1, r6, #1
   2bc1e:	f7ff ffd9 	bl	2bbd4 <_ZN6tflite13reference_ops19SaturatingLeftShiftEsi>
   2bc22:	4683      	mov	fp, r0
          reluish_value, params.reluish_multiplier_exponent - 1);
    }
    // Apply the fixed-point multiplier, dividing the value by a divisor
    // ranging in [1, 2].
    reluish_value = gemmlowp::SaturatingRoundingDoublingHighMul(
   2bc24:	4658      	mov	r0, fp
   2bc26:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   2bc2a:	f7ef f9a5 	bl	1af78 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
        reluish_value, params.reluish_multiplier_fixedpoint_int16);
    // Apply the last bit of left-shift. Thus, in the left-shifting case, if
    // any saturation affects the result, it is happening here --- any
    // saturation having occurred above is overwritten here, not affecting the
    // result.
    if (params.reluish_multiplier_exponent > 0) {
   2bc2e:	2e00      	cmp	r6, #0
    reluish_value = gemmlowp::SaturatingRoundingDoublingHighMul(
   2bc30:	4603      	mov	r3, r0
    if (params.reluish_multiplier_exponent > 0) {
   2bc32:	dd18      	ble.n	2bc66 <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x88>
      reluish_value = SaturatingLeftShift(reluish_value, 1);
   2bc34:	2101      	movs	r1, #1
   2bc36:	f7ff ffcd 	bl	2bbd4 <_ZN6tflite13reference_ops19SaturatingLeftShiftEsi>
    }
    // Shift right, in the right-shifting case.
    if (params.reluish_multiplier_exponent < 0) {
      reluish_value = gemmlowp::RoundingDivideByPOT(
   2bc3a:	4603      	mov	r3, r0
          reluish_value, -params.reluish_multiplier_exponent);
    }
    // At this point we have rescaled the value into a 16bit fixedpoint
    // reluish_value in [-1, 1].
    // We now convert that to a 16bit fixedpoint value in [0, 1].
    reluish_value = (reluish_value + (1 << 15)) >> 1;
   2bc3c:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
   2bc40:	1040      	asrs	r0, r0, #1
  std::int16_t ab_x2_high16 = static_cast<std::int16_t>((ab_32) / (1 << 15));
   2bc42:	4368      	muls	r0, r5
    //
    const int16_t preshift_output_value = SaturatingDoublingHighMul(
        reluish_value, input_value_on_preshift_output_scale);
    // We were so far operating on the pre-shift output scale. Now we finally
    // apply that output shift, arriving at the final output scale.
    int16_t output_value = gemmlowp::RoundingDivideByPOT(
   2bc44:	6921      	ldr	r1, [r4, #16]
  std::int16_t ab_x2_high16 = static_cast<std::int16_t>((ab_32) / (1 << 15));
   2bc46:	bf48      	it	mi
   2bc48:	4450      	addmi	r0, sl
    int16_t output_value = gemmlowp::RoundingDivideByPOT(
   2bc4a:	4249      	negs	r1, r1
   2bc4c:	f340 30cf 	sbfx	r0, r0, #15, #16
   2bc50:	f7ef fa48 	bl	1b0e4 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i>
        preshift_output_value, -params.output_multiplier_exponent);
    output_value += params.output_zero_point;
   2bc54:	8863      	ldrh	r3, [r4, #2]
   2bc56:	4418      	add	r0, r3
    output_value =
        std::min<int16_t>(output_value, std::numeric_limits<T>::max());
    output_value =
        std::max<int16_t>(output_value, std::numeric_limits<T>::min());
    output_data[i] = output_value;
   2bc58:	b200      	sxth	r0, r0
   2bc5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2bc5c:	f380 0008 	usat	r0, #8, r0
   2bc60:	55d8      	strb	r0, [r3, r7]
  for (int i = 0; i < flat_size; i++) {
   2bc62:	3701      	adds	r7, #1
   2bc64:	e7c7      	b.n	2bbf6 <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18>
    if (params.reluish_multiplier_exponent < 0) {
   2bc66:	d0e9      	beq.n	2bc3c <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x5e>
      reluish_value = gemmlowp::RoundingDivideByPOT(
   2bc68:	4271      	negs	r1, r6
   2bc6a:	f7ef fa3b 	bl	1b0e4 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i>
   2bc6e:	e7e4      	b.n	2bc3a <_ZN6tflite13reference_ops9HardSwishIhEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x5c>
  }
}
   2bc70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bc74 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void HardSwish(const HardSwishParams& params,
   2bc74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bc78:	4604      	mov	r4, r0
   2bc7a:	4608      	mov	r0, r1
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   2bc7c:	4619      	mov	r1, r3
inline void HardSwish(const HardSwishParams& params,
   2bc7e:	4691      	mov	r9, r2
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   2bc80:	f7fb fce7 	bl	27652 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
  for (int i = 0; i < flat_size; i++) {
   2bc84:	2600      	movs	r6, #0
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
   2bc86:	4680      	mov	r8, r0
  std::int16_t ab_x2_high16 = static_cast<std::int16_t>((ab_32) / (1 << 15));
   2bc88:	f647 7bff 	movw	fp, #32767	; 0x7fff
    output_data[i] = output_value;
   2bc8c:	f06f 0a7f 	mvn.w	sl, #127	; 0x7f
  for (int i = 0; i < flat_size; i++) {
   2bc90:	4546      	cmp	r6, r8
   2bc92:	da3f      	bge.n	2bd14 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xa0>
    const int16_t input_value = input_data[i] - params.input_zero_point;
   2bc94:	8820      	ldrh	r0, [r4, #0]
   2bc96:	f919 3006 	ldrsb.w	r3, [r9, r6]
        gemmlowp::SaturatingRoundingDoublingHighMul(
   2bc9a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    const int16_t input_value = input_data[i] - params.input_zero_point;
   2bc9e:	1a1b      	subs	r3, r3, r0
    const int16_t input_value_on_hires_input_scale = input_value * (1 << 7);
   2bca0:	01db      	lsls	r3, r3, #7
   2bca2:	b21b      	sxth	r3, r3
        gemmlowp::SaturatingRoundingDoublingHighMul(
   2bca4:	4618      	mov	r0, r3
   2bca6:	9301      	str	r3, [sp, #4]
   2bca8:	f7ef f966 	bl	1af78 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
    if (params.reluish_multiplier_exponent > 0) {
   2bcac:	68a7      	ldr	r7, [r4, #8]
        gemmlowp::SaturatingRoundingDoublingHighMul(
   2bcae:	4605      	mov	r5, r0
    if (params.reluish_multiplier_exponent > 0) {
   2bcb0:	2f00      	cmp	r7, #0
   2bcb2:	9b01      	ldr	r3, [sp, #4]
   2bcb4:	dd04      	ble.n	2bcc0 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x4c>
      reluish_value = SaturatingLeftShift(
   2bcb6:	4618      	mov	r0, r3
   2bcb8:	1e79      	subs	r1, r7, #1
   2bcba:	f7ff ff8b 	bl	2bbd4 <_ZN6tflite13reference_ops19SaturatingLeftShiftEsi>
   2bcbe:	4603      	mov	r3, r0
    reluish_value = gemmlowp::SaturatingRoundingDoublingHighMul(
   2bcc0:	4618      	mov	r0, r3
   2bcc2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
   2bcc6:	f7ef f957 	bl	1af78 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
    if (params.reluish_multiplier_exponent > 0) {
   2bcca:	2f00      	cmp	r7, #0
    reluish_value = gemmlowp::SaturatingRoundingDoublingHighMul(
   2bccc:	4603      	mov	r3, r0
    if (params.reluish_multiplier_exponent > 0) {
   2bcce:	dd1c      	ble.n	2bd0a <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x96>
      reluish_value = SaturatingLeftShift(reluish_value, 1);
   2bcd0:	2101      	movs	r1, #1
   2bcd2:	f7ff ff7f 	bl	2bbd4 <_ZN6tflite13reference_ops19SaturatingLeftShiftEsi>
      reluish_value = gemmlowp::RoundingDivideByPOT(
   2bcd6:	4603      	mov	r3, r0
    reluish_value = (reluish_value + (1 << 15)) >> 1;
   2bcd8:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
   2bcdc:	1040      	asrs	r0, r0, #1
  std::int16_t ab_x2_high16 = static_cast<std::int16_t>((ab_32) / (1 << 15));
   2bcde:	4368      	muls	r0, r5
    int16_t output_value = gemmlowp::RoundingDivideByPOT(
   2bce0:	6921      	ldr	r1, [r4, #16]
  std::int16_t ab_x2_high16 = static_cast<std::int16_t>((ab_32) / (1 << 15));
   2bce2:	bf48      	it	mi
   2bce4:	4458      	addmi	r0, fp
    int16_t output_value = gemmlowp::RoundingDivideByPOT(
   2bce6:	4249      	negs	r1, r1
   2bce8:	f340 30cf 	sbfx	r0, r0, #15, #16
   2bcec:	f7ef f9fa 	bl	1b0e4 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i>
    output_value += params.output_zero_point;
   2bcf0:	8863      	ldrh	r3, [r4, #2]
   2bcf2:	4418      	add	r0, r3
    output_data[i] = output_value;
   2bcf4:	b200      	sxth	r0, r0
   2bcf6:	287f      	cmp	r0, #127	; 0x7f
   2bcf8:	bfa8      	it	ge
   2bcfa:	207f      	movge	r0, #127	; 0x7f
   2bcfc:	4550      	cmp	r0, sl
   2bcfe:	bfb8      	it	lt
   2bd00:	4650      	movlt	r0, sl
   2bd02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2bd04:	5598      	strb	r0, [r3, r6]
  for (int i = 0; i < flat_size; i++) {
   2bd06:	3601      	adds	r6, #1
   2bd08:	e7c2      	b.n	2bc90 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
    if (params.reluish_multiplier_exponent < 0) {
   2bd0a:	d0e5      	beq.n	2bcd8 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x64>
      reluish_value = gemmlowp::RoundingDivideByPOT(
   2bd0c:	4279      	negs	r1, r7
   2bd0e:	f7ef f9e9 	bl	1b0e4 <_ZN8gemmlowp19RoundingDivideByPOTIsEET_S1_i>
   2bd12:	e7e0      	b.n	2bcd6 <_ZN6tflite13reference_ops9HardSwishIaEEvRKNS_15HardSwishParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x62>
}
   2bd14:	b003      	add	sp, #12
   2bd16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bd1a <_ZN6tflite3ops5micro6l2norm7PrepareEP13TfLiteContextP10TfLiteNode>:
}
   2bd1a:	2000      	movs	r0, #0
   2bd1c:	4770      	bx	lr

0002bd1e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:
                                   const RuntimeShape& check_shape_0) {
   2bd1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bd22:	4604      	mov	r4, r0
   2bd24:	460d      	mov	r5, r1
   2bd26:	4690      	mov	r8, r2
  for (int i = 0; i < dims_count; ++i) {
   2bd28:	2600      	movs	r6, #0
  const int dims_count = shape.DimensionsCount();
   2bd2a:	6807      	ldr	r7, [r0, #0]
  for (int i = 0; i < dims_count; ++i) {
   2bd2c:	42be      	cmp	r6, r7
   2bd2e:	da10      	bge.n	2bd52 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x34>
    if (i != skip_dim) {
   2bd30:	42ae      	cmp	r6, r5
   2bd32:	d00c      	beq.n	2bd4e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   2bd34:	4631      	mov	r1, r6
   2bd36:	4620      	mov	r0, r4
   2bd38:	f7fb fc7a 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2bd3c:	4631      	mov	r1, r6
   2bd3e:	4681      	mov	r9, r0
   2bd40:	4640      	mov	r0, r8
   2bd42:	f7fb fc75 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2bd46:	4581      	cmp	r9, r0
   2bd48:	d001      	beq.n	2bd4e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x30>
   2bd4a:	f005 f86a 	bl	30e22 <abort>
  for (int i = 0; i < dims_count; ++i) {
   2bd4e:	3601      	adds	r6, #1
   2bd50:	e7ec      	b.n	2bd2c <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0xe>
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
   2bd52:	2d00      	cmp	r5, #0
   2bd54:	dbf9      	blt.n	2bd4a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
   2bd56:	42bd      	cmp	r5, r7
   2bd58:	daf7      	bge.n	2bd4a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x2c>
  int flat_size = 1;
   2bd5a:	2001      	movs	r0, #1
  for (int i = 0; i < dims_count; ++i) {
   2bd5c:	2300      	movs	r3, #0
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2bd5e:	2f05      	cmp	r7, #5
   2bd60:	bfcc      	ite	gt
   2bd62:	6864      	ldrgt	r4, [r4, #4]
   2bd64:	3404      	addle	r4, #4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   2bd66:	429d      	cmp	r5, r3
   2bd68:	bf0c      	ite	eq
   2bd6a:	2201      	moveq	r2, #1
   2bd6c:	f854 2023 	ldrne.w	r2, [r4, r3, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
   2bd70:	3301      	adds	r3, #1
   2bd72:	429f      	cmp	r7, r3
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
   2bd74:	fb02 f000 	mul.w	r0, r2, r0
  for (int i = 0; i < dims_count; ++i) {
   2bd78:	dcf5      	bgt.n	2bd66 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x48>
}
   2bd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002bd7e <_ZN6tflite3ops5micro25Register_L2_NORMALIZATIONEv>:

TfLiteRegistration Register_L2_NORMALIZATION() { return Register_L2NORM_REF(); }
   2bd7e:	b510      	push	{r4, lr}
   2bd80:	4604      	mov	r4, r0
   2bd82:	f7ef fa85 	bl	1b290 <_ZN6tflite3ops5micro19Register_L2NORM_REFEv>
   2bd86:	4620      	mov	r0, r4
   2bd88:	bd10      	pop	{r4, pc}

0002bd8a <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void L2Normalization(const tflite::L2NormalizationParams& op_params,
                            const RuntimeShape& input_shape,
                            const uint8* input_data,
                            const RuntimeShape& output_shape,
                            uint8* output_data) {
   2bd8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bd8e:	460c      	mov	r4, r1
   2bd90:	4617      	mov	r7, r2
   2bd92:	461a      	mov	r2, r3
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   2bd94:	6809      	ldr	r1, [r1, #0]
                            uint8* output_data) {
   2bd96:	b087      	sub	sp, #28
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   2bd98:	3901      	subs	r1, #1
                            uint8* output_data) {
   2bd9a:	4606      	mov	r6, r0
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   2bd9c:	460b      	mov	r3, r1
   2bd9e:	4620      	mov	r0, r4
   2bda0:	e9cd 1201 	strd	r1, r2, [sp, #4]
   2bda4:	f7fe faee 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2bda8:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   2bdac:	4605      	mov	r5, r0
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2bdae:	4620      	mov	r0, r4
  const int32 input_zero_point = op_params.input_zero_point;
   2bdb0:	2400      	movs	r4, #0
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2bdb2:	f7ff ffb4 	bl	2bd1e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
  const int32 input_zero_point = op_params.input_zero_point;
   2bdb6:	f8d6 b000 	ldr.w	fp, [r6]

  for (int i = 0; i < outer_size; ++i) {
   2bdba:	4626      	mov	r6, r4
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2bdbc:	9001      	str	r0, [sp, #4]
  for (int i = 0; i < outer_size; ++i) {
   2bdbe:	9b01      	ldr	r3, [sp, #4]
   2bdc0:	429e      	cmp	r6, r3
   2bdc2:	da3d      	bge.n	2be40 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb6>
    int32 square_l2_norm = 0;
    for (int c = 0; c < depth; c++) {
   2bdc4:	2300      	movs	r3, #0
   2bdc6:	eb07 0904 	add.w	r9, r7, r4
  for (int i = 0; i < outer_size; ++i) {
   2bdca:	4649      	mov	r1, r9
    int32 square_l2_norm = 0;
   2bdcc:	4618      	mov	r0, r3
    for (int c = 0; c < depth; c++) {
   2bdce:	42ab      	cmp	r3, r5
   2bdd0:	da07      	bge.n	2bde2 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x58>
      int32 diff = input_data[depth * i + c] - input_zero_point;
   2bdd2:	f811 2b01 	ldrb.w	r2, [r1], #1
    for (int c = 0; c < depth; c++) {
   2bdd6:	3301      	adds	r3, #1
      int32 diff = input_data[depth * i + c] - input_zero_point;
   2bdd8:	eba2 020b 	sub.w	r2, r2, fp
      square_l2_norm += diff * diff;
   2bddc:	fb02 0002 	mla	r0, r2, r2, r0
    for (int c = 0; c < depth; c++) {
   2bde0:	e7f5      	b.n	2bdce <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x44>
    }
    int32 inv_l2norm_multiplier;
    int inv_l2norm_shift;
    GetInvSqrtQuantizedMultiplierExp(square_l2_norm, kReverseShift,
                                     &inv_l2norm_multiplier, &inv_l2norm_shift);
    for (int c = 0; c < depth; c++) {
   2bde2:	f04f 0800 	mov.w	r8, #0
    GetInvSqrtQuantizedMultiplierExp(square_l2_norm, kReverseShift,
   2bde6:	ab05      	add	r3, sp, #20
   2bde8:	aa04      	add	r2, sp, #16
   2bdea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2bdee:	f7ef fa83 	bl	1b2f8 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_>
  return RoundingDivideByPOT(
   2bdf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2bdf6:	f1c3 0a00 	rsb	sl, r3, #0
   2bdfa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2bdfc:	4423      	add	r3, r4
    for (int c = 0; c < depth; c++) {
   2bdfe:	45a8      	cmp	r8, r5
   2be00:	9303      	str	r3, [sp, #12]
   2be02:	da1a      	bge.n	2be3a <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xb0>
      int32 diff = input_data[depth * i + c] - input_zero_point;
   2be04:	f819 0b01 	ldrb.w	r0, [r9], #1
   2be08:	4611      	mov	r1, r2
   2be0a:	eba0 000b 	sub.w	r0, r0, fp
   2be0e:	01c0      	lsls	r0, r0, #7
   2be10:	9202      	str	r2, [sp, #8]
   2be12:	f7ef fa13 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   2be16:	4651      	mov	r1, sl
   2be18:	f7ef fa48 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      if (__a < __b)
   2be1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      int32 rescaled_diff = MultiplyByQuantizedMultiplierSmallerThanOneExp(
          128 * diff, inv_l2norm_multiplier, inv_l2norm_shift);
      int32 unclamped_output_val = 128 + rescaled_diff;
   2be20:	3080      	adds	r0, #128	; 0x80
   2be22:	2800      	cmp	r0, #0
   2be24:	dd07      	ble.n	2be36 <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xac>
      return __a;
   2be26:	28ff      	cmp	r0, #255	; 0xff
   2be28:	bfa8      	it	ge
   2be2a:	20ff      	movge	r0, #255	; 0xff
      int32 output_val =
          std::min(static_cast<int32>(255),
                   std::max(static_cast<int32>(0), unclamped_output_val));
      output_data[depth * i + c] = static_cast<uint8>(output_val);
   2be2c:	f803 0b01 	strb.w	r0, [r3], #1
    for (int c = 0; c < depth; c++) {
   2be30:	f108 0801 	add.w	r8, r8, #1
   2be34:	e7e3      	b.n	2bdfe <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x74>
      return __a;
   2be36:	2000      	movs	r0, #0
   2be38:	e7f8      	b.n	2be2c <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa2>
  for (int i = 0; i < outer_size; ++i) {
   2be3a:	3601      	adds	r6, #1
   2be3c:	442c      	add	r4, r5
   2be3e:	e7be      	b.n	2bdbe <_ZN6tflite13reference_ops15L2NormalizationERKNS_21L2NormalizationParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x34>
    }
  }
}
   2be40:	b007      	add	sp, #28
   2be42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002be46 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa>:
namespace tflite {
namespace reference_integer_ops {

inline void L2Normalization(int32_t input_zero_point, int32_t outer_size,
                            int32_t depth, const int8* input_data,
                            int8* output_data) {
   2be46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2be4a:	2500      	movs	r5, #0
   2be4c:	4680      	mov	r8, r0
   2be4e:	460f      	mov	r7, r1
   2be50:	4616      	mov	r6, r2
  static constexpr int8_t kMaxInt8 = std::numeric_limits<int8_t>::max();
  // The output scale must be in sync with Prepare().
  // Output is in 1/128 scale so the actual output range is nudged from [-1, 1]
  // to [-1, 127/128].
  static constexpr int32_t kOutputScale = 7;
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
   2be52:	46a9      	mov	r9, r5
                            int8* output_data) {
   2be54:	b087      	sub	sp, #28
   2be56:	9301      	str	r3, [sp, #4]
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
   2be58:	45b9      	cmp	r9, r7
   2be5a:	da4c      	bge.n	2bef6 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0xb0>
   2be5c:	9b01      	ldr	r3, [sp, #4]
   2be5e:	eb03 0b05 	add.w	fp, r3, r5
    // int32 = (int8 - int8) ^ 2.
    // ([-128, 127] - [-128, 127]) ^ 2 = [0, (2^8 - 1)^2] so the accumulator is
    // safe from overflowing in at least 2^16 steps.
    int32_t acc = 0;
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   2be62:	2300      	movs	r3, #0
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
   2be64:	4659      	mov	r1, fp
    int32_t acc = 0;
   2be66:	4618      	mov	r0, r3
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   2be68:	42b3      	cmp	r3, r6
   2be6a:	da07      	bge.n	2be7c <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x36>
      int32_t input =
          input_data[depth * outer_index + inner_index] - input_zero_point;
   2be6c:	f911 2b01 	ldrsb.w	r2, [r1], #1
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   2be70:	3301      	adds	r3, #1
      int32_t input =
   2be72:	eba2 0208 	sub.w	r2, r2, r8
      acc += input * input;
   2be76:	fb02 0002 	mla	r0, r2, r2, r0
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   2be7a:	e7f5      	b.n	2be68 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x22>
    }
    int32_t inv_l2norm_multiplier;
    int inv_l2norm_shift;
    GetInvSqrtQuantizedMultiplierExp(acc, kReverseShift, &inv_l2norm_multiplier,
   2be7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2be80:	ab05      	add	r3, sp, #20
   2be82:	aa04      	add	r2, sp, #16
   2be84:	f7ef fa38 	bl	1b2f8 <_ZN6tflite32GetInvSqrtQuantizedMultiplierExpEiiPiS0_>
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
      int32_t input =
          input_data[depth * outer_index + inner_index] - input_zero_point;

      // Rescale and downcast. Rescale is folded into the division.
      int32_t output_in_q24 = MultiplyByQuantizedMultiplier(
   2be88:	e9dd 2404 	ldrd	r2, r4, [sp, #16]
   2be8c:	1de3      	adds	r3, r4, #7
  int right_shift = shift > 0 ? 0 : -shift;
   2be8e:	f1c4 24ff 	rsb	r4, r4, #4278255360	; 0xff00ff00
   2be92:	2b00      	cmp	r3, #0
   2be94:	f504 047f 	add.w	r4, r4, #16711680	; 0xff0000
   2be98:	f104 04f9 	add.w	r4, r4, #249	; 0xf9
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   2be9c:	f04f 0a00 	mov.w	sl, #0
   2bea0:	bfc8      	it	gt
   2bea2:	2400      	movgt	r4, #0
  int left_shift = shift > 0 ? shift : 0;
   2bea4:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2bea8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2beaa:	9100      	str	r1, [sp, #0]
   2beac:	442b      	add	r3, r5
   2beae:	45b2      	cmp	sl, r6
   2beb0:	9303      	str	r3, [sp, #12]
   2beb2:	da1c      	bge.n	2beee <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0xa8>
          input_data[depth * outer_index + inner_index] - input_zero_point;
   2beb4:	f91b 0b01 	ldrsb.w	r0, [fp], #1
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   2beb8:	9b00      	ldr	r3, [sp, #0]
      int32_t input =
   2beba:	eba0 0008 	sub.w	r0, r0, r8
   2bebe:	4611      	mov	r1, r2
   2bec0:	4098      	lsls	r0, r3
   2bec2:	9202      	str	r2, [sp, #8]
   2bec4:	f7ef f9ba 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   2bec8:	4621      	mov	r1, r4
   2beca:	f7ef f9ef 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
      if (__a < __b)
   2bece:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2bed2:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
   2bed6:	db07      	blt.n	2bee8 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0xa2>
      return __a;
   2bed8:	287f      	cmp	r0, #127	; 0x7f
   2beda:	bfa8      	it	ge
   2bedc:	207f      	movge	r0, #127	; 0x7f
          input, inv_l2norm_multiplier, inv_l2norm_shift + kOutputScale);
      output_in_q24 =
          std::min(static_cast<int32_t>(kMaxInt8),
                   std::max(static_cast<int32_t>(kMinInt8), output_in_q24));
      output_data[depth * outer_index + inner_index] =
   2bede:	f803 0b01 	strb.w	r0, [r3], #1
    for (int inner_index = 0; inner_index < depth; ++inner_index) {
   2bee2:	f10a 0a01 	add.w	sl, sl, #1
   2bee6:	e7e2      	b.n	2beae <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x68>
      return __a;
   2bee8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2beec:	e7f7      	b.n	2bede <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x98>
  for (int outer_index = 0; outer_index < outer_size; ++outer_index) {
   2beee:	f109 0901 	add.w	r9, r9, #1
   2bef2:	4435      	add	r5, r6
   2bef4:	e7b0      	b.n	2be58 <_ZN6tflite21reference_integer_ops15L2NormalizationEiiiPKaPa+0x12>
          static_cast<int8>(output_in_q24);
    }
  }
}
   2bef6:	b007      	add	sp, #28
   2bef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002befc <_ZN6tflite3ops5micro7logical12_GLOBAL__N_19LogicalOrEbb>:
bool LogicalOr(bool x, bool y) { return x || y; }
   2befc:	2800      	cmp	r0, #0
   2befe:	bf08      	it	eq
   2bf00:	4608      	moveq	r0, r1
   2bf02:	4770      	bx	lr

0002bf04 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_110LogicalAndEbb>:
bool LogicalAnd(bool x, bool y) { return x && y; }
   2bf04:	2800      	cmp	r0, #0
   2bf06:	bf14      	ite	ne
   2bf08:	4608      	movne	r0, r1
   2bf0a:	2000      	moveq	r0, #0
   2bf0c:	4770      	bx	lr

0002bf0e <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>:
}

// R: Result type. T1: Input 1 type. T2: Input 2 type.
// TODO(renjieliu): Refactor other binary functions to use this one.
template <typename R, typename T1, typename T2>
inline void BinaryFunction(const RuntimeShape& input1_shape,
   2bf0e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bf12:	4699      	mov	r9, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   2bf14:	6807      	ldr	r7, [r0, #0]
   2bf16:	6813      	ldr	r3, [r2, #0]
   2bf18:	4604      	mov	r4, r0
   2bf1a:	429f      	cmp	r7, r3
   2bf1c:	4688      	mov	r8, r1
   2bf1e:	4616      	mov	r6, r2
   2bf20:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2bf22:	d001      	beq.n	2bf28 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1a>
   2bf24:	f004 ff7d 	bl	30e22 <abort>
  for (int i = 0; i < dims_count; ++i) {
   2bf28:	f04f 0a00 	mov.w	sl, #0
   2bf2c:	4557      	cmp	r7, sl
   2bf2e:	dd0d      	ble.n	2bf4c <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x3e>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   2bf30:	4651      	mov	r1, sl
   2bf32:	4620      	mov	r0, r4
   2bf34:	f7fb fb7c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2bf38:	4651      	mov	r1, sl
   2bf3a:	4683      	mov	fp, r0
   2bf3c:	4630      	mov	r0, r6
   2bf3e:	f7fb fb77 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2bf42:	4583      	cmp	fp, r0
   2bf44:	d1ee      	bne.n	2bf24 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   2bf46:	f10a 0a01 	add.w	sl, sl, #1
   2bf4a:	e7ef      	b.n	2bf2c <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   2bf4c:	682b      	ldr	r3, [r5, #0]
   2bf4e:	429f      	cmp	r7, r3
   2bf50:	d1e8      	bne.n	2bf24 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   2bf52:	f04f 0a00 	mov.w	sl, #0
   2bf56:	4557      	cmp	r7, sl
   2bf58:	dd0d      	ble.n	2bf76 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x68>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   2bf5a:	4651      	mov	r1, sl
   2bf5c:	4620      	mov	r0, r4
   2bf5e:	f7fb fb67 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2bf62:	4651      	mov	r1, sl
   2bf64:	4606      	mov	r6, r0
   2bf66:	4628      	mov	r0, r5
   2bf68:	f7fb fb62 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2bf6c:	4286      	cmp	r6, r0
   2bf6e:	d1d9      	bne.n	2bf24 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  for (int i = 0; i < dims_count; ++i) {
   2bf70:	f10a 0a01 	add.w	sl, sl, #1
   2bf74:	e7ef      	b.n	2bf56 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x48>
    for (int i = 0; i < size_; i++) {
   2bf76:	2300      	movs	r3, #0
    int buffer_size = 1;
   2bf78:	f04f 0a01 	mov.w	sl, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2bf7c:	2f05      	cmp	r7, #5
   2bf7e:	bfcc      	ite	gt
   2bf80:	6864      	ldrgt	r4, [r4, #4]
   2bf82:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   2bf84:	429f      	cmp	r7, r3
   2bf86:	dd05      	ble.n	2bf94 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x86>
      buffer_size *= dims_data[i];
   2bf88:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   2bf8c:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   2bf8e:	fb02 fa0a 	mul.w	sl, r2, sl
    for (int i = 0; i < size_; i++) {
   2bf92:	e7f7      	b.n	2bf84 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x76>
                           const T2* input2_data,
                           const RuntimeShape& output_shape, R* output_data,
                           R (*func)(T1, T2)) {
  const int flat_size =
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
  for (int i = 0; i < flat_size; ++i) {
   2bf94:	2400      	movs	r4, #0
   2bf96:	4554      	cmp	r4, sl
   2bf98:	da09      	bge.n	2bfae <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xa0>
    output_data[i] = func(input1_data[i], input2_data[i]);
   2bf9a:	f819 1004 	ldrb.w	r1, [r9, r4]
   2bf9e:	f818 0004 	ldrb.w	r0, [r8, r4]
   2bfa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2bfa4:	4798      	blx	r3
   2bfa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2bfa8:	5518      	strb	r0, [r3, r4]
  for (int i = 0; i < flat_size; ++i) {
   2bfaa:	3401      	adds	r4, #1
   2bfac:	e7f3      	b.n	2bf96 <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x88>
  }
}
   2bfae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002bfb2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>:
inline void BroadcastBinaryFunction4DSlow(
   2bfb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bfb6:	469a      	mov	sl, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2bfb8:	6803      	ldr	r3, [r0, #0]
inline void BroadcastBinaryFunction4DSlow(
   2bfba:	b0a7      	sub	sp, #156	; 0x9c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2bfbc:	2b04      	cmp	r3, #4
inline void BroadcastBinaryFunction4DSlow(
   2bfbe:	4614      	mov	r4, r2
   2bfc0:	4605      	mov	r5, r0
   2bfc2:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   2bfc4:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2bfc6:	dd01      	ble.n	2bfcc <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x1a>
   2bfc8:	f004 ff2b 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   2bfcc:	6823      	ldr	r3, [r4, #0]
   2bfce:	2b04      	cmp	r3, #4
   2bfd0:	dcfa      	bgt.n	2bfc8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   2bfd2:	6813      	ldr	r3, [r2, #0]
   2bfd4:	2b04      	cmp	r3, #4
   2bfd6:	dcf7      	bgt.n	2bfc8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
   2bfd8:	2301      	movs	r3, #1
   2bfda:	2104      	movs	r1, #4
   2bfdc:	a804      	add	r0, sp, #16
   2bfde:	f7fb fbbc 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2bfe2:	2301      	movs	r3, #1
   2bfe4:	462a      	mov	r2, r5
   2bfe6:	2104      	movs	r1, #4
   2bfe8:	a80a      	add	r0, sp, #40	; 0x28
   2bfea:	f7fb fbb6 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2bfee:	4622      	mov	r2, r4
  for (int i = 0; i < N; ++i) {
   2bff0:	2400      	movs	r4, #0
   2bff2:	2301      	movs	r3, #1
   2bff4:	2104      	movs	r1, #4
   2bff6:	a810      	add	r0, sp, #64	; 0x40
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   2bff8:	f10d 0858 	add.w	r8, sp, #88	; 0x58
   2bffc:	f7fb fbad 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   2c000:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   2c004:	4641      	mov	r1, r8
   2c006:	a80a      	add	r0, sp, #40	; 0x28
   2c008:	f7fb fd95 	bl	27b36 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   2c00c:	4659      	mov	r1, fp
   2c00e:	a810      	add	r0, sp, #64	; 0x40
   2c010:	f7fb fd91 	bl	27b36 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2c014:	2610      	movs	r6, #16
   2c016:	4627      	mov	r7, r4
    const int extent0 = extended_input0_shape.Dims(i);
   2c018:	4621      	mov	r1, r4
   2c01a:	a80a      	add	r0, sp, #40	; 0x28
   2c01c:	f7fb fb08 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   2c020:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   2c022:	4605      	mov	r5, r0
    const int extent1 = extended_input1_shape.Dims(i);
   2c024:	a810      	add	r0, sp, #64	; 0x40
   2c026:	f7fb fb03 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   2c02a:	4285      	cmp	r5, r0
   2c02c:	d005      	beq.n	2c03a <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x88>
      if (extent0 == 1) {
   2c02e:	2d01      	cmp	r5, #1
   2c030:	d166      	bne.n	2c100 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x14e>
        desc0_out->strides[i] = 0;
   2c032:	f848 7006 	str.w	r7, [r8, r6]
        desc0_out->extents[i] = extent1;
   2c036:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
  for (int i = 0; i < N; ++i) {
   2c03a:	3401      	adds	r4, #1
   2c03c:	2c04      	cmp	r4, #4
   2c03e:	f106 0604 	add.w	r6, r6, #4
   2c042:	d1e9      	bne.n	2c018 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x66>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   2c044:	a810      	add	r0, sp, #64	; 0x40
   2c046:	f7fb fae8 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   2c04a:	a80a      	add	r0, sp, #40	; 0x28
   2c04c:	f7fb fae5 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   2c050:	2400      	movs	r4, #0
   2c052:	2100      	movs	r1, #0
   2c054:	a804      	add	r0, sp, #16
   2c056:	f7fb faeb 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2c05a:	42a0      	cmp	r0, r4
   2c05c:	dd5f      	ble.n	2c11e <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16c>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   2c05e:	2700      	movs	r7, #0
   2c060:	f10d 0810 	add.w	r8, sp, #16
   2c064:	2101      	movs	r1, #1
   2c066:	4640      	mov	r0, r8
   2c068:	f7fb fae2 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2c06c:	42b8      	cmp	r0, r7
   2c06e:	dd54      	ble.n	2c11a <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x168>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   2c070:	f04f 0900 	mov.w	r9, #0
   2c074:	2102      	movs	r1, #2
   2c076:	4640      	mov	r0, r8
   2c078:	f7fb fada 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2c07c:	4548      	cmp	r0, r9
   2c07e:	dd4a      	ble.n	2c116 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x164>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2c080:	2500      	movs	r5, #0
   2c082:	2103      	movs	r1, #3
   2c084:	4640      	mov	r0, r8
   2c086:	f7fb fad3 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2c08a:	42a8      	cmp	r0, r5
   2c08c:	dd40      	ble.n	2c110 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x15e>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
   2c08e:	9904      	ldr	r1, [sp, #16]
   2c090:	2904      	cmp	r1, #4
   2c092:	d199      	bne.n	2bfc8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
   2c094:	2c00      	cmp	r4, #0
   2c096:	db97      	blt.n	2bfc8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   2c098:	9905      	ldr	r1, [sp, #20]
   2c09a:	428c      	cmp	r4, r1
   2c09c:	da94      	bge.n	2bfc8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
   2c09e:	2f00      	cmp	r7, #0
   2c0a0:	db92      	blt.n	2bfc8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   2c0a2:	9e06      	ldr	r6, [sp, #24]
   2c0a4:	42b7      	cmp	r7, r6
   2c0a6:	da8f      	bge.n	2bfc8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
   2c0a8:	f1b9 0f00 	cmp.w	r9, #0
   2c0ac:	db8c      	blt.n	2bfc8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   2c0ae:	9b07      	ldr	r3, [sp, #28]
   2c0b0:	4599      	cmp	r9, r3
   2c0b2:	da89      	bge.n	2bfc8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
   2c0b4:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
   2c0b8:	d086      	beq.n	2bfc8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
   2c0ba:	9808      	ldr	r0, [sp, #32]
   2c0bc:	4285      	cmp	r5, r0
   2c0be:	da83      	bge.n	2bfc8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
   2c0c0:	fb06 7604 	mla	r6, r6, r4, r7
   2c0c4:	fb03 9606 	mla	r6, r3, r6, r9
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   2c0c8:	463a      	mov	r2, r7
   2c0ca:	fb00 5606 	mla	r6, r0, r6, r5
   2c0ce:	464b      	mov	r3, r9
   2c0d0:	4621      	mov	r1, r4
   2c0d2:	9500      	str	r5, [sp, #0]
   2c0d4:	a816      	add	r0, sp, #88	; 0x58
   2c0d6:	f7fb fba3 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   2c0da:	464b      	mov	r3, r9
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   2c0dc:	4683      	mov	fp, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   2c0de:	463a      	mov	r2, r7
   2c0e0:	4621      	mov	r1, r4
   2c0e2:	9500      	str	r5, [sp, #0]
   2c0e4:	a81e      	add	r0, sp, #120	; 0x78
   2c0e6:	f7fb fb9b 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          output_data[out_idx] = func(in1_val, in2_val);
   2c0ea:	9b03      	ldr	r3, [sp, #12]
   2c0ec:	f81a 1000 	ldrb.w	r1, [sl, r0]
   2c0f0:	f813 000b 	ldrb.w	r0, [r3, fp]
   2c0f4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   2c0f6:	4798      	blx	r3
   2c0f8:	9b31      	ldr	r3, [sp, #196]	; 0xc4
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2c0fa:	3501      	adds	r5, #1
          output_data[out_idx] = func(in1_val, in2_val);
   2c0fc:	5598      	strb	r0, [r3, r6]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2c0fe:	e7c0      	b.n	2c082 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xd0>
        TFLITE_DCHECK_EQ(extent1, 1);
   2c100:	2801      	cmp	r0, #1
   2c102:	f47f af61 	bne.w	2bfc8 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x16>
        desc1_out->strides[i] = 0;
   2c106:	f84b 7006 	str.w	r7, [fp, r6]
        desc1_out->extents[i] = extent0;
   2c10a:	f84b 5024 	str.w	r5, [fp, r4, lsl #2]
   2c10e:	e794      	b.n	2c03a <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0x88>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   2c110:	f109 0901 	add.w	r9, r9, #1
   2c114:	e7ae      	b.n	2c074 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xc2>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   2c116:	3701      	adds	r7, #1
   2c118:	e7a2      	b.n	2c060 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xae>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   2c11a:	3401      	adds	r4, #1
   2c11c:	e799      	b.n	2c052 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E+0xa0>
  const RuntimeShape output_shape =
   2c11e:	a804      	add	r0, sp, #16
   2c120:	f7fb fa7b 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2c124:	b027      	add	sp, #156	; 0x9c
   2c126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c12a <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE>:
                         bool (*func)(bool, bool)) {
   2c12a:	b5f0      	push	{r4, r5, r6, r7, lr}
  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
   2c12c:	680b      	ldr	r3, [r1, #0]
   2c12e:	6884      	ldr	r4, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   2c130:	685d      	ldr	r5, [r3, #4]
   2c132:	689e      	ldr	r6, [r3, #8]
  return &context->tensors[node->outputs->data[index]];
   2c134:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   2c136:	eb04 1585 	add.w	r5, r4, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   2c13a:	685b      	ldr	r3, [r3, #4]
  return &context->tensors[node->inputs->data[index]];
   2c13c:	eb04 1686 	add.w	r6, r4, r6, lsl #6
  if (HaveSameShapes(input1, input2)) {
   2c140:	4631      	mov	r1, r6
   2c142:	4628      	mov	r0, r5
                         bool (*func)(bool, bool)) {
   2c144:	b097      	sub	sp, #92	; 0x5c
   2c146:	4617      	mov	r7, r2
  return &context->tensors[node->outputs->data[index]];
   2c148:	eb04 1483 	add.w	r4, r4, r3, lsl #6
  if (HaveSameShapes(input1, input2)) {
   2c14c:	f004 f80d 	bl	3016a <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   2c150:	4629      	mov	r1, r5
  if (HaveSameShapes(input1, input2)) {
   2c152:	b330      	cbz	r0, 2c1a2 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x78>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   2c154:	a804      	add	r0, sp, #16
   2c156:	f7fb faa5 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2c15a:	b105      	cbz	r5, 2c15e <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x34>
   2c15c:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(input2), GetTensorData<bool>(input2),
   2c15e:	4631      	mov	r1, r6
   2c160:	a80a      	add	r0, sp, #40	; 0x28
   2c162:	f7fb fa9f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2c166:	b106      	cbz	r6, 2c16a <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x40>
   2c168:	6876      	ldr	r6, [r6, #4]
        GetTensorShape(output), GetTensorData<bool>(output), func);
   2c16a:	4621      	mov	r1, r4
   2c16c:	a810      	add	r0, sp, #64	; 0x40
   2c16e:	f7fb fa99 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2c172:	b104      	cbz	r4, 2c176 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x4c>
   2c174:	6864      	ldr	r4, [r4, #4]
    reference_ops::BinaryFunction<bool, bool, bool>(
   2c176:	ab10      	add	r3, sp, #64	; 0x40
   2c178:	9300      	str	r3, [sp, #0]
   2c17a:	4629      	mov	r1, r5
   2c17c:	4633      	mov	r3, r6
   2c17e:	e9cd 4701 	strd	r4, r7, [sp, #4]
   2c182:	aa0a      	add	r2, sp, #40	; 0x28
   2c184:	a804      	add	r0, sp, #16
   2c186:	f7ff fec2 	bl	2bf0e <_ZN6tflite13reference_ops14BinaryFunctionIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>
        GetTensorShape(output), GetTensorData<bool>(output), func);
   2c18a:	a810      	add	r0, sp, #64	; 0x40
   2c18c:	f7fb fa45 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(input2), GetTensorData<bool>(input2),
   2c190:	a80a      	add	r0, sp, #40	; 0x28
   2c192:	f7fb fa42 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
        GetTensorShape(input1), GetTensorData<bool>(input1),
   2c196:	a804      	add	r0, sp, #16
   2c198:	f7fb fa3f 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2c19c:	2000      	movs	r0, #0
   2c19e:	b017      	add	sp, #92	; 0x5c
   2c1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        GetTensorShape(input1), GetTensorData<bool>(input1),
   2c1a2:	a804      	add	r0, sp, #16
   2c1a4:	f7fb fa7e 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2c1a8:	b105      	cbz	r5, 2c1ac <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x82>
   2c1aa:	686d      	ldr	r5, [r5, #4]
        GetTensorShape(input2), GetTensorData<bool>(input2),
   2c1ac:	4631      	mov	r1, r6
   2c1ae:	a80a      	add	r0, sp, #40	; 0x28
   2c1b0:	f7fb fa78 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2c1b4:	b106      	cbz	r6, 2c1b8 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x8e>
   2c1b6:	6876      	ldr	r6, [r6, #4]
        GetTensorShape(output), GetTensorData<bool>(output), func);
   2c1b8:	4621      	mov	r1, r4
   2c1ba:	a810      	add	r0, sp, #64	; 0x40
   2c1bc:	f7fb fa72 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2c1c0:	b104      	cbz	r4, 2c1c4 <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x9a>
   2c1c2:	6864      	ldr	r4, [r4, #4]
    reference_ops::BroadcastBinaryFunction4DSlow<bool, bool, bool>(
   2c1c4:	ab10      	add	r3, sp, #64	; 0x40
   2c1c6:	9300      	str	r3, [sp, #0]
   2c1c8:	4629      	mov	r1, r5
   2c1ca:	4633      	mov	r3, r6
   2c1cc:	e9cd 4701 	strd	r4, r7, [sp, #4]
   2c1d0:	aa0a      	add	r2, sp, #40	; 0x28
   2c1d2:	a804      	add	r0, sp, #16
   2c1d4:	f7ff feed 	bl	2bfb2 <_ZN6tflite13reference_ops29BroadcastBinaryFunction4DSlowIbbbEEvRKNS_12RuntimeShapeEPKT0_S4_PKT1_S4_PT_PFSB_S5_S8_E>
   2c1d8:	e7d7      	b.n	2c18a <_ZN6tflite3ops5micro7logical12_GLOBAL__N_111LogicalImplEP13TfLiteContextP10TfLiteNodePFbbbE+0x60>

0002c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
   2c1da:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   2c1dc:	2100      	movs	r1, #0
   2c1de:	f7ef f865 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
}
   2c1e2:	bd08      	pop	{r3, pc}

0002c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
   2c1e4:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   2c1e6:	f7ef f829 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
}
   2c1ea:	bd08      	pop	{r3, pc}

0002c1ec <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa>:
  static constexpr int32_t kOutputIntegerBits = 8;
  static constexpr int8_t kMinInt8 = std::numeric_limits<int8_t>::min();
  static constexpr int8_t kMaxInt8 = std::numeric_limits<int8_t>::max();
  static constexpr int32_t kOutputZeroPoint = -128;

  for (int i = 0; i < input_size; ++i) {
   2c1ec:	2b00      	cmp	r3, #0
                     int8_t* output_data) {
   2c1ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int right_shift = shift > 0 ? 0 : -shift;
   2c1f2:	f1c3 0800 	rsb	r8, r3, #0
   2c1f6:	4682      	mov	sl, r0
   2c1f8:	460f      	mov	r7, r1
   2c1fa:	4691      	mov	r9, r2
   2c1fc:	bfc8      	it	gt
   2c1fe:	f04f 0800 	movgt.w	r8, #0
  for (int i = 0; i < input_size; ++i) {
   2c202:	2400      	movs	r4, #0
                     int8_t* output_data) {
   2c204:	b089      	sub	sp, #36	; 0x24
    const int32_t input =
        static_cast<int32_t>(input_data[i]) - input_zero_point;
    if (input <= -input_range_radius) {
   2c206:	f1c1 0b00 	rsb	fp, r1, #0
  int left_shift = shift > 0 ? shift : 0;
   2c20a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
  for (int i = 0; i < input_size; ++i) {
   2c20e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c210:	429c      	cmp	r4, r3
   2c212:	da55      	bge.n	2c2c0 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0xd4>
        static_cast<int32_t>(input_data[i]) - input_zero_point;
   2c214:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c216:	5718      	ldrsb	r0, [r3, r4]
    const int32_t input =
   2c218:	eba0 000a 	sub.w	r0, r0, sl
    if (input <= -input_range_radius) {
   2c21c:	4583      	cmp	fp, r0
   2c21e:	db04      	blt.n	2c22a <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x3e>
      output_data[i] = kMinInt8;
   2c220:	2380      	movs	r3, #128	; 0x80
      int32_t output_in_q23 =
          RoundingDivideByPOT(output_in_q0, 31 - kOutputIntegerBits);
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
                                        static_cast<int32_t>(kMinInt8)),
                               static_cast<int32_t>(kMaxInt8));
      output_data[i] = static_cast<int8_t>(output_in_q23);
   2c222:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2c224:	5513      	strb	r3, [r2, r4]
  for (int i = 0; i < input_size; ++i) {
   2c226:	3401      	adds	r4, #1
   2c228:	e7f1      	b.n	2c20e <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x22>
    } else if (input >= input_range_radius) {
   2c22a:	42b8      	cmp	r0, r7
   2c22c:	db01      	blt.n	2c232 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x46>
      output_data[i] = kMaxInt8;
   2c22e:	237f      	movs	r3, #127	; 0x7f
   2c230:	e7f7      	b.n	2c222 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x36>
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
   2c232:	4649      	mov	r1, r9
   2c234:	40a8      	lsls	r0, r5
   2c236:	f7ef f801 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
   2c23a:	4641      	mov	r1, r8
   2c23c:	f7ef f836 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a ? BitNot(zero) : zero;
   2c240:	2800      	cmp	r0, #0
   2c242:	dc39      	bgt.n	2c2b8 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0xcc>
   2c244:	bf0c      	ite	eq
   2c246:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   2c24a:	2200      	movne	r2, #0
   2c24c:	2300      	movs	r3, #0
  return ~a;
   2c24e:	43d9      	mvns	r1, r3
  return -a;
   2c250:	4246      	negs	r6, r0
  return a & b;
   2c252:	400e      	ands	r6, r1
   2c254:	4018      	ands	r0, r3
  return a ^ b;
   2c256:	4070      	eors	r0, r6

// Returns logistic(x) = 1 / (1 + exp(-x)) for x > 0.
template <typename tRawType, int tIntegerBits>
FixedPoint<tRawType, 0> logistic_on_positive_values(
    FixedPoint<tRawType, tIntegerBits> a) {
  return one_over_one_plus_x_for_x_in_0_1(exp_on_negative_values(-a));
   2c258:	4240      	negs	r0, r0
   2c25a:	9203      	str	r2, [sp, #12]
  return a & b;
   2c25c:	9102      	str	r1, [sp, #8]
   2c25e:	9301      	str	r3, [sp, #4]
  return one_over_one_plus_x_for_x_in_0_1(exp_on_negative_values(-a));
   2c260:	f7ef fb22 	bl	1b8a8 <_ZN8gemmlowp22exp_on_negative_valuesIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   2c264:	f7ef fa5a 	bl	1b71c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
   2c268:	4606      	mov	r6, r0
  tRawType mask_if_zero = MaskIfZero(a);
  InputF abs_input = SelectUsingMask(mask_if_positive, a, -a);
  ResultF result_if_positive = logistic_on_positive_values(abs_input);
  ResultF result_if_negative = ResultF::One() - result_if_positive;
  const ResultF one_half =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(ResultF, 1 << 30, 0.5);
   2c26a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   2c26e:	f7ff ffb4 	bl	2c1da <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIiLi0EEEEENT_13ScalarRawTypeEi>
  return a - b;
   2c272:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
  return ~a;
   2c276:	9a03      	ldr	r2, [sp, #12]
  return a & b;
   2c278:	9b01      	ldr	r3, [sp, #4]
  return a - b;
   2c27a:	ebac 0c06 	sub.w	ip, ip, r6
  return a & b;
   2c27e:	401e      	ands	r6, r3
  return ~a;
   2c280:	43d3      	mvns	r3, r2
  return a & b;
   2c282:	9902      	ldr	r1, [sp, #8]
   2c284:	4010      	ands	r0, r2
   2c286:	ea0c 0101 	and.w	r1, ip, r1
  return a ^ b;
   2c28a:	404e      	eors	r6, r1
  return a & b;
   2c28c:	401e      	ands	r6, r3
          RoundingDivideByPOT(output_in_q0, 31 - kOutputIntegerBits);
   2c28e:	2117      	movs	r1, #23
   2c290:	4070      	eors	r0, r6
   2c292:	f7ef f80b 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                                        static_cast<int32_t>(kMinInt8)),
   2c296:	f06f 037f 	mvn.w	r3, #127	; 0x7f
                               static_cast<int32_t>(kMaxInt8));
   2c29a:	227f      	movs	r2, #127	; 0x7f
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
   2c29c:	3880      	subs	r0, #128	; 0x80
      if (__a < __b)
   2c29e:	4298      	cmp	r0, r3
                                        static_cast<int32_t>(kMinInt8)),
   2c2a0:	9306      	str	r3, [sp, #24]
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
   2c2a2:	9005      	str	r0, [sp, #20]
	return __b;
   2c2a4:	bfb4      	ite	lt
   2c2a6:	ab06      	addlt	r3, sp, #24
      return __a;
   2c2a8:	ab05      	addge	r3, sp, #20
                               static_cast<int32_t>(kMaxInt8));
   2c2aa:	9207      	str	r2, [sp, #28]
      if (__b < __a)
   2c2ac:	681a      	ldr	r2, [r3, #0]
   2c2ae:	2a7f      	cmp	r2, #127	; 0x7f
	return __b;
   2c2b0:	bfc8      	it	gt
   2c2b2:	ab07      	addgt	r3, sp, #28
      output_in_q23 = std::min(std::max(output_in_q23 + kOutputZeroPoint,
   2c2b4:	681b      	ldr	r3, [r3, #0]
   2c2b6:	e7b4      	b.n	2c222 <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x36>
  return a ? BitNot(zero) : zero;
   2c2b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c2bc:	2200      	movs	r2, #0
   2c2be:	e7c6      	b.n	2c24e <_ZN6tflite21reference_integer_ops8LogisticEiiiiiPKaPa+0x62>
    }
  }
}
   2c2c0:	b009      	add	sp, #36	; 0x24
   2c2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c2c6 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIfEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   2c2c6:	ee07 0a10 	vmov	s14, r0
   2c2ca:	ee07 1a90 	vmov	s15, r1
    return el1 > el2 ? el1 : el2;
   2c2ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
   2c2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  }
   2c2d6:	fe77 7a27 	vselgt.f32	s15, s14, s15
   2c2da:	ee17 0a90 	vmov	r0, s15
   2c2de:	4770      	bx	lr

0002c2e0 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIhEET_S6_S6_>:
   2c2e0:	4288      	cmp	r0, r1
   2c2e2:	bf38      	it	cc
   2c2e4:	4608      	movcc	r0, r1
   2c2e6:	4770      	bx	lr

0002c2e8 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIaEET_S6_S6_>:
   2c2e8:	4288      	cmp	r0, r1
   2c2ea:	bfb8      	it	lt
   2c2ec:	4608      	movlt	r0, r1
   2c2ee:	4770      	bx	lr

0002c2f0 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIiEET_S6_S6_>:
   2c2f0:	4288      	cmp	r0, r1
   2c2f2:	bfb8      	it	lt
   2c2f4:	4608      	movlt	r0, r1
   2c2f6:	4770      	bx	lr

0002c2f8 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MaximumOp2opIxEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   2c2f8:	b530      	push	{r4, r5, lr}
   2c2fa:	4614      	mov	r4, r2
   2c2fc:	461d      	mov	r5, r3
    return el1 > el2 ? el1 : el2;
   2c2fe:	460b      	mov	r3, r1
   2c300:	42a0      	cmp	r0, r4
   2c302:	eb73 0105 	sbcs.w	r1, r3, r5
   2c306:	4602      	mov	r2, r0
   2c308:	bfbc      	itt	lt
   2c30a:	462b      	movlt	r3, r5
   2c30c:	4622      	movlt	r2, r4
  }
   2c30e:	4619      	mov	r1, r3
   2c310:	4610      	mov	r0, r2
   2c312:	bd30      	pop	{r4, r5, pc}

0002c314 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIfEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   2c314:	ee07 0a10 	vmov	s14, r0
   2c318:	ee07 1a90 	vmov	s15, r1
    return el1 < el2 ? el1 : el2;
   2c31c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   2c320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  }
   2c324:	bf54      	ite	pl
   2c326:	ee17 0a90 	vmovpl	r0, s15
   2c32a:	ee17 0a10 	vmovmi	r0, s14
   2c32e:	4770      	bx	lr

0002c330 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIhEET_S6_S6_>:
   2c330:	4288      	cmp	r0, r1
   2c332:	bf28      	it	cs
   2c334:	4608      	movcs	r0, r1
   2c336:	4770      	bx	lr

0002c338 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIaEET_S6_S6_>:
   2c338:	4288      	cmp	r0, r1
   2c33a:	bfa8      	it	ge
   2c33c:	4608      	movge	r0, r1
   2c33e:	4770      	bx	lr

0002c340 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIiEET_S6_S6_>:
   2c340:	4288      	cmp	r0, r1
   2c342:	bfa8      	it	ge
   2c344:	4608      	movge	r0, r1
   2c346:	4770      	bx	lr

0002c348 <_ZN6tflite3ops5micro15maximum_minimum12_GLOBAL__N_19MinimumOp2opIxEET_S6_S6_>:
  static data_type op(data_type el1, data_type el2) {
   2c348:	b530      	push	{r4, r5, lr}
   2c34a:	4614      	mov	r4, r2
   2c34c:	461d      	mov	r5, r3
    return el1 < el2 ? el1 : el2;
   2c34e:	460b      	mov	r3, r1
   2c350:	4284      	cmp	r4, r0
   2c352:	eb75 0103 	sbcs.w	r1, r5, r3
   2c356:	4602      	mov	r2, r0
   2c358:	bfbc      	itt	lt
   2c35a:	462b      	movlt	r3, r5
   2c35c:	4622      	movlt	r2, r4
  }
   2c35e:	4619      	mov	r1, r3
   2c360:	4610      	mov	r0, r2
   2c362:	bd30      	pop	{r4, r5, pc}

0002c364 <_ZNK6tflite12RuntimeShapeeqERKS0_>:
  bool operator==(const RuntimeShape& comp) const {
   2c364:	b508      	push	{r3, lr}
    return this->size_ == comp.size_ &&
   2c366:	6802      	ldr	r2, [r0, #0]
   2c368:	680b      	ldr	r3, [r1, #0]
   2c36a:	429a      	cmp	r2, r3
   2c36c:	d10e      	bne.n	2c38c <_ZNK6tflite12RuntimeShapeeqERKS0_+0x28>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2c36e:	2a05      	cmp	r2, #5
   2c370:	bfcc      	ite	gt
   2c372:	6840      	ldrgt	r0, [r0, #4]
   2c374:	3004      	addle	r0, #4
   2c376:	2b05      	cmp	r3, #5
   2c378:	bfcc      	ite	gt
   2c37a:	6849      	ldrgt	r1, [r1, #4]
   2c37c:	3104      	addle	r1, #4
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
   2c37e:	0092      	lsls	r2, r2, #2
   2c380:	f004 fd64 	bl	30e4c <memcmp>
    return this->size_ == comp.size_ &&
   2c384:	fab0 f080 	clz	r0, r0
   2c388:	0940      	lsrs	r0, r0, #5
  }
   2c38a:	bd08      	pop	{r3, pc}
    return this->size_ == comp.size_ &&
   2c38c:	2000      	movs	r0, #0
   2c38e:	e7fc      	b.n	2c38a <_ZNK6tflite12RuntimeShapeeqERKS0_+0x26>

0002c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>:
inline int SubscriptToIndex(const NdArrayDesc<5>& desc, int indexes[5]) {
   2c390:	b530      	push	{r4, r5, lr}
  return indexes[0] * desc.strides[0] + indexes[1] * desc.strides[1] +
   2c392:	684a      	ldr	r2, [r1, #4]
   2c394:	6984      	ldr	r4, [r0, #24]
   2c396:	680b      	ldr	r3, [r1, #0]
   2c398:	4362      	muls	r2, r4
   2c39a:	6945      	ldr	r5, [r0, #20]
         indexes[2] * desc.strides[2] + indexes[3] * desc.strides[3] +
   2c39c:	6a04      	ldr	r4, [r0, #32]
   2c39e:	fb05 2203 	mla	r2, r5, r3, r2
   2c3a2:	68cb      	ldr	r3, [r1, #12]
   2c3a4:	fb04 2203 	mla	r2, r4, r3, r2
   2c3a8:	69c4      	ldr	r4, [r0, #28]
   2c3aa:	688b      	ldr	r3, [r1, #8]
         indexes[4] * desc.strides[4];
   2c3ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
         indexes[2] * desc.strides[2] + indexes[3] * desc.strides[3] +
   2c3ae:	fb04 2303 	mla	r3, r4, r3, r2
         indexes[4] * desc.strides[4];
   2c3b2:	690a      	ldr	r2, [r1, #16]
}
   2c3b4:	fb00 3002 	mla	r0, r0, r2, r3
   2c3b8:	bd30      	pop	{r4, r5, pc}

0002c3ba <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
   2c3ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c3bc:	4606      	mov	r6, r0
  for (int i = N - 1; i >= 0; --i) {
   2c3be:	2404      	movs	r4, #4
  int desc_stride = 1;
   2c3c0:	2701      	movs	r7, #1
   2c3c2:	f101 0510 	add.w	r5, r1, #16
    desc_out->extents[i] = input_shape.Dims(i);
   2c3c6:	4621      	mov	r1, r4
   2c3c8:	4630      	mov	r0, r6
   2c3ca:	f7fb f931 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2c3ce:	f845 0904 	str.w	r0, [r5], #-4
    desc_stride *= input_shape.Dims(i);
   2c3d2:	4621      	mov	r1, r4
    desc_out->strides[i] = desc_stride;
   2c3d4:	61af      	str	r7, [r5, #24]
    desc_stride *= input_shape.Dims(i);
   2c3d6:	4630      	mov	r0, r6
   2c3d8:	f7fb f92a 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int i = N - 1; i >= 0; --i) {
   2c3dc:	3c01      	subs	r4, #1
    desc_stride *= input_shape.Dims(i);
   2c3de:	fb00 f707 	mul.w	r7, r0, r7
  for (int i = N - 1; i >= 0; --i) {
   2c3e2:	d2f0      	bcs.n	2c3c6 <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0xc>
}
   2c3e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002c3e6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
inline void NdArrayDescsForElementwiseBroadcast(
   2c3e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c3ea:	460c      	mov	r4, r1
   2c3ec:	461e      	mov	r6, r3
  TFLITE_DCHECK(desc0_out != nullptr);
   2c3ee:	4615      	mov	r5, r2
inline void NdArrayDescsForElementwiseBroadcast(
   2c3f0:	b08d      	sub	sp, #52	; 0x34
  TFLITE_DCHECK(desc0_out != nullptr);
   2c3f2:	b90a      	cbnz	r2, 2c3f8 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x12>
   2c3f4:	f004 fd15 	bl	30e22 <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
   2c3f8:	2b00      	cmp	r3, #0
   2c3fa:	d0fb      	beq.n	2c3f4 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
    return RuntimeShape(new_shape_size, shape, 1);
   2c3fc:	4602      	mov	r2, r0
   2c3fe:	2301      	movs	r3, #1
   2c400:	2105      	movs	r1, #5
   2c402:	4668      	mov	r0, sp
   2c404:	f7fb f9a9 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2c408:	4622      	mov	r2, r4
  for (int i = 0; i < N; ++i) {
   2c40a:	2400      	movs	r4, #0
   2c40c:	2301      	movs	r3, #1
   2c40e:	2105      	movs	r1, #5
   2c410:	a806      	add	r0, sp, #24
   2c412:	f7fb f9a2 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
   2c416:	4629      	mov	r1, r5
   2c418:	4668      	mov	r0, sp
   2c41a:	f7ff ffce 	bl	2c3ba <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
   2c41e:	4631      	mov	r1, r6
   2c420:	a806      	add	r0, sp, #24
   2c422:	f7ff ffca 	bl	2c3ba <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2c426:	f04f 0814 	mov.w	r8, #20
   2c42a:	46a1      	mov	r9, r4
    const int extent0 = extended_input0_shape.Dims(i);
   2c42c:	4621      	mov	r1, r4
   2c42e:	4668      	mov	r0, sp
   2c430:	f7fb f8fe 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    const int extent1 = extended_input1_shape.Dims(i);
   2c434:	4621      	mov	r1, r4
    const int extent0 = extended_input0_shape.Dims(i);
   2c436:	4607      	mov	r7, r0
    const int extent1 = extended_input1_shape.Dims(i);
   2c438:	a806      	add	r0, sp, #24
   2c43a:	f7fb f8f9 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
    if (extent0 != extent1) {
   2c43e:	4287      	cmp	r7, r0
   2c440:	d005      	beq.n	2c44e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>
      if (extent0 == 1) {
   2c442:	2f01      	cmp	r7, #1
   2c444:	d111      	bne.n	2c46a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x84>
        desc0_out->strides[i] = 0;
   2c446:	f845 9008 	str.w	r9, [r5, r8]
        desc0_out->extents[i] = extent1;
   2c44a:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
  for (int i = 0; i < N; ++i) {
   2c44e:	3401      	adds	r4, #1
   2c450:	2c05      	cmp	r4, #5
   2c452:	f108 0804 	add.w	r8, r8, #4
   2c456:	d1e9      	bne.n	2c42c <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x46>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
   2c458:	a806      	add	r0, sp, #24
   2c45a:	f7fb f8de 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
   2c45e:	4668      	mov	r0, sp
   2c460:	f7fb f8db 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2c464:	b00d      	add	sp, #52	; 0x34
   2c466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        TFLITE_DCHECK_EQ(extent1, 1);
   2c46a:	2801      	cmp	r0, #1
   2c46c:	d1c2      	bne.n	2c3f4 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xe>
        desc1_out->strides[i] = 0;
   2c46e:	f846 9008 	str.w	r9, [r6, r8]
        desc1_out->extents[i] = extent0;
   2c472:	f846 7024 	str.w	r7, [r6, r4, lsl #2]
   2c476:	e7ea      	b.n	2c44e <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x68>

0002c478 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c47c:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c47e:	4606      	mov	r6, r0
   2c480:	460d      	mov	r5, r1
   2c482:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c484:	60d7      	str	r7, [r2, #12]
   2c486:	68e2      	ldr	r2, [r4, #12]
   2c488:	68f3      	ldr	r3, [r6, #12]
   2c48a:	429a      	cmp	r2, r3
   2c48c:	da2d      	bge.n	2c4ea <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x72>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c48e:	6127      	str	r7, [r4, #16]
   2c490:	6922      	ldr	r2, [r4, #16]
   2c492:	6933      	ldr	r3, [r6, #16]
   2c494:	429a      	cmp	r2, r3
   2c496:	da24      	bge.n	2c4e2 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6a>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
                   &output_desc);

    auto maxmin_func = [&](int indexes[N]) {
      output_data[SubscriptToIndex(output_desc, indexes)] =
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c498:	4621      	mov	r1, r4
   2c49a:	6928      	ldr	r0, [r5, #16]
   2c49c:	f7ff ff78 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c4a0:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c4a2:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c4a4:	69a8      	ldr	r0, [r5, #24]
   2c4a6:	f7ff ff73 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c4aa:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c4ac:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c4ae:	6868      	ldr	r0, [r5, #4]
   2c4b0:	f7ff ff6e 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2c4b4:	682b      	ldr	r3, [r5, #0]
   2c4b6:	681b      	ldr	r3, [r3, #0]
   2c4b8:	eb03 0880 	add.w	r8, r3, r0, lsl #2
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c4bc:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c4be:	681a      	ldr	r2, [r3, #0]
   2c4c0:	68eb      	ldr	r3, [r5, #12]
   2c4c2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
   2c4c6:	6818      	ldr	r0, [r3, #0]
   2c4c8:	68ab      	ldr	r3, [r5, #8]
   2c4ca:	eb00 0089 	add.w	r0, r0, r9, lsl #2
   2c4ce:	681b      	ldr	r3, [r3, #0]
   2c4d0:	6811      	ldr	r1, [r2, #0]
   2c4d2:	6800      	ldr	r0, [r0, #0]
   2c4d4:	4798      	blx	r3
   2c4d6:	6923      	ldr	r3, [r4, #16]
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c4d8:	f8c8 0000 	str.w	r0, [r8]
   2c4dc:	3301      	adds	r3, #1
   2c4de:	6123      	str	r3, [r4, #16]
   2c4e0:	e7d6      	b.n	2c490 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c4e2:	68e3      	ldr	r3, [r4, #12]
   2c4e4:	3301      	adds	r3, #1
   2c4e6:	60e3      	str	r3, [r4, #12]
   2c4e8:	e7cd      	b.n	2c486 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   2c4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002c4ee <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   2c4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c4f2:	b0ae      	sub	sp, #184	; 0xb8
   2c4f4:	9103      	str	r1, [sp, #12]
   2c4f6:	4611      	mov	r1, r2
   2c4f8:	4605      	mov	r5, r0
   2c4fa:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   2c4fc:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   2c4fe:	9201      	str	r2, [sp, #4]
   2c500:	f7ff ff30 	bl	2c364 <_ZNK6tflite12RuntimeShapeeqERKS0_>
   2c504:	9901      	ldr	r1, [sp, #4]
   2c506:	4604      	mov	r4, r0
   2c508:	b1b8      	cbz	r0, 2c53a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c50a:	4632      	mov	r2, r6
   2c50c:	4628      	mov	r0, r5
   2c50e:	f7fb f973 	bl	277f8 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   2c512:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c514:	4606      	mov	r6, r0
    for (int i = 0; i < flat_size; ++i) {
   2c516:	42b4      	cmp	r4, r6
   2c518:	da5f      	bge.n	2c5da <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xec>
      output_data[i] = op(input1_data[i], input2_data[i]);
   2c51a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   2c51c:	eb03 0584 	add.w	r5, r3, r4, lsl #2
   2c520:	9b02      	ldr	r3, [sp, #8]
   2c522:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   2c526:	9b03      	ldr	r3, [sp, #12]
   2c528:	6811      	ldr	r1, [r2, #0]
   2c52a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   2c52e:	6818      	ldr	r0, [r3, #0]
   2c530:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   2c532:	4798      	blx	r3
    for (int i = 0; i < flat_size; ++i) {
   2c534:	3401      	adds	r4, #1
      output_data[i] = op(input1_data[i], input2_data[i]);
   2c536:	6028      	str	r0, [r5, #0]
    for (int i = 0; i < flat_size; ++i) {
   2c538:	e7ed      	b.n	2c516 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   2c53a:	682b      	ldr	r3, [r5, #0]
   2c53c:	2b05      	cmp	r3, #5
   2c53e:	dd01      	ble.n	2c544 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x56>
   2c540:	f004 fc6f 	bl	30e22 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   2c544:	680b      	ldr	r3, [r1, #0]
   2c546:	2b05      	cmp	r3, #5
   2c548:	dcfa      	bgt.n	2c540 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x52>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   2c54a:	6833      	ldr	r3, [r6, #0]
   2c54c:	2b05      	cmp	r3, #5
   2c54e:	dcf7      	bgt.n	2c540 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x52>
    NdArrayDescsForElementwiseBroadcast(
   2c550:	af1a      	add	r7, sp, #104	; 0x68
   2c552:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2c556:	4628      	mov	r0, r5
   2c558:	463b      	mov	r3, r7
   2c55a:	4642      	mov	r2, r8
   2c55c:	f7ff ff43 	bl	2c3e6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   2c560:	ad24      	add	r5, sp, #144	; 0x90
   2c562:	2301      	movs	r3, #1
   2c564:	4632      	mov	r2, r6
   2c566:	2105      	movs	r1, #5
   2c568:	a809      	add	r0, sp, #36	; 0x24
   2c56a:	f7fb f8f6 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2c56e:	4629      	mov	r1, r5
   2c570:	a809      	add	r0, sp, #36	; 0x24
   2c572:	f7ff ff22 	bl	2c3ba <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2c576:	a809      	add	r0, sp, #36	; 0x24
   2c578:	f7fb f84f 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   2c57c:	ab35      	add	r3, sp, #212	; 0xd4
   2c57e:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   2c582:	ab36      	add	r3, sp, #216	; 0xd8
   2c584:	930b      	str	r3, [sp, #44]	; 0x2c
   2c586:	ab03      	add	r3, sp, #12
   2c588:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
  int indexes[N] = {0};
   2c58c:	2214      	movs	r2, #20
   2c58e:	ab02      	add	r3, sp, #8
   2c590:	4621      	mov	r1, r4
   2c592:	a804      	add	r0, sp, #16
   2c594:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
   2c598:	f004 fc8d 	bl	30eb6 <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c59c:	9a04      	ldr	r2, [sp, #16]
   2c59e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c5a0:	429a      	cmp	r2, r3
   2c5a2:	da1a      	bge.n	2c5da <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xec>
   2c5a4:	9405      	str	r4, [sp, #20]
   2c5a6:	9a05      	ldr	r2, [sp, #20]
   2c5a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2c5aa:	429a      	cmp	r2, r3
   2c5ac:	da11      	bge.n	2c5d2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe4>
   2c5ae:	9406      	str	r4, [sp, #24]
   2c5b0:	9a06      	ldr	r2, [sp, #24]
   2c5b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c5b4:	429a      	cmp	r2, r3
   2c5b6:	da08      	bge.n	2c5ca <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xdc>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   2c5b8:	4628      	mov	r0, r5
   2c5ba:	aa04      	add	r2, sp, #16
   2c5bc:	a909      	add	r1, sp, #36	; 0x24
   2c5be:	f7ff ff5b 	bl	2c478 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c5c2:	9b06      	ldr	r3, [sp, #24]
   2c5c4:	3301      	adds	r3, #1
   2c5c6:	9306      	str	r3, [sp, #24]
   2c5c8:	e7f2      	b.n	2c5b0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc2>
   2c5ca:	9b05      	ldr	r3, [sp, #20]
   2c5cc:	3301      	adds	r3, #1
   2c5ce:	9305      	str	r3, [sp, #20]
   2c5d0:	e7e9      	b.n	2c5a6 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb8>
   2c5d2:	9b04      	ldr	r3, [sp, #16]
   2c5d4:	3301      	adds	r3, #1
   2c5d6:	9304      	str	r3, [sp, #16]
   2c5d8:	e7e0      	b.n	2c59c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIfPFfffELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xae>
    };
    NDOpsHelper<N>(output_desc, maxmin_func);
  }
}
   2c5da:	b02e      	add	sp, #184	; 0xb8
   2c5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c5e0 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c5e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c5e4:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c5e6:	4606      	mov	r6, r0
   2c5e8:	460d      	mov	r5, r1
   2c5ea:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c5ec:	60d7      	str	r7, [r2, #12]
   2c5ee:	68e2      	ldr	r2, [r4, #12]
   2c5f0:	68f3      	ldr	r3, [r6, #12]
   2c5f2:	429a      	cmp	r2, r3
   2c5f4:	da2b      	bge.n	2c64e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6e>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c5f6:	6127      	str	r7, [r4, #16]
   2c5f8:	6922      	ldr	r2, [r4, #16]
   2c5fa:	6933      	ldr	r3, [r6, #16]
   2c5fc:	429a      	cmp	r2, r3
   2c5fe:	da22      	bge.n	2c646 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x66>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c600:	4621      	mov	r1, r4
   2c602:	6928      	ldr	r0, [r5, #16]
   2c604:	f7ff fec4 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c608:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c60a:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c60c:	69a8      	ldr	r0, [r5, #24]
   2c60e:	f7ff febf 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c612:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c614:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c616:	6868      	ldr	r0, [r5, #4]
   2c618:	f7ff feba 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2c61c:	682b      	ldr	r3, [r5, #0]
   2c61e:	4680      	mov	r8, r0
   2c620:	f8d3 b000 	ldr.w	fp, [r3]
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c624:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c626:	6819      	ldr	r1, [r3, #0]
   2c628:	68eb      	ldr	r3, [r5, #12]
   2c62a:	f811 100a 	ldrb.w	r1, [r1, sl]
   2c62e:	681a      	ldr	r2, [r3, #0]
   2c630:	68ab      	ldr	r3, [r5, #8]
   2c632:	f812 0009 	ldrb.w	r0, [r2, r9]
   2c636:	681b      	ldr	r3, [r3, #0]
   2c638:	4798      	blx	r3
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c63a:	f80b 0008 	strb.w	r0, [fp, r8]
   2c63e:	6923      	ldr	r3, [r4, #16]
   2c640:	3301      	adds	r3, #1
   2c642:	6123      	str	r3, [r4, #16]
   2c644:	e7d8      	b.n	2c5f8 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c646:	68e3      	ldr	r3, [r4, #12]
   2c648:	3301      	adds	r3, #1
   2c64a:	60e3      	str	r3, [r4, #12]
   2c64c:	e7cf      	b.n	2c5ee <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   2c64e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c652 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   2c652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c656:	b0ae      	sub	sp, #184	; 0xb8
   2c658:	9103      	str	r1, [sp, #12]
   2c65a:	4611      	mov	r1, r2
   2c65c:	4605      	mov	r5, r0
   2c65e:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   2c660:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   2c662:	9201      	str	r2, [sp, #4]
   2c664:	f7ff fe7e 	bl	2c364 <_ZNK6tflite12RuntimeShapeeqERKS0_>
   2c668:	9901      	ldr	r1, [sp, #4]
   2c66a:	4604      	mov	r4, r0
   2c66c:	b188      	cbz	r0, 2c692 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x40>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c66e:	4628      	mov	r0, r5
   2c670:	4632      	mov	r2, r6
   2c672:	f7fb f8c1 	bl	277f8 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   2c676:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c678:	4605      	mov	r5, r0
    for (int i = 0; i < flat_size; ++i) {
   2c67a:	42ac      	cmp	r4, r5
   2c67c:	da59      	bge.n	2c732 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe0>
      output_data[i] = op(input1_data[i], input2_data[i]);
   2c67e:	9b02      	ldr	r3, [sp, #8]
   2c680:	9e35      	ldr	r6, [sp, #212]	; 0xd4
   2c682:	5d19      	ldrb	r1, [r3, r4]
   2c684:	9b03      	ldr	r3, [sp, #12]
   2c686:	5d18      	ldrb	r0, [r3, r4]
   2c688:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   2c68a:	4798      	blx	r3
   2c68c:	5530      	strb	r0, [r6, r4]
    for (int i = 0; i < flat_size; ++i) {
   2c68e:	3401      	adds	r4, #1
   2c690:	e7f3      	b.n	2c67a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   2c692:	682b      	ldr	r3, [r5, #0]
   2c694:	2b05      	cmp	r3, #5
   2c696:	dd01      	ble.n	2c69c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4a>
   2c698:	f004 fbc3 	bl	30e22 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   2c69c:	680b      	ldr	r3, [r1, #0]
   2c69e:	2b05      	cmp	r3, #5
   2c6a0:	dcfa      	bgt.n	2c698 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   2c6a2:	6833      	ldr	r3, [r6, #0]
   2c6a4:	2b05      	cmp	r3, #5
   2c6a6:	dcf7      	bgt.n	2c698 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    NdArrayDescsForElementwiseBroadcast(
   2c6a8:	af1a      	add	r7, sp, #104	; 0x68
   2c6aa:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2c6ae:	4628      	mov	r0, r5
   2c6b0:	463b      	mov	r3, r7
   2c6b2:	4642      	mov	r2, r8
   2c6b4:	f7ff fe97 	bl	2c3e6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   2c6b8:	ad24      	add	r5, sp, #144	; 0x90
   2c6ba:	2301      	movs	r3, #1
   2c6bc:	4632      	mov	r2, r6
   2c6be:	2105      	movs	r1, #5
   2c6c0:	a809      	add	r0, sp, #36	; 0x24
   2c6c2:	f7fb f84a 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2c6c6:	4629      	mov	r1, r5
   2c6c8:	a809      	add	r0, sp, #36	; 0x24
   2c6ca:	f7ff fe76 	bl	2c3ba <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2c6ce:	a809      	add	r0, sp, #36	; 0x24
   2c6d0:	f7fa ffa3 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   2c6d4:	ab35      	add	r3, sp, #212	; 0xd4
   2c6d6:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   2c6da:	ab36      	add	r3, sp, #216	; 0xd8
   2c6dc:	930b      	str	r3, [sp, #44]	; 0x2c
   2c6de:	ab03      	add	r3, sp, #12
   2c6e0:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
  int indexes[N] = {0};
   2c6e4:	2214      	movs	r2, #20
   2c6e6:	ab02      	add	r3, sp, #8
   2c6e8:	4621      	mov	r1, r4
   2c6ea:	a804      	add	r0, sp, #16
   2c6ec:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
   2c6f0:	f004 fbe1 	bl	30eb6 <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c6f4:	9a04      	ldr	r2, [sp, #16]
   2c6f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c6f8:	429a      	cmp	r2, r3
   2c6fa:	da1a      	bge.n	2c732 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe0>
   2c6fc:	9405      	str	r4, [sp, #20]
   2c6fe:	9a05      	ldr	r2, [sp, #20]
   2c700:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2c702:	429a      	cmp	r2, r3
   2c704:	da11      	bge.n	2c72a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd8>
   2c706:	9406      	str	r4, [sp, #24]
   2c708:	9a06      	ldr	r2, [sp, #24]
   2c70a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c70c:	429a      	cmp	r2, r3
   2c70e:	da08      	bge.n	2c722 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd0>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   2c710:	4628      	mov	r0, r5
   2c712:	aa04      	add	r2, sp, #16
   2c714:	a909      	add	r1, sp, #36	; 0x24
   2c716:	f7ff ff63 	bl	2c5e0 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c71a:	9b06      	ldr	r3, [sp, #24]
   2c71c:	3301      	adds	r3, #1
   2c71e:	9306      	str	r3, [sp, #24]
   2c720:	e7f2      	b.n	2c708 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb6>
   2c722:	9b05      	ldr	r3, [sp, #20]
   2c724:	3301      	adds	r3, #1
   2c726:	9305      	str	r3, [sp, #20]
   2c728:	e7e9      	b.n	2c6fe <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xac>
   2c72a:	9b04      	ldr	r3, [sp, #16]
   2c72c:	3301      	adds	r3, #1
   2c72e:	9304      	str	r3, [sp, #16]
   2c730:	e7e0      	b.n	2c6f4 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIhPFhhhELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xa2>
}
   2c732:	b02e      	add	sp, #184	; 0xb8
   2c734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c738 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c73c:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c73e:	4606      	mov	r6, r0
   2c740:	460d      	mov	r5, r1
   2c742:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c744:	60d7      	str	r7, [r2, #12]
   2c746:	68e2      	ldr	r2, [r4, #12]
   2c748:	68f3      	ldr	r3, [r6, #12]
   2c74a:	429a      	cmp	r2, r3
   2c74c:	da2b      	bge.n	2c7a6 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6e>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c74e:	6127      	str	r7, [r4, #16]
   2c750:	6922      	ldr	r2, [r4, #16]
   2c752:	6933      	ldr	r3, [r6, #16]
   2c754:	429a      	cmp	r2, r3
   2c756:	da22      	bge.n	2c79e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x66>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c758:	4621      	mov	r1, r4
   2c75a:	6928      	ldr	r0, [r5, #16]
   2c75c:	f7ff fe18 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c760:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c762:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c764:	69a8      	ldr	r0, [r5, #24]
   2c766:	f7ff fe13 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c76a:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c76c:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c76e:	6868      	ldr	r0, [r5, #4]
   2c770:	f7ff fe0e 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2c774:	682b      	ldr	r3, [r5, #0]
   2c776:	4680      	mov	r8, r0
   2c778:	f8d3 b000 	ldr.w	fp, [r3]
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c77c:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c77e:	6819      	ldr	r1, [r3, #0]
   2c780:	68eb      	ldr	r3, [r5, #12]
   2c782:	f911 100a 	ldrsb.w	r1, [r1, sl]
   2c786:	681a      	ldr	r2, [r3, #0]
   2c788:	68ab      	ldr	r3, [r5, #8]
   2c78a:	f912 0009 	ldrsb.w	r0, [r2, r9]
   2c78e:	681b      	ldr	r3, [r3, #0]
   2c790:	4798      	blx	r3
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c792:	f80b 0008 	strb.w	r0, [fp, r8]
   2c796:	6923      	ldr	r3, [r4, #16]
   2c798:	3301      	adds	r3, #1
   2c79a:	6123      	str	r3, [r4, #16]
   2c79c:	e7d8      	b.n	2c750 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c79e:	68e3      	ldr	r3, [r4, #12]
   2c7a0:	3301      	adds	r3, #1
   2c7a2:	60e3      	str	r3, [r4, #12]
   2c7a4:	e7cf      	b.n	2c746 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   2c7a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c7aa <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   2c7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c7ae:	b0ae      	sub	sp, #184	; 0xb8
   2c7b0:	9103      	str	r1, [sp, #12]
   2c7b2:	4611      	mov	r1, r2
   2c7b4:	4605      	mov	r5, r0
   2c7b6:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   2c7b8:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   2c7ba:	9201      	str	r2, [sp, #4]
   2c7bc:	f7ff fdd2 	bl	2c364 <_ZNK6tflite12RuntimeShapeeqERKS0_>
   2c7c0:	9901      	ldr	r1, [sp, #4]
   2c7c2:	4604      	mov	r4, r0
   2c7c4:	b188      	cbz	r0, 2c7ea <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x40>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c7c6:	4628      	mov	r0, r5
   2c7c8:	4632      	mov	r2, r6
   2c7ca:	f7fb f815 	bl	277f8 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   2c7ce:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c7d0:	4605      	mov	r5, r0
    for (int i = 0; i < flat_size; ++i) {
   2c7d2:	42ac      	cmp	r4, r5
   2c7d4:	da59      	bge.n	2c88a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe0>
      output_data[i] = op(input1_data[i], input2_data[i]);
   2c7d6:	9b02      	ldr	r3, [sp, #8]
   2c7d8:	9e35      	ldr	r6, [sp, #212]	; 0xd4
   2c7da:	5719      	ldrsb	r1, [r3, r4]
   2c7dc:	9b03      	ldr	r3, [sp, #12]
   2c7de:	5718      	ldrsb	r0, [r3, r4]
   2c7e0:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   2c7e2:	4798      	blx	r3
   2c7e4:	5530      	strb	r0, [r6, r4]
    for (int i = 0; i < flat_size; ++i) {
   2c7e6:	3401      	adds	r4, #1
   2c7e8:	e7f3      	b.n	2c7d2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   2c7ea:	682b      	ldr	r3, [r5, #0]
   2c7ec:	2b05      	cmp	r3, #5
   2c7ee:	dd01      	ble.n	2c7f4 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4a>
   2c7f0:	f004 fb17 	bl	30e22 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   2c7f4:	680b      	ldr	r3, [r1, #0]
   2c7f6:	2b05      	cmp	r3, #5
   2c7f8:	dcfa      	bgt.n	2c7f0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   2c7fa:	6833      	ldr	r3, [r6, #0]
   2c7fc:	2b05      	cmp	r3, #5
   2c7fe:	dcf7      	bgt.n	2c7f0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
    NdArrayDescsForElementwiseBroadcast(
   2c800:	af1a      	add	r7, sp, #104	; 0x68
   2c802:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2c806:	4628      	mov	r0, r5
   2c808:	463b      	mov	r3, r7
   2c80a:	4642      	mov	r2, r8
   2c80c:	f7ff fdeb 	bl	2c3e6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   2c810:	ad24      	add	r5, sp, #144	; 0x90
   2c812:	2301      	movs	r3, #1
   2c814:	4632      	mov	r2, r6
   2c816:	2105      	movs	r1, #5
   2c818:	a809      	add	r0, sp, #36	; 0x24
   2c81a:	f7fa ff9e 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2c81e:	4629      	mov	r1, r5
   2c820:	a809      	add	r0, sp, #36	; 0x24
   2c822:	f7ff fdca 	bl	2c3ba <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2c826:	a809      	add	r0, sp, #36	; 0x24
   2c828:	f7fa fef7 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   2c82c:	ab35      	add	r3, sp, #212	; 0xd4
   2c82e:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   2c832:	ab36      	add	r3, sp, #216	; 0xd8
   2c834:	930b      	str	r3, [sp, #44]	; 0x2c
   2c836:	ab03      	add	r3, sp, #12
   2c838:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
  int indexes[N] = {0};
   2c83c:	2214      	movs	r2, #20
   2c83e:	ab02      	add	r3, sp, #8
   2c840:	4621      	mov	r1, r4
   2c842:	a804      	add	r0, sp, #16
   2c844:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
   2c848:	f004 fb35 	bl	30eb6 <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c84c:	9a04      	ldr	r2, [sp, #16]
   2c84e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c850:	429a      	cmp	r2, r3
   2c852:	da1a      	bge.n	2c88a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe0>
   2c854:	9405      	str	r4, [sp, #20]
   2c856:	9a05      	ldr	r2, [sp, #20]
   2c858:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2c85a:	429a      	cmp	r2, r3
   2c85c:	da11      	bge.n	2c882 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd8>
   2c85e:	9406      	str	r4, [sp, #24]
   2c860:	9a06      	ldr	r2, [sp, #24]
   2c862:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c864:	429a      	cmp	r2, r3
   2c866:	da08      	bge.n	2c87a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd0>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   2c868:	4628      	mov	r0, r5
   2c86a:	aa04      	add	r2, sp, #16
   2c86c:	a909      	add	r1, sp, #36	; 0x24
   2c86e:	f7ff ff63 	bl	2c738 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c872:	9b06      	ldr	r3, [sp, #24]
   2c874:	3301      	adds	r3, #1
   2c876:	9306      	str	r3, [sp, #24]
   2c878:	e7f2      	b.n	2c860 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb6>
   2c87a:	9b05      	ldr	r3, [sp, #20]
   2c87c:	3301      	adds	r3, #1
   2c87e:	9305      	str	r3, [sp, #20]
   2c880:	e7e9      	b.n	2c856 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xac>
   2c882:	9b04      	ldr	r3, [sp, #16]
   2c884:	3301      	adds	r3, #1
   2c886:	9304      	str	r3, [sp, #16]
   2c888:	e7e0      	b.n	2c84c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIaPFaaaELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xa2>
}
   2c88a:	b02e      	add	sp, #184	; 0xb8
   2c88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c890 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c894:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c896:	4606      	mov	r6, r0
   2c898:	460d      	mov	r5, r1
   2c89a:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c89c:	60d7      	str	r7, [r2, #12]
   2c89e:	68e2      	ldr	r2, [r4, #12]
   2c8a0:	68f3      	ldr	r3, [r6, #12]
   2c8a2:	429a      	cmp	r2, r3
   2c8a4:	da2b      	bge.n	2c8fe <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x6e>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c8a6:	6127      	str	r7, [r4, #16]
   2c8a8:	6922      	ldr	r2, [r4, #16]
   2c8aa:	6933      	ldr	r3, [r6, #16]
   2c8ac:	429a      	cmp	r2, r3
   2c8ae:	da22      	bge.n	2c8f6 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x66>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c8b0:	4621      	mov	r1, r4
   2c8b2:	6928      	ldr	r0, [r5, #16]
   2c8b4:	f7ff fd6c 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c8b8:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c8ba:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c8bc:	69a8      	ldr	r0, [r5, #24]
   2c8be:	f7ff fd67 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c8c2:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c8c4:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c8c6:	6868      	ldr	r0, [r5, #4]
   2c8c8:	f7ff fd62 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2c8cc:	682b      	ldr	r3, [r5, #0]
   2c8ce:	4680      	mov	r8, r0
   2c8d0:	f8d3 b000 	ldr.w	fp, [r3]
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2c8d4:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2c8d6:	6819      	ldr	r1, [r3, #0]
   2c8d8:	68eb      	ldr	r3, [r5, #12]
   2c8da:	f851 102a 	ldr.w	r1, [r1, sl, lsl #2]
   2c8de:	681a      	ldr	r2, [r3, #0]
   2c8e0:	68ab      	ldr	r3, [r5, #8]
   2c8e2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
   2c8e6:	681b      	ldr	r3, [r3, #0]
   2c8e8:	4798      	blx	r3
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2c8ea:	f84b 0028 	str.w	r0, [fp, r8, lsl #2]
   2c8ee:	6923      	ldr	r3, [r4, #16]
   2c8f0:	3301      	adds	r3, #1
   2c8f2:	6123      	str	r3, [r4, #16]
   2c8f4:	e7d8      	b.n	2c8a8 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c8f6:	68e3      	ldr	r3, [r4, #12]
   2c8f8:	3301      	adds	r3, #1
   2c8fa:	60e3      	str	r3, [r4, #12]
   2c8fc:	e7cf      	b.n	2c89e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   2c8fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c902 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   2c902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c906:	b0ae      	sub	sp, #184	; 0xb8
   2c908:	9103      	str	r1, [sp, #12]
   2c90a:	4611      	mov	r1, r2
   2c90c:	4605      	mov	r5, r0
   2c90e:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   2c910:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   2c912:	9201      	str	r2, [sp, #4]
   2c914:	f7ff fd26 	bl	2c364 <_ZNK6tflite12RuntimeShapeeqERKS0_>
   2c918:	9901      	ldr	r1, [sp, #4]
   2c91a:	4604      	mov	r4, r0
   2c91c:	b1a0      	cbz	r0, 2c948 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x46>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c91e:	4628      	mov	r0, r5
   2c920:	4632      	mov	r2, r6
   2c922:	f7fa ff69 	bl	277f8 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   2c926:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2c928:	4605      	mov	r5, r0
    for (int i = 0; i < flat_size; ++i) {
   2c92a:	42ac      	cmp	r4, r5
   2c92c:	da5c      	bge.n	2c9e8 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe6>
      output_data[i] = op(input1_data[i], input2_data[i]);
   2c92e:	9b02      	ldr	r3, [sp, #8]
   2c930:	9e35      	ldr	r6, [sp, #212]	; 0xd4
   2c932:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
   2c936:	9b03      	ldr	r3, [sp, #12]
   2c938:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2c93c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
   2c93e:	4798      	blx	r3
   2c940:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
    for (int i = 0; i < flat_size; ++i) {
   2c944:	3401      	adds	r4, #1
   2c946:	e7f0      	b.n	2c92a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   2c948:	682b      	ldr	r3, [r5, #0]
   2c94a:	2b05      	cmp	r3, #5
   2c94c:	dd01      	ble.n	2c952 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x50>
   2c94e:	f004 fa68 	bl	30e22 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   2c952:	680b      	ldr	r3, [r1, #0]
   2c954:	2b05      	cmp	r3, #5
   2c956:	dcfa      	bgt.n	2c94e <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   2c958:	6833      	ldr	r3, [r6, #0]
   2c95a:	2b05      	cmp	r3, #5
   2c95c:	dcf7      	bgt.n	2c94e <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x4c>
    NdArrayDescsForElementwiseBroadcast(
   2c95e:	af1a      	add	r7, sp, #104	; 0x68
   2c960:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2c964:	4628      	mov	r0, r5
   2c966:	463b      	mov	r3, r7
   2c968:	4642      	mov	r2, r8
   2c96a:	f7ff fd3c 	bl	2c3e6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   2c96e:	ad24      	add	r5, sp, #144	; 0x90
   2c970:	2301      	movs	r3, #1
   2c972:	4632      	mov	r2, r6
   2c974:	2105      	movs	r1, #5
   2c976:	a809      	add	r0, sp, #36	; 0x24
   2c978:	f7fa feef 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2c97c:	4629      	mov	r1, r5
   2c97e:	a809      	add	r0, sp, #36	; 0x24
   2c980:	f7ff fd1b 	bl	2c3ba <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2c984:	a809      	add	r0, sp, #36	; 0x24
   2c986:	f7fa fe48 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   2c98a:	ab35      	add	r3, sp, #212	; 0xd4
   2c98c:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   2c990:	ab36      	add	r3, sp, #216	; 0xd8
   2c992:	930b      	str	r3, [sp, #44]	; 0x2c
   2c994:	ab03      	add	r3, sp, #12
   2c996:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
  int indexes[N] = {0};
   2c99a:	2214      	movs	r2, #20
   2c99c:	ab02      	add	r3, sp, #8
   2c99e:	4621      	mov	r1, r4
   2c9a0:	a804      	add	r0, sp, #16
   2c9a2:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
   2c9a6:	f004 fa86 	bl	30eb6 <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c9aa:	9a04      	ldr	r2, [sp, #16]
   2c9ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2c9ae:	429a      	cmp	r2, r3
   2c9b0:	da1a      	bge.n	2c9e8 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe6>
   2c9b2:	9405      	str	r4, [sp, #20]
   2c9b4:	9a05      	ldr	r2, [sp, #20]
   2c9b6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2c9b8:	429a      	cmp	r2, r3
   2c9ba:	da11      	bge.n	2c9e0 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xde>
   2c9bc:	9406      	str	r4, [sp, #24]
   2c9be:	9a06      	ldr	r2, [sp, #24]
   2c9c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c9c2:	429a      	cmp	r2, r3
   2c9c4:	da08      	bge.n	2c9d8 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xd6>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   2c9c6:	4628      	mov	r0, r5
   2c9c8:	aa04      	add	r2, sp, #16
   2c9ca:	a909      	add	r1, sp, #36	; 0x24
   2c9cc:	f7ff ff60 	bl	2c890 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c9d0:	9b06      	ldr	r3, [sp, #24]
   2c9d2:	3301      	adds	r3, #1
   2c9d4:	9306      	str	r3, [sp, #24]
   2c9d6:	e7f2      	b.n	2c9be <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xbc>
   2c9d8:	9b05      	ldr	r3, [sp, #20]
   2c9da:	3301      	adds	r3, #1
   2c9dc:	9305      	str	r3, [sp, #20]
   2c9de:	e7e9      	b.n	2c9b4 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb2>
   2c9e0:	9b04      	ldr	r3, [sp, #16]
   2c9e2:	3301      	adds	r3, #1
   2c9e4:	9304      	str	r3, [sp, #16]
   2c9e6:	e7e0      	b.n	2c9aa <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIiPFiiiELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xa8>
}
   2c9e8:	b02e      	add	sp, #184	; 0xb8
   2c9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c9ee <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>:
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c9ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c9f2:	2700      	movs	r7, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2c9f4:	4606      	mov	r6, r0
   2c9f6:	460d      	mov	r5, r1
   2c9f8:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2c9fa:	60d7      	str	r7, [r2, #12]
   2c9fc:	68e2      	ldr	r2, [r4, #12]
   2c9fe:	68f3      	ldr	r3, [r6, #12]
   2ca00:	429a      	cmp	r2, r3
   2ca02:	da30      	bge.n	2ca66 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x78>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2ca04:	6127      	str	r7, [r4, #16]
   2ca06:	6922      	ldr	r2, [r4, #16]
   2ca08:	6933      	ldr	r3, [r6, #16]
   2ca0a:	429a      	cmp	r2, r3
   2ca0c:	da27      	bge.n	2ca5e <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x70>
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2ca0e:	4621      	mov	r1, r4
   2ca10:	6928      	ldr	r0, [r5, #16]
   2ca12:	f7ff fcbd 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2ca16:	4621      	mov	r1, r4
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2ca18:	4681      	mov	r9, r0
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2ca1a:	69a8      	ldr	r0, [r5, #24]
   2ca1c:	f7ff fcb8 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2ca20:	4621      	mov	r1, r4
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2ca22:	4682      	mov	sl, r0
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2ca24:	6868      	ldr	r0, [r5, #4]
   2ca26:	f7ff fcb3 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2ca2a:	682b      	ldr	r3, [r5, #0]
   2ca2c:	681b      	ldr	r3, [r3, #0]
   2ca2e:	eb03 08c0 	add.w	r8, r3, r0, lsl #3
             input2_data[SubscriptToIndex(desc2, indexes)]);
   2ca32:	696b      	ldr	r3, [r5, #20]
          op(input1_data[SubscriptToIndex(desc1, indexes)],
   2ca34:	681a      	ldr	r2, [r3, #0]
   2ca36:	68eb      	ldr	r3, [r5, #12]
   2ca38:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
   2ca3c:	6818      	ldr	r0, [r3, #0]
   2ca3e:	68ab      	ldr	r3, [r5, #8]
   2ca40:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
   2ca44:	e9d0 0100 	ldrd	r0, r1, [r0]
   2ca48:	f8d3 9000 	ldr.w	r9, [r3]
   2ca4c:	e9d2 2300 	ldrd	r2, r3, [r2]
   2ca50:	47c8      	blx	r9
   2ca52:	6923      	ldr	r3, [r4, #16]
      output_data[SubscriptToIndex(output_desc, indexes)] =
   2ca54:	e9c8 0100 	strd	r0, r1, [r8]
   2ca58:	3301      	adds	r3, #1
   2ca5a:	6123      	str	r3, [r4, #16]
   2ca5c:	e7d3      	b.n	2ca06 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0x18>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2ca5e:	68e3      	ldr	r3, [r4, #12]
   2ca60:	3301      	adds	r3, #1
   2ca62:	60e3      	str	r3, [r4, #12]
   2ca64:	e7ca      	b.n	2c9fc <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_+0xe>
}
   2ca66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002ca6a <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_>:
void MaximumMinimumBroadcastSlow(const RuntimeShape& unextended_input1_shape,
   2ca6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ca6e:	b0ae      	sub	sp, #184	; 0xb8
   2ca70:	9103      	str	r1, [sp, #12]
   2ca72:	4611      	mov	r1, r2
   2ca74:	4605      	mov	r5, r0
   2ca76:	9e34      	ldr	r6, [sp, #208]	; 0xd0
   2ca78:	9302      	str	r3, [sp, #8]
  if (unextended_input1_shape == unextended_input2_shape) {
   2ca7a:	9201      	str	r2, [sp, #4]
   2ca7c:	f7ff fc72 	bl	2c364 <_ZNK6tflite12RuntimeShapeeqERKS0_>
   2ca80:	9901      	ldr	r1, [sp, #4]
   2ca82:	4604      	mov	r4, r0
   2ca84:	b1d0      	cbz	r0, 2cabc <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x52>
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2ca86:	4632      	mov	r2, r6
   2ca88:	4628      	mov	r0, r5
   2ca8a:	f7fa feb5 	bl	277f8 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
    for (int i = 0; i < flat_size; ++i) {
   2ca8e:	2400      	movs	r4, #0
        MatchingElementsSize(unextended_input1_shape, unextended_input2_shape,
   2ca90:	4606      	mov	r6, r0
    for (int i = 0; i < flat_size; ++i) {
   2ca92:	42b4      	cmp	r4, r6
   2ca94:	da62      	bge.n	2cb5c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xf2>
      output_data[i] = op(input1_data[i], input2_data[i]);
   2ca96:	9b02      	ldr	r3, [sp, #8]
   2ca98:	9f36      	ldr	r7, [sp, #216]	; 0xd8
   2ca9a:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
   2ca9e:	9b03      	ldr	r3, [sp, #12]
   2caa0:	9d35      	ldr	r5, [sp, #212]	; 0xd4
   2caa2:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
   2caa6:	e9d1 0100 	ldrd	r0, r1, [r1]
   2caaa:	e9d2 2300 	ldrd	r2, r3, [r2]
   2caae:	47b8      	blx	r7
   2cab0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   2cab4:	e9c5 0100 	strd	r0, r1, [r5]
    for (int i = 0; i < flat_size; ++i) {
   2cab8:	3401      	adds	r4, #1
   2caba:	e7ea      	b.n	2ca92 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x28>
    TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), N);
   2cabc:	682b      	ldr	r3, [r5, #0]
   2cabe:	2b05      	cmp	r3, #5
   2cac0:	dd01      	ble.n	2cac6 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x5c>
   2cac2:	f004 f9ae 	bl	30e22 <abort>
    TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), N);
   2cac6:	680b      	ldr	r3, [r1, #0]
   2cac8:	2b05      	cmp	r3, #5
   2caca:	dcfa      	bgt.n	2cac2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x58>
    TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), N);
   2cacc:	6833      	ldr	r3, [r6, #0]
   2cace:	2b05      	cmp	r3, #5
   2cad0:	dcf7      	bgt.n	2cac2 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0x58>
    NdArrayDescsForElementwiseBroadcast(
   2cad2:	af1a      	add	r7, sp, #104	; 0x68
   2cad4:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   2cad8:	4628      	mov	r0, r5
   2cada:	463b      	mov	r3, r7
   2cadc:	4642      	mov	r2, r8
   2cade:	f7ff fc82 	bl	2c3e6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
    CopyDimsToDesc(RuntimeShape::ExtendedShape(N, unextended_output_shape),
   2cae2:	ad24      	add	r5, sp, #144	; 0x90
   2cae4:	2301      	movs	r3, #1
   2cae6:	4632      	mov	r2, r6
   2cae8:	2105      	movs	r1, #5
   2caea:	a809      	add	r0, sp, #36	; 0x24
   2caec:	f7fa fe35 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2caf0:	4629      	mov	r1, r5
   2caf2:	a809      	add	r0, sp, #36	; 0x24
   2caf4:	f7ff fc61 	bl	2c3ba <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2caf8:	a809      	add	r0, sp, #36	; 0x24
   2cafa:	f7fa fd8e 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
    auto maxmin_func = [&](int indexes[N]) {
   2cafe:	ab35      	add	r3, sp, #212	; 0xd4
   2cb00:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
   2cb04:	ab36      	add	r3, sp, #216	; 0xd8
   2cb06:	930b      	str	r3, [sp, #44]	; 0x2c
   2cb08:	ab03      	add	r3, sp, #12
   2cb0a:	e9cd 380c 	strd	r3, r8, [sp, #48]	; 0x30
  int indexes[N] = {0};
   2cb0e:	2214      	movs	r2, #20
   2cb10:	ab02      	add	r3, sp, #8
   2cb12:	4621      	mov	r1, r4
   2cb14:	a804      	add	r0, sp, #16
   2cb16:	e9cd 370e 	strd	r3, r7, [sp, #56]	; 0x38
   2cb1a:	f004 f9cc 	bl	30eb6 <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2cb1e:	9a04      	ldr	r2, [sp, #16]
   2cb20:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cb22:	429a      	cmp	r2, r3
   2cb24:	da1a      	bge.n	2cb5c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xf2>
   2cb26:	9405      	str	r4, [sp, #20]
   2cb28:	9a05      	ldr	r2, [sp, #20]
   2cb2a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2cb2c:	429a      	cmp	r2, r3
   2cb2e:	da11      	bge.n	2cb54 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xea>
   2cb30:	9406      	str	r4, [sp, #24]
   2cb32:	9a06      	ldr	r2, [sp, #24]
   2cb34:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2cb36:	429a      	cmp	r2, r3
   2cb38:	da08      	bge.n	2cb4c <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xe2>
    NDOpsHelperImpl<N, DIM + 1, Calc>(output, calc, indexes);
   2cb3a:	4628      	mov	r0, r5
   2cb3c:	aa04      	add	r2, sp, #16
   2cb3e:	a909      	add	r1, sp, #36	; 0x24
   2cb40:	f7ff ff55 	bl	2c9ee <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_T0_EUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SD_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2cb44:	9b06      	ldr	r3, [sp, #24]
   2cb46:	3301      	adds	r3, #1
   2cb48:	9306      	str	r3, [sp, #24]
   2cb4a:	e7f2      	b.n	2cb32 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xc8>
   2cb4c:	9b05      	ldr	r3, [sp, #20]
   2cb4e:	3301      	adds	r3, #1
   2cb50:	9305      	str	r3, [sp, #20]
   2cb52:	e7e9      	b.n	2cb28 <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xbe>
   2cb54:	9b04      	ldr	r3, [sp, #16]
   2cb56:	3301      	adds	r3, #1
   2cb58:	9304      	str	r3, [sp, #16]
   2cb5a:	e7e0      	b.n	2cb1e <_ZN6tflite13reference_ops27MaximumMinimumBroadcastSlowIxPFxxxELi5EEEvRKNS_12RuntimeShapeEPKT_S6_S9_S6_PS7_T0_+0xb4>
}
   2cb5c:	b02e      	add	sp, #184	; 0xb8
   2cb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cb62 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
    }
  }
}

template <typename T>
void BroadcastMul4DSlow(const ArithmeticParams& params,
   2cb62:	e92d 4ef0 	stmdb	sp!, {r4, r5, r6, r7, r9, sl, fp, lr}
   2cb66:	ed2d 8b04 	vpush	{d8-d9}
   2cb6a:	461d      	mov	r5, r3
                        T* output_data) {
  T output_activation_min;
  T output_activation_max;
  GetActivationParams(params, &output_activation_min, &output_activation_max);

  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2cb6c:	680b      	ldr	r3, [r1, #0]
void BroadcastMul4DSlow(const ArithmeticParams& params,
   2cb6e:	b098      	sub	sp, #96	; 0x60
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2cb70:	2b04      	cmp	r3, #4
void BroadcastMul4DSlow(const ArithmeticParams& params,
   2cb72:	4693      	mov	fp, r2
   2cb74:	460c      	mov	r4, r1
  *min = params.float_activation_min;
   2cb76:	ed90 9a0d 	vldr	s18, [r0, #52]	; 0x34
  *max = params.float_activation_max;
   2cb7a:	edd0 8a0e 	vldr	s17, [r0, #56]	; 0x38
   2cb7e:	9a25      	ldr	r2, [sp, #148]	; 0x94
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2cb80:	dd01      	ble.n	2cb86 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x24>
   2cb82:	f004 f94e 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   2cb86:	682b      	ldr	r3, [r5, #0]
   2cb88:	2b04      	cmp	r3, #4
   2cb8a:	dcfa      	bgt.n	2cb82 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x20>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   2cb8c:	6813      	ldr	r3, [r2, #0]
   2cb8e:	2b04      	cmp	r3, #4
   2cb90:	dcf7      	bgt.n	2cb82 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x20>
    return RuntimeShape(new_shape_size, shape, 1);
   2cb92:	2301      	movs	r3, #1
   2cb94:	2104      	movs	r1, #4
   2cb96:	a802      	add	r0, sp, #8
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   2cb98:	f10d 0a20 	add.w	sl, sp, #32
   2cb9c:	f7fa fddd 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2cba0:	4620      	mov	r0, r4
   2cba2:	4652      	mov	r2, sl
   2cba4:	4629      	mov	r1, r5
   2cba6:	ab10      	add	r3, sp, #64	; 0x40
   2cba8:	f7fa ffdb 	bl	27b62 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   2cbac:	2400      	movs	r4, #0
   2cbae:	2100      	movs	r1, #0
   2cbb0:	a802      	add	r0, sp, #8
   2cbb2:	f7fa fd3d 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cbb6:	42a0      	cmp	r0, r4
   2cbb8:	dd50      	ble.n	2cc5c <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfa>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   2cbba:	2500      	movs	r5, #0
   2cbbc:	2101      	movs	r1, #1
   2cbbe:	a802      	add	r0, sp, #8
   2cbc0:	f7fa fd36 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cbc4:	42a8      	cmp	r0, r5
   2cbc6:	dd47      	ble.n	2cc58 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf6>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   2cbc8:	2600      	movs	r6, #0
   2cbca:	2102      	movs	r1, #2
   2cbcc:	a802      	add	r0, sp, #8
   2cbce:	f7fa fd2f 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cbd2:	42b0      	cmp	r0, r6
   2cbd4:	dd3e      	ble.n	2cc54 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf2>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2cbd6:	2700      	movs	r7, #0
   2cbd8:	2103      	movs	r1, #3
   2cbda:	a802      	add	r0, sp, #8
   2cbdc:	f7fa fd28 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cbe0:	42b8      	cmp	r0, r7
   2cbe2:	dd35      	ble.n	2cc50 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xee>
          output_data[Offset(output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] *
   2cbe4:	4633      	mov	r3, r6
   2cbe6:	462a      	mov	r2, r5
   2cbe8:	4621      	mov	r1, r4
   2cbea:	9700      	str	r7, [sp, #0]
   2cbec:	4650      	mov	r0, sl
   2cbee:	f7fa fe17 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   2cbf2:	4633      	mov	r3, r6
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] *
   2cbf4:	4681      	mov	r9, r0
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   2cbf6:	462a      	mov	r2, r5
   2cbf8:	4621      	mov	r1, r4
   2cbfa:	9700      	str	r7, [sp, #0]
   2cbfc:	a810      	add	r0, sp, #64	; 0x40
   2cbfe:	f7fa fe0f 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2cc02:	9b24      	ldr	r3, [sp, #144]	; 0x90
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] *
   2cc04:	eb0b 0989 	add.w	r9, fp, r9, lsl #2
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
   2cc08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
              ActivationFunctionWithMinMax(
   2cc0c:	edd0 7a00 	vldr	s15, [r0]
   2cc10:	ed99 8a00 	vldr	s16, [r9]
   2cc14:	ee28 8a27 	vmul.f32	s16, s16, s15
          output_data[Offset(output_shape, b, y, x, c)] =
   2cc18:	4633      	mov	r3, r6
   2cc1a:	9700      	str	r7, [sp, #0]
   2cc1c:	462a      	mov	r2, r5
   2cc1e:	4621      	mov	r1, r4
   2cc20:	a802      	add	r0, sp, #8
   2cc22:	f7fa fdc7 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
	return __b;
   2cc26:	eeb4 8a49 	vcmp.f32	s16, s18
   2cc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2cc2e:	bf48      	it	mi
   2cc30:	eeb0 8a49 	vmovmi.f32	s16, s18
	return __b;
   2cc34:	eef4 8a48 	vcmp.f32	s17, s16
   2cc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2cc3c:	bf48      	it	mi
   2cc3e:	eeb0 8a68 	vmovmi.f32	s16, s17
   2cc42:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2cc44:	3701      	adds	r7, #1
          output_data[Offset(output_shape, b, y, x, c)] =
   2cc46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2cc4a:	ed80 8a00 	vstr	s16, [r0]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2cc4e:	e7c3      	b.n	2cbd8 <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x76>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   2cc50:	3601      	adds	r6, #1
   2cc52:	e7ba      	b.n	2cbca <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x68>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   2cc54:	3501      	adds	r5, #1
   2cc56:	e7b1      	b.n	2cbbc <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x5a>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   2cc58:	3401      	adds	r4, #1
   2cc5a:	e7a8      	b.n	2cbae <_ZN6tflite13reference_ops18BroadcastMul4DSlowIfEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x4c>
  const RuntimeShape output_shape =
   2cc5c:	a802      	add	r0, sp, #8
   2cc5e:	f7fa fcdc 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
                  output_activation_min, output_activation_max);
        }
      }
    }
  }
}
   2cc62:	b018      	add	sp, #96	; 0x60
   2cc64:	ecbd 8b04 	vpop	{d8-d9}
   2cc68:	e8bd 8ef0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, sl, fp, pc}

0002cc6c <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
    output_data[i] = output_offset + clamped_result;
  }
}

template <typename T>
inline void BroadcastMul4DSlow(
   2cc6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cc70:	b09b      	sub	sp, #108	; 0x6c
  ruy::profiler::ScopeLabel label("BroadcastMul4DSlow");

  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  // The input shapes are extended as part of NdArrayDesc initialization.
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2cc72:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
inline void BroadcastMul4DSlow(
   2cc76:	9203      	str	r2, [sp, #12]
   2cc78:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2cc7a:	4652      	mov	r2, sl
inline void BroadcastMul4DSlow(
   2cc7c:	4608      	mov	r0, r1
   2cc7e:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2cc80:	ab12      	add	r3, sp, #72	; 0x48
   2cc82:	f7fa ff6e 	bl	27b62 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   2cc86:	2301      	movs	r3, #1
   2cc88:	2104      	movs	r1, #4
   2cc8a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2cc8c:	a804      	add	r0, sp, #16
   2cc8e:	f7fa fd64 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);

  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2cc92:	2600      	movs	r6, #0
   2cc94:	2100      	movs	r1, #0
   2cc96:	a804      	add	r0, sp, #16
   2cc98:	f7fa fcca 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cc9c:	42b0      	cmp	r0, r6
   2cc9e:	dd53      	ble.n	2cd48 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xdc>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2cca0:	2700      	movs	r7, #0
   2cca2:	f10d 0810 	add.w	r8, sp, #16
   2cca6:	2101      	movs	r1, #1
   2cca8:	4640      	mov	r0, r8
   2ccaa:	f7fa fcc1 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2ccae:	42b8      	cmp	r0, r7
   2ccb0:	dd48      	ble.n	2cd44 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2ccb2:	f04f 0b00 	mov.w	fp, #0
   2ccb6:	2102      	movs	r1, #2
   2ccb8:	4640      	mov	r0, r8
   2ccba:	f7fa fcb9 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2ccbe:	4558      	cmp	r0, fp
   2ccc0:	dd3e      	ble.n	2cd40 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd4>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2ccc2:	f04f 0900 	mov.w	r9, #0
   2ccc6:	2103      	movs	r1, #3
   2ccc8:	4640      	mov	r0, r8
   2ccca:	f7fa fcb1 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2ccce:	4548      	cmp	r0, r9
   2ccd0:	dd33      	ble.n	2cd3a <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xce>
          const int32 input1_val =
              params.input1_offset +
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   2ccd2:	465b      	mov	r3, fp
   2ccd4:	463a      	mov	r2, r7
   2ccd6:	4631      	mov	r1, r6
   2ccd8:	f8cd 9000 	str.w	r9, [sp]
   2ccdc:	4650      	mov	r0, sl
   2ccde:	f7fa fd9f 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2cce2:	9b03      	ldr	r3, [sp, #12]
          const int32 input1_val =
   2cce4:	6862      	ldr	r2, [r4, #4]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   2cce6:	561d      	ldrsb	r5, [r3, r0]
          const int32 input2_val =
              params.input2_offset +
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   2cce8:	4631      	mov	r1, r6
          const int32 input1_val =
   2ccea:	4415      	add	r5, r2
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   2ccec:	465b      	mov	r3, fp
   2ccee:	463a      	mov	r2, r7
   2ccf0:	f8cd 9000 	str.w	r9, [sp]
   2ccf4:	a812      	add	r0, sp, #72	; 0x48
   2ccf6:	f7fa fd93 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2ccfa:	9b24      	ldr	r3, [sp, #144]	; 0x90
          const int32 input2_val =
   2ccfc:	68a2      	ldr	r2, [r4, #8]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   2ccfe:	5618      	ldrsb	r0, [r3, r0]
          const int32 input2_val =
   2cd00:	4410      	add	r0, r2
          const int32 unclamped_result =
              params.output_offset +
              MultiplyByQuantizedMultiplier(input1_val * input2_val,
   2cd02:	4368      	muls	r0, r5
   2cd04:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2cd08:	f7ec fb36 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              params.output_offset +
   2cd0c:	68e5      	ldr	r5, [r4, #12]
                                            params.output_multiplier,
                                            params.output_shift);
          const int32 clamped_output = std::min(
              params.quantized_activation_max,
              std::max(params.quantized_activation_min, unclamped_result));
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   2cd0e:	465b      	mov	r3, fp
              params.output_offset +
   2cd10:	4405      	add	r5, r0
   2cd12:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   2cd14:	f8cd 9000 	str.w	r9, [sp]
   2cd18:	4285      	cmp	r5, r0
   2cd1a:	bfb8      	it	lt
   2cd1c:	4605      	movlt	r5, r0
   2cd1e:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2cd20:	463a      	mov	r2, r7
   2cd22:	4285      	cmp	r5, r0
   2cd24:	bfa8      	it	ge
   2cd26:	4605      	movge	r5, r0
   2cd28:	4631      	mov	r1, r6
   2cd2a:	4640      	mov	r0, r8
   2cd2c:	f7fa fd42 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2cd30:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2cd32:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   2cd36:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2cd38:	e7c5      	b.n	2ccc6 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2cd3a:	f10b 0b01 	add.w	fp, fp, #1
   2cd3e:	e7ba      	b.n	2ccb6 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2cd40:	3701      	adds	r7, #1
   2cd42:	e7ae      	b.n	2cca2 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2cd44:	3601      	adds	r6, #1
   2cd46:	e7a5      	b.n	2cc94 <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x28>
  const RuntimeShape extended_output_shape =
   2cd48:	a804      	add	r0, sp, #16
   2cd4a:	f7fa fc66 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<T>(clamped_output);
        }
      }
    }
  }
}
   2cd4e:	b01b      	add	sp, #108	; 0x6c
   2cd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002cd54 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                               uint8* output_data) {
   2cd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cd58:	b09b      	sub	sp, #108	; 0x6c
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2cd5a:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
                               uint8* output_data) {
   2cd5e:	9203      	str	r2, [sp, #12]
   2cd60:	4604      	mov	r4, r0
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2cd62:	4652      	mov	r2, sl
                               uint8* output_data) {
   2cd64:	4608      	mov	r0, r1
   2cd66:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2cd68:	ab12      	add	r3, sp, #72	; 0x48
   2cd6a:	f7fa fefa 	bl	27b62 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   2cd6e:	2301      	movs	r3, #1
   2cd70:	2104      	movs	r1, #4
   2cd72:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2cd74:	a804      	add	r0, sp, #16
   2cd76:	f7fa fcf0 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2cd7a:	2600      	movs	r6, #0
   2cd7c:	2100      	movs	r1, #0
   2cd7e:	a804      	add	r0, sp, #16
   2cd80:	f7fa fc56 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cd84:	42b0      	cmp	r0, r6
   2cd86:	dd53      	ble.n	2ce30 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xdc>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2cd88:	2700      	movs	r7, #0
   2cd8a:	f10d 0810 	add.w	r8, sp, #16
   2cd8e:	2101      	movs	r1, #1
   2cd90:	4640      	mov	r0, r8
   2cd92:	f7fa fc4d 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cd96:	42b8      	cmp	r0, r7
   2cd98:	dd48      	ble.n	2ce2c <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xd8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2cd9a:	f04f 0b00 	mov.w	fp, #0
   2cd9e:	2102      	movs	r1, #2
   2cda0:	4640      	mov	r0, r8
   2cda2:	f7fa fc45 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cda6:	4558      	cmp	r0, fp
   2cda8:	dd3e      	ble.n	2ce28 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xd4>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2cdaa:	f04f 0900 	mov.w	r9, #0
   2cdae:	2103      	movs	r1, #3
   2cdb0:	4640      	mov	r0, r8
   2cdb2:	f7fa fc3d 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2cdb6:	4548      	cmp	r0, r9
   2cdb8:	dd33      	ble.n	2ce22 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xce>
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   2cdba:	465b      	mov	r3, fp
   2cdbc:	463a      	mov	r2, r7
   2cdbe:	4631      	mov	r1, r6
   2cdc0:	f8cd 9000 	str.w	r9, [sp]
   2cdc4:	4650      	mov	r0, sl
   2cdc6:	f7fa fd2b 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2cdca:	9b03      	ldr	r3, [sp, #12]
   2cdcc:	6862      	ldr	r2, [r4, #4]
   2cdce:	5c1d      	ldrb	r5, [r3, r0]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   2cdd0:	4631      	mov	r1, r6
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
   2cdd2:	4415      	add	r5, r2
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
   2cdd4:	465b      	mov	r3, fp
   2cdd6:	463a      	mov	r2, r7
   2cdd8:	f8cd 9000 	str.w	r9, [sp]
   2cddc:	a812      	add	r0, sp, #72	; 0x48
   2cdde:	f7fa fd1f 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2cde2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2cde4:	68a2      	ldr	r2, [r4, #8]
   2cde6:	5c18      	ldrb	r0, [r3, r0]
   2cde8:	4410      	add	r0, r2
              MultiplyByQuantizedMultiplier(input1_val * input2_val,
   2cdea:	4368      	muls	r0, r5
   2cdec:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2cdf0:	f7ec fac2 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
              params.output_offset +
   2cdf4:	68e5      	ldr	r5, [r4, #12]
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   2cdf6:	465b      	mov	r3, fp
              params.output_offset +
   2cdf8:	4405      	add	r5, r0
   2cdfa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   2cdfc:	f8cd 9000 	str.w	r9, [sp]
   2ce00:	4285      	cmp	r5, r0
   2ce02:	bfb8      	it	lt
   2ce04:	4605      	movlt	r5, r0
   2ce06:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2ce08:	463a      	mov	r2, r7
   2ce0a:	4285      	cmp	r5, r0
   2ce0c:	bfa8      	it	ge
   2ce0e:	4605      	movge	r5, r0
   2ce10:	4631      	mov	r1, r6
   2ce12:	4640      	mov	r0, r8
   2ce14:	f7fa fcce 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2ce18:	9b26      	ldr	r3, [sp, #152]	; 0x98
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2ce1a:	f109 0901 	add.w	r9, r9, #1
          output_data[Offset(extended_output_shape, b, y, x, c)] =
   2ce1e:	541d      	strb	r5, [r3, r0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2ce20:	e7c5      	b.n	2cdae <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x5a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2ce22:	f10b 0b01 	add.w	fp, fp, #1
   2ce26:	e7ba      	b.n	2cd9e <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x4a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2ce28:	3701      	adds	r7, #1
   2ce2a:	e7ae      	b.n	2cd8a <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x36>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2ce2c:	3601      	adds	r6, #1
   2ce2e:	e7a5      	b.n	2cd7c <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x28>
      RuntimeShape::ExtendedShape(4, output_shape);
   2ce30:	a804      	add	r0, sp, #16
   2ce32:	f7fa fbf2 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2ce36:	b01b      	add	sp, #108	; 0x6c
   2ce38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ce3c <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0>:
void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
   2ce3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ce40:	4616      	mov	r6, r2
   2ce42:	461d      	mov	r5, r3
  params->quantized_activation_min = min;
   2ce44:	e9d0 2300 	ldrd	r2, r3, [r0]
   2ce48:	b0c4      	sub	sp, #272	; 0x110
  params->quantized_activation_max = max;
   2ce4a:	e9cd 2335 	strd	r2, r3, [sp, #212]	; 0xd4
    op_params.input1_offset = -input1->params.zero_point;
   2ce4e:	690b      	ldr	r3, [r1, #16]
void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
   2ce50:	460f      	mov	r7, r1
    op_params.input1_offset = -input1->params.zero_point;
   2ce52:	425b      	negs	r3, r3
   2ce54:	932b      	str	r3, [sp, #172]	; 0xac
    op_params.input2_offset = -input2->params.zero_point;
   2ce56:	6933      	ldr	r3, [r6, #16]
   2ce58:	425b      	negs	r3, r3
   2ce5a:	932c      	str	r3, [sp, #176]	; 0xb0
    op_params.output_offset = output->params.zero_point;
   2ce5c:	692b      	ldr	r3, [r5, #16]
   2ce5e:	932d      	str	r3, [sp, #180]	; 0xb4
    op_params.output_multiplier = data->output_multiplier;
   2ce60:	6883      	ldr	r3, [r0, #8]
   2ce62:	932e      	str	r3, [sp, #184]	; 0xb8
    op_params.output_shift = data->output_shift;
   2ce64:	68c3      	ldr	r3, [r0, #12]
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   2ce66:	a824      	add	r0, sp, #144	; 0x90
    op_params.output_shift = data->output_shift;
   2ce68:	932f      	str	r3, [sp, #188]	; 0xbc
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   2ce6a:	f7fa fc1b 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2ce6e:	4631      	mov	r1, r6
   2ce70:	a81e      	add	r0, sp, #120	; 0x78
   2ce72:	f7fa fc17 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   2ce76:	aa2a      	add	r2, sp, #168	; 0xa8
   2ce78:	a91e      	add	r1, sp, #120	; 0x78
   2ce7a:	a824      	add	r0, sp, #144	; 0x90
   2ce7c:	f7fa fd89 	bl	27992 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   2ce80:	4604      	mov	r4, r0
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   2ce82:	a81e      	add	r0, sp, #120	; 0x78
   2ce84:	f7fa fbc9 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   2ce88:	a824      	add	r0, sp, #144	; 0x90
   2ce8a:	f7fa fbc6 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   2ce8e:	782b      	ldrb	r3, [r5, #0]
   2ce90:	2b09      	cmp	r3, #9
   2ce92:	d163      	bne.n	2cf5c <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x120>
        TF_LITE_MUL(reference_integer_ops, BroadcastMul4DSlow, int8_t);
   2ce94:	4639      	mov	r1, r7
   2ce96:	f10d 0860 	add.w	r8, sp, #96	; 0x60
   2ce9a:	a824      	add	r0, sp, #144	; 0x90
      if (need_broadcast) {
   2ce9c:	b314      	cbz	r4, 2cee4 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xa8>
        TF_LITE_MUL(reference_integer_ops, BroadcastMul4DSlow, int8_t);
   2ce9e:	f7fa fc01 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2cea2:	687a      	ldr	r2, [r7, #4]
   2cea4:	4631      	mov	r1, r6
   2cea6:	a81e      	add	r0, sp, #120	; 0x78
   2cea8:	9205      	str	r2, [sp, #20]
   2ceaa:	f7fa fbfb 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2ceae:	4629      	mov	r1, r5
   2ceb0:	4640      	mov	r0, r8
   2ceb2:	6874      	ldr	r4, [r6, #4]
   2ceb4:	f7fa fbf6 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2ceb8:	686b      	ldr	r3, [r5, #4]
   2ceba:	9a05      	ldr	r2, [sp, #20]
   2cebc:	e9cd 8301 	strd	r8, r3, [sp, #4]
   2cec0:	9400      	str	r4, [sp, #0]
   2cec2:	ab1e      	add	r3, sp, #120	; 0x78
   2cec4:	a924      	add	r1, sp, #144	; 0x90
   2cec6:	a82a      	add	r0, sp, #168	; 0xa8
   2cec8:	f7ff fed0 	bl	2cc6c <_ZN6tflite21reference_integer_ops18BroadcastMul4DSlowIaEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>
        TF_LITE_MUL(reference_integer_ops, Mul, int8_t);
   2cecc:	4640      	mov	r0, r8
        TF_LITE_MUL(reference_ops, BroadcastMul4DSlow, uint8_t);
   2cece:	f7fa fba4 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   2ced2:	a81e      	add	r0, sp, #120	; 0x78
   2ced4:	f7fa fba1 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   2ced8:	a824      	add	r0, sp, #144	; 0x90
        TF_LITE_MUL(reference_ops, Mul, uint8_t);
   2ceda:	f7fa fb9e 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2cede:	b044      	add	sp, #272	; 0x110
   2cee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        TF_LITE_MUL(reference_integer_ops, Mul, int8_t);
   2cee4:	f7fa fbde 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2cee8:	4631      	mov	r1, r6
   2ceea:	a81e      	add	r0, sp, #120	; 0x78
   2ceec:	687f      	ldr	r7, [r7, #4]
   2ceee:	f7fa fbd9 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2cef2:	4629      	mov	r1, r5
   2cef4:	4640      	mov	r0, r8
   2cef6:	6876      	ldr	r6, [r6, #4]
   2cef8:	f7fa fbd4 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2cefc:	e9dd 2335 	ldrd	r2, r3, [sp, #212]	; 0xd4
   2cf00:	429a      	cmp	r2, r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2cf02:	686d      	ldr	r5, [r5, #4]
   2cf04:	dd01      	ble.n	2cf0a <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xce>
   2cf06:	f003 ff8c 	bl	30e22 <abort>
  const int size_1 = shape.FlatSize();
   2cf0a:	a824      	add	r0, sp, #144	; 0x90
   2cf0c:	f7fa fc15 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2cf10:	4681      	mov	r9, r0
  const int size_2 = check_shape_0.FlatSize();
   2cf12:	a81e      	add	r0, sp, #120	; 0x78
   2cf14:	f7fa fc11 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2cf18:	4682      	mov	sl, r0
  const int size_3 = check_shape_1.FlatSize();
   2cf1a:	4640      	mov	r0, r8
   2cf1c:	f7fa fc0d 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
  TFLITE_CHECK_EQ(size_1, size_2);
   2cf20:	45d1      	cmp	r9, sl
   2cf22:	d1f0      	bne.n	2cf06 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xca>
  TFLITE_CHECK_EQ(size_2, size_3);
   2cf24:	4581      	cmp	r9, r0
   2cf26:	d1ee      	bne.n	2cf06 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xca>
  for (int i = 0; i < size; ++i) {
   2cf28:	454c      	cmp	r4, r9
   2cf2a:	dacf      	bge.n	2cecc <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x90>
    const int32 input1_val = params.input1_offset + input1_data[i];
   2cf2c:	573b      	ldrsb	r3, [r7, r4]
   2cf2e:	982b      	ldr	r0, [sp, #172]	; 0xac
    const int32 input2_val = params.input2_offset + input2_data[i];
   2cf30:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    const int32 input1_val = params.input1_offset + input1_data[i];
   2cf32:	4403      	add	r3, r0
    const int32 input2_val = params.input2_offset + input2_data[i];
   2cf34:	5730      	ldrsb	r0, [r6, r4]
   2cf36:	4410      	add	r0, r2
        MultiplyByQuantizedMultiplier(input1_val * input2_val,
   2cf38:	4358      	muls	r0, r3
   2cf3a:	e9dd 122e 	ldrd	r1, r2, [sp, #184]	; 0xb8
   2cf3e:	f7ec fa1b 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
        params.output_offset +
   2cf42:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   2cf44:	4403      	add	r3, r0
    output_data[i] = static_cast<T>(clamped_output);
   2cf46:	9835      	ldr	r0, [sp, #212]	; 0xd4
   2cf48:	4283      	cmp	r3, r0
   2cf4a:	bfb8      	it	lt
   2cf4c:	4603      	movlt	r3, r0
   2cf4e:	9836      	ldr	r0, [sp, #216]	; 0xd8
   2cf50:	4283      	cmp	r3, r0
   2cf52:	bfa8      	it	ge
   2cf54:	4603      	movge	r3, r0
   2cf56:	552b      	strb	r3, [r5, r4]
  for (int i = 0; i < size; ++i) {
   2cf58:	3401      	adds	r4, #1
   2cf5a:	e7e5      	b.n	2cf28 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xec>
    } else if (output->type == kTfLiteUInt8) {
   2cf5c:	2b03      	cmp	r3, #3
   2cf5e:	d1be      	bne.n	2cede <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xa2>
        TF_LITE_MUL(reference_ops, BroadcastMul4DSlow, uint8_t);
   2cf60:	4639      	mov	r1, r7
      if (need_broadcast) {
   2cf62:	b1d4      	cbz	r4, 2cf9a <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x15e>
        TF_LITE_MUL(reference_ops, BroadcastMul4DSlow, uint8_t);
   2cf64:	a824      	add	r0, sp, #144	; 0x90
   2cf66:	f7fa fb9d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2cf6a:	687a      	ldr	r2, [r7, #4]
   2cf6c:	4631      	mov	r1, r6
   2cf6e:	ac18      	add	r4, sp, #96	; 0x60
   2cf70:	a81e      	add	r0, sp, #120	; 0x78
   2cf72:	9205      	str	r2, [sp, #20]
   2cf74:	f7fa fb96 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2cf78:	4629      	mov	r1, r5
   2cf7a:	4620      	mov	r0, r4
   2cf7c:	6876      	ldr	r6, [r6, #4]
   2cf7e:	f7fa fb91 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2cf82:	686b      	ldr	r3, [r5, #4]
   2cf84:	a82a      	add	r0, sp, #168	; 0xa8
   2cf86:	e9cd 4301 	strd	r4, r3, [sp, #4]
   2cf8a:	9a05      	ldr	r2, [sp, #20]
   2cf8c:	9600      	str	r6, [sp, #0]
   2cf8e:	ab1e      	add	r3, sp, #120	; 0x78
   2cf90:	a924      	add	r1, sp, #144	; 0x90
   2cf92:	f7ff fedf 	bl	2cd54 <_ZN6tflite13reference_ops18BroadcastMul4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   2cf96:	4620      	mov	r0, r4
   2cf98:	e799      	b.n	2cece <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x92>
        TF_LITE_MUL(reference_ops, Mul, uint8_t);
   2cf9a:	a812      	add	r0, sp, #72	; 0x48
   2cf9c:	f7fa fb82 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2cfa0:	4631      	mov	r1, r6
   2cfa2:	a80c      	add	r0, sp, #48	; 0x30
   2cfa4:	687f      	ldr	r7, [r7, #4]
   2cfa6:	f7fa fb7d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2cfaa:	4629      	mov	r1, r5
   2cfac:	a806      	add	r0, sp, #24
   2cfae:	6876      	ldr	r6, [r6, #4]
   2cfb0:	f7fa fb78 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2cfb4:	e9dd 2335 	ldrd	r2, r3, [sp, #212]	; 0xd4
   2cfb8:	429a      	cmp	r2, r3
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2cfba:	686d      	ldr	r5, [r5, #4]
   2cfbc:	dca3      	bgt.n	2cf06 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0xca>
      MatchingFlatSize(input1_shape, input2_shape, output_shape);
   2cfbe:	aa06      	add	r2, sp, #24
   2cfc0:	a90c      	add	r1, sp, #48	; 0x30
   2cfc2:	a812      	add	r0, sp, #72	; 0x48
   2cfc4:	f7fb fbb1 	bl	2872a <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_S2_>
   2cfc8:	4680      	mov	r8, r0
  for (int i = 0; i < size; ++i) {
   2cfca:	45a0      	cmp	r8, r4
   2cfcc:	dd17      	ble.n	2cffe <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x1c2>
    const int32 input1_val = params.input1_offset + input1_data[i];
   2cfce:	5d3b      	ldrb	r3, [r7, r4]
   2cfd0:	982b      	ldr	r0, [sp, #172]	; 0xac
    const int32 input2_val = params.input2_offset + input2_data[i];
   2cfd2:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    const int32 input1_val = params.input1_offset + input1_data[i];
   2cfd4:	4403      	add	r3, r0
    const int32 input2_val = params.input2_offset + input2_data[i];
   2cfd6:	5d30      	ldrb	r0, [r6, r4]
   2cfd8:	4410      	add	r0, r2
        MultiplyByQuantizedMultiplier(input1_val * input2_val,
   2cfda:	4358      	muls	r0, r3
   2cfdc:	e9dd 122e 	ldrd	r1, r2, [sp, #184]	; 0xb8
   2cfe0:	f7ec f9ca 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
        params.output_offset +
   2cfe4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   2cfe6:	4403      	add	r3, r0
    output_data[i] = static_cast<uint8>(clamped_output);
   2cfe8:	9835      	ldr	r0, [sp, #212]	; 0xd4
   2cfea:	4283      	cmp	r3, r0
   2cfec:	bfb8      	it	lt
   2cfee:	4603      	movlt	r3, r0
   2cff0:	9836      	ldr	r0, [sp, #216]	; 0xd8
   2cff2:	4283      	cmp	r3, r0
   2cff4:	bfa8      	it	ge
   2cff6:	4603      	movge	r3, r0
   2cff8:	552b      	strb	r3, [r5, r4]
  for (int i = 0; i < size; ++i) {
   2cffa:	3401      	adds	r4, #1
   2cffc:	e7e5      	b.n	2cfca <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x18e>
   2cffe:	a806      	add	r0, sp, #24
   2d000:	f7fa fb0b 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   2d004:	a80c      	add	r0, sp, #48	; 0x30
   2d006:	f7fa fb08 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   2d00a:	a812      	add	r0, sp, #72	; 0x48
   2d00c:	e765      	b.n	2ceda <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0+0x9e>

0002d00e <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_>:
                   TfLiteTensor* output) {
   2d00e:	b410      	push	{r4}
   2d010:	4618      	mov	r0, r3
   2d012:	e9dd 1201 	ldrd	r1, r2, [sp, #4]
   2d016:	9b03      	ldr	r3, [sp, #12]
  if (output->type == kTfLiteInt8 || output->type == kTfLiteUInt8) {
   2d018:	781c      	ldrb	r4, [r3, #0]
   2d01a:	2c09      	cmp	r4, #9
   2d01c:	d001      	beq.n	2d022 <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x14>
   2d01e:	2c03      	cmp	r4, #3
   2d020:	d103      	bne.n	2d02a <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_+0x1c>
}
   2d022:	f85d 4b04 	ldr.w	r4, [sp], #4
   2d026:	f7ff bf09 	b.w	2ce3c <_ZN6tflite3ops5micro3mul13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteMulParamsPNS2_6OpDataEPK12TfLiteTensorSD_PSB_.part.0>
   2d02a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2d02e:	4770      	bx	lr

0002d030 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode>:
  PadContext(TfLiteContext* context, TfLiteNode* node) {
   2d030:	b5f0      	push	{r4, r5, r6, r7, lr}
    input = GetInput(context, node, 0);
   2d032:	6816      	ldr	r6, [r2, #0]
   2d034:	688b      	ldr	r3, [r1, #8]
  return &context->tensors[node->inputs->data[index]];
   2d036:	6875      	ldr	r5, [r6, #4]
   2d038:	68b1      	ldr	r1, [r6, #8]
   2d03a:	eb03 1585 	add.w	r5, r3, r5, lsl #6
   2d03e:	eb03 1181 	add.w	r1, r3, r1, lsl #6
  PadContext(TfLiteContext* context, TfLiteNode* node) {
   2d042:	4604      	mov	r4, r0
    input = GetInput(context, node, 0);
   2d044:	6045      	str	r5, [r0, #4]
    paddings = GetInput(context, node, 1);
   2d046:	6081      	str	r1, [r0, #8]
    constant_values = nullptr;
   2d048:	2000      	movs	r0, #0
    if (NumInputs(node) == 3) {
   2d04a:	6837      	ldr	r7, [r6, #0]
  PadContext(TfLiteContext* context, TfLiteNode* node) {
   2d04c:	b087      	sub	sp, #28
    if (NumInputs(node) == 3) {
   2d04e:	2f03      	cmp	r7, #3
    constant_values = nullptr;
   2d050:	6020      	str	r0, [r4, #0]
    if (NumInputs(node) == 3) {
   2d052:	d105      	bne.n	2d060 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x30>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
   2d054:	68f6      	ldr	r6, [r6, #12]
  const bool use_tensor = index < node->inputs->size &&
   2d056:	1c77      	adds	r7, r6, #1
    return &context->tensors[node->inputs->data[index]];
   2d058:	bf18      	it	ne
   2d05a:	eb03 1086 	addne.w	r0, r3, r6, lsl #6
      constant_values = GetOptionalInputTensor(context, node, 2);
   2d05e:	6020      	str	r0, [r4, #0]
  return &context->tensors[node->outputs->data[index]];
   2d060:	6852      	ldr	r2, [r2, #4]
    const int paddings_total = GetTensorShape(paddings).FlatSize();
   2d062:	4668      	mov	r0, sp
   2d064:	6852      	ldr	r2, [r2, #4]
   2d066:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    output = GetOutput(context, node, 0);
   2d06a:	60e3      	str	r3, [r4, #12]
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   2d06c:	68ab      	ldr	r3, [r5, #8]
    dims = NumDimensions(input);
   2d06e:	681b      	ldr	r3, [r3, #0]
   2d070:	6123      	str	r3, [r4, #16]
    resizing_category = ResizingCategory::kGenericResize;
   2d072:	2302      	movs	r3, #2
   2d074:	7523      	strb	r3, [r4, #20]
    const int paddings_total = GetTensorShape(paddings).FlatSize();
   2d076:	f7fa fb15 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2d07a:	4668      	mov	r0, sp
   2d07c:	f7fa fb5d 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2d080:	4605      	mov	r5, r0
   2d082:	4668      	mov	r0, sp
   2d084:	f7fa fac9 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
    const int32* paddings_data = GetTensorData<int32>(paddings);
   2d088:	68a2      	ldr	r2, [r4, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2d08a:	b18a      	cbz	r2, 2d0b0 <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x80>
   2d08c:	6853      	ldr	r3, [r2, #4]
        (paddings_data[0] == 0 && paddings_data[1] == 0) &&
   2d08e:	7d12      	ldrb	r2, [r2, #20]
   2d090:	2a01      	cmp	r2, #1
   2d092:	d10a      	bne.n	2d0aa <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7a>
    if (IsConstantTensor(paddings) && paddings_total == 8 &&
   2d094:	2d08      	cmp	r5, #8
   2d096:	d108      	bne.n	2d0aa <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7a>
   2d098:	6819      	ldr	r1, [r3, #0]
   2d09a:	b931      	cbnz	r1, 2d0aa <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7a>
        (paddings_data[0] == 0 && paddings_data[1] == 0) &&
   2d09c:	6859      	ldr	r1, [r3, #4]
   2d09e:	b921      	cbnz	r1, 2d0aa <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7a>
   2d0a0:	6999      	ldr	r1, [r3, #24]
   2d0a2:	b911      	cbnz	r1, 2d0aa <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7a>
        (paddings_data[6] == 0 && paddings_data[7] == 0)) {
   2d0a4:	69db      	ldr	r3, [r3, #28]
   2d0a6:	b903      	cbnz	r3, 2d0aa <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x7a>
      resizing_category = ResizingCategory::kImageStyle;
   2d0a8:	7522      	strb	r2, [r4, #20]
  }
   2d0aa:	4620      	mov	r0, r4
   2d0ac:	b007      	add	sp, #28
   2d0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d0b0:	4613      	mov	r3, r2
   2d0b2:	e7ec      	b.n	2d08e <_ZN6tflite3ops5micro3pad10PadContextC1EP13TfLiteContextP10TfLiteNode+0x5e>

0002d0b4 <_ZN6tflite3ops5micro14Register_PADV2Ev>:
   2d0b4:	b510      	push	{r4, lr}
   2d0b6:	4604      	mov	r4, r0
   2d0b8:	f7ef fc36 	bl	1c928 <_ZN6tflite3ops5micro12Register_PADEv>
   2d0bc:	4620      	mov	r0, r4
   2d0be:	bd10      	pop	{r4, pc}

0002d0c0 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   2d0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d0c4:	4606      	mov	r6, r0
   2d0c6:	b09f      	sub	sp, #124	; 0x7c
   2d0c8:	4614      	mov	r4, r2
   2d0ca:	461d      	mov	r5, r3
    return RuntimeShape(new_shape_size, shape, 1);
   2d0cc:	460a      	mov	r2, r1
   2d0ce:	2301      	movs	r3, #1
   2d0d0:	2104      	movs	r1, #4
   2d0d2:	a812      	add	r0, sp, #72	; 0x48
   2d0d4:	f7fa fb41 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2d0d8:	2301      	movs	r3, #1
   2d0da:	2104      	movs	r1, #4
   2d0dc:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2d0de:	a818      	add	r0, sp, #96	; 0x60
   2d0e0:	f7fa fb3b 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   2d0e4:	f996 0000 	ldrsb.w	r0, [r6]
   2d0e8:	2804      	cmp	r0, #4
   2d0ea:	dd01      	ble.n	2d0f0 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   2d0ec:	f003 fe99 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   2d0f0:	f996 1014 	ldrsb.w	r1, [r6, #20]
   2d0f4:	2904      	cmp	r1, #4
   2d0f6:	dcf9      	bgt.n	2d0ec <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d0f8:	f06f 0203 	mvn.w	r2, #3
    left_padding_copy[i] = 0;
   2d0fc:	2300      	movs	r3, #0
   2d0fe:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   2d102:	fb02 c200 	mla	r2, r2, r0, ip
   2d106:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   2d10a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d10e:	1d37      	adds	r7, r6, #4
   2d110:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d112:	4298      	cmp	r0, r3
   2d114:	dc13      	bgt.n	2d13e <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d116:	f06f 0203 	mvn.w	r2, #3
    right_padding_copy[i] = 0;
   2d11a:	2300      	movs	r3, #0
   2d11c:	a81e      	add	r0, sp, #120	; 0x78
   2d11e:	fb02 0201 	mla	r2, r2, r1, r0
   2d122:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   2d126:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d12a:	3618      	adds	r6, #24
   2d12c:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d12e:	4299      	cmp	r1, r3
   2d130:	dd0b      	ble.n	2d14a <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   2d132:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   2d136:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d13a:	3301      	adds	r3, #1
   2d13c:	e7f7      	b.n	2d12e <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   2d13e:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   2d142:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d146:	3301      	adds	r3, #1
   2d148:	e7e3      	b.n	2d112 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   2d14a:	2100      	movs	r1, #0
   2d14c:	a818      	add	r0, sp, #96	; 0x60
   2d14e:	f7fa fa6f 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   2d152:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   2d154:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   2d156:	a818      	add	r0, sp, #96	; 0x60
   2d158:	f7fa fa6a 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   2d15c:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   2d15e:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   2d160:	a818      	add	r0, sp, #96	; 0x60
   2d162:	f7fa fa65 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   2d166:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   2d168:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   2d16a:	a818      	add	r0, sp, #96	; 0x60
   2d16c:	f7fa fa60 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d170:	2600      	movs	r6, #0
  const int output_depth = ext_output_shape.Dims(3);
   2d172:	4607      	mov	r7, r0
  const int left_b_padding = left_padding_copy[0];
   2d174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  const T pad_value = *pad_value_ptr;
   2d176:	6829      	ldr	r1, [r5, #0]
  const int left_b_padding = left_padding_copy[0];
   2d178:	9301      	str	r3, [sp, #4]
  const int left_h_padding = left_padding_copy[1];
   2d17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d17c:	9302      	str	r3, [sp, #8]
  const int left_w_padding = left_padding_copy[2];
   2d17e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d180:	9303      	str	r3, [sp, #12]
  const int left_d_padding = left_padding_copy[3];
   2d182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d184:	9304      	str	r3, [sp, #16]
  const int right_w_padding = right_padding_copy[2];
   2d186:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2d188:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   2d18a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2d18c:	9306      	str	r3, [sp, #24]
   2d18e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   2d192:	009b      	lsls	r3, r3, #2
   2d194:	9307      	str	r3, [sp, #28]
              out_b >= output_batch - right_b_padding ||
   2d196:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d198:	eba8 0303 	sub.w	r3, r8, r3
   2d19c:	9309      	str	r3, [sp, #36]	; 0x24
              out_h >= output_height - right_h_padding ||
   2d19e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d1a0:	eba9 0e03 	sub.w	lr, r9, r3
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d1a4:	4546      	cmp	r6, r8
   2d1a6:	da39      	bge.n	2d21c <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15c>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d1a8:	f04f 0c00 	mov.w	ip, #0
   2d1ac:	45cc      	cmp	ip, r9
   2d1ae:	da33      	bge.n	2d218 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x158>
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d1b0:	2000      	movs	r0, #0
              out_w >= output_width - right_w_padding ||
   2d1b2:	9b05      	ldr	r3, [sp, #20]
   2d1b4:	ebaa 0b03 	sub.w	fp, sl, r3
              out_d >= output_depth - right_d_padding) {
   2d1b8:	9b06      	ldr	r3, [sp, #24]
   2d1ba:	1afb      	subs	r3, r7, r3
   2d1bc:	9308      	str	r3, [sp, #32]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d1be:	4550      	cmp	r0, sl
   2d1c0:	da27      	bge.n	2d212 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x152>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d1c2:	2500      	movs	r5, #0
   2d1c4:	42bd      	cmp	r5, r7
   2d1c6:	da1e      	bge.n	2d206 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
          if (out_b < left_b_padding ||
   2d1c8:	9b01      	ldr	r3, [sp, #4]
   2d1ca:	429e      	cmp	r6, r3
   2d1cc:	db19      	blt.n	2d202 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
   2d1ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d1d0:	42b3      	cmp	r3, r6
   2d1d2:	dd16      	ble.n	2d202 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_b >= output_batch - right_b_padding ||
   2d1d4:	9b02      	ldr	r3, [sp, #8]
   2d1d6:	459c      	cmp	ip, r3
   2d1d8:	db13      	blt.n	2d202 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h < left_h_padding ||
   2d1da:	45e6      	cmp	lr, ip
   2d1dc:	dd11      	ble.n	2d202 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h >= output_height - right_h_padding ||
   2d1de:	9b03      	ldr	r3, [sp, #12]
   2d1e0:	4298      	cmp	r0, r3
   2d1e2:	db0e      	blt.n	2d202 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w < left_w_padding ||
   2d1e4:	4583      	cmp	fp, r0
   2d1e6:	dd0c      	ble.n	2d202 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w >= output_width - right_w_padding ||
   2d1e8:	9b04      	ldr	r3, [sp, #16]
   2d1ea:	429d      	cmp	r5, r3
   2d1ec:	db09      	blt.n	2d202 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_d < left_d_padding ||
   2d1ee:	9b08      	ldr	r3, [sp, #32]
   2d1f0:	42ab      	cmp	r3, r5
   2d1f2:	dd06      	ble.n	2d202 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
            *out_ptr++ = *in_ptr++;
   2d1f4:	f854 3b04 	ldr.w	r3, [r4], #4
   2d1f8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   2d1fa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d1fe:	3501      	adds	r5, #1
   2d200:	e7e0      	b.n	2d1c4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x104>
            *out_ptr++ = pad_value;
   2d202:	460b      	mov	r3, r1
   2d204:	e7f8      	b.n	2d1f8 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x138>
   2d206:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   2d208:	9a07      	ldr	r2, [sp, #28]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d20a:	3001      	adds	r0, #1
   2d20c:	4413      	add	r3, r2
   2d20e:	9329      	str	r3, [sp, #164]	; 0xa4
   2d210:	e7d5      	b.n	2d1be <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfe>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d212:	f10c 0c01 	add.w	ip, ip, #1
   2d216:	e7c9      	b.n	2d1ac <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xec>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d218:	3601      	adds	r6, #1
   2d21a:	e7c3      	b.n	2d1a4 <_ZN6tflite13reference_ops7PadImplIiiEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe4>
  const RuntimeShape ext_output_shape =
   2d21c:	a818      	add	r0, sp, #96	; 0x60
   2d21e:	f7fa f9fc 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   2d222:	a812      	add	r0, sp, #72	; 0x48
   2d224:	f7fa f9f9 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2d228:	b01f      	add	sp, #124	; 0x7c
   2d22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d22e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   2d22e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d232:	4606      	mov	r6, r0
   2d234:	b09d      	sub	sp, #116	; 0x74
   2d236:	4614      	mov	r4, r2
   2d238:	461d      	mov	r5, r3
   2d23a:	460a      	mov	r2, r1
   2d23c:	2301      	movs	r3, #1
   2d23e:	2104      	movs	r1, #4
   2d240:	a810      	add	r0, sp, #64	; 0x40
   2d242:	f7fa fa8a 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2d246:	2301      	movs	r3, #1
   2d248:	2104      	movs	r1, #4
   2d24a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2d24c:	a816      	add	r0, sp, #88	; 0x58
   2d24e:	f7fa fa84 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   2d252:	f996 0000 	ldrsb.w	r0, [r6]
   2d256:	2804      	cmp	r0, #4
   2d258:	dd01      	ble.n	2d25e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   2d25a:	f003 fde2 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   2d25e:	f996 1014 	ldrsb.w	r1, [r6, #20]
   2d262:	2904      	cmp	r1, #4
   2d264:	dcf9      	bgt.n	2d25a <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d266:	f06f 0203 	mvn.w	r2, #3
    left_padding_copy[i] = 0;
   2d26a:	2300      	movs	r3, #0
   2d26c:	f10d 0c70 	add.w	ip, sp, #112	; 0x70
   2d270:	fb02 c200 	mla	r2, r2, r0, ip
   2d274:	e9cd 3308 	strd	r3, r3, [sp, #32]
   2d278:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d27c:	1d37      	adds	r7, r6, #4
   2d27e:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d280:	4298      	cmp	r0, r3
   2d282:	dc13      	bgt.n	2d2ac <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d284:	f06f 0203 	mvn.w	r2, #3
    right_padding_copy[i] = 0;
   2d288:	2300      	movs	r3, #0
   2d28a:	a81c      	add	r0, sp, #112	; 0x70
   2d28c:	fb02 0201 	mla	r2, r2, r1, r0
   2d290:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   2d294:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d298:	3618      	adds	r6, #24
   2d29a:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d29c:	4299      	cmp	r1, r3
   2d29e:	dd0b      	ble.n	2d2b8 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   2d2a0:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   2d2a4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d2a8:	3301      	adds	r3, #1
   2d2aa:	e7f7      	b.n	2d29c <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   2d2ac:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   2d2b0:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d2b4:	3301      	adds	r3, #1
   2d2b6:	e7e3      	b.n	2d280 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   2d2b8:	2100      	movs	r1, #0
   2d2ba:	a816      	add	r0, sp, #88	; 0x58
   2d2bc:	f7fa f9b8 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   2d2c0:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   2d2c2:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   2d2c4:	a816      	add	r0, sp, #88	; 0x58
   2d2c6:	f7fa f9b3 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   2d2ca:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   2d2cc:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   2d2ce:	a816      	add	r0, sp, #88	; 0x58
   2d2d0:	f7fa f9ae 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   2d2d4:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   2d2d6:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   2d2d8:	a816      	add	r0, sp, #88	; 0x58
   2d2da:	f7fa f9a9 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int left_b_padding = left_padding_copy[0];
   2d2de:	9b08      	ldr	r3, [sp, #32]
  const T pad_value = *pad_value_ptr;
   2d2e0:	ed95 7a00 	vldr	s14, [r5]
  const int left_b_padding = left_padding_copy[0];
   2d2e4:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   2d2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  const int output_depth = ext_output_shape.Dims(3);
   2d2e8:	4601      	mov	r1, r0
  const int left_h_padding = left_padding_copy[1];
   2d2ea:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   2d2ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
              out_h >= output_height - right_h_padding ||
   2d2ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  const int left_w_padding = left_padding_copy[2];
   2d2f0:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   2d2f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
              out_h >= output_height - right_h_padding ||
   2d2f4:	eba9 0c02 	sub.w	ip, r9, r2
  const int left_d_padding = left_padding_copy[3];
   2d2f8:	9303      	str	r3, [sp, #12]
  const int right_w_padding = right_padding_copy[2];
   2d2fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d2fc:	9304      	str	r3, [sp, #16]
  const int right_d_padding = right_padding_copy[3];
   2d2fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d300:	9305      	str	r3, [sp, #20]
   2d302:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   2d306:	009b      	lsls	r3, r3, #2
   2d308:	9306      	str	r3, [sp, #24]
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d30a:	2300      	movs	r3, #0
              out_b >= output_batch - right_b_padding ||
   2d30c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2d30e:	eba8 0000 	sub.w	r0, r8, r0
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d312:	4543      	cmp	r3, r8
   2d314:	da38      	bge.n	2d388 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15a>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d316:	2500      	movs	r5, #0
   2d318:	454d      	cmp	r5, r9
   2d31a:	da33      	bge.n	2d384 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x156>
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d31c:	2600      	movs	r6, #0
              out_w >= output_width - right_w_padding ||
   2d31e:	9a04      	ldr	r2, [sp, #16]
   2d320:	ebaa 0b02 	sub.w	fp, sl, r2
              out_d >= output_depth - right_d_padding) {
   2d324:	9a05      	ldr	r2, [sp, #20]
   2d326:	1a8a      	subs	r2, r1, r2
   2d328:	9207      	str	r2, [sp, #28]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d32a:	4556      	cmp	r6, sl
   2d32c:	da28      	bge.n	2d380 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x152>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d32e:	2700      	movs	r7, #0
   2d330:	f8dd e09c 	ldr.w	lr, [sp, #156]	; 0x9c
   2d334:	428f      	cmp	r7, r1
   2d336:	da1d      	bge.n	2d374 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
          if (out_b < left_b_padding ||
   2d338:	9a00      	ldr	r2, [sp, #0]
   2d33a:	4293      	cmp	r3, r2
   2d33c:	db17      	blt.n	2d36e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
   2d33e:	4298      	cmp	r0, r3
   2d340:	dd15      	ble.n	2d36e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_b >= output_batch - right_b_padding ||
   2d342:	9a01      	ldr	r2, [sp, #4]
   2d344:	4295      	cmp	r5, r2
   2d346:	db12      	blt.n	2d36e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_h < left_h_padding ||
   2d348:	45ac      	cmp	ip, r5
   2d34a:	dd10      	ble.n	2d36e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_h >= output_height - right_h_padding ||
   2d34c:	9a02      	ldr	r2, [sp, #8]
   2d34e:	4296      	cmp	r6, r2
   2d350:	db0d      	blt.n	2d36e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_w < left_w_padding ||
   2d352:	45b3      	cmp	fp, r6
   2d354:	dd0b      	ble.n	2d36e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_w >= output_width - right_w_padding ||
   2d356:	9a03      	ldr	r2, [sp, #12]
   2d358:	4297      	cmp	r7, r2
   2d35a:	db08      	blt.n	2d36e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
              out_d < left_d_padding ||
   2d35c:	9a07      	ldr	r2, [sp, #28]
   2d35e:	42ba      	cmp	r2, r7
   2d360:	dd05      	ble.n	2d36e <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x140>
            *out_ptr++ = *in_ptr++;
   2d362:	ecf4 7a01 	vldmia	r4!, {s15}
   2d366:	ecee 7a01 	vstmia	lr!, {s15}
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d36a:	3701      	adds	r7, #1
   2d36c:	e7e2      	b.n	2d334 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x106>
            *out_ptr++ = pad_value;
   2d36e:	eef0 7a47 	vmov.f32	s15, s14
   2d372:	e7f8      	b.n	2d366 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x138>
   2d374:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2d376:	9f06      	ldr	r7, [sp, #24]
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d378:	3601      	adds	r6, #1
   2d37a:	443a      	add	r2, r7
   2d37c:	9227      	str	r2, [sp, #156]	; 0x9c
   2d37e:	e7d4      	b.n	2d32a <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfc>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d380:	3501      	adds	r5, #1
   2d382:	e7c9      	b.n	2d318 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xea>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d384:	3301      	adds	r3, #1
   2d386:	e7c4      	b.n	2d312 <_ZN6tflite13reference_ops7PadImplIffEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe4>
  const RuntimeShape ext_output_shape =
   2d388:	a816      	add	r0, sp, #88	; 0x58
   2d38a:	f7fa f946 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   2d38e:	a810      	add	r0, sp, #64	; 0x40
   2d390:	f7fa f943 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2d394:	b01d      	add	sp, #116	; 0x74
   2d396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d39a <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   2d39a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d39e:	4606      	mov	r6, r0
   2d3a0:	b09f      	sub	sp, #124	; 0x7c
   2d3a2:	4614      	mov	r4, r2
   2d3a4:	461d      	mov	r5, r3
   2d3a6:	460a      	mov	r2, r1
   2d3a8:	2301      	movs	r3, #1
   2d3aa:	2104      	movs	r1, #4
   2d3ac:	a812      	add	r0, sp, #72	; 0x48
   2d3ae:	f7fa f9d4 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2d3b2:	2301      	movs	r3, #1
   2d3b4:	2104      	movs	r1, #4
   2d3b6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2d3b8:	a818      	add	r0, sp, #96	; 0x60
   2d3ba:	f7fa f9ce 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   2d3be:	f996 0000 	ldrsb.w	r0, [r6]
   2d3c2:	2804      	cmp	r0, #4
   2d3c4:	dd01      	ble.n	2d3ca <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   2d3c6:	f003 fd2c 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   2d3ca:	f996 1014 	ldrsb.w	r1, [r6, #20]
   2d3ce:	2904      	cmp	r1, #4
   2d3d0:	dcf9      	bgt.n	2d3c6 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d3d2:	f06f 0203 	mvn.w	r2, #3
    left_padding_copy[i] = 0;
   2d3d6:	2300      	movs	r3, #0
   2d3d8:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   2d3dc:	fb02 c200 	mla	r2, r2, r0, ip
   2d3e0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   2d3e4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d3e8:	1d37      	adds	r7, r6, #4
   2d3ea:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d3ec:	4298      	cmp	r0, r3
   2d3ee:	dc13      	bgt.n	2d418 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d3f0:	f06f 0203 	mvn.w	r2, #3
    right_padding_copy[i] = 0;
   2d3f4:	2300      	movs	r3, #0
   2d3f6:	a81e      	add	r0, sp, #120	; 0x78
   2d3f8:	fb02 0201 	mla	r2, r2, r1, r0
   2d3fc:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   2d400:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d404:	3618      	adds	r6, #24
   2d406:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d408:	4299      	cmp	r1, r3
   2d40a:	dd0b      	ble.n	2d424 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   2d40c:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   2d410:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d414:	3301      	adds	r3, #1
   2d416:	e7f7      	b.n	2d408 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   2d418:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   2d41c:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d420:	3301      	adds	r3, #1
   2d422:	e7e3      	b.n	2d3ec <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   2d424:	2100      	movs	r1, #0
   2d426:	a818      	add	r0, sp, #96	; 0x60
   2d428:	f7fa f902 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   2d42c:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   2d42e:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   2d430:	a818      	add	r0, sp, #96	; 0x60
   2d432:	f7fa f8fd 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   2d436:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   2d438:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   2d43a:	a818      	add	r0, sp, #96	; 0x60
   2d43c:	f7fa f8f8 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   2d440:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   2d442:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   2d444:	a818      	add	r0, sp, #96	; 0x60
   2d446:	f7fa f8f3 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d44a:	2600      	movs	r6, #0
  const int output_depth = ext_output_shape.Dims(3);
   2d44c:	4607      	mov	r7, r0
  const int left_b_padding = left_padding_copy[0];
   2d44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  const T pad_value = *pad_value_ptr;
   2d450:	7829      	ldrb	r1, [r5, #0]
  const int left_b_padding = left_padding_copy[0];
   2d452:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   2d454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d456:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   2d458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d45a:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   2d45c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d45e:	9303      	str	r3, [sp, #12]
  const int right_h_padding = right_padding_copy[1];
   2d460:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d462:	9304      	str	r3, [sp, #16]
  const int right_w_padding = right_padding_copy[2];
   2d464:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2d466:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   2d468:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2d46a:	9306      	str	r3, [sp, #24]
              out_b >= output_batch - right_b_padding ||
   2d46c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d46e:	eba8 0303 	sub.w	r3, r8, r3
   2d472:	9308      	str	r3, [sp, #32]
   2d474:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   2d478:	9309      	str	r3, [sp, #36]	; 0x24
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d47a:	4546      	cmp	r6, r8
   2d47c:	da3b      	bge.n	2d4f6 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15c>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d47e:	f04f 0c00 	mov.w	ip, #0
              out_h >= output_height - right_h_padding ||
   2d482:	9b04      	ldr	r3, [sp, #16]
   2d484:	eba9 0e03 	sub.w	lr, r9, r3
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d488:	45cc      	cmp	ip, r9
   2d48a:	da32      	bge.n	2d4f2 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x158>
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d48c:	2000      	movs	r0, #0
              out_w >= output_width - right_w_padding ||
   2d48e:	9b05      	ldr	r3, [sp, #20]
   2d490:	ebaa 0b03 	sub.w	fp, sl, r3
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d494:	4550      	cmp	r0, sl
   2d496:	da29      	bge.n	2d4ec <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x152>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d498:	2500      	movs	r5, #0
              out_d >= output_depth - right_d_padding) {
   2d49a:	9b06      	ldr	r3, [sp, #24]
   2d49c:	1afb      	subs	r3, r7, r3
   2d49e:	9307      	str	r3, [sp, #28]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d4a0:	42bd      	cmp	r5, r7
   2d4a2:	da1d      	bge.n	2d4e0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x146>
          if (out_b < left_b_padding ||
   2d4a4:	9b00      	ldr	r3, [sp, #0]
   2d4a6:	429e      	cmp	r6, r3
   2d4a8:	db18      	blt.n	2d4dc <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
   2d4aa:	9b08      	ldr	r3, [sp, #32]
   2d4ac:	42b3      	cmp	r3, r6
   2d4ae:	dd15      	ble.n	2d4dc <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_b >= output_batch - right_b_padding ||
   2d4b0:	9b01      	ldr	r3, [sp, #4]
   2d4b2:	459c      	cmp	ip, r3
   2d4b4:	db12      	blt.n	2d4dc <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h < left_h_padding ||
   2d4b6:	45e6      	cmp	lr, ip
   2d4b8:	dd10      	ble.n	2d4dc <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_h >= output_height - right_h_padding ||
   2d4ba:	9b02      	ldr	r3, [sp, #8]
   2d4bc:	4298      	cmp	r0, r3
   2d4be:	db0d      	blt.n	2d4dc <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w < left_w_padding ||
   2d4c0:	4583      	cmp	fp, r0
   2d4c2:	dd0b      	ble.n	2d4dc <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_w >= output_width - right_w_padding ||
   2d4c4:	9b03      	ldr	r3, [sp, #12]
   2d4c6:	429d      	cmp	r5, r3
   2d4c8:	db08      	blt.n	2d4dc <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
              out_d < left_d_padding ||
   2d4ca:	9b07      	ldr	r3, [sp, #28]
   2d4cc:	42ab      	cmp	r3, r5
   2d4ce:	dd05      	ble.n	2d4dc <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x142>
            *out_ptr++ = *in_ptr++;
   2d4d0:	f814 3b01 	ldrb.w	r3, [r4], #1
   2d4d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   2d4d6:	5553      	strb	r3, [r2, r5]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d4d8:	3501      	adds	r5, #1
   2d4da:	e7e1      	b.n	2d4a0 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x106>
            *out_ptr++ = pad_value;
   2d4dc:	460b      	mov	r3, r1
   2d4de:	e7f9      	b.n	2d4d4 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x13a>
   2d4e0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   2d4e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d4e4:	3001      	adds	r0, #1
   2d4e6:	4413      	add	r3, r2
   2d4e8:	9329      	str	r3, [sp, #164]	; 0xa4
   2d4ea:	e7d3      	b.n	2d494 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfa>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d4ec:	f10c 0c01 	add.w	ip, ip, #1
   2d4f0:	e7ca      	b.n	2d488 <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xee>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d4f2:	3601      	adds	r6, #1
   2d4f4:	e7c1      	b.n	2d47a <_ZN6tflite13reference_ops7PadImplIhhEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe0>
  const RuntimeShape ext_output_shape =
   2d4f6:	a818      	add	r0, sp, #96	; 0x60
   2d4f8:	f7fa f88f 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   2d4fc:	a812      	add	r0, sp, #72	; 0x48
   2d4fe:	f7fa f88c 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2d502:	b01f      	add	sp, #124	; 0x7c
   2d504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d508 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_>:
inline void PadImpl(const tflite::PadParams& op_params,
   2d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d50c:	4606      	mov	r6, r0
   2d50e:	b09f      	sub	sp, #124	; 0x7c
   2d510:	4614      	mov	r4, r2
   2d512:	461d      	mov	r5, r3
   2d514:	460a      	mov	r2, r1
   2d516:	2301      	movs	r3, #1
   2d518:	2104      	movs	r1, #4
   2d51a:	a812      	add	r0, sp, #72	; 0x48
   2d51c:	f7fa f91d 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2d520:	2301      	movs	r3, #1
   2d522:	2104      	movs	r1, #4
   2d524:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2d526:	a818      	add	r0, sp, #96	; 0x60
   2d528:	f7fa f917 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  TFLITE_DCHECK_LE(op_params.left_padding_count, PadKernelMaxDimensionCount());
   2d52c:	f996 0000 	ldrsb.w	r0, [r6]
   2d530:	2804      	cmp	r0, #4
   2d532:	dd01      	ble.n	2d538 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x30>
   2d534:	f003 fc75 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(op_params.right_padding_count, PadKernelMaxDimensionCount());
   2d538:	f996 1014 	ldrsb.w	r1, [r6, #20]
   2d53c:	2904      	cmp	r1, #4
   2d53e:	dcf9      	bgt.n	2d534 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x2c>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d540:	f06f 0203 	mvn.w	r2, #3
    left_padding_copy[i] = 0;
   2d544:	2300      	movs	r3, #0
   2d546:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
   2d54a:	fb02 c200 	mla	r2, r2, r0, ip
   2d54e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
   2d552:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d556:	1d37      	adds	r7, r6, #4
   2d558:	3a40      	subs	r2, #64	; 0x40
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d55a:	4298      	cmp	r0, r3
   2d55c:	dc13      	bgt.n	2d586 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x7e>
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d55e:	f06f 0203 	mvn.w	r2, #3
    right_padding_copy[i] = 0;
   2d562:	2300      	movs	r3, #0
   2d564:	a81e      	add	r0, sp, #120	; 0x78
   2d566:	fb02 0201 	mla	r2, r2, r1, r0
   2d56a:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
   2d56e:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  for (int i = 0; i < PadKernelMaxDimensionCount(); i++) {
   2d572:	3618      	adds	r6, #24
   2d574:	3a30      	subs	r2, #48	; 0x30
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d576:	4299      	cmp	r1, r3
   2d578:	dd0b      	ble.n	2d592 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x8a>
                       op_params.right_padding_count] =
   2d57a:	f856 0b04 	ldr.w	r0, [r6], #4
    right_padding_copy[i + PadKernelMaxDimensionCount() -
   2d57e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.right_padding_count; ++i) {
   2d582:	3301      	adds	r3, #1
   2d584:	e7f7      	b.n	2d576 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x6e>
                      op_params.left_padding_count] = op_params.left_padding[i];
   2d586:	f857 cb04 	ldr.w	ip, [r7], #4
    left_padding_copy[i + PadKernelMaxDimensionCount() -
   2d58a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
  for (int i = 0; i < op_params.left_padding_count; ++i) {
   2d58e:	3301      	adds	r3, #1
   2d590:	e7e3      	b.n	2d55a <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x52>
  const int output_batch = ext_output_shape.Dims(0);
   2d592:	2100      	movs	r1, #0
   2d594:	a818      	add	r0, sp, #96	; 0x60
   2d596:	f7fa f84b 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = ext_output_shape.Dims(1);
   2d59a:	2101      	movs	r1, #1
  const int output_batch = ext_output_shape.Dims(0);
   2d59c:	4680      	mov	r8, r0
  const int output_height = ext_output_shape.Dims(1);
   2d59e:	a818      	add	r0, sp, #96	; 0x60
   2d5a0:	f7fa f846 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = ext_output_shape.Dims(2);
   2d5a4:	2102      	movs	r1, #2
  const int output_height = ext_output_shape.Dims(1);
   2d5a6:	4681      	mov	r9, r0
  const int output_width = ext_output_shape.Dims(2);
   2d5a8:	a818      	add	r0, sp, #96	; 0x60
   2d5aa:	f7fa f841 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_depth = ext_output_shape.Dims(3);
   2d5ae:	2103      	movs	r1, #3
  const int output_width = ext_output_shape.Dims(2);
   2d5b0:	4682      	mov	sl, r0
  const int output_depth = ext_output_shape.Dims(3);
   2d5b2:	a818      	add	r0, sp, #96	; 0x60
   2d5b4:	f7fa f83c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d5b8:	2600      	movs	r6, #0
  const int output_depth = ext_output_shape.Dims(3);
   2d5ba:	4607      	mov	r7, r0
  const int left_b_padding = left_padding_copy[0];
   2d5bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  const T pad_value = *pad_value_ptr;
   2d5be:	f995 1000 	ldrsb.w	r1, [r5]
  const int left_b_padding = left_padding_copy[0];
   2d5c2:	9300      	str	r3, [sp, #0]
  const int left_h_padding = left_padding_copy[1];
   2d5c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d5c6:	9301      	str	r3, [sp, #4]
  const int left_w_padding = left_padding_copy[2];
   2d5c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d5ca:	9302      	str	r3, [sp, #8]
  const int left_d_padding = left_padding_copy[3];
   2d5cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d5ce:	9303      	str	r3, [sp, #12]
  const int right_h_padding = right_padding_copy[1];
   2d5d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d5d2:	9304      	str	r3, [sp, #16]
  const int right_w_padding = right_padding_copy[2];
   2d5d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2d5d6:	9305      	str	r3, [sp, #20]
  const int right_d_padding = right_padding_copy[3];
   2d5d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2d5da:	9306      	str	r3, [sp, #24]
              out_b >= output_batch - right_b_padding ||
   2d5dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d5de:	eba8 0303 	sub.w	r3, r8, r3
   2d5e2:	9308      	str	r3, [sp, #32]
   2d5e4:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   2d5e8:	9309      	str	r3, [sp, #36]	; 0x24
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d5ea:	4546      	cmp	r6, r8
   2d5ec:	da3b      	bge.n	2d666 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15e>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d5ee:	f04f 0c00 	mov.w	ip, #0
              out_h >= output_height - right_h_padding ||
   2d5f2:	9b04      	ldr	r3, [sp, #16]
   2d5f4:	eba9 0e03 	sub.w	lr, r9, r3
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d5f8:	45cc      	cmp	ip, r9
   2d5fa:	da32      	bge.n	2d662 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x15a>
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d5fc:	2000      	movs	r0, #0
              out_w >= output_width - right_w_padding ||
   2d5fe:	9b05      	ldr	r3, [sp, #20]
   2d600:	ebaa 0b03 	sub.w	fp, sl, r3
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d604:	4550      	cmp	r0, sl
   2d606:	da29      	bge.n	2d65c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x154>
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d608:	2500      	movs	r5, #0
              out_d >= output_depth - right_d_padding) {
   2d60a:	9b06      	ldr	r3, [sp, #24]
   2d60c:	1afb      	subs	r3, r7, r3
   2d60e:	9307      	str	r3, [sp, #28]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d610:	42bd      	cmp	r5, r7
   2d612:	da1d      	bge.n	2d650 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x148>
          if (out_b < left_b_padding ||
   2d614:	9b00      	ldr	r3, [sp, #0]
   2d616:	429e      	cmp	r6, r3
   2d618:	db18      	blt.n	2d64c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
   2d61a:	9b08      	ldr	r3, [sp, #32]
   2d61c:	42b3      	cmp	r3, r6
   2d61e:	dd15      	ble.n	2d64c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_b >= output_batch - right_b_padding ||
   2d620:	9b01      	ldr	r3, [sp, #4]
   2d622:	459c      	cmp	ip, r3
   2d624:	db12      	blt.n	2d64c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_h < left_h_padding ||
   2d626:	45e6      	cmp	lr, ip
   2d628:	dd10      	ble.n	2d64c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_h >= output_height - right_h_padding ||
   2d62a:	9b02      	ldr	r3, [sp, #8]
   2d62c:	4298      	cmp	r0, r3
   2d62e:	db0d      	blt.n	2d64c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_w < left_w_padding ||
   2d630:	4583      	cmp	fp, r0
   2d632:	dd0b      	ble.n	2d64c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_w >= output_width - right_w_padding ||
   2d634:	9b03      	ldr	r3, [sp, #12]
   2d636:	429d      	cmp	r5, r3
   2d638:	db08      	blt.n	2d64c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
              out_d < left_d_padding ||
   2d63a:	9b07      	ldr	r3, [sp, #28]
   2d63c:	42ab      	cmp	r3, r5
   2d63e:	dd05      	ble.n	2d64c <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x144>
            *out_ptr++ = *in_ptr++;
   2d640:	f914 3b01 	ldrsb.w	r3, [r4], #1
   2d644:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   2d646:	5553      	strb	r3, [r2, r5]
        for (int out_d = 0; out_d < output_depth; ++out_d) {
   2d648:	3501      	adds	r5, #1
   2d64a:	e7e1      	b.n	2d610 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x108>
            *out_ptr++ = pad_value;
   2d64c:	460b      	mov	r3, r1
   2d64e:	e7f9      	b.n	2d644 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0x13c>
   2d650:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   2d652:	9a09      	ldr	r2, [sp, #36]	; 0x24
      for (int out_w = 0; out_w < output_width; ++out_w) {
   2d654:	3001      	adds	r0, #1
   2d656:	4413      	add	r3, r2
   2d658:	9329      	str	r3, [sp, #164]	; 0xa4
   2d65a:	e7d3      	b.n	2d604 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xfc>
    for (int out_h = 0; out_h < output_height; ++out_h) {
   2d65c:	f10c 0c01 	add.w	ip, ip, #1
   2d660:	e7ca      	b.n	2d5f8 <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xf0>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
   2d662:	3601      	adds	r6, #1
   2d664:	e7c1      	b.n	2d5ea <_ZN6tflite13reference_ops7PadImplIaaEEvRKNS_9PadParamsERKNS_12RuntimeShapeEPKT_PKT0_S7_PS8_+0xe2>
  const RuntimeShape ext_output_shape =
   2d666:	a818      	add	r0, sp, #96	; 0x60
   2d668:	f7f9 ffd7 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape ext_input_shape =
   2d66c:	a812      	add	r0, sp, #72	; 0x48
   2d66e:	f7f9 ffd4 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2d672:	b01f      	add	sp, #124	; 0x7c
   2d674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d678 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape,
                        const uint8* input_data,
                        const RuntimeShape& output_shape, uint8* output_data) {
   2d678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d67c:	b097      	sub	sp, #92	; 0x5c
   2d67e:	4698      	mov	r8, r3
   2d680:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2d682:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   2d686:	429a      	cmp	r2, r3
                        const RuntimeShape& output_shape, uint8* output_data) {
   2d688:	4604      	mov	r4, r0
   2d68a:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2d68c:	dd01      	ble.n	2d692 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   2d68e:	f003 fbc8 	bl	30e22 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2d692:	680b      	ldr	r3, [r1, #0]
   2d694:	2b04      	cmp	r3, #4
   2d696:	d1fa      	bne.n	2d68e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2d698:	f8d8 3000 	ldr.w	r3, [r8]
   2d69c:	2b04      	cmp	r3, #4
   2d69e:	d1f6      	bne.n	2d68e <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2d6a0:	2300      	movs	r3, #0
   2d6a2:	4642      	mov	r2, r8
   2d6a4:	4619      	mov	r1, r3
   2d6a6:	4638      	mov	r0, r7
   2d6a8:	f7fc fe6c 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d6ac:	2303      	movs	r3, #3
   2d6ae:	4642      	mov	r2, r8
   2d6b0:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2d6b2:	900a      	str	r0, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d6b4:	4638      	mov	r0, r7
   2d6b6:	f7fc fe65 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   2d6ba:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d6bc:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_height = input_shape.Dims(1);
   2d6be:	4638      	mov	r0, r7
   2d6c0:	f7f9 ffb6 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2d6c4:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2d6c6:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_width = input_shape.Dims(2);
   2d6c8:	4638      	mov	r0, r7
   2d6ca:	f7f9 ffb1 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2d6ce:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   2d6d0:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
   2d6d2:	4640      	mov	r0, r8
   2d6d4:	f7f9 ffac 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2d6d8:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2d6da:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
   2d6dc:	4640      	mov	r0, r8
   2d6de:	f7f9 ffa7 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
   2d6e2:	2100      	movs	r1, #0
  const int stride_height = params.stride_height;
   2d6e4:	68e3      	ldr	r3, [r4, #12]
  const int output_width = output_shape.Dims(2);
   2d6e6:	900f      	str	r0, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
   2d6e8:	9310      	str	r3, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   2d6ea:	6923      	ldr	r3, [r4, #16]
   2d6ec:	9311      	str	r3, [sp, #68]	; 0x44
  for (int batch = 0; batch < batches; ++batch) {
   2d6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d6f0:	4299      	cmp	r1, r3
   2d6f2:	f280 808d 	bge.w	2d810 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x198>
   2d6f6:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2d6fa:	f8cd b010 	str.w	fp, [sp, #16]
   2d6fe:	9b04      	ldr	r3, [sp, #16]
   2d700:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2d702:	4293      	cmp	r3, r2
   2d704:	f280 8082 	bge.w	2d80c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x194>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   2d708:	f04f 0a00 	mov.w	sl, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2d70c:	f8cd a014 	str.w	sl, [sp, #20]
   2d710:	9b05      	ldr	r3, [sp, #20]
   2d712:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2d714:	4293      	cmp	r3, r2
   2d716:	da73      	bge.n	2d800 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x188>
        for (int channel = 0; channel < depth; ++channel) {
   2d718:	2300      	movs	r3, #0
   2d71a:	9303      	str	r3, [sp, #12]
   2d71c:	9b03      	ldr	r3, [sp, #12]
   2d71e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2d720:	4293      	cmp	r3, r2
   2d722:	da67      	bge.n	2d7f4 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17c>
              (out_x * stride_width) - params.padding_values.width;
   2d724:	f9b4 6002 	ldrsh.w	r6, [r4, #2]
              (out_y * stride_height) - params.padding_values.height;
   2d728:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          const int in_x_origin =
   2d72c:	ebaa 0306 	sub.w	r3, sl, r6
   2d730:	9312      	str	r3, [sp, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   2d732:	eba6 060a 	sub.w	r6, r6, sl
          const int in_y_origin =
   2d736:	ebab 0302 	sub.w	r3, fp, r2
   2d73a:	9308      	str	r3, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   2d73c:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
   2d740:	9307      	str	r3, [sp, #28]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   2d742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
          const int filter_y_start = std::max(0, -in_y_origin);
   2d744:	eba2 020b 	sub.w	r2, r2, fp
              std::min(params.filter_width, input_width - in_x_origin);
   2d748:	441e      	add	r6, r3
   2d74a:	69a3      	ldr	r3, [r4, #24]
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int32 acc = 0;
   2d74c:	2500      	movs	r5, #0
   2d74e:	429e      	cmp	r6, r3
   2d750:	bfa8      	it	ge
   2d752:	461e      	movge	r6, r3
              std::min(params.filter_height, input_height - in_y_origin);
   2d754:	9b0c      	ldr	r3, [sp, #48]	; 0x30
          int filter_count = 0;
   2d756:	46a9      	mov	r9, r5
              std::min(params.filter_height, input_height - in_y_origin);
   2d758:	18d0      	adds	r0, r2, r3
   2d75a:	6963      	ldr	r3, [r4, #20]
   2d75c:	9606      	str	r6, [sp, #24]
    min(const _Tp& __a, const _Tp& __b)
   2d75e:	4298      	cmp	r0, r3
   2d760:	bfa8      	it	ge
   2d762:	4618      	movge	r0, r3
   2d764:	9b08      	ldr	r3, [sp, #32]
   2d766:	9009      	str	r0, [sp, #36]	; 0x24
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2d768:	2a00      	cmp	r2, #0
   2d76a:	bfa8      	it	ge
   2d76c:	189b      	addge	r3, r3, r2
   2d76e:	461a      	mov	r2, r3
   2d770:	9b08      	ldr	r3, [sp, #32]
   2d772:	9809      	ldr	r0, [sp, #36]	; 0x24
   2d774:	1ad3      	subs	r3, r2, r3
   2d776:	4283      	cmp	r3, r0
   2d778:	da1e      	bge.n	2d7b8 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x140>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2d77a:	9e07      	ldr	r6, [sp, #28]
   2d77c:	9b06      	ldr	r3, [sp, #24]
   2d77e:	429e      	cmp	r6, r3
   2d780:	da0f      	bge.n	2d7a2 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x12a>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   2d782:	9b03      	ldr	r3, [sp, #12]
   2d784:	4638      	mov	r0, r7
   2d786:	9300      	str	r3, [sp, #0]
   2d788:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d78a:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   2d78e:	4433      	add	r3, r6
   2d790:	f7fa f810 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2d794:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
              acc +=
   2d798:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2d79a:	3601      	adds	r6, #1
              acc +=
   2d79c:	5c1b      	ldrb	r3, [r3, r0]
   2d79e:	441d      	add	r5, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2d7a0:	e7ec      	b.n	2d77c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x104>
   2d7a2:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
   2d7a6:	1a1b      	subs	r3, r3, r0
   2d7a8:	e9dd 0606 	ldrd	r0, r6, [sp, #24]
   2d7ac:	42b0      	cmp	r0, r6
   2d7ae:	bfb8      	it	lt
   2d7b0:	2300      	movlt	r3, #0
   2d7b2:	3201      	adds	r2, #1
   2d7b4:	4499      	add	r9, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2d7b6:	e7db      	b.n	2d770 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xf8>
              filter_count++;
            }
          }
          acc = (acc + filter_count / 2) / filter_count;
   2d7b8:	eb09 73d9 	add.w	r3, r9, r9, lsr #31
   2d7bc:	eb05 0563 	add.w	r5, r5, r3, asr #1
   2d7c0:	fb95 f9f9 	sdiv	r9, r5, r9
   2d7c4:	69e5      	ldr	r5, [r4, #28]
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2d7c6:	9b03      	ldr	r3, [sp, #12]
   2d7c8:	45a9      	cmp	r9, r5
   2d7ca:	bfb8      	it	lt
   2d7cc:	46a9      	movlt	r9, r5
   2d7ce:	6a25      	ldr	r5, [r4, #32]
   2d7d0:	9300      	str	r3, [sp, #0]
   2d7d2:	45a9      	cmp	r9, r5
   2d7d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2d7d8:	4640      	mov	r0, r8
   2d7da:	bfa8      	it	ge
   2d7dc:	46a9      	movge	r9, r5
   2d7de:	9106      	str	r1, [sp, #24]
   2d7e0:	f7f9 ffe8 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2d7e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   2d7e6:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2d7e8:	f803 9000 	strb.w	r9, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   2d7ec:	9b03      	ldr	r3, [sp, #12]
   2d7ee:	3301      	adds	r3, #1
   2d7f0:	9303      	str	r3, [sp, #12]
   2d7f2:	e793      	b.n	2d71c <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2d7f4:	9b05      	ldr	r3, [sp, #20]
   2d7f6:	3301      	adds	r3, #1
   2d7f8:	9305      	str	r3, [sp, #20]
   2d7fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2d7fc:	449a      	add	sl, r3
   2d7fe:	e787      	b.n	2d710 <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2d800:	9b04      	ldr	r3, [sp, #16]
   2d802:	3301      	adds	r3, #1
   2d804:	9304      	str	r3, [sp, #16]
   2d806:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2d808:	449b      	add	fp, r3
   2d80a:	e778      	b.n	2d6fe <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   2d80c:	3101      	adds	r1, #1
   2d80e:	e76e      	b.n	2d6ee <_ZN6tflite13reference_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x76>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
   2d810:	b017      	add	sp, #92	; 0x5c
   2d812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d816 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
   2d816:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d81a:	ed2d 8b04 	vpush	{d8-d9}
   2d81e:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2d820:	680b      	ldr	r3, [r1, #0]
                    float* output_data) {
   2d822:	b097      	sub	sp, #92	; 0x5c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2d824:	2b04      	cmp	r3, #4
                    float* output_data) {
   2d826:	4604      	mov	r4, r0
   2d828:	460d      	mov	r5, r1
   2d82a:	9212      	str	r2, [sp, #72]	; 0x48
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2d82c:	d001      	beq.n	2d832 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c>
   2d82e:	f003 faf8 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2d832:	6833      	ldr	r3, [r6, #0]
   2d834:	2b04      	cmp	r3, #4
   2d836:	d1fa      	bne.n	2d82e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x18>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2d838:	2300      	movs	r3, #0
   2d83a:	4632      	mov	r2, r6
   2d83c:	4619      	mov	r1, r3
   2d83e:	4628      	mov	r0, r5
   2d840:	f7fc fda0 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d844:	2303      	movs	r3, #3
   2d846:	4632      	mov	r2, r6
   2d848:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2d84a:	9007      	str	r0, [sp, #28]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d84c:	4628      	mov	r0, r5
   2d84e:	f7fc fd99 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   2d852:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d854:	9008      	str	r0, [sp, #32]
  const int input_height = input_shape.Dims(1);
   2d856:	4628      	mov	r0, r5
   2d858:	f7f9 feea 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2d85c:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2d85e:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_width = input_shape.Dims(2);
   2d860:	4628      	mov	r0, r5
   2d862:	f7f9 fee5 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2d866:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   2d868:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
   2d86a:	4630      	mov	r0, r6
   2d86c:	f7f9 fee0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2d870:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2d872:	900c      	str	r0, [sp, #48]	; 0x30
  const int output_width = output_shape.Dims(2);
   2d874:	4630      	mov	r0, r6
   2d876:	f7f9 fedb 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
   2d87a:	f04f 0b00 	mov.w	fp, #0
  const int stride_height = params.stride_height;
   2d87e:	68e3      	ldr	r3, [r4, #12]
  const int output_width = output_shape.Dims(2);
   2d880:	900d      	str	r0, [sp, #52]	; 0x34
  const int stride_height = params.stride_height;
   2d882:	930e      	str	r3, [sp, #56]	; 0x38
  const int stride_width = params.stride_width;
   2d884:	6923      	ldr	r3, [r4, #16]
   2d886:	930f      	str	r3, [sp, #60]	; 0x3c
  for (int batch = 0; batch < batches; ++batch) {
   2d888:	9b07      	ldr	r3, [sp, #28]
   2d88a:	459b      	cmp	fp, r3
   2d88c:	f280 8094 	bge.w	2d9b8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1a2>
   2d890:	f04f 0a00 	mov.w	sl, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2d894:	46d0      	mov	r8, sl
   2d896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d898:	4598      	cmp	r8, r3
   2d89a:	f280 808a 	bge.w	2d9b2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x19c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   2d89e:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2d8a0:	46b9      	mov	r9, r7
   2d8a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d8a4:	4599      	cmp	r9, r3
   2d8a6:	da7f      	bge.n	2d9a8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x192>
        for (int channel = 0; channel < depth; ++channel) {
   2d8a8:	2300      	movs	r3, #0
   2d8aa:	9303      	str	r3, [sp, #12]
   2d8ac:	9b03      	ldr	r3, [sp, #12]
   2d8ae:	9a08      	ldr	r2, [sp, #32]
   2d8b0:	4293      	cmp	r3, r2
   2d8b2:	da74      	bge.n	2d99e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x188>
              (out_x * stride_width) - params.padding_values.width;
   2d8b4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   2d8b8:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
   2d8ba:	1afa      	subs	r2, r7, r3
   2d8bc:	9210      	str	r2, [sp, #64]	; 0x40
              (out_y * stride_height) - params.padding_values.height;
   2d8be:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   2d8c2:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   2d8c4:	ebaa 0102 	sub.w	r1, sl, r2
   2d8c8:	9105      	str	r1, [sp, #20]
          const int filter_x_start = std::max(0, -in_x_origin);
   2d8ca:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2d8ce:	9111      	str	r1, [sp, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   2d8d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
   2d8d2:	eba2 020a 	sub.w	r2, r2, sl
              std::min(params.filter_width, input_width - in_x_origin);
   2d8d6:	440b      	add	r3, r1
   2d8d8:	4283      	cmp	r3, r0
   2d8da:	bfa8      	it	ge
   2d8dc:	4603      	movge	r3, r0
   2d8de:	930a      	str	r3, [sp, #40]	; 0x28
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   2d8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d8e2:	18d0      	adds	r0, r2, r3
   2d8e4:	6963      	ldr	r3, [r4, #20]
   2d8e6:	4298      	cmp	r0, r3
   2d8e8:	bfa8      	it	ge
   2d8ea:	4618      	movge	r0, r3
          float max = std::numeric_limits<float>::lowest();
   2d8ec:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
   2d8f0:	9315      	str	r3, [sp, #84]	; 0x54
   2d8f2:	9b05      	ldr	r3, [sp, #20]
   2d8f4:	9006      	str	r0, [sp, #24]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2d8f6:	2a00      	cmp	r2, #0
   2d8f8:	bfa8      	it	ge
   2d8fa:	189b      	addge	r3, r3, r2
   2d8fc:	461a      	mov	r2, r3
   2d8fe:	9b05      	ldr	r3, [sp, #20]
   2d900:	9906      	ldr	r1, [sp, #24]
   2d902:	1ad3      	subs	r3, r2, r3
   2d904:	4299      	cmp	r1, r3
   2d906:	dd26      	ble.n	2d956 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x140>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2d908:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2d90a:	9304      	str	r3, [sp, #16]
   2d90c:	9b04      	ldr	r3, [sp, #16]
   2d90e:	990a      	ldr	r1, [sp, #40]	; 0x28
   2d910:	ed9d 8a15 	vldr	s16, [sp, #84]	; 0x54
   2d914:	428b      	cmp	r3, r1
   2d916:	da1c      	bge.n	2d952 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x13c>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   2d918:	9b03      	ldr	r3, [sp, #12]
   2d91a:	9910      	ldr	r1, [sp, #64]	; 0x40
   2d91c:	9300      	str	r3, [sp, #0]
   2d91e:	9b04      	ldr	r3, [sp, #16]
   2d920:	4628      	mov	r0, r5
   2d922:	440b      	add	r3, r1
   2d924:	4659      	mov	r1, fp
   2d926:	9213      	str	r2, [sp, #76]	; 0x4c
   2d928:	f7f9 ff44 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2d92c:	9b12      	ldr	r3, [sp, #72]	; 0x48
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2d92e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   2d930:	eb03 0080 	add.w	r0, r3, r0, lsl #2
      if (__a < __b)
   2d934:	edd0 7a00 	vldr	s15, [r0]
   2d938:	eef4 7ac8 	vcmpe.f32	s15, s16
   2d93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      return __a;
   2d940:	ab15      	add	r3, sp, #84	; 0x54
   2d942:	bfd8      	it	le
   2d944:	4618      	movle	r0, r3
              max = std::max(
   2d946:	6803      	ldr	r3, [r0, #0]
   2d948:	9315      	str	r3, [sp, #84]	; 0x54
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2d94a:	9b04      	ldr	r3, [sp, #16]
   2d94c:	3301      	adds	r3, #1
   2d94e:	9304      	str	r3, [sp, #16]
   2d950:	e7dc      	b.n	2d90c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xf6>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2d952:	3201      	adds	r2, #1
   2d954:	e7d3      	b.n	2d8fe <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xe8>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
   2d956:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
   2d95a:	ed9d 9a15 	vldr	s18, [sp, #84]	; 0x54
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2d95e:	9b03      	ldr	r3, [sp, #12]
   2d960:	4642      	mov	r2, r8
   2d962:	9300      	str	r3, [sp, #0]
   2d964:	4659      	mov	r1, fp
   2d966:	464b      	mov	r3, r9
   2d968:	4630      	mov	r0, r6
   2d96a:	f7f9 ff23 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2d96e:	eeb4 9ac8 	vcmpe.f32	s18, s16
   2d972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                                           params.float_activation_max);
   2d976:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
   2d97a:	bf58      	it	pl
   2d97c:	eeb0 8a49 	vmovpl.f32	s16, s18
	return __b;
   2d980:	eef4 8a48 	vcmp.f32	s17, s16
   2d984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2d988:	bf48      	it	mi
   2d98a:	eeb0 8a68 	vmovmi.f32	s16, s17
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2d98e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d990:	eb03 0080 	add.w	r0, r3, r0, lsl #2
        for (int channel = 0; channel < depth; ++channel) {
   2d994:	9b03      	ldr	r3, [sp, #12]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2d996:	ed80 8a00 	vstr	s16, [r0]
        for (int channel = 0; channel < depth; ++channel) {
   2d99a:	3301      	adds	r3, #1
   2d99c:	e785      	b.n	2d8aa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x94>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2d99e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d9a0:	f109 0901 	add.w	r9, r9, #1
   2d9a4:	441f      	add	r7, r3
   2d9a6:	e77c      	b.n	2d8a2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2d9a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d9aa:	f108 0801 	add.w	r8, r8, #1
   2d9ae:	449a      	add	sl, r3
   2d9b0:	e771      	b.n	2d896 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x80>
  for (int batch = 0; batch < batches; ++batch) {
   2d9b2:	f10b 0b01 	add.w	fp, fp, #1
   2d9b6:	e767      	b.n	2d888 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x72>
        }
      }
    }
  }
}
   2d9b8:	b017      	add	sp, #92	; 0x5c
   2d9ba:	ecbd 8b04 	vpop	{d8-d9}
   2d9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d9c2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
   2d9c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d9c6:	b097      	sub	sp, #92	; 0x5c
   2d9c8:	461e      	mov	r6, r3
   2d9ca:	9206      	str	r2, [sp, #24]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2d9cc:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   2d9d0:	429a      	cmp	r2, r3
                    uint8* output_data) {
   2d9d2:	4604      	mov	r4, r0
   2d9d4:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2d9d6:	dd01      	ble.n	2d9dc <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1a>
   2d9d8:	f003 fa23 	bl	30e22 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
   2d9dc:	2a00      	cmp	r2, #0
   2d9de:	dbfb      	blt.n	2d9d8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
   2d9e0:	2bff      	cmp	r3, #255	; 0xff
   2d9e2:	dcf9      	bgt.n	2d9d8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2d9e4:	680b      	ldr	r3, [r1, #0]
   2d9e6:	2b04      	cmp	r3, #4
   2d9e8:	d1f6      	bne.n	2d9d8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2d9ea:	6833      	ldr	r3, [r6, #0]
   2d9ec:	2b04      	cmp	r3, #4
   2d9ee:	d1f3      	bne.n	2d9d8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2d9f0:	2300      	movs	r3, #0
   2d9f2:	4632      	mov	r2, r6
   2d9f4:	4619      	mov	r1, r3
   2d9f6:	4628      	mov	r0, r5
   2d9f8:	f7fc fcc4 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2d9fc:	2303      	movs	r3, #3
   2d9fe:	4632      	mov	r2, r6
   2da00:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2da02:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2da04:	4628      	mov	r0, r5
   2da06:	f7fc fcbd 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   2da0a:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2da0c:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   2da0e:	4628      	mov	r0, r5
   2da10:	f7f9 fe0e 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2da14:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2da16:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
   2da18:	4628      	mov	r0, r5
   2da1a:	f7f9 fe09 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2da1e:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   2da20:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
   2da22:	4630      	mov	r0, r6
   2da24:	f7f9 fe04 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2da28:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2da2a:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   2da2c:	4630      	mov	r0, r6
   2da2e:	f7f9 fdff 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
   2da32:	f04f 0b00 	mov.w	fp, #0
  const int stride_height = params.stride_height;
   2da36:	68e3      	ldr	r3, [r4, #12]
  const int output_width = output_shape.Dims(2);
   2da38:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
   2da3a:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   2da3c:	6923      	ldr	r3, [r4, #16]
   2da3e:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   2da40:	9b08      	ldr	r3, [sp, #32]
   2da42:	459b      	cmp	fp, r3
   2da44:	f280 8089 	bge.w	2db5a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x198>
   2da48:	f04f 0800 	mov.w	r8, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2da4c:	f8cd 800c 	str.w	r8, [sp, #12]
   2da50:	9b03      	ldr	r3, [sp, #12]
   2da52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2da54:	4293      	cmp	r3, r2
   2da56:	da7d      	bge.n	2db54 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x192>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   2da58:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2da5a:	46b9      	mov	r9, r7
   2da5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2da5e:	4599      	cmp	r9, r3
   2da60:	da72      	bge.n	2db48 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x186>
        for (int channel = 0; channel < depth; ++channel) {
   2da62:	2300      	movs	r3, #0
   2da64:	9302      	str	r3, [sp, #8]
   2da66:	9b02      	ldr	r3, [sp, #8]
   2da68:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2da6a:	4293      	cmp	r3, r2
   2da6c:	da67      	bge.n	2db3e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x17c>
              (out_x * stride_width) - params.padding_values.width;
   2da6e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   2da72:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
   2da74:	1afa      	subs	r2, r7, r3
   2da76:	9211      	str	r2, [sp, #68]	; 0x44
              (out_y * stride_height) - params.padding_values.height;
   2da78:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   2da7c:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   2da7e:	eba8 0102 	sub.w	r1, r8, r2
   2da82:	9104      	str	r1, [sp, #16]
          const int filter_x_start = std::max(0, -in_x_origin);
   2da84:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2da88:	9112      	str	r1, [sp, #72]	; 0x48
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   2da8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
   2da8c:	eba2 0208 	sub.w	r2, r2, r8
              std::min(params.filter_width, input_width - in_x_origin);
   2da90:	440b      	add	r3, r1
   2da92:	4283      	cmp	r3, r0
   2da94:	bfa8      	it	ge
   2da96:	4603      	movge	r3, r0
   2da98:	9307      	str	r3, [sp, #28]
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   2da9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2da9c:	18d0      	adds	r0, r2, r3
   2da9e:	6963      	ldr	r3, [r4, #20]
   2daa0:	4298      	cmp	r0, r3
   2daa2:	bfa8      	it	ge
   2daa4:	4618      	movge	r0, r3
          uint8 max = 0;
   2daa6:	2300      	movs	r3, #0
   2daa8:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   2daac:	9b04      	ldr	r3, [sp, #16]
   2daae:	900c      	str	r0, [sp, #48]	; 0x30
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2dab0:	2a00      	cmp	r2, #0
   2dab2:	bfa8      	it	ge
   2dab4:	189b      	addge	r3, r3, r2
   2dab6:	461a      	mov	r2, r3
   2dab8:	9b04      	ldr	r3, [sp, #16]
   2daba:	990c      	ldr	r1, [sp, #48]	; 0x30
   2dabc:	1ad3      	subs	r3, r2, r3
   2dabe:	428b      	cmp	r3, r1
   2dac0:	da23      	bge.n	2db0a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x148>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2dac2:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   2dac6:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
   2daca:	9305      	str	r3, [sp, #20]
   2dacc:	9b07      	ldr	r3, [sp, #28]
   2dace:	4553      	cmp	r3, sl
   2dad0:	dd19      	ble.n	2db06 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x144>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   2dad2:	9b02      	ldr	r3, [sp, #8]
   2dad4:	4659      	mov	r1, fp
   2dad6:	9300      	str	r3, [sp, #0]
   2dad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2dada:	4628      	mov	r0, r5
   2dadc:	4453      	add	r3, sl
   2dade:	9213      	str	r2, [sp, #76]	; 0x4c
   2dae0:	f7f9 fe68 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      if (__a < __b)
   2dae4:	9a06      	ldr	r2, [sp, #24]
   2dae6:	9b06      	ldr	r3, [sp, #24]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2dae8:	f10a 0a01 	add.w	sl, sl, #1
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   2daec:	4403      	add	r3, r0
   2daee:	5c10      	ldrb	r0, [r2, r0]
   2daf0:	9a05      	ldr	r2, [sp, #20]
   2daf2:	4290      	cmp	r0, r2
      return __a;
   2daf4:	f10d 0257 	add.w	r2, sp, #87	; 0x57
   2daf8:	bf98      	it	ls
   2dafa:	4613      	movls	r3, r2
              max = std::max(
   2dafc:	781b      	ldrb	r3, [r3, #0]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2dafe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
              max = std::max(
   2db00:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2db04:	e7df      	b.n	2dac6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x104>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2db06:	3201      	adds	r2, #1
   2db08:	e7d6      	b.n	2dab8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xf6>
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
          max = std::min<uint8>(max, params.quantized_activation_max);
   2db0a:	f894 a01c 	ldrb.w	sl, [r4, #28]
   2db0e:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2db12:	4659      	mov	r1, fp
   2db14:	459a      	cmp	sl, r3
   2db16:	bf38      	it	cc
   2db18:	469a      	movcc	sl, r3
   2db1a:	f894 3020 	ldrb.w	r3, [r4, #32]
   2db1e:	4630      	mov	r0, r6
   2db20:	459a      	cmp	sl, r3
   2db22:	bf28      	it	cs
   2db24:	469a      	movcs	sl, r3
   2db26:	9b02      	ldr	r3, [sp, #8]
   2db28:	9a03      	ldr	r2, [sp, #12]
   2db2a:	9300      	str	r3, [sp, #0]
   2db2c:	464b      	mov	r3, r9
   2db2e:	f7f9 fe41 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2db32:	9b20      	ldr	r3, [sp, #128]	; 0x80
   2db34:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   2db38:	9b02      	ldr	r3, [sp, #8]
   2db3a:	3301      	adds	r3, #1
   2db3c:	e792      	b.n	2da64 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2db3e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2db40:	f109 0901 	add.w	r9, r9, #1
   2db44:	441f      	add	r7, r3
   2db46:	e789      	b.n	2da5c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x9a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2db48:	9b03      	ldr	r3, [sp, #12]
   2db4a:	3301      	adds	r3, #1
   2db4c:	9303      	str	r3, [sp, #12]
   2db4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2db50:	4498      	add	r8, r3
   2db52:	e77d      	b.n	2da50 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x8e>
  for (int batch = 0; batch < batches; ++batch) {
   2db54:	f10b 0b01 	add.w	fp, fp, #1
   2db58:	e772      	b.n	2da40 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x7e>
              static_cast<uint8>(max);
        }
      }
    }
  }
}
   2db5a:	b017      	add	sp, #92	; 0x5c
   2db5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002db60 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
namespace tflite {
namespace reference_integer_ops {

inline void AveragePool(const PoolParams& params,
                        const RuntimeShape& input_shape, const int8* input_data,
                        const RuntimeShape& output_shape, int8* output_data) {
   2db60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2db64:	b097      	sub	sp, #92	; 0x5c
   2db66:	4698      	mov	r8, r3
   2db68:	9213      	str	r2, [sp, #76]	; 0x4c
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2db6a:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   2db6e:	429a      	cmp	r2, r3
                        const RuntimeShape& output_shape, int8* output_data) {
   2db70:	4605      	mov	r5, r0
   2db72:	460f      	mov	r7, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2db74:	dd01      	ble.n	2db7a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a>
   2db76:	f003 f954 	bl	30e22 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2db7a:	680b      	ldr	r3, [r1, #0]
   2db7c:	2b04      	cmp	r3, #4
   2db7e:	d1fa      	bne.n	2db76 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2db80:	f8d8 3000 	ldr.w	r3, [r8]
   2db84:	2b04      	cmp	r3, #4
   2db86:	d1f6      	bne.n	2db76 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2db88:	2300      	movs	r3, #0
   2db8a:	4642      	mov	r2, r8
   2db8c:	4619      	mov	r1, r3
   2db8e:	4638      	mov	r0, r7
   2db90:	f7fc fbf8 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2db94:	2303      	movs	r3, #3
   2db96:	4642      	mov	r2, r8
   2db98:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2db9a:	900a      	str	r0, [sp, #40]	; 0x28
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2db9c:	4638      	mov	r0, r7
   2db9e:	f7fc fbf1 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   2dba2:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2dba4:	900b      	str	r0, [sp, #44]	; 0x2c
  const int input_height = input_shape.Dims(1);
   2dba6:	4638      	mov	r0, r7
   2dba8:	f7f9 fd42 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2dbac:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2dbae:	900c      	str	r0, [sp, #48]	; 0x30
  const int input_width = input_shape.Dims(2);
   2dbb0:	4638      	mov	r0, r7
   2dbb2:	f7f9 fd3d 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2dbb6:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   2dbb8:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_height = output_shape.Dims(1);
   2dbba:	4640      	mov	r0, r8
   2dbbc:	f7f9 fd38 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2dbc0:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2dbc2:	900e      	str	r0, [sp, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
   2dbc4:	4640      	mov	r0, r8
   2dbc6:	f7f9 fd33 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
   2dbca:	2100      	movs	r1, #0
  const int stride_height = params.stride_height;
   2dbcc:	68eb      	ldr	r3, [r5, #12]
  const int output_width = output_shape.Dims(2);
   2dbce:	900f      	str	r0, [sp, #60]	; 0x3c
  const int stride_height = params.stride_height;
   2dbd0:	9310      	str	r3, [sp, #64]	; 0x40
  const int stride_width = params.stride_width;
   2dbd2:	692b      	ldr	r3, [r5, #16]
   2dbd4:	9311      	str	r3, [sp, #68]	; 0x44
  for (int batch = 0; batch < batches; ++batch) {
   2dbd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2dbd8:	4299      	cmp	r1, r3
   2dbda:	f280 8092 	bge.w	2dd02 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a2>
   2dbde:	f04f 0b00 	mov.w	fp, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2dbe2:	f8cd b010 	str.w	fp, [sp, #16]
   2dbe6:	9b04      	ldr	r3, [sp, #16]
   2dbe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2dbea:	4293      	cmp	r3, r2
   2dbec:	f280 8087 	bge.w	2dcfe <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   2dbf0:	f04f 0a00 	mov.w	sl, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2dbf4:	f8cd a014 	str.w	sl, [sp, #20]
   2dbf8:	9b05      	ldr	r3, [sp, #20]
   2dbfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2dbfc:	4293      	cmp	r3, r2
   2dbfe:	da78      	bge.n	2dcf2 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x192>
        for (int channel = 0; channel < depth; ++channel) {
   2dc00:	2300      	movs	r3, #0
   2dc02:	9303      	str	r3, [sp, #12]
   2dc04:	9b03      	ldr	r3, [sp, #12]
   2dc06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2dc08:	4293      	cmp	r3, r2
   2dc0a:	da6c      	bge.n	2dce6 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x186>
              (out_x * stride_width) - params.padding_values.width;
   2dc0c:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
              (out_y * stride_height) - params.padding_values.height;
   2dc10:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
          const int in_x_origin =
   2dc14:	ebaa 0306 	sub.w	r3, sl, r6
   2dc18:	9312      	str	r3, [sp, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   2dc1a:	eba6 060a 	sub.w	r6, r6, sl
          const int in_y_origin =
   2dc1e:	ebab 0302 	sub.w	r3, fp, r2
   2dc22:	9308      	str	r3, [sp, #32]
          const int filter_x_start = std::max(0, -in_x_origin);
   2dc24:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
   2dc28:	9307      	str	r3, [sp, #28]
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   2dc2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
          const int filter_y_start = std::max(0, -in_y_origin);
   2dc2c:	eba2 020b 	sub.w	r2, r2, fp
              std::min(params.filter_width, input_width - in_x_origin);
   2dc30:	441e      	add	r6, r3
   2dc32:	69ab      	ldr	r3, [r5, #24]
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          int32 acc = 0;
   2dc34:	f04f 0900 	mov.w	r9, #0
   2dc38:	429e      	cmp	r6, r3
   2dc3a:	bfa8      	it	ge
   2dc3c:	461e      	movge	r6, r3
              std::min(params.filter_height, input_height - in_y_origin);
   2dc3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
          int filter_count = 0;
   2dc40:	464c      	mov	r4, r9
              std::min(params.filter_height, input_height - in_y_origin);
   2dc42:	18d0      	adds	r0, r2, r3
   2dc44:	696b      	ldr	r3, [r5, #20]
   2dc46:	9606      	str	r6, [sp, #24]
    min(const _Tp& __a, const _Tp& __b)
   2dc48:	4298      	cmp	r0, r3
   2dc4a:	bfa8      	it	ge
   2dc4c:	4618      	movge	r0, r3
   2dc4e:	9b08      	ldr	r3, [sp, #32]
   2dc50:	9009      	str	r0, [sp, #36]	; 0x24
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2dc52:	2a00      	cmp	r2, #0
   2dc54:	bfa8      	it	ge
   2dc56:	189b      	addge	r3, r3, r2
   2dc58:	461a      	mov	r2, r3
   2dc5a:	9b08      	ldr	r3, [sp, #32]
   2dc5c:	9809      	ldr	r0, [sp, #36]	; 0x24
   2dc5e:	1ad3      	subs	r3, r2, r3
   2dc60:	4298      	cmp	r0, r3
   2dc62:	dd1e      	ble.n	2dca2 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x142>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2dc64:	9e07      	ldr	r6, [sp, #28]
   2dc66:	9b06      	ldr	r3, [sp, #24]
   2dc68:	429e      	cmp	r6, r3
   2dc6a:	da0f      	bge.n	2dc8c <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x12c>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              acc +=
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)];
   2dc6c:	9b03      	ldr	r3, [sp, #12]
   2dc6e:	4638      	mov	r0, r7
   2dc70:	9300      	str	r3, [sp, #0]
   2dc72:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2dc74:	e9cd 1214 	strd	r1, r2, [sp, #80]	; 0x50
   2dc78:	4433      	add	r3, r6
   2dc7a:	f7f9 fd9b 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2dc7e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
              acc +=
   2dc82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2dc84:	3601      	adds	r6, #1
              acc +=
   2dc86:	561b      	ldrsb	r3, [r3, r0]
   2dc88:	4499      	add	r9, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2dc8a:	e7ec      	b.n	2dc66 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x106>
   2dc8c:	e9dd 3006 	ldrd	r3, r0, [sp, #24]
   2dc90:	1a1b      	subs	r3, r3, r0
   2dc92:	e9dd 0606 	ldrd	r0, r6, [sp, #24]
   2dc96:	42b0      	cmp	r0, r6
   2dc98:	bfb8      	it	lt
   2dc9a:	2300      	movlt	r3, #0
   2dc9c:	3201      	adds	r2, #1
   2dc9e:	441c      	add	r4, r3
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2dca0:	e7db      	b.n	2dc5a <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xfa>
              filter_count++;
            }
          }
          // Round to the closest integer value.
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   2dca2:	0fe3      	lsrs	r3, r4, #31
   2dca4:	4423      	add	r3, r4
   2dca6:	f1b9 0f00 	cmp.w	r9, #0
   2dcaa:	bfcc      	ite	gt
   2dcac:	eb09 0963 	addgt.w	r9, r9, r3, asr #1
                        : (acc - filter_count / 2) / filter_count;
   2dcb0:	eba9 0963 	suble.w	r9, r9, r3, asr #1
          acc = acc > 0 ? (acc + filter_count / 2) / filter_count
   2dcb4:	fb99 f4f4 	sdiv	r4, r9, r4
   2dcb8:	69eb      	ldr	r3, [r5, #28]
          acc = std::max(acc, params.quantized_activation_min);
          acc = std::min(acc, params.quantized_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2dcba:	4640      	mov	r0, r8
   2dcbc:	429c      	cmp	r4, r3
   2dcbe:	bfb8      	it	lt
   2dcc0:	461c      	movlt	r4, r3
   2dcc2:	6a2b      	ldr	r3, [r5, #32]
   2dcc4:	9106      	str	r1, [sp, #24]
   2dcc6:	429c      	cmp	r4, r3
   2dcc8:	bfa8      	it	ge
   2dcca:	461c      	movge	r4, r3
   2dccc:	9b03      	ldr	r3, [sp, #12]
   2dcce:	9300      	str	r3, [sp, #0]
   2dcd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   2dcd4:	f7f9 fd6e 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2dcd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
        for (int channel = 0; channel < depth; ++channel) {
   2dcda:	9906      	ldr	r1, [sp, #24]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2dcdc:	541c      	strb	r4, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   2dcde:	9b03      	ldr	r3, [sp, #12]
   2dce0:	3301      	adds	r3, #1
   2dce2:	9303      	str	r3, [sp, #12]
   2dce4:	e78e      	b.n	2dc04 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xa4>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2dce6:	9b05      	ldr	r3, [sp, #20]
   2dce8:	3301      	adds	r3, #1
   2dcea:	9305      	str	r3, [sp, #20]
   2dcec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2dcee:	449a      	add	sl, r3
   2dcf0:	e782      	b.n	2dbf8 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x98>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2dcf2:	9b04      	ldr	r3, [sp, #16]
   2dcf4:	3301      	adds	r3, #1
   2dcf6:	9304      	str	r3, [sp, #16]
   2dcf8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2dcfa:	449b      	add	fp, r3
   2dcfc:	e773      	b.n	2dbe6 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x86>
  for (int batch = 0; batch < batches; ++batch) {
   2dcfe:	3101      	adds	r1, #1
   2dd00:	e769      	b.n	2dbd6 <_ZN6tflite21reference_integer_ops11AveragePoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x76>
              static_cast<int8>(acc);
        }
      }
    }
  }
}
   2dd02:	b017      	add	sp, #92	; 0x5c
   2dd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002dd08 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8* input_data, const RuntimeShape& output_shape,
                    int8* output_data) {
   2dd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dd0c:	b097      	sub	sp, #92	; 0x5c
   2dd0e:	461e      	mov	r6, r3
   2dd10:	9206      	str	r2, [sp, #24]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2dd12:	e9d0 2307 	ldrd	r2, r3, [r0, #28]
   2dd16:	429a      	cmp	r2, r3
                    int8* output_data) {
   2dd18:	4604      	mov	r4, r0
   2dd1a:	460d      	mov	r5, r1
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2dd1c:	dd01      	ble.n	2dd22 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a>
   2dd1e:	f003 f880 	bl	30e22 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
   2dd22:	3280      	adds	r2, #128	; 0x80
   2dd24:	dbfb      	blt.n	2dd1e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
   2dd26:	2b7f      	cmp	r3, #127	; 0x7f
   2dd28:	dcf9      	bgt.n	2dd1e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
   2dd2a:	680b      	ldr	r3, [r1, #0]
   2dd2c:	2b04      	cmp	r3, #4
   2dd2e:	d1f6      	bne.n	2dd1e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
   2dd30:	6833      	ldr	r3, [r6, #0]
   2dd32:	2b04      	cmp	r3, #4
   2dd34:	d1f3      	bne.n	2dd1e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x16>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2dd36:	2300      	movs	r3, #0
   2dd38:	4632      	mov	r2, r6
   2dd3a:	4619      	mov	r1, r3
   2dd3c:	4628      	mov	r0, r5
   2dd3e:	f7fc fb21 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2dd42:	2303      	movs	r3, #3
   2dd44:	4632      	mov	r2, r6
   2dd46:	4619      	mov	r1, r3
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
   2dd48:	9008      	str	r0, [sp, #32]
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2dd4a:	4628      	mov	r0, r5
   2dd4c:	f7fc fb1a 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  const int input_height = input_shape.Dims(1);
   2dd50:	2101      	movs	r1, #1
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
   2dd52:	9009      	str	r0, [sp, #36]	; 0x24
  const int input_height = input_shape.Dims(1);
   2dd54:	4628      	mov	r0, r5
   2dd56:	f7f9 fc6b 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int input_width = input_shape.Dims(2);
   2dd5a:	2102      	movs	r1, #2
  const int input_height = input_shape.Dims(1);
   2dd5c:	900a      	str	r0, [sp, #40]	; 0x28
  const int input_width = input_shape.Dims(2);
   2dd5e:	4628      	mov	r0, r5
   2dd60:	f7f9 fc66 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_height = output_shape.Dims(1);
   2dd64:	2101      	movs	r1, #1
  const int input_width = input_shape.Dims(2);
   2dd66:	900b      	str	r0, [sp, #44]	; 0x2c
  const int output_height = output_shape.Dims(1);
   2dd68:	4630      	mov	r0, r6
   2dd6a:	f7f9 fc61 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int output_width = output_shape.Dims(2);
   2dd6e:	2102      	movs	r1, #2
  const int output_height = output_shape.Dims(1);
   2dd70:	900d      	str	r0, [sp, #52]	; 0x34
  const int output_width = output_shape.Dims(2);
   2dd72:	4630      	mov	r0, r6
   2dd74:	f7f9 fc5c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
   2dd78:	f04f 0b00 	mov.w	fp, #0
  const int stride_height = params.stride_height;
   2dd7c:	68e3      	ldr	r3, [r4, #12]
  const int output_width = output_shape.Dims(2);
   2dd7e:	900e      	str	r0, [sp, #56]	; 0x38
  const int stride_height = params.stride_height;
   2dd80:	930f      	str	r3, [sp, #60]	; 0x3c
  const int stride_width = params.stride_width;
   2dd82:	6923      	ldr	r3, [r4, #16]
   2dd84:	9310      	str	r3, [sp, #64]	; 0x40
  for (int batch = 0; batch < batches; ++batch) {
   2dd86:	9b08      	ldr	r3, [sp, #32]
   2dd88:	459b      	cmp	fp, r3
   2dd8a:	f280 808a 	bge.w	2dea2 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19a>
   2dd8e:	f04f 0800 	mov.w	r8, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2dd92:	f8cd 800c 	str.w	r8, [sp, #12]
   2dd96:	9b03      	ldr	r3, [sp, #12]
   2dd98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2dd9a:	4293      	cmp	r3, r2
   2dd9c:	da7e      	bge.n	2de9c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x194>
      for (int out_x = 0; out_x < output_width; ++out_x) {
        for (int channel = 0; channel < depth; ++channel) {
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
   2dd9e:	2700      	movs	r7, #0
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2dda0:	46b9      	mov	r9, r7
   2dda2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2dda4:	4599      	cmp	r9, r3
   2dda6:	da73      	bge.n	2de90 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x188>
        for (int channel = 0; channel < depth; ++channel) {
   2dda8:	2300      	movs	r3, #0
   2ddaa:	9302      	str	r3, [sp, #8]
   2ddac:	9b02      	ldr	r3, [sp, #8]
   2ddae:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2ddb0:	4293      	cmp	r3, r2
   2ddb2:	da68      	bge.n	2de86 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x17e>
              (out_x * stride_width) - params.padding_values.width;
   2ddb4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   2ddb8:	69a0      	ldr	r0, [r4, #24]
          const int in_x_origin =
   2ddba:	1afa      	subs	r2, r7, r3
   2ddbc:	9211      	str	r2, [sp, #68]	; 0x44
              (out_y * stride_height) - params.padding_values.height;
   2ddbe:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
   2ddc2:	1bdb      	subs	r3, r3, r7
          const int in_y_origin =
   2ddc4:	eba8 0102 	sub.w	r1, r8, r2
   2ddc8:	9104      	str	r1, [sp, #16]
          const int filter_x_start = std::max(0, -in_x_origin);
   2ddca:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
   2ddce:	9112      	str	r1, [sp, #72]	; 0x48
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
   2ddd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
          const int filter_y_start = std::max(0, -in_y_origin);
   2ddd2:	eba2 0208 	sub.w	r2, r2, r8
              std::min(params.filter_width, input_width - in_x_origin);
   2ddd6:	440b      	add	r3, r1
   2ddd8:	4283      	cmp	r3, r0
   2ddda:	bfa8      	it	ge
   2dddc:	4603      	movge	r3, r0
   2ddde:	9307      	str	r3, [sp, #28]
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
   2dde0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2dde2:	18d0      	adds	r0, r2, r3
   2dde4:	6963      	ldr	r3, [r4, #20]
   2dde6:	4298      	cmp	r0, r3
   2dde8:	bfa8      	it	ge
   2ddea:	4618      	movge	r0, r3
          int8_t max = std::numeric_limits<int8_t>::lowest();
   2ddec:	2380      	movs	r3, #128	; 0x80
   2ddee:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
   2ddf2:	9b04      	ldr	r3, [sp, #16]
   2ddf4:	900c      	str	r0, [sp, #48]	; 0x30
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2ddf6:	2a00      	cmp	r2, #0
   2ddf8:	bfa8      	it	ge
   2ddfa:	189b      	addge	r3, r3, r2
   2ddfc:	461a      	mov	r2, r3
   2ddfe:	9b04      	ldr	r3, [sp, #16]
   2de00:	990c      	ldr	r1, [sp, #48]	; 0x30
   2de02:	1ad3      	subs	r3, r2, r3
   2de04:	428b      	cmp	r3, r1
   2de06:	da24      	bge.n	2de52 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x14a>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2de08:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   2de0c:	f99d 3057 	ldrsb.w	r3, [sp, #87]	; 0x57
   2de10:	9305      	str	r3, [sp, #20]
   2de12:	9b07      	ldr	r3, [sp, #28]
   2de14:	4553      	cmp	r3, sl
   2de16:	dd1a      	ble.n	2de4e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x146>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
              const int in_y = in_y_origin + filter_y;
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   2de18:	9b02      	ldr	r3, [sp, #8]
   2de1a:	4659      	mov	r1, fp
   2de1c:	9300      	str	r3, [sp, #0]
   2de1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2de20:	4628      	mov	r0, r5
   2de22:	4453      	add	r3, sl
   2de24:	9213      	str	r2, [sp, #76]	; 0x4c
   2de26:	f7f9 fcc5 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
      if (__a < __b)
   2de2a:	9a06      	ldr	r2, [sp, #24]
   2de2c:	9b06      	ldr	r3, [sp, #24]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2de2e:	f10a 0a01 	add.w	sl, sl, #1
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
   2de32:	4403      	add	r3, r0
   2de34:	5610      	ldrsb	r0, [r2, r0]
   2de36:	9a05      	ldr	r2, [sp, #20]
   2de38:	4290      	cmp	r0, r2
      return __a;
   2de3a:	f10d 0257 	add.w	r2, sp, #87	; 0x57
   2de3e:	bfd8      	it	le
   2de40:	4613      	movle	r3, r2
              max = std::max(
   2de42:	f993 3000 	ldrsb.w	r3, [r3]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2de46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
              max = std::max(
   2de48:	f88d 3057 	strb.w	r3, [sp, #87]	; 0x57
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
   2de4c:	e7de      	b.n	2de0c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x104>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
   2de4e:	3201      	adds	r2, #1
   2de50:	e7d5      	b.n	2ddfe <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xf6>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
          max = std::min<int8_t>(max, params.quantized_activation_max);
   2de52:	f994 a01c 	ldrsb.w	sl, [r4, #28]
   2de56:	f99d 3057 	ldrsb.w	r3, [sp, #87]	; 0x57
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
   2de5a:	4659      	mov	r1, fp
   2de5c:	459a      	cmp	sl, r3
   2de5e:	bfb8      	it	lt
   2de60:	469a      	movlt	sl, r3
   2de62:	f994 3020 	ldrsb.w	r3, [r4, #32]
   2de66:	4630      	mov	r0, r6
   2de68:	459a      	cmp	sl, r3
   2de6a:	bfa8      	it	ge
   2de6c:	469a      	movge	sl, r3
   2de6e:	9b02      	ldr	r3, [sp, #8]
   2de70:	9a03      	ldr	r2, [sp, #12]
   2de72:	9300      	str	r3, [sp, #0]
   2de74:	464b      	mov	r3, r9
   2de76:	f7f9 fc9d 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
   2de7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
   2de7c:	f803 a000 	strb.w	sl, [r3, r0]
        for (int channel = 0; channel < depth; ++channel) {
   2de80:	9b02      	ldr	r3, [sp, #8]
   2de82:	3301      	adds	r3, #1
   2de84:	e791      	b.n	2ddaa <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xa2>
      for (int out_x = 0; out_x < output_width; ++out_x) {
   2de86:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2de88:	f109 0901 	add.w	r9, r9, #1
   2de8c:	441f      	add	r7, r3
   2de8e:	e788      	b.n	2dda2 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x9a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
   2de90:	9b03      	ldr	r3, [sp, #12]
   2de92:	3301      	adds	r3, #1
   2de94:	9303      	str	r3, [sp, #12]
   2de96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2de98:	4498      	add	r8, r3
   2de9a:	e77c      	b.n	2dd96 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x8e>
  for (int batch = 0; batch < batches; ++batch) {
   2de9c:	f10b 0b01 	add.w	fp, fp, #1
   2dea0:	e771      	b.n	2dd86 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x7e>
              static_cast<int8_t>(max);
        }
      }
    }
  }
}
   2dea2:	b017      	add	sp, #92	; 0x5c
   2dea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002dea8 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE.isra.0>:
TfLiteStatus CalculateOpData(const TfLiteContext* context,
   2dea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      params->filter_width, params->padding, &out_height, &out_width);
   2deac:	e9d0 6703 	ldrd	r6, r7, [r0, #12]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   2deb0:	2401      	movs	r4, #1
  int height = SizeOfDimension(input, 1);
   2deb2:	688b      	ldr	r3, [r1, #8]
      params->filter_width, params->padding, &out_height, &out_width);
   2deb4:	f890 b000 	ldrb.w	fp, [r0]
TfLiteStatus CalculateOpData(const TfLiteContext* context,
   2deb8:	b085      	sub	sp, #20
  return t->dims->data[dim];
   2deba:	e9d3 a802 	ldrd	sl, r8, [r3, #8]
   2debe:	4615      	mov	r5, r2
      params->stride_height, params->stride_width,
   2dec0:	e9d0 3901 	ldrd	r3, r9, [r0, #4]
   2dec4:	4632      	mov	r2, r6
   2dec6:	4641      	mov	r1, r8
   2dec8:	9400      	str	r4, [sp, #0]
   2deca:	4658      	mov	r0, fp
   2decc:	9302      	str	r3, [sp, #8]
   2dece:	f7fd f9bb 	bl	2b248 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   2ded2:	464b      	mov	r3, r9
   2ded4:	463a      	mov	r2, r7
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
   2ded6:	9003      	str	r0, [sp, #12]
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
   2ded8:	9400      	str	r4, [sp, #0]
   2deda:	4651      	mov	r1, sl
   2dedc:	4658      	mov	r0, fp
   2dede:	f7fd f9b3 	bl	2b248 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
  int total_padding =
   2dee2:	eba7 070a 	sub.w	r7, r7, sl
      ((out_size - 1) * stride + effective_filter_size - in_size);
   2dee6:	3801      	subs	r0, #1
  int total_padding =
   2dee8:	fb09 7900 	mla	r9, r9, r0, r7
}
   2deec:	2000      	movs	r0, #0
      ((out_size - 1) * stride + effective_filter_size - in_size);
   2deee:	9b03      	ldr	r3, [sp, #12]
  int total_padding =
   2def0:	eba6 0608 	sub.w	r6, r6, r8
      ((out_size - 1) * stride + effective_filter_size - in_size);
   2def4:	1e5c      	subs	r4, r3, #1
  int total_padding =
   2def6:	9b02      	ldr	r3, [sp, #8]
  total_padding = total_padding > 0 ? total_padding : 0;
   2def8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
  int total_padding =
   2defc:	fb03 6604 	mla	r6, r3, r4, r6
  total_padding = total_padding > 0 ? total_padding : 0;
   2df00:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  return total_padding / 2;
   2df04:	1073      	asrs	r3, r6, #1
      params->filter_width, params->padding, &out_height, &out_width);
   2df06:	602b      	str	r3, [r5, #0]
  *offset = total_padding % 2;
   2df08:	f006 0601 	and.w	r6, r6, #1
  return total_padding / 2;
   2df0c:	ea4f 0369 	mov.w	r3, r9, asr #1
  *offset = total_padding % 2;
   2df10:	f009 0701 	and.w	r7, r9, #1
   2df14:	606b      	str	r3, [r5, #4]
   2df16:	60ae      	str	r6, [r5, #8]
   2df18:	60ef      	str	r7, [r5, #12]
}
   2df1a:	b005      	add	sp, #20
   2df1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002df20 <_ZN6tflite3ops5micro11activations12PreluPrepareEP13TfLiteContextP10TfLiteNode>:
}
   2df20:	2000      	movs	r0, #0
   2df22:	4770      	bx	lr

0002df24 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf>:
    const RuntimeShape& unextended_output_shape, float* output_data) {
   2df24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2df28:	469b      	mov	fp, r3
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2df2a:	6803      	ldr	r3, [r0, #0]
    const RuntimeShape& unextended_output_shape, float* output_data) {
   2df2c:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2df2e:	2b04      	cmp	r3, #4
    const RuntimeShape& unextended_output_shape, float* output_data) {
   2df30:	4615      	mov	r5, r2
   2df32:	4604      	mov	r4, r0
   2df34:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2df36:	9103      	str	r1, [sp, #12]
  TFLITE_DCHECK_LE(unextended_input1_shape.DimensionsCount(), 4);
   2df38:	dd01      	ble.n	2df3e <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x1a>
   2df3a:	f002 ff72 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(unextended_input2_shape.DimensionsCount(), 4);
   2df3e:	682b      	ldr	r3, [r5, #0]
   2df40:	2b04      	cmp	r3, #4
   2df42:	dcfa      	bgt.n	2df3a <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x16>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   2df44:	6813      	ldr	r3, [r2, #0]
   2df46:	2b04      	cmp	r3, #4
   2df48:	dcf7      	bgt.n	2df3a <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x16>
   2df4a:	2301      	movs	r3, #1
   2df4c:	2104      	movs	r1, #4
   2df4e:	a804      	add	r0, sp, #16
  NdArrayDescsForElementwiseBroadcast(unextended_input1_shape,
   2df50:	f10d 0928 	add.w	r9, sp, #40	; 0x28
   2df54:	f7f9 fc01 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2df58:	4620      	mov	r0, r4
   2df5a:	464a      	mov	r2, r9
   2df5c:	4629      	mov	r1, r5
   2df5e:	ab12      	add	r3, sp, #72	; 0x48
   2df60:	f7f9 fdff 	bl	27b62 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   2df64:	2400      	movs	r4, #0
   2df66:	2100      	movs	r1, #0
   2df68:	a804      	add	r0, sp, #16
   2df6a:	f7f9 fb61 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2df6e:	42a0      	cmp	r0, r4
   2df70:	dd4a      	ble.n	2e008 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xe4>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   2df72:	2500      	movs	r5, #0
   2df74:	2101      	movs	r1, #1
   2df76:	a804      	add	r0, sp, #16
   2df78:	f7f9 fb5a 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2df7c:	42a8      	cmp	r0, r5
   2df7e:	dd41      	ble.n	2e004 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xe0>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   2df80:	f04f 0a00 	mov.w	sl, #0
   2df84:	2102      	movs	r1, #2
   2df86:	a804      	add	r0, sp, #16
   2df88:	f7f9 fb52 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2df8c:	4550      	cmp	r0, sl
   2df8e:	dd37      	ble.n	2e000 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xdc>
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2df90:	2600      	movs	r6, #0
   2df92:	2103      	movs	r1, #3
   2df94:	a804      	add	r0, sp, #16
   2df96:	f7f9 fb4b 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2df9a:	42b0      	cmp	r0, r6
   2df9c:	dd2d      	ble.n	2dffa <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0xd6>
          auto out_idx = Offset(output_shape, b, y, x, c);
   2df9e:	4653      	mov	r3, sl
   2dfa0:	462a      	mov	r2, r5
   2dfa2:	4621      	mov	r1, r4
   2dfa4:	9600      	str	r6, [sp, #0]
   2dfa6:	a804      	add	r0, sp, #16
   2dfa8:	f7f9 fc04 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   2dfac:	4653      	mov	r3, sl
          auto out_idx = Offset(output_shape, b, y, x, c);
   2dfae:	4607      	mov	r7, r0
          auto in1_idx = SubscriptToIndex(desc1, b, y, x, c);
   2dfb0:	462a      	mov	r2, r5
   2dfb2:	4621      	mov	r1, r4
   2dfb4:	9600      	str	r6, [sp, #0]
   2dfb6:	4648      	mov	r0, r9
   2dfb8:	f7f9 fc32 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
   2dfbc:	4680      	mov	r8, r0
          auto in2_idx = SubscriptToIndex(desc2, b, y, x, c);
   2dfbe:	4653      	mov	r3, sl
   2dfc0:	9600      	str	r6, [sp, #0]
   2dfc2:	462a      	mov	r2, r5
   2dfc4:	4621      	mov	r1, r4
   2dfc6:	a812      	add	r0, sp, #72	; 0x48
   2dfc8:	f7f9 fc2a 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          auto in1_val = input1_data[in1_idx];
   2dfcc:	9b03      	ldr	r3, [sp, #12]
          auto in2_val = input2_data[in2_idx];
   2dfce:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
          auto in1_val = input1_data[in1_idx];
   2dfd2:	eb03 0888 	add.w	r8, r3, r8, lsl #2
   2dfd6:	edd8 7a00 	vldr	s15, [r8]
          output_data[out_idx] = in1_val >= 0.0f ? in1_val : in1_val * in2_val;
   2dfda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
          auto in2_val = input2_data[in2_idx];
   2dfde:	ed90 7a00 	vldr	s14, [r0]
          output_data[out_idx] = in1_val >= 0.0f ? in1_val : in1_val * in2_val;
   2dfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2dfe6:	bfb8      	it	lt
   2dfe8:	ee67 7a87 	vmullt.f32	s15, s15, s14
   2dfec:	9b25      	ldr	r3, [sp, #148]	; 0x94
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2dfee:	3601      	adds	r6, #1
          output_data[out_idx] = in1_val >= 0.0f ? in1_val : in1_val * in2_val;
   2dff0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   2dff4:	edc7 7a00 	vstr	s15, [r7]
        for (int c = 0; c < output_shape.Dims(3); ++c) {
   2dff8:	e7cb      	b.n	2df92 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x6e>
      for (int x = 0; x < output_shape.Dims(2); ++x) {
   2dffa:	f10a 0a01 	add.w	sl, sl, #1
   2dffe:	e7c1      	b.n	2df84 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x60>
    for (int y = 0; y < output_shape.Dims(1); ++y) {
   2e000:	3501      	adds	r5, #1
   2e002:	e7b7      	b.n	2df74 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x50>
  for (int b = 0; b < output_shape.Dims(0); ++b) {
   2e004:	3401      	adds	r4, #1
   2e006:	e7ae      	b.n	2df66 <_ZN6tflite3ops5micro11activations25BroadcastPrelu4DSlowFloatERKNS_12RuntimeShapeEPKfS5_S7_S5_Pf+0x42>
      RuntimeShape::ExtendedShape(4, unextended_output_shape);
   2e008:	a804      	add	r0, sp, #16
   2e00a:	f7f9 fb06 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2e00e:	b01b      	add	sp, #108	; 0x6c
   2e010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e014 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:

namespace reference_ops {

// Broadcast prelu to output_shape for quantized uint8/int8 data.
template <typename T>
inline void BroadcastPrelu4DSlow(
   2e014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e018:	461e      	mov	r6, r3
    const PreluParams& params, const RuntimeShape& input_shape,
    const T* input_data, const RuntimeShape& alpha_shape, const T* alpha_data,
    const RuntimeShape& output_shape, T* output_data) {
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   2e01a:	680b      	ldr	r3, [r1, #0]
inline void BroadcastPrelu4DSlow(
   2e01c:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   2e01e:	2b04      	cmp	r3, #4
inline void BroadcastPrelu4DSlow(
   2e020:	9203      	str	r2, [sp, #12]
   2e022:	4604      	mov	r4, r0
   2e024:	460d      	mov	r5, r1
   2e026:	9a25      	ldr	r2, [sp, #148]	; 0x94
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   2e028:	dd01      	ble.n	2e02e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1a>
   2e02a:	f002 fefa 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(alpha_shape.DimensionsCount(), 4);
   2e02e:	6833      	ldr	r3, [r6, #0]
   2e030:	2b04      	cmp	r3, #4
   2e032:	dcfa      	bgt.n	2e02a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), 4);
   2e034:	6813      	ldr	r3, [r2, #0]
   2e036:	2b04      	cmp	r3, #4
   2e038:	dcf7      	bgt.n	2e02a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
   2e03a:	2301      	movs	r3, #1
   2e03c:	2104      	movs	r1, #4
   2e03e:	a804      	add	r0, sp, #16
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input_shape, alpha_shape, &desc1, &desc2);
   2e040:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   2e044:	f7f9 fb89 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2e048:	4628      	mov	r0, r5
   2e04a:	465a      	mov	r2, fp
   2e04c:	4631      	mov	r1, r6
   2e04e:	ab12      	add	r3, sp, #72	; 0x48
   2e050:	f7f9 fd87 	bl	27b62 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>

  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2e054:	2500      	movs	r5, #0
   2e056:	2100      	movs	r1, #0
   2e058:	a804      	add	r0, sp, #16
   2e05a:	f7f9 fae9 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e05e:	42a8      	cmp	r0, r5
   2e060:	dd5a      	ble.n	2e118 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x104>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2e062:	2600      	movs	r6, #0
   2e064:	f10d 0810 	add.w	r8, sp, #16
   2e068:	2101      	movs	r1, #1
   2e06a:	4640      	mov	r0, r8
   2e06c:	f7f9 fae0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e070:	42b0      	cmp	r0, r6
   2e072:	dd4f      	ble.n	2e114 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x100>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2e074:	2700      	movs	r7, #0
   2e076:	2102      	movs	r1, #2
   2e078:	4640      	mov	r0, r8
   2e07a:	f7f9 fad9 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e07e:	42b8      	cmp	r0, r7
   2e080:	dd46      	ble.n	2e110 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfc>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2e082:	f04f 0900 	mov.w	r9, #0
   2e086:	2103      	movs	r1, #3
   2e088:	4640      	mov	r0, r8
   2e08a:	f7f9 fad1 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e08e:	4548      	cmp	r0, r9
   2e090:	dd3c      	ble.n	2e10c <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf8>
          int output_index = Offset(extended_output_shape, b, y, x, c);
   2e092:	463b      	mov	r3, r7
   2e094:	4632      	mov	r2, r6
   2e096:	4629      	mov	r1, r5
   2e098:	4640      	mov	r0, r8
   2e09a:	f8cd 9000 	str.w	r9, [sp]
   2e09e:	f7f9 fb89 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   2e0a2:	463b      	mov	r3, r7
          int output_index = Offset(extended_output_shape, b, y, x, c);
   2e0a4:	9002      	str	r0, [sp, #8]
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   2e0a6:	4632      	mov	r2, r6
   2e0a8:	4629      	mov	r1, r5
   2e0aa:	4658      	mov	r0, fp
   2e0ac:	f8cd 9000 	str.w	r9, [sp]
   2e0b0:	f7f9 fbb6 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
          const int32 input_value =
              params.input_offset + input_data[input_index];
   2e0b4:	9b03      	ldr	r3, [sp, #12]
   2e0b6:	f813 a000 	ldrb.w	sl, [r3, r0]
          const int32 input_value =
   2e0ba:	6823      	ldr	r3, [r4, #0]
          int32 output_value;
          if (input_value >= 0) {
   2e0bc:	eb1a 0a03 	adds.w	sl, sl, r3
   2e0c0:	d411      	bmi.n	2e0e6 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd2>
            output_value = MultiplyByQuantizedMultiplier(
   2e0c2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   2e0c6:	4650      	mov	r0, sl
          } else {
            auto alpha_index = SubscriptToIndex(desc2, b, y, x, c);
            const int32 alpha_value =
                params.alpha_offset + alpha_data[alpha_index];

            output_value = MultiplyByQuantizedMultiplier(
   2e0c8:	f7eb f956 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
                input_value * alpha_value, params.output_multiplier_2,
                params.output_shift_2);
          }
          output_value += params.output_offset;
   2e0cc:	68a3      	ldr	r3, [r4, #8]
   2e0ce:	4418      	add	r0, r3
      if (__a < __b)
   2e0d0:	2800      	cmp	r0, #0
   2e0d2:	dd19      	ble.n	2e108 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf4>
      return __a;
   2e0d4:	28ff      	cmp	r0, #255	; 0xff
   2e0d6:	bfa8      	it	ge
   2e0d8:	20ff      	movge	r0, #255	; 0xff

          const int32 quantized_min = std::numeric_limits<T>::min();
          const int32 quantized_max = std::numeric_limits<T>::max();
          const int32 clamped_output =
              std::min(quantized_max, std::max(quantized_min, output_value));
          output_data[output_index] = static_cast<T>(clamped_output);
   2e0da:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2e0dc:	9a02      	ldr	r2, [sp, #8]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2e0de:	f109 0901 	add.w	r9, r9, #1
          output_data[output_index] = static_cast<T>(clamped_output);
   2e0e2:	5498      	strb	r0, [r3, r2]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2e0e4:	e7cf      	b.n	2e086 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x72>
            auto alpha_index = SubscriptToIndex(desc2, b, y, x, c);
   2e0e6:	463b      	mov	r3, r7
   2e0e8:	4632      	mov	r2, r6
   2e0ea:	4629      	mov	r1, r5
   2e0ec:	f8cd 9000 	str.w	r9, [sp]
   2e0f0:	a812      	add	r0, sp, #72	; 0x48
   2e0f2:	f7f9 fb95 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
            output_value = MultiplyByQuantizedMultiplier(
   2e0f6:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
                params.alpha_offset + alpha_data[alpha_index];
   2e0fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e0fc:	5c18      	ldrb	r0, [r3, r0]
            const int32 alpha_value =
   2e0fe:	6863      	ldr	r3, [r4, #4]
   2e100:	4418      	add	r0, r3
            output_value = MultiplyByQuantizedMultiplier(
   2e102:	fb0a f000 	mul.w	r0, sl, r0
   2e106:	e7df      	b.n	2e0c8 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xb4>
      return __a;
   2e108:	2000      	movs	r0, #0
   2e10a:	e7e6      	b.n	2e0da <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xc6>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2e10c:	3701      	adds	r7, #1
   2e10e:	e7b2      	b.n	2e076 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x62>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2e110:	3601      	adds	r6, #1
   2e112:	e7a7      	b.n	2e064 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x50>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2e114:	3501      	adds	r5, #1
   2e116:	e79e      	b.n	2e056 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIhEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x42>
  const RuntimeShape extended_output_shape =
   2e118:	a804      	add	r0, sp, #16
   2e11a:	f7f9 fa7e 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
   2e11e:	b01b      	add	sp, #108	; 0x6c
   2e120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e124 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_>:
inline void BroadcastPrelu4DSlow(
   2e124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e128:	461e      	mov	r6, r3
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   2e12a:	680b      	ldr	r3, [r1, #0]
inline void BroadcastPrelu4DSlow(
   2e12c:	b09b      	sub	sp, #108	; 0x6c
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   2e12e:	2b04      	cmp	r3, #4
inline void BroadcastPrelu4DSlow(
   2e130:	9203      	str	r2, [sp, #12]
   2e132:	4604      	mov	r4, r0
   2e134:	460d      	mov	r5, r1
   2e136:	9a25      	ldr	r2, [sp, #148]	; 0x94
  TFLITE_DCHECK_LE(input_shape.DimensionsCount(), 4);
   2e138:	dd01      	ble.n	2e13e <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x1a>
   2e13a:	f002 fe72 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(alpha_shape.DimensionsCount(), 4);
   2e13e:	6833      	ldr	r3, [r6, #0]
   2e140:	2b04      	cmp	r3, #4
   2e142:	dcfa      	bgt.n	2e13a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), 4);
   2e144:	6813      	ldr	r3, [r2, #0]
   2e146:	2b04      	cmp	r3, #4
   2e148:	dcf7      	bgt.n	2e13a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x16>
   2e14a:	2301      	movs	r3, #1
   2e14c:	2104      	movs	r1, #4
   2e14e:	a804      	add	r0, sp, #16
  NdArrayDescsForElementwiseBroadcast(input_shape, alpha_shape, &desc1, &desc2);
   2e150:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
   2e154:	f7f9 fb01 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2e158:	4628      	mov	r0, r5
   2e15a:	465a      	mov	r2, fp
   2e15c:	4631      	mov	r1, r6
   2e15e:	ab12      	add	r3, sp, #72	; 0x48
   2e160:	f7f9 fcff 	bl	27b62 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2e164:	2500      	movs	r5, #0
   2e166:	2100      	movs	r1, #0
   2e168:	a804      	add	r0, sp, #16
   2e16a:	f7f9 fa61 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e16e:	42a8      	cmp	r0, r5
   2e170:	dd5c      	ble.n	2e22c <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x108>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2e172:	2600      	movs	r6, #0
   2e174:	f10d 0810 	add.w	r8, sp, #16
   2e178:	2101      	movs	r1, #1
   2e17a:	4640      	mov	r0, r8
   2e17c:	f7f9 fa58 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e180:	42b0      	cmp	r0, r6
   2e182:	dd51      	ble.n	2e228 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x104>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2e184:	2700      	movs	r7, #0
   2e186:	2102      	movs	r1, #2
   2e188:	4640      	mov	r0, r8
   2e18a:	f7f9 fa51 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e18e:	42b8      	cmp	r0, r7
   2e190:	dd48      	ble.n	2e224 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x100>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2e192:	f04f 0900 	mov.w	r9, #0
   2e196:	2103      	movs	r1, #3
   2e198:	4640      	mov	r0, r8
   2e19a:	f7f9 fa49 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e19e:	4548      	cmp	r0, r9
   2e1a0:	dd3e      	ble.n	2e220 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xfc>
          int output_index = Offset(extended_output_shape, b, y, x, c);
   2e1a2:	463b      	mov	r3, r7
   2e1a4:	4632      	mov	r2, r6
   2e1a6:	4629      	mov	r1, r5
   2e1a8:	4640      	mov	r0, r8
   2e1aa:	f8cd 9000 	str.w	r9, [sp]
   2e1ae:	f7f9 fb01 	bl	277b4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   2e1b2:	463b      	mov	r3, r7
          int output_index = Offset(extended_output_shape, b, y, x, c);
   2e1b4:	9002      	str	r0, [sp, #8]
          int input_index = SubscriptToIndex(desc1, b, y, x, c);
   2e1b6:	4632      	mov	r2, r6
   2e1b8:	4629      	mov	r1, r5
   2e1ba:	4658      	mov	r0, fp
   2e1bc:	f8cd 9000 	str.w	r9, [sp]
   2e1c0:	f7f9 fb2e 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
              params.input_offset + input_data[input_index];
   2e1c4:	9b03      	ldr	r3, [sp, #12]
   2e1c6:	f913 a000 	ldrsb.w	sl, [r3, r0]
          const int32 input_value =
   2e1ca:	6823      	ldr	r3, [r4, #0]
          if (input_value >= 0) {
   2e1cc:	eb1a 0a03 	adds.w	sl, sl, r3
   2e1d0:	d412      	bmi.n	2e1f8 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xd4>
            output_value = MultiplyByQuantizedMultiplier(
   2e1d2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   2e1d6:	4650      	mov	r0, sl
            output_value = MultiplyByQuantizedMultiplier(
   2e1d8:	f7eb f8ce 	bl	19378 <_ZN6tflite29MultiplyByQuantizedMultiplierEiii>
          output_value += params.output_offset;
   2e1dc:	68a3      	ldr	r3, [r4, #8]
   2e1de:	4418      	add	r0, r3
      if (__a < __b)
   2e1e0:	f110 0f7f 	cmn.w	r0, #127	; 0x7f
   2e1e4:	db19      	blt.n	2e21a <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xf6>
      return __a;
   2e1e6:	287f      	cmp	r0, #127	; 0x7f
   2e1e8:	bfa8      	it	ge
   2e1ea:	207f      	movge	r0, #127	; 0x7f
          output_data[output_index] = static_cast<T>(clamped_output);
   2e1ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2e1ee:	9a02      	ldr	r2, [sp, #8]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2e1f0:	f109 0901 	add.w	r9, r9, #1
          output_data[output_index] = static_cast<T>(clamped_output);
   2e1f4:	5498      	strb	r0, [r3, r2]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
   2e1f6:	e7ce      	b.n	2e196 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x72>
            auto alpha_index = SubscriptToIndex(desc2, b, y, x, c);
   2e1f8:	463b      	mov	r3, r7
   2e1fa:	4632      	mov	r2, r6
   2e1fc:	4629      	mov	r1, r5
   2e1fe:	f8cd 9000 	str.w	r9, [sp]
   2e202:	a812      	add	r0, sp, #72	; 0x48
   2e204:	f7f9 fb0c 	bl	27820 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
            output_value = MultiplyByQuantizedMultiplier(
   2e208:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
                params.alpha_offset + alpha_data[alpha_index];
   2e20c:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e20e:	5618      	ldrsb	r0, [r3, r0]
            const int32 alpha_value =
   2e210:	6863      	ldr	r3, [r4, #4]
   2e212:	4418      	add	r0, r3
            output_value = MultiplyByQuantizedMultiplier(
   2e214:	fb0a f000 	mul.w	r0, sl, r0
   2e218:	e7de      	b.n	2e1d8 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xb4>
      return __a;
   2e21a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2e21e:	e7e5      	b.n	2e1ec <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0xc8>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
   2e220:	3701      	adds	r7, #1
   2e222:	e7b0      	b.n	2e186 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x62>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
   2e224:	3601      	adds	r6, #1
   2e226:	e7a5      	b.n	2e174 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x50>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
   2e228:	3501      	adds	r5, #1
   2e22a:	e79c      	b.n	2e166 <_ZN6tflite13reference_ops20BroadcastPrelu4DSlowIaEEvRKNS_11PreluParamsERKNS_12RuntimeShapeEPKT_S7_SA_S7_PS8_+0x42>
  const RuntimeShape extended_output_shape =
   2e22c:	a804      	add	r0, sp, #16
   2e22e:	f7f9 f9f4 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2e232:	b01b      	add	sp, #108	; 0x6c
   2e234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e238 <_ZN6tflite3ops5micro8quantize4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2e238:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   2e23a:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2e23c:	b90b      	cbnz	r3, 2e242 <_ZN6tflite3ops5micro8quantize4InitEP13TfLiteContextPKcj+0xa>
   2e23e:	f002 fdf0 	bl	30e22 <abort>
  void* data = nullptr;
   2e242:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2e244:	2108      	movs	r1, #8
  void* data = nullptr;
   2e246:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2e248:	aa01      	add	r2, sp, #4
   2e24a:	4798      	blx	r3
   2e24c:	2801      	cmp	r0, #1
    return nullptr;
   2e24e:	bf0c      	ite	eq
   2e250:	4620      	moveq	r0, r4
  return data;
   2e252:	9801      	ldrne	r0, [sp, #4]
}
   2e254:	b002      	add	sp, #8
   2e256:	bd10      	pop	{r4, pc}

0002e258 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_>:
                                  const int* axis) {
   2e258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e25a:	469c      	mov	ip, r3
   2e25c:	9f06      	ldr	r7, [sp, #24]
  if (num_dims == 0) {
   2e25e:	b1d0      	cbz	r0, 2e296 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x3e>
  TFLITE_DCHECK(dims != nullptr);
   2e260:	b909      	cbnz	r1, 2e266 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0xe>
   2e262:	f002 fdde 	bl	30e22 <abort>
  TFLITE_DCHECK(index != nullptr);
   2e266:	2a00      	cmp	r2, #0
   2e268:	d0fb      	beq.n	2e262 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0xa>
  for (int idx = 0; idx < num_dims; ++idx) {
   2e26a:	2400      	movs	r4, #0
  size_t offset = 0;
   2e26c:	4625      	mov	r5, r4
  for (int idx = 0; idx < num_dims; ++idx) {
   2e26e:	42a0      	cmp	r0, r4
   2e270:	dd12      	ble.n	2e298 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x40>
    if (axis != nullptr) {
   2e272:	b147      	cbz	r7, 2e286 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x2e>
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
   2e274:	2600      	movs	r6, #0
   2e276:	45b4      	cmp	ip, r6
   2e278:	dd05      	ble.n	2e286 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x2e>
        if (idx == axis[axis_idx]) {
   2e27a:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
   2e27e:	429c      	cmp	r4, r3
   2e280:	d007      	beq.n	2e292 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x3a>
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
   2e282:	3601      	adds	r6, #1
   2e284:	e7f7      	b.n	2e276 <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x1e>
      offset = offset * static_cast<size_t>(dims[idx]) +
   2e286:	f852 6024 	ldr.w	r6, [r2, r4, lsl #2]
   2e28a:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
   2e28e:	fb03 6505 	mla	r5, r3, r5, r6
  for (int idx = 0; idx < num_dims; ++idx) {
   2e292:	3401      	adds	r4, #1
   2e294:	e7eb      	b.n	2e26e <_ZN6tflite19ReducedOutputOffsetEiPKiS1_iS1_+0x16>
    return 0;
   2e296:	4605      	mov	r5, r0
}
   2e298:	4628      	mov	r0, r5
   2e29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e29c <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
   2e29c:	f7ef b9de 	b.w	1d65c <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>

0002e2a0 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE>:
                 tflite::MeanParams* op_params) {
   2e2a0:	b570      	push	{r4, r5, r6, lr}
   2e2a2:	1c94      	adds	r4, r2, #2
   2e2a4:	4625      	mov	r5, r4
  int i = 0;
   2e2a6:	2300      	movs	r3, #0
  for (; i < axis_count; ++i) {
   2e2a8:	428b      	cmp	r3, r1
   2e2aa:	db08      	blt.n	2e2be <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x1e>
    op_params->axis[i] = 1;
   2e2ac:	2001      	movs	r0, #1
   2e2ae:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
  for (; i < 4; ++i) {
   2e2b2:	2b03      	cmp	r3, #3
   2e2b4:	dc09      	bgt.n	2e2ca <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x2a>
    op_params->axis[i] = 1;
   2e2b6:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
  for (; i < 4; ++i) {
   2e2ba:	3301      	adds	r3, #1
   2e2bc:	e7f9      	b.n	2e2b2 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x12>
    op_params->axis[i] = static_cast<int16>(axis_data[i]);
   2e2be:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
  for (; i < axis_count; ++i) {
   2e2c2:	3301      	adds	r3, #1
    op_params->axis[i] = static_cast<int16>(axis_data[i]);
   2e2c4:	f825 6b02 	strh.w	r6, [r5], #2
  for (; i < axis_count; ++i) {
   2e2c8:	e7ee      	b.n	2e2a8 <_ZN6tflite3ops5micro6reduce11ResolveAxisEPKiiPNS_10MeanParamsE+0x8>
  op_params->axis_count = axis_count;
   2e2ca:	7011      	strb	r1, [r2, #0]
}
   2e2cc:	bd70      	pop	{r4, r5, r6, pc}

0002e2ce <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   2e2ce:	680b      	ldr	r3, [r1, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   2e2d0:	6882      	ldr	r2, [r0, #8]
   2e2d2:	6858      	ldr	r0, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   2e2d4:	684b      	ldr	r3, [r1, #4]
  return &context->tensors[node->inputs->data[index]];
   2e2d6:	eb02 1080 	add.w	r0, r2, r0, lsl #6
  return &context->tensors[node->outputs->data[index]];
   2e2da:	685b      	ldr	r3, [r3, #4]
  if (input->data.raw != output->data.raw) {
   2e2dc:	6841      	ldr	r1, [r0, #4]
   2e2de:	eb02 1283 	add.w	r2, r2, r3, lsl #6
   2e2e2:	6853      	ldr	r3, [r2, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   2e2e4:	b510      	push	{r4, lr}
  if (input->data.raw != output->data.raw) {
   2e2e6:	4299      	cmp	r1, r3
   2e2e8:	d009      	beq.n	2e2fe <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x30>
    for (size_t i = 0; i < input->bytes; ++i) {
   2e2ea:	2300      	movs	r3, #0
   2e2ec:	6981      	ldr	r1, [r0, #24]
   2e2ee:	4299      	cmp	r1, r3
   2e2f0:	d905      	bls.n	2e2fe <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x30>
      output->data.raw[i] = input->data.raw[i];
   2e2f2:	6841      	ldr	r1, [r0, #4]
   2e2f4:	5ccc      	ldrb	r4, [r1, r3]
   2e2f6:	6851      	ldr	r1, [r2, #4]
   2e2f8:	54cc      	strb	r4, [r1, r3]
    for (size_t i = 0; i < input->bytes; ++i) {
   2e2fa:	3301      	adds	r3, #1
   2e2fc:	e7f6      	b.n	2e2ec <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x1e>
}
   2e2fe:	2000      	movs	r0, #0
   2e300:	bd10      	pop	{r4, pc}

0002e302 <_ZN6tflite3ops5micro23resize_nearest_neighbor7PrepareEP13TfLiteContextP10TfLiteNode>:
}
   2e302:	2000      	movs	r0, #0
   2e304:	4770      	bx	lr

0002e306 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>:

template <typename T>
inline void ResizeNearestNeighbor(
   2e306:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e30a:	4698      	mov	r8, r3
    const tflite::ResizeNearestNeighborParams& op_params,
    const RuntimeShape& unextended_input_shape, const T* input_data,
    const RuntimeShape& output_size_shape, const int32* output_size_data,
    const RuntimeShape& unextended_output_shape, T* output_data) {
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e30c:	680b      	ldr	r3, [r1, #0]
inline void ResizeNearestNeighbor(
   2e30e:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e310:	2b04      	cmp	r3, #4
inline void ResizeNearestNeighbor(
   2e312:	4605      	mov	r5, r0
   2e314:	e9dd 7422 	ldrd	r7, r4, [sp, #136]	; 0x88
   2e318:	4616      	mov	r6, r2
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e31a:	dd01      	ble.n	2e320 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x1a>
   2e31c:	f002 fd81 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   2e320:	6823      	ldr	r3, [r4, #0]
   2e322:	2b04      	cmp	r3, #4
   2e324:	dcfa      	bgt.n	2e31c <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
    return RuntimeShape(new_shape_size, shape, 1);
   2e326:	460a      	mov	r2, r1
   2e328:	2301      	movs	r3, #1
   2e32a:	2104      	movs	r1, #4
   2e32c:	a80c      	add	r0, sp, #48	; 0x30
   2e32e:	f7f9 fa14 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2e332:	4622      	mov	r2, r4
   2e334:	2301      	movs	r3, #1
   2e336:	2104      	movs	r1, #4
   2e338:	a812      	add	r0, sp, #72	; 0x48
   2e33a:	f7f9 fa0e 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape input_shape =
      RuntimeShape::ExtendedShape(4, unextended_input_shape);
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(4, unextended_output_shape);

  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   2e33e:	2300      	movs	r3, #0
   2e340:	aa12      	add	r2, sp, #72	; 0x48
   2e342:	4619      	mov	r1, r3
   2e344:	a80c      	add	r0, sp, #48	; 0x30
   2e346:	f7fc f81d 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  int32 input_height = input_shape.Dims(1);
   2e34a:	2101      	movs	r1, #1
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   2e34c:	900a      	str	r0, [sp, #40]	; 0x28
  int32 input_height = input_shape.Dims(1);
   2e34e:	a80c      	add	r0, sp, #48	; 0x30
   2e350:	f7f9 f96e 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 input_width = input_shape.Dims(2);
   2e354:	2102      	movs	r1, #2
  int32 input_height = input_shape.Dims(1);
   2e356:	9003      	str	r0, [sp, #12]
  int32 input_width = input_shape.Dims(2);
   2e358:	a80c      	add	r0, sp, #48	; 0x30
   2e35a:	f7f9 f969 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   2e35e:	2303      	movs	r3, #3
  int32 input_width = input_shape.Dims(2);
   2e360:	9004      	str	r0, [sp, #16]
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   2e362:	4619      	mov	r1, r3
   2e364:	aa12      	add	r2, sp, #72	; 0x48
   2e366:	a80c      	add	r0, sp, #48	; 0x30
   2e368:	f7fc f80c 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   2e36c:	4604      	mov	r4, r0

  // The Tensorflow version of this op allows resize on the width and height
  // axis only.
  TFLITE_DCHECK_EQ(output_size_shape.FlatSize(), 2);
   2e36e:	4640      	mov	r0, r8
   2e370:	f7f9 f9e3 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2e374:	2802      	cmp	r0, #2
   2e376:	d1d1      	bne.n	2e31c <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
  int32 output_height = output_size_data[0];
   2e378:	683b      	ldr	r3, [r7, #0]
  int32 output_width = output_size_data[1];

  const int col_offset = input_shape.Dims(3);
   2e37a:	2103      	movs	r1, #3
   2e37c:	a80c      	add	r0, sp, #48	; 0x30
  int32 output_height = output_size_data[0];
   2e37e:	9305      	str	r3, [sp, #20]
  const int col_offset = input_shape.Dims(3);
   2e380:	f7f9 f956 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e384:	4603      	mov	r3, r0
  const int batch_offset = input_shape.Dims(1) * row_offset;

  const T* input_ptr = input_data;
  T* output_ptr = output_data;
  for (int b = 0; b < batches; ++b) {
   2e386:	f04f 0900 	mov.w	r9, #0
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e38a:	9a04      	ldr	r2, [sp, #16]
  int32 output_width = output_size_data[1];
   2e38c:	f8d7 a004 	ldr.w	sl, [r7, #4]
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e390:	4353      	muls	r3, r2
  const int batch_offset = input_shape.Dims(1) * row_offset;
   2e392:	9a03      	ldr	r2, [sp, #12]
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e394:	9307      	str	r3, [sp, #28]
  const int batch_offset = input_shape.Dims(1) * row_offset;
   2e396:	4353      	muls	r3, r2
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
        output_ptr += depth;
      }
    }
    input_ptr += batch_offset;
   2e398:	009b      	lsls	r3, r3, #2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   2e39a:	00a4      	lsls	r4, r4, #2
    input_ptr += batch_offset;
   2e39c:	9309      	str	r3, [sp, #36]	; 0x24
   2e39e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   2e3a2:	4363      	muls	r3, r4
  const int col_offset = input_shape.Dims(3);
   2e3a4:	9006      	str	r0, [sp, #24]
   2e3a6:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
   2e3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2e3aa:	4599      	cmp	r9, r3
   2e3ac:	da35      	bge.n	2e41a <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x114>
    for (int y = 0; y < output_height; ++y) {
   2e3ae:	2700      	movs	r7, #0
   2e3b0:	9b05      	ldr	r3, [sp, #20]
   2e3b2:	429f      	cmp	r7, r3
   2e3b4:	da2c      	bge.n	2e410 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x10a>
      int32 in_y = GetNearestNeighbor(y, input_height, output_height,
   2e3b6:	786b      	ldrb	r3, [r5, #1]
   2e3b8:	4638      	mov	r0, r7
   2e3ba:	9300      	str	r3, [sp, #0]
   2e3bc:	9a05      	ldr	r2, [sp, #20]
   2e3be:	782b      	ldrb	r3, [r5, #0]
   2e3c0:	9903      	ldr	r1, [sp, #12]
   2e3c2:	f7ef fcc5 	bl	1dd50 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
      for (int x = 0; x < output_width; ++x) {
   2e3c6:	f04f 0800 	mov.w	r8, #0
      const T* y_input_ptr = input_ptr + in_y * row_offset;
   2e3ca:	9b07      	ldr	r3, [sp, #28]
   2e3cc:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   2e3d0:	4343      	muls	r3, r0
   2e3d2:	9308      	str	r3, [sp, #32]
      for (int x = 0; x < output_width; ++x) {
   2e3d4:	45d0      	cmp	r8, sl
   2e3d6:	da15      	bge.n	2e404 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xfe>
        int32 in_x = GetNearestNeighbor(x, input_width, output_width,
   2e3d8:	786b      	ldrb	r3, [r5, #1]
   2e3da:	4652      	mov	r2, sl
   2e3dc:	4640      	mov	r0, r8
   2e3de:	9904      	ldr	r1, [sp, #16]
   2e3e0:	9300      	str	r3, [sp, #0]
   2e3e2:	782b      	ldrb	r3, [r5, #0]
   2e3e4:	f7ef fcb4 	bl	1dd50 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   2e3e8:	9a08      	ldr	r2, [sp, #32]
   2e3ea:	9b06      	ldr	r3, [sp, #24]
      for (int x = 0; x < output_width; ++x) {
   2e3ec:	f108 0801 	add.w	r8, r8, #1
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   2e3f0:	fb00 2003 	mla	r0, r0, r3, r2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   2e3f4:	4622      	mov	r2, r4
   2e3f6:	eb06 0180 	add.w	r1, r6, r0, lsl #2
   2e3fa:	4658      	mov	r0, fp
   2e3fc:	f002 fd34 	bl	30e68 <memcpy>
        output_ptr += depth;
   2e400:	44a3      	add	fp, r4
      for (int x = 0; x < output_width; ++x) {
   2e402:	e7e7      	b.n	2e3d4 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xce>
   2e404:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    for (int y = 0; y < output_height; ++y) {
   2e408:	3701      	adds	r7, #1
   2e40a:	4413      	add	r3, r2
   2e40c:	9324      	str	r3, [sp, #144]	; 0x90
   2e40e:	e7cf      	b.n	2e3b0 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xaa>
    input_ptr += batch_offset;
   2e410:	9b09      	ldr	r3, [sp, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
   2e412:	f109 0901 	add.w	r9, r9, #1
    input_ptr += batch_offset;
   2e416:	441e      	add	r6, r3
  for (int b = 0; b < batches; ++b) {
   2e418:	e7c6      	b.n	2e3a8 <_ZN6tflite13reference_ops21ResizeNearestNeighborIiEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xa2>
  const RuntimeShape output_shape =
   2e41a:	a812      	add	r0, sp, #72	; 0x48
   2e41c:	f7f9 f8fd 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   2e420:	a80c      	add	r0, sp, #48	; 0x30
   2e422:	f7f9 f8fa 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  }
}
   2e426:	b019      	add	sp, #100	; 0x64
   2e428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e42c <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>:
inline void ResizeNearestNeighbor(
   2e42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e430:	4698      	mov	r8, r3
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e432:	680b      	ldr	r3, [r1, #0]
inline void ResizeNearestNeighbor(
   2e434:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e436:	2b04      	cmp	r3, #4
inline void ResizeNearestNeighbor(
   2e438:	4604      	mov	r4, r0
   2e43a:	e9dd 7622 	ldrd	r7, r6, [sp, #136]	; 0x88
   2e43e:	4615      	mov	r5, r2
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e440:	dd01      	ble.n	2e446 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x1a>
   2e442:	f002 fcee 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   2e446:	6833      	ldr	r3, [r6, #0]
   2e448:	2b04      	cmp	r3, #4
   2e44a:	dcfa      	bgt.n	2e442 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
   2e44c:	460a      	mov	r2, r1
   2e44e:	2301      	movs	r3, #1
   2e450:	2104      	movs	r1, #4
   2e452:	a80c      	add	r0, sp, #48	; 0x30
   2e454:	f7f9 f981 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2e458:	4632      	mov	r2, r6
   2e45a:	2301      	movs	r3, #1
   2e45c:	2104      	movs	r1, #4
   2e45e:	a812      	add	r0, sp, #72	; 0x48
   2e460:	f7f9 f97b 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   2e464:	2300      	movs	r3, #0
   2e466:	aa12      	add	r2, sp, #72	; 0x48
   2e468:	4619      	mov	r1, r3
   2e46a:	a80c      	add	r0, sp, #48	; 0x30
   2e46c:	f7fb ff8a 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  int32 input_height = input_shape.Dims(1);
   2e470:	2101      	movs	r1, #1
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   2e472:	9009      	str	r0, [sp, #36]	; 0x24
  int32 input_height = input_shape.Dims(1);
   2e474:	a80c      	add	r0, sp, #48	; 0x30
   2e476:	f7f9 f8db 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 input_width = input_shape.Dims(2);
   2e47a:	2102      	movs	r1, #2
  int32 input_height = input_shape.Dims(1);
   2e47c:	9003      	str	r0, [sp, #12]
  int32 input_width = input_shape.Dims(2);
   2e47e:	a80c      	add	r0, sp, #48	; 0x30
   2e480:	f7f9 f8d6 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   2e484:	2303      	movs	r3, #3
  int32 input_width = input_shape.Dims(2);
   2e486:	9004      	str	r0, [sp, #16]
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   2e488:	4619      	mov	r1, r3
   2e48a:	aa12      	add	r2, sp, #72	; 0x48
   2e48c:	a80c      	add	r0, sp, #48	; 0x30
   2e48e:	f7fb ff79 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   2e492:	4606      	mov	r6, r0
  TFLITE_DCHECK_EQ(output_size_shape.FlatSize(), 2);
   2e494:	4640      	mov	r0, r8
   2e496:	f7f9 f950 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2e49a:	2802      	cmp	r0, #2
   2e49c:	d1d1      	bne.n	2e442 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
  int32 output_height = output_size_data[0];
   2e49e:	683b      	ldr	r3, [r7, #0]
  const int col_offset = input_shape.Dims(3);
   2e4a0:	2103      	movs	r1, #3
   2e4a2:	a80c      	add	r0, sp, #48	; 0x30
  int32 output_height = output_size_data[0];
   2e4a4:	9305      	str	r3, [sp, #20]
  const int col_offset = input_shape.Dims(3);
   2e4a6:	f7f9 f8c3 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e4aa:	4603      	mov	r3, r0
  for (int b = 0; b < batches; ++b) {
   2e4ac:	f04f 0900 	mov.w	r9, #0
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e4b0:	9a04      	ldr	r2, [sp, #16]
  int32 output_width = output_size_data[1];
   2e4b2:	f8d7 a004 	ldr.w	sl, [r7, #4]
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e4b6:	4353      	muls	r3, r2
  const int batch_offset = input_shape.Dims(1) * row_offset;
   2e4b8:	9a03      	ldr	r2, [sp, #12]
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e4ba:	9307      	str	r3, [sp, #28]
  const int batch_offset = input_shape.Dims(1) * row_offset;
   2e4bc:	4353      	muls	r3, r2
   2e4be:	930a      	str	r3, [sp, #40]	; 0x28
   2e4c0:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   2e4c4:	4373      	muls	r3, r6
  const int col_offset = input_shape.Dims(3);
   2e4c6:	9006      	str	r0, [sp, #24]
   2e4c8:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
   2e4ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e4cc:	4599      	cmp	r9, r3
   2e4ce:	da34      	bge.n	2e53a <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x10e>
    for (int y = 0; y < output_height; ++y) {
   2e4d0:	2700      	movs	r7, #0
   2e4d2:	9b05      	ldr	r3, [sp, #20]
   2e4d4:	429f      	cmp	r7, r3
   2e4d6:	da2b      	bge.n	2e530 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x104>
      int32 in_y = GetNearestNeighbor(y, input_height, output_height,
   2e4d8:	7863      	ldrb	r3, [r4, #1]
   2e4da:	4638      	mov	r0, r7
   2e4dc:	9300      	str	r3, [sp, #0]
   2e4de:	9a05      	ldr	r2, [sp, #20]
   2e4e0:	7823      	ldrb	r3, [r4, #0]
   2e4e2:	9903      	ldr	r1, [sp, #12]
   2e4e4:	f7ef fc34 	bl	1dd50 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
      for (int x = 0; x < output_width; ++x) {
   2e4e8:	f04f 0800 	mov.w	r8, #0
      const T* y_input_ptr = input_ptr + in_y * row_offset;
   2e4ec:	9b07      	ldr	r3, [sp, #28]
   2e4ee:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   2e4f2:	4343      	muls	r3, r0
   2e4f4:	9308      	str	r3, [sp, #32]
      for (int x = 0; x < output_width; ++x) {
   2e4f6:	45d0      	cmp	r8, sl
   2e4f8:	da14      	bge.n	2e524 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xf8>
        int32 in_x = GetNearestNeighbor(x, input_width, output_width,
   2e4fa:	7863      	ldrb	r3, [r4, #1]
   2e4fc:	4652      	mov	r2, sl
   2e4fe:	4640      	mov	r0, r8
   2e500:	9904      	ldr	r1, [sp, #16]
   2e502:	9300      	str	r3, [sp, #0]
   2e504:	7823      	ldrb	r3, [r4, #0]
   2e506:	f7ef fc23 	bl	1dd50 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   2e50a:	9a08      	ldr	r2, [sp, #32]
   2e50c:	9b06      	ldr	r3, [sp, #24]
      for (int x = 0; x < output_width; ++x) {
   2e50e:	f108 0801 	add.w	r8, r8, #1
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   2e512:	fb00 2003 	mla	r0, r0, r3, r2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   2e516:	4632      	mov	r2, r6
   2e518:	1829      	adds	r1, r5, r0
   2e51a:	4658      	mov	r0, fp
   2e51c:	f002 fca4 	bl	30e68 <memcpy>
        output_ptr += depth;
   2e520:	44b3      	add	fp, r6
      for (int x = 0; x < output_width; ++x) {
   2e522:	e7e8      	b.n	2e4f6 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xca>
   2e524:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e526:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    for (int y = 0; y < output_height; ++y) {
   2e528:	3701      	adds	r7, #1
   2e52a:	4413      	add	r3, r2
   2e52c:	9324      	str	r3, [sp, #144]	; 0x90
   2e52e:	e7d0      	b.n	2e4d2 <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xa6>
    input_ptr += batch_offset;
   2e530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
   2e532:	f109 0901 	add.w	r9, r9, #1
    input_ptr += batch_offset;
   2e536:	441d      	add	r5, r3
  for (int b = 0; b < batches; ++b) {
   2e538:	e7c7      	b.n	2e4ca <_ZN6tflite13reference_ops21ResizeNearestNeighborIhEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x9e>
  const RuntimeShape output_shape =
   2e53a:	a812      	add	r0, sp, #72	; 0x48
   2e53c:	f7f9 f86d 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   2e540:	a80c      	add	r0, sp, #48	; 0x30
   2e542:	f7f9 f86a 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2e546:	b019      	add	sp, #100	; 0x64
   2e548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e54c <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_>:
inline void ResizeNearestNeighbor(
   2e54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e550:	4698      	mov	r8, r3
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e552:	680b      	ldr	r3, [r1, #0]
inline void ResizeNearestNeighbor(
   2e554:	b099      	sub	sp, #100	; 0x64
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e556:	2b04      	cmp	r3, #4
inline void ResizeNearestNeighbor(
   2e558:	4604      	mov	r4, r0
   2e55a:	e9dd 7622 	ldrd	r7, r6, [sp, #136]	; 0x88
   2e55e:	4615      	mov	r5, r2
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 4);
   2e560:	dd01      	ble.n	2e566 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x1a>
   2e562:	f002 fc5e 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 4);
   2e566:	6833      	ldr	r3, [r6, #0]
   2e568:	2b04      	cmp	r3, #4
   2e56a:	dcfa      	bgt.n	2e562 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
   2e56c:	460a      	mov	r2, r1
   2e56e:	2301      	movs	r3, #1
   2e570:	2104      	movs	r1, #4
   2e572:	a80c      	add	r0, sp, #48	; 0x30
   2e574:	f7f9 f8f1 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2e578:	4632      	mov	r2, r6
   2e57a:	2301      	movs	r3, #1
   2e57c:	2104      	movs	r1, #4
   2e57e:	a812      	add	r0, sp, #72	; 0x48
   2e580:	f7f9 f8eb 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   2e584:	2300      	movs	r3, #0
   2e586:	aa12      	add	r2, sp, #72	; 0x48
   2e588:	4619      	mov	r1, r3
   2e58a:	a80c      	add	r0, sp, #48	; 0x30
   2e58c:	f7fb fefa 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
  int32 input_height = input_shape.Dims(1);
   2e590:	2101      	movs	r1, #1
  int32 batches = MatchingDim(input_shape, 0, output_shape, 0);
   2e592:	9009      	str	r0, [sp, #36]	; 0x24
  int32 input_height = input_shape.Dims(1);
   2e594:	a80c      	add	r0, sp, #48	; 0x30
   2e596:	f7f9 f84b 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 input_width = input_shape.Dims(2);
   2e59a:	2102      	movs	r1, #2
  int32 input_height = input_shape.Dims(1);
   2e59c:	9003      	str	r0, [sp, #12]
  int32 input_width = input_shape.Dims(2);
   2e59e:	a80c      	add	r0, sp, #48	; 0x30
   2e5a0:	f7f9 f846 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   2e5a4:	2303      	movs	r3, #3
  int32 input_width = input_shape.Dims(2);
   2e5a6:	9004      	str	r0, [sp, #16]
  int32 depth = MatchingDim(input_shape, 3, output_shape, 3);
   2e5a8:	4619      	mov	r1, r3
   2e5aa:	aa12      	add	r2, sp, #72	; 0x48
   2e5ac:	a80c      	add	r0, sp, #48	; 0x30
   2e5ae:	f7fb fee9 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   2e5b2:	4606      	mov	r6, r0
  TFLITE_DCHECK_EQ(output_size_shape.FlatSize(), 2);
   2e5b4:	4640      	mov	r0, r8
   2e5b6:	f7f9 f8c0 	bl	2773a <_ZNK6tflite12RuntimeShape8FlatSizeEv>
   2e5ba:	2802      	cmp	r0, #2
   2e5bc:	d1d1      	bne.n	2e562 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x16>
  int32 output_height = output_size_data[0];
   2e5be:	683b      	ldr	r3, [r7, #0]
  const int col_offset = input_shape.Dims(3);
   2e5c0:	2103      	movs	r1, #3
   2e5c2:	a80c      	add	r0, sp, #48	; 0x30
  int32 output_height = output_size_data[0];
   2e5c4:	9305      	str	r3, [sp, #20]
  const int col_offset = input_shape.Dims(3);
   2e5c6:	f7f9 f833 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e5ca:	4603      	mov	r3, r0
  for (int b = 0; b < batches; ++b) {
   2e5cc:	f04f 0900 	mov.w	r9, #0
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e5d0:	9a04      	ldr	r2, [sp, #16]
  int32 output_width = output_size_data[1];
   2e5d2:	f8d7 a004 	ldr.w	sl, [r7, #4]
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e5d6:	4353      	muls	r3, r2
  const int batch_offset = input_shape.Dims(1) * row_offset;
   2e5d8:	9a03      	ldr	r2, [sp, #12]
  const int row_offset = input_shape.Dims(2) * col_offset;
   2e5da:	9307      	str	r3, [sp, #28]
  const int batch_offset = input_shape.Dims(1) * row_offset;
   2e5dc:	4353      	muls	r3, r2
   2e5de:	930a      	str	r3, [sp, #40]	; 0x28
   2e5e0:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   2e5e4:	4373      	muls	r3, r6
  const int col_offset = input_shape.Dims(3);
   2e5e6:	9006      	str	r0, [sp, #24]
   2e5e8:	930b      	str	r3, [sp, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
   2e5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e5ec:	4599      	cmp	r9, r3
   2e5ee:	da34      	bge.n	2e65a <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x10e>
    for (int y = 0; y < output_height; ++y) {
   2e5f0:	2700      	movs	r7, #0
   2e5f2:	9b05      	ldr	r3, [sp, #20]
   2e5f4:	429f      	cmp	r7, r3
   2e5f6:	da2b      	bge.n	2e650 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x104>
      int32 in_y = GetNearestNeighbor(y, input_height, output_height,
   2e5f8:	7863      	ldrb	r3, [r4, #1]
   2e5fa:	4638      	mov	r0, r7
   2e5fc:	9300      	str	r3, [sp, #0]
   2e5fe:	9a05      	ldr	r2, [sp, #20]
   2e600:	7823      	ldrb	r3, [r4, #0]
   2e602:	9903      	ldr	r1, [sp, #12]
   2e604:	f7ef fba4 	bl	1dd50 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
      for (int x = 0; x < output_width; ++x) {
   2e608:	f04f 0800 	mov.w	r8, #0
      const T* y_input_ptr = input_ptr + in_y * row_offset;
   2e60c:	9b07      	ldr	r3, [sp, #28]
   2e60e:	f8dd b090 	ldr.w	fp, [sp, #144]	; 0x90
   2e612:	4343      	muls	r3, r0
   2e614:	9308      	str	r3, [sp, #32]
      for (int x = 0; x < output_width; ++x) {
   2e616:	45d0      	cmp	r8, sl
   2e618:	da14      	bge.n	2e644 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xf8>
        int32 in_x = GetNearestNeighbor(x, input_width, output_width,
   2e61a:	7863      	ldrb	r3, [r4, #1]
   2e61c:	4652      	mov	r2, sl
   2e61e:	4640      	mov	r0, r8
   2e620:	9904      	ldr	r1, [sp, #16]
   2e622:	9300      	str	r3, [sp, #0]
   2e624:	7823      	ldrb	r3, [r4, #0]
   2e626:	f7ef fb93 	bl	1dd50 <_ZN6tflite13reference_ops18GetNearestNeighborEiiibb>
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   2e62a:	9a08      	ldr	r2, [sp, #32]
   2e62c:	9b06      	ldr	r3, [sp, #24]
      for (int x = 0; x < output_width; ++x) {
   2e62e:	f108 0801 	add.w	r8, r8, #1
        const T* x_input_ptr = y_input_ptr + in_x * col_offset;
   2e632:	fb00 2003 	mla	r0, r0, r3, r2
        memcpy(output_ptr, x_input_ptr, depth * sizeof(T));
   2e636:	4632      	mov	r2, r6
   2e638:	1829      	adds	r1, r5, r0
   2e63a:	4658      	mov	r0, fp
   2e63c:	f002 fc14 	bl	30e68 <memcpy>
        output_ptr += depth;
   2e640:	44b3      	add	fp, r6
      for (int x = 0; x < output_width; ++x) {
   2e642:	e7e8      	b.n	2e616 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xca>
   2e644:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2e646:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    for (int y = 0; y < output_height; ++y) {
   2e648:	3701      	adds	r7, #1
   2e64a:	4413      	add	r3, r2
   2e64c:	9324      	str	r3, [sp, #144]	; 0x90
   2e64e:	e7d0      	b.n	2e5f2 <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0xa6>
    input_ptr += batch_offset;
   2e650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
   2e652:	f109 0901 	add.w	r9, r9, #1
    input_ptr += batch_offset;
   2e656:	441d      	add	r5, r3
  for (int b = 0; b < batches; ++b) {
   2e658:	e7c7      	b.n	2e5ea <_ZN6tflite13reference_ops21ResizeNearestNeighborIaEEvRKNS_27ResizeNearestNeighborParamsERKNS_12RuntimeShapeEPKT_S7_PKiS7_PS8_+0x9e>
  const RuntimeShape output_shape =
   2e65a:	a812      	add	r0, sp, #72	; 0x48
   2e65c:	f7f8 ffdd 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   2e660:	a80c      	add	r0, sp, #48	; 0x30
   2e662:	f7f8 ffda 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2e666:	b019      	add	sp, #100	; 0x64
   2e668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e66c <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf>:
    return floor_val = floor_val + 1.0f;
  }
}

inline void Round(const RuntimeShape& input_shape, const float* input_data,
                  const RuntimeShape& output_shape, float* output_data) {
   2e66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e670:	461e      	mov	r6, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
   2e672:	f8d0 8000 	ldr.w	r8, [r0]
   2e676:	6813      	ldr	r3, [r2, #0]
   2e678:	4604      	mov	r4, r0
   2e67a:	4598      	cmp	r8, r3
   2e67c:	460f      	mov	r7, r1
   2e67e:	4691      	mov	r9, r2
   2e680:	d001      	beq.n	2e686 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x1a>
   2e682:	f002 fbce 	bl	30e22 <abort>
  for (int i = 0; i < dims_count; ++i) {
   2e686:	2500      	movs	r5, #0
   2e688:	45a8      	cmp	r8, r5
   2e68a:	dd0c      	ble.n	2e6a6 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x3a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
   2e68c:	4629      	mov	r1, r5
   2e68e:	4620      	mov	r0, r4
   2e690:	f7f8 ffce 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e694:	4629      	mov	r1, r5
   2e696:	4682      	mov	sl, r0
   2e698:	4648      	mov	r0, r9
   2e69a:	f7f8 ffc9 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2e69e:	4582      	cmp	sl, r0
   2e6a0:	d1ef      	bne.n	2e682 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x16>
  for (int i = 0; i < dims_count; ++i) {
   2e6a2:	3501      	adds	r5, #1
   2e6a4:	e7f0      	b.n	2e688 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x1c>
    for (int i = 0; i < size_; i++) {
   2e6a6:	2300      	movs	r3, #0
    int buffer_size = 1;
   2e6a8:	2001      	movs	r0, #1
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
   2e6aa:	f1b8 0f05 	cmp.w	r8, #5
   2e6ae:	bfcc      	ite	gt
   2e6b0:	6864      	ldrgt	r4, [r4, #4]
   2e6b2:	3404      	addle	r4, #4
    for (int i = 0; i < size_; i++) {
   2e6b4:	4598      	cmp	r8, r3
   2e6b6:	dc24      	bgt.n	2e702 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x96>
   2e6b8:	4633      	mov	r3, r6
   2e6ba:	4639      	mov	r1, r7
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
  for (int i = 0; i < flat_size; ++i) {
   2e6bc:	2200      	movs	r2, #0
  if ((diff < 0.5f) ||
   2e6be:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    return floor_val = floor_val + 1.0f;
   2e6c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  for (int i = 0; i < flat_size; ++i) {
   2e6c6:	4282      	cmp	r2, r0
   2e6c8:	da20      	bge.n	2e70c <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0xa0>
    // Note that this implementation matches that of tensorFlow tf.round
    // and corresponds to the bankers rounding method.
    // cfenv (for fesetround) is not yet supported universally on Android, so
    // using a work around.
    output_data[i] = RoundToNearest(input_data[i]);
   2e6ca:	ecb1 7a01 	vldmia	r1!, {s14}
  { return __builtin_floorf(__x); }
   2e6ce:	fefb 7a47 	vrintm.f32	s15, s14
  auto diff = value - floor_val;
   2e6d2:	ee37 7a67 	vsub.f32	s14, s14, s15
  if ((diff < 0.5f) ||
   2e6d6:	eeb4 7ae6 	vcmpe.f32	s14, s13
   2e6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2e6de:	d40c      	bmi.n	2e6fa <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x8e>
   2e6e0:	eeb4 7a66 	vcmp.f32	s14, s13
   2e6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2e6e8:	d105      	bne.n	2e6f6 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x8a>
      ((diff == 0.5f) && (static_cast<int>(floor_val) % 2 == 0))) {
   2e6ea:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   2e6ee:	ee17 4a10 	vmov	r4, s14
   2e6f2:	07e4      	lsls	r4, r4, #31
   2e6f4:	d501      	bpl.n	2e6fa <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x8e>
    return floor_val = floor_val + 1.0f;
   2e6f6:	ee77 7a86 	vadd.f32	s15, s15, s12
    output_data[i] = RoundToNearest(input_data[i]);
   2e6fa:	ece3 7a01 	vstmia	r3!, {s15}
  for (int i = 0; i < flat_size; ++i) {
   2e6fe:	3201      	adds	r2, #1
   2e700:	e7e1      	b.n	2e6c6 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x5a>
      buffer_size *= dims_data[i];
   2e702:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    for (int i = 0; i < size_; i++) {
   2e706:	3301      	adds	r3, #1
      buffer_size *= dims_data[i];
   2e708:	4350      	muls	r0, r2
    for (int i = 0; i < size_; i++) {
   2e70a:	e7d3      	b.n	2e6b4 <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf+0x48>
  }
}
   2e70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002e710 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode>:
  return &context->tensors[node->inputs->data[index]];
   2e710:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   2e712:	b530      	push	{r4, r5, lr}
   2e714:	685a      	ldr	r2, [r3, #4]
  return &context->tensors[node->outputs->data[index]];
   2e716:	684b      	ldr	r3, [r1, #4]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
   2e718:	6884      	ldr	r4, [r0, #8]
   2e71a:	685d      	ldr	r5, [r3, #4]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
   2e71c:	b08d      	sub	sp, #52	; 0x34
   2e71e:	eb04 1585 	add.w	r5, r4, r5, lsl #6
  if (tensor == nullptr) {
   2e722:	eb14 1482 	adds.w	r4, r4, r2, lsl #6
   2e726:	d111      	bne.n	2e74c <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  RuntimeShape() : size_(0) {}
   2e728:	9400      	str	r4, [sp, #0]
   2e72a:	b9cd      	cbnz	r5, 2e760 <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x50>
   2e72c:	9506      	str	r5, [sp, #24]
  reference_ops::Round(GetTensorShape(input), GetTensorData<float>(input),
   2e72e:	462b      	mov	r3, r5
   2e730:	4621      	mov	r1, r4
   2e732:	aa06      	add	r2, sp, #24
   2e734:	4668      	mov	r0, sp
   2e736:	f7ff ff99 	bl	2e66c <_ZN6tflite13reference_ops5RoundERKNS_12RuntimeShapeEPKfS3_Pf>
                       GetTensorShape(output), GetTensorData<float>(output));
   2e73a:	a806      	add	r0, sp, #24
   2e73c:	f7f8 ff6d 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Round(GetTensorShape(input), GetTensorData<float>(input),
   2e740:	4668      	mov	r0, sp
   2e742:	f7f8 ff6a 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2e746:	2000      	movs	r0, #0
   2e748:	b00d      	add	sp, #52	; 0x34
   2e74a:	bd30      	pop	{r4, r5, pc}
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   2e74c:	2300      	movs	r3, #0
  const int dims_size = dims->size;
   2e74e:	68a2      	ldr	r2, [r4, #8]
    ReplaceWith(dimensions_count, dims_data);
   2e750:	4668      	mov	r0, sp
   2e752:	f852 1b04 	ldr.w	r1, [r2], #4
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   2e756:	9300      	str	r3, [sp, #0]
    ReplaceWith(dimensions_count, dims_data);
   2e758:	f7f9 ff65 	bl	28626 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2e75c:	6864      	ldr	r4, [r4, #4]
   2e75e:	e7e4      	b.n	2e72a <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x1a>
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   2e760:	2300      	movs	r3, #0
  const int dims_size = dims->size;
   2e762:	68aa      	ldr	r2, [r5, #8]
    ReplaceWith(dimensions_count, dims_data);
   2e764:	a806      	add	r0, sp, #24
   2e766:	f852 1b04 	ldr.w	r1, [r2], #4
  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
   2e76a:	9306      	str	r3, [sp, #24]
    ReplaceWith(dimensions_count, dims_data);
   2e76c:	f7f9 ff5b 	bl	28626 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKi>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2e770:	686d      	ldr	r5, [r5, #4]
   2e772:	e7dc      	b.n	2e72e <_ZN6tflite3ops5micro5round4EvalEP13TfLiteContextP10TfLiteNode+0x1e>

0002e774 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                  const SoftmaxParams& op_data) {
   2e774:	b570      	push	{r4, r5, r6, lr}
   2e776:	4604      	mov	r4, r0
   2e778:	b08e      	sub	sp, #56	; 0x38
   2e77a:	460d      	mov	r5, r1
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   2e77c:	4601      	mov	r1, r0
   2e77e:	a802      	add	r0, sp, #8
                  const SoftmaxParams& op_data) {
   2e780:	4616      	mov	r6, r2
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   2e782:	f7f8 ff8f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2e786:	b104      	cbz	r4, 2e78a <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x16>
   2e788:	6864      	ldr	r4, [r4, #4]
      GetTensorShape(output), GetTensorData<float>(output));
   2e78a:	4629      	mov	r1, r5
   2e78c:	a808      	add	r0, sp, #32
   2e78e:	f7f8 ff89 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2e792:	b105      	cbz	r5, 2e796 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x22>
   2e794:	686d      	ldr	r5, [r5, #4]
  tflite::reference_ops::Softmax(
   2e796:	4622      	mov	r2, r4
   2e798:	ab08      	add	r3, sp, #32
   2e79a:	a902      	add	r1, sp, #8
   2e79c:	4630      	mov	r0, r6
   2e79e:	9500      	str	r5, [sp, #0]
   2e7a0:	f7ef fcca 	bl	1e138 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
   2e7a4:	a808      	add	r0, sp, #32
   2e7a6:	f7f8 ff38 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
   2e7aa:	a802      	add	r0, sp, #8
   2e7ac:	f7f8 ff35 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2e7b0:	b00e      	add	sp, #56	; 0x38
   2e7b2:	bd70      	pop	{r4, r5, r6, pc}

0002e7b4 <_ZN6tflite13GetReciprocalEiiPi>:
                           int* num_bits_over_unit) {
   2e7b4:	b508      	push	{r3, lr}
  return integer_input ? __builtin_clz(integer_input)
   2e7b6:	fab0 f380 	clz	r3, r0
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   2e7ba:	1ac9      	subs	r1, r1, r3
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
   2e7bc:	4098      	lsls	r0, r3
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
   2e7be:	6011      	str	r1, [r2, #0]
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
   2e7c0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   2e7c4:	f7ec ffaa 	bl	1b71c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
}
   2e7c8:	bd08      	pop	{r3, pc}

0002e7ca <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   2e7ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e7ce:	460c      	mov	r4, r1
   2e7d0:	b08d      	sub	sp, #52	; 0x34
   2e7d2:	9203      	str	r2, [sp, #12]
   2e7d4:	461a      	mov	r2, r3
  const int32 input_beta_left_shift = params.input_left_shift;
   2e7d6:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   2e7da:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   2e7dc:	6983      	ldr	r3, [r0, #24]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e7de:	4620      	mov	r0, r4
  const int diff_min = params.diff_min;
   2e7e0:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   2e7e2:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e7e4:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   2e7e6:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e7e8:	4619      	mov	r1, r3
   2e7ea:	9304      	str	r3, [sp, #16]
   2e7ec:	f7fd fa97 	bl	2bd1e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   2e7f0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e7f4:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   2e7f6:	4619      	mov	r1, r3
   2e7f8:	4620      	mov	r0, r4
   2e7fa:	f7fb fdc3 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   2e7fe:	2400      	movs	r4, #0
   2e800:	4605      	mov	r5, r0
  for (int i = 0; i < outer_size; ++i) {
   2e802:	46a0      	mov	r8, r4
    InputT max_in_row = std::numeric_limits<InputT>::min();
   2e804:	46a1      	mov	r9, r4
  for (int i = 0; i < outer_size; ++i) {
   2e806:	9b02      	ldr	r3, [sp, #8]
   2e808:	4598      	cmp	r8, r3
   2e80a:	da71      	bge.n	2e8f0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x126>
   2e80c:	9b03      	ldr	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   2e80e:	2200      	movs	r2, #0
   2e810:	191f      	adds	r7, r3, r4
    InputT max_in_row = std::numeric_limits<InputT>::min();
   2e812:	4639      	mov	r1, r7
   2e814:	f88d 901f 	strb.w	r9, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   2e818:	42aa      	cmp	r2, r5
   2e81a:	da0e      	bge.n	2e83a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   2e81c:	460b      	mov	r3, r1
      if (__a < __b)
   2e81e:	f89d 001f 	ldrb.w	r0, [sp, #31]
   2e822:	781e      	ldrb	r6, [r3, #0]
   2e824:	3101      	adds	r1, #1
   2e826:	4286      	cmp	r6, r0
      return __a;
   2e828:	f10d 001f 	add.w	r0, sp, #31
   2e82c:	bf98      	it	ls
   2e82e:	4603      	movls	r3, r0
   2e830:	781b      	ldrb	r3, [r3, #0]
    for (int c = 0; c < depth; ++c) {
   2e832:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   2e834:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   2e838:	e7ee      	b.n	2e818 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   2e83a:	2600      	movs	r6, #0
   2e83c:	463b      	mov	r3, r7
    for (int c = 0; c < depth; ++c) {
   2e83e:	46b2      	mov	sl, r6
   2e840:	45aa      	cmp	sl, r5
   2e842:	da17      	bge.n	2e874 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xaa>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   2e844:	f89d 201f 	ldrb.w	r2, [sp, #31]
   2e848:	f813 0b01 	ldrb.w	r0, [r3], #1
      int32 input_diff =
   2e84c:	1a80      	subs	r0, r0, r2
      if (input_diff >= diff_min) {
   2e84e:	9a01      	ldr	r2, [sp, #4]
   2e850:	4282      	cmp	r2, r0
   2e852:	dc0c      	bgt.n	2e86e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa4>
   2e854:	9304      	str	r3, [sp, #16]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
   2e856:	9b00      	ldr	r3, [sp, #0]
   2e858:	4659      	mov	r1, fp
   2e85a:	4098      	lsls	r0, r3
   2e85c:	f7ec fcee 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   2e860:	f7ef fd06 	bl	1e270 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   2e864:	210c      	movs	r1, #12
   2e866:	f7ec fd21 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   2e86a:	9b04      	ldr	r3, [sp, #16]
   2e86c:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   2e86e:	f10a 0a01 	add.w	sl, sl, #1
   2e872:	e7e5      	b.n	2e840 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   2e874:	4630      	mov	r0, r6
   2e876:	210c      	movs	r1, #12
   2e878:	aa08      	add	r2, sp, #32
   2e87a:	f7ff ff9b 	bl	2e7b4 <_ZN6tflite13GetReciprocalEiiPi>
   2e87e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2e880:	4682      	mov	sl, r0
   2e882:	191e      	adds	r6, r3, r4
    for (int c = 0; c < depth; ++c) {
   2e884:	2300      	movs	r3, #0
   2e886:	42ab      	cmp	r3, r5
   2e888:	da2e      	bge.n	2e8e8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11e>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   2e88a:	f89d 101f 	ldrb.w	r1, [sp, #31]
   2e88e:	f817 0b01 	ldrb.w	r0, [r7], #1
      int32 input_diff =
   2e892:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   2e894:	9901      	ldr	r1, [sp, #4]
   2e896:	4281      	cmp	r1, r0
   2e898:	dc23      	bgt.n	2e8e2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x118>
   2e89a:	9304      	str	r3, [sp, #16]
   2e89c:	9b00      	ldr	r3, [sp, #0]
   2e89e:	4659      	mov	r1, fp
   2e8a0:	4098      	lsls	r0, r3
   2e8a2:	f7ec fccb 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   2e8a6:	f7ef fce3 	bl	1e270 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   2e8aa:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   2e8ac:	4650      	mov	r0, sl
   2e8ae:	f7fd fc99 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   2e8b2:	9908      	ldr	r1, [sp, #32]
   2e8b4:	3117      	adds	r1, #23
   2e8b6:	f7ec fcf9 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   2e8ba:	23ff      	movs	r3, #255	; 0xff
      if (__b < __a)
   2e8bc:	4298      	cmp	r0, r3
	return __b;
   2e8be:	bfcc      	ite	gt
   2e8c0:	a90a      	addgt	r1, sp, #40	; 0x28
      return __a;
   2e8c2:	a909      	addle	r1, sp, #36	; 0x24
   2e8c4:	930a      	str	r3, [sp, #40]	; 0x28
        const int32 shifted_output =
   2e8c6:	9009      	str	r0, [sp, #36]	; 0x24
      if (__a < __b)
   2e8c8:	6808      	ldr	r0, [r1, #0]
      if (__b < __a)
   2e8ca:	aa0b      	add	r2, sp, #44	; 0x2c
      if (__a < __b)
   2e8cc:	2800      	cmp	r0, #0
	return __b;
   2e8ce:	bfb8      	it	lt
   2e8d0:	4611      	movlt	r1, r2
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   2e8d2:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   2e8d6:	6809      	ldr	r1, [r1, #0]
      if (__b < __a)
   2e8d8:	9b04      	ldr	r3, [sp, #16]
   2e8da:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   2e8dc:	3301      	adds	r3, #1
   2e8de:	3601      	adds	r6, #1
   2e8e0:	e7d1      	b.n	2e886 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xbc>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   2e8e2:	f886 9000 	strb.w	r9, [r6]
   2e8e6:	e7f9      	b.n	2e8dc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
  for (int i = 0; i < outer_size; ++i) {
   2e8e8:	f108 0801 	add.w	r8, r8, #1
   2e8ec:	442c      	add	r4, r5
   2e8ee:	e78a      	b.n	2e806 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c>
}
   2e8f0:	b00d      	add	sp, #52	; 0x34
   2e8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e8f6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
   2e8f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e8fa:	460c      	mov	r4, r1
   2e8fc:	b08d      	sub	sp, #52	; 0x34
   2e8fe:	9203      	str	r2, [sp, #12]
   2e900:	461a      	mov	r2, r3
  const int32 input_beta_left_shift = params.input_left_shift;
   2e902:	e9d0 b302 	ldrd	fp, r3, [r0, #8]
   2e906:	9300      	str	r3, [sp, #0]
  const int diff_min = params.diff_min;
   2e908:	6983      	ldr	r3, [r0, #24]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e90a:	4620      	mov	r0, r4
  const int diff_min = params.diff_min;
   2e90c:	9301      	str	r3, [sp, #4]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   2e90e:	680b      	ldr	r3, [r1, #0]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e910:	9205      	str	r2, [sp, #20]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
   2e912:	3b01      	subs	r3, #1
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e914:	4619      	mov	r1, r3
   2e916:	9304      	str	r3, [sp, #16]
   2e918:	f7fd fa01 	bl	2bd1e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   2e91c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
   2e920:	9002      	str	r0, [sp, #8]
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
   2e922:	4619      	mov	r1, r3
   2e924:	4620      	mov	r0, r4
   2e926:	f7fb fd2d 	bl	2a384 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
   2e92a:	2500      	movs	r5, #0
   2e92c:	4604      	mov	r4, r0
  for (int i = 0; i < outer_size; ++i) {
   2e92e:	46a8      	mov	r8, r5
   2e930:	9b02      	ldr	r3, [sp, #8]
   2e932:	4598      	cmp	r8, r3
   2e934:	da74      	bge.n	2ea20 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x12a>
    InputT max_in_row = std::numeric_limits<InputT>::min();
   2e936:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   2e93a:	f88d 301f 	strb.w	r3, [sp, #31]
   2e93e:	9b03      	ldr	r3, [sp, #12]
    for (int c = 0; c < depth; ++c) {
   2e940:	2200      	movs	r2, #0
   2e942:	195f      	adds	r7, r3, r5
    InputT max_in_row = std::numeric_limits<InputT>::min();
   2e944:	4639      	mov	r1, r7
    for (int c = 0; c < depth; ++c) {
   2e946:	42a2      	cmp	r2, r4
   2e948:	da10      	bge.n	2e96c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x76>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   2e94a:	460b      	mov	r3, r1
      if (__a < __b)
   2e94c:	f99d 001f 	ldrsb.w	r0, [sp, #31]
   2e950:	f993 6000 	ldrsb.w	r6, [r3]
   2e954:	3101      	adds	r1, #1
   2e956:	4286      	cmp	r6, r0
      return __a;
   2e958:	f10d 001f 	add.w	r0, sp, #31
   2e95c:	bfd8      	it	le
   2e95e:	4603      	movle	r3, r0
   2e960:	f993 3000 	ldrsb.w	r3, [r3]
    for (int c = 0; c < depth; ++c) {
   2e964:	3201      	adds	r2, #1
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
   2e966:	f88d 301f 	strb.w	r3, [sp, #31]
    for (int c = 0; c < depth; ++c) {
   2e96a:	e7ec      	b.n	2e946 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x50>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
   2e96c:	2600      	movs	r6, #0
   2e96e:	46ba      	mov	sl, r7
    for (int c = 0; c < depth; ++c) {
   2e970:	46b1      	mov	r9, r6
   2e972:	45a1      	cmp	r9, r4
   2e974:	da15      	bge.n	2e9a2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xac>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   2e976:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   2e97a:	f91a 0b01 	ldrsb.w	r0, [sl], #1
      int32 input_diff =
   2e97e:	1ac0      	subs	r0, r0, r3
      if (input_diff >= diff_min) {
   2e980:	9b01      	ldr	r3, [sp, #4]
   2e982:	4283      	cmp	r3, r0
   2e984:	dc0a      	bgt.n	2e99c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa6>
   2e986:	9b00      	ldr	r3, [sp, #0]
   2e988:	4659      	mov	r1, fp
   2e98a:	4098      	lsls	r0, r3
   2e98c:	f7ec fc56 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
   2e990:	f7ef fc6e 	bl	1e270 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
   2e994:	210c      	movs	r1, #12
   2e996:	f7ec fc89 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
  return a + b;
   2e99a:	4406      	add	r6, r0
    for (int c = 0; c < depth; ++c) {
   2e99c:	f109 0901 	add.w	r9, r9, #1
   2e9a0:	e7e7      	b.n	2e972 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x7c>
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   2e9a2:	4630      	mov	r0, r6
   2e9a4:	210c      	movs	r1, #12
   2e9a6:	aa08      	add	r2, sp, #32
   2e9a8:	f7ff ff04 	bl	2e7b4 <_ZN6tflite13GetReciprocalEiiPi>
    for (int c = 0; c < depth; ++c) {
   2e9ac:	f04f 0900 	mov.w	r9, #0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
   2e9b0:	4682      	mov	sl, r0
   2e9b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2e9b4:	195e      	adds	r6, r3, r5
    for (int c = 0; c < depth; ++c) {
   2e9b6:	45a1      	cmp	r9, r4
   2e9b8:	da2e      	bge.n	2ea18 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x122>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
   2e9ba:	f99d 101f 	ldrsb.w	r1, [sp, #31]
   2e9be:	f917 0b01 	ldrsb.w	r0, [r7], #1
      int32 input_diff =
   2e9c2:	1a40      	subs	r0, r0, r1
      if (input_diff >= diff_min) {
   2e9c4:	9901      	ldr	r1, [sp, #4]
   2e9c6:	4281      	cmp	r1, r0
   2e9c8:	dc23      	bgt.n	2ea12 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x11c>
   2e9ca:	9b00      	ldr	r3, [sp, #0]
   2e9cc:	4659      	mov	r1, fp
   2e9ce:	4098      	lsls	r0, r3
   2e9d0:	f7ec fc34 	bl	1b23c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIiEET_S1_S1_>
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
   2e9d4:	f7ef fc4c 	bl	1e270 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   2e9d8:	4601      	mov	r1, r0
            (shifted_scale * exp_in_0).raw(),
   2e9da:	4650      	mov	r0, sl
   2e9dc:	f7fd fc02 	bl	2c1e4 <_ZN8gemmlowpmlIiLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
   2e9e0:	9908      	ldr	r1, [sp, #32]
   2e9e2:	3117      	adds	r1, #23
   2e9e4:	f7ec fc62 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   2e9e8:	237f      	movs	r3, #127	; 0x7f
      if (__b < __a)
   2e9ea:	f06f 027f 	mvn.w	r2, #127	; 0x7f
            unsat_output +
   2e9ee:	3880      	subs	r0, #128	; 0x80
   2e9f0:	4298      	cmp	r0, r3
	return __b;
   2e9f2:	bfcc      	ite	gt
   2e9f4:	a90a      	addgt	r1, sp, #40	; 0x28
      return __a;
   2e9f6:	a909      	addle	r1, sp, #36	; 0x24
        const int32 shifted_output =
   2e9f8:	9009      	str	r0, [sp, #36]	; 0x24
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
   2e9fa:	930a      	str	r3, [sp, #40]	; 0x28
      if (__a < __b)
   2e9fc:	6808      	ldr	r0, [r1, #0]
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
   2e9fe:	920b      	str	r2, [sp, #44]	; 0x2c
   2ea00:	3080      	adds	r0, #128	; 0x80
	return __b;
   2ea02:	bfb8      	it	lt
   2ea04:	a90b      	addlt	r1, sp, #44	; 0x2c
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
   2ea06:	6809      	ldr	r1, [r1, #0]
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   2ea08:	7031      	strb	r1, [r6, #0]
    for (int c = 0; c < depth; ++c) {
   2ea0a:	f109 0901 	add.w	r9, r9, #1
   2ea0e:	3601      	adds	r6, #1
   2ea10:	e7d1      	b.n	2e9b6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xc0>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
   2ea12:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   2ea16:	e7f7      	b.n	2ea08 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x112>
  for (int i = 0; i < outer_size; ++i) {
   2ea18:	f108 0801 	add.w	r8, r8, #1
   2ea1c:	4425      	add	r5, r4
   2ea1e:	e787      	b.n	2e930 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a>
}
   2ea20:	b00d      	add	sp, #52	; 0x34
   2ea22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ea26 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:
                      const SoftmaxParams& op_data) {
   2ea26:	b570      	push	{r4, r5, r6, lr}
  if (input->type == kTfLiteUInt8) {
   2ea28:	7803      	ldrb	r3, [r0, #0]
                      const SoftmaxParams& op_data) {
   2ea2a:	4605      	mov	r5, r0
  if (input->type == kTfLiteUInt8) {
   2ea2c:	2b03      	cmp	r3, #3
                      const SoftmaxParams& op_data) {
   2ea2e:	460c      	mov	r4, r1
   2ea30:	4616      	mov	r6, r2
   2ea32:	b090      	sub	sp, #64	; 0x40
  if (input->type == kTfLiteUInt8) {
   2ea34:	d11a      	bne.n	2ea6c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x46>
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
   2ea36:	4601      	mov	r1, r0
   2ea38:	a804      	add	r0, sp, #16
   2ea3a:	f7f8 fe33 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2ea3e:	686a      	ldr	r2, [r5, #4]
        GetTensorShape(output), GetTensorData<uint8_t>(output));
   2ea40:	4621      	mov	r1, r4
   2ea42:	a80a      	add	r0, sp, #40	; 0x28
   2ea44:	9203      	str	r2, [sp, #12]
   2ea46:	f7f8 fe2d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2ea4a:	9a03      	ldr	r2, [sp, #12]
   2ea4c:	b104      	cbz	r4, 2ea50 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x2a>
   2ea4e:	6864      	ldr	r4, [r4, #4]
    tflite::reference_ops::Softmax(
   2ea50:	4630      	mov	r0, r6
   2ea52:	9400      	str	r4, [sp, #0]
   2ea54:	ab0a      	add	r3, sp, #40	; 0x28
   2ea56:	a904      	add	r1, sp, #16
   2ea58:	f7ff feb7 	bl	2e7ca <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int8_t>(output));
   2ea5c:	a80a      	add	r0, sp, #40	; 0x28
   2ea5e:	f7f8 fddc 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   2ea62:	a804      	add	r0, sp, #16
   2ea64:	f7f8 fdd9 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2ea68:	b010      	add	sp, #64	; 0x40
   2ea6a:	bd70      	pop	{r4, r5, r6, pc}
    if (output->type == kTfLiteInt16) {
   2ea6c:	780b      	ldrb	r3, [r1, #0]
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   2ea6e:	4601      	mov	r1, r0
    if (output->type == kTfLiteInt16) {
   2ea70:	2b07      	cmp	r3, #7
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   2ea72:	a804      	add	r0, sp, #16
    if (output->type == kTfLiteInt16) {
   2ea74:	d110      	bne.n	2ea98 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x72>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   2ea76:	f7f8 fe15 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2ea7a:	686a      	ldr	r2, [r5, #4]
          GetTensorShape(output), GetTensorData<int16_t>(output));
   2ea7c:	4621      	mov	r1, r4
   2ea7e:	a80a      	add	r0, sp, #40	; 0x28
   2ea80:	9203      	str	r2, [sp, #12]
   2ea82:	f7f8 fe0f 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
   2ea86:	6863      	ldr	r3, [r4, #4]
   2ea88:	4630      	mov	r0, r6
   2ea8a:	9300      	str	r3, [sp, #0]
   2ea8c:	9a03      	ldr	r2, [sp, #12]
   2ea8e:	ab0a      	add	r3, sp, #40	; 0x28
   2ea90:	a904      	add	r1, sp, #16
   2ea92:	f7ef fc87 	bl	1e3a4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
   2ea96:	e7e1      	b.n	2ea5c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x36>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
   2ea98:	f7f8 fe04 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2ea9c:	686a      	ldr	r2, [r5, #4]
          GetTensorShape(output), GetTensorData<int8_t>(output));
   2ea9e:	4621      	mov	r1, r4
   2eaa0:	a80a      	add	r0, sp, #40	; 0x28
   2eaa2:	9203      	str	r2, [sp, #12]
   2eaa4:	f7f8 fdfe 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
   2eaa8:	6863      	ldr	r3, [r4, #4]
   2eaaa:	4630      	mov	r0, r6
   2eaac:	9300      	str	r3, [sp, #0]
   2eaae:	9a03      	ldr	r2, [sp, #12]
   2eab0:	ab0a      	add	r3, sp, #40	; 0x28
   2eab2:	a904      	add	r1, sp, #16
   2eab4:	f7ff ff1f 	bl	2e8f6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
   2eab8:	e7d0      	b.n	2ea5c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x36>

0002eaba <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2eaba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int output_count = NumOutputs(node);
   2eabe:	f8d1 c004 	ldr.w	ip, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   2eac2:	6894      	ldr	r4, [r2, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   2eac4:	6881      	ldr	r1, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2eac6:	b087      	sub	sp, #28
  const int split_dimensions = input_dims->size;
   2eac8:	f8d4 9000 	ldr.w	r9, [r4]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   2eacc:	9103      	str	r1, [sp, #12]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2eace:	2b00      	cmp	r3, #0
   2ead0:	f8dc 1004 	ldr.w	r1, [ip, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   2ead4:	9803      	ldr	r0, [sp, #12]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2ead6:	bfb8      	it	lt
   2ead8:	444b      	addlt	r3, r9
  const TfLiteIntArray* output_dims = output0->dims;
   2eada:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2eade:	454b      	cmp	r3, r9
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   2eae0:	f8dc e000 	ldr.w	lr, [ip]
  const TfLiteIntArray* output_dims = output0->dims;
   2eae4:	6889      	ldr	r1, [r1, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2eae6:	db01      	blt.n	2eaec <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x32>
   2eae8:	f002 f99b 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   2eaec:	6808      	ldr	r0, [r1, #0]
   2eaee:	4548      	cmp	r0, r9
   2eaf0:	d1fa      	bne.n	2eae8 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
  int64_t split_size = output_dims->data[axis] * output_count;
   2eaf2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   2eaf6:	f8d1 8004 	ldr.w	r8, [r1, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2eafa:	eb04 0183 	add.w	r1, r4, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   2eafe:	fb0e f008 	mul.w	r0, lr, r8
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2eb02:	6849      	ldr	r1, [r1, #4]
   2eb04:	4288      	cmp	r0, r1
   2eb06:	d1ef      	bne.n	2eae8 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2e>
  int64_t outer_size = 1;
   2eb08:	2001      	movs	r0, #1
   2eb0a:	2100      	movs	r1, #0
   2eb0c:	3404      	adds	r4, #4
   2eb0e:	46a2      	mov	sl, r4
  for (int i = 0; i < axis; ++i) {
   2eb10:	2600      	movs	r6, #0
  int64_t outer_size = 1;
   2eb12:	e9cd 0100 	strd	r0, r1, [sp]
  for (int i = 0; i < axis; ++i) {
   2eb16:	429e      	cmp	r6, r3
   2eb18:	da11      	bge.n	2eb3e <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x84>
    outer_size *= input_dims->data[i];
   2eb1a:	f85a 7b04 	ldr.w	r7, [sl], #4
   2eb1e:	9d00      	ldr	r5, [sp, #0]
   2eb20:	17f9      	asrs	r1, r7, #31
   2eb22:	4369      	muls	r1, r5
   2eb24:	9801      	ldr	r0, [sp, #4]
  for (int i = 0; i < axis; ++i) {
   2eb26:	3601      	adds	r6, #1
    outer_size *= input_dims->data[i];
   2eb28:	fb07 1500 	mla	r5, r7, r0, r1
   2eb2c:	9800      	ldr	r0, [sp, #0]
   2eb2e:	fba0 0107 	umull	r0, r1, r0, r7
   2eb32:	e9cd 0100 	strd	r0, r1, [sp]
   2eb36:	9801      	ldr	r0, [sp, #4]
   2eb38:	1829      	adds	r1, r5, r0
   2eb3a:	9101      	str	r1, [sp, #4]
  for (int i = 0; i < axis; ++i) {
   2eb3c:	e7eb      	b.n	2eb16 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x5c>
  int64_t base_inner_size = 1;
   2eb3e:	2001      	movs	r0, #1
   2eb40:	2100      	movs	r1, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2eb42:	3301      	adds	r3, #1
   2eb44:	454b      	cmp	r3, r9
   2eb46:	d00c      	beq.n	2eb62 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xa8>
    base_inner_size *= input_dims->data[i];
   2eb48:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2eb4c:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   2eb4e:	4656      	mov	r6, sl
   2eb50:	17f7      	asrs	r7, r6, #31
   2eb52:	fb00 f607 	mul.w	r6, r0, r7
   2eb56:	fb0a 6601 	mla	r6, sl, r1, r6
   2eb5a:	fba0 010a 	umull	r0, r1, r0, sl
   2eb5e:	4431      	add	r1, r6
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2eb60:	e7f0      	b.n	2eb44 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x8a>
      input_ptr += copy_size;
   2eb62:	2100      	movs	r1, #0
      const int copy_size = output_dims->data[axis] * base_inner_size;
   2eb64:	fb00 f308 	mul.w	r3, r0, r8
  for (int k = 0; k < outer_size; ++k) {
   2eb68:	4608      	mov	r0, r1
   2eb6a:	6854      	ldr	r4, [r2, #4]
      input_ptr += copy_size;
   2eb6c:	ea4f 0983 	mov.w	r9, r3, lsl #2
   2eb70:	ea2e 72ee 	bic.w	r2, lr, lr, asr #31
   2eb74:	fb09 f202 	mul.w	r2, r9, r2
   2eb78:	9204      	str	r2, [sp, #16]
  for (int k = 0; k < outer_size; ++k) {
   2eb7a:	e9dd ab00 	ldrd	sl, fp, [sp]
   2eb7e:	17c7      	asrs	r7, r0, #31
   2eb80:	4550      	cmp	r0, sl
   2eb82:	eb77 020b 	sbcs.w	r2, r7, fp
   2eb86:	da24      	bge.n	2ebd2 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x118>
   2eb88:	4627      	mov	r7, r4
    for (int i = 0; i < output_count; ++i) {
   2eb8a:	2600      	movs	r6, #0
   2eb8c:	008a      	lsls	r2, r1, #2
   2eb8e:	f10c 0a04 	add.w	sl, ip, #4
   2eb92:	9205      	str	r2, [sp, #20]
   2eb94:	4576      	cmp	r6, lr
   2eb96:	da17      	bge.n	2ebc8 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x10e>
  return &context->tensors[node->outputs->data[index]];
   2eb98:	46bb      	mov	fp, r7
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2eb9a:	f04f 0800 	mov.w	r8, #0
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2eb9e:	9d03      	ldr	r5, [sp, #12]
   2eba0:	f85a 2b04 	ldr.w	r2, [sl], #4
   2eba4:	eb15 1282 	adds.w	r2, r5, r2, lsl #6
   2eba8:	bf18      	it	ne
   2ebaa:	6852      	ldrne	r2, [r2, #4]
   2ebac:	9d05      	ldr	r5, [sp, #20]
   2ebae:	442a      	add	r2, r5
   2ebb0:	4598      	cmp	r8, r3
   2ebb2:	da06      	bge.n	2ebc2 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x108>
   2ebb4:	ecfb 7a01 	vldmia	fp!, {s15}
   2ebb8:	f108 0801 	add.w	r8, r8, #1
   2ebbc:	ece2 7a01 	vstmia	r2!, {s15}
   2ebc0:	e7f6      	b.n	2ebb0 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf6>
      input_ptr += copy_size;
   2ebc2:	444f      	add	r7, r9
    for (int i = 0; i < output_count; ++i) {
   2ebc4:	3601      	adds	r6, #1
   2ebc6:	e7e5      	b.n	2eb94 <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xda>
   2ebc8:	9a04      	ldr	r2, [sp, #16]
  for (int k = 0; k < outer_size; ++k) {
   2ebca:	3001      	adds	r0, #1
   2ebcc:	4414      	add	r4, r2
   2ebce:	4419      	add	r1, r3
   2ebd0:	e7d3      	b.n	2eb7a <_ZN6tflite3ops5micro5split9SplitImplIfEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xc0>
}
   2ebd2:	2000      	movs	r0, #0
   2ebd4:	b007      	add	sp, #28
   2ebd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ebda <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2ebda:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteIntArray* input_dims = input->dims;
   2ebde:	6896      	ldr	r6, [r2, #8]
  const int output_count = NumOutputs(node);
   2ebe0:	684c      	ldr	r4, [r1, #4]
  const int split_dimensions = input_dims->size;
   2ebe2:	f8d6 c000 	ldr.w	ip, [r6]
   2ebe6:	6865      	ldr	r5, [r4, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2ebe8:	2b00      	cmp	r3, #0
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   2ebea:	f8d4 e000 	ldr.w	lr, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   2ebee:	6884      	ldr	r4, [r0, #8]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2ebf0:	bfb8      	it	lt
   2ebf2:	4463      	addlt	r3, ip
  const TfLiteIntArray* output_dims = output0->dims;
   2ebf4:	eb04 1485 	add.w	r4, r4, r5, lsl #6
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2ebf8:	4563      	cmp	r3, ip
  const TfLiteIntArray* output_dims = output0->dims;
   2ebfa:	68a7      	ldr	r7, [r4, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2ebfc:	9101      	str	r1, [sp, #4]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2ebfe:	db01      	blt.n	2ec04 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   2ec00:	f002 f90f 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   2ec04:	683c      	ldr	r4, [r7, #0]
   2ec06:	4564      	cmp	r4, ip
   2ec08:	d1fa      	bne.n	2ec00 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   2ec0a:	eb07 0783 	add.w	r7, r7, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   2ec0e:	687c      	ldr	r4, [r7, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2ec10:	eb06 0583 	add.w	r5, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   2ec14:	fb04 f40e 	mul.w	r4, r4, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2ec18:	686d      	ldr	r5, [r5, #4]
   2ec1a:	42ac      	cmp	r4, r5
   2ec1c:	d1f0      	bne.n	2ec00 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   2ec1e:	3604      	adds	r6, #4
   2ec20:	4631      	mov	r1, r6
  for (int i = 0; i < axis; ++i) {
   2ec22:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   2ec26:	f04f 0a01 	mov.w	sl, #1
   2ec2a:	f04f 0b00 	mov.w	fp, #0
  for (int i = 0; i < axis; ++i) {
   2ec2e:	4598      	cmp	r8, r3
   2ec30:	da0d      	bge.n	2ec4e <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   2ec32:	f851 9b04 	ldr.w	r9, [r1], #4
  for (int i = 0; i < axis; ++i) {
   2ec36:	f108 0801 	add.w	r8, r8, #1
    outer_size *= input_dims->data[i];
   2ec3a:	464c      	mov	r4, r9
   2ec3c:	17e5      	asrs	r5, r4, #31
   2ec3e:	fb0a f405 	mul.w	r4, sl, r5
   2ec42:	fb09 440b 	mla	r4, r9, fp, r4
   2ec46:	fbaa ab09 	umull	sl, fp, sl, r9
   2ec4a:	44a3      	add	fp, r4
  for (int i = 0; i < axis; ++i) {
   2ec4c:	e7ef      	b.n	2ec2e <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x54>
  int64_t base_inner_size = 1;
   2ec4e:	2401      	movs	r4, #1
   2ec50:	2500      	movs	r5, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ec52:	3301      	adds	r3, #1
   2ec54:	4563      	cmp	r3, ip
   2ec56:	d00c      	beq.n	2ec72 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x98>
    base_inner_size *= input_dims->data[i];
   2ec58:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ec5c:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   2ec5e:	ea4f 79e1 	mov.w	r9, r1, asr #31
   2ec62:	fb04 f809 	mul.w	r8, r4, r9
   2ec66:	fb01 8805 	mla	r8, r1, r5, r8
   2ec6a:	fba4 4501 	umull	r4, r5, r4, r1
   2ec6e:	4445      	add	r5, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ec70:	e7f0      	b.n	2ec54 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7a>
  for (int k = 0; k < outer_size; ++k) {
   2ec72:	2600      	movs	r6, #0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2ec74:	f8d2 c004 	ldr.w	ip, [r2, #4]
   2ec78:	17f3      	asrs	r3, r6, #31
   2ec7a:	4556      	cmp	r6, sl
   2ec7c:	eb73 030b 	sbcs.w	r3, r3, fp
   2ec80:	da22      	bge.n	2ecc8 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xee>
    for (int i = 0; i < output_count; ++i) {
   2ec82:	f04f 0800 	mov.w	r8, #0
   2ec86:	45f0      	cmp	r8, lr
   2ec88:	da1c      	bge.n	2ecc4 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xea>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2ec8a:	f04f 0900 	mov.w	r9, #0
  return &context->tensors[node->outputs->data[index]];
   2ec8e:	9b01      	ldr	r3, [sp, #4]
   2ec90:	685b      	ldr	r3, [r3, #4]
   2ec92:	eb03 0388 	add.w	r3, r3, r8, lsl #2
   2ec96:	685a      	ldr	r2, [r3, #4]
   2ec98:	6883      	ldr	r3, [r0, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2ec9a:	eb13 1382 	adds.w	r3, r3, r2, lsl #6
      const int copy_size = output_dims->data[axis] * base_inner_size;
   2ec9e:	687a      	ldr	r2, [r7, #4]
   2eca0:	bf18      	it	ne
   2eca2:	685b      	ldrne	r3, [r3, #4]
   2eca4:	4362      	muls	r2, r4
   2eca6:	fb02 3306 	mla	r3, r2, r6, r3
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2ecaa:	4591      	cmp	r9, r2
   2ecac:	da06      	bge.n	2ecbc <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe2>
   2ecae:	f81c 1009 	ldrb.w	r1, [ip, r9]
   2ecb2:	f109 0901 	add.w	r9, r9, #1
   2ecb6:	f803 1b01 	strb.w	r1, [r3], #1
   2ecba:	e7f6      	b.n	2ecaa <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xd0>
      input_ptr += copy_size;
   2ecbc:	4494      	add	ip, r2
    for (int i = 0; i < output_count; ++i) {
   2ecbe:	f108 0801 	add.w	r8, r8, #1
   2ecc2:	e7e0      	b.n	2ec86 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xac>
  for (int k = 0; k < outer_size; ++k) {
   2ecc4:	3601      	adds	r6, #1
   2ecc6:	e7d7      	b.n	2ec78 <_ZN6tflite3ops5micro5split9SplitImplIhEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9e>
}
   2ecc8:	2000      	movs	r0, #0
   2ecca:	b003      	add	sp, #12
   2eccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002ecd0 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2ecd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const TfLiteIntArray* input_dims = input->dims;
   2ecd4:	6896      	ldr	r6, [r2, #8]
  const int output_count = NumOutputs(node);
   2ecd6:	684c      	ldr	r4, [r1, #4]
  const int split_dimensions = input_dims->size;
   2ecd8:	f8d6 c000 	ldr.w	ip, [r6]
   2ecdc:	6865      	ldr	r5, [r4, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2ecde:	2b00      	cmp	r3, #0
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   2ece0:	f8d4 e000 	ldr.w	lr, [r4]
  const TfLiteIntArray* output_dims = output0->dims;
   2ece4:	6884      	ldr	r4, [r0, #8]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2ece6:	bfb8      	it	lt
   2ece8:	4463      	addlt	r3, ip
  const TfLiteIntArray* output_dims = output0->dims;
   2ecea:	eb04 1485 	add.w	r4, r4, r5, lsl #6
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2ecee:	4563      	cmp	r3, ip
  const TfLiteIntArray* output_dims = output0->dims;
   2ecf0:	68a7      	ldr	r7, [r4, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2ecf2:	9101      	str	r1, [sp, #4]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2ecf4:	db01      	blt.n	2ecfa <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   2ecf6:	f002 f894 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   2ecfa:	683c      	ldr	r4, [r7, #0]
   2ecfc:	4564      	cmp	r4, ip
   2ecfe:	d1fa      	bne.n	2ecf6 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   2ed00:	eb07 0783 	add.w	r7, r7, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   2ed04:	687c      	ldr	r4, [r7, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2ed06:	eb06 0583 	add.w	r5, r6, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   2ed0a:	fb04 f40e 	mul.w	r4, r4, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2ed0e:	686d      	ldr	r5, [r5, #4]
   2ed10:	42ac      	cmp	r4, r5
   2ed12:	d1f0      	bne.n	2ecf6 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   2ed14:	3604      	adds	r6, #4
   2ed16:	4631      	mov	r1, r6
  for (int i = 0; i < axis; ++i) {
   2ed18:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   2ed1c:	f04f 0a01 	mov.w	sl, #1
   2ed20:	f04f 0b00 	mov.w	fp, #0
  for (int i = 0; i < axis; ++i) {
   2ed24:	4598      	cmp	r8, r3
   2ed26:	da0d      	bge.n	2ed44 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x74>
    outer_size *= input_dims->data[i];
   2ed28:	f851 9b04 	ldr.w	r9, [r1], #4
  for (int i = 0; i < axis; ++i) {
   2ed2c:	f108 0801 	add.w	r8, r8, #1
    outer_size *= input_dims->data[i];
   2ed30:	464c      	mov	r4, r9
   2ed32:	17e5      	asrs	r5, r4, #31
   2ed34:	fb0a f405 	mul.w	r4, sl, r5
   2ed38:	fb09 440b 	mla	r4, r9, fp, r4
   2ed3c:	fbaa ab09 	umull	sl, fp, sl, r9
   2ed40:	44a3      	add	fp, r4
  for (int i = 0; i < axis; ++i) {
   2ed42:	e7ef      	b.n	2ed24 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x54>
  int64_t base_inner_size = 1;
   2ed44:	2401      	movs	r4, #1
   2ed46:	2500      	movs	r5, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ed48:	3301      	adds	r3, #1
   2ed4a:	4563      	cmp	r3, ip
   2ed4c:	d00c      	beq.n	2ed68 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x98>
    base_inner_size *= input_dims->data[i];
   2ed4e:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ed52:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   2ed54:	ea4f 79e1 	mov.w	r9, r1, asr #31
   2ed58:	fb04 f809 	mul.w	r8, r4, r9
   2ed5c:	fb01 8805 	mla	r8, r1, r5, r8
   2ed60:	fba4 4501 	umull	r4, r5, r4, r1
   2ed64:	4445      	add	r5, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ed66:	e7f0      	b.n	2ed4a <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7a>
  for (int k = 0; k < outer_size; ++k) {
   2ed68:	2600      	movs	r6, #0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2ed6a:	f8d2 c004 	ldr.w	ip, [r2, #4]
   2ed6e:	17f3      	asrs	r3, r6, #31
   2ed70:	4556      	cmp	r6, sl
   2ed72:	eb73 030b 	sbcs.w	r3, r3, fp
   2ed76:	da22      	bge.n	2edbe <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xee>
    for (int i = 0; i < output_count; ++i) {
   2ed78:	f04f 0800 	mov.w	r8, #0
   2ed7c:	45f0      	cmp	r8, lr
   2ed7e:	da1c      	bge.n	2edba <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xea>
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2ed80:	f04f 0900 	mov.w	r9, #0
  return &context->tensors[node->outputs->data[index]];
   2ed84:	9b01      	ldr	r3, [sp, #4]
   2ed86:	685b      	ldr	r3, [r3, #4]
   2ed88:	eb03 0388 	add.w	r3, r3, r8, lsl #2
   2ed8c:	685a      	ldr	r2, [r3, #4]
   2ed8e:	6883      	ldr	r3, [r0, #8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2ed90:	eb13 1382 	adds.w	r3, r3, r2, lsl #6
      const int copy_size = output_dims->data[axis] * base_inner_size;
   2ed94:	687a      	ldr	r2, [r7, #4]
   2ed96:	bf18      	it	ne
   2ed98:	685b      	ldrne	r3, [r3, #4]
   2ed9a:	4362      	muls	r2, r4
   2ed9c:	fb02 3306 	mla	r3, r2, r6, r3
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2eda0:	4591      	cmp	r9, r2
   2eda2:	da06      	bge.n	2edb2 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe2>
   2eda4:	f91c 1009 	ldrsb.w	r1, [ip, r9]
   2eda8:	f109 0901 	add.w	r9, r9, #1
   2edac:	f803 1b01 	strb.w	r1, [r3], #1
   2edb0:	e7f6      	b.n	2eda0 <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xd0>
      input_ptr += copy_size;
   2edb2:	4494      	add	ip, r2
    for (int i = 0; i < output_count; ++i) {
   2edb4:	f108 0801 	add.w	r8, r8, #1
   2edb8:	e7e0      	b.n	2ed7c <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xac>
  for (int k = 0; k < outer_size; ++k) {
   2edba:	3601      	adds	r6, #1
   2edbc:	e7d7      	b.n	2ed6e <_ZN6tflite3ops5micro5split9SplitImplIaEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9e>
}
   2edbe:	2000      	movs	r0, #0
   2edc0:	b003      	add	sp, #12
   2edc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002edc6 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2edc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int output_count = NumOutputs(node);
   2edca:	684f      	ldr	r7, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   2edcc:	6894      	ldr	r4, [r2, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   2edce:	6881      	ldr	r1, [r0, #8]
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2edd0:	b085      	sub	sp, #20
  const int split_dimensions = input_dims->size;
   2edd2:	6825      	ldr	r5, [r4, #0]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   2edd4:	9101      	str	r1, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2edd6:	2b00      	cmp	r3, #0
   2edd8:	6879      	ldr	r1, [r7, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   2edda:	9801      	ldr	r0, [sp, #4]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2eddc:	bfb8      	it	lt
   2edde:	195b      	addlt	r3, r3, r5
  const TfLiteIntArray* output_dims = output0->dims;
   2ede0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2ede4:	42ab      	cmp	r3, r5
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   2ede6:	683e      	ldr	r6, [r7, #0]
  const TfLiteIntArray* output_dims = output0->dims;
   2ede8:	6889      	ldr	r1, [r1, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2edea:	db01      	blt.n	2edf0 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   2edec:	f002 f819 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   2edf0:	6808      	ldr	r0, [r1, #0]
   2edf2:	42a8      	cmp	r0, r5
   2edf4:	d1fa      	bne.n	2edec <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
  int64_t split_size = output_dims->data[axis] * output_count;
   2edf6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   2edfa:	f8d1 e004 	ldr.w	lr, [r1, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2edfe:	eb04 0183 	add.w	r1, r4, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   2ee02:	fb06 f00e 	mul.w	r0, r6, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2ee06:	6849      	ldr	r1, [r1, #4]
   2ee08:	4288      	cmp	r0, r1
   2ee0a:	d1ef      	bne.n	2edec <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   2ee0c:	3404      	adds	r4, #4
   2ee0e:	46a2      	mov	sl, r4
  for (int i = 0; i < axis; ++i) {
   2ee10:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   2ee14:	f04f 0b01 	mov.w	fp, #1
   2ee18:	f04f 0c00 	mov.w	ip, #0
  for (int i = 0; i < axis; ++i) {
   2ee1c:	4598      	cmp	r8, r3
   2ee1e:	da0d      	bge.n	2ee3c <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x76>
    outer_size *= input_dims->data[i];
   2ee20:	f85a 9b04 	ldr.w	r9, [sl], #4
  for (int i = 0; i < axis; ++i) {
   2ee24:	f108 0801 	add.w	r8, r8, #1
    outer_size *= input_dims->data[i];
   2ee28:	4648      	mov	r0, r9
   2ee2a:	17c1      	asrs	r1, r0, #31
   2ee2c:	fb0b f101 	mul.w	r1, fp, r1
   2ee30:	fb09 110c 	mla	r1, r9, ip, r1
   2ee34:	fbab bc09 	umull	fp, ip, fp, r9
   2ee38:	448c      	add	ip, r1
  for (int i = 0; i < axis; ++i) {
   2ee3a:	e7ef      	b.n	2ee1c <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  int64_t base_inner_size = 1;
   2ee3c:	2001      	movs	r0, #1
   2ee3e:	2100      	movs	r1, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ee40:	3301      	adds	r3, #1
   2ee42:	42ab      	cmp	r3, r5
   2ee44:	d00c      	beq.n	2ee60 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9a>
    base_inner_size *= input_dims->data[i];
   2ee46:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ee4a:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   2ee4c:	ea4f 79ea 	mov.w	r9, sl, asr #31
   2ee50:	fb00 f809 	mul.w	r8, r0, r9
   2ee54:	fb0a 8801 	mla	r8, sl, r1, r8
   2ee58:	fba0 010a 	umull	r0, r1, r0, sl
   2ee5c:	4441      	add	r1, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ee5e:	e7f0      	b.n	2ee42 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7c>
      input_ptr += copy_size;
   2ee60:	2100      	movs	r1, #0
      const int copy_size = output_dims->data[axis] * base_inner_size;
   2ee62:	fb00 f30e 	mul.w	r3, r0, lr
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2ee66:	6855      	ldr	r5, [r2, #4]
      input_ptr += copy_size;
   2ee68:	ea4f 0a43 	mov.w	sl, r3, lsl #1
   2ee6c:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
   2ee70:	fb0a f202 	mul.w	r2, sl, r2
  for (int k = 0; k < outer_size; ++k) {
   2ee74:	9100      	str	r1, [sp, #0]
   2ee76:	9202      	str	r2, [sp, #8]
   2ee78:	9a00      	ldr	r2, [sp, #0]
   2ee7a:	ea4f 79e2 	mov.w	r9, r2, asr #31
   2ee7e:	455a      	cmp	r2, fp
   2ee80:	eb79 020c 	sbcs.w	r2, r9, ip
   2ee84:	da26      	bge.n	2eed4 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x10e>
   2ee86:	46a8      	mov	r8, r5
    for (int i = 0; i < output_count; ++i) {
   2ee88:	f04f 0e00 	mov.w	lr, #0
   2ee8c:	004a      	lsls	r2, r1, #1
   2ee8e:	f107 0904 	add.w	r9, r7, #4
   2ee92:	9203      	str	r2, [sp, #12]
   2ee94:	45b6      	cmp	lr, r6
   2ee96:	da16      	bge.n	2eec6 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x100>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2ee98:	9801      	ldr	r0, [sp, #4]
  return &context->tensors[node->outputs->data[index]];
   2ee9a:	f859 2b04 	ldr.w	r2, [r9], #4
   2ee9e:	eb10 1282 	adds.w	r2, r0, r2, lsl #6
   2eea2:	bf18      	it	ne
   2eea4:	6852      	ldrne	r2, [r2, #4]
   2eea6:	9803      	ldr	r0, [sp, #12]
   2eea8:	4402      	add	r2, r0
   2eeaa:	4614      	mov	r4, r2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2eeac:	2000      	movs	r0, #0
   2eeae:	4298      	cmp	r0, r3
   2eeb0:	da05      	bge.n	2eebe <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf8>
   2eeb2:	f938 2010 	ldrsh.w	r2, [r8, r0, lsl #1]
   2eeb6:	3001      	adds	r0, #1
   2eeb8:	f824 2b02 	strh.w	r2, [r4], #2
   2eebc:	e7f7      	b.n	2eeae <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe8>
      input_ptr += copy_size;
   2eebe:	44d0      	add	r8, sl
    for (int i = 0; i < output_count; ++i) {
   2eec0:	f10e 0e01 	add.w	lr, lr, #1
   2eec4:	e7e6      	b.n	2ee94 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xce>
   2eec6:	9a02      	ldr	r2, [sp, #8]
   2eec8:	4419      	add	r1, r3
   2eeca:	4415      	add	r5, r2
  for (int k = 0; k < outer_size; ++k) {
   2eecc:	9a00      	ldr	r2, [sp, #0]
   2eece:	3201      	adds	r2, #1
   2eed0:	9200      	str	r2, [sp, #0]
   2eed2:	e7d1      	b.n	2ee78 <_ZN6tflite3ops5micro5split9SplitImplIsEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xb2>
}
   2eed4:	2000      	movs	r0, #0
   2eed6:	b005      	add	sp, #20
   2eed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002eedc <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori>:
TfLiteStatus SplitImpl(TfLiteContext* context, TfLiteNode* node,
   2eedc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const int output_count = NumOutputs(node);
   2eee0:	684f      	ldr	r7, [r1, #4]
  const TfLiteIntArray* input_dims = input->dims;
   2eee2:	6894      	ldr	r4, [r2, #8]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   2eee4:	6881      	ldr	r1, [r0, #8]
  const int split_dimensions = input_dims->size;
   2eee6:	6826      	ldr	r6, [r4, #0]
  const TfLiteTensor* output0 = GetOutput(context, node, 0);
   2eee8:	9100      	str	r1, [sp, #0]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2eeea:	2b00      	cmp	r3, #0
   2eeec:	6879      	ldr	r1, [r7, #4]
  const TfLiteIntArray* output_dims = output0->dims;
   2eeee:	9800      	ldr	r0, [sp, #0]
  int axis = axis_value < 0 ? axis_value + split_dimensions : axis_value;
   2eef0:	bfb8      	it	lt
   2eef2:	199b      	addlt	r3, r3, r6
  const TfLiteIntArray* output_dims = output0->dims;
   2eef4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2eef8:	42b3      	cmp	r3, r6
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
   2eefa:	f8d7 e000 	ldr.w	lr, [r7]
  const TfLiteIntArray* output_dims = output0->dims;
   2eefe:	688d      	ldr	r5, [r1, #8]
  TFLITE_DCHECK_LT(axis, split_dimensions);
   2ef00:	db01      	blt.n	2ef06 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x2a>
   2ef02:	f001 ff8e 	bl	30e22 <abort>
  TFLITE_DCHECK_EQ(output_dims->size, split_dimensions);
   2ef06:	6829      	ldr	r1, [r5, #0]
   2ef08:	42b1      	cmp	r1, r6
   2ef0a:	d1fa      	bne.n	2ef02 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   2ef0c:	eb05 0183 	add.w	r1, r5, r3, lsl #2
   2ef10:	9101      	str	r1, [sp, #4]
  int64_t split_size = output_dims->data[axis] * output_count;
   2ef12:	6849      	ldr	r1, [r1, #4]
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2ef14:	eb04 0083 	add.w	r0, r4, r3, lsl #2
  int64_t split_size = output_dims->data[axis] * output_count;
   2ef18:	fb01 f10e 	mul.w	r1, r1, lr
  TFLITE_DCHECK_EQ(split_size, input_dims->data[axis]);
   2ef1c:	6840      	ldr	r0, [r0, #4]
   2ef1e:	4281      	cmp	r1, r0
   2ef20:	d1ef      	bne.n	2ef02 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x26>
   2ef22:	3404      	adds	r4, #4
   2ef24:	46a2      	mov	sl, r4
  for (int i = 0; i < axis; ++i) {
   2ef26:	f04f 0800 	mov.w	r8, #0
  int64_t outer_size = 1;
   2ef2a:	f04f 0b01 	mov.w	fp, #1
   2ef2e:	f04f 0c00 	mov.w	ip, #0
  for (int i = 0; i < axis; ++i) {
   2ef32:	4598      	cmp	r8, r3
   2ef34:	da0d      	bge.n	2ef52 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x76>
    outer_size *= input_dims->data[i];
   2ef36:	f85a 9b04 	ldr.w	r9, [sl], #4
  for (int i = 0; i < axis; ++i) {
   2ef3a:	f108 0801 	add.w	r8, r8, #1
    outer_size *= input_dims->data[i];
   2ef3e:	4648      	mov	r0, r9
   2ef40:	17c1      	asrs	r1, r0, #31
   2ef42:	fb0b f101 	mul.w	r1, fp, r1
   2ef46:	fb09 110c 	mla	r1, r9, ip, r1
   2ef4a:	fbab bc09 	umull	fp, ip, fp, r9
   2ef4e:	448c      	add	ip, r1
  for (int i = 0; i < axis; ++i) {
   2ef50:	e7ef      	b.n	2ef32 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x56>
  int64_t base_inner_size = 1;
   2ef52:	2001      	movs	r0, #1
   2ef54:	2100      	movs	r1, #0
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ef56:	3301      	adds	r3, #1
   2ef58:	42b3      	cmp	r3, r6
   2ef5a:	d00c      	beq.n	2ef76 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x9a>
    base_inner_size *= input_dims->data[i];
   2ef5c:	f854 a023 	ldr.w	sl, [r4, r3, lsl #2]
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ef60:	3301      	adds	r3, #1
    base_inner_size *= input_dims->data[i];
   2ef62:	ea4f 79ea 	mov.w	r9, sl, asr #31
   2ef66:	fb00 f809 	mul.w	r8, r0, r9
   2ef6a:	fb0a 8801 	mla	r8, sl, r1, r8
   2ef6e:	fba0 010a 	umull	r0, r1, r0, sl
   2ef72:	4441      	add	r1, r8
  for (int i = axis + 1; i < split_dimensions; ++i) {
   2ef74:	e7f0      	b.n	2ef58 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0x7c>
  for (int k = 0; k < outer_size; ++k) {
   2ef76:	2400      	movs	r4, #0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2ef78:	f8d2 8004 	ldr.w	r8, [r2, #4]
   2ef7c:	17e3      	asrs	r3, r4, #31
   2ef7e:	455c      	cmp	r4, fp
   2ef80:	eb73 030c 	sbcs.w	r3, r3, ip
   2ef84:	da23      	bge.n	2efce <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xf2>
    for (int i = 0; i < output_count; ++i) {
   2ef86:	f04f 0900 	mov.w	r9, #0
   2ef8a:	f107 0a04 	add.w	sl, r7, #4
   2ef8e:	45f1      	cmp	r9, lr
   2ef90:	da1b      	bge.n	2efca <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xee>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
   2ef92:	9a00      	ldr	r2, [sp, #0]
  return &context->tensors[node->outputs->data[index]];
   2ef94:	f85a 3b04 	ldr.w	r3, [sl], #4
   2ef98:	eb12 1383 	adds.w	r3, r2, r3, lsl #6
      const int copy_size = output_dims->data[axis] * base_inner_size;
   2ef9c:	9a01      	ldr	r2, [sp, #4]
   2ef9e:	bf18      	it	ne
   2efa0:	685b      	ldrne	r3, [r3, #4]
   2efa2:	6852      	ldr	r2, [r2, #4]
   2efa4:	4342      	muls	r2, r0
      T* output_ptr = output_data + k * copy_size;
   2efa6:	fb02 f604 	mul.w	r6, r2, r4
   2efaa:	eb03 0386 	add.w	r3, r3, r6, lsl #2
      for (int j = 0; j < copy_size; ++j) output_ptr[j] = input_ptr[j];
   2efae:	2600      	movs	r6, #0
   2efb0:	4296      	cmp	r6, r2
   2efb2:	da05      	bge.n	2efc0 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xe4>
   2efb4:	f858 5026 	ldr.w	r5, [r8, r6, lsl #2]
   2efb8:	3601      	adds	r6, #1
   2efba:	f843 5b04 	str.w	r5, [r3], #4
   2efbe:	e7f7      	b.n	2efb0 <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xd4>
      input_ptr += copy_size;
   2efc0:	eb08 0882 	add.w	r8, r8, r2, lsl #2
    for (int i = 0; i < output_count; ++i) {
   2efc4:	f109 0901 	add.w	r9, r9, #1
   2efc8:	e7e1      	b.n	2ef8e <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xb2>
  for (int k = 0; k < outer_size; ++k) {
   2efca:	3401      	adds	r4, #1
   2efcc:	e7d6      	b.n	2ef7c <_ZN6tflite3ops5micro5split9SplitImplIiEE12TfLiteStatusP13TfLiteContextP10TfLiteNodePK12TfLiteTensori+0xa0>
}
   2efce:	2000      	movs	r0, #0
   2efd0:	b003      	add	sp, #12
   2efd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002efd6 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>:
}

inline void StridedSlicePadIndices(tflite::StridedSliceParams* p,
                                   int dim_count) {
  // Add indices and mask bits to fully include extra dimensions
  TFLITE_CHECK_LE(dim_count, 5);
   2efd6:	2905      	cmp	r1, #5
                                   int dim_count) {
   2efd8:	b570      	push	{r4, r5, r6, lr}
  TFLITE_CHECK_LE(dim_count, 5);
   2efda:	dd01      	ble.n	2efe0 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0xa>
   2efdc:	f001 ff21 	bl	30e22 <abort>
  TFLITE_CHECK_GE(dim_count, p->start_indices_count);
   2efe0:	f990 2000 	ldrsb.w	r2, [r0]
   2efe4:	428a      	cmp	r2, r1
   2efe6:	dcf9      	bgt.n	2efdc <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>
  TFLITE_CHECK_EQ(p->start_indices_count, p->stop_indices_count);
   2efe8:	f990 3018 	ldrsb.w	r3, [r0, #24]
   2efec:	429a      	cmp	r2, r3
   2efee:	d1f5      	bne.n	2efdc <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>
  TFLITE_CHECK_EQ(p->stop_indices_count, p->strides_count);
   2eff0:	f990 3030 	ldrsb.w	r3, [r0, #48]	; 0x30
   2eff4:	4293      	cmp	r3, r2
   2eff6:	d1f1      	bne.n	2efdc <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x6>

  const int pad_count = dim_count - p->start_indices_count;
   2eff8:	1aca      	subs	r2, r1, r3

  // Pad indices at start, so move arrays by pad_count.
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
   2effa:	1e5d      	subs	r5, r3, #1
   2effc:	eb00 0481 	add.w	r4, r0, r1, lsl #2
   2f000:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   2f004:	2d00      	cmp	r5, #0
   2f006:	da0b      	bge.n	2f020 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x4a>
    p->strides[i + pad_count] = p->strides[i];
    p->start_indices[i + pad_count] = p->start_indices[i];
    p->stop_indices[i + pad_count] = p->stop_indices[i];
  }
  for (int i = 0; i < pad_count; ++i) {
   2f008:	2300      	movs	r3, #0
    p->start_indices[i] = 0;
    p->stop_indices[i] = 1;
   2f00a:	2501      	movs	r5, #1
    p->start_indices[i] = 0;
   2f00c:	461e      	mov	r6, r3
   2f00e:	1d04      	adds	r4, r0, #4
  for (int i = 0; i < pad_count; ++i) {
   2f010:	4293      	cmp	r3, r2
   2f012:	da0f      	bge.n	2f034 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x5e>
    p->start_indices[i] = 0;
   2f014:	f844 6b04 	str.w	r6, [r4], #4
    p->stop_indices[i] = 1;
   2f018:	6165      	str	r5, [r4, #20]
    p->strides[i] = 1;
   2f01a:	62e5      	str	r5, [r4, #44]	; 0x2c
  for (int i = 0; i < pad_count; ++i) {
   2f01c:	3301      	adds	r3, #1
   2f01e:	e7f7      	b.n	2f010 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x3a>
    p->strides[i + pad_count] = p->strides[i];
   2f020:	6b1e      	ldr	r6, [r3, #48]	; 0x30
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
   2f022:	3d01      	subs	r5, #1
    p->strides[i + pad_count] = p->strides[i];
   2f024:	6326      	str	r6, [r4, #48]	; 0x30
    p->start_indices[i + pad_count] = p->start_indices[i];
   2f026:	f853 6904 	ldr.w	r6, [r3], #-4
   2f02a:	f844 6904 	str.w	r6, [r4], #-4
    p->stop_indices[i + pad_count] = p->stop_indices[i];
   2f02e:	69de      	ldr	r6, [r3, #28]
   2f030:	61e6      	str	r6, [r4, #28]
  for (int i = p->start_indices_count - 1; i >= 0; --i) {
   2f032:	e7e7      	b.n	2f004 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi+0x2e>
  }

  // Pad masks with 0s or 1s as required.
  p->shrink_axis_mask <<= pad_count;
   2f034:	f9b0 3050 	ldrsh.w	r3, [r0, #80]	; 0x50
  p->ellipsis_mask <<= pad_count;
  p->new_axis_mask <<= pad_count;
  p->begin_mask <<= pad_count;
   2f038:	f9b0 5048 	ldrsh.w	r5, [r0, #72]	; 0x48
  p->shrink_axis_mask <<= pad_count;
   2f03c:	4093      	lsls	r3, r2
   2f03e:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  p->ellipsis_mask <<= pad_count;
   2f042:	f9b0 304a 	ldrsh.w	r3, [r0, #74]	; 0x4a
  p->end_mask <<= pad_count;
  p->begin_mask |= (1 << pad_count) - 1;
  p->end_mask |= (1 << pad_count) - 1;

  p->start_indices_count = dim_count;
   2f046:	b249      	sxtb	r1, r1
  p->ellipsis_mask <<= pad_count;
   2f048:	4093      	lsls	r3, r2
   2f04a:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
  p->new_axis_mask <<= pad_count;
   2f04e:	f9b0 304e 	ldrsh.w	r3, [r0, #78]	; 0x4e
  p->start_indices_count = dim_count;
   2f052:	7001      	strb	r1, [r0, #0]
  p->new_axis_mask <<= pad_count;
   2f054:	4093      	lsls	r3, r2
   2f056:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
  p->end_mask <<= pad_count;
   2f05a:	f9b0 304c 	ldrsh.w	r3, [r0, #76]	; 0x4c
  p->stop_indices_count = dim_count;
   2f05e:	7601      	strb	r1, [r0, #24]
  p->end_mask <<= pad_count;
   2f060:	fa03 f402 	lsl.w	r4, r3, r2
  p->begin_mask |= (1 << pad_count) - 1;
   2f064:	2301      	movs	r3, #1
   2f066:	4093      	lsls	r3, r2
   2f068:	3b01      	subs	r3, #1
   2f06a:	b21b      	sxth	r3, r3
  p->begin_mask <<= pad_count;
   2f06c:	fa05 f202 	lsl.w	r2, r5, r2
  p->begin_mask |= (1 << pad_count) - 1;
   2f070:	431a      	orrs	r2, r3
  p->end_mask |= (1 << pad_count) - 1;
   2f072:	4323      	orrs	r3, r4
  p->begin_mask |= (1 << pad_count) - 1;
   2f074:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
  p->end_mask |= (1 << pad_count) - 1;
   2f078:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  p->strides_count = dim_count;
   2f07c:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
}
   2f080:	bd70      	pop	{r4, r5, r6, pc}

0002f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>:

// Return the index for the first element along that axis. This index will be a
// positive integer between [0, axis_size - 1] that can be used to index
// directly into the data.
inline int StartForAxis(const tflite::StridedSliceParams& params,
                        const RuntimeShape& input_shape, int axis) {
   2f082:	b538      	push	{r3, r4, r5, lr}
   2f084:	4605      	mov	r5, r0
   2f086:	4608      	mov	r0, r1
  const auto begin_mask = params.begin_mask;
  const auto* start_indices = params.start_indices;
  const auto* strides = params.strides;
  const int axis_size = input_shape.Dims(axis);
   2f088:	4611      	mov	r1, r2
                        const RuntimeShape& input_shape, int axis) {
   2f08a:	4614      	mov	r4, r2
  const int axis_size = input_shape.Dims(axis);
   2f08c:	f7f8 fad0 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  if (axis_size == 0) {
   2f090:	b1d8      	cbz	r0, 2f0ca <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x48>
  }
  // Begin with the specified index.
  int start = start_indices[axis];

  // begin_mask override
  if (begin_mask & 1 << axis) {
   2f092:	f9b5 2048 	ldrsh.w	r2, [r5, #72]	; 0x48
  int start = start_indices[axis];
   2f096:	eb05 0184 	add.w	r1, r5, r4, lsl #2
  if (begin_mask & 1 << axis) {
   2f09a:	4122      	asrs	r2, r4
   2f09c:	07d2      	lsls	r2, r2, #31
  int start = start_indices[axis];
   2f09e:	684b      	ldr	r3, [r1, #4]
  if (begin_mask & 1 << axis) {
   2f0a0:	d508      	bpl.n	2f0b4 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x32>
    if (strides[axis] > 0) {
   2f0a2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   2f0a4:	2b00      	cmp	r3, #0
   2f0a6:	dc09      	bgt.n	2f0bc <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x3a>
      // clamped below (Note: We could have set them to 0 and axis_size-1, but
      // use lowest() and max() to maintain symmetry with StopForAxis())
      start = std::numeric_limits<int>::lowest();
    } else {
      // Backward iteration - use the last element.
      start = std::numeric_limits<int>::max();
   2f0a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
  TFLITE_DCHECK(!(hi < lo));
   2f0ac:	3801      	subs	r0, #1
   2f0ae:	d508      	bpl.n	2f0c2 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x40>
   2f0b0:	f001 feb7 	bl	30e22 <abort>
    }
  }

  // Handle negative indices
  if (start < 0) {
   2f0b4:	2b00      	cmp	r3, #0
   2f0b6:	daf9      	bge.n	2f0ac <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x2a>
    start += axis_size;
   2f0b8:	4403      	add	r3, r0
   2f0ba:	e7f7      	b.n	2f0ac <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x2a>
      start = std::numeric_limits<int>::lowest();
   2f0bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   2f0c0:	e7fa      	b.n	2f0b8 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi+0x36>
  if (hi < v) return hi;
   2f0c2:	4298      	cmp	r0, r3
  if (v < lo) return lo;
   2f0c4:	bfa8      	it	ge
   2f0c6:	ea23 70e3 	bicge.w	r0, r3, r3, asr #31

  // Clamping
  start = Clamp(start, 0, axis_size - 1);

  return start;
}
   2f0ca:	bd38      	pop	{r3, r4, r5, pc}

0002f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>:
// element. ie. So if you were iterating through all elements of a 1D array of
// size 4, this function would return 4 as the stop, because it is one past the
// "real" indices of 0, 1, 2 & 3.
inline int StopForAxis(const tflite::StridedSliceParams& params,
                       const RuntimeShape& input_shape, int axis,
                       int start_for_axis) {
   2f0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2f0ce:	4606      	mov	r6, r0
   2f0d0:	4608      	mov	r0, r1
  const auto end_mask = params.end_mask;
  const auto shrink_axis_mask = params.shrink_axis_mask;
  const auto* stop_indices = params.stop_indices;
  const auto* strides = params.strides;
  const int axis_size = input_shape.Dims(axis);
   2f0d2:	4611      	mov	r1, r2
                       int start_for_axis) {
   2f0d4:	4615      	mov	r5, r2
   2f0d6:	461f      	mov	r7, r3
  const int axis_size = input_shape.Dims(axis);
   2f0d8:	f7f8 faaa 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
  if (axis_size == 0) {
   2f0dc:	b318      	cbz	r0, 2f126 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5a>
    return 0;
  }

  // Begin with the specified index
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
   2f0de:	f9b6 3050 	ldrsh.w	r3, [r6, #80]	; 0x50
  int stop = stop_indices[axis];
   2f0e2:	eb06 0285 	add.w	r2, r6, r5, lsl #2
  const bool shrink_axis = shrink_axis_mask & (1 << axis);
   2f0e6:	412b      	asrs	r3, r5

  // When shrinking an axis, the end position does not matter (and can be
  // incorrect when negative indexing is used, see Issue #19260). Always use
  // start_for_axis + 1 to generate a length 1 slice, since start_for_axis has
  // already been adjusted for negative indices.
  if (shrink_axis) {
   2f0e8:	07d9      	lsls	r1, r3, #31
  int stop = stop_indices[axis];
   2f0ea:	69d4      	ldr	r4, [r2, #28]
    stop = start_for_axis + 1;
   2f0ec:	6b53      	ldr	r3, [r2, #52]	; 0x34
  }

  // end_mask override
  if (end_mask & (1 << axis)) {
   2f0ee:	f9b6 204c 	ldrsh.w	r2, [r6, #76]	; 0x4c
    stop = start_for_axis + 1;
   2f0f2:	bf48      	it	mi
   2f0f4:	1c7c      	addmi	r4, r7, #1
  if (end_mask & (1 << axis)) {
   2f0f6:	412a      	asrs	r2, r5
   2f0f8:	07d2      	lsls	r2, r2, #31
   2f0fa:	d505      	bpl.n	2f108 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x3c>
    if (strides[axis] > 0) {
   2f0fc:	2b00      	cmp	r3, #0
   2f0fe:	dc0b      	bgt.n	2f118 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x4c>
      // Forward iteration - use the last element. These values will get
      // clamped below
      stop = std::numeric_limits<int>::max();
    } else {
      // Backward iteration - use the first element.
      stop = std::numeric_limits<int>::lowest();
   2f100:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    }
  }

  // Handle negative indices
  if (stop < 0) {
    stop += axis_size;
   2f104:	4404      	add	r4, r0
   2f106:	e001      	b.n	2f10c <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x40>
  if (stop < 0) {
   2f108:	2c00      	cmp	r4, #0
   2f10a:	dbfb      	blt.n	2f104 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x38>
  }

  // Clamping
  // Because the end index points one past the last element, we need slightly
  // different clamping ranges depending on the direction.
  if (strides[axis] > 0) {
   2f10c:	2b00      	cmp	r3, #0
   2f10e:	dd0b      	ble.n	2f128 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5c>
  TFLITE_DCHECK(!(hi < lo));
   2f110:	2800      	cmp	r0, #0
   2f112:	da04      	bge.n	2f11e <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x52>
   2f114:	f001 fe85 	bl	30e22 <abort>
      stop = std::numeric_limits<int>::max();
   2f118:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   2f11c:	e7f8      	b.n	2f110 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x44>
  if (hi < v) return hi;
   2f11e:	4284      	cmp	r4, r0
   2f120:	dc01      	bgt.n	2f126 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5a>
  if (v < lo) return lo;
   2f122:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
    // Backward iteration
    stop = Clamp(stop, -1, axis_size - 1);
  }

  return stop;
}
   2f126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    stop = Clamp(stop, -1, axis_size - 1);
   2f128:	3801      	subs	r0, #1
  TFLITE_DCHECK(!(hi < lo));
   2f12a:	1c43      	adds	r3, r0, #1
   2f12c:	dbf2      	blt.n	2f114 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x48>
  if (hi < v) return hi;
   2f12e:	42a0      	cmp	r0, r4
  if (v < lo) return lo;
   2f130:	bfa8      	it	ge
   2f132:	ea44 70e4 	orrge.w	r0, r4, r4, asr #31
   2f136:	e7f6      	b.n	2f126 <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii+0x5a>

0002f138 <_ZN6tflite3ops5micro13strided_slice19StridedSliceContextC1EP13TfLiteContextP10TfLiteNode>:
  StridedSliceContext(TfLiteContext* context, TfLiteNode* node) {
   2f138:	b570      	push	{r4, r5, r6, lr}
    input = GetInput(context, node, kInputTensor);
   2f13a:	6815      	ldr	r5, [r2, #0]
   2f13c:	6889      	ldr	r1, [r1, #8]
  return &context->tensors[node->inputs->data[index]];
   2f13e:	68ae      	ldr	r6, [r5, #8]
    params = reinterpret_cast<TfLiteStridedSliceParams*>(node->builtin_data);
   2f140:	6954      	ldr	r4, [r2, #20]
  return &context->tensors[node->outputs->data[index]];
   2f142:	6852      	ldr	r2, [r2, #4]
  return &context->tensors[node->inputs->data[index]];
   2f144:	eb01 1686 	add.w	r6, r1, r6, lsl #6
   2f148:	6004      	str	r4, [r0, #0]
   2f14a:	686c      	ldr	r4, [r5, #4]
  return &context->tensors[node->outputs->data[index]];
   2f14c:	6852      	ldr	r2, [r2, #4]
    begin = GetInput(context, node, kBeginTensor);
   2f14e:	6086      	str	r6, [r0, #8]
  return &context->tensors[node->inputs->data[index]];
   2f150:	68ee      	ldr	r6, [r5, #12]
   2f152:	692d      	ldr	r5, [r5, #16]
   2f154:	eb01 1484 	add.w	r4, r1, r4, lsl #6
   2f158:	eb01 1686 	add.w	r6, r1, r6, lsl #6
   2f15c:	eb01 1585 	add.w	r5, r1, r5, lsl #6
  return &context->tensors[node->outputs->data[index]];
   2f160:	eb01 1182 	add.w	r1, r1, r2, lsl #6
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
   2f164:	68a2      	ldr	r2, [r4, #8]
    input = GetInput(context, node, kInputTensor);
   2f166:	6044      	str	r4, [r0, #4]
    dims = NumDimensions(input);
   2f168:	6812      	ldr	r2, [r2, #0]
    end = GetInput(context, node, kEndTensor);
   2f16a:	60c6      	str	r6, [r0, #12]
    strides = GetInput(context, node, kStridesTensor);
   2f16c:	6105      	str	r5, [r0, #16]
    output = GetOutput(context, node, kOutputTensor);
   2f16e:	6141      	str	r1, [r0, #20]
    dims = NumDimensions(input);
   2f170:	6182      	str	r2, [r0, #24]
  }
   2f172:	bd70      	pop	{r4, r5, r6, pc}

0002f174 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE>:
    StridedSliceContext* op_context) {
   2f174:	b570      	push	{r4, r5, r6, lr}
  op_params.start_indices_count = op_context->dims;
   2f176:	698e      	ldr	r6, [r1, #24]
  for (int i = 0; i < op_context->dims; ++i) {
   2f178:	2200      	movs	r2, #0
  op_params.start_indices_count = op_context->dims;
   2f17a:	b273      	sxtb	r3, r6
   2f17c:	7003      	strb	r3, [r0, #0]
  op_params.stop_indices_count = op_context->dims;
   2f17e:	7603      	strb	r3, [r0, #24]
  op_params.strides_count = op_context->dims;
   2f180:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  for (int i = 0; i < op_context->dims; ++i) {
   2f184:	4603      	mov	r3, r0
   2f186:	4296      	cmp	r6, r2
   2f188:	dd13      	ble.n	2f1b2 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x3e>
    op_params.start_indices[i] = GetTensorData<int32_t>(op_context->begin)[i];
   2f18a:	688c      	ldr	r4, [r1, #8]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
   2f18c:	b104      	cbz	r4, 2f190 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x1c>
   2f18e:	6864      	ldr	r4, [r4, #4]
   2f190:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
   2f194:	0095      	lsls	r5, r2, #2
   2f196:	605c      	str	r4, [r3, #4]
    op_params.stop_indices[i] = GetTensorData<int32_t>(op_context->end)[i];
   2f198:	68cc      	ldr	r4, [r1, #12]
   2f19a:	b104      	cbz	r4, 2f19e <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x2a>
   2f19c:	6864      	ldr	r4, [r4, #4]
   2f19e:	5964      	ldr	r4, [r4, r5]
   2f1a0:	61dc      	str	r4, [r3, #28]
    op_params.strides[i] = GetTensorData<int32_t>(op_context->strides)[i];
   2f1a2:	690c      	ldr	r4, [r1, #16]
   2f1a4:	b104      	cbz	r4, 2f1a8 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x34>
   2f1a6:	6864      	ldr	r4, [r4, #4]
   2f1a8:	5964      	ldr	r4, [r4, r5]
  for (int i = 0; i < op_context->dims; ++i) {
   2f1aa:	3201      	adds	r2, #1
    op_params.strides[i] = GetTensorData<int32_t>(op_context->strides)[i];
   2f1ac:	635c      	str	r4, [r3, #52]	; 0x34
  for (int i = 0; i < op_context->dims; ++i) {
   2f1ae:	3304      	adds	r3, #4
   2f1b0:	e7e9      	b.n	2f186 <_ZN6tflite3ops5micro13strided_slice23BuildStridedSliceParamsEPNS2_19StridedSliceContextE+0x12>
  op_params.begin_mask = op_context->params->begin_mask;
   2f1b2:	680b      	ldr	r3, [r1, #0]
   2f1b4:	681a      	ldr	r2, [r3, #0]
  op_params.end_mask = op_context->params->end_mask;
   2f1b6:	6859      	ldr	r1, [r3, #4]
  op_params.begin_mask = op_context->params->begin_mask;
   2f1b8:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
  op_params.ellipsis_mask = 0;
   2f1bc:	2200      	movs	r2, #0
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
   2f1be:	691b      	ldr	r3, [r3, #16]
  op_params.ellipsis_mask = 0;
   2f1c0:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
  op_params.end_mask = op_context->params->end_mask;
   2f1c4:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
  op_params.new_axis_mask = 0;
   2f1c8:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
  op_params.shrink_axis_mask = op_context->params->shrink_axis_mask;
   2f1cc:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
   2f1d0:	bd70      	pop	{r4, r5, r6, pc}

0002f1d2 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:

namespace tflite {

namespace reference_ops {
template <typename T>
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f1d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f1d6:	460e      	mov	r6, r1
   2f1d8:	b0b5      	sub	sp, #212	; 0xd4
                         T* output_data) {
  using strided_slice::LoopCondition;
  using strided_slice::StartForAxis;
  using strided_slice::StopForAxis;
  // Note that the output_shape is not used herein.
  tflite::StridedSliceParams params_copy = op_params;
   2f1da:	4601      	mov	r1, r0
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f1dc:	9211      	str	r2, [sp, #68]	; 0x44
  tflite::StridedSliceParams params_copy = op_params;
   2f1de:	a81f      	add	r0, sp, #124	; 0x7c
   2f1e0:	2254      	movs	r2, #84	; 0x54
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f1e2:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   2f1e4:	f001 fe40 	bl	30e68 <memcpy>

  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
   2f1e8:	6833      	ldr	r3, [r6, #0]
   2f1ea:	2b05      	cmp	r3, #5
   2f1ec:	dd01      	ble.n	2f1f2 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20>
   2f1ee:	f001 fe18 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
   2f1f2:	682b      	ldr	r3, [r5, #0]
   2f1f4:	2b05      	cmp	r3, #5
   2f1f6:	dcfa      	bgt.n	2f1ee <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
    return RuntimeShape(new_shape_size, shape, 1);
   2f1f8:	ac13      	add	r4, sp, #76	; 0x4c
   2f1fa:	4632      	mov	r2, r6
   2f1fc:	2301      	movs	r3, #1
   2f1fe:	2105      	movs	r1, #5
   2f200:	4620      	mov	r0, r4
   2f202:	f7f8 faaa 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2f206:	2301      	movs	r3, #1
   2f208:	462a      	mov	r2, r5
   2f20a:	2105      	movs	r1, #5
   2f20c:	a819      	add	r0, sp, #100	; 0x64
   2f20e:	f7f8 faa4 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  const RuntimeShape output_shape =
      RuntimeShape::ExtendedShape(5, unextended_output_shape);

  // Reverse and pad to 5 dimensions because that is what the runtime code
  // requires (ie. all shapes must be 5D and are given backwards).
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
   2f212:	2105      	movs	r1, #5
   2f214:	a81f      	add	r0, sp, #124	; 0x7c
   2f216:	f7ff fede 	bl	2efd6 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>

  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   2f21a:	2200      	movs	r2, #0
   2f21c:	4621      	mov	r1, r4
   2f21e:	a81f      	add	r0, sp, #124	; 0x7c
   2f220:	f7ff ff2f 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f224:	2200      	movs	r2, #0
   2f226:	4603      	mov	r3, r0
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   2f228:	4605      	mov	r5, r0
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f22a:	4621      	mov	r1, r4
   2f22c:	a81f      	add	r0, sp, #124	; 0x7c
   2f22e:	f7ff ff4d 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f232:	2201      	movs	r2, #1
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f234:	4606      	mov	r6, r0
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f236:	4621      	mov	r1, r4
   2f238:	a81f      	add	r0, sp, #124	; 0x7c
   2f23a:	f7ff ff22 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f23e:	2201      	movs	r2, #1
   2f240:	4603      	mov	r3, r0
   2f242:	4621      	mov	r1, r4
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f244:	4680      	mov	r8, r0
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f246:	a81f      	add	r0, sp, #124	; 0x7c
   2f248:	f7ff ff40 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f24c:	2202      	movs	r2, #2
   2f24e:	4621      	mov	r1, r4
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f250:	900a      	str	r0, [sp, #40]	; 0x28
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f252:	a81f      	add	r0, sp, #124	; 0x7c
   2f254:	f7ff ff15 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f258:	2202      	movs	r2, #2
   2f25a:	4603      	mov	r3, r0
   2f25c:	4621      	mov	r1, r4
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f25e:	9005      	str	r0, [sp, #20]
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f260:	a81f      	add	r0, sp, #124	; 0x7c
   2f262:	f7ff ff33 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f266:	2203      	movs	r2, #3
   2f268:	4621      	mov	r1, r4
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f26a:	900b      	str	r0, [sp, #44]	; 0x2c
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f26c:	a81f      	add	r0, sp, #124	; 0x7c
   2f26e:	f7ff ff08 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f272:	2203      	movs	r2, #3
   2f274:	4603      	mov	r3, r0
   2f276:	4621      	mov	r1, r4
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f278:	9006      	str	r0, [sp, #24]
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f27a:	a81f      	add	r0, sp, #124	; 0x7c
   2f27c:	f7ff ff26 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f280:	2204      	movs	r2, #4
   2f282:	4621      	mov	r1, r4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f284:	900c      	str	r0, [sp, #48]	; 0x30
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f286:	a81f      	add	r0, sp, #124	; 0x7c
   2f288:	f7ff fefb 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f28c:	2204      	movs	r2, #4
   2f28e:	4603      	mov	r3, r0
   2f290:	4621      	mov	r1, r4
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f292:	9007      	str	r0, [sp, #28]
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f294:	a81f      	add	r0, sp, #124	; 0x7c
   2f296:	f7ff ff19 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>

  T* out_ptr = output_data;
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f29a:	2101      	movs	r1, #1
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f29c:	900d      	str	r0, [sp, #52]	; 0x34
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f29e:	4620      	mov	r0, r4
   2f2a0:	f7f8 f9c6 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
           end_0 = stop_0 * input_shape.Dims(1),
   2f2a4:	fb06 f300 	mul.w	r3, r6, r0
   2f2a8:	9308      	str	r3, [sp, #32]
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   2f2aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f2ac:	4345      	muls	r5, r0
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   2f2ae:	9300      	str	r3, [sp, #0]
   2f2b0:	4343      	muls	r3, r0
   2f2b2:	930e      	str	r3, [sp, #56]	; 0x38
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
       offset_0 += step_0) {
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f2b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   2f2b6:	9301      	str	r3, [sp, #4]
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
         offset_1 += step_1) {
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f2b8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   2f2ba:	9302      	str	r3, [sp, #8]
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
           offset_2 += step_2) {
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f2bc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   2f2be:	9303      	str	r3, [sp, #12]
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
             offset_3 += step_3) {
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   2f2c0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   2f2c2:	9304      	str	r3, [sp, #16]

inline bool LoopCondition(int index, int stop, int stride) {
  // True when we have reached the end of an axis and should loop.
  return stride > 0 ? index >= stop : index <= stop;
   2f2c4:	9b00      	ldr	r3, [sp, #0]
   2f2c6:	2b00      	cmp	r3, #0
   2f2c8:	9b08      	ldr	r3, [sp, #32]
   2f2ca:	dd6c      	ble.n	2f3a6 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1d4>
   2f2cc:	429d      	cmp	r5, r3
   2f2ce:	bfb4      	ite	lt
   2f2d0:	2300      	movlt	r3, #0
   2f2d2:	2301      	movge	r3, #1
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
   2f2d4:	2b00      	cmp	r3, #0
   2f2d6:	f040 808e 	bne.w	2f3f6 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x224>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f2da:	2102      	movs	r1, #2
   2f2dc:	4620      	mov	r0, r4
   2f2de:	f7f8 f9a7 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f2e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f2e4:	eb08 0605 	add.w	r6, r8, r5
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f2e8:	eb03 0905 	add.w	r9, r3, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f2ec:	9b01      	ldr	r3, [sp, #4]
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f2ee:	4346      	muls	r6, r0
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f2f0:	4343      	muls	r3, r0
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f2f2:	fb00 f909 	mul.w	r9, r0, r9
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f2f6:	930f      	str	r3, [sp, #60]	; 0x3c
   2f2f8:	9b01      	ldr	r3, [sp, #4]
   2f2fa:	2b00      	cmp	r3, #0
   2f2fc:	dd58      	ble.n	2f3b0 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1de>
   2f2fe:	454e      	cmp	r6, r9
   2f300:	bfb4      	ite	lt
   2f302:	2300      	movlt	r3, #0
   2f304:	2301      	movge	r3, #1
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
   2f306:	2b00      	cmp	r3, #0
   2f308:	d172      	bne.n	2f3f0 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x21e>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f30a:	2103      	movs	r1, #3
   2f30c:	4620      	mov	r0, r4
   2f30e:	f7f8 f98f 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2f312:	9b05      	ldr	r3, [sp, #20]
   2f314:	199f      	adds	r7, r3, r6
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f318:	4347      	muls	r7, r0
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f31a:	eb03 0a06 	add.w	sl, r3, r6
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f31e:	9b02      	ldr	r3, [sp, #8]
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f320:	fb00 fa0a 	mul.w	sl, r0, sl
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f324:	4343      	muls	r3, r0
   2f326:	9310      	str	r3, [sp, #64]	; 0x40
   2f328:	9b02      	ldr	r3, [sp, #8]
   2f32a:	2b00      	cmp	r3, #0
   2f32c:	dd45      	ble.n	2f3ba <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e8>
   2f32e:	4557      	cmp	r7, sl
   2f330:	bfb4      	ite	lt
   2f332:	2300      	movlt	r3, #0
   2f334:	2301      	movge	r3, #1
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
   2f336:	2b00      	cmp	r3, #0
   2f338:	d157      	bne.n	2f3ea <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x218>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f33a:	2104      	movs	r1, #4
   2f33c:	4620      	mov	r0, r4
   2f33e:	f7f8 f977 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f342:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f344:	9b06      	ldr	r3, [sp, #24]
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f346:	eb02 0c07 	add.w	ip, r2, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f34a:	9a03      	ldr	r2, [sp, #12]
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f34c:	443b      	add	r3, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f34e:	4342      	muls	r2, r0
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f350:	4343      	muls	r3, r0
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f352:	fb00 fc0c 	mul.w	ip, r0, ip
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f356:	9209      	str	r2, [sp, #36]	; 0x24
   2f358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2f35a:	18d1      	adds	r1, r2, r3
   2f35c:	9a03      	ldr	r2, [sp, #12]
   2f35e:	2a00      	cmp	r2, #0
   2f360:	dd30      	ble.n	2f3c4 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1f2>
   2f362:	4563      	cmp	r3, ip
   2f364:	bfb4      	ite	lt
   2f366:	2200      	movlt	r2, #0
   2f368:	2201      	movge	r2, #1
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
   2f36a:	2a00      	cmp	r2, #0
   2f36c:	d13a      	bne.n	2f3e4 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x212>
   2f36e:	9a07      	ldr	r2, [sp, #28]
   2f370:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   2f374:	441a      	add	r2, r3
   2f376:	9804      	ldr	r0, [sp, #16]
   2f378:	f8cd e0f8 	str.w	lr, [sp, #248]	; 0xf8
   2f37c:	2800      	cmp	r0, #0
   2f37e:	dd26      	ble.n	2f3ce <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1fc>
   2f380:	428a      	cmp	r2, r1
   2f382:	bfb4      	ite	lt
   2f384:	f04f 0b00 	movlt.w	fp, #0
   2f388:	f04f 0b01 	movge.w	fp, #1
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   2f38c:	f1bb 0f00 	cmp.w	fp, #0
   2f390:	d124      	bne.n	2f3dc <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20a>
               offset_4 += params_copy.strides[4]) {
            *out_ptr++ = input_data[offset_4];
   2f392:	9811      	ldr	r0, [sp, #68]	; 0x44
   2f394:	eb00 0b82 	add.w	fp, r0, r2, lsl #2
   2f398:	f8db b000 	ldr.w	fp, [fp]
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   2f39c:	9804      	ldr	r0, [sp, #16]
            *out_ptr++ = input_data[offset_4];
   2f39e:	f84e bb04 	str.w	fp, [lr], #4
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   2f3a2:	4402      	add	r2, r0
   2f3a4:	e7e7      	b.n	2f376 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1a4>
   2f3a6:	429d      	cmp	r5, r3
   2f3a8:	bfcc      	ite	gt
   2f3aa:	2300      	movgt	r3, #0
   2f3ac:	2301      	movle	r3, #1
   2f3ae:	e791      	b.n	2f2d4 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x102>
   2f3b0:	454e      	cmp	r6, r9
   2f3b2:	bfcc      	ite	gt
   2f3b4:	2300      	movgt	r3, #0
   2f3b6:	2301      	movle	r3, #1
   2f3b8:	e7a5      	b.n	2f306 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x134>
   2f3ba:	4557      	cmp	r7, sl
   2f3bc:	bfcc      	ite	gt
   2f3be:	2300      	movgt	r3, #0
   2f3c0:	2301      	movle	r3, #1
   2f3c2:	e7b8      	b.n	2f336 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x164>
   2f3c4:	4563      	cmp	r3, ip
   2f3c6:	bfcc      	ite	gt
   2f3c8:	2200      	movgt	r2, #0
   2f3ca:	2201      	movle	r2, #1
   2f3cc:	e7cd      	b.n	2f36a <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x198>
   2f3ce:	428a      	cmp	r2, r1
   2f3d0:	bfcc      	ite	gt
   2f3d2:	f04f 0b00 	movgt.w	fp, #0
   2f3d6:	f04f 0b01 	movle.w	fp, #1
   2f3da:	e7d7      	b.n	2f38c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ba>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f3dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2f3de:	4413      	add	r3, r2
   2f3e0:	4411      	add	r1, r2
   2f3e2:	e7bb      	b.n	2f35c <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f3e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2f3e6:	441f      	add	r7, r3
   2f3e8:	e79e      	b.n	2f328 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x156>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f3ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2f3ec:	441e      	add	r6, r3
   2f3ee:	e783      	b.n	2f2f8 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x126>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f3f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2f3f2:	441d      	add	r5, r3
   2f3f4:	e766      	b.n	2f2c4 <_ZN6tflite13reference_ops12StridedSliceIfEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
  const RuntimeShape output_shape =
   2f3f6:	a819      	add	r0, sp, #100	; 0x64
   2f3f8:	f7f8 f90f 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   2f3fc:	4620      	mov	r0, r4
   2f3fe:	f7f8 f90c 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
          }
        }
      }
    }
  }
}
   2f402:	b035      	add	sp, #212	; 0xd4
   2f404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f408 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f40c:	460e      	mov	r6, r1
   2f40e:	b0b5      	sub	sp, #212	; 0xd4
  tflite::StridedSliceParams params_copy = op_params;
   2f410:	4601      	mov	r1, r0
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f412:	9211      	str	r2, [sp, #68]	; 0x44
  tflite::StridedSliceParams params_copy = op_params;
   2f414:	a81f      	add	r0, sp, #124	; 0x7c
   2f416:	2254      	movs	r2, #84	; 0x54
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f418:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   2f41a:	f001 fd25 	bl	30e68 <memcpy>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
   2f41e:	6833      	ldr	r3, [r6, #0]
   2f420:	2b05      	cmp	r3, #5
   2f422:	dd01      	ble.n	2f428 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20>
   2f424:	f001 fcfd 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
   2f428:	682b      	ldr	r3, [r5, #0]
   2f42a:	2b05      	cmp	r3, #5
   2f42c:	dcfa      	bgt.n	2f424 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
   2f42e:	ac13      	add	r4, sp, #76	; 0x4c
   2f430:	4632      	mov	r2, r6
   2f432:	2301      	movs	r3, #1
   2f434:	2105      	movs	r1, #5
   2f436:	4620      	mov	r0, r4
   2f438:	f7f8 f98f 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2f43c:	2301      	movs	r3, #1
   2f43e:	462a      	mov	r2, r5
   2f440:	2105      	movs	r1, #5
   2f442:	a819      	add	r0, sp, #100	; 0x64
   2f444:	f7f8 f989 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
   2f448:	2105      	movs	r1, #5
   2f44a:	a81f      	add	r0, sp, #124	; 0x7c
   2f44c:	f7ff fdc3 	bl	2efd6 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   2f450:	2200      	movs	r2, #0
   2f452:	4621      	mov	r1, r4
   2f454:	a81f      	add	r0, sp, #124	; 0x7c
   2f456:	f7ff fe14 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f45a:	2200      	movs	r2, #0
   2f45c:	4603      	mov	r3, r0
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   2f45e:	4605      	mov	r5, r0
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f460:	4621      	mov	r1, r4
   2f462:	a81f      	add	r0, sp, #124	; 0x7c
   2f464:	f7ff fe32 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f468:	2201      	movs	r2, #1
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f46a:	4606      	mov	r6, r0
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f46c:	4621      	mov	r1, r4
   2f46e:	a81f      	add	r0, sp, #124	; 0x7c
   2f470:	f7ff fe07 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f474:	2201      	movs	r2, #1
   2f476:	4603      	mov	r3, r0
   2f478:	4621      	mov	r1, r4
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f47a:	4680      	mov	r8, r0
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f47c:	a81f      	add	r0, sp, #124	; 0x7c
   2f47e:	f7ff fe25 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f482:	2202      	movs	r2, #2
   2f484:	4621      	mov	r1, r4
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f486:	900a      	str	r0, [sp, #40]	; 0x28
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f488:	a81f      	add	r0, sp, #124	; 0x7c
   2f48a:	f7ff fdfa 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f48e:	2202      	movs	r2, #2
   2f490:	4603      	mov	r3, r0
   2f492:	4621      	mov	r1, r4
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f494:	9005      	str	r0, [sp, #20]
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f496:	a81f      	add	r0, sp, #124	; 0x7c
   2f498:	f7ff fe18 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f49c:	2203      	movs	r2, #3
   2f49e:	4621      	mov	r1, r4
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f4a0:	900b      	str	r0, [sp, #44]	; 0x2c
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f4a2:	a81f      	add	r0, sp, #124	; 0x7c
   2f4a4:	f7ff fded 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f4a8:	2203      	movs	r2, #3
   2f4aa:	4603      	mov	r3, r0
   2f4ac:	4621      	mov	r1, r4
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f4ae:	9006      	str	r0, [sp, #24]
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f4b0:	a81f      	add	r0, sp, #124	; 0x7c
   2f4b2:	f7ff fe0b 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f4b6:	2204      	movs	r2, #4
   2f4b8:	4621      	mov	r1, r4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f4ba:	900c      	str	r0, [sp, #48]	; 0x30
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f4bc:	a81f      	add	r0, sp, #124	; 0x7c
   2f4be:	f7ff fde0 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f4c2:	2204      	movs	r2, #4
   2f4c4:	4603      	mov	r3, r0
   2f4c6:	4621      	mov	r1, r4
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f4c8:	9007      	str	r0, [sp, #28]
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f4ca:	a81f      	add	r0, sp, #124	; 0x7c
   2f4cc:	f7ff fdfe 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f4d0:	2101      	movs	r1, #1
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f4d2:	900d      	str	r0, [sp, #52]	; 0x34
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f4d4:	4620      	mov	r0, r4
   2f4d6:	f7f8 f8ab 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
           end_0 = stop_0 * input_shape.Dims(1),
   2f4da:	fb06 f300 	mul.w	r3, r6, r0
   2f4de:	9308      	str	r3, [sp, #32]
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   2f4e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f4e2:	4345      	muls	r5, r0
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   2f4e4:	9300      	str	r3, [sp, #0]
   2f4e6:	4343      	muls	r3, r0
   2f4e8:	930e      	str	r3, [sp, #56]	; 0x38
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f4ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   2f4ec:	9301      	str	r3, [sp, #4]
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f4ee:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   2f4f0:	9302      	str	r3, [sp, #8]
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f4f2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   2f4f4:	9303      	str	r3, [sp, #12]
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   2f4f6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   2f4f8:	9304      	str	r3, [sp, #16]
   2f4fa:	9b00      	ldr	r3, [sp, #0]
   2f4fc:	2b00      	cmp	r3, #0
   2f4fe:	9b08      	ldr	r3, [sp, #32]
   2f500:	dd6a      	ble.n	2f5d8 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1d0>
   2f502:	429d      	cmp	r5, r3
   2f504:	bfb4      	ite	lt
   2f506:	2300      	movlt	r3, #0
   2f508:	2301      	movge	r3, #1
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
   2f50a:	2b00      	cmp	r3, #0
   2f50c:	f040 808c 	bne.w	2f628 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x220>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f510:	2102      	movs	r1, #2
   2f512:	4620      	mov	r0, r4
   2f514:	f7f8 f88c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f51a:	eb08 0605 	add.w	r6, r8, r5
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f51e:	eb03 0905 	add.w	r9, r3, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f522:	9b01      	ldr	r3, [sp, #4]
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f524:	4346      	muls	r6, r0
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f526:	4343      	muls	r3, r0
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f528:	fb00 f909 	mul.w	r9, r0, r9
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f52c:	930f      	str	r3, [sp, #60]	; 0x3c
   2f52e:	9b01      	ldr	r3, [sp, #4]
   2f530:	2b00      	cmp	r3, #0
   2f532:	dd56      	ble.n	2f5e2 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1da>
   2f534:	454e      	cmp	r6, r9
   2f536:	bfb4      	ite	lt
   2f538:	2300      	movlt	r3, #0
   2f53a:	2301      	movge	r3, #1
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
   2f53c:	2b00      	cmp	r3, #0
   2f53e:	d170      	bne.n	2f622 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x21a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f540:	2103      	movs	r1, #3
   2f542:	4620      	mov	r0, r4
   2f544:	f7f8 f874 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2f548:	9b05      	ldr	r3, [sp, #20]
   2f54a:	199f      	adds	r7, r3, r6
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f54c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f54e:	4347      	muls	r7, r0
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f550:	eb03 0a06 	add.w	sl, r3, r6
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f554:	9b02      	ldr	r3, [sp, #8]
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f556:	fb00 fa0a 	mul.w	sl, r0, sl
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f55a:	4343      	muls	r3, r0
   2f55c:	9310      	str	r3, [sp, #64]	; 0x40
   2f55e:	9b02      	ldr	r3, [sp, #8]
   2f560:	2b00      	cmp	r3, #0
   2f562:	dd43      	ble.n	2f5ec <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e4>
   2f564:	4557      	cmp	r7, sl
   2f566:	bfb4      	ite	lt
   2f568:	2300      	movlt	r3, #0
   2f56a:	2301      	movge	r3, #1
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
   2f56c:	2b00      	cmp	r3, #0
   2f56e:	d155      	bne.n	2f61c <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x214>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f570:	2104      	movs	r1, #4
   2f572:	4620      	mov	r0, r4
   2f574:	f7f8 f85c 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f578:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f57a:	9b06      	ldr	r3, [sp, #24]
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f57c:	eb02 0c07 	add.w	ip, r2, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f580:	9a03      	ldr	r2, [sp, #12]
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f582:	443b      	add	r3, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f584:	4342      	muls	r2, r0
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f586:	4343      	muls	r3, r0
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f588:	fb00 fc0c 	mul.w	ip, r0, ip
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f58c:	9209      	str	r2, [sp, #36]	; 0x24
   2f58e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2f590:	18d1      	adds	r1, r2, r3
   2f592:	9a03      	ldr	r2, [sp, #12]
   2f594:	2a00      	cmp	r2, #0
   2f596:	dd2e      	ble.n	2f5f6 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
   2f598:	4563      	cmp	r3, ip
   2f59a:	bfb4      	ite	lt
   2f59c:	2200      	movlt	r2, #0
   2f59e:	2201      	movge	r2, #1
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
   2f5a0:	2a00      	cmp	r2, #0
   2f5a2:	d138      	bne.n	2f616 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20e>
   2f5a4:	9a07      	ldr	r2, [sp, #28]
   2f5a6:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   2f5aa:	441a      	add	r2, r3
   2f5ac:	9804      	ldr	r0, [sp, #16]
   2f5ae:	f8cd e0f8 	str.w	lr, [sp, #248]	; 0xf8
   2f5b2:	2800      	cmp	r0, #0
   2f5b4:	dd24      	ble.n	2f600 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1f8>
   2f5b6:	428a      	cmp	r2, r1
   2f5b8:	bfb4      	ite	lt
   2f5ba:	f04f 0b00 	movlt.w	fp, #0
   2f5be:	f04f 0b01 	movge.w	fp, #1
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   2f5c2:	f1bb 0f00 	cmp.w	fp, #0
   2f5c6:	d122      	bne.n	2f60e <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x206>
            *out_ptr++ = input_data[offset_4];
   2f5c8:	9811      	ldr	r0, [sp, #68]	; 0x44
   2f5ca:	f810 b002 	ldrb.w	fp, [r0, r2]
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   2f5ce:	9804      	ldr	r0, [sp, #16]
            *out_ptr++ = input_data[offset_4];
   2f5d0:	f80e bb01 	strb.w	fp, [lr], #1
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   2f5d4:	4402      	add	r2, r0
   2f5d6:	e7e9      	b.n	2f5ac <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1a4>
   2f5d8:	429d      	cmp	r5, r3
   2f5da:	bfcc      	ite	gt
   2f5dc:	2300      	movgt	r3, #0
   2f5de:	2301      	movle	r3, #1
   2f5e0:	e793      	b.n	2f50a <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x102>
   2f5e2:	454e      	cmp	r6, r9
   2f5e4:	bfcc      	ite	gt
   2f5e6:	2300      	movgt	r3, #0
   2f5e8:	2301      	movle	r3, #1
   2f5ea:	e7a7      	b.n	2f53c <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x134>
   2f5ec:	4557      	cmp	r7, sl
   2f5ee:	bfcc      	ite	gt
   2f5f0:	2300      	movgt	r3, #0
   2f5f2:	2301      	movle	r3, #1
   2f5f4:	e7ba      	b.n	2f56c <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x164>
   2f5f6:	4563      	cmp	r3, ip
   2f5f8:	bfcc      	ite	gt
   2f5fa:	2200      	movgt	r2, #0
   2f5fc:	2201      	movle	r2, #1
   2f5fe:	e7cf      	b.n	2f5a0 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x198>
   2f600:	428a      	cmp	r2, r1
   2f602:	bfcc      	ite	gt
   2f604:	f04f 0b00 	movgt.w	fp, #0
   2f608:	f04f 0b01 	movle.w	fp, #1
   2f60c:	e7d9      	b.n	2f5c2 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ba>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f60e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2f610:	4413      	add	r3, r2
   2f612:	4411      	add	r1, r2
   2f614:	e7bd      	b.n	2f592 <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f616:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2f618:	441f      	add	r7, r3
   2f61a:	e7a0      	b.n	2f55e <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x156>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f61c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2f61e:	441e      	add	r6, r3
   2f620:	e785      	b.n	2f52e <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x126>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f622:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2f624:	441d      	add	r5, r3
   2f626:	e768      	b.n	2f4fa <_ZN6tflite13reference_ops12StridedSliceIhEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
  const RuntimeShape output_shape =
   2f628:	a819      	add	r0, sp, #100	; 0x64
   2f62a:	f7f7 fff6 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   2f62e:	4620      	mov	r0, r4
   2f630:	f7f7 fff3 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2f634:	b035      	add	sp, #212	; 0xd4
   2f636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f63a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f63a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f63e:	460e      	mov	r6, r1
   2f640:	b0b5      	sub	sp, #212	; 0xd4
  tflite::StridedSliceParams params_copy = op_params;
   2f642:	4601      	mov	r1, r0
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f644:	9211      	str	r2, [sp, #68]	; 0x44
  tflite::StridedSliceParams params_copy = op_params;
   2f646:	a81f      	add	r0, sp, #124	; 0x7c
   2f648:	2254      	movs	r2, #84	; 0x54
inline void StridedSlice(const tflite::StridedSliceParams& op_params,
   2f64a:	461d      	mov	r5, r3
  tflite::StridedSliceParams params_copy = op_params;
   2f64c:	f001 fc0c 	bl	30e68 <memcpy>
  TFLITE_DCHECK_LE(unextended_input_shape.DimensionsCount(), 5);
   2f650:	6833      	ldr	r3, [r6, #0]
   2f652:	2b05      	cmp	r3, #5
   2f654:	dd01      	ble.n	2f65a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20>
   2f656:	f001 fbe4 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(unextended_output_shape.DimensionsCount(), 5);
   2f65a:	682b      	ldr	r3, [r5, #0]
   2f65c:	2b05      	cmp	r3, #5
   2f65e:	dcfa      	bgt.n	2f656 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c>
   2f660:	ac13      	add	r4, sp, #76	; 0x4c
   2f662:	4632      	mov	r2, r6
   2f664:	2301      	movs	r3, #1
   2f666:	2105      	movs	r1, #5
   2f668:	4620      	mov	r0, r4
   2f66a:	f7f8 f876 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2f66e:	2301      	movs	r3, #1
   2f670:	462a      	mov	r2, r5
   2f672:	2105      	movs	r1, #5
   2f674:	a819      	add	r0, sp, #100	; 0x64
   2f676:	f7f8 f870 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  strided_slice::StridedSlicePadIndices(&params_copy, 5);
   2f67a:	2105      	movs	r1, #5
   2f67c:	a81f      	add	r0, sp, #124	; 0x7c
   2f67e:	f7ff fcaa 	bl	2efd6 <_ZN6tflite13strided_slice22StridedSlicePadIndicesEPNS_18StridedSliceParamsEi>
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   2f682:	2200      	movs	r2, #0
   2f684:	4621      	mov	r1, r4
   2f686:	a81f      	add	r0, sp, #124	; 0x7c
   2f688:	f7ff fcfb 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f68c:	2200      	movs	r2, #0
   2f68e:	4603      	mov	r3, r0
  const int start_0 = StartForAxis(params_copy, input_shape, 0);
   2f690:	4605      	mov	r5, r0
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f692:	4621      	mov	r1, r4
   2f694:	a81f      	add	r0, sp, #124	; 0x7c
   2f696:	f7ff fd19 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f69a:	2201      	movs	r2, #1
  const int stop_0 = StopForAxis(params_copy, input_shape, 0, start_0);
   2f69c:	4606      	mov	r6, r0
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f69e:	4621      	mov	r1, r4
   2f6a0:	a81f      	add	r0, sp, #124	; 0x7c
   2f6a2:	f7ff fcee 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f6a6:	2201      	movs	r2, #1
   2f6a8:	4603      	mov	r3, r0
   2f6aa:	4621      	mov	r1, r4
  const int start_1 = StartForAxis(params_copy, input_shape, 1);
   2f6ac:	4680      	mov	r8, r0
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f6ae:	a81f      	add	r0, sp, #124	; 0x7c
   2f6b0:	f7ff fd0c 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f6b4:	2202      	movs	r2, #2
   2f6b6:	4621      	mov	r1, r4
  const int stop_1 = StopForAxis(params_copy, input_shape, 1, start_1);
   2f6b8:	900a      	str	r0, [sp, #40]	; 0x28
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f6ba:	a81f      	add	r0, sp, #124	; 0x7c
   2f6bc:	f7ff fce1 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f6c0:	2202      	movs	r2, #2
   2f6c2:	4603      	mov	r3, r0
   2f6c4:	4621      	mov	r1, r4
  const int start_2 = StartForAxis(params_copy, input_shape, 2);
   2f6c6:	9005      	str	r0, [sp, #20]
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f6c8:	a81f      	add	r0, sp, #124	; 0x7c
   2f6ca:	f7ff fcff 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f6ce:	2203      	movs	r2, #3
   2f6d0:	4621      	mov	r1, r4
  const int stop_2 = StopForAxis(params_copy, input_shape, 2, start_2);
   2f6d2:	900b      	str	r0, [sp, #44]	; 0x2c
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f6d4:	a81f      	add	r0, sp, #124	; 0x7c
   2f6d6:	f7ff fcd4 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f6da:	2203      	movs	r2, #3
   2f6dc:	4603      	mov	r3, r0
   2f6de:	4621      	mov	r1, r4
  const int start_3 = StartForAxis(params_copy, input_shape, 3);
   2f6e0:	9006      	str	r0, [sp, #24]
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f6e2:	a81f      	add	r0, sp, #124	; 0x7c
   2f6e4:	f7ff fcf2 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f6e8:	2204      	movs	r2, #4
   2f6ea:	4621      	mov	r1, r4
  const int stop_3 = StopForAxis(params_copy, input_shape, 3, start_3);
   2f6ec:	900c      	str	r0, [sp, #48]	; 0x30
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f6ee:	a81f      	add	r0, sp, #124	; 0x7c
   2f6f0:	f7ff fcc7 	bl	2f082 <_ZN6tflite13strided_slice12StartForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEi>
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f6f4:	2204      	movs	r2, #4
   2f6f6:	4603      	mov	r3, r0
   2f6f8:	4621      	mov	r1, r4
  const int start_4 = StartForAxis(params_copy, input_shape, 4);
   2f6fa:	9007      	str	r0, [sp, #28]
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f6fc:	a81f      	add	r0, sp, #124	; 0x7c
   2f6fe:	f7ff fce5 	bl	2f0cc <_ZN6tflite13strided_slice11StopForAxisERKNS_18StridedSliceParamsERKNS_12RuntimeShapeEii>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f702:	2101      	movs	r1, #1
  const int stop_4 = StopForAxis(params_copy, input_shape, 4, start_4);
   2f704:	900d      	str	r0, [sp, #52]	; 0x34
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f706:	4620      	mov	r0, r4
   2f708:	f7f7 ff92 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
           end_0 = stop_0 * input_shape.Dims(1),
   2f70c:	fb06 f300 	mul.w	r3, r6, r0
   2f710:	9308      	str	r3, [sp, #32]
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   2f712:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f714:	4345      	muls	r5, r0
           step_0 = params_copy.strides[0] * input_shape.Dims(1);
   2f716:	9300      	str	r3, [sp, #0]
   2f718:	4343      	muls	r3, r0
   2f71a:	930e      	str	r3, [sp, #56]	; 0x38
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f71c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   2f71e:	9301      	str	r3, [sp, #4]
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f720:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
   2f722:	9302      	str	r3, [sp, #8]
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f724:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   2f726:	9303      	str	r3, [sp, #12]
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   2f728:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   2f72a:	9304      	str	r3, [sp, #16]
   2f72c:	9b00      	ldr	r3, [sp, #0]
   2f72e:	2b00      	cmp	r3, #0
   2f730:	9b08      	ldr	r3, [sp, #32]
   2f732:	dd6a      	ble.n	2f80a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1d0>
   2f734:	429d      	cmp	r5, r3
   2f736:	bfb4      	ite	lt
   2f738:	2300      	movlt	r3, #0
   2f73a:	2301      	movge	r3, #1
       !LoopCondition(offset_0, end_0, params_copy.strides[0]);
   2f73c:	2b00      	cmp	r3, #0
   2f73e:	f040 808c 	bne.w	2f85a <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x220>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f742:	2102      	movs	r1, #2
   2f744:	4620      	mov	r0, r4
   2f746:	f7f7 ff73 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f74a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f74c:	eb08 0605 	add.w	r6, r8, r5
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f750:	eb03 0905 	add.w	r9, r3, r5
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f754:	9b01      	ldr	r3, [sp, #4]
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f756:	4346      	muls	r6, r0
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f758:	4343      	muls	r3, r0
             end_1 = (offset_0 + stop_1) * input_shape.Dims(2),
   2f75a:	fb00 f909 	mul.w	r9, r0, r9
             step_1 = params_copy.strides[1] * input_shape.Dims(2);
   2f75e:	930f      	str	r3, [sp, #60]	; 0x3c
   2f760:	9b01      	ldr	r3, [sp, #4]
   2f762:	2b00      	cmp	r3, #0
   2f764:	dd56      	ble.n	2f814 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1da>
   2f766:	454e      	cmp	r6, r9
   2f768:	bfb4      	ite	lt
   2f76a:	2300      	movlt	r3, #0
   2f76c:	2301      	movge	r3, #1
         !LoopCondition(offset_1, end_1, params_copy.strides[1]);
   2f76e:	2b00      	cmp	r3, #0
   2f770:	d170      	bne.n	2f854 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x21a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f772:	2103      	movs	r1, #3
   2f774:	4620      	mov	r0, r4
   2f776:	f7f7 ff5b 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
   2f77a:	9b05      	ldr	r3, [sp, #20]
   2f77c:	199f      	adds	r7, r3, r6
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f77e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f780:	4347      	muls	r7, r0
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f782:	eb03 0a06 	add.w	sl, r3, r6
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f786:	9b02      	ldr	r3, [sp, #8]
               end_2 = (offset_1 + stop_2) * input_shape.Dims(3),
   2f788:	fb00 fa0a 	mul.w	sl, r0, sl
               step_2 = params_copy.strides[2] * input_shape.Dims(3);
   2f78c:	4343      	muls	r3, r0
   2f78e:	9310      	str	r3, [sp, #64]	; 0x40
   2f790:	9b02      	ldr	r3, [sp, #8]
   2f792:	2b00      	cmp	r3, #0
   2f794:	dd43      	ble.n	2f81e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e4>
   2f796:	4557      	cmp	r7, sl
   2f798:	bfb4      	ite	lt
   2f79a:	2300      	movlt	r3, #0
   2f79c:	2301      	movge	r3, #1
           !LoopCondition(offset_2, end_2, params_copy.strides[2]);
   2f79e:	2b00      	cmp	r3, #0
   2f7a0:	d155      	bne.n	2f84e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x214>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f7a2:	2104      	movs	r1, #4
   2f7a4:	4620      	mov	r0, r4
   2f7a6:	f7f7 ff43 	bl	27630 <_ZNK6tflite12RuntimeShape4DimsEi>
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f7aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f7ac:	9b06      	ldr	r3, [sp, #24]
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f7ae:	eb02 0c07 	add.w	ip, r2, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f7b2:	9a03      	ldr	r2, [sp, #12]
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f7b4:	443b      	add	r3, r7
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f7b6:	4342      	muls	r2, r0
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f7b8:	4343      	muls	r3, r0
                 end_3 = (offset_2 + stop_3) * input_shape.Dims(4),
   2f7ba:	fb00 fc0c 	mul.w	ip, r0, ip
                 step_3 = params_copy.strides[3] * input_shape.Dims(4);
   2f7be:	9209      	str	r2, [sp, #36]	; 0x24
   2f7c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2f7c2:	18d1      	adds	r1, r2, r3
   2f7c4:	9a03      	ldr	r2, [sp, #12]
   2f7c6:	2a00      	cmp	r2, #0
   2f7c8:	dd2e      	ble.n	2f828 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
   2f7ca:	4563      	cmp	r3, ip
   2f7cc:	bfb4      	ite	lt
   2f7ce:	2200      	movlt	r2, #0
   2f7d0:	2201      	movge	r2, #1
             !LoopCondition(offset_3, end_3, params_copy.strides[3]);
   2f7d2:	2a00      	cmp	r2, #0
   2f7d4:	d138      	bne.n	2f848 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x20e>
   2f7d6:	9a07      	ldr	r2, [sp, #28]
   2f7d8:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   2f7dc:	441a      	add	r2, r3
   2f7de:	9804      	ldr	r0, [sp, #16]
   2f7e0:	f8cd e0f8 	str.w	lr, [sp, #248]	; 0xf8
   2f7e4:	2800      	cmp	r0, #0
   2f7e6:	dd24      	ble.n	2f832 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1f8>
   2f7e8:	428a      	cmp	r2, r1
   2f7ea:	bfb4      	ite	lt
   2f7ec:	f04f 0b00 	movlt.w	fp, #0
   2f7f0:	f04f 0b01 	movge.w	fp, #1
               !LoopCondition(offset_4, end_4, params_copy.strides[4]);
   2f7f4:	f1bb 0f00 	cmp.w	fp, #0
   2f7f8:	d122      	bne.n	2f840 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x206>
            *out_ptr++ = input_data[offset_4];
   2f7fa:	9811      	ldr	r0, [sp, #68]	; 0x44
   2f7fc:	f910 b002 	ldrsb.w	fp, [r0, r2]
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   2f800:	9804      	ldr	r0, [sp, #16]
            *out_ptr++ = input_data[offset_4];
   2f802:	f80e bb01 	strb.w	fp, [lr], #1
          for (int offset_4 = offset_3 + start_4, end_4 = offset_3 + stop_4;
   2f806:	4402      	add	r2, r0
   2f808:	e7e9      	b.n	2f7de <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1a4>
   2f80a:	429d      	cmp	r5, r3
   2f80c:	bfcc      	ite	gt
   2f80e:	2300      	movgt	r3, #0
   2f810:	2301      	movle	r3, #1
   2f812:	e793      	b.n	2f73c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x102>
   2f814:	454e      	cmp	r6, r9
   2f816:	bfcc      	ite	gt
   2f818:	2300      	movgt	r3, #0
   2f81a:	2301      	movle	r3, #1
   2f81c:	e7a7      	b.n	2f76e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x134>
   2f81e:	4557      	cmp	r7, sl
   2f820:	bfcc      	ite	gt
   2f822:	2300      	movgt	r3, #0
   2f824:	2301      	movle	r3, #1
   2f826:	e7ba      	b.n	2f79e <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x164>
   2f828:	4563      	cmp	r3, ip
   2f82a:	bfcc      	ite	gt
   2f82c:	2200      	movgt	r2, #0
   2f82e:	2201      	movle	r2, #1
   2f830:	e7cf      	b.n	2f7d2 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x198>
   2f832:	428a      	cmp	r2, r1
   2f834:	bfcc      	ite	gt
   2f836:	f04f 0b00 	movgt.w	fp, #0
   2f83a:	f04f 0b01 	movle.w	fp, #1
   2f83e:	e7d9      	b.n	2f7f4 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ba>
        for (int offset_3 = (offset_2 + start_3) * input_shape.Dims(4),
   2f840:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2f842:	4413      	add	r3, r2
   2f844:	4411      	add	r1, r2
   2f846:	e7bd      	b.n	2f7c4 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x18a>
      for (int offset_2 = (offset_1 + start_2) * input_shape.Dims(3),
   2f848:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2f84a:	441f      	add	r7, r3
   2f84c:	e7a0      	b.n	2f790 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x156>
    for (int offset_1 = (offset_0 + start_1) * input_shape.Dims(2),
   2f84e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2f850:	441e      	add	r6, r3
   2f852:	e785      	b.n	2f760 <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x126>
  for (int offset_0 = start_0 * input_shape.Dims(1),
   2f854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2f856:	441d      	add	r5, r3
   2f858:	e768      	b.n	2f72c <_ZN6tflite13reference_ops12StridedSliceIaEEvRKNS_18StridedSliceParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xf2>
  const RuntimeShape output_shape =
   2f85a:	a819      	add	r0, sp, #100	; 0x64
   2f85c:	f7f7 fedd 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape =
   2f860:	4620      	mov	r0, r4
   2f862:	f7f7 feda 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2f866:	b035      	add	sp, #212	; 0xd4
   2f868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f86c <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                const RuntimeShape& output_shape, uint8* output_data) {
   2f86c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f870:	4604      	mov	r4, r0
   2f872:	4690      	mov	r8, r2
   2f874:	4608      	mov	r0, r1
   2f876:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2f878:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   2f87c:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, uint8* output_data) {
   2f87e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2f880:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2f882:	dd01      	ble.n	2f888 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1c>
   2f884:	f001 facd 	bl	30e22 <abort>
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   2f888:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2f88a:	f7f7 ffb5 	bl	277f8 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   2f88e:	6862      	ldr	r2, [r4, #4]
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   2f890:	4681      	mov	r9, r0
  TFLITE_DCHECK_GT(params.input1_offset, -256);
   2f892:	f112 0fff 	cmn.w	r2, #255	; 0xff
   2f896:	dbf5      	blt.n	2f884 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   2f898:	2aff      	cmp	r2, #255	; 0xff
  TFLITE_DCHECK_GT(params.input2_offset, -256);
   2f89a:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LT(params.input1_offset, 256);
   2f89c:	dcf2      	bgt.n	2f884 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
   2f89e:	33ff      	adds	r3, #255	; 0xff
   2f8a0:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
   2f8a4:	d8ee      	bhi.n	2f884 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x18>
  for (int i = 0; i < size; ++i) {
   2f8a6:	2700      	movs	r7, #0
   2f8a8:	45b9      	cmp	r9, r7
   2f8aa:	dd29      	ble.n	2f900 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x94>
    const int32 input2_val = params.input2_offset + input2_data[i];
   2f8ac:	f816 a007 	ldrb.w	sl, [r6, r7]
   2f8b0:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   2f8b2:	6862      	ldr	r2, [r4, #4]
    const int32 input2_val = params.input2_offset + input2_data[i];
   2f8b4:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   2f8b6:	f818 3007 	ldrb.w	r3, [r8, r7]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   2f8ba:	69a0      	ldr	r0, [r4, #24]
    const int32 input1_val = params.input1_offset + input1_data[i];
   2f8bc:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   2f8be:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f8c2:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   2f8c6:	fa03 f000 	lsl.w	r0, r3, r0
   2f8ca:	f7e7 f9bf 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f8ce:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f8d2:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f8d4:	4650      	mov	r0, sl
   2f8d6:	f7e7 f9b9 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f8da:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2f8de:	ebab 0000 	sub.w	r0, fp, r0
   2f8e2:	f7e7 f9b3 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   2f8e6:	68e3      	ldr	r3, [r4, #12]
   2f8e8:	4403      	add	r3, r0
    output_data[i] = static_cast<uint8>(clamped_output);
   2f8ea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2f8ec:	4283      	cmp	r3, r0
   2f8ee:	bfb8      	it	lt
   2f8f0:	4603      	movlt	r3, r0
   2f8f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2f8f4:	4283      	cmp	r3, r0
   2f8f6:	bfa8      	it	ge
   2f8f8:	4603      	movge	r3, r0
   2f8fa:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   2f8fc:	3701      	adds	r7, #1
   2f8fe:	e7d3      	b.n	2f8a8 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x3c>
}
   2f900:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f904 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
                const RuntimeShape& output_shape, int8_t* output_data) {
   2f904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f908:	4604      	mov	r4, r0
   2f90a:	4690      	mov	r8, r2
   2f90c:	4608      	mov	r0, r1
   2f90e:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2f910:	e9d4 230b 	ldrd	r2, r3, [r4, #44]	; 0x2c
   2f914:	429a      	cmp	r2, r3
                const RuntimeShape& output_shape, int8_t* output_data) {
   2f916:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2f918:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  TFLITE_DCHECK_LE(params.quantized_activation_min,
   2f91a:	dd01      	ble.n	2f920 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1c>
   2f91c:	f001 fa81 	bl	30e22 <abort>
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   2f920:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2f922:	f7f7 ff69 	bl	277f8 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   2f926:	6862      	ldr	r2, [r4, #4]
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
   2f928:	4681      	mov	r9, r0
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
   2f92a:	f112 0f7f 	cmn.w	r2, #127	; 0x7f
   2f92e:	dbf5      	blt.n	2f91c <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   2f930:	2a7f      	cmp	r2, #127	; 0x7f
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
   2f932:	68a3      	ldr	r3, [r4, #8]
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
   2f934:	dcf2      	bgt.n	2f91c <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  TFLITE_DCHECK_LE(params.input2_offset, int8_max_value);
   2f936:	337f      	adds	r3, #127	; 0x7f
   2f938:	2bfe      	cmp	r3, #254	; 0xfe
   2f93a:	d8ef      	bhi.n	2f91c <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x18>
  for (int i = 0; i < size; ++i) {
   2f93c:	2700      	movs	r7, #0
   2f93e:	45b9      	cmp	r9, r7
   2f940:	dd29      	ble.n	2f996 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x92>
    const int32 input2_val = params.input2_offset + input2_data[i];
   2f942:	f916 a007 	ldrsb.w	sl, [r6, r7]
   2f946:	68a3      	ldr	r3, [r4, #8]
    const int32 input1_val = params.input1_offset + input1_data[i];
   2f948:	6862      	ldr	r2, [r4, #4]
    const int32 input2_val = params.input2_offset + input2_data[i];
   2f94a:	449a      	add	sl, r3
    const int32 input1_val = params.input1_offset + input1_data[i];
   2f94c:	f918 3007 	ldrsb.w	r3, [r8, r7]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   2f950:	69a0      	ldr	r0, [r4, #24]
    const int32 input1_val = params.input1_offset + input1_data[i];
   2f952:	4413      	add	r3, r2
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   2f954:	fa0a fa00 	lsl.w	sl, sl, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f958:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
   2f95c:	fa03 f000 	lsl.w	r0, r3, r0
   2f960:	f7e7 f974 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f964:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f968:	4683      	mov	fp, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f96a:	4650      	mov	r0, sl
   2f96c:	f7e7 f96e 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f970:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2f974:	ebab 0000 	sub.w	r0, fp, r0
   2f978:	f7e7 f968 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   2f97c:	68e3      	ldr	r3, [r4, #12]
   2f97e:	4403      	add	r3, r0
    output_data[i] = static_cast<int8_t>(clamped_output);
   2f980:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   2f982:	4283      	cmp	r3, r0
   2f984:	bfb8      	it	lt
   2f986:	4603      	movlt	r3, r0
   2f988:	6b20      	ldr	r0, [r4, #48]	; 0x30
   2f98a:	4283      	cmp	r3, r0
   2f98c:	bfa8      	it	ge
   2f98e:	4603      	movge	r3, r0
   2f990:	55eb      	strb	r3, [r5, r7]
  for (int i = 0; i < size; ++i) {
   2f992:	3701      	adds	r7, #1
   2f994:	e7d3      	b.n	2f93e <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x3a>
}
   2f996:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002f99a <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_PaENKUlPiE_clESB_>:
  auto sub_func = [&](int indexes[N]) {
   2f99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f99e:	4605      	mov	r5, r0
   2f9a0:	6804      	ldr	r4, [r0, #0]
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   2f9a2:	6880      	ldr	r0, [r0, #8]
  auto sub_func = [&](int indexes[N]) {
   2f9a4:	460f      	mov	r7, r1
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   2f9a6:	f7fc fcf3 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2f9aa:	686b      	ldr	r3, [r5, #4]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2f9ac:	4639      	mov	r1, r7
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   2f9ae:	681b      	ldr	r3, [r3, #0]
   2f9b0:	f913 8000 	ldrsb.w	r8, [r3, r0]
    const int32_t input1_val =
   2f9b4:	6863      	ldr	r3, [r4, #4]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2f9b6:	6928      	ldr	r0, [r5, #16]
    const int32_t input1_val =
   2f9b8:	4498      	add	r8, r3
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2f9ba:	f7fc fce9 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2f9be:	68ea      	ldr	r2, [r5, #12]
    const int32_t shifted_input1_val = input1_val * (1 << params.left_shift);
   2f9c0:	69a3      	ldr	r3, [r4, #24]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2f9c2:	6812      	ldr	r2, [r2, #0]
   2f9c4:	5616      	ldrsb	r6, [r2, r0]
    const int32_t input2_val =
   2f9c6:	68a2      	ldr	r2, [r4, #8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f9c8:	fa08 f003 	lsl.w	r0, r8, r3
    const int32_t input2_val =
   2f9cc:	4416      	add	r6, r2
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f9ce:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
    const int32_t shifted_input2_val = input2_val * (1 << params.left_shift);
   2f9d2:	409e      	lsls	r6, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f9d4:	f7e7 f93a 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f9d8:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f9dc:	4680      	mov	r8, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f9de:	4630      	mov	r0, r6
   2f9e0:	f7e7 f934 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2f9e4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2f9e8:	eba8 0000 	sub.w	r0, r8, r0
   2f9ec:	f7e7 f92e 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   2f9f0:	68e3      	ldr	r3, [r4, #12]
    output_data[SubscriptToIndex(output_desc, indexes)] =
   2f9f2:	4639      	mov	r1, r7
            raw_sub, params.output_multiplier, params.output_shift) +
   2f9f4:	4418      	add	r0, r3
   2f9f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2f9f8:	6b24      	ldr	r4, [r4, #48]	; 0x30
   2f9fa:	4298      	cmp	r0, r3
   2f9fc:	bfb8      	it	lt
   2f9fe:	4618      	movlt	r0, r3
   2fa00:	4284      	cmp	r4, r0
   2fa02:	bfa8      	it	ge
   2fa04:	4604      	movge	r4, r0
    output_data[SubscriptToIndex(output_desc, indexes)] =
   2fa06:	69a8      	ldr	r0, [r5, #24]
   2fa08:	f7fc fcc2 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2fa0c:	696b      	ldr	r3, [r5, #20]
   2fa0e:	681b      	ldr	r3, [r3, #0]
   2fa10:	541c      	strb	r4, [r3, r0]
  auto sub_func = [&](int indexes[N]) {
   2fa12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002fa16 <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_PhENKUlPiE_clESB_>:
  auto sub_func = [&](int indexes[N]) {
   2fa16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fa1a:	4605      	mov	r5, r0
   2fa1c:	6804      	ldr	r4, [r0, #0]
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   2fa1e:	6880      	ldr	r0, [r0, #8]
  auto sub_func = [&](int indexes[N]) {
   2fa20:	460f      	mov	r7, r1
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   2fa22:	f7fc fcb5 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2fa26:	686b      	ldr	r3, [r5, #4]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2fa28:	4639      	mov	r1, r7
        params.input1_offset + input1_data[SubscriptToIndex(desc1, indexes)];
   2fa2a:	681b      	ldr	r3, [r3, #0]
   2fa2c:	f813 8000 	ldrb.w	r8, [r3, r0]
    const int32 input1_val =
   2fa30:	6863      	ldr	r3, [r4, #4]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2fa32:	6928      	ldr	r0, [r5, #16]
    const int32 input1_val =
   2fa34:	4498      	add	r8, r3
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2fa36:	f7fc fcab 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2fa3a:	68ea      	ldr	r2, [r5, #12]
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
   2fa3c:	69a3      	ldr	r3, [r4, #24]
        params.input2_offset + input2_data[SubscriptToIndex(desc2, indexes)];
   2fa3e:	6812      	ldr	r2, [r2, #0]
   2fa40:	5c16      	ldrb	r6, [r2, r0]
    const int32 input2_val =
   2fa42:	68a2      	ldr	r2, [r4, #8]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2fa44:	fa08 f003 	lsl.w	r0, r8, r3
    const int32 input2_val =
   2fa48:	4416      	add	r6, r2
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2fa4a:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
   2fa4e:	409e      	lsls	r6, r3
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2fa50:	f7e7 f8fc 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2fa54:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	; 0x24
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2fa58:	4680      	mov	r8, r0
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2fa5a:	4630      	mov	r0, r6
   2fa5c:	f7e7 f8f6 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
   2fa60:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   2fa64:	eba8 0000 	sub.w	r0, r8, r0
   2fa68:	f7e7 f8f0 	bl	16c4c <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpEiii>
            raw_sub, params.output_multiplier, params.output_shift) +
   2fa6c:	68e3      	ldr	r3, [r4, #12]
    output_data[SubscriptToIndex(output_desc, indexes)] =
   2fa6e:	4639      	mov	r1, r7
            raw_sub, params.output_multiplier, params.output_shift) +
   2fa70:	4418      	add	r0, r3
   2fa72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2fa74:	6b24      	ldr	r4, [r4, #48]	; 0x30
   2fa76:	4298      	cmp	r0, r3
   2fa78:	bfb8      	it	lt
   2fa7a:	4618      	movlt	r0, r3
   2fa7c:	4284      	cmp	r4, r0
   2fa7e:	bfa8      	it	ge
   2fa80:	4604      	movge	r4, r0
    output_data[SubscriptToIndex(output_desc, indexes)] =
   2fa82:	69a8      	ldr	r0, [r5, #24]
   2fa84:	f7fc fc84 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2fa88:	696b      	ldr	r3, [r5, #20]
   2fa8a:	681b      	ldr	r3, [r3, #0]
   2fa8c:	541c      	strb	r4, [r3, r0]
  auto sub_func = [&](int indexes[N]) {
   2fa8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002fa92 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa>:
inline void BroadcastSubSlow(const ArithmeticParams& params,
   2fa92:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fa94:	4604      	mov	r4, r0
   2fa96:	b0ad      	sub	sp, #180	; 0xb4
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2fa98:	ae18      	add	r6, sp, #96	; 0x60
   2fa9a:	af0e      	add	r7, sp, #56	; 0x38
inline void BroadcastSubSlow(const ArithmeticParams& params,
   2fa9c:	4608      	mov	r0, r1
   2fa9e:	9201      	str	r2, [sp, #4]
   2faa0:	4619      	mov	r1, r3
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2faa2:	463a      	mov	r2, r7
   2faa4:	4633      	mov	r3, r6
   2faa6:	f7fc fc9e 	bl	2c3e6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, output_shape), &output_desc);
   2faaa:	ad22      	add	r5, sp, #136	; 0x88
   2faac:	2301      	movs	r3, #1
   2faae:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   2fab0:	2105      	movs	r1, #5
   2fab2:	a807      	add	r0, sp, #28
   2fab4:	f7f7 fe51 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2fab8:	4629      	mov	r1, r5
   2faba:	a807      	add	r0, sp, #28
   2fabc:	f7fc fc7d 	bl	2c3ba <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2fac0:	a807      	add	r0, sp, #28
   2fac2:	f7f7 fdaa 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  auto sub_func = [&](int indexes[N]) {
   2fac6:	ab01      	add	r3, sp, #4
   2fac8:	e9cd 3708 	strd	r3, r7, [sp, #32]
   2facc:	ab32      	add	r3, sp, #200	; 0xc8
   2face:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
  int indexes[N] = {0};
   2fad2:	2214      	movs	r2, #20
   2fad4:	ab34      	add	r3, sp, #208	; 0xd0
   2fad6:	2100      	movs	r1, #0
   2fad8:	a802      	add	r0, sp, #8
   2fada:	9407      	str	r4, [sp, #28]
   2fadc:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fae0:	2400      	movs	r4, #0
  int indexes[N] = {0};
   2fae2:	f001 f9e8 	bl	30eb6 <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fae6:	9a02      	ldr	r2, [sp, #8]
   2fae8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2faea:	429a      	cmp	r2, r3
   2faec:	da2b      	bge.n	2fb46 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0xb4>
   2faee:	9403      	str	r4, [sp, #12]
   2faf0:	9a03      	ldr	r2, [sp, #12]
   2faf2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2faf4:	429a      	cmp	r2, r3
   2faf6:	da22      	bge.n	2fb3e <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0xac>
   2faf8:	9404      	str	r4, [sp, #16]
   2fafa:	9a04      	ldr	r2, [sp, #16]
   2fafc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2fafe:	429a      	cmp	r2, r3
   2fb00:	da19      	bge.n	2fb36 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0xa4>
   2fb02:	9405      	str	r4, [sp, #20]
   2fb04:	9a05      	ldr	r2, [sp, #20]
   2fb06:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2fb08:	429a      	cmp	r2, r3
   2fb0a:	da10      	bge.n	2fb2e <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x9c>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fb0c:	9406      	str	r4, [sp, #24]
   2fb0e:	9a06      	ldr	r2, [sp, #24]
   2fb10:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2fb12:	429a      	cmp	r2, r3
   2fb14:	da07      	bge.n	2fb26 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x94>
    calc(indexes);
   2fb16:	a902      	add	r1, sp, #8
   2fb18:	a807      	add	r0, sp, #28
   2fb1a:	f7ff ff3e 	bl	2f99a <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_PaENKUlPiE_clESB_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fb1e:	9b06      	ldr	r3, [sp, #24]
   2fb20:	3301      	adds	r3, #1
   2fb22:	9306      	str	r3, [sp, #24]
   2fb24:	e7f3      	b.n	2fb0e <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x7c>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fb26:	9b05      	ldr	r3, [sp, #20]
   2fb28:	3301      	adds	r3, #1
   2fb2a:	9305      	str	r3, [sp, #20]
   2fb2c:	e7ea      	b.n	2fb04 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x72>
   2fb2e:	9b04      	ldr	r3, [sp, #16]
   2fb30:	3301      	adds	r3, #1
   2fb32:	9304      	str	r3, [sp, #16]
   2fb34:	e7e1      	b.n	2fafa <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x68>
   2fb36:	9b03      	ldr	r3, [sp, #12]
   2fb38:	3301      	adds	r3, #1
   2fb3a:	9303      	str	r3, [sp, #12]
   2fb3c:	e7d8      	b.n	2faf0 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x5e>
   2fb3e:	9b02      	ldr	r3, [sp, #8]
   2fb40:	3301      	adds	r3, #1
   2fb42:	9302      	str	r3, [sp, #8]
   2fb44:	e7cf      	b.n	2fae6 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa+0x54>
}
   2fb46:	b02d      	add	sp, #180	; 0xb4
   2fb48:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002fb4a <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph>:
inline void BroadcastSubSlow(const ArithmeticParams& params,
   2fb4a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fb4c:	4604      	mov	r4, r0
   2fb4e:	4608      	mov	r0, r1
   2fb50:	4619      	mov	r1, r3
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
   2fb52:	6803      	ldr	r3, [r0, #0]
inline void BroadcastSubSlow(const ArithmeticParams& params,
   2fb54:	b0ad      	sub	sp, #180	; 0xb4
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
   2fb56:	2b05      	cmp	r3, #5
inline void BroadcastSubSlow(const ArithmeticParams& params,
   2fb58:	9d33      	ldr	r5, [sp, #204]	; 0xcc
   2fb5a:	9201      	str	r2, [sp, #4]
  TFLITE_DCHECK_LE(input1_shape.DimensionsCount(), N);
   2fb5c:	dd01      	ble.n	2fb62 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x18>
   2fb5e:	f001 f960 	bl	30e22 <abort>
  TFLITE_DCHECK_LE(input2_shape.DimensionsCount(), N);
   2fb62:	680b      	ldr	r3, [r1, #0]
   2fb64:	2b05      	cmp	r3, #5
   2fb66:	dcfa      	bgt.n	2fb5e <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x14>
  TFLITE_DCHECK_LE(output_shape.DimensionsCount(), N);
   2fb68:	682b      	ldr	r3, [r5, #0]
   2fb6a:	2b05      	cmp	r3, #5
   2fb6c:	dcf7      	bgt.n	2fb5e <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x14>
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
   2fb6e:	ae18      	add	r6, sp, #96	; 0x60
   2fb70:	af0e      	add	r7, sp, #56	; 0x38
   2fb72:	4633      	mov	r3, r6
   2fb74:	463a      	mov	r2, r7
   2fb76:	f7fc fc36 	bl	2c3e6 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi5EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
   2fb7a:	462a      	mov	r2, r5
   2fb7c:	2301      	movs	r3, #1
   2fb7e:	2105      	movs	r1, #5
  CopyDimsToDesc(RuntimeShape::ExtendedShape(N, output_shape), &output_desc);
   2fb80:	ad22      	add	r5, sp, #136	; 0x88
   2fb82:	a807      	add	r0, sp, #28
   2fb84:	f7f7 fde9 	bl	2775a <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
   2fb88:	4629      	mov	r1, r5
   2fb8a:	a807      	add	r0, sp, #28
   2fb8c:	f7fc fc15 	bl	2c3ba <_ZN6tflite14CopyDimsToDescILi5EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
   2fb90:	a807      	add	r0, sp, #28
   2fb92:	f7f7 fd42 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
  auto sub_func = [&](int indexes[N]) {
   2fb96:	ab01      	add	r3, sp, #4
   2fb98:	e9cd 3708 	strd	r3, r7, [sp, #32]
   2fb9c:	ab32      	add	r3, sp, #200	; 0xc8
   2fb9e:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
  int indexes[N] = {0};
   2fba2:	2214      	movs	r2, #20
   2fba4:	ab34      	add	r3, sp, #208	; 0xd0
   2fba6:	2100      	movs	r1, #0
   2fba8:	a802      	add	r0, sp, #8
   2fbaa:	9407      	str	r4, [sp, #28]
   2fbac:	e9cd 350c 	strd	r3, r5, [sp, #48]	; 0x30
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fbb0:	2400      	movs	r4, #0
  int indexes[N] = {0};
   2fbb2:	f001 f980 	bl	30eb6 <memset>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fbb6:	9a02      	ldr	r2, [sp, #8]
   2fbb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2fbba:	429a      	cmp	r2, r3
   2fbbc:	da2b      	bge.n	2fc16 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xcc>
   2fbbe:	9403      	str	r4, [sp, #12]
   2fbc0:	9a03      	ldr	r2, [sp, #12]
   2fbc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2fbc4:	429a      	cmp	r2, r3
   2fbc6:	da22      	bge.n	2fc0e <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xc4>
   2fbc8:	9404      	str	r4, [sp, #16]
   2fbca:	9a04      	ldr	r2, [sp, #16]
   2fbcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2fbce:	429a      	cmp	r2, r3
   2fbd0:	da19      	bge.n	2fc06 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xbc>
   2fbd2:	9405      	str	r4, [sp, #20]
   2fbd4:	9a05      	ldr	r2, [sp, #20]
   2fbd6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2fbd8:	429a      	cmp	r2, r3
   2fbda:	da10      	bge.n	2fbfe <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xb4>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fbdc:	9406      	str	r4, [sp, #24]
   2fbde:	9a06      	ldr	r2, [sp, #24]
   2fbe0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2fbe2:	429a      	cmp	r2, r3
   2fbe4:	da07      	bge.n	2fbf6 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0xac>
    calc(indexes);
   2fbe6:	a902      	add	r1, sp, #8
   2fbe8:	a807      	add	r0, sp, #28
   2fbea:	f7ff ff14 	bl	2fa16 <_ZZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_PhENKUlPiE_clESB_>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fbee:	9b06      	ldr	r3, [sp, #24]
   2fbf0:	3301      	adds	r3, #1
   2fbf2:	9306      	str	r3, [sp, #24]
   2fbf4:	e7f3      	b.n	2fbde <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x94>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fbf6:	9b05      	ldr	r3, [sp, #20]
   2fbf8:	3301      	adds	r3, #1
   2fbfa:	9305      	str	r3, [sp, #20]
   2fbfc:	e7ea      	b.n	2fbd4 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x8a>
   2fbfe:	9b04      	ldr	r3, [sp, #16]
   2fc00:	3301      	adds	r3, #1
   2fc02:	9304      	str	r3, [sp, #16]
   2fc04:	e7e1      	b.n	2fbca <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x80>
   2fc06:	9b03      	ldr	r3, [sp, #12]
   2fc08:	3301      	adds	r3, #1
   2fc0a:	9303      	str	r3, [sp, #12]
   2fc0c:	e7d8      	b.n	2fbc0 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x76>
   2fc0e:	9b02      	ldr	r3, [sp, #8]
   2fc10:	3301      	adds	r3, #1
   2fc12:	9302      	str	r3, [sp, #8]
   2fc14:	e7cf      	b.n	2fbb6 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph+0x6c>
}
   2fc16:	b02d      	add	sp, #180	; 0xb4
   2fc18:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002fc1a <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>:
TfLiteStatus EvalSubQuantized(TfLiteContext* context, TfLiteNode* node,
   2fc1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fc1c:	4614      	mov	r4, r2
   2fc1e:	461e      	mov	r6, r3
    op_params.left_shift = data->left_shift;
   2fc20:	6a43      	ldr	r3, [r0, #36]	; 0x24
TfLiteStatus EvalSubQuantized(TfLiteContext* context, TfLiteNode* node,
   2fc22:	b0b1      	sub	sp, #196	; 0xc4
    op_params.left_shift = data->left_shift;
   2fc24:	931c      	str	r3, [sp, #112]	; 0x70
    op_params.input1_offset = data->input1_offset;
   2fc26:	6a83      	ldr	r3, [r0, #40]	; 0x28
TfLiteStatus EvalSubQuantized(TfLiteContext* context, TfLiteNode* node,
   2fc28:	460d      	mov	r5, r1
    op_params.input1_offset = data->input1_offset;
   2fc2a:	9317      	str	r3, [sp, #92]	; 0x5c
    op_params.input1_multiplier = data->input1_multiplier;
   2fc2c:	6943      	ldr	r3, [r0, #20]
   2fc2e:	931d      	str	r3, [sp, #116]	; 0x74
    op_params.input1_shift = data->input1_shift;
   2fc30:	6843      	ldr	r3, [r0, #4]
   2fc32:	931e      	str	r3, [sp, #120]	; 0x78
    op_params.input2_offset = data->input2_offset;
   2fc34:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2fc36:	9318      	str	r3, [sp, #96]	; 0x60
    op_params.input2_multiplier = data->input2_multiplier;
   2fc38:	6983      	ldr	r3, [r0, #24]
   2fc3a:	931f      	str	r3, [sp, #124]	; 0x7c
    op_params.input2_shift = data->input2_shift;
   2fc3c:	6883      	ldr	r3, [r0, #8]
   2fc3e:	9320      	str	r3, [sp, #128]	; 0x80
    op_params.output_offset = data->output_offset;
   2fc40:	6b03      	ldr	r3, [r0, #48]	; 0x30
   2fc42:	9319      	str	r3, [sp, #100]	; 0x64
    op_params.output_multiplier = data->output_multiplier;
   2fc44:	69c3      	ldr	r3, [r0, #28]
   2fc46:	931a      	str	r3, [sp, #104]	; 0x68
    op_params.output_shift = data->output_shift;
   2fc48:	6a03      	ldr	r3, [r0, #32]
   2fc4a:	931b      	str	r3, [sp, #108]	; 0x6c
  params->quantized_activation_min = min;
   2fc4c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   2fc50:	a810      	add	r0, sp, #64	; 0x40
  params->quantized_activation_max = max;
   2fc52:	e9cd 2321 	strd	r2, r3, [sp, #132]	; 0x84
   2fc56:	f7f7 fd25 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fc5a:	4621      	mov	r1, r4
   2fc5c:	a80a      	add	r0, sp, #40	; 0x28
   2fc5e:	f7f7 fd21 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
   2fc62:	a90a      	add	r1, sp, #40	; 0x28
   2fc64:	aa16      	add	r2, sp, #88	; 0x58
   2fc66:	a810      	add	r0, sp, #64	; 0x40
   2fc68:	f7f7 fe93 	bl	27992 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
   2fc6c:	4607      	mov	r7, r0
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
   2fc6e:	a80a      	add	r0, sp, #40	; 0x28
   2fc70:	f7f7 fcd3 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   2fc74:	a810      	add	r0, sp, #64	; 0x40
   2fc76:	f7f7 fcd0 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
    if (output->type == kTfLiteInt8) {
   2fc7a:	7833      	ldrb	r3, [r6, #0]
        TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow, int8_t);
   2fc7c:	4629      	mov	r1, r5
    if (output->type == kTfLiteInt8) {
   2fc7e:	2b09      	cmp	r3, #9
        TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow, int8_t);
   2fc80:	a810      	add	r0, sp, #64	; 0x40
    if (output->type == kTfLiteInt8) {
   2fc82:	d13e      	bne.n	2fd02 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xe8>
      if (need_broadcast) {
   2fc84:	b31f      	cbz	r7, 2fcce <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xb4>
        TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow, int8_t);
   2fc86:	f7f7 fd0d 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fc8a:	b105      	cbz	r5, 2fc8e <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x74>
   2fc8c:	686d      	ldr	r5, [r5, #4]
   2fc8e:	4621      	mov	r1, r4
   2fc90:	a80a      	add	r0, sp, #40	; 0x28
   2fc92:	f7f7 fd07 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fc96:	b104      	cbz	r4, 2fc9a <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x80>
   2fc98:	6864      	ldr	r4, [r4, #4]
   2fc9a:	4631      	mov	r1, r6
   2fc9c:	a804      	add	r0, sp, #16
   2fc9e:	f7f7 fd01 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fca2:	6873      	ldr	r3, [r6, #4]
   2fca4:	462a      	mov	r2, r5
   2fca6:	9302      	str	r3, [sp, #8]
   2fca8:	ab04      	add	r3, sp, #16
   2fcaa:	e9cd 4300 	strd	r4, r3, [sp]
   2fcae:	a910      	add	r1, sp, #64	; 0x40
   2fcb0:	ab0a      	add	r3, sp, #40	; 0x28
   2fcb2:	a816      	add	r0, sp, #88	; 0x58
   2fcb4:	f7ff feed 	bl	2fa92 <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS7_S9_S7_Pa>
        TF_LITE_SUB(tflite::reference_ops::Sub, uint8_t);
   2fcb8:	a804      	add	r0, sp, #16
   2fcba:	f7f7 fcae 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   2fcbe:	a80a      	add	r0, sp, #40	; 0x28
   2fcc0:	f7f7 fcab 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
   2fcc4:	a810      	add	r0, sp, #64	; 0x40
   2fcc6:	f7f7 fca8 	bl	2761a <_ZN6tflite12RuntimeShapeD1Ev>
}
   2fcca:	b031      	add	sp, #196	; 0xc4
   2fccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TF_LITE_SUB(tflite::reference_ops::Sub, int8_t);
   2fcce:	f7f7 fce9 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fcd2:	b105      	cbz	r5, 2fcd6 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xbc>
   2fcd4:	686d      	ldr	r5, [r5, #4]
   2fcd6:	4621      	mov	r1, r4
   2fcd8:	a80a      	add	r0, sp, #40	; 0x28
   2fcda:	f7f7 fce3 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fcde:	b104      	cbz	r4, 2fce2 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xc8>
   2fce0:	6864      	ldr	r4, [r4, #4]
   2fce2:	4631      	mov	r1, r6
   2fce4:	a804      	add	r0, sp, #16
   2fce6:	f7f7 fcdd 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fcea:	6873      	ldr	r3, [r6, #4]
   2fcec:	462a      	mov	r2, r5
   2fcee:	9302      	str	r3, [sp, #8]
   2fcf0:	ab04      	add	r3, sp, #16
   2fcf2:	e9cd 4300 	strd	r4, r3, [sp]
   2fcf6:	a910      	add	r1, sp, #64	; 0x40
   2fcf8:	ab0a      	add	r3, sp, #40	; 0x28
   2fcfa:	a816      	add	r0, sp, #88	; 0x58
   2fcfc:	f7ff fe02 	bl	2f904 <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
   2fd00:	e7da      	b.n	2fcb8 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
      if (need_broadcast) {
   2fd02:	b1cf      	cbz	r7, 2fd38 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x11e>
        TF_LITE_SUB(tflite::reference_ops::BroadcastSubSlow, uint8_t);
   2fd04:	f7f7 fcce 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fd08:	b105      	cbz	r5, 2fd0c <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xf2>
   2fd0a:	686d      	ldr	r5, [r5, #4]
   2fd0c:	4621      	mov	r1, r4
   2fd0e:	a80a      	add	r0, sp, #40	; 0x28
   2fd10:	f7f7 fcc8 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fd14:	b104      	cbz	r4, 2fd18 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0xfe>
   2fd16:	6864      	ldr	r4, [r4, #4]
   2fd18:	4631      	mov	r1, r6
   2fd1a:	a804      	add	r0, sp, #16
   2fd1c:	f7f7 fcc2 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fd20:	6873      	ldr	r3, [r6, #4]
   2fd22:	462a      	mov	r2, r5
   2fd24:	9302      	str	r3, [sp, #8]
   2fd26:	ab04      	add	r3, sp, #16
   2fd28:	e9cd 4300 	strd	r4, r3, [sp]
   2fd2c:	a910      	add	r1, sp, #64	; 0x40
   2fd2e:	ab0a      	add	r3, sp, #40	; 0x28
   2fd30:	a816      	add	r0, sp, #88	; 0x58
   2fd32:	f7ff ff0a 	bl	2fb4a <_ZN6tflite13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS7_S9_S7_Ph>
   2fd36:	e7bf      	b.n	2fcb8 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>
        TF_LITE_SUB(tflite::reference_ops::Sub, uint8_t);
   2fd38:	f7f7 fcb4 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fd3c:	b105      	cbz	r5, 2fd40 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x126>
   2fd3e:	686d      	ldr	r5, [r5, #4]
   2fd40:	4621      	mov	r1, r4
   2fd42:	a80a      	add	r0, sp, #40	; 0x28
   2fd44:	f7f7 fcae 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fd48:	b104      	cbz	r4, 2fd4c <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x132>
   2fd4a:	6864      	ldr	r4, [r4, #4]
   2fd4c:	4631      	mov	r1, r6
   2fd4e:	a804      	add	r0, sp, #16
   2fd50:	f7f7 fca8 	bl	276a4 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
   2fd54:	6873      	ldr	r3, [r6, #4]
   2fd56:	462a      	mov	r2, r5
   2fd58:	9302      	str	r3, [sp, #8]
   2fd5a:	ab04      	add	r3, sp, #16
   2fd5c:	e9cd 4300 	strd	r4, r3, [sp]
   2fd60:	a910      	add	r1, sp, #64	; 0x40
   2fd62:	ab0a      	add	r3, sp, #40	; 0x28
   2fd64:	a816      	add	r0, sp, #88	; 0x58
   2fd66:	f7ff fd81 	bl	2f86c <_ZN6tflite13reference_ops3SubERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
   2fd6a:	e7a5      	b.n	2fcb8 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0+0x9e>

0002fd6c <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:
                              TfLiteTensor* output) {
   2fd6c:	b508      	push	{r3, lr}
   2fd6e:	4618      	mov	r0, r3
   2fd70:	9b04      	ldr	r3, [sp, #16]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
   2fd72:	781a      	ldrb	r2, [r3, #0]
   2fd74:	2a03      	cmp	r2, #3
   2fd76:	d001      	beq.n	2fd7c <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x10>
   2fd78:	2a09      	cmp	r2, #9
   2fd7a:	d103      	bne.n	2fd84 <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x18>
   2fd7c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   2fd80:	f7ff ff4b 	bl	2fc1a <_ZN6tflite3ops5micro3sub16EvalSubQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteSubParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_.part.0>
}
   2fd84:	2000      	movs	r0, #0
   2fd86:	bd08      	pop	{r3, pc}

0002fd88 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_>:
   2fd88:	2300      	movs	r3, #0
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2fd8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2fd8e:	4607      	mov	r7, r0
   2fd90:	460d      	mov	r5, r1
   2fd92:	4614      	mov	r4, r2
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fd94:	4698      	mov	r8, r3
typename std::enable_if<DIM != N - 1, void>::type NDOpsHelperImpl(
   2fd96:	ed2d 8b04 	vpush	{d8-d9}
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fd9a:	60d3      	str	r3, [r2, #12]
   2fd9c:	68e6      	ldr	r6, [r4, #12]
   2fd9e:	68fb      	ldr	r3, [r7, #12]
   2fda0:	429e      	cmp	r6, r3
   2fda2:	da41      	bge.n	2fe28 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0xa0>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fda4:	f8c4 8010 	str.w	r8, [r4, #16]
   2fda8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   2fdac:	693b      	ldr	r3, [r7, #16]
   2fdae:	4599      	cmp	r9, r3
   2fdb0:	da37      	bge.n	2fe22 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0x9a>
            input1_data[SubscriptToIndex(desc1, indexes)] -
   2fdb2:	68e8      	ldr	r0, [r5, #12]
   2fdb4:	4621      	mov	r1, r4
   2fdb6:	f7fc faeb 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
                input2_data[SubscriptToIndex(desc2, indexes)],
   2fdba:	4621      	mov	r1, r4
            input1_data[SubscriptToIndex(desc1, indexes)] -
   2fdbc:	4682      	mov	sl, r0
                input2_data[SubscriptToIndex(desc2, indexes)],
   2fdbe:	6968      	ldr	r0, [r5, #20]
   2fdc0:	f7fc fae6 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
   2fdc4:	6929      	ldr	r1, [r5, #16]
            input1_data[SubscriptToIndex(desc1, indexes)] -
   2fdc6:	68aa      	ldr	r2, [r5, #8]
                input2_data[SubscriptToIndex(desc2, indexes)],
   2fdc8:	680b      	ldr	r3, [r1, #0]
            input1_data[SubscriptToIndex(desc1, indexes)] -
   2fdca:	6812      	ldr	r2, [r2, #0]
                input2_data[SubscriptToIndex(desc2, indexes)],
   2fdcc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
            input1_data[SubscriptToIndex(desc1, indexes)] -
   2fdd0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
        ActivationFunctionWithMinMax(
   2fdd4:	edd3 7a00 	vldr	s15, [r3]
   2fdd8:	edd2 8a00 	vldr	s17, [r2]
  auto sub_func = [&](int indexes[N]) {
   2fddc:	69ab      	ldr	r3, [r5, #24]
        ActivationFunctionWithMinMax(
   2fdde:	ee78 8ae7 	vsub.f32	s17, s17, s15
            params.float_activation_min, params.float_activation_max);
   2fde2:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
    output_data[SubscriptToIndex(output_desc, indexes)] =
   2fde6:	6868      	ldr	r0, [r5, #4]
   2fde8:	4621      	mov	r1, r4
            params.float_activation_min, params.float_activation_max);
   2fdea:	ed93 9a0e 	vldr	s18, [r3, #56]	; 0x38
    output_data[SubscriptToIndex(output_desc, indexes)] =
   2fdee:	f7fc facf 	bl	2c390 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi5EEEPi>
      return __a;
   2fdf2:	eef4 8ac8 	vcmpe.f32	s17, s16
   2fdf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2fdfa:	bf58      	it	pl
   2fdfc:	eeb0 8a68 	vmovpl.f32	s16, s17
	return __b;
   2fe00:	eeb4 9a48 	vcmp.f32	s18, s16
   2fe04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2fe08:	bf48      	it	mi
   2fe0a:	eeb0 8a49 	vmovmi.f32	s16, s18
   2fe0e:	682b      	ldr	r3, [r5, #0]
   2fe10:	681b      	ldr	r3, [r3, #0]
   2fe12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2fe16:	f109 0301 	add.w	r3, r9, #1
   2fe1a:	ed80 8a00 	vstr	s16, [r0]
   2fe1e:	6123      	str	r3, [r4, #16]
   2fe20:	e7c2      	b.n	2fda8 <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0x20>
  for (indexes[DIM] = 0; indexes[DIM] < output.extents[DIM]; ++indexes[DIM]) {
   2fe22:	3601      	adds	r6, #1
   2fe24:	60e6      	str	r6, [r4, #12]
   2fe26:	e7b9      	b.n	2fd9c <_ZN6tflite15NDOpsHelperImplILi5ELi3EZNS_13reference_ops16BroadcastSubSlowILi5EEEvRKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS8_SA_S8_PfEUlPiE_EENSt9enable_ifIXneT0_miT_Li1EEvE4typeERKNS_11NdArrayDescIXT_EEERKT1_SC_+0x14>
}
   2fe28:	ecbd 8b04 	vpop	{d8-d9}
   2fe2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002fe30 <_ZN6tflite3ops5micro4svdf4InitEP13TfLiteContextPKcj>:
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2fe30:	6b83      	ldr	r3, [r0, #56]	; 0x38
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
   2fe32:	b513      	push	{r0, r1, r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
   2fe34:	b90b      	cbnz	r3, 2fe3a <_ZN6tflite3ops5micro4svdf4InitEP13TfLiteContextPKcj+0xa>
   2fe36:	f000 fff4 	bl	30e22 <abort>
  void* data = nullptr;
   2fe3a:	2400      	movs	r4, #0
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2fe3c:	2118      	movs	r1, #24
  void* data = nullptr;
   2fe3e:	9401      	str	r4, [sp, #4]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
   2fe40:	aa01      	add	r2, sp, #4
   2fe42:	4798      	blx	r3
   2fe44:	2801      	cmp	r0, #1
    return nullptr;
   2fe46:	bf0c      	ite	eq
   2fe48:	4620      	moveq	r0, r4
  return data;
   2fe4a:	9801      	ldrne	r0, [sp, #4]
}
   2fe4c:	b002      	add	sp, #8
   2fe4e:	bd10      	pop	{r4, pc}

0002fe50 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi>:
  return a ? BitNot(zero) : zero;
   2fe50:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
  static IntegerType eval(IntegerType x) {
   2fe54:	b5d0      	push	{r4, r6, r7, lr}
  return a ? BitNot(zero) : zero;
   2fe56:	da25      	bge.n	2fea4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x54>
   2fe58:	f1b0 4f60 	cmp.w	r0, #3758096384	; 0xe0000000
   2fe5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2fe60:	f04f 0400 	mov.w	r4, #0
   2fe64:	bfc8      	it	gt
   2fe66:	2100      	movgt	r1, #0
  const std::int64_t wide_shifted = wide_a * (1 << offset);
   2fe68:	17c7      	asrs	r7, r0, #31
   2fe6a:	0082      	lsls	r2, r0, #2
   2fe6c:	00bb      	lsls	r3, r7, #2
   2fe6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
             ? min
   2fe72:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   2fe76:	f173 30ff 	sbcs.w	r0, r3, #4294967295	; 0xffffffff
   2fe7a:	db17      	blt.n	2feac <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x5c>
             : wide_shifted > max ? max
   2fe7c:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
   2fe80:	2700      	movs	r7, #0
   2fe82:	4296      	cmp	r6, r2
   2fe84:	eb77 0003 	sbcs.w	r0, r7, r3
   2fe88:	bfb8      	it	lt
   2fe8a:	f06f 4200 	mvnlt.w	r2, #2147483648	; 0x80000000
  return ~a;
   2fe8e:	43e3      	mvns	r3, r4
   2fe90:	43c8      	mvns	r0, r1
  return a & b;
   2fe92:	401a      	ands	r2, r3
   2fe94:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
  return a ^ b;
   2fe98:	4062      	eors	r2, r4
  return a & b;
   2fe9a:	4002      	ands	r2, r0
   2fe9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
  }
   2fea0:	4050      	eors	r0, r2
   2fea2:	bdd0      	pop	{r4, r6, r7, pc}
  return a ? BitNot(zero) : zero;
   2fea4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2fea8:	2100      	movs	r1, #0
   2feaa:	e7dd      	b.n	2fe68 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x18>
             ? min
   2feac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   2feb0:	e7ed      	b.n	2fe8e <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2EiLi1EE4evalEi+0x3e>

0002feb2 <_ZN8gemmlowp4tanhIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
  return a ? BitNot(zero) : zero;
   2feb2:	2800      	cmp	r0, #0
FixedPoint<tRawType, 0> tanh(FixedPoint<tRawType, tIntegerBits> a) {
   2feb4:	b570      	push	{r4, r5, r6, lr}
  return a ? BitNot(zero) : zero;
   2feb6:	db14      	blt.n	2fee2 <_ZN8gemmlowp4tanhIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x30>
   2feb8:	bf0c      	ite	eq
   2feba:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
   2febe:	2400      	movne	r4, #0
   2fec0:	2600      	movs	r6, #0
  return ~a;
   2fec2:	43f5      	mvns	r5, r6
  return -a;
   2fec4:	4243      	negs	r3, r0
  return a & b;
   2fec6:	402b      	ands	r3, r5
   2fec8:	4030      	ands	r0, r6
  return one_minus_x_over_one_plus_x_for_x_in_0_1(
   2feca:	4058      	eors	r0, r3
   2fecc:	f7ee f9d0 	bl	1e270 <_ZN8gemmlowp22exp_on_negative_valuesIiLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   2fed0:	f7ef fd5c 	bl	1f98c <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IiEENS_10FixedPointIT_Li0EEES3_>
  return -a;
   2fed4:	4242      	negs	r2, r0
  return a & b;
   2fed6:	4032      	ands	r2, r6
   2fed8:	4028      	ands	r0, r5
  return a ^ b;
   2feda:	4042      	eors	r2, r0
  return ~a;
   2fedc:	43e0      	mvns	r0, r4
}
   2fede:	4010      	ands	r0, r2
   2fee0:	bd70      	pop	{r4, r5, r6, pc}
  return a ? BitNot(zero) : zero;
   2fee2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2fee6:	2400      	movs	r4, #0
   2fee8:	e7eb      	b.n	2fec2 <_ZN8gemmlowp4tanhIiLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x10>

0002feea <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIsLi0EEEEENT_13ScalarRawTypeEi>:
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   2feea:	2110      	movs	r1, #16
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
   2feec:	b508      	push	{r3, lr}
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
   2feee:	f7eb f9dd 	bl	1b2ac <_ZN8gemmlowp19RoundingDivideByPOTIiEET_S1_i>
}
   2fef2:	b200      	sxth	r0, r0
   2fef4:	bd08      	pop	{r3, pc}

0002fef6 <_ZN8gemmlowpmlIsLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
   2fef6:	b508      	push	{r3, lr}
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
   2fef8:	b209      	sxth	r1, r1
   2fefa:	b200      	sxth	r0, r0
   2fefc:	f7eb f83c 	bl	1af78 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIsEET_S1_S1_>
}
   2ff00:	bd08      	pop	{r3, pc}

0002ff02 <_ZN8gemmlowp4tanhIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> tanh(FixedPoint<tRawType, tIntegerBits> a) {
   2ff02:	b203      	sxth	r3, r0
  return a ? BitNot(zero) : zero;
   2ff04:	2b00      	cmp	r3, #0
FixedPoint<tRawType, 0> tanh(FixedPoint<tRawType, tIntegerBits> a) {
   2ff06:	b570      	push	{r4, r5, r6, lr}
  return a ? BitNot(zero) : zero;
   2ff08:	db16      	blt.n	2ff38 <_ZN8gemmlowp4tanhIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x36>
   2ff0a:	bf0c      	ite	eq
   2ff0c:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
   2ff10:	2500      	movne	r5, #0
   2ff12:	2400      	movs	r4, #0
  return ~a;
   2ff14:	43e2      	mvns	r2, r4
  return -a;
   2ff16:	4240      	negs	r0, r0
  return a & b;
   2ff18:	4023      	ands	r3, r4
   2ff1a:	4010      	ands	r0, r2
  return one_minus_x_over_one_plus_x_for_x_in_0_1(
   2ff1c:	4058      	eors	r0, r3
  return ~a;
   2ff1e:	b216      	sxth	r6, r2
  return one_minus_x_over_one_plus_x_for_x_in_0_1(
   2ff20:	f7ef fdc0 	bl	1faa4 <_ZN8gemmlowp22exp_on_negative_valuesIsLi4EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
   2ff24:	f7ef fe7e 	bl	1fc24 <_ZN8gemmlowp40one_minus_x_over_one_plus_x_for_x_in_0_1IsEENS_10FixedPointIT_Li0EEES3_>
   2ff28:	b203      	sxth	r3, r0
  return -a;
   2ff2a:	4240      	negs	r0, r0
  return a & b;
   2ff2c:	4004      	ands	r4, r0
  return ~a;
   2ff2e:	43e8      	mvns	r0, r5
  return a & b;
   2ff30:	401e      	ands	r6, r3
  return a ^ b;
   2ff32:	4074      	eors	r4, r6
}
   2ff34:	4020      	ands	r0, r4
   2ff36:	bd70      	pop	{r4, r5, r6, pc}
  return a ? BitNot(zero) : zero;
   2ff38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2ff3c:	2500      	movs	r5, #0
   2ff3e:	e7e9      	b.n	2ff14 <_ZN8gemmlowp4tanhIsLi3EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x12>

0002ff40 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
   2ff40:	b40e      	push	{r1, r2, r3}
   2ff42:	b503      	push	{r0, r1, lr}
   2ff44:	aa03      	add	r2, sp, #12
   2ff46:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
   2ff4a:	6803      	ldr	r3, [r0, #0]
  va_start(args, format);
   2ff4c:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   2ff4e:	689b      	ldr	r3, [r3, #8]
   2ff50:	4798      	blx	r3
  va_end(args);
  return code;
}
   2ff52:	b002      	add	sp, #8
   2ff54:	f85d eb04 	ldr.w	lr, [sp], #4
   2ff58:	b003      	add	sp, #12
   2ff5a:	4770      	bx	lr

0002ff5c <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
   2ff5c:	b40c      	push	{r2, r3}
   2ff5e:	b507      	push	{r0, r1, r2, lr}
   2ff60:	aa04      	add	r2, sp, #16
   2ff62:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
   2ff66:	6803      	ldr	r3, [r0, #0]
  va_start(args, format);
   2ff68:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
   2ff6a:	689b      	ldr	r3, [r3, #8]
   2ff6c:	4798      	blx	r3
  va_end(args);
  return code;
}
   2ff6e:	b003      	add	sp, #12
   2ff70:	f85d eb04 	ldr.w	lr, [sp], #4
   2ff74:	b002      	add	sp, #8
   2ff76:	4770      	bx	lr

0002ff78 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE>:
  switch (padding) {
   2ff78:	b120      	cbz	r0, 2ff84 <_ZN6tflite12_GLOBAL__N_114ConvertPaddingENS_7PaddingE+0xc>
   2ff7a:	2801      	cmp	r0, #1
   2ff7c:	bf14      	ite	ne
   2ff7e:	2000      	movne	r0, #0
   2ff80:	2002      	moveq	r0, #2
   2ff82:	4770      	bx	lr
      return kTfLitePaddingSame;
   2ff84:	2001      	movs	r0, #1
}
   2ff86:	4770      	bx	lr

0002ff88 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                             void** builtin_data) {
   2ff88:	b508      	push	{r3, lr}
  TFLITE_DCHECK(op != nullptr);
   2ff8a:	b908      	cbnz	r0, 2ff90 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8>
   2ff8c:	f000 ff49 	bl	30e22 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
   2ff90:	2900      	cmp	r1, #0
   2ff92:	d0fb      	beq.n	2ff8c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(allocator != nullptr);
   2ff94:	2a00      	cmp	r2, #0
   2ff96:	d0f9      	beq.n	2ff8c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
  TFLITE_DCHECK(builtin_data != nullptr);
   2ff98:	2b00      	cmp	r3, #0
   2ff9a:	d0f7      	beq.n	2ff8c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x4>
}
   2ff9c:	bd08      	pop	{r3, pc}

0002ff9e <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv.isra.0>:
    void operator()(void* data) { allocator_->Deallocate(data); }
   2ff9e:	6803      	ldr	r3, [r0, #0]
   2ffa0:	685b      	ldr	r3, [r3, #4]
   2ffa2:	4718      	bx	r3

0002ffa4 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
   2ffa4:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   2ffa6:	210c      	movs	r1, #12
   2ffa8:	4604      	mov	r4, r0
   2ffaa:	f7f7 fa96 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   2ffae:	b110      	cbz	r0, 2ffb6 <_ZNK6tflite8Operator15builtin_optionsEv+0x12>
    auto p = data_ + field_offset;
   2ffb0:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   2ffb2:	5820      	ldr	r0, [r4, r0]
   2ffb4:	4418      	add	r0, r3
  }
   2ffb6:	bd10      	pop	{r4, pc}

0002ffb8 <_ZN6tflite8ParseAbsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}
   2ffb8:	2000      	movs	r0, #0
   2ffba:	4770      	bx	lr

0002ffbc <_ZN6tflite9ParseCeilEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffbc:	2000      	movs	r0, #0
   2ffbe:	4770      	bx	lr

0002ffc0 <_ZN6tflite8ParseCosEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffc0:	2000      	movs	r0, #0
   2ffc2:	4770      	bx	lr

0002ffc4 <_ZN6tflite15ParseDequantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffc4:	2000      	movs	r0, #0
   2ffc6:	4770      	bx	lr

0002ffc8 <_ZN6tflite10ParseEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffc8:	2000      	movs	r0, #0
   2ffca:	4770      	bx	lr

0002ffcc <_ZN6tflite10ParseFloorEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffcc:	2000      	movs	r0, #0
   2ffce:	4770      	bx	lr

0002ffd0 <_ZN6tflite12ParseGreaterEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffd0:	2000      	movs	r0, #0
   2ffd2:	4770      	bx	lr

0002ffd4 <_ZN6tflite17ParseGreaterEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffd4:	2000      	movs	r0, #0
   2ffd6:	4770      	bx	lr

0002ffd8 <_ZN6tflite14ParseHardSwishEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffd8:	2000      	movs	r0, #0
   2ffda:	4770      	bx	lr

0002ffdc <_ZN6tflite9ParseLessEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffdc:	2000      	movs	r0, #0
   2ffde:	4770      	bx	lr

0002ffe0 <_ZN6tflite14ParseLessEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffe0:	2000      	movs	r0, #0
   2ffe2:	4770      	bx	lr

0002ffe4 <_ZN6tflite8ParseLogEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffe4:	2000      	movs	r0, #0
   2ffe6:	4770      	bx	lr

0002ffe8 <_ZN6tflite15ParseLogicalAndEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffe8:	2000      	movs	r0, #0
   2ffea:	4770      	bx	lr

0002ffec <_ZN6tflite15ParseLogicalNotEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2ffec:	2000      	movs	r0, #0
   2ffee:	4770      	bx	lr

0002fff0 <_ZN6tflite14ParseLogicalOrEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2fff0:	2000      	movs	r0, #0
   2fff2:	4770      	bx	lr

0002fff4 <_ZN6tflite13ParseLogisticEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2fff4:	2000      	movs	r0, #0
   2fff6:	4770      	bx	lr

0002fff8 <_ZN6tflite12ParseMaximumEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2fff8:	2000      	movs	r0, #0
   2fffa:	4770      	bx	lr

0002fffc <_ZN6tflite12ParseMinimumEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   2fffc:	2000      	movs	r0, #0
   2fffe:	4770      	bx	lr

00030000 <_ZN6tflite8ParseNegEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   30000:	2000      	movs	r0, #0
   30002:	4770      	bx	lr

00030004 <_ZN6tflite13ParseNotEqualEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   30004:	2000      	movs	r0, #0
   30006:	4770      	bx	lr

00030008 <_ZN6tflite8ParsePadEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   30008:	2000      	movs	r0, #0
   3000a:	4770      	bx	lr

0003000c <_ZN6tflite10ParsePadV2EPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   3000c:	2000      	movs	r0, #0
   3000e:	4770      	bx	lr

00030010 <_ZN6tflite10ParsePreluEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   30010:	2000      	movs	r0, #0
   30012:	4770      	bx	lr

00030014 <_ZN6tflite13ParseQuantizeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   30014:	2000      	movs	r0, #0
   30016:	4770      	bx	lr

00030018 <_ZN6tflite9ParseReluEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   30018:	2000      	movs	r0, #0
   3001a:	4770      	bx	lr

0003001c <_ZN6tflite10ParseRelu6EPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   3001c:	2000      	movs	r0, #0
   3001e:	4770      	bx	lr

00030020 <_ZN6tflite10ParseRoundEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   30020:	2000      	movs	r0, #0
   30022:	4770      	bx	lr

00030024 <_ZN6tflite10ParseRsqrtEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   30024:	2000      	movs	r0, #0
   30026:	4770      	bx	lr

00030028 <_ZN6tflite8ParseSinEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   30028:	2000      	movs	r0, #0
   3002a:	4770      	bx	lr

0003002c <_ZN6tflite9ParseSqrtEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   3002c:	2000      	movs	r0, #0
   3002e:	4770      	bx	lr

00030030 <_ZN6tflite11ParseSquareEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   30030:	2000      	movs	r0, #0
   30032:	4770      	bx	lr

00030034 <_ZN6tflite9ParseTanhEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
   30034:	2000      	movs	r0, #0
   30036:	4770      	bx	lr

00030038 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   30038:	b538      	push	{r3, r4, r5, lr}
   3003a:	4605      	mov	r5, r0
   3003c:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   3003e:	f7f7 fa4c 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   30042:	b100      	cbz	r0, 30046 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0xe>
   30044:	5c2c      	ldrb	r4, [r5, r0]
  }
   30046:	4620      	mov	r0, r4
   30048:	bd38      	pop	{r3, r4, r5, pc}

0003004a <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
   3004a:	b508      	push	{r3, lr}
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
   3004c:	2200      	movs	r2, #0
   3004e:	210a      	movs	r1, #10
   30050:	f7ff fff2 	bl	30038 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
  }
   30054:	bd08      	pop	{r3, pc}

00030056 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   30056:	b538      	push	{r3, r4, r5, lr}
   30058:	4605      	mov	r5, r0
   3005a:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   3005c:	f7f7 fa3d 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   30060:	b100      	cbz	r0, 30064 <_ZNK11flatbuffers5Table8GetFieldIiEET_tS2_+0xe>
   30062:	582c      	ldr	r4, [r5, r0]
  }
   30064:	4620      	mov	r0, r4
   30066:	bd38      	pop	{r3, r4, r5, pc}

00030068 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   30068:	b538      	push	{r3, r4, r5, lr}
   3006a:	4605      	mov	r5, r0
   3006c:	4614      	mov	r4, r2
    auto field_offset = GetOptionalFieldOffset(field);
   3006e:	f7f7 fa34 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   30072:	b100      	cbz	r0, 30076 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0xe>
   30074:	562c      	ldrsb	r4, [r5, r0]
  }
   30076:	4620      	mov	r0, r4
   30078:	bd38      	pop	{r3, r4, r5, pc}

0003007a <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
   3007a:	b538      	push	{r3, r4, r5, lr}
   3007c:	4604      	mov	r4, r0
   3007e:	4615      	mov	r5, r2
    auto field_offset = GetOptionalFieldOffset(field);
   30080:	f7f7 fa2b 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   30084:	b108      	cbz	r0, 3008a <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x10>
   30086:	4420      	add	r0, r4
   30088:	6805      	ldr	r5, [r0, #0]
  }
   3008a:	4628      	mov	r0, r5
   3008c:	bd38      	pop	{r3, r4, r5, pc}

0003008e <_ZN6tflite20BuiltinDataAllocator11AllocatePODI17TfLiteSplitParamsEEPT_v>:
   3008e:	2204      	movs	r2, #4
   30090:	6803      	ldr	r3, [r0, #0]
   30092:	4611      	mov	r1, r2
   30094:	681b      	ldr	r3, [r3, #0]
   30096:	4718      	bx	r3

00030098 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:
#include "tensorflow/lite/c/common.h"

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
  if (!tensor->is_variable) {
   30098:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
   3009c:	b510      	push	{r4, lr}
  if (!tensor->is_variable) {
   3009e:	b173      	cbz	r3, 300be <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x26>
    return kTfLiteOk;
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
  if (tensor->type == kTfLiteInt8) {
   300a0:	7803      	ldrb	r3, [r0, #0]
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
   300a2:	6841      	ldr	r1, [r0, #4]
  if (tensor->type == kTfLiteInt8) {
   300a4:	2b09      	cmp	r3, #9
  int value = 0;
   300a6:	bf18      	it	ne
   300a8:	2200      	movne	r2, #0
  for (size_t i = 0; i < tensor->bytes; ++i) {
   300aa:	f04f 0300 	mov.w	r3, #0
    value = tensor->params.zero_point;
   300ae:	bf08      	it	eq
   300b0:	6902      	ldreq	r2, [r0, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
   300b2:	6984      	ldr	r4, [r0, #24]
   300b4:	429c      	cmp	r4, r3
   300b6:	d902      	bls.n	300be <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x26>
    *raw_ptr = value;
   300b8:	54ca      	strb	r2, [r1, r3]
  for (size_t i = 0; i < tensor->bytes; ++i) {
   300ba:	3301      	adds	r3, #1
   300bc:	e7f9      	b.n	300b2 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x1a>
    raw_ptr++;
  }
#endif
  return kTfLiteOk;
}
   300be:	2000      	movs	r0, #0
   300c0:	bd10      	pop	{r4, pc}

000300c2 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
   300c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
   300c6:	2401      	movs	r4, #1
                         int total_signed_bits) {
   300c8:	4681      	mov	r9, r0
      1.0 * ((1 << input_integer_bits) - 1) *
   300ca:	fa04 f000 	lsl.w	r0, r4, r0
   300ce:	3801      	subs	r0, #1
                         int total_signed_bits) {
   300d0:	4688      	mov	r8, r1
   300d2:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
   300d4:	f7dc fa06 	bl	c4e4 <__aeabi_i2d>
   300d8:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   300da:	eba5 0009 	sub.w	r0, r5, r9
      1.0 * ((1 << input_integer_bits) - 1) *
   300de:	460f      	mov	r7, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
   300e0:	f1c0 0320 	rsb	r3, r0, #32
   300e4:	f1a0 0120 	sub.w	r1, r0, #32
   300e8:	fa24 f303 	lsr.w	r3, r4, r3
   300ec:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   300f0:	fa04 f000 	lsl.w	r0, r4, r0
   300f4:	4319      	orrs	r1, r3
   300f6:	f7dc fa31 	bl	c55c <__aeabi_l2d>
   300fa:	4602      	mov	r2, r0
   300fc:	460b      	mov	r3, r1
   300fe:	4630      	mov	r0, r6
   30100:	4639      	mov	r1, r7
   30102:	f7e0 f9d3 	bl	104ac <__aeabi_dmul>
      (1ll << input_left_shift);
   30106:	f1c8 0320 	rsb	r3, r8, #32
      1.0 * ((1 << input_integer_bits) - 1) *
   3010a:	460f      	mov	r7, r1
      (1ll << input_left_shift);
   3010c:	f1a8 0120 	sub.w	r1, r8, #32
   30110:	fa24 f303 	lsr.w	r3, r4, r3
   30114:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
   30118:	4606      	mov	r6, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
   3011a:	4319      	orrs	r1, r3
   3011c:	fa04 f008 	lsl.w	r0, r4, r8
   30120:	f7dc fa1c 	bl	c55c <__aeabi_l2d>
   30124:	4602      	mov	r2, r0
   30126:	460b      	mov	r3, r1
  const double max_input_rescaled =
   30128:	4630      	mov	r0, r6
   3012a:	4639      	mov	r1, r7
   3012c:	f7e0 fae8 	bl	10700 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
   30130:	f7e1 fd86 	bl	11c40 <floor>
   30134:	f7e0 fc54 	bl	109e0 <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
   30138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0003013c <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationiiP12TfLiteTensorPiS4_ENKUlfE_clEf>:
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   3013c:	edd0 7a00 	vldr	s15, [r0]
   30140:	eec0 7a27 	vdiv.f32	s15, s0, s15
  auto quantize = [scale, zero_point](float f) {
   30144:	b510      	push	{r4, lr}
   30146:	4604      	mov	r4, r0
   30148:	ee17 0a90 	vmov	r0, s15
   3014c:	f7dc f9dc 	bl	c508 <__aeabi_f2d>
   30150:	f7f2 fcf0 	bl	22b34 <round>
   30154:	f7e0 fc6c 	bl	10a30 <__aeabi_d2f>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
   30158:	ee07 0a90 	vmov	s15, r0
   3015c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   30160:	ee17 0a90 	vmov	r0, s15
   30164:	6863      	ldr	r3, [r4, #4]
  };
   30166:	4418      	add	r0, r3
   30168:	bd10      	pop	{r4, pc}

0003016a <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
   3016a:	b508      	push	{r3, lr}
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
   3016c:	6889      	ldr	r1, [r1, #8]
   3016e:	6880      	ldr	r0, [r0, #8]
   30170:	f7dc fbaa 	bl	c8c8 <TfLiteIntArrayEqual>
}
   30174:	3800      	subs	r0, #0
   30176:	bf18      	it	ne
   30178:	2001      	movne	r0, #1
   3017a:	bd08      	pop	{r3, pc}

0003017c <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
   3017c:	1e4b      	subs	r3, r1, #1
   3017e:	4403      	add	r3, r0
   30180:	fbb3 f3f1 	udiv	r3, r3, r1
  return aligned_result;
}
   30184:	fb01 f003 	mul.w	r0, r1, r3
   30188:	4770      	bx	lr

0003018a <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
   3018a:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
   3018e:	4348      	muls	r0, r1
   30190:	4770      	bx	lr

00030192 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
   30192:	1e43      	subs	r3, r0, #1
   30194:	440b      	add	r3, r1
   30196:	fbb3 f3f1 	udiv	r3, r3, r1
  return aligned_size;
}
   3019a:	fb01 f003 	mul.w	r0, r1, r3
   3019e:	4770      	bx	lr

000301a0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
   301a0:	3801      	subs	r0, #1
   301a2:	2808      	cmp	r0, #8
   301a4:	d810      	bhi.n	301c8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x28>
   301a6:	e8df f000 	tbb	[pc, r0]
   301aa:	0505      	.short	0x0505
   301ac:	0b0f0d0b 	.word	0x0b0f0d0b
   301b0:	0d09      	.short	0x0d09
   301b2:	0b          	.byte	0x0b
   301b3:	00          	.byte	0x00
    case kTfLiteFloat32:
      *size = sizeof(float);
   301b4:	2304      	movs	r3, #4
      *size = sizeof(float) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
   301b6:	2000      	movs	r0, #0
      *size = sizeof(int16_t);
   301b8:	600b      	str	r3, [r1, #0]
      break;
   301ba:	4770      	bx	lr
      *size = sizeof(int16_t);
   301bc:	2302      	movs	r3, #2
   301be:	e7fa      	b.n	301b6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x16>
      *size = sizeof(uint8_t);
   301c0:	2301      	movs	r3, #1
   301c2:	e7f8      	b.n	301b6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x16>
      *size = sizeof(int64_t);
   301c4:	2308      	movs	r3, #8
   301c6:	e7f6      	b.n	301b6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x16>
  return kTfLiteOk;
   301c8:	2001      	movs	r0, #1
}
   301ca:	4770      	bx	lr

000301cc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
   301cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   301d0:	460e      	mov	r6, r1
    return data_ - ReadScalar<soffset_t>(data_);
   301d2:	6801      	ldr	r1, [r0, #0]
   301d4:	4617      	mov	r7, r2
   301d6:	1a41      	subs	r1, r0, r1
   301d8:	f8b1 c000 	ldrh.w	ip, [r1]
   301dc:	461a      	mov	r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   301de:	f1bc 0f04 	cmp.w	ip, #4
   301e2:	d92a      	bls.n	3023a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
   301e4:	888b      	ldrh	r3, [r1, #4]
    auto p = data_ + field_offset;
   301e6:	18c4      	adds	r4, r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   301e8:	b173      	cbz	r3, 30208 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3c>
   301ea:	58c3      	ldr	r3, [r0, r3]
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
   301ec:	18e5      	adds	r5, r4, r3
   301ee:	d00b      	beq.n	30208 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3c>
  uoffset_t Length() const { return size(); }
   301f0:	f854 8003 	ldr.w	r8, [r4, r3]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   301f4:	2300      	movs	r3, #0
  int element_count = 1;
   301f6:	2401      	movs	r4, #1
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   301f8:	4543      	cmp	r3, r8
   301fa:	d006      	beq.n	3020a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x3e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
   301fc:	f855 ef04 	ldr.w	lr, [r5, #4]!
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   30200:	3301      	adds	r3, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
   30202:	fb0e f404 	mul.w	r4, lr, r4
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
   30206:	e7f7      	b.n	301f8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
  int element_count = 1;
   30208:	2401      	movs	r4, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
   3020a:	f1bc 0f06 	cmp.w	ip, #6
   3020e:	d915      	bls.n	3023c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x70>
   30210:	88cd      	ldrh	r5, [r1, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   30212:	b105      	cbz	r5, 30216 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4a>
   30214:	5745      	ldrsb	r5, [r0, r5]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
   30216:	f10d 0107 	add.w	r1, sp, #7
   3021a:	b2e8      	uxtb	r0, r5
   3021c:	f7f0 f90c 	bl	20438 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
   30220:	b940      	cbnz	r0, 30234 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x68>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
   30222:	4639      	mov	r1, r7
   30224:	f89d 0007 	ldrb.w	r0, [sp, #7]
   30228:	f7ff ffba 	bl	301a0 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
   3022c:	b910      	cbnz	r0, 30234 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x68>
  *bytes = element_count * (*type_size);
   3022e:	683b      	ldr	r3, [r7, #0]
   30230:	435c      	muls	r4, r3
   30232:	6034      	str	r4, [r6, #0]
  return kTfLiteOk;
}
   30234:	b002      	add	sp, #8
   30236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  int element_count = 1;
   3023a:	2401      	movs	r4, #1
   3023c:	2500      	movs	r5, #0
   3023e:	e7ea      	b.n	30216 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x4a>

00030240 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
   30240:	6840      	ldr	r0, [r0, #4]
   30242:	6803      	ldr	r3, [r0, #0]
   30244:	68db      	ldr	r3, [r3, #12]
   30246:	4718      	bx	r3

00030248 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
   30248:	4770      	bx	lr

0003024a <_ZN6tflite14MicroAllocatorD1Ev>:
MicroAllocator::~MicroAllocator() {}
   3024a:	4770      	bx	lr

0003024c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   3024c:	4770      	bx	lr

0003024e <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
   3024e:	b510      	push	{r4, lr}
   30250:	4604      	mov	r4, r0
   30252:	f000 f9bd 	bl	305d0 <_ZdlPv>
   30256:	4620      	mov	r0, r4
   30258:	bd10      	pop	{r4, pc}

0003025a <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
   3025a:	b510      	push	{r4, lr}
   3025c:	4604      	mov	r4, r0
   3025e:	f000 f9b7 	bl	305d0 <_ZdlPv>
   30262:	4620      	mov	r0, r4
   30264:	bd10      	pop	{r4, pc}

00030266 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
   30266:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   30268:	2108      	movs	r1, #8
   3026a:	4604      	mov	r4, r0
   3026c:	f7f7 f935 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   30270:	b110      	cbz	r0, 30278 <_ZNK6tflite22QuantizationParameters5scaleEv+0x12>
    auto p = data_ + field_offset;
   30272:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   30274:	5820      	ldr	r0, [r4, r0]
   30276:	4418      	add	r0, r3
  }
   30278:	bd10      	pop	{r4, pc}

0003027a <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
   3027a:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   3027c:	210a      	movs	r1, #10
   3027e:	4604      	mov	r4, r0
   30280:	f7f7 f92b 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   30284:	b110      	cbz	r0, 3028c <_ZNK6tflite22QuantizationParameters10zero_pointEv+0x12>
    auto p = data_ + field_offset;
   30286:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   30288:	5820      	ldr	r0, [r4, r0]
   3028a:	4418      	add	r0, r3
  }
   3028c:	bd10      	pop	{r4, pc}

0003028e <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
   3028e:	b510      	push	{r4, lr}
    auto field_offset = GetOptionalFieldOffset(field);
   30290:	210e      	movs	r1, #14
   30292:	4604      	mov	r4, r0
   30294:	f7f7 f921 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
   30298:	b100      	cbz	r0, 3029c <_ZNK6tflite6Tensor11is_variableEv+0xe>
   3029a:	5c20      	ldrb	r0, [r4, r0]
  }
   3029c:	3800      	subs	r0, #0
   3029e:	bf18      	it	ne
   302a0:	2001      	movne	r0, #1
   302a2:	bd10      	pop	{r4, pc}

000302a4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   302a4:	b510      	push	{r4, lr}
   302a6:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   302a8:	f7f7 f917 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   302ac:	b110      	cbz	r0, 302b4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x10>
    auto p = data_ + field_offset;
   302ae:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   302b0:	5820      	ldr	r0, [r4, r0]
   302b2:	4418      	add	r0, r3
  }
   302b4:	bd10      	pop	{r4, pc}

000302b6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
   302b6:	b510      	push	{r4, lr}
   302b8:	4604      	mov	r4, r0
    auto field_offset = GetOptionalFieldOffset(field);
   302ba:	f7f7 f90e 	bl	274da <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   302be:	b110      	cbz	r0, 302c6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x10>
    auto p = data_ + field_offset;
   302c0:	1823      	adds	r3, r4, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
   302c2:	5820      	ldr	r0, [r4, r0]
   302c4:	4418      	add	r0, r3
  }
   302c6:	bd10      	pop	{r4, pc}

000302c8 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:

}  // namespace

int ElementCount(const TfLiteIntArray& dims) {
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
   302c8:	2200      	movs	r2, #0
  int result = 1;
   302ca:	2301      	movs	r3, #1
int ElementCount(const TfLiteIntArray& dims) {
   302cc:	b510      	push	{r4, lr}
  for (int i = 0; i < dims.size; ++i) {
   302ce:	f850 4b04 	ldr.w	r4, [r0], #4
   302d2:	4294      	cmp	r4, r2
   302d4:	dd04      	ble.n	302e0 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x18>
    result *= dims.data[i];
   302d6:	f850 1b04 	ldr.w	r1, [r0], #4
  for (int i = 0; i < dims.size; ++i) {
   302da:	3201      	adds	r2, #1
    result *= dims.data[i];
   302dc:	434b      	muls	r3, r1
  for (int i = 0; i < dims.size; ++i) {
   302de:	e7f8      	b.n	302d2 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xa>
  }
  return result;
}
   302e0:	4618      	mov	r0, r3
   302e2:	bd10      	pop	{r4, pc}

000302e4 <_ZN6tflite31FloatToAsymmetricQuantizedUInt8Effi>:

// Converts a float value into an unsigned eight-bit quantized value.
uint8_t FloatToAsymmetricQuantizedUInt8(const float value, const float scale,
                                        const int zero_point) {
  int32_t result = round(value / scale) + zero_point;
   302e4:	ee07 1a10 	vmov	s14, r1
   302e8:	ee07 0a90 	vmov	s15, r0
   302ec:	eec7 7a87 	vdiv.f32	s15, s15, s14
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
   302f0:	feb8 7a67 	vrinta.f32	s14, s15
   302f4:	ee07 2a90 	vmov	s15, r2
   302f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   302fc:	ee77 7a87 	vadd.f32	s15, s15, s14
   30300:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   30304:	ee17 0a90 	vmov	r0, s15
    result = kAsymmetricUInt8Min;
  }
  if (result > kAsymmetricUInt8Max) {
    result = kAsymmetricUInt8Max;
  }
  return result;
   30308:	f380 0008 	usat	r0, #8, r0
}
   3030c:	b2c0      	uxtb	r0, r0
   3030e:	4770      	bx	lr

00030310 <_ZN6tflite30FloatToAsymmetricQuantizedInt8Effi>:
  return result;
}

int8_t FloatToAsymmetricQuantizedInt8(const float value, const float scale,
                                      const int zero_point) {
  int32_t result = round(value / scale) + zero_point;
   30310:	ee07 1a10 	vmov	s14, r1
   30314:	ee07 0a90 	vmov	s15, r0
   30318:	eec7 7a87 	vdiv.f32	s15, s15, s14
   3031c:	feb8 7a67 	vrinta.f32	s14, s15
   30320:	ee07 2a90 	vmov	s15, r2
   30324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   30328:	ee77 7a87 	vadd.f32	s15, s15, s14
   3032c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   30330:	ee17 0a90 	vmov	r0, s15
    result = kAsymmetricInt8Min;
  }
  if (result > kAsymmetricInt8Max) {
    result = kAsymmetricInt8Max;
  }
  return result;
   30334:	f300 0007 	ssat	r0, #8, r0
}
   30338:	b240      	sxtb	r0, r0
   3033a:	4770      	bx	lr

0003033c <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
   3033c:	4770      	bx	lr

0003033e <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
   3033e:	b510      	push	{r4, lr}
   30340:	4604      	mov	r4, r0
   30342:	f000 f945 	bl	305d0 <_ZdlPv>
   30346:	4620      	mov	r0, r4
   30348:	bd10      	pop	{r4, pc}

0003034a <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
   3034a:	6900      	ldr	r0, [r0, #16]
   3034c:	4770      	bx	lr

0003034e <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
   3034e:	6940      	ldr	r0, [r0, #20]
   30350:	4770      	bx	lr

00030352 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:
size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
  return tail_ - head_;
   30352:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
}
   30356:	1a10      	subs	r0, r2, r0
   30358:	4770      	bx	lr

0003035a <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
}
   3035a:	4770      	bx	lr

0003035c <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
   3035c:	6880      	ldr	r0, [r0, #8]
   3035e:	4770      	bx	lr

00030360 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
   30360:	b510      	push	{r4, lr}
   30362:	4604      	mov	r4, r0
}
   30364:	f000 f934 	bl	305d0 <_ZdlPv>
   30368:	4620      	mov	r0, r4
   3036a:	bd10      	pop	{r4, pc}

0003036c <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
void ReverseSortInPlace(int* values, int* ids, int size) {
   3036c:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (int i = 1; i < size; ++i) {
   3036e:	4604      	mov	r4, r0
   30370:	460b      	mov	r3, r1
   30372:	2501      	movs	r5, #1
    any_swapped = false;
   30374:	2600      	movs	r6, #0
    for (int i = 1; i < size; ++i) {
   30376:	4295      	cmp	r5, r2
   30378:	da12      	bge.n	303a0 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x34>
      if (values[i - 1] < values[i]) {
   3037a:	e9d4 7c00 	ldrd	r7, ip, [r4]
   3037e:	4567      	cmp	r7, ip
        values[i] = value_temp;
   30380:	bfb8      	it	lt
   30382:	e9c4 c700 	strdlt	ip, r7, [r4]
    for (int i = 1; i < size; ++i) {
   30386:	f105 0501 	add.w	r5, r5, #1
        ids[i - 1] = ids[i];
   3038a:	bfb8      	it	lt
   3038c:	e9d3 6700 	ldrdlt	r6, r7, [r3]
   30390:	f104 0404 	add.w	r4, r4, #4
        ids[i] = id_temp;
   30394:	bfbc      	itt	lt
   30396:	e9c3 7600 	strdlt	r7, r6, [r3]
        any_swapped = true;
   3039a:	2601      	movlt	r6, #1
    for (int i = 1; i < size; ++i) {
   3039c:	3304      	adds	r3, #4
   3039e:	e7ea      	b.n	30376 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xa>
  do {
   303a0:	2e00      	cmp	r6, #0
   303a2:	d1e4      	bne.n	3036e <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x2>
}
   303a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000303a6 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
   303a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  BufferRequirements* current = &requirements_[buffer_count_];
   303a8:	e9d0 6502 	ldrd	r6, r5, [r0, #8]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
   303ac:	9f08      	ldr	r7, [sp, #32]
   303ae:	6804      	ldr	r4, [r0, #0]
   303b0:	9700      	str	r7, [sp, #0]
   303b2:	68a4      	ldr	r4, [r4, #8]
   303b4:	47a0      	blx	r4
   303b6:	b928      	cbnz	r0, 303c4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1e>
  current->offline_offset = offline_offset;
   303b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   303ba:	eb05 1506 	add.w	r5, r5, r6, lsl #4
   303be:	606b      	str	r3, [r5, #4]
}
   303c0:	b003      	add	sp, #12
   303c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return kTfLiteError;
   303c4:	2001      	movs	r0, #1
   303c6:	e7fb      	b.n	303c0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x1a>

000303c8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:
    const int last_time_used) const {
   303c8:	b510      	push	{r4, lr}
      &requirements_[entry->requirements_index];
   303ca:	684c      	ldr	r4, [r1, #4]
  const BufferRequirements* entry_requirements =
   303cc:	68c1      	ldr	r1, [r0, #12]
   303ce:	eb01 1104 	add.w	r1, r1, r4, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
   303d2:	6888      	ldr	r0, [r1, #8]
   303d4:	4298      	cmp	r0, r3
   303d6:	dc05      	bgt.n	303e4 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1c>
  if (first_time_used > entry_requirements->last_time_used) {
   303d8:	68c8      	ldr	r0, [r1, #12]
   303da:	4290      	cmp	r0, r2
   303dc:	bfb4      	ite	lt
   303de:	2000      	movlt	r0, #0
   303e0:	2001      	movge	r0, #1
}
   303e2:	bd10      	pop	{r4, pc}
    return false;
   303e4:	2000      	movs	r0, #0
   303e6:	e7fc      	b.n	303e2 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x1a>

000303e8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:
    const int last_time_used) {
   303e8:	b570      	push	{r4, r5, r6, lr}
   303ea:	4605      	mov	r5, r0
  if (start == nullptr) {
   303ec:	b989      	cbnz	r1, 30412 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x2a>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
   303ee:	6a04      	ldr	r4, [r0, #32]
   303f0:	200c      	movs	r0, #12
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
   303f2:	260c      	movs	r6, #12
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
   303f4:	69a9      	ldr	r1, [r5, #24]
   303f6:	fb00 1404 	mla	r4, r0, r4, r1
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   303fa:	4621      	mov	r1, r4
   303fc:	4628      	mov	r0, r5
   303fe:	f7ff ffe3 	bl	303c8 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
   30402:	b950      	cbnz	r0, 3041a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>
    if (candidate_next_entry->next_entry_index == -1) {
   30404:	68a4      	ldr	r4, [r4, #8]
   30406:	1c61      	adds	r1, r4, #1
   30408:	d009      	beq.n	3041e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x36>
    candidate_next_entry =
   3040a:	69a9      	ldr	r1, [r5, #24]
   3040c:	fb06 1404 	mla	r4, r6, r4, r1
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
   30410:	e7f3      	b.n	303fa <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x12>
    if (start->next_entry_index == -1) {
   30412:	688c      	ldr	r4, [r1, #8]
   30414:	1c60      	adds	r0, r4, #1
   30416:	d1eb      	bne.n	303f0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8>
      return nullptr;
   30418:	2400      	movs	r4, #0
}
   3041a:	4620      	mov	r0, r4
   3041c:	bd70      	pop	{r4, r5, r6, pc}
      return nullptr;
   3041e:	4604      	mov	r4, r0
   30420:	e7fb      	b.n	3041a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x32>

00030422 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   30422:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   30426:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
   3042a:	4604      	mov	r4, r0
   3042c:	b085      	sub	sp, #20
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
   3042e:	2b00      	cmp	r3, #0
   30430:	f000 80ae 	beq.w	30590 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
   30434:	6885      	ldr	r5, [r0, #8]
   30436:	2d00      	cmp	r5, #0
   30438:	f000 80aa 	beq.w	30590 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
  need_to_calculate_offsets_ = false;
   3043c:	e9d0 7604 	ldrd	r7, r6, [r0, #16]
   30440:	2300      	movs	r3, #0
  int idx_from_head = 0;
   30442:	461a      	mov	r2, r3
  need_to_calculate_offsets_ = false;
   30444:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  for (int i = 0; i < buffer_count_; ++i) {
   30448:	f8d4 c008 	ldr.w	ip, [r4, #8]
   3044c:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   30450:	459c      	cmp	ip, r3
   30452:	eb07 0082 	add.w	r0, r7, r2, lsl #2
   30456:	eb06 0182 	add.w	r1, r6, r2, lsl #2
   3045a:	dd1e      	ble.n	3049a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x78>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
   3045c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   30460:	0119      	lsls	r1, r3, #4
   30462:	eb0c 1003 	add.w	r0, ip, r3, lsl #4
   30466:	f8d0 8004 	ldr.w	r8, [r0, #4]
   3046a:	f85c c001 	ldr.w	ip, [ip, r1]
   3046e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   30472:	6a61      	ldr	r1, [r4, #36]	; 0x24
   30474:	d108      	bne.n	30488 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x66>
      idx_from_tail--;
   30476:	3d01      	subs	r5, #1
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
   30478:	f847 c025 	str.w	ip, [r7, r5, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
   3047c:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
      buffer_offsets_[i] = -1;
   30480:	f841 8023 	str.w	r8, [r1, r3, lsl #2]
  for (int i = 0; i < buffer_count_; ++i) {
   30484:	3301      	adds	r3, #1
   30486:	e7df      	b.n	30448 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x26>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
   30488:	f847 c00e 	str.w	ip, [r7, lr]
      buffer_ids_sorted_[idx_from_head] = i;
   3048c:	f846 300e 	str.w	r3, [r6, lr]
      buffer_offsets_[i] = requirements_[i].offline_offset;
   30490:	6840      	ldr	r0, [r0, #4]
      idx_from_head++;
   30492:	3201      	adds	r2, #1
      buffer_offsets_[i] = requirements_[i].offline_offset;
   30494:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
      idx_from_head++;
   30498:	e7f4      	b.n	30484 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x62>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
   3049a:	ebac 0202 	sub.w	r2, ip, r2
   3049e:	f7ff ff65 	bl	3036c <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  next_free_entry_ = 1;
   304a2:	2301      	movs	r3, #1
   304a4:	2200      	movs	r2, #0
   304a6:	e9c4 3207 	strd	r3, r2, [r4, #28]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
   304aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
   304ae:	69a6      	ldr	r6, [r4, #24]
  for (int i = 1; i < buffer_count_; ++i) {
   304b0:	2701      	movs	r7, #1
  first_entry->offset = buffer_offsets_[buffer_id];
   304b2:	46b2      	mov	sl, r6
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
   304b4:	60b3      	str	r3, [r6, #8]
  int buffer_id = buffer_ids_sorted_[0];
   304b6:	6963      	ldr	r3, [r4, #20]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   304b8:	f8d4 800c 	ldr.w	r8, [r4, #12]
  int buffer_id = buffer_ids_sorted_[0];
   304bc:	9301      	str	r3, [sp, #4]
   304be:	681b      	ldr	r3, [r3, #0]
  first_entry->requirements_index = buffer_id;
   304c0:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   304c4:	eb08 1103 	add.w	r1, r8, r3, lsl #4
   304c8:	6849      	ldr	r1, [r1, #4]
  first_entry->requirements_index = buffer_id;
   304ca:	6073      	str	r3, [r6, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
   304cc:	3101      	adds	r1, #1
    buffer_offsets_[buffer_id] = 0;
   304ce:	bf08      	it	eq
   304d0:	f84b 2023 	streq.w	r2, [fp, r3, lsl #2]
  first_entry->offset = buffer_offsets_[buffer_id];
   304d4:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
   304d8:	6033      	str	r3, [r6, #0]
  for (int i = 1; i < buffer_count_; ++i) {
   304da:	68a3      	ldr	r3, [r4, #8]
   304dc:	42bb      	cmp	r3, r7
   304de:	dd57      	ble.n	30590 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    buffer_id = buffer_ids_sorted_[i];
   304e0:	9b01      	ldr	r3, [sp, #4]
   304e2:	f853 9027 	ldr.w	r9, [r3, r7, lsl #2]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   304e6:	eb08 1309 	add.w	r3, r8, r9, lsl #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
   304ea:	685d      	ldr	r5, [r3, #4]
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
   304ec:	ea4f 1209 	mov.w	r2, r9, lsl #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
   304f0:	1c69      	adds	r1, r5, #1
   304f2:	d120      	bne.n	30536 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x114>
      ListEntry* prior_entry = nullptr;
   304f4:	2000      	movs	r0, #0
    const int wanted_last_time_used = wanted_requirements->last_time_used;
   304f6:	edd3 7a03 	vldr	s15, [r3, #12]
    int candidate_offset = 0;
   304fa:	4605      	mov	r5, r0
    const int wanted_size = wanted_requirements->size;
   304fc:	f858 2002 	ldr.w	r2, [r8, r2]
   30500:	9202      	str	r2, [sp, #8]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
   30502:	689a      	ldr	r2, [r3, #8]
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
   30504:	4601      	mov	r1, r0
   30506:	9003      	str	r0, [sp, #12]
   30508:	ee17 3a90 	vmov	r3, s15
   3050c:	4620      	mov	r0, r4
   3050e:	f7ff ff6b 	bl	303e8 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
        if (prior_entry) {
   30512:	9903      	ldr	r1, [sp, #12]
   30514:	b149      	cbz	r1, 3052a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x108>
              prior_entry->offset + candidate_requirements->size;
   30516:	684b      	ldr	r3, [r1, #4]
          const int prior_entry_offset =
   30518:	6809      	ldr	r1, [r1, #0]
              prior_entry->offset + candidate_requirements->size;
   3051a:	ea4f 1c03 	mov.w	ip, r3, lsl #4
          const int prior_entry_offset =
   3051e:	f858 c00c 	ldr.w	ip, [r8, ip]
   30522:	448c      	add	ip, r1
   30524:	4565      	cmp	r5, ip
   30526:	bfb8      	it	lt
   30528:	4665      	movlt	r5, ip
        if (next_entry == nullptr) {
   3052a:	b120      	cbz	r0, 30536 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x114>
        const int gap = next_entry->offset - candidate_offset;
   3052c:	6801      	ldr	r1, [r0, #0]
        if (gap >= wanted_size) {
   3052e:	9b02      	ldr	r3, [sp, #8]
        const int gap = next_entry->offset - candidate_offset;
   30530:	1b49      	subs	r1, r1, r5
        if (gap >= wanted_size) {
   30532:	428b      	cmp	r3, r1
   30534:	dce6      	bgt.n	30504 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe2>
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   30536:	220c      	movs	r2, #12
    buffer_offsets_[buffer_id] = candidate_offset;
   30538:	f84b 5029 	str.w	r5, [fp, r9, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   3053c:	69e3      	ldr	r3, [r4, #28]
   3053e:	fb02 f103 	mul.w	r1, r2, r3
    new_entry->offset = candidate_offset;
   30542:	5075      	str	r5, [r6, r1]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
   30544:	1872      	adds	r2, r6, r1
    ++next_free_entry_;
   30546:	1c59      	adds	r1, r3, #1
    new_entry->requirements_index = buffer_id;
   30548:	f8c2 9004 	str.w	r9, [r2, #4]
    ++next_free_entry_;
   3054c:	61e1      	str	r1, [r4, #28]
    if (first_entry->offset > candidate_offset) {
   3054e:	f8da 1000 	ldr.w	r1, [sl]
   30552:	42a9      	cmp	r1, r5
   30554:	dd05      	ble.n	30562 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x140>
      first_entry->next_entry_index = first_entry_index_;
   30556:	4692      	mov	sl, r2
   30558:	6a21      	ldr	r1, [r4, #32]
   3055a:	6091      	str	r1, [r2, #8]
      first_entry_index_ = new_entry_index;
   3055c:	6223      	str	r3, [r4, #32]
  for (int i = 1; i < buffer_count_; ++i) {
   3055e:	3701      	adds	r7, #1
   30560:	e7bb      	b.n	304da <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xb8>
   30562:	4651      	mov	r1, sl
        const int next_entry_index = current_entry->next_entry_index;
   30564:	6888      	ldr	r0, [r1, #8]
        if (next_entry_index == -1) {
   30566:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   3056a:	d104      	bne.n	30576 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x154>
          current_entry->next_entry_index = new_entry_index;
   3056c:	608b      	str	r3, [r1, #8]
          new_entry->next_entry_index = -1;
   3056e:	6090      	str	r0, [r2, #8]
          break;
   30570:	e7f5      	b.n	3055e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13c>
   30572:	4671      	mov	r1, lr
   30574:	e7f6      	b.n	30564 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x142>
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
   30576:	f04f 0c0c 	mov.w	ip, #12
   3057a:	fb0c fc00 	mul.w	ip, ip, r0
   3057e:	eb06 0e0c 	add.w	lr, r6, ip
        if (next_entry->offset > candidate_offset) {
   30582:	f856 c00c 	ldr.w	ip, [r6, ip]
   30586:	45ac      	cmp	ip, r5
   30588:	ddf3      	ble.n	30572 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x150>
          new_entry->next_entry_index = current_entry->next_entry_index;
   3058a:	6090      	str	r0, [r2, #8]
          current_entry->next_entry_index = new_entry_index;
   3058c:	608b      	str	r3, [r1, #8]
          break;
   3058e:	e7e6      	b.n	3055e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x13c>
}
   30590:	b005      	add	sp, #20
   30592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00030596 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
   30596:	b570      	push	{r4, r5, r6, lr}
   30598:	4604      	mov	r4, r0
  CalculateOffsetsIfNeeded();
   3059a:	f7ff ff42 	bl	30422 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
   3059e:	68a0      	ldr	r0, [r4, #8]
   305a0:	b1a8      	cbz	r0, 305ce <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
   305a2:	220c      	movs	r2, #12
  size_t max_size = 0;
   305a4:	2000      	movs	r0, #0
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
   305a6:	69a5      	ldr	r5, [r4, #24]
   305a8:	6a23      	ldr	r3, [r4, #32]
   305aa:	fb02 5303 	mla	r3, r2, r3, r5
  while (entry) {
   305ae:	b173      	cbz	r3, 305ce <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
        &requirements_[entry->requirements_index];
   305b0:	6859      	ldr	r1, [r3, #4]
    const size_t current_size = entry->offset + requirements->size;
   305b2:	68e6      	ldr	r6, [r4, #12]
   305b4:	0109      	lsls	r1, r1, #4
   305b6:	5871      	ldr	r1, [r6, r1]
   305b8:	681e      	ldr	r6, [r3, #0]
    if (entry->next_entry_index == -1) {
   305ba:	689b      	ldr	r3, [r3, #8]
    const size_t current_size = entry->offset + requirements->size;
   305bc:	4431      	add	r1, r6
   305be:	4288      	cmp	r0, r1
   305c0:	bf38      	it	cc
   305c2:	4608      	movcc	r0, r1
    if (entry->next_entry_index == -1) {
   305c4:	1c59      	adds	r1, r3, #1
   305c6:	d002      	beq.n	305ce <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x38>
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
   305c8:	fb02 5303 	mla	r3, r2, r3, r5
  while (entry) {
   305cc:	e7ef      	b.n	305ae <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x18>
}
   305ce:	bd70      	pop	{r4, r5, r6, pc}

000305d0 <_ZdlPv>:
   305d0:	f7f5 b80e 	b.w	255f0 <free>

000305d4 <_ZdaPv>:
   305d4:	f7ff bffc 	b.w	305d0 <_ZdlPv>

000305d8 <__cxa_guard_release>:
   305d8:	2301      	movs	r3, #1
   305da:	6003      	str	r3, [r0, #0]
   305dc:	4770      	bx	lr

000305de <_ZN9__gnu_cxx20recursive_init_errorD0Ev>:
   305de:	b510      	push	{r4, lr}
   305e0:	4604      	mov	r4, r0
   305e2:	f7f1 fe35 	bl	22250 <_ZN9__gnu_cxx20recursive_init_errorD1Ev>
   305e6:	2104      	movs	r1, #4
   305e8:	4620      	mov	r0, r4
   305ea:	f000 f8fc 	bl	307e6 <_ZdlPvj>
   305ee:	4620      	mov	r0, r4
   305f0:	bd10      	pop	{r4, pc}

000305f2 <_Znaj>:
   305f2:	f7f1 bf11 	b.w	22418 <_Znwj>

000305f6 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   305f6:	b510      	push	{r4, lr}
   305f8:	4604      	mov	r4, r0
   305fa:	f7f1 fe39 	bl	22270 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   305fe:	210c      	movs	r1, #12
   30600:	4620      	mov	r0, r4
   30602:	f000 f8f0 	bl	307e6 <_ZdlPvj>
   30606:	4620      	mov	r0, r4
   30608:	bd10      	pop	{r4, pc}

0003060a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   3060a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3060c:	9f08      	ldr	r7, [sp, #32]
   3060e:	4605      	mov	r5, r0
   30610:	460e      	mov	r6, r1
   30612:	4614      	mov	r4, r2
   30614:	4297      	cmp	r7, r2
   30616:	d00a      	beq.n	3062e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   30618:	68a8      	ldr	r0, [r5, #8]
   3061a:	4631      	mov	r1, r6
   3061c:	6802      	ldr	r2, [r0, #0]
   3061e:	9708      	str	r7, [sp, #32]
   30620:	6a15      	ldr	r5, [r2, #32]
   30622:	4622      	mov	r2, r4
   30624:	46ac      	mov	ip, r5
   30626:	b003      	add	sp, #12
   30628:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   3062c:	4760      	bx	ip
   3062e:	4619      	mov	r1, r3
   30630:	9301      	str	r3, [sp, #4]
   30632:	f000 f858 	bl	306e6 <_ZNKSt9type_infoeqERKS_>
   30636:	9b01      	ldr	r3, [sp, #4]
   30638:	2800      	cmp	r0, #0
   3063a:	d0ed      	beq.n	30618 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   3063c:	2006      	movs	r0, #6
   3063e:	b003      	add	sp, #12
   30640:	bdf0      	pop	{r4, r5, r6, r7, pc}

00030642 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   30642:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30646:	460d      	mov	r5, r1
   30648:	4619      	mov	r1, r3
   3064a:	4681      	mov	r9, r0
   3064c:	4617      	mov	r7, r2
   3064e:	4698      	mov	r8, r3
   30650:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   30654:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   30658:	f000 f845 	bl	306e6 <_ZNKSt9type_infoeqERKS_>
   3065c:	b190      	cbz	r0, 30684 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   3065e:	2d00      	cmp	r5, #0
   30660:	6034      	str	r4, [r6, #0]
   30662:	7137      	strb	r7, [r6, #4]
   30664:	db09      	blt.n	3067a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   30666:	1961      	adds	r1, r4, r5
   30668:	458a      	cmp	sl, r1
   3066a:	bf0c      	ite	eq
   3066c:	2106      	moveq	r1, #6
   3066e:	2101      	movne	r1, #1
   30670:	71b1      	strb	r1, [r6, #6]
   30672:	2000      	movs	r0, #0
   30674:	b001      	add	sp, #4
   30676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3067a:	3502      	adds	r5, #2
   3067c:	d1f9      	bne.n	30672 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   3067e:	2301      	movs	r3, #1
   30680:	71b3      	strb	r3, [r6, #6]
   30682:	e7f6      	b.n	30672 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   30684:	4554      	cmp	r4, sl
   30686:	d106      	bne.n	30696 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   30688:	4659      	mov	r1, fp
   3068a:	4648      	mov	r0, r9
   3068c:	f000 f82b 	bl	306e6 <_ZNKSt9type_infoeqERKS_>
   30690:	b108      	cbz	r0, 30696 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   30692:	7177      	strb	r7, [r6, #5]
   30694:	e7ed      	b.n	30672 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   30696:	f8d9 0008 	ldr.w	r0, [r9, #8]
   3069a:	463a      	mov	r2, r7
   3069c:	4629      	mov	r1, r5
   3069e:	6803      	ldr	r3, [r0, #0]
   306a0:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   306a4:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   306a8:	69dc      	ldr	r4, [r3, #28]
   306aa:	4643      	mov	r3, r8
   306ac:	46a4      	mov	ip, r4
   306ae:	b001      	add	sp, #4
   306b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   306b4:	4760      	bx	ip

000306b6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   306b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   306ba:	4607      	mov	r7, r0
   306bc:	460c      	mov	r4, r1
   306be:	4615      	mov	r5, r2
   306c0:	461e      	mov	r6, r3
   306c2:	f000 f86f 	bl	307a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   306c6:	b948      	cbnz	r0, 306dc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   306c8:	68b8      	ldr	r0, [r7, #8]
   306ca:	462a      	mov	r2, r5
   306cc:	4621      	mov	r1, r4
   306ce:	6803      	ldr	r3, [r0, #0]
   306d0:	699f      	ldr	r7, [r3, #24]
   306d2:	4633      	mov	r3, r6
   306d4:	46bc      	mov	ip, r7
   306d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   306da:	4760      	bx	ip
   306dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000306e0 <_ZNSt9type_infoD1Ev>:
   306e0:	4770      	bx	lr

000306e2 <_ZNKSt9type_info14__is_pointer_pEv>:
   306e2:	2000      	movs	r0, #0
   306e4:	4770      	bx	lr

000306e6 <_ZNKSt9type_infoeqERKS_>:
   306e6:	4281      	cmp	r1, r0
   306e8:	b508      	push	{r3, lr}
   306ea:	d00e      	beq.n	3070a <_ZNKSt9type_infoeqERKS_+0x24>
   306ec:	6840      	ldr	r0, [r0, #4]
   306ee:	7803      	ldrb	r3, [r0, #0]
   306f0:	2b2a      	cmp	r3, #42	; 0x2a
   306f2:	d00c      	beq.n	3070e <_ZNKSt9type_infoeqERKS_+0x28>
   306f4:	6849      	ldr	r1, [r1, #4]
   306f6:	780b      	ldrb	r3, [r1, #0]
   306f8:	2b2a      	cmp	r3, #42	; 0x2a
   306fa:	bf08      	it	eq
   306fc:	3101      	addeq	r1, #1
   306fe:	f7e1 fa01 	bl	11b04 <strcmp>
   30702:	fab0 f080 	clz	r0, r0
   30706:	0940      	lsrs	r0, r0, #5
   30708:	bd08      	pop	{r3, pc}
   3070a:	2001      	movs	r0, #1
   3070c:	e7fc      	b.n	30708 <_ZNKSt9type_infoeqERKS_+0x22>
   3070e:	2000      	movs	r0, #0
   30710:	e7fa      	b.n	30708 <_ZNKSt9type_infoeqERKS_+0x22>

00030712 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   30712:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   30714:	2400      	movs	r4, #0
   30716:	2310      	movs	r3, #16
   30718:	4615      	mov	r5, r2
   3071a:	6812      	ldr	r2, [r2, #0]
   3071c:	9400      	str	r4, [sp, #0]
   3071e:	f88d 4004 	strb.w	r4, [sp, #4]
   30722:	e9cd 3402 	strd	r3, r4, [sp, #8]
   30726:	6803      	ldr	r3, [r0, #0]
   30728:	699e      	ldr	r6, [r3, #24]
   3072a:	466b      	mov	r3, sp
   3072c:	47b0      	blx	r6
   3072e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   30732:	f003 0306 	and.w	r3, r3, #6
   30736:	2b06      	cmp	r3, #6
   30738:	bf05      	ittet	eq
   3073a:	9b00      	ldreq	r3, [sp, #0]
   3073c:	2001      	moveq	r0, #1
   3073e:	4620      	movne	r0, r4
   30740:	602b      	streq	r3, [r5, #0]
   30742:	b004      	add	sp, #16
   30744:	bd70      	pop	{r4, r5, r6, pc}

00030746 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   30746:	9800      	ldr	r0, [sp, #0]
   30748:	4290      	cmp	r0, r2
   3074a:	bf14      	ite	ne
   3074c:	2001      	movne	r0, #1
   3074e:	2006      	moveq	r0, #6
   30750:	4770      	bx	lr

00030752 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   30752:	b510      	push	{r4, lr}
   30754:	4604      	mov	r4, r0
   30756:	f7f1 fd95 	bl	22284 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   3075a:	2108      	movs	r1, #8
   3075c:	4620      	mov	r0, r4
   3075e:	f000 f842 	bl	307e6 <_ZdlPvj>
   30762:	4620      	mov	r0, r4
   30764:	bd10      	pop	{r4, pc}

00030766 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   30766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   3076a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   3076e:	461f      	mov	r7, r3
   30770:	4606      	mov	r6, r0
   30772:	4615      	mov	r5, r2
   30774:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   30778:	4598      	cmp	r8, r3
   3077a:	d107      	bne.n	3078c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   3077c:	9907      	ldr	r1, [sp, #28]
   3077e:	f7ff ffb2 	bl	306e6 <_ZNKSt9type_infoeqERKS_>
   30782:	b118      	cbz	r0, 3078c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   30784:	7165      	strb	r5, [r4, #5]
   30786:	2000      	movs	r0, #0
   30788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   3078c:	4639      	mov	r1, r7
   3078e:	4630      	mov	r0, r6
   30790:	f7ff ffa9 	bl	306e6 <_ZNKSt9type_infoeqERKS_>
   30794:	2800      	cmp	r0, #0
   30796:	d0f6      	beq.n	30786 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   30798:	2301      	movs	r3, #1
   3079a:	f8c4 8000 	str.w	r8, [r4]
   3079e:	7125      	strb	r5, [r4, #4]
   307a0:	71a3      	strb	r3, [r4, #6]
   307a2:	e7f0      	b.n	30786 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000307a4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   307a4:	b538      	push	{r3, r4, r5, lr}
   307a6:	4615      	mov	r5, r2
   307a8:	461c      	mov	r4, r3
   307aa:	f7ff ff9c 	bl	306e6 <_ZNKSt9type_infoeqERKS_>
   307ae:	b120      	cbz	r0, 307ba <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   307b0:	2308      	movs	r3, #8
   307b2:	6025      	str	r5, [r4, #0]
   307b4:	60e3      	str	r3, [r4, #12]
   307b6:	2306      	movs	r3, #6
   307b8:	7123      	strb	r3, [r4, #4]
   307ba:	bd38      	pop	{r3, r4, r5, pc}

000307bc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   307bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   307be:	4605      	mov	r5, r0
   307c0:	460c      	mov	r4, r1
   307c2:	461e      	mov	r6, r3
   307c4:	9201      	str	r2, [sp, #4]
   307c6:	f7ff ff8e 	bl	306e6 <_ZNKSt9type_infoeqERKS_>
   307ca:	b950      	cbnz	r0, 307e2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   307cc:	2e03      	cmp	r6, #3
   307ce:	d808      	bhi.n	307e2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   307d0:	6823      	ldr	r3, [r4, #0]
   307d2:	4629      	mov	r1, r5
   307d4:	9a01      	ldr	r2, [sp, #4]
   307d6:	4620      	mov	r0, r4
   307d8:	695b      	ldr	r3, [r3, #20]
   307da:	b002      	add	sp, #8
   307dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   307e0:	4718      	bx	r3
   307e2:	b002      	add	sp, #8
   307e4:	bd70      	pop	{r4, r5, r6, pc}

000307e6 <_ZdlPvj>:
   307e6:	f7ff bef3 	b.w	305d0 <_ZdlPv>

000307ea <__cxa_allocate_exception>:
   307ea:	b510      	push	{r4, lr}
   307ec:	f100 0480 	add.w	r4, r0, #128	; 0x80
   307f0:	4620      	mov	r0, r4
   307f2:	f7f4 fef5 	bl	255e0 <malloc>
   307f6:	4603      	mov	r3, r0
   307f8:	b930      	cbnz	r0, 30808 <__cxa_allocate_exception+0x1e>
   307fa:	4620      	mov	r0, r4
   307fc:	f7f1 fd84 	bl	22308 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
   30800:	4603      	mov	r3, r0
   30802:	b908      	cbnz	r0, 30808 <__cxa_allocate_exception+0x1e>
   30804:	f000 f823 	bl	3084e <_ZSt9terminatev>
   30808:	2280      	movs	r2, #128	; 0x80
   3080a:	2100      	movs	r1, #0
   3080c:	4618      	mov	r0, r3
   3080e:	f000 fb52 	bl	30eb6 <memset>
   30812:	3080      	adds	r0, #128	; 0x80
   30814:	bd10      	pop	{r4, pc}

00030816 <_ZNSt9exceptionD1Ev>:
   30816:	4770      	bx	lr

00030818 <_ZNSt13bad_exceptionD1Ev>:
   30818:	4770      	bx	lr

0003081a <_ZNSt13bad_exceptionD0Ev>:
   3081a:	b510      	push	{r4, lr}
   3081c:	4604      	mov	r4, r0
   3081e:	2104      	movs	r1, #4
   30820:	f7ff ffe1 	bl	307e6 <_ZdlPvj>
   30824:	4620      	mov	r0, r4
   30826:	bd10      	pop	{r4, pc}

00030828 <_ZN10__cxxabiv111__terminateEPFvvE>:
   30828:	b507      	push	{r0, r1, r2, lr}
   3082a:	4780      	blx	r0
   3082c:	f000 faf9 	bl	30e22 <abort>
   30830:	f000 f939 	bl	30aa6 <__cxa_begin_catch>
   30834:	f000 faf5 	bl	30e22 <abort>
   30838:	460c      	mov	r4, r1
   3083a:	9001      	str	r0, [sp, #4]
   3083c:	f000 f95c 	bl	30af8 <__cxa_end_catch>
   30840:	9801      	ldr	r0, [sp, #4]
   30842:	3401      	adds	r4, #1
   30844:	d001      	beq.n	3084a <_ZN10__cxxabiv111__terminateEPFvvE+0x22>
   30846:	f000 f88c 	bl	30962 <__cxa_end_cleanup>
   3084a:	f7f1 fe6f 	bl	2252c <__cxa_call_unexpected>

0003084e <_ZSt9terminatev>:
   3084e:	b508      	push	{r3, lr}
   30850:	f7f1 fdaa 	bl	223a8 <_ZSt13get_terminatev>
   30854:	f7ff ffe8 	bl	30828 <_ZN10__cxxabiv111__terminateEPFvvE>

00030858 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
   30858:	b508      	push	{r3, lr}
   3085a:	4780      	blx	r0
   3085c:	f7ff fff7 	bl	3084e <_ZSt9terminatev>

00030860 <_ZSt10unexpectedv>:
   30860:	b508      	push	{r3, lr}
   30862:	f7f1 fda7 	bl	223b4 <_ZSt14get_unexpectedv>
   30866:	f7ff fff7 	bl	30858 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0003086a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
   3086a:	2801      	cmp	r0, #1
   3086c:	b507      	push	{r0, r1, r2, lr}
   3086e:	d903      	bls.n	30878 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
   30870:	f851 0c14 	ldr.w	r0, [r1, #-20]
   30874:	f7ff ffd8 	bl	30828 <_ZN10__cxxabiv111__terminateEPFvvE>
   30878:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   3087c:	e8d3 2fef 	ldaex	r2, [r3]
   30880:	3a01      	subs	r2, #1
   30882:	e8c3 2fe0 	stlex	r0, r2, [r3]
   30886:	2800      	cmp	r0, #0
   30888:	d1f8      	bne.n	3087c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x12>
   3088a:	b962      	cbnz	r2, 308a6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
   3088c:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   30890:	f101 0058 	add.w	r0, r1, #88	; 0x58
   30894:	b113      	cbz	r3, 3089c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x32>
   30896:	9001      	str	r0, [sp, #4]
   30898:	4798      	blx	r3
   3089a:	9801      	ldr	r0, [sp, #4]
   3089c:	b003      	add	sp, #12
   3089e:	f85d eb04 	ldr.w	lr, [sp], #4
   308a2:	f7f1 bd55 	b.w	22350 <__cxa_free_exception>
   308a6:	b003      	add	sp, #12
   308a8:	f85d fb04 	ldr.w	pc, [sp], #4

000308ac <__cxa_throw>:
   308ac:	b513      	push	{r0, r1, r4, lr}
   308ae:	4604      	mov	r4, r0
   308b0:	e9cd 2100 	strd	r2, r1, [sp]
   308b4:	f7f1 feb6 	bl	22624 <__cxa_get_globals>
   308b8:	6843      	ldr	r3, [r0, #4]
   308ba:	3301      	adds	r3, #1
   308bc:	e9dd 2100 	ldrd	r2, r1, [sp]
   308c0:	6043      	str	r3, [r0, #4]
   308c2:	4620      	mov	r0, r4
   308c4:	f7f1 fd7c 	bl	223c0 <__cxa_init_primary_exception>
   308c8:	2301      	movs	r3, #1
   308ca:	4604      	mov	r4, r0
   308cc:	f844 3b28 	str.w	r3, [r4], #40
   308d0:	4620      	mov	r0, r4
   308d2:	f7e0 fed5 	bl	11680 <_Unwind_RaiseException>
   308d6:	4620      	mov	r0, r4
   308d8:	f000 f8e5 	bl	30aa6 <__cxa_begin_catch>
   308dc:	f7ff ffb7 	bl	3084e <_ZSt9terminatev>

000308e0 <__cxa_rethrow>:
   308e0:	b510      	push	{r4, lr}
   308e2:	f7f1 fe9f 	bl	22624 <__cxa_get_globals>
   308e6:	e9d0 4200 	ldrd	r4, r2, [r0]
   308ea:	3201      	adds	r2, #1
   308ec:	6042      	str	r2, [r0, #4]
   308ee:	b34c      	cbz	r4, 30944 <__cxa_rethrow+0x64>
   308f0:	f894 2020 	ldrb.w	r2, [r4, #32]
   308f4:	2a47      	cmp	r2, #71	; 0x47
   308f6:	d127      	bne.n	30948 <__cxa_rethrow+0x68>
   308f8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   308fc:	2a4e      	cmp	r2, #78	; 0x4e
   308fe:	d123      	bne.n	30948 <__cxa_rethrow+0x68>
   30900:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   30904:	2a55      	cmp	r2, #85	; 0x55
   30906:	d11f      	bne.n	30948 <__cxa_rethrow+0x68>
   30908:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   3090c:	2a43      	cmp	r2, #67	; 0x43
   3090e:	d11b      	bne.n	30948 <__cxa_rethrow+0x68>
   30910:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   30914:	2a43      	cmp	r2, #67	; 0x43
   30916:	d117      	bne.n	30948 <__cxa_rethrow+0x68>
   30918:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   3091c:	2a2b      	cmp	r2, #43	; 0x2b
   3091e:	d113      	bne.n	30948 <__cxa_rethrow+0x68>
   30920:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   30924:	2a2b      	cmp	r2, #43	; 0x2b
   30926:	d10f      	bne.n	30948 <__cxa_rethrow+0x68>
   30928:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   3092c:	2a01      	cmp	r2, #1
   3092e:	d80b      	bhi.n	30948 <__cxa_rethrow+0x68>
   30930:	6962      	ldr	r2, [r4, #20]
   30932:	4252      	negs	r2, r2
   30934:	6162      	str	r2, [r4, #20]
   30936:	3420      	adds	r4, #32
   30938:	4620      	mov	r0, r4
   3093a:	f7e0 fec5 	bl	116c8 <_Unwind_Resume_or_Rethrow>
   3093e:	4620      	mov	r0, r4
   30940:	f000 f8b1 	bl	30aa6 <__cxa_begin_catch>
   30944:	f7ff ff83 	bl	3084e <_ZSt9terminatev>
   30948:	2200      	movs	r2, #0
   3094a:	6002      	str	r2, [r0, #0]
   3094c:	e7f3      	b.n	30936 <__cxa_rethrow+0x56>

0003094e <_ZNSt9bad_allocD0Ev>:
   3094e:	b510      	push	{r4, lr}
   30950:	4604      	mov	r4, r0
   30952:	f7f1 fd83 	bl	2245c <_ZNSt9bad_allocD1Ev>
   30956:	2104      	movs	r1, #4
   30958:	4620      	mov	r0, r4
   3095a:	f7ff ff44 	bl	307e6 <_ZdlPvj>
   3095e:	4620      	mov	r0, r4
   30960:	bd10      	pop	{r4, pc}

00030962 <__cxa_end_cleanup>:
   30962:	b41e      	push	{r1, r2, r3, r4}
   30964:	f000 f83d 	bl	309e2 <__gnu_end_cleanup>
   30968:	bc1e      	pop	{r1, r2, r3, r4}
   3096a:	f7e0 fe9b 	bl	116a4 <_Unwind_Resume>

0003096e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   3096e:	7803      	ldrb	r3, [r0, #0]
   30970:	2b47      	cmp	r3, #71	; 0x47
   30972:	d117      	bne.n	309a4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30974:	7843      	ldrb	r3, [r0, #1]
   30976:	2b4e      	cmp	r3, #78	; 0x4e
   30978:	d114      	bne.n	309a4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   3097a:	7883      	ldrb	r3, [r0, #2]
   3097c:	2b55      	cmp	r3, #85	; 0x55
   3097e:	d111      	bne.n	309a4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30980:	78c3      	ldrb	r3, [r0, #3]
   30982:	2b43      	cmp	r3, #67	; 0x43
   30984:	d10e      	bne.n	309a4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30986:	7903      	ldrb	r3, [r0, #4]
   30988:	2b43      	cmp	r3, #67	; 0x43
   3098a:	d10b      	bne.n	309a4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   3098c:	7943      	ldrb	r3, [r0, #5]
   3098e:	2b2b      	cmp	r3, #43	; 0x2b
   30990:	d108      	bne.n	309a4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30992:	7983      	ldrb	r3, [r0, #6]
   30994:	2b2b      	cmp	r3, #43	; 0x2b
   30996:	d105      	bne.n	309a4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30998:	79c0      	ldrb	r0, [r0, #7]
   3099a:	2801      	cmp	r0, #1
   3099c:	bf8c      	ite	hi
   3099e:	2000      	movhi	r0, #0
   309a0:	2001      	movls	r0, #1
   309a2:	4770      	bx	lr
   309a4:	2000      	movs	r0, #0
   309a6:	4770      	bx	lr

000309a8 <__cxa_begin_cleanup>:
   309a8:	b510      	push	{r4, lr}
   309aa:	4604      	mov	r4, r0
   309ac:	f7f1 fe3a 	bl	22624 <__cxa_get_globals>
   309b0:	4602      	mov	r2, r0
   309b2:	4620      	mov	r0, r4
   309b4:	f1a4 0120 	sub.w	r1, r4, #32
   309b8:	f7ff ffd9 	bl	3096e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   309bc:	b160      	cbz	r0, 309d8 <__cxa_begin_cleanup+0x30>
   309be:	f854 3c04 	ldr.w	r3, [r4, #-4]
   309c2:	3301      	adds	r3, #1
   309c4:	2b01      	cmp	r3, #1
   309c6:	f844 3c04 	str.w	r3, [r4, #-4]
   309ca:	d103      	bne.n	309d4 <__cxa_begin_cleanup+0x2c>
   309cc:	6893      	ldr	r3, [r2, #8]
   309ce:	f844 3c08 	str.w	r3, [r4, #-8]
   309d2:	6091      	str	r1, [r2, #8]
   309d4:	2001      	movs	r0, #1
   309d6:	bd10      	pop	{r4, pc}
   309d8:	6893      	ldr	r3, [r2, #8]
   309da:	2b00      	cmp	r3, #0
   309dc:	d0f9      	beq.n	309d2 <__cxa_begin_cleanup+0x2a>
   309de:	f7ff ff36 	bl	3084e <_ZSt9terminatev>

000309e2 <__gnu_end_cleanup>:
   309e2:	b510      	push	{r4, lr}
   309e4:	f7f1 fe1e 	bl	22624 <__cxa_get_globals>
   309e8:	6882      	ldr	r2, [r0, #8]
   309ea:	4601      	mov	r1, r0
   309ec:	b90a      	cbnz	r2, 309f2 <__gnu_end_cleanup+0x10>
   309ee:	f7ff ff2e 	bl	3084e <_ZSt9terminatev>
   309f2:	f102 0420 	add.w	r4, r2, #32
   309f6:	4620      	mov	r0, r4
   309f8:	f7ff ffb9 	bl	3096e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   309fc:	b140      	cbz	r0, 30a10 <__gnu_end_cleanup+0x2e>
   309fe:	69d3      	ldr	r3, [r2, #28]
   30a00:	3b01      	subs	r3, #1
   30a02:	61d3      	str	r3, [r2, #28]
   30a04:	b913      	cbnz	r3, 30a0c <__gnu_end_cleanup+0x2a>
   30a06:	6990      	ldr	r0, [r2, #24]
   30a08:	6088      	str	r0, [r1, #8]
   30a0a:	6193      	str	r3, [r2, #24]
   30a0c:	4620      	mov	r0, r4
   30a0e:	bd10      	pop	{r4, pc}
   30a10:	6088      	str	r0, [r1, #8]
   30a12:	e7fb      	b.n	30a0c <__gnu_end_cleanup+0x2a>

00030a14 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   30a14:	7803      	ldrb	r3, [r0, #0]
   30a16:	2b47      	cmp	r3, #71	; 0x47
   30a18:	d117      	bne.n	30a4a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a1a:	7843      	ldrb	r3, [r0, #1]
   30a1c:	2b4e      	cmp	r3, #78	; 0x4e
   30a1e:	d114      	bne.n	30a4a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a20:	7883      	ldrb	r3, [r0, #2]
   30a22:	2b55      	cmp	r3, #85	; 0x55
   30a24:	d111      	bne.n	30a4a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a26:	78c3      	ldrb	r3, [r0, #3]
   30a28:	2b43      	cmp	r3, #67	; 0x43
   30a2a:	d10e      	bne.n	30a4a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a2c:	7903      	ldrb	r3, [r0, #4]
   30a2e:	2b43      	cmp	r3, #67	; 0x43
   30a30:	d10b      	bne.n	30a4a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a32:	7943      	ldrb	r3, [r0, #5]
   30a34:	2b2b      	cmp	r3, #43	; 0x2b
   30a36:	d108      	bne.n	30a4a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a38:	7983      	ldrb	r3, [r0, #6]
   30a3a:	2b2b      	cmp	r3, #43	; 0x2b
   30a3c:	d105      	bne.n	30a4a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a3e:	79c0      	ldrb	r0, [r0, #7]
   30a40:	2801      	cmp	r0, #1
   30a42:	bf8c      	ite	hi
   30a44:	2000      	movhi	r0, #0
   30a46:	2001      	movls	r0, #1
   30a48:	4770      	bx	lr
   30a4a:	2000      	movs	r0, #0
   30a4c:	4770      	bx	lr

00030a4e <__cxa_call_terminate>:
   30a4e:	b510      	push	{r4, lr}
   30a50:	4604      	mov	r4, r0
   30a52:	b148      	cbz	r0, 30a68 <__cxa_call_terminate+0x1a>
   30a54:	f000 f827 	bl	30aa6 <__cxa_begin_catch>
   30a58:	4620      	mov	r0, r4
   30a5a:	f7ff ffdb 	bl	30a14 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   30a5e:	b118      	cbz	r0, 30a68 <__cxa_call_terminate+0x1a>
   30a60:	f854 0c14 	ldr.w	r0, [r4, #-20]
   30a64:	f7ff fee0 	bl	30828 <_ZN10__cxxabiv111__terminateEPFvvE>
   30a68:	f7ff fef1 	bl	3084e <_ZSt9terminatev>

00030a6c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
   30a6c:	7803      	ldrb	r3, [r0, #0]
   30a6e:	2b47      	cmp	r3, #71	; 0x47
   30a70:	d117      	bne.n	30aa2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a72:	7843      	ldrb	r3, [r0, #1]
   30a74:	2b4e      	cmp	r3, #78	; 0x4e
   30a76:	d114      	bne.n	30aa2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a78:	7883      	ldrb	r3, [r0, #2]
   30a7a:	2b55      	cmp	r3, #85	; 0x55
   30a7c:	d111      	bne.n	30aa2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a7e:	78c3      	ldrb	r3, [r0, #3]
   30a80:	2b43      	cmp	r3, #67	; 0x43
   30a82:	d10e      	bne.n	30aa2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a84:	7903      	ldrb	r3, [r0, #4]
   30a86:	2b43      	cmp	r3, #67	; 0x43
   30a88:	d10b      	bne.n	30aa2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a8a:	7943      	ldrb	r3, [r0, #5]
   30a8c:	2b2b      	cmp	r3, #43	; 0x2b
   30a8e:	d108      	bne.n	30aa2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a90:	7983      	ldrb	r3, [r0, #6]
   30a92:	2b2b      	cmp	r3, #43	; 0x2b
   30a94:	d105      	bne.n	30aa2 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
   30a96:	79c0      	ldrb	r0, [r0, #7]
   30a98:	2801      	cmp	r0, #1
   30a9a:	bf8c      	ite	hi
   30a9c:	2000      	movhi	r0, #0
   30a9e:	2001      	movls	r0, #1
   30aa0:	4770      	bx	lr
   30aa2:	2000      	movs	r0, #0
   30aa4:	4770      	bx	lr

00030aa6 <__cxa_begin_catch>:
   30aa6:	b538      	push	{r3, r4, r5, lr}
   30aa8:	4604      	mov	r4, r0
   30aaa:	f7f1 fdbb 	bl	22624 <__cxa_get_globals>
   30aae:	4602      	mov	r2, r0
   30ab0:	6805      	ldr	r5, [r0, #0]
   30ab2:	4620      	mov	r0, r4
   30ab4:	f1a4 0120 	sub.w	r1, r4, #32
   30ab8:	f7ff ffd8 	bl	30a6c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   30abc:	b928      	cbnz	r0, 30aca <__cxa_begin_catch+0x24>
   30abe:	b10d      	cbz	r5, 30ac4 <__cxa_begin_catch+0x1e>
   30ac0:	f7ff fec5 	bl	3084e <_ZSt9terminatev>
   30ac4:	6011      	str	r1, [r2, #0]
   30ac6:	4628      	mov	r0, r5
   30ac8:	bd38      	pop	{r3, r4, r5, pc}
   30aca:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   30ace:	4620      	mov	r0, r4
   30ad0:	2b00      	cmp	r3, #0
   30ad2:	bfb4      	ite	lt
   30ad4:	f1c3 0301 	rsblt	r3, r3, #1
   30ad8:	3301      	addge	r3, #1
   30ada:	428d      	cmp	r5, r1
   30adc:	f844 3c0c 	str.w	r3, [r4, #-12]
   30ae0:	6853      	ldr	r3, [r2, #4]
   30ae2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   30ae6:	6053      	str	r3, [r2, #4]
   30ae8:	bf1c      	itt	ne
   30aea:	f844 5c10 	strne.w	r5, [r4, #-16]
   30aee:	6011      	strne	r1, [r2, #0]
   30af0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   30af2:	f7e0 f9e9 	bl	10ec8 <_Unwind_Complete>
   30af6:	e7e6      	b.n	30ac6 <__cxa_begin_catch+0x20>

00030af8 <__cxa_end_catch>:
   30af8:	b510      	push	{r4, lr}
   30afa:	f7f1 fd8f 	bl	2261c <__cxa_get_globals_fast>
   30afe:	6802      	ldr	r2, [r0, #0]
   30b00:	4601      	mov	r1, r0
   30b02:	b19a      	cbz	r2, 30b2c <__cxa_end_catch+0x34>
   30b04:	f102 0420 	add.w	r4, r2, #32
   30b08:	4620      	mov	r0, r4
   30b0a:	f7ff ffaf 	bl	30a6c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
   30b0e:	b928      	cbnz	r0, 30b1c <__cxa_end_catch+0x24>
   30b10:	6008      	str	r0, [r1, #0]
   30b12:	4620      	mov	r0, r4
   30b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30b18:	f7e0 b9d8 	b.w	10ecc <_Unwind_DeleteException>
   30b1c:	6953      	ldr	r3, [r2, #20]
   30b1e:	2b00      	cmp	r3, #0
   30b20:	da05      	bge.n	30b2e <__cxa_end_catch+0x36>
   30b22:	3301      	adds	r3, #1
   30b24:	d101      	bne.n	30b2a <__cxa_end_catch+0x32>
   30b26:	6910      	ldr	r0, [r2, #16]
   30b28:	6008      	str	r0, [r1, #0]
   30b2a:	6153      	str	r3, [r2, #20]
   30b2c:	bd10      	pop	{r4, pc}
   30b2e:	3b01      	subs	r3, #1
   30b30:	d102      	bne.n	30b38 <__cxa_end_catch+0x40>
   30b32:	6913      	ldr	r3, [r2, #16]
   30b34:	600b      	str	r3, [r1, #0]
   30b36:	e7ec      	b.n	30b12 <__cxa_end_catch+0x1a>
   30b38:	1c59      	adds	r1, r3, #1
   30b3a:	d1f6      	bne.n	30b2a <__cxa_end_catch+0x32>
   30b3c:	f7ff fe87 	bl	3084e <_ZSt9terminatev>

00030b40 <_ZL12read_uleb128PKhPm>:
   30b40:	2300      	movs	r3, #0
   30b42:	461a      	mov	r2, r3
   30b44:	b530      	push	{r4, r5, lr}
   30b46:	f810 5b01 	ldrb.w	r5, [r0], #1
   30b4a:	f005 047f 	and.w	r4, r5, #127	; 0x7f
   30b4e:	4094      	lsls	r4, r2
   30b50:	3207      	adds	r2, #7
   30b52:	4323      	orrs	r3, r4
   30b54:	062c      	lsls	r4, r5, #24
   30b56:	d4f6      	bmi.n	30b46 <_ZL12read_uleb128PKhPm+0x6>
   30b58:	600b      	str	r3, [r1, #0]
   30b5a:	bd30      	pop	{r4, r5, pc}

00030b5c <_ZL12read_sleb128PKhPl>:
   30b5c:	2300      	movs	r3, #0
   30b5e:	461a      	mov	r2, r3
   30b60:	b530      	push	{r4, r5, lr}
   30b62:	f810 4b01 	ldrb.w	r4, [r0], #1
   30b66:	f004 057f 	and.w	r5, r4, #127	; 0x7f
   30b6a:	4095      	lsls	r5, r2
   30b6c:	3207      	adds	r2, #7
   30b6e:	432b      	orrs	r3, r5
   30b70:	0625      	lsls	r5, r4, #24
   30b72:	d4f6      	bmi.n	30b62 <_ZL12read_sleb128PKhPl+0x6>
   30b74:	2a1f      	cmp	r2, #31
   30b76:	d806      	bhi.n	30b86 <_ZL12read_sleb128PKhPl+0x2a>
   30b78:	0664      	lsls	r4, r4, #25
   30b7a:	bf42      	ittt	mi
   30b7c:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
   30b80:	fa04 f202 	lslmi.w	r2, r4, r2
   30b84:	4313      	orrmi	r3, r2
   30b86:	600b      	str	r3, [r1, #0]
   30b88:	bd30      	pop	{r4, r5, pc}

00030b8a <_ZL28read_encoded_value_with_basehjPKhPj>:
   30b8a:	2850      	cmp	r0, #80	; 0x50
   30b8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   30b90:	4606      	mov	r6, r0
   30b92:	4688      	mov	r8, r1
   30b94:	4615      	mov	r5, r2
   30b96:	461f      	mov	r7, r3
   30b98:	d108      	bne.n	30bac <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
   30b9a:	3203      	adds	r2, #3
   30b9c:	f022 0003 	bic.w	r0, r2, #3
   30ba0:	f850 4b04 	ldr.w	r4, [r0], #4
   30ba4:	603c      	str	r4, [r7, #0]
   30ba6:	b002      	add	sp, #8
   30ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   30bac:	f000 030f 	and.w	r3, r0, #15
   30bb0:	2b0c      	cmp	r3, #12
   30bb2:	d82e      	bhi.n	30c12 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
   30bb4:	e8df f003 	tbb	[pc, r3]
   30bb8:	251d0725 	.word	0x251d0725
   30bbc:	2d2d2d29 	.word	0x2d2d2d29
   30bc0:	2521182d 	.word	0x2521182d
   30bc4:	29          	.byte	0x29
   30bc5:	00          	.byte	0x00
   30bc6:	a901      	add	r1, sp, #4
   30bc8:	4628      	mov	r0, r5
   30bca:	f7ff ffb9 	bl	30b40 <_ZL12read_uleb128PKhPm>
   30bce:	9c01      	ldr	r4, [sp, #4]
   30bd0:	2c00      	cmp	r4, #0
   30bd2:	d0e7      	beq.n	30ba4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
   30bd4:	f006 0370 	and.w	r3, r6, #112	; 0x70
   30bd8:	2b10      	cmp	r3, #16
   30bda:	bf08      	it	eq
   30bdc:	46a8      	moveq	r8, r5
   30bde:	0633      	lsls	r3, r6, #24
   30be0:	4444      	add	r4, r8
   30be2:	bf48      	it	mi
   30be4:	6824      	ldrmi	r4, [r4, #0]
   30be6:	e7dd      	b.n	30ba4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
   30be8:	a901      	add	r1, sp, #4
   30bea:	4628      	mov	r0, r5
   30bec:	f7ff ffb6 	bl	30b5c <_ZL12read_sleb128PKhPl>
   30bf0:	e7ed      	b.n	30bce <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
   30bf2:	4628      	mov	r0, r5
   30bf4:	f830 4b02 	ldrh.w	r4, [r0], #2
   30bf8:	e7ea      	b.n	30bd0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
   30bfa:	4628      	mov	r0, r5
   30bfc:	f930 4b02 	ldrsh.w	r4, [r0], #2
   30c00:	e7e6      	b.n	30bd0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
   30c02:	4628      	mov	r0, r5
   30c04:	f850 4b04 	ldr.w	r4, [r0], #4
   30c08:	e7e2      	b.n	30bd0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
   30c0a:	4628      	mov	r0, r5
   30c0c:	f850 4b08 	ldr.w	r4, [r0], #8
   30c10:	e7de      	b.n	30bd0 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
   30c12:	f000 f906 	bl	30e22 <abort>

00030c16 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
   30c16:	b508      	push	{r3, lr}
   30c18:	4603      	mov	r3, r0
   30c1a:	4608      	mov	r0, r1
   30c1c:	2bff      	cmp	r3, #255	; 0xff
   30c1e:	d010      	beq.n	30c42 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   30c20:	f003 0270 	and.w	r2, r3, #112	; 0x70
   30c24:	2a30      	cmp	r2, #48	; 0x30
   30c26:	d012      	beq.n	30c4e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
   30c28:	d807      	bhi.n	30c3a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
   30c2a:	2a20      	cmp	r2, #32
   30c2c:	d00b      	beq.n	30c46 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
   30c2e:	d802      	bhi.n	30c36 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   30c30:	f013 0f60 	tst.w	r3, #96	; 0x60
   30c34:	d005      	beq.n	30c42 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
   30c36:	f000 f8f4 	bl	30e22 <abort>
   30c3a:	2a40      	cmp	r2, #64	; 0x40
   30c3c:	d00b      	beq.n	30c56 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
   30c3e:	2a50      	cmp	r2, #80	; 0x50
   30c40:	d1f9      	bne.n	30c36 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
   30c42:	2000      	movs	r0, #0
   30c44:	bd08      	pop	{r3, pc}
   30c46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   30c4a:	f000 bb5d 	b.w	31308 <_Unwind_GetTextRelBase>
   30c4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   30c52:	f000 bb56 	b.w	31302 <_Unwind_GetDataRelBase>
   30c56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   30c5a:	f7e0 bf23 	b.w	11aa4 <_Unwind_GetRegionStart>

00030c5e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
   30c5e:	b513      	push	{r0, r1, r4, lr}
   30c60:	460c      	mov	r4, r1
   30c62:	4601      	mov	r1, r0
   30c64:	4620      	mov	r0, r4
   30c66:	e9cd 3200 	strd	r3, r2, [sp]
   30c6a:	f7ff ffd4 	bl	30c16 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
   30c6e:	4601      	mov	r1, r0
   30c70:	4620      	mov	r0, r4
   30c72:	e9dd 3200 	ldrd	r3, r2, [sp]
   30c76:	b002      	add	sp, #8
   30c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30c7c:	f7ff bf85 	b.w	30b8a <_ZL28read_encoded_value_with_basehjPKhPj>

00030c80 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
   30c80:	b573      	push	{r0, r1, r4, r5, r6, lr}
   30c82:	460c      	mov	r4, r1
   30c84:	4615      	mov	r5, r2
   30c86:	4606      	mov	r6, r0
   30c88:	b328      	cbz	r0, 30cd6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
   30c8a:	f7e0 ff0b 	bl	11aa4 <_Unwind_GetRegionStart>
   30c8e:	4603      	mov	r3, r0
   30c90:	4620      	mov	r0, r4
   30c92:	602b      	str	r3, [r5, #0]
   30c94:	f810 1b01 	ldrb.w	r1, [r0], #1
   30c98:	29ff      	cmp	r1, #255	; 0xff
   30c9a:	d01e      	beq.n	30cda <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
   30c9c:	4602      	mov	r2, r0
   30c9e:	1d2b      	adds	r3, r5, #4
   30ca0:	4630      	mov	r0, r6
   30ca2:	f7ff ffdc 	bl	30c5e <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
   30ca6:	f810 3b01 	ldrb.w	r3, [r0], #1
   30caa:	2bff      	cmp	r3, #255	; 0xff
   30cac:	752b      	strb	r3, [r5, #20]
   30cae:	d016      	beq.n	30cde <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
   30cb0:	2310      	movs	r3, #16
   30cb2:	a901      	add	r1, sp, #4
   30cb4:	752b      	strb	r3, [r5, #20]
   30cb6:	f7ff ff43 	bl	30b40 <_ZL12read_uleb128PKhPm>
   30cba:	9b01      	ldr	r3, [sp, #4]
   30cbc:	4403      	add	r3, r0
   30cbe:	60eb      	str	r3, [r5, #12]
   30cc0:	a901      	add	r1, sp, #4
   30cc2:	f810 3b01 	ldrb.w	r3, [r0], #1
   30cc6:	756b      	strb	r3, [r5, #21]
   30cc8:	f7ff ff3a 	bl	30b40 <_ZL12read_uleb128PKhPm>
   30ccc:	9b01      	ldr	r3, [sp, #4]
   30cce:	4403      	add	r3, r0
   30cd0:	612b      	str	r3, [r5, #16]
   30cd2:	b002      	add	sp, #8
   30cd4:	bd70      	pop	{r4, r5, r6, pc}
   30cd6:	4603      	mov	r3, r0
   30cd8:	e7da      	b.n	30c90 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
   30cda:	606b      	str	r3, [r5, #4]
   30cdc:	e7e3      	b.n	30ca6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
   30cde:	2300      	movs	r3, #0
   30ce0:	e7ed      	b.n	30cbe <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

00030ce2 <_Unwind_GetGR>:
   30ce2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   30ce4:	ab03      	add	r3, sp, #12
   30ce6:	460a      	mov	r2, r1
   30ce8:	9300      	str	r3, [sp, #0]
   30cea:	2300      	movs	r3, #0
   30cec:	4619      	mov	r1, r3
   30cee:	f7e0 f8f3 	bl	10ed8 <_Unwind_VRS_Get>
   30cf2:	9803      	ldr	r0, [sp, #12]
   30cf4:	b005      	add	sp, #20
   30cf6:	f85d fb04 	ldr.w	pc, [sp], #4

00030cfa <__cxa_current_exception_type>:
   30cfa:	b508      	push	{r3, lr}
   30cfc:	f7f1 fc92 	bl	22624 <__cxa_get_globals>
   30d00:	6800      	ldr	r0, [r0, #0]
   30d02:	b138      	cbz	r0, 30d14 <__cxa_current_exception_type+0x1a>
   30d04:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
   30d08:	6803      	ldr	r3, [r0, #0]
   30d0a:	2a01      	cmp	r2, #1
   30d0c:	bf08      	it	eq
   30d0e:	f1a3 0078 	subeq.w	r0, r3, #120	; 0x78
   30d12:	6800      	ldr	r0, [r0, #0]
   30d14:	bd08      	pop	{r3, pc}

00030d16 <__ieee754_sqrtf>:
   30d16:	b480      	push	{r7}
   30d18:	b085      	sub	sp, #20
   30d1a:	af00      	add	r7, sp, #0
   30d1c:	6078      	str	r0, [r7, #4]
   30d1e:	edd7 7a01 	vldr	s15, [r7, #4]
   30d22:	eef1 7ae7 	vsqrt.f32	s15, s15
   30d26:	edc7 7a03 	vstr	s15, [r7, #12]
   30d2a:	68fb      	ldr	r3, [r7, #12]
   30d2c:	4618      	mov	r0, r3
   30d2e:	3714      	adds	r7, #20
   30d30:	46bd      	mov	sp, r7
   30d32:	f85d 7b04 	ldr.w	r7, [sp], #4
   30d36:	4770      	bx	lr

00030d38 <matherr>:
   30d38:	b580      	push	{r7, lr}
   30d3a:	b084      	sub	sp, #16
   30d3c:	af00      	add	r7, sp, #0
   30d3e:	6078      	str	r0, [r7, #4]
   30d40:	2300      	movs	r3, #0
   30d42:	60fb      	str	r3, [r7, #12]
   30d44:	687b      	ldr	r3, [r7, #4]
   30d46:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
   30d4a:	687b      	ldr	r3, [r7, #4]
   30d4c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   30d50:	f7df fe14 	bl	1097c <__aeabi_dcmpeq>
   30d54:	4603      	mov	r3, r0
   30d56:	2b00      	cmp	r3, #0
   30d58:	d101      	bne.n	30d5e <matherr+0x26>
   30d5a:	2300      	movs	r3, #0
   30d5c:	e000      	b.n	30d60 <matherr+0x28>
   30d5e:	68fb      	ldr	r3, [r7, #12]
   30d60:	4618      	mov	r0, r3
   30d62:	3710      	adds	r7, #16
   30d64:	46bd      	mov	sp, r7
   30d66:	bd80      	pop	{r7, pc}

00030d68 <fabsf>:
   30d68:	b480      	push	{r7}
   30d6a:	b087      	sub	sp, #28
   30d6c:	af00      	add	r7, sp, #0
   30d6e:	6078      	str	r0, [r7, #4]
   30d70:	687b      	ldr	r3, [r7, #4]
   30d72:	613b      	str	r3, [r7, #16]
   30d74:	693b      	ldr	r3, [r7, #16]
   30d76:	617b      	str	r3, [r7, #20]
   30d78:	697b      	ldr	r3, [r7, #20]
   30d7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   30d7e:	60fb      	str	r3, [r7, #12]
   30d80:	68fb      	ldr	r3, [r7, #12]
   30d82:	607b      	str	r3, [r7, #4]
   30d84:	687b      	ldr	r3, [r7, #4]
   30d86:	4618      	mov	r0, r3
   30d88:	371c      	adds	r7, #28
   30d8a:	46bd      	mov	sp, r7
   30d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   30d90:	4770      	bx	lr

00030d92 <finitef>:
   30d92:	b480      	push	{r7}
   30d94:	b085      	sub	sp, #20
   30d96:	af00      	add	r7, sp, #0
   30d98:	6078      	str	r0, [r7, #4]
   30d9a:	687b      	ldr	r3, [r7, #4]
   30d9c:	60bb      	str	r3, [r7, #8]
   30d9e:	68bb      	ldr	r3, [r7, #8]
   30da0:	60fb      	str	r3, [r7, #12]
   30da2:	68fb      	ldr	r3, [r7, #12]
   30da4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   30da8:	60fb      	str	r3, [r7, #12]
   30daa:	68fb      	ldr	r3, [r7, #12]
   30dac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
   30db0:	bfb4      	ite	lt
   30db2:	2301      	movlt	r3, #1
   30db4:	2300      	movge	r3, #0
   30db6:	b2db      	uxtb	r3, r3
   30db8:	4618      	mov	r0, r3
   30dba:	3714      	adds	r7, #20
   30dbc:	46bd      	mov	sp, r7
   30dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
   30dc2:	4770      	bx	lr

00030dc4 <floorf>:
   30dc4:	b480      	push	{r7}
   30dc6:	b085      	sub	sp, #20
   30dc8:	af00      	add	r7, sp, #0
   30dca:	6078      	str	r0, [r7, #4]
   30dcc:	edd7 7a01 	vldr	s15, [r7, #4]
   30dd0:	fefb 7a67 	vrintm.f32	s15, s15
   30dd4:	edc7 7a03 	vstr	s15, [r7, #12]
   30dd8:	68fb      	ldr	r3, [r7, #12]
   30dda:	4618      	mov	r0, r3
   30ddc:	3714      	adds	r7, #20
   30dde:	46bd      	mov	sp, r7
   30de0:	f85d 7b04 	ldr.w	r7, [sp], #4
   30de4:	4770      	bx	lr

00030de6 <copysignf>:
   30de6:	b480      	push	{r7}
   30de8:	b089      	sub	sp, #36	; 0x24
   30dea:	af00      	add	r7, sp, #0
   30dec:	6078      	str	r0, [r7, #4]
   30dee:	6039      	str	r1, [r7, #0]
   30df0:	687b      	ldr	r3, [r7, #4]
   30df2:	617b      	str	r3, [r7, #20]
   30df4:	697b      	ldr	r3, [r7, #20]
   30df6:	61fb      	str	r3, [r7, #28]
   30df8:	683b      	ldr	r3, [r7, #0]
   30dfa:	613b      	str	r3, [r7, #16]
   30dfc:	693b      	ldr	r3, [r7, #16]
   30dfe:	61bb      	str	r3, [r7, #24]
   30e00:	69fb      	ldr	r3, [r7, #28]
   30e02:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
   30e06:	69bb      	ldr	r3, [r7, #24]
   30e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
   30e0c:	4313      	orrs	r3, r2
   30e0e:	60fb      	str	r3, [r7, #12]
   30e10:	68fb      	ldr	r3, [r7, #12]
   30e12:	607b      	str	r3, [r7, #4]
   30e14:	687b      	ldr	r3, [r7, #4]
   30e16:	4618      	mov	r0, r3
   30e18:	3724      	adds	r7, #36	; 0x24
   30e1a:	46bd      	mov	sp, r7
   30e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
   30e20:	4770      	bx	lr

00030e22 <abort>:
   30e22:	2006      	movs	r0, #6
   30e24:	b508      	push	{r3, lr}
   30e26:	f7f4 ff1f 	bl	25c68 <raise>
   30e2a:	2001      	movs	r0, #1
   30e2c:	f7e3 f9c8 	bl	141c0 <_exit>

00030e30 <memchr>:
   30e30:	b2c9      	uxtb	r1, r1
   30e32:	4402      	add	r2, r0
   30e34:	b510      	push	{r4, lr}
   30e36:	4290      	cmp	r0, r2
   30e38:	4603      	mov	r3, r0
   30e3a:	d101      	bne.n	30e40 <memchr+0x10>
   30e3c:	2300      	movs	r3, #0
   30e3e:	e003      	b.n	30e48 <memchr+0x18>
   30e40:	781c      	ldrb	r4, [r3, #0]
   30e42:	3001      	adds	r0, #1
   30e44:	428c      	cmp	r4, r1
   30e46:	d1f6      	bne.n	30e36 <memchr+0x6>
   30e48:	4618      	mov	r0, r3
   30e4a:	bd10      	pop	{r4, pc}

00030e4c <memcmp>:
   30e4c:	b530      	push	{r4, r5, lr}
   30e4e:	3901      	subs	r1, #1
   30e50:	2400      	movs	r4, #0
   30e52:	42a2      	cmp	r2, r4
   30e54:	d101      	bne.n	30e5a <memcmp+0xe>
   30e56:	2000      	movs	r0, #0
   30e58:	e005      	b.n	30e66 <memcmp+0x1a>
   30e5a:	5d03      	ldrb	r3, [r0, r4]
   30e5c:	3401      	adds	r4, #1
   30e5e:	5d0d      	ldrb	r5, [r1, r4]
   30e60:	42ab      	cmp	r3, r5
   30e62:	d0f6      	beq.n	30e52 <memcmp+0x6>
   30e64:	1b58      	subs	r0, r3, r5
   30e66:	bd30      	pop	{r4, r5, pc}

00030e68 <memcpy>:
   30e68:	440a      	add	r2, r1
   30e6a:	1e43      	subs	r3, r0, #1
   30e6c:	4291      	cmp	r1, r2
   30e6e:	d100      	bne.n	30e72 <memcpy+0xa>
   30e70:	4770      	bx	lr
   30e72:	b510      	push	{r4, lr}
   30e74:	f811 4b01 	ldrb.w	r4, [r1], #1
   30e78:	4291      	cmp	r1, r2
   30e7a:	f803 4f01 	strb.w	r4, [r3, #1]!
   30e7e:	d1f9      	bne.n	30e74 <memcpy+0xc>
   30e80:	bd10      	pop	{r4, pc}

00030e82 <memmove>:
   30e82:	4288      	cmp	r0, r1
   30e84:	b510      	push	{r4, lr}
   30e86:	eb01 0402 	add.w	r4, r1, r2
   30e8a:	d902      	bls.n	30e92 <memmove+0x10>
   30e8c:	4284      	cmp	r4, r0
   30e8e:	4623      	mov	r3, r4
   30e90:	d807      	bhi.n	30ea2 <memmove+0x20>
   30e92:	1e43      	subs	r3, r0, #1
   30e94:	42a1      	cmp	r1, r4
   30e96:	d008      	beq.n	30eaa <memmove+0x28>
   30e98:	f811 2b01 	ldrb.w	r2, [r1], #1
   30e9c:	f803 2f01 	strb.w	r2, [r3, #1]!
   30ea0:	e7f8      	b.n	30e94 <memmove+0x12>
   30ea2:	4402      	add	r2, r0
   30ea4:	4601      	mov	r1, r0
   30ea6:	428a      	cmp	r2, r1
   30ea8:	d100      	bne.n	30eac <memmove+0x2a>
   30eaa:	bd10      	pop	{r4, pc}
   30eac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   30eb0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   30eb4:	e7f7      	b.n	30ea6 <memmove+0x24>

00030eb6 <memset>:
   30eb6:	4402      	add	r2, r0
   30eb8:	4603      	mov	r3, r0
   30eba:	4293      	cmp	r3, r2
   30ebc:	d100      	bne.n	30ec0 <memset+0xa>
   30ebe:	4770      	bx	lr
   30ec0:	f803 1b01 	strb.w	r1, [r3], #1
   30ec4:	e7f9      	b.n	30eba <memset+0x4>

00030ec6 <_realloc_r>:
   30ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30ec8:	4607      	mov	r7, r0
   30eca:	4614      	mov	r4, r2
   30ecc:	460e      	mov	r6, r1
   30ece:	b921      	cbnz	r1, 30eda <_realloc_r+0x14>
   30ed0:	4611      	mov	r1, r2
   30ed2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   30ed6:	f7f4 bbe3 	b.w	256a0 <_malloc_r>
   30eda:	b922      	cbnz	r2, 30ee6 <_realloc_r+0x20>
   30edc:	4625      	mov	r5, r4
   30ede:	f7f4 fb8f 	bl	25600 <_free_r>
   30ee2:	4628      	mov	r0, r5
   30ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30ee6:	f000 f966 	bl	311b6 <_malloc_usable_size_r>
   30eea:	42a0      	cmp	r0, r4
   30eec:	d20f      	bcs.n	30f0e <_realloc_r+0x48>
   30eee:	4621      	mov	r1, r4
   30ef0:	4638      	mov	r0, r7
   30ef2:	f7f4 fbd5 	bl	256a0 <_malloc_r>
   30ef6:	4605      	mov	r5, r0
   30ef8:	2800      	cmp	r0, #0
   30efa:	d0f2      	beq.n	30ee2 <_realloc_r+0x1c>
   30efc:	4631      	mov	r1, r6
   30efe:	4622      	mov	r2, r4
   30f00:	f7ff ffb2 	bl	30e68 <memcpy>
   30f04:	4631      	mov	r1, r6
   30f06:	4638      	mov	r0, r7
   30f08:	f7f4 fb7a 	bl	25600 <_free_r>
   30f0c:	e7e9      	b.n	30ee2 <_realloc_r+0x1c>
   30f0e:	4635      	mov	r5, r6
   30f10:	e7e7      	b.n	30ee2 <_realloc_r+0x1c>

00030f12 <__sfputc_r>:
   30f12:	6893      	ldr	r3, [r2, #8]
   30f14:	3b01      	subs	r3, #1
   30f16:	2b00      	cmp	r3, #0
   30f18:	6093      	str	r3, [r2, #8]
   30f1a:	b410      	push	{r4}
   30f1c:	da08      	bge.n	30f30 <__sfputc_r+0x1e>
   30f1e:	6994      	ldr	r4, [r2, #24]
   30f20:	42a3      	cmp	r3, r4
   30f22:	db01      	blt.n	30f28 <__sfputc_r+0x16>
   30f24:	290a      	cmp	r1, #10
   30f26:	d103      	bne.n	30f30 <__sfputc_r+0x1e>
   30f28:	f85d 4b04 	ldr.w	r4, [sp], #4
   30f2c:	f7f4 bed6 	b.w	25cdc <__swbuf_r>
   30f30:	6813      	ldr	r3, [r2, #0]
   30f32:	1c58      	adds	r0, r3, #1
   30f34:	6010      	str	r0, [r2, #0]
   30f36:	4608      	mov	r0, r1
   30f38:	7019      	strb	r1, [r3, #0]
   30f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
   30f3e:	4770      	bx	lr

00030f40 <__sfputs_r>:
   30f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   30f42:	4606      	mov	r6, r0
   30f44:	460f      	mov	r7, r1
   30f46:	4614      	mov	r4, r2
   30f48:	18d5      	adds	r5, r2, r3
   30f4a:	42ac      	cmp	r4, r5
   30f4c:	d101      	bne.n	30f52 <__sfputs_r+0x12>
   30f4e:	2000      	movs	r0, #0
   30f50:	e007      	b.n	30f62 <__sfputs_r+0x22>
   30f52:	463a      	mov	r2, r7
   30f54:	f814 1b01 	ldrb.w	r1, [r4], #1
   30f58:	4630      	mov	r0, r6
   30f5a:	f7ff ffda 	bl	30f12 <__sfputc_r>
   30f5e:	1c43      	adds	r3, r0, #1
   30f60:	d1f3      	bne.n	30f4a <__sfputs_r+0xa>
   30f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00030f64 <_printf_common>:
   30f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30f68:	4616      	mov	r6, r2
   30f6a:	4699      	mov	r9, r3
   30f6c:	688a      	ldr	r2, [r1, #8]
   30f6e:	4607      	mov	r7, r0
   30f70:	690b      	ldr	r3, [r1, #16]
   30f72:	460c      	mov	r4, r1
   30f74:	f8dd 8020 	ldr.w	r8, [sp, #32]
   30f78:	4293      	cmp	r3, r2
   30f7a:	bfb8      	it	lt
   30f7c:	4613      	movlt	r3, r2
   30f7e:	6033      	str	r3, [r6, #0]
   30f80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   30f84:	b10a      	cbz	r2, 30f8a <_printf_common+0x26>
   30f86:	3301      	adds	r3, #1
   30f88:	6033      	str	r3, [r6, #0]
   30f8a:	6823      	ldr	r3, [r4, #0]
   30f8c:	0699      	lsls	r1, r3, #26
   30f8e:	bf42      	ittt	mi
   30f90:	6833      	ldrmi	r3, [r6, #0]
   30f92:	3302      	addmi	r3, #2
   30f94:	6033      	strmi	r3, [r6, #0]
   30f96:	6825      	ldr	r5, [r4, #0]
   30f98:	f015 0506 	ands.w	r5, r5, #6
   30f9c:	d106      	bne.n	30fac <_printf_common+0x48>
   30f9e:	f104 0a19 	add.w	sl, r4, #25
   30fa2:	68e3      	ldr	r3, [r4, #12]
   30fa4:	6832      	ldr	r2, [r6, #0]
   30fa6:	1a9b      	subs	r3, r3, r2
   30fa8:	42ab      	cmp	r3, r5
   30faa:	dc29      	bgt.n	31000 <_printf_common+0x9c>
   30fac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   30fb0:	1e13      	subs	r3, r2, #0
   30fb2:	6822      	ldr	r2, [r4, #0]
   30fb4:	bf18      	it	ne
   30fb6:	2301      	movne	r3, #1
   30fb8:	0692      	lsls	r2, r2, #26
   30fba:	d42e      	bmi.n	3101a <_printf_common+0xb6>
   30fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   30fc0:	4649      	mov	r1, r9
   30fc2:	4638      	mov	r0, r7
   30fc4:	47c0      	blx	r8
   30fc6:	3001      	adds	r0, #1
   30fc8:	d021      	beq.n	3100e <_printf_common+0xaa>
   30fca:	6823      	ldr	r3, [r4, #0]
   30fcc:	341a      	adds	r4, #26
   30fce:	f854 5c0e 	ldr.w	r5, [r4, #-14]
   30fd2:	f003 0306 	and.w	r3, r3, #6
   30fd6:	6832      	ldr	r2, [r6, #0]
   30fd8:	2600      	movs	r6, #0
   30fda:	2b04      	cmp	r3, #4
   30fdc:	f854 3c12 	ldr.w	r3, [r4, #-18]
   30fe0:	bf08      	it	eq
   30fe2:	1aad      	subeq	r5, r5, r2
   30fe4:	f854 2c0a 	ldr.w	r2, [r4, #-10]
   30fe8:	bf14      	ite	ne
   30fea:	2500      	movne	r5, #0
   30fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   30ff0:	4293      	cmp	r3, r2
   30ff2:	bfc4      	itt	gt
   30ff4:	1a9b      	subgt	r3, r3, r2
   30ff6:	18ed      	addgt	r5, r5, r3
   30ff8:	42b5      	cmp	r5, r6
   30ffa:	d11a      	bne.n	31032 <_printf_common+0xce>
   30ffc:	2000      	movs	r0, #0
   30ffe:	e008      	b.n	31012 <_printf_common+0xae>
   31000:	2301      	movs	r3, #1
   31002:	4652      	mov	r2, sl
   31004:	4649      	mov	r1, r9
   31006:	4638      	mov	r0, r7
   31008:	47c0      	blx	r8
   3100a:	3001      	adds	r0, #1
   3100c:	d103      	bne.n	31016 <_printf_common+0xb2>
   3100e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   31016:	3501      	adds	r5, #1
   31018:	e7c3      	b.n	30fa2 <_printf_common+0x3e>
   3101a:	18e1      	adds	r1, r4, r3
   3101c:	1c5a      	adds	r2, r3, #1
   3101e:	2030      	movs	r0, #48	; 0x30
   31020:	3302      	adds	r3, #2
   31022:	4422      	add	r2, r4
   31024:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   31028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   3102c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   31030:	e7c4      	b.n	30fbc <_printf_common+0x58>
   31032:	2301      	movs	r3, #1
   31034:	4622      	mov	r2, r4
   31036:	4649      	mov	r1, r9
   31038:	4638      	mov	r0, r7
   3103a:	47c0      	blx	r8
   3103c:	3001      	adds	r0, #1
   3103e:	d0e6      	beq.n	3100e <_printf_common+0xaa>
   31040:	3601      	adds	r6, #1
   31042:	e7d9      	b.n	30ff8 <_printf_common+0x94>

00031044 <_raise_r>:
   31044:	291f      	cmp	r1, #31
   31046:	b538      	push	{r3, r4, r5, lr}
   31048:	4604      	mov	r4, r0
   3104a:	460d      	mov	r5, r1
   3104c:	d904      	bls.n	31058 <_raise_r+0x14>
   3104e:	2316      	movs	r3, #22
   31050:	6003      	str	r3, [r0, #0]
   31052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31056:	bd38      	pop	{r3, r4, r5, pc}
   31058:	6c42      	ldr	r2, [r0, #68]	; 0x44
   3105a:	b112      	cbz	r2, 31062 <_raise_r+0x1e>
   3105c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   31060:	b94b      	cbnz	r3, 31076 <_raise_r+0x32>
   31062:	4620      	mov	r0, r4
   31064:	f000 f816 	bl	31094 <_getpid_r>
   31068:	462a      	mov	r2, r5
   3106a:	4601      	mov	r1, r0
   3106c:	4620      	mov	r0, r4
   3106e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   31072:	f7f4 be01 	b.w	25c78 <_kill_r>
   31076:	2b01      	cmp	r3, #1
   31078:	d00a      	beq.n	31090 <_raise_r+0x4c>
   3107a:	1c59      	adds	r1, r3, #1
   3107c:	d103      	bne.n	31086 <_raise_r+0x42>
   3107e:	2316      	movs	r3, #22
   31080:	6003      	str	r3, [r0, #0]
   31082:	2001      	movs	r0, #1
   31084:	e7e7      	b.n	31056 <_raise_r+0x12>
   31086:	2400      	movs	r4, #0
   31088:	4628      	mov	r0, r5
   3108a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   3108e:	4798      	blx	r3
   31090:	2000      	movs	r0, #0
   31092:	e7e0      	b.n	31056 <_raise_r+0x12>

00031094 <_getpid_r>:
   31094:	f7f5 bef6 	b.w	26e84 <_getpid>

00031098 <strcpy>:
   31098:	4603      	mov	r3, r0
   3109a:	f811 2b01 	ldrb.w	r2, [r1], #1
   3109e:	f803 2b01 	strb.w	r2, [r3], #1
   310a2:	2a00      	cmp	r2, #0
   310a4:	d1f9      	bne.n	3109a <strcpy+0x2>
   310a6:	4770      	bx	lr

000310a8 <strncmp>:
   310a8:	b510      	push	{r4, lr}
   310aa:	b16a      	cbz	r2, 310c8 <strncmp+0x20>
   310ac:	3901      	subs	r1, #1
   310ae:	1884      	adds	r4, r0, r2
   310b0:	f810 3b01 	ldrb.w	r3, [r0], #1
   310b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   310b8:	4293      	cmp	r3, r2
   310ba:	d103      	bne.n	310c4 <strncmp+0x1c>
   310bc:	42a0      	cmp	r0, r4
   310be:	d001      	beq.n	310c4 <strncmp+0x1c>
   310c0:	2b00      	cmp	r3, #0
   310c2:	d1f5      	bne.n	310b0 <strncmp+0x8>
   310c4:	1a98      	subs	r0, r3, r2
   310c6:	bd10      	pop	{r4, pc}
   310c8:	4610      	mov	r0, r2
   310ca:	e7fc      	b.n	310c6 <strncmp+0x1e>

000310cc <strncpy>:
   310cc:	3901      	subs	r1, #1
   310ce:	4603      	mov	r3, r0
   310d0:	b510      	push	{r4, lr}
   310d2:	b132      	cbz	r2, 310e2 <strncpy+0x16>
   310d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   310d8:	3a01      	subs	r2, #1
   310da:	f803 4b01 	strb.w	r4, [r3], #1
   310de:	2c00      	cmp	r4, #0
   310e0:	d1f7      	bne.n	310d2 <strncpy+0x6>
   310e2:	441a      	add	r2, r3
   310e4:	2100      	movs	r1, #0
   310e6:	4293      	cmp	r3, r2
   310e8:	d100      	bne.n	310ec <strncpy+0x20>
   310ea:	bd10      	pop	{r4, pc}
   310ec:	f803 1b01 	strb.w	r1, [r3], #1
   310f0:	e7f9      	b.n	310e6 <strncpy+0x1a>

000310f2 <__sfmoreglue>:
   310f2:	b570      	push	{r4, r5, r6, lr}
   310f4:	1e4a      	subs	r2, r1, #1
   310f6:	2564      	movs	r5, #100	; 0x64
   310f8:	460e      	mov	r6, r1
   310fa:	4355      	muls	r5, r2
   310fc:	f105 0170 	add.w	r1, r5, #112	; 0x70
   31100:	f7f4 face 	bl	256a0 <_malloc_r>
   31104:	4604      	mov	r4, r0
   31106:	b140      	cbz	r0, 3111a <__sfmoreglue+0x28>
   31108:	2100      	movs	r1, #0
   3110a:	f105 0264 	add.w	r2, r5, #100	; 0x64
   3110e:	e9c0 1600 	strd	r1, r6, [r0]
   31112:	300c      	adds	r0, #12
   31114:	60a0      	str	r0, [r4, #8]
   31116:	f7ff fece 	bl	30eb6 <memset>
   3111a:	4620      	mov	r0, r4
   3111c:	bd70      	pop	{r4, r5, r6, pc}

0003111e <_fwalk_reent>:
   3111e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   31122:	4606      	mov	r6, r0
   31124:	4688      	mov	r8, r1
   31126:	f100 0448 	add.w	r4, r0, #72	; 0x48
   3112a:	2700      	movs	r7, #0
   3112c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   31130:	f1b9 0901 	subs.w	r9, r9, #1
   31134:	d505      	bpl.n	31142 <_fwalk_reent+0x24>
   31136:	6824      	ldr	r4, [r4, #0]
   31138:	2c00      	cmp	r4, #0
   3113a:	d1f7      	bne.n	3112c <_fwalk_reent+0xe>
   3113c:	4638      	mov	r0, r7
   3113e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   31142:	89ab      	ldrh	r3, [r5, #12]
   31144:	2b01      	cmp	r3, #1
   31146:	d907      	bls.n	31158 <_fwalk_reent+0x3a>
   31148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   3114c:	3301      	adds	r3, #1
   3114e:	d003      	beq.n	31158 <_fwalk_reent+0x3a>
   31150:	4629      	mov	r1, r5
   31152:	4630      	mov	r0, r6
   31154:	47c0      	blx	r8
   31156:	4307      	orrs	r7, r0
   31158:	3564      	adds	r5, #100	; 0x64
   3115a:	e7e9      	b.n	31130 <_fwalk_reent+0x12>

0003115c <__swhatbuf_r>:
   3115c:	b570      	push	{r4, r5, r6, lr}
   3115e:	460e      	mov	r6, r1
   31160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   31164:	b096      	sub	sp, #88	; 0x58
   31166:	4614      	mov	r4, r2
   31168:	2900      	cmp	r1, #0
   3116a:	461d      	mov	r5, r3
   3116c:	da09      	bge.n	31182 <__swhatbuf_r+0x26>
   3116e:	89b3      	ldrh	r3, [r6, #12]
   31170:	2200      	movs	r2, #0
   31172:	f013 0080 	ands.w	r0, r3, #128	; 0x80
   31176:	602a      	str	r2, [r5, #0]
   31178:	d116      	bne.n	311a8 <__swhatbuf_r+0x4c>
   3117a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   3117e:	6023      	str	r3, [r4, #0]
   31180:	e015      	b.n	311ae <__swhatbuf_r+0x52>
   31182:	466a      	mov	r2, sp
   31184:	f7f5 f91a 	bl	263bc <_fstat_r>
   31188:	2800      	cmp	r0, #0
   3118a:	dbf0      	blt.n	3116e <__swhatbuf_r+0x12>
   3118c:	9a01      	ldr	r2, [sp, #4]
   3118e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   31192:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   31196:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   3119a:	425a      	negs	r2, r3
   3119c:	415a      	adcs	r2, r3
   3119e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   311a2:	602a      	str	r2, [r5, #0]
   311a4:	6023      	str	r3, [r4, #0]
   311a6:	e002      	b.n	311ae <__swhatbuf_r+0x52>
   311a8:	2340      	movs	r3, #64	; 0x40
   311aa:	4610      	mov	r0, r2
   311ac:	6023      	str	r3, [r4, #0]
   311ae:	b016      	add	sp, #88	; 0x58
   311b0:	bd70      	pop	{r4, r5, r6, pc}

000311b2 <__malloc_lock>:
   311b2:	4770      	bx	lr

000311b4 <__malloc_unlock>:
   311b4:	4770      	bx	lr

000311b6 <_malloc_usable_size_r>:
   311b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   311ba:	1f18      	subs	r0, r3, #4
   311bc:	2b00      	cmp	r3, #0
   311be:	bfbc      	itt	lt
   311c0:	580b      	ldrlt	r3, [r1, r0]
   311c2:	18c0      	addlt	r0, r0, r3
   311c4:	4770      	bx	lr

000311c6 <__ssputs_r>:
   311c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   311ca:	688e      	ldr	r6, [r1, #8]
   311cc:	4682      	mov	sl, r0
   311ce:	460c      	mov	r4, r1
   311d0:	4690      	mov	r8, r2
   311d2:	429e      	cmp	r6, r3
   311d4:	461f      	mov	r7, r3
   311d6:	d838      	bhi.n	3124a <__ssputs_r+0x84>
   311d8:	898a      	ldrh	r2, [r1, #12]
   311da:	f412 6f90 	tst.w	r2, #1152	; 0x480
   311de:	d032      	beq.n	31246 <__ssputs_r+0x80>
   311e0:	6825      	ldr	r5, [r4, #0]
   311e2:	3301      	adds	r3, #1
   311e4:	6909      	ldr	r1, [r1, #16]
   311e6:	eba5 0901 	sub.w	r9, r5, r1
   311ea:	6965      	ldr	r5, [r4, #20]
   311ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   311f0:	444b      	add	r3, r9
   311f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   311f6:	106d      	asrs	r5, r5, #1
   311f8:	429d      	cmp	r5, r3
   311fa:	bf38      	it	cc
   311fc:	461d      	movcc	r5, r3
   311fe:	0553      	lsls	r3, r2, #21
   31200:	d531      	bpl.n	31266 <__ssputs_r+0xa0>
   31202:	4629      	mov	r1, r5
   31204:	f7f4 fa4c 	bl	256a0 <_malloc_r>
   31208:	4606      	mov	r6, r0
   3120a:	b950      	cbnz	r0, 31222 <__ssputs_r+0x5c>
   3120c:	230c      	movs	r3, #12
   3120e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   31212:	f8ca 3000 	str.w	r3, [sl]
   31216:	89a3      	ldrh	r3, [r4, #12]
   31218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   3121c:	81a3      	strh	r3, [r4, #12]
   3121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   31222:	464a      	mov	r2, r9
   31224:	6921      	ldr	r1, [r4, #16]
   31226:	f7ff fe1f 	bl	30e68 <memcpy>
   3122a:	89a3      	ldrh	r3, [r4, #12]
   3122c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   31230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   31234:	81a3      	strh	r3, [r4, #12]
   31236:	6126      	str	r6, [r4, #16]
   31238:	444e      	add	r6, r9
   3123a:	6165      	str	r5, [r4, #20]
   3123c:	eba5 0509 	sub.w	r5, r5, r9
   31240:	6026      	str	r6, [r4, #0]
   31242:	463e      	mov	r6, r7
   31244:	60a5      	str	r5, [r4, #8]
   31246:	42be      	cmp	r6, r7
   31248:	d900      	bls.n	3124c <__ssputs_r+0x86>
   3124a:	463e      	mov	r6, r7
   3124c:	4632      	mov	r2, r6
   3124e:	4641      	mov	r1, r8
   31250:	6820      	ldr	r0, [r4, #0]
   31252:	f7ff fe16 	bl	30e82 <memmove>
   31256:	68a3      	ldr	r3, [r4, #8]
   31258:	6822      	ldr	r2, [r4, #0]
   3125a:	2000      	movs	r0, #0
   3125c:	1b9b      	subs	r3, r3, r6
   3125e:	4432      	add	r2, r6
   31260:	60a3      	str	r3, [r4, #8]
   31262:	6022      	str	r2, [r4, #0]
   31264:	e7db      	b.n	3121e <__ssputs_r+0x58>
   31266:	462a      	mov	r2, r5
   31268:	f7ff fe2d 	bl	30ec6 <_realloc_r>
   3126c:	4606      	mov	r6, r0
   3126e:	2800      	cmp	r0, #0
   31270:	d1e1      	bne.n	31236 <__ssputs_r+0x70>
   31272:	6921      	ldr	r1, [r4, #16]
   31274:	4650      	mov	r0, sl
   31276:	f7f4 f9c3 	bl	25600 <_free_r>
   3127a:	e7c7      	b.n	3120c <__ssputs_r+0x46>

0003127c <__sread>:
   3127c:	b510      	push	{r4, lr}
   3127e:	460c      	mov	r4, r1
   31280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   31284:	f7f5 f8ce 	bl	26424 <_read_r>
   31288:	2800      	cmp	r0, #0
   3128a:	bfab      	itete	ge
   3128c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   3128e:	89a3      	ldrhlt	r3, [r4, #12]
   31290:	181b      	addge	r3, r3, r0
   31292:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   31296:	bfac      	ite	ge
   31298:	6563      	strge	r3, [r4, #84]	; 0x54
   3129a:	81a3      	strhlt	r3, [r4, #12]
   3129c:	bd10      	pop	{r4, pc}

0003129e <__swrite>:
   3129e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   312a2:	461f      	mov	r7, r3
   312a4:	898b      	ldrh	r3, [r1, #12]
   312a6:	4605      	mov	r5, r0
   312a8:	460c      	mov	r4, r1
   312aa:	05db      	lsls	r3, r3, #23
   312ac:	4616      	mov	r6, r2
   312ae:	d505      	bpl.n	312bc <__swrite+0x1e>
   312b0:	2302      	movs	r3, #2
   312b2:	2200      	movs	r2, #0
   312b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   312b8:	f7f5 f8a2 	bl	26400 <_lseek_r>
   312bc:	89a3      	ldrh	r3, [r4, #12]
   312be:	4632      	mov	r2, r6
   312c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   312c4:	4628      	mov	r0, r5
   312c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   312ca:	81a3      	strh	r3, [r4, #12]
   312cc:	463b      	mov	r3, r7
   312ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   312d2:	f7f5 b851 	b.w	26378 <_write_r>

000312d6 <__sseek>:
   312d6:	b510      	push	{r4, lr}
   312d8:	460c      	mov	r4, r1
   312da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   312de:	f7f5 f88f 	bl	26400 <_lseek_r>
   312e2:	1c43      	adds	r3, r0, #1
   312e4:	89a3      	ldrh	r3, [r4, #12]
   312e6:	bf15      	itete	ne
   312e8:	6560      	strne	r0, [r4, #84]	; 0x54
   312ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   312ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   312f2:	81a3      	strheq	r3, [r4, #12]
   312f4:	bf18      	it	ne
   312f6:	81a3      	strhne	r3, [r4, #12]
   312f8:	bd10      	pop	{r4, pc}

000312fa <__sclose>:
   312fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   312fe:	f7f5 b84d 	b.w	2639c <_close_r>

00031302 <_Unwind_GetDataRelBase>:
   31302:	b508      	push	{r3, lr}
   31304:	f7ff fd8d 	bl	30e22 <abort>

00031308 <_Unwind_GetTextRelBase>:
   31308:	b508      	push	{r3, lr}
   3130a:	f7ff fffa 	bl	31302 <_Unwind_GetDataRelBase>
