
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20000be8 	.word	0x20000be8
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00001475 	.word	0x00001475
   8:	00004091 	.word	0x00004091
   c:	000014a5 	.word	0x000014a5
  10:	000014a5 	.word	0x000014a5
		if (fdtable[fd].obj == NULL) {
  14:	000014a5 	.word	0x000014a5
  18:	000014a5 	.word	0x000014a5
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  1c:	000014a5 	.word	0x000014a5
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	000012bd 	.word	0x000012bd
  30:	000014a5 	.word	0x000014a5
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00001275 	.word	0x00001275
  3c:	00003f8f 	.word	0x00003f8f

00000040 <_irq_vector_table>:
  40:	00001435 00001435 00001435 00001435     5...5...5...5...
  50:	00001435 00001435 00001435 00001435     5...5...5...5...
  60:	00001435 00001435 00001435 00001435     5...5...5...5...
  70:	00001435 00001435 00001435 00001435     5...5...5...5...
  80:	00001435 00001435 00001435 00001435     5...5...5...5...
  90:	00001435 00001435 00001435 00001435     5...5...5...5...
  a0:	00001435 00001435 00001435 00001435     5...5...5...5...
  b0:	00001435 00001435 00001435 00001435     5...5...5...5...
  c0:	00001435 00001435 00001435 00001435     5...5...5...5...
  d0:	00001435 00001435 00001435 00001435     5...5...5...5...
  e0:	00001435 00001435 00001435 00001435     5...5...5...5...
  f0:	00001435 00001435 00001435 00001435     5...5...5...5...
 100:	00001435 00001435 00001435 00001435     5...5...5...5...
 110:	00001435 00001435 00001435 00001435     5...5...5...5...
 120:	00001435 00001435 00001435 00001435     5...5...5...5...
 130:	00001435 00001435 00001435 00001435     5...5...5...5...
 140:	00001435                                5...

00000144 <_vector_end>:
	...

00000200 <m_firmware_info>:
 200:	281ee6de 8fcebb4c 00005b02 0000003c     ...(L....[..<...
 210:	00008000 00000001 00000000 00000000     ................
 220:	9102ffff 00000000 00000000 00000000     ................
	...

Disassembly of section text:

0000023c <__aeabi_uldivmod>:
     23c:	b953      	cbnz	r3, 254 <__aeabi_uldivmod+0x18>
     23e:	b94a      	cbnz	r2, 254 <__aeabi_uldivmod+0x18>
     240:	2900      	cmp	r1, #0
     242:	bf08      	it	eq
     244:	2800      	cmpeq	r0, #0
     246:	bf1c      	itt	ne
     248:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     24c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     250:	f000 b96e 	b.w	530 <__aeabi_idiv0>
     254:	f1ad 0c08 	sub.w	ip, sp, #8
     258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     25c:	f000 f806 	bl	26c <__udivmoddi4>
     260:	f8dd e004 	ldr.w	lr, [sp, #4]
     264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     268:	b004      	add	sp, #16
     26a:	4770      	bx	lr

0000026c <__udivmoddi4>:
     26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     270:	9d09      	ldr	r5, [sp, #36]	; 0x24
     272:	460f      	mov	r7, r1
     274:	4604      	mov	r4, r0
     276:	4689      	mov	r9, r1
     278:	2b00      	cmp	r3, #0
     27a:	d17c      	bne.n	376 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xf6>
     27c:	428a      	cmp	r2, r1
     27e:	4616      	mov	r6, r2
     280:	d940      	bls.n	304 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x84>
     282:	fab2 f282 	clz	r2, r2
     286:	b14a      	cbz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     288:	f1c2 0120 	rsb	r1, r2, #32
     28c:	fa07 f302 	lsl.w	r3, r7, r2
     290:	4096      	lsls	r6, r2
     292:	4094      	lsls	r4, r2
     294:	fa20 f101 	lsr.w	r1, r0, r1
     298:	ea41 0903 	orr.w	r9, r1, r3
     29c:	ea4f 4e16 	mov.w	lr, r6, lsr #16
     2a0:	0c27      	lsrs	r7, r4, #16
     2a2:	fa1f f886 	uxth.w	r8, r6
     2a6:	fbb9 fcfe 	udiv	ip, r9, lr
     2aa:	fb0e 931c 	mls	r3, lr, ip, r9
     2ae:	fb0c f108 	mul.w	r1, ip, r8
     2b2:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
     2b6:	4299      	cmp	r1, r3
     2b8:	d906      	bls.n	2c8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x48>
     2ba:	18f3      	adds	r3, r6, r3
     2bc:	d202      	bcs.n	2c4 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x44>
     2be:	4299      	cmp	r1, r3
     2c0:	f200 8123 	bhi.w	50a <CONFIG_FLASH_SIZE+0x10a>
     2c4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     2c8:	1a59      	subs	r1, r3, r1
     2ca:	b2a3      	uxth	r3, r4
     2cc:	fbb1 f0fe 	udiv	r0, r1, lr
     2d0:	fb0e 1110 	mls	r1, lr, r0, r1
     2d4:	fb00 f808 	mul.w	r8, r0, r8
     2d8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
     2dc:	45a0      	cmp	r8, r4
     2de:	d905      	bls.n	2ec <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6c>
     2e0:	1934      	adds	r4, r6, r4
     2e2:	d202      	bcs.n	2ea <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6a>
     2e4:	45a0      	cmp	r8, r4
     2e6:	f200 810d 	bhi.w	504 <CONFIG_FLASH_SIZE+0x104>
     2ea:	3801      	subs	r0, #1
     2ec:	eba4 0408 	sub.w	r4, r4, r8
     2f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2f4:	2100      	movs	r1, #0
     2f6:	b11d      	cbz	r5, 300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     2f8:	40d4      	lsrs	r4, r2
     2fa:	2300      	movs	r3, #0
     2fc:	e9c5 4300 	strd	r4, r3, [r5]
     300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     304:	b902      	cbnz	r2, 308 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x88>
     306:	deff      	udf	#255	; 0xff
     308:	fab2 f282 	clz	r2, r2
     30c:	2a00      	cmp	r2, #0
     30e:	d14d      	bne.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     310:	1b8f      	subs	r7, r1, r6
     312:	ea4f 4e16 	mov.w	lr, r6, lsr #16
     316:	fa1f f886 	uxth.w	r8, r6
     31a:	2101      	movs	r1, #1
     31c:	0c23      	lsrs	r3, r4, #16
     31e:	fbb7 fcfe 	udiv	ip, r7, lr
     322:	fb0e 771c 	mls	r7, lr, ip, r7
     326:	fb08 f00c 	mul.w	r0, r8, ip
     32a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
     32e:	4298      	cmp	r0, r3
     330:	d90a      	bls.n	348 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc8>
     332:	18f3      	adds	r3, r6, r3
     334:	bf2c      	ite	cs
     336:	2701      	movcs	r7, #1
     338:	2700      	movcc	r7, #0
     33a:	4298      	cmp	r0, r3
     33c:	d902      	bls.n	344 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc4>
     33e:	2f00      	cmp	r7, #0
     340:	f000 80d9 	beq.w	4f6 <CONFIG_FLASH_SIZE+0xf6>
     344:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     348:	1a1f      	subs	r7, r3, r0
     34a:	b2a3      	uxth	r3, r4
     34c:	fbb7 f0fe 	udiv	r0, r7, lr
     350:	fb0e 7710 	mls	r7, lr, r0, r7
     354:	fb08 f800 	mul.w	r8, r8, r0
     358:	ea43 4407 	orr.w	r4, r3, r7, lsl #16
     35c:	45a0      	cmp	r8, r4
     35e:	d905      	bls.n	36c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xec>
     360:	1934      	adds	r4, r6, r4
     362:	d202      	bcs.n	36a <CONFIG_PM_PARTITION_SIZE_PROVISION+0xea>
     364:	45a0      	cmp	r8, r4
     366:	f200 80ca 	bhi.w	4fe <CONFIG_FLASH_SIZE+0xfe>
     36a:	3801      	subs	r0, #1
     36c:	eba4 0408 	sub.w	r4, r4, r8
     370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     374:	e7bf      	b.n	2f6 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x76>
     376:	428b      	cmp	r3, r1
     378:	d908      	bls.n	38c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x10c>
     37a:	2d00      	cmp	r5, #0
     37c:	f000 80b2 	beq.w	4e4 <CONFIG_FLASH_SIZE+0xe4>
     380:	2100      	movs	r1, #0
     382:	e9c5 0700 	strd	r0, r7, [r5]
     386:	4608      	mov	r0, r1
     388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     38c:	fab3 f183 	clz	r1, r3
     390:	2900      	cmp	r1, #0
     392:	d149      	bne.n	428 <CONFIG_FLASH_SIZE+0x28>
     394:	42bb      	cmp	r3, r7
     396:	f0c0 80a8 	bcc.w	4ea <CONFIG_FLASH_SIZE+0xea>
     39a:	4282      	cmp	r2, r0
     39c:	f240 80a5 	bls.w	4ea <CONFIG_FLASH_SIZE+0xea>
     3a0:	4608      	mov	r0, r1
     3a2:	2d00      	cmp	r5, #0
     3a4:	d0ac      	beq.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     3a6:	e9c5 4900 	strd	r4, r9, [r5]
     3aa:	e7a9      	b.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     3ac:	f1c2 0020 	rsb	r0, r2, #32
     3b0:	4096      	lsls	r6, r2
     3b2:	4091      	lsls	r1, r2
     3b4:	fa27 f300 	lsr.w	r3, r7, r0
     3b8:	ea4f 4e16 	mov.w	lr, r6, lsr #16
     3bc:	fa24 f700 	lsr.w	r7, r4, r0
     3c0:	fa1f f886 	uxth.w	r8, r6
     3c4:	4094      	lsls	r4, r2
     3c6:	430f      	orrs	r7, r1
     3c8:	fbb3 f0fe 	udiv	r0, r3, lr
     3cc:	ea4f 4c17 	mov.w	ip, r7, lsr #16
     3d0:	fb0e 3310 	mls	r3, lr, r0, r3
     3d4:	fb00 f108 	mul.w	r1, r0, r8
     3d8:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
     3dc:	4299      	cmp	r1, r3
     3de:	d90c      	bls.n	3fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17a>
     3e0:	18f3      	adds	r3, r6, r3
     3e2:	bf2c      	ite	cs
     3e4:	f04f 0c01 	movcs.w	ip, #1
     3e8:	f04f 0c00 	movcc.w	ip, #0
     3ec:	4299      	cmp	r1, r3
     3ee:	d903      	bls.n	3f8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x178>
     3f0:	f1bc 0f00 	cmp.w	ip, #0
     3f4:	f000 8092 	beq.w	51c <CONFIG_FLASH_SIZE+0x11c>
     3f8:	3801      	subs	r0, #1
     3fa:	1a5b      	subs	r3, r3, r1
     3fc:	b2bf      	uxth	r7, r7
     3fe:	fbb3 f1fe 	udiv	r1, r3, lr
     402:	fb0e 3311 	mls	r3, lr, r1, r3
     406:	fb01 fc08 	mul.w	ip, r1, r8
     40a:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
     40e:	45bc      	cmp	ip, r7
     410:	d905      	bls.n	41e <CONFIG_FLASH_SIZE+0x1e>
     412:	19f7      	adds	r7, r6, r7
     414:	d202      	bcs.n	41c <CONFIG_FLASH_SIZE+0x1c>
     416:	45bc      	cmp	ip, r7
     418:	f200 8087 	bhi.w	52a <CONFIG_FLASH_SIZE+0x12a>
     41c:	3901      	subs	r1, #1
     41e:	eba7 070c 	sub.w	r7, r7, ip
     422:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     426:	e779      	b.n	31c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9c>
     428:	f1c1 0620 	rsb	r6, r1, #32
     42c:	fa03 f401 	lsl.w	r4, r3, r1
     430:	fa02 fc01 	lsl.w	ip, r2, r1
     434:	fa07 f801 	lsl.w	r8, r7, r1
     438:	40f2      	lsrs	r2, r6
     43a:	fa27 f306 	lsr.w	r3, r7, r6
     43e:	fa20 f706 	lsr.w	r7, r0, r6
     442:	fa00 fe01 	lsl.w	lr, r0, r1
     446:	4322      	orrs	r2, r4
     448:	ea47 0408 	orr.w	r4, r7, r8
     44c:	ea4f 4812 	mov.w	r8, r2, lsr #16
     450:	0c20      	lsrs	r0, r4, #16
     452:	fa1f f982 	uxth.w	r9, r2
     456:	fbb3 faf8 	udiv	sl, r3, r8
     45a:	fb08 371a 	mls	r7, r8, sl, r3
     45e:	fb0a fb09 	mul.w	fp, sl, r9
     462:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
     466:	45bb      	cmp	fp, r7
     468:	d909      	bls.n	47e <CONFIG_FLASH_SIZE+0x7e>
     46a:	19d7      	adds	r7, r2, r7
     46c:	bf2c      	ite	cs
     46e:	2301      	movcs	r3, #1
     470:	2300      	movcc	r3, #0
     472:	45bb      	cmp	fp, r7
     474:	d901      	bls.n	47a <CONFIG_FLASH_SIZE+0x7a>
     476:	2b00      	cmp	r3, #0
     478:	d053      	beq.n	522 <CONFIG_FLASH_SIZE+0x122>
     47a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
     47e:	eba7 070b 	sub.w	r7, r7, fp
     482:	b2a4      	uxth	r4, r4
     484:	fbb7 f0f8 	udiv	r0, r7, r8
     488:	fb08 7710 	mls	r7, r8, r0, r7
     48c:	fb00 f909 	mul.w	r9, r0, r9
     490:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
     494:	45b9      	cmp	r9, r7
     496:	d904      	bls.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     498:	19d7      	adds	r7, r2, r7
     49a:	d201      	bcs.n	4a0 <CONFIG_FLASH_SIZE+0xa0>
     49c:	45b9      	cmp	r9, r7
     49e:	d83a      	bhi.n	516 <CONFIG_FLASH_SIZE+0x116>
     4a0:	3801      	subs	r0, #1
     4a2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
     4a6:	eba7 0709 	sub.w	r7, r7, r9
     4aa:	fba0 890c 	umull	r8, r9, r0, ip
     4ae:	454f      	cmp	r7, r9
     4b0:	46c3      	mov	fp, r8
     4b2:	464c      	mov	r4, r9
     4b4:	d302      	bcc.n	4bc <CONFIG_FLASH_SIZE+0xbc>
     4b6:	d107      	bne.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4b8:	45c6      	cmp	lr, r8
     4ba:	d205      	bcs.n	4c8 <CONFIG_FLASH_SIZE+0xc8>
     4bc:	ebb8 0b0c 	subs.w	fp, r8, ip
     4c0:	eb69 0202 	sbc.w	r2, r9, r2
     4c4:	3801      	subs	r0, #1
     4c6:	4614      	mov	r4, r2
     4c8:	b31d      	cbz	r5, 512 <CONFIG_FLASH_SIZE+0x112>
     4ca:	ebbe 030b 	subs.w	r3, lr, fp
     4ce:	eb67 0704 	sbc.w	r7, r7, r4
     4d2:	fa07 f606 	lsl.w	r6, r7, r6
     4d6:	40cb      	lsrs	r3, r1
     4d8:	40cf      	lsrs	r7, r1
     4da:	2100      	movs	r1, #0
     4dc:	431e      	orrs	r6, r3
     4de:	e9c5 6700 	strd	r6, r7, [r5]
     4e2:	e70d      	b.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     4e4:	4629      	mov	r1, r5
     4e6:	4628      	mov	r0, r5
     4e8:	e70a      	b.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     4ea:	1a84      	subs	r4, r0, r2
     4ec:	eb67 0303 	sbc.w	r3, r7, r3
     4f0:	2001      	movs	r0, #1
     4f2:	4699      	mov	r9, r3
     4f4:	e755      	b.n	3a2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x122>
     4f6:	f1ac 0c02 	sub.w	ip, ip, #2
     4fa:	4433      	add	r3, r6
     4fc:	e724      	b.n	348 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc8>
     4fe:	3802      	subs	r0, #2
     500:	4434      	add	r4, r6
     502:	e733      	b.n	36c <CONFIG_PM_PARTITION_SIZE_PROVISION+0xec>
     504:	3802      	subs	r0, #2
     506:	4434      	add	r4, r6
     508:	e6f0      	b.n	2ec <CONFIG_PM_PARTITION_SIZE_PROVISION+0x6c>
     50a:	f1ac 0c02 	sub.w	ip, ip, #2
     50e:	4433      	add	r3, r6
     510:	e6da      	b.n	2c8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x48>
     512:	4629      	mov	r1, r5
     514:	e6f4      	b.n	300 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x80>
     516:	3802      	subs	r0, #2
     518:	4417      	add	r7, r2
     51a:	e7c2      	b.n	4a2 <CONFIG_FLASH_SIZE+0xa2>
     51c:	3802      	subs	r0, #2
     51e:	4433      	add	r3, r6
     520:	e76b      	b.n	3fa <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17a>
     522:	f1aa 0a02 	sub.w	sl, sl, #2
     526:	4417      	add	r7, r2
     528:	e7a9      	b.n	47e <CONFIG_FLASH_SIZE+0x7e>
     52a:	3902      	subs	r1, #2
     52c:	4437      	add	r7, r6
     52e:	e776      	b.n	41e <CONFIG_FLASH_SIZE+0x1e>

00000530 <__aeabi_idiv0>:
     530:	4770      	bx	lr
     532:	bf00      	nop

00000534 <__gnu_cmse_nonsecure_call>:
     534:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
     538:	4627      	mov	r7, r4
     53a:	46a0      	mov	r8, r4
     53c:	46a1      	mov	r9, r4
     53e:	46a2      	mov	sl, r4
     540:	46a3      	mov	fp, r4
     542:	46a4      	mov	ip, r4
     544:	ed2d 8b10 	vpush	{d8-d15}
     548:	f04f 0500 	mov.w	r5, #0
     54c:	ec45 5b18 	vmov	d8, r5, r5
     550:	ec45 5a19 	vmov	s18, s19, r5, r5
     554:	ec45 5a1a 	vmov	s20, s21, r5, r5
     558:	ec45 5a1b 	vmov	s22, s23, r5, r5
     55c:	ec45 5a1c 	vmov	s24, s25, r5, r5
     560:	ec45 5a1d 	vmov	s26, s27, r5, r5
     564:	ec45 5a1e 	vmov	s28, s29, r5, r5
     568:	ec45 5a1f 	vmov	s30, s31, r5, r5
     56c:	eef1 5a10 	vmrs	r5, fpscr
     570:	f64f 7660 	movw	r6, #65376	; 0xff60
     574:	f6c0 76ff 	movt	r6, #4095	; 0xfff
     578:	4035      	ands	r5, r6
     57a:	eee1 5a10 	vmsr	fpscr, r5
     57e:	f384 8800 	msr	CPSR_f, r4
     582:	4625      	mov	r5, r4
     584:	4626      	mov	r6, r4
     586:	47a4      	blxns	r4
     588:	ecbd 8b10 	vpop	{d8-d15}
     58c:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

00000590 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     590:	680b      	ldr	r3, [r1, #0]
     592:	3301      	adds	r3, #1
     594:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     596:	4b01      	ldr	r3, [pc, #4]	; (59c <char_out+0xc>)
     598:	681b      	ldr	r3, [r3, #0]
     59a:	4718      	bx	r3
     59c:	20000000 	.word	0x20000000

000005a0 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5a4:	ed2d 8b02 	vpush	{d8}
     5a8:	b083      	sub	sp, #12
     5aa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     5ac:	469a      	mov	sl, r3
     5ae:	2c01      	cmp	r4, #1
     5b0:	bfb8      	it	lt
     5b2:	2401      	movlt	r4, #1
     5b4:	2b01      	cmp	r3, #1
     5b6:	bf0c      	ite	eq
     5b8:	2330      	moveq	r3, #48	; 0x30
     5ba:	2320      	movne	r3, #32
     5bc:	4615      	mov	r5, r2
     5be:	4606      	mov	r6, r0
     5c0:	ee08 3a10 	vmov	s16, r3
     5c4:	2701      	movs	r7, #1
     5c6:	f04f 080a 	mov.w	r8, #10
     5ca:	2200      	movs	r2, #0
     5cc:	f8df b074 	ldr.w	fp, [pc, #116]	; 644 <_printk_dec_ulong+0xa4>
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     5d0:	fbb5 f9fb 	udiv	r9, r5, fp
     5d4:	b90a      	cbnz	r2, 5da <_printk_dec_ulong+0x3a>
     5d6:	45ab      	cmp	fp, r5
     5d8:	d820      	bhi.n	61c <_printk_dec_ulong+0x7c>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     5da:	f109 0030 	add.w	r0, r9, #48	; 0x30
     5de:	9100      	str	r1, [sp, #0]
     5e0:	47b0      	blx	r6
			found_largest_digit = 1;
     5e2:	2201      	movs	r2, #1
			digits++;
     5e4:	3701      	adds	r7, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
     5e6:	9900      	ldr	r1, [sp, #0]
		}
		remaining--;
		remainder %= pos;
		pos /= 10;
     5e8:	230a      	movs	r3, #10
		remaining--;
     5ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	while (pos >= 10) {
     5ee:	f1b8 0f01 	cmp.w	r8, #1
		remainder %= pos;
     5f2:	fb0b 5519 	mls	r5, fp, r9, r5
		pos /= 10;
     5f6:	fbbb fbf3 	udiv	fp, fp, r3
	while (pos >= 10) {
     5fa:	d1e9      	bne.n	5d0 <_printk_dec_ulong+0x30>
	}
	out((int)(remainder + 48), ctx);
     5fc:	f105 0030 	add.w	r0, r5, #48	; 0x30
     600:	9100      	str	r1, [sp, #0]
     602:	47b0      	blx	r6

	if (padding == PAD_SPACE_AFTER) {
     604:	f1ba 0f03 	cmp.w	sl, #3
     608:	9900      	ldr	r1, [sp, #0]
     60a:	d102      	bne.n	612 <_printk_dec_ulong+0x72>
		remaining = min_width - digits;
     60c:	1be4      	subs	r4, r4, r7
		while (remaining-- > 0) {
     60e:	2c00      	cmp	r4, #0
     610:	dc11      	bgt.n	636 <_printk_dec_ulong+0x96>
			out(' ', ctx);
		}
	}
}
     612:	b003      	add	sp, #12
     614:	ecbd 8b02 	vpop	{d8}
     618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     61c:	4544      	cmp	r4, r8
     61e:	dbe3      	blt.n	5e8 <_printk_dec_ulong+0x48>
				&& padding < PAD_SPACE_AFTER) {
     620:	f1ba 0f02 	cmp.w	sl, #2
     624:	d8e0      	bhi.n	5e8 <_printk_dec_ulong+0x48>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     626:	ee18 0a10 	vmov	r0, s16
     62a:	e9cd 1200 	strd	r1, r2, [sp]
			digits++;
     62e:	3701      	adds	r7, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     630:	47b0      	blx	r6
			digits++;
     632:	9a01      	ldr	r2, [sp, #4]
     634:	e7d7      	b.n	5e6 <_printk_dec_ulong+0x46>
			out(' ', ctx);
     636:	2020      	movs	r0, #32
     638:	9100      	str	r1, [sp, #0]
     63a:	3c01      	subs	r4, #1
     63c:	47b0      	blx	r6
     63e:	9900      	ldr	r1, [sp, #0]
     640:	e7e5      	b.n	60e <_printk_dec_ulong+0x6e>
     642:	bf00      	nop
     644:	3b9aca00 	.word	0x3b9aca00

00000648 <__printk_hook_install>:
	_char_out = fn;
     648:	4b01      	ldr	r3, [pc, #4]	; (650 <__printk_hook_install+0x8>)
     64a:	6018      	str	r0, [r3, #0]
}
     64c:	4770      	bx	lr
     64e:	bf00      	nop
     650:	20000000 	.word	0x20000000

00000654 <z_vprintk>:
{
     654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
     658:	2700      	movs	r7, #0
{
     65a:	4605      	mov	r5, r0
     65c:	468b      	mov	fp, r1
	int min_width = -1;
     65e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
     662:	46b8      	mov	r8, r7
{
     664:	461c      	mov	r4, r3
     666:	b08d      	sub	sp, #52	; 0x34
     668:	1e53      	subs	r3, r2, #1
     66a:	9303      	str	r3, [sp, #12]
			might_format = 0;
     66c:	2600      	movs	r6, #0
					break;
     66e:	e005      	b.n	67c <z_vprintk+0x28>
		if (!might_format) {
     670:	b96e      	cbnz	r6, 68e <z_vprintk+0x3a>
			if (*fmt != '%') {
     672:	2825      	cmp	r0, #37	; 0x25
     674:	f000 8171 	beq.w	95a <CONFIG_ISR_STACK_SIZE+0x15a>
				out((int)*fmt, ctx);
     678:	4659      	mov	r1, fp
     67a:	47a8      	blx	r5
	while (*fmt) {
     67c:	9b03      	ldr	r3, [sp, #12]
     67e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     682:	9303      	str	r3, [sp, #12]
     684:	2800      	cmp	r0, #0
     686:	d1f3      	bne.n	670 <z_vprintk+0x1c>
}
     688:	b00d      	add	sp, #52	; 0x34
     68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
     68e:	287a      	cmp	r0, #122	; 0x7a
     690:	d80a      	bhi.n	6a8 <z_vprintk+0x54>
     692:	2862      	cmp	r0, #98	; 0x62
     694:	d810      	bhi.n	6b8 <z_vprintk+0x64>
     696:	2830      	cmp	r0, #48	; 0x30
     698:	d054      	beq.n	744 <z_vprintk+0xf0>
     69a:	d845      	bhi.n	728 <z_vprintk+0xd4>
     69c:	2825      	cmp	r0, #37	; 0x25
     69e:	f000 815a 	beq.w	956 <CONFIG_ISR_STACK_SIZE+0x156>
     6a2:	282d      	cmp	r0, #45	; 0x2d
     6a4:	f000 815f 	beq.w	966 <CONFIG_ISR_STACK_SIZE+0x166>
					out((int)'%', ctx);
     6a8:	4659      	mov	r1, fp
     6aa:	2025      	movs	r0, #37	; 0x25
     6ac:	47a8      	blx	r5
					out((int)*fmt, ctx);
     6ae:	4659      	mov	r1, fp
     6b0:	9b03      	ldr	r3, [sp, #12]
     6b2:	7818      	ldrb	r0, [r3, #0]
     6b4:	47a8      	blx	r5
     6b6:	e7d9      	b.n	66c <z_vprintk+0x18>
     6b8:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
     6bc:	2b17      	cmp	r3, #23
     6be:	d8f3      	bhi.n	6a8 <z_vprintk+0x54>
     6c0:	a201      	add	r2, pc, #4	; (adr r2, 6c8 <z_vprintk+0x74>)
     6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     6c6:	bf00      	nop
     6c8:	0000094f 	.word	0x0000094f
     6cc:	00000793 	.word	0x00000793
     6d0:	000006a9 	.word	0x000006a9
     6d4:	000006a9 	.word	0x000006a9
     6d8:	000006a9 	.word	0x000006a9
     6dc:	00000775 	.word	0x00000775
     6e0:	00000793 	.word	0x00000793
     6e4:	000006a9 	.word	0x000006a9
     6e8:	000006a9 	.word	0x000006a9
     6ec:	00000775 	.word	0x00000775
     6f0:	000006a9 	.word	0x000006a9
     6f4:	000006a9 	.word	0x000006a9
     6f8:	000006a9 	.word	0x000006a9
     6fc:	00000835 	.word	0x00000835
     700:	000006a9 	.word	0x000006a9
     704:	000006a9 	.word	0x000006a9
     708:	0000091f 	.word	0x0000091f
     70c:	000006a9 	.word	0x000006a9
     710:	00000803 	.word	0x00000803
     714:	000006a9 	.word	0x000006a9
     718:	000006a9 	.word	0x000006a9
     71c:	00000731 	.word	0x00000731
     720:	000006a9 	.word	0x000006a9
     724:	00000775 	.word	0x00000775
			switch (*fmt) {
     728:	2839      	cmp	r0, #57	; 0x39
     72a:	d91a      	bls.n	762 <z_vprintk+0x10e>
     72c:	2858      	cmp	r0, #88	; 0x58
     72e:	d1bb      	bne.n	6a8 <z_vprintk+0x54>
				if (*fmt == 'p') {
     730:	9b03      	ldr	r3, [sp, #12]
     732:	781b      	ldrb	r3, [r3, #0]
     734:	2b70      	cmp	r3, #112	; 0x70
     736:	f040 8088 	bne.w	84a <CONFIG_ISR_STACK_SIZE+0x4a>
					x = va_arg(ap, unsigned int);
     73a:	f854 3b04 	ldr.w	r3, [r4], #4
     73e:	2200      	movs	r2, #0
     740:	9306      	str	r3, [sp, #24]
     742:	e090      	b.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
				if (min_width < 0 && padding == PAD_NONE) {
     744:	f1b9 0f00 	cmp.w	r9, #0
     748:	da0e      	bge.n	768 <z_vprintk+0x114>
     74a:	f1b8 0f00 	cmp.w	r8, #0
     74e:	f000 810d 	beq.w	96c <CONFIG_ISR_STACK_SIZE+0x16c>
					min_width = *fmt - '0';
     752:	f1a0 0930 	sub.w	r9, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
     756:	f1b8 0f00 	cmp.w	r8, #0
     75a:	bf08      	it	eq
     75c:	f04f 0802 	moveq.w	r8, #2
     760:	e78c      	b.n	67c <z_vprintk+0x28>
				if (min_width < 0) {
     762:	f1b9 0f00 	cmp.w	r9, #0
     766:	dbf4      	blt.n	752 <z_vprintk+0xfe>
					min_width = 10 * min_width + *fmt - '0';
     768:	230a      	movs	r3, #10
     76a:	fb03 0909 	mla	r9, r3, r9, r0
     76e:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
     772:	e7f0      	b.n	756 <z_vprintk+0x102>
				if (*fmt == 'h' && length_mod == 'h') {
     774:	2868      	cmp	r0, #104	; 0x68
     776:	d103      	bne.n	780 <z_vprintk+0x12c>
     778:	2f68      	cmp	r7, #104	; 0x68
     77a:	d106      	bne.n	78a <z_vprintk+0x136>
					length_mod = 'H';
     77c:	2748      	movs	r7, #72	; 0x48
     77e:	e77d      	b.n	67c <z_vprintk+0x28>
				} else if (*fmt == 'l' && length_mod == 'l') {
     780:	286c      	cmp	r0, #108	; 0x6c
     782:	d102      	bne.n	78a <z_vprintk+0x136>
     784:	2f6c      	cmp	r7, #108	; 0x6c
     786:	f000 80f4 	beq.w	972 <CONFIG_ISR_STACK_SIZE+0x172>
				} else if (length_mod == 0) {
     78a:	2f00      	cmp	r7, #0
     78c:	d18c      	bne.n	6a8 <z_vprintk+0x54>
     78e:	4607      	mov	r7, r0
     790:	e774      	b.n	67c <z_vprintk+0x28>
				if (length_mod == 'z') {
     792:	2f7a      	cmp	r7, #122	; 0x7a
     794:	d102      	bne.n	79c <z_vprintk+0x148>
					d = va_arg(ap, int);
     796:	f854 6b04 	ldr.w	r6, [r4], #4
     79a:	e021      	b.n	7e0 <z_vprintk+0x18c>
				} else if (length_mod == 'l') {
     79c:	2f6c      	cmp	r7, #108	; 0x6c
     79e:	d0fa      	beq.n	796 <z_vprintk+0x142>
				} else if (length_mod == 'L') {
     7a0:	2f4c      	cmp	r7, #76	; 0x4c
     7a2:	d1f8      	bne.n	796 <z_vprintk+0x142>
					long long lld = va_arg(ap, long long);
     7a4:	3407      	adds	r4, #7
     7a6:	f024 0407 	bic.w	r4, r4, #7
     7aa:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     7ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
					if (lld > __LONG_MAX__ ||
     7b2:	9b04      	ldr	r3, [sp, #16]
     7b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     7b8:	f113 4100 	adds.w	r1, r3, #2147483648	; 0x80000000
     7bc:	9b05      	ldr	r3, [sp, #20]
     7be:	9108      	str	r1, [sp, #32]
     7c0:	f143 0100 	adc.w	r1, r3, #0
     7c4:	9109      	str	r1, [sp, #36]	; 0x24
     7c6:	2100      	movs	r1, #0
     7c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
     7cc:	4299      	cmp	r1, r3
     7ce:	bf08      	it	eq
     7d0:	4290      	cmpeq	r0, r2
     7d2:	d204      	bcs.n	7de <z_vprintk+0x18a>
						print_err(out, ctx);
     7d4:	4659      	mov	r1, fp
     7d6:	4628      	mov	r0, r5
     7d8:	f003 fa4f 	bl	3c7a <print_err>
						break;
     7dc:	e746      	b.n	66c <z_vprintk+0x18>
					d = lld;
     7de:	9e04      	ldr	r6, [sp, #16]
				if (d < 0) {
     7e0:	2e00      	cmp	r6, #0
     7e2:	da05      	bge.n	7f0 <z_vprintk+0x19c>
					out((int)'-', ctx);
     7e4:	4659      	mov	r1, fp
     7e6:	202d      	movs	r0, #45	; 0x2d
     7e8:	47a8      	blx	r5
					d = -d;
     7ea:	4276      	negs	r6, r6
					min_width--;
     7ec:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
     7f0:	4643      	mov	r3, r8
     7f2:	4632      	mov	r2, r6
     7f4:	f8cd 9000 	str.w	r9, [sp]
				_printk_dec_ulong(out, ctx, u, padding,
     7f8:	4659      	mov	r1, fp
     7fa:	4628      	mov	r0, r5
     7fc:	f7ff fed0 	bl	5a0 <_printk_dec_ulong>
				break;
     800:	e734      	b.n	66c <z_vprintk+0x18>
				if (length_mod == 'z') {
     802:	2f7a      	cmp	r7, #122	; 0x7a
     804:	d102      	bne.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
					u = va_arg(ap, unsigned int);
     806:	f854 2b04 	ldr.w	r2, [r4], #4
     80a:	e00f      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
				} else if (length_mod == 'l') {
     80c:	2f6c      	cmp	r7, #108	; 0x6c
     80e:	d0fa      	beq.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
				} else if (length_mod == 'L') {
     810:	2f4c      	cmp	r7, #76	; 0x4c
     812:	d1f8      	bne.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
					if (llu > ~0UL) {
     814:	2100      	movs	r1, #0
     816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
					unsigned long long llu =
     81a:	3407      	adds	r4, #7
     81c:	f024 0407 	bic.w	r4, r4, #7
     820:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
     824:	4299      	cmp	r1, r3
     826:	bf08      	it	eq
     828:	4290      	cmpeq	r0, r2
     82a:	d3d3      	bcc.n	7d4 <z_vprintk+0x180>
				_printk_dec_ulong(out, ctx, u, padding,
     82c:	4643      	mov	r3, r8
     82e:	f8cd 9000 	str.w	r9, [sp]
     832:	e7e1      	b.n	7f8 <z_vprintk+0x1a4>
				out('0', ctx);
     834:	4659      	mov	r1, fp
     836:	2030      	movs	r0, #48	; 0x30
     838:	47a8      	blx	r5
				out('x', ctx);
     83a:	4659      	mov	r1, fp
     83c:	2078      	movs	r0, #120	; 0x78
     83e:	47a8      	blx	r5
					min_width = 8;
     840:	f04f 0908 	mov.w	r9, #8
				padding = PAD_ZERO_BEFORE;
     844:	f04f 0801 	mov.w	r8, #1
     848:	e772      	b.n	730 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
     84a:	2f6c      	cmp	r7, #108	; 0x6c
     84c:	f43f af75 	beq.w	73a <z_vprintk+0xe6>
				} else if (length_mod == 'L') {
     850:	2f4c      	cmp	r7, #76	; 0x4c
     852:	f47f af72 	bne.w	73a <z_vprintk+0xe6>
					x = va_arg(ap, unsigned long long);
     856:	1de3      	adds	r3, r4, #7
     858:	f023 0307 	bic.w	r3, r3, #7
     85c:	461c      	mov	r4, r3
     85e:	f854 2b08 	ldr.w	r2, [r4], #8
     862:	9206      	str	r2, [sp, #24]
     864:	685a      	ldr	r2, [r3, #4]
	int digits = 0;
     866:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
     868:	2310      	movs	r3, #16
	int shift = sizeof(num) * 8;
     86a:	f04f 0a40 	mov.w	sl, #64	; 0x40
	int digits = 0;
     86e:	9104      	str	r1, [sp, #16]
	int found_largest_digit = 0;
     870:	9107      	str	r1, [sp, #28]
		shift -= 4;
     872:	f1aa 0a04 	sub.w	sl, sl, #4
		nibble = (num >> shift) & 0xf;
     876:	9906      	ldr	r1, [sp, #24]
     878:	f1ca 0e20 	rsb	lr, sl, #32
     87c:	f1aa 0c20 	sub.w	ip, sl, #32
     880:	fa21 f00a 	lsr.w	r0, r1, sl
     884:	fa02 fe0e 	lsl.w	lr, r2, lr
     888:	ea40 000e 	orr.w	r0, r0, lr
     88c:	fa22 fc0c 	lsr.w	ip, r2, ip
     890:	ea40 000c 	orr.w	r0, r0, ip
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
     894:	f010 000f 	ands.w	r0, r0, #15
     898:	d107      	bne.n	8aa <CONFIG_ISR_STACK_SIZE+0xaa>
     89a:	9907      	ldr	r1, [sp, #28]
     89c:	b911      	cbnz	r1, 8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     89e:	f1ba 0f00 	cmp.w	sl, #0
     8a2:	d125      	bne.n	8f0 <CONFIG_ISR_STACK_SIZE+0xf0>
			nibble += nibble > 9 ? 87 : 48;
     8a4:	f04f 0c30 	mov.w	ip, #48	; 0x30
     8a8:	e005      	b.n	8b6 <CONFIG_ISR_STACK_SIZE+0xb6>
     8aa:	2809      	cmp	r0, #9
     8ac:	bf8c      	ite	hi
     8ae:	f04f 0c57 	movhi.w	ip, #87	; 0x57
     8b2:	f04f 0c30 	movls.w	ip, #48	; 0x30
     8b6:	4460      	add	r0, ip
			out((int)nibble, ctx);
     8b8:	4659      	mov	r1, fp
     8ba:	b240      	sxtb	r0, r0
     8bc:	920a      	str	r2, [sp, #40]	; 0x28
     8be:	9307      	str	r3, [sp, #28]
     8c0:	47a8      	blx	r5
			digits++;
     8c2:	9b04      	ldr	r3, [sp, #16]
	while (shift >= 4) {
     8c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
			digits++;
     8c6:	3301      	adds	r3, #1
     8c8:	9304      	str	r3, [sp, #16]
	while (shift >= 4) {
     8ca:	9b07      	ldr	r3, [sp, #28]
     8cc:	f1ba 0f00 	cmp.w	sl, #0
     8d0:	d123      	bne.n	91a <CONFIG_ISR_STACK_SIZE+0x11a>
	if (padding == PAD_SPACE_AFTER) {
     8d2:	f1b8 0f03 	cmp.w	r8, #3
     8d6:	f47f aec9 	bne.w	66c <z_vprintk+0x18>
		remaining = min_width * 2 - digits;
     8da:	9b04      	ldr	r3, [sp, #16]
     8dc:	ebc3 0649 	rsb	r6, r3, r9, lsl #1
		while (remaining-- > 0) {
     8e0:	2e00      	cmp	r6, #0
     8e2:	f77f aec3 	ble.w	66c <z_vprintk+0x18>
			out(' ', ctx);
     8e6:	4659      	mov	r1, fp
     8e8:	2020      	movs	r0, #32
     8ea:	47a8      	blx	r5
     8ec:	3e01      	subs	r6, #1
     8ee:	e7f7      	b.n	8e0 <CONFIG_ISR_STACK_SIZE+0xe0>
		if (remaining-- <= min_width) {
     8f0:	1e59      	subs	r1, r3, #1
     8f2:	4599      	cmp	r9, r3
     8f4:	910a      	str	r1, [sp, #40]	; 0x28
     8f6:	db07      	blt.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
			if (padding == PAD_ZERO_BEFORE) {
     8f8:	f1b8 0f01 	cmp.w	r8, #1
     8fc:	d106      	bne.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
				out('0', ctx);
     8fe:	4659      	mov	r1, fp
     900:	2030      	movs	r0, #48	; 0x30
     902:	920b      	str	r2, [sp, #44]	; 0x2c
				out(' ', ctx);
     904:	47a8      	blx	r5
     906:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			nibble += nibble > 9 ? 87 : 48;
     908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     90a:	e7b2      	b.n	872 <CONFIG_ISR_STACK_SIZE+0x72>
			} else if (padding == PAD_SPACE_BEFORE) {
     90c:	f1b8 0f02 	cmp.w	r8, #2
     910:	d1fa      	bne.n	908 <CONFIG_ISR_STACK_SIZE+0x108>
				out(' ', ctx);
     912:	4659      	mov	r1, fp
     914:	2020      	movs	r0, #32
     916:	920b      	str	r2, [sp, #44]	; 0x2c
     918:	e7f4      	b.n	904 <CONFIG_ISR_STACK_SIZE+0x104>
			found_largest_digit = 1;
     91a:	9607      	str	r6, [sp, #28]
     91c:	e7a9      	b.n	872 <CONFIG_ISR_STACK_SIZE+0x72>
				char *s = va_arg(ap, char *);
     91e:	f854 6b04 	ldr.w	r6, [r4], #4
				while (*s) {
     922:	46b2      	mov	sl, r6
     924:	4653      	mov	r3, sl
     926:	f81a 0b01 	ldrb.w	r0, [sl], #1
     92a:	b968      	cbnz	r0, 948 <CONFIG_ISR_STACK_SIZE+0x148>
				if (padding == PAD_SPACE_AFTER) {
     92c:	f1b8 0f03 	cmp.w	r8, #3
     930:	d121      	bne.n	976 <CONFIG_ISR_STACK_SIZE+0x176>
					int remaining = min_width - (s - start);
     932:	1b9e      	subs	r6, r3, r6
     934:	eba9 0606 	sub.w	r6, r9, r6
					while (remaining-- > 0) {
     938:	2e00      	cmp	r6, #0
     93a:	f77f ae97 	ble.w	66c <z_vprintk+0x18>
						out(' ', ctx);
     93e:	4659      	mov	r1, fp
     940:	2020      	movs	r0, #32
     942:	47a8      	blx	r5
     944:	3e01      	subs	r6, #1
     946:	e7f7      	b.n	938 <CONFIG_ISR_STACK_SIZE+0x138>
					out((int)(*s++), ctx);
     948:	4659      	mov	r1, fp
     94a:	47a8      	blx	r5
     94c:	e7ea      	b.n	924 <CONFIG_ISR_STACK_SIZE+0x124>
				out(c, ctx);
     94e:	4659      	mov	r1, fp
     950:	f854 0b04 	ldr.w	r0, [r4], #4
     954:	e6ae      	b.n	6b4 <z_vprintk+0x60>
				out((int)'%', ctx);
     956:	4659      	mov	r1, fp
     958:	e6ac      	b.n	6b4 <z_vprintk+0x60>
				length_mod = 0;
     95a:	4637      	mov	r7, r6
				padding = PAD_NONE;
     95c:	46b0      	mov	r8, r6
				min_width = -1;
     95e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
				might_format = 1;
     962:	2601      	movs	r6, #1
     964:	e68a      	b.n	67c <z_vprintk+0x28>
			switch (*fmt) {
     966:	f04f 0803 	mov.w	r8, #3
     96a:	e687      	b.n	67c <z_vprintk+0x28>
					padding = PAD_ZERO_BEFORE;
     96c:	f04f 0801 	mov.w	r8, #1
     970:	e684      	b.n	67c <z_vprintk+0x28>
					length_mod = 'L';
     972:	274c      	movs	r7, #76	; 0x4c
     974:	e682      	b.n	67c <z_vprintk+0x28>
			might_format = 0;
     976:	4606      	mov	r6, r0
		++fmt;
     978:	e680      	b.n	67c <z_vprintk+0x28>
     97a:	bf00      	nop

0000097c <vprintk>:
{
     97c:	b507      	push	{r0, r1, r2, lr}
     97e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     980:	2100      	movs	r1, #0
{
     982:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     984:	9101      	str	r1, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     986:	4803      	ldr	r0, [pc, #12]	; (994 <vprintk+0x18>)
     988:	a901      	add	r1, sp, #4
     98a:	f7ff fe63 	bl	654 <z_vprintk>
}
     98e:	b003      	add	sp, #12
     990:	f85d fb04 	ldr.w	pc, [sp], #4
     994:	00000591 	.word	0x00000591

00000998 <nordicsemi_nrf91_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     998:	f04f 0220 	mov.w	r2, #32
     99c:	f3ef 8311 	mrs	r3, BASEPRI
     9a0:	f382 8811 	msr	BASEPRI, r2
     9a4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
     9a8:	2101      	movs	r1, #1
     9aa:	4a04      	ldr	r2, [pc, #16]	; (9bc <nordicsemi_nrf91_init+0x24>)
     9ac:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     9b0:	f383 8811 	msr	BASEPRI, r3
     9b4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     9b8:	2000      	movs	r0, #0
     9ba:	4770      	bx	lr
     9bc:	50039000 	.word	0x50039000

000009c0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     9c0:	b120      	cbz	r0, 9cc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     9c2:	4b03      	ldr	r3, [pc, #12]	; (9d0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
     9c4:	0180      	lsls	r0, r0, #6
     9c6:	f043 0301 	orr.w	r3, r3, #1
     9ca:	4718      	bx	r3

void arch_busy_wait(u32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     9cc:	4770      	bx	lr
     9ce:	bf00      	nop
     9d0:	00004860 	.word	0x00004860

000009d4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
     9d4:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     9d6:	4806      	ldr	r0, [pc, #24]	; (9f0 <uart_console_init+0x1c>)
     9d8:	f001 fb0c 	bl	1ff4 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     9dc:	4b05      	ldr	r3, [pc, #20]	; (9f4 <uart_console_init+0x20>)
     9de:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
     9e0:	4805      	ldr	r0, [pc, #20]	; (9f8 <uart_console_init+0x24>)
     9e2:	f001 f8a7 	bl	1b34 <__stdout_hook_install>
	__printk_hook_install(console_out);
     9e6:	4804      	ldr	r0, [pc, #16]	; (9f8 <uart_console_init+0x24>)
     9e8:	f7ff fe2e 	bl	648 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
     9ec:	2000      	movs	r0, #0
     9ee:	bd08      	pop	{r3, pc}
     9f0:	00004ae8 	.word	0x00004ae8
     9f4:	20000150 	.word	0x20000150
     9f8:	000009fd 	.word	0x000009fd

000009fc <console_out>:
	if ('\n' == c) {
     9fc:	280a      	cmp	r0, #10
{
     9fe:	b538      	push	{r3, r4, r5, lr}
     a00:	4604      	mov	r4, r0
     a02:	4d07      	ldr	r5, [pc, #28]	; (a20 <console_out+0x24>)
	if ('\n' == c) {
     a04:	d104      	bne.n	a10 <console_out+0x14>
     a06:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
     a08:	6883      	ldr	r3, [r0, #8]
     a0a:	210d      	movs	r1, #13
     a0c:	685b      	ldr	r3, [r3, #4]
     a0e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
     a10:	6828      	ldr	r0, [r5, #0]
     a12:	6883      	ldr	r3, [r0, #8]
     a14:	b2e1      	uxtb	r1, r4
     a16:	685b      	ldr	r3, [r3, #4]
     a18:	4798      	blx	r3
}
     a1a:	4620      	mov	r0, r4
     a1c:	bd38      	pop	{r3, r4, r5, pc}
     a1e:	bf00      	nop
     a20:	20000150 	.word	0x20000150

00000a24 <clkstarted_handle.constprop.0>:
DEVICE_AND_API_INIT(clock_nrf, DT_INST_LABEL(0),
		    clk_init, &data, &config, PRE_KERNEL_1,
		    CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &clock_control_api);

static void clkstarted_handle(struct device *dev,
     a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
	struct clock_control_async_data *async_data;

	DBG(dev, type, "Clock started");
	sub_data->started = true;
     a26:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
     a28:	4f11      	ldr	r7, [pc, #68]	; (a70 <clkstarted_handle.constprop.0+0x4c>)
static void clkstarted_handle(struct device *dev,
     a2a:	4605      	mov	r5, r0
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
     a2c:	68fb      	ldr	r3, [r7, #12]
	sub_data->started = true;
     a2e:	fb04 3400 	mla	r4, r4, r0, r3
     a32:	2301      	movs	r3, #1
     a34:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
     a36:	f04f 0320 	mov.w	r3, #32
     a3a:	f3ef 8111 	mrs	r1, BASEPRI
     a3e:	f383 8811 	msr	BASEPRI, r3
     a42:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_slist_is_empty(sys_slist_t *list);

Z_GENLIST_IS_EMPTY(slist)
     a46:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
     a48:	b12b      	cbz	r3, a56 <clkstarted_handle.constprop.0+0x32>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     a4a:	6866      	ldr	r6, [r4, #4]
     a4c:	681a      	ldr	r2, [r3, #0]
     a4e:	42b3      	cmp	r3, r6
	list->head = node;
     a50:	6022      	str	r2, [r4, #0]
	list->tail = node;
     a52:	bf08      	it	eq
     a54:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
     a56:	f381 8811 	msr	BASEPRI, r1
     a5a:	f3bf 8f6f 	isb	sy

	while ((async_data = list_get(&sub_data->list)) != NULL) {
     a5e:	b903      	cbnz	r3, a62 <clkstarted_handle.constprop.0+0x3e>
		async_data->cb(dev, (clock_control_subsys_t)type,
				async_data->user_data);
	}
}
     a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		async_data->cb(dev, (clock_control_subsys_t)type,
     a62:	4629      	mov	r1, r5
     a64:	e9d3 6201 	ldrd	r6, r2, [r3, #4]
     a68:	4638      	mov	r0, r7
     a6a:	47b0      	blx	r6
     a6c:	e7e3      	b.n	a36 <clkstarted_handle.constprop.0+0x12>
     a6e:	bf00      	nop
     a70:	20000094 	.word	0x20000094

00000a74 <nrf_power_clock_isr>:
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
     a74:	b508      	push	{r3, lr}
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     a76:	4b11      	ldr	r3, [pc, #68]	; (abc <nrf_power_clock_isr+0x48>)
     a78:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     a7a:	b16a      	cbz	r2, a98 <nrf_power_clock_isr+0x24>
    return p_reg->INTENSET & mask;
     a7c:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     a80:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     a84:	07d1      	lsls	r1, r2, #31
     a86:	d507      	bpl.n	a98 <nrf_power_clock_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     a88:	2200      	movs	r2, #0
     a8a:	601a      	str	r2, [r3, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     a8c:	4b0c      	ldr	r3, [pc, #48]	; (ac0 <nrf_power_clock_isr+0x4c>)

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
     a8e:	68db      	ldr	r3, [r3, #12]
     a90:	7a58      	ldrb	r0, [r3, #9]
     a92:	b908      	cbnz	r0, a98 <nrf_power_clock_isr+0x24>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
     a94:	f7ff ffc6 	bl	a24 <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
     a98:	4b0a      	ldr	r3, [pc, #40]	; (ac4 <nrf_power_clock_isr+0x50>)
     a9a:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
     a9c:	b162      	cbz	r2, ab8 <nrf_power_clock_isr+0x44>
    return p_reg->INTENSET & mask;
     a9e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
     aa2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
     aa6:	0792      	lsls	r2, r2, #30
     aa8:	d506      	bpl.n	ab8 <nrf_power_clock_isr+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
     aaa:	2200      	movs	r2, #0
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     aac:	2001      	movs	r0, #1
     aae:	601a      	str	r2, [r3, #0]
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
     ab0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     ab4:	f7ff bfb6 	b.w	a24 <clkstarted_handle.constprop.0>
}
     ab8:	bd08      	pop	{r3, pc}
     aba:	bf00      	nop
     abc:	50005100 	.word	0x50005100
     ac0:	20000094 	.word	0x20000094
     ac4:	50005104 	.word	0x50005104

00000ac8 <handle_next_tick_case>:
 * counter progresses during that time it means that 1 tick elapsed and
 * interrupt is set pending.
 */
static void handle_next_tick_case(u32_t t)
{
	set_comparator(t + 2);
     ac8:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
     aca:	4b08      	ldr	r3, [pc, #32]	; (aec <handle_next_tick_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     acc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     ad0:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
     ad4:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
     ad8:	4290      	cmp	r0, r2
     ada:	d100      	bne.n	ade <handle_next_tick_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
     adc:	4770      	bx	lr
     ade:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
     ae2:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     ae4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
     ae8:	e7f2      	b.n	ad0 <handle_next_tick_case+0x8>
     aea:	bf00      	nop
     aec:	50015000 	.word	0x50015000

00000af0 <rtc1_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     af0:	2200      	movs	r2, #0
     af2:	4b06      	ldr	r3, [pc, #24]	; (b0c <rtc1_nrf_isr+0x1c>)
     af4:	601a      	str	r2, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	u32_t t = get_comparator();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
     af6:	4a06      	ldr	r2, [pc, #24]	; (b10 <rtc1_nrf_isr+0x20>)
    return p_reg->CC[ch];
     af8:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
     afc:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
     afe:	1ac0      	subs	r0, r0, r3
     b00:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
     b04:	4403      	add	r3, r0
     b06:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_ticks(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
     b08:	f002 b948 	b.w	2d9c <z_clock_announce>
     b0c:	50015140 	.word	0x50015140
     b10:	2000016c 	.word	0x2000016c

00000b14 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
     b14:	b538      	push	{r3, r4, r5, lr}
     b16:	4814      	ldr	r0, [pc, #80]	; (b68 <z_clock_driver_init+0x54>)
     b18:	f001 fa6c 	bl	1ff4 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_LABEL(DT_INST(0, nordic_nrf_clock)));
	if (!clock) {
     b1c:	b300      	cbz	r0, b60 <z_clock_driver_init+0x4c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
     b1e:	6883      	ldr	r3, [r0, #8]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
     b20:	2400      	movs	r4, #0
     b22:	2101      	movs	r1, #1
     b24:	681b      	ldr	r3, [r3, #0]
     b26:	4798      	blx	r3
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     b28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     b2c:	4d0f      	ldr	r5, [pc, #60]	; (b6c <z_clock_driver_init+0x58>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     b2e:	4b10      	ldr	r3, [pc, #64]	; (b70 <z_clock_driver_init+0x5c>)
    p_reg->PRESCALER = val;
     b30:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     b34:	601c      	str	r4, [r3, #0]
     b36:	4b0f      	ldr	r3, [pc, #60]	; (b74 <z_clock_driver_init+0x60>)
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC1_IRQn);
	int_enable();

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
     b38:	2101      	movs	r1, #1
     b3a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
     b3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
     b42:	4622      	mov	r2, r4
     b44:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
     b48:	2015      	movs	r0, #21
     b4a:	f000 fbd7 	bl	12fc <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
     b4e:	2015      	movs	r0, #21
     b50:	f000 fbc4 	bl	12dc <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
     b54:	2301      	movs	r3, #1

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	return 0;
     b56:	4620      	mov	r0, r4
     b58:	4a07      	ldr	r2, [pc, #28]	; (b78 <z_clock_driver_init+0x64>)
     b5a:	6013      	str	r3, [r2, #0]
     b5c:	602b      	str	r3, [r5, #0]
}
     b5e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
     b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b64:	e7fb      	b.n	b5e <z_clock_driver_init+0x4a>
     b66:	bf00      	nop
     b68:	00004caf 	.word	0x00004caf
     b6c:	50015000 	.word	0x50015000
     b70:	50015140 	.word	0x50015140
     b74:	e000e100 	.word	0xe000e100
     b78:	50015008 	.word	0x50015008

00000b7c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
     b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     return p_reg->COUNTER;
     b7e:	4b2c      	ldr	r3, [pc, #176]	; (c30 <z_clock_set_timeout+0xb4>)

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     b80:	4c2c      	ldr	r4, [pc, #176]	; (c34 <z_clock_set_timeout+0xb8>)
     b82:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	u32_t unannounced = counter_sub(counter(), last_count);
     b86:	4b2c      	ldr	r3, [pc, #176]	; (c38 <z_clock_set_timeout+0xbc>)
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
     b88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
     b8c:	bf08      	it	eq
     b8e:	4620      	moveq	r0, r4
	u32_t unannounced = counter_sub(counter(), last_count);
     b90:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
     b92:	1a52      	subs	r2, r2, r1
     b94:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
     b98:	0212      	lsls	r2, r2, #8
     b9a:	d436      	bmi.n	c0a <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
     b9c:	3801      	subs	r0, #1
     b9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
     ba2:	42a0      	cmp	r0, r4
     ba4:	bfa8      	it	ge
     ba6:	4620      	movge	r0, r4
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
     ba8:	3301      	adds	r3, #1
     baa:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
     bac:	42a0      	cmp	r0, r4
     bae:	bf94      	ite	ls
     bb0:	180c      	addls	r4, r1, r0
     bb2:	190c      	addhi	r4, r1, r4
    p_reg->INTENCLR = mask;
     bb4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     bb8:	2700      	movs	r7, #0
    p_reg->INTENCLR = mask;
     bba:	4b1d      	ldr	r3, [pc, #116]	; (c30 <z_clock_set_timeout+0xb4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     bbc:	4e1f      	ldr	r6, [pc, #124]	; (c3c <z_clock_set_timeout+0xc0>)
    p_reg->INTENCLR = mask;
     bbe:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
     return p_reg->COUNTER;
     bc2:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    return p_reg->CC[ch];
     bc6:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     bca:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	return (a - b) & COUNTER_MAX;
     bce:	1a52      	subs	r2, r2, r1
     bd0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
     bd4:	2a01      	cmp	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     bd6:	6037      	str	r7, [r6, #0]
    p_reg->CC[ch] = cc_val;
     bd8:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
     bdc:	461d      	mov	r5, r3
     bde:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
     be2:	d103      	bne.n	bec <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
     be4:	200f      	movs	r0, #15
     be6:	f003 fc8a 	bl	44fe <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
     bea:	6037      	str	r7, [r6, #0]
     bec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
     bf0:	4b13      	ldr	r3, [pc, #76]	; (c40 <z_clock_set_timeout+0xc4>)
     bf2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
     bf6:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     bfa:	1a23      	subs	r3, r4, r0
     bfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
     c00:	2b01      	cmp	r3, #1
     c02:	d104      	bne.n	c0e <z_clock_set_timeout+0x92>
		handle_next_tick_case(t);
     c04:	f7ff ff60 	bl	ac8 <handle_next_tick_case>
     c08:	e00b      	b.n	c22 <z_clock_set_timeout+0xa6>
		ticks = 0;
     c0a:	2000      	movs	r0, #0
     c0c:	e7cc      	b.n	ba8 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
     c0e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
     c12:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
     return p_reg->COUNTER;
     c16:	f8d5 0504 	ldr.w	r0, [r5, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
     c1a:	1a24      	subs	r4, r4, r0
     c1c:	3c02      	subs	r4, #2
	if (diff > MAX_TICKS) {
     c1e:	0223      	lsls	r3, r4, #8
     c20:	d4f0      	bmi.n	c04 <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
     c22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
     c26:	4b02      	ldr	r3, [pc, #8]	; (c30 <z_clock_set_timeout+0xb4>)
     c28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	set_protected_absolute_ticks(cyc);
}
     c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c2e:	bf00      	nop
     c30:	50015000 	.word	0x50015000
     c34:	007fffff 	.word	0x007fffff
     c38:	2000016c 	.word	0x2000016c
     c3c:	50015140 	.word	0x50015140
     c40:	e000e100 	.word	0xe000e100

00000c44 <z_clock_elapsed>:
	__asm__ volatile(
     c44:	f04f 0220 	mov.w	r2, #32
     c48:	f3ef 8311 	mrs	r3, BASEPRI
     c4c:	f382 8811 	msr	BASEPRI, r2
     c50:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
     c54:	4a06      	ldr	r2, [pc, #24]	; (c70 <z_clock_elapsed+0x2c>)
     c56:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
     c5a:	4a06      	ldr	r2, [pc, #24]	; (c74 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
     c5c:	6812      	ldr	r2, [r2, #0]
     c5e:	1a80      	subs	r0, r0, r2
     c60:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
     c64:	f383 8811 	msr	BASEPRI, r3
     c68:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
     c6c:	4770      	bx	lr
     c6e:	bf00      	nop
     c70:	50015000 	.word	0x50015000
     c74:	2000016c 	.word	0x2000016c

00000c78 <config_regions>:
}
#endif /* CONFIG_ARM_FIRMWARE_HAS_SECURE_ENTRY_FUNCS */


static void config_regions(bool ram, size_t start, size_t end, u32_t perm)
{
     c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const size_t region_size = ram ? RAM_SECURE_ATTRIBUTION_REGION_SIZE
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
     c7a:	2800      	cmp	r0, #0
{
     c7c:	461c      	mov	r4, r3

	for (size_t i = start; i < end; i++) {
     c7e:	460d      	mov	r5, r1
					: FLASH_SECURE_ATTRIBUTION_REGION_SIZE;
     c80:	bf14      	ite	ne
     c82:	f44f 5300 	movne.w	r3, #8192	; 0x2000
     c86:	f44f 4300 	moveq.w	r3, #32768	; 0x8000
	for (size_t i = start; i < end; i++) {
     c8a:	4e20      	ldr	r6, [pc, #128]	; (d0c <config_regions+0x94>)
     c8c:	4295      	cmp	r5, r2
     c8e:	d332      	bcc.n	cf6 <config_regions+0x7e>
		} else {
			NRF_SPU->FLASHREGION[i].PERM = perm;
		}
	}

	PRINT("%02u %02u 0x%05x 0x%05x \t", start, end - 1,
     c90:	fb02 f003 	mul.w	r0, r2, r3
     c94:	3a01      	subs	r2, #1
     c96:	434b      	muls	r3, r1
     c98:	9000      	str	r0, [sp, #0]
     c9a:	481d      	ldr	r0, [pc, #116]	; (d10 <config_regions+0x98>)
     c9c:	f002 fffb 	bl	3c96 <printk>
				region_size * start, region_size * end);
	PRINT("%s", perm & (ram ? SRAM_SECURE : FLASH_SECURE) ? "Secure\t\t" :
     ca0:	4b1c      	ldr	r3, [pc, #112]	; (d14 <config_regions+0x9c>)
     ca2:	f014 0f10 	tst.w	r4, #16
     ca6:	491c      	ldr	r1, [pc, #112]	; (d18 <config_regions+0xa0>)
     ca8:	481c      	ldr	r0, [pc, #112]	; (d1c <config_regions+0xa4>)
     caa:	bf08      	it	eq
     cac:	4619      	moveq	r1, r3
     cae:	f002 fff2 	bl	3c96 <printk>
								"Non-Secure\t");
	PRINT("%c", perm & (ram ? SRAM_READ : FLASH_READ)  ? 'r' : '-');
     cb2:	f014 0f04 	tst.w	r4, #4
     cb6:	bf14      	ite	ne
     cb8:	2172      	movne	r1, #114	; 0x72
     cba:	212d      	moveq	r1, #45	; 0x2d
     cbc:	4818      	ldr	r0, [pc, #96]	; (d20 <config_regions+0xa8>)
     cbe:	f002 ffea 	bl	3c96 <printk>
	PRINT("%c", perm & (ram ? SRAM_WRITE : FLASH_WRITE) ? 'w' : '-');
     cc2:	f014 0f02 	tst.w	r4, #2
     cc6:	bf14      	ite	ne
     cc8:	2177      	movne	r1, #119	; 0x77
     cca:	212d      	moveq	r1, #45	; 0x2d
     ccc:	4814      	ldr	r0, [pc, #80]	; (d20 <config_regions+0xa8>)
     cce:	f002 ffe2 	bl	3c96 <printk>
	PRINT("%c", perm & (ram ? SRAM_EXEC : FLASH_EXEC)  ? 'x' : '-');
     cd2:	f014 0f01 	tst.w	r4, #1
     cd6:	bf0c      	ite	eq
     cd8:	212d      	moveq	r1, #45	; 0x2d
     cda:	2178      	movne	r1, #120	; 0x78
     cdc:	4810      	ldr	r0, [pc, #64]	; (d20 <config_regions+0xa8>)
     cde:	f002 ffda 	bl	3c96 <printk>
	PRINT("%c", perm & (ram ? SRAM_LOCK : FLASH_LOCK)  ? 'l' : '-');
     ce2:	216c      	movs	r1, #108	; 0x6c
     ce4:	480e      	ldr	r0, [pc, #56]	; (d20 <config_regions+0xa8>)
     ce6:	f002 ffd6 	bl	3c96 <printk>
	PRINT("\n");
     cea:	480e      	ldr	r0, [pc, #56]	; (d24 <config_regions+0xac>)
}
     cec:	b003      	add	sp, #12
     cee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	PRINT("\n");
     cf2:	f002 bfd0 	b.w	3c96 <printk>
		if (ram) {
     cf6:	b128      	cbz	r0, d04 <config_regions+0x8c>
			NRF_SPU->RAMREGION[i].PERM = perm;
     cf8:	f505 77e0 	add.w	r7, r5, #448	; 0x1c0
			NRF_SPU->FLASHREGION[i].PERM = perm;
     cfc:	f846 4027 	str.w	r4, [r6, r7, lsl #2]
	for (size_t i = start; i < end; i++) {
     d00:	3501      	adds	r5, #1
     d02:	e7c3      	b.n	c8c <config_regions+0x14>
			NRF_SPU->FLASHREGION[i].PERM = perm;
     d04:	f505 77c0 	add.w	r7, r5, #384	; 0x180
     d08:	e7f8      	b.n	cfc <config_regions+0x84>
     d0a:	bf00      	nop
     d0c:	50003000 	.word	0x50003000
     d10:	00004b0e 	.word	0x00004b0e
     d14:	00004b02 	.word	0x00004b02
     d18:	00004af9 	.word	0x00004af9
     d1c:	00004c8d 	.word	0x00004c8d
     d20:	00004b28 	.word	0x00004b28
     d24:	00004e63 	.word	0x00004e63

00000d28 <spm_config_peripheral.constprop.0>:
		     SPU_PERIPHID_PERM_SECUREMAPPING_Split;

	return present && (usel || split);
}

static int spm_config_peripheral(u8_t id, bool dma_present)
     d28:	b508      	push	{r3, lr}
	 * Assign DMA capabilities and lock down the attribution.
	 *
	 * Note: the function assumes that the peripheral ID matches
	 * the IRQ line.
	 */
	NVIC_DisableIRQ(id);
     d2a:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
     d2c:	2b00      	cmp	r3, #0
     d2e:	db0c      	blt.n	d4a <spm_config_peripheral.constprop.0+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     d30:	2201      	movs	r2, #1
     d32:	f000 011f 	and.w	r1, r0, #31
     d36:	408a      	lsls	r2, r1
     d38:	095b      	lsrs	r3, r3, #5
     d3a:	4910      	ldr	r1, [pc, #64]	; (d7c <spm_config_peripheral.constprop.0+0x54>)
     d3c:	3320      	adds	r3, #32
     d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     d42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     d46:	f3bf 8f6f 	isb	sy
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     d4a:	0083      	lsls	r3, r0, #2
     d4c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
     d50:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     d54:	2831      	cmp	r0, #49	; 0x31
	const u32_t perm = NRF_SPU->PERIPHID[id].PERM;
     d56:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
	if (id == NRFX_PERIPHERAL_ID_GET(NRF_GPIOTE1_NS)) {
     d5a:	d006      	beq.n	d6a <spm_config_peripheral.constprop.0+0x42>
	return present && (usel || split);
     d5c:	2a00      	cmp	r2, #0
     d5e:	da07      	bge.n	d70 <spm_config_peripheral.constprop.0+0x48>
	bool usel = (perm & SPU_PERIPHID_PERM_SECUREMAPPING_Msk) ==
     d60:	f002 0203 	and.w	r2, r2, #3
	return present && (usel || split);
     d64:	3a02      	subs	r2, #2
     d66:	2a01      	cmp	r2, #1
     d68:	d802      	bhi.n	d70 <spm_config_peripheral.constprop.0+0x48>

	if (usel_or_split(id)) {
		NRF_SPU->PERIPHID[id].PERM = PERIPH_PRESENT | PERIPH_NONSEC |
     d6a:	4a05      	ldr	r2, [pc, #20]	; (d80 <spm_config_peripheral.constprop.0+0x58>)
     d6c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	}

	/* Even for non-present peripherals we force IRQs to be routed
	 * to Non-Secure state.
	 */
	irq_target_state_set(id, 0);
     d70:	2100      	movs	r1, #0
     d72:	f003 f95e 	bl	4032 <irq_target_state_set>
	return 0;
}
     d76:	2000      	movs	r0, #0
     d78:	bd08      	pop	{r3, pc}
     d7a:	bf00      	nop
     d7c:	e000e100 	.word	0xe000e100
     d80:	80000100 	.word	0x80000100

00000d84 <spm_jump>:
	tz_nonsecure_fpu_access_enable();
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */
}

void spm_jump(void)
{
     d84:	b530      	push	{r4, r5, lr}
	 * The assumption is that the MSP is located at VTOR_NS[0].
	 */
	u32_t *vtor_ns = (u32_t *)NON_SECURE_APP_ADDRESS;

	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     d86:	f44f 4440 	mov.w	r4, #49152	; 0xc000
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     d8a:	f24c 0504 	movw	r5, #49156	; 0xc004
{
     d8e:	b085      	sub	sp, #20
	PRINT("SPM: NS image at 0x%x\n", (u32_t)vtor_ns);
     d90:	f44f 4140 	mov.w	r1, #49152	; 0xc000
     d94:	482c      	ldr	r0, [pc, #176]	; (e48 <spm_jump+0xc4>)
     d96:	f002 ff7e 	bl	3c96 <printk>
	PRINT("SPM: NS MSP at 0x%x\n", vtor_ns[0]);
     d9a:	6821      	ldr	r1, [r4, #0]
     d9c:	482b      	ldr	r0, [pc, #172]	; (e4c <spm_jump+0xc8>)
     d9e:	f002 ff7a 	bl	3c96 <printk>
	PRINT("SPM: NS reset vector at 0x%x\n", vtor_ns[1]);
     da2:	6829      	ldr	r1, [r5, #0]
     da4:	482a      	ldr	r0, [pc, #168]	; (e50 <spm_jump+0xcc>)
     da6:	f002 ff76 	bl	3c96 <printk>

	/* Configure Non-Secure stack */
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     daa:	2210      	movs	r2, #16
     dac:	2100      	movs	r1, #0
     dae:	4668      	mov	r0, sp
     db0:	f003 f9fd 	bl	41ae <memset>
		.vtor_ns = (u32_t)vtor_ns,
		.msp_ns = vtor_ns[0],
     db4:	6823      	ldr	r3, [r4, #0]
	tz_nonsecure_state_setup(spm_ns_conf);
     db6:	4668      	mov	r0, sp
	tz_nonsecure_setup_conf_t spm_ns_conf = {
     db8:	9300      	str	r3, [sp, #0]
     dba:	9402      	str	r4, [sp, #8]
	tz_nonsecure_state_setup(spm_ns_conf);
     dbc:	f000 fe44 	bl	1a48 <tz_nonsecure_state_setup>
	tz_nonsecure_exception_prio_config(1);
     dc0:	2001      	movs	r0, #1
     dc2:	f000 fe71 	bl	1aa8 <tz_nonsecure_exception_prio_config>
	tz_nbanked_exception_target_state_set(0);
     dc6:	2000      	movs	r0, #0
     dc8:	f000 fe5a 	bl	1a80 <tz_nbanked_exception_target_state_set>
	tz_nonsecure_system_reset_req_block(
     dcc:	2000      	movs	r0, #0
     dce:	f000 fe7f 	bl	1ad0 <tz_nonsecure_system_reset_req_block>
	tz_sau_configure(0, 1);
     dd2:	2101      	movs	r1, #1
     dd4:	2000      	movs	r0, #0
     dd6:	f000 fe99 	bl	1b0c <tz_sau_configure>
	tz_nonsecure_fpu_access_enable();
     dda:	f000 fe8d 	bl	1af8 <tz_nonsecure_fpu_access_enable>

	spm_configure_ns(&spm_ns_conf);

	/* Generate function pointer for Non-Secure function call. */
	TZ_NONSECURE_FUNC_PTR_DECLARE(reset_ns);
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     dde:	682c      	ldr	r4, [r5, #0]

	if (TZ_NONSECURE_FUNC_PTR_IS_NS(reset_ns)) {
		PRINT("SPM: prepare to jump to Non-Secure image.\n");
     de0:	481c      	ldr	r0, [pc, #112]	; (e54 <spm_jump+0xd0>)
     de2:	f002 ff58 	bl	3c96 <printk>
		/* Note: Move UARTE0 before jumping, if it is
		 * to be used on the Non-Secure domain.
		 */

		/* Configure UARTE0 as non-secure */
		spm_config_peripheral(
     de6:	2008      	movs	r0, #8
     de8:	f7ff ff9e 	bl	d28 <spm_config_peripheral.constprop.0>
	reset_ns = TZ_NONSECURE_FUNC_PTR_CREATE(vtor_ns[1]);
     dec:	f024 0401 	bic.w	r4, r4, #1
  __ASM volatile ("dsb 0xF":::"memory");
     df0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     df4:	f3bf 8f6f 	isb	sy

		__DSB();
		__ISB();

		/* Jump to Non-Secure firmware */
		reset_ns();
     df8:	0864      	lsrs	r4, r4, #1
     dfa:	0064      	lsls	r4, r4, #1
     dfc:	4620      	mov	r0, r4
     dfe:	4621      	mov	r1, r4
     e00:	4622      	mov	r2, r4
     e02:	4623      	mov	r3, r4
     e04:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     e08:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     e0c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     e10:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     e14:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     e18:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     e1c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     e20:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     e24:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     e28:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     e2c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     e30:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     e34:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     e38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     e3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     e40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     e44:	f7ff fb76 	bl	534 <__gnu_cmse_nonsecure_call>

		CODE_UNREACHABLE;
     e48:	00004b2b 	.word	0x00004b2b
     e4c:	00004b42 	.word	0x00004b42
     e50:	00004b57 	.word	0x00004b57
     e54:	00004b75 	.word	0x00004b75

00000e58 <spm_config>:
		      (u32_t)reset_ns);
	}
}

void spm_config(void)
{
     e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("Flash regions\t\tDomain\t\tPermissions\n");
     e5c:	483b      	ldr	r0, [pc, #236]	; (f4c <spm_config+0xf4>)
     e5e:	f002 ff1a 	bl	3c96 <printk>
	config_regions(false, 0, NON_SECURE_FLASH_REGION_INDEX,
     e62:	2100      	movs	r1, #0
     e64:	f240 1317 	movw	r3, #279	; 0x117
     e68:	4608      	mov	r0, r1
     e6a:	2201      	movs	r2, #1
     e6c:	f7ff ff04 	bl	c78 <config_regions>
	config_regions(false, NON_SECURE_FLASH_REGION_INDEX,
     e70:	f240 1307 	movw	r3, #263	; 0x107
     e74:	2220      	movs	r2, #32
     e76:	2101      	movs	r1, #1
     e78:	2000      	movs	r0, #0
     e7a:	f7ff fefd 	bl	c78 <config_regions>
	PRINT("\n");
     e7e:	4834      	ldr	r0, [pc, #208]	; (f50 <spm_config+0xf8>)
     e80:	f002 ff09 	bl	3c96 <printk>
	u32_t nsc_size = FLASH_NSC_SIZE_FROM_ADDR(__sg_start);
     e84:	4b33      	ldr	r3, [pc, #204]	; (f54 <spm_config+0xfc>)
                                            bool               lock_conf)
{
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].REGION & SPU_FLASHNSC_REGION_LOCK_Msk));
    NRFX_ASSERT(!(p_reg->FLASHNSC[flash_nsc_id].SIZE & SPU_FLASHNSC_SIZE_LOCK_Msk));

    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
     e86:	4a34      	ldr	r2, [pc, #208]	; (f58 <spm_config+0x100>)
     e88:	f3c3 31c4 	ubfx	r1, r3, #15, #5
     e8c:	f3c3 030e 	ubfx	r3, r3, #0, #15
     e90:	f5c3 4300 	rsb	r3, r3, #32768	; 0x8000
        (lock_conf ? SPU_FLASHNSC_REGION_LOCK_Msk : 0);
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
     e94:	f3c3 1343 	ubfx	r3, r3, #5, #4
    p_reg->FLASHNSC[flash_nsc_id].REGION = (uint32_t)region_number |
     e98:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_reg->FLASHNSC[flash_nsc_id].SIZE = (uint32_t)flash_nsc_size |
     e9c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	PRINT("Non-secure callable region 0 placed in flash region %d with size %d.\n",
     ea0:	f8d2 1500 	ldr.w	r1, [r2, #1280]	; 0x500
     ea4:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
     ea8:	482c      	ldr	r0, [pc, #176]	; (f5c <spm_config+0x104>)
     eaa:	0152      	lsls	r2, r2, #5
     eac:	f002 fef3 	bl	3c96 <printk>
	PRINT("\n");
     eb0:	4827      	ldr	r0, [pc, #156]	; (f50 <spm_config+0xf8>)
     eb2:	f002 fef0 	bl	3c96 <printk>
	int err = spm_secure_services_init();
     eb6:	f003 f86c 	bl	3f92 <spm_secure_services_init>
	if (err != 0) {
     eba:	4601      	mov	r1, r0
     ebc:	b110      	cbz	r0, ec4 <spm_config+0x6c>
		PRINT("Could not initialize secure services (err %d).\n", err);
     ebe:	4828      	ldr	r0, [pc, #160]	; (f60 <spm_config+0x108>)
     ec0:	f002 fee9 	bl	3c96 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
     ec4:	2400      	movs	r4, #0
	PRINT("SRAM region\t\tDomain\t\tPermissions\n");
     ec6:	4827      	ldr	r0, [pc, #156]	; (f64 <spm_config+0x10c>)
     ec8:	f002 fee5 	bl	3c96 <printk>
	config_regions(true, 0, NON_SECURE_RAM_REGION_INDEX,
     ecc:	f240 1317 	movw	r3, #279	; 0x117
     ed0:	2208      	movs	r2, #8
     ed2:	2100      	movs	r1, #0
     ed4:	2001      	movs	r0, #1
     ed6:	f7ff fecf 	bl	c78 <config_regions>
	NRF_SPU->DPPI[0].PERM = mask;
     eda:	4d1f      	ldr	r5, [pc, #124]	; (f58 <spm_config+0x100>)
	config_regions(true, NON_SECURE_RAM_REGION_INDEX,
     edc:	f240 1307 	movw	r3, #263	; 0x107
     ee0:	2220      	movs	r2, #32
     ee2:	2108      	movs	r1, #8
     ee4:	2001      	movs	r0, #1
     ee6:	f7ff fec7 	bl	c78 <config_regions>
	PRINT("\n");
     eea:	4819      	ldr	r0, [pc, #100]	; (f50 <spm_config+0xf8>)
     eec:	f002 fed3 	bl	3c96 <printk>
	NRF_SPU->DPPI[0].PERM = mask;
     ef0:	f8c5 4480 	str.w	r4, [r5, #1152]	; 0x480
	PRINT("Peripheral\t\tDomain\t\tStatus\n");
     ef4:	481c      	ldr	r0, [pc, #112]	; (f68 <spm_config+0x110>)
     ef6:	f002 fece 	bl	3c96 <printk>
		PRINT("%02u %-21s%s", i, periph[i].name,
     efa:	4f1c      	ldr	r7, [pc, #112]	; (f6c <spm_config+0x114>)
		NRF_SPU->GPIOPORT[0].PERM = 0;
     efc:	f8c5 44c0 	str.w	r4, [r5, #1216]	; 0x4c0
		PRINT("%02u %-21s%s", i, periph[i].name,
     f00:	f8df 807c 	ldr.w	r8, [pc, #124]	; f80 <spm_config+0x128>
     f04:	4d1a      	ldr	r5, [pc, #104]	; (f70 <spm_config+0x118>)
     f06:	f8df 907c 	ldr.w	r9, [pc, #124]	; f84 <spm_config+0x12c>
     f0a:	796e      	ldrb	r6, [r5, #5]
     f0c:	4621      	mov	r1, r4
     f0e:	2e00      	cmp	r6, #0
     f10:	bf14      	ite	ne
     f12:	463b      	movne	r3, r7
     f14:	4643      	moveq	r3, r8
     f16:	4648      	mov	r0, r9
     f18:	682a      	ldr	r2, [r5, #0]
     f1a:	f002 febc 	bl	3c96 <printk>
		if (!periph[i].nonsecure) {
     f1e:	b966      	cbnz	r6, f3a <spm_config+0xe2>
			PRINT("\tSKIP\n");
     f20:	4814      	ldr	r0, [pc, #80]	; (f74 <spm_config+0x11c>)
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     f22:	3401      	adds	r4, #1
			PRINT("\tOK\n");
     f24:	f002 feb7 	bl	3c96 <printk>
	for (size_t i = 0; i < ARRAY_SIZE(periph); i++) {
     f28:	2c1a      	cmp	r4, #26
     f2a:	f105 0508 	add.w	r5, r5, #8
     f2e:	d1ec      	bne.n	f0a <spm_config+0xb2>
	PRINT("\n");
     f30:	4807      	ldr	r0, [pc, #28]	; (f50 <spm_config+0xf8>)
	spm_config_flash();
	spm_config_sram();
	spm_config_peripherals();
}
     f32:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	PRINT("\n");
     f36:	f002 beae 	b.w	3c96 <printk>
		err = spm_config_peripheral(periph[i].id, false);
     f3a:	7928      	ldrb	r0, [r5, #4]
     f3c:	f7ff fef4 	bl	d28 <spm_config_peripheral.constprop.0>
		if (err) {
     f40:	b108      	cbz	r0, f46 <spm_config+0xee>
			PRINT("\tERROR\n");
     f42:	480d      	ldr	r0, [pc, #52]	; (f78 <spm_config+0x120>)
     f44:	e7ed      	b.n	f22 <spm_config+0xca>
			PRINT("\tOK\n");
     f46:	480d      	ldr	r0, [pc, #52]	; (f7c <spm_config+0x124>)
     f48:	e7eb      	b.n	f22 <spm_config+0xca>
     f4a:	bf00      	nop
     f4c:	00004bab 	.word	0x00004bab
     f50:	00004e63 	.word	0x00004e63
     f54:	00007fe0 	.word	0x00007fe0
     f58:	50003000 	.word	0x50003000
     f5c:	00004bcf 	.word	0x00004bcf
     f60:	00004c15 	.word	0x00004c15
     f64:	00004c45 	.word	0x00004c45
     f68:	00004c67 	.word	0x00004c67
     f6c:	00004ba0 	.word	0x00004ba0
     f70:	0000487c 	.word	0x0000487c
     f74:	00004c90 	.word	0x00004c90
     f78:	00004c97 	.word	0x00004c97
     f7c:	00004c9f 	.word	0x00004c9f
     f80:	00004b06 	.word	0x00004b06
     f84:	00004c83 	.word	0x00004c83

00000f88 <__acle_se_spm_request_read>:
};


__TZ_NONSECURE_ENTRY_FUNC
int spm_request_read(void *destination, u32_t addr, size_t len)
{
     f88:	b510      	push	{r4, lr}
		 .size = FICR_PUBLIC_SIZE},
		{.start = FICR_RESTRICTED_ADDR,
		 .size = FICR_RESTRICTED_SIZE},
	};

	if (destination == NULL || len <= 0) {
     f8a:	2800      	cmp	r0, #0
     f8c:	d04b      	beq.n	1026 <__acle_se_spm_request_read+0x9e>
     f8e:	2a00      	cmp	r2, #0
     f90:	d049      	beq.n	1026 <__acle_se_spm_request_read+0x9e>

	for (size_t i = 0; i < ARRAY_SIZE(ranges); i++) {
		u32_t start = ranges[i].start;
		u32_t size = ranges[i].size;

		if (addr >= start && addr + len <= start + size) {
     f92:	4b26      	ldr	r3, [pc, #152]	; (102c <__acle_se_spm_request_read+0xa4>)
     f94:	4299      	cmp	r1, r3
     f96:	d93c      	bls.n	1012 <__acle_se_spm_request_read+0x8a>
     f98:	1854      	adds	r4, r2, r1
     f9a:	f603 231d 	addw	r3, r3, #2589	; 0xa1d
     f9e:	429c      	cmp	r4, r3
     fa0:	d83a      	bhi.n	1018 <__acle_se_spm_request_read+0x90>
			memcpy(destination, (const void *)addr, len);
     fa2:	f003 f8d9 	bl	4158 <memcpy>
			return 0;
     fa6:	2000      	movs	r0, #0
		}
	}

	return -EPERM;
}
     fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     fac:	4671      	mov	r1, lr
     fae:	4672      	mov	r2, lr
     fb0:	4673      	mov	r3, lr
     fb2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     fb6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
     fba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
     fbe:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
     fc2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
     fc6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
     fca:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
     fce:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
     fd2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
     fd6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
     fda:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
     fde:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     fe2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
     fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     fea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     fee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     ff2:	f38e 8c00 	msr	CPSR_fs, lr
     ff6:	b410      	push	{r4}
     ff8:	eef1 ca10 	vmrs	ip, fpscr
     ffc:	f64f 7460 	movw	r4, #65376	; 0xff60
    1000:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    1004:	ea0c 0c04 	and.w	ip, ip, r4
    1008:	eee1 ca10 	vmsr	fpscr, ip
    100c:	bc10      	pop	{r4}
    100e:	46f4      	mov	ip, lr
    1010:	4774      	bxns	lr
		if (addr >= start && addr + len <= start + size) {
    1012:	4b07      	ldr	r3, [pc, #28]	; (1030 <__acle_se_spm_request_read+0xa8>)
    1014:	4299      	cmp	r1, r3
    1016:	d903      	bls.n	1020 <__acle_se_spm_request_read+0x98>
    1018:	4b06      	ldr	r3, [pc, #24]	; (1034 <__acle_se_spm_request_read+0xac>)
    101a:	1854      	adds	r4, r2, r1
    101c:	429c      	cmp	r4, r3
    101e:	d9c0      	bls.n	fa2 <__acle_se_spm_request_read+0x1a>
	return -EPERM;
    1020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1024:	e7c0      	b.n	fa8 <__acle_se_spm_request_read+0x20>
		return -EINVAL;
    1026:	f06f 0015 	mvn.w	r0, #21
    102a:	e7bd      	b.n	fa8 <__acle_se_spm_request_read+0x20>
    102c:	00ff0203 	.word	0x00ff0203
    1030:	00ff012f 	.word	0x00ff012f
    1034:	00ff0138 	.word	0x00ff0138

00001038 <__acle_se_spm_firmware_info>:


#ifdef CONFIG_SPM_SERVICE_FIND_FIRMWARE_INFO
__TZ_NONSECURE_ENTRY_FUNC
int spm_firmware_info(u32_t fw_address, struct fw_info *info)
{
    1038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    103c:	4681      	mov	r9, r0
	const struct fw_info *tmp_info;

	if (info == NULL) {
    103e:	460e      	mov	r6, r1
{
    1040:	b085      	sub	sp, #20
	if (info == NULL) {
    1042:	2900      	cmp	r1, #0
    1044:	d054      	beq.n	10f0 <__acle_se_spm_firmware_info+0xb8>
 */
static inline const struct fw_info *fw_info_find(u32_t firmware_address)
{
	const struct fw_info *finfo;

	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1046:	f04f 0800 	mov.w	r8, #0
    104a:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 1104 <__acle_se_spm_firmware_info+0xcc>
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    104e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1108 <__acle_se_spm_firmware_info+0xd0>
    1052:	af01      	add	r7, sp, #4
		finfo = fw_info_check(firmware_address +
						fw_info_allowed_offsets[i]);
    1054:	f85b 5b04 	ldr.w	r5, [fp], #4
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    1058:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
		finfo = fw_info_check(firmware_address +
    105c:	444d      	add	r5, r9
	const u32_t fw_info_magic[] = {FIRMWARE_INFO_MAGIC};
    105e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
	if (memcmp(finfo->magic, fw_info_magic, CONFIG_FW_INFO_MAGIC_LEN)
    1062:	220c      	movs	r2, #12
    1064:	4639      	mov	r1, r7
    1066:	4628      	mov	r0, r5
    1068:	f003 f84f 	bl	410a <memcmp>
    106c:	4604      	mov	r4, r0
    106e:	b908      	cbnz	r0, 1074 <__acle_se_spm_firmware_info+0x3c>
		if (finfo) {
    1070:	2d00      	cmp	r5, #0
    1072:	d140      	bne.n	10f6 <__acle_se_spm_firmware_info+0xbe>
	for (u32_t i = 0; i < FW_INFO_OFFSET_COUNT; i++) {
    1074:	f108 0801 	add.w	r8, r8, #1
    1078:	f1b8 0f05 	cmp.w	r8, #5
    107c:	d1ea      	bne.n	1054 <__acle_se_spm_firmware_info+0x1c>
	if (tmp_info != NULL) {
		memcpy(info, tmp_info, sizeof(*tmp_info));
		return 0;
	}

	return -EFAULT;
    107e:	f06f 040d 	mvn.w	r4, #13
}
    1082:	4620      	mov	r0, r4
    1084:	b005      	add	sp, #20
    1086:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    108a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    108e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    1092:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    1096:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    109a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    109e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    10a2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    10a6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    10aa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    10ae:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    10b2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    10b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    10ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    10be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    10c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10c6:	4671      	mov	r1, lr
    10c8:	4672      	mov	r2, lr
    10ca:	4673      	mov	r3, lr
    10cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    10d0:	f38e 8c00 	msr	CPSR_fs, lr
    10d4:	b410      	push	{r4}
    10d6:	eef1 ca10 	vmrs	ip, fpscr
    10da:	f64f 7460 	movw	r4, #65376	; 0xff60
    10de:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    10e2:	ea0c 0c04 	and.w	ip, ip, r4
    10e6:	eee1 ca10 	vmsr	fpscr, ip
    10ea:	bc10      	pop	{r4}
    10ec:	46f4      	mov	ip, lr
    10ee:	4774      	bxns	lr
		return -EINVAL;
    10f0:	f06f 0415 	mvn.w	r4, #21
    10f4:	e7c5      	b.n	1082 <__acle_se_spm_firmware_info+0x4a>
		memcpy(info, tmp_info, sizeof(*tmp_info));
    10f6:	223c      	movs	r2, #60	; 0x3c
    10f8:	4629      	mov	r1, r5
    10fa:	4630      	mov	r0, r6
    10fc:	f003 f82c 	bl	4158 <memcpy>
		return 0;
    1100:	e7bf      	b.n	1082 <__acle_se_spm_firmware_info+0x4a>
    1102:	bf00      	nop
    1104:	0000494c 	.word	0x0000494c
    1108:	00004810 	.word	0x00004810

0000110c <nrf_cc310_platform_abort_init>:

/** @brief Function to initialize the nrf_cc310_platform abort APIs.
 */
void nrf_cc310_platform_abort_init(void)
{
	nrf_cc310_platform_set_abort(&apis);
    110c:	4801      	ldr	r0, [pc, #4]	; (1114 <nrf_cc310_platform_abort_init+0x8>)
    110e:	f002 b8c9 	b.w	32a4 <nrf_cc310_platform_set_abort>
    1112:	bf00      	nop
    1114:	00004960 	.word	0x00004960

00001118 <mutex_unlock>:
}


/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock(nrf_cc310_platform_mutex_t *mutex) {
    1118:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    111a:	b130      	cbz	r0, 112a <mutex_unlock+0x12>
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    }

    /* Ensure that the mutex has been initialized */
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    111c:	6843      	ldr	r3, [r0, #4]
    111e:	b13b      	cbz	r3, 1130 <mutex_unlock+0x18>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    }

    p_mutex = (struct k_mutex *)mutex->mutex;
    1120:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    1122:	f001 f969 	bl	23f8 <z_impl_k_mutex_unlock>

    k_mutex_unlock(p_mutex);
    return NRF_CC310_PLATFORM_SUCCESS;
    1126:	2000      	movs	r0, #0
}
    1128:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    112a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    112e:	e7fb      	b.n	1128 <mutex_unlock+0x10>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1130:	4800      	ldr	r0, [pc, #0]	; (1134 <mutex_unlock+0x1c>)
    1132:	e7f9      	b.n	1128 <mutex_unlock+0x10>
    1134:	ffff8fea 	.word	0xffff8fea

00001138 <mutex_free>:
static void mutex_free(nrf_cc310_platform_mutex_t *mutex) {
    1138:	b538      	push	{r3, r4, r5, lr}
    if (mutex == NULL) {
    113a:	4604      	mov	r4, r0
    113c:	b918      	cbnz	r0, 1146 <mutex_free+0xe>
        platform_abort_apis.abort_fn(
    113e:	4b0b      	ldr	r3, [pc, #44]	; (116c <mutex_free+0x34>)
    1140:	480b      	ldr	r0, [pc, #44]	; (1170 <mutex_free+0x38>)
    1142:	685b      	ldr	r3, [r3, #4]
    1144:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    1146:	6865      	ldr	r5, [r4, #4]
    1148:	b155      	cbz	r5, 1160 <mutex_free+0x28>
    if ((mutex->flags & NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED) == 0) {
    114a:	f015 0502 	ands.w	r5, r5, #2
    114e:	6820      	ldr	r0, [r4, #0]
    1150:	d107      	bne.n	1162 <mutex_free+0x2a>
        k_mem_slab_free(&mutex_slab, mutex->mutex);
    1152:	4601      	mov	r1, r0
    1154:	4807      	ldr	r0, [pc, #28]	; (1174 <mutex_free+0x3c>)
    1156:	f001 f8ad 	bl	22b4 <k_mem_slab_free>
        mutex->mutex = NULL;
    115a:	6025      	str	r5, [r4, #0]
    mutex->flags = NRF_CC310_PLATFORM_MUTEX_MASK_INVALID;
    115c:	2300      	movs	r3, #0
    115e:	6063      	str	r3, [r4, #4]
}
    1160:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1162:	2214      	movs	r2, #20
    1164:	2100      	movs	r1, #0
    1166:	f003 f822 	bl	41ae <memset>
    116a:	e7f7      	b.n	115c <mutex_free+0x24>
    116c:	20000068 	.word	0x20000068
    1170:	00004da0 	.word	0x00004da0
    1174:	20000170 	.word	0x20000170

00001178 <mutex_init>:
static void mutex_init(nrf_cc310_platform_mutex_t *mutex) {
    1178:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    117a:	4604      	mov	r4, r0
    117c:	b918      	cbnz	r0, 1186 <mutex_init+0xe>
        platform_abort_apis.abort_fn(
    117e:	4b14      	ldr	r3, [pc, #80]	; (11d0 <mutex_init+0x58>)
    1180:	4814      	ldr	r0, [pc, #80]	; (11d4 <mutex_init+0x5c>)
    1182:	685b      	ldr	r3, [r3, #4]
    1184:	4798      	blx	r3
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID &&
    1186:	6863      	ldr	r3, [r4, #4]
    1188:	b9cb      	cbnz	r3, 11be <mutex_init+0x46>
    118a:	6823      	ldr	r3, [r4, #0]
    118c:	b9bb      	cbnz	r3, 11be <mutex_init+0x46>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    118e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1196:	4621      	mov	r1, r4
    1198:	480f      	ldr	r0, [pc, #60]	; (11d8 <mutex_init+0x60>)
    119a:	f001 f859 	bl	2250 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    119e:	b908      	cbnz	r0, 11a4 <mutex_init+0x2c>
    11a0:	6823      	ldr	r3, [r4, #0]
    11a2:	b91b      	cbnz	r3, 11ac <mutex_init+0x34>
            platform_abort_apis.abort_fn(
    11a4:	4b0a      	ldr	r3, [pc, #40]	; (11d0 <mutex_init+0x58>)
    11a6:	480d      	ldr	r0, [pc, #52]	; (11dc <mutex_init+0x64>)
    11a8:	685b      	ldr	r3, [r3, #4]
    11aa:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    11ac:	2214      	movs	r2, #20
    11ae:	2100      	movs	r1, #0
    11b0:	6820      	ldr	r0, [r4, #0]
    11b2:	f002 fffc 	bl	41ae <memset>
        mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    11b6:	6863      	ldr	r3, [r4, #4]
    11b8:	f043 0302 	orr.w	r3, r3, #2
    11bc:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    11be:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    11c0:	f003 f8c2 	bl	4348 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC310_PLATFORM_MUTEX_MASK_IS_VALID;
    11c4:	6863      	ldr	r3, [r4, #4]
    11c6:	f043 0301 	orr.w	r3, r3, #1
    11ca:	6063      	str	r3, [r4, #4]
}
    11cc:	bd10      	pop	{r4, pc}
    11ce:	bf00      	nop
    11d0:	20000068 	.word	0x20000068
    11d4:	00004da0 	.word	0x00004da0
    11d8:	20000170 	.word	0x20000170
    11dc:	00004dc6 	.word	0x00004dc6

000011e0 <mutex_lock>:
static int32_t mutex_lock(nrf_cc310_platform_mutex_t *mutex) {
    11e0:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    11e2:	b168      	cbz	r0, 1200 <mutex_lock+0x20>
    if (mutex->flags == NRF_CC310_PLATFORM_MUTEX_MASK_INVALID) {
    11e4:	6843      	ldr	r3, [r0, #4]
    11e6:	b173      	cbz	r3, 1206 <mutex_lock+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    11e8:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    11ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    11ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    11f2:	f001 f889 	bl	2308 <z_impl_k_mutex_lock>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
    11f6:	4b05      	ldr	r3, [pc, #20]	; (120c <mutex_lock+0x2c>)
    if (ret == 0) {
    11f8:	2800      	cmp	r0, #0
        return NRF_CC310_PLATFORM_ERROR_MUTEX_FAILED;
    11fa:	bf18      	it	ne
    11fc:	4618      	movne	r0, r3
}
    11fe:	bd08      	pop	{r3, pc}
        return NRF_CC310_PLATFORM_ERROR_PARAM_NULL;
    1200:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1204:	e7fb      	b.n	11fe <mutex_lock+0x1e>
        return NRF_CC310_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1206:	4802      	ldr	r0, [pc, #8]	; (1210 <mutex_lock+0x30>)
    1208:	e7f9      	b.n	11fe <mutex_lock+0x1e>
    120a:	bf00      	nop
    120c:	ffff8fe9 	.word	0xffff8fe9
    1210:	ffff8fea 	.word	0xffff8fea

00001214 <nrf_cc310_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc310_platform mutex APIs
 */
void nrf_cc310_platform_mutex_init(void)
{
    1214:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1216:	4906      	ldr	r1, [pc, #24]	; (1230 <nrf_cc310_platform_mutex_init+0x1c>)
    1218:	2340      	movs	r3, #64	; 0x40
    121a:	2214      	movs	r2, #20
    121c:	4805      	ldr	r0, [pc, #20]	; (1234 <nrf_cc310_platform_mutex_init+0x20>)
    121e:	f003 f878 	bl	4312 <k_mem_slab_init>
            mutex_slab_buffer,
            sizeof(struct k_mutex),
            NUM_MUTEXES);

    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc310_platform_set_mutexes(&mutex_apis, &mutexes);
    1226:	4904      	ldr	r1, [pc, #16]	; (1238 <nrf_cc310_platform_mutex_init+0x24>)
    1228:	4804      	ldr	r0, [pc, #16]	; (123c <nrf_cc310_platform_mutex_init+0x28>)
    122a:	f002 b873 	b.w	3314 <nrf_cc310_platform_set_mutexes>
    122e:	bf00      	nop
    1230:	2000018c 	.word	0x2000018c
    1234:	20000170 	.word	0x20000170
    1238:	00004978 	.word	0x00004978
    123c:	00004968 	.word	0x00004968

00001240 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1240:	4a09      	ldr	r2, [pc, #36]	; (1268 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1242:	490a      	ldr	r1, [pc, #40]	; (126c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1244:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1246:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1248:	66d8      	str	r0, [r3, #108]	; 0x6c
	_current->arch.swap_return_value = _k_neg_eagain;
    124a:	6719      	str	r1, [r3, #112]	; 0x70

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    124c:	4908      	ldr	r1, [pc, #32]	; (1270 <arch_swap+0x30>)
    124e:	684b      	ldr	r3, [r1, #4]
    1250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1254:	604b      	str	r3, [r1, #4]
    1256:	2300      	movs	r3, #0
    1258:	f383 8811 	msr	BASEPRI, r3
    125c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1260:	6893      	ldr	r3, [r2, #8]
}
    1262:	6f18      	ldr	r0, [r3, #112]	; 0x70
    1264:	4770      	bx	lr
    1266:	bf00      	nop
    1268:	20000788 	.word	0x20000788
    126c:	000049ec 	.word	0x000049ec
    1270:	e000ed00 	.word	0xe000ed00

00001274 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1274:	490f      	ldr	r1, [pc, #60]	; (12b4 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1276:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1278:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    127c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    127e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1282:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1286:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1288:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    128c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1290:	4f09      	ldr	r7, [pc, #36]	; (12b8 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1292:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1296:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1298:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    129a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    129c:	6ed0      	ldr	r0, [r2, #108]	; 0x6c
    movs r3, #0
    129e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    12a0:	66d3      	str	r3, [r2, #108]	; 0x6c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    12a2:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    12a6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    12aa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    12ae:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    12b2:	4770      	bx	lr
    ldr r1, =_kernel
    12b4:	20000788 	.word	0x20000788
    ldr v4, =_SCS_ICSR
    12b8:	e000ed04 	.word	0xe000ed04

000012bc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    12bc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    12c0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    12c2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    12c6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    12ca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    12cc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    12d0:	2902      	cmp	r1, #2
    beq _oops
    12d2:	d0ff      	beq.n	12d4 <_oops>

000012d4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    12d4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    12d6:	f002 fed7 	bl	4088 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    12da:	bd01      	pop	{r0, pc}

000012dc <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    12dc:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    12de:	2b00      	cmp	r3, #0
    12e0:	db08      	blt.n	12f4 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12e2:	2201      	movs	r2, #1
    12e4:	f000 001f 	and.w	r0, r0, #31
    12e8:	fa02 f000 	lsl.w	r0, r2, r0
    12ec:	4a02      	ldr	r2, [pc, #8]	; (12f8 <arch_irq_enable+0x1c>)
    12ee:	095b      	lsrs	r3, r3, #5
    12f0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    12f4:	4770      	bx	lr
    12f6:	bf00      	nop
    12f8:	e000e100 	.word	0xe000e100

000012fc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    12fc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    12fe:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    1300:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1304:	bfac      	ite	ge
    1306:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    130a:	4b06      	ldrlt	r3, [pc, #24]	; (1324 <z_arm_irq_priority_set+0x28>)
    130c:	ea4f 1141 	mov.w	r1, r1, lsl #5
    1310:	b2c9      	uxtb	r1, r1
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1312:	bfab      	itete	ge
    1314:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1318:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    131c:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1320:	5419      	strblt	r1, [r3, r0]
}
    1322:	4770      	bx	lr
    1324:	e000ed14 	.word	0xe000ed14

00001328 <arch_new_thread>:
#ifdef CONFIG_INIT_STACKS
	memset(stack, 0xaa, stack_size);
#endif
#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (uintptr_t)stack;
	thread->stack_info.size = stack_size;
    1328:	e9c0 1218 	strd	r1, r2, [r0, #96]	; 0x60
			- MPU_GUARD_ALIGN_AND_SIZE;
		stackSize -= MPU_GUARD_ALIGN_AND_SIZE_FLOAT
			- MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif
	stackEnd = pStackMem + stackSize;
    132c:	440a      	add	r2, r1
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(Z_STACK_PTR_ALIGN(stackEnd -
    132e:	3a20      	subs	r2, #32
    1330:	f022 0207 	bic.w	r2, r2, #7
#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
    1334:	6013      	str	r3, [r2, #0]
	pInitCtx->basic.a2 = (u32_t)parameter1;
    1336:	9b00      	ldr	r3, [sp, #0]
	pInitCtx->basic.pc &= 0xfffffffe;
    1338:	4907      	ldr	r1, [pc, #28]	; (1358 <arch_new_thread+0x30>)
	pInitCtx->basic.a2 = (u32_t)parameter1;
    133a:	6053      	str	r3, [r2, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    133c:	9b01      	ldr	r3, [sp, #4]
	pInitCtx->basic.pc &= 0xfffffffe;
    133e:	f021 0101 	bic.w	r1, r1, #1
	pInitCtx->basic.a3 = (u32_t)parameter2;
    1342:	6093      	str	r3, [r2, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    1344:	9b02      	ldr	r3, [sp, #8]
	pInitCtx->basic.pc &= 0xfffffffe;
    1346:	6191      	str	r1, [r2, #24]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    1348:	60d3      	str	r3, [r2, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	pInitCtx->basic.xpsr =
    134a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    134e:	61d3      	str	r3, [r2, #28]
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (u32_t)pInitCtx;

	thread->arch.basepri = 0;
    1350:	2300      	movs	r3, #0
	thread->callee_saved.psp = (u32_t)pInitCtx;
    1352:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1354:	66c3      	str	r3, [r0, #108]	; 0x6c

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1356:	4770      	bx	lr
    1358:	00003cb1 	.word	0x00003cb1

0000135c <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    135c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    135e:	461d      	mov	r5, r3
    1360:	4606      	mov	r6, r0
    1362:	460c      	mov	r4, r1
    1364:	4617      	mov	r7, r2
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1366:	2300      	movs	r3, #0
    1368:	eee1 3a10 	vmsr	fpscr, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    136c:	f000 f9f4 	bl	1758 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);

	_current = main_thread;
    1370:	4b08      	ldr	r3, [pc, #32]	; (1394 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    1372:	19e2      	adds	r2, r4, r7
	start_of_main_stack = (char *)Z_STACK_PTR_ALIGN(start_of_main_stack);
    1374:	f022 0407 	bic.w	r4, r2, #7
	_current = main_thread;
    1378:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    137a:	4628      	mov	r0, r5
    137c:	f384 8809 	msr	PSP, r4
    1380:	2100      	movs	r1, #0
    1382:	b663      	cpsie	if
    1384:	f381 8811 	msr	BASEPRI, r1
    1388:	f3bf 8f6f 	isb	sy
    138c:	2200      	movs	r2, #0
    138e:	2300      	movs	r3, #0
    1390:	f002 fc8e 	bl	3cb0 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1394:	20000788 	.word	0x20000788

00001398 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1398:	4901      	ldr	r1, [pc, #4]	; (13a0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    139a:	2210      	movs	r2, #16
	str	r2, [r1]
    139c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    139e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    13a0:	e000ed10 	.word	0xe000ed10

000013a4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    13a4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    13a6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    13a8:	f380 8811 	msr	BASEPRI, r0
	isb
    13ac:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    13b0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    13b4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    13b6:	b662      	cpsie	i
	isb
    13b8:	f3bf 8f6f 	isb	sy

	bx	lr
    13bc:	4770      	bx	lr
    13be:	bf00      	nop

000013c0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    13c0:	bf30      	wfi
    b z_SysNmiOnReset
    13c2:	f7ff bffd 	b.w	13c0 <z_SysNmiOnReset>
    13c6:	bf00      	nop

000013c8 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    13c8:	4a17      	ldr	r2, [pc, #92]	; (1428 <z_arm_prep_c+0x60>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    13ca:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    13cc:	4b17      	ldr	r3, [pc, #92]	; (142c <z_arm_prep_c+0x64>)
    13ce:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    13d2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    13d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13d8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    13dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    13e0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    13e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    13e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    13ec:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    13f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR &= (~(FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk));
    13f4:	4a0e      	ldr	r2, [pc, #56]	; (1430 <z_arm_prep_c+0x68>)
    13f6:	6853      	ldr	r3, [r2, #4]
    13f8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    13fc:	6053      	str	r3, [r2, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    13fe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1402:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
    1406:	2300      	movs	r3, #0
    1408:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    140c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1410:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1414:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1418:	f000 fe2a 	bl	2070 <z_bss_zero>
	z_data_copy();
    141c:	f000 fe32 	bl	2084 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1420:	f000 f968 	bl	16f4 <z_arm_interrupt_init>
	z_cstart();
    1424:	f000 fe6c 	bl	2100 <z_cstart>
    1428:	00000000 	.word	0x00000000
    142c:	e000ed00 	.word	0xe000ed00
    1430:	e000ef30 	.word	0xe000ef30

00001434 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1434:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1436:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1438:	4a0b      	ldr	r2, [pc, #44]	; (1468 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    143a:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    143c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    143e:	bf1e      	ittt	ne
	movne	r1, #0
    1440:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1442:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1444:	f002 ff63 	blne	430e <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1448:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    144a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    144e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1452:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    1456:	4905      	ldr	r1, [pc, #20]	; (146c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1458:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    145a:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    145c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    145e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1462:	4903      	ldr	r1, [pc, #12]	; (1470 <_isr_wrapper+0x3c>)
	bx r1
    1464:	4708      	bx	r1
    1466:	0000      	.short	0x0000
	ldr r2, =_kernel
    1468:	20000788 	.word	0x20000788
	ldr r1, =_sw_isr_table
    146c:	00004600 	.word	0x00004600
	ldr r1, =z_arm_int_exit
    1470:	000016b5 	.word	0x000016b5

00001474 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1474:	f002 fcd1 	bl	3e1a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1478:	2020      	movs	r0, #32
    msr BASEPRI, r0
    147a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    147e:	4808      	ldr	r0, [pc, #32]	; (14a0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1480:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1484:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1486:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    148a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    148e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1490:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1492:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1496:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    149a:	f7ff ff95 	bl	13c8 <z_arm_prep_c>
    149e:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    14a0:	20000d28 	.word	0x20000d28

000014a4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    14a4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    14a8:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    14ac:	4672      	mov	r2, lr

	push {r0, lr}
    14ae:	b501      	push	{r0, lr}

	bl z_arm_fault
    14b0:	f000 f86c 	bl	158c <z_arm_fault>

	pop {r0, pc}
    14b4:	bd01      	pop	{r0, pc}
    14b6:	bf00      	nop

000014b8 <mem_manage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    14b8:	4b0c      	ldr	r3, [pc, #48]	; (14ec <mem_manage_fault.isra.0+0x34>)
    14ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    14bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    14be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14c0:	0792      	lsls	r2, r2, #30
    14c2:	d508      	bpl.n	14d6 <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    14c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    14c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14c8:	0612      	lsls	r2, r2, #24
    14ca:	d504      	bpl.n	14d6 <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    14cc:	b118      	cbz	r0, 14d6 <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    14ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    14d4:	629a      	str	r2, [r3, #40]	; 0x28

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    14d6:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    14d8:	4b04      	ldr	r3, [pc, #16]	; (14ec <mem_manage_fault.isra.0+0x34>)
    14da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    14dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    14de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    14e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14e2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    14e6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    14e8:	7008      	strb	r0, [r1, #0]

	return reason;
}
    14ea:	4770      	bx	lr
    14ec:	e000ed00 	.word	0xe000ed00

000014f0 <bus_fault.isra.0>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    14f0:	4b0d      	ldr	r3, [pc, #52]	; (1528 <bus_fault.isra.0+0x38>)
    14f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    14f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    14f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    14f8:	0592      	lsls	r2, r2, #22
    14fa:	d508      	bpl.n	150e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    14fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    14fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1500:	0412      	lsls	r2, r2, #16
    1502:	d504      	bpl.n	150e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    1504:	b118      	cbz	r0, 150e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    150c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;

	*recoverable = memory_fault_recoverable(esf);
    150e:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1510:	4b05      	ldr	r3, [pc, #20]	; (1528 <bus_fault.isra.0+0x38>)
    1512:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1516:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1518:	bf58      	it	pl
    151a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    151c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    151e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1522:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1524:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1526:	4770      	bx	lr
    1528:	e000ed00 	.word	0xe000ed00

0000152c <usage_fault.isra.0>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    152c:	4b07      	ldr	r3, [pc, #28]	; (154c <usage_fault.isra.0+0x20>)

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;

	return reason;
}
    152e:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    1534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    153a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    153c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    153e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1540:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1544:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1548:	629a      	str	r2, [r3, #40]	; 0x28
}
    154a:	4770      	bx	lr
    154c:	e000ed00 	.word	0xe000ed00

00001550 <secure_fault.isra.0>:
 */
static void secure_fault(const z_arch_esf_t *esf)
{
	PR_FAULT_INFO("***** SECURE FAULT *****");

	STORE_xFAR(sfar, SAU->SFAR);
    1550:	4b0d      	ldr	r3, [pc, #52]	; (1588 <secure_fault.isra.0+0x38>)
    1552:	699a      	ldr	r2, [r3, #24]
	if ((SAU->SFSR & SAU_SFSR_SFARVALID_Msk) != 0) {
    1554:	695a      	ldr	r2, [r3, #20]
		PR_EXC("  Address: 0x%x", sfar);
	}

	/* bits are sticky: they stack and must be reset */
	if ((SAU->SFSR & SAU_SFSR_INVEP_Msk) != 0) {
    1556:	695a      	ldr	r2, [r3, #20]
    1558:	07d0      	lsls	r0, r2, #31
    155a:	d40f      	bmi.n	157c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid entry point");
	} else if ((SAU->SFSR & SAU_SFSR_INVIS_Msk) != 0) {
    155c:	695a      	ldr	r2, [r3, #20]
    155e:	0791      	lsls	r1, r2, #30
    1560:	d40c      	bmi.n	157c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid integrity signature");
	} else if ((SAU->SFSR & SAU_SFSR_INVER_Msk) != 0) {
    1562:	695a      	ldr	r2, [r3, #20]
    1564:	0752      	lsls	r2, r2, #29
    1566:	d409      	bmi.n	157c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid exception return");
	} else if ((SAU->SFSR & SAU_SFSR_AUVIOL_Msk) != 0) {
    1568:	695a      	ldr	r2, [r3, #20]
    156a:	0710      	lsls	r0, r2, #28
    156c:	d406      	bmi.n	157c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Attribution unit violation");
	} else if ((SAU->SFSR & SAU_SFSR_INVTRAN_Msk) != 0) {
    156e:	695a      	ldr	r2, [r3, #20]
    1570:	06d1      	lsls	r1, r2, #27
    1572:	d403      	bmi.n	157c <secure_fault.isra.0+0x2c>
		PR_FAULT_INFO("  Invalid transition");
	} else if ((SAU->SFSR & SAU_SFSR_LSPERR_Msk) != 0) {
    1574:	695a      	ldr	r2, [r3, #20]
    1576:	0692      	lsls	r2, r2, #26
		PR_FAULT_INFO("  Lazy state preservation");
	} else if ((SAU->SFSR & SAU_SFSR_LSERR_Msk) != 0) {
    1578:	bf58      	it	pl
    157a:	695a      	ldrpl	r2, [r3, #20]
		PR_FAULT_INFO("  Lazy state error");
	}

	/* clear SFSR sticky bits */
	SAU->SFSR |= 0xFF;
    157c:	695a      	ldr	r2, [r3, #20]
    157e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1582:	615a      	str	r2, [r3, #20]
}
    1584:	4770      	bx	lr
    1586:	bf00      	nop
    1588:	e000edd0 	.word	0xe000edd0

0000158c <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    158c:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    158e:	4b41      	ldr	r3, [pc, #260]	; (1694 <z_arm_fault+0x108>)
    1590:	2500      	movs	r5, #0
    1592:	685b      	ldr	r3, [r3, #4]
{
    1594:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1596:	f3c3 0308 	ubfx	r3, r3, #0, #9
    159a:	f385 8811 	msr	BASEPRI, r5
    159e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    15a2:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    15a6:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    15aa:	d11e      	bne.n	15ea <z_arm_fault+0x5e>
	if ((exc_return & EXC_RETURN_EXCEPTION_SECURE_Secure) == 0U) {
    15ac:	f012 0401 	ands.w	r4, r2, #1
    15b0:	d01a      	beq.n	15e8 <z_arm_fault+0x5c>
	if (exc_return & EXC_RETURN_RETURN_STACK_Secure) {
    15b2:	0656      	lsls	r6, r2, #25
    15b4:	f002 0408 	and.w	r4, r2, #8
    15b8:	d467      	bmi.n	168a <z_arm_fault+0xfe>
		if (exc_return & EXC_RETURN_SPSEL_PROCESS) {
    15ba:	f082 0204 	eor.w	r2, r2, #4
    15be:	f3c2 0580 	ubfx	r5, r2, #2, #1
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    15c2:	b164      	cbz	r4, 15de <z_arm_fault+0x52>
  __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
    15c4:	f3ef 8689 	mrs	r6, PSP_NS
	*recoverable = false;
    15c8:	2200      	movs	r2, #0
    15ca:	3b03      	subs	r3, #3
    15cc:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    15d0:	2b04      	cmp	r3, #4
    15d2:	d84b      	bhi.n	166c <z_arm_fault+0xe0>
    15d4:	e8df f003 	tbb	[pc, r3]
    15d8:	41504c0b 	.word	0x41504c0b
    15dc:	48          	.byte	0x48
    15dd:	00          	.byte	0x00
  __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
    15de:	f3ef 8688 	mrs	r6, MSP_NS
  return(result);
    15e2:	e7f1      	b.n	15c8 <z_arm_fault+0x3c>
			ptr_esf =  (z_arch_esf_t *)psp;
    15e4:	460e      	mov	r6, r1
    15e6:	e7ef      	b.n	15c8 <z_arm_fault+0x3c>
	*nested_exc = false;
    15e8:	4625      	mov	r5, r4
		return NULL;
    15ea:	462e      	mov	r6, r5
    15ec:	e7ec      	b.n	15c8 <z_arm_fault+0x3c>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    15ee:	4b29      	ldr	r3, [pc, #164]	; (1694 <z_arm_fault+0x108>)
    15f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    15f2:	0792      	lsls	r2, r2, #30
    15f4:	d43a      	bmi.n	166c <z_arm_fault+0xe0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    15f6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    15f8:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    15fc:	d008      	beq.n	1610 <z_arm_fault+0x84>
		if (SCB_MMFSR != 0) {
    15fe:	3328      	adds	r3, #40	; 0x28
    1600:	781b      	ldrb	r3, [r3, #0]
    1602:	b1eb      	cbz	r3, 1640 <z_arm_fault+0xb4>
			reason = mem_manage_fault(esf, 1, recoverable);
    1604:	2001      	movs	r0, #1
    1606:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    160a:	f7ff ff55 	bl	14b8 <mem_manage_fault.isra.0>
    160e:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1610:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1614:	b993      	cbnz	r3, 163c <z_arm_fault+0xb0>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1616:	2220      	movs	r2, #32
    1618:	4631      	mov	r1, r6
    161a:	a802      	add	r0, sp, #8
    161c:	f002 fd9c 	bl	4158 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1620:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1622:	b36d      	cbz	r5, 1680 <z_arm_fault+0xf4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1624:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1628:	b922      	cbnz	r2, 1634 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    162a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    162e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1632:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1634:	4620      	mov	r0, r4
    1636:	a902      	add	r1, sp, #8
    1638:	f002 fd24 	bl	4084 <z_arm_fatal_error>
}
    163c:	b00b      	add	sp, #44	; 0x2c
    163e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (SCB_BFSR != 0) {
    1640:	4b15      	ldr	r3, [pc, #84]	; (1698 <z_arm_fault+0x10c>)
    1642:	781b      	ldrb	r3, [r3, #0]
    1644:	b12b      	cbz	r3, 1652 <z_arm_fault+0xc6>
			reason = bus_fault(esf, 1, recoverable);
    1646:	2001      	movs	r0, #1
    1648:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    164c:	f7ff ff50 	bl	14f0 <bus_fault.isra.0>
    1650:	e7dd      	b.n	160e <z_arm_fault+0x82>
		} else if (SCB_UFSR != 0) {
    1652:	4b12      	ldr	r3, [pc, #72]	; (169c <z_arm_fault+0x110>)
    1654:	881f      	ldrh	r7, [r3, #0]
    1656:	b2bf      	uxth	r7, r7
    1658:	b117      	cbz	r7, 1660 <z_arm_fault+0xd4>
		reason = usage_fault(esf);
    165a:	f7ff ff67 	bl	152c <usage_fault.isra.0>
    165e:	e7d6      	b.n	160e <z_arm_fault+0x82>
		} else if (SAU->SFSR != 0) {
    1660:	4b0f      	ldr	r3, [pc, #60]	; (16a0 <z_arm_fault+0x114>)
    1662:	695c      	ldr	r4, [r3, #20]
    1664:	2c00      	cmp	r4, #0
    1666:	d0d3      	beq.n	1610 <z_arm_fault+0x84>
		secure_fault(esf);
    1668:	f7ff ff72 	bl	1550 <secure_fault.isra.0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    166c:	2400      	movs	r4, #0
    166e:	e7cf      	b.n	1610 <z_arm_fault+0x84>
		reason = mem_manage_fault(esf, 0, recoverable);
    1670:	2000      	movs	r0, #0
    1672:	f10d 0107 	add.w	r1, sp, #7
    1676:	e7c8      	b.n	160a <z_arm_fault+0x7e>
		reason = bus_fault(esf, 0, recoverable);
    1678:	2000      	movs	r0, #0
    167a:	f10d 0107 	add.w	r1, sp, #7
    167e:	e7e5      	b.n	164c <z_arm_fault+0xc0>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1680:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1684:	f023 0301 	bic.w	r3, r3, #1
    1688:	e7d3      	b.n	1632 <z_arm_fault+0xa6>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    168a:	2c00      	cmp	r4, #0
    168c:	d1aa      	bne.n	15e4 <z_arm_fault+0x58>
			ptr_esf = (z_arch_esf_t *)msp;
    168e:	4606      	mov	r6, r0
			*nested_exc = true;
    1690:	2501      	movs	r5, #1
    1692:	e799      	b.n	15c8 <z_arm_fault+0x3c>
    1694:	e000ed00 	.word	0xe000ed00
    1698:	e000ed29 	.word	0xe000ed29
    169c:	e000ed2a 	.word	0xe000ed2a
    16a0:	e000edd0 	.word	0xe000edd0

000016a4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    16a4:	4a02      	ldr	r2, [pc, #8]	; (16b0 <z_arm_fault_init+0xc>)
    16a6:	6953      	ldr	r3, [r2, #20]
    16a8:	f043 0310 	orr.w	r3, r3, #16
    16ac:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    16ae:	4770      	bx	lr
    16b0:	e000ed00 	.word	0xe000ed00

000016b4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    16b4:	4b04      	ldr	r3, [pc, #16]	; (16c8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    16b6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    16b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    16ba:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    16bc:	d003      	beq.n	16c6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    16be:	4903      	ldr	r1, [pc, #12]	; (16cc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    16c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    16c4:	600a      	str	r2, [r1, #0]

000016c6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    16c6:	4770      	bx	lr
	ldr r3, =_kernel
    16c8:	20000788 	.word	0x20000788
	ldr r1, =_SCS_ICSR
    16cc:	e000ed04 	.word	0xe000ed04

000016d0 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    16d0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    16d4:	4905      	ldr	r1, [pc, #20]	; (16ec <sys_arch_reboot+0x1c>)
    16d6:	4b06      	ldr	r3, [pc, #24]	; (16f0 <sys_arch_reboot+0x20>)
    16d8:	68ca      	ldr	r2, [r1, #12]
    16da:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    16de:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    16e0:	60cb      	str	r3, [r1, #12]
    16e2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    16e6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    16e8:	e7fd      	b.n	16e6 <sys_arch_reboot+0x16>
    16ea:	bf00      	nop
    16ec:	e000ed00 	.word	0xe000ed00
    16f0:	05fa0004 	.word	0x05fa0004

000016f4 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    16f4:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16f6:	2120      	movs	r1, #32
    16f8:	4803      	ldr	r0, [pc, #12]	; (1708 <z_arm_interrupt_init+0x14>)
    16fa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    16fc:	3301      	adds	r3, #1
    16fe:	2b41      	cmp	r3, #65	; 0x41
    1700:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1704:	d1f9      	bne.n	16fa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1706:	4770      	bx	lr
    1708:	e000e100 	.word	0xe000e100

0000170c <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    170c:	b538      	push	{r3, r4, r5, lr}
    170e:	4604      	mov	r4, r0
	__asm__ volatile(
    1710:	f04f 0320 	mov.w	r3, #32
    1714:	f3ef 8511 	mrs	r5, BASEPRI
    1718:	f383 8811 	msr	BASEPRI, r3
    171c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    1720:	f001 f85e 	bl	27e0 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    1724:	4b0a      	ldr	r3, [pc, #40]	; (1750 <z_impl_k_thread_abort+0x44>)
    1726:	689b      	ldr	r3, [r3, #8]
    1728:	42a3      	cmp	r3, r4
    172a:	d10b      	bne.n	1744 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    172c:	4b09      	ldr	r3, [pc, #36]	; (1754 <z_impl_k_thread_abort+0x48>)
    172e:	685a      	ldr	r2, [r3, #4]
    1730:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1734:	b912      	cbnz	r2, 173c <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    1736:	4628      	mov	r0, r5
    1738:	f7ff fd82 	bl	1240 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    173c:	685a      	ldr	r2, [r3, #4]
    173e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1742:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    1744:	4628      	mov	r0, r5
}
    1746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    174a:	f002 be0f 	b.w	436c <z_reschedule_irqlock>
    174e:	bf00      	nop
    1750:	20000788 	.word	0x20000788
    1754:	e000ed00 	.word	0xe000ed00

00001758 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1758:	b510      	push	{r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    175a:	4b0e      	ldr	r3, [pc, #56]	; (1794 <z_arm_configure_static_mpu_regions+0x3c>)
{
    175c:	b088      	sub	sp, #32
		const struct k_mem_partition ramfunc_region =
    175e:	9302      	str	r3, [sp, #8]
    1760:	4b0d      	ldr	r3, [pc, #52]	; (1798 <z_arm_configure_static_mpu_regions+0x40>)
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1762:	4c0e      	ldr	r4, [pc, #56]	; (179c <z_arm_configure_static_mpu_regions+0x44>)
		const struct k_mem_partition ramfunc_region =
    1764:	9303      	str	r3, [sp, #12]
    1766:	4b0e      	ldr	r3, [pc, #56]	; (17a0 <z_arm_configure_static_mpu_regions+0x48>)
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1768:	4a0e      	ldr	r2, [pc, #56]	; (17a4 <z_arm_configure_static_mpu_regions+0x4c>)
		const struct k_mem_partition ramfunc_region =
    176a:	9304      	str	r3, [sp, #16]
	const struct k_mem_partition *static_regions[] = {
    176c:	ab02      	add	r3, sp, #8
    176e:	9301      	str	r3, [sp, #4]
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1770:	a801      	add	r0, sp, #4
    1772:	4623      	mov	r3, r4
    1774:	2101      	movs	r1, #1
    1776:	f000 f907 	bl	1988 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of k_mem_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct k_mem_partition dyn_region_areas[] = {
    177a:	2300      	movs	r3, #0
    177c:	9307      	str	r3, [sp, #28]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    177e:	4b0a      	ldr	r3, [pc, #40]	; (17a8 <z_arm_configure_static_mpu_regions+0x50>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1780:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1782:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1784:	a805      	add	r0, sp, #20
	const struct k_mem_partition dyn_region_areas[] = {
    1786:	9305      	str	r3, [sp, #20]
    1788:	9406      	str	r4, [sp, #24]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    178a:	f000 f907 	bl	199c <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    178e:	b008      	add	sp, #32
    1790:	bd10      	pop	{r4, pc}
    1792:	bf00      	nop
    1794:	20000000 	.word	0x20000000
    1798:	00000000 	.word	0x00000000
    179c:	20010000 	.word	0x20010000
    17a0:	00010006 	.word	0x00010006
    17a4:	20000000 	.word	0x20000000
    17a8:	20000148 	.word	0x20000148

000017ac <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
    17ac:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    17ae:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    17b0:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    17b2:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    17b6:	f004 031f 	and.w	r3, r4, #31
    17ba:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    17bc:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    17be:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    17c0:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    17c4:	4904      	ldr	r1, [pc, #16]	; (17d8 <region_init+0x2c>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    17c6:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    17ca:	f043 0301 	orr.w	r3, r3, #1
    17ce:	6088      	str	r0, [r1, #8]
  mpu->RBAR = rbar;
    17d0:	60ca      	str	r2, [r1, #12]
  mpu->RLAR = rlar;
    17d2:	610b      	str	r3, [r1, #16]
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    17d4:	bd10      	pop	{r4, pc}
    17d6:	bf00      	nop
    17d8:	e000ed90 	.word	0xe000ed90

000017dc <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    17dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    17e0:	4607      	mov	r7, r0
    17e2:	4688      	mov	r8, r1
    17e4:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    17e6:	2600      	movs	r6, #0
	MPU->RNR = index;
    17e8:	4d4a      	ldr	r5, [pc, #296]	; (1914 <mpu_configure_regions_and_partition.constprop.0+0x138>)
static int mpu_configure_regions_and_partition(const struct k_mem_partition
    17ea:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    17ec:	4546      	cmp	r6, r8
    17ee:	da0b      	bge.n	1808 <mpu_configure_regions_and_partition.constprop.0+0x2c>
		if (regions[i]->size == 0U) {
    17f0:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    17f4:	f8d3 9004 	ldr.w	r9, [r3, #4]
    17f8:	f1b9 0f00 	cmp.w	r9, #0
    17fc:	d03a      	beq.n	1874 <mpu_configure_regions_and_partition.constprop.0+0x98>
		&&
    17fe:	f1b9 0f1f 	cmp.w	r9, #31
    1802:	d805      	bhi.n	1810 <mpu_configure_regions_and_partition.constprop.0+0x34>

			reg_index =
				mpu_configure_region(reg_index, regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    1804:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    1808:	4620      	mov	r0, r4
    180a:	b005      	add	sp, #20
    180c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    1810:	f019 0f1f 	tst.w	r9, #31
    1814:	d1f6      	bne.n	1804 <mpu_configure_regions_and_partition.constprop.0+0x28>
		((part->start &
    1816:	f8d3 a000 	ldr.w	sl, [r3]
		&&
    181a:	f01a 0f1f 	tst.w	sl, #31
    181e:	d1f1      	bne.n	1804 <mpu_configure_regions_and_partition.constprop.0+0x28>
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1820:	4650      	mov	r0, sl
    1822:	f002 fc5c 	bl	40de <arm_cmse_mpu_region_get>
    1826:	4683      	mov	fp, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1828:	eb09 000a 	add.w	r0, r9, sl
    182c:	3801      	subs	r0, #1
    182e:	f002 fc56 	bl	40de <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1832:	4583      	cmp	fp, r0
    1834:	d1e6      	bne.n	1804 <mpu_configure_regions_and_partition.constprop.0+0x28>
		if ((u_reg_index == -EINVAL) ||
    1836:	f11b 0f16 	cmn.w	fp, #22
    183a:	d0e3      	beq.n	1804 <mpu_configure_regions_and_partition.constprop.0+0x28>
			(u_reg_index > (reg_index - 1))) {
    183c:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    183e:	455b      	cmp	r3, fp
    1840:	dbe0      	blt.n	1804 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
    1842:	f8c5 b008 	str.w	fp, [r5, #8]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1846:	68e8      	ldr	r0, [r5, #12]
	MPU->RNR = index;
    1848:	f8c5 b008 	str.w	fp, [r5, #8]
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    184c:	692b      	ldr	r3, [r5, #16]
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    184e:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1852:	f020 001f 	bic.w	r0, r0, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1856:	f043 0a1f 	orr.w	sl, r3, #31
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    185a:	e9d1 3200 	ldrd	r3, r2, [r1]
    185e:	441a      	add	r2, r3
		if ((regions[i]->start == u_reg_base) &&
    1860:	4298      	cmp	r0, r3
		u32_t reg_last = regions[i]->start + regions[i]->size - 1;
    1862:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i]->start == u_reg_base) &&
    1866:	d118      	bne.n	189a <mpu_configure_regions_and_partition.constprop.0+0xbe>
    1868:	45ca      	cmp	sl, r9
    186a:	d105      	bne.n	1878 <mpu_configure_regions_and_partition.constprop.0+0x9c>
			mpu_configure_region(u_reg_index, regions[i]);
    186c:	fa5f f08b 	uxtb.w	r0, fp
    1870:	f002 fc15 	bl	409e <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    1874:	3601      	adds	r6, #1
    1876:	e7b9      	b.n	17ec <mpu_configure_regions_and_partition.constprop.0+0x10>
	MPU->RNR = index;
    1878:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    187c:	68eb      	ldr	r3, [r5, #12]
		| (base & MPU_RBAR_BASE_Msk);
    187e:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1882:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    1886:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1888:	60ea      	str	r2, [r5, #12]
				mpu_configure_region(reg_index, regions[i]);
    188a:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, regions[i]);
    188c:	f002 fc07 	bl	409e <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1890:	f110 0f16 	cmn.w	r0, #22
    1894:	d0b6      	beq.n	1804 <mpu_configure_regions_and_partition.constprop.0+0x28>
			reg_index++;
    1896:	1c44      	adds	r4, r0, #1
    1898:	e7ec      	b.n	1874 <mpu_configure_regions_and_partition.constprop.0+0x98>
	MPU->RNR = index;
    189a:	f8c5 b008 	str.w	fp, [r5, #8]
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    189e:	692a      	ldr	r2, [r5, #16]
    18a0:	3b01      	subs	r3, #1
    18a2:	f023 031f 	bic.w	r3, r3, #31
    18a6:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    18aa:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    18ac:	45ca      	cmp	sl, r9
    18ae:	b2e0      	uxtb	r0, r4
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    18b0:	612b      	str	r3, [r5, #16]
		} else if (reg_last == u_reg_last) {
    18b2:	d0eb      	beq.n	188c <mpu_configure_regions_and_partition.constprop.0+0xb0>
				mpu_configure_region(reg_index, regions[i]);
    18b4:	f002 fbf3 	bl	409e <mpu_configure_region>
			if (reg_index == -EINVAL) {
    18b8:	f110 0f16 	cmn.w	r0, #22
    18bc:	d0a2      	beq.n	1804 <mpu_configure_regions_and_partition.constprop.0+0x28>
	MPU->RNR = index;
    18be:	f8c5 b008 	str.w	fp, [r5, #8]
	attr->rbar = MPU->RBAR &
    18c2:	68ea      	ldr	r2, [r5, #12]
    18c4:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i]->start +
    18c8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = MPU->RBAR &
    18cc:	f362 0304 	bfi	r3, r2, #0, #5
    18d0:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    18d4:	692b      	ldr	r3, [r5, #16]
    18d6:	f89d 2008 	ldrb.w	r2, [sp, #8]
    18da:	085b      	lsrs	r3, r3, #1
    18dc:	f363 1247 	bfi	r2, r3, #5, #3
			fill_region.base = regions[i]->start +
    18e0:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    18e4:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i]->start +
    18e8:	e9d3 1300 	ldrd	r1, r3, [r3]
    18ec:	440b      	add	r3, r1
    18ee:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i]->start +
    18f0:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    18f4:	3001      	adds	r0, #1
			REGION_LIMIT_ADDR((regions[i]->start +
    18f6:	4453      	add	r3, sl
    18f8:	eba3 0309 	sub.w	r3, r3, r9
    18fc:	b2c0      	uxtb	r0, r0
    18fe:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const u8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1)) {
    1902:	280f      	cmp	r0, #15
			fill_region.attr.r_limit =
    1904:	9303      	str	r3, [sp, #12]
    1906:	f63f af7d 	bhi.w	1804 <mpu_configure_regions_and_partition.constprop.0+0x28>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    190a:	4669      	mov	r1, sp
    190c:	f7ff ff4e 	bl	17ac <region_init>
    1910:	e7c1      	b.n	1896 <mpu_configure_regions_and_partition.constprop.0+0xba>
    1912:	bf00      	nop
    1914:	e000ed90 	.word	0xe000ed90

00001918 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1918:	2205      	movs	r2, #5
    191a:	4b03      	ldr	r3, [pc, #12]	; (1928 <arm_core_mpu_enable+0x10>)
    191c:	605a      	str	r2, [r3, #4]
    191e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1922:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1926:	4770      	bx	lr
    1928:	e000ed90 	.word	0xe000ed90

0000192c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    192c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1930:	2200      	movs	r2, #0
    1932:	4b01      	ldr	r3, [pc, #4]	; (1938 <arm_core_mpu_disable+0xc>)
    1934:	605a      	str	r2, [r3, #4]
}
    1936:	4770      	bx	lr
    1938:	e000ed90 	.word	0xe000ed90

0000193c <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(struct device *arg)
{
    193c:	b538      	push	{r3, r4, r5, lr}
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    193e:	4c0e      	ldr	r4, [pc, #56]	; (1978 <arm_mpu_init+0x3c>)
    1940:	6825      	ldr	r5, [r4, #0]
    1942:	2d10      	cmp	r5, #16
    1944:	d814      	bhi.n	1970 <arm_mpu_init+0x34>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1946:	f7ff fff1 	bl	192c <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    194a:	2000      	movs	r0, #0
	MPU->MAIR0 =
    194c:	4b0b      	ldr	r3, [pc, #44]	; (197c <arm_mpu_init+0x40>)
    194e:	4a0c      	ldr	r2, [pc, #48]	; (1980 <arm_mpu_init+0x44>)
    1950:	631a      	str	r2, [r3, #48]	; 0x30
    1952:	4285      	cmp	r5, r0
    1954:	d105      	bne.n	1962 <arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1956:	4b0b      	ldr	r3, [pc, #44]	; (1984 <arm_mpu_init+0x48>)
    1958:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    195a:	f7ff ffdd 	bl	1918 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    195e:	2000      	movs	r0, #0
}
    1960:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1962:	6861      	ldr	r1, [r4, #4]
    1964:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    1968:	f7ff ff20 	bl	17ac <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    196c:	3001      	adds	r0, #1
    196e:	e7f0      	b.n	1952 <arm_mpu_init+0x16>
		return -1;
    1970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1974:	e7f4      	b.n	1960 <arm_mpu_init+0x24>
    1976:	bf00      	nop
    1978:	0000498c 	.word	0x0000498c
    197c:	e000ed90 	.word	0xe000ed90
    1980:	0044ffaa 	.word	0x0044ffaa
    1984:	200007e4 	.word	0x200007e4

00001988 <arm_core_mpu_configure_static_mpu_regions>:
{
    1988:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    198a:	4c03      	ldr	r4, [pc, #12]	; (1998 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    198c:	7822      	ldrb	r2, [r4, #0]
    198e:	f7ff ff25 	bl	17dc <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1992:	7020      	strb	r0, [r4, #0]
}
    1994:	bd10      	pop	{r4, pc}
    1996:	bf00      	nop
    1998:	200007e4 	.word	0x200007e4

0000199c <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    199c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19a0:	4d26      	ldr	r5, [pc, #152]	; (1a3c <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>)
    19a2:	468a      	mov	sl, r1
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    19a4:	4606      	mov	r6, r0
    19a6:	f04f 0800 	mov.w	r8, #0
    19aa:	46ab      	mov	fp, r5
	MPU->RNR = index;
    19ac:	4f24      	ldr	r7, [pc, #144]	; (1a40 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa4>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    19ae:	45d0      	cmp	r8, sl
    19b0:	da1b      	bge.n	19ea <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    19b2:	f8d6 9004 	ldr.w	r9, [r6, #4]
    19b6:	f1b9 0f00 	cmp.w	r9, #0
    19ba:	d039      	beq.n	1a30 <arm_core_mpu_mark_areas_for_dynamic_regions+0x94>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    19bc:	6831      	ldr	r1, [r6, #0]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    19be:	4608      	mov	r0, r1
    19c0:	9101      	str	r1, [sp, #4]
    19c2:	f002 fb8c 	bl	40de <arm_cmse_mpu_region_get>
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    19c6:	9901      	ldr	r1, [sp, #4]
	u32_t region_start_addr = arm_cmse_mpu_region_get(start);
    19c8:	4604      	mov	r4, r0
	u32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    19ca:	eb09 0001 	add.w	r0, r9, r1
    19ce:	3801      	subs	r0, #1
    19d0:	f002 fb85 	bl	40de <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    19d4:	4284      	cmp	r4, r0
    19d6:	f04f 0214 	mov.w	r2, #20
    19da:	4b1a      	ldr	r3, [pc, #104]	; (1a44 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa8>)
    19dc:	d008      	beq.n	19f0 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    19de:	f06f 0315 	mvn.w	r3, #21
    19e2:	fb02 f808 	mul.w	r8, r2, r8
    19e6:	f84b 3008 	str.w	r3, [fp, r8]
}
    19ea:	b003      	add	sp, #12
    19ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    19f0:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    19f4:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    19f6:	d0f8      	beq.n	19ea <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    19f8:	7819      	ldrb	r1, [r3, #0]
    19fa:	42a1      	cmp	r1, r4
    19fc:	ddf5      	ble.n	19ea <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    19fe:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    1a02:	60bc      	str	r4, [r7, #8]
	MPU->RNR = index;
    1a04:	60bc      	str	r4, [r7, #8]
	attr->rbar = MPU->RBAR &
    1a06:	68fc      	ldr	r4, [r7, #12]
    1a08:	f100 0108 	add.w	r1, r0, #8
    1a0c:	7b00      	ldrb	r0, [r0, #12]
    1a0e:	f364 0004 	bfi	r0, r4, #0, #5
    1a12:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1a14:	6938      	ldr	r0, [r7, #16]
    1a16:	790c      	ldrb	r4, [r1, #4]
    1a18:	0840      	lsrs	r0, r0, #1
    1a1a:	f360 1447 	bfi	r4, r0, #5, #3
    1a1e:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    1a20:	68f9      	ldr	r1, [r7, #12]
    1a22:	f021 011f 	bic.w	r1, r1, #31
    1a26:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1a28:	6939      	ldr	r1, [r7, #16]
    1a2a:	f021 011f 	bic.w	r1, r1, #31
    1a2e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1a30:	f108 0801 	add.w	r8, r8, #1
    1a34:	3514      	adds	r5, #20
    1a36:	360c      	adds	r6, #12
    1a38:	e7b9      	b.n	19ae <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    1a3a:	bf00      	nop
    1a3c:	2000068c 	.word	0x2000068c
    1a40:	e000ed90 	.word	0xe000ed90
    1a44:	200007e4 	.word	0x200007e4

00001a48 <tz_nonsecure_state_setup>:
}
#endif /* CONFIG_ARMV8_M_MAINLINE */

void tz_nonsecure_state_setup(const tz_nonsecure_setup_conf_t *p_ns_conf)
{
	configure_nonsecure_vtor_offset(p_ns_conf->vtor_ns);
    1a48:	6882      	ldr	r2, [r0, #8]
	SCB_NS->VTOR = vtor_ns;
    1a4a:	4b0c      	ldr	r3, [pc, #48]	; (1a7c <tz_nonsecure_state_setup+0x34>)
    1a4c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
    1a4e:	6803      	ldr	r3, [r0, #0]
    1a50:	f383 8888 	msr	MSP_NS, r3
  __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
    1a54:	6843      	ldr	r3, [r0, #4]
    1a56:	f383 8889 	msr	PSP_NS, r3
	configure_nonsecure_psp(p_ns_conf->psp_ns);
	/* Select which stack-pointer to use (MSP or PSP) and
	 * the privilege level for thread mode.
	 */
	configure_nonsecure_control(p_ns_conf->control_ns.spsel,
		p_ns_conf->control_ns.npriv);
    1a5a:	7b02      	ldrb	r2, [r0, #12]
    1a5c:	f002 0101 	and.w	r1, r2, #1
  __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
    1a60:	f3ef 8394 	mrs	r3, CONTROL_NS
	control_ns &= ~(CONTROL_SPSEL_Msk | CONTROL_nPRIV_Msk);
    1a64:	f023 0303 	bic.w	r3, r3, #3
	if (spsel_ns) {
    1a68:	0792      	lsls	r2, r2, #30
		control_ns |= CONTROL_SPSEL_Msk;
    1a6a:	bf48      	it	mi
    1a6c:	f043 0302 	orrmi.w	r3, r3, #2
	if (npriv_ns) {
    1a70:	b109      	cbz	r1, 1a76 <tz_nonsecure_state_setup+0x2e>
		control_ns |= CONTROL_nPRIV_Msk;
    1a72:	f043 0301 	orr.w	r3, r3, #1
  __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
    1a76:	f383 8894 	msr	CONTROL_NS, r3
}
    1a7a:	4770      	bx	lr
    1a7c:	e002ed00 	.word	0xe002ed00

00001a80 <tz_nbanked_exception_target_state_set>:

void tz_nbanked_exception_target_state_set(int secure_state)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1a80:	4a08      	ldr	r2, [pc, #32]	; (1aa4 <tz_nbanked_exception_target_state_set+0x24>)
    1a82:	68d3      	ldr	r3, [r2, #12]
	if (secure_state) {
    1a84:	b148      	cbz	r0, 1a9a <tz_nbanked_exception_target_state_set+0x1a>
		aircr_payload &= ~(SCB_AIRCR_BFHFNMINS_Msk);
    1a86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    1a8a:	041b      	lsls	r3, r3, #16
    1a8c:	0c1b      	lsrs	r3, r3, #16
	} else {
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1a8e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1a96:	60d3      	str	r3, [r2, #12]
}
    1a98:	4770      	bx	lr
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1a9a:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_BFHFNMINS_Msk;
    1a9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    1aa0:	e7f5      	b.n	1a8e <tz_nbanked_exception_target_state_set+0xe>
    1aa2:	bf00      	nop
    1aa4:	e000ed00 	.word	0xe000ed00

00001aa8 <tz_nonsecure_exception_prio_config>:

void tz_nonsecure_exception_prio_config(int secure_boost)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1aa8:	4a08      	ldr	r2, [pc, #32]	; (1acc <tz_nonsecure_exception_prio_config+0x24>)
    1aaa:	68d3      	ldr	r3, [r2, #12]
	if (secure_boost) {
    1aac:	b140      	cbz	r0, 1ac0 <tz_nonsecure_exception_prio_config+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1aae:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_PRIS_Msk;
    1ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
	} else {
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
	}
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((AIRCR_VECT_KEY_PERMIT_WRITE << SCB_AIRCR_VECTKEY_Pos)
    1abc:	60d3      	str	r3, [r2, #12]
}
    1abe:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_PRIS_Msk);
    1ac0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    1ac4:	041b      	lsls	r3, r3, #16
    1ac6:	0c1b      	lsrs	r3, r3, #16
    1ac8:	e7f4      	b.n	1ab4 <tz_nonsecure_exception_prio_config+0xc>
    1aca:	bf00      	nop
    1acc:	e000ed00 	.word	0xe000ed00

00001ad0 <tz_nonsecure_system_reset_req_block>:

void tz_nonsecure_system_reset_req_block(int block)
{
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1ad0:	4a08      	ldr	r2, [pc, #32]	; (1af4 <tz_nonsecure_system_reset_req_block+0x24>)
    1ad2:	68d3      	ldr	r3, [r2, #12]
	if (block) {
    1ad4:	b140      	cbz	r0, 1ae8 <tz_nonsecure_system_reset_req_block+0x18>
	u32_t aircr_payload = SCB->AIRCR & (~(SCB_AIRCR_VECTKEY_Msk));
    1ad6:	b29b      	uxth	r3, r3
		aircr_payload |= SCB_AIRCR_SYSRESETREQS_Msk;
    1ad8:	f043 0308 	orr.w	r3, r3, #8
	} else {
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
	}
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
			& SCB_AIRCR_VECTKEY_Msk)
		| aircr_payload;
    1adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
    1ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
	SCB->AIRCR = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
    1ae4:	60d3      	str	r3, [r2, #12]
}
    1ae6:	4770      	bx	lr
		aircr_payload &= ~(SCB_AIRCR_SYSRESETREQS_Msk);
    1ae8:	f023 0308 	bic.w	r3, r3, #8
    1aec:	041b      	lsls	r3, r3, #16
    1aee:	0c1b      	lsrs	r3, r3, #16
    1af0:	e7f4      	b.n	1adc <tz_nonsecure_system_reset_req_block+0xc>
    1af2:	bf00      	nop
    1af4:	e000ed00 	.word	0xe000ed00

00001af8 <tz_nonsecure_fpu_access_enable>:

#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
void tz_nonsecure_fpu_access_enable(void)
{
	SCB->NSACR |=
    1af8:	4a03      	ldr	r2, [pc, #12]	; (1b08 <tz_nonsecure_fpu_access_enable+0x10>)
    1afa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    1afe:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    1b02:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
		(1UL << SCB_NSACR_CP10_Pos) | (1UL << SCB_NSACR_CP11_Pos);
}
    1b06:	4770      	bx	lr
    1b08:	e000ed00 	.word	0xe000ed00

00001b0c <tz_sau_configure>:
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

void tz_sau_configure(int enable, int allns)
{
	if (enable) {
    1b0c:	4b08      	ldr	r3, [pc, #32]	; (1b30 <tz_sau_configure+0x24>)
  \brief   Enable SAU
  \details Enables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Enable(void)
{
    SAU->CTRL |=  (SAU_CTRL_ENABLE_Msk);
    1b0e:	681a      	ldr	r2, [r3, #0]
    1b10:	b118      	cbz	r0, 1b1a <tz_sau_configure+0xe>
    1b12:	f042 0201 	orr.w	r2, r2, #1
	} else {
		TZ_SAU_Disable();
		if (allns) {
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
		} else {
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    1b16:	601a      	str	r2, [r3, #0]
		}
	}
}
    1b18:	4770      	bx	lr
  \brief   Disable SAU
  \details Disables the Security Attribution Unit (SAU).
 */
__STATIC_INLINE void TZ_SAU_Disable(void)
{
    SAU->CTRL &= ~(SAU_CTRL_ENABLE_Msk);
    1b1a:	f022 0201 	bic.w	r2, r2, #1
    1b1e:	601a      	str	r2, [r3, #0]
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    1b20:	681a      	ldr	r2, [r3, #0]
		if (allns) {
    1b22:	b111      	cbz	r1, 1b2a <tz_sau_configure+0x1e>
			SAU->CTRL |= SAU_CTRL_ALLNS_Msk;
    1b24:	f042 0202 	orr.w	r2, r2, #2
    1b28:	e7f5      	b.n	1b16 <tz_sau_configure+0xa>
			SAU->CTRL &= ~(SAU_CTRL_ALLNS_Msk);
    1b2a:	f022 0202 	bic.w	r2, r2, #2
    1b2e:	e7f2      	b.n	1b16 <tz_sau_configure+0xa>
    1b30:	e000edd0 	.word	0xe000edd0

00001b34 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1b34:	4b01      	ldr	r3, [pc, #4]	; (1b3c <__stdout_hook_install+0x8>)
    1b36:	6018      	str	r0, [r3, #0]
}
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop
    1b3c:	20000024 	.word	0x20000024

00001b40 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(struct device *dev,
				const struct uart_config *cfg)
{
    1b40:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    1b42:	794b      	ldrb	r3, [r1, #5]
    1b44:	2b01      	cmp	r3, #1
    1b46:	d029      	beq.n	1b9c <uarte_nrfx_configure+0x5c>
    1b48:	2b03      	cmp	r3, #3
    1b4a:	d124      	bne.n	1b96 <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    1b4c:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1b4e:	798b      	ldrb	r3, [r1, #6]
    1b50:	2b03      	cmp	r3, #3
    1b52:	d120      	bne.n	1b96 <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1b54:	79cc      	ldrb	r4, [r1, #7]
    1b56:	b124      	cbz	r4, 1b62 <uarte_nrfx_configure+0x22>
    1b58:	2c01      	cmp	r4, #1
    1b5a:	d11c      	bne.n	1b96 <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    1b5c:	6843      	ldr	r3, [r0, #4]
    1b5e:	791b      	ldrb	r3, [r3, #4]
    1b60:	b1cb      	cbz	r3, 1b96 <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1b62:	790a      	ldrb	r2, [r1, #4]
    1b64:	b112      	cbz	r2, 1b6c <uarte_nrfx_configure+0x2c>
    1b66:	2a02      	cmp	r2, #2
    1b68:	d115      	bne.n	1b96 <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    1b6a:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1b6c:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1b6e:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    1b70:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    1b74:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    1b76:	d064      	beq.n	1c42 <uarte_nrfx_configure+0x102>
    1b78:	d82d      	bhi.n	1bd6 <uarte_nrfx_configure+0x96>
    1b7a:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1b7e:	d063      	beq.n	1c48 <uarte_nrfx_configure+0x108>
    1b80:	d816      	bhi.n	1bb0 <uarte_nrfx_configure+0x70>
    1b82:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1b86:	d061      	beq.n	1c4c <uarte_nrfx_configure+0x10c>
    1b88:	d80a      	bhi.n	1ba0 <uarte_nrfx_configure+0x60>
    1b8a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1b8e:	d060      	beq.n	1c52 <uarte_nrfx_configure+0x112>
    1b90:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1b94:	d060      	beq.n	1c58 <uarte_nrfx_configure+0x118>
    1b96:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1b9a:	e051      	b.n	1c40 <uarte_nrfx_configure+0x100>
	switch (cfg->stop_bits) {
    1b9c:	2600      	movs	r6, #0
    1b9e:	e7d6      	b.n	1b4e <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    1ba0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1ba4:	d05b      	beq.n	1c5e <uarte_nrfx_configure+0x11e>
    1ba6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1baa:	d1f4      	bne.n	1b96 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1bac:	4b36      	ldr	r3, [pc, #216]	; (1c88 <uarte_nrfx_configure+0x148>)
    1bae:	e03c      	b.n	1c2a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1bb0:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1bb4:	d056      	beq.n	1c64 <uarte_nrfx_configure+0x124>
    1bb6:	d807      	bhi.n	1bc8 <uarte_nrfx_configure+0x88>
    1bb8:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1bbc:	d054      	beq.n	1c68 <uarte_nrfx_configure+0x128>
    1bbe:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1bc2:	d1e8      	bne.n	1b96 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1bc4:	4b31      	ldr	r3, [pc, #196]	; (1c8c <uarte_nrfx_configure+0x14c>)
    1bc6:	e030      	b.n	1c2a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1bc8:	f647 2712 	movw	r7, #31250	; 0x7a12
    1bcc:	42bb      	cmp	r3, r7
    1bce:	d1e2      	bne.n	1b96 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1bd0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1bd4:	e029      	b.n	1c2a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1bd6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1bda:	d047      	beq.n	1c6c <uarte_nrfx_configure+0x12c>
    1bdc:	d813      	bhi.n	1c06 <uarte_nrfx_configure+0xc6>
    1bde:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1be2:	d046      	beq.n	1c72 <uarte_nrfx_configure+0x132>
    1be4:	d809      	bhi.n	1bfa <uarte_nrfx_configure+0xba>
    1be6:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    1bea:	42bb      	cmp	r3, r7
    1bec:	d043      	beq.n	1c76 <uarte_nrfx_configure+0x136>
    1bee:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1bf2:	d1d0      	bne.n	1b96 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1bf4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1bf8:	e017      	b.n	1c2a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1bfa:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1bfe:	d1ca      	bne.n	1b96 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1c00:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1c04:	e011      	b.n	1c2a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1c06:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1c0a:	d037      	beq.n	1c7c <uarte_nrfx_configure+0x13c>
    1c0c:	d808      	bhi.n	1c20 <uarte_nrfx_configure+0xe0>
    1c0e:	4f20      	ldr	r7, [pc, #128]	; (1c90 <uarte_nrfx_configure+0x150>)
    1c10:	42bb      	cmp	r3, r7
    1c12:	d036      	beq.n	1c82 <uarte_nrfx_configure+0x142>
    1c14:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1c18:	d1bd      	bne.n	1b96 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1c1a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1c1e:	e004      	b.n	1c2a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1c20:	4f1c      	ldr	r7, [pc, #112]	; (1c94 <uarte_nrfx_configure+0x154>)
    1c22:	42bb      	cmp	r3, r7
    1c24:	d1b7      	bne.n	1b96 <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1c26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1c2a:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
                    | (uint32_t)p_cfg->hwfc;
    1c2e:	4334      	orrs	r4, r6
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    1c30:	68c3      	ldr	r3, [r0, #12]
    1c32:	4322      	orrs	r2, r4
    1c34:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1c36:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    1c3a:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1c3e:	2000      	movs	r0, #0
}
    1c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1c42:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1c46:	e7f0      	b.n	1c2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1c48:	4b13      	ldr	r3, [pc, #76]	; (1c98 <uarte_nrfx_configure+0x158>)
    1c4a:	e7ee      	b.n	1c2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1c4c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1c50:	e7eb      	b.n	1c2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
    1c52:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1c56:	e7e8      	b.n	1c2a <uarte_nrfx_configure+0xea>
	switch (baudrate) {
    1c58:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    1c5c:	e7e5      	b.n	1c2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1c5e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1c62:	e7e2      	b.n	1c2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1c64:	4b0d      	ldr	r3, [pc, #52]	; (1c9c <uarte_nrfx_configure+0x15c>)
    1c66:	e7e0      	b.n	1c2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1c68:	4b0d      	ldr	r3, [pc, #52]	; (1ca0 <uarte_nrfx_configure+0x160>)
    1c6a:	e7de      	b.n	1c2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1c6c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1c70:	e7db      	b.n	1c2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1c72:	4b0c      	ldr	r3, [pc, #48]	; (1ca4 <uarte_nrfx_configure+0x164>)
    1c74:	e7d9      	b.n	1c2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1c76:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1c7a:	e7d6      	b.n	1c2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1c7c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1c80:	e7d3      	b.n	1c2a <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1c82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1c86:	e7d0      	b.n	1c2a <uarte_nrfx_configure+0xea>
    1c88:	0013b000 	.word	0x0013b000
    1c8c:	004ea000 	.word	0x004ea000
    1c90:	0003d090 	.word	0x0003d090
    1c94:	000f4240 	.word	0x000f4240
    1c98:	00275000 	.word	0x00275000
    1c9c:	0075c000 	.word	0x0075c000
    1ca0:	003af000 	.word	0x003af000
    1ca4:	013a9000 	.word	0x013a9000

00001ca8 <uarte_instance_init.isra.0>:

NRF_STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1ca8:	2201      	movs	r2, #1
	.irq_update		= uarte_nrfx_irq_update,
	.irq_callback_set	= uarte_nrfx_irq_callback_set,
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int uarte_instance_init(struct device *dev,
    1caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1cac:	2703      	movs	r7, #3
    1cae:	460d      	mov	r5, r1
	return config->uarte_regs;
    1cb0:	6843      	ldr	r3, [r0, #4]
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_gpio_pin_write(config->pseltxd, 1);
    1cb2:	6809      	ldr	r1, [r1, #0]
	return config->uarte_regs;
    1cb4:	681c      	ldr	r4, [r3, #0]
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    1cb6:	4b21      	ldr	r3, [pc, #132]	; (1d3c <uarte_instance_init.isra.0+0x94>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1cb8:	408a      	lsls	r2, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
    1cba:	68c6      	ldr	r6, [r0, #12]
    p_reg->OUTSET = set_mask;
    1cbc:	609a      	str	r2, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1cbe:	f101 0280 	add.w	r2, r1, #128	; 0x80
    1cc2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    1cc6:	686a      	ldr	r2, [r5, #4]
    1cc8:	1c57      	adds	r7, r2, #1
    1cca:	bf1e      	ittt	ne
    1ccc:	f04f 0c00 	movne.w	ip, #0
    1cd0:	f102 0780 	addne.w	r7, r2, #128	; 0x80
    1cd4:	f843 c027 	strne.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
    1cd8:	f8c4 150c 	str.w	r1, [r4, #1292]	; 0x50c
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    1cdc:	68a9      	ldr	r1, [r5, #8]
    p_reg->PSEL.RXD = pselrxd;
    1cde:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    1ce2:	1c4a      	adds	r2, r1, #1
    1ce4:	d015      	beq.n	1d12 <uarte_instance_init.isra.0+0x6a>
	    config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    1ce6:	68ea      	ldr	r2, [r5, #12]
	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED &&
    1ce8:	1c57      	adds	r7, r2, #1
    1cea:	d012      	beq.n	1d12 <uarte_instance_init.isra.0+0x6a>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1cec:	2701      	movs	r7, #1
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1cee:	f04f 0c03 	mov.w	ip, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    1cf2:	4097      	lsls	r7, r2
    p_reg->OUTSET = set_mask;
    1cf4:	609f      	str	r7, [r3, #8]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1cf6:	f102 0780 	add.w	r7, r2, #128	; 0x80
    1cfa:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    1cfe:	f04f 0c00 	mov.w	ip, #0
    1d02:	f101 0780 	add.w	r7, r1, #128	; 0x80
    1d06:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    1d0a:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    1d0e:	f8c4 1510 	str.w	r1, [r4, #1296]	; 0x510
		nrf_uarte_hwfc_pins_set(uarte,
					config->pselrts,
					config->pselcts);
	}

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    1d12:	4631      	mov	r1, r6
    1d14:	f7ff ff14 	bl	1b40 <uarte_nrfx_configure>
	if (err) {
    1d18:	b970      	cbnz	r0, 1d38 <uarte_instance_init.isra.0+0x90>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    1d1a:	2308      	movs	r3, #8
    1d1c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	}
#endif
	/* Enable receiver and transmitter */
	nrf_uarte_enable(uarte);

	if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    1d20:	686b      	ldr	r3, [r5, #4]
    1d22:	3301      	adds	r3, #1
    1d24:	d008      	beq.n	1d38 <uarte_instance_init.isra.0+0x90>
NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    p_reg->RXD.MAXCNT = length;
    1d26:	2301      	movs	r3, #1
		nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

		nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    1d28:	360c      	adds	r6, #12
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1d2a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    1d2e:	f8c4 6534 	str.w	r6, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    1d32:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1d36:	6023      	str	r3, [r4, #0]
		/* switch off transmitter to save an energy */
		nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);
	}
#endif
	return 0;
}
    1d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d3a:	bf00      	nop
    1d3c:	50842500 	.word	0x50842500

00001d40 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    1d40:	b530      	push	{r4, r5, lr}
    1d42:	b085      	sub	sp, #20
    1d44:	4605      	mov	r5, r0
    1d46:	466c      	mov	r4, sp
    1d48:	4b04      	ldr	r3, [pc, #16]	; (1d5c <uarte_0_init+0x1c>)
    1d4a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1d4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1d50:	4621      	mov	r1, r4
    1d52:	4628      	mov	r0, r5
    1d54:	f7ff ffa8 	bl	1ca8 <uarte_instance_init.isra.0>
    1d58:	b005      	add	sp, #20
    1d5a:	bd30      	pop	{r4, r5, pc}
    1d5c:	0000481c 	.word	0x0000481c

00001d60 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    1d60:	b530      	push	{r4, r5, lr}
    1d62:	b085      	sub	sp, #20
    1d64:	4605      	mov	r5, r0
    1d66:	466c      	mov	r4, sp
    1d68:	4b04      	ldr	r3, [pc, #16]	; (1d7c <uarte_1_init+0x1c>)
    1d6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1d6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1d70:	4621      	mov	r1, r4
    1d72:	4628      	mov	r0, r5
    1d74:	f7ff ff98 	bl	1ca8 <uarte_instance_init.isra.0>
    1d78:	b005      	add	sp, #20
    1d7a:	bd30      	pop	{r4, r5, pc}
    1d7c:	0000482c 	.word	0x0000482c

00001d80 <check_ext_api_requests>:
	}
};
#endif

static int check_ext_api_requests(struct device *dev)
{
    1d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)dev;

	const struct fw_info_ext_api_request *ext_api_req =
			skip_ext_apis(&m_firmware_info);

	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1d84:	2500      	movs	r5, #0
			skip_ext_apis(&m_firmware_info);
    1d86:	4c21      	ldr	r4, [pc, #132]	; (1e0c <check_ext_api_requests+0x8c>)
	const u32_t ext_api_magic[] = {EXT_API_MAGIC};
    1d88:	4e21      	ldr	r6, [pc, #132]	; (1e10 <check_ext_api_requests+0x90>)
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1d8a:	f854 8c04 	ldr.w	r8, [r4, #-4]
			/* EXT_API hard requirement not met. */
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
			k_panic();
		} else {
			/* EXT_API soft requirement not met. */
			printk("WARNING: Optional EXT_API request not "
    1d8e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1e18 <check_ext_api_requests+0x98>
{
    1d92:	b085      	sub	sp, #20
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1d94:	45a8      	cmp	r8, r5
    1d96:	d803      	bhi.n	1da0 <check_ext_api_requests+0x20>
		}
		ADVANCE_EXT_API_REQ(ext_api_req);
	}

	return 0;
}
    1d98:	2000      	movs	r0, #0
    1d9a:	b005      	add	sp, #20
    1d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fw_info_ext_api_check((u32_t)*(ext_api_req->ext_api))
    1da0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1da2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    1da6:	681f      	ldr	r7, [r3, #0]
    1da8:	ab01      	add	r3, sp, #4
    1daa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (memcmp(ext_api->magic, ext_api_magic, CONFIG_FW_INFO_MAGIC_LEN)
    1dae:	220c      	movs	r2, #12
    1db0:	4619      	mov	r1, r3
    1db2:	4638      	mov	r0, r7
    1db4:	f002 f9a9 	bl	410a <memcmp>
    1db8:	b990      	cbnz	r0, 1de0 <check_ext_api_requests+0x60>
    1dba:	b18f      	cbz	r7, 1de0 <check_ext_api_requests+0x60>
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    1dbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
	const u32_t req_id = ext_api_req->request.ext_api_id;
    1dbe:	6921      	ldr	r1, [r4, #16]
			&& ext_api_satisfies_req(*(ext_api_req->ext_api),
    1dc0:	681b      	ldr	r3, [r3, #0]
	return ((ext_api->ext_api_id == req_id)
    1dc2:	691a      	ldr	r2, [r3, #16]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    1dc4:	4291      	cmp	r1, r2
    1dc6:	d10b      	bne.n	1de0 <check_ext_api_requests+0x60>
		&&  (ext_api->ext_api_version >= req_min_version)
    1dc8:	699a      	ldr	r2, [r3, #24]
	const u32_t req_min_version = ext_api_req->request.ext_api_version;
    1dca:	69a1      	ldr	r1, [r4, #24]
		&&  (ext_api->ext_api_version >= req_min_version)
    1dcc:	4291      	cmp	r1, r2
    1dce:	d807      	bhi.n	1de0 <check_ext_api_requests+0x60>
	const u32_t req_max_version = ext_api_req->ext_api_max_version;
    1dd0:	69e1      	ldr	r1, [r4, #28]
		&&  (ext_api->ext_api_version <  req_max_version)
    1dd2:	4291      	cmp	r1, r2
    1dd4:	d904      	bls.n	1de0 <check_ext_api_requests+0x60>
	const u32_t req_flags = ext_api_req->request.ext_api_flags;
    1dd6:	6962      	ldr	r2, [r4, #20]
		&& ((ext_api->ext_api_flags & req_flags) == req_flags));
    1dd8:	695b      	ldr	r3, [r3, #20]
    1dda:	ea32 0303 	bics.w	r3, r2, r3
    1dde:	d00a      	beq.n	1df6 <check_ext_api_requests+0x76>
		} else if (ext_api_req->required) {
    1de0:	6a27      	ldr	r7, [r4, #32]
    1de2:	b167      	cbz	r7, 1dfe <check_ext_api_requests+0x7e>
			printk("ERROR: Cannot fulfill EXT_API request.\r\n");
    1de4:	480b      	ldr	r0, [pc, #44]	; (1e14 <check_ext_api_requests+0x94>)
    1de6:	f001 ff56 	bl	3c96 <printk>
			k_panic();
    1dea:	4040      	eors	r0, r0
    1dec:	f380 8811 	msr	BASEPRI, r0
    1df0:	f04f 0004 	mov.w	r0, #4
    1df4:	df02      	svc	2
		ADVANCE_EXT_API_REQ(ext_api_req);
    1df6:	68e3      	ldr	r3, [r4, #12]
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1df8:	3501      	adds	r5, #1
		ADVANCE_EXT_API_REQ(ext_api_req);
    1dfa:	441c      	add	r4, r3
	for (u32_t i = 0; i < m_firmware_info.ext_api_request_num; i++) {
    1dfc:	e7ca      	b.n	1d94 <check_ext_api_requests+0x14>
			printk("WARNING: Optional EXT_API request not "
    1dfe:	4648      	mov	r0, r9
    1e00:	f001 ff49 	bl	3c96 <printk>
			*ext_api_req->ext_api = NULL;
    1e04:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e06:	601f      	str	r7, [r3, #0]
    1e08:	e7f5      	b.n	1df6 <check_ext_api_requests+0x76>
    1e0a:	bf00      	nop
    1e0c:	0000023c 	.word	0x0000023c
    1e10:	0000483c 	.word	0x0000483c
    1e14:	00004e09 	.word	0x00004e09
    1e18:	00004e32 	.word	0x00004e32

00001e1c <nrf91_errata_31>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1e1c:	4b06      	ldr	r3, [pc, #24]	; (1e38 <nrf91_errata_31+0x1c>)
    1e1e:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1e20:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1e22:	681b      	ldr	r3, [r3, #0]
    1e24:	2b09      	cmp	r3, #9
    1e26:	d105      	bne.n	1e34 <nrf91_errata_31+0x18>
            {
                switch(var2)
    1e28:	3801      	subs	r0, #1
    1e2a:	2801      	cmp	r0, #1
    1e2c:	bf8c      	ite	hi
    1e2e:	2000      	movhi	r0, #0
    1e30:	2001      	movls	r0, #1
    1e32:	4770      	bx	lr
                    case 0x02ul:
                        return true;
                }
            }
        #endif
        return false;
    1e34:	2000      	movs	r0, #0
    #endif
}
    1e36:	4770      	bx	lr
    1e38:	00ff0134 	.word	0x00ff0134

00001e3c <nrf91_errata_14>:
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1e3c:	4b05      	ldr	r3, [pc, #20]	; (1e54 <nrf91_errata_14+0x18>)
    1e3e:	6818      	ldr	r0, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1e40:	3b04      	subs	r3, #4
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1e42:	681b      	ldr	r3, [r3, #0]
    1e44:	2b09      	cmp	r3, #9
    1e46:	d103      	bne.n	1e50 <nrf91_errata_14+0x14>
            {
                switch(var2)
    1e48:	1e43      	subs	r3, r0, #1
    1e4a:	4258      	negs	r0, r3
    1e4c:	4158      	adcs	r0, r3
    1e4e:	4770      	bx	lr
                    case 0x02ul:
                        return false;
                }
            }
        #endif
        return false;
    1e50:	2000      	movs	r0, #0
    #endif
}
    1e52:	4770      	bx	lr
    1e54:	00ff0134 	.word	0x00ff0134

00001e58 <SystemInit>:
        /* Perform Secure-mode initialization routines. */

        /* Set all ARM SAU regions to NonSecure if TrustZone extensions are enabled.
        * Nordic SPU should handle Secure Attribution tasks */
        #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1e58:	4a4e      	ldr	r2, [pc, #312]	; (1f94 <SystemInit+0x13c>)
{
    1e5a:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
    1e5c:	6813      	ldr	r3, [r2, #0]
    1e5e:	f043 0302 	orr.w	r3, r3, #2
    1e62:	6013      	str	r3, [r2, #0]
        #endif
        
        /* Workaround for Errata 6 "POWER: SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_6()){
    1e64:	f7ff ffda 	bl	1e1c <nrf91_errata_31>
    1e68:	b130      	cbz	r0, 1e78 <SystemInit+0x20>
            NRF_POWER_S->EVENTS_SLEEPENTER = (POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_NotGenerated << POWER_EVENTS_SLEEPENTER_EVENTS_SLEEPENTER_Pos);
    1e6a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1e6e:	2200      	movs	r2, #0
    1e70:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
            NRF_POWER_S->EVENTS_SLEEPEXIT = (POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_NotGenerated << POWER_EVENTS_SLEEPEXIT_EVENTS_SLEEPEXIT_Pos);
    1e74:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        }

        /* Workaround for Errata 14 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_14()){
    1e78:	f7ff ffe0 	bl	1e3c <nrf91_errata_14>
    1e7c:	b130      	cbz	r0, 1e8c <SystemInit+0x34>
            *((volatile uint32_t *)0x50004A38) = 0x01ul;
    1e7e:	2301      	movs	r3, #1
    1e80:	4a45      	ldr	r2, [pc, #276]	; (1f98 <SystemInit+0x140>)
    1e82:	6013      	str	r3, [r2, #0]
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1e84:	f6a2 2238 	subw	r2, r2, #2616	; 0xa38
    1e88:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF91_SERIES
        return false;
    #else
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    1e8c:	4b43      	ldr	r3, [pc, #268]	; (1f9c <SystemInit+0x144>)
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
        #endif
        #if defined (NRF9160_XXAA) || defined (DEVELOP_IN_NRF9160)
            if (var1 == 0x09)
    1e8e:	681b      	ldr	r3, [r3, #0]
    1e90:	2b09      	cmp	r3, #9
    1e92:	d107      	bne.n	1ea4 <SystemInit+0x4c>
            uint32_t var2 = *(uint32_t *)0x00FF0134ul;
    1e94:	4b42      	ldr	r3, [pc, #264]	; (1fa0 <SystemInit+0x148>)
            {
                switch(var2)
    1e96:	681b      	ldr	r3, [r3, #0]
    1e98:	2b02      	cmp	r3, #2
        }

        /* Workaround for Errata 15 "REGULATORS: LDO mode at startup" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_15()){
            NRF_REGULATORS_S->DCDCEN = REGULATORS_DCDCEN_DCDCEN_Enabled << REGULATORS_DCDCEN_DCDCEN_Pos;
    1e9a:	bf02      	ittt	eq
    1e9c:	2201      	moveq	r2, #1
    1e9e:	4b41      	ldreq	r3, [pc, #260]	; (1fa4 <SystemInit+0x14c>)
    1ea0:	f8c3 2578 	streq.w	r2, [r3, #1400]	; 0x578
        }

        /* Workaround for Errata 20 "RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_20()){
    1ea4:	f7ff ffca 	bl	1e3c <nrf91_errata_14>
    1ea8:	b110      	cbz	r0, 1eb0 <SystemInit+0x58>
            *((volatile uint32_t *)0x5003AEE4) = 0xE;
    1eaa:	220e      	movs	r2, #14
    1eac:	4b3e      	ldr	r3, [pc, #248]	; (1fa8 <SystemInit+0x150>)
    1eae:	601a      	str	r2, [r3, #0]
        }

        /* Workaround for Errata 31 "XOSC32k Startup Failure" found at the Errata document
            for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf91_errata_31()){
    1eb0:	f7ff ffb4 	bl	1e1c <nrf91_errata_31>
    1eb4:	b120      	cbz	r0, 1ec0 <SystemInit+0x68>
            *((volatile uint32_t *)0x5000470Cul) = 0x0;
    1eb6:	2200      	movs	r2, #0
    1eb8:	4b3c      	ldr	r3, [pc, #240]	; (1fac <SystemInit+0x154>)
    1eba:	601a      	str	r2, [r3, #0]
            *((volatile uint32_t *)0x50004710ul) = 0x1;
    1ebc:	2201      	movs	r2, #1
    1ebe:	605a      	str	r2, [r3, #4]
{
    1ec0:	2200      	movs	r2, #0
    1ec2:	00d3      	lsls	r3, r2, #3
    1ec4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1ec8:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    1ecc:	3101      	adds	r1, #1
    1ece:	d008      	beq.n	1ee2 <SystemInit+0x8a>
          #if defined ( __ICCARM__ )
              #pragma diag_suppress=Pa082
          #endif
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1ed0:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1ed4:	3201      	adds	r2, #1
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1ed6:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1eda:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
          *(volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    1ede:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 256ul && NRF_FICR_S->TRIMCNF[index].ADDR != 0xFFFFFFFFul; index++){
    1ee0:	d1ef      	bne.n	1ec2 <SystemInit+0x6a>
    }
    
    
    bool uicr_HFXOSRC_erased()
    {
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1ee2:	4b33      	ldr	r3, [pc, #204]	; (1fb0 <SystemInit+0x158>)
    1ee4:	69da      	ldr	r2, [r3, #28]
        if (uicr_HFXOSRC_erased() || uicr_HFXOCNT_erased()) {
    1ee6:	07d1      	lsls	r1, r2, #31
    1ee8:	d53b      	bpl.n	1f62 <SystemInit+0x10a>
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1eea:	4b32      	ldr	r3, [pc, #200]	; (1fb4 <SystemInit+0x15c>)
    1eec:	4619      	mov	r1, r3
    1eee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1ef2:	2a01      	cmp	r2, #1
    1ef4:	d1fb      	bne.n	1eee <SystemInit+0x96>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Wen;
    1ef6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1efa:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    1efe:	2b01      	cmp	r3, #1
    1f00:	d1fb      	bne.n	1efa <SystemInit+0xa2>
        if ((NRF_UICR_S->HFXOSRC & UICR_HFXOSRC_HFXOSRC_Msk) != UICR_HFXOSRC_HFXOSRC_TCXO) {
    1f02:	4b2b      	ldr	r3, [pc, #172]	; (1fb0 <SystemInit+0x158>)
    1f04:	69da      	ldr	r2, [r3, #28]
          if (uicr_HFXOSRC_erased()){
    1f06:	07d2      	lsls	r2, r2, #31
    1f08:	d508      	bpl.n	1f1c <SystemInit+0xc4>
            uicr_erased_value = NRF_UICR_S->HFXOSRC;
    1f0a:	69da      	ldr	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1f0c:	4929      	ldr	r1, [pc, #164]	; (1fb4 <SystemInit+0x15c>)
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOSRC_HFXOSRC_Msk) | UICR_HFXOSRC_HFXOSRC_TCXO;
    1f0e:	f022 0201 	bic.w	r2, r2, #1
            NRF_UICR_S->HFXOSRC = uicr_new_value;
    1f12:	61da      	str	r2, [r3, #28]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1f14:	f8d1 2400 	ldr.w	r2, [r1, #1024]	; 0x400
    1f18:	2a01      	cmp	r2, #1
    1f1a:	d1fb      	bne.n	1f14 <SystemInit+0xbc>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1f1c:	6a1a      	ldr	r2, [r3, #32]
    1f1e:	3201      	adds	r2, #1
    1f20:	d10a      	bne.n	1f38 <SystemInit+0xe0>
            uicr_erased_value = NRF_UICR_S->HFXOCNT;
    1f22:	6a1a      	ldr	r2, [r3, #32]
            uicr_new_value = (uicr_erased_value & ~UICR_HFXOCNT_HFXOCNT_Msk) | 0x20;
    1f24:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    1f28:	f042 0220 	orr.w	r2, r2, #32
            NRF_UICR_S->HFXOCNT = uicr_new_value;
    1f2c:	621a      	str	r2, [r3, #32]
            while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1f2e:	4a21      	ldr	r2, [pc, #132]	; (1fb4 <SystemInit+0x15c>)
    1f30:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    1f34:	2b01      	cmp	r3, #1
    1f36:	d1fb      	bne.n	1f30 <SystemInit+0xd8>
          NRF_NVMC_S->CONFIG = NVMC_CONFIG_WEN_Ren;
    1f38:	2200      	movs	r2, #0
    1f3a:	4b1e      	ldr	r3, [pc, #120]	; (1fb4 <SystemInit+0x15c>)
    1f3c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
          while (NRF_NVMC_S->READY != NVMC_READY_READY_Ready);
    1f40:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    1f44:	2a01      	cmp	r2, #1
    1f46:	d1fb      	bne.n	1f40 <SystemInit+0xe8>
  __ASM volatile ("dsb 0xF":::"memory");
    1f48:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1f4c:	491a      	ldr	r1, [pc, #104]	; (1fb8 <SystemInit+0x160>)
    1f4e:	4b1b      	ldr	r3, [pc, #108]	; (1fbc <SystemInit+0x164>)
    1f50:	68ca      	ldr	r2, [r1, #12]
    1f52:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1f56:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1f58:	60cb      	str	r3, [r1, #12]
    1f5a:	f3bf 8f4f 	dsb	sy
    __NOP();
    1f5e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1f60:	e7fd      	b.n	1f5e <SystemInit+0x106>
        if (NRF_UICR_S->HFXOCNT == 0xFFFFFFFFul) {
    1f62:	6a1b      	ldr	r3, [r3, #32]
    1f64:	3301      	adds	r3, #1
    1f66:	d0c0      	beq.n	1eea <SystemInit+0x92>
        SCB->NSACR |= (3UL << 10);
    1f68:	4b13      	ldr	r3, [pc, #76]	; (1fb8 <SystemInit+0x160>)
    1f6a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    1f6e:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
    1f72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      SCB->CPACR |= (3UL << 20) | (3UL << 22);
    1f76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1f7a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
    1f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1f82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f86:	f3bf 8f6f 	isb	sy
    SystemCoreClock = __SYSTEM_CLOCK;
    1f8a:	4b0d      	ldr	r3, [pc, #52]	; (1fc0 <SystemInit+0x168>)
    1f8c:	4a0d      	ldr	r2, [pc, #52]	; (1fc4 <SystemInit+0x16c>)
    1f8e:	601a      	str	r2, [r3, #0]
}
    1f90:	bd08      	pop	{r3, pc}
    1f92:	bf00      	nop
    1f94:	e000edd0 	.word	0xe000edd0
    1f98:	50004a38 	.word	0x50004a38
    1f9c:	00ff0130 	.word	0x00ff0130
    1fa0:	00ff0134 	.word	0x00ff0134
    1fa4:	50004000 	.word	0x50004000
    1fa8:	5003aee4 	.word	0x5003aee4
    1fac:	5000470c 	.word	0x5000470c
    1fb0:	00ff8000 	.word	0x00ff8000
    1fb4:	50039000 	.word	0x50039000
    1fb8:	e000ed00 	.word	0xe000ed00
    1fbc:	05fa0004 	.word	0x05fa0004
    1fc0:	20000048 	.word	0x20000048
    1fc4:	03d09000 	.word	0x03d09000

00001fc8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(s32_t level)
{
    1fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
    1fca:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    1fcc:	4b08      	ldr	r3, [pc, #32]	; (1ff0 <z_sys_init_run_level+0x28>)
    1fce:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1fd2:	3001      	adds	r0, #1
    1fd4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    1fd8:	42a6      	cmp	r6, r4
    1fda:	d800      	bhi.n	1fde <z_sys_init_run_level+0x16>
			}
		}
	}
}
    1fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
    1fde:	e9d4 3500 	ldrd	r3, r5, [r4]
    1fe2:	4628      	mov	r0, r5
    1fe4:	4798      	blx	r3
		if (retval != 0) {
    1fe6:	b108      	cbz	r0, 1fec <z_sys_init_run_level+0x24>
			if (dev) {
    1fe8:	b105      	cbz	r5, 1fec <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
    1fea:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    1fec:	3408      	adds	r4, #8
    1fee:	e7f3      	b.n	1fd8 <z_sys_init_run_level+0x10>
    1ff0:	000049d8 	.word	0x000049d8

00001ff4 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    1ff4:	4b0f      	ldr	r3, [pc, #60]	; (2034 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x34>)
{
    1ff6:	b570      	push	{r4, r5, r6, lr}
    1ff8:	4605      	mov	r5, r0
    1ffa:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
    1ffc:	4c0e      	ldr	r4, [pc, #56]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    1ffe:	429c      	cmp	r4, r3
    2000:	d104      	bne.n	200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>
		    (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    2002:	4c0d      	ldr	r4, [pc, #52]	; (2038 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x38>)
    2004:	42b4      	cmp	r4, r6
    2006:	d108      	bne.n	201a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a>
		    (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
    2008:	2400      	movs	r4, #0
    200a:	e010      	b.n	202e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2e>
		if ((dev->driver_api != NULL) &&
    200c:	68a2      	ldr	r2, [r4, #8]
    200e:	b112      	cbz	r2, 2016 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x16>
    2010:	6822      	ldr	r2, [r4, #0]
    2012:	42aa      	cmp	r2, r5
    2014:	d00b      	beq.n	202e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    2016:	3410      	adds	r4, #16
    2018:	e7f1      	b.n	1ffe <z_impl_device_get_binding+0xa>
		if ((dev->driver_api != NULL) &&
    201a:	68a3      	ldr	r3, [r4, #8]
    201c:	b90b      	cbnz	r3, 2022 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x22>
	for (dev = __device_start; dev != __device_end; dev++) {
    201e:	3410      	adds	r4, #16
    2020:	e7f0      	b.n	2004 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4>
		    (strcmp(name, dev->name) == 0)) {
    2022:	4628      	mov	r0, r5
    2024:	6821      	ldr	r1, [r4, #0]
    2026:	f002 f864 	bl	40f2 <strcmp>
		if ((dev->driver_api != NULL) &&
    202a:	2800      	cmp	r0, #0
    202c:	d1f7      	bne.n	201e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1e>
}
    202e:	4620      	mov	r0, r4
    2030:	bd70      	pop	{r4, r5, r6, pc}
    2032:	bf00      	nop
    2034:	200000e4 	.word	0x200000e4
    2038:	20000094 	.word	0x20000094

0000203c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    203c:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    203e:	4d0b      	ldr	r5, [pc, #44]	; (206c <idle+0x30>)
    2040:	f04f 0220 	mov.w	r2, #32
    2044:	f3ef 8311 	mrs	r3, BASEPRI
    2048:	f382 8811 	msr	BASEPRI, r2
    204c:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    2050:	f002 fa6d 	bl	452e <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2054:	2101      	movs	r1, #1
	s32_t ticks = z_get_next_timeout_expiry();
    2056:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2058:	2802      	cmp	r0, #2
    205a:	bfd8      	it	le
    205c:	4608      	movle	r0, r1
    205e:	f002 fa76 	bl	454e <z_set_timeout_expiry>
	_kernel.idle = ticks;
    2062:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2064:	f7ff f99e 	bl	13a4 <arch_cpu_idle>
}
    2068:	e7ea      	b.n	2040 <idle+0x4>
    206a:	bf00      	nop
    206c:	20000788 	.word	0x20000788

00002070 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    2070:	4802      	ldr	r0, [pc, #8]	; (207c <z_bss_zero+0xc>)
    2072:	4a03      	ldr	r2, [pc, #12]	; (2080 <z_bss_zero+0x10>)
    2074:	2100      	movs	r1, #0
    2076:	1a12      	subs	r2, r2, r0
    2078:	f002 b899 	b.w	41ae <memset>
    207c:	20000148 	.word	0x20000148
    2080:	200007e8 	.word	0x200007e8

00002084 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    2084:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    2086:	4806      	ldr	r0, [pc, #24]	; (20a0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    2088:	4a06      	ldr	r2, [pc, #24]	; (20a4 <z_data_copy+0x20>)
    208a:	4907      	ldr	r1, [pc, #28]	; (20a8 <z_data_copy+0x24>)
    208c:	1a12      	subs	r2, r2, r0
    208e:	f002 f863 	bl	4158 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    2092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    2096:	4a05      	ldr	r2, [pc, #20]	; (20ac <z_data_copy+0x28>)
    2098:	4905      	ldr	r1, [pc, #20]	; (20b0 <z_data_copy+0x2c>)
    209a:	4806      	ldr	r0, [pc, #24]	; (20b4 <z_data_copy+0x30>)
    209c:	f002 b85c 	b.w	4158 <memcpy>
    20a0:	20000000 	.word	0x20000000
    20a4:	20000148 	.word	0x20000148
    20a8:	00004eb0 	.word	0x00004eb0
    20ac:	00000000 	.word	0x00000000
    20b0:	00004eb0 	.word	0x00004eb0
    20b4:	20000000 	.word	0x20000000

000020b8 <bg_thread_main>:
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    20b8:	2201      	movs	r2, #1
{
    20ba:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    20bc:	4b0b      	ldr	r3, [pc, #44]	; (20ec <bg_thread_main+0x34>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    20be:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    20c0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    20c2:	f7ff ff81 	bl	1fc8 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    20c6:	4a0a      	ldr	r2, [pc, #40]	; (20f0 <bg_thread_main+0x38>)
    20c8:	490a      	ldr	r1, [pc, #40]	; (20f4 <bg_thread_main+0x3c>)
    20ca:	480b      	ldr	r0, [pc, #44]	; (20f8 <bg_thread_main+0x40>)
    20cc:	f001 fde3 	bl	3c96 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    20d0:	2003      	movs	r0, #3
    20d2:	f7ff ff79 	bl	1fc8 <z_sys_init_run_level>

	z_init_static_threads();
    20d6:	f000 fd4b 	bl	2b70 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    20da:	f001 fdc5 	bl	3c68 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    20de:	4a07      	ldr	r2, [pc, #28]	; (20fc <bg_thread_main+0x44>)
    20e0:	7b13      	ldrb	r3, [r2, #12]
    20e2:	f023 0301 	bic.w	r3, r3, #1
    20e6:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    20e8:	bd08      	pop	{r3, pc}
    20ea:	bf00      	nop
    20ec:	200007e5 	.word	0x200007e5
    20f0:	00004b01 	.word	0x00004b01
    20f4:	00004e70 	.word	0x00004e70
    20f8:	00004e80 	.word	0x00004e80
    20fc:	20000714 	.word	0x20000714

00002100 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    2100:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(z_interrupt_stacks[0])) +
    2104:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 2200 <z_cstart+0x100>
    2108:	b0a5      	sub	sp, #148	; 0x94
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    210a:	f389 8808 	msr	MSP, r9
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    210e:	2400      	movs	r4, #0
    2110:	23e0      	movs	r3, #224	; 0xe0
    2112:	4d34      	ldr	r5, [pc, #208]	; (21e4 <z_cstart+0xe4>)
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2114:	f04f 0b01 	mov.w	fp, #1
    2118:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    211c:	77ec      	strb	r4, [r5, #31]
    211e:	762c      	strb	r4, [r5, #24]
    2120:	766c      	strb	r4, [r5, #25]
    2122:	76ac      	strb	r4, [r5, #26]
    2124:	76ec      	strb	r4, [r5, #27]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    2126:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    2128:	4e2f      	ldr	r6, [pc, #188]	; (21e8 <z_cstart+0xe8>)
    212a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    212e:	626b      	str	r3, [r5, #36]	; 0x24
		      SCB_SHCSR_BUSFAULTENA_Msk;
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	/* Enable Secure Fault */
	SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
    2130:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2132:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 2204 <z_cstart+0x104>
    2136:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    213a:	626b      	str	r3, [r5, #36]	; 0x24
	/* Clear BFAR before setting BusFaults to target Non-Secure state. */
	SCB->BFAR = 0;
    213c:	63ac      	str	r4, [r5, #56]	; 0x38

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    213e:	f7ff fab1 	bl	16a4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    2142:	f7ff f929 	bl	1398 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    2146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    214a:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    214c:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    214e:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
    2152:	4d26      	ldr	r5, [pc, #152]	; (21ec <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    2154:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	_current_cpu->current = dummy_thread;
    2158:	ab07      	add	r3, sp, #28
    215a:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    215c:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    215e:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
    2162:	f7ff ff31 	bl	1fc8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2166:	2001      	movs	r0, #1
    2168:	f7ff ff2e 	bl	1fc8 <z_sys_init_run_level>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    216c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 2208 <z_cstart+0x108>
	z_sched_init();
    2170:	f000 fc58 	bl	2a24 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2174:	4b1e      	ldr	r3, [pc, #120]	; (21f0 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    2176:	626e      	str	r6, [r5, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    2178:	f44f 6280 	mov.w	r2, #1024	; 0x400
    217c:	4641      	mov	r1, r8
    217e:	4630      	mov	r0, r6
    2180:	9305      	str	r3, [sp, #20]
    2182:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    2186:	4653      	mov	r3, sl
    2188:	e9cd 4401 	strd	r4, r4, [sp, #4]
    218c:	9400      	str	r4, [sp, #0]
    218e:	f000 fcc9 	bl	2b24 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2192:	7b73      	ldrb	r3, [r6, #13]
	z_ready_thread(&z_main_thread);
    2194:	4630      	mov	r0, r6
    2196:	f023 0304 	bic.w	r3, r3, #4
    219a:	7373      	strb	r3, [r6, #13]
    219c:	f002 f906 	bl	43ac <z_ready_thread>
	z_setup_new_thread(thread, stack,
    21a0:	230f      	movs	r3, #15
    21a2:	4f14      	ldr	r7, [pc, #80]	; (21f4 <z_cstart+0xf4>)
    21a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    21a8:	4638      	mov	r0, r7
    21aa:	e9cd 4302 	strd	r4, r3, [sp, #8]
    21ae:	4912      	ldr	r1, [pc, #72]	; (21f8 <z_cstart+0xf8>)
    21b0:	4b12      	ldr	r3, [pc, #72]	; (21fc <z_cstart+0xfc>)
    21b2:	e9cd b404 	strd	fp, r4, [sp, #16]
    21b6:	e9cd 4400 	strd	r4, r4, [sp]
    21ba:	f000 fcb3 	bl	2b24 <z_setup_new_thread>
    21be:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    21c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    21c4:	f023 0304 	bic.w	r3, r3, #4
    21c8:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    21ca:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
    21ce:	e9c5 3306 	strd	r3, r3, [r5, #24]
    21d2:	4641      	mov	r1, r8
    21d4:	4653      	mov	r3, sl
    21d6:	4630      	mov	r0, r6
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    21d8:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    21da:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    21dc:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    21e0:	f7ff f8bc 	bl	135c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    21e4:	e000ed00 	.word	0xe000ed00
    21e8:	20000714 	.word	0x20000714
    21ec:	20000788 	.word	0x20000788
    21f0:	00004ea7 	.word	0x00004ea7
    21f4:	200006a0 	.word	0x200006a0
    21f8:	20000be8 	.word	0x20000be8
    21fc:	0000203d 	.word	0x0000203d
    2200:	20001528 	.word	0x20001528
    2204:	000020b9 	.word	0x000020b9
    2208:	200007e8 	.word	0x200007e8

0000220c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
    220c:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    220e:	4b0e      	ldr	r3, [pc, #56]	; (2248 <init_mem_slab_module+0x3c>)
    2210:	4c0e      	ldr	r4, [pc, #56]	; (224c <init_mem_slab_module+0x40>)
    2212:	42a3      	cmp	r3, r4
    2214:	d301      	bcc.n	221a <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    2216:	2000      	movs	r0, #0
	return rc;
}
    2218:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    221a:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    221e:	ea41 0200 	orr.w	r2, r1, r0
    2222:	f012 0203 	ands.w	r2, r2, #3
    2226:	d10b      	bne.n	2240 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    2228:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    222a:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    222c:	42aa      	cmp	r2, r5
    222e:	d101      	bne.n	2234 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    2230:	331c      	adds	r3, #28
    2232:	e7ee      	b.n	2212 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    2234:	695e      	ldr	r6, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    2236:	3201      	adds	r2, #1
		*(char **)p = slab->free_list;
    2238:	600e      	str	r6, [r1, #0]
		slab->free_list = p;
    223a:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    223c:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    223e:	e7f5      	b.n	222c <init_mem_slab_module+0x20>
		return -EINVAL;
    2240:	f06f 0015 	mvn.w	r0, #21
	return rc;
    2244:	e7e8      	b.n	2218 <init_mem_slab_module+0xc>
    2246:	bf00      	nop
    2248:	200000e4 	.word	0x200000e4
    224c:	200000e4 	.word	0x200000e4

00002250 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    2250:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    2252:	460c      	mov	r4, r1
    2254:	4616      	mov	r6, r2
    2256:	461f      	mov	r7, r3
    2258:	f04f 0320 	mov.w	r3, #32
    225c:	f3ef 8111 	mrs	r1, BASEPRI
    2260:	f383 8811 	msr	BASEPRI, r3
    2264:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    2268:	6943      	ldr	r3, [r0, #20]
    226a:	b15b      	cbz	r3, 2284 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    226c:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    226e:	681b      	ldr	r3, [r3, #0]
    2270:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    2272:	6983      	ldr	r3, [r0, #24]
    2274:	3301      	adds	r3, #1
    2276:	6183      	str	r3, [r0, #24]
		result = 0;
    2278:	2000      	movs	r0, #0
	__asm__ volatile(
    227a:	f381 8811 	msr	BASEPRI, r1
    227e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    2282:	e011      	b.n	22a8 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    2284:	ea56 0207 	orrs.w	r2, r6, r7
    2288:	d103      	bne.n	2292 <k_mem_slab_alloc+0x42>
		result = -ENOMEM;
    228a:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    228e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    2290:	e7f3      	b.n	227a <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    2292:	4602      	mov	r2, r0
    2294:	e9cd 6700 	strd	r6, r7, [sp]
    2298:	4804      	ldr	r0, [pc, #16]	; (22ac <k_mem_slab_alloc+0x5c>)
    229a:	f000 fb6b 	bl	2974 <z_pend_curr>
		if (result == 0) {
    229e:	b918      	cbnz	r0, 22a8 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    22a0:	4b03      	ldr	r3, [pc, #12]	; (22b0 <k_mem_slab_alloc+0x60>)
    22a2:	689b      	ldr	r3, [r3, #8]
    22a4:	695b      	ldr	r3, [r3, #20]
    22a6:	6023      	str	r3, [r4, #0]
}
    22a8:	b002      	add	sp, #8
    22aa:	bdd0      	pop	{r4, r6, r7, pc}
    22ac:	200007e6 	.word	0x200007e6
    22b0:	20000788 	.word	0x20000788

000022b4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    22b4:	b570      	push	{r4, r5, r6, lr}
    22b6:	4604      	mov	r4, r0
    22b8:	460d      	mov	r5, r1
	__asm__ volatile(
    22ba:	f04f 0320 	mov.w	r3, #32
    22be:	f3ef 8611 	mrs	r6, BASEPRI
    22c2:	f383 8811 	msr	BASEPRI, r3
    22c6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    22ca:	f002 f8e5 	bl	4498 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    22ce:	b158      	cbz	r0, 22e8 <k_mem_slab_free+0x34>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    22d0:	2100      	movs	r1, #0
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    22d2:	682a      	ldr	r2, [r5, #0]
    22d4:	6701      	str	r1, [r0, #112]	; 0x70
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    22d6:	6142      	str	r2, [r0, #20]
		z_ready_thread(pending_thread);
    22d8:	f002 f868 	bl	43ac <z_ready_thread>
		z_reschedule(&lock, key);
    22dc:	4631      	mov	r1, r6
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    22de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    22e2:	4808      	ldr	r0, [pc, #32]	; (2304 <k_mem_slab_free+0x50>)
    22e4:	f002 b837 	b.w	4356 <z_reschedule>
		**(char ***)mem = slab->free_list;
    22e8:	682b      	ldr	r3, [r5, #0]
    22ea:	6962      	ldr	r2, [r4, #20]
    22ec:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    22ee:	682b      	ldr	r3, [r5, #0]
    22f0:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    22f2:	69a3      	ldr	r3, [r4, #24]
    22f4:	3b01      	subs	r3, #1
    22f6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    22f8:	f386 8811 	msr	BASEPRI, r6
    22fc:	f3bf 8f6f 	isb	sy
}
    2300:	bd70      	pop	{r4, r5, r6, pc}
    2302:	bf00      	nop
    2304:	200007e6 	.word	0x200007e6

00002308 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    2308:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    230c:	4604      	mov	r4, r0
    230e:	4616      	mov	r6, r2
    2310:	461f      	mov	r7, r3
	__asm__ volatile(
    2312:	f04f 0320 	mov.w	r3, #32
    2316:	f3ef 8811 	mrs	r8, BASEPRI
    231a:	f383 8811 	msr	BASEPRI, r3
    231e:	f3bf 8f6f 	isb	sy
	bool resched = false;

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    2322:	68c3      	ldr	r3, [r0, #12]
    2324:	4a32      	ldr	r2, [pc, #200]	; (23f0 <z_impl_k_mutex_lock+0xe8>)
    2326:	b16b      	cbz	r3, 2344 <z_impl_k_mutex_lock+0x3c>
    2328:	6880      	ldr	r0, [r0, #8]
    232a:	6891      	ldr	r1, [r2, #8]
    232c:	4288      	cmp	r0, r1
    232e:	d019      	beq.n	2364 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    2330:	ea56 0307 	orrs.w	r3, r6, r7
    2334:	d118      	bne.n	2368 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    2336:	f388 8811 	msr	BASEPRI, r8
    233a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    233e:	f06f 000f 	mvn.w	r0, #15
    2342:	e00c      	b.n	235e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    2344:	6891      	ldr	r1, [r2, #8]
    2346:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    234a:	3301      	adds	r3, #1
    234c:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    234e:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    2350:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    2352:	60a3      	str	r3, [r4, #8]
    2354:	f388 8811 	msr	BASEPRI, r8
    2358:	f3bf 8f6f 	isb	sy
		return 0;
    235c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    235e:	b002      	add	sp, #8
    2360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    2364:	6921      	ldr	r1, [r4, #16]
    2366:	e7f0      	b.n	234a <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    2368:	f990 300e 	ldrsb.w	r3, [r0, #14]
    236c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    2370:	4299      	cmp	r1, r3
    2372:	bfa8      	it	ge
    2374:	4619      	movge	r1, r3
    2376:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    237a:	428b      	cmp	r3, r1
    237c:	dd2c      	ble.n	23d8 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    237e:	f000 fb0d 	bl	299c <z_set_prio>
    2382:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    2384:	4622      	mov	r2, r4
    2386:	4641      	mov	r1, r8
    2388:	e9cd 6700 	strd	r6, r7, [sp]
    238c:	4819      	ldr	r0, [pc, #100]	; (23f4 <z_impl_k_mutex_lock+0xec>)
    238e:	f000 faf1 	bl	2974 <z_pend_curr>
	if (got_mutex == 0) {
    2392:	2800      	cmp	r0, #0
    2394:	d0e3      	beq.n	235e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    2396:	f04f 0320 	mov.w	r3, #32
    239a:	f3ef 8611 	mrs	r6, BASEPRI
    239e:	f383 8811 	msr	BASEPRI, r3
    23a2:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    23a6:	6823      	ldr	r3, [r4, #0]
    23a8:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    23aa:	429c      	cmp	r4, r3
    23ac:	d007      	beq.n	23be <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    23ae:	b133      	cbz	r3, 23be <z_impl_k_mutex_lock+0xb6>
    23b0:	f993 300e 	ldrsb.w	r3, [r3, #14]
    23b4:	4299      	cmp	r1, r3
    23b6:	bfa8      	it	ge
    23b8:	4619      	movge	r1, r3
    23ba:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    23be:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    23c0:	f990 300e 	ldrsb.w	r3, [r0, #14]
    23c4:	4299      	cmp	r1, r3
    23c6:	d109      	bne.n	23dc <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    23c8:	b16d      	cbz	r5, 23e6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    23ca:	4631      	mov	r1, r6
    23cc:	4809      	ldr	r0, [pc, #36]	; (23f4 <z_impl_k_mutex_lock+0xec>)
    23ce:	f001 ffc2 	bl	4356 <z_reschedule>
	return -EAGAIN;
    23d2:	f06f 000a 	mvn.w	r0, #10
    23d6:	e7c2      	b.n	235e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    23d8:	2500      	movs	r5, #0
    23da:	e7d3      	b.n	2384 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    23dc:	f000 fade 	bl	299c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    23e0:	2800      	cmp	r0, #0
    23e2:	d1f2      	bne.n	23ca <z_impl_k_mutex_lock+0xc2>
    23e4:	e7f0      	b.n	23c8 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    23e6:	f386 8811 	msr	BASEPRI, r6
    23ea:	f3bf 8f6f 	isb	sy
    23ee:	e7f0      	b.n	23d2 <z_impl_k_mutex_lock+0xca>
    23f0:	20000788 	.word	0x20000788
    23f4:	200007e6 	.word	0x200007e6

000023f8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    23f8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	CHECKIF(mutex->owner == NULL) {
    23fa:	6883      	ldr	r3, [r0, #8]
{
    23fc:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    23fe:	2b00      	cmp	r3, #0
    2400:	d036      	beq.n	2470 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    2402:	4a1e      	ldr	r2, [pc, #120]	; (247c <z_impl_k_mutex_unlock+0x84>)
    2404:	6892      	ldr	r2, [r2, #8]
    2406:	4293      	cmp	r3, r2
    2408:	d135      	bne.n	2476 <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    240a:	7bda      	ldrb	r2, [r3, #15]
    240c:	3a01      	subs	r2, #1
    240e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    2410:	68c3      	ldr	r3, [r0, #12]
    2412:	2b01      	cmp	r3, #1
    2414:	d005      	beq.n	2422 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    2416:	3b01      	subs	r3, #1
    2418:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    241a:	f000 f8c3 	bl	25a4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    241e:	2000      	movs	r0, #0
}
    2420:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    2422:	f04f 0320 	mov.w	r3, #32
    2426:	f3ef 8511 	mrs	r5, BASEPRI
    242a:	f383 8811 	msr	BASEPRI, r3
    242e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    2432:	6901      	ldr	r1, [r0, #16]
    2434:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    2436:	f990 300e 	ldrsb.w	r3, [r0, #14]
    243a:	4299      	cmp	r1, r3
    243c:	d001      	beq.n	2442 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    243e:	f000 faad 	bl	299c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    2442:	4620      	mov	r0, r4
    2444:	f002 f828 	bl	4498 <z_unpend_first_thread>
	mutex->owner = new_owner;
    2448:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    244a:	b158      	cbz	r0, 2464 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    244c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    2450:	6122      	str	r2, [r4, #16]
    2452:	2200      	movs	r2, #0
    2454:	6702      	str	r2, [r0, #112]	; 0x70
		z_ready_thread(new_owner);
    2456:	f001 ffa9 	bl	43ac <z_ready_thread>
		z_reschedule(&lock, key);
    245a:	4629      	mov	r1, r5
    245c:	4808      	ldr	r0, [pc, #32]	; (2480 <z_impl_k_mutex_unlock+0x88>)
    245e:	f001 ff7a 	bl	4356 <z_reschedule>
    2462:	e7da      	b.n	241a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    2464:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    2466:	f385 8811 	msr	BASEPRI, r5
    246a:	f3bf 8f6f 	isb	sy
    246e:	e7d4      	b.n	241a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    2470:	f06f 0015 	mvn.w	r0, #21
    2474:	e7d4      	b.n	2420 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    2476:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    247a:	e7d1      	b.n	2420 <z_impl_k_mutex_unlock+0x28>
    247c:	20000788 	.word	0x20000788
    2480:	200007e6 	.word	0x200007e6

00002484 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    2484:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    2486:	4c08      	ldr	r4, [pc, #32]	; (24a8 <z_reset_time_slice+0x24>)
    2488:	6823      	ldr	r3, [r4, #0]
    248a:	b15b      	cbz	r3, 24a4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    248c:	f7fe fbda 	bl	c44 <z_clock_elapsed>
    2490:	6822      	ldr	r2, [r4, #0]
    2492:	4906      	ldr	r1, [pc, #24]	; (24ac <z_reset_time_slice+0x28>)
    2494:	4410      	add	r0, r2
    2496:	6108      	str	r0, [r1, #16]
		z_set_timeout_expiry(slice_time, false);
	}
}
    2498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    249c:	2100      	movs	r1, #0
    249e:	4610      	mov	r0, r2
    24a0:	f002 b855 	b.w	454e <z_set_timeout_expiry>
}
    24a4:	bd10      	pop	{r4, pc}
    24a6:	bf00      	nop
    24a8:	200007c0 	.word	0x200007c0
    24ac:	20000788 	.word	0x20000788

000024b0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    24b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    24b2:	460c      	mov	r4, r1
	__asm__ volatile(
    24b4:	f04f 0320 	mov.w	r3, #32
    24b8:	f3ef 8511 	mrs	r5, BASEPRI
    24bc:	f383 8811 	msr	BASEPRI, r3
    24c0:	f3bf 8f6f 	isb	sy
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    24c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    24c8:	f240 36e7 	movw	r6, #999	; 0x3e7
    24cc:	2700      	movs	r7, #0
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    24ce:	2200      	movs	r2, #0
    24d0:	fbe1 6700 	umlal	r6, r7, r1, r0
    24d4:	4b09      	ldr	r3, [pc, #36]	; (24fc <k_sched_time_slice_set+0x4c>)
    24d6:	4630      	mov	r0, r6
    24d8:	611a      	str	r2, [r3, #16]
    24da:	4639      	mov	r1, r7
    24dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    24e0:	2300      	movs	r3, #0
    24e2:	f7fd feab 	bl	23c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    24e6:	4b06      	ldr	r3, [pc, #24]	; (2500 <k_sched_time_slice_set+0x50>)
    24e8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    24ea:	4b06      	ldr	r3, [pc, #24]	; (2504 <k_sched_time_slice_set+0x54>)
    24ec:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    24ee:	f7ff ffc9 	bl	2484 <z_reset_time_slice>
	__asm__ volatile(
    24f2:	f385 8811 	msr	BASEPRI, r5
    24f6:	f3bf 8f6f 	isb	sy
	}
}
    24fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24fc:	20000788 	.word	0x20000788
    2500:	200007c0 	.word	0x200007c0
    2504:	200007bc 	.word	0x200007bc

00002508 <k_sched_lock>:
	__asm__ volatile(
    2508:	f04f 0320 	mov.w	r3, #32
    250c:	f3ef 8111 	mrs	r1, BASEPRI
    2510:	f383 8811 	msr	BASEPRI, r3
    2514:	f3bf 8f6f 	isb	sy
    2518:	4b04      	ldr	r3, [pc, #16]	; (252c <k_sched_lock+0x24>)
    251a:	689a      	ldr	r2, [r3, #8]
    251c:	7bd3      	ldrb	r3, [r2, #15]
    251e:	3b01      	subs	r3, #1
    2520:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    2522:	f381 8811 	msr	BASEPRI, r1
    2526:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    252a:	4770      	bx	lr
    252c:	20000788 	.word	0x20000788

00002530 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    2530:	4b09      	ldr	r3, [pc, #36]	; (2558 <z_priq_dumb_remove+0x28>)
    2532:	f103 0228 	add.w	r2, r3, #40	; 0x28
    2536:	4282      	cmp	r2, r0
    2538:	d105      	bne.n	2546 <z_priq_dumb_remove+0x16>
    253a:	689b      	ldr	r3, [r3, #8]
    253c:	428b      	cmp	r3, r1
    253e:	d102      	bne.n	2546 <z_priq_dumb_remove+0x16>
    2540:	7b4b      	ldrb	r3, [r1, #13]
    2542:	06db      	lsls	r3, r3, #27
    2544:	d106      	bne.n	2554 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    2546:	e9d1 3200 	ldrd	r3, r2, [r1]
    254a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    254c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    254e:	2300      	movs	r3, #0
	node->prev = NULL;
    2550:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    2554:	4770      	bx	lr
    2556:	bf00      	nop
    2558:	20000788 	.word	0x20000788

0000255c <update_cache>:
{
    255c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    255e:	4c10      	ldr	r4, [pc, #64]	; (25a0 <update_cache+0x44>)
{
    2560:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
    2562:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2566:	f001 ff17 	bl	4398 <z_priq_dumb_best>
    256a:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    256c:	68a3      	ldr	r3, [r4, #8]
    256e:	7b59      	ldrb	r1, [r3, #13]
    2570:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
    2572:	bf44      	itt	mi
    2574:	f041 0108 	orrmi.w	r1, r1, #8
    2578:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
    257a:	b905      	cbnz	r5, 257e <update_cache+0x22>
    257c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    257e:	b94e      	cbnz	r6, 2594 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
    2580:	7b5a      	ldrb	r2, [r3, #13]
    2582:	06d2      	lsls	r2, r2, #27
    2584:	d106      	bne.n	2594 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    2586:	69aa      	ldr	r2, [r5, #24]
    2588:	b922      	cbnz	r2, 2594 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
    258a:	89da      	ldrh	r2, [r3, #14]
    258c:	2a7f      	cmp	r2, #127	; 0x7f
    258e:	d901      	bls.n	2594 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
    2590:	6263      	str	r3, [r4, #36]	; 0x24
}
    2592:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
    2594:	42ab      	cmp	r3, r5
    2596:	d001      	beq.n	259c <update_cache+0x40>
			z_reset_time_slice();
    2598:	f7ff ff74 	bl	2484 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    259c:	6265      	str	r5, [r4, #36]	; 0x24
}
    259e:	e7f8      	b.n	2592 <update_cache+0x36>
    25a0:	20000788 	.word	0x20000788

000025a4 <k_sched_unlock>:
{
    25a4:	b510      	push	{r4, lr}
	__asm__ volatile(
    25a6:	f04f 0320 	mov.w	r3, #32
    25aa:	f3ef 8411 	mrs	r4, BASEPRI
    25ae:	f383 8811 	msr	BASEPRI, r3
    25b2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    25b6:	4b08      	ldr	r3, [pc, #32]	; (25d8 <k_sched_unlock+0x34>)
		update_cache(0);
    25b8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    25ba:	689a      	ldr	r2, [r3, #8]
    25bc:	7bd3      	ldrb	r3, [r2, #15]
    25be:	3301      	adds	r3, #1
    25c0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    25c2:	f7ff ffcb 	bl	255c <update_cache>
	__asm__ volatile(
    25c6:	f384 8811 	msr	BASEPRI, r4
    25ca:	f3bf 8f6f 	isb	sy
}
    25ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    25d2:	f001 bed7 	b.w	4384 <z_reschedule_unlocked>
    25d6:	bf00      	nop
    25d8:	20000788 	.word	0x20000788

000025dc <ready_thread>:
{
    25dc:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    25de:	7b43      	ldrb	r3, [r0, #13]
    25e0:	06db      	lsls	r3, r3, #27
    25e2:	d12a      	bne.n	263a <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    25e4:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
    25e6:	bb43      	cbnz	r3, 263a <ready_thread+0x5e>
	return list->head == list;
    25e8:	4a15      	ldr	r2, [pc, #84]	; (2640 <ready_thread+0x64>)
    25ea:	4611      	mov	r1, r2
    25ec:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    25f0:	428c      	cmp	r4, r1
    25f2:	bf18      	it	ne
    25f4:	4623      	movne	r3, r4
    25f6:	2b00      	cmp	r3, #0
    25f8:	bf38      	it	cc
    25fa:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    25fc:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    25fe:	b1b3      	cbz	r3, 262e <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
    2600:	f990 600e 	ldrsb.w	r6, [r0, #14]
    2604:	f993 500e 	ldrsb.w	r5, [r3, #14]
    2608:	42ae      	cmp	r6, r5
    260a:	db03      	blt.n	2614 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
    260c:	42a3      	cmp	r3, r4
    260e:	d00e      	beq.n	262e <ready_thread+0x52>
    2610:	681b      	ldr	r3, [r3, #0]
    2612:	e7f4      	b.n	25fe <ready_thread+0x22>
	node->prev = successor->prev;
    2614:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2616:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    261a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    261c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    261e:	7b43      	ldrb	r3, [r0, #13]
    2620:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2624:	7343      	strb	r3, [r0, #13]
}
    2626:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    2628:	2000      	movs	r0, #0
    262a:	f7ff bf97 	b.w	255c <update_cache>
	node->prev = list->tail;
    262e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    2632:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    2634:	6018      	str	r0, [r3, #0]
	list->tail = node;
    2636:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    2638:	e7f1      	b.n	261e <ready_thread+0x42>
}
    263a:	bc70      	pop	{r4, r5, r6}
    263c:	4770      	bx	lr
    263e:	bf00      	nop
    2640:	20000788 	.word	0x20000788

00002644 <z_sched_start>:
{
    2644:	b510      	push	{r4, lr}
	__asm__ volatile(
    2646:	f04f 0220 	mov.w	r2, #32
    264a:	f3ef 8411 	mrs	r4, BASEPRI
    264e:	f382 8811 	msr	BASEPRI, r2
    2652:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    2656:	7b42      	ldrb	r2, [r0, #13]
    2658:	0751      	lsls	r1, r2, #29
    265a:	d404      	bmi.n	2666 <z_sched_start+0x22>
	__asm__ volatile(
    265c:	f384 8811 	msr	BASEPRI, r4
    2660:	f3bf 8f6f 	isb	sy
}
    2664:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2666:	f022 0204 	bic.w	r2, r2, #4
    266a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    266c:	f7ff ffb6 	bl	25dc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    2670:	4621      	mov	r1, r4
}
    2672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    2676:	4801      	ldr	r0, [pc, #4]	; (267c <z_sched_start+0x38>)
    2678:	f001 be6d 	b.w	4356 <z_reschedule>
    267c:	200007e6 	.word	0x200007e6

00002680 <z_move_thread_to_end_of_prio_q>:
{
    2680:	4601      	mov	r1, r0
    2682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    2684:	f04f 0320 	mov.w	r3, #32
    2688:	f3ef 8411 	mrs	r4, BASEPRI
    268c:	f383 8811 	msr	BASEPRI, r3
    2690:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2694:	f990 300d 	ldrsb.w	r3, [r0, #13]
    2698:	2b00      	cmp	r3, #0
    269a:	da02      	bge.n	26a2 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    269c:	4819      	ldr	r0, [pc, #100]	; (2704 <z_move_thread_to_end_of_prio_q+0x84>)
    269e:	f7ff ff47 	bl	2530 <z_priq_dumb_remove>
	return list->head == list;
    26a2:	4a19      	ldr	r2, [pc, #100]	; (2708 <z_move_thread_to_end_of_prio_q+0x88>)
    26a4:	4610      	mov	r0, r2
    26a6:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    26aa:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    26ac:	4283      	cmp	r3, r0
    26ae:	bf08      	it	eq
    26b0:	2300      	moveq	r3, #0
    26b2:	2b00      	cmp	r3, #0
    26b4:	bf38      	it	cc
    26b6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    26b8:	b1eb      	cbz	r3, 26f6 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
    26ba:	f991 700e 	ldrsb.w	r7, [r1, #14]
    26be:	f993 600e 	ldrsb.w	r6, [r3, #14]
    26c2:	42b7      	cmp	r7, r6
    26c4:	db03      	blt.n	26ce <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
    26c6:	429d      	cmp	r5, r3
    26c8:	d015      	beq.n	26f6 <z_move_thread_to_end_of_prio_q+0x76>
    26ca:	681b      	ldr	r3, [r3, #0]
    26cc:	e7f4      	b.n	26b8 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
    26ce:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    26d0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    26d4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    26d6:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    26d8:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
    26da:	6890      	ldr	r0, [r2, #8]
    26dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    26e0:	734b      	strb	r3, [r1, #13]
    26e2:	1a43      	subs	r3, r0, r1
    26e4:	4258      	negs	r0, r3
    26e6:	4158      	adcs	r0, r3
    26e8:	f7ff ff38 	bl	255c <update_cache>
	__asm__ volatile(
    26ec:	f384 8811 	msr	BASEPRI, r4
    26f0:	f3bf 8f6f 	isb	sy
}
    26f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
    26f6:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
    26fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    26fc:	6019      	str	r1, [r3, #0]
	list->tail = node;
    26fe:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    2700:	e7ea      	b.n	26d8 <z_move_thread_to_end_of_prio_q+0x58>
    2702:	bf00      	nop
    2704:	200007b0 	.word	0x200007b0
    2708:	20000788 	.word	0x20000788

0000270c <z_time_slice>:
{
    270c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    270e:	4a15      	ldr	r2, [pc, #84]	; (2764 <z_time_slice+0x58>)
    2710:	4b15      	ldr	r3, [pc, #84]	; (2768 <z_time_slice+0x5c>)
    2712:	6814      	ldr	r4, [r2, #0]
{
    2714:	4601      	mov	r1, r0
	if (pending_current == _current) {
    2716:	6898      	ldr	r0, [r3, #8]
    2718:	42a0      	cmp	r0, r4
    271a:	461c      	mov	r4, r3
    271c:	d103      	bne.n	2726 <z_time_slice+0x1a>
}
    271e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    2722:	f7ff beaf 	b.w	2484 <z_reset_time_slice>
	pending_current = NULL;
    2726:	2500      	movs	r5, #0
    2728:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    272a:	4a10      	ldr	r2, [pc, #64]	; (276c <z_time_slice+0x60>)
    272c:	6812      	ldr	r2, [r2, #0]
    272e:	b1b2      	cbz	r2, 275e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    2730:	89c2      	ldrh	r2, [r0, #14]
    2732:	2a7f      	cmp	r2, #127	; 0x7f
    2734:	d813      	bhi.n	275e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2736:	4a0e      	ldr	r2, [pc, #56]	; (2770 <z_time_slice+0x64>)
    2738:	f990 500e 	ldrsb.w	r5, [r0, #14]
    273c:	6812      	ldr	r2, [r2, #0]
    273e:	4295      	cmp	r5, r2
    2740:	db0d      	blt.n	275e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
    2742:	4a0c      	ldr	r2, [pc, #48]	; (2774 <z_time_slice+0x68>)
    2744:	4290      	cmp	r0, r2
    2746:	d00a      	beq.n	275e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
    2748:	6982      	ldr	r2, [r0, #24]
    274a:	b942      	cbnz	r2, 275e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    274c:	691a      	ldr	r2, [r3, #16]
    274e:	428a      	cmp	r2, r1
    2750:	dc02      	bgt.n	2758 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    2752:	f7ff ff95 	bl	2680 <z_move_thread_to_end_of_prio_q>
    2756:	e7e2      	b.n	271e <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
    2758:	1a52      	subs	r2, r2, r1
    275a:	611a      	str	r2, [r3, #16]
}
    275c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    275e:	2300      	movs	r3, #0
    2760:	6123      	str	r3, [r4, #16]
    2762:	e7fb      	b.n	275c <z_time_slice+0x50>
    2764:	200007b8 	.word	0x200007b8
    2768:	20000788 	.word	0x20000788
    276c:	200007c0 	.word	0x200007c0
    2770:	200007bc 	.word	0x200007bc
    2774:	200006a0 	.word	0x200006a0

00002778 <z_impl_k_thread_suspend>:
{
    2778:	b570      	push	{r4, r5, r6, lr}
    277a:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    277c:	3018      	adds	r0, #24
    277e:	f001 fec0 	bl	4502 <z_abort_timeout>
	__asm__ volatile(
    2782:	f04f 0320 	mov.w	r3, #32
    2786:	f3ef 8611 	mrs	r6, BASEPRI
    278a:	f383 8811 	msr	BASEPRI, r3
    278e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2792:	f994 300d 	ldrsb.w	r3, [r4, #13]
    2796:	2b00      	cmp	r3, #0
    2798:	da07      	bge.n	27aa <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    279a:	4621      	mov	r1, r4
    279c:	480e      	ldr	r0, [pc, #56]	; (27d8 <z_impl_k_thread_suspend+0x60>)
    279e:	f7ff fec7 	bl	2530 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    27a2:	7b63      	ldrb	r3, [r4, #13]
    27a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    27a8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    27aa:	4d0c      	ldr	r5, [pc, #48]	; (27dc <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    27ac:	7b63      	ldrb	r3, [r4, #13]
    27ae:	68a8      	ldr	r0, [r5, #8]
    27b0:	f043 0310 	orr.w	r3, r3, #16
    27b4:	7363      	strb	r3, [r4, #13]
    27b6:	1b03      	subs	r3, r0, r4
    27b8:	4258      	negs	r0, r3
    27ba:	4158      	adcs	r0, r3
    27bc:	f7ff fece 	bl	255c <update_cache>
	__asm__ volatile(
    27c0:	f386 8811 	msr	BASEPRI, r6
    27c4:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    27c8:	68ab      	ldr	r3, [r5, #8]
    27ca:	42a3      	cmp	r3, r4
    27cc:	d103      	bne.n	27d6 <z_impl_k_thread_suspend+0x5e>
}
    27ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    27d2:	f001 bdd7 	b.w	4384 <z_reschedule_unlocked>
}
    27d6:	bd70      	pop	{r4, r5, r6, pc}
    27d8:	200007b0 	.word	0x200007b0
    27dc:	20000788 	.word	0x20000788

000027e0 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    27e0:	6d83      	ldr	r3, [r0, #88]	; 0x58
{
    27e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27e6:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    27e8:	b103      	cbz	r3, 27ec <z_thread_single_abort+0xc>
		thread->fn_abort();
    27ea:	4798      	blx	r3
    27ec:	f104 0018 	add.w	r0, r4, #24
    27f0:	f001 fe87 	bl	4502 <z_abort_timeout>
	__asm__ volatile(
    27f4:	f04f 0320 	mov.w	r3, #32
    27f8:	f3ef 8611 	mrs	r6, BASEPRI
    27fc:	f383 8811 	msr	BASEPRI, r3
    2800:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    2804:	7b63      	ldrb	r3, [r4, #13]
    2806:	06d8      	lsls	r0, r3, #27
    2808:	d123      	bne.n	2852 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
    280a:	69a2      	ldr	r2, [r4, #24]
    280c:	bb0a      	cbnz	r2, 2852 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
    280e:	0619      	lsls	r1, r3, #24
    2810:	d507      	bpl.n	2822 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
    2812:	4621      	mov	r1, r4
    2814:	481e      	ldr	r0, [pc, #120]	; (2890 <z_thread_single_abort+0xb0>)
    2816:	f7ff fe8b 	bl	2530 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    281a:	7b63      	ldrb	r3, [r4, #13]
    281c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2820:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    2822:	4b1c      	ldr	r3, [pc, #112]	; (2894 <z_thread_single_abort+0xb4>)
    2824:	6898      	ldr	r0, [r3, #8]
    2826:	1b02      	subs	r2, r0, r4
    2828:	4250      	negs	r0, r2
    282a:	4150      	adcs	r0, r2
    282c:	f7ff fe96 	bl	255c <update_cache>
			waiter->base.pended_on = NULL;
    2830:	2700      	movs	r7, #0
		thread->base.thread_state |= mask;
    2832:	7b63      	ldrb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    2834:	f104 0828 	add.w	r8, r4, #40	; 0x28
    2838:	f043 0308 	orr.w	r3, r3, #8
    283c:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    283e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2840:	4545      	cmp	r5, r8
    2842:	d000      	beq.n	2846 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    2844:	b995      	cbnz	r5, 286c <z_thread_single_abort+0x8c>
	__asm__ volatile(
    2846:	f386 8811 	msr	BASEPRI, r6
    284a:	f3bf 8f6f 	isb	sy
}
    284e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
    2852:	079b      	lsls	r3, r3, #30
    2854:	d5ec      	bpl.n	2830 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
    2856:	4621      	mov	r1, r4
    2858:	68a0      	ldr	r0, [r4, #8]
    285a:	f7ff fe69 	bl	2530 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    285e:	7b63      	ldrb	r3, [r4, #13]
    2860:	f023 0302 	bic.w	r3, r3, #2
    2864:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    2866:	2300      	movs	r3, #0
    2868:	60a3      	str	r3, [r4, #8]
    286a:	e7e1      	b.n	2830 <z_thread_single_abort+0x50>
    286c:	f105 0018 	add.w	r0, r5, #24
    2870:	f001 fe47 	bl	4502 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    2874:	68a8      	ldr	r0, [r5, #8]
    2876:	4629      	mov	r1, r5
    2878:	f7ff fe5a 	bl	2530 <z_priq_dumb_remove>
    287c:	7b6b      	ldrb	r3, [r5, #13]
			ready_thread(waiter);
    287e:	4628      	mov	r0, r5
    2880:	f023 0302 	bic.w	r3, r3, #2
    2884:	736b      	strb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    2886:	60af      	str	r7, [r5, #8]
    2888:	672f      	str	r7, [r5, #112]	; 0x70
			ready_thread(waiter);
    288a:	f7ff fea7 	bl	25dc <ready_thread>
    288e:	e7d6      	b.n	283e <z_thread_single_abort+0x5e>
    2890:	200007b0 	.word	0x200007b0
    2894:	20000788 	.word	0x20000788

00002898 <unready_thread>:
{
    2898:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    289a:	f990 300d 	ldrsb.w	r3, [r0, #13]
{
    289e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    28a0:	2b00      	cmp	r3, #0
    28a2:	da06      	bge.n	28b2 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    28a4:	4807      	ldr	r0, [pc, #28]	; (28c4 <unready_thread+0x2c>)
    28a6:	f7ff fe43 	bl	2530 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    28aa:	7b4b      	ldrb	r3, [r1, #13]
    28ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    28b0:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    28b2:	4b05      	ldr	r3, [pc, #20]	; (28c8 <unready_thread+0x30>)
    28b4:	6898      	ldr	r0, [r3, #8]
    28b6:	1a43      	subs	r3, r0, r1
    28b8:	4258      	negs	r0, r3
    28ba:	4158      	adcs	r0, r3
}
    28bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    28c0:	f7ff be4c 	b.w	255c <update_cache>
    28c4:	200007b0 	.word	0x200007b0
    28c8:	20000788 	.word	0x20000788

000028cc <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    28cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28ce:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    28d0:	f001 fe58 	bl	4584 <z_tick_get_32>
    28d4:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    28d6:	f04f 0320 	mov.w	r3, #32
    28da:	f3ef 8711 	mrs	r7, BASEPRI
    28de:	f383 8811 	msr	BASEPRI, r3
    28e2:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    28e6:	4e0d      	ldr	r6, [pc, #52]	; (291c <z_tick_sleep.part.0+0x50>)
    28e8:	4b0d      	ldr	r3, [pc, #52]	; (2920 <z_tick_sleep.part.0+0x54>)
    28ea:	68b0      	ldr	r0, [r6, #8]
    28ec:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    28ee:	f001 fd98 	bl	4422 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
    28f2:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    28f4:	490b      	ldr	r1, [pc, #44]	; (2924 <z_tick_sleep.part.0+0x58>)
    28f6:	462a      	mov	r2, r5
    28f8:	17eb      	asrs	r3, r5, #31
    28fa:	3018      	adds	r0, #24
    28fc:	f000 f9d4 	bl	2ca8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    2900:	68b2      	ldr	r2, [r6, #8]
	ret = arch_swap(key);
    2902:	4638      	mov	r0, r7
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2904:	7b53      	ldrb	r3, [r2, #13]
    2906:	f043 0310 	orr.w	r3, r3, #16
    290a:	7353      	strb	r3, [r2, #13]
    290c:	f7fe fc98 	bl	1240 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    2910:	f001 fe38 	bl	4584 <z_tick_get_32>
    2914:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    2916:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    291a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    291c:	20000788 	.word	0x20000788
    2920:	200007b8 	.word	0x200007b8
    2924:	000043cd 	.word	0x000043cd

00002928 <pend>:
{
    2928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    292c:	4606      	mov	r6, r0
    292e:	4614      	mov	r4, r2
    2930:	461d      	mov	r5, r3
    2932:	f04f 0320 	mov.w	r3, #32
    2936:	f3ef 8711 	mrs	r7, BASEPRI
    293a:	f383 8811 	msr	BASEPRI, r3
    293e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    2942:	f001 fd7e 	bl	4442 <add_to_waitq_locked>
	__asm__ volatile(
    2946:	f387 8811 	msr	BASEPRI, r7
    294a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    294e:	1c6b      	adds	r3, r5, #1
    2950:	bf08      	it	eq
    2952:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    2956:	d008      	beq.n	296a <pend+0x42>
    2958:	4622      	mov	r2, r4
    295a:	462b      	mov	r3, r5
    295c:	f106 0018 	add.w	r0, r6, #24
    2960:	4903      	ldr	r1, [pc, #12]	; (2970 <pend+0x48>)
}
    2962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2966:	f000 b99f 	b.w	2ca8 <z_add_timeout>
    296a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    296e:	bf00      	nop
    2970:	000043cd 	.word	0x000043cd

00002974 <z_pend_curr>:
{
    2974:	b510      	push	{r4, lr}
    2976:	460c      	mov	r4, r1
	pending_current = _current;
    2978:	4b06      	ldr	r3, [pc, #24]	; (2994 <z_pend_curr+0x20>)
{
    297a:	4611      	mov	r1, r2
	pending_current = _current;
    297c:	6898      	ldr	r0, [r3, #8]
    297e:	4b06      	ldr	r3, [pc, #24]	; (2998 <z_pend_curr+0x24>)
    2980:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    2982:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2986:	f7ff ffcf 	bl	2928 <pend>
    298a:	4620      	mov	r0, r4
}
    298c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2990:	f7fe bc56 	b.w	1240 <arch_swap>
    2994:	20000788 	.word	0x20000788
    2998:	200007b8 	.word	0x200007b8

0000299c <z_set_prio>:
{
    299c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29a0:	4604      	mov	r4, r0
	__asm__ volatile(
    29a2:	f04f 0320 	mov.w	r3, #32
    29a6:	f3ef 8811 	mrs	r8, BASEPRI
    29aa:	f383 8811 	msr	BASEPRI, r3
    29ae:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    29b2:	7b43      	ldrb	r3, [r0, #13]
    29b4:	b24e      	sxtb	r6, r1
    29b6:	06db      	lsls	r3, r3, #27
    29b8:	d12e      	bne.n	2a18 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
    29ba:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    29bc:	bb65      	cbnz	r5, 2a18 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    29be:	4f18      	ldr	r7, [pc, #96]	; (2a20 <z_set_prio+0x84>)
    29c0:	4621      	mov	r1, r4
    29c2:	f107 0028 	add.w	r0, r7, #40	; 0x28
    29c6:	f7ff fdb3 	bl	2530 <z_priq_dumb_remove>
	return list->head == list;
    29ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    29cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
    29ce:	4283      	cmp	r3, r0
    29d0:	bf18      	it	ne
    29d2:	461d      	movne	r5, r3
    29d4:	2d00      	cmp	r5, #0
    29d6:	bf38      	it	cc
    29d8:	2500      	movcc	r5, #0
				thread->base.prio = prio;
    29da:	73a6      	strb	r6, [r4, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    29dc:	b1b5      	cbz	r5, 2a0c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    29de:	f995 100e 	ldrsb.w	r1, [r5, #14]
    29e2:	42b1      	cmp	r1, r6
    29e4:	dc03      	bgt.n	29ee <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
    29e6:	42aa      	cmp	r2, r5
    29e8:	d010      	beq.n	2a0c <z_set_prio+0x70>
    29ea:	682d      	ldr	r5, [r5, #0]
    29ec:	e7f6      	b.n	29dc <z_set_prio+0x40>
	node->prev = successor->prev;
    29ee:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
    29f0:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
    29f4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    29f6:	606c      	str	r4, [r5, #4]
			update_cache(1);
    29f8:	2001      	movs	r0, #1
    29fa:	f7ff fdaf 	bl	255c <update_cache>
    29fe:	2001      	movs	r0, #1
	__asm__ volatile(
    2a00:	f388 8811 	msr	BASEPRI, r8
    2a04:	f3bf 8f6f 	isb	sy
}
    2a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
    2a0c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
    2a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    2a12:	601c      	str	r4, [r3, #0]
	list->tail = node;
    2a14:	62fc      	str	r4, [r7, #44]	; 0x2c
}
    2a16:	e7ef      	b.n	29f8 <z_set_prio+0x5c>
			thread->base.prio = prio;
    2a18:	2000      	movs	r0, #0
    2a1a:	73a6      	strb	r6, [r4, #14]
    2a1c:	e7f0      	b.n	2a00 <z_set_prio+0x64>
    2a1e:	bf00      	nop
    2a20:	20000788 	.word	0x20000788

00002a24 <z_sched_init>:
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    2a24:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    2a26:	4b04      	ldr	r3, [pc, #16]	; (2a38 <z_sched_init+0x14>)
    2a28:	4608      	mov	r0, r1
    2a2a:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2a2e:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    2a32:	f7ff bd3d 	b.w	24b0 <k_sched_time_slice_set>
    2a36:	bf00      	nop
    2a38:	20000788 	.word	0x20000788

00002a3c <z_impl_k_yield>:
{
    2a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    2a3e:	4c24      	ldr	r4, [pc, #144]	; (2ad0 <z_impl_k_yield+0x94>)
    2a40:	4b24      	ldr	r3, [pc, #144]	; (2ad4 <z_impl_k_yield+0x98>)
    2a42:	68a2      	ldr	r2, [r4, #8]
    2a44:	429a      	cmp	r2, r3
    2a46:	d030      	beq.n	2aaa <z_impl_k_yield+0x6e>
	__asm__ volatile(
    2a48:	f04f 0320 	mov.w	r3, #32
    2a4c:	f3ef 8511 	mrs	r5, BASEPRI
    2a50:	f383 8811 	msr	BASEPRI, r3
    2a54:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    2a58:	68a1      	ldr	r1, [r4, #8]
    2a5a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    2a5e:	f7ff fd67 	bl	2530 <z_priq_dumb_remove>
	return list->head == list;
    2a62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    2a64:	68a2      	ldr	r2, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2a66:	4283      	cmp	r3, r0
    2a68:	bf08      	it	eq
    2a6a:	2300      	moveq	r3, #0
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	bf38      	it	cc
    2a70:	2300      	movcc	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2a72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2a74:	b32b      	cbz	r3, 2ac2 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    2a76:	f992 700e 	ldrsb.w	r7, [r2, #14]
    2a7a:	f993 600e 	ldrsb.w	r6, [r3, #14]
    2a7e:	42b7      	cmp	r7, r6
    2a80:	db03      	blt.n	2a8a <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    2a82:	428b      	cmp	r3, r1
    2a84:	d01d      	beq.n	2ac2 <z_impl_k_yield+0x86>
    2a86:	681b      	ldr	r3, [r3, #0]
    2a88:	e7f4      	b.n	2a74 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    2a8a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    2a8c:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    2a90:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    2a92:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    2a94:	7b53      	ldrb	r3, [r2, #13]
			update_cache(1);
    2a96:	2001      	movs	r0, #1
    2a98:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2a9c:	7353      	strb	r3, [r2, #13]
    2a9e:	f7ff fd5d 	bl	255c <update_cache>
	__asm__ volatile(
    2aa2:	f385 8811 	msr	BASEPRI, r5
    2aa6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    2aaa:	f04f 0320 	mov.w	r3, #32
    2aae:	f3ef 8011 	mrs	r0, BASEPRI
    2ab2:	f383 8811 	msr	BASEPRI, r3
    2ab6:	f3bf 8f6f 	isb	sy
}
    2aba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2abe:	f7fe bbbf 	b.w	1240 <arch_swap>
	node->prev = list->tail;
    2ac2:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    2ac6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2ac8:	601a      	str	r2, [r3, #0]
	list->tail = node;
    2aca:	62e2      	str	r2, [r4, #44]	; 0x2c
}
    2acc:	e7e2      	b.n	2a94 <z_impl_k_yield+0x58>
    2ace:	bf00      	nop
    2ad0:	20000788 	.word	0x20000788
    2ad4:	200006a0 	.word	0x200006a0

00002ad8 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(k_timeout_t timeout)
{
    2ad8:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2ada:	3301      	adds	r3, #1
    2adc:	bf08      	it	eq
    2ade:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    2ae2:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2ae4:	d106      	bne.n	2af4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    2ae6:	4b0b      	ldr	r3, [pc, #44]	; (2b14 <z_impl_k_sleep+0x3c>)
    2ae8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    2aea:	f7ff fe45 	bl	2778 <z_impl_k_thread_suspend>
		return (s32_t) K_TICKS_FOREVER;
    2aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    2af2:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    2af4:	4604      	mov	r4, r0
	if (ticks == 0) {
    2af6:	b948      	cbnz	r0, 2b0c <z_impl_k_sleep+0x34>
	z_impl_k_yield();
    2af8:	f7ff ffa0 	bl	2a3c <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    2afc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2b00:	fb84 3400 	smull	r3, r4, r4, r0
    2b04:	0bd8      	lsrs	r0, r3, #15
    2b06:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    2b0a:	e7f2      	b.n	2af2 <z_impl_k_sleep+0x1a>
    2b0c:	f7ff fede 	bl	28cc <z_tick_sleep.part.0>
    2b10:	4604      	mov	r4, r0
    2b12:	e7f3      	b.n	2afc <z_impl_k_sleep+0x24>
    2b14:	20000788 	.word	0x20000788

00002b18 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    2b18:	4b01      	ldr	r3, [pc, #4]	; (2b20 <z_impl_k_current_get+0x8>)
    2b1a:	6898      	ldr	r0, [r3, #8]
    2b1c:	4770      	bx	lr
    2b1e:	bf00      	nop
    2b20:	20000788 	.word	0x20000788

00002b24 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    2b24:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_dlist_init(&w->waitq);
    2b26:	f100 0528 	add.w	r5, r0, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2b2a:	e9c0 550a 	strd	r5, r5, [r0, #40]	; 0x28
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
	thread_base->thread_state = (u8_t)initial_state;
    2b2e:	2504      	movs	r5, #4
    2b30:	7345      	strb	r5, [r0, #13]

	thread_base->prio = priority;

	thread_base->sched_locked = 0U;
    2b32:	2500      	movs	r5, #0
{
    2b34:	4604      	mov	r4, r0
    2b36:	b087      	sub	sp, #28
    2b38:	e9dd 670f 	ldrd	r6, r7, [sp, #60]	; 0x3c
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2b3c:	e9cd 6703 	strd	r6, r7, [sp, #12]
	thread_base->prio = priority;
    2b40:	7386      	strb	r6, [r0, #14]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2b42:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	node->prev = NULL;
    2b44:	e9c0 5506 	strd	r5, r5, [r0, #24]
    2b48:	9602      	str	r6, [sp, #8]
    2b4a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	thread_base->user_options = (u8_t)options;
    2b4c:	7307      	strb	r7, [r0, #12]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2b4e:	9601      	str	r6, [sp, #4]
    2b50:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
    2b52:	73c5      	strb	r5, [r0, #15]
	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    2b54:	9600      	str	r6, [sp, #0]
    2b56:	f7fe fbe7 	bl	1328 <arch_new_thread>
	if (!_current) {
    2b5a:	4b04      	ldr	r3, [pc, #16]	; (2b6c <z_setup_new_thread+0x48>)
	new_thread->fn_abort = NULL;
    2b5c:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
	if (!_current) {
    2b60:	689b      	ldr	r3, [r3, #8]
    2b62:	b103      	cbz	r3, 2b66 <z_setup_new_thread+0x42>
	new_thread->resource_pool = _current->resource_pool;
    2b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    2b66:	66a3      	str	r3, [r4, #104]	; 0x68
}
    2b68:	b007      	add	sp, #28
    2b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b6c:	20000788 	.word	0x20000788

00002b70 <z_init_static_threads>:
{
    2b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    2b74:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 2c2c <z_init_static_threads+0xbc>
    2b78:	4d2b      	ldr	r5, [pc, #172]	; (2c28 <z_init_static_threads+0xb8>)
    2b7a:	46c8      	mov	r8, r9
{
    2b7c:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    2b7e:	454d      	cmp	r5, r9
    2b80:	f105 0430 	add.w	r4, r5, #48	; 0x30
    2b84:	d30d      	bcc.n	2ba2 <z_init_static_threads+0x32>
	k_sched_lock();
    2b86:	f7ff fcbf 	bl	2508 <k_sched_lock>
			return (u32_t)((t * to_hz + off) / from_hz);
    2b8a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
	_FOREACH_STATIC_THREAD(thread_data) {
    2b8e:	4c26      	ldr	r4, [pc, #152]	; (2c28 <z_init_static_threads+0xb8>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    2b90:	f8df a09c 	ldr.w	sl, [pc, #156]	; 2c30 <z_init_static_threads+0xc0>
    2b94:	4544      	cmp	r4, r8
    2b96:	d321      	bcc.n	2bdc <z_init_static_threads+0x6c>
}
    2b98:	b007      	add	sp, #28
    2b9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    2b9e:	f7ff bd01 	b.w	25a4 <k_sched_unlock>
		z_setup_new_thread(
    2ba2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2ba6:	9305      	str	r3, [sp, #20]
    2ba8:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2bac:	9304      	str	r3, [sp, #16]
    2bae:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2bb2:	9303      	str	r3, [sp, #12]
    2bb4:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2bb8:	9302      	str	r3, [sp, #8]
    2bba:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2bbe:	9301      	str	r3, [sp, #4]
    2bc0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2bc4:	9300      	str	r3, [sp, #0]
    2bc6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2bca:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2bce:	f7ff ffa9 	bl	2b24 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2bd2:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2bd6:	655d      	str	r5, [r3, #84]	; 0x54
    2bd8:	4625      	mov	r5, r4
    2bda:	e7d0      	b.n	2b7e <z_init_static_threads+0xe>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    2bdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    2bde:	1c4b      	adds	r3, r1, #1
    2be0:	d017      	beq.n	2c12 <z_init_static_threads+0xa2>
    2be2:	f240 3be7 	movw	fp, #999	; 0x3e7
    2be6:	f04f 0c00 	mov.w	ip, #0
					    K_MSEC(thread_data->init_delay));
    2bea:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    2bee:	fbc9 bc01 	smlal	fp, ip, r9, r1
    2bf2:	2300      	movs	r3, #0
    2bf4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2bf8:	4658      	mov	r0, fp
    2bfa:	4661      	mov	r1, ip
    2bfc:	f7fd fb1e 	bl	23c <__aeabi_uldivmod>
    2c00:	2700      	movs	r7, #0
    2c02:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2c04:	ea56 0307 	orrs.w	r3, r6, r7
			schedule_new_thread(thread_data->init_thread,
    2c08:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2c0a:	d104      	bne.n	2c16 <z_init_static_threads+0xa6>
	z_sched_start(thread);
    2c0c:	4628      	mov	r0, r5
    2c0e:	f7ff fd19 	bl	2644 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    2c12:	3430      	adds	r4, #48	; 0x30
    2c14:	e7be      	b.n	2b94 <z_init_static_threads+0x24>
    2c16:	4602      	mov	r2, r0
    2c18:	463b      	mov	r3, r7
    2c1a:	4651      	mov	r1, sl
    2c1c:	f105 0018 	add.w	r0, r5, #24
    2c20:	f000 f842 	bl	2ca8 <z_add_timeout>
    2c24:	e7f5      	b.n	2c12 <z_init_static_threads+0xa2>
    2c26:	bf00      	nop
    2c28:	200000e4 	.word	0x200000e4
    2c2c:	200000e4 	.word	0x200000e4
    2c30:	000043cd 	.word	0x000043cd

00002c34 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    2c34:	4b03      	ldr	r3, [pc, #12]	; (2c44 <elapsed+0x10>)
    2c36:	681b      	ldr	r3, [r3, #0]
    2c38:	b90b      	cbnz	r3, 2c3e <elapsed+0xa>
    2c3a:	f7fe b803 	b.w	c44 <z_clock_elapsed>
}
    2c3e:	2000      	movs	r0, #0
    2c40:	4770      	bx	lr
    2c42:	bf00      	nop
    2c44:	200007c4 	.word	0x200007c4

00002c48 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2c48:	6803      	ldr	r3, [r0, #0]
    2c4a:	b140      	cbz	r0, 2c5e <remove_timeout+0x16>
    2c4c:	4a07      	ldr	r2, [pc, #28]	; (2c6c <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    2c4e:	6852      	ldr	r2, [r2, #4]
    2c50:	4290      	cmp	r0, r2
    2c52:	d004      	beq.n	2c5e <remove_timeout+0x16>
	if (next(t) != NULL) {
    2c54:	b11b      	cbz	r3, 2c5e <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    2c56:	689a      	ldr	r2, [r3, #8]
    2c58:	6881      	ldr	r1, [r0, #8]
    2c5a:	440a      	add	r2, r1
    2c5c:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    2c5e:	6842      	ldr	r2, [r0, #4]
    2c60:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    2c62:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    2c64:	2300      	movs	r3, #0
	node->prev = NULL;
    2c66:	e9c0 3300 	strd	r3, r3, [r0]
}
    2c6a:	4770      	bx	lr
    2c6c:	2000004c 	.word	0x2000004c

00002c70 <next_timeout>:
	return list->head == list;
    2c70:	4b0b      	ldr	r3, [pc, #44]	; (2ca0 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    2c72:	b510      	push	{r4, lr}
    2c74:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2c76:	429c      	cmp	r4, r3
    2c78:	bf08      	it	eq
    2c7a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    2c7c:	f7ff ffda 	bl	2c34 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2c80:	b154      	cbz	r4, 2c98 <next_timeout+0x28>
    2c82:	68a3      	ldr	r3, [r4, #8]
    2c84:	1a18      	subs	r0, r3, r0
    2c86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    2c8a:	4b06      	ldr	r3, [pc, #24]	; (2ca4 <next_timeout+0x34>)
    2c8c:	691b      	ldr	r3, [r3, #16]
    2c8e:	b113      	cbz	r3, 2c96 <next_timeout+0x26>
    2c90:	4298      	cmp	r0, r3
    2c92:	bfa8      	it	ge
    2c94:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    2c96:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    2c98:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    2c9c:	e7f5      	b.n	2c8a <next_timeout+0x1a>
    2c9e:	bf00      	nop
    2ca0:	2000004c 	.word	0x2000004c
    2ca4:	20000788 	.word	0x20000788

00002ca8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    2ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cac:	9101      	str	r1, [sp, #4]
    2cae:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2cb0:	1c4b      	adds	r3, r1, #1
    2cb2:	bf08      	it	eq
    2cb4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    2cb8:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2cba:	d061      	beq.n	2d80 <z_add_timeout+0xd8>
#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    2cbc:	f06f 0301 	mvn.w	r3, #1
    2cc0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
	k_ticks_t ticks = timeout.ticks + 1;
    2cc4:	1c54      	adds	r4, r2, #1
    2cc6:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    2cca:	ebb3 0804 	subs.w	r8, r3, r4
    2cce:	eb6b 0905 	sbc.w	r9, fp, r5
    2cd2:	f1b8 0f00 	cmp.w	r8, #0
    2cd6:	f179 0300 	sbcs.w	r3, r9, #0
    2cda:	db0f      	blt.n	2cfc <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    2cdc:	f7ff ffaa 	bl	2c34 <elapsed>
    2ce0:	f06f 0301 	mvn.w	r3, #1
    2ce4:	4a2b      	ldr	r2, [pc, #172]	; (2d94 <z_add_timeout+0xec>)
    2ce6:	e9d2 1c00 	ldrd	r1, ip, [r2]
    2cea:	1a5b      	subs	r3, r3, r1
    2cec:	eb6b 020c 	sbc.w	r2, fp, ip
    2cf0:	1b1e      	subs	r6, r3, r4
    2cf2:	eb62 0705 	sbc.w	r7, r2, r5
    2cf6:	1a34      	subs	r4, r6, r0
    2cf8:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    2cfc:	9b01      	ldr	r3, [sp, #4]
    2cfe:	f8ca 300c 	str.w	r3, [sl, #12]
    2d02:	f04f 0320 	mov.w	r3, #32
    2d06:	f3ef 8611 	mrs	r6, BASEPRI
    2d0a:	f383 8811 	msr	BASEPRI, r3
    2d0e:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    2d12:	f7ff ff8f 	bl	2c34 <elapsed>
	ticks = MAX(1, ticks);
    2d16:	2c01      	cmp	r4, #1
    2d18:	f175 0300 	sbcs.w	r3, r5, #0
    2d1c:	bfb8      	it	lt
    2d1e:	2401      	movlt	r4, #1
	return list->head == list;
    2d20:	4b1d      	ldr	r3, [pc, #116]	; (2d98 <z_add_timeout+0xf0>)
		to->dticks = ticks + elapsed();
    2d22:	4420      	add	r0, r4
    2d24:	681a      	ldr	r2, [r3, #0]
    2d26:	f8ca 0008 	str.w	r0, [sl, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2d2a:	429a      	cmp	r2, r3
    2d2c:	d001      	beq.n	2d32 <z_add_timeout+0x8a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2d2e:	685c      	ldr	r4, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    2d30:	b952      	cbnz	r2, 2d48 <z_add_timeout+0xa0>
	node->prev = list->tail;
    2d32:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    2d34:	f8ca 3000 	str.w	r3, [sl]
	node->prev = list->tail;
    2d38:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    2d3c:	685a      	ldr	r2, [r3, #4]
    2d3e:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    2d42:	f8c3 a004 	str.w	sl, [r3, #4]
}
    2d46:	e00d      	b.n	2d64 <z_add_timeout+0xbc>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    2d48:	6890      	ldr	r0, [r2, #8]
    2d4a:	f8da 1008 	ldr.w	r1, [sl, #8]
    2d4e:	4288      	cmp	r0, r1
    2d50:	dd19      	ble.n	2d86 <z_add_timeout+0xde>
				t->dticks -= to->dticks;
    2d52:	1a41      	subs	r1, r0, r1
    2d54:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    2d56:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2d58:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    2d5c:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    2d60:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    2d64:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2d66:	429a      	cmp	r2, r3
    2d68:	d006      	beq.n	2d78 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    2d6a:	4592      	cmp	sl, r2
    2d6c:	d104      	bne.n	2d78 <z_add_timeout+0xd0>
			z_clock_set_timeout(next_timeout(), false);
    2d6e:	f7ff ff7f 	bl	2c70 <next_timeout>
    2d72:	2100      	movs	r1, #0
    2d74:	f7fd ff02 	bl	b7c <z_clock_set_timeout>
	__asm__ volatile(
    2d78:	f386 8811 	msr	BASEPRI, r6
    2d7c:	f3bf 8f6f 	isb	sy
		}
	}
}
    2d80:	b003      	add	sp, #12
    2d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    2d86:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    2d88:	4294      	cmp	r4, r2
    2d8a:	f8ca 1008 	str.w	r1, [sl, #8]
    2d8e:	d0d0      	beq.n	2d32 <z_add_timeout+0x8a>
    2d90:	6812      	ldr	r2, [r2, #0]
    2d92:	e7cd      	b.n	2d30 <z_add_timeout+0x88>
    2d94:	20000148 	.word	0x20000148
    2d98:	2000004c 	.word	0x2000004c

00002d9c <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    2d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2da0:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    2da2:	f7ff fcb3 	bl	270c <z_time_slice>
	__asm__ volatile(
    2da6:	f04f 0320 	mov.w	r3, #32
    2daa:	f3ef 8411 	mrs	r4, BASEPRI
    2dae:	f383 8811 	msr	BASEPRI, r3
    2db2:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    2db6:	f8df 8084 	ldr.w	r8, [pc, #132]	; 2e3c <z_clock_announce+0xa0>
    2dba:	4d1f      	ldr	r5, [pc, #124]	; (2e38 <z_clock_announce+0x9c>)
    2dbc:	46c1      	mov	r9, r8
	return list->head == list;
    2dbe:	f8df a080 	ldr.w	sl, [pc, #128]	; 2e40 <z_clock_announce+0xa4>
    2dc2:	602e      	str	r6, [r5, #0]
    2dc4:	f8da 0000 	ldr.w	r0, [sl]
    2dc8:	682a      	ldr	r2, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2dca:	4550      	cmp	r0, sl
    2dcc:	e9d8 6700 	ldrd	r6, r7, [r8]
    2dd0:	d005      	beq.n	2dde <z_clock_announce+0x42>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    2dd2:	b120      	cbz	r0, 2dde <z_clock_announce+0x42>
    2dd4:	6883      	ldr	r3, [r0, #8]
    2dd6:	4293      	cmp	r3, r2
    2dd8:	dd13      	ble.n	2e02 <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    2dda:	1a9b      	subs	r3, r3, r2
    2ddc:	6083      	str	r3, [r0, #8]
	}

	curr_tick += announce_remaining;
    2dde:	18b6      	adds	r6, r6, r2
    2de0:	eb47 77e2 	adc.w	r7, r7, r2, asr #31
    2de4:	e9c9 6700 	strd	r6, r7, [r9]
	announce_remaining = 0;
    2de8:	2600      	movs	r6, #0
    2dea:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    2dec:	f7ff ff40 	bl	2c70 <next_timeout>
    2df0:	4631      	mov	r1, r6
    2df2:	f7fd fec3 	bl	b7c <z_clock_set_timeout>
	__asm__ volatile(
    2df6:	f384 8811 	msr	BASEPRI, r4
    2dfa:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    2dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_tick += dt;
    2e02:	18f6      	adds	r6, r6, r3
    2e04:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
		announce_remaining -= dt;
    2e08:	1ad3      	subs	r3, r2, r3
    2e0a:	602b      	str	r3, [r5, #0]
		t->dticks = 0;
    2e0c:	2300      	movs	r3, #0
    2e0e:	6083      	str	r3, [r0, #8]
		curr_tick += dt;
    2e10:	e9c8 6700 	strd	r6, r7, [r8]
		remove_timeout(t);
    2e14:	f7ff ff18 	bl	2c48 <remove_timeout>
    2e18:	f384 8811 	msr	BASEPRI, r4
    2e1c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    2e20:	68c3      	ldr	r3, [r0, #12]
    2e22:	4798      	blx	r3
	__asm__ volatile(
    2e24:	f04f 0320 	mov.w	r3, #32
    2e28:	f3ef 8411 	mrs	r4, BASEPRI
    2e2c:	f383 8811 	msr	BASEPRI, r3
    2e30:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    2e34:	e7c6      	b.n	2dc4 <z_clock_announce+0x28>
    2e36:	bf00      	nop
    2e38:	200007c4 	.word	0x200007c4
    2e3c:	20000148 	.word	0x20000148
    2e40:	2000004c 	.word	0x2000004c

00002e44 <z_tick_get>:

s64_t z_tick_get(void)
{
    2e44:	b510      	push	{r4, lr}
    2e46:	f04f 0320 	mov.w	r3, #32
    2e4a:	f3ef 8411 	mrs	r4, BASEPRI
    2e4e:	f383 8811 	msr	BASEPRI, r3
    2e52:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    2e56:	f7fd fef5 	bl	c44 <z_clock_elapsed>
    2e5a:	4b06      	ldr	r3, [pc, #24]	; (2e74 <z_tick_get+0x30>)
    2e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e60:	1812      	adds	r2, r2, r0
    2e62:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    2e66:	f384 8811 	msr	BASEPRI, r4
    2e6a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    2e6e:	4610      	mov	r0, r2
    2e70:	4619      	mov	r1, r3
    2e72:	bd10      	pop	{r4, pc}
    2e74:	20000148 	.word	0x20000148

00002e78 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
    2e78:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    2e7a:	4c06      	ldr	r4, [pc, #24]	; (2e94 <statics_init+0x1c>)
    2e7c:	4d06      	ldr	r5, [pc, #24]	; (2e98 <statics_init+0x20>)
    2e7e:	42ac      	cmp	r4, r5
    2e80:	d301      	bcc.n	2e86 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    2e82:	2000      	movs	r0, #0
    2e84:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    2e86:	4620      	mov	r0, r4
    2e88:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    2e8c:	f001 fb7e 	bl	458c <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    2e90:	3414      	adds	r4, #20
    2e92:	e7f4      	b.n	2e7e <statics_init+0x6>
    2e94:	200000e4 	.word	0x200000e4
    2e98:	200000e4 	.word	0x200000e4

00002e9c <CC_PalMemCopyPlat>:
    2e9c:	f001 b945 	b.w	412a <memmove>

00002ea0 <CC_PalMemSetZeroPlat>:
    2ea0:	460a      	mov	r2, r1
    2ea2:	2100      	movs	r1, #0
    2ea4:	f001 b983 	b.w	41ae <memset>

00002ea8 <CC_PalInit>:
    2ea8:	b510      	push	{r4, lr}
    2eaa:	4811      	ldr	r0, [pc, #68]	; (2ef0 <CC_PalInit+0x48>)
    2eac:	f000 f848 	bl	2f40 <CC_PalMutexCreate>
    2eb0:	b100      	cbz	r0, 2eb4 <CC_PalInit+0xc>
    2eb2:	bd10      	pop	{r4, pc}
    2eb4:	480f      	ldr	r0, [pc, #60]	; (2ef4 <CC_PalInit+0x4c>)
    2eb6:	f000 f843 	bl	2f40 <CC_PalMutexCreate>
    2eba:	2800      	cmp	r0, #0
    2ebc:	d1f9      	bne.n	2eb2 <CC_PalInit+0xa>
    2ebe:	4c0e      	ldr	r4, [pc, #56]	; (2ef8 <CC_PalInit+0x50>)
    2ec0:	4620      	mov	r0, r4
    2ec2:	f000 f83d 	bl	2f40 <CC_PalMutexCreate>
    2ec6:	2800      	cmp	r0, #0
    2ec8:	d1f3      	bne.n	2eb2 <CC_PalInit+0xa>
    2eca:	4b0c      	ldr	r3, [pc, #48]	; (2efc <CC_PalInit+0x54>)
    2ecc:	480c      	ldr	r0, [pc, #48]	; (2f00 <CC_PalInit+0x58>)
    2ece:	601c      	str	r4, [r3, #0]
    2ed0:	f000 f836 	bl	2f40 <CC_PalMutexCreate>
    2ed4:	4601      	mov	r1, r0
    2ed6:	2800      	cmp	r0, #0
    2ed8:	d1eb      	bne.n	2eb2 <CC_PalInit+0xa>
    2eda:	f000 f82d 	bl	2f38 <CC_PalDmaInit>
    2ede:	4604      	mov	r4, r0
    2ee0:	b108      	cbz	r0, 2ee6 <CC_PalInit+0x3e>
    2ee2:	4620      	mov	r0, r4
    2ee4:	bd10      	pop	{r4, pc}
    2ee6:	f000 f851 	bl	2f8c <CC_PalPowerSaveModeInit>
    2eea:	4620      	mov	r0, r4
    2eec:	e7fa      	b.n	2ee4 <CC_PalInit+0x3c>
    2eee:	bf00      	nop
    2ef0:	20000060 	.word	0x20000060
    2ef4:	20000054 	.word	0x20000054
    2ef8:	2000005c 	.word	0x2000005c
    2efc:	20000064 	.word	0x20000064
    2f00:	20000058 	.word	0x20000058

00002f04 <CC_PalTerminate>:
    2f04:	b508      	push	{r3, lr}
    2f06:	4808      	ldr	r0, [pc, #32]	; (2f28 <CC_PalTerminate+0x24>)
    2f08:	f000 f824 	bl	2f54 <CC_PalMutexDestroy>
    2f0c:	4807      	ldr	r0, [pc, #28]	; (2f2c <CC_PalTerminate+0x28>)
    2f0e:	f000 f821 	bl	2f54 <CC_PalMutexDestroy>
    2f12:	4807      	ldr	r0, [pc, #28]	; (2f30 <CC_PalTerminate+0x2c>)
    2f14:	f000 f81e 	bl	2f54 <CC_PalMutexDestroy>
    2f18:	4806      	ldr	r0, [pc, #24]	; (2f34 <CC_PalTerminate+0x30>)
    2f1a:	f000 f81b 	bl	2f54 <CC_PalMutexDestroy>
    2f1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2f22:	f000 b80b 	b.w	2f3c <CC_PalDmaTerminate>
    2f26:	bf00      	nop
    2f28:	20000060 	.word	0x20000060
    2f2c:	20000054 	.word	0x20000054
    2f30:	2000005c 	.word	0x2000005c
    2f34:	20000058 	.word	0x20000058

00002f38 <CC_PalDmaInit>:
    2f38:	2000      	movs	r0, #0
    2f3a:	4770      	bx	lr

00002f3c <CC_PalDmaTerminate>:
    2f3c:	4770      	bx	lr
    2f3e:	bf00      	nop

00002f40 <CC_PalMutexCreate>:
    2f40:	b508      	push	{r3, lr}
    2f42:	4b03      	ldr	r3, [pc, #12]	; (2f50 <CC_PalMutexCreate+0x10>)
    2f44:	6802      	ldr	r2, [r0, #0]
    2f46:	681b      	ldr	r3, [r3, #0]
    2f48:	6810      	ldr	r0, [r2, #0]
    2f4a:	4798      	blx	r3
    2f4c:	2000      	movs	r0, #0
    2f4e:	bd08      	pop	{r3, pc}
    2f50:	20000070 	.word	0x20000070

00002f54 <CC_PalMutexDestroy>:
    2f54:	b508      	push	{r3, lr}
    2f56:	4b03      	ldr	r3, [pc, #12]	; (2f64 <CC_PalMutexDestroy+0x10>)
    2f58:	6802      	ldr	r2, [r0, #0]
    2f5a:	685b      	ldr	r3, [r3, #4]
    2f5c:	6810      	ldr	r0, [r2, #0]
    2f5e:	4798      	blx	r3
    2f60:	2000      	movs	r0, #0
    2f62:	bd08      	pop	{r3, pc}
    2f64:	20000070 	.word	0x20000070

00002f68 <CC_PalMutexLock>:
    2f68:	6802      	ldr	r2, [r0, #0]
    2f6a:	4b02      	ldr	r3, [pc, #8]	; (2f74 <CC_PalMutexLock+0xc>)
    2f6c:	6810      	ldr	r0, [r2, #0]
    2f6e:	689b      	ldr	r3, [r3, #8]
    2f70:	4718      	bx	r3
    2f72:	bf00      	nop
    2f74:	20000070 	.word	0x20000070

00002f78 <CC_PalMutexUnlock>:
    2f78:	b508      	push	{r3, lr}
    2f7a:	4b03      	ldr	r3, [pc, #12]	; (2f88 <CC_PalMutexUnlock+0x10>)
    2f7c:	6802      	ldr	r2, [r0, #0]
    2f7e:	68db      	ldr	r3, [r3, #12]
    2f80:	6810      	ldr	r0, [r2, #0]
    2f82:	4798      	blx	r3
    2f84:	2000      	movs	r0, #0
    2f86:	bd08      	pop	{r3, pc}
    2f88:	20000070 	.word	0x20000070

00002f8c <CC_PalPowerSaveModeInit>:
    2f8c:	b570      	push	{r4, r5, r6, lr}
    2f8e:	4c09      	ldr	r4, [pc, #36]	; (2fb4 <CC_PalPowerSaveModeInit+0x28>)
    2f90:	4d09      	ldr	r5, [pc, #36]	; (2fb8 <CC_PalPowerSaveModeInit+0x2c>)
    2f92:	6920      	ldr	r0, [r4, #16]
    2f94:	68ab      	ldr	r3, [r5, #8]
    2f96:	4798      	blx	r3
    2f98:	b118      	cbz	r0, 2fa2 <CC_PalPowerSaveModeInit+0x16>
    2f9a:	4b08      	ldr	r3, [pc, #32]	; (2fbc <CC_PalPowerSaveModeInit+0x30>)
    2f9c:	4808      	ldr	r0, [pc, #32]	; (2fc0 <CC_PalPowerSaveModeInit+0x34>)
    2f9e:	685b      	ldr	r3, [r3, #4]
    2fa0:	4798      	blx	r3
    2fa2:	2100      	movs	r1, #0
    2fa4:	4a07      	ldr	r2, [pc, #28]	; (2fc4 <CC_PalPowerSaveModeInit+0x38>)
    2fa6:	68eb      	ldr	r3, [r5, #12]
    2fa8:	6011      	str	r1, [r2, #0]
    2faa:	6920      	ldr	r0, [r4, #16]
    2fac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2fb0:	4718      	bx	r3
    2fb2:	bf00      	nop
    2fb4:	20000080 	.word	0x20000080
    2fb8:	20000070 	.word	0x20000070
    2fbc:	20000068 	.word	0x20000068
    2fc0:	000049f0 	.word	0x000049f0
    2fc4:	200007c8 	.word	0x200007c8

00002fc8 <CC_PalPowerSaveModeSelect>:
    2fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fca:	4c1a      	ldr	r4, [pc, #104]	; (3034 <CC_PalPowerSaveModeSelect+0x6c>)
    2fcc:	4d1a      	ldr	r5, [pc, #104]	; (3038 <CC_PalPowerSaveModeSelect+0x70>)
    2fce:	4607      	mov	r7, r0
    2fd0:	68ab      	ldr	r3, [r5, #8]
    2fd2:	6920      	ldr	r0, [r4, #16]
    2fd4:	4798      	blx	r3
    2fd6:	b9e8      	cbnz	r0, 3014 <CC_PalPowerSaveModeSelect+0x4c>
    2fd8:	4e18      	ldr	r6, [pc, #96]	; (303c <CC_PalPowerSaveModeSelect+0x74>)
    2fda:	6833      	ldr	r3, [r6, #0]
    2fdc:	b97f      	cbnz	r7, 2ffe <CC_PalPowerSaveModeSelect+0x36>
    2fde:	b93b      	cbnz	r3, 2ff0 <CC_PalPowerSaveModeSelect+0x28>
    2fe0:	2001      	movs	r0, #1
    2fe2:	4a17      	ldr	r2, [pc, #92]	; (3040 <CC_PalPowerSaveModeSelect+0x78>)
    2fe4:	4917      	ldr	r1, [pc, #92]	; (3044 <CC_PalPowerSaveModeSelect+0x7c>)
    2fe6:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    2fea:	680a      	ldr	r2, [r1, #0]
    2fec:	2a00      	cmp	r2, #0
    2fee:	d1fc      	bne.n	2fea <CC_PalPowerSaveModeSelect+0x22>
    2ff0:	3301      	adds	r3, #1
    2ff2:	6033      	str	r3, [r6, #0]
    2ff4:	68eb      	ldr	r3, [r5, #12]
    2ff6:	6920      	ldr	r0, [r4, #16]
    2ff8:	4798      	blx	r3
    2ffa:	2000      	movs	r0, #0
    2ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2ffe:	2b00      	cmp	r3, #0
    3000:	d0f8      	beq.n	2ff4 <CC_PalPowerSaveModeSelect+0x2c>
    3002:	2b01      	cmp	r3, #1
    3004:	d008      	beq.n	3018 <CC_PalPowerSaveModeSelect+0x50>
    3006:	3b01      	subs	r3, #1
    3008:	6033      	str	r3, [r6, #0]
    300a:	6920      	ldr	r0, [r4, #16]
    300c:	68eb      	ldr	r3, [r5, #12]
    300e:	4798      	blx	r3
    3010:	2000      	movs	r0, #0
    3012:	e7f3      	b.n	2ffc <CC_PalPowerSaveModeSelect+0x34>
    3014:	480c      	ldr	r0, [pc, #48]	; (3048 <CC_PalPowerSaveModeSelect+0x80>)
    3016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3018:	4a0a      	ldr	r2, [pc, #40]	; (3044 <CC_PalPowerSaveModeSelect+0x7c>)
    301a:	6813      	ldr	r3, [r2, #0]
    301c:	2b00      	cmp	r3, #0
    301e:	d1fc      	bne.n	301a <CC_PalPowerSaveModeSelect+0x52>
    3020:	4a07      	ldr	r2, [pc, #28]	; (3040 <CC_PalPowerSaveModeSelect+0x78>)
    3022:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    3026:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    302a:	f000 f821 	bl	3070 <CC_HalMaskInterrupt>
    302e:	6833      	ldr	r3, [r6, #0]
    3030:	e7e9      	b.n	3006 <CC_PalPowerSaveModeSelect+0x3e>
    3032:	bf00      	nop
    3034:	20000080 	.word	0x20000080
    3038:	20000070 	.word	0x20000070
    303c:	200007c8 	.word	0x200007c8
    3040:	50840000 	.word	0x50840000
    3044:	50841910 	.word	0x50841910
    3048:	ffff8fe9 	.word	0xffff8fe9

0000304c <CC_HalInit>:
    304c:	2000      	movs	r0, #0
    304e:	4770      	bx	lr

00003050 <CC_HalTerminate>:
    3050:	2000      	movs	r0, #0
    3052:	4770      	bx	lr

00003054 <CC_HalClearInterruptBit>:
    3054:	0543      	lsls	r3, r0, #21
    3056:	d503      	bpl.n	3060 <CC_HalClearInterruptBit+0xc>
    3058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    305c:	4b02      	ldr	r3, [pc, #8]	; (3068 <CC_HalClearInterruptBit+0x14>)
    305e:	601a      	str	r2, [r3, #0]
    3060:	4b02      	ldr	r3, [pc, #8]	; (306c <CC_HalClearInterruptBit+0x18>)
    3062:	6018      	str	r0, [r3, #0]
    3064:	4770      	bx	lr
    3066:	bf00      	nop
    3068:	50841108 	.word	0x50841108
    306c:	50841a08 	.word	0x50841a08

00003070 <CC_HalMaskInterrupt>:
    3070:	4b01      	ldr	r3, [pc, #4]	; (3078 <CC_HalMaskInterrupt+0x8>)
    3072:	6018      	str	r0, [r3, #0]
    3074:	4770      	bx	lr
    3076:	bf00      	nop
    3078:	50841a04 	.word	0x50841a04

0000307c <CC_HalWaitInterruptRND>:
    307c:	b108      	cbz	r0, 3082 <CC_HalWaitInterruptRND+0x6>
    307e:	f000 b803 	b.w	3088 <CC_PalWaitInterruptRND>
    3082:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
    3086:	4770      	bx	lr

00003088 <CC_PalWaitInterruptRND>:
    3088:	4602      	mov	r2, r0
    308a:	4807      	ldr	r0, [pc, #28]	; (30a8 <CC_PalWaitInterruptRND+0x20>)
    308c:	6803      	ldr	r3, [r0, #0]
    308e:	4213      	tst	r3, r2
    3090:	d0fc      	beq.n	308c <CC_PalWaitInterruptRND+0x4>
    3092:	b121      	cbz	r1, 309e <CC_PalWaitInterruptRND+0x16>
    3094:	4b05      	ldr	r3, [pc, #20]	; (30ac <CC_PalWaitInterruptRND+0x24>)
    3096:	4806      	ldr	r0, [pc, #24]	; (30b0 <CC_PalWaitInterruptRND+0x28>)
    3098:	681b      	ldr	r3, [r3, #0]
    309a:	600b      	str	r3, [r1, #0]
    309c:	6003      	str	r3, [r0, #0]
    309e:	4b05      	ldr	r3, [pc, #20]	; (30b4 <CC_PalWaitInterruptRND+0x2c>)
    30a0:	2000      	movs	r0, #0
    30a2:	601a      	str	r2, [r3, #0]
    30a4:	4770      	bx	lr
    30a6:	bf00      	nop
    30a8:	50841a00 	.word	0x50841a00
    30ac:	50841104 	.word	0x50841104
    30b0:	50841108 	.word	0x50841108
    30b4:	50841a08 	.word	0x50841a08

000030b8 <mbedtls_platform_setup>:
    30b8:	f000 b8a0 	b.w	31fc <nrf_cc310_platform_init>

000030bc <mbedtls_platform_zeroize>:
    30bc:	b130      	cbz	r0, 30cc <mbedtls_platform_zeroize+0x10>
    30be:	b129      	cbz	r1, 30cc <mbedtls_platform_zeroize+0x10>
    30c0:	2300      	movs	r3, #0
    30c2:	4401      	add	r1, r0
    30c4:	7003      	strb	r3, [r0, #0]
    30c6:	3001      	adds	r0, #1
    30c8:	4281      	cmp	r1, r0
    30ca:	d1fb      	bne.n	30c4 <mbedtls_platform_zeroize+0x8>
    30cc:	4770      	bx	lr
    30ce:	bf00      	nop

000030d0 <mbedtls_hardware_poll>:
    30d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30d4:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
    30d8:	460f      	mov	r7, r1
    30da:	9205      	str	r2, [sp, #20]
    30dc:	2100      	movs	r1, #0
    30de:	4614      	mov	r4, r2
    30e0:	a812      	add	r0, sp, #72	; 0x48
    30e2:	f44f 7208 	mov.w	r2, #544	; 0x220
    30e6:	461e      	mov	r6, r3
    30e8:	f001 f861 	bl	41ae <memset>
    30ec:	2300      	movs	r3, #0
    30ee:	a808      	add	r0, sp, #32
    30f0:	4619      	mov	r1, r3
    30f2:	2228      	movs	r2, #40	; 0x28
    30f4:	9306      	str	r3, [sp, #24]
    30f6:	f001 f85a 	bl	41ae <memset>
    30fa:	2f00      	cmp	r7, #0
    30fc:	d03c      	beq.n	3178 <mbedtls_hardware_poll+0xa8>
    30fe:	2e00      	cmp	r6, #0
    3100:	d03a      	beq.n	3178 <mbedtls_hardware_poll+0xa8>
    3102:	2c00      	cmp	r4, #0
    3104:	d038      	beq.n	3178 <mbedtls_hardware_poll+0xa8>
    3106:	2104      	movs	r1, #4
    3108:	a806      	add	r0, sp, #24
    310a:	f7ff fec9 	bl	2ea0 <CC_PalMemSetZeroPlat>
    310e:	a808      	add	r0, sp, #32
    3110:	2128      	movs	r1, #40	; 0x28
    3112:	f7ff fec5 	bl	2ea0 <CC_PalMemSetZeroPlat>
    3116:	a808      	add	r0, sp, #32
    3118:	f000 f832 	bl	3180 <RNG_PLAT_SetUserRngParameters>
    311c:	b178      	cbz	r0, 313e <mbedtls_hardware_poll+0x6e>
    311e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    3122:	a812      	add	r0, sp, #72	; 0x48
    3124:	f44f 7108 	mov.w	r1, #544	; 0x220
    3128:	f7ff ffc8 	bl	30bc <mbedtls_platform_zeroize>
    312c:	a806      	add	r0, sp, #24
    312e:	2104      	movs	r1, #4
    3130:	f7ff ffc4 	bl	30bc <mbedtls_platform_zeroize>
    3134:	4628      	mov	r0, r5
    3136:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
    313a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    313e:	ab12      	add	r3, sp, #72	; 0x48
    3140:	f10d 081c 	add.w	r8, sp, #28
    3144:	9003      	str	r0, [sp, #12]
    3146:	e9cd 6301 	strd	r6, r3, [sp, #4]
    314a:	4602      	mov	r2, r0
    314c:	ab05      	add	r3, sp, #20
    314e:	a908      	add	r1, sp, #32
    3150:	f8cd 8000 	str.w	r8, [sp]
    3154:	a806      	add	r0, sp, #24
    3156:	f000 fce9 	bl	3b2c <LLF_RND_GetTrngSource>
    315a:	2800      	cmp	r0, #0
    315c:	d1df      	bne.n	311e <mbedtls_hardware_poll+0x4e>
    315e:	6833      	ldr	r3, [r6, #0]
    3160:	42a3      	cmp	r3, r4
    3162:	d3dc      	bcc.n	311e <mbedtls_hardware_poll+0x4e>
    3164:	f8d8 1000 	ldr.w	r1, [r8]
    3168:	4605      	mov	r5, r0
    316a:	3108      	adds	r1, #8
    316c:	4638      	mov	r0, r7
    316e:	4622      	mov	r2, r4
    3170:	f7ff fe94 	bl	2e9c <CC_PalMemCopyPlat>
    3174:	6034      	str	r4, [r6, #0]
    3176:	e7d4      	b.n	3122 <mbedtls_hardware_poll+0x52>
    3178:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    317c:	e7da      	b.n	3134 <mbedtls_hardware_poll+0x64>
    317e:	bf00      	nop

00003180 <RNG_PLAT_SetUserRngParameters>:
    3180:	231c      	movs	r3, #28
    3182:	b530      	push	{r4, r5, lr}
    3184:	b083      	sub	sp, #12
    3186:	a902      	add	r1, sp, #8
    3188:	f841 3d04 	str.w	r3, [r1, #-4]!
    318c:	4604      	mov	r4, r0
    318e:	f000 f9b1 	bl	34f4 <CC_PalTrngParamGet>
    3192:	4605      	mov	r5, r0
    3194:	b9d8      	cbnz	r0, 31ce <RNG_PLAT_SetUserRngParameters+0x4e>
    3196:	9b01      	ldr	r3, [sp, #4]
    3198:	2b1c      	cmp	r3, #28
    319a:	d11b      	bne.n	31d4 <RNG_PLAT_SetUserRngParameters+0x54>
    319c:	e9d4 3200 	ldrd	r3, r2, [r4]
    31a0:	2101      	movs	r1, #1
    31a2:	3300      	adds	r3, #0
    31a4:	61e1      	str	r1, [r4, #28]
    31a6:	bf18      	it	ne
    31a8:	2301      	movne	r3, #1
    31aa:	b10a      	cbz	r2, 31b0 <RNG_PLAT_SetUserRngParameters+0x30>
    31ac:	f043 0302 	orr.w	r3, r3, #2
    31b0:	68a2      	ldr	r2, [r4, #8]
    31b2:	b932      	cbnz	r2, 31c2 <RNG_PLAT_SetUserRngParameters+0x42>
    31b4:	68e2      	ldr	r2, [r4, #12]
    31b6:	b9aa      	cbnz	r2, 31e4 <RNG_PLAT_SetUserRngParameters+0x64>
    31b8:	e9c4 3208 	strd	r3, r2, [r4, #32]
    31bc:	b93b      	cbnz	r3, 31ce <RNG_PLAT_SetUserRngParameters+0x4e>
    31be:	4d0d      	ldr	r5, [pc, #52]	; (31f4 <RNG_PLAT_SetUserRngParameters+0x74>)
    31c0:	e009      	b.n	31d6 <RNG_PLAT_SetUserRngParameters+0x56>
    31c2:	68e2      	ldr	r2, [r4, #12]
    31c4:	f043 0304 	orr.w	r3, r3, #4
    31c8:	b962      	cbnz	r2, 31e4 <RNG_PLAT_SetUserRngParameters+0x64>
    31ca:	e9c4 3208 	strd	r3, r2, [r4, #32]
    31ce:	4628      	mov	r0, r5
    31d0:	b003      	add	sp, #12
    31d2:	bd30      	pop	{r4, r5, pc}
    31d4:	4d08      	ldr	r5, [pc, #32]	; (31f8 <RNG_PLAT_SetUserRngParameters+0x78>)
    31d6:	4620      	mov	r0, r4
    31d8:	211c      	movs	r1, #28
    31da:	f7ff fe61 	bl	2ea0 <CC_PalMemSetZeroPlat>
    31de:	4628      	mov	r0, r5
    31e0:	b003      	add	sp, #12
    31e2:	bd30      	pop	{r4, r5, pc}
    31e4:	2200      	movs	r2, #0
    31e6:	4628      	mov	r0, r5
    31e8:	f043 0308 	orr.w	r3, r3, #8
    31ec:	e9c4 3208 	strd	r3, r2, [r4, #32]
    31f0:	b003      	add	sp, #12
    31f2:	bd30      	pop	{r4, r5, pc}
    31f4:	00f00c0e 	.word	0x00f00c0e
    31f8:	00f00c37 	.word	0x00f00c37

000031fc <nrf_cc310_platform_init>:
    31fc:	b510      	push	{r4, lr}
    31fe:	4c0c      	ldr	r4, [pc, #48]	; (3230 <nrf_cc310_platform_init+0x34>)
    3200:	6823      	ldr	r3, [r4, #0]
    3202:	b113      	cbz	r3, 320a <nrf_cc310_platform_init+0xe>
    3204:	4b0b      	ldr	r3, [pc, #44]	; (3234 <nrf_cc310_platform_init+0x38>)
    3206:	681b      	ldr	r3, [r3, #0]
    3208:	b96b      	cbnz	r3, 3226 <nrf_cc310_platform_init+0x2a>
    320a:	f000 f931 	bl	3470 <CC_LibInit>
    320e:	b138      	cbz	r0, 3220 <nrf_cc310_platform_init+0x24>
    3210:	3801      	subs	r0, #1
    3212:	2806      	cmp	r0, #6
    3214:	bf96      	itet	ls
    3216:	4b08      	ldrls	r3, [pc, #32]	; (3238 <nrf_cc310_platform_init+0x3c>)
    3218:	4808      	ldrhi	r0, [pc, #32]	; (323c <nrf_cc310_platform_init+0x40>)
    321a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    321e:	bd10      	pop	{r4, pc}
    3220:	2201      	movs	r2, #1
    3222:	4b04      	ldr	r3, [pc, #16]	; (3234 <nrf_cc310_platform_init+0x38>)
    3224:	601a      	str	r2, [r3, #0]
    3226:	2301      	movs	r3, #1
    3228:	2000      	movs	r0, #0
    322a:	6023      	str	r3, [r4, #0]
    322c:	bd10      	pop	{r4, pc}
    322e:	bf00      	nop
    3230:	200007cc 	.word	0x200007cc
    3234:	200007d0 	.word	0x200007d0
    3238:	00004a10 	.word	0x00004a10
    323c:	ffff8ffe 	.word	0xffff8ffe

00003240 <nrf_cc310_platform_init_no_rng>:
    3240:	b510      	push	{r4, lr}
    3242:	4c09      	ldr	r4, [pc, #36]	; (3268 <nrf_cc310_platform_init_no_rng+0x28>)
    3244:	6823      	ldr	r3, [r4, #0]
    3246:	b11b      	cbz	r3, 3250 <nrf_cc310_platform_init_no_rng+0x10>
    3248:	2301      	movs	r3, #1
    324a:	2000      	movs	r0, #0
    324c:	6023      	str	r3, [r4, #0]
    324e:	bd10      	pop	{r4, pc}
    3250:	f000 f87c 	bl	334c <CC_LibInitNoRng>
    3254:	2800      	cmp	r0, #0
    3256:	d0f7      	beq.n	3248 <nrf_cc310_platform_init_no_rng+0x8>
    3258:	3801      	subs	r0, #1
    325a:	2806      	cmp	r0, #6
    325c:	bf96      	itet	ls
    325e:	4b03      	ldrls	r3, [pc, #12]	; (326c <nrf_cc310_platform_init_no_rng+0x2c>)
    3260:	4803      	ldrhi	r0, [pc, #12]	; (3270 <nrf_cc310_platform_init_no_rng+0x30>)
    3262:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
    3266:	bd10      	pop	{r4, pc}
    3268:	200007cc 	.word	0x200007cc
    326c:	00004a10 	.word	0x00004a10
    3270:	ffff8ffe 	.word	0xffff8ffe

00003274 <nrf_cc310_platform_abort>:
    3274:	f3bf 8f4f 	dsb	sy
    3278:	4905      	ldr	r1, [pc, #20]	; (3290 <nrf_cc310_platform_abort+0x1c>)
    327a:	4b06      	ldr	r3, [pc, #24]	; (3294 <nrf_cc310_platform_abort+0x20>)
    327c:	68ca      	ldr	r2, [r1, #12]
    327e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3282:	4313      	orrs	r3, r2
    3284:	60cb      	str	r3, [r1, #12]
    3286:	f3bf 8f4f 	dsb	sy
    328a:	bf00      	nop
    328c:	e7fd      	b.n	328a <nrf_cc310_platform_abort+0x16>
    328e:	bf00      	nop
    3290:	e000ed00 	.word	0xe000ed00
    3294:	05fa0004 	.word	0x05fa0004

00003298 <CC_PalAbort>:
    3298:	4b01      	ldr	r3, [pc, #4]	; (32a0 <CC_PalAbort+0x8>)
    329a:	685b      	ldr	r3, [r3, #4]
    329c:	4718      	bx	r3
    329e:	bf00      	nop
    32a0:	20000068 	.word	0x20000068

000032a4 <nrf_cc310_platform_set_abort>:
    32a4:	4b02      	ldr	r3, [pc, #8]	; (32b0 <nrf_cc310_platform_set_abort+0xc>)
    32a6:	e9d0 1200 	ldrd	r1, r2, [r0]
    32aa:	e9c3 1200 	strd	r1, r2, [r3]
    32ae:	4770      	bx	lr
    32b0:	20000068 	.word	0x20000068

000032b4 <mutex_free>:
    32b4:	4770      	bx	lr
    32b6:	bf00      	nop

000032b8 <mutex_unlock>:
    32b8:	b510      	push	{r4, lr}
    32ba:	4604      	mov	r4, r0
    32bc:	b120      	cbz	r0, 32c8 <mutex_unlock+0x10>
    32be:	f3bf 8f5f 	dmb	sy
    32c2:	2000      	movs	r0, #0
    32c4:	6020      	str	r0, [r4, #0]
    32c6:	bd10      	pop	{r4, pc}
    32c8:	4803      	ldr	r0, [pc, #12]	; (32d8 <mutex_unlock+0x20>)
    32ca:	f7ff ffe5 	bl	3298 <CC_PalAbort>
    32ce:	f3bf 8f5f 	dmb	sy
    32d2:	2000      	movs	r0, #0
    32d4:	6020      	str	r0, [r4, #0]
    32d6:	bd10      	pop	{r4, pc}
    32d8:	00004a50 	.word	0x00004a50

000032dc <mutex_init>:
    32dc:	b510      	push	{r4, lr}
    32de:	4604      	mov	r4, r0
    32e0:	b110      	cbz	r0, 32e8 <mutex_init+0xc>
    32e2:	2300      	movs	r3, #0
    32e4:	6023      	str	r3, [r4, #0]
    32e6:	bd10      	pop	{r4, pc}
    32e8:	4802      	ldr	r0, [pc, #8]	; (32f4 <mutex_init+0x18>)
    32ea:	f7ff ffd5 	bl	3298 <CC_PalAbort>
    32ee:	2300      	movs	r3, #0
    32f0:	6023      	str	r3, [r4, #0]
    32f2:	bd10      	pop	{r4, pc}
    32f4:	00004a2c 	.word	0x00004a2c

000032f8 <mutex_lock>:
    32f8:	b150      	cbz	r0, 3310 <mutex_lock+0x18>
    32fa:	2201      	movs	r2, #1
    32fc:	e8d0 3fef 	ldaex	r3, [r0]
    3300:	e8c0 2fe1 	stlex	r1, r2, [r0]
    3304:	2900      	cmp	r1, #0
    3306:	d1f9      	bne.n	32fc <mutex_lock+0x4>
    3308:	2b01      	cmp	r3, #1
    330a:	d0f7      	beq.n	32fc <mutex_lock+0x4>
    330c:	f3bf 8f5f 	dmb	sy
    3310:	2000      	movs	r0, #0
    3312:	4770      	bx	lr

00003314 <nrf_cc310_platform_set_mutexes>:
    3314:	b470      	push	{r4, r5, r6}
    3316:	4b0b      	ldr	r3, [pc, #44]	; (3344 <nrf_cc310_platform_set_mutexes+0x30>)
    3318:	6806      	ldr	r6, [r0, #0]
    331a:	68c2      	ldr	r2, [r0, #12]
    331c:	e9d0 5401 	ldrd	r5, r4, [r0, #4]
    3320:	e9c3 4202 	strd	r4, r2, [r3, #8]
    3324:	e9c3 6500 	strd	r6, r5, [r3]
    3328:	e9d1 0203 	ldrd	r0, r2, [r1, #12]
    332c:	680e      	ldr	r6, [r1, #0]
    332e:	4b06      	ldr	r3, [pc, #24]	; (3348 <nrf_cc310_platform_set_mutexes+0x34>)
    3330:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    3334:	e9c3 6500 	strd	r6, r5, [r3]
    3338:	e9c3 4002 	strd	r4, r0, [r3, #8]
    333c:	611a      	str	r2, [r3, #16]
    333e:	bc70      	pop	{r4, r5, r6}
    3340:	4770      	bx	lr
    3342:	bf00      	nop
    3344:	20000070 	.word	0x20000070
    3348:	20000080 	.word	0x20000080

0000334c <CC_LibInitNoRng>:
    334c:	b510      	push	{r4, lr}
    334e:	f7ff fe7d 	bl	304c <CC_HalInit>
    3352:	b970      	cbnz	r0, 3372 <CC_LibInitNoRng+0x26>
    3354:	f7ff fda8 	bl	2ea8 <CC_PalInit>
    3358:	b980      	cbnz	r0, 337c <CC_LibInitNoRng+0x30>
    335a:	f7ff fe35 	bl	2fc8 <CC_PalPowerSaveModeSelect>
    335e:	b980      	cbnz	r0, 3382 <CC_LibInitNoRng+0x36>
    3360:	4b11      	ldr	r3, [pc, #68]	; (33a8 <CC_LibInitNoRng+0x5c>)
    3362:	681b      	ldr	r3, [r3, #0]
    3364:	0e1b      	lsrs	r3, r3, #24
    3366:	2bf0      	cmp	r3, #240	; 0xf0
    3368:	d00d      	beq.n	3386 <CC_LibInitNoRng+0x3a>
    336a:	2406      	movs	r4, #6
    336c:	f7ff fe70 	bl	3050 <CC_HalTerminate>
    3370:	e000      	b.n	3374 <CC_LibInitNoRng+0x28>
    3372:	2403      	movs	r4, #3
    3374:	f7ff fdc6 	bl	2f04 <CC_PalTerminate>
    3378:	4620      	mov	r0, r4
    337a:	bd10      	pop	{r4, pc}
    337c:	2404      	movs	r4, #4
    337e:	4620      	mov	r0, r4
    3380:	bd10      	pop	{r4, pc}
    3382:	2400      	movs	r4, #0
    3384:	e7f2      	b.n	336c <CC_LibInitNoRng+0x20>
    3386:	4a09      	ldr	r2, [pc, #36]	; (33ac <CC_LibInitNoRng+0x60>)
    3388:	4b09      	ldr	r3, [pc, #36]	; (33b0 <CC_LibInitNoRng+0x64>)
    338a:	6812      	ldr	r2, [r2, #0]
    338c:	429a      	cmp	r2, r3
    338e:	d001      	beq.n	3394 <CC_LibInitNoRng+0x48>
    3390:	2407      	movs	r4, #7
    3392:	e7eb      	b.n	336c <CC_LibInitNoRng+0x20>
    3394:	2001      	movs	r0, #1
    3396:	f7ff fe17 	bl	2fc8 <CC_PalPowerSaveModeSelect>
    339a:	2800      	cmp	r0, #0
    339c:	d1f1      	bne.n	3382 <CC_LibInitNoRng+0x36>
    339e:	4b05      	ldr	r3, [pc, #20]	; (33b4 <CC_LibInitNoRng+0x68>)
    33a0:	4604      	mov	r4, r0
    33a2:	6018      	str	r0, [r3, #0]
    33a4:	e7e8      	b.n	3378 <CC_LibInitNoRng+0x2c>
    33a6:	bf00      	nop
    33a8:	50841928 	.word	0x50841928
    33ac:	50841a24 	.word	0x50841a24
    33b0:	20e00000 	.word	0x20e00000
    33b4:	50841a0c 	.word	0x50841a0c

000033b8 <CC_LibInitRngModule>:
    33b8:	b530      	push	{r4, r5, lr}
    33ba:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
    33be:	f44f 7208 	mov.w	r2, #544	; 0x220
    33c2:	2100      	movs	r1, #0
    33c4:	a80c      	add	r0, sp, #48	; 0x30
    33c6:	f000 fef2 	bl	41ae <memset>
    33ca:	2300      	movs	r3, #0
    33cc:	a802      	add	r0, sp, #8
    33ce:	4619      	mov	r1, r3
    33d0:	2228      	movs	r2, #40	; 0x28
    33d2:	9301      	str	r3, [sp, #4]
    33d4:	f000 feeb 	bl	41ae <memset>
    33d8:	a802      	add	r0, sp, #8
    33da:	f7ff fed1 	bl	3180 <RNG_PLAT_SetUserRngParameters>
    33de:	b118      	cbz	r0, 33e8 <CC_LibInitRngModule+0x30>
    33e0:	2005      	movs	r0, #5
    33e2:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    33e6:	bd30      	pop	{r4, r5, pc}
    33e8:	4d1c      	ldr	r5, [pc, #112]	; (345c <CC_LibInitRngModule+0xa4>)
    33ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    33ee:	6828      	ldr	r0, [r5, #0]
    33f0:	f7ff fdba 	bl	2f68 <CC_PalMutexLock>
    33f4:	4604      	mov	r4, r0
    33f6:	b9f0      	cbnz	r0, 3436 <CC_LibInitRngModule+0x7e>
    33f8:	2000      	movs	r0, #0
    33fa:	f7ff fde5 	bl	2fc8 <CC_PalPowerSaveModeSelect>
    33fe:	b9b0      	cbnz	r0, 342e <CC_LibInitRngModule+0x76>
    3400:	aa0c      	add	r2, sp, #48	; 0x30
    3402:	a902      	add	r1, sp, #8
    3404:	a801      	add	r0, sp, #4
    3406:	f000 fbd5 	bl	3bb4 <LLF_RND_RunTrngStartupTest>
    340a:	4604      	mov	r4, r0
    340c:	2001      	movs	r0, #1
    340e:	f7ff fddb 	bl	2fc8 <CC_PalPowerSaveModeSelect>
    3412:	b9f0      	cbnz	r0, 3452 <CC_LibInitRngModule+0x9a>
    3414:	6828      	ldr	r0, [r5, #0]
    3416:	f7ff fdaf 	bl	2f78 <CC_PalMutexUnlock>
    341a:	b110      	cbz	r0, 3422 <CC_LibInitRngModule+0x6a>
    341c:	4810      	ldr	r0, [pc, #64]	; (3460 <CC_LibInitRngModule+0xa8>)
    341e:	f7ff ff3b 	bl	3298 <CC_PalAbort>
    3422:	4620      	mov	r0, r4
    3424:	2c00      	cmp	r4, #0
    3426:	d1db      	bne.n	33e0 <CC_LibInitRngModule+0x28>
    3428:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
    342c:	bd30      	pop	{r4, r5, pc}
    342e:	480d      	ldr	r0, [pc, #52]	; (3464 <CC_LibInitRngModule+0xac>)
    3430:	f7ff ff32 	bl	3298 <CC_PalAbort>
    3434:	e7e4      	b.n	3400 <CC_LibInitRngModule+0x48>
    3436:	480c      	ldr	r0, [pc, #48]	; (3468 <CC_LibInitRngModule+0xb0>)
    3438:	f7ff ff2e 	bl	3298 <CC_PalAbort>
    343c:	2c01      	cmp	r4, #1
    343e:	d1db      	bne.n	33f8 <CC_LibInitRngModule+0x40>
    3440:	6828      	ldr	r0, [r5, #0]
    3442:	f7ff fd99 	bl	2f78 <CC_PalMutexUnlock>
    3446:	2800      	cmp	r0, #0
    3448:	d0ca      	beq.n	33e0 <CC_LibInitRngModule+0x28>
    344a:	4805      	ldr	r0, [pc, #20]	; (3460 <CC_LibInitRngModule+0xa8>)
    344c:	f7ff ff24 	bl	3298 <CC_PalAbort>
    3450:	e7c6      	b.n	33e0 <CC_LibInitRngModule+0x28>
    3452:	4806      	ldr	r0, [pc, #24]	; (346c <CC_LibInitRngModule+0xb4>)
    3454:	f7ff ff20 	bl	3298 <CC_PalAbort>
    3458:	e7dc      	b.n	3414 <CC_LibInitRngModule+0x5c>
    345a:	bf00      	nop
    345c:	20000064 	.word	0x20000064
    3460:	00004a88 	.word	0x00004a88
    3464:	00004aa0 	.word	0x00004aa0
    3468:	00004a70 	.word	0x00004a70
    346c:	00004ac0 	.word	0x00004ac0

00003470 <CC_LibInit>:
    3470:	b508      	push	{r3, lr}
    3472:	f7ff fdeb 	bl	304c <CC_HalInit>
    3476:	b118      	cbz	r0, 3480 <CC_LibInit+0x10>
    3478:	f7ff fd44 	bl	2f04 <CC_PalTerminate>
    347c:	2003      	movs	r0, #3
    347e:	bd08      	pop	{r3, pc}
    3480:	f7ff fd12 	bl	2ea8 <CC_PalInit>
    3484:	b968      	cbnz	r0, 34a2 <CC_LibInit+0x32>
    3486:	f7ff fd9f 	bl	2fc8 <CC_PalPowerSaveModeSelect>
    348a:	b960      	cbnz	r0, 34a6 <CC_LibInit+0x36>
    348c:	4b15      	ldr	r3, [pc, #84]	; (34e4 <CC_LibInit+0x74>)
    348e:	681b      	ldr	r3, [r3, #0]
    3490:	0e1b      	lsrs	r3, r3, #24
    3492:	2bf0      	cmp	r3, #240	; 0xf0
    3494:	d012      	beq.n	34bc <CC_LibInit+0x4c>
    3496:	f7ff fddb 	bl	3050 <CC_HalTerminate>
    349a:	f7ff fd33 	bl	2f04 <CC_PalTerminate>
    349e:	2006      	movs	r0, #6
    34a0:	bd08      	pop	{r3, pc}
    34a2:	2004      	movs	r0, #4
    34a4:	bd08      	pop	{r3, pc}
    34a6:	f7ff fdd3 	bl	3050 <CC_HalTerminate>
    34aa:	f7ff fd2b 	bl	2f04 <CC_PalTerminate>
    34ae:	f7ff ff83 	bl	33b8 <CC_LibInitRngModule>
    34b2:	2800      	cmp	r0, #0
    34b4:	bf0c      	ite	eq
    34b6:	2000      	moveq	r0, #0
    34b8:	2005      	movne	r0, #5
    34ba:	bd08      	pop	{r3, pc}
    34bc:	4a0a      	ldr	r2, [pc, #40]	; (34e8 <CC_LibInit+0x78>)
    34be:	4b0b      	ldr	r3, [pc, #44]	; (34ec <CC_LibInit+0x7c>)
    34c0:	6812      	ldr	r2, [r2, #0]
    34c2:	429a      	cmp	r2, r3
    34c4:	d005      	beq.n	34d2 <CC_LibInit+0x62>
    34c6:	f7ff fdc3 	bl	3050 <CC_HalTerminate>
    34ca:	f7ff fd1b 	bl	2f04 <CC_PalTerminate>
    34ce:	2007      	movs	r0, #7
    34d0:	bd08      	pop	{r3, pc}
    34d2:	2001      	movs	r0, #1
    34d4:	f7ff fd78 	bl	2fc8 <CC_PalPowerSaveModeSelect>
    34d8:	2800      	cmp	r0, #0
    34da:	d1e4      	bne.n	34a6 <CC_LibInit+0x36>
    34dc:	4b04      	ldr	r3, [pc, #16]	; (34f0 <CC_LibInit+0x80>)
    34de:	6018      	str	r0, [r3, #0]
    34e0:	e7e5      	b.n	34ae <CC_LibInit+0x3e>
    34e2:	bf00      	nop
    34e4:	50841928 	.word	0x50841928
    34e8:	50841a24 	.word	0x50841a24
    34ec:	20e00000 	.word	0x20e00000
    34f0:	50841a0c 	.word	0x50841a0c

000034f4 <CC_PalTrngParamGet>:
    34f4:	b118      	cbz	r0, 34fe <CC_PalTrngParamGet+0xa>
    34f6:	b111      	cbz	r1, 34fe <CC_PalTrngParamGet+0xa>
    34f8:	680b      	ldr	r3, [r1, #0]
    34fa:	2b1c      	cmp	r3, #28
    34fc:	d001      	beq.n	3502 <CC_PalTrngParamGet+0xe>
    34fe:	2001      	movs	r0, #1
    3500:	4770      	bx	lr
    3502:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3506:	4a3a      	ldr	r2, [pc, #232]	; (35f0 <CC_PalTrngParamGet+0xfc>)
    3508:	f8d3 1c10 	ldr.w	r1, [r3, #3088]	; 0xc10
    350c:	4291      	cmp	r1, r2
    350e:	d05a      	beq.n	35c6 <CC_PalTrngParamGet+0xd2>
    3510:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    3514:	3201      	adds	r2, #1
    3516:	d056      	beq.n	35c6 <CC_PalTrngParamGet+0xd2>
    3518:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
    351c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3520:	6002      	str	r2, [r0, #0]
    3522:	f8d3 1c14 	ldr.w	r1, [r3, #3092]	; 0xc14
    3526:	4a33      	ldr	r2, [pc, #204]	; (35f4 <CC_PalTrngParamGet+0x100>)
    3528:	4291      	cmp	r1, r2
    352a:	d05e      	beq.n	35ea <CC_PalTrngParamGet+0xf6>
    352c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    3530:	3201      	adds	r2, #1
    3532:	d05a      	beq.n	35ea <CC_PalTrngParamGet+0xf6>
    3534:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
    3538:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    353c:	6042      	str	r2, [r0, #4]
    353e:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    3542:	f512 7f94 	cmn.w	r2, #296	; 0x128
    3546:	d04d      	beq.n	35e4 <CC_PalTrngParamGet+0xf0>
    3548:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    354c:	3201      	adds	r2, #1
    354e:	d049      	beq.n	35e4 <CC_PalTrngParamGet+0xf0>
    3550:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
    3554:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3558:	6082      	str	r2, [r0, #8]
    355a:	f8d3 1c1c 	ldr.w	r1, [r3, #3100]	; 0xc1c
    355e:	4a26      	ldr	r2, [pc, #152]	; (35f8 <CC_PalTrngParamGet+0x104>)
    3560:	4291      	cmp	r1, r2
    3562:	d03c      	beq.n	35de <CC_PalTrngParamGet+0xea>
    3564:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    3568:	3201      	adds	r2, #1
    356a:	d038      	beq.n	35de <CC_PalTrngParamGet+0xea>
    356c:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
    3570:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3574:	60c2      	str	r2, [r0, #12]
    3576:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    357a:	3270      	adds	r2, #112	; 0x70
    357c:	d02d      	beq.n	35da <CC_PalTrngParamGet+0xe6>
    357e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    3582:	3201      	adds	r2, #1
    3584:	d029      	beq.n	35da <CC_PalTrngParamGet+0xe6>
    3586:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
    358a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    358e:	6102      	str	r2, [r0, #16]
    3590:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    3594:	32af      	adds	r2, #175	; 0xaf
    3596:	d01e      	beq.n	35d6 <CC_PalTrngParamGet+0xe2>
    3598:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    359c:	3201      	adds	r2, #1
    359e:	d01a      	beq.n	35d6 <CC_PalTrngParamGet+0xe2>
    35a0:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
    35a4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    35a8:	6142      	str	r2, [r0, #20]
    35aa:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
    35ae:	4a13      	ldr	r2, [pc, #76]	; (35fc <CC_PalTrngParamGet+0x108>)
    35b0:	4291      	cmp	r1, r2
    35b2:	d00b      	beq.n	35cc <CC_PalTrngParamGet+0xd8>
    35b4:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
    35b8:	3201      	adds	r2, #1
    35ba:	d007      	beq.n	35cc <CC_PalTrngParamGet+0xd8>
    35bc:	f8d3 3c08 	ldr.w	r3, [r3, #3080]	; 0xc08
    35c0:	6183      	str	r3, [r0, #24]
    35c2:	2000      	movs	r0, #0
    35c4:	4770      	bx	lr
    35c6:	f640 02fc 	movw	r2, #2300	; 0x8fc
    35ca:	e7a7      	b.n	351c <CC_PalTrngParamGet+0x28>
    35cc:	f240 3337 	movw	r3, #823	; 0x337
    35d0:	6183      	str	r3, [r0, #24]
    35d2:	2000      	movs	r0, #0
    35d4:	4770      	bx	lr
    35d6:	2251      	movs	r2, #81	; 0x51
    35d8:	e7e4      	b.n	35a4 <CC_PalTrngParamGet+0xb0>
    35da:	2290      	movs	r2, #144	; 0x90
    35dc:	e7d5      	b.n	358a <CC_PalTrngParamGet+0x96>
    35de:	f642 1204 	movw	r2, #10500	; 0x2904
    35e2:	e7c5      	b.n	3570 <CC_PalTrngParamGet+0x7c>
    35e4:	f640 62d8 	movw	r2, #3800	; 0xed8
    35e8:	e7b4      	b.n	3554 <CC_PalTrngParamGet+0x60>
    35ea:	f242 02d0 	movw	r2, #8400	; 0x20d0
    35ee:	e7a3      	b.n	3538 <CC_PalTrngParamGet+0x44>
    35f0:	fffff8fc 	.word	0xfffff8fc
    35f4:	ffff20d0 	.word	0xffff20d0
    35f8:	ffff2904 	.word	0xffff2904
    35fc:	fffff337 	.word	0xfffff337

00003600 <LLF_RND_AdaptiveProportionTest>:
    3600:	b3a8      	cbz	r0, 366e <LLF_RND_AdaptiveProportionTest+0x6e>
    3602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3606:	1e4c      	subs	r4, r1, #1
    3608:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
    360c:	d22c      	bcs.n	3668 <LLF_RND_AdaptiveProportionTest+0x68>
    360e:	b35b      	cbz	r3, 3668 <LLF_RND_AdaptiveProportionTest+0x68>
    3610:	b352      	cbz	r2, 3668 <LLF_RND_AdaptiveProportionTest+0x68>
    3612:	f04f 0c00 	mov.w	ip, #0
    3616:	00c9      	lsls	r1, r1, #3
    3618:	46e6      	mov	lr, ip
    361a:	4665      	mov	r5, ip
    361c:	4664      	mov	r4, ip
    361e:	1e4f      	subs	r7, r1, #1
    3620:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    3624:	e00c      	b.n	3640 <LLF_RND_AdaptiveProportionTest+0x40>
    3626:	42ab      	cmp	r3, r5
    3628:	d016      	beq.n	3658 <LLF_RND_AdaptiveProportionTest+0x58>
    362a:	458e      	cmp	lr, r1
    362c:	d101      	bne.n	3632 <LLF_RND_AdaptiveProportionTest+0x32>
    362e:	f10c 0c01 	add.w	ip, ip, #1
    3632:	45a8      	cmp	r8, r5
    3634:	d016      	beq.n	3664 <LLF_RND_AdaptiveProportionTest+0x64>
    3636:	3401      	adds	r4, #1
    3638:	42bc      	cmp	r4, r7
    363a:	f105 0501 	add.w	r5, r5, #1
    363e:	d818      	bhi.n	3672 <LLF_RND_AdaptiveProportionTest+0x72>
    3640:	0961      	lsrs	r1, r4, #5
    3642:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    3646:	f004 061f 	and.w	r6, r4, #31
    364a:	40f1      	lsrs	r1, r6
    364c:	2e1f      	cmp	r6, #31
    364e:	bf18      	it	ne
    3650:	f001 0101 	andne.w	r1, r1, #1
    3654:	2c00      	cmp	r4, #0
    3656:	d1e6      	bne.n	3626 <LLF_RND_AdaptiveProportionTest+0x26>
    3658:	2500      	movs	r5, #0
    365a:	45a8      	cmp	r8, r5
    365c:	468e      	mov	lr, r1
    365e:	f04f 0c01 	mov.w	ip, #1
    3662:	d1e8      	bne.n	3636 <LLF_RND_AdaptiveProportionTest+0x36>
    3664:	4562      	cmp	r2, ip
    3666:	d2e6      	bcs.n	3636 <LLF_RND_AdaptiveProportionTest+0x36>
    3668:	4803      	ldr	r0, [pc, #12]	; (3678 <LLF_RND_AdaptiveProportionTest+0x78>)
    366a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    366e:	4802      	ldr	r0, [pc, #8]	; (3678 <LLF_RND_AdaptiveProportionTest+0x78>)
    3670:	4770      	bx	lr
    3672:	2000      	movs	r0, #0
    3674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3678:	00f10c37 	.word	0x00f10c37

0000367c <getTrngSource>:
    367c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3680:	b08f      	sub	sp, #60	; 0x3c
    3682:	460d      	mov	r5, r1
    3684:	e9dd 4119 	ldrd	r4, r1, [sp, #100]	; 0x64
    3688:	4683      	mov	fp, r0
    368a:	2900      	cmp	r1, #0
    368c:	d157      	bne.n	373e <getTrngSource+0xc2>
    368e:	6929      	ldr	r1, [r5, #16]
    3690:	9103      	str	r1, [sp, #12]
    3692:	2100      	movs	r1, #0
    3694:	601c      	str	r4, [r3, #0]
    3696:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3698:	6019      	str	r1, [r3, #0]
    369a:	2a00      	cmp	r2, #0
    369c:	f000 8122 	beq.w	38e4 <getTrngSource+0x268>
    36a0:	4a81      	ldr	r2, [pc, #516]	; (38a8 <getTrngSource+0x22c>)
    36a2:	4b82      	ldr	r3, [pc, #520]	; (38ac <getTrngSource+0x230>)
    36a4:	6811      	ldr	r1, [r2, #0]
    36a6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    36a8:	681b      	ldr	r3, [r3, #0]
    36aa:	429a      	cmp	r2, r3
    36ac:	d157      	bne.n	375e <getTrngSource+0xe2>
    36ae:	290a      	cmp	r1, #10
    36b0:	d155      	bne.n	375e <getTrngSource+0xe2>
    36b2:	f89b 3003 	ldrb.w	r3, [fp, #3]
    36b6:	9306      	str	r3, [sp, #24]
    36b8:	9903      	ldr	r1, [sp, #12]
    36ba:	2304      	movs	r3, #4
    36bc:	4608      	mov	r0, r1
    36be:	4a7c      	ldr	r2, [pc, #496]	; (38b0 <getTrngSource+0x234>)
    36c0:	9302      	str	r3, [sp, #8]
    36c2:	fba2 0200 	umull	r0, r2, r2, r0
    36c6:	0892      	lsrs	r2, r2, #2
    36c8:	00cb      	lsls	r3, r1, #3
    36ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    36ce:	f104 0008 	add.w	r0, r4, #8
    36d2:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    36d6:	3b01      	subs	r3, #1
    36d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 38ac <getTrngSource+0x230>
    36dc:	f8df a200 	ldr.w	sl, [pc, #512]	; 38e0 <getTrngSource+0x264>
    36e0:	9004      	str	r0, [sp, #16]
    36e2:	9200      	str	r2, [sp, #0]
    36e4:	9305      	str	r3, [sp, #20]
    36e6:	9b18      	ldr	r3, [sp, #96]	; 0x60
    36e8:	9c03      	ldr	r4, [sp, #12]
    36ea:	601c      	str	r4, [r3, #0]
    36ec:	2c00      	cmp	r4, #0
    36ee:	f000 80cc 	beq.w	388a <getTrngSource+0x20e>
    36f2:	2600      	movs	r6, #0
    36f4:	9f04      	ldr	r7, [sp, #16]
    36f6:	f000 faa9 	bl	3c4c <LLF_RND_TurnOffTrng>
    36fa:	2300      	movs	r3, #0
    36fc:	9307      	str	r3, [sp, #28]
    36fe:	9b06      	ldr	r3, [sp, #24]
    3700:	f1bb 0f00 	cmp.w	fp, #0
    3704:	d03a      	beq.n	377c <getTrngSource+0x100>
    3706:	2d00      	cmp	r5, #0
    3708:	d034      	beq.n	3774 <getTrngSource+0xf8>
    370a:	bb53      	cbnz	r3, 3762 <getTrngSource+0xe6>
    370c:	005b      	lsls	r3, r3, #1
    370e:	9306      	str	r3, [sp, #24]
    3710:	f1bb 0f00 	cmp.w	fp, #0
    3714:	d036      	beq.n	3784 <getTrngSource+0x108>
    3716:	2d00      	cmp	r5, #0
    3718:	d034      	beq.n	3784 <getTrngSource+0x108>
    371a:	b1e3      	cbz	r3, 3756 <getTrngSource+0xda>
    371c:	a906      	add	r1, sp, #24
    371e:	4628      	mov	r0, r5
    3720:	f000 fa84 	bl	3c2c <LLF_RND_GetFastestRosc>
    3724:	2800      	cmp	r0, #0
    3726:	f000 817d 	beq.w	3a24 <getTrngSource+0x3a8>
    372a:	4b62      	ldr	r3, [pc, #392]	; (38b4 <getTrngSource+0x238>)
    372c:	4298      	cmp	r0, r3
    372e:	d012      	beq.n	3756 <getTrngSource+0xda>
    3730:	9000      	str	r0, [sp, #0]
    3732:	f000 fa8b 	bl	3c4c <LLF_RND_TurnOffTrng>
    3736:	9800      	ldr	r0, [sp, #0]
    3738:	b00f      	add	sp, #60	; 0x3c
    373a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    373e:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    3742:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
    3746:	3001      	adds	r0, #1
    3748:	bf0c      	ite	eq
    374a:	f44f 7104 	moveq.w	r1, #528	; 0x210
    374e:	f8d1 1c0c 	ldrne.w	r1, [r1, #3084]	; 0xc0c
    3752:	9103      	str	r1, [sp, #12]
    3754:	e79d      	b.n	3692 <getTrngSource+0x16>
    3756:	6a2b      	ldr	r3, [r5, #32]
    3758:	b973      	cbnz	r3, 3778 <getTrngSource+0xfc>
    375a:	4856      	ldr	r0, [pc, #344]	; (38b4 <getTrngSource+0x238>)
    375c:	e7e8      	b.n	3730 <getTrngSource+0xb4>
    375e:	4856      	ldr	r0, [pc, #344]	; (38b8 <getTrngSource+0x23c>)
    3760:	e7e6      	b.n	3730 <getTrngSource+0xb4>
    3762:	a906      	add	r1, sp, #24
    3764:	4628      	mov	r0, r5
    3766:	f000 fa61 	bl	3c2c <LLF_RND_GetFastestRosc>
    376a:	b168      	cbz	r0, 3788 <getTrngSource+0x10c>
    376c:	4b53      	ldr	r3, [pc, #332]	; (38bc <getTrngSource+0x240>)
    376e:	4298      	cmp	r0, r3
    3770:	d0de      	beq.n	3730 <getTrngSource+0xb4>
    3772:	9b06      	ldr	r3, [sp, #24]
    3774:	2b08      	cmp	r3, #8
    3776:	d1c9      	bne.n	370c <getTrngSource+0x90>
    3778:	4851      	ldr	r0, [pc, #324]	; (38c0 <getTrngSource+0x244>)
    377a:	e7d9      	b.n	3730 <getTrngSource+0xb4>
    377c:	2b08      	cmp	r3, #8
    377e:	d0fb      	beq.n	3778 <getTrngSource+0xfc>
    3780:	005b      	lsls	r3, r3, #1
    3782:	9306      	str	r3, [sp, #24]
    3784:	484f      	ldr	r0, [pc, #316]	; (38c4 <getTrngSource+0x248>)
    3786:	e7d3      	b.n	3730 <getTrngSource+0xb4>
    3788:	4629      	mov	r1, r5
    378a:	9806      	ldr	r0, [sp, #24]
    378c:	f000 fa30 	bl	3bf0 <LLF_RND_GetRoscSampleCnt>
    3790:	2800      	cmp	r0, #0
    3792:	d1eb      	bne.n	376c <getTrngSource+0xf0>
    3794:	9b06      	ldr	r3, [sp, #24]
    3796:	2b08      	cmp	r3, #8
    3798:	f000 810e 	beq.w	39b8 <getTrngSource+0x33c>
    379c:	2b04      	cmp	r3, #4
    379e:	f000 8131 	beq.w	3a04 <getTrngSource+0x388>
    37a2:	f1a3 0302 	sub.w	r3, r3, #2
    37a6:	fab3 f383 	clz	r3, r3
    37aa:	095b      	lsrs	r3, r3, #5
    37ac:	9301      	str	r3, [sp, #4]
    37ae:	2301      	movs	r3, #1
    37b0:	4619      	mov	r1, r3
    37b2:	4a45      	ldr	r2, [pc, #276]	; (38c8 <getTrngSource+0x24c>)
    37b4:	6013      	str	r3, [r2, #0]
    37b6:	f842 3c84 	str.w	r3, [r2, #-132]
    37ba:	4b43      	ldr	r3, [pc, #268]	; (38c8 <getTrngSource+0x24c>)
    37bc:	6019      	str	r1, [r3, #0]
    37be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    37c0:	f8c9 3000 	str.w	r3, [r9]
    37c4:	f8d9 2000 	ldr.w	r2, [r9]
    37c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    37ca:	429a      	cmp	r2, r3
    37cc:	d1f5      	bne.n	37ba <getTrngSource+0x13e>
    37ce:	f04f 0800 	mov.w	r8, #0
    37d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    37d6:	f8ca 8000 	str.w	r8, [sl]
    37da:	f7ff fc3b 	bl	3054 <CC_HalClearInterruptBit>
    37de:	4a3b      	ldr	r2, [pc, #236]	; (38cc <getTrngSource+0x250>)
    37e0:	4b3b      	ldr	r3, [pc, #236]	; (38d0 <getTrngSource+0x254>)
    37e2:	4640      	mov	r0, r8
    37e4:	601a      	str	r2, [r3, #0]
    37e6:	f7ff fc43 	bl	3070 <CC_HalMaskInterrupt>
    37ea:	220a      	movs	r2, #10
    37ec:	9801      	ldr	r0, [sp, #4]
    37ee:	4939      	ldr	r1, [pc, #228]	; (38d4 <getTrngSource+0x258>)
    37f0:	4b2d      	ldr	r3, [pc, #180]	; (38a8 <getTrngSource+0x22c>)
    37f2:	6008      	str	r0, [r1, #0]
    37f4:	601a      	str	r2, [r3, #0]
    37f6:	692a      	ldr	r2, [r5, #16]
    37f8:	f1a8 3855 	sub.w	r8, r8, #1431655765	; 0x55555555
    37fc:	fba8 1202 	umull	r1, r2, r8, r2
    3800:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3802:	0912      	lsrs	r2, r2, #4
    3804:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3808:	03db      	lsls	r3, r3, #15
    380a:	fb03 f302 	mul.w	r3, r3, r2
    380e:	4a32      	ldr	r2, [pc, #200]	; (38d8 <getTrngSource+0x25c>)
    3810:	099b      	lsrs	r3, r3, #6
    3812:	6013      	str	r3, [r2, #0]
    3814:	2301      	movs	r3, #1
    3816:	f8ca 3000 	str.w	r3, [sl]
    381a:	9906      	ldr	r1, [sp, #24]
    381c:	f8db 2000 	ldr.w	r2, [fp]
    3820:	020b      	lsls	r3, r1, #8
    3822:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    3826:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    382a:	4313      	orrs	r3, r2
    382c:	f8cb 3000 	str.w	r3, [fp]
    3830:	a807      	add	r0, sp, #28
    3832:	f000 f9cd 	bl	3bd0 <LLF_RND_WaitRngInterrupt>
    3836:	2800      	cmp	r0, #0
    3838:	d198      	bne.n	376c <getTrngSource+0xf0>
    383a:	4b28      	ldr	r3, [pc, #160]	; (38dc <getTrngSource+0x260>)
    383c:	fba8 2804 	umull	r2, r8, r8, r4
    3840:	681a      	ldr	r2, [r3, #0]
    3842:	3314      	adds	r3, #20
    3844:	9208      	str	r2, [sp, #32]
    3846:	f853 2c10 	ldr.w	r2, [r3, #-16]
    384a:	ebb6 0f98 	cmp.w	r6, r8, lsr #2
    384e:	9209      	str	r2, [sp, #36]	; 0x24
    3850:	f853 2c0c 	ldr.w	r2, [r3, #-12]
    3854:	920a      	str	r2, [sp, #40]	; 0x28
    3856:	f853 2c08 	ldr.w	r2, [r3, #-8]
    385a:	920b      	str	r2, [sp, #44]	; 0x2c
    385c:	f853 2c04 	ldr.w	r2, [r3, #-4]
    3860:	920c      	str	r2, [sp, #48]	; 0x30
    3862:	681b      	ldr	r3, [r3, #0]
    3864:	930d      	str	r3, [sp, #52]	; 0x34
    3866:	d101      	bne.n	386c <getTrngSource+0x1f0>
    3868:	9b00      	ldr	r3, [sp, #0]
    386a:	b99b      	cbnz	r3, 3894 <getTrngSource+0x218>
    386c:	4638      	mov	r0, r7
    386e:	2218      	movs	r2, #24
    3870:	a908      	add	r1, sp, #32
    3872:	f7ff fb13 	bl	2e9c <CC_PalMemCopyPlat>
    3876:	3c18      	subs	r4, #24
    3878:	3718      	adds	r7, #24
    387a:	3601      	adds	r6, #1
    387c:	2c00      	cmp	r4, #0
    387e:	f47f af3a 	bne.w	36f6 <getTrngSource+0x7a>
    3882:	9b04      	ldr	r3, [sp, #16]
    3884:	2b00      	cmp	r3, #0
    3886:	f040 809a 	bne.w	39be <getTrngSource+0x342>
    388a:	2300      	movs	r3, #0
    388c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    388e:	6013      	str	r3, [r2, #0]
    3890:	9b06      	ldr	r3, [sp, #24]
    3892:	e76f      	b.n	3774 <getTrngSource+0xf8>
    3894:	461a      	mov	r2, r3
    3896:	4638      	mov	r0, r7
    3898:	a908      	add	r1, sp, #32
    389a:	1ae4      	subs	r4, r4, r3
    389c:	f7ff fafe 	bl	2e9c <CC_PalMemCopyPlat>
    38a0:	9b00      	ldr	r3, [sp, #0]
    38a2:	441f      	add	r7, r3
    38a4:	e7e9      	b.n	387a <getTrngSource+0x1fe>
    38a6:	bf00      	nop
    38a8:	50841138 	.word	0x50841138
    38ac:	50841130 	.word	0x50841130
    38b0:	aaaaaaab 	.word	0xaaaaaaab
    38b4:	00f10c31 	.word	0x00f10c31
    38b8:	00f10c30 	.word	0x00f10c30
    38bc:	00f10c02 	.word	0x00f10c02
    38c0:	00f10c32 	.word	0x00f10c32
    38c4:	00f10c35 	.word	0x00f10c35
    38c8:	508411c4 	.word	0x508411c4
    38cc:	0ffffffe 	.word	0x0ffffffe
    38d0:	50841100 	.word	0x50841100
    38d4:	5084110c 	.word	0x5084110c
    38d8:	508411d8 	.word	0x508411d8
    38dc:	50841114 	.word	0x50841114
    38e0:	5084112c 	.word	0x5084112c
    38e4:	f1bb 0f00 	cmp.w	fp, #0
    38e8:	f43f af4c 	beq.w	3784 <getTrngSource+0x108>
    38ec:	2d00      	cmp	r5, #0
    38ee:	f43f af49 	beq.w	3784 <getTrngSource+0x108>
    38f2:	2301      	movs	r3, #1
    38f4:	a90e      	add	r1, sp, #56	; 0x38
    38f6:	f841 3d20 	str.w	r3, [r1, #-32]!
    38fa:	f8cb 2000 	str.w	r2, [fp]
    38fe:	4628      	mov	r0, r5
    3900:	f000 f994 	bl	3c2c <LLF_RND_GetFastestRosc>
    3904:	2800      	cmp	r0, #0
    3906:	f47f af13 	bne.w	3730 <getTrngSource+0xb4>
    390a:	4629      	mov	r1, r5
    390c:	9806      	ldr	r0, [sp, #24]
    390e:	f000 f96f 	bl	3bf0 <LLF_RND_GetRoscSampleCnt>
    3912:	2800      	cmp	r0, #0
    3914:	f47f af0c 	bne.w	3730 <getTrngSource+0xb4>
    3918:	9f06      	ldr	r7, [sp, #24]
    391a:	2f08      	cmp	r7, #8
    391c:	f000 80eb 	beq.w	3af6 <getTrngSource+0x47a>
    3920:	2f04      	cmp	r7, #4
    3922:	f000 80ea 	beq.w	3afa <getTrngSource+0x47e>
    3926:	f1a7 0702 	sub.w	r7, r7, #2
    392a:	fab7 f787 	clz	r7, r7
    392e:	097f      	lsrs	r7, r7, #5
    3930:	2201      	movs	r2, #1
    3932:	4616      	mov	r6, r2
    3934:	4b73      	ldr	r3, [pc, #460]	; (3b04 <getTrngSource+0x488>)
    3936:	4974      	ldr	r1, [pc, #464]	; (3b08 <getTrngSource+0x48c>)
    3938:	601a      	str	r2, [r3, #0]
    393a:	4618      	mov	r0, r3
    393c:	600a      	str	r2, [r1, #0]
    393e:	3b94      	subs	r3, #148	; 0x94
    3940:	6006      	str	r6, [r0, #0]
    3942:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    3944:	601a      	str	r2, [r3, #0]
    3946:	6819      	ldr	r1, [r3, #0]
    3948:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    394a:	4291      	cmp	r1, r2
    394c:	d1f8      	bne.n	3940 <getTrngSource+0x2c4>
    394e:	f04f 0800 	mov.w	r8, #0
    3952:	4b6e      	ldr	r3, [pc, #440]	; (3b0c <getTrngSource+0x490>)
    3954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3958:	f8c3 8000 	str.w	r8, [r3]
    395c:	f7ff fb7a 	bl	3054 <CC_HalClearInterruptBit>
    3960:	4b6b      	ldr	r3, [pc, #428]	; (3b10 <getTrngSource+0x494>)
    3962:	4a6c      	ldr	r2, [pc, #432]	; (3b14 <getTrngSource+0x498>)
    3964:	4640      	mov	r0, r8
    3966:	601a      	str	r2, [r3, #0]
    3968:	f7ff fb82 	bl	3070 <CC_HalMaskInterrupt>
    396c:	220a      	movs	r2, #10
    396e:	496a      	ldr	r1, [pc, #424]	; (3b18 <getTrngSource+0x49c>)
    3970:	4b6a      	ldr	r3, [pc, #424]	; (3b1c <getTrngSource+0x4a0>)
    3972:	600f      	str	r7, [r1, #0]
    3974:	601a      	str	r2, [r3, #0]
    3976:	991a      	ldr	r1, [sp, #104]	; 0x68
    3978:	692b      	ldr	r3, [r5, #16]
    397a:	2901      	cmp	r1, #1
    397c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    397e:	f000 80b1 	beq.w	3ae4 <getTrngSource+0x468>
    3982:	4967      	ldr	r1, [pc, #412]	; (3b20 <getTrngSource+0x4a4>)
    3984:	fba1 1303 	umull	r1, r3, r1, r3
    3988:	091b      	lsrs	r3, r3, #4
    398a:	2101      	movs	r1, #1
    398c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3990:	03d2      	lsls	r2, r2, #15
    3992:	fb03 f302 	mul.w	r3, r3, r2
    3996:	4a63      	ldr	r2, [pc, #396]	; (3b24 <getTrngSource+0x4a8>)
    3998:	099b      	lsrs	r3, r3, #6
    399a:	6013      	str	r3, [r2, #0]
    399c:	4b5b      	ldr	r3, [pc, #364]	; (3b0c <getTrngSource+0x490>)
    399e:	6019      	str	r1, [r3, #0]
    39a0:	9906      	ldr	r1, [sp, #24]
    39a2:	f8db 2000 	ldr.w	r2, [fp]
    39a6:	020b      	lsls	r3, r1, #8
    39a8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    39ac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    39b0:	4313      	orrs	r3, r2
    39b2:	f8cb 3000 	str.w	r3, [fp]
    39b6:	e67f      	b.n	36b8 <getTrngSource+0x3c>
    39b8:	2303      	movs	r3, #3
    39ba:	9301      	str	r3, [sp, #4]
    39bc:	e6f7      	b.n	37ae <getTrngSource+0x132>
    39be:	9b03      	ldr	r3, [sp, #12]
    39c0:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
    39c4:	f63f af61 	bhi.w	388a <getTrngSource+0x20e>
    39c8:	e9dd 7c04 	ldrd	r7, ip, [sp, #16]
    39cc:	4620      	mov	r0, r4
    39ce:	4623      	mov	r3, r4
    39d0:	696e      	ldr	r6, [r5, #20]
    39d2:	e004      	b.n	39de <getTrngSource+0x362>
    39d4:	2001      	movs	r0, #1
    39d6:	3301      	adds	r3, #1
    39d8:	4563      	cmp	r3, ip
    39da:	4614      	mov	r4, r2
    39dc:	d815      	bhi.n	3a0a <getTrngSource+0x38e>
    39de:	095a      	lsrs	r2, r3, #5
    39e0:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    39e4:	f003 011f 	and.w	r1, r3, #31
    39e8:	40ca      	lsrs	r2, r1
    39ea:	291f      	cmp	r1, #31
    39ec:	bf18      	it	ne
    39ee:	f002 0201 	andne.w	r2, r2, #1
    39f2:	2b00      	cmp	r3, #0
    39f4:	d0ee      	beq.n	39d4 <getTrngSource+0x358>
    39f6:	42a2      	cmp	r2, r4
    39f8:	d1ec      	bne.n	39d4 <getTrngSource+0x358>
    39fa:	3001      	adds	r0, #1
    39fc:	4286      	cmp	r6, r0
    39fe:	d1ea      	bne.n	39d6 <getTrngSource+0x35a>
    3a00:	4849      	ldr	r0, [pc, #292]	; (3b28 <getTrngSource+0x4ac>)
    3a02:	e00b      	b.n	3a1c <getTrngSource+0x3a0>
    3a04:	2302      	movs	r3, #2
    3a06:	9301      	str	r3, [sp, #4]
    3a08:	e6d1      	b.n	37ae <getTrngSource+0x132>
    3a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3a0e:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
    3a12:	69aa      	ldr	r2, [r5, #24]
    3a14:	f7ff fdf4 	bl	3600 <LLF_RND_AdaptiveProportionTest>
    3a18:	2800      	cmp	r0, #0
    3a1a:	d05d      	beq.n	3ad8 <getTrngSource+0x45c>
    3a1c:	2300      	movs	r3, #0
    3a1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    3a20:	6013      	str	r3, [r2, #0]
    3a22:	e6a3      	b.n	376c <getTrngSource+0xf0>
    3a24:	4629      	mov	r1, r5
    3a26:	9806      	ldr	r0, [sp, #24]
    3a28:	f000 f8e2 	bl	3bf0 <LLF_RND_GetRoscSampleCnt>
    3a2c:	2800      	cmp	r0, #0
    3a2e:	f47f ae7c 	bne.w	372a <getTrngSource+0xae>
    3a32:	9c06      	ldr	r4, [sp, #24]
    3a34:	2c08      	cmp	r4, #8
    3a36:	d051      	beq.n	3adc <getTrngSource+0x460>
    3a38:	2c04      	cmp	r4, #4
    3a3a:	d051      	beq.n	3ae0 <getTrngSource+0x464>
    3a3c:	f1a4 0402 	sub.w	r4, r4, #2
    3a40:	fab4 f484 	clz	r4, r4
    3a44:	0964      	lsrs	r4, r4, #5
    3a46:	2301      	movs	r3, #1
    3a48:	461e      	mov	r6, r3
    3a4a:	4619      	mov	r1, r3
    3a4c:	4a2d      	ldr	r2, [pc, #180]	; (3b04 <getTrngSource+0x488>)
    3a4e:	6013      	str	r3, [r2, #0]
    3a50:	f842 3c84 	str.w	r3, [r2, #-132]
    3a54:	4b2b      	ldr	r3, [pc, #172]	; (3b04 <getTrngSource+0x488>)
    3a56:	6019      	str	r1, [r3, #0]
    3a58:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3a5a:	f8c9 3000 	str.w	r3, [r9]
    3a5e:	f8d9 2000 	ldr.w	r2, [r9]
    3a62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3a64:	429a      	cmp	r2, r3
    3a66:	d1f5      	bne.n	3a54 <getTrngSource+0x3d8>
    3a68:	2700      	movs	r7, #0
    3a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3a6e:	f8ca 7000 	str.w	r7, [sl]
    3a72:	f7ff faef 	bl	3054 <CC_HalClearInterruptBit>
    3a76:	4b26      	ldr	r3, [pc, #152]	; (3b10 <getTrngSource+0x494>)
    3a78:	4a26      	ldr	r2, [pc, #152]	; (3b14 <getTrngSource+0x498>)
    3a7a:	4638      	mov	r0, r7
    3a7c:	601a      	str	r2, [r3, #0]
    3a7e:	f7ff faf7 	bl	3070 <CC_HalMaskInterrupt>
    3a82:	220a      	movs	r2, #10
    3a84:	4924      	ldr	r1, [pc, #144]	; (3b18 <getTrngSource+0x49c>)
    3a86:	4b25      	ldr	r3, [pc, #148]	; (3b1c <getTrngSource+0x4a0>)
    3a88:	600c      	str	r4, [r1, #0]
    3a8a:	601a      	str	r2, [r3, #0]
    3a8c:	692a      	ldr	r2, [r5, #16]
    3a8e:	4924      	ldr	r1, [pc, #144]	; (3b20 <getTrngSource+0x4a4>)
    3a90:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3a92:	fba1 1202 	umull	r1, r2, r1, r2
    3a96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3a9a:	0912      	lsrs	r2, r2, #4
    3a9c:	03db      	lsls	r3, r3, #15
    3a9e:	fb03 f302 	mul.w	r3, r3, r2
    3aa2:	4a20      	ldr	r2, [pc, #128]	; (3b24 <getTrngSource+0x4a8>)
    3aa4:	099b      	lsrs	r3, r3, #6
    3aa6:	6013      	str	r3, [r2, #0]
    3aa8:	f8ca 6000 	str.w	r6, [sl]
    3aac:	9b06      	ldr	r3, [sp, #24]
    3aae:	f8db 1000 	ldr.w	r1, [fp]
    3ab2:	021a      	lsls	r2, r3, #8
    3ab4:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
    3ab8:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
    3abc:	431a      	orrs	r2, r3
    3abe:	0a13      	lsrs	r3, r2, #8
    3ac0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    3ac4:	4313      	orrs	r3, r2
    3ac6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3aca:	f8cb 3000 	str.w	r3, [fp]
    3ace:	9b02      	ldr	r3, [sp, #8]
    3ad0:	3b01      	subs	r3, #1
    3ad2:	9302      	str	r3, [sp, #8]
    3ad4:	f47f ae07 	bne.w	36e6 <getTrngSource+0x6a>
    3ad8:	2000      	movs	r0, #0
    3ada:	e629      	b.n	3730 <getTrngSource+0xb4>
    3adc:	2403      	movs	r4, #3
    3ade:	e7b2      	b.n	3a46 <getTrngSource+0x3ca>
    3ae0:	2402      	movs	r4, #2
    3ae2:	e7b0      	b.n	3a46 <getTrngSource+0x3ca>
    3ae4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    3ae8:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
    3aec:	3101      	adds	r1, #1
    3aee:	d006      	beq.n	3afe <getTrngSource+0x482>
    3af0:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
    3af4:	e745      	b.n	3982 <getTrngSource+0x306>
    3af6:	2703      	movs	r7, #3
    3af8:	e71a      	b.n	3930 <getTrngSource+0x2b4>
    3afa:	2702      	movs	r7, #2
    3afc:	e718      	b.n	3930 <getTrngSource+0x2b4>
    3afe:	2316      	movs	r3, #22
    3b00:	e743      	b.n	398a <getTrngSource+0x30e>
    3b02:	bf00      	nop
    3b04:	508411c4 	.word	0x508411c4
    3b08:	50841140 	.word	0x50841140
    3b0c:	5084112c 	.word	0x5084112c
    3b10:	50841100 	.word	0x50841100
    3b14:	0ffffffe 	.word	0x0ffffffe
    3b18:	5084110c 	.word	0x5084110c
    3b1c:	50841138 	.word	0x50841138
    3b20:	aaaaaaab 	.word	0xaaaaaaab
    3b24:	508411d8 	.word	0x508411d8
    3b28:	00f10c36 	.word	0x00f10c36

00003b2c <LLF_RND_GetTrngSource>:
    3b2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3b30:	4c1b      	ldr	r4, [pc, #108]	; (3ba0 <LLF_RND_GetTrngSource+0x74>)
    3b32:	b085      	sub	sp, #20
    3b34:	4607      	mov	r7, r0
    3b36:	e9dd 560d 	ldrd	r5, r6, [sp, #52]	; 0x34
    3b3a:	4688      	mov	r8, r1
    3b3c:	6820      	ldr	r0, [r4, #0]
    3b3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3b42:	4691      	mov	r9, r2
    3b44:	f7ff fa10 	bl	2f68 <CC_PalMutexLock>
    3b48:	bb28      	cbnz	r0, 3b96 <LLF_RND_GetTrngSource+0x6a>
    3b4a:	2000      	movs	r0, #0
    3b4c:	f7ff fa3c 	bl	2fc8 <CC_PalPowerSaveModeSelect>
    3b50:	b9e8      	cbnz	r0, 3b8e <LLF_RND_GetTrngSource+0x62>
    3b52:	2300      	movs	r3, #0
    3b54:	e9cd 5600 	strd	r5, r6, [sp]
    3b58:	9302      	str	r3, [sp, #8]
    3b5a:	464a      	mov	r2, r9
    3b5c:	4641      	mov	r1, r8
    3b5e:	4638      	mov	r0, r7
    3b60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3b62:	f7ff fd8b 	bl	367c <getTrngSource>
    3b66:	4605      	mov	r5, r0
    3b68:	2001      	movs	r0, #1
    3b6a:	f7ff fa2d 	bl	2fc8 <CC_PalPowerSaveModeSelect>
    3b6e:	b950      	cbnz	r0, 3b86 <LLF_RND_GetTrngSource+0x5a>
    3b70:	6820      	ldr	r0, [r4, #0]
    3b72:	f7ff fa01 	bl	2f78 <CC_PalMutexUnlock>
    3b76:	b110      	cbz	r0, 3b7e <LLF_RND_GetTrngSource+0x52>
    3b78:	480a      	ldr	r0, [pc, #40]	; (3ba4 <LLF_RND_GetTrngSource+0x78>)
    3b7a:	f7ff fb8d 	bl	3298 <CC_PalAbort>
    3b7e:	4628      	mov	r0, r5
    3b80:	b005      	add	sp, #20
    3b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3b86:	4808      	ldr	r0, [pc, #32]	; (3ba8 <LLF_RND_GetTrngSource+0x7c>)
    3b88:	f7ff fb86 	bl	3298 <CC_PalAbort>
    3b8c:	e7f0      	b.n	3b70 <LLF_RND_GetTrngSource+0x44>
    3b8e:	4807      	ldr	r0, [pc, #28]	; (3bac <LLF_RND_GetTrngSource+0x80>)
    3b90:	f7ff fb82 	bl	3298 <CC_PalAbort>
    3b94:	e7dd      	b.n	3b52 <LLF_RND_GetTrngSource+0x26>
    3b96:	4806      	ldr	r0, [pc, #24]	; (3bb0 <LLF_RND_GetTrngSource+0x84>)
    3b98:	f7ff fb7e 	bl	3298 <CC_PalAbort>
    3b9c:	e7d5      	b.n	3b4a <LLF_RND_GetTrngSource+0x1e>
    3b9e:	bf00      	nop
    3ba0:	20000064 	.word	0x20000064
    3ba4:	00004a88 	.word	0x00004a88
    3ba8:	00004ac0 	.word	0x00004ac0
    3bac:	00004aa0 	.word	0x00004aa0
    3bb0:	00004a70 	.word	0x00004a70

00003bb4 <LLF_RND_RunTrngStartupTest>:
    3bb4:	b510      	push	{r4, lr}
    3bb6:	2401      	movs	r4, #1
    3bb8:	b086      	sub	sp, #24
    3bba:	ab05      	add	r3, sp, #20
    3bbc:	e9cd 2401 	strd	r2, r4, [sp, #4]
    3bc0:	9300      	str	r3, [sp, #0]
    3bc2:	2200      	movs	r2, #0
    3bc4:	ab04      	add	r3, sp, #16
    3bc6:	f7ff fd59 	bl	367c <getTrngSource>
    3bca:	b006      	add	sp, #24
    3bcc:	bd10      	pop	{r4, pc}
    3bce:	bf00      	nop

00003bd0 <LLF_RND_WaitRngInterrupt>:
    3bd0:	b508      	push	{r3, lr}
    3bd2:	4601      	mov	r1, r0
    3bd4:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3bd8:	f7ff fa50 	bl	307c <CC_HalWaitInterruptRND>
    3bdc:	2300      	movs	r3, #0
    3bde:	4902      	ldr	r1, [pc, #8]	; (3be8 <LLF_RND_WaitRngInterrupt+0x18>)
    3be0:	4a02      	ldr	r2, [pc, #8]	; (3bec <LLF_RND_WaitRngInterrupt+0x1c>)
    3be2:	600b      	str	r3, [r1, #0]
    3be4:	6013      	str	r3, [r2, #0]
    3be6:	bd08      	pop	{r3, pc}
    3be8:	508411c8 	.word	0x508411c8
    3bec:	5084112c 	.word	0x5084112c

00003bf0 <LLF_RND_GetRoscSampleCnt>:
    3bf0:	3801      	subs	r0, #1
    3bf2:	2807      	cmp	r0, #7
    3bf4:	d815      	bhi.n	3c22 <LLF_RND_GetRoscSampleCnt+0x32>
    3bf6:	e8df f000 	tbb	[pc, r0]
    3bfa:	0c10      	.short	0x0c10
    3bfc:	14140814 	.word	0x14140814
    3c00:	0414      	.short	0x0414
    3c02:	68cb      	ldr	r3, [r1, #12]
    3c04:	2000      	movs	r0, #0
    3c06:	624b      	str	r3, [r1, #36]	; 0x24
    3c08:	4770      	bx	lr
    3c0a:	688b      	ldr	r3, [r1, #8]
    3c0c:	2000      	movs	r0, #0
    3c0e:	624b      	str	r3, [r1, #36]	; 0x24
    3c10:	4770      	bx	lr
    3c12:	684b      	ldr	r3, [r1, #4]
    3c14:	2000      	movs	r0, #0
    3c16:	624b      	str	r3, [r1, #36]	; 0x24
    3c18:	4770      	bx	lr
    3c1a:	680b      	ldr	r3, [r1, #0]
    3c1c:	2000      	movs	r0, #0
    3c1e:	624b      	str	r3, [r1, #36]	; 0x24
    3c20:	4770      	bx	lr
    3c22:	4801      	ldr	r0, [pc, #4]	; (3c28 <LLF_RND_GetRoscSampleCnt+0x38>)
    3c24:	4770      	bx	lr
    3c26:	bf00      	nop
    3c28:	00f10c31 	.word	0x00f10c31

00003c2c <LLF_RND_GetFastestRosc>:
    3c2c:	680b      	ldr	r3, [r1, #0]
    3c2e:	e002      	b.n	3c36 <LLF_RND_GetFastestRosc+0xa>
    3c30:	2b08      	cmp	r3, #8
    3c32:	600b      	str	r3, [r1, #0]
    3c34:	d806      	bhi.n	3c44 <LLF_RND_GetFastestRosc+0x18>
    3c36:	6a02      	ldr	r2, [r0, #32]
    3c38:	4213      	tst	r3, r2
    3c3a:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3c3e:	d0f7      	beq.n	3c30 <LLF_RND_GetFastestRosc+0x4>
    3c40:	2000      	movs	r0, #0
    3c42:	4770      	bx	lr
    3c44:	4800      	ldr	r0, [pc, #0]	; (3c48 <LLF_RND_GetFastestRosc+0x1c>)
    3c46:	4770      	bx	lr
    3c48:	00f10c31 	.word	0x00f10c31

00003c4c <LLF_RND_TurnOffTrng>:
    3c4c:	2300      	movs	r3, #0
    3c4e:	4904      	ldr	r1, [pc, #16]	; (3c60 <LLF_RND_TurnOffTrng+0x14>)
    3c50:	4a04      	ldr	r2, [pc, #16]	; (3c64 <LLF_RND_TurnOffTrng+0x18>)
    3c52:	600b      	str	r3, [r1, #0]
    3c54:	f44f 6080 	mov.w	r0, #1024	; 0x400
    3c58:	6013      	str	r3, [r2, #0]
    3c5a:	f7ff b9fb 	b.w	3054 <CC_HalClearInterruptBit>
    3c5e:	bf00      	nop
    3c60:	5084112c 	.word	0x5084112c
    3c64:	508411c4 	.word	0x508411c4

00003c68 <main>:
 *  0 kB  |---------------------|
 */


void main(void)
{
    3c68:	b508      	push	{r3, lr}
	spm_config();
    3c6a:	f7fd f8f5 	bl	e58 <spm_config>
	spm_jump();
}
    3c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	spm_jump();
    3c72:	f7fd b887 	b.w	d84 <spm_jump>

00003c76 <arch_printk_char_out>:
}
    3c76:	2000      	movs	r0, #0
    3c78:	4770      	bx	lr

00003c7a <print_err>:
{
    3c7a:	b570      	push	{r4, r5, r6, lr}
    3c7c:	460d      	mov	r5, r1
    3c7e:	4604      	mov	r4, r0
	out('E', ctx);
    3c80:	2045      	movs	r0, #69	; 0x45
    3c82:	47a0      	blx	r4
	out('R', ctx);
    3c84:	4629      	mov	r1, r5
    3c86:	2052      	movs	r0, #82	; 0x52
    3c88:	47a0      	blx	r4
	out('R', ctx);
    3c8a:	4629      	mov	r1, r5
    3c8c:	4623      	mov	r3, r4
}
    3c8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    3c92:	2052      	movs	r0, #82	; 0x52
    3c94:	4718      	bx	r3

00003c96 <printk>:
{
    3c96:	b40f      	push	{r0, r1, r2, r3}
    3c98:	b507      	push	{r0, r1, r2, lr}
    3c9a:	a904      	add	r1, sp, #16
    3c9c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    3ca0:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    3ca2:	f7fc fe6b 	bl	97c <vprintk>
}
    3ca6:	b003      	add	sp, #12
    3ca8:	f85d eb04 	ldr.w	lr, [sp], #4
    3cac:	b004      	add	sp, #16
    3cae:	4770      	bx	lr

00003cb0 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3cb0:	4604      	mov	r4, r0
    3cb2:	b508      	push	{r3, lr}
    3cb4:	4608      	mov	r0, r1
    3cb6:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    3cb8:	461a      	mov	r2, r3
    3cba:	47a0      	blx	r4
	return z_impl_k_current_get();
    3cbc:	f7fe ff2c 	bl	2b18 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    3cc0:	f7fd fd24 	bl	170c <z_impl_k_thread_abort>

00003cc4 <chunk_field>:
}

static inline size_t chunk_field(struct z_heap *h, chunkid_t c,
				 enum chunk_fields f)
{
	void *cmem = &h->buf[c];
    3cc4:	6803      	ldr	r3, [r0, #0]
    3cc6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3

	if (big_heap(h)) {
    3cca:	6883      	ldr	r3, [r0, #8]
    3ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((u32_t *)cmem)[f];
    3cd0:	bf2c      	ite	cs
    3cd2:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((u16_t *)cmem)[f];
    3cd6:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    3cda:	4770      	bx	lr

00003cdc <chunk_set>:

static inline void chunk_set(struct z_heap *h, chunkid_t c,
			     enum chunk_fields f, chunkid_t val)
{
    3cdc:	b510      	push	{r4, lr}
	CHECK(c >= h->chunk0 && c < h->len);
	CHECK((val & ~((h->size_mask << 1) + 1)) == 0);
	CHECK((val & h->size_mask) < h->len);

	void *cmem = &h->buf[c];
    3cde:	6804      	ldr	r4, [r0, #0]

	if (big_heap(h)) {
    3ce0:	6880      	ldr	r0, [r0, #8]
	void *cmem = &h->buf[c];
    3ce2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
	if (big_heap(h)) {
    3ce6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		((u32_t *)cmem)[f] = (u32_t) val;
    3cea:	bf2c      	ite	cs
    3cec:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		((u16_t *)cmem)[f] = (u16_t) val;
    3cf0:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    3cf4:	bd10      	pop	{r4, pc}

00003cf6 <free_list_add>:
		chunk_set(h, second, FREE_PREV, first);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    3cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3cfa:	4604      	mov	r4, r0
	return (chunk_field(h, c, SIZE_AND_USED) & ~h->size_mask) != 0;
}

static ALWAYS_INLINE chunkid_t size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    3cfc:	2200      	movs	r2, #0
    3cfe:	460d      	mov	r5, r1
    3d00:	f7ff ffe0 	bl	3cc4 <chunk_field>
    3d04:	68e2      	ldr	r2, [r4, #12]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3d06:	68a3      	ldr	r3, [r4, #8]
	return chunk_field(h, c, SIZE_AND_USED) & h->size_mask;
    3d08:	4010      	ands	r0, r2
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
}

static int bucket_idx(struct z_heap *h, size_t sz)
{
	/* A chunk of size 2 is the minimum size on big heaps */
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    3d0e:	fab0 f280 	clz	r2, r0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3d12:	bf34      	ite	cc
    3d14:	2000      	movcc	r0, #0
    3d16:	2001      	movcs	r0, #1
	int b = bucket_idx(h, size(h, c));

	if (h->buckets[b].list_size++ == 0) {
    3d18:	6863      	ldr	r3, [r4, #4]
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    3d1a:	f1c0 001f 	rsb	r0, r0, #31
    3d1e:	1a80      	subs	r0, r0, r2
    3d20:	eb03 01c0 	add.w	r1, r3, r0, lsl #3
    3d24:	684a      	ldr	r2, [r1, #4]
    3d26:	1c56      	adds	r6, r2, #1
    3d28:	604e      	str	r6, [r1, #4]
    3d2a:	b9a2      	cbnz	r2, 3d56 <free_list_add+0x60>
		CHECK(h->buckets[b].next == 0);
		CHECK((h->avail_buckets & (1 << b)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << b);
    3d2c:	2201      	movs	r2, #1
    3d2e:	fa02 f100 	lsl.w	r1, r2, r0
    3d32:	6962      	ldr	r2, [r4, #20]
    3d34:	430a      	orrs	r2, r1
    3d36:	6162      	str	r2, [r4, #20]
		h->buckets[b].next = c;
		chunk_set(h, c, FREE_PREV, c);
    3d38:	4629      	mov	r1, r5
		h->buckets[b].next = c;
    3d3a:	f843 5030 	str.w	r5, [r3, r0, lsl #3]
		chunk_set(h, c, FREE_PREV, c);
    3d3e:	2202      	movs	r2, #2
    3d40:	462b      	mov	r3, r5
    3d42:	4620      	mov	r0, r4
    3d44:	f7ff ffca 	bl	3cdc <chunk_set>
		chunk_set(h, c, FREE_NEXT, c);
    3d48:	2203      	movs	r2, #3
    3d4a:	4629      	mov	r1, r5
		chunkid_t first = free_prev(h, second);

		chunk_set(h, c, FREE_PREV, first);
		chunk_set(h, c, FREE_NEXT, second);
		chunk_set(h, first, FREE_NEXT, c);
		chunk_set(h, second, FREE_PREV, c);
    3d4c:	4620      	mov	r0, r4
	}

	CHECK(h->avail_buckets & (1 << bucket_idx(h, size(h, c))));
}
    3d4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		chunk_set(h, second, FREE_PREV, c);
    3d52:	f7ff bfc3 	b.w	3cdc <chunk_set>
		chunkid_t second = h->buckets[b].next;
    3d56:	f853 7030 	ldr.w	r7, [r3, r0, lsl #3]
	return chunk_field(h, c, FREE_PREV);
    3d5a:	2202      	movs	r2, #2
    3d5c:	4639      	mov	r1, r7
    3d5e:	4620      	mov	r0, r4
    3d60:	f7ff ffb0 	bl	3cc4 <chunk_field>
    3d64:	4606      	mov	r6, r0
		chunk_set(h, c, FREE_PREV, first);
    3d66:	4603      	mov	r3, r0
    3d68:	2202      	movs	r2, #2
    3d6a:	4629      	mov	r1, r5
    3d6c:	4620      	mov	r0, r4
    3d6e:	f7ff ffb5 	bl	3cdc <chunk_set>
		chunk_set(h, c, FREE_NEXT, second);
    3d72:	463b      	mov	r3, r7
    3d74:	2203      	movs	r2, #3
    3d76:	4629      	mov	r1, r5
    3d78:	4620      	mov	r0, r4
    3d7a:	f7ff ffaf 	bl	3cdc <chunk_set>
		chunk_set(h, first, FREE_NEXT, c);
    3d7e:	2203      	movs	r2, #3
    3d80:	4631      	mov	r1, r6
    3d82:	462b      	mov	r3, r5
    3d84:	4620      	mov	r0, r4
    3d86:	f7ff ffa9 	bl	3cdc <chunk_set>
		chunk_set(h, second, FREE_PREV, c);
    3d8a:	2202      	movs	r2, #2
    3d8c:	4639      	mov	r1, r7
    3d8e:	e7dd      	b.n	3d4c <free_list_add+0x56>

00003d90 <sys_heap_init>:

	return NULL;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    3d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CHECK(bytes < 0x800000000ULL);
#endif

	/* Round the start up, the end down */
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    3d92:	188b      	adds	r3, r1, r2

	heap->heap = (struct z_heap *)addr;
	h->buf = (u64_t *)addr;
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
	h->len = buf_sz;
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    3d94:	f647 72ff 	movw	r2, #32767	; 0x7fff
	size_t addr = ((size_t)mem + CHUNK_UNIT - 1) & ~(CHUNK_UNIT - 1);
    3d98:	1dcc      	adds	r4, r1, #7
    3d9a:	f024 0407 	bic.w	r4, r4, #7
	size_t end = ((size_t)mem + bytes) & ~(CHUNK_UNIT - 1);
    3d9e:	f023 0307 	bic.w	r3, r3, #7
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    3da2:	1b1b      	subs	r3, r3, r4
    3da4:	08db      	lsrs	r3, r3, #3
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    3da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    3daa:	bf2c      	ite	cs
    3dac:	f06f 4100 	mvncs.w	r1, #2147483648	; 0x80000000
    3db0:	4611      	movcc	r1, r2
	heap->heap = (struct z_heap *)addr;
    3db2:	6004      	str	r4, [r0, #0]
	h->avail_buckets = 0;
    3db4:	2000      	movs	r0, #0
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3db6:	4293      	cmp	r3, r2
	h->size_mask = (1 << (big_heap(h) ? 31 : 15)) - 1;
    3db8:	60e1      	str	r1, [r4, #12]
    3dba:	bf94      	ite	ls
    3dbc:	2100      	movls	r1, #0
    3dbe:	2101      	movhi	r1, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    3dc0:	fab3 f683 	clz	r6, r3
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3dc4:	4617      	mov	r7, r2
				* sizeof(struct z_heap_bucket));

	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);

	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
		heap->heap->buckets[i].list_size = 0;
    3dc6:	4684      	mov	ip, r0
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    3dc8:	f1c1 0120 	rsb	r1, r1, #32
	h->buckets = (void *)(addr + CHUNK_UNIT * hdr_chunks);
    3dcc:	f104 0518 	add.w	r5, r4, #24
	size_t buckets_bytes = ((bucket_idx(h, buf_sz) + 1)
    3dd0:	1b89      	subs	r1, r1, r6
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
    3dd2:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
	h->len = buf_sz;
    3dd6:	e9c4 5301 	strd	r5, r3, [r4, #4]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    3dda:	3103      	adds	r1, #3
	h->buf = (u64_t *)addr;
    3ddc:	6024      	str	r4, [r4, #0]
	h->avail_buckets = 0;
    3dde:	6160      	str	r0, [r4, #20]
	h->chunk0 = hdr_chunks + chunksz(buckets_bytes);
    3de0:	6121      	str	r1, [r4, #16]
	return sizeof(size_t) > 4 || h->len > 0x7fff;
    3de2:	68a2      	ldr	r2, [r4, #8]
    3de4:	42ba      	cmp	r2, r7
    3de6:	bf94      	ite	ls
    3de8:	2200      	movls	r2, #0
    3dea:	2201      	movhi	r2, #1
	return 31 - __builtin_clz(sz) - (big_heap(h) ? 1 : 0);
    3dec:	f1c2 021f 	rsb	r2, r2, #31
    3df0:	1b92      	subs	r2, r2, r6
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    3df2:	4290      	cmp	r0, r2
    3df4:	dd0a      	ble.n	3e0c <sys_heap_init+0x7c>
		heap->heap->buckets[i].next = 0;
	}

	chunk_set(h, h->chunk0, SIZE_AND_USED, buf_sz - h->chunk0);
    3df6:	4620      	mov	r0, r4
    3df8:	1a5b      	subs	r3, r3, r1
    3dfa:	2200      	movs	r2, #0
    3dfc:	f7ff ff6e 	bl	3cdc <chunk_set>
	free_list_add(h, h->chunk0);
    3e00:	4620      	mov	r0, r4
    3e02:	6921      	ldr	r1, [r4, #16]
}
    3e04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, h->chunk0);
    3e08:	f7ff bf75 	b.w	3cf6 <free_list_add>
		heap->heap->buckets[i].list_size = 0;
    3e0c:	f8c5 c004 	str.w	ip, [r5, #4]
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    3e10:	3001      	adds	r0, #1
		heap->heap->buckets[i].next = 0;
    3e12:	f845 cb08 	str.w	ip, [r5], #8
	for (int i = 0; i <= bucket_idx(heap->heap, heap->heap->len); i++) {
    3e16:	e7e4      	b.n	3de2 <sys_heap_init+0x52>

00003e18 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3e18:	4770      	bx	lr

00003e1a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    3e1a:	f7fe b81d 	b.w	1e58 <SystemInit>

00003e1e <get_status>:
	if (data->started) {
    3e1e:	220c      	movs	r2, #12
	data = get_sub_data(dev, type);
    3e20:	68c3      	ldr	r3, [r0, #12]
	return &data->subsys[type];
    3e22:	b2c9      	uxtb	r1, r1
	if (data->started) {
    3e24:	fb02 3101 	mla	r1, r2, r1, r3
    3e28:	7a4b      	ldrb	r3, [r1, #9]
    3e2a:	b923      	cbnz	r3, 3e36 <get_status+0x18>
	if (data->ref > 0) {
    3e2c:	7a08      	ldrb	r0, [r1, #8]
		return CLOCK_CONTROL_STATUS_ON;
    3e2e:	fab0 f080 	clz	r0, r0
    3e32:	0940      	lsrs	r0, r0, #5
    3e34:	4770      	bx	lr
    3e36:	2002      	movs	r0, #2
}
    3e38:	4770      	bx	lr

00003e3a <clock_stop>:
{
    3e3a:	b570      	push	{r4, r5, r6, lr}
    3e3c:	b2c9      	uxtb	r1, r1
	config = get_sub_config(dev, type);
    3e3e:	6844      	ldr	r4, [r0, #4]
	data = get_sub_data(dev, type);
    3e40:	68c5      	ldr	r5, [r0, #12]
	__asm__ volatile(
    3e42:	f04f 0320 	mov.w	r3, #32
    3e46:	f3ef 8611 	mrs	r6, BASEPRI
    3e4a:	f383 8811 	msr	BASEPRI, r3
    3e4e:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    3e52:	220c      	movs	r2, #12
    3e54:	434a      	muls	r2, r1
    3e56:	18ab      	adds	r3, r5, r2
    3e58:	7a18      	ldrb	r0, [r3, #8]
    3e5a:	b190      	cbz	r0, 3e82 <clock_stop+0x48>
	data->ref--;
    3e5c:	3801      	subs	r0, #1
    3e5e:	b2c0      	uxtb	r0, r0
    3e60:	7218      	strb	r0, [r3, #8]
	if (data->ref == 0) {
    3e62:	b988      	cbnz	r0, 3e88 <clock_stop+0x4e>
		nrf_clock_task_trigger(NRF_CLOCK, config->stop_tsk);
    3e64:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	list->head = NULL;
    3e68:	50a8      	str	r0, [r5, r2]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e6a:	78ca      	ldrb	r2, [r1, #3]
    3e6c:	2101      	movs	r1, #1
    3e6e:	f102 2250 	add.w	r2, r2, #1342197760	; 0x50005000
	list->tail = NULL;
    3e72:	6058      	str	r0, [r3, #4]
    3e74:	6011      	str	r1, [r2, #0]
		data->started = false;
    3e76:	7258      	strb	r0, [r3, #9]
	__asm__ volatile(
    3e78:	f386 8811 	msr	BASEPRI, r6
    3e7c:	f3bf 8f6f 	isb	sy
}
    3e80:	bd70      	pop	{r4, r5, r6, pc}
		err = -EALREADY;
    3e82:	f06f 0044 	mvn.w	r0, #68	; 0x44
    3e86:	e7f7      	b.n	3e78 <clock_stop+0x3e>
	int err = 0;
    3e88:	2000      	movs	r0, #0
    3e8a:	e7f5      	b.n	3e78 <clock_stop+0x3e>

00003e8c <clock_async_start>:
{
    3e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	config = get_sub_config(dev, type);
    3e90:	6846      	ldr	r6, [r0, #4]
	clk_data = get_sub_data(dev, type);
    3e92:	f8d0 e00c 	ldr.w	lr, [r0, #12]
    3e96:	b2cf      	uxtb	r7, r1
	if ((data != NULL)
    3e98:	b14a      	cbz	r2, 3eae <clock_async_start+0x22>
	sys_snode_t *item = sys_slist_peek_head(list);
    3e9a:	230c      	movs	r3, #12
    3e9c:	437b      	muls	r3, r7
    3e9e:	f85e 3003 	ldr.w	r3, [lr, r3]
		if (item == node) {
    3ea2:	429a      	cmp	r2, r3
    3ea4:	d052      	beq.n	3f4c <clock_async_start+0xc0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    3ea6:	b113      	cbz	r3, 3eae <clock_async_start+0x22>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3ea8:	681b      	ldr	r3, [r3, #0]
	} while (item);
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d1f9      	bne.n	3ea2 <clock_async_start+0x16>
	__asm__ volatile(
    3eae:	f04f 0320 	mov.w	r3, #32
    3eb2:	f3ef 8c11 	mrs	ip, BASEPRI
    3eb6:	f383 8811 	msr	BASEPRI, r3
    3eba:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    3ebe:	250c      	movs	r5, #12
    3ec0:	437d      	muls	r5, r7
    3ec2:	eb0e 0305 	add.w	r3, lr, r5
    3ec6:	7a1c      	ldrb	r4, [r3, #8]
    3ec8:	3401      	adds	r4, #1
    3eca:	b2e4      	uxtb	r4, r4
    3ecc:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    3ece:	f38c 8811 	msr	BASEPRI, ip
    3ed2:	f3bf 8f6f 	isb	sy
	if (data) {
    3ed6:	b35a      	cbz	r2, 3f30 <clock_async_start+0xa4>
    p_reg->INTENCLR = mask;
    3ed8:	f04f 2c50 	mov.w	ip, #1342197760	; 0x50005000
    3edc:	f04f 0803 	mov.w	r8, #3
    3ee0:	f8cc 8308 	str.w	r8, [ip, #776]	; 0x308
		already_started = clk_data->started;
    3ee4:	f893 c009 	ldrb.w	ip, [r3, #9]
		if (!already_started) {
    3ee8:	f1bc 0f00 	cmp.w	ip, #0
    3eec:	d115      	bne.n	3f1a <clock_async_start+0x8e>
	__asm__ volatile(
    3eee:	f04f 0820 	mov.w	r8, #32
    3ef2:	f3ef 8911 	mrs	r9, BASEPRI
    3ef6:	f388 8811 	msr	BASEPRI, r8
    3efa:	f3bf 8f6f 	isb	sy
	parent->next = child;
    3efe:	f8c2 c000 	str.w	ip, [r2]
Z_GENLIST_APPEND(slist, snode)
    3f02:	f8d3 8004 	ldr.w	r8, [r3, #4]
    3f06:	f1b8 0f00 	cmp.w	r8, #0
    3f0a:	d11b      	bne.n	3f44 <clock_async_start+0xb8>
	list->tail = node;
    3f0c:	605a      	str	r2, [r3, #4]
	list->head = node;
    3f0e:	f84e 2005 	str.w	r2, [lr, r5]
	__asm__ volatile(
    3f12:	f389 8811 	msr	BASEPRI, r9
    3f16:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    3f1a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3f1e:	2503      	movs	r5, #3
    3f20:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
		if (already_started) {
    3f24:	f1bc 0f00 	cmp.w	ip, #0
    3f28:	d002      	beq.n	3f30 <clock_async_start+0xa4>
			data->cb(dev, subsys, data->user_data);
    3f2a:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
    3f2e:	4798      	blx	r3
	if (ref == 1) {
    3f30:	2c01      	cmp	r4, #1
    3f32:	d105      	bne.n	3f40 <clock_async_start+0xb4>
		nrf_clock_task_trigger(NRF_CLOCK, config->start_tsk);
    3f34:	eb06 0687 	add.w	r6, r6, r7, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f38:	78b3      	ldrb	r3, [r6, #2]
    3f3a:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    3f3e:	601c      	str	r4, [r3, #0]
	return 0;
    3f40:	2000      	movs	r0, #0
    3f42:	e005      	b.n	3f50 <clock_async_start+0xc4>
	parent->next = child;
    3f44:	f8c8 2000 	str.w	r2, [r8]
	list->tail = node;
    3f48:	605a      	str	r2, [r3, #4]
}
    3f4a:	e7e2      	b.n	3f12 <clock_async_start+0x86>
		return -EBUSY;
    3f4c:	f06f 000f 	mvn.w	r0, #15
}
    3f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00003f54 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    3f54:	2200      	movs	r2, #0
    3f56:	f7ff bf99 	b.w	3e8c <clock_async_start>

00003f5a <clk_init>:
{
    3f5a:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3f5c:	2200      	movs	r2, #0
{
    3f5e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3f60:	2101      	movs	r1, #1
    3f62:	2005      	movs	r0, #5
    3f64:	f7fd f9ca 	bl	12fc <z_arm_irq_priority_set>
	irq_enable(DT_INST_IRQN(0));
    3f68:	2005      	movs	r0, #5
    3f6a:	f7fd f9b7 	bl	12dc <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    3f6e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3f72:	2202      	movs	r2, #2
    3f74:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    3f78:	2203      	movs	r2, #3
	list->head = NULL;
    3f7a:	2000      	movs	r0, #0
    3f7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		sys_slist_init(&(get_sub_data(dev, i)->list));
    3f80:	68e3      	ldr	r3, [r4, #12]
	list->tail = NULL;
    3f82:	e9c3 0000 	strd	r0, r0, [r3]
    3f86:	68e3      	ldr	r3, [r4, #12]
    3f88:	e9c3 0003 	strd	r0, r0, [r3, #12]
}
    3f8c:	bd10      	pop	{r4, pc}

00003f8e <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    3f8e:	4770      	bx	lr

00003f90 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    3f90:	4770      	bx	lr

00003f92 <spm_secure_services_init>:
	mbedtls_platform_context platform_ctx = {0};
    3f92:	2300      	movs	r3, #0
{
    3f94:	b507      	push	{r0, r1, r2, lr}
	err = mbedtls_platform_setup(&platform_ctx);
    3f96:	a801      	add	r0, sp, #4
	mbedtls_platform_context platform_ctx = {0};
    3f98:	f88d 3004 	strb.w	r3, [sp, #4]
	err = mbedtls_platform_setup(&platform_ctx);
    3f9c:	f7ff f88c 	bl	30b8 <mbedtls_platform_setup>
}
    3fa0:	b003      	add	sp, #12
    3fa2:	f85d fb04 	ldr.w	pc, [sp], #4

00003fa6 <__acle_se_spm_request_random_number>:
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    3fa6:	2990      	cmp	r1, #144	; 0x90
{
    3fa8:	b508      	push	{r3, lr}
    3faa:	4613      	mov	r3, r2
	if (len != MBEDTLS_ENTROPY_MAX_GATHER) {
    3fac:	d139      	bne.n	4022 <__acle_se_spm_request_random_number+0x7c>
	err = mbedtls_hardware_poll(NULL, output, len, olen);
    3fae:	460a      	mov	r2, r1
    3fb0:	4601      	mov	r1, r0
    3fb2:	2000      	movs	r0, #0
    3fb4:	f7ff f88c 	bl	30d0 <mbedtls_hardware_poll>
}
    3fb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3fbc:	4671      	mov	r1, lr
    3fbe:	4672      	mov	r2, lr
    3fc0:	4673      	mov	r3, lr
    3fc2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    3fc6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    3fca:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    3fce:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    3fd2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    3fd6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
    3fda:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    3fde:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    3fe2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
    3fe6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
    3fea:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    3fee:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    3ff2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    3ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    3ffa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3ffe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4002:	f38e 8c00 	msr	CPSR_fs, lr
    4006:	b410      	push	{r4}
    4008:	eef1 ca10 	vmrs	ip, fpscr
    400c:	f64f 7460 	movw	r4, #65376	; 0xff60
    4010:	f6c0 74ff 	movt	r4, #4095	; 0xfff
    4014:	ea0c 0c04 	and.w	ip, ip, r4
    4018:	eee1 ca10 	vmsr	fpscr, ip
    401c:	bc10      	pop	{r4}
    401e:	46f4      	mov	ip, lr
    4020:	4774      	bxns	lr
		return -EINVAL;
    4022:	f06f 0015 	mvn.w	r0, #21
    4026:	e7c7      	b.n	3fb8 <__acle_se_spm_request_random_number+0x12>

00004028 <abort_function>:
	while(1);
    4028:	e7fe      	b.n	4028 <abort_function>

0000402a <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    402a:	2100      	movs	r1, #0
    402c:	2001      	movs	r0, #1
    402e:	f000 b829 	b.w	4084 <z_arm_fatal_error>

00004032 <irq_target_state_set>:
 *
 * @return N/A
 */
void irq_target_state_set(unsigned int irq, int secure_state)
{
	if (secure_state) {
    4032:	b243      	sxtb	r3, r0
    4034:	b1a9      	cbz	r1, 4062 <irq_target_state_set+0x30>
  if ((int32_t)(IRQn) >= 0)
    4036:	2b00      	cmp	r3, #0
    4038:	db12      	blt.n	4060 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    403a:	2101      	movs	r1, #1
    403c:	095b      	lsrs	r3, r3, #5
    403e:	009b      	lsls	r3, r3, #2
    4040:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4044:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4048:	f8d3 2280 	ldr.w	r2, [r3, #640]	; 0x280
    404c:	f000 001f 	and.w	r0, r0, #31
    4050:	fa01 f000 	lsl.w	r0, r1, r0
    4054:	ea22 0000 	bic.w	r0, r2, r0
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    4058:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
    return((uint32_t)(((NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
    405c:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
		/* Set target state to Non-Secure */
		if (NVIC_SetTargetState(irq) != 1) {
			__ASSERT(0, "NVIC SetTargetState error");
		}
	}
}
    4060:	4770      	bx	lr
  if ((int32_t)(IRQn) >= 0)
    4062:	2b00      	cmp	r3, #0
    4064:	dbfc      	blt.n	4060 <irq_target_state_set+0x2e>
    NVIC->ITNS[(((uint32_t)IRQn) >> 5UL)] |=  ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));
    4066:	2201      	movs	r2, #1
    4068:	095b      	lsrs	r3, r3, #5
    406a:	009b      	lsls	r3, r3, #2
    406c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4070:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4074:	f8d3 1280 	ldr.w	r1, [r3, #640]	; 0x280
    4078:	f000 001f 	and.w	r0, r0, #31
    407c:	fa02 f000 	lsl.w	r0, r2, r0
    4080:	4308      	orrs	r0, r1
    4082:	e7e9      	b.n	4058 <irq_target_state_set+0x26>

00004084 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4084:	f000 b927 	b.w	42d6 <z_fatal_error>

00004088 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4088:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    408a:	6800      	ldr	r0, [r0, #0]
    408c:	f000 b923 	b.w	42d6 <z_fatal_error>

00004090 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4090:	b508      	push	{r3, lr}
	handler();
    4092:	f7fd f995 	bl	13c0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    409a:	f7fd bb0b 	b.w	16b4 <z_arm_exc_exit>

0000409e <mpu_configure_region>:
{
    409e:	b530      	push	{r4, r5, lr}
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    40a0:	684b      	ldr	r3, [r1, #4]
	region_conf.base = new_region->start;
    40a2:	680c      	ldr	r4, [r1, #0]
{
    40a4:	b085      	sub	sp, #20
	p_attr->rbar = attr->rbar &
    40a6:	890a      	ldrh	r2, [r1, #8]
    40a8:	7a8d      	ldrb	r5, [r1, #10]
	region_conf.base = new_region->start;
    40aa:	9400      	str	r4, [sp, #0]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    40ac:	3b01      	subs	r3, #1
    40ae:	f024 041f 	bic.w	r4, r4, #31
    40b2:	4423      	add	r3, r4
	p_attr->rbar = attr->rbar &
    40b4:	f002 021f 	and.w	r2, r2, #31
    40b8:	ea42 1245 	orr.w	r2, r2, r5, lsl #5
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    40bc:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1)) {
    40c0:	280f      	cmp	r0, #15
    40c2:	4604      	mov	r4, r0
	p_attr->rbar = attr->rbar &
    40c4:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    40c8:	9303      	str	r3, [sp, #12]
    40ca:	d805      	bhi.n	40d8 <mpu_configure_region+0x3a>
	region_init(index, region_conf);
    40cc:	4669      	mov	r1, sp
    40ce:	f7fd fb6d 	bl	17ac <region_init>
}
    40d2:	4620      	mov	r0, r4
    40d4:	b005      	add	sp, #20
    40d6:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    40d8:	f06f 0415 	mvn.w	r4, #21
	return region_allocate_and_init(index,
    40dc:	e7f9      	b.n	40d2 <mpu_configure_region+0x34>

000040de <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    40de:	e840 f000 	tt	r0, r0
    40e2:	b2c3      	uxtb	r3, r0

int arm_cmse_mpu_region_get(u32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    40e4:	f410 3f80 	tst.w	r0, #65536	; 0x10000
		return addr_info.flags.mpu_region;
	}

	return -EINVAL;
}
    40e8:	bf14      	ite	ne
    40ea:	4618      	movne	r0, r3
    40ec:	f06f 0015 	mvneq.w	r0, #21
    40f0:	4770      	bx	lr

000040f2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    40f2:	3801      	subs	r0, #1
    40f4:	3901      	subs	r1, #1
    40f6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    40fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    40fe:	4293      	cmp	r3, r2
    4100:	d101      	bne.n	4106 <strcmp+0x14>
    4102:	2b00      	cmp	r3, #0
    4104:	d1f7      	bne.n	40f6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    4106:	1a98      	subs	r0, r3, r2
    4108:	4770      	bx	lr

0000410a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
    410a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
    410c:	b15a      	cbz	r2, 4126 <memcmp+0x1c>
    410e:	3901      	subs	r1, #1
    4110:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
    4112:	f810 2b01 	ldrb.w	r2, [r0], #1
    4116:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    411a:	42a0      	cmp	r0, r4
    411c:	d001      	beq.n	4122 <memcmp+0x18>
    411e:	429a      	cmp	r2, r3
    4120:	d0f7      	beq.n	4112 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
    4122:	1ad0      	subs	r0, r2, r3
}
    4124:	bd10      	pop	{r4, pc}
		return 0;
    4126:	4610      	mov	r0, r2
    4128:	e7fc      	b.n	4124 <memcmp+0x1a>

0000412a <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (dest - src) < n) {
    412a:	1a43      	subs	r3, r0, r1
    412c:	4293      	cmp	r3, r2
{
    412e:	b510      	push	{r4, lr}
    4130:	eb00 0302 	add.w	r3, r0, r2
	if ((size_t) (dest - src) < n) {
    4134:	d308      	bcc.n	4148 <memmove+0x1e>
	char *dest = d;
    4136:	4602      	mov	r2, r0
    4138:	3901      	subs	r1, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    413a:	429a      	cmp	r2, r3
    413c:	d00b      	beq.n	4156 <memmove+0x2c>
			*dest = *src;
    413e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    4142:	f802 4b01 	strb.w	r4, [r2], #1
			dest++;
			src++;
			n--;
    4146:	e7f8      	b.n	413a <memmove+0x10>
    4148:	440a      	add	r2, r1
			dest[n] = src[n];
    414a:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
		while (n > 0) {
    414e:	428a      	cmp	r2, r1
			dest[n] = src[n];
    4150:	f803 4d01 	strb.w	r4, [r3, #-1]!
		while (n > 0) {
    4154:	d1f9      	bne.n	414a <memmove+0x20>
		}
	}

	return d;
}
    4156:	bd10      	pop	{r4, pc}

00004158 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    4158:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    415a:	ea81 0400 	eor.w	r4, r1, r0
    415e:	07a5      	lsls	r5, r4, #30
    4160:	4603      	mov	r3, r0
    4162:	d00b      	beq.n	417c <memcpy+0x24>
    4164:	3b01      	subs	r3, #1
    4166:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    4168:	4291      	cmp	r1, r2
    416a:	d11b      	bne.n	41a4 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    416c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    416e:	2a00      	cmp	r2, #0
    4170:	d0fc      	beq.n	416c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    4172:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    4176:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    4178:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    417c:	079c      	lsls	r4, r3, #30
    417e:	d1f6      	bne.n	416e <memcpy+0x16>
    4180:	f022 0403 	bic.w	r4, r2, #3
    4184:	1f1d      	subs	r5, r3, #4
    4186:	0896      	lsrs	r6, r2, #2
    4188:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    418a:	42b9      	cmp	r1, r7
    418c:	d105      	bne.n	419a <memcpy+0x42>
    418e:	f06f 0503 	mvn.w	r5, #3
    4192:	4423      	add	r3, r4
    4194:	fb05 2206 	mla	r2, r5, r6, r2
    4198:	e7e4      	b.n	4164 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    419a:	f851 cb04 	ldr.w	ip, [r1], #4
    419e:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    41a2:	e7f2      	b.n	418a <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    41a4:	f811 4b01 	ldrb.w	r4, [r1], #1
    41a8:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    41ac:	e7dc      	b.n	4168 <memcpy+0x10>

000041ae <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    41ae:	4603      	mov	r3, r0
{
    41b0:	b570      	push	{r4, r5, r6, lr}
	unsigned char c_byte = (unsigned char)c;
    41b2:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    41b4:	079c      	lsls	r4, r3, #30
    41b6:	d111      	bne.n	41dc <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    41b8:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    41bc:	f022 0603 	bic.w	r6, r2, #3
    41c0:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    41c4:	441e      	add	r6, r3
    41c6:	0894      	lsrs	r4, r2, #2
    41c8:	42b3      	cmp	r3, r6
    41ca:	d10d      	bne.n	41e8 <memset+0x3a>
    41cc:	f06f 0503 	mvn.w	r5, #3
    41d0:	fb05 2204 	mla	r2, r5, r4, r2
    41d4:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    41d6:	4293      	cmp	r3, r2
    41d8:	d109      	bne.n	41ee <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    41da:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    41dc:	2a00      	cmp	r2, #0
    41de:	d0fc      	beq.n	41da <memset+0x2c>
		*(d_byte++) = c_byte;
    41e0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    41e4:	3a01      	subs	r2, #1
    41e6:	e7e5      	b.n	41b4 <memset+0x6>
		*(d_word++) = c_word;
    41e8:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    41ec:	e7ec      	b.n	41c8 <memset+0x1a>
		*(d_byte++) = c_byte;
    41ee:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    41f2:	e7f0      	b.n	41d6 <memset+0x28>

000041f4 <_stdout_hook_default>:
}
    41f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    41f8:	4770      	bx	lr

000041fa <uarte_nrfx_config_get>:
{
    41fa:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    41fc:	68c2      	ldr	r2, [r0, #12]
    41fe:	e892 0003 	ldmia.w	r2, {r0, r1}
    4202:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4206:	2000      	movs	r0, #0
    4208:	4770      	bx	lr

0000420a <uarte_nrfx_err_check>:
	return config->uarte_regs;
    420a:	6843      	ldr	r3, [r0, #4]
    420c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    420e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4212:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4216:	4770      	bx	lr

00004218 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4218:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    421a:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    421c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    421e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4222:	b138      	cbz	r0, 4234 <uarte_nrfx_poll_in+0x1c>
	*c = data->rx_data;
    4224:	7b12      	ldrb	r2, [r2, #12]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4226:	2000      	movs	r0, #0
    4228:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    422a:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    422c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4230:	601a      	str	r2, [r3, #0]
	return 0;
    4232:	4770      	bx	lr
		return -1;
    4234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4238:	4770      	bx	lr

0000423a <uarte_nrfx_poll_out>:
{
    423a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    423e:	6843      	ldr	r3, [r0, #4]
{
    4240:	f88d 1007 	strb.w	r1, [sp, #7]
	return config->uarte_regs;
    4244:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    4246:	68c6      	ldr	r6, [r0, #12]
	if (!k_is_in_isr()) {
    4248:	f000 f953 	bl	44f2 <k_is_in_isr>
    424c:	b9c0      	cbnz	r0, 4280 <uarte_nrfx_poll_out+0x46>
    424e:	2564      	movs	r5, #100	; 0x64
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4250:	f04f 0801 	mov.w	r8, #1
    4254:	f106 0708 	add.w	r7, r6, #8
    4258:	e8d7 3fef 	ldaex	r3, [r7]
    425c:	2b00      	cmp	r3, #0
    425e:	d103      	bne.n	4268 <uarte_nrfx_poll_out+0x2e>
    4260:	e8c7 8fe2 	stlex	r2, r8, [r7]
    4264:	2a00      	cmp	r2, #0
    4266:	d1f7      	bne.n	4258 <uarte_nrfx_poll_out+0x1e>
		while (atomic_cas((atomic_t *) lock,
    4268:	d00c      	beq.n	4284 <uarte_nrfx_poll_out+0x4a>
	return z_impl_k_sleep(timeout);
    426a:	2021      	movs	r0, #33	; 0x21
    426c:	2100      	movs	r1, #0
    426e:	3d01      	subs	r5, #1
    4270:	f7fe fc32 	bl	2ad8 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
    4274:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
    4278:	d1ee      	bne.n	4258 <uarte_nrfx_poll_out+0x1e>
}
    427a:	b002      	add	sp, #8
    427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*lock = 1;
    4280:	2301      	movs	r3, #1
    4282:	60b3      	str	r3, [r6, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4284:	2300      	movs	r3, #0
    4286:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    428a:	f10d 0307 	add.w	r3, sp, #7
    428e:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4292:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4294:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    p_reg->TXD.MAXCNT = length;
    4298:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    429c:	60a3      	str	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    429e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	NRFX_WAIT_FOR(nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX),
    42a2:	b923      	cbnz	r3, 42ae <uarte_nrfx_poll_out+0x74>
    42a4:	2001      	movs	r0, #1
    42a6:	f000 f814 	bl	42d2 <nrfx_busy_wait>
    42aa:	3d01      	subs	r5, #1
    42ac:	d1f7      	bne.n	429e <uarte_nrfx_poll_out+0x64>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42ae:	2301      	movs	r3, #1
    42b0:	60e3      	str	r3, [r4, #12]
	*lock = 0;
    42b2:	2300      	movs	r3, #0
    42b4:	60b3      	str	r3, [r6, #8]
    42b6:	e7e0      	b.n	427a <uarte_nrfx_poll_out+0x40>

000042b8 <k_sys_fatal_error_handler>:
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    42b8:	2000      	movs	r0, #0
{
    42ba:	b508      	push	{r3, lr}
	sys_arch_reboot(0);
    42bc:	f7fd fa08 	bl	16d0 <sys_arch_reboot>

000042c0 <hw_cc310_init>:
#include <nrf_cc310_platform.h>

#if CONFIG_HW_CC310

static int hw_cc310_init(struct device *dev)
{
    42c0:	b508      	push	{r3, lr}
	int res;

	__ASSERT_NO_MSG(dev != NULL);

	/* Set the RTOS abort APIs */
	nrf_cc310_platform_abort_init();
    42c2:	f7fc ff23 	bl	110c <nrf_cc310_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc310_platform_mutex_init();
    42c6:	f7fc ffa5 	bl	1214 <nrf_cc310_platform_mutex_init>
	res = nrf_cc310_platform_init();
#else
	res = nrf_cc310_platform_init_no_rng();
#endif
	return res;
}
    42ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc310_platform_init_no_rng();
    42ce:	f7fe bfb7 	b.w	3240 <nrf_cc310_platform_init_no_rng>

000042d2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    42d2:	f000 b914 	b.w	44fe <z_impl_k_busy_wait>

000042d6 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    42d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    42d8:	4605      	mov	r5, r0
    42da:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
    42dc:	f04f 0320 	mov.w	r3, #32
    42e0:	f3ef 8611 	mrs	r6, BASEPRI
    42e4:	f383 8811 	msr	BASEPRI, r3
    42e8:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    42ec:	f7fe fc14 	bl	2b18 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    42f0:	9901      	ldr	r1, [sp, #4]
    42f2:	4604      	mov	r4, r0
    42f4:	4628      	mov	r0, r5
    42f6:	f7ff ffdf 	bl	42b8 <k_sys_fatal_error_handler>
	__asm__ volatile(
    42fa:	f386 8811 	msr	BASEPRI, r6
    42fe:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4302:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    4304:	b002      	add	sp, #8
    4306:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    430a:	f7fd b9ff 	b.w	170c <z_impl_k_thread_abort>

0000430e <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    430e:	f7ff be3f 	b.w	3f90 <z_clock_idle_exit>

00004312 <k_mem_slab_init>:
{
    4312:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    4314:	2400      	movs	r4, #0
    4316:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4318:	ea41 0402 	orr.w	r4, r1, r2
    431c:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    4320:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    4324:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4326:	d10c      	bne.n	4342 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    4328:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    432a:	42a3      	cmp	r3, r4
    432c:	d103      	bne.n	4336 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    432e:	e9c0 0000 	strd	r0, r0, [r0]
}
    4332:	2000      	movs	r0, #0
}
    4334:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    4336:	6945      	ldr	r5, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4338:	3401      	adds	r4, #1
		*(char **)p = slab->free_list;
    433a:	600d      	str	r5, [r1, #0]
		slab->free_list = p;
    433c:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    433e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    4340:	e7f3      	b.n	432a <k_mem_slab_init+0x18>
		return -EINVAL;
    4342:	f06f 0015 	mvn.w	r0, #21
	return rc;
    4346:	e7f5      	b.n	4334 <k_mem_slab_init+0x22>

00004348 <z_impl_k_mutex_init>:
	mutex->owner = NULL;
    4348:	2300      	movs	r3, #0
    434a:	e9c0 0000 	strd	r0, r0, [r0]
	mutex->lock_count = 0U;
    434e:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    4352:	4618      	mov	r0, r3
    4354:	4770      	bx	lr

00004356 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4356:	b921      	cbnz	r1, 4362 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4358:	f3ef 8005 	mrs	r0, IPSR
    435c:	b908      	cbnz	r0, 4362 <z_reschedule+0xc>
    435e:	f7fc bf6f 	b.w	1240 <arch_swap>
    4362:	f381 8811 	msr	BASEPRI, r1
    4366:	f3bf 8f6f 	isb	sy
}
    436a:	4770      	bx	lr

0000436c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    436c:	4603      	mov	r3, r0
    436e:	b920      	cbnz	r0, 437a <z_reschedule_irqlock+0xe>
    4370:	f3ef 8205 	mrs	r2, IPSR
    4374:	b90a      	cbnz	r2, 437a <z_reschedule_irqlock+0xe>
    4376:	f7fc bf63 	b.w	1240 <arch_swap>
    437a:	f383 8811 	msr	BASEPRI, r3
    437e:	f3bf 8f6f 	isb	sy
}
    4382:	4770      	bx	lr

00004384 <z_reschedule_unlocked>:
	__asm__ volatile(
    4384:	f04f 0320 	mov.w	r3, #32
    4388:	f3ef 8011 	mrs	r0, BASEPRI
    438c:	f383 8811 	msr	BASEPRI, r3
    4390:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4394:	f7ff bfea 	b.w	436c <z_reschedule_irqlock>

00004398 <z_priq_dumb_best>:
	return list->head == list;
    4398:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    439a:	4298      	cmp	r0, r3
    439c:	d004      	beq.n	43a8 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    439e:	2b00      	cmp	r3, #0
    43a0:	bf38      	it	cc
    43a2:	2300      	movcc	r3, #0
    43a4:	4618      	mov	r0, r3
    43a6:	4770      	bx	lr
	struct k_thread *thread = NULL;
    43a8:	2000      	movs	r0, #0
}
    43aa:	4770      	bx	lr

000043ac <z_ready_thread>:
{
    43ac:	b510      	push	{r4, lr}
    43ae:	f04f 0320 	mov.w	r3, #32
    43b2:	f3ef 8411 	mrs	r4, BASEPRI
    43b6:	f383 8811 	msr	BASEPRI, r3
    43ba:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    43be:	f7fe f90d 	bl	25dc <ready_thread>
	__asm__ volatile(
    43c2:	f384 8811 	msr	BASEPRI, r4
    43c6:	f3bf 8f6f 	isb	sy
}
    43ca:	bd10      	pop	{r4, pc}

000043cc <z_thread_timeout>:
{
    43cc:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
    43ce:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    43d2:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    43d4:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
    43d8:	b1c3      	cbz	r3, 440c <z_thread_timeout+0x40>
	__asm__ volatile(
    43da:	f04f 0320 	mov.w	r3, #32
    43de:	f3ef 8511 	mrs	r5, BASEPRI
    43e2:	f383 8811 	msr	BASEPRI, r3
    43e6:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    43ea:	f850 0c10 	ldr.w	r0, [r0, #-16]
    43ee:	f7fe f89f 	bl	2530 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    43f2:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    43f6:	f023 0302 	bic.w	r3, r3, #2
    43fa:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
    43fe:	2300      	movs	r3, #0
    4400:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
    4404:	f385 8811 	msr	BASEPRI, r5
    4408:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    440c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	z_ready_thread(thread);
    4410:	4608      	mov	r0, r1
    4412:	f023 0314 	bic.w	r3, r3, #20
    4416:	f804 3c0b 	strb.w	r3, [r4, #-11]
}
    441a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
    441e:	f7ff bfc5 	b.w	43ac <z_ready_thread>

00004422 <z_remove_thread_from_ready_q>:
{
    4422:	b510      	push	{r4, lr}
	__asm__ volatile(
    4424:	f04f 0320 	mov.w	r3, #32
    4428:	f3ef 8411 	mrs	r4, BASEPRI
    442c:	f383 8811 	msr	BASEPRI, r3
    4430:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
    4434:	f7fe fa30 	bl	2898 <unready_thread>
	__asm__ volatile(
    4438:	f384 8811 	msr	BASEPRI, r4
    443c:	f3bf 8f6f 	isb	sy
}
    4440:	bd10      	pop	{r4, pc}

00004442 <add_to_waitq_locked>:
{
    4442:	b538      	push	{r3, r4, r5, lr}
    4444:	4604      	mov	r4, r0
    4446:	460d      	mov	r5, r1
	unready_thread(thread);
    4448:	f7fe fa26 	bl	2898 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    444c:	7b63      	ldrb	r3, [r4, #13]
    444e:	f043 0302 	orr.w	r3, r3, #2
    4452:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4454:	b1c5      	cbz	r5, 4488 <add_to_waitq_locked+0x46>
	return list->head == list;
    4456:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    4458:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    445a:	429d      	cmp	r5, r3
    445c:	bf08      	it	eq
    445e:	2300      	moveq	r3, #0
    4460:	2b00      	cmp	r3, #0
    4462:	bf38      	it	cc
    4464:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4466:	b183      	cbz	r3, 448a <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    4468:	f994 100e 	ldrsb.w	r1, [r4, #14]
    446c:	f993 200e 	ldrsb.w	r2, [r3, #14]
    4470:	4291      	cmp	r1, r2
    4472:	db04      	blt.n	447e <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    4474:	686a      	ldr	r2, [r5, #4]
    4476:	429a      	cmp	r2, r3
    4478:	d007      	beq.n	448a <add_to_waitq_locked+0x48>
    447a:	681b      	ldr	r3, [r3, #0]
    447c:	e7f3      	b.n	4466 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    447e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4480:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    4484:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4486:	605c      	str	r4, [r3, #4]
}
    4488:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    448a:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    448c:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
    448e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    4490:	686b      	ldr	r3, [r5, #4]
    4492:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4494:	606c      	str	r4, [r5, #4]
    4496:	e7f7      	b.n	4488 <add_to_waitq_locked+0x46>

00004498 <z_unpend_first_thread>:
{
    4498:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    449a:	f04f 0320 	mov.w	r3, #32
    449e:	f3ef 8211 	mrs	r2, BASEPRI
    44a2:	f383 8811 	msr	BASEPRI, r3
    44a6:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    44aa:	f7ff ff75 	bl	4398 <z_priq_dumb_best>
    44ae:	4604      	mov	r4, r0
	__asm__ volatile(
    44b0:	f382 8811 	msr	BASEPRI, r2
    44b4:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    44b8:	b1c8      	cbz	r0, 44ee <z_unpend_first_thread+0x56>
	__asm__ volatile(
    44ba:	f04f 0320 	mov.w	r3, #32
    44be:	f3ef 8511 	mrs	r5, BASEPRI
    44c2:	f383 8811 	msr	BASEPRI, r3
    44c6:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    44ca:	4601      	mov	r1, r0
    44cc:	6880      	ldr	r0, [r0, #8]
    44ce:	f7fe f82f 	bl	2530 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    44d2:	7b63      	ldrb	r3, [r4, #13]
    44d4:	f023 0302 	bic.w	r3, r3, #2
    44d8:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
    44da:	2300      	movs	r3, #0
    44dc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    44de:	f385 8811 	msr	BASEPRI, r5
    44e2:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    44e6:	f104 0018 	add.w	r0, r4, #24
    44ea:	f000 f80a 	bl	4502 <z_abort_timeout>
}
    44ee:	4620      	mov	r0, r4
    44f0:	bd38      	pop	{r3, r4, r5, pc}

000044f2 <k_is_in_isr>:
    44f2:	f3ef 8005 	mrs	r0, IPSR
}
    44f6:	3800      	subs	r0, #0
    44f8:	bf18      	it	ne
    44fa:	2001      	movne	r0, #1
    44fc:	4770      	bx	lr

000044fe <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
    44fe:	f7fc ba5f 	b.w	9c0 <arch_busy_wait>

00004502 <z_abort_timeout>:
{
    4502:	b510      	push	{r4, lr}
	__asm__ volatile(
    4504:	f04f 0220 	mov.w	r2, #32
    4508:	f3ef 8411 	mrs	r4, BASEPRI
    450c:	f382 8811 	msr	BASEPRI, r2
    4510:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4514:	6803      	ldr	r3, [r0, #0]
    4516:	b13b      	cbz	r3, 4528 <z_abort_timeout+0x26>
			remove_timeout(to);
    4518:	f7fe fb96 	bl	2c48 <remove_timeout>
			ret = 0;
    451c:	2000      	movs	r0, #0
	__asm__ volatile(
    451e:	f384 8811 	msr	BASEPRI, r4
    4522:	f3bf 8f6f 	isb	sy
}
    4526:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4528:	f06f 0015 	mvn.w	r0, #21
    452c:	e7f7      	b.n	451e <z_abort_timeout+0x1c>

0000452e <z_get_next_timeout_expiry>:
{
    452e:	b510      	push	{r4, lr}
	__asm__ volatile(
    4530:	f04f 0320 	mov.w	r3, #32
    4534:	f3ef 8411 	mrs	r4, BASEPRI
    4538:	f383 8811 	msr	BASEPRI, r3
    453c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4540:	f7fe fb96 	bl	2c70 <next_timeout>
	__asm__ volatile(
    4544:	f384 8811 	msr	BASEPRI, r4
    4548:	f3bf 8f6f 	isb	sy
}
    454c:	bd10      	pop	{r4, pc}

0000454e <z_set_timeout_expiry>:
{
    454e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4550:	4604      	mov	r4, r0
    4552:	9101      	str	r1, [sp, #4]
	__asm__ volatile(
    4554:	f04f 0320 	mov.w	r3, #32
    4558:	f3ef 8511 	mrs	r5, BASEPRI
    455c:	f383 8811 	msr	BASEPRI, r3
    4560:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    4564:	f7fe fb84 	bl	2c70 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4568:	2801      	cmp	r0, #1
    456a:	dd05      	ble.n	4578 <z_set_timeout_expiry+0x2a>
    456c:	42a0      	cmp	r0, r4
    456e:	9901      	ldr	r1, [sp, #4]
    4570:	dd02      	ble.n	4578 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    4572:	4620      	mov	r0, r4
    4574:	f7fc fb02 	bl	b7c <z_clock_set_timeout>
	__asm__ volatile(
    4578:	f385 8811 	msr	BASEPRI, r5
    457c:	f3bf 8f6f 	isb	sy
}
    4580:	b003      	add	sp, #12
    4582:	bd30      	pop	{r4, r5, pc}

00004584 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    4584:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    4586:	f7fe fc5d 	bl	2e44 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    458a:	bd08      	pop	{r3, pc}

0000458c <k_heap_init>:
{
    458c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    458e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    4592:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    4596:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
    459a:	f7ff bbf9 	b.w	3d90 <sys_heap_init>

0000459e <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    459e:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

00005000 <spm_request_read-0x2fe0>:
	...

00007fe0 <spm_request_read>:
    7fe0:	e97f e97f 	sg
    7fe4:	f7f8 bfd0 	b.w	f88 <__acle_se_spm_request_read>

00007fe8 <spm_firmware_info>:
    7fe8:	e97f e97f 	sg
    7fec:	f7f9 b824 	b.w	1038 <__acle_se_spm_firmware_info>

00007ff0 <spm_request_random_number>:
    7ff0:	e97f e97f 	sg
    7ff4:	f7fb bfd7 	b.w	3fa6 <__acle_se_spm_request_random_number>
	...
